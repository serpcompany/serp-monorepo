[
  {
    "owner": "emdgroup",
    "repo": "baybe",
    "content": "TITLE: Generating Recommendations using BotorchRecommender in Python\nDESCRIPTION: This snippet demonstrates how to use the BotorchRecommender to generate recommendations in a stateless manner. It initializes the recommender and calls its recommend method with necessary parameters.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/getting_recommendations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrecommender = BotorchRecommender()\nrecommendation = recommender.recommend(batch_size, searchspace, objective, measurements)\n```\n\n----------------------------------------\n\nTITLE: Creating a Campaign in BayBE\nDESCRIPTION: Demonstrates how to create a Campaign object by specifying a searchspace, objective, and optional recommender. These components define the optimization problem that the campaign will address.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/campaigns.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe import Campaign\n\ncampaign = Campaign(\n    searchspace=searchspace,  # Required\n    objective=objective,  # Required\n    recommender=recommender,  # Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a BayBE Campaign\nDESCRIPTION: Initializes a Campaign object combining search space, objective, and recommender, then demonstrates the recommend-measure loop by requesting experiments and adding measurement results. This shows the core workflow of using BayBE.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe import Campaign\n\ncampaign = Campaign(searchspace, objective, recommender)\n\ndf = campaign.recommend(batch_size=3)\nprint(df)\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Space from Parameters in BayBE\nDESCRIPTION: Constructs a SearchSpace object from the Cartesian product of all possible parameter values defined earlier. This establishes the complete experimental design space to explore.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.searchspace import SearchSpace\n\nsearchspace = SearchSpace.from_product(parameters)\n```\n\n----------------------------------------\n\nTITLE: Defining Optimization Targets and Objectives in BayBE\nDESCRIPTION: Creates a numerical target for yield maximization and wraps it in a SingleTargetObjective for optimization. This establishes what the experimental campaign aims to achieve.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.targets import NumericalTarget\nfrom baybe.objectives import SingleTargetObjective\n\ntarget = NumericalTarget(\n    name=\"Yield\",\n    mode=\"MAX\",\n)\nobjective = SingleTargetObjective(target=target)\n```\n\n----------------------------------------\n\nTITLE: Creating SingleTargetObjective in Python\nDESCRIPTION: Demonstrates how to create a SingleTargetObjective using a NumericalTarget for yield optimization. It also shows a convenience method for converting a Target to an Objective.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/objectives.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.targets import NumericalTarget\nfrom baybe.objectives import SingleTargetObjective\n\ntarget = NumericalTarget(name=\"Yield\", mode=\"MAX\")\nobjective = SingleTargetObjective(target)\n\n# Convenience method\nobjective = target.to_objective()\n```\n\n----------------------------------------\n\nTITLE: Handling Pending Experiments in BayBE Recommendation Workflow\nDESCRIPTION: This code demonstrates how to mark experiments as pending when getting new recommendations. It shows splitting recommendations into finished and pending sets, adding measurements for completed experiments, and then generating new recommendations while marking ongoing experiments as pending to avoid duplicates.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/async.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.utils.dataframe import add_fake_measurements\n\n# Get a set of 10 recommendation\nrec = campaign.recommend(batch_size=10)\n\n# Split recommendations into two parts\nrec_finished = rec.iloc[:5]\nrec_pending = rec.iloc[5:]\n\n# Add target measurements to the finished part. Here we add fake results\nadd_fake_measurements(rec_finished, campaign.targets)\ncampaign.add_measurements(rec_finished)\n\n# Get the next set of recommendations, incorporating the still unfinished experiments.\n# These will not include the experiments marked as pending again.\nrec_next = campaign.recommend(10, pending_experiments=rec_pending)\n```\n\n----------------------------------------\n\nTITLE: Adding Measurement Results to BayBE Campaign\nDESCRIPTION: Adds experimental measurement results to the campaign by attaching yield values to the previously recommended experiment settings. This completes one iteration of the recommend-measure loop.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf[\"Yield\"] = [79.8, 54.1, 59.4]\ncampaign.add_measurements(df)\n```\n\n----------------------------------------\n\nTITLE: Configuring the Optimization Strategy in BayBE\nDESCRIPTION: Sets up a two-phase recommendation strategy that uses farthest point sampling initially and switches to Bayesian optimization once measurements are available. This defines how BayBE will suggest new experimental points.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.recommenders import (\n    BotorchRecommender,\n    FPSRecommender,\n    TwoPhaseMetaRecommender,\n)\n\nrecommender = TwoPhaseMetaRecommender(\n    initial_recommender=FPSRecommender(),  # farthest point sampling\n    recommender=BotorchRecommender(),  # Bayesian model-based optimization\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing NumericalDiscreteParameter in BayBE\nDESCRIPTION: Creates a discrete numerical parameter with specified values. Supports both equidistant and unevenly spaced sets of numbers.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import NumericalDiscreteParameter\n\nNumericalDiscreteParameter(\n    name=\"Temperature\",\n    # you can also use np.arange or similar to provide values\n    values=(0, 10, 20, 30, 40, 50),\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Recommendations from a BayBE Campaign\nDESCRIPTION: Shows how to obtain recommendations for the next batch of experiments using the recommend method. The batch_size parameter specifies the number of experiments to be recommended.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/campaigns.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrec = campaign.recommend(batch_size=3)\n```\n\n----------------------------------------\n\nTITLE: Comparing Experimental and Computational Representations in Python\nDESCRIPTION: Illustrates the difference between experimental and computational representations of parameters in discrete subspaces. Shows how categorical parameters are encoded (using one-hot encoding) for internal computation.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/searchspace.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import NumericalDiscreteParameter, CategoricalParameter\n\nspeed = CategoricalParameter(\"Speed\", values=[\"slow\", \"normal\", \"fast\"], encoding=\"OHE\")\ntemperature = NumericalDiscreteParameter(name=\"Temperature\", values=[90, 105])\n\nsubspace = SubspaceDiscrete.from_product(parameters=[speed, temperature])\n```\n\n----------------------------------------\n\nTITLE: Adding Measurements to a BayBE Campaign\nDESCRIPTION: Demonstrates how to add experimental results to a campaign by updating the recommendation DataFrame with target values and passing it to add_measurements. This allows the campaign to learn from completed experiments.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/campaigns.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrec[\"Target_max\"] = [2, 4, 9]  # 3 values matching the batch_size of 3\ncampaign.add_measurements(rec)\nnew_rec = campaign.recommend(batch_size=5)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Search Space in BayBE\nDESCRIPTION: Defines three experiment parameters (categorical, numerical discrete, and substance) with their respective values and encodings. These parameters represent the control variables that can be adjusted during experiments.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import (\n    CategoricalParameter,\n    NumericalDiscreteParameter,\n    SubstanceParameter,\n)\n\nparameters = [\n    CategoricalParameter(\n        name=\"Granularity\",\n        values=[\"coarse\", \"medium\", \"fine\"],\n        encoding=\"OHE\",  # one-hot encoding of categories\n    ),\n    NumericalDiscreteParameter(\n        name=\"Pressure[bar]\",\n        values=[1, 5, 10],\n        tolerance=0.2,  # allows experimental inaccuracies up to 0.2 when reading values\n    ),\n    SubstanceParameter(\n        name=\"Solvent\",\n        data={\n            \"Solvent A\": \"COC\",\n            \"Solvent B\": \"CCC\",  # label-SMILES pairs\n            \"Solvent C\": \"O\",\n            \"Solvent D\": \"CS(=O)C\",\n        },\n        encoding=\"MORDRED\",  # chemical encoding via scikit-fingerprints\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing MIN and MAX Mode NumericalTargets in Python\nDESCRIPTION: Examples showing how to create NumericalTarget objects for maximization and minimization scenarios. The example demonstrates setting the target name, optimization mode, optional bounds, and transformation function.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/targets.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.targets import NumericalTarget, TargetMode, TargetTransformation\n\nmax_target = NumericalTarget(\n    name=\"Target_1\",\n    mode=TargetMode.MAX,  # can also be provided as string \"MAX\"\n)\n\nmin_target = NumericalTarget(\n    name=\"Target_2\",\n    mode=\"MIN\",  # can also be provided as TargetMode.MIN\n    bounds=(0, 100),  # optional\n    transformation=TargetTransformation.LINEAR,  # optional, will be applied if bounds are not None\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Posterior Statistics in Python\nDESCRIPTION: Demonstrates how to get predictive statistics for candidate points using the campaign.posterior_stats method. Returns a table with statistics like mean and standard deviation for target predictions.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/campaigns.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstats = campaign.posterior_stats(rec)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Campaign for Stateful Recommendations in Python\nDESCRIPTION: This code shows how to create a Campaign object for stateful interactions with BayBE. It initializes the campaign with a recommender, adds measurements, and generates recommendations.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/getting_recommendations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrecommender = BotorchRecommender()\ncampaign = Campaign(searchspace, objective, recommender)\ncampaign.add_measurements(measurements)\nrecommendation = campaign.recommend(batch_size)\n```\n\n----------------------------------------\n\nTITLE: Defining ContinuousLinearConstraint in Python for BayBE\nDESCRIPTION: This snippet demonstrates how to create a ContinuousLinearConstraint to ensure that three parameters sum up to 1.0 in a mixture campaign.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import ContinuousLinearConstraint\n\nContinuousLinearConstraint(\n    parameters=[\"x_1\", \"x_2\", \"x_3\"],  # these parameters must exist in the search space\n    operator=\"=\",\n    coefficients=[1.0, 1.0, 1.0],\n    rhs=1.0,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Partial Results for Multi-Target Measurements in BayBE\nDESCRIPTION: This code demonstrates how to handle partial results in BayBE when some target measurements are complete while others are still pending. It uses various methods to mark unmeasured targets as NaN, allowing the campaign to incorporate available data while waiting for remaining measurements.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/async.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\n\nrec = campaign.recommend(batch_size=3)\n# Resetting the index to have easier access via .loc later\nmeasurements = rec.reset_index(drop=True)\n\n# Add measurement results\nmeasurements.loc[0, \"Target_1\"] = 10.3\nmeasurements.loc[0, \"Target_2\"] = 0.5\nmeasurements.loc[0, \"Target_3\"] = 11.1\n\nmeasurements.loc[1, \"Target_1\"] = 7.1\nmeasurements.loc[1, \"Target_2\"] = np.nan  # not measured yet\nmeasurements.loc[1, \"Target_3\"] = 12.2\n\nmeasurements.loc[2, \"Target_1\"] = 11.4\nmeasurements.loc[2, \"Target_2\"] = pd.NA  # not measured yet\nmeasurements.loc[2, \"Target_3\"] = None  # not measured yet\n\nmeasurements\n\n# Proceed with campaign.add_measurements ...\n```\n\n----------------------------------------\n\nTITLE: Creating TaskParameters for Different Scenarios in Python\nDESCRIPTION: This snippet shows how to create TaskParameters for different transfer learning scenarios, such as changing substrates or cell lines. It demonstrates the flexibility of the TaskParameter approach.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/transfer_learning.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTaskParameter(\n    name=\"Substrate\",\n    values=[\"3,5-dimethylisoxazole\", \"benzo[d]isoxazole\", \"5-methylisoxazole\"],\n    active_values=[\"3,5-dimethylisoxazole\"],\n)\nTaskParameter(\n    name=\"Cell_Line\",\n    values=[\"Liver cell\", \"Heart cell\", \"Hamster brain cell\"],\n    active_values=[\"Liver cell\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating DesirabilityObjective with Multiple Targets in Python\nDESCRIPTION: Shows how to create a DesirabilityObjective with three NumericalTargets, specifying weights and a scalarizer. This objective type combines multiple targets into a single numerical value.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/objectives.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.targets import NumericalTarget\nfrom baybe.objectives import DesirabilityObjective\n\ntarget_1 = NumericalTarget(name=\"t_1\", mode=\"MIN\", bounds=(0, 100))\ntarget_2 = NumericalTarget(name=\"t_2\", mode=\"MIN\", bounds=(0, 100))\ntarget_3 = NumericalTarget(name=\"t_3\", mode=\"MATCH\", bounds=(40, 60))\nobjective = DesirabilityObjective(\n    targets=[target_1, target_2, target_3],\n    weights=[2.0, 1.0, 1.0],  # optional (by default, all weights are equal)\n    scalarizer=\"GEOM_MEAN\",  # optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating ParetoObjective for Multi-Target Optimization in Python\nDESCRIPTION: Demonstrates how to create a ParetoObjective with two NumericalTargets for finding optimal trade-offs among multiple conflicting targets. This approach does not aggregate targets into a single value but identifies non-dominated configurations.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/objectives.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.targets import NumericalTarget\nfrom baybe.objectives import ParetoObjective\n\ntarget_1 = NumericalTarget(name=\"t_1\", mode=\"MIN\")\ntarget_2 = NumericalTarget(name=\"t_2\", mode=\"MAX\")\nobjective = ParetoObjective(targets=[target_1, target_2])\n```\n\n----------------------------------------\n\nTITLE: Dynamic Exclusion with Recommenders in Python\nDESCRIPTION: This snippet demonstrates how to dynamically exclude configurations when using Recommenders. It shows recommendations with both full and reduced search spaces.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/getting_recommendations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Recommendation with full search space\nsearchspace_full = CategoricalParameter(\"p\", [\"A\", \"B\", \"C\"]).to_searchspace()\nrecommender.recommend(batch_size, searchspace_full, objective, measurements)\n\n# Recommendation with reduced search space\nsearchspace_reduced = TaskParameter(\n    \"p\", [\"A\", \"B\", \"C\"], active_values=[\"A\", \"B\"]\n).to_searchspace()\nrecommender.recommend(batch_size, searchspace_reduced, objective, measurements)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Analyzing Surrogate Models with SHAP in Python\nDESCRIPTION: Example of extracting a surrogate model from a campaign and using it with the SHAP package for model interpretation and feature importance analysis.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/surrogates.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Assuming we already have a campaign created and measurements added\ndata = campaign.measurements[[p.name for p in campaign.parameters]]\nmodel = lambda x: campaign.get_surrogate().posterior(x).mean\n\n# Apply SHAP\nexplainer = shap.Explainer(model, data)\nshap_values = explainer(data)\nshap.plots.bar(shap_values)\n```\n\n----------------------------------------\n\nTITLE: Creating a Continuous Subspace from Explicit Bounds in Python\nDESCRIPTION: Shows how to create a continuous subspace by specifying explicit bounds for parameters. This creates a hyperrectangle-shaped search space defined by the lower and upper bounds of each parameter.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/searchspace.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.searchspace import SubspaceContinuous\n\nbounds = pd.DataFrame({\"param1\": [0, 1], \"param2\": [-1, 1]})\nsubspace = continuous = SubspaceContinuous.from_bounds(bounds)\n```\n\n----------------------------------------\n\nTITLE: Creating a SearchSpace from a DataFrame with Mixed Parameter Types in Python\nDESCRIPTION: This example demonstrates how to create a SearchSpace object from a pandas DataFrame containing both continuous and discrete parameters. It requires explicit parameter definitions to be provided, unlike the subspace counterparts which can infer parameter specifications.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/searchspace.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.searchspace import SearchSpace\n\np_cont = NumericalContinuousParameter(name=\"c\", bounds=[0, 1])\np_disc = NumericalDiscreteParameter(name=\"d\", values=[1, 2, 3])\ndf = pd.DataFrame({\"c\": [0.3, 0.7], \"d\": [2, 3]})\nsearchspace = SearchSpace.from_dataframe(df=df, parameters=[p_cont, p_disc])\nprint(searchspace)\n```\n\n----------------------------------------\n\nTITLE: Simulating Multiple Scenarios with Monte Carlo Iterations\nDESCRIPTION: This code snippet demonstrates how to simulate multiple experiment scenarios using the simulate_scenarios function. It allows specifying multiple campaigns as different scenarios and supports Monte Carlo iterations to average out random effects.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/simulation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlookup = ...  # some reasonable lookup, e.g. a Callable\ncampaign1 = Campaign(...)\ncampaign2 = Campaign(...)\nscenarios = {\"Campaign 1\": campaign1, \"Campaign 2\": campaign2}\n\nresults = simulate_scenarios(\n    scenarios=scenarios,\n    lookup=lookup,\n    batch_size=batch_size,\n    n_doe_iterations=n_doe_iterations,\n    n_mc_iterations=n_mc_iterations,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Output Surrogates via Replication in Python\nDESCRIPTION: Demonstrates how to create multi-output surrogate models by replicating a single-output model using two equivalent methods: direct replication and CompositeSurrogate constructor.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/surrogates.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.surrogates import CompositeSurrogate, GaussianProcessSurrogate\n\ncomposite_a = GaussianProcessSurrogate().replicate()\ncomposite_b = CompositeSurrogate.from_replication(GaussianProcessSurrogate())\n\nassert composite_a == composite_b\n```\n\n----------------------------------------\n\nTITLE: Calculating Acquisition Values in Python\nDESCRIPTION: Demonstrates computing individual and joint acquisition values for candidate experiments using campaign methods acquisition_values and joint_acquisition_value.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/campaigns.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrec = campaign.recommend(5)\nacq_values = campaign.acquisition_values(rec)  # contains 5 numbers\njoint_acq_value = campaign.joint_acquisition_value(rec)  # contains 1 number\n```\n\n----------------------------------------\n\nTITLE: Serializing Nested Objects with DesirabilityObjective in Python\nDESCRIPTION: This snippet demonstrates how to create a hierarchical structure of BayBE objects with a DesirabilityObjective containing multiple NumericalTargets, and how this hierarchy can be replicated in JSON serialization.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.objectives import DesirabilityObjective\nfrom baybe.targets import NumericalTarget\n\nobjective = DesirabilityObjective(\n    targets=[\n        NumericalTarget(name=\"T1\", mode=\"MAX\", bounds=(-1, 1)),\n        NumericalTarget(name=\"T2\", mode=\"MIN\", bounds=(0, 1)),\n    ],\n    weights=[0.1, 0.9],\n    scalarizer=\"MEAN\",\n)\n\nobjective_json = \"\"\"\n{   \n    \"targets\": [\n        {\n            \"type\": \"NumericalTarget\",\n            \"name\": \"T1\",\n            \"mode\": \"MAX\",\n            \"bounds\": [-1.0, 1.0]\n        }, \n        {\n            \"type\": \"NumericalTarget\",\n            \"name\": \"T2\",\n            \"mode\": \"MIN\",\n            \"bounds\": [0.0, 1.0]\n        }\n    ],\n    \"weights\": [0.1, 0.9],\n    \"scalarizer\": \"MEAN\"\n}\n\"\"\"\n\nassert objective == DesirabilityObjective.from_json(objective_json)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Composite Surrogates in Python\nDESCRIPTION: Shows how to manually create composite surrogate models using different architectures for different output targets.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/surrogates.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.surrogates import (\n    CompositeSurrogate,\n    GaussianProcessSurrogate,\n    RandomForestSurrogate,\n)\n\nsurrogate = CompositeSurrogate(\n    {\n        \"target_a\": GaussianProcessSurrogate(),\n        \"target_b\": RandomForestSurrogate(),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring qNIPV Acquisition Function for Global Uncertainty Reduction in Python\nDESCRIPTION: Example configurations of the qNegIntegratedPosteriorVariance (qNIPV) acquisition function. Shows how to integrate over the entire search space, how to use random sampling over a fraction of the search space, and how to use farthest point sampling for a specific number of points.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/active_learning.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.acquisition import qNIPV\nfrom baybe.utils.sampling_algorithms import DiscreteSamplingMethod\n\n# Will integrate over the entire search space\nqNIPV()\n\n# Will integrate over 50% of the search space, randomly sampled\nqNIPV(sampling_fraction=0.5)\n\n# Will integrate over 250 points, chosen by farthest point sampling\n# Both lines are equivalent\nqNIPV(sampling_n_points=250, sampling_method=\"FPS\")\nqNIPV(sampling_n_points=250, sampling_method=DiscreteSamplingMethod.FPS)\n```\n\n----------------------------------------\n\nTITLE: Implementing ContinuousLinearConstraint for Partial Mixture in BayBE\nDESCRIPTION: This example shows how to use ContinuousLinearConstraint to ensure that three components make up at most 80% of a mixture, allowing for a fourth 'filler' component.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import ContinuousLinearConstraint\n\nContinuousLinearConstraint(\n    parameters=[\"x_1\", \"x_2\", \"x_3\"],\n    operator=\"<=\",\n    coefficients=[1.0, 1.0, 1.0],\n    rhs=0.8,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing TwoPhaseMetaRecommender in Python\nDESCRIPTION: Example showing how to initialize a TwoPhaseMetaRecommender that starts with random recommendations and switches to Bayesian optimization after the first batch. Uses RandomRecommender for initial phase and BotorchRecommender for subsequent recommendations.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/recommenders.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.recommenders import (\n    BotorchRecommender,\n    TwoPhaseMetaRecommender,\n    RandomRecommender,\n)\n\nrecommender = TwoPhaseMetaRecommender(\n    initial_recommender=RandomRecommender(), recommender=BotorchRecommender()\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Discrete Subspace from Parameter Products in Python\nDESCRIPTION: Demonstrates how to construct a discrete subspace by forming the cartesian product of multiple parameter types, including numerical discrete and categorical parameters. This creates a complete search space of all possible parameter combinations.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/searchspace.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import NumericalDiscreteParameter, CategoricalParameter\nfrom baybe.searchspace import SubspaceDiscrete\n\nparameters = [\n    NumericalDiscreteParameter(name=\"x0\", values=[1, 2, 3]),\n    NumericalDiscreteParameter(name=\"x1\", values=[4, 5, 6]),\n    CategoricalParameter(name=\"Speed\", values=[\"slow\", \"normal\", \"fast\"]),\n]\nsubspace = SubspaceDiscrete.from_product(parameters=parameters)\n```\n\n----------------------------------------\n\nTITLE: Restricting Search Space with Active Values in Python\nDESCRIPTION: This code shows how to create a reduced search space by specifying active values for a TaskParameter. It limits the active values to 'A' and 'B'.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/getting_recommendations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsearchspace_reduced = TaskParameter(\n    \"p\", [\"A\", \"B\", \"C\"], active_values=[\"A\", \"B\"]\n).to_searchspace()\n```\n\n----------------------------------------\n\nTITLE: Simulating a Single Experiment with BayBE\nDESCRIPTION: This code snippet shows how to simulate a single execution of a DoE loop using the simulate_experiment function. It runs for a specific number of iterations or until the search space is fully observed, returning a dataframe with the results.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/simulation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresults = simulate_experiment(\n    # Necessary\n    campaign=campaign,\n    # Technically optional but should always be set\n    lookup=lookup,\n    # Optional\n    batch_size=batch_size,\n    n_doe_iterations=n_doe_iterations,\n    initial_data=initial_data,\n    random_seed=random_seed,\n    impute_mode=impute_mode,\n    noise_percent=noise_percent,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing NumericalContinuousParameter in BayBE\nDESCRIPTION: Creates a continuous numerical parameter with specified name and bounds. Used for parameters that can take any value within a defined numerical interval.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import NumericalContinuousParameter\n\nNumericalContinuousParameter(\n    name=\"Temperature\",\n    bounds=(0, 100),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Fake Measurements and Parameter Noise for Testing in Python\nDESCRIPTION: Shows how to use add_fake_measurements and add_parameter_noise utilities to generate artificial target values and parameter noise for testing BayBE recommendation loops without real measurements.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/utils.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.utils.dataframe import add_fake_measurements, add_parameter_noise\n\n# Get recommendations\nrecommendations = campaign.recommend(5)\n\n# Add fake target measurements and artificial parameter noise to the recommendations.\n# The utilities modify the dataframes inplace.\nmeasurements = recommendations.copy()\nadd_fake_measurements(measurements, campaign.targets)\nadd_parameter_noise(measurements, campaign.parameters)\n\n# Now continue the loop, e.g. by adding the measurements...\n```\n\n----------------------------------------\n\nTITLE: Estimating Search Space Memory Requirements in Python\nDESCRIPTION: Demonstrates how to estimate memory requirements for discrete search spaces using the SearchSpace.estimate_product_space_size utility. This function calculates the memory needed for both experimental and computational representations of a combinatorial search space.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/utils.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nfrom baybe.parameters import NumericalDiscreteParameter\nfrom baybe.searchspace import SearchSpace\n\n# This creates 10 parameters with 20 values each.\n# The resulting space would have 20^10 entries, requiring around 745 TB of memory for\n# both experimental and computational representation of the search space.\nparameters = [\n    NumericalDiscreteParameter(name=f\"p{k + 1}\", values=np.linspace(0, 100, 20))\n    for k in range(10)\n]\n\n# Estimate the required memory for such a space\nmem_estimate = SearchSpace.estimate_product_space_size(parameters)\n\n# Print quantities of interest\nprint(\"Experimental Representation\")\nprint(f\"Estimated size: {mem_estimate.exp_rep_human_readable}\")\nprint(f\"Estimated size in Bytes: {mem_estimate.exp_rep_bytes}\")\nprint(f\"Expected data frame shape: {mem_estimate.exp_rep_shape}\")\n\nprint(\"Computational Representation\")\nprint(f\"Estimated size: {mem_estimate.comp_rep_human_readable}\")\nprint(f\"Estimated size in Bytes: {mem_estimate.comp_rep_bytes}\")\nprint(f\"Expected data frame shape: {mem_estimate.comp_rep_shape}\")\n```\n\n----------------------------------------\n\nTITLE: Creating SHAP Insights from Surrogate Model in BayBE\nDESCRIPTION: Creates a SHAP insight object from a surrogate model and provided data. The data parameter specifies the background data used to build the underlying explainer model.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/insights.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninsight = SHAPInsight.from_surrogate(surrogate, data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Callable Lookup Function for Parameter-to-Target Mapping in Python\nDESCRIPTION: This example demonstrates how to create a callable lookup function that maps parameter configurations to target values. The function takes a dataframe of parameter configurations as input and returns the target values as another dataframe, maintaining index correspondence.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/simulation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\nfrom baybe.parameters import NumericalContinuousParameter\nfrom baybe.searchspace import SearchSpace\nfrom baybe.targets import NumericalTarget\n\nsearchspace = SearchSpace.from_product(\n    [\n        NumericalContinuousParameter(\"p1\", [0, 1]),\n        NumericalContinuousParameter(\"p2\", [-1, 1]),\n    ]\n)\nobjective = NumericalTarget(\"t1\", \"MAX\").to_objective()\n\n\ndef lookup(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Map parameter configurations to target values.\"\"\"\n    return pd.DataFrame({\"t1\": df[\"p1\"] ** 2}, index=df.index)\n\n\nlookup(searchspace.continuous.sample_uniform(10))\n```\n\n----------------------------------------\n\nTITLE: Campaign Serialization in Python\nDESCRIPTION: Demonstrates how to serialize and deserialize Campaign objects using to_json and from_json methods for persistent storage.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/campaigns.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncampaign_json = campaign.to_json()\nreconstructed = Campaign.from_json(campaign_json)\nassert campaign == reconstructed\n```\n\n----------------------------------------\n\nTITLE: Creating SHAP Insights from Recommender in BayBE\nDESCRIPTION: Creates a SHAP insight object from a Bayesian recommender that implements the get_surrogate method. Requires additional parameters including searchspace, objective, and background data for the explainer.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/insights.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninsight = SHAPInsight.from_recommender(recommender, searchspace, objective, data)\n```\n\n----------------------------------------\n\nTITLE: Applying Constraints to Search Spaces in Python\nDESCRIPTION: This snippet shows how to apply constraints when constructing a search space. The constraints are passed as a list to the constructor, which then applies them to the appropriate subspace based on their type.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/searchspace.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconstraints = [...]\n# Using one example constructor here\nsearchspace = SearchSpace.from_product(parameters=parameters, constraints=constraints)\n```\n\n----------------------------------------\n\nTITLE: Generating Force Plot for Specific Data Point in BayBE\nDESCRIPTION: Creates a force plot for a single data point by specifying its index. The force plot shows how each parameter contributes to pushing the model output from the base value to the predicted value for that specific measurement.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/insights.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ninsight.plot(\n    \"force\", explanation_index=3\n)  # plots the force analysis of the measurement at positional index 3\n```\n\n----------------------------------------\n\nTITLE: Generating Bar Plot for SHAP Insights in BayBE\nDESCRIPTION: Creates a bar plot visualization of SHAP values to show parameter importance. This uses the default background data provided when creating the insight object.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/insights.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninsight.plot(\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Creating SHAP Insights from Campaign in BayBE\nDESCRIPTION: Creates a SHAP insight object from a campaign to analyze parameter importance. This method automatically extracts measurements from the campaign object to use as background data for the explainer model.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/insights.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ninsight = SHAPInsight.from_campaign(campaign)\n```\n\n----------------------------------------\n\nTITLE: Filtering Search Space with Constraints in Python\nDESCRIPTION: This code shows how to create a reduced search space using constraints. It excludes the value 'C' from the parameter 'p' using a DiscreteExcludeConstraint.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/getting_recommendations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsearchspace_reduced = SearchSpace.from_product(\n    parameters=[CategoricalParameter(\"p\", [\"A\", \"B\", \"C\"])],\n    constraints=[DiscreteExcludeConstraint([\"p\"], [SubSelectionCondition([\"C\"])])],\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Beeswarm Plot with New Data in BayBE\nDESCRIPTION: Creates a beeswarm plot for SHAP values using a new dataset instead of the background data. This allows comparison of parameter importance across different measurement sets.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/insights.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ninsight.plot(\"beeswarm\", new_measurements)\n```\n\n----------------------------------------\n\nTITLE: Creating ContinuousCardinalityConstraint in BayBE\nDESCRIPTION: This code demonstrates how to use ContinuousCardinalityConstraint to control the number of active factors in designs, ensuring a minimum of one and a maximum of two components in each parameter configuration.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import ContinuousCardinalityConstraint\n\nContinuousCardinalityConstraint(\n    parameters=[\"x_1\", \"x_2\", \"x_3\"],\n    min_cardinality=1,  # defaults to 0\n    max_cardinality=2,  # defaults to the number of affected parameters (here: 3)\n    relative_threshold=0.001,  # optional, defines the range of values considered active\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscreteSumConstraint in BayBE\nDESCRIPTION: This example demonstrates how to use DiscreteSumConstraint to ensure that the sum of discrete parameters equals a specific value, with an optional tolerance for numerical precision.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import DiscreteSumConstraint, ThresholdCondition\n\nDiscreteSumConstraint(\n    parameters=[\"x_1\", \"x_2\", \"x_3\"],\n    condition=ThresholdCondition(  # set condition that should apply to the sum\n        threshold=1.0,\n        operator=\"=\",\n        tolerance=0.001,  # optional; here, everything between 0.999 and 1.001 would also be considered valid\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating DiscreteExcludeConstraint in BayBE\nDESCRIPTION: This snippet shows how to use DiscreteExcludeConstraint to exclude specific combinations from the search space, such as excluding certain solvents at high temperatures.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import (\n    DiscreteExcludeConstraint,\n    ThresholdCondition,\n    SubSelectionCondition,\n)\n\nDiscreteExcludeConstraint(\n    parameters=[\"Temperature\", \"Solvent\"],  # names of the affected parameters\n    combiner=\"AND\",  # specifies how the conditions are logically combined\n    conditions=[  # requires one condition for each entry in parameters\n        ThresholdCondition(threshold=150, operator=\">\"),\n        SubSelectionCondition(selection=[\"Ethanol\", \"DMF\"]),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CategoricalParameter in BayBE\nDESCRIPTION: Creates a categorical parameter with string labels and optional encoding type. Supports integer or one-hot encoding for categorical values.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import CategoricalParameter\n\nCategoricalParameter(\n    name=\"Intensity\",\n    values=(\"low\", \"medium\", \"high\"),\n    active_values=(\n        \"low\",  # optional, only combinations with Intensity=low will be recommended\n    ),\n    encoding=\"INT\",  # optional, uses integer encoding as described above\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing a Continuous Subspace from DataFrame in Python\nDESCRIPTION: Demonstrates creating a continuous subspace from a DataFrame of points. This method creates the smallest axis-aligned hyperrectangle that contains all the specified points, automatically inferring parameter types.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/searchspace.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import NumericalContinuousParameter\nfrom baybe.searchspace.continuous import SubspaceContinuous\n\npoints = pd.DataFrame(\n    {\n        \"param1\": [0, 1, 2],\n        \"param2\": [-1, 0, 1],\n    }\n)\nsubspace = SubspaceContinuous.from_dataframe(df=points)\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscreteLinkedParametersConstraint in Python\nDESCRIPTION: This code shows how to use DiscreteLinkedParametersConstraint to ensure that only entries with duplicated labels are present, useful for including a parameter with multiple encodings.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import SubstanceParameter\nfrom baybe.constraints import DiscreteLinkedParametersConstraint\n\ndict_solvents = {\"Water\": \"O\", \"THF\": \"C1CCOC1\", \"Octanol\": \"CCCCCCCCO\"}\nsolvent_encoding1 = SubstanceParameter(\n    name=\"Solvent_RDKIT_enc\",\n    data=dict_solvents,\n    encoding=\"RDKIT\",\n)\nsolvent_encoding2 = SubstanceParameter(\n    name=\"Solvent_MORDRED_enc\",\n    data=dict_solvents,\n    encoding=\"MORDRED\",\n)\nDiscreteLinkedParametersConstraint(\n    parameters=[\"Solvent_RDKIT_enc\", \"Solvent_MORDRED_enc\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Computing Custom Posterior Statistics in Python\nDESCRIPTION: Shows how to calculate custom statistics including mode and quantiles for target predictions using campaign.posterior_stats with specific statistic names.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/campaigns.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstats = campaign.posterior_stats(rec, stats=[\"mode\", 0.5])\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Constructors in JSON Serialization with SearchSpace\nDESCRIPTION: This example shows how to invoke alternative constructors when deserializing BayBE objects using the 'constructor' field in JSON. It creates a SearchSpace from a list of parameters using the from_product constructor.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.searchspace import SearchSpace\nfrom baybe.parameters import CategoricalParameter, NumericalDiscreteParameter\n\nsearchspace = SearchSpace.from_product(\n    parameters=[\n        CategoricalParameter(name=\"Category\", values=[\"low\", \"high\"]),\n        NumericalDiscreteParameter(name=\"Number\", values=[1, 2, 3]),\n    ]\n)\n\nsearchspace_json = \"\"\"\n{\n    \"constructor\": \"from_product\",\n    \"parameters\": [\n        {\n            \"type\": \"CategoricalParameter\",\n            \"name\": \"Category\",\n            \"values\": [\"low\", \"high\"]\n        },\n        {\n            \"type\": \"NumericalDiscreteParameter\",\n            \"name\": \"Number\",\n            \"values\": [1, 2, 3]\n        }\n    ]\n}\n\"\"\"\n\nassert searchspace == SearchSpace.from_json(searchspace_json)\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscreteDependenciesConstraint in Python\nDESCRIPTION: This example demonstrates the use of DiscreteDependenciesConstraint to handle dependencies between parameters, such as equipment switches activating other parameters.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import DiscreteDependenciesConstraint, SubSelectionCondition\n\nDiscreteDependenciesConstraint(\n    parameters=[\"Switch_1\", \"Switch_2\"],  # the two parameters upon which others depend\n    conditions=[\n        SubSelectionCondition(\n            # values of Switch_1 that activate the affected parameters\n            selection=[\"on\"]\n        ),\n        SubSelectionCondition(\n            # values of Switch_2 that activate the affected parameters\n            selection=[\"right\"]\n        ),\n    ],\n    affected_parameters=[\n        [\"Solvent\", \"Fraction\"],  # parameters affected by Switch_1\n        [\"Frame_1\", \"Frame_2\"],  # parameters affected by Switch_2\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simplex-Bound Discrete Subspace in Python\nDESCRIPTION: Demonstrates creating a discrete search space that is constrained by a simplex boundary (limiting the sum of parameters). This method efficiently generates only valid combinations rather than creating the full product space first.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/searchspace.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nparameters = [\n    NumericalDiscreteParameter(name=\"p1\", values=[0, 0.25, 0.5, 0.75, 1]),\n    NumericalDiscreteParameter(name=\"p2\", values=[0, 0.25, 0.5, 0.75, 1]),\n]\nsubspace = SubspaceDiscrete.from_simplex(max_sum=1.0, simplex_parameters=parameters)\n```\n\n----------------------------------------\n\nTITLE: Initializing TaskParameter for Transfer Learning in Python\nDESCRIPTION: This snippet demonstrates how to create a TaskParameter for transfer learning across different reactors. It defines the possible reactor values and specifies which reactor is active for the current campaign.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/transfer_learning.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import TaskParameter\n\nTaskParameter(\n    name=\"Reactor\",\n    values=[\"ReactorA\", \"ReactorB\", \"ReactorC\"],\n    active_values=[\"ReactorC\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ThresholdCondition for Discrete Constraints in BayBE\nDESCRIPTION: This snippet shows how to create a ThresholdCondition to select all values above 150 for numerical parameters in discrete constraints.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import ThresholdCondition\n\nThresholdCondition(  # will select all values above 150\n    threshold=150,\n    operator=\">\",\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Exclusion with Campaigns in Python\nDESCRIPTION: This code illustrates how to dynamically exclude configurations when using Campaigns. It uses the toggle_discrete_candidates method to exclude specific candidates during the campaign.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/getting_recommendations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncampaign = Campaign(searchspace_full, objective, measurements)\ncampaign.add_measurements(measurements)\n\n# Recommendation with full search space\ncampaign.recommend(batch_size)\n\n# Exclude *matching* rows\ncampaign.toggle_discrete_candidates(\n    pd.DataFrame({\"p\": [\"C\"]}),\n    exclude=True,\n)\n# Alternatively: Exclude *non-matching* rows\ncampaign.toggle_discrete_candidates(\n    pd.DataFrame({\"p\": [\"A\", \"B\"]}),\n    complement=True,\n    exclude=True,\n)\n\n# Recommend from reduced search space using altered candidate set\ncampaign.recommend(batch_size)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Random Seeds for Reproducibility in Python\nDESCRIPTION: Shows how to use the set_random_seed utility to fix random seeds for all relevant engines, enabling reproducible results in BayBE optimization campaigns.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/utils.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.utils.random import set_random_seed\n\n# Set the global random seed for all relevant engines\nset_random_seed(1337)\n\n# Assuming we have a prepared campaign\ncampaign.recommend(5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Traditional Mixture Setup in BayBE\nDESCRIPTION: This basic example shows how to configure mixture components in the traditional format within BayBE. The example demonstrates setting up mixture configurations for material combinations.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/examples/Mixtures/Mixtures_Header.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Currently the examples are still in development and will be added soon\n```\n\n----------------------------------------\n\nTITLE: Custom Acquisition Functions in Python\nDESCRIPTION: Shows how to use custom acquisition functions (UCB and qPSTD) when calculating acquisition values for candidate experiments.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/campaigns.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.acquisition import UCB, qPSTD\n\nacq_values = campaign.acquisition_values(rec, UCB())\njoint_acq_value = campaign.joint_acquisition_value(rec, qPSTD())\n```\n\n----------------------------------------\n\nTITLE: Implementing MATCH Mode NumericalTargets in Python\nDESCRIPTION: Examples of creating NumericalTarget objects in MATCH mode, which aims to match a specific value. This snippet demonstrates how to set the bounds to define the desired match point and how different transformations affect the target behavior.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/targets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.targets import NumericalTarget, TargetMode, TargetTransformation\n\nmatch_targetA = NumericalTarget(\n    name=\"Target_3A\",\n    mode=TargetMode.MATCH,\n    bounds=(45, 55),  # mandatory in MATCH mode\n    transformation=TargetTransformation.TRIANGULAR,  # optional, applied if bounds are not None\n)\nmatch_targetB = NumericalTarget(\n    name=\"Target_3B\",\n    mode=\"MATCH\",\n    bounds=(0, 100),  # mandatory in MATCH mode\n    transformation=\"BELL\",  # can also be provided as TargetTransformation.BELL\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Full Search Space with TaskParameter in Python\nDESCRIPTION: This snippet demonstrates how to create a full search space using TaskParameter. It defines a parameter 'p' with three possible values.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/getting_recommendations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsearchspace_full = TaskParameter(\"p\", [\"A\", \"B\", \"C\"]).to_searchspace()\n```\n\n----------------------------------------\n\nTITLE: Converting Array-Based Callables to Dataframe Format with Decorator\nDESCRIPTION: This example shows how to convert an array-based callable function to the required dataframe format using the arrays_to_dataframes decorator. This is useful when working with third-party code that uses array inputs/outputs.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/simulation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nfrom baybe.utils.dataframe import arrays_to_dataframes\n\n\n@arrays_to_dataframes([\"p1\"], [\"t1\"])\ndef lookup(array: np.ndarray) -> np.ndarray:\n    \"\"\"The same lookup function in array logic.\"\"\"\n    return array**2\n```\n\n----------------------------------------\n\nTITLE: Automatic Enum Conversion in BayBE Serialization\nDESCRIPTION: Demonstrates how BayBE automatically converts strings to enum values during deserialization. This example shows that enum values can be specified using string representations in both Python code and JSON.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.targets import NumericalTarget, TargetMode\n\nt1 = NumericalTarget(name=\"T\", mode=TargetMode.MAX)\nt2 = NumericalTarget(name=\"T\", mode=\"MAX\")\nt3 = NumericalTarget.from_json('{\"name\": \"T\", \"mode\": \"MAX\"}')\n\nassert t1 == t2 == t3\n```\n\n----------------------------------------\n\nTITLE: Creating SHAP Insights with LIME Explainer in BayBE\nDESCRIPTION: Creates a SHAP insight using the LIME (Local Interpretable Model-agnostic Explanations) explainer with computational representation. This provides an alternative approach to parameter importance analysis.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/insights.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ninsight = SHAPInsight.from_campaign(\n    campaign, explainer_cls=\"LimeTabular\", use_comp_rep=True\n)\ninsight.plot(\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Creating CustomDiscreteParameter for Polymer Encoding in Python\nDESCRIPTION: Demonstrates how to create a CustomDiscreteParameter for encoding polymer choices using experimental measurements as descriptors. The example shows how to provide custom descriptors through a pandas DataFrame and configure optional parameters like active_values and decorrelation.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/parameters.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom baybe.parameters import CustomDiscreteParameter\n\ndescriptors = pd.DataFrame(\n    {\n        \"Glass_Transition_TempC\": [20, -71, -39],\n        \"Weight_kDalton\": [120, 32, 241],\n    },\n    index=[\"Polymer A\", \"Polymer B\", \"Polymer C\"],  # put labels in the index\n)\n\nCustomDiscreteParameter(\n    name=\"Polymer\",\n    data=descriptors,\n    active_values=(  # optional, enforces that only Polymer A or C is recommended\n        \"Polymer A\",\n        \"Polymer C\",\n    ),\n    decorrelate=True,  # optional, uses default correlation threshold\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing SubSelectionCondition for Discrete Constraints in BayBE\nDESCRIPTION: This example demonstrates how to use SubSelectionCondition to select a specific subset of values, in this case, two solvents identified by their labels.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import SubSelectionCondition\n\nSubSelectionCondition(  # will select two solvents identified by their labels\n    selection=[\"Ethanol\", \"DMF\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Serialization and Deserialization in BayBE\nDESCRIPTION: Demonstrates basic roundtrip serialization of a BayBE object using to_json() and from_json() methods. This example creates a CategoricalParameter, serializes it to JSON, then reconstructs an equivalent copy from the JSON string.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import CategoricalParameter\n\nparameter = CategoricalParameter(name=\"Setting\", values=[\"low\", \"high\"])\njson_string = parameter.to_json()\nreconstructed = CategoricalParameter.from_json(json_string)\nassert parameter == reconstructed\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscreteCustomConstraint in Python with BayBE\nDESCRIPTION: This snippet demonstrates how to create a DiscreteCustomConstraint using a custom filter function. The example excludes entries where the square root of the temperature times the cubed pressure is larger than 5.6. It requires pandas and numpy libraries.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\nfrom baybe.constraints import DiscreteCustomConstraint\n\n\ndef custom_filter(df: pd.DataFrame) -> pd.Series:  # this signature is required\n    \"\"\"\n    In this example, we exclude entries where the square root of the\n    temperature times the cubed pressure are larger than 5.6.\n    \"\"\"\n    mask_good = np.sqrt(df[\"Temperature\"]) * np.power(df[\"Pressure\"], 3) <= 5.6\n\n    return mask_good\n\n\nDiscreteCustomConstraint(\n    parameters=[  # the custom function will have access to these variables\n        \"Pressure\",\n        \"Temperature\",\n    ],\n    validator=custom_filter,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Reduced Search Space from DataFrame in Python\nDESCRIPTION: This snippet demonstrates how to create a reduced search space from a DataFrame. It specifies a subset of configurations for the parameter 'p'.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/getting_recommendations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsearchspace_reduced = SearchSpace.from_dataframe(\n    pd.DataFrame({\"p\": [\"A\", \"B\"]}),\n    parameters=[TaskParameter(\"p\", [\"A\", \"B\", \"C\"])],\n)\n```\n\n----------------------------------------\n\nTITLE: Manual Configuration String Assembly for BayBE Objects\nDESCRIPTION: Shows how to manually construct a JSON configuration string for a BayBE object. The example creates a CategoricalParameter both through direct initialization and by deserializing a manually written JSON string, demonstrating the equivalence of both approaches.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import CategoricalParameter\n\nparameter_json = \"\"\"\n{\n    \"name\": \"Setting\",\n    \"values\": [\"low\", \"high\"]\n}\n\"\"\"\nvia_json = CategoricalParameter.from_json(parameter_json)\nvia_init = CategoricalParameter(name=\"Setting\", values=[\"low\", \"high\"])\n\nassert via_json == via_init\n```\n\n----------------------------------------\n\nTITLE: Creating SHAP Insights with Computational Representation in BayBE\nDESCRIPTION: Creates a SHAP insight using computational representation instead of experimental representation. This is useful when dealing with non-numeric parameters or when analyzing descriptor importance.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/insights.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ninsight = SHAPInsight.from_campaign(campaign, use_comp_rep=True)\ninsight.plot(\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Using Default Values in BayBE Serialization\nDESCRIPTION: Demonstrates how default values can be omitted in serialization strings just as they can be in Python code. The example shows that parameters with implicit and explicit default values deserialize to equivalent objects.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import CategoricalParameter\n\np1 = CategoricalParameter(name=\"Setting\", values=[\"low\", \"high\"])\np2 = CategoricalParameter(name=\"Setting\", values=[\"low\", \"high\"], encoding=\"OHE\")\n\np1_json = \"\"\"\n{\n    \"name\": \"Setting\",\n    \"values\": [\"low\", \"high\"]\n}\n\"\"\"\np2_json = \"\"\"\n{\n    \"name\": \"Setting\",\n    \"values\": [\"low\", \"high\"],\n    \"encoding\": \"OHE\"\n}\n\"\"\"\n\np1_via_json = CategoricalParameter.from_json(p1_json)\np2_via_json = CategoricalParameter.from_json(p2_json)\n\nassert p1 == p1_via_json == p2 == p2_via_json \n```\n\n----------------------------------------\n\nTITLE: Automatic Interval Conversion in BayBE Serialization\nDESCRIPTION: Shows how BayBE's automatic field conversion allows using simpler representations in serialization strings. This example demonstrates that Interval objects can be specified using simple tuples or lists in both Python code and JSON.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.targets import NumericalTarget\nfrom baybe.utils.interval import Interval\n\nt1 = NumericalTarget(name=\"T\", mode=\"MAX\", bounds=Interval(0, 1))\nt2 = NumericalTarget(name=\"T\", mode=\"MAX\", bounds=(0, 1))\nt3 = NumericalTarget.from_json('{\"name\": \"T\", \"mode\": \"MAX\", \"bounds\": [0, 1]}')\n\nassert t1 == t2 == t3\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscreteCardinalityConstraint in Python\nDESCRIPTION: This code demonstrates the use of DiscreteCardinalityConstraint to control the number of active parameters in a design, similar to its continuous counterpart.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import DiscreteCardinalityConstraint\n\nDiscreteCardinalityConstraint(\n    parameters=[\"Fraction_1\", \"Fraction_2\", \"Fraction_3\"],\n    min_cardinality=1,  # defaults to 0\n    max_cardinality=2,  # defaults to the number of affected parameters (here: 3)\n)\n```\n\n----------------------------------------\n\nTITLE: Acquisition Function - qThompsonSampling\nDESCRIPTION: New acquisition function implementation for Thompson sampling\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nqThompsonSampling\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Python\nDESCRIPTION: Demonstrates how to set environment variables programmatically in Python before using BayBE.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/envvars.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"ENVAR_NAME\"] = \"my_value\"\n\n# proceed with BayBE code ...\n```\n\n----------------------------------------\n\nTITLE: Using Type Field for Dynamic Class Resolution in BayBE\nDESCRIPTION: Demonstrates how the 'type' field in serialization strings allows for dynamic subclass resolution. This example shows deserialization of both CategoricalParameter and TaskParameter objects using the base Parameter class.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters.base import Parameter\nfrom baybe.parameters import CategoricalParameter, TaskParameter\n\ncategorical_parameter = CategoricalParameter(name=\"Setting\", values=[\"low\", \"high\"])\ncategorical_parameter_json = \"\"\"\n{\n    \"type\": \"CategoricalParameter\",\n    \"name\": \"Setting\",\n    \"values\": [\"low\", \"high\"]\n}\n\"\"\"\n# NOTE: we can use `Parameter.from_json` instead of `CategoricalParameter.from_json`:\ncategorical_parameter_reconstructed = Parameter.from_json(categorical_parameter_json)\nassert categorical_parameter == categorical_parameter_reconstructed\n\ntask_parameter = TaskParameter(name=\"Setting\", values=[\"low\", \"high\"])\ntask_parameter_json = \"\"\"\n{\n    \"type\": \"TaskParameter\",\n    \"name\": \"Setting\",\n    \"values\": [\"low\", \"high\"]\n}\n\"\"\"\n# NOTE: we can use `Parameter.from_json` instead of `TaskParameter.from_json`:\ntask_parameter_reconstructed = Parameter.from_json(task_parameter_json)\nassert task_parameter == task_parameter_reconstructed\n```\n\n----------------------------------------\n\nTITLE: Initializing SubstanceParameter with Basic Configuration\nDESCRIPTION: Creates a substance parameter for molecular structures using SMILES notation with optional active values and encoding type.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/parameters.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import SubstanceParameter\n\nSubstanceParameter(\n    name=\"Solvent\",\n    data={\n        \"Water\": \"O\",\n        \"1-Octanol\": \"CCCCCCCCO\",\n        \"Toluene\": \"CC1=CC=CC=C1\",\n    },\n    active_values=[  # optional, recommends only water and toluene as solvent\n        \"Water\",\n        \"Toluene\",\n    ],\n    encoding=\"MORDRED\",  # optional\n    decorrelate=0.7,  # optional\n)\n```\n\n----------------------------------------\n\nTITLE: Simulating Transfer Learning Across Tasks\nDESCRIPTION: This code snippet shows how to simulate transfer learning by partitioning the search space into tasks and training each task with data from the remaining tasks. This approach currently only supports discrete search spaces.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/simulation.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntask_param = TaskParameter(\n    name=\"Cell Line\",\n    values=[\"Liver Cell\", \"Brain Cell\", \"Skin Cell\"],\n)\n# Define searchspace using a task parameter\nsearchspace = SearchSpace.from_product(parameters=[param1, param2, task_param])\n\n# Create a suitable campaign\ncampaign = Campaign(searchspace=searchspace, objective=objective)\n\n# Create a lookup dataframe. Note that this needs to have a column labeled \"Function\"\n# with values \"F1\" and \"F2\"\nlookup = DataFrame(...)\n\nresults = simulate_transfer_learning(\n    campaign=campaign,\n    lookup=lookup,\n    batch_size=BATCH_SIZE,\n    n_doe_iterations=N_DOE_ITERATIONS,\n    n_mc_iterations=N_MC_ITERATIONS,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Class Abbreviations in BayBE Serialization\nDESCRIPTION: Shows how classes with defined abbreviations can be deserialized using either the full class name or the abbreviation in the 'type' field. This example demonstrates equivalent deserialization using both 'UpperConfidenceBound' and 'UCB'.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.acquisition.base import AcquisitionFunction\n\nacqf1 = AcquisitionFunction.from_json('{\"type\": \"UpperConfidenceBound\"}')\nacqf2 = AcquisitionFunction.from_json('{\"type\": \"UCB\"}')\n\nassert acqf1 == acqf2\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscreteNoLabelDuplicatesConstraint in Python\nDESCRIPTION: This snippet demonstrates how to use the DiscreteNoLabelDuplicatesConstraint to prevent duplicate labels across multiple parameters, such as in a mixture of solvents.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import DiscreteNoLabelDuplicatesConstraint\n\nDiscreteNoLabelDuplicatesConstraint(parameters=[\"Solvent_1\", \"Solvent_2\"])\n```\n\n----------------------------------------\n\nTITLE: Installing BayBE with pip\nDESCRIPTION: Command to install the BayBE package using pip package manager.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install baybe\n```\n\n----------------------------------------\n\nTITLE: Surrogate Class - BetaBernoulliMultiArmedBanditSurrogate\nDESCRIPTION: New surrogate class for bandit optimization support\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nBetaBernoulliMultiArmedBanditSurrogate\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscretePermutationInvarianceConstraint in Python\nDESCRIPTION: This snippet shows how to use DiscretePermutationInvarianceConstraint to handle permutation invariance in parameter combinations, such as in a mixture of solvents with fractions.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/constraints.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.constraints import (\n    DiscretePermutationInvarianceConstraint,\n    DiscreteDependenciesConstraint,\n    ThresholdCondition,\n)\n\nDiscretePermutationInvarianceConstraint(\n    parameters=[\"Solvent_1\", \"Solvent_2\", \"Solvent_3\"],\n    # `dependencies` is optional; it is only required if some of the permutation\n    # invariant entries in `parameters` have dependencies on other parameters\n    dependencies=DiscreteDependenciesConstraint(\n        parameters=[\"Fraction_1\", \"Fraction_2\", \"Fraction_3\"],\n        conditions=[\n            ThresholdCondition(threshold=0.0, operator=\">\"),\n            ThresholdCondition(threshold=0.0, operator=\">\"),\n            ThresholdCondition(threshold=0.0, operator=\">\"),\n        ],\n        affected_parameters=[[\"Solvent_1\"], [\"Solvent_2\"], [\"Solvent_3\"]],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation with Sphinx and Jinja2\nDESCRIPTION: This template structures the documentation for a Python module, including sections for attributes, functions, classes, exceptions, and submodules. It uses Sphinx directives and Jinja2 templating to create a comprehensive and organized documentation page.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/templates/custom-module-template.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. automodule:: {{ fullname }}\n  \n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: Module Attributes\n\n   .. autosummary::\n      :toctree: \n      :template: custom-attribute-template.rst                               \n   {% for item in attributes %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block functions %}\n   {% if functions %}\n   .. rubric:: {{ _('Functions') }}\n\n   .. autosummary::\n      :toctree:                                       \n   {% for item in functions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block classes %}\n   {% if classes %}\n   .. rubric:: {{ _('Classes') }}\n\n   .. autosummary::\n      :toctree:                                       \n      :template: custom-class-template.rst              \n   {% for item in classes %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block exceptions %}\n   {% if exceptions %}\n   .. rubric:: {{ _('Exceptions') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in exceptions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n{% block modules %}\n{% if modules %}\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: custom-module-template.rst\n   :recursive:\n{% for item in modules %}\n{% if not item in (\"baybe.objectives.deprecation\", \"baybe.recommenders.pure.bayesian.sequential_greedy\") %}\n   {{ item }}\n{%- endif %}\n{%- endfor %}\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Campaign Requirements FAQ Dropdown\nDESCRIPTION: Markdown dropdown explaining whether campaigns are required for recommendations, detailing both stateful and stateless recommendation methods available in BayBE.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{dropdown} Do I need to create a campaign to get recommendations?\n\nNo, creating a campaign is not mandatory.\nBayBE offers two entry points for generating recommendations:\n* a stateful [`Campaign.recommend`](baybe.campaign.Campaign.recommend) method and \n* a stateless [`RecommenderProtocol.recommend`](baybe.recommenders.base.RecommenderProtocol.recommend) method.\n\nFor more details on when to choose one method over the other,\nsee [here](userguide/getting_recommendations).\n```\n\n----------------------------------------\n\nTITLE: Creating SHAP Insights with Custom Explainer in BayBE\nDESCRIPTION: Creates a SHAP insight with a specific explainer class. The default is KernelExplainer, but other supported explainers can be specified based on the data characteristics and analysis needs.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/insights.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ninsight = SHAPInsight.from_campaign(\n    campaign, explainer_cls=\"KernelExplainer\"\n)  # default explainer\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Bash\nDESCRIPTION: Demonstrates how to set environment variables before running BayBE code in a bash shell.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/envvars.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nENVAR_NAME=\"my_value\"\npython do_baybe_work.py\n```\n\n----------------------------------------\n\nTITLE: Installing BayBE from PyPI\nDESCRIPTION: Basic installation command for BayBE using pip package manager from PyPI registry.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install baybe\n```\n\n----------------------------------------\n\nTITLE: Initializing SubstanceParameter with Custom Fingerprint Configuration\nDESCRIPTION: Creates a substance parameter with customized fingerprint computation settings including radius and fingerprint size specifications.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/parameters.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.parameters import SubstanceParameter\n\nSubstanceParameter(\n    name=\"Solvent\",\n    data={\n        \"Water\": \"O\",\n        \"1-Octanol\": \"CCCCCCCCO\",\n        \"Toluene\": \"CC1=CC=CC=C1\",\n    },\n    encoding=\"ECFP\",\n    kwargs_fingerprint={\n        \"radius\": 4,  # Set maximum radius of resulting subgraphs\n        \"fp_size\": 1024,  # Change the number of computed bits\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows Shell\nDESCRIPTION: Shows how to set environment variables in Windows command prompt for BayBE configuration.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/envvars.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nset ENVAR_NAME=my_value\n```\n\n----------------------------------------\n\nTITLE: Installing BayBE with Optional Dependencies\nDESCRIPTION: Commands to install BayBE with specific optional dependency groups for additional functionality.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip install 'baybe[test,lint]'\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install 'baybe[chem,simulation]'\n```\n\n----------------------------------------\n\nTITLE: Handling DataFrame Serialization in BayBE Using Alternative Constructors\nDESCRIPTION: This snippet demonstrates a human-readable approach to serialize pandas DataFrames within BayBE objects by using alternative constructors like DataFrame.from_records, avoiding binary conversion and compression.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/serialization.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom baybe.searchspace.discrete import SubspaceDiscrete\n\nsubspace = SubspaceDiscrete.from_dataframe(\n    pd.DataFrame.from_records(\n        data=[[1, \"a\"], [2, \"b\"], [3, \"c\"]], columns=[\"Number\", \"Category\"]\n    )\n)\n\nsubspace_json = \"\"\"\n{\n    \"constructor\": \"from_dataframe\",\n    \"df\": {\n        \"constructor\": \"from_records\",\n        \"data\": [[1, \"a\"], [2, \"b\"], [3, \"c\"]],\n        \"columns\": [\"Number\", \"Category\"]\n    }\n}\n\"\"\"\nreconstructed = SubspaceDiscrete.from_json(subspace_json)\n\nassert subspace == reconstructed\n```\n\n----------------------------------------\n\nTITLE: Running Core Tests with tox for Python 3.12 in BayBE\nDESCRIPTION: Executes tox to run core tests on BayBE without additional features using Python 3.12.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntox -e coretest-py312\n```\n\n----------------------------------------\n\nTITLE: Installing BayBE with Dev Dependencies\nDESCRIPTION: Command to install BayBE in development mode with additional development dependencies.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install -e '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Using a Dataframe as Lookup Mechanism for Discrete Search Spaces\nDESCRIPTION: This example demonstrates how to provide lookup values in a tabular representation using a dataframe for discrete search spaces. The dataframe must contain columns for all parameters and targets in the domain.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/simulation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\nfrom baybe.parameters import NumericalDiscreteParameter\nfrom baybe.searchspace import SearchSpace\nfrom baybe.targets import NumericalTarget\n\nsearchspace = SearchSpace.from_product(\n    [\n        NumericalDiscreteParameter(\"p1\", [0, 1, 2, 3]),\n        NumericalDiscreteParameter(\"p2\", [1, 10, 100, 1000]),\n    ]\n)\nobjective = NumericalTarget(\"t\", \"MAX\").to_objective()\n\nlookup = pd.DataFrame.from_records(\n    [\n        {\"p1\": 0, \"p2\": 100, \"t\": 23},\n        {\"p1\": 2, \"p2\": 10, \"t\": 5},\n        {\"p1\": 3, \"p2\": 1000, \"t\": 56},\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Running BayBE Benchmarks with Bash Command\nDESCRIPTION: Command to execute all available benchmarks in the BayBE benchmarking module using Python.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/benchmarks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m benchmarks\n```\n\n----------------------------------------\n\nTITLE: Installing BayBE from Local Clone\nDESCRIPTION: Command to install BayBE from a local repository clone in the current directory.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install .\n```\n\n----------------------------------------\n\nTITLE: Using Temporary Random Seeds in Python with Context Manager\nDESCRIPTION: Demonstrates the temporary_seed context manager which sets random seeds only within its scope, preventing unintended effects on other parts of the code that might rely on randomization.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/utils.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baybe.utils.random import temporary_seed\n\n# Set the random seed for all relevant engines temporarily within the context\nwith temporary_seed(1337):\n    campaign.recommend(5)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Code Coverage in BayBE\nDESCRIPTION: Executes pytest with code coverage analysis for the baybe package.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest --cov=baybe\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods with Typing Extensions in Python for BayBE\nDESCRIPTION: This code snippet shows how to properly override methods in subclasses using the typing_extensions.override decorator in the BayBE project.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import override\n\nclass Parent:\n\n   def le_method():\n      \"\"\"The method of the parent class.\"\"\"\n      ...\n\nclass Child:\n\n   @override\n   def le_method():\n      \"\"\"Overridden method of the child class.\"\"\"\n      ...\n```\n\n----------------------------------------\n\nTITLE: Installing BayBE from GitHub\nDESCRIPTION: Command to install BayBE directly from GitHub repository's main branch, allowing installation of specific commits.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/emdgroup/baybe.git@main\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tox Environment for BayBE Development\nDESCRIPTION: This command runs a specific tox environment for BayBE development, where <env> is replaced with the desired environment name.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ntox -e <env>\n```\n\n----------------------------------------\n\nTITLE: Defining an Attrs Class in Python for BayBE\nDESCRIPTION: This code snippet demonstrates how to define an attrs class with proper attribute docstrings and type hints in the BayBE project.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@define\nclass Cookies:\n    \"\"\"A delicious recipe for chocolate-banana cookies.\"\"\"\n\n    chocolate: float\n    \"\"\"Chocolate is naturally measured in terms of floats.\"\"\"\n\n    bananas: int\n    \"\"\"For bananas, we use integers, of course.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Constructing a Discrete Subspace from DataFrame in Python\nDESCRIPTION: Shows how to create a discrete subspace directly from a pandas DataFrame. The method automatically infers parameter types, treating columns as NumericalDiscreteParameters by default and using CategoricalParameters as fallback.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/searchspace.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"x0\": [2, 3, 3],\n        \"x1\": [5, 4, 6],\n        \"x2\": [9, 7, 9],\n    }\n)\nsubspace = SubspaceDiscrete.from_dataframe(df)\n```\n\n----------------------------------------\n\nTITLE: Running All Tox Checks in Parallel for BayBE\nDESCRIPTION: This command runs all tox checks for BayBE in all Python versions in parallel, providing a comprehensive verification of the code.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ntox -p\n```\n\n----------------------------------------\n\nTITLE: Installing BayBE with Development Dependencies in Python\nDESCRIPTION: This command installs an editable version of BayBE including all development dependencies in the current Python environment.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install -e '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Class Reference - ContinuousLinearConstraint\nDESCRIPTION: New class consolidating continuous linear constraints with operator keyword\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nContinuousLinearConstraint\n```\n\n----------------------------------------\n\nTITLE: Installing BayBE in Development Mode\nDESCRIPTION: Command to install BayBE in editable mode for development purposes, allowing code changes without reinstallation.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for BayBE Contribution\nDESCRIPTION: This Git command creates and switches to a new branch for implementing changes in the BayBE project.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngit checkout -b <your_branch_name>\n```\n\n----------------------------------------\n\nTITLE: Code Configuration Example - BotorchRecommender Keywords\nDESCRIPTION: Added configuration keywords for continuous optimization behavior in BotorchRecommender\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nn_restarts\nn_raw_samples\n```\n\n----------------------------------------\n\nTITLE: Running Verbose Tests without Warnings in BayBE\nDESCRIPTION: Executes pytest with verbose output and suppresses warnings, showing an overview of all executed tests and their results.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest -v -p no:warnings\n```\n\n----------------------------------------\n\nTITLE: Running Full Tests in Python 3.12 with Tox for BayBE\nDESCRIPTION: This command uses tox to run all code tests for BayBE in Python 3.12 environment.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ntox -e fulltest-py312\n```\n\n----------------------------------------\n\nTITLE: Recommendation Handling FAQ Dropdown\nDESCRIPTION: Markdown dropdown explaining how to handle situations where experimental actions differ from BayBE recommendations, emphasizing the flexibility of the system and campaign settings.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{dropdown} BayBE recommends A but experimentalists do B. What now?\n\nDon't panic and grab your towel. Recommendations from BayBE are just ... well,\n\"recommendations\". The measurements you feed back to BayBE need not to be related to\nthe original recommendation in any way. In fact, requesting recommendations and adding\ndata are two separate actions, and there is no formal requirement to perform these\nactions in any particular order nor to \"respond\" to recommendations in any form.\n\nNote, however, that subsequent recommendations **may** be affected by earlier steps in\nyour campaign, depending on your settings for the\n{attr}`~baybe.campaign.Campaign.allow_recommending_already_measured` and\n{attr}`~baybe.campaign.Campaign.allow_recommending_already_recommended` flags.\n```\n\n----------------------------------------\n\nTITLE: Listing Available tox Environments in BayBE\nDESCRIPTION: Displays a list of all available tox environments for the BayBE project.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntox -l\n```\n\n----------------------------------------\n\nTITLE: Disabling BayBE Cache\nDESCRIPTION: Demonstrates how to disable BayBE's disk caching functionality by setting an empty cache directory.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/envvars.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nBAYBE_CACHE_DIR=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BayBE Cache Directory\nDESCRIPTION: Shows how to configure the cache directory location for BayBE's disk caching functionality.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/envvars.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nBAYBE_CACHE_DIR=\"/path/to/your/desired/cache/folder\"\n```\n\n----------------------------------------\n\nTITLE: Installing polars-lts-cpu as an Alternative to polars on CPUs without AVX Support\nDESCRIPTION: Suggests installing 'polars-lts-cpu' instead of 'polars' for CPUs without AVX support, particularly for M1 Macs. BayBE will automatically detect the presence of polars and activate its advanced machinery.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/known_issues.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nInstead of `polars`, install `polars-lts-cpu`. BayBE will automatically detect the\\npresence of `polars` and active its advanced machinery. For more details, we refer to the\\n[polars installation guide](https://docs.pola.rs/user-guide/installation/).\n```\n\n----------------------------------------\n\nTITLE: Undoing PyCharm's Monkeypatch to Fix exceptiongroup Issues\nDESCRIPTION: Provides a workaround for issues related to PyCharm's modifications interfering with the exceptiongroup backport. This code snippet undoes the monkeypatch applied by PyCharm.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/known_issues.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\\nsys.excepthook = sys.__excepthook__\n```\n\n----------------------------------------\n\nTITLE: Manually Formatting Exceptions for PyCharm Compatibility\nDESCRIPTION: Offers a solution to manually format exceptions thrown by problematic code when using PyCharm, which may interfere with the exceptiongroup backport used by cattrs for detailed validation.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/known_issues.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport exceptiongroup\\nfrom cattrs import ClassValidationError\\n\\ntry:\\n<problematic code>\\nexcept ClassValidationError as e:\\nraise ValueError(\"\".join(exceptiongroup.format_exception(e)))\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for BayBE User Guide in Sphinx\nDESCRIPTION: A toctree directive for Sphinx documentation that defines the structure of the BayBE user guide. It includes links to various sections covering the framework's core concepts and functionalities.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/userguide/userguide.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\nGetting Recommendations <getting_recommendations>\nCampaigns <campaigns>\nActive Learning <active_learning>\nAsynchronous Workflows <async>\nConstraints <constraints>\nEnvironment Vars <envvars>\nInsights <insights>\nObjectives <objectives>\nParameters <parameters>\nRecommenders <recommenders>\nSearch Spaces <searchspace>\nSerialization <serialization>\nSimulation <simulation>\nSurrogates <surrogates>\nTargets <targets>\nTransfer Learning <transfer_learning>\nUtilities <utils>\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Torch with Correct Drivers on Windows\nDESCRIPTION: Provides a solution for crashes during runtime on Windows machines due to faulty torch installation. Suggests installing torch with the right drivers, such as a no-CUDA version for CPU.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/known_issues.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nInstall `torch` with the right drivers, for instance a no-CUDA version on CPU. You can\\ncreate the commands to do so [here](https://pytorch.org/get-started/locally/).\n```\n\n----------------------------------------\n\nTITLE: Configuring Miscellaneous Documentation Links in RST\nDESCRIPTION: Sets up additional documentation links for contribution guidelines, contributors, known issues, changelog, GitHub repository, and license information.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\n:maxdepth: 2\n:titlesonly:\n:caption: Misc\n:hidden:\n\nContribute <misc/contributing_link>\nContributors <misc/contributors_link>\nKnown Issues <known_issues>\nChangelog <misc/changelog_link>\nGithub <https://github.com/emdgroup/baybe/>\nLicense <misc/license_link>\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Documentation Structure in RST\nDESCRIPTION: Defines the main documentation structure including README, User Guide, Examples, and FAQ. It uses a titlesonly format with a depth of 2 levels.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\n:maxdepth: 2\n:titlesonly:\n:caption: Documentation\n:hidden:\n\nReadme <self>\nUser Guide <userguide/userguide>\nExamples <examples/examples>\nFAQ <faq>\n```\n\n----------------------------------------\n\nTITLE: Running Fast Tests with pytest in BayBE\nDESCRIPTION: Executes pytest with the --fast flag to run tests using small iteration numbers and batch sizes, with only one variant for each.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest --fast\n```\n\n----------------------------------------\n\nTITLE: Generating API Reference with Autosummary in RST\nDESCRIPTION: Configures autosummary to generate API reference documentation for the 'baybe' module, using a custom template and recursive processing.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. autosummary::\n   :toctree: _autosummary\n   :template: custom-module-template.rst\n   :recursive:\n\n   baybe\n```\n\n----------------------------------------\n\nTITLE: Including README in RST Documentation\nDESCRIPTION: Includes the project's README.md file in the documentation, adjusting the relative path for proper rendering.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n{include} ../README.md\n:relative-docs: docs/\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File in BayBE\nDESCRIPTION: Executes pytest for a specific test file (test_config.py) with verbose output and suppressed warnings.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest -v -p no:warnings test_config.py\n```\n\n----------------------------------------\n\nTITLE: Documentation Template with Conditional Logic\nDESCRIPTION: A Jinja2 template that generates documentation for a module. It creates an underlined fullname heading, sets the current module context, and conditionally includes auto-documentation for objects that are not named 'Smiles'.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/templates/custom-attribute-template.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n{% if not fullname in (\"Smiles\") %}\n.. auto{{ objtype }}:: {{ objname }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hidden Versions Link in RST\nDESCRIPTION: Sets up a hidden table of contents entry for the Versions page, linking to the GitHub Pages versioned documentation.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\n:titlesonly:\n:hidden:\n\nVersions <https://emdgroup.github.io/baybe/versions>\n```\n\n----------------------------------------\n\nTITLE: Displaying Slowest Tests in BayBE\nDESCRIPTION: Executes pytest and shows the 5 slowest tests after completion. Set n to 0 to show all test durations.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest --durations=5\n```\n\n----------------------------------------\n\nTITLE: Including CHANGELOG.md in Sphinx Documentation\nDESCRIPTION: A Sphinx directive that includes the CHANGELOG.md file from the project root into the documentation. The relative-docs parameter specifies the path prefix for resolving relative links within the included file.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/misc/changelog_link.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{include} ../../CHANGELOG.md\n:relative-docs: docs/\n```\n```\n\n----------------------------------------\n\nTITLE: Complete GitHub Actions Workflow Inputs Configuration with Multiple Benchmarks\nDESCRIPTION: Example of a complete GitHub Actions workflow configuration with multiple benchmark checkboxes and a dropdown selection for benchmark groups.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/benchmarks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Run Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      group_selection:\n        description: \"Select the group of benchmarks to run\"\n        required: true\n        default: \"All\"\n        type: choice\n        options:\n          - \"Manually Selected\"\n          - \"All\"\n          - \"Default\"\n      synthetic_2C1D_1C:\n        description: \"Synthetic_2C1D_1C benchmark\"\n        required: false\n        default: false\n        type: boolean\n      bar:\n        description: \"Foo benchmark\"\n        required: false\n        default: false\n        type: boolean\n```\n\n----------------------------------------\n\nTITLE: Running Full Tests with tox for Python 3.10 in BayBE\nDESCRIPTION: Executes tox to run full tests on BayBE with all optional features using Python 3.10.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntox -e fulltest-py310\n```\n\n----------------------------------------\n\nTITLE: Including License Text in Documentation with MyST Markdown\nDESCRIPTION: This code block uses the literalinclude directive to embed the contents of the LICENSE file into documentation. The directive specifies that the content should be interpreted as plain text, and the path is relative to the current file location.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/misc/license_link.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{literalinclude} ../../LICENSE\n:language: text\n```\n```\n\n----------------------------------------\n\nTITLE: Including CONTRIBUTORS.md file in Sphinx documentation\nDESCRIPTION: This directive tells Sphinx to include the CONTRIBUTORS.md file from two directories up in the project hierarchy into the current documentation page. This allows maintaining contributor information in a single file while displaying it in the documentation.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/misc/contributors_link.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ../../CONTRIBUTORS.md\n```\n\n----------------------------------------\n\nTITLE: Running Linters with tox for Python 3.12 in BayBE\nDESCRIPTION: Executes tox to run linters on BayBE using Python 3.12.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntox -e lint-py312\n```\n\n----------------------------------------\n\nTITLE: Running Specific BayBE Benchmarks with Command-line Arguments\nDESCRIPTION: Command to execute a specific subset of benchmarks by providing their names as command-line arguments.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/benchmarks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m benchmarks --benchmark-list synthetic_2C1D_1C\n```\n\n----------------------------------------\n\nTITLE: Running Multiple tox Environments in BayBE\nDESCRIPTION: Executes multiple tox environments (audit for Python 3.10 and 3.11) in sequence.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntox -e audit-py310,audit-py311\n```\n\n----------------------------------------\n\nTITLE: Adding Benchmark to GitHub Actions Workflow YAML Configuration\nDESCRIPTION: YAML configuration for adding a benchmark checkbox to the GitHub Actions workflow. The checkbox name must match the benchmark name exactly.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/benchmarks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n      synthetic_2C1D_1C:\n        description: \"Run synthetic_2C1D_1C benchmark\"\n        required: false\n        default: false\n        type: boolean\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for Python Classes using Jinja2\nDESCRIPTION: This template creates a Sphinx documentation page for a Python class. It includes the class name, members, inheritance, public methods, and public attributes/properties. The template uses Jinja2 syntax to dynamically populate the documentation with class-specific information.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/templates/custom-class-template.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ objname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :members:                              \n   :show-inheritance:                 \n   :inherited-members:\n\n   {% block methods %}\n   {% if methods %}\n   .. rubric:: {{ _('Public methods') }}\n\n   .. autosummary::\n   {% for item in methods %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: {{ _('Public attributes and properties') }}\n\n   .. autosummary::\n   {% for item in attributes %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for BayBE Development\nDESCRIPTION: This command installs pre-commit hooks to automatically run checks during the development process.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Including External Contributing Documentation in Sphinx\nDESCRIPTION: RST include directive that incorporates the CONTRIBUTING.md file from the project root directory. The relative-docs parameter adjusts paths for proper document resolution.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/docs/misc/contributing_link.md#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{include} ../../CONTRIBUTING.md\n:relative-docs: docs/\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest in Python\nDESCRIPTION: This command runs the test suite for BayBE using pytest to verify everything works as expected.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Running tox Environments in Parallel in BayBE\nDESCRIPTION: Executes all tox environments in parallel to reduce overall execution time on local machines.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntox -p\n```\n\n----------------------------------------\n\nTITLE: Pushing Updated Branch to Fork in Git for BayBE\nDESCRIPTION: This Git command pushes the updated branch back to the fork of the BayBE repository.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ngit push origin\n```\n\n----------------------------------------\n\nTITLE: Running tox with Current Python Version in BayBE\nDESCRIPTION: Executes tox using the Python version of the current environment for core tests.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntox -e coretest\n```\n\n----------------------------------------\n\nTITLE: Running Extensive Tests with pytest in BayBE\nDESCRIPTION: Executes pytest without flags to run several variants of tests with larger iteration numbers and batch sizes.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Running All tox Environments in BayBE\nDESCRIPTION: Executes all available tox environments for the BayBE project.\nSOURCE: https://github.com/emdgroup/baybe/blob/main/tests/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Type Checking Marker - py.typed\nDESCRIPTION: File added to enable type checking support for users\nSOURCE: https://github.com/emdgroup/baybe/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npy.typed\n```"
  }
]