[
  {
    "owner": "atlassian-labs",
    "repo": "react-resource-router",
    "content": "TITLE: Using useRouter Hook for Route Context and Router Actions\nDESCRIPTION: Shows how to use the useRouter hook to access current route context and router actions. This hook returns a tuple with router state and router actions to interact with the router programmatically.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/hooks.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter, RouterSubscriber, withRouter } from 'react-resource-router';\n\nexport const MyRouteComponent = () => {\n  const [routerState, routerActions] = useRouter();\n\n  return (\n    <MyComponent location={routerState.location} push={routerActions.push} />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Resource Router in an Application\nDESCRIPTION: This snippet shows how to set up and mount the Router component in a React application. It includes creating a browser history, initializing the resources plugin, and passing the routes configuration to the Router.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Router,\n  RouteComponent,\n  createBrowserHistory,\n} from 'react-resource-router';\nimport { createResourcesPlugin } from 'react-resource-router/resources';\nimport { appRoutes } from './routing/routes';\n\nconst history = createBrowserHistory();\nconst resourcesPlugin = createResourcesPlugin({});\n\nconst App = () => (\n  <Router routes={appRoutes} history={history} plugins={[resourcesPlugin]}>\n    <RouteComponent />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in React Resource Router\nDESCRIPTION: This snippet demonstrates how to configure routes for React Resource Router. Each route includes a name, path, component reference, and associated resources that will be fetched when the route is matched.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Home, About } from '../components';\nimport { homeResource, aboutResource } from './resources';\n\nexport const appRoutes = [\n  {\n    name: 'home',\n    path: '/',\n    exact: true,\n    component: Home,\n    resources: [homeResource],\n  },\n  {\n    name: 'about',\n    path: '/about',\n    exact: true,\n    component: About,\n    resources: [aboutResource],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Resources with React Resource Router\nDESCRIPTION: This snippet demonstrates how to create resources using the createResource function. Resources describe and provide the data required for routes, with each resource having a type, getKey function, and getData function for fetching data.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createResource } from 'react-resource-router/resources';\nimport { fetch } from '../common/utils';\n\nexport const homeResource = createResource({\n  type: 'HOME',\n  getKey: () => 'home-resource-key',\n  getData: () => fetch('https://my-api.com/home'),\n});\n\nexport const aboutResource = createResource({\n  type: 'ABOUT',\n  getKey: () => 'about-resource-key',\n  getData: () => fetch('https://my-api.com/about'),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Router Resource with createResource in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a router resource using the createResource helper function. It defines a userProfileResource with a type, key generator, and data fetching function.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/creation.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createResource } from 'react-resource-router/resources';\n\nexport const userProfileResource = createResource({\n  type: 'USER_PROFILE',\n  getKey: () => 'username',\n  getData: (_, { user }) => fetch('https://my-app.com/api?user=username'),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Router Component with React Resource Router\nDESCRIPTION: Demonstrates how to set up the Router component with the configured routes and browser history. This is the main entry point for using React Resource Router in an application.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Router,\n  RouteComponent,\n  createBrowserHistory,\n} from 'react-resource-router';\nimport { appRoutes } from './routing/routes';\n\nconst history = createBrowserHistory();\n\nconst App = () => (\n  <Router routes={appRoutes} history={history}>\n    <RouteComponent />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useResource Hook for Data Fetching in React Resource Router\nDESCRIPTION: Demonstrates how to use the useResource hook to subscribe route components to their respective resources. This hook provides data, loading and error states as well as update, refresh and clear actions for resource management.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/hooks.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useResource } from 'react-resource-router/resources';\nimport { feedResource } from '../routing/resources';\nimport { Loading, Error } from './primitives';\nimport { FeedList } from './FeedList';\nimport { FeedUpdater } from './FeedUpdater';\nimport { FeedRefresher } from './FeedRefresher';\nimport { FeedClearance } from './FeedCleaner';\n\nexport const Feed = () => {\n  const { data, loading, error, update, refresh, clear } =\n    useResource(feedResource);\n\n  if (error) {\n    return <Error error={error} />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <>\n      <FeedList items={data} />\n      <FeedUpdater onUpdate={update} />\n      <FeedRefresher onRefresh={refresh} />\n      <FeedClearance onClear={clear} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Routes Array in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a simple routes array with two routes, each specifying a path, name, component, and resources.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const routes = [\n  {\n    path: '/home',\n    name: 'HOME',\n    component: Home,\n    resources: [homeResource],\n  },\n  {\n    path: '/about',\n    name: 'ABOUT',\n    component: About,\n    resources: [aboutResource],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Resources with React Resource Router\nDESCRIPTION: Demonstrates how to create resources using the createResource function from react-resource-router/resources. Resources describe and provide data required for routes.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createResource } from 'react-resource-router/resources';\nimport { fetch } from '../common/utils';\n\nexport const homeResource = createResource({\n  type: 'HOME',\n  getKey: () => 'home-resource-key',\n  getData: () => fetch('https://my-api.com/home'),\n});\n\nexport const aboutResource = createResource({\n  type: 'ABOUT',\n  getKey: () => 'about-resource-key',\n  getData: () => fetch('https://my-api.com/about'),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Component in React Resource Router\nDESCRIPTION: Shows how to use the Link component for navigation in a React Resource Router application, including click handling and various props.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link } from 'react-resource-router';\n\nexport const LinkExample = ({ href = '/' }) => {\n  const handleClick = () => console.log('click');\n\n  return (\n    <Link href={href} onClick={handleClick}>\n      Link Component\n    </Link>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with React Resource Router\nDESCRIPTION: Illustrates how to create a route configuration array that defines the application's routing structure, including paths, components, and associated resources.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Home, About } from '../components';\nimport { homeResource, aboutResource } from './resources';\n\nexport const appRoutes = [\n  {\n    name: 'home',\n    path: '/',\n    exact: true,\n    component: Home,\n    resources: [homeResource],\n  },\n  {\n    name: 'about',\n    path: '/about',\n    exact: true,\n    component: About,\n    resources: [aboutResource],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Resources in React Resource Router\nDESCRIPTION: This code snippet shows how to import resources and add them to a route configuration in the app-routes.js file. It demonstrates setting up a dynamic user profile route with two resources: accountInfoResource and avatarResource.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/adding.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// app-routes.js\nimport { accountInfoResource, avatarResource } from './resources';\nimport { UserProfile } from '../components';\n\nexport const routes = [\n  {\n    path: '/user/profile/:id',\n    component: UserProfile,\n    resources: [accountInfoResource, avatarResource],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Resource State with useResource Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useResource hook to access the current state of a router resource in a React component. It shows how to destructure the data and loading properties from the resource and use them to render a Circle component.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/usage.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useResource } from 'react-resource-router/resources';\nimport { avatarResource } from '../routing/resources';\nimport { Circle } from './primitives';\n\nexport const Avatar = () => {\n  const { data, loading } = useResource(avatarResource);\n  const image = loading ? '' : data;\n\n  return <Circle image={image} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring React Resource Router App Structure\nDESCRIPTION: Demonstrates the recommended structure for a React Resource Router application, separating the core app from the router configuration.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\nimport { RouteComponent } from 'react-resource-router';\nimport { Providers } from '../providers';\n\nexport const App = () => (\n  <Providers>\n    <RouteComponent />\n  </Providers>\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport { Router, createBrowserHistory } from 'react-resource-router';\nimport { createResourcesPlugin } from 'react-resource-router/resources';\nimport { App } from './components';\nimport { appRoutes } from './routing';\n\nconst resourcesPlugin = createResourcesPlugin({});\n\n<Router\n  history={createBrowserHistory()}\n  routes={appRoutes}\n  plugins={[resourcesPlugin]}\n>\n  <App />\n</Router>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Route with Path Parameters in JavaScript\nDESCRIPTION: This example shows how to define a route with a path parameter (userId) and mark it as optional using the '?' suffix.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const routes = [\n  {\n    path: '/user/:userId',\n    name: 'USER',\n    component: User,\n    resources: [userResource],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Resource Data with useResource Hook in React Resource Router\nDESCRIPTION: This example demonstrates how to update resource data using the update method provided by the useResource hook. The update method takes a callback function that receives the current resource state and returns the updated state, allowing for partial updates to resource data.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/interaction.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useResource } from 'react-resource-router/resources';\nimport { accountInfoResource } from '../routing/resources';\n\nexport const UsernameUpdater = ({ newUsername }) => {\n  const { update } = useResource(accountInfoResource);\n  const updateUsername = () =>\n    update(currentData => ({\n      ...currentData,\n      username: newUsername,\n    }));\n\n  return (\n    <button onClick={updateUsername}>\n      Update your username to {newUsername}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Passing State Between Routes with useRouter Hook\nDESCRIPTION: Demonstrates how to pass and access state between routes using the useRouter hook. This example shows navigation with state from a start page and accessing that state on the destination page.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/hooks.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst StartPage = () => {\n  const [routerState, routerActions] = useRouter();\n\n  const handleButtonClick = () => {\n    const url = '/destination';\n    const state = { referrer: 'StartPage' };\n    routerActions.push(url, state);\n  };\n\n  return (\n    <div>\n      <h1>Welcome to the Start Page</h1>\n      <button onClick={handleButtonClick}>Go to Destination</button>\n    </div>\n  );\n};\n\nconst DestinationPage = () => {\n  const [routerState] = useRouter();\n\n  const referrer = routerState.location?.state?.referrer;\n\n  return (\n    <div>\n      <h1>Welcome to the Destination Page</h1>\n      {referrer && <p>You came from the {referrer}!</p>}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Router with History in React\nDESCRIPTION: This snippet illustrates how to create a history instance and provide it to the Router component along with the routes.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Router,\n  RouteComponent,\n  createBrowserHistory,\n} from 'react-resource-router';\nimport { routes } from './routing';\n\nconst history = createBrowserHistory();\nexport const App = () => (\n  <Router history={history} routes={routes}>\n    <RouteComponent />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Components with React Resource Router\nDESCRIPTION: Shows how to create React components that use the useResource hook to access resource data. These components handle loading and error states.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useResource } from 'react-resource-router/resources';\nimport { aboutResource, homeResource } from '../routes/resources';\nimport { Loading, Error } from './common';\n\nexport const Home = () => {\n  const { data, loading, error } = useResource(homeResource);\n\n  if (error) {\n    return <Error error={error} />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <div>{data.home.content}</div>;\n};\n\nexport const About = () => {\n  const { data, loading, error } = useResource(aboutResource);\n\n  if (error) {\n    return <Error error={error} />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <div>{data.about.content}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Actions with useRouterActions Hook\nDESCRIPTION: Demonstrates using the useRouterActions hook to access router actions like push, replace, etc. This provides a more direct way to access just the router actions without the router state.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/hooks.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const RouterActionsHookExample = () => {\n  const { push } = useRouterActions();\n\n  return <MyComponent push={push} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Router Setup with RouteComponent in React\nDESCRIPTION: Example showing how to set up a basic router implementation using RouteComponent within a Router wrapper. Demonstrates usage with browser history and resources plugin.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createBrowserHistory,\n  Router,\n  RouteComponent,\n} from 'react-resource-router';\nimport { createResourcesPlugin } from 'react-resource-router/resources';\nimport { StaticNavigation } from '../components';\nimport { routes } from '../routing';\n\nconst history = createBrowserHistory();\nconst resourcesPlugin = createResourcesPlugin({});\n\nexport const App = () => (\n  <Router history={history} routes={routes} plugins={[resourcesPlugin]}>\n    <StaticNavigation />\n    <RouteComponent />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Resource State for Different Route in React\nDESCRIPTION: This snippet illustrates how to access router resource state for a different route or URL. It uses the useResource hook with a custom routerContext to refresh the resource for a specific blog post, even when the current route doesn't match.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/usage.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRouterContext } from 'react-resource-router';\nimport { useResource } from 'react-resource-router/resources';\nimport { blogPostResource } from '../routing/resources';\nimport { blogPostRoute } from '../routing';\n\nexport const PrefetchBlogPost = ({ id }) => {\n  const { refresh } = useResource(blogPostResource, {\n    routerContext: createRouterContext(blogPostRoute, { params: { id } }),\n  });\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Query Parameters with useQueryParam Hook\nDESCRIPTION: Shows how to access and update query parameters in the current route using the useQueryParam hook. This hook returns the current value and a setter function that can push or replace the URL with the updated parameter.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/hooks.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQueryParam } from 'react-resource-router';\n\n// Current route in address bar — /home/projects?foo=bar\n\nexport const MyComponent = () => {\n  const [foo, setFoo] = useQueryParam('foo');\n  // => foo will have the value 'bar'\n\n  const pushClickHandler = () => {\n    setFoo('baz'); // equivalent to setFoo('baz', 'push')\n    // => Will push current route /home/projects?foo=bar (can use back button)\n  };\n\n  const replaceClickHandler = () => {\n    setFoo('qux', 'replace');\n    // => Will replace current route to /home/projects?foo=qux\n  };\n\n  return (\n    <div>\n      <p>Hello World!</p>\n      <button onClick={pushClickHandler}>Push param</button>\n      <button onClick={replaceClickHandler}>Replace param</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Path Parameters with usePathParam Hook\nDESCRIPTION: Demonstrates how to access and update path parameters in the current route URL using the usePathParam hook. This hook provides a convenient way to read and manipulate dynamic segments in the route path.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/hooks.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePathParam } from 'react-resource-router';\n\n// path — /projects/:projectId/board/:boardId\n\n// Current route in address bar — /projects/123/board/456?foo=bar\n\nexport const MyComponent = () => {\n  const [projectId, setProjectId] = usePathParam('projectId');\n  // => projectId will have the value '123'\n\n  const pushClickHandler = () => {\n    setProjectId('222'); // equivalent to setProject('222', 'push')\n    // => Will push current route /projects/222/board/456?foo=bar (can use back button)\n  };\n\n  const replaceClickHandler = () => {\n    setProjectId('333', 'replace');\n    // => Will relace current route to /projects/333/board/456?foo=bar\n  };\n\n  return (\n    <div>\n      <p>Hello World!</p>\n      <button onClick={clickHandler}>Update param</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Redirect Component in React Resource Router\nDESCRIPTION: Demonstrates how to use the Redirect component for conditional redirection based on resource loading state or error conditions.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Redirect } from 'react-resource-router';\nimport { useResource } from 'react-resource-router/resources';\nimport { userResource } from 'src/routes/resources';\nimport { Profile } from 'src/components/user';\n\nexport const RedirectExample = () => {\n  const { data, loading, error } = useResource(userResource);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error && error.code === 403) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return <Profile data={data} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Refreshing Resource Data from Remote Source in React Resource Router\nDESCRIPTION: This snippet shows how to refresh resource data by forcing a remote fetch using the refresh method from the useResource hook. The refresh function bypasses any expiration checks and always fetches fresh data from the remote source.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/interaction.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useResource } from 'react-resource-router/resources';\nimport { accountInfoResource } from '../routing/resources';\n\nexport const UsernameResetter = ({ newUsername }) => {\n  const { data, refresh } = useResource(accountInfoResource);\n\n  return (\n    <button onClick={() => refresh()}>\n      Reset your username to {data.username}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Slot Component for Dynamic Route Rendering in React\nDESCRIPTION: Creates a Slot component that dynamically renders child components based on the current route name. Includes route validation and 404 redirect handling for unknown routes.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/nested-routes.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter, Redirect } from 'react-resource-router';\n\n// Define a object of URLs to Components. \n// Make sure the keys in this object match the URLs you intend to handle.\nconst slots = {\n  'url-one': ComponentOne,\n  'url-two': ComponentTwo,\n};\n\nconst Slot = () => {\n  const [{ route }] = useRouter();\n  const name = route.name;\n\n  // If the specified slot doesn't exist, redirect to a 404 page\n  if (!slots?.[name]) {\n    return <Redirect to=\"/404\" />;\n  }\n\n  // Dynamically load and render the component based on the current route name\n  const DynamicComponent = slots[name];\n  return <DynamicComponent />;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Router with History\nDESCRIPTION: Demonstrates how to create and use a BrowserHistory instance with the Router component. Shows the basic setup of a React Resource Router application with route configuration.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/utilities.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createBrowserHistory,\n  RouteComponent,\n  Router,\n} from 'react-resource-router';\nimport { appRoutes } from './routing';\n\nconst history = createBrowserHistory();\n\nexport const App = () => (\n  <Router history={history} routes={routes}>\n    <RouteComponent />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Router Plugin in React Resource Router\nDESCRIPTION: Example of creating and applying a custom plugin to hook into router lifecycle events. The plugin defines handlers for beforeRouteLoad, routeLoad, and routePrefetch events, receiving router context information.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/plugins.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Router } from 'react-resource-router';\nimport { App } from './components';\nimport { appRoutes } from './routing';\n\nconst myPlugin = {\n    id: 'my-plugin',\n    beforeRouteLoad?: ({ \n        context: RouterContext, \n        nextContext: RouterContext,\n    }) => { ... },\n    routeLoad?: ({ \n        context: RouterContext, \n        prevContext: RouterContext,\n    }) => { ... },\n    routePrefetch?: ({ \n        context: RouterContext, \n        nextContext: RouterContext,\n    }) => { ... },\n};\n\n<Router history={...} routes={appRoutes} plugins={[myPlugin]}>\n  <App />\n</Router>;\n```\n\n----------------------------------------\n\nTITLE: Matching Routes Outside Router Context\nDESCRIPTION: Demonstrates how to match routes outside of the router context using the matchRoute utility function. Useful for accessing route context outside React lifecycle.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/utilities.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { appRoutes } from '../routing';\n\nconst basePath = '/base';\nconst { pathname, search } = window.location;\nconst matchedRoute = matchRoute(routes, pathname, search, basePath);\n```\n\n----------------------------------------\n\nTITLE: Using ResourceSubscriber Component for Router Resource State in React\nDESCRIPTION: This example shows how to use the ResourceSubscriber component to access router resource state in a React class component. It uses render props to provide the resource state and render a Circle component based on the loading status and data.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/usage.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ResourceSubscriber } from 'react-resource-router';\nimport { avatarResource } from '../routing/resources';\nimport { Circle } from './primitives';\n\nexport class Avatar extends Component {\n  render() {\n    <ResourceSubscriber>\n      {({ data, loading }) => <Circle image={loading ? '' : data} />}\n    </ResourceSubscriber>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Component for Universal Rendering in JavaScript\nDESCRIPTION: Demonstrates the recommended tree composition pattern for using Router universally on both client and server. The Router component wraps the main App component.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/ssr.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App } from './components';\n\n<Router>\n  <App />\n</Router>;\n```\n\n----------------------------------------\n\nTITLE: Adding a 404 Route to Routes Array in JavaScript\nDESCRIPTION: This example demonstrates how to add a catch-all 404 route to the routes array, which should be placed last to handle unmatched routes.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const routes = [\n  {\n    path: '/home',\n    name: 'HOME',\n    component: Home,\n    resources: [homeResource],\n  },\n  {\n    path: '/about',\n    name: 'ABOUT',\n    component: About,\n    resources: [aboutResource],\n  },\n  {\n    path: '',\n    name: '404',\n    component: NotFound,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring React Resource Router with Resources Plugin\nDESCRIPTION: Shows how to set up the Router component with the Resources plugin, including route definitions with associated resources.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport { Router, createBrowserHistory } from 'react-resource-router';\nimport { createResourcesPlugin } from 'react-resource-router/resources';\nimport { App } from './components';\n\nconst resourcesPlugin = createResourcesPlugin({ ... });\n\nexport const routes = [\n  {\n    path: '/home',\n    name: 'HOME',\n    component: Home,\n    resources: [homeResource],\n  },\n  {\n    path: '/about',\n    name: 'ABOUT',\n    component: About,\n    resources: [aboutResource],\n  },\n];\n\n<Router history={createBrowserHistory()} routes={routes} plugins={[resourcesPlugin]}>\n  <App />\n</Router>;\n```\n\n----------------------------------------\n\nTITLE: Generating Path from Route Pattern\nDESCRIPTION: Shows usage of generatePath utility to create URLs from route patterns with parameters. Uses path-to-regexp internally for path generation.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/utilities.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Will return /user/1/posts\ngeneratePath(\"/user/:id/:entity(posts|comments)\", {\n  id: 1,\n  entity: \"posts\"\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// TypeError: Expected \"entity\" to be defined\ngeneratePath(\"/user/:id/:entity(posts|comments)\", { id: 1 });\n```\n\n----------------------------------------\n\nTITLE: Clearing Resource Data in React Resource Router\nDESCRIPTION: This example demonstrates how to clear resource data using the clear method from the useResource hook. Clearing a resource ensures that the next time it's needed, it will be fetched from the remote source rather than using cached data.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/interaction.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useResource } from 'react-resource-router/resources';\nimport { accountInfoResource } from '../routing/resources';\n\nexport const UsernameResetter = ({ newUsername }) => {\n  const { data, clear } = useResource(accountInfoResource);\n\n  return (\n    <button onClick={() => clear()}>\n      Clear your username\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Router with BrowserHistory in JavaScript\nDESCRIPTION: Shows how to set up the Router component for client-side rendering using BrowserHistory. It includes creating the history object and passing routes as props.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/ssr.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// client-app.js\nimport { Router, createBrowserHistory } from 'react-resource-router';\nimport { App } from '../components';\nimport { routes } from '../routing/routes';\n\nconst history = createBrowserHistory();\n\nexport const ClientApp = () => (\n  <Router history={history} routes={routes}>\n    <App />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Optimized Router Selectors with createRouterSelector\nDESCRIPTION: Shows how to create custom router hooks using createRouterSelector that will only trigger re-renders when the selected router state changes. This provides performance optimization for components that only need specific parts of router state.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/hooks.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouterSelector } from 'react-resource-router';\n\nconst useRouteName = createRouterSelector(o => o.route.name);\n\nexport const MyRouteComponent = () => {\n  const routeName = useRouteName();\n\n  return <MyComponent currentRouteName={routeName} push={routerActions.push} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Router Context\nDESCRIPTION: Shows how to create a custom router context with specific parameters, query strings, and base path settings. Used for passing context to resources.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/utilities.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { myRoute } from '../routing';\n\nconst options = {\n  params: { id: '1' },\n  query: { order: 'asc' },\n  basePath: '/base',\n};\n\nconst routerContext = createRouterContext(myRoute, options);\n```\n\n----------------------------------------\n\nTITLE: Using RouterActions Component with Render Props in React\nDESCRIPTION: Example of implementing RouterActions component using render props pattern to access router navigation methods.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const RouterActionsRenderPropsExample = () => (\n  <RouterActions>\n    {routerActions => <MyComponent push={routerActions.push} />}\n  </RouterActions>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceSubscriber Component in React\nDESCRIPTION: Demonstrates how to use ResourceSubscriber component to subscribe to and access resource state via render props.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ResourceSubscriber } from 'react-resource-router';\nimport { Circle } from './primitives';\nimport { avatarResource } from '../routing/resources';\n\nexport const Avatar = () => (\n  <ResourceSubscriber resource={avatarResource}>\n    {({ data, loading }) => {\n      const image = loading ? '' : data;\n\n      return <Circle image={image} />;\n    }}\n  </ResourceSubscriber>\n);\n```\n\n----------------------------------------\n\nTITLE: Providing Resource Context to Router in React\nDESCRIPTION: This example demonstrates how to pass environment-specific data to the Router using the resourceContext prop.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { environment } from './constants';\n\nexport const App = () => (\n  <Router history={history} routes={routes} resourceContext={{ environment }}>\n    <RouteComponent />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent Component with Slot Integration\nDESCRIPTION: Shows how to incorporate the Slot component into a parent component for nested routing functionality.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/nested-routes.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Page = () => {\n  return (\n    <div>\n      <Slot>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Router with MemoryHistory in JavaScript\nDESCRIPTION: Demonstrates how to set up the Router component for server-side rendering using MemoryHistory. It includes passing the location and routes as props.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/ssr.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// server-app.js\nimport { createMemoryHistory } from 'history';\nimport { Router } from 'react-resource-router';\nimport { App } from '../components';\nimport { routes } from '../routing/routes';\n\nexport const ServerApp = ({ location }) => (\n  <Router\n    history={createMemoryHistory({ initialEntries: [location]} )}\n    routes={routes}>\n    <App />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Structuring App Component with RouteComponent in JavaScript\nDESCRIPTION: Shows how to structure the App component to include the RouteComponent from react-resource-router, along with navigation and footer elements.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/ssr.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\nimport { RouteComponent } from 'react-resource-router';\n\nexport const App = () => (\n  <>\n    <Navigation />\n    <RouteComponent />\n    <Footer />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RouterSubscriber Component in React\nDESCRIPTION: Shows how to use RouterSubscriber component to access router state and actions through render props pattern.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RouterSubscriber } from 'react-resource-router';\nimport { MyComponent } from './my-component';\n\nexport const MyRouteComponent = () => (\n  <RouterSubscriber>\n    {(routerState, routerActions) => (\n      <MyComponent location={routerState.location} push={routerActions.push} />\n    )}\n  </RouterSubscriber>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Data for Server-Side Rendering in React\nDESCRIPTION: This snippet shows how to provide pre-fetched data to the Router component to avoid refetching on the client side after server-side rendering.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const App = () => (\n  <Router history={history} routes={routes} resourceData={window.__SSR_STATE__}>\n    <RouteComponent />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Using MemoryRouter for Testing in React Resource Router\nDESCRIPTION: Demonstrates how to use the MemoryRouter component for unit testing routes in a React Resource Router application.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('should send right props after render with routes', () => {\n  render(<MemoryRouter routes={[mockRoutes[0]]}>{/* ... */}</MemoryRouter>);\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Plugin Load Method for Server-Side Rendering\nDESCRIPTION: Example of using the invokePluginLoad utility for server-side rendering. This function lets you manually trigger the routeLoad method of plugins, which is especially useful for pre-loading resources in SSR contexts.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/plugins.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { invokePluginLoad } from 'react-resource-router';\n\ninvokePluginLoad([resourcesPlugin], {\n    history: createMemoryHistory({ initialEntries: [location] }),\n    routes,\n    basePath: '...',\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Resource Dependencies Example in ASCII Diagram\nDESCRIPTION: ASCII diagram illustrating the relationships between route resources A-F and an unlisted resource X. The arrows indicate dependency relationships between resources, showing how some resources depend on others that precede them in the resource list.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/src/resources/controllers/resource-store/utils/dependent-resources/README.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n ROUTE RESOURCES                               UNLISTED\n         ┌───────────────────────┐\n         │                       │\n ┌───┐ ┌─▼─┐ ┌───┐ ┌───┐ ┌───┐ ┌─┴─┐           ┌───┐\n │   │ │   │ │   │ │   │ │   │ │   │           │   │\n │ A │ │ B │ │ C │ │ D │ │ E │ │ F │           │ X │\n │   │ │   │ │   │ │   │ │   │ │   │           │   │\n └▲─▲┘ └───┘ └─┬─┘ └─┬─┘ └───┘ └───┘           └───┘\n  │ │          │     │\n  │ └──────────┘     │\n  │                  │\n  └──────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Implementing withRouter HOC in React\nDESCRIPTION: Shows how to use the withRouter Higher Order Component to wrap a component and provide router-related props.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/api/components.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withRouter } from 'react-resource-router';\n\nexport const WithRouterHocExample = withRouter(MyComponent);\n\nconst MyRouterComponent = () => {\n  return <WithRouterHocExample />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in getData Function for React Resource Router\nDESCRIPTION: This code demonstrates three different patterns for handling errors in the getData function. The recommended approach is to throw custom error objects that will be properly captured in the resource state's error property, maintaining data as null when errors occur.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/resources/creation/error-handling.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MyCustomError } from '../common/errors';\nimport { getAccountInfoData } from '../api';\n\n// Example of a getData function that is used to retrieve account info\nconst getData = async (routerContext, resourceContext) => {\n  const { query } = routerContext;\n  // assuming isAdmin has been provided to the router as static resourceContext\n  const { isAdmin } = resourceContext;\n\n  if (!isAdmin) {\n    // NOT RECOMMENDED:\n    // The resource slice will take the shape: `{data: {}, error: null, loading: false}`\n    // You should consider throwing an error here to ensure `data` remains `null`\n    return Promise.resolve({});\n  }\n\n  const data = getAccountInfoData(isAdmin, query);\n\n  if (!data) {\n    // BETTER IMPLEMENTATION:\n    // The resource state will take on the shape:  `{data: {errorCode: 'some error'}', error: null, loading: false}`\n    // Only consider this pattern if your component is checking `data` for an errorCode property\n    return { errorCode: 'some error' };\n  }\n\n  if (!data) {\n    // RECOMMENDED IMPLEMENTATION:\n    // The resource state will take the shape:  `{data: null, error: MyCustomError, loading: false}`\n    throw new MyCustomError('bad thing happen');\n  }\n\n  return data;\n};\n```\n\n----------------------------------------\n\nTITLE: Executing 'Update A' with Dependent Resource State Management\nDESCRIPTION: Code example showing how the executing state is updated when performing an update action on Resource A. It demonstrates how dependent resources C and D are included in the executing state with null actions initially, then updated with appropriate refresh actions.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/src/resources/controllers/resource-store/utils/dependent-resources/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n ▼\n[[ResourceA, updateResourceState], [ResourceC, null], [ResourceD, null]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n             ▼\n[[ResourceA, updateResourceState], [ResourceC, getResourceFromRemote], [ResourceD, getResourceFromRemote]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n                                               ▼\n[[ResourceA, updateResourceState], [ResourceC, getResourceFromRemote], [ResourceD, getResourceFromRemote]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n                                                                                   ▼\n[[ResourceA, updateResourceState], [ResourceC, getResourceFromRemote], [ResourceD, getResourceFromRemote]]\n```\n\n----------------------------------------\n\nTITLE: Handling Resource Requests for Server-Side Rendering in JavaScript\nDESCRIPTION: Illustrates how to handle resource requests during server-side rendering using the invokePluginLoad method. It includes creating a resourcesPlugin, invoking plugin load, and rendering the app with resource data.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/docs/router/ssr.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderToString } from 'react-dom/server';\nimport { Router, invokePluginLoad } from 'react-resource-router';\nimport { createResourcesPlugin } from 'react-resource-router/resources';\nimport { routes } from '../routing/routes';\nimport { ServerApp } from './app';\n\nconst renderToStringWithData = async ({ location }) => {\n  const resourcesPlugin = createResourcesPlugin({});\n\n  invokePluginLoad([resourcesPlugin], {\n    history: createMemoryHistory({ initialEntries: [location] }),\n    routes,\n    basePath: '...',\n  });\n\n  const resourceData = await resourcesPlugin.getSerializedResources();\n\n  return renderToString(<ServerApp location={location} />);\n};\n```\n\n----------------------------------------\n\nTITLE: Executing 'Refresh F' with Dependency Resource State Management\nDESCRIPTION: Example showing how dependency resources are included in the executing state when refreshing a dependent resource. It demonstrates that Resource A is included as a dependency of Resource D even though it's not actively executing.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/src/resources/controllers/resource-store/utils/dependent-resources/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n ▼\n[[ ResourceA, null ], [ ResourceD, getResourceFromRemote ]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n              ▼\n[[ ResourceA, null ], [ ResourceD, getResourceFromRemote ]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n                                   ▼\n[[ ResourceA, null ], [ ResourceD, getResourceFromRemote ]]\n```\n\n----------------------------------------\n\nTITLE: Executing 'Get All Resources' with Independent Resource Handling\nDESCRIPTION: Example showing how independent resources are omitted from the executing state when requesting all resources. It demonstrates how Resource E, being independent, is processed separately after the interrelated resources.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/src/resources/controllers/resource-store/utils/dependent-resources/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n ▼\n[[ ResourceA, getResourceFromRemote ], ..., [ ResourceD, getResourceFromRemote ], [ ResourceF, getResourceFromRemote ]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n             ▼\n[[ResourceA, updateResourceState], ..., [ResourceC, getResourceFromRemote], [ResourceD, getResourceFromRemote], ...]\n```\n\n----------------------------------------\n\nTITLE: Applying Use Resource Imports Codemod to Single File in Shell\nDESCRIPTION: This command applies the use-resource-imports codemod to a single source file using npx and @codeshift/cli. It transforms relevant react-resource-router imports to react-resource-router/resources.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/codemods/transforms/use-resource-imports/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @codeshift/cli --packages \"react-resource-router#use-resource-imports\" source_file.tsx\n```\n\n----------------------------------------\n\nTITLE: Applying Use Resource Imports Codemod to Multiple Files in Shell\nDESCRIPTION: This command applies the use-resource-imports codemod to multiple TypeScript React files in a project directory using npx and @codeshift/cli. It uses a glob pattern to select files for transformation.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/codemods/transforms/use-resource-imports/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @codeshift/cli --packages \"react-resource-router#use-resource-imports\" ~my-project/**/*.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating React Components with Resource Hooks\nDESCRIPTION: This snippet shows how to create React components that connect to resources using the useResource hook. The components handle loading and error states while displaying data from the resources when available.\nSOURCE: https://github.com/atlassian-labs/react-resource-router/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useResource } from 'react-resource-router/resources';\nimport { aboutResource, homeResource } from '../routes/resources';\nimport { Loading, Error } from './common';\n\nexport const Home = () => {\n  const { data, loading, error } = useResource(homeResource);\n\n  if (error) {\n    return <Error error={error} />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <div>{data.home.content}</div>;\n};\n\nexport const About = () => {\n  const { data, loading, error } = useResource(aboutResource);\n\n  if (error) {\n    return <Error error={error} />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <div>{data.about.content}</div>;\n};\n```"
  }
]