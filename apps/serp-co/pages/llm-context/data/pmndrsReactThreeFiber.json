[
  {
    "owner": "pmndrs",
    "repo": "react-three-fiber",
    "content": "TITLE: Setting up the Canvas with React Three Fiber\nDESCRIPTION: This snippet shows how to set up a basic React Three Fiber application with a Canvas component. It imports necessary dependencies and creates a responsive canvas container.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/your-first-scene.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from 'react-dom/client'\nimport { Canvas } from '@react-three/fiber'\n\nfunction App() {\n  return (\n    <div id=\"canvas-container\">\n      <Canvas />\n    </div>\n  )\n}\n\ncreateRoot(document.getElementById('root')).render(<App />)\n```\n\n----------------------------------------\n\nTITLE: Adding a Mesh Component to the Scene\nDESCRIPTION: This code snippet demonstrates how to add a simple mesh element to a Three.js canvas. The mesh is the basic building block for 3D objects in Three.js.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/your-first-scene.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Canvas>\n  <mesh />\n```\n\n----------------------------------------\n\nTITLE: Complete React Three Fiber Scene with Box and Lights\nDESCRIPTION: This code snippet shows a complete React Three Fiber application that renders a 3D box with Phong material and includes both ambient and directional lighting. It demonstrates all the concepts discussed in the tutorial.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/your-first-scene.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas } from \"@react-three/fiber\";\n\nexport default function App() {\n  return (\n      <Canvas>\n        <mesh>\n          <boxGeometry args={[2, 2, 2]} />\n          <meshPhongMaterial />\n        </mesh>\n        <ambientLight intensity={0.1} />\n        <directionalLight position={[0, 0, 5]} color=\"red\" />\n      </Canvas>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Three Fiber Component Example\nDESCRIPTION: A reusable React component that creates a 3D box using React Three Fiber. It demonstrates state management, user interaction, and participation in the render loop.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as THREE from 'three'\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\n\nfunction Box(props) {\n  const meshRef = useRef()\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  useFrame((state, delta) => (meshRef.current.rotation.x += delta))\n  return (\n    <mesh\n      {...props}\n      ref={meshRef}\n      scale={active ? 1.5 : 1}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas>\n      <ambientLight intensity={Math.PI / 2} />\n      <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />\n      <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />\n      <Box position={[-1.2, 0, 0]} />\n      <Box position={[1.2, 0, 0]} />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up React Three Fiber with Vite.js\nDESCRIPTION: Command sequence for creating a new Vite.js application with React Three Fiber. Includes project creation, dependency installation, and development server startup.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create app\nnpm create vite my-app\n\n# Select react as framework\n\n# Install dependencies\ncd my-app\nnpm install three @react-three/fiber\n\n# Start development server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Scene with React Three Fiber\nDESCRIPTION: Example of creating a 3D scene with interactive boxes using React Three Fiber. Demonstrates component creation, state management, and interaction handling.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from 'react-dom/client'\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\n\nfunction Box(props) {\n  // This reference gives us direct access to the THREE.Mesh object\n  const ref = useRef()\n  // Hold state for hovered and clicked events\n  const [hovered, hover] = useState(false)\n  const [clicked, click] = useState(false)\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  useFrame((state, delta) => (ref.current.rotation.x += delta))\n  // Return the view, these are regular Threejs elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={clicked ? 1.5 : 1}\n      onClick={(event) => click(!clicked)}\n      onPointerOver={(event) => hover(true)}\n      onPointerOut={(event) => hover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\ncreateRoot(document.getElementById('root')).render(\n  <Canvas>\n    <ambientLight intensity={Math.PI / 2} />\n    <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />\n    <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />\n    <Box position={[-1.2, 0, 0]} />\n    <Box position={[1.2, 0, 0]} />\n  </Canvas>,\n)\n```\n\n----------------------------------------\n\nTITLE: Array Element Attachment in React Three Fiber (JSX)\nDESCRIPTION: Example showing how to attach objects to specific indices of an array property using dash-case notation.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// Attach bar to foo.a[0] and foo.a[1] (array attach is just object attach)\n<foo>\n  <bar attach=\"a-0\" />\n  <bar attach=\"a-1\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Canvas Implementation in React Three Fiber\nDESCRIPTION: Demonstrates the basic setup of a React Three Fiber Canvas component with a simple 3D scene containing a point light and a pink spherical mesh.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/canvas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { Canvas } from '@react-three/fiber'\n\nconst App = () => (\n  <Canvas>\n    <pointLight position={[10, 10, 10]} />\n    <mesh>\n      <sphereGeometry />\n      <meshStandardMaterial color=\"hotpink\" />\n    </mesh>\n  </Canvas>\n)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Object Creation in React Three Fiber\nDESCRIPTION: Demonstrates how to efficiently create and share geometries and materials using useMemo to prevent unnecessary recompilation.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst geom = useMemo(() => new BoxGeometry(), [])\nconst mat = useMemo(() => new MeshBasicMaterial(), [])\nreturn items.map(i => <mesh geometry={geom} material={mat} ...\n```\n\n----------------------------------------\n\nTITLE: Basic React Three Fiber Component Example in JSX\nDESCRIPTION: Complete example showing a React component that renders two interactive 3D boxes using React Three Fiber. Demonstrates state management, event handling, and animation with the useFrame hook.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/fiber/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from 'react-dom/client'\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\n\nfunction Box(props) {\n  // This reference gives us direct access to the THREE.Mesh object\n  const ref = useRef()\n  // Hold state for hovered and clicked events\n  const [hovered, hover] = useState(false)\n  const [clicked, click] = useState(false)\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  useFrame((state, delta) => (ref.current.rotation.x += delta))\n  // Return the view, these are regular Threejs elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={clicked ? 1.5 : 1}\n      onClick={(event) => click(!clicked)}\n      onPointerOver={(event) => hover(true)}\n      onPointerOut={(event) => hover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\ncreateRoot(document.getElementById('root')).render(\n  <Canvas>\n    <ambientLight />\n    <pointLight position={[10, 10, 10]} />\n    <Box position={[-1.2, 0, 0]} />\n    <Box position={[1.2, 0, 0]} />\n  </Canvas>,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Props for Three.js Methods\nDESCRIPTION: This snippet demonstrates how React Three Fiber provides shortcuts for properties that have a .set() method in Three.js, such as positions and colors, allowing for more concise syntax.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/your-first-scene.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<directionalLight position={[0, 0, 5]} color=\"red\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Mesh with Geometry and Material\nDESCRIPTION: This snippet shows how to create a complete mesh with BoxGeometry and MeshStandardMaterial. Components automatically attach to their parent in React Three Fiber.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/your-first-scene.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas>\n  <mesh>\n    <boxGeometry />\n    <meshStandardMaterial />\n  </mesh>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handling in React Three Fiber\nDESCRIPTION: Example showing all available event handlers that can be attached to a mesh component in React Three Fiber, including pointer events, clicks, and update callbacks.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/events.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh\n  onClick={(e) => console.log('click')}\n  onContextMenu={(e) => console.log('context menu')}\n  onDoubleClick={(e) => console.log('double click')}\n  onWheel={(e) => console.log('wheel spins')}\n  onPointerUp={(e) => console.log('up')}\n  onPointerDown={(e) => console.log('down')}\n  onPointerOver={(e) => console.log('over')}\n  onPointerOut={(e) => console.log('out')}\n  onPointerEnter={(e) => console.log('enter')}\n  onPointerLeave={(e) => console.log('leave')}\n  onPointerMove={(e) => console.log('move')}\n  onPointerMissed={() => console.log('missed')}\n  onUpdate={(self) => console.log('props have been updated')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useFrame Hook for Per-Frame Execution in React Three Fiber\nDESCRIPTION: Explains how to use the useFrame hook to execute code on every rendered frame, providing access to state and delta time. Useful for running effects, updating controls, etc.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useFrame } from '@react-three/fiber'\n\nfunction Foo() {\n  useFrame((state, delta, xrFrame) => {\n    // This function runs at the native refresh rate inside of a shared render-loop\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of useThree Hook in React Three Fiber\nDESCRIPTION: This code snippet shows how to import and use the useThree hook to access the state model containing renderer, scene, camera, and other Three.js properties within a component.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useThree } from '@react-three/fiber'\n\nfunction Foo() {\n  const state = useThree()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example of React Three Fiber Component\nDESCRIPTION: A TypeScript version of the basic React Three Fiber component, demonstrating type annotations for props and refs.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/introduction.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as THREE from 'three'\nimport { createRoot } from 'react-dom/client'\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame, ThreeElements } from '@react-three/fiber'\nimport './styles.css'\n\nfunction Box(props: ThreeElements['mesh']) {\n  const meshRef = useRef<THREE.Mesh>(null!)\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  useFrame((state, delta) => (meshRef.current.rotation.x += delta))\n  return (\n    <mesh\n      {...props}\n      ref={meshRef}\n      scale={active ? 1.5 : 1}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : '#2f74c0'} />\n    </mesh>\n  )\n}\n\ncreateRoot(document.getElementById('root')).render(\n  <Canvas>\n    <ambientLight intensity={Math.PI / 2} />\n    <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />\n    <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />\n    <Box position={[-1.2, 0, 0]} />\n    <Box position={[1.2, 0, 0]} />\n  </Canvas>,\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Assets with useLoader in React Three Fiber\nDESCRIPTION: Explains how to use the useLoader hook to load assets and handle loading states with React Suspense. Shows usage with GLTFLoader and error handling.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { useLoader } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nfunction Model() {\n  const result = useLoader(GLTFLoader, '/model.glb')\n  // You don't need to check for the presence of the result, when we're here\n  // the result is guaranteed to be present since useLoader suspends the component\n  return <primitive object={result.scene} />\n}\n\nfunction App() {\n  return (\n    <Suspense fallback={<FallbackComponent /> /* or null */}>\n      <Model />\n    </Suspense>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Fiber with npm\nDESCRIPTION: Basic npm installation command for React Three Fiber and its Three.js dependency. This is the starting point for any React Three Fiber project.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @react-three/fiber\n```\n\n----------------------------------------\n\nTITLE: Loading a Basic Texture with useLoader in React Three Fiber\nDESCRIPTION: This snippet shows how to load a color texture map using TextureLoader from three.js with the useLoader hook from React Three Fiber.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-textures.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst colorMap = useLoader(TextureLoader, 'PavingStones092_1K_Color.jpg')\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in React Three Fiber Mesh Components\nDESCRIPTION: This code demonstrates the various event handlers that can be attached to a mesh component in React Three Fiber. It includes mouse events such as click, context menu, double click, wheel, pointer events, and update events.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/events-and-interaction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh\n  onClick={(e) => console.log('click')}\n  onContextMenu={(e) => console.log('context menu')}\n  onDoubleClick={(e) => console.log('double click')}\n  onWheel={(e) => console.log('wheel spins')}\n  onPointerUp={(e) => console.log('up')}\n  onPointerDown={(e) => console.log('down')}\n  onPointerOver={(e) => console.log('over')}\n  onPointerOut={(e) => console.log('out')}\n  onPointerEnter={(e) => console.log('enter')}\n  onPointerLeave={(e) => console.log('leave')}\n  onPointerMove={(e) => console.log('move')}\n  onPointerMissed={() => console.log('missed')}\n  onUpdate={(self) => console.log('props have been updated')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing On-demand Rendering in React Three Fiber\nDESCRIPTION: Shows how to enable on-demand rendering by setting the frameloop prop to demand on the Canvas component. This reduces unnecessary renders and improves performance.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas frameloop=\"demand\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Scene with TextureLoader in React Three Fiber\nDESCRIPTION: This code creates a complete React Three Fiber scene with a sphere and demonstrates how to integrate texture loading. It uses Suspense for loading handling.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-textures.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { Canvas, useLoader } from '@react-three/fiber'\nimport { TextureLoader } from 'three'\n\nfunction Scene() {\n  const colorMap = useLoader(TextureLoader, 'PavingStones092_1K_Color.jpg')\n  return (\n    <>\n      <ambientLight intensity={0.2} />\n      <directionalLight />\n      <mesh>\n        <sphereGeometry args={[1, 32, 32]} />\n        <meshStandardMaterial />\n      </mesh>\n    </>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas>\n      <Suspense fallback={null}>\n        <Scene />\n      </Suspense>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ThreeElements Interface\nDESCRIPTION: Demonstrates how to properly type custom elements by extending the ThreeElements interface and using module declaration.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/typescript.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, useEffect } from 'react'\nimport { GridHelper } from 'three'\nimport { extend, ThreeElement } from '@react-three/fiber'\n\n// Create our custom element\nclass CustomElement extends GridHelper {}\n\n// Extend so the reconciler will learn about it\nextend({ CustomElement })\n\n// Add types to ThreeElements elements so primitives pick up on it\ndeclare module '@react-three/fiber' {\n  interface ThreeElements {\n    customElement: ThreeElement<typeof CustomElement>\n  }\n}\n\n// react-three-fiber will create your custom component and TypeScript will understand it\n<customComponent />\n```\n\n----------------------------------------\n\nTITLE: Taking Control of Render Loop with useFrame in React Three Fiber\nDESCRIPTION: Shows how to use useFrame with a renderPriority to take control of the render loop, useful for effect composers or custom rendering scenarios.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Render() {\n  // Takes over the render-loop, the user has the responsibility to render\n  useFrame(({ gl, scene, camera }) => {\n    gl.render(scene, camera)\n  }, 1)\n\nfunction RenderOnTop() {\n  // This will execute *after* Render's useframe\n  useFrame(({ gl, ... }) => {\n    gl.render(...)\n  }, 2)\n```\n\n----------------------------------------\n\nTITLE: Resource Reuse Implementation\nDESCRIPTION: Demonstrates how to reuse geometries and materials globally to reduce GPU overhead. Shows proper setup with ColorManagement.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst red = new THREE.MeshLambertMaterial({ color: \"red\" })\nconst sphere = new THREE.SphereGeometry(1, 28, 28)\n\nfunction Scene() {\n  return (\n    <>\n      <mesh geometry={sphere} material={red} />\n      <mesh position={[1, 2, 3]} geometry={sphere} material={red} />\n```\n\n----------------------------------------\n\nTITLE: Using useLoader with External Loader Instance in React Three Fiber\nDESCRIPTION: Demonstrates how to use useLoader with both direct loader reference and external loader instance for controlled pooling and setup.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/v9-migration-guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GLTFLoader } from 'three/addons'\nimport { useLoader } from '@react-three/fiber'\n\nfunction Model() {\n  const gltf = useLoader(GLTFLoader, '/path/to/model.glb')\n  // ...\n}\n\n// or,\n\nconst loader = new GLTFLoader()\nfunction Model() {\n  const gltf = useLoader(loader, '/path/to/model.glb')\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Object Rotation with useFrame in React Three Fiber\nDESCRIPTION: This snippet shows how to animate a mesh's rotation property using the elapsed time from the clock. The object will continuously rotate around the x-axis as time passes.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/basic-animations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nuseFrame(({ clock }) => {\n  myMesh.current.rotation.x = clock.elapsedTime\n})\n```\n\n----------------------------------------\n\nTITLE: React Three Fiber with TypeScript\nDESCRIPTION: TypeScript implementation of the 3D box example using React Three Fiber. Shows proper type definitions for refs, event handlers, and Three.js elements.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/fiber/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as THREE from 'three'\nimport { createRoot } from 'react-dom/client'\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame, ThreeElements } from '@react-three/fiber'\n\nfunction Box(props: ThreeElements['mesh']) {\n  const ref = useRef<THREE.Mesh>(null!)\n  const [hovered, hover] = useState(false)\n  const [clicked, click] = useState(false)\n  useFrame((state, delta) => (ref.current.rotation.x += delta))\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={clicked ? 1.5 : 1}\n      onClick={(event) => click(!clicked)}\n      onPointerOver={(event) => hover(true)}\n      onPointerOut={(event) => hover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\ncreateRoot(document.getElementById('root') as HTMLElement).render(\n  <Canvas>\n    <ambientLight />\n    <pointLight position={[10, 10, 10]} />\n    <Box position={[-1.2, 0, 0]} />\n    <Box position={[1.2, 0, 0]} />\n  </Canvas>,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Constructor Arguments with the args Prop\nDESCRIPTION: This snippet demonstrates how to pass constructor arguments to Three.js objects using the args prop in React Three Fiber, which takes an array representing the constructor arguments.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/your-first-scene.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<boxGeometry args={[2, 2, 2]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Instanced Meshes\nDESCRIPTION: Shows how to implement instancing to render multiple objects in a single draw call, significantly improving performance for repetitive elements.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Instances({ count = 100000, temp = new THREE.Object3D() }) {\n  const instancedMeshRef = useRef()\n  useEffect(() => {\n    // Set positions\n    for (let i = 0; i < count; i++) {\n      temp.position.set(Math.random(), Math.random(), Math.random())\n      temp.updateMatrix()\n      instancedMeshRef.current.setMatrixAt(i, temp.matrix)\n    }\n    // Update the instance\n    instancedMeshRef.current.instanceMatrix.needsUpdate = true\n  }, [])\n  return (\n    <instancedMesh ref={instancedMeshRef} args={[null, null, count]}>\n      <boxGeometry />\n      <meshPhongMaterial />\n    </instancedMesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative Object Properties in React Three Fiber (JSX)\nDESCRIPTION: The recommended declarative approach for creating a Three.js mesh with nested components for geometry and material. This pattern prevents unnecessary recreation of objects during renders.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh visible userData={{ hello: 'world' }} position={[1, 2, 3]} rotation={[Math.PI / 2, 0, 0]}>\n  <sphereGeometry args={[1, 16, 16]} />\n  <meshStandardMaterial color=\"hotpink\" transparent />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Using useFrame Hook in React Three Fiber\nDESCRIPTION: This snippet demonstrates the basic usage of the useFrame hook to execute code on every frame of the render loop. The function logs a message on each frame render.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/basic-animations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useFrame } from '@react-three/fiber'\n\nfunction MyAnimatedBox() {\n  useFrame(() => {\n    console.log(\"Hey, I'm executing every frame!\")\n  })\n  return (\n    <mesh>\n      <boxGeometry />\n      <meshBasicMaterial color=\"royalblue\" />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Existing Objects with primitive in React Three Fiber (JSX)\nDESCRIPTION: Example demonstrating how to add pre-existing Three.js objects to the scene graph using the primitive component, which allows setting properties but not automatic disposal.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nconst mesh = new THREE.Mesh(geometry, material)\n\nfunction Component() {\n  return <primitive object={mesh} position={[10, 0, 0]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Loader Extensions with useLoader in React Three Fiber\nDESCRIPTION: Shows how to provide a callback to configure loaders, such as setting up a DRACOLoader for a GLTFLoader.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader'\n\nuseLoader(GLTFLoader, url, (loader) => {\n  const dracoLoader = new DRACOLoader()\n  dracoLoader.setDecoderPath('/draco-gltf/')\n  loader.setDRACOLoader(dracoLoader)\n})\n```\n\n----------------------------------------\n\nTITLE: Using ThreeElements Interface for Component Props\nDESCRIPTION: Shows how to type components using ThreeElements interface to extract mesh properties and combine them with custom props.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/typescript.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThreeElements } from '@react-three/fiber'\n\ntype FooProps = ThreeElements['mesh'] & { bar: boolean }\n\nfunction Foo({ bar, ...props}: FooProps) {\n  useEffect(() => {\n    console.log(bar)\n  }, [bar])\n  return <mesh {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-loading Assets with useLoader in React Three Fiber\nDESCRIPTION: Shows how to pre-load assets globally before they are needed in the component tree.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nuseLoader.preload(GLTFLoader, '/model.glb' /* extensions */)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scene with React Three Fiber\nDESCRIPTION: Example showing how to create a basic 3D scene with a cube using React Three Fiber's declarative component syntax.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/how-it-works.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber'\n\nfunction MyApp() {\n  return (\n    <Canvas>\n      <group>\n        <mesh>\n          <meshNormalMaterial />\n          <boxGeometry args={[2, 2, 2]} />\n        </mesh>\n      </group>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Typing useRef with Mesh in React Three Fiber\nDESCRIPTION: Demonstrates how to properly type a useRef hook when working with Three.js Mesh objects in React Three Fiber. Uses non-null assertion for ref access in effects.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/typescript.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, useEffect } from 'react'\nimport { Mesh } from 'three'\n\nfunction Box(props) {\n  const meshRef = useRef<Mesh>(null!)\n\n  useEffect(() => {\n    console.log(Boolean(meshRef.current))\n  }, [])\n\n  return (\n    <mesh {...props} ref={meshRef}>\n      <boxGeometry />\n      <meshBasicMaterial />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Textures with useLoader in React Three Fiber\nDESCRIPTION: This code demonstrates how to load multiple texture maps at once using useLoader with an array of texture paths. It returns an array of loaded textures in the same order.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-textures.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst [colorMap, displacementMap, normalMap, roughnessMap, aoMap] = useLoader(TextureLoader, [\n  'PavingStones092_1K_Color.jpg',\n  'PavingStones092_1K_Displacement.jpg',\n  'PavingStones092_1K_Normal.jpg',\n  'PavingStones092_1K_Roughness.jpg',\n  'PavingStones092_1K_AmbientOcclusion.jpg',\n])\n```\n\n----------------------------------------\n\nTITLE: GLTF Model Loading with Resource Caching\nDESCRIPTION: Shows how to implement efficient model loading using useLoader with automatic resource caching for GLTF assets.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Shoe(props) {\n  const { nodes, materials } = useLoader(GLTFLoader, \"/shoe.glb\")\n  return (\n    <group {...props} dispose={null}>\n      <mesh geometry={nodes.shoe.geometry} material={materials.canvas} />\n    </group>\n  )\n}\n\n<Shoe position={[1, 2, 3]} />\n<Shoe position={[4, 5, 6]} />\n```\n\n----------------------------------------\n\nTITLE: Equivalent Three.js Code for Canvas and Mesh Setup\nDESCRIPTION: This snippet shows the vanilla Three.js code equivalent to the React Three Fiber JSX syntax, demonstrating how Fiber abstracts the scene setup, render loop, and object creation.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/your-first-scene.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst scene = new THREE.Scene()\nconst camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\n\nconst renderer = new THREE.WebGLRenderer()\nrenderer.setSize(width, height)\ndocument.querySelector('#canvas-container').appendChild(renderer.domElement)\n\nconst mesh = new THREE.Mesh()\nmesh.geometry = new THREE.BoxGeometry()\nmesh.material = new THREE.MeshStandardMaterial()\n\nscene.add(mesh)\n\nfunction animate() {\n  requestAnimationFrame(animate)\n  renderer.render(scene, camera)\n}\n\nanimate()\n```\n\n----------------------------------------\n\nTITLE: Extending React Three Fiber with Custom Components (JSX)\nDESCRIPTION: Example showing how to extend React Three Fiber's catalog of JSX elements with third-party objects using the extend function, allowing them to be used declaratively.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from '@react-three/fiber'\nimport { OrbitControls, TransformControls } from 'three-stdlib'\nextend({ OrbitControls, TransformControls })\n\n// ...\nreturn (\n  <>\n    <orbitControls />\n    <transformControls />\n```\n\n----------------------------------------\n\nTITLE: Ordering useFrame Execution with Negative Indices in React Three Fiber\nDESCRIPTION: Demonstrates how to use negative indices with useFrame to control the execution order across the component tree without taking over the render loop.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction A() {\n  // This will execute first\n  useFrame(() => ..., -2)\n\nfunction B() {\n  // This useFrame will execute *after* A's\n  useFrame(() => ..., -1)\n```\n\n----------------------------------------\n\nTITLE: Loading OBJ Models\nDESCRIPTION: Implementation for loading OBJ format 3D models using OBJLoader.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-models.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js'\nimport { useLoader } from '@react-three/fiber'\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Scene() {\n  const obj = useLoader(OBJLoader, '/Poimandres.obj')\n  return <primitive object={obj} />\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Scene with Multiple Textures in React Three Fiber\nDESCRIPTION: This code presents a complete implementation of a scene with a spherical mesh using multiple texture maps. It includes setting the displacementScale and appropriate geometry segments for the displacement map.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-textures.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Scene() {\n  const [colorMap, displacementMap, normalMap, roughnessMap, aoMap] = useLoader(TextureLoader, [\n    'PavingStones092_1K_Color.jpg',\n    'PavingStones092_1K_Displacement.jpg',\n    'PavingStones092_1K_Normal.jpg',\n    'PavingStones092_1K_Roughness.jpg',\n    'PavingStones092_1K_AmbientOcclusion.jpg',\n  ])\n  return (\n    <mesh>\n      {/* Width and height segments for displacementMap */}\n      <sphereGeometry args={[1, 100, 100]} />\n      <meshStandardMaterial\n        displacementScale={0.2}\n        map={colorMap}\n        displacementMap={displacementMap}\n        normalMap={normalMap}\n        roughnessMap={roughnessMap}\n        aoMap={aoMap}\n      />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lights to the Scene\nDESCRIPTION: This code shows how to add ambient and directional lights to a Three.js scene using React Three Fiber. It demonstrates adding multiple components to the Canvas.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/your-first-scene.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas>\n  <ambientLight intensity={0.1} />\n  <directionalLight color=\"red\" position={[0, 0, 5]} />\n```\n\n----------------------------------------\n\nTITLE: Using Object Notation with useTexture in React Three Fiber\nDESCRIPTION: This code shows the object notation approach with useTexture, which allows for direct spreading of the texture properties into a material. This is the most convenient method as it automatically maps texture files to the correct material properties.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-textures.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst props = useTexture({\n  map: 'PavingStones092_1K_Color.jpg',\n  displacementMap: 'PavingStones092_1K_Displacement.jpg',\n  normalMap: 'PavingStones092_1K_Normal.jpg',\n  roughnessMap: 'PavingStones092_1K_Roughness.jpg',\n  aoMap: 'PavingStones092_1K_AmbientOcclusion.jpg',\n})\n\nreturn (\n  <mesh>\n    <sphereGeometry args={[1, 32, 32]} />\n    <meshStandardMaterial {...props} />\n  </mesh>\n)\n```\n\n----------------------------------------\n\nTITLE: Efficient Event Handling in React Three Fiber\nDESCRIPTION: Shows how to handle events efficiently by directly mutating object properties using refs instead of updating state.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh onPointerMove={(e) => (ref.current.position.x = e.point.x)} />\n```\n\n----------------------------------------\n\nTITLE: Basic Click Interaction with Mesh in React Three Fiber\nDESCRIPTION: A simple example of adding a click handler to a mesh that displays an alert when clicked. This demonstrates the most basic form of interaction with a 3D object.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/events-and-interaction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh onClick={() => alert('Hellooo')}>\n  <boxGeometry />\n  <meshPhongMaterial color=\"royalblue\" />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Selecting State Properties with useThree in React Three Fiber\nDESCRIPTION: Demonstrates how to use the useThree hook to select specific state properties, avoiding unnecessary re-renders. Shows examples of selecting camera, viewport, and warns about limitations with internal three.js properties.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Will only trigger re-render when the default camera is exchanged\nconst camera = useThree((state) => state.camera)\n// Will only re-render on resize changes\nconst viewport = useThree((state) => state.viewport)\n// ❌ You cannot expect reactivity from three.js internals!\nconst zoom = useThree((state) => state.camera.zoom)\n```\n\n----------------------------------------\n\nTITLE: Efficient Conditional Visibility in React Three Fiber\nDESCRIPTION: Demonstrates a more efficient approach to handling conditional visibility using the visible prop, which avoids unnecessary remounting.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Stage1 visible={stage === 1} />\n<Stage2 visible={stage === 2} />\n<Stage3 visible={stage === 3} />\n\nfunction Stage1(props) {\n  return (\n    <group {...props}>\n      ...\n```\n\n----------------------------------------\n\nTITLE: Canvas Error Handling with Fallback\nDESCRIPTION: Shows how to implement fallback content when WebGL is not supported in the browser.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/canvas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas fallback={<div>Sorry no WebGL supported!</div>}>\n  <mesh />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Level of Detail Implementation\nDESCRIPTION: Demonstrates how to implement level of detail (LOD) using the Detailed component from Drei to optimize performance based on camera distance.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Detailed, useGLTF } from '@react-three/drei'\n\nfunction Model() {\n  const [low, mid, high] = useGLTF([\"/low.glb\", \"/mid.glb\", \"/high.glb\"])\n  return (\n    <Detailed distances={[0, 10, 20]}>\n      <mesh geometry={high} />\n      <mesh geometry={mid} />\n      <mesh geometry={low} />\n    <Detailed/>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Memoized Object Graphs with useGraph in React Three Fiber\nDESCRIPTION: Demonstrates how to use the useGraph hook to create a memoized, named object/material collection from any Object3D, useful for working with loaded models.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLoader, useGraph } from '@react-three/fiber'\n\nfunction Model(url) {\n  const scene = useLoader(OBJLoader, url)\n  const { nodes, materials } = useGraph(scene)\n  return <mesh geometry={nodes.robot.geometry} material={materials.metal} />\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-generated GLTF JSX Component\nDESCRIPTION: React component generated from GLTF model using gltfjsx tool, includes material and geometry handling.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-models.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\n\nexport default function Model(props) {\n  const groupRef = useRef()\n  const { nodes, materials } = useGLTF('/Poimandres.gltf')\n  return (\n    <group ref={groupRef} {...props} dispose={null}>\n      <mesh castShadow receiveShadow geometry={nodes.Curve007_1.geometry} material={materials['Material.001']} />\n      <mesh castShadow receiveShadow geometry={nodes.Curve007_2.geometry} material={materials['Material.002']} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/Poimandres.gltf')\n```\n\n----------------------------------------\n\nTITLE: Setting Properties with Shortcuts in React Three Fiber (JSX)\nDESCRIPTION: Example demonstrating how to use shortcuts for properties with .set() methods, such as position arrays and color strings, rather than creating new Three.js objects.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh position={[1, 2, 3]} />\n  <meshStandardMaterial color=\"hotpink\" />\n```\n\n----------------------------------------\n\nTITLE: Loading GLTF Model Scene\nDESCRIPTION: Component that loads and renders a GLTF model using useLoader hook.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-models.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Scene() {\n  const gltf = useLoader(GLTFLoader, '/Poimandres.gltf')\n  return <primitive object={gltf.scene} />\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Asset Loading with useLoader in React Three Fiber\nDESCRIPTION: Shows how to use useLoader for efficient asset loading and caching in React Three Fiber, improving performance and resource management.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component() {\n  const texture = useLoader(TextureLoader, url)\n  return (\n    <mesh>\n      <sphereGeometry />\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: WebGPU Integration in React Three Fiber\nDESCRIPTION: Example of implementing WebGPU renderer support with async initialization in React Three Fiber.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/v9-migration-guide.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as THREE from 'three/webgpu'\nimport * as TSL from 'three/tsl'\nimport { Canvas, extend, useFrame, useThree } from '@react-three/fiber'\n\ndeclare module '@react-three/fiber' {\n  interface ThreeElements extends ThreeToJSXElements<typeof THREE> {}\n}\n\nextend(THREE as any)\n\nexport default () => (\n  <Canvas\n    gl={async (props) => {\n      const renderer = new THREE.WebGPURenderer(props as any)\n      await renderer.init()\n      return renderer\n    }}>\n      <mesh>\n        <meshBasicNodeMaterial />\n        <boxGeometry />\n      </mesh>\n  </Canvas>\n)\n```\n\n----------------------------------------\n\nTITLE: Canvas Performance Configuration\nDESCRIPTION: Demonstrates how to configure performance defaults in Canvas component.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas performance={{ min: 0.5 }}>...</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Efficient Object Reuse in React Three Fiber Loops\nDESCRIPTION: Shows how to efficiently reuse objects in loops to minimize garbage collection and improve performance in React Three Fiber applications.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props)\n  const vec = new THREE.Vector()\n  useFrame(() => {\n    ref.current.position.lerp(vec.set(x, y, z), 0.1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Attaching Non-Scene Objects with explicit attach in React Three Fiber (JSX)\nDESCRIPTION: Example showing how to use the attach prop to bind objects to their parent's properties. This makes objects managed, reactive, and automatically disposed when unmounted.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <meshBasicMaterial attach=\"material\" />\n  <boxGeometry attach=\"geometry\" />\n```\n\n----------------------------------------\n\nTITLE: WebGPU Canvas Implementation\nDESCRIPTION: Shows how to set up a Canvas using Three.js WebGPU renderer with async initialization.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/canvas.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as THREE from 'three/webgpu'\nimport * as TSL from 'three/tsl'\nimport { Canvas, extend, useFrame, useThree } from '@react-three/fiber'\n\ndeclare module '@react-three/fiber' {\n  interface ThreeElements extends ThreeToJSXElements<typeof THREE> {}\n}\n\nextend(THREE as any)\n\nexport default () => (\n  <Canvas\n    gl={async (props) => {\n      const renderer = new THREE.WebGPURenderer(props as any)\n      await renderer.init()\n      return renderer\n    }}>\n      <mesh>\n        <meshBasicNodeMaterial />\n        <boxGeometry />\n      </mesh>\n  </Canvas>\n)\n```\n\n----------------------------------------\n\nTITLE: Complete React Three Fiber Example without Build Tools\nDESCRIPTION: A full implementation example of React Three Fiber without build tools. Demonstrates creating 3D boxes that respond to user interaction using browser ES Modules.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/installation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactDOM from 'https://esm.sh/react-dom'\nimport React, { useRef, useState } from 'https://esm.sh/react'\nimport { Canvas, useFrame } from 'https://esm.sh/@react-three/fiber'\nimport htm from 'https://esm.sh/htm'\n\nconst html = htm.bind(React.createElement)\n\nfunction Box(props) {\n  const meshRef = useRef()\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  useFrame(() => (meshRef.current.rotation.x = meshRef.current.rotation.y += 0.01))\n  return html` <mesh\n    ...${props}\n    ref=${meshRef}\n    scale=${active ? 1.5 : 1}\n    onClick=${() => setActive(!active)}\n    onPointerOver=${() => setHover(true)}\n    onPointerOut=${() => setHover(false)}\n  >\n    <boxGeometry args=${[1, 1, 1]} />\n    <meshStandardMaterial color=${hovered ? 'hotpink' : 'orange'} />\n  </mesh>`\n}\n\nReactDOM.render(\n  html` <${Canvas}>\n    <ambientLight />\n    <pointLight position=${[10, 10, 10]} />\n    <${Box} position=${[-1.2, 0, 0]} />\n    <${Box} position=${[1.2, 0, 0]} />\n  <//>`,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure in React Three Fiber\nDESCRIPTION: Detailed structure of event data object containing DOM event data, intersection information, and Three.js specific properties.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/events.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n({\n  ...DomEvent\n  ...Intersection\n  intersections: Intersection[]\n  object: Object3D\n  eventObject: Object3D\n  unprojectedPoint: Vector3\n  ray: Ray\n  camera: Camera\n  sourceEvent: DomEvent\n  delta: number\n}) => ...\n```\n\n----------------------------------------\n\nTITLE: Constructor Arguments with args in React Three Fiber (JSX)\nDESCRIPTION: Example showing how to pass constructor arguments to Three.js objects using the args property. If args change, the object will be reconstructed from scratch.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<sphereGeometry args={[1, 32]} />\n```\n\n----------------------------------------\n\nTITLE: Loading Textures with useTexture from @react-three/drei\nDESCRIPTION: This snippet demonstrates using the useTexture hook from @react-three/drei to load multiple textures. It's a simpler alternative to useLoader that doesn't require importing TextureLoader.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-textures.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { useTexture } from \"@react-three/drei\"\n\n...\n\nconst [colorMap, displacementMap, normalMap, roughnessMap, aoMap] = useTexture([\n  'PavingStones092_1K_Color.jpg',\n  'PavingStones092_1K_Displacement.jpg',\n  'PavingStones092_1K_Normal.jpg',\n  'PavingStones092_1K_Roughness.jpg',\n  'PavingStones092_1K_AmbientOcclusion.jpg',\n])\n```\n\n----------------------------------------\n\nTITLE: Pointer Capture Implementation\nDESCRIPTION: Example showing how to implement pointer capture and release in React Three Fiber event handling.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/events.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nonPointerDown={e => {\n  // Only the mesh closest to the camera will be processed\n  e.stopPropagation()\n  // You may optionally capture the target\n  e.target.setPointerCapture(e.pointerId)\n}}\nonPointerUp={e => {\n  e.stopPropagation()\n  // Optionally release capture\n  e.target.releasePointerCapture(e.pointerId)\n}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mesh Reference in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to create a reference to a mesh object using React's useRef hook. The reference will be used to directly manipulate the three.js object.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/basic-animations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\n\nfunction MyAnimatedBox() {\n  const myMesh = React.useRef()\n  return (\n    <mesh ref={myMesh}>\n      <boxGeometry />\n      <meshBasicMaterial color=\"royalblue\" />\n    </mesh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Textures to a Material in React Three Fiber\nDESCRIPTION: This snippet shows how to apply various texture maps (color, displacement, normal, roughness, ambient occlusion) to a meshStandardMaterial.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-textures.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<meshStandardMaterial\n  map={colorMap}\n  displacementMap={displacementMap}\n  normalMap={normalMap}\n  roughnessMap={roughnessMap}\n  aoMap={aoMap}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Canvas Root Creation\nDESCRIPTION: Demonstrates how to create a custom canvas root with manual size management and event handling.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/canvas.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as THREE from 'three'\nimport { extend, createRoot, events } from '@react-three/fiber'\n\nextend(THREE)\n\nconst root = createRoot(document.querySelector('canvas'))\n\nasync function app() {\n  await root.configure({ events, camera: { position: [0, 0, 50] } })\n\n  window.addEventListener('resize', () => {\n    root.configure({ size: { width: window.innerWidth, height: window.innerHeight } })\n  })\n\n  window.dispatchEvent(new Event('resize'))\n\n  root.render(<App />)\n}\n\napp()\n```\n\n----------------------------------------\n\nTITLE: Exchanging Default Objects in React Three Fiber\nDESCRIPTION: Demonstrates how to use the useThree hook to get the set function and replace default objects, such as the camera, in the effect hook.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  const set = useThree((state) => state.set)\n  ...\n  useEffect(() => {\n    set({ camera: new THREE.OrthographicCamera(...) })\n  }, [])\n```\n\n----------------------------------------\n\nTITLE: Accessing Clock from useFrame in React Three Fiber\nDESCRIPTION: This snippet shows how to extract time information from the clock parameter in useFrame. The elapsed time value increases with each frame and can be used for animations.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/basic-animations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nuseFrame(({ clock }) => {\n  const a = clock.elapsedTime\n  console.log(a) // the value will be 0 at scene initialization and grow each frame\n})\n```\n\n----------------------------------------\n\nTITLE: Using startTransition for Expensive Operations in React Three Fiber\nDESCRIPTION: Shows how to use React 18's startTransition API to defer and schedule expensive operations in React Three Fiber applications.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTransition } from 'react'\nimport { Points } from '@react-three/drei'\n\nconst [isPending, startTransition] = useTransition()\nconst [radius, setRadius] = useState(1)\nconst positions = calculatePositions(radius)\nconst colors = calculateColors(radius)\nconst sizes = calculateSizes(radius)\n\n<Points\n  positions={positions}\n  colors={colors}\n  sizes={sizes}\n  onPointerOut={() => {\n    startTransition(() => {\n      setRadius(prev => prev + 1)\n    })\n  }}\n>\n  <meshBasicMaterial vertexColors />\n</Points>\n```\n\n----------------------------------------\n\nTITLE: Interactive Scaling Mesh in React Three Fiber\nDESCRIPTION: Implementation of an interactive mesh that scales up when clicked and returns to normal size when clicked again. It uses React state to track the active status and applies conditional scaling based on this state.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/events-and-interaction.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh scale={active ? 1.5 : 1} onClick={() => setActive(!active)}>\n  <boxGeometry />\n  <meshPhongMaterial color=\"royalblue\" />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Animations with On-demand Rendering\nDESCRIPTION: Shows how to properly synchronize animations with on-demand rendering by pre-emptively scheduling renders using invalidate and requestAnimationFrame.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh\n  onClick={() => {\n    // Pre-emptively schedule a render\n    invalidate()\n    // Wait for the next frame to start the animation\n    requestAnimationFrame(() => controls.dolly(1, true))\n  }}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of useThree Hook Inside Canvas Component\nDESCRIPTION: This code snippet demonstrates the correct way to use the useThree hook by placing it inside a component that is rendered within the Canvas element.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  const { size } = useThree()\n  ...\n}\n\nfunction App() {\n  return (\n    <Canvas>\n      <Foo />\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Disposal in React Three Fiber (JSX)\nDESCRIPTION: Example showing how to prevent automatic disposal of objects by setting dispose={null}, which is useful for globally managed assets or cached resources.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nconst globalGeometry = new THREE.BoxGeometry()\nconst globalMaterial = new THREE.MeshBasicMaterial()\n\nfunction Mesh() {\n  return (\n    <group dispose={null}>\n      <mesh geometry={globalGeometry} material={globalMaterial} />\n```\n\n----------------------------------------\n\nTITLE: Nested Loading Implementation\nDESCRIPTION: Shows how to implement nested loading patterns for progressive asset loading, starting with low-quality versions and upgrading to higher quality.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <Suspense fallback={<span>loading...</span>}>\n      <Canvas>\n        <Suspense fallback={<Model url=\"/low-quality.glb\" />}>\n          <Model url=\"/high-quality.glb\" />\n        </Suspense>\n      </Canvas>\n    </Suspense>\n  )\n}\n\nfunction Model({ url }) {\n  const { scene } = useGLTF(url)\n  return <primitive object={scene} />\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Frame Triggering with Controls\nDESCRIPTION: Demonstrates how to manually trigger frame renders using the invalidate function when using orbital controls. This ensures proper rendering when camera controls mutate values.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Controls() {\n  const orbitControlsRef = useRef()\n  const { invalidate, camera, gl } = useThree()\n  useEffect(() => {\n    orbitControlsRef.current.addEventListener('change', invalidate)\n    return () => orbitControlsRef.current.removeEventListener('change', invalidate)\n  }, [])\n  return <orbitControls ref={orbitControlsRef} args={[camera, gl.domElement]} />\n```\n\n----------------------------------------\n\nTITLE: Performance Monitor Basic Usage\nDESCRIPTION: Demonstrates basic usage of PerformanceMonitor component to adjust device pixel ratio (dpr) based on performance thresholds.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [dpr, setDpr] = useState(1.5)\n  return (\n    <Canvas dpr={dpr}>\n      <PerformanceMonitor onIncline={() => setDpr(2)} onDecline={() => setDpr(1)} >\n```\n\n----------------------------------------\n\nTITLE: Using find method in ReactThreeTestInstance\nDESCRIPTION: Finds a single test instance for which the provided test function returns true. Throws an error if not exactly one test instance is found.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.find(test)\n```\n\n----------------------------------------\n\nTITLE: Tracking Loading Progress with useLoader in React Three Fiber\nDESCRIPTION: Shows how to use a callback to track loading progress when using useLoader.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nuseLoader(loader, url, extensions, (xhr) => {\n  console.log((xhr.loaded / xhr.total) * 100 + '% loaded')\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Nodes and Materials from GLTFLoader in React Three Fiber\nDESCRIPTION: Demonstrates how to access the nodes and materials collections when loading a GLTF model with useLoader.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst { nodes, materials } = useLoader(GLTFLoader, url)\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Tree-shaking in React Three Fiber\nDESCRIPTION: This snippet demonstrates how to manually implement tree-shaking in React Three Fiber v8 using the extend API. It shows how to import and extend specific Three.js components for use in a React component.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/canvas.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend, createRoot } from '@react-three/fiber'\nimport { Mesh, BoxGeometry, MeshStandardMaterial } from 'three'\n\nextend({ Mesh, BoxGeometry, MeshStandardMaterial })\n\ncreateRoot(canvas).render(\n  <>\n    <mesh>\n      <boxGeometry />\n      <meshStandardMaterial />\n    </mesh>\n  </>,\n)\n```\n\n----------------------------------------\n\nTITLE: Extending Custom Elements in React Three Fiber\nDESCRIPTION: Example of creating and extending custom Three.js elements for use in React Three Fiber with basic implementation.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/typescript.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, useEffect } from 'react'\nimport { GridHelper } from 'three'\nimport { extend } from '@react-three/fiber'\n\n// Create our custom element\nclass CustomElement extends GridHelper {}\n\n// Extend so the reconciler will learn about it\nextend({ CustomElement })\n\n<customElement />\n```\n\n----------------------------------------\n\nTITLE: React Three Fiber Example with React Native\nDESCRIPTION: Example of using React Three Fiber in a React Native application. Shows loading a 3D model using the useGLTF hook from Drei with proper native imports.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/installation.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { Canvas } from '@react-three/fiber/native'\nimport { useGLTF } from '@react-three/drei/native'\nimport modelPath from './path/to/model.glb'\n\nfunction Model(props) {\n  const gltf = useGLTF(modelPath)\n  return <primitive {...props} object={gltf.scene} />\n}\n\nexport default function App() {\n  return (\n    <Canvas>\n      <ambientLight />\n      <Suspense>\n        <Model />\n      </Suspense>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Tree-shaking with Babel Plugin for React Three Fiber\nDESCRIPTION: This snippet illustrates the input and output of the official Babel plugin for React Three Fiber. It automatically transforms the code to implement tree-shaking by importing necessary components from Three.js and extending them.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/canvas.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// In:\n\nimport { createRoot } from '@react-three/fiber'\n\ncreateRoot(canvasNode).render(\n  <mesh>\n    <boxGeometry />\n    <meshStandardMaterial />\n  </mesh>,\n)\n\n// Out:\n\nimport { createRoot, extend } from '@react-three/fiber'\nimport { Mesh as _Mesh, BoxGeometry as _BoxGeometry, MeshStandardMaterial as _MeshStandardMaterial } from 'three'\n\nextend({\n  Mesh: _Mesh,\n  BoxGeometry: _BoxGeometry,\n  MeshStandardMaterial: _MeshStandardMaterial,\n})\n\ncreateRoot(canvasNode).render(\n  <mesh>\n    <boxGeometry />\n    <meshStandardMaterial />\n  </mesh>,\n)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example of React Three Fiber Usage\nDESCRIPTION: Demonstrates how to use React Three Fiber with TypeScript, including type annotations and proper component typing.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as THREE from 'three'\nimport { createRoot } from 'react-dom/client'\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame, ThreeElements } from '@react-three/fiber'\n\nfunction Box(props: ThreeElements['mesh']) {\n  const ref = useRef<THREE.Mesh>(null!)\n  const [hovered, hover] = useState(false)\n  const [clicked, click] = useState(false)\n  useFrame((state, delta) => (ref.current.rotation.x += delta))\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={clicked ? 1.5 : 1}\n      onClick={(event) => click(!clicked)}\n      onPointerOver={(event) => hover(true)}\n      onPointerOut={(event) => hover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\ncreateRoot(document.getElementById('root') as HTMLElement).render(\n  <Canvas>\n    <ambientLight intensity={Math.PI / 2} />\n    <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />\n    <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />\n    <Box position={[-1.2, 0, 0]} />\n    <Box position={[1.2, 0, 0]} />\n  </Canvas>,\n)\n```\n\n----------------------------------------\n\nTITLE: Working with Multi-Materials in React Three Fiber (JSX)\nDESCRIPTION: Example showing how to attach multiple materials to a mesh by explicitly specifying indices in the material array.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  {colors.map((color, index) => <meshBasicMaterial key={index} attach={`material-${index}`} color={color} />)}\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Properties with Dash-Case in React Three Fiber (JSX)\nDESCRIPTION: Example demonstrating how to access nested properties using dash-case notation, allowing direct modification of deeply nested attributes.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh rotation-x={1} material-uniforms-resolution-value={[512, 512]} />\n```\n\n----------------------------------------\n\nTITLE: Using React Three Fiber with Browser ES Modules\nDESCRIPTION: Basic implementation of React Three Fiber without build tools, using ES Modules from esm.sh and HTM for JSX-like syntax in the browser.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/installation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactDOM from 'https://esm.sh/react-dom'\nimport React, { useRef, useState } from 'https://esm.sh/react'\nimport { Canvas, useFrame } from 'https://esm.sh/@react-three/fiber'\nimport htm from 'https://esm.sh/htm'\n\nconst html = htm.bind(React.createElement)\nReactDOM.render(html`<${Canvas}>...<//>`, document.getElementById('root'))\n```\n\n----------------------------------------\n\nTITLE: Implicit Attachment for Common Three.js Objects in React Three Fiber (JSX)\nDESCRIPTION: Example demonstrating how Material and BufferGeometry objects are automatically attached to their parent mesh without needing explicit attach properties.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <meshBasicMaterial />\n  <boxGeometry />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Assets with useLoader in React Three Fiber\nDESCRIPTION: Demonstrates how to use useLoader to load multiple assets in parallel, such as multiple textures.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst [bumpMap, specMap, normalMap] = useLoader(TextureLoader, [url1, url2, url2])\n```\n\n----------------------------------------\n\nTITLE: Using setScalar Method in React Three Fiber (JSX)\nDESCRIPTION: Example showing how to use the setScalar shortcut for properties like scale that have a setScalar method, allowing a single value to be applied to all dimensions.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Translates to <mesh scale={[1, 1, 1]} />\n<mesh scale={1} />\n```\n\n----------------------------------------\n\nTITLE: Efficient Property Mutation in React Three Fiber useFrame\nDESCRIPTION: Demonstrates the recommended approach for updating object properties using useFrame and refs, which is more performant than state updates.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst meshRef = useRef()\nuseFrame((state, delta) => (meshRef.current.position.x += delta))\nreturn <mesh ref={meshRef} />\n```\n\n----------------------------------------\n\nTITLE: Setting up Interaction State in React Three Fiber\nDESCRIPTION: Code showing how to create a state variable to track if a mesh is active. This state will be used to control the mesh's properties based on user interaction.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/events-and-interaction.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [active, setActive] = useState(false)\n```\n\n----------------------------------------\n\nTITLE: React Three Fiber with React Native\nDESCRIPTION: Example of using React Three Fiber in a React Native application to create interactive 3D components with Expo.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/fiber/readme.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber/native'\nfunction Box(props) {\n  const mesh = useRef(null)\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  useFrame((state, delta) => (mesh.current.rotation.x += delta))\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? 1.5 : 1}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\nexport default function App() {\n  return (\n    <Canvas>\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <Box position={[-1.2, 0, 0]} />\n      <Box position={[1.2, 0, 0]} />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Extend Pattern for Component Creation in React Three Fiber\nDESCRIPTION: Shows the new extend signature that can produce components from three.js classes with TypeScript support.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/v9-migration-guide.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OrbitControls } from 'three/addons'\nimport { type ThreeElement, type ThreeElements } from '@react-three/fiber'\n\ndeclare module '@react-three/fiber' {\n  interface ThreeElements {\n    orbitControls: ThreeElement<typeof OrbitControls>\n  }\n}\n\nextend({ OrbitControls })\n\n<orbitControls args={[camera, gl.domElement]}>\n\n// or,\n\nconst Controls = extend(OrbitControls)\n<Controls args={[camera, gl.domElement]} />\n```\n\n----------------------------------------\n\nTITLE: Improved Shadow Camera Attachment in React Three Fiber (JSX)\nDESCRIPTION: A real-world example showing how to improve directional light shadow camera configuration using the attach property instead of dash-case properties.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n- <directionalLight\n-   castShadow\n-   position={[2.5, 8, 5]}\n-   shadow-mapSize={[1024, 1024]}\n-   shadow-camera-far={50}\n-   shadow-camera-left={-10}\n-   shadow-camera-right={10}\n-   shadow-camera-top={10}\n-   shadow-camera-bottom={-10}\n- />\n+ <directionalLight castShadow position={[2.5, 8, 5]} shadow-mapSize={[1024, 1024]}>\n+   <orthographicCamera attach=\"shadow-camera\" args={[-10, 10, 10, -10]} />\n+ </directionalLight>\n```\n\n----------------------------------------\n\nTITLE: Loading FBX with useFBX Hook\nDESCRIPTION: Simplified FBX model loading using the useFBX helper from @react-three/drei.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-models.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Scene() {\n  const fbx = useFBX('/Poimandres.fbx')\n  return <primitive object={fbx} />\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Monitor with Child Components\nDESCRIPTION: Shows how to use PerformanceMonitor with child components and the usePerformanceMonitor hook.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n;<PerformanceMonitor>\n  <Effects />\n</PerformanceMonitor>\n\nfunction Effects() {\n  usePerformanceMonitor({ onIncline, onDecline, onFallback, onChange })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Click Event Test in JavaScript\nDESCRIPTION: Complete test case to verify that a click event on a mesh updates its scale property in a React Three Fiber application.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ntest('click event makes box bigger', async () => {\n  const renderer = await ReactThreeTestRenderer.create(<MyRotatingBox />)\n  const mesh = renderer.scene.children[0]\n  expect(mesh.props.scale).toBe(1)\n  await renderer.fireEvent(mesh, 'click')\n  expect(mesh.props.scale).toBe(1.5)\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Three.js Default Elements\nDESCRIPTION: Example of extending default Three.js elements when using custom root instead of Canvas component.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/typescript.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as THREE from 'three'\nimport { extend, createRoot, events } from '@react-three/fiber'\n\n// Register the THREE namespace as native JSX elements.\nextend(THREE as any)\n\n// Create a react root\nconst root = createRoot(document.querySelector('canvas'))\n```\n\n----------------------------------------\n\nTITLE: Optimized Vector Handling with Shared Reference\nDESCRIPTION: This example demonstrates creating a vector outside the component as a shared reference that gets reused each frame. The vector is created once and its content is updated using copy() instead of clone(), avoiding memory allocation issues.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/docs/rules/no-clone-in-loop.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tempVec = new THREE.Vector3()\n\nfunction Direction({ targetPosition }) {\n  const ref = useRef()\n\n  useFrame(() => {\n    const direction = tempVec.copy(ref.current.position).sub(targetPosition).normalize()\n  })\n\n  return <mesh ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Monitor with Fallback\nDESCRIPTION: Demonstrates setting up a fallback mechanism after a certain number of performance fluctuations.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<PerformanceMonitor flipflops={3} onFallback={() => setDpr(1)}>\n```\n\n----------------------------------------\n\nTITLE: Testing Mesh Scale Property in JavaScript\nDESCRIPTION: Assertion to verify that a mesh's scale property has been updated after an event in a React Three Fiber test.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexpect(mesh.props.scale).toBe(1.5)\n```\n\n----------------------------------------\n\nTITLE: Performance State Configuration\nDESCRIPTION: Shows the structure of the performance state object and its configuration options.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nperformance: {\n  current: 1,\n  min: 0.1,\n  max: 1,\n  debounce: 200,\n  regress: () => void,\n},\n```\n\n----------------------------------------\n\nTITLE: Equivalent Three.js Scene Setup\nDESCRIPTION: The equivalent imperative Three.js code showing how React Three Fiber components map to Three.js object creation and scene composition.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/how-it-works.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as THREE from 'three'\n\nconst scene = new THREE.Scene() // <Canvas>\n\nconst group = new THREE.Group() // <group>\n\nconst mesh = new THREE.Mesh() // <mesh />\nconst material = new THREE.MeshNormalMaterial() // <meshNormalMaterial />\nconst geometry = new THREE.BoxGeometry(2, 2, 2) // <boxGeometry />\n\nmesh.material = material\nmesh.geometry = geometry\n\ngroup.add(mesh)\nscene.add(group)\n```\n\n----------------------------------------\n\nTITLE: Loading Progress Indicator\nDESCRIPTION: Implementation of a loading progress indicator using Html and useProgress from @react-three/drei.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-models.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Html, useProgress } from '@react-three/drei'\n\nfunction Loader() {\n  const { progress } = useProgress()\n  return <Html center>{progress} % loaded</Html>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return (\n    <Canvas>\n      <Suspense fallback={<Loader />}>\n        <Model />\n      </Suspense>\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Object Attachment in React Three Fiber (JSX)\nDESCRIPTION: Example showing simple attachment of one object to a property of its parent object.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Attach bar to foo.a\n<foo>\n  <bar attach=\"a\" />\n```\n\n----------------------------------------\n\nTITLE: Efficient State Access in React Three Fiber using Zustand\nDESCRIPTION: Demonstrates how to efficiently access state from a state management library like Zustand within the useFrame hook.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nuseFrame(() => (ref.current.position.x = api.getState().x))\nreturn <mesh ref={ref} />\n```\n\n----------------------------------------\n\nTITLE: Efficient Animation Using Lerp in React Three Fiber\nDESCRIPTION: Shows how to implement smooth animations using the lerp function within the useFrame hook for optimal performance.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Signal({ active }) {\n  const meshRef = useRef()\n  useFrame((state, delta) => {\n    meshRef.current.position.x = THREE.MathUtils.lerp(meshRef.current.position.x, active ? 100 : 0, 0.1)\n  })\n  return <mesh ref={meshRef} />\n```\n\n----------------------------------------\n\nTITLE: Efficient Interval Updates in React Three Fiber\nDESCRIPTION: Demonstrates a more efficient way to handle interval-based updates using refs instead of state, though it's not refresh-rate independent.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nuseEffect(() => {\n  const interval = setInterval(() => ref.current.position.x += 0.1, 1)\n  return () => clearInterval(interval)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Suspense and Controls Implementation in React Three Fiber\nDESCRIPTION: Shows improved handling of Suspense and side-effects with proper cleanup during suspension.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/v9-migration-guide.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThreeElement, useThree } from '@react-three/fiber'\nimport { OrbitControls } from 'three/addons'\n\ndeclare module '@react-three/fiber' {\n  interface ThreeElements {\n    OrbitControls: ThreeElement<typeof OrbitControls>\n  }\n}\n\nextend({ OrbitControls })\n\nfunction Controls() {\n  const camera = useThree((state) => state.camera)\n  const gl = useThree((state) => state.gl)\n\n  // Will only initialize when tree is connected to screen\n  return <orbitControls args={[camera, gl.domElement]}>\n}\n\n<Suspense>\n  <Controls />\n  <AsyncComponent />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Metro Bundler Configuration for React Native\nDESCRIPTION: Configuration for the Metro bundler in React Native to properly handle asset extensions used with Three.js models and textures. Required for useLoader and Drei abstractions.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/installation.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// metro.config.js\nmodule.exports = {\n  resolver: {\n    sourceExts: ['js', 'jsx', 'json', 'ts', 'tsx', 'cjs', 'mjs'],\n    assetExts: ['glb', 'gltf', 'png', 'jpg'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested Attachment in React Three Fiber (JSX)\nDESCRIPTION: Example showing how to attach objects to deeply nested properties using dash-case notation, such as adding buffer attributes to geometry.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <bufferGeometry>\n    <bufferAttribute attach=\"attributes-position\" args={[v, 3]} />\n```\n\n----------------------------------------\n\nTITLE: Custom Attachment with Functions in React Three Fiber (JSX)\nDESCRIPTION: Example demonstrating explicit attachment using custom add/remove functions for more control over the attachment process.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// Attach bar to foo via explicit add/remove functions\n<foo>\n  <bar attach={(parent, self) => {\n    parent.add(self)\n    return () => parent.remove(self)\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Creating Test Renderer Instance in React Three Fiber\nDESCRIPTION: Creates a ReactThreeTestRenderer instance with a passed three element. It doesn't create an actual WebGLRenderer by default but renders the complete scene graph.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst renderer = ReactThreeTestRenderer.create(element, options)\n```\n\n----------------------------------------\n\nTITLE: Using GLTF Model Component\nDESCRIPTION: Example of using the converted GLTF model as a React component with environment setup.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-models.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { Environment } from '@react-three/drei'\n\nimport Model from './Model'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Canvas>\n        <Suspense fallback={null}>\n          <Model />\n          <Environment preset=\"sunset\" background />\n        </Suspense>\n      </Canvas>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing State Outside Component Cycle in React Three Fiber\nDESCRIPTION: Shows how to use the useThree hook to get a function that retrieves fresh state from anywhere in the component.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  const get = useThree((state) => state.get)\n  ...\n  get() // Get fresh state from anywhere you want\n```\n\n----------------------------------------\n\nTITLE: Concise Custom Attachment in React Three Fiber (JSX)\nDESCRIPTION: A one-liner version of the custom attachment function for adding and removing objects from parents.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n// The same as a one liner\n<foo>\n  <bar attach={(parent, self) => (parent.add(self), () => parent.remove(self))} />\n```\n\n----------------------------------------\n\nTITLE: Complete Mesh Children Test in JavaScript\nDESCRIPTION: Complete test case to verify that a mesh has the expected number of children in a React Three Fiber application.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ntest('mesh to have two children', async () => {\n  const renderer = await ReactThreeTestRenderer.create(<MyRotatingBox />)\n  const mesh = renderer.scene.children[0].allChildren\n  expect(mesh.length).toBe(2)\n})\n```\n\n----------------------------------------\n\nTITLE: Adaptive Pixel Ratio Component\nDESCRIPTION: Implementation of a component that automatically adjusts pixel ratio based on performance.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nfunction AdaptivePixelRatio() {\n  const current = useThree((state) => state.performance.current)\n  const setPixelRatio = useThree((state) => state.setDpr)\n  useEffect(() => {\n    setPixelRatio(window.devicePixelRatio * current)\n  }, [current])\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Vector Creation with useMemo in React Three Fiber\nDESCRIPTION: This snippet demonstrates creating a Three.js Vector3 once using useMemo hook, ensuring it's only created on initial render and reused in subsequent frames.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/docs/rules/no-new-in-loop.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MoveTowards({ x, y, z }) {\n  const ref = useRef()\n  const tempVec = useMemo(() => new THREE.Vector3())\n\n  useFrame(() => {\n    ref.current.position.lerp(tempVec.set(x, y, z), 0.1)\n  })\n\n  return <mesh ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Mesh in Event Testing in JavaScript\nDESCRIPTION: Code to access the mesh object in a React Three Fiber test for event testing purposes.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst mesh = renderer.scene.children[0]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Test Structure in JSX\nDESCRIPTION: Initial test structure for React Three Fiber components, importing the test renderer and creating test cases with empty implementations.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactThreeTestRenderer from '@react-three/test-renderer'\nimport { MyRotatingBox } from './App'\n\ntest('mesh to have two children', async () => {\n  const renderer = await ReactThreeTestRenderer.create(<MyRotatingBox />)\n})\n\ntest('click event makes box bigger', async () => {\n  const renderer = await ReactThreeTestRenderer.create(<MyRotatingBox />)\n})\n```\n\n----------------------------------------\n\nTITLE: Adaptive Pixel Ratio Usage\nDESCRIPTION: Shows how to use the AdaptivePixelRatio component in a scene.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<AdaptivePixelRatio />\n```\n\n----------------------------------------\n\nTITLE: Efficient Animation Using React Spring in React Three Fiber\nDESCRIPTION: Demonstrates how to use react-spring for efficient animations in React Three Fiber, which operates outside of React's render cycle.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { a, useSpring } from '@react-spring/three'\n\nfunction Signal({ active }) {\n  const { x } = useSpring({ x: active ? 100 : 0 })\n  return <a.mesh position-x={x} />\n```\n\n----------------------------------------\n\nTITLE: Firing Click Event in React Three Test Renderer\nDESCRIPTION: Code to simulate a click event on a mesh using the fireEvent method in React Three Test Renderer.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nawait renderer.fireEvent(mesh, 'click')\n```\n\n----------------------------------------\n\nTITLE: Loading FBX Models\nDESCRIPTION: Implementation for loading FBX format 3D models using FBXLoader.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-models.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useLoader } from '@react-three/fiber'\nimport { FBXLoader } from 'three/addons/loaders/FBXLoader.js'\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Scene() {\n  const fbx = useLoader(FBXLoader, '/Poimandres.fbx')\n  return <primitive object={fbx} />\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Event Manager Configuration\nDESCRIPTION: Advanced configuration example for customizing the event manager settings in React Three Fiber Canvas component.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/events.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Canvas, events } from '@react-three/fiber'\n\nconst eventManagerFactory: Parameters<typeof Canvas>[0]['events'] = (state) => ({\n  // Default configuration\n  ...events(state),\n\n  // Determines if the event layer is active\n  enabled: true,\n\n  // Event layer priority, higher prioritized layers come first and may stop(-propagate) lower layer\n  priority: 1,\n\n  // The filter can re-order or re-structure the intersections\n  filter: (items: THREE.Intersection[], state: RootState) => items,\n\n  // The compute defines how pointer events are translated into the raycaster and pointer vector2\n  compute: (event: DomEvent, state: RootState, previous?: RootState) => {\n    state.pointer.set((event.offsetX / state.size.width) * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1)\n    state.raycaster.setFromCamera(state.pointer, state.camera)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Event Propagation Example\nDESCRIPTION: Demonstration of event propagation control using stopPropagation() in React Three Fiber pointer events.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/events.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nonPointerOver={e => {\n  e.stopPropagation()\n  // ...\n}}\n```\n\n----------------------------------------\n\nTITLE: Using findByProps method in ReactThreeTestInstance\nDESCRIPTION: Finds a single test instance with the provided props. Supports RegExp matchers for property values. Throws an error if not exactly one instance is found.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.findByProps(props)\n\n// Also accepts RegExp matchers\ntestInstance.findByProps({ [prop]: /^match/i })\n```\n\n----------------------------------------\n\nTITLE: Complete Act Usage Example\nDESCRIPTION: Demonstrates how to use act with a mesh component that updates in the render loop, including test assertions.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport ReactThreeTestRenderer from 'react-three-test-renderer'\n\nconst Mesh = () => {\n  const meshRef = React.useRef()\n  useFrame((_, delta) => {\n    meshRef.current.rotation.x += delta\n  })\n\n  return (\n    <mesh ref={meshRef}>\n      <boxGeometry args={[2, 2]} />\n      <meshBasicMaterial />\n    </mesh>\n  )\n}\n\nconst renderer = await ReactThreeTestRenderer.create(<Mesh />)\n\nexpect(renderer.scene.children[0].instance.rotation.x).toEqual(0)\n\nawait ReactThreeTestRenderer.act(async () => {\n  await renderer.advanceFrames(2, 1)\n})\n\nexpect(renderer.scene.children[0].instance.rotation.x).toEqual(2)\n```\n\n----------------------------------------\n\nTITLE: Using React Three Test Renderer\nDESCRIPTION: This TypeScript React snippet demonstrates how to use @react-three/test-renderer to create a test instance of a 3D scene with a mesh, boxGeometry, and meshStandardMaterial. It also shows how to log the scene graph.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport ReactThreeTestRenderer from '@react-three/test-renderer'\n\nconst renderer = await ReactThreeTestRenderer.create(\n  <mesh>\n    <boxGeometry args={[2, 2]} />\n    <meshStandardMaterial\n      args={[\n        {\n          color: 0x0000ff,\n        },\n      ]}\n    />\n  </mesh>,\n)\n\n// assertions using the TestInstance & Scene Graph\nconsole.log(renderer.toGraph())\n```\n\n----------------------------------------\n\nTITLE: Using Extend Factory for Custom Elements\nDESCRIPTION: Shows how to use the extend factory signature for shorter element definition with automatic type inference.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/typescript.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Create our custom element\nclass CustomElement extends GridHelper {}\n\n// Extend so the reconciler will learn about it, types will be inferred\nconst Element = extend(CustomElement)\n\n// react-three-fiber will create your custom component and TypeScript will understand it\n<Element />\n```\n\n----------------------------------------\n\nTITLE: Accessing the instance property in ReactThreeTestInstance\nDESCRIPTION: Returns the instance object of the specific testInstance, which will be the initialized THREE class.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.instance\n```\n\n----------------------------------------\n\nTITLE: Nested Object Attachment in React Three Fiber (JSX)\nDESCRIPTION: Example demonstrating attachment to nested object properties using dash-case notation.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// Attach bar to foo.a.b and foo.a.b.c (nested object attach)\n<foo>\n  <bar attach=\"a-b\" />\n  <bar attach=\"a-b-c\" />\n```\n\n----------------------------------------\n\nTITLE: Inefficient State Updates in React Three Fiber Loops\nDESCRIPTION: Shows an example of inefficient state updates using setInterval, which should be avoided in React Three Fiber applications.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nuseEffect(() => {\n  const interval = setInterval(() => setX((x) => x + 0.1), 1)\n  return () => clearInterval(interval)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Error Boundary Implementation for Canvas\nDESCRIPTION: Demonstrates how to implement error boundaries to handle WebGL context crashes and other rendering errors.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/canvas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useErrorBoundary } from 'use-error-boundary'\n\nfunction App() {\n  const { ErrorBoundary, didCatch, error } = useErrorBoundary()\n  return didCatch ? (\n    <div>{error.message}</div>\n  ) : (\n    <ErrorBoundary>\n      <Canvas>\n        <mesh />\n      </Canvas>\n    </ErrorBoundary>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the allChildren property in ReactThreeTestInstance\nDESCRIPTION: Returns all children testInstances, including all React components in the tree, similar to testRenderer.toTree().\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.allChildren\n```\n\n----------------------------------------\n\nTITLE: Regression Event Handler\nDESCRIPTION: Shows how to implement regression handling with controls.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst regress = useThree((state) => state.performance.regress)\nuseEffect(() => {\n  controls.current?.addEventListener('change', regress)\n```\n\n----------------------------------------\n\nTITLE: Installing @react-three/eslint-plugin via npm\nDESCRIPTION: Command to install the ESLint plugin as a development dependency for React Three Fiber projects.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/eslint-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Importing GLTF Loader Dependencies\nDESCRIPTION: Basic imports required for loading GLTF models using React Three Fiber.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-models.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useLoader } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js'\n```\n\n----------------------------------------\n\nTITLE: Advancing Frames in Test Renderer\nDESCRIPTION: Method to advance frames and run GL Render loop subscribers, requiring frame count and delta parameters.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nrenderer.advanceFrames(frames, delta)\n```\n\n----------------------------------------\n\nTITLE: Optimized Vector Handling with useMemo\nDESCRIPTION: This example shows creating a vector once within a component using useMemo. The vector is created on component mount and reused on each frame, preventing memory allocation issues while keeping the vector scoped to the component.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/docs/rules/no-clone-in-loop.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Direction({ targetPosition }) {\n  const ref = useRef()\n  const tempVec = useMemo(() => new THREE.Vector3())\n\n  useFrame(() => {\n    const direction = tempVec.copy(ref.current.position).sub(targetPosition).normalize()\n  })\n\n  return <mesh ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling specific React Three Fiber ESLint rules\nDESCRIPTION: JSON configuration to enable specific React Three Fiber linting rules with custom severity levels. This example enables the rule that prevents cloning in frame loops.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"rules\": {\n  \"@react-three/no-clone-in-frame-loop\": \"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Fiber and dependencies\nDESCRIPTION: Command to install Three.js, its type definitions, and React Three Fiber using npm.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @types/three @react-three/fiber\n```\n\n----------------------------------------\n\nTITLE: Getting Root Instance in Test Renderer\nDESCRIPTION: Returns the instance corresponding to the root three element, if available. Not applicable for function components.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nrenderer.getInstance()\n```\n\n----------------------------------------\n\nTITLE: Rendering Scene Graph\nDESCRIPTION: Returns an object representing the scene graph, excluding elements that use attach.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nrenderer.toGraph()\n```\n\n----------------------------------------\n\nTITLE: Inefficient Object Creation in React Three Fiber Loops\nDESCRIPTION: Demonstrates an inefficient approach to object creation within loops, which can lead to increased garbage collection and performance issues.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nuseFrame(() => {\n  ref.current.position.lerp(new THREE.Vector3(x, y, z), 0.1)\n})\n```\n\n----------------------------------------\n\nTITLE: Performance Monitor with Gradual Changes\nDESCRIPTION: Shows how to implement gradual DPR changes using the onChange callback with a factor between 0 and 1.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/scaling-performance.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport round from 'lodash/round'\n\nconst [dpr, setDpr] = useState(1)\nreturn (\n <Canvas dpr={dpr}>\n  <PerformanceMonitor onChange={({ factor }) => setDpr(round(0.5 + 1.5 * factor, 1))}>\n```\n\n----------------------------------------\n\nTITLE: Unmounting Test Renderer Tree\nDESCRIPTION: Unmounts the tree and triggers appropriate lifecycle events.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nrenderer.unmount()\n```\n\n----------------------------------------\n\nTITLE: Updating Test Renderer Tree\nDESCRIPTION: Rerenders the tree with a new root element, simulating a React update.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nrenderer.update(element)\n```\n\n----------------------------------------\n\nTITLE: Inefficient Redux State Binding in React Three Fiber\nDESCRIPTION: Shows an inefficient way of binding to fast-changing Redux state, which can cause performance issues in React Three Fiber.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSelector } from 'react-redux'\n\n// Assuming that x gets animated inside the store 60fps\nconst x = useSelector((state) => state.x)\nreturn <mesh position-x={x} />\n```\n\n----------------------------------------\n\nTITLE: Inefficient State Updates in React Three Fiber useFrame\nDESCRIPTION: Demonstrates an inefficient way of updating state within the useFrame hook, which should be avoided for performance reasons.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [x, setX] = useState(0)\nuseFrame(() => setX((x) => x + 0.1))\nreturn <mesh position-x={x} />\n```\n\n----------------------------------------\n\nTITLE: Test Renderer Creation Options Interface\nDESCRIPTION: TypeScript interface defining the available options when creating a test renderer instance, extending RenderProps with canvas dimensions.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CreateOptions extends RenderProps<HTMLCanvasElement> {\n  width?: number // width of canvas\n  height?: number // height of canvas\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Fiber\nDESCRIPTION: Command to install React Three Fiber and its dependencies using npm.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @types/three @react-three/fiber\n```\n\n----------------------------------------\n\nTITLE: Inefficient Vector Creation in React Three Fiber Frame Loop\nDESCRIPTION: This snippet demonstrates an inefficient way of creating a new Three.js Vector3 object in each frame, which can lead to excessive memory allocation.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/docs/rules/no-new-in-loop.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MoveTowards({ x, y, z }) {\n  const ref = useRef()\n\n  useFrame(() => {\n    ref.current.position.lerp(new THREE.Vector3(x, y, z), 0.1)\n  })\n\n  return <mesh ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js 13.1+ for React Three Fiber\nDESCRIPTION: Configuration for Next.js 13.1 or newer to properly transpile Three.js packages. Add the Three.js package to the transpilePackages property in next.config.js.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ntranspilePackages: ['three'],\n```\n\n----------------------------------------\n\nTITLE: Next.js configuration with next-transpile-modules\nDESCRIPTION: Configuration setup for next.config.js using next-transpile-modules to properly handle Three.js in older Next.js versions.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst withTM = require('next-transpile-modules')(['three'])\nmodule.exports = withTM()\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Types for Three.js\nDESCRIPTION: Command to install TypeScript type definitions for Three.js when using React Three Fiber with TypeScript.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/fiber/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @types/three\n```\n\n----------------------------------------\n\nTITLE: React Native Example using React Three Fiber\nDESCRIPTION: An example of using React Three Fiber in a React Native application, showing how to create a 3D scene with interactive boxes.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/introduction.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber/native'\n\nfunction Box(props) {\n  const meshRef = useRef(null)\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  useFrame((state, delta) => (meshRef.current.rotation.x += delta))\n  return (\n    <mesh\n      {...props}\n      ref={meshRef}\n      scale={active ? 1.5 : 1}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas>\n      <ambientLight intensity={Math.PI / 2} />\n      <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />\n      <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />\n      <Box position={[-1.2, 0, 0]} />\n      <Box position={[1.2, 0, 0]} />\n    </Canvas>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Fiber and Test Renderer\nDESCRIPTION: This bash snippet shows how to install @react-three/fiber, three, and @react-three/test-renderer using yarn. The test renderer is installed as a dev dependency.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-three/fiber three\nyarn add -D @react-three/test-renderer\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js 13.0 or older for React Three Fiber\nDESCRIPTION: Installation and configuration instructions for Next.js 13.0 or older versions. Uses next-transpile-modules to ensure Three.js packages are properly transpiled.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-transpile-modules --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Three Fiber with Expo\nDESCRIPTION: Commands to create and set up a new React Native project using Expo that includes React Three Fiber dependencies.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/fiber/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install expo-cli, this will create our app\nnpm install expo-cli -g\n# Create app and cd into it\nexpo init my-app\ncd my-app\n# Install dependencies\nnpm install three @react-three/fiber react\n# Start\nexpo start\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Test Renderer in Bash\nDESCRIPTION: Command to install the React Three Test Renderer as a development dependency for testing React Three Fiber applications.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-three/test-renderer --save-dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene in Test Renderer\nDESCRIPTION: Retrieves the root react three test instance object for making assertions and finding deeper test instances.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nrenderer.scene\n```\n\n----------------------------------------\n\nTITLE: Metro Bundler Configuration for React Native\nDESCRIPTION: Configuration for the Metro bundler to properly handle 3D assets (like GLB files) and other resource formats when using React Three Fiber in React Native.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/fiber/readme.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// metro.config.js\nmodule.exports = {\n  resolver: {\n    sourceExts: ['js', 'jsx', 'json', 'ts', 'tsx', 'cjs'],\n    assetExts: ['glb', 'png', 'jpg'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: React Three Fiber Additional Exports Table in Markdown\nDESCRIPTION: A markdown table listing all the additional exports provided by React Three Fiber, including render callbacks, object manipulation functions, React integration helpers, and rendering control utilities.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/additional-exports.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| export               | usage                                                          |\n| -------------------- | -------------------------------------------------------------- |\n| `addEffect`          | Adds a global render callback which is called each frame       |\n| `addAfterEffect`     | Adds a global after-render callback which is called each frame |\n| `addTail`            | Adds a global callback which is called when rendering stops    |\n| `buildGraph`         | Collects nodes and materials from a THREE.Object3D             |\n| `flushGlobalEffects` | Flushes global render-effects for when manually driving a loop |\n| `flushSync`          | Force React to flush any updates synchronously and immediately |\n| `invalidate`         | Forces view global invalidation                                |\n| `advance`            | Advances the frameloop (given that it's set to 'never')        |\n| `extend`             | Extends the native-object catalogue                            |\n| `createPortal`       | Creates a portal (it's a React feature for re-parenting)       |\n| `createRoot`         | Creates a root that can render three JSX into a canvas         |\n| `events`             | Dom pointer-event system                                       |\n| `applyProps`         | `applyProps(element, props)` sets element properties,          |\n| `act`                | usage with react-testing                                       |\n| `useInstanceHandle`  | Exposes react-internal local state from `instance.__r3f`       |\n|                      |                                                                |\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Children in JavaScript\nDESCRIPTION: Code to access the children of a scene in a React Three Fiber test. This shows how to navigate the scene graph to access mesh children.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst meshChildren = renderer.scene.children\n```\n\n----------------------------------------\n\nTITLE: Firing Events in Test Renderer\nDESCRIPTION: Native method to fire events on specific parts of the rendered tree by passing an element and event name.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nrenderer.fireEvent(testInstance, eventName, mockEventData)\n```\n\n----------------------------------------\n\nTITLE: Installing React Three Fiber\nDESCRIPTION: Basic npm installation command for Three.js and React Three Fiber libraries.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/fiber/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install three @react-three/fiber\n```\n\n----------------------------------------\n\nTITLE: Inefficient Asset Loading in React Three Fiber\nDESCRIPTION: Demonstrates an inefficient approach to loading assets in React Three Fiber, which can lead to unnecessary re-fetching and parsing of resources.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component() {\n  const [texture, set] = useState()\n  useEffect(() => void new TextureLoader().load(url, set), [])\n  return texture ? (\n    <mesh>\n      <sphereGeometry />\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  ) : null\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing All Children of a Mesh in JavaScript\nDESCRIPTION: Code to access all children of a mesh in a React Three Fiber test, including geometry and materials using the allChildren property.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst meshChildren = renderer.scene.children[0].allChildren\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree Representation\nDESCRIPTION: Returns an object representing the rendered tree, including all elements written as React components.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nrenderer.toTree()\n```\n\n----------------------------------------\n\nTITLE: Adding React Three Fiber plugin to ESLint configuration\nDESCRIPTION: JSON configuration to add the React Three Fiber plugin to ESLint without using a predefined config. This is required when specifying individual rules.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"plugins\": [\n  \"@react-three\"\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Version and Change Information in Markdown\nDESCRIPTION: Shows how version numbers and change descriptions are formatted in the changelog using Markdown syntax. Includes headings for version numbers and bullet points for individual changes.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 9.0.1\n\n### Patch Changes\n\n- 754861f16ac7ee93844d52057d2b8515b145fdb2: Republish as latest\n\n## 9.0.0\n\n### Major Changes\n\n- 226d2ec: feat: React 19 support\n\n## 8.2.4\n\n### Patch Changes\n\n- dec2cb28: fix(test-renderer): include types in output\n```\n\n----------------------------------------\n\nTITLE: Testing Mesh Children Count in JavaScript\nDESCRIPTION: Assertion to verify that a mesh has the expected number of children in a React Three Fiber test.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/testing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexpect(meshChildren.length).toBe(2)\n```\n\n----------------------------------------\n\nTITLE: Using findByType method in ReactThreeTestInstance\nDESCRIPTION: Finds a single test instance with the provided type. Throws an error if not exactly one test instance with the specified type is found.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.findByType(type)\n```\n\n----------------------------------------\n\nTITLE: React Three Fiber Component Attachment Examples\nDESCRIPTION: Demonstrates how to use the attach prop to explicitly define parent-child relationships between Three.js objects.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/how-it-works.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh>\n  <meshNormalMaterial attach=\"material\" />\n  <boxGeometry attach=\"geometry\" />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with recommended React Three Fiber rules\nDESCRIPTION: JSON configuration to extend ESLint with the recommended ruleset for React Three Fiber. This provides sensible defaults for all React Three Fiber projects.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extends\": [\n  \"plugin:@react-three/recommended\"\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing the parent property in ReactThreeTestInstance\nDESCRIPTION: Returns the parent testInstance of this testInstance. Returns null if no parent is available.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.parent\n```\n\n----------------------------------------\n\nTITLE: Using Act with Test Renderer\nDESCRIPTION: Prepares a component for assertions, similar to react-test-renderer's act function.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nReactThreeTestRenderer.act(callback)\n```\n\n----------------------------------------\n\nTITLE: Three.js Object Creation Example\nDESCRIPTION: Shows how Three.js objects are created using the classic JavaScript API.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/how-it-works.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myBox = new THREE.BoxGeometry(1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with all React Three Fiber rules\nDESCRIPTION: JSON configuration to extend ESLint with all available rules from the React Three Fiber plugin. This provides complete coverage but may include more aggressive rules.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"extends\": [\n  \"plugin:@react-three/all\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using findAllByType method in ReactThreeTestInstance\nDESCRIPTION: Finds all test instances with the provided type. Returns an empty array if no instances are found.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.findAllByType(type)\n```\n\n----------------------------------------\n\nTITLE: Using findAll method in ReactThreeTestInstance\nDESCRIPTION: Finds all test instances for which the provided test function returns true. Returns an empty array if no instances are found.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.findAll(test)\n```\n\n----------------------------------------\n\nTITLE: Inefficient State Updates in React Three Fiber Events\nDESCRIPTION: Shows an inefficient way of updating state in response to fast events, which can lead to performance issues.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh onPointerMove={(e) => setX((x) => e.point.x)} />\n```\n\n----------------------------------------\n\nTITLE: Applying a Texture to a Material in React Three Fiber\nDESCRIPTION: This snippet shows how to apply a loaded texture to a meshStandardMaterial by setting the map property.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/tutorials/loading-textures.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<meshStandardMaterial map={colorMap} />\n```\n\n----------------------------------------\n\nTITLE: Using findAllByProps method in ReactThreeTestInstance\nDESCRIPTION: Finds all test instances with the provided props. Supports RegExp matchers for property values. Returns an empty array if no instances are found.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.findAllByProps(props)\n\n// Also accepts RegExp matchers\ntestInstance.findAllByProps({ [prop]: /^matches/i })\n```\n\n----------------------------------------\n\nTITLE: Accessing the children property in ReactThreeTestInstance\nDESCRIPTION: Returns the children test instances according to the property 'children', excluding Geometries, Materials, etc.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.children\n```\n\n----------------------------------------\n\nTITLE: Incorrect Vector Cloning in Frame Loop\nDESCRIPTION: This example shows an anti-pattern where a new vector is created on each frame by cloning, causing memory allocation issues. The code creates a new vector 60+ times a second, wasting resources.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/docs/rules/no-clone-in-loop.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Direction({ targetPosition }) {\n  const ref = useRef()\n\n  useFrame(() => {\n    const direction = ref.current.position.clone().sub(targetPosition).normalize()\n  })\n\n  return <mesh ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version Updates\nDESCRIPTION: Markdown formatted changelog entries documenting version changes and updates to the react-three-fiber library. Includes major, minor and patch version changes with descriptions.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/fiber/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- 85c80e70: eventsource and eventprefix on the canvas component\n\n## 8.5.1\n\n### Patch Changes\n\n- 87821d9: fix: null-check instance.children on reconstruct\n```\n\n----------------------------------------\n\nTITLE: Accessing the props property in ReactThreeTestInstance\nDESCRIPTION: Returns an object of the props being passed to the element, including hidden ones that are automatically applied in the reconciler.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.props\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of useThree Hook Outside Canvas Component\nDESCRIPTION: This code snippet demonstrates incorrect usage of the useThree hook outside of a Canvas component, which will cause an error because hooks rely on context provided by the Canvas element.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/hooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useThree } from '@react-three/fiber'\n\nfunction App() {\n  const { size } = useThree() // This will just crash\n  return (\n    <Canvas>\n      <mesh>\n```\n\n----------------------------------------\n\nTITLE: Accessing the type property in ReactThreeTestInstance\nDESCRIPTION: Returns the THREE type of the test instance, such as 'Scene' or 'Mesh'.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr-instance.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntestInstance.type\n```\n\n----------------------------------------\n\nTITLE: Mock Synthetic Event Type Definition\nDESCRIPTION: TypeScript type definition for mock synthetic events used in event handling during testing.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/test-renderer/markdown/rttr.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype MockSyntheticEvent = {\n  camera: Camera // the default camera of the rendered scene\n  stopPropagation: () => void\n  target: ReactThreeTestInstance\n  currentTarget: ReactThreeTestInstance\n  sourceEvent: MockEventData\n  ...mockEventData\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Object Declaration in React Three Fiber (JSX)\nDESCRIPTION: An example showing an inefficient way to create a Three.js mesh with explicitly created objects. This approach causes properties to be re-created on every render.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/API/objects.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh\n  visible\n  userData={{ hello: 'world' }}\n  position={new THREE.Vector3(1, 2, 3)}\n  rotation={new THREE.Euler(Math.PI / 2, 0, 0)}\n  geometry={new THREE.SphereGeometry(1, 16, 16)}\n  material={new THREE.MeshBasicMaterial({ color: new THREE.Color('hotpink'), transparent: true })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Conditional Rendering in React Three Fiber\nDESCRIPTION: Shows an inefficient approach to conditional rendering in React Three Fiber, which can lead to unnecessary remounting and performance issues.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/advanced/pitfalls.mdx#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  stage === 1 && <Stage1 />\n}\n{\n  stage === 2 && <Stage2 />\n}\n{\n  stage === 3 && <Stage3 />\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Vector Reuse with External Declaration in React Three Fiber\nDESCRIPTION: This snippet shows an improved approach where a Three.js Vector3 is created outside the component and reused in each frame, reducing memory allocation.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/packages/eslint-plugin/docs/rules/no-new-in-loop.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tempVec = new THREE.Vector3()\n\nfunction MoveTowards({ x, y, z }) {\n  const ref = useRef()\n\n  useFrame(() => {\n    ref.current.position.lerp(tempVec.set(x, y, z), 0.1)\n  })\n\n  return <mesh ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Properties on Three.js Objects with React Props\nDESCRIPTION: This snippet shows how React props directly map to Three.js object properties. When you set a prop on a Fiber component, it sets the corresponding property on the Three.js instance.\nSOURCE: https://github.com/pmndrs/react-three-fiber/blob/master/docs/getting-started/your-first-scene.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ambientLight intensity={0.1} />\n```"
  }
]