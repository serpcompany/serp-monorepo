[
  {
    "owner": "alibaba",
    "repo": "rax",
    "content": "TITLE: Rendering a component with Rax\nDESCRIPTION: This JSX code demonstrates how to import necessary modules from Rax and render a simple component to the DOM. It imports `createElement` and `render` from 'rax', and `DriverDOM` from 'driver-dom'. The `render` function takes the component, a target DOM element, and a driver configuration object as arguments.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, render} from 'rax';\nimport * as DriverDOM from 'driver-dom';\n\nfunction MyComponent() {\n  return <div>Hello World</div>;\n}\n\nrender(<MyComponent />, document.body, { driver: DriverDOM });\n```\n\n----------------------------------------\n\nTITLE: Creating a WebGL application with Rax and driver-webgl\nDESCRIPTION: This code snippet demonstrates how to use the driver-webgl package with Rax to create a simple WebGL application. It imports necessary modules, defines a component to render a rotating cube, and renders it to the document body using the WebGL driver. Requires Rax and driver-webgl to be installed.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-webgl/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, Component, render} from 'rax';\nimport WebGLDriver from 'driver-webgl';\n\nclass HelloWorld extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      cubeRotation: [0, 0, 0]\n    };\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.cameraPosition = [0, 0, 5];\n  }\n\n  onFrame = () => {\n    this.setState({\n      cubeRotation: [\n        this.state.cubeRotation[0] + 0.01,\n        this.state.cubeRotation[1] + 0.01,\n        0\n      ]\n    });\n  }\n\n  render() {\n    return (\n      <scene\n        width={this.width}\n        height={this.height}\n        onFrame={this.onFrame}\n      >\n        <perspective-camera\n          fov={75}\n          aspect={this.width / this.height}\n          near={0.1}\n          far={1000}\n          position={this.cameraPosition}\n        />\n        <mesh\n          rotation={this.state.cubeRotation}\n        >\n          <box-geometry\n            width={1}\n            height={1}\n            depth={1}\n          />\n          <mesh-basic-material\n            color={0x00ff00}\n          />\n        </mesh>\n      </scene>\n    );\n  }\n}\n\nrender(<HelloWorld />, document.body, {\n  driver: WebGLDriver\n});\n```\n\n----------------------------------------\n\nTITLE: Document Structure with Root, Data, Style, Script - JSX\nDESCRIPTION: This code snippet demonstrates how to structure a basic Rax document using the Root, Data, Style, and Script components from the rax-document library. It's designed to render a standard HTML page with head and body sections. It imports `createElement` from 'rax' and the necessary components from 'rax-document'.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-document/README.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement } from 'rax';\nimport { Root, Data, Style, Script } from 'rax-document';\n\nexport default () => {\n  return (\n    <html>\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/>\n        <title>ssr-document-demo</title>\n        <Style />\n      </head>\n      <body>\n        {/* root container */}\n        <Root />\n        {/* initial data from server side */}\n        <Data />\n        <Script />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RaxServer with Express\nDESCRIPTION: This snippet demonstrates how to initialize a RaxServer instance and integrate it with an Express application. The configuration options include document, shell, and pages.  It defines routes for `/` and `/foo/bar/baz`, rendering the 'index' and 'bar' pages respectively. It uses `server.render` to render the Rax pages.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-server/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { readFileSync } = require('fs');\nconst express = require('express');\nconst RaxServer = require('rax-server');\n\nconst PORT = 8080;\nconst app = express();\n\nconst options = {\n  document: {\n    component: require('./dist/server/document.js'),\n  },\n  shell: {\n    component: require('./dist/server/shell.js'),\n  },\n  pages: {\n    index: {\n      title: 'Index',\n      component: require('./dist/server/index.js'),\n      styles: ['./client/index.css'],\n      scripts: ['./client/index.js']\n    },\n    bar: {\n      component: require('./dsit2/server/bar.js')\n    }\n  }\n};\n\nconst server = new RaxServer(options);\n\napp.get('/', (req, res) => {\n  server.render(req, res, {\n    page: 'index'\n  });\n});\n\napp.get('/foo/bar/baz', (req, res) => {\n  server.render(req, res, {\n    page: 'bar'\n  });\n});\n\napp.listen(PORT, () => {\n  console.log(`app listening on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Rax Component with Weex driver\nDESCRIPTION: This code demonstrates how to render a Rax component using the `driver-weex` driver. It imports necessary modules from `rax` and `driver-weex`, defines a simple Rax component `Example`, and uses the `render` function to mount the component to the Weex environment with the `WeexDriver`.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-weex/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, Component, render} from 'rax';\nimport * as WeexDriver from 'driver-weex';\n\nclass Example extends Component {\n  render() {\n    return (\n      <div>\n        <img width=\"560\" height=\"560\" src=\"https://img.alicdn.com/tps/TB1z.55OFXXXXcLXXXXXXXXXXXX-560-560.jpg\" />\n      </div>\n    );\n  }\n}\n\nrender(<Example />, null, {\n  driver: WeexDriver\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Rax component with ServerDriver\nDESCRIPTION: This code snippet demonstrates how to render a Rax component using the ServerDriver. It imports necessary modules from 'rax', 'driver-server', and 'universal-env'.  The `render` function is used with a conditional driver option based on the environment (Node.js or client-side).\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-server/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, Component, render} from 'rax';\nimport ServerDriver from 'driver-server';\nimport {isNode} from 'universal-env';\n\nclass Example extends Component {\n  render() {\n    return (\n      <div>\n        <img width=\"560\" height=\"560\" src=\"https://img.alicdn.com/tps/TB1z.55OFXXXXcLXXXXXXXXXXXX-560-560.jpg\" />\n      </div>\n    );\n  }\n}\n\nrender(<Example />, null, {\n  driver: isNode ? ServerDriver : null\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing RaxServer with Node.js HTTP\nDESCRIPTION: This code initializes a RaxServer instance and integrates it with a Node.js HTTP server. It demonstrates how to handle incoming requests, render a Rax page based on the request pathname, and send the rendered output as a response.  The `server.render` method is used to render the specified page.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-server/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\nconst RaxServer = require('rax-server');\nconst PORT = 8080;\nconst server = new RaxServer({\n  // ...\n});\n\nconst app = new http.createServer((req, res) => {\n  if (req.pathname === '/index') {\n    server.render(req, res, {\n      page: 'index'\n    });\n  } else {\n    // ...\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`SSR running on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering to HTML using RaxServer\nDESCRIPTION: This snippet demonstrates how to render a page to an HTML string using the `server.renderToHTML` method.  The rendered HTML can then be used for various purposes, such as sending it as a response or embedding it in another document. The method returns a Promise that resolves with the HTML string.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-server/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst html = await server.renderToHTML(req, res, {\n  page: 'index'\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Rax Component with driver-dom\nDESCRIPTION: This code snippet demonstrates how to render a Rax component using the driver-dom. It imports necessary modules from 'rax' and 'driver-dom', defines a simple component, and then uses the render function to render the component into the DOM, specifying the driver to be used.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-dom/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, render} from 'rax';\nimport DriverDOM from 'driver-dom';\n\nfunction Example() {\n  return (\n    <div>\n      <img width=\"560\" height=\"560\" src=\"https://img.alicdn.com/tps/TB1z.55OFXXXXcLXXXXXXXXXXXX-560-560.jpg\" />\n    </div>\n  );\n}\n\nrender(<Example />, null, {\n  driver: DriverDOM\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Redux with Rax using Provider\nDESCRIPTION: This code demonstrates how to connect a Redux store to a Rax application using the Provider component from rax-redux. The Provider makes the Redux store available to any nested components. It requires the 'rax', 'rax-redux' dependencies. The 'store' and 'App' components need to be defined elsewhere.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-redux/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createElement, render } from 'rax';\nimport { Provider } from 'rax-redux';\n\nimport store from './store';\nimport App from './App';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating RaxServer with Express (minimal)\nDESCRIPTION: This code shows a basic integration of RaxServer with an Express application, using a simplified RaxServer initialization. It defines a route for `/index`, which renders the 'index' page using `server.render` and sends the result as the response.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-server/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst RaxServer = require('rax-server');\n\nconst PORT = 8080;\nconst app = express();\n\nconst server = new RaxServer({\n  // ...\n});\n\napp.get('/index', (req, res) => {\n  server.render(req, res, {\n    page: 'index'\n  });\n});\n\napp.listen(PORT, () => {\n  console.log(`app listening on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Using driver-universal with Rax\nDESCRIPTION: This code snippet demonstrates how to use `driver-universal` to render a simple Rax component that displays an image within a View. The `render` function takes the component to render, a container (null in this case), and an options object that specifies the driver. It requires `rax`, `rax-view`, `rax-image`, and `driver-universal` packages to be installed.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-universal/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from 'rax';\nimport View from 'rax-view';\nimport Image from 'rax-image';\nimport DriverUniversal from 'driver-universal';\nfunction Example() {\n  return (\n    <View>\n      <Image width=\"560\" height=\"560\" src=\"https://img.alicdn.com/tps/TB1z.55OFXXXXcLXXXXXXXXXXXX-560-560.jpg\" />\n    </View>\n  );\n}\nrender(<Example />, null, {\n  driver: DriverUniversal\n});\n```\n\n----------------------------------------\n\nTITLE: Render Rax Component to String\nDESCRIPTION: This example demonstrates how to use rax-server-renderer to render a Rax component to a string. It imports the necessary modules, defines a simple Rax component, and then uses the `renderToString` method to render the component to a string.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-server-renderer/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, Component} from 'rax';\nimport renderer from 'rax-server-renderer';\n\nclass MyComponent extends Component {\n  render() {\n    return <div>Hello World</div>;\n  }\n}\n\nrenderer.renderToString(<MyComponent />);\n```\n\n----------------------------------------\n\nTITLE: Rendering a page using RaxServer\nDESCRIPTION: This snippet shows how to render a specific page using the `server.render` method. It takes the request (req), response (res), and an options object as arguments.  The `page` option specifies which page to render.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-server/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.render(req, res, {\n  page: 'index'\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion in Node.js (Web)\nDESCRIPTION: This snippet demonstrates using the `convertUnit` function in a Node.js environment to convert '500rpx' to viewport width units (vw) using the Web platform's conversion rules. The function requires the value to convert, the CSS property, and the target platform as arguments.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/style-unit/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconvertUnit('500rpx', 'width', 'web')\n```\n\n----------------------------------------\n\nTITLE: Installing rax-redux package\nDESCRIPTION: This command installs the rax-redux package as a project dependency using npm.  This package provides the necessary bindings to connect your Rax components to a Redux store.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-redux/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save rax-redux\n```\n\n----------------------------------------\n\nTITLE: Installing driver-webgl with npm\nDESCRIPTION: This command installs the driver-webgl package from npm and saves it as a project dependency. This makes the package available for import and use in your Rax project.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-webgl/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save driver-webgl\n```\n\n----------------------------------------\n\nTITLE: Installing driver-weex with npm\nDESCRIPTION: This command installs the `driver-weex` package from npm and saves it as a project dependency.  This allows Rax applications to utilize Weex as a rendering target.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-weex/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save driver-weex\n```\n\n----------------------------------------\n\nTITLE: Install rax-server-renderer\nDESCRIPTION: This command installs the rax-server-renderer package as a project dependency. It uses npm to download and install the package from the npm registry.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-server-renderer/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save rax-server-renderer\n```\n\n----------------------------------------\n\nTITLE: Installing driver-universal\nDESCRIPTION: This command installs the `driver-universal` package as a dependency to your project using npm. It saves the package to your `package.json` file for dependency management. You need to have Node.js and npm installed to use this command.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-universal/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save driver-universal\n```\n\n----------------------------------------\n\nTITLE: Installing driver-dom\nDESCRIPTION: This command installs the driver-dom package as a project dependency using npm. It adds the package to the project's package.json file, ensuring it's available for use.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-dom/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save driver-dom\n```\n\n----------------------------------------\n\nTITLE: Installing rax-server\nDESCRIPTION: This command installs the rax-server package as a project dependency using npm.  The `--save` flag adds the dependency to the `package.json` file.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install rax-server --save\n```\n\n----------------------------------------\n\nTITLE: Installing Rax via npm\nDESCRIPTION: This shell command installs the Rax package as a project dependency using npm. It allows you to use Rax in your project for building user interfaces.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save rax\n```\n\n----------------------------------------\n\nTITLE: Setting Tag Name Prefix\nDESCRIPTION: This code shows how to set a tag name prefix for custom elements using `DriverDOM.setTagNamePrefix`. This prefix is prepended to custom element tag names when they are rendered, which is especially useful for avoiding naming conflicts.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-dom/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport DriverDOM from 'driver-dom';\n\nDriverDOM.setTagNamePrefix('a-');\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing with Jest and rax-test-renderer\nDESCRIPTION: Illustrates how to perform snapshot testing of a Rax component using Jest and `rax-test-renderer`. The code creates a component instance, converts it to a JSON representation, and uses Jest's `toMatchSnapshot` to compare the output with a previously saved snapshot.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-test-renderer/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement} from 'rax';\nimport renderer from 'rax-test-renderer';\n\ntest('Link renders correctly', () => {\n  const tree = renderer.create(\n    <Link page=\"https://example.com\">Example</Link>\n  ).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Using App Component for Multi-Page Applications - JSX\nDESCRIPTION: This snippet illustrates how to use the App component in rax-document to provide pageInfo for multi-page applications. It imports necessary modules, including `appJSON` which is assumed to contain configuration data. The `App` component receives a `config` prop and renders HTML, including dynamic `<title>` based on `pageInfo`.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-document/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement } from 'rax';\nimport { Root, Style, Script, App} from 'rax-document';\n\nimport appJSON from '../app.json';\n\nfunction Document() {\n  return (\n    <App config={appJSON}>\n      {\n        pageInfo => <html>\n          <head>\n            <meta charset=\"utf-8\" />\n            <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no,viewport-fit=cover\"/>\n            <title>{pageInfo.title}</title>\n            <Style />\n          </head>\n          <body>\n            {/* root container */}\n            <Root />\n            <Script />\n          </body>\n        </html>\n      }\n    </App>\n  );\n}\n\nexport default Document;\n```\n\n----------------------------------------\n\nTITLE: Creating a Rax component instance using rax-test-renderer\nDESCRIPTION: Demonstrates how to create a Rax component instance using `rax-test-renderer` and log the JSON representation of the rendered component to the console. It showcases the basic usage of the renderer to inspect component output.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-test-renderer/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement} from 'rax';\nimport renderer from 'rax-test-renderer';\n\nconst tree = renderer.create(\n  <Link page=\"https://example.com/\">Example</Link>\n);\n\nconsole.log(tree.toJSON());\n// { tagName: 'A',\n//   attributes: { href: 'https://example.com/' },\n//   children: [ 'Example' ] }\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion in Node.js (Weex)\nDESCRIPTION: This snippet shows how to use the `convertUnit` function in a Node.js environment to convert '500rpx' to pixels using the Weex platform's conversion rules.  The function takes the value, property, and platform as arguments. It assumes that the `convertUnit` function is available in the current scope.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/style-unit/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconvertUnit('500rpx', 'width', 'weex')\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Width for Web\nDESCRIPTION: This snippet demonstrates how to update the viewport width for Web calculations using the `setViewportWidth` method.  It configures the conversion factor between rpx and vw, influencing how responsive units are calculated. A larger viewport width will result in smaller vw values for the same rpx value.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/style-unit/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetViewportWidth(1500);\n```\n\n----------------------------------------\n\nTITLE: Installing driver-server using npm\nDESCRIPTION: This command installs the driver-server package as a dependency for your project using npm.  The `--save` flag adds the package to your project's package.json file.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/driver-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save driver-server\n```\n\n----------------------------------------\n\nTITLE: Install and Run Rax Examples (Shell)\nDESCRIPTION: These commands install dependencies and start or build a Rax project. `npm install` installs the necessary packages defined in the `package.json` file. `npm run start` initiates the development mode, while `npm run build` creates a production build.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n\n# dev mode\nnpm run start\n\n# build mode\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Rax App in Development Mode\nDESCRIPTION: This command starts the Rax application in development mode. It uses `npm` to execute the `start` script, which typically runs a development server. The application can be accessed in the browser at the specified URL. Changes made to the code will automatically trigger a reload in the browser.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/event-handler/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running in Development Mode\nDESCRIPTION: This command starts the Rax application in development mode. It uses `npm` to execute the `start` script, which typically starts a development server and watches for file changes. The application is then accessible in a web browser at the specified URL.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/use-rax-compiled-component-in-runtime-miniapp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting development server\nDESCRIPTION: Runs the Rax application in development mode. It starts a local development server and opens the application in the browser, enabling hot-reloading on code changes.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/with-miniapp-plugin-component/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Initializing Rax App with runApp\nDESCRIPTION: This code snippet demonstrates how to initialize a Rax application using the `runApp` function from the `rax-app` module. It imports the `appConfig` from a JSON file and passes it as an argument to `runApp` to start the application. This is the entry point for a Rax application.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-app/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { runApp } from 'rax-app';\nimport appConfig from './app.json';\n\nrunApp(appConfig);\n```\n\n----------------------------------------\n\nTITLE: Starting Rax Project Locally\nDESCRIPTION: These commands navigate into the newly created Rax project directory, install the necessary dependencies, and start the local development server. `npm install` fetches and installs the project's dependencies, while `npm run start` executes the start script defined in the project's `package.json` file, typically launching a development server.\nSOURCE: https://github.com/alibaba/rax/blob/master/README.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ cd <YourProjectName>\n$ npm install\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Initializing Rax Project with npm\nDESCRIPTION: This command initializes a new Rax project using the `create-rax` initializer. It leverages npm to scaffold a basic Rax application structure, allowing developers to quickly start building their application. `npm init <initializer>` is available in npm 6+.\nSOURCE: https://github.com/alibaba/rax/blob/master/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ npm init rax <YourProjectName>\n```\n\n----------------------------------------\n\nTITLE: Starting development server - npm\nDESCRIPTION: Starts the Rax application in development mode using `npm run start`. The application will be accessible at http://localhost:9999.  Edits to the code will trigger a page reload in the browser.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/with-miniapp-native-page/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server - npm\nDESCRIPTION: This command starts the Rax application in development mode, allowing for live reloading and debugging. It requires npm to be installed. The application will be accessible at http://localhost:9999 in the browser.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/page-lifecycle-with-router/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Run Development Server\nDESCRIPTION: This command starts the Rax application in development mode.  It uses a development server that provides features such as hot reloading, enabling developers to see changes in real-time as they edit the code. The application will be accessible at http://localhost:9999.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/with-miniapp-native-custom-component/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Building Rax App for Production\nDESCRIPTION: This command builds the Rax application for production deployment. It uses `npm` to execute the `build` script, which typically optimizes the code and assets for performance. The built application is placed in the `build` folder, ready to be deployed to a production environment.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/event-handler/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building for Production - npm\nDESCRIPTION: This command builds the Rax application for production, optimizing it for deployment. It requires npm to be installed. The output will be located in the `build` folder.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/page-lifecycle-with-router/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Build for Production\nDESCRIPTION: This command builds the Rax application for production. The generated production-ready code will be placed in the `build` directory. This command optimizes the application for deployment, including minification and other performance enhancements.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/with-miniapp-native-custom-component/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: This command builds the Rax application for deployment. It utilizes `npm` to execute the `build` script, which usually bundles the application and optimizes it for production. The resulting files are typically placed in a `build` folder.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/use-rax-compiled-component-in-runtime-miniapp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building for production\nDESCRIPTION: Builds the Rax application for production deployment. It optimizes the code, creates a production-ready bundle, and places it in the `build` folder.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/with-miniapp-plugin-component/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building for production - npm\nDESCRIPTION: Builds the Rax application for production and places the output in the `build` folder. This command is used to generate optimized, production-ready code.\nSOURCE: https://github.com/alibaba/rax/blob/master/examples/with-miniapp-native-page/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Install rax-test-renderer using npm\nDESCRIPTION: Installs the rax-test-renderer package as a development dependency using npm. This command adds the package to the project's package.json file under devDependencies, allowing for testing Rax components without a browser environment.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax-test-renderer/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save-dev rax-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Setting rpx Coefficient for Weex\nDESCRIPTION: This snippet illustrates how to update the coefficient for rpx calculations in Weex using the `setRpx` method.  This changes the ratio between rpx and px units, effectively scaling the UI.  The parameter should represent the desired pixel value for 750rpx.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/style-unit/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetRpx(1500 / 750)\n```\n\n----------------------------------------\n\nTITLE: Rax Benchmark Commands\nDESCRIPTION: These commands provide instructions for building and running Rax benchmarks. They include options to run all benchmarks, target specific frameworks, skip builds, and build individual frameworks.\nSOURCE: https://github.com/alibaba/rax/blob/master/scripts/bench/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# build and run all benchmarks\nnpm start\n\n# only run `rax-local` , and compare data in the `results` fold (to improve bench times)\nnpm start -- --local\n\n# run specific frameworks and benchmarks with prefixes like in the following example\nnpm start -- --framework rax preact --benchmark 01_ 02_\n\n# skip build\nnpm start -- --skip-build\n\n# build a single framework\ncd frameworks/rax\nnpm install\nnpm run build-prod\n```\n\n----------------------------------------\n\nTITLE: Installing Rax TypeScript definitions\nDESCRIPTION: This shell command installs the TypeScript definitions for Rax as a development dependency. This provides type checking and autocompletion when using Rax with TypeScript.\nSOURCE: https://github.com/alibaba/rax/blob/master/packages/rax/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save-dev @types/rax\n```"
  }
]