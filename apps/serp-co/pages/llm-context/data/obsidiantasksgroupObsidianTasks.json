[
  {
    "owner": "obsidian-tasks-group",
    "repo": "obsidian-tasks",
    "content": "TITLE: Creating a Task in Obsidian Markdown\nDESCRIPTION: This snippet shows a standard Markdown task list item, marked with the '#task' tag, indicating an incomplete task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Task Toggling Scenarios/Embed File in to Note.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Figure out whether this is a Tasks bug or an Obsidian bug\n```\n\n----------------------------------------\n\nTITLE: Parsing Task with Wikilink in Obsidian Tasks\nDESCRIPTION: This snippet represents a task within an Obsidian note, utilizing the Obsidian Tasks syntax. The task includes a checkbox, a task tag (#task), and wikilinks enclosed in double square brackets. The objective is to showcase how the Obsidian Tasks plugin identifies and renders these linked items within the task's structure. The wikilinks provide references or connections to other notes within the user's Obsidian vault, enabling linking and context organization.  The plugin will correctly parse the task item and extract relevant information from the wikilinks. There are no external dependencies for this snippet, just the Obsidian Tasks plugin must be installed and activated.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/link_in_task_wikilink.md#_snippet_0\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task Task in 'link_in_task_wikilink' [[link_in_task_wikilink]] [[multiple_headings]]\n```\n\n----------------------------------------\n\nTITLE: Defining Query File Defaults with Meta Bind Widgets Using Markdown\nDESCRIPTION: This Markdown snippet creates inline input toggles and a text area for each Tasks query property prefixed with TQ_ to enable controlling their visibility and behavior interactively within an Obsidian note. It leverages the Meta Bind plugin's ability to render `INPUT` widgets inside Markdown to update note metadata that Tasks queries use as their parameters. The inputs include toggles for showing various task attributes (e.g., ID, priority, dates) and a text area for arbitrary additional instructions. Dependencies include the Meta Bind plugin for rendering widgets and Tasks plugin version 7.15.0 or higher to recognize Query File Defaults. Inputs correspond to boolean flags (toggles) or text (text area) representing query configuration options. The output is an interactive UI embedded in the note that modifies query defaults in real time. The snippet requires the note to have one or more Tasks queries referencing these properties to see effects.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Make a query user interface.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nshort mode: `INPUT[toggle:TQ_short_mode]`\ntree: `INPUT[toggle:TQ_show_tree]`\ntags: `INPUT[toggle:TQ_show_tags]`\nid: `INPUT[toggle:TQ_show_id]` depends on: `INPUT[toggle:TQ_show_depends_on]`\npriority: `INPUT[toggle:TQ_show_priority]`\nrecurrence rule: `INPUT[toggle:TQ_show_recurrence_rule]` on completion: `INPUT[toggle:TQ_show_on_completion]`\nstart date: `INPUT[toggle:TQ_show_start_date]` scheduled date: `INPUT[toggle:TQ_show_scheduled_date]` due date: `INPUT[toggle:TQ_show_due_date]`\ncreated date: `INPUT[toggle:TQ_show_created_date]` cancelled date: `INPUT[toggle:TQ_show_cancelled_date]` done date: `INPUT[toggle:TQ_show_done_date]`\nurgency: `INPUT[toggle:TQ_show_urgency]`\nbacklink: `INPUT[toggle:TQ_show_backlink]`\nedit button: `INPUT[toggle:TQ_show_edit_button]` postpone button: `INPUT[toggle:TQ_show_postpone_button]`\ntask count: `INPUT[toggle:TQ_show_task_count]`\nextra instructions: `INPUT[textArea:TQ_extra_instructions]`\nexplain: `INPUT[toggle:TQ_explain]`\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by description length (JavaScript)\nDESCRIPTION: This code snippet filters tasks based on the length of their description. It uses the `task.description.length` property to determine the length and includes tasks with descriptions longer than 100 characters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.description.length > 100\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by exact filename in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to filter tasks based on the exact file name, regardless of the folder.  The `task.file.filename` is strictly compared to the target file name, including the `.md` extension.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.filename === \"4.1.0 Release.md\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Tag Count using JavaScript\nDESCRIPTION: These examples filter tasks based on the number of tags assigned using the `task.tags` array property. The first snippet finds tasks with exactly one tag, while the second finds tasks with more than one tag. These filters depend on the Obsidian Tasks plugin version 4.2.0 or higher, which supports custom filtering by the `task.tags` property. The input is a task object with an array of tag strings; the output is a filtered list of tasks matching the tag count criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.tags.length === 1\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.tags.length > 1\n```\n\n----------------------------------------\n\nTITLE: Example task list with dependency\nDESCRIPTION: This example demonstrates the creation of a dependency between two tasks using `id` and `dependsOn` fields. The first task is assigned an `id`, and the second task specifies that `id` in its `dependsOn` field, indicating that it depends on the first task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- [ ] Build a first draft 🆔 4ijuhy\n- [ ] Test with users ⛔ 4ijuhy\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Example in Tasks Plugin\nDESCRIPTION: This snippet demonstrates a Tasks search block. It showcases features such as filtering for tasks that are not done, filtering based on due dates, setting a limit, grouping, sorting, and the explain functionality.  It allows users to query and display tasks based on specified criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```tasks\n# Only tasks that are not done, that is, which begin like this (but without the quotes):\n#   '- [ ] ' or\n#   '* [ ] ' or\n#   '1. [ ] '\n# Indented tasks are supported, but only single-line tasks.\nnot done\n\n# Tasks due today or earlier:\ndue before tomorrow\n\n# Restrict to at most 100 tasks.\n# If you ask Tasks to display many hundreds or thousands of tasks,\n# Obsidian's editing performance really slows down.\nlimit 100\n\n# Group and sort the output:\ngroup by filename\nsort by due reverse\nsort by description\n\n# Optionally, ask Tasks to explain how it interpreted this query:\nexplain\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Unblocked Incomplete Tasks with Obsidian Tasks Query Language\nDESCRIPTION: This snippet uses the Tasks plugin query language to filter and display tasks that are not completed and not blocked within a specified file path. It includes commands to exclude backlinks, simplify explanation output, and provide a verbose explanation of the query results. The snippet expects a 'query.file.path' variable to specify the file context and effectively helps users identify actionable tasks that are free from blocking dependencies.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples - Recurring Tasks.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\nis not blocked\n\npath includes {{query.file.path}}\n\nhide backlink\n\n# To simplify the explain output:\nignore global query\n\nexplain\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Due Today in Obsidian Tasks\nDESCRIPTION: This query demonstrates how to filter tasks based on specific criteria using the `tasks` code block. It retrieves tasks that have a due date set for today (`due today`) and have not yet been marked as done (`not done`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/About Queries.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\ndue today\nnot done\n```\n```\n\n----------------------------------------\n\nTITLE: Grouping by Time from Now - JavaScript\nDESCRIPTION: This snippet groups tasks based on the time from now until their due date, using moment.js's `fromNow()` function (e.g., \"8 days ago\", \"in 11 hours\"). It uses an empty string if there is no due date. The expression evaluates to a string representing the time from now until the task's due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.fromNow.groupText\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Substring Match in File Tags List (Robust) - Javascript (Tasks Query)\nDESCRIPTION: Provides a robust method to filter tasks by checking if any tag in the file's `tags` list property contains a specific substring. Uses optional chaining (`?.`) and nullish coalescing (`??`) to safely handle cases where the `tags` property might be missing or null before joining the array into a string for searching.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.property('tags')?.join(',').includes('#project/') ?? false\n```\n\n----------------------------------------\n\nTITLE: Querying tasks due today in Obsidian Tasks\nDESCRIPTION: A simple query that displays all incomplete tasks that are due today. This is useful for daily planning and seeing what needs to be completed on the current day.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndue today\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by query folder including subfolders (JavaScript)\nDESCRIPTION: This code snippet filters tasks in files within the same folder as the query and all its subfolders.  It leverages the `query.file.folder` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder.includes( query.file.folder )\n```\n\n----------------------------------------\n\nTITLE: Querying All Tasks in Obsidian Tasks\nDESCRIPTION: This is the most basic `tasks` code block query, designed to retrieve all tasks from the entire Obsidian vault regardless of their properties. It serves as a starting point but typically requires further filtering for practical use.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/About Queries.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Grouping by Task Completion Status (JavaScript)\nDESCRIPTION: Uses a JavaScript ternary operator within `group by function` to categorize tasks based on their completion status. Tasks where `task.isDone` is true are grouped under 'Action Required', and others under 'Nothing To Do'. This custom grouping logic requires Tasks plugin version 4.0.0 or later.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.isDone ? \"Action Required\" : \"Nothing To Do\"\n```\n\n----------------------------------------\n\nTITLE: Sorting by Root Folder in Tasks\nDESCRIPTION: This JavaScript snippet enables sorting tasks based on the root folder they are located in using `task.file.root`. The result is a sorted list, with tasks grouped by their root folders.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.root\n```\n\n----------------------------------------\n\nTITLE: Filtering Open Tasks by Project Path Using Obsidian Tasks Plugin Syntax\nDESCRIPTION: This query filters for tasks that are not completed (open) and whose file path includes the phrase \"Important Project\". It depends on the Obsidian Tasks plugin's path filter and completion status handling. Key parameters are `not done` which excludes completed tasks, and `path includes` for restricting tasks to those belonging to a specific project. The output is a list of currently open tasks within the specified project folder or path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Tasks.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nnot done\npath includes Important Project\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Open Tasks Due Before a Date with Short Mode Enabled Using Obsidian Tasks Plugin Syntax\nDESCRIPTION: Extends the previous due-date filter by enabling `short mode`, which changes the output task display to a more concise format within Obsidian notes. This query also filters for open tasks due before December 6th, 2021. Dependencies include the Obsidian Tasks plugin supporting short mode display. Key parameters are the same as before, enhanced by the `short mode` option which alters task listing aesthetics.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Tasks.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nnot done\ndue before 2021-12-06\nshort mode\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Obsidian Properties (Frontmatter) - YAML\nDESCRIPTION: Illustrates the required structure for defining Obsidian Properties (frontmatter) at the very beginning of a markdown file using YAML syntax. Properties are defined as key-value pairs between triple-dashed lines.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: value\n---\n```\n\n----------------------------------------\n\nTITLE: Querying tasks due in the next two weeks but not overdue in Obsidian Tasks\nDESCRIPTION: Shows incomplete tasks that are due within the coming two weeks but not overdue. Uses date comparison operators to create a date range, helpful for forward planning without seeing past-due items.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndue AFTER yesterday\ndue BEFORE in two weeks\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Fourth Tag Level (Conditional) in Obsidian Tasks\nDESCRIPTION: This JavaScript function, intended for 'group by function' in Obsidian Tasks, attempts to group tasks by the fourth level of their hierarchical tags. It splits each tag by '/', checks if the fourth element (index 3) exists, and returns it if present; otherwise, it returns an empty string, resulting in no group heading for tags with fewer than four levels.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[3] ? tag.split('/').slice(3, 4) : '')\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Recurring Task in Markdown\nDESCRIPTION: Shows the syntax for creating a recurring task that repeats every Sunday with a due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] take out the trash 🔁 every Sunday 📅 2021-04-25\n```\n\n----------------------------------------\n\nTITLE: Filtering Completed Tasks Using JavaScript Function in Obsidian Tasks\nDESCRIPTION: This snippet demonstrates filtering tasks to include only those marked as done using the `task.isDone` JavaScript function within an Obsidian Tasks `filter by function` query. This method provides the same result as the `done` filter but allows combining it with other logical expressions on the same filter line.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isDone_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.isDone\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by tag or heading containing a specific tag\nDESCRIPTION: This snippet searches for tasks that have a specific tag '#context/home' either explicitly on the task line or within the preceding heading. It's useful for categorizing tasks based on tags placed in different parts of the note, although it may include nested or imprecise matches.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst wanted = '#context/home'; \nreturn task.heading?.includes(wanted) || task.tags.find( (tag) => tag === wanted ) && true || false;\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks Due Today or Earlier\nDESCRIPTION: This JavaScript snippet filters tasks that are due today or earlier. It utilizes the `isSameOrBefore` method from moment.js to compare the task's due date with the current date, using 'day' precision. The filter returns true if the task is due today or any day before today.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Substring Match in File Tags List (Template Literal) - Javascript (Tasks Query)\nDESCRIPTION: An alternative, simpler method using Javascript template literals (` `) to implicitly convert the `tags` array property to a string, allowing a substring search (`includes()`) across all tags in the file's frontmatter.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function `${task.file.property('tags')}`.includes('#project/')\n```\n\n----------------------------------------\n\nTITLE: Filtering Open Tasks Due Before a Specific Date Using Obsidian Tasks Plugin Syntax\nDESCRIPTION: This snippet filters all open tasks which have a due date earlier than December 6th, 2021. It relies on the Obsidian Tasks plugin's support for date comparison and due date metadata. The main parameters are `not done` for incomplete tasks and `due before` followed by a date string for temporal filtering. The output lists tasks scheduled to be done before the given due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Tasks.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nnot done\ndue before 2021-12-06\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Incomplete Tasks Due Before in 7 Days with Obsidian Tasks (Tasks query language)\nDESCRIPTION: This snippet shows how to list tasks that are not done and are due before 7 days from the current date using the Obsidian Tasks plugin. It employs the dynamic 'due before in 7 days' filter, eliminating the need for manual date updates. 'not done' filters for incomplete tasks, while 'due before in 7 days' provides relative date filtering. Requires the Obsidian Tasks plugin. Output is a dynamically updated task list.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Find tasks for coming 7 days.md#_snippet_3\n\nLANGUAGE: Tasks query language\nCODE:\n```\nnot done\ndue before in 7 days\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Uppercased Description - JavaScript\nDESCRIPTION: This JavaScript snippet groups tasks after converting their descriptions to uppercase. It uses the `toUpperCase()` method on the `task.description` property. This approach allows tasks with the same description but different capitalization to be grouped together, which might be useful when case-sensitivity is not desired.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.description_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description.toUpperCase()\n```\n\n----------------------------------------\n\nTITLE: Using Task Date Properties and Methods (Markdown Table, Type System Reference)\nDESCRIPTION: This snippet documents which date-related properties are available on a task (e.g., created, start, scheduled, due, cancelled, done, happens), as returned by the Tasks plugin parser. Each field is a TasksDate object, facilitating date filtering, sorting, and scripting. No extra dependencies are required but some features (like happens or cancelled) require particular plugin versions. Inputs are tasks; outputs are the TasksDate or empty value.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Task Properties.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| Field | Type 1 | Example 1 | Type 2 | Example 2 |\n| ----- | ----- | ----- | ----- | ----- |\n| `task.created` | `TasksDate` | `2023-07-01 00:00` | `TasksDate` | `` |\n| `task.start` | `TasksDate` | `2023-07-02 00:00` | `TasksDate` | `` |\n| `task.scheduled` | `TasksDate` | `2023-07-03 00:00` | `TasksDate` | `` |\n| `task.due` | `TasksDate` | `2023-07-04 00:00` | `TasksDate` | `` |\n| `task.cancelled` | `TasksDate` | `2023-07-06 00:00` | `TasksDate` | `` |\n| `task.done` | `TasksDate` | `2023-07-05 00:00` | `TasksDate` | `` |\n| `task.happens` | `TasksDate` | `2023-07-02 00:00` | `TasksDate` | `` |\n```\n\n----------------------------------------\n\nTITLE: Querying tasks due next month without scheduled dates in Obsidian Tasks\nDESCRIPTION: Filters for incomplete tasks that are due next month but don't have a scheduled date. Useful for identifying tasks with deadlines that haven't been planned for yet.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndue next month\nno scheduled date\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Start Date with Tasks query AND has start date\nDESCRIPTION: This Tasks query demonstrates how to find tasks that start today or earlier. It uses the `starts before tomorrow` and `has start date` filters in conjunction to ensure that only tasks with a start date that is today or in the past are returned.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n# Find tasks which start today or earlier:\n( (starts before tomorrow) AND (has start date) )\n```\n\n----------------------------------------\n\nTITLE: Specifying Due Dates in Obsidian Tasks Plugin Using Markdown\nDESCRIPTION: Demonstrates how to append a due date to a task line in markdown format by adding the calendar emoji (📅) followed by the date in 'YYYY-MM-DD' format. This date indicates the deadline for task completion and is accessible as the 'task.due' property in task queries. The snippet requires the task line to end with the due date emoji and date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Dates.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] take out the trash 📅 2021-04-09\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks Due on Tuesdays\nDESCRIPTION: This JavaScript snippet demonstrates how to filter tasks that are due on Tuesdays using the `task.due.format()` method. It uses the moment.js library for date formatting. The filter function checks if the formatted day of the week is equal to 'Tuesday'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.format('dddd') === 'Tuesday'\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Scheduled Date Format using JavaScript Function in Obsidian Tasks\nDESCRIPTION: A custom grouping function that formats the scheduled date of a task in a specific pattern (YYYY-MM-DD followed by day name). Unlike the built-in option, this function returns an empty string instead of 'No scheduled date' when a task has no scheduled date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.scheduled_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.scheduled.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Marking Cancelled Dates for Tasks in Obsidian Tasks Plugin in Markdown\nDESCRIPTION: Explains how to indicate a cancelled task's cancellation date by appending the red cross-mark emoji (❌) with a 'YYYY-MM-DD' date at the end of the task line. This feature requires enabling cancellation date tracking and can be filtered using the 'task.cancelled' property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Dates.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [-] take out the trash ❌ 2021-04-09\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks Due Today or Later\nDESCRIPTION: This JavaScript snippet filters tasks that are due today or later. It utilizes the `isSameOrAfter` method from moment.js to compare the task's due date with the current date, using 'day' precision. The filter returns true if the task is due today or any day after today.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSameOrAfter(moment(), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Start Date's Day of Week\nDESCRIPTION: This snippet sorts tasks by the day of the week extracted from their start date. The `task.start.format(\"dddd\")` expression retrieves the day of the week in full textual format (e.g., \"Monday\"). The sorting is then implicitly alphabetical. The result is a list of tasks displayed in an order based on the alphabetical order of the day of the week.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.start_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.start.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Filter tasks due today or earlier (JavaScript)\nDESCRIPTION: This JavaScript code snippet filters tasks due today or earlier. It utilizes the `task.due.moment` property along with `isSameOrBefore(moment(), 'day')` to compare the task's due date with the current date at a 'day' precision level.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Finding tagged tasks in a time period in Obsidian Tasks\nDESCRIPTION: Shows all tasks scheduled for the current quarter that have at least one tag. Useful for finding categorized tasks within a specific time frame.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_9\n\nLANGUAGE: tasks\nCODE:\n```\nscheduled this quarter\nhas tags\n```\n\n----------------------------------------\n\nTITLE: Excluding Tasks by Presence of File Property - Javascript (Tasks Query)\nDESCRIPTION: Excludes tasks that are located in files that have a specific property defined in their frontmatter. This negates the `task.file.hasProperty()` check, useful for hiding tasks from files associated with certain plugins.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function ! task.file.hasProperty('kanban-plugin')\n```\n\n----------------------------------------\n\nTITLE: Defining task with due date - Markdown\nDESCRIPTION: Defines an incomplete task in Markdown with the '#task' tag. It includes a due date using the '[due:: YYYY-MM-DD]' inline field. This date represents the deadline by which the task is expected to be completed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Dates_dataview-snippet.approved.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Has a due date [due:: 2023-04-16]\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Tasks in Obsidian Tasks Query Language\nDESCRIPTION: This snippet filters tasks to include only those located in the same folder as the current queried file and sorts the resulting tasks by their file path. It uses dynamic variables such as {{query.file.folder}} to refer to the folder of the file executing the query, and {{query.file.filenameWithoutExtension}} as a placeholder to display or utilize the filename without its extension. The snippet requires the Obsidian Tasks plugin and runs within the context of an Obsidian note. It expects tasks in markdown files that Obsidian indexes and filters accordingly. The output is a list of tasks matching these criteria, limited to 200 results, sorted by path, helping users organize tasks contextually by folder structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 200.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Formatting a Task with Reminder and Due Date in Obsidian Tasks - Markdown\nDESCRIPTION: This snippet demonstrates the recommended order for fields in a task using Obsidian's Tasks and Reminder plugins. Required dependencies include obsidian-tasks, obsidian-reminder, and proper plugin configuration. The task line should start with '- [ ]', followed by the task description, the reminder date in '⏰ YYYY-MM-DD HH:mm' format, then the due date, and any additional fields like recurrence and start/done dates. Inputs must respect the placement of the reminder date immediately before the due date, with no intervening fields. Outputs are notifications and reminders as managed by the plugins. Any deviation in order, or use of the Tasks edit command, can break reminder functionality.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Notifications.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task task name ⏰ YYYY-MM-DD HH:mm 📅 YYYY-MM-DD ⏫ 🔁 every week 🛫 YYYY-MM-DD ⏳ YYYY-MM-DD\n```\n\n----------------------------------------\n\nTITLE: Using Global Filter in Obsidian Tasks\nDESCRIPTION: This markdown snippet demonstrates the application of a global filter to identify task items. The example utilizes the tag `#task`.  Any checklist item containing this tag will be recognized as a task when the global filter is set to `#task`.  This filtering allows for focused tracking of specific checklist items.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Global Filter.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task take out the trash\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Done Date String - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Groups tasks by the formatted done date using the pattern 'YYYY-MM-DD dddd' (e.g., 2023-05-15 Monday). If there is no done date, the heading is omitted. Useful for organizing completed tasks chronologically. Requires moment.js and that `task.done` supports custom formatting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.done.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Sorting and grouping tasks in Obsidian Tasks\nDESCRIPTION: Shows how to sort and group tasks in query results. This example finds overdue and today's tasks, sorts them by due date, and groups them by the folder containing each task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_11\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndue before tomorrow\nsort by due\ngroup by folder\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates to Group Tasks by Day and Date in JavaScript\nDESCRIPTION: This snippet uses `task.due.format()` to display the day of the week along with the date, de-emphasizing the date. The format string specifies how to display the date and day using the format characters. The function takes a format string as input, which determines the output format, and a string for undated tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.special_cases_formatting_results.approved.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntask.due.format(\"[%%]YYYY-MM-DD[%%]dddd [<mark style='background: var(--color-base-00); color: var(--color-base-40);'>](YYYY-MM-DD)[</mark>]\")\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies with Tasks Emoji Format - Markdown\nDESCRIPTION: This snippet demonstrates how to define task dependencies using the Tasks plugin's emoji format in markdown. The 🆔 emoji is used to assign a unique ID to a task, and the ⛔ emoji specifies dependencies on other tasks using their IDs. The task must have the '#task' tag to be parsed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Tasks Emoji Format.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task do this first 🆔 dcf64c\n- [ ] #task do this after first and some other task ⛔ dcf64c,0h17ye\n```\n\n----------------------------------------\n\nTITLE: Querying Undone Tasks in Current File - Obsidian Tasks\nDESCRIPTION: This snippet defines a query for the Obsidian Tasks plugin. It retrieves tasks that are not yet completed (`not done`) and are located within the same file where the query is embedded. The `path includes {{query.file.path}}` condition uses a dynamic variable to filter tasks based on the current file's path, rendering a live list of relevant tasks below the code block.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/callout_custom.md#_snippet_0\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\nnot done\npath includes {{query.file.path}}\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Exact Folder Path - JavaScript\nDESCRIPTION: This JavaScript filter expression for Obsidian Tasks finds tasks located in files whose folder path exactly matches the specified string. The use of strict equality (`===`) and the trailing slash (`/`) ensures that only files directly within the \"Work/Projects/\" folder are included, excluding any subfolders.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntask.file.folder === \"Work/Projects/\"\n```\n\n----------------------------------------\n\nTITLE: New Instance of Multi-Date Recurring Task in Markdown\nDESCRIPTION: Demonstrates the result after completing a recurring task that has multiple dates, showing how the relative spacing between dates is preserved.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Mow the lawn 🔁 every 2 weeks ⏳ 2021-11-11 📅 2021-11-13\n```\n\n----------------------------------------\n\nTITLE: Task Blocked Example\nDESCRIPTION: This example shows how to define blocked tasks using IDs. The second task is blocked because it depends on the first task's ID. The first task is not blocked.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n- [ ] I am not blocked 🆔 12345\n- [ ] I am blocked ⛔ 12345\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Priority with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates filtering a collection of task objects to exclude those marked with a 'Normal' priority. It assumes the presence of a 'task' object with a 'priorityName' property. The filter condition checks that 'task.priorityName' is not equal to 'Normal', effectively selecting only tasks with an assigned priority. No additional dependencies are required. Input is an array of task objects; output is a filtered array without 'Normal' priorities.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.priorityName_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.priorityName !== 'Normal'\n```\n\n----------------------------------------\n\nTITLE: Complex JavaScript Expressions with Functions and Line Continuations in Obsidian Tasks\nDESCRIPTION: Advanced JavaScript expressions in Obsidian Tasks plugin demonstrating use of return statements, variables, conditional statements, functions, and line continuations for improved readability.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Expressions.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nreturn 42\n=> 42\n\nconst x = 1 + 1; return x * x\n=> 4\n\nif (1 === 1) { return \"yes\"; } else { return \"no\" }\n=> 'yes'\n\nfunction f(value) {                 \\\n    if (value === 1 ) {             \\\n        return \"yes\";               \\\n    } else {                        \\\n        return \"no\";                \\\n    }                               \\\n}                                   \\\nreturn f(1);\n=> 'yes'\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Markdown Task without a Due Date\nDESCRIPTION: Shows a standard Markdown task item format (`- [ ] #tag Task description`) without any specific due date information added via either Tasks plugin emoji syntax or Dataview inline field syntax.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Testing File Formats/Dataview Format - Tasks to Parse.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task D 1 Some task - with no due date at all\n```\n\n----------------------------------------\n\nTITLE: Custom Filter - Next Status Symbol - JavaScript\nDESCRIPTION: Demonstrates how to create a custom filter that finds tasks where the next status symbol is the same as the current status symbol. This identifies tasks that toggle to themselves.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function task.status.symbol === task.status.nextSymbol\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Done State and Attributes (Obsidian Tasks, markdown/text)\nDESCRIPTION: Demonstrates a tasks code block containing three separate filters: tasks not marked as done, tasks with due dates within a certain range, and tasks that are either tagged #inbox, located in files including 'Inbox' in the path, or under an 'Inbox' heading. No external dependencies are required except the Obsidian Tasks plugin. The snippet expects to filter and output matching tasks; the parameters used are filter queries. Filters are combined so all conditions must be satisfied for a task to appear.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\nnot done\n(due after yesterday) AND (due before in two weeks)\n[tags include #inbox] OR [path includes Inbox] OR [heading includes Inbox]\n```\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Completion Status in JavaScript\nDESCRIPTION: This snippet defines a grouping function using a ternary operator to categorize tasks based on their completion status ('isDone' property). If a task is done, it's assigned to the 'Action Required' group; otherwise, it belongs to 'Nothing To Do'. The code utilizes JavaScript's ternary operator for concise conditional logic. The output will display the groups based on the task's completion state.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.isDone_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.isDone ? \"Action Required\" : \"Nothing To Do\"\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Dataview Fields in Obsidian Tasks\nDESCRIPTION: Demonstrates how multiple Dataview inline fields can be combined on a single task line to specify various metadata simultaneously. Shows examples of active and completed tasks including fields like priority, recurrence, created, scheduled, due, and completion dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Formats/Dataview Format.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Has one of every field except done  [priority:: high]  [repeat:: every day]  [start:: 2023-04-24]  [scheduled:: 2023-04-26]  [due:: 2023-04-27]\n- [x] #task Has one of every except recurring  [priority:: high]  [created:: 2023-04-26]  [start:: 2023-04-23]  [scheduled:: 2023-04-25]  [due:: 2023-04-26]  [completion:: 2023-04-26]\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks due today or later using Moment.js\nDESCRIPTION: This snippet filters tasks that are due today or later. It uses Moment.js to compare the task's due date with the current date. The `isSameOrAfter` function determines if the task's due date is the same as or after the current date, considering only the day, month, and year. It returns true if it is and false otherwise.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSameOrAfter(moment(), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Priority Number - Obsidian Tasks Query\nDESCRIPTION: This snippet demonstrates the query syntax to group tasks by their numerical priority. It utilizes the `group by function` clause with `task.priorityNumber`, which assigns a number from 0 (Highest priority) to 5 (Lowest priority) to each task, organizing the results under these numerical headings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.priorityNumber_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.priorityNumber\n```\n\n----------------------------------------\n\nTITLE: Checking If File Has Property (JavaScript)\nDESCRIPTION: Checks if the file containing the query has a specific YAML frontmatter property. Takes the property name as a string argument. Returns a boolean (`true` or `false`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/QueryProperties.test.query_file_properties.approved.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.hasProperty('task_instruction')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.hasProperty('non_existent_property')\n```\n\n----------------------------------------\n\nTITLE: Filter tasks due today or later (JavaScript)\nDESCRIPTION: This JavaScript code snippet filters tasks due today or later, using `isSameOrAfter`. It utilizes the `task.due.moment` property along with `isSameOrAfter(moment(), 'day')` to compare the task's due date with the current date at a 'day' precision level.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSameOrAfter(moment(), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Filtering Incomplete Tasks Using JavaScript Function in Obsidian Tasks\nDESCRIPTION: This snippet demonstrates filtering tasks to include only those not marked as done using the negated `! task.isDone` JavaScript function within an Obsidian Tasks `filter by function` query. This method provides the same result as the `not done` filter but allows combining it with other logical expressions on the same filter line.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isDone_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function ! task.isDone\n```\n\n----------------------------------------\n\nTITLE: Grouping and Sorting Tasks by Status Using Obsidian Tasks Plugin (Markdown)\nDESCRIPTION: This code snippet demonstrates how to filter tasks within a specific file in Obsidian, group them by their status type, and sort them by description using the Tasks plugin and Minimal Theme. It requires the Obsidian Tasks plugin and the Minimal Theme, and expects tasks to use supported status icons such as to-do, done, canceled, and others. The snippet uses a code block with the 'tasks' language and instructs to ignore the global query, limit results by file path, group by status, and sort as specified.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Theme - Minimal Theme.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```tasks\n# We need to ignore the global query, as it ignores this file:\nignore global query\n\npath includes {{query.file.path}}\ngroup by status.type\nsort by description\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Filter - Status Type - JavaScript\nDESCRIPTION: Shows how to create custom filters based on the task's status type using JavaScript. Examples include filtering for 'NON_TASK' tasks, filtering for tasks that are 'TODO' or 'IN_PROGRESS', and filtering for tasks that are neither 'NON_TASK' nor 'CANCELLED'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function task.status.type === 'NON_TASK'\n```\n```\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function 'TODO,IN_PROGRESS'.includes(task.status.type)\n```\n```\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type)\n```\n```\n\n----------------------------------------\n\nTITLE: Matching the Start of a Field with Regex Anchors\nDESCRIPTION: Provides examples of using the `^` anchor in Obsidian Tasks regex queries to match patterns only at the beginning of the `description` field. The first example is case-sensitive, while the second uses the `i` flag for case-insensitivity when searching for descriptions starting with \"Log\".\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /^Log/\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /^Log/i\n```\n\n----------------------------------------\n\nTITLE: Case-sensitive Description Search - Tasks\nDESCRIPTION: This snippet demonstrates a case-sensitive search for tasks where the description includes the word \"case\". It highlights that without the 'i' flag, only tasks with the exact casing will be matched. This example showcases how to perform basic text matching within task descriptions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription includes case\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription includes case\n```\n\n----------------------------------------\n\nTITLE: Grouping by Priority Name (Sorted) (JavaScript)\nDESCRIPTION: Groups tasks based on their priority name, using a property designed to sort groups from highest priority to lowest. This provides a display order matching the natural priority ranking. Requires the task object (`task`) and its `priorityNameGroupText` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.priorityNameGroupText\n```\n\n----------------------------------------\n\nTITLE: Querying and Limiting Tasks Dynamically - Tasks\nDESCRIPTION: Defines a query for the Obsidian Tasks plugin. It filters tasks to include only those within the same folder as the query file, sorts the results by file path, and includes a dynamic instruction (likely a limit based on the filename, e.g., 'limit 1000'). The `#explain` directive instructs the plugin to provide details about the query's execution.\n\nDependencies: Obsidian Tasks plugin.\nParameters:\n- `folder includes {{query.file.folder}}`: Filters tasks to the current folder.\n- `sort by path`: Sorts the results by file path.\n- `{{query.file.filenameWithoutExtension}}`: Dynamically adds a query instruction from the filename.\n- `#explain`: Directive to explain the query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 1000.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks by Folder Using Obsidian Tasks Plugin - Markdown\nDESCRIPTION: This snippet defines a Tasks plugin code block for Obsidian that queries all tasks from files within the same folder as the current file. It uses the template variable {{query.file.folder}} for folder-based filtering, sorts the results by file path, and automatically incorporates the filename as an instructional comment. Dependencies include the Obsidian app with the Tasks plugin installed. Expected input is a Markdown file within an Obsidian vault; output is a dynamic list of matching tasks formatted by the plugin. It requires the Tasks plugin (https://github.com/obsidian-tasks-group/obsidian-tasks) and assumes the containing vault supports template variables.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 2000.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```tasks\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Priority as Checkbox Colors\nDESCRIPTION: CSS snippet that removes the default priority emoticons and instead renders task checkboxes in different colors based on priority levels, using Obsidian's color variables.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.task-list-item[data-task-priority=\"highest\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-purple);\n    border-color: var(--color-purple);\n}\n\n.task-list-item[data-task-priority=\"high\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-red);\n    border-color: var(--color-red);\n}\n\n.task-list-item[data-task-priority=\"medium\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-orange);\n    border-color: var(--color-orange);\n}\n\n.task-list-item[data-task-priority=\"normal\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-blue);\n    border-color: var(--color-blue);\n}\n\n.task-list-item[data-task-priority=\"low\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-cyan);\n    border-color: var(--color-cyan);\n}\n\n.task-list-item[data-task-priority=\"lowest\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-green);\n    border-color: var(--color-green);\n}\n\n/* This part removes the regular priority emoticon */\nspan.task-priority {\n    display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with More Than One Tag in Obsidian Tasks (Javascript)\nDESCRIPTION: This Obsidian Tasks query utilizes a Javascript function (`filter by function`) to identify tasks that have multiple tags (more than one). The condition `task.tags.length > 1` selects tasks based on their tag count, ignoring tags potentially added through a global filter, and returns tasks where the count is greater than one.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.tags_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.tags.length > 1\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Tasks using Obsidian Tasks\nDESCRIPTION: This code snippet demonstrates how to filter and sort tasks within the Obsidian Tasks plugin. It includes filtering tasks within a specified folder and sorting them by their file path, and uses the filename without extension as an instruction. It expects the Obsidian Tasks plugin to be installed and enabled.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 4000.md#_snippet_0\n\nLANGUAGE: Tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Core Statuses Properties Table\nDESCRIPTION: Detailed table showing the properties of core statuses, including their symbols, next status symbols, names, types, and styling requirements. This information is useful for understanding how to reference these statuses in Tasks queries.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Core Statuses.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name<br>`status.name includes...`<br>`sort by status.name`<br>`group by status.name` | Status Type<br>`status.type is...`<br>`sort by status.type`<br>`group by status.type` | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `space` | `x` | Todo | `TODO` | No |\n| `x` | `space` | Done | `DONE` | No |\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks: Task Creation Example\nDESCRIPTION: This snippet demonstrates the basic task creation syntax within Obsidian using the Tasks plugin. It shows how different input strings are transformed into valid task entries, including the addition of checkboxes where necessary. Note: the ➕ symbol is used to denote the creation date\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/ui/EditTask.test.Exhaustive_editing_Edit_and_save_All_inputs.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '' =>\n    '- [ ] simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    'plain text, not a list item' =>\n    '- [ ] plain text, not a list item'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '-' =>\n    '- [ ] simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '- ' =>\n    '- [ ] simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '- [ ]' =>\n    '- [ ] simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '- [ ] ' =>\n    '- [ ] simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '- list item, but no checkbox' =>\n    '- [ ] list item, but no checkbox'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '- [ ] checkbox with initial description' =>\n    '- [ ] checkbox with initial description'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '- [ ] checkbox with initial description and created date ➕ 2023-01-01' =>\n    '- [ ] checkbox with initial description and created date ➕ 2023-01-01'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '- [ ] #task checkbox with global filter string and initial description' =>\n    '- [ ] #task checkbox with global filter string and initial description'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', false)\n    '- [ ] checkbox with initial description ending with task tag at end #task' =>\n    '- [ ] checkbox with initial description ending with task tag at end #task'\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks: Task Creation with Date\nDESCRIPTION: This snippet demonstrates the task creation syntax with an explicit creation date added to the task. This includes the transformation of different input strings into valid task entries, adding checkboxes and a creation date. The ➕ symbol is used to denote the creation date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/ui/EditTask.test.Exhaustive_editing_Edit_and_save_All_inputs.approved.txt#_snippet_1\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '' =>\n    '- [ ] simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    'plain text, not a list item' =>\n    '- [ ] plain text, not a list item ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '-' =>\n    '- [ ] simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '- ' =>\n    '- [ ] simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '- [ ]' =>\n    '- [ ] simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '- [ ] ' =>\n    '- [ ] simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '- list item, but no checkbox' =>\n    '- [ ] list item, but no checkbox ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '- [ ] checkbox with initial description' =>\n    '- [ ] checkbox with initial description'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '- [ ] checkbox with initial description and created date ➕ 2023-01-01' =>\n    '- [ ] checkbox with initial description and created date ➕ 2023-01-01'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '- [ ] #task checkbox with global filter string and initial description' =>\n    '- [ ] #task checkbox with global filter string and initial description'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('', true)\n    '- [ ] checkbox with initial description ending with task tag at end #task' =>\n    '- [ ] checkbox with initial description ending with task tag at end #task'\n```\n\n----------------------------------------\n\nTITLE: Filtering for TODO or IN_PROGRESS Tasks in JavaScript\nDESCRIPTION: This snippet filters tasks to find those with a status type of either 'TODO' or 'IN_PROGRESS'. It uses the `includes()` method on a string containing the desired status types, separated by commas. This method provides a concise way to check if the task's status type is present in the included string values. The expected input is a task object and the output is a boolean.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.type_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function 'TODO,IN_PROGRESS'.includes(task.status.type)\n```\n\n----------------------------------------\n\nTITLE: Calculating Task Urgency Examples in Markdown\nDESCRIPTION: Examples showing how urgency scores are calculated for different task scenarios based on due dates, priorities, scheduled dates, and start dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Urgency.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nA task that is due today, has a \"medium\" priority, is not scheduled, and has no start date:\nurgency = 8.8 + 3.9 + 0.0 + 0.0 = 12.7\n\nA task that has no due date, a \"high\" priority, is scheduled for yesterday, and started yesterday:\nurgency = 0.0 + 6.0 + 5.0 + 0.0 = 11.0\n\nA task that has no due date, a \"high\" priority, is scheduled for tomorrow, and starts tomorrow:\nurgency = 0.0 + 6.0 + 0.0 - 3.0 = 3.0\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of All Obsidian Property Types - YAML\nDESCRIPTION: A detailed YAML example showcasing the syntax for defining various standard Obsidian property types in the file frontmatter, including checkbox, date, date & time, list, number, text, multiline text, link, link list, aliases, tags, and custom properties. This serves as a reference for property definition.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsample_checkbox_property: true\nsample_date_property: 2024-07-21\nsample_date_and_time_property: 2024-07-21T12:37:00\nsample_list_property:\n  - Sample\n  - List\n  - Value\nsample_number_property: 246\nsample_text_property: Sample Text Value\nsample_text_multiline_property: |\n  Sample\n  Text\n  Value\nsample_link_property: \"[[yaml_all_property_types_populated]]\"\nsample_link_list_property:\n  - \"[[yaml_all_property_types_populated]]\"\n  - \"[[yaml_all_property_types_empty]]\"\naliases:\n  - YAML All Property Types Populated\ntags:\n  - tag-from-file-properties\ncreation date: 2024-05-25T15:17:00\nproject: Secret Project\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks Example in Markdown\nDESCRIPTION: This snippet demonstrates how to create tasks within a Markdown note in Obsidian. The tasks utilize a checklist format, including options for due dates and recurring tasks. This is a basic example for users of the plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [ ] Something non-important, with no date\n- [ ] Remember to do that important thing - with a due date 📅 2022-12-17\n- [ ] Send Kate a birthday card - with a scheduled date 🔁 every January on the 4th ⏳ 2023-01-04\n```\n\n----------------------------------------\n\nTITLE: Advanced Grouping by Due Date Status (Categories with Sort Order) - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Implements an advanced custom grouping that assigns tasks to one of several categories: Invalid date, Overdue, Today, Future, or Undated, each labeled with a hidden sort number (e.g., '%%4%% Undated'). Uses moment.js to determine the appropriate group, ensures deterministic heading order, and is fully customizable for unique business logic or workflows. The multiline syntax uses ternary expressions to handle the grouping logic efficiently.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\\n    const date = task.due.moment; \\\n    return \\\n        (!date)                           ? '%%4%% Undated' :      \\\n        !date.isValid()                   ? '%%0%% Invalid date' : \\\n        date.isBefore(moment(), 'day')    ? '%%1%% Overdue' :      \\\n        date.isSame(moment(), 'day')      ? '%%2%% Today'   :      \\\n        '%%3%% Future';\n```\n\n----------------------------------------\n\nTITLE: Using moment() function in src/ (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `moment()` function within the `src/` directory of the Obsidian Tasks plugin. It accesses the `moment()` function through `window.moment()`, which is provided by Obsidian.  No explicit declaration of `window.moment()` is needed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Code/How do I use Moment in src.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst today = window.moment();\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Relative Path in Obsidian Tasks (JavaScript)\nDESCRIPTION: This snippet groups tasks by their file path after removing the path of the folder containing the query file. It uses JavaScript's `replace()` method on `task.file.path` and includes `query.file.folder` as a parameter. This is useful for showing shortened paths for tasks within the query's folder or subfolders, though it has limitations as noted in the text regarding its implementation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.path_results.approved.txt#_snippet_1\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\ngroup by function task.file.path.replace(query.file.folder, '')\n```\n\n----------------------------------------\n\nTITLE: Grouping by Formatted Happens Date (JavaScript)\nDESCRIPTION: Groups tasks based on their 'happens' date (the earliest of start, scheduled, or due dates), applying a custom date format string \"YYYY-MM-DD dddd\". Tasks without any of these dates are grouped under an empty string header. Requires the task object (`task`) and its `happens` property with a `format` method.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.happens.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Recurring Tasks with Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Filters tasks that are marked as recurring by checking the task's 'isRecurring' boolean property. This filtering can be combined with other Boolean conditions using logical AND (&&) or OR (||) operators for complex queries. The snippet relies on the Obsidian Tasks plugin's task object structure where 'isRecurring' indicates whether a task has a recurrence rule.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isRecurring_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.isRecurring\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by ID in JavaScript\nDESCRIPTION: This snippet shows how to use the 'group by' function to organize tasks by their unique identifiers. It accepts task objects and groups them based on their ID property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dependencies_task.id_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.id\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Task Lists in Markdown\nDESCRIPTION: This snippet demonstrates how to structure nested tasks using standard markdown list syntax combined with checkboxes (`[ ]`). It shows an incomplete parent task, a nested non-task list item, and an incomplete grandchild task, illustrating hierarchical organization within a task list.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_task_listitem_task.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] parent task\n    - child list item\n        - [ ] grandchild task\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Category with Function Abstraction in Obsidian Tasks - JavaScript\nDESCRIPTION: Implements the same broad categorical grouping as previous snippets, but increases readability and maintainability via a local label function and serial if-statements. This structure is easier to customize, as changes to label formatting or order can be made centrally. Assumes task objects have a 'due.moment' property and relies on Moment.js for date comparison.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\\n    const date = task.due.moment; \\\n    const now = moment(); \\\n    const label = (order, name) => `%%${order}%% ==${name}==`; \\\n    if (!date)                      return label(4, 'Undated'); \\\n    if (!date.isValid())            return label(0, 'Invalid date'); \\\n    if (date.isBefore(now, 'day'))  return label(1, 'Overdue'); \\\n    if (date.isSame(now, 'day'))    return label(2, 'Today'); \\\n    return label(3, 'Future');\n```\n\n----------------------------------------\n\nTITLE: Execute Conditional Logic in JavaScript\nDESCRIPTION: Demonstrates a standard `if/else` conditional statement. It checks if the condition `1 === 1` is true and returns the corresponding string (\"yes\"). Shows basic control flow using equality comparison.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/Expression.test.Expression_returns_and_functions.approved.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nif (1 === 1) { return \"yes\"; } else { return \"no\" }\n=> 'yes'\n```\n\n----------------------------------------\n\nTITLE: Finding Problem Dates in Tasks - Tasks\nDESCRIPTION: This code snippet is designed to identify tasks with invalid dates in Obsidian Tasks. It filters tasks based on whether their cancelled, created, done, due, scheduled, or start dates are invalid. Optionally, it excludes template files. The query groups the results by the task's file path, allowing users to easily navigate to and correct tasks with problematic dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Find tasks with invalid data.md#_snippet_1\n\nLANGUAGE: Tasks\nCODE:\n```\n```tasks\n# These instructions need to be all on one line:\n(cancelled date is invalid) OR (created date is invalid) OR (done date is invalid) OR (due date is invalid) OR (scheduled date is invalid) OR (start date is invalid)\n\n# Optionally, uncomment this line and exclude your templates location\n# path does not include _templates\n\ngroup by path\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Task List in Markdown for Obsidian\nDESCRIPTION: This snippet defines a hierarchical task list in Markdown for Obsidian, illustrating nested tasks with different statuses. No programming dependencies; used for task organization within Obsidian notes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_listitem_listitem_task.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- parent list item\n  - child list item\n    - [ ] grandchild task\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Scheduled Date String - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Organizes tasks by the formatted scheduled date using the pattern 'YYYY-MM-DD dddd', presenting weekday-based groupings. If `task.scheduled` is empty, tasks are grouped without any heading. Relies on moment.js and is helpful for prioritizing upcoming scheduled tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.scheduled.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks with Folder Filter and Sorting using Obsidian Tasks DSL\nDESCRIPTION: This code snippet defines a tasks query that filters tasks to only those within the same folder as the current file, sorts the resulting tasks by their path, and dynamically references the current file's name without extension for use as instructions or comments. It is intended to be used within Obsidian's markdown files with the Tasks plugin installed. The snippet requires the Tasks plugin and uses its supported query syntax, leveraging file metadata placeholders for dynamic input.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 1.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks by Folder and Sorting by Path in Obsidian Tasks\nDESCRIPTION: This snippet queries tasks within a specified folder, utilizing the 'folder includes' filter to target the desired folder specified by query.file.folder variable. The results are then sorted by path to organize the tasks. This requires the Obsidian Tasks plugin to be installed and enabled. The output is a list of tasks matching the criteria within the specified folder.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 5000.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nfolder includes {{query.file.folder}}\nsort by path\n```\n```\n\n----------------------------------------\n\nTITLE: Task not blocking example - Mermaid diagram\nDESCRIPTION: This Mermaid diagram illustrates the concept of blocking in task dependencies.  No blocking occurs if either task the dependency, or dependent task is DONE, CANCELLED or NON_TASK. In this case task 3 is marked as done, and does not block task 4.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\nclassDef TASK        stroke-width:3px,font-family:monospace;\n\n4[\"\\- [ ] not blocking  🆔 abcdef\"]:::TASK\n3[\"\\- [x] not blocked&nbsp ⛔ abcdef\"]:::TASK\n3-- depends on --> 4\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Querying Remaining Tests with Obsidian Tasks Plugin - tasks\nDESCRIPTION: This snippet defines a dynamic query block for the Obsidian Tasks plugin, listing all tasks within the current file that remain incomplete and have a description containing '**check**:'. It sorts the tasks by their line numbers and uses the short display format to keep the result compact. Dependencies: Obsidian with the Tasks plugin enabled; the query syntax relies on the file's name, task metadata, and uses Obsidian's advanced task query syntax. Key parameters include status (not done), path filter, description filter, sorting mode, and display style. Expected output is a rendered block listing relevant tasks for quick review; changes in file naming or tag usage may cause the query to miss intended items.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Smoke Testing the Tasks Plugin.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\npath includes Smoke Testing the Tasks Plugin\ndescription includes **check**:\nsort by function task.lineNumber\n\nshort display\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tasks with Obsidian Tasks Syntax\nDESCRIPTION: This snippet illustrates how to define a parent task and a child task in Obsidian Tasks using Markdown syntax. Indentation under the parent task signifies the child relationship. Both tasks are incomplete (denoted by `[ ]`) and tagged with `#task` for recognition by the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_1parent1child.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task parent\n    - [ ] #task child\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks with invalid due dates in JavaScript\nDESCRIPTION: This snippet filters tasks that have a due date, but the date is invalid according to Moment.js. It checks if the task's due date is not a valid date, returning true if it is invalid and false otherwise. This allows users to identify tasks with incorrectly formatted or non-existent due dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function \\\n    const date = task.due.moment; \\\n    return date ? !date.isValid() : false;\n```\n\n----------------------------------------\n\nTITLE: Querying and Grouping Tasks with the Tasks Plugin in Tasks Code Block\nDESCRIPTION: This code snippet demonstrates how to use the Tasks plugin's query syntax in a tasks code block to filter and group tasks within Obsidian. It queries for tasks in files where the path includes the given phrase, then applies grouping by backlink, filename, and heading. No external dependencies are required; the snippet is meant to be placed in a markdown file in an Obsidian vault with the Tasks plugin installed. The expected output is an organized list of tasks displayed according to the defined groupings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Markdown in group _non-italic filename_.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Markdown in group _non-italic filename_\n\ngroup by backlink\ngroup by filename\ngroup by heading\n```\n\n----------------------------------------\n\nTITLE: Listing Available Placeholder Variables - Text\nDESCRIPTION: Lists all supported placeholder variables for use within Tasks queries. Users can insert these strings in various filters to access current file attributes. There are no dependencies, and the output is a list of surrogate fields usable in Tasks queries.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to get tasks in current file.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n{{query.file.path}}\n{{query.file.pathWithoutExtension}}\n{{query.file.root}}\n{{query.file.folder}}\n{{query.file.filename}}\n{{query.file.filenameWithoutExtension}}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Simple Formatted Date - Obsidian Tasks JavaScript\nDESCRIPTION: Groups tasks by due date formatted as YYYY-MM-DD, or omits a heading if there is no due date. Uses the formatAsDate() function of the Tasks plugin for consistent date formatting. Designed for users needing concise date groupings, and compatible only with tasks containing a due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_docs.approved.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.formatAsDate()\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by File Name and Filename with Headings - JavaScript\nDESCRIPTION: Functions demonstrating grouping tasks by filename without file extension, either simply returning the filename string or appending heading information conditionally if present. These groups do not create links to files or headings but facilitate grouping by file-related metadata and in one case, show hierarchical context by appending heading information with a delimiter. Requires \"task.file.filenameWithoutExtension\" and \"task.hasHeading\" properties, as well as \"task.heading\" string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.filename\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.filenameWithoutExtension + (task.hasHeading ? (' > ' + task.heading) : '')\n```\n\n----------------------------------------\n\nTITLE: Filter by Start Date and Description (NOT)\nDESCRIPTION: This filter uses 'HAS START DATE' and filters out descriptions that include 'SOME', combining 'AND' and 'NOT'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nAND (All of):\n      HAS START DATE\n      NOT:\n        DESCRIPTION INCLUDES SOME\n```\n\n----------------------------------------\n\nTITLE: Custom Grouping by Task Status Symbol (JavaScript)\nDESCRIPTION: Groups tasks by their status symbols using `group by function`. The example prepends 'Status symbol: ' to the group heading and replaces space characters in the symbol with the word 'space' for clarity using `task.status.symbol.replace(\" \", \"space\")`. Requires Tasks plugin version 4.0.0 or later.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function \"Status symbol: \" + task.status.symbol.replace(\" \", \"space\")\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Tasks in Markdown\nDESCRIPTION: This snippet represents a task list using Markdown checkbox syntax, where tasks can be marked as completed or pending. It employs indentation to indicate parent-child relationships between tasks and uses hashtags as tags for categorization. No external dependencies are required; the snippet expects input as plain text and outputs a hierarchical checklist suitable for task tracking applications that support Markdown.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_1parent2children1sibling.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task parent\n    - [ ] #task child 1\n    - [ ] #task child 2\n- [ ] #task sibling\n```\n\n----------------------------------------\n\nTITLE: Property Types for Query File Defaults\nDESCRIPTION: This JSON provides example property types that can be used within the Obsidian Tasks plugin, and shows how those properties are recognized. The types dictate the available UI elements within Obsidian's properties view.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Query File Defaults.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"TQ_explain\": \"checkbox\",\n    \"TQ_extra_instructions\": \"text\",\n    \"TQ_short_mode\": \"checkbox\",\n    \"TQ_show_backlink\": \"checkbox\",\n    \"TQ_show_cancelled_date\": \"checkbox\",\n    \"TQ_show_created_date\": \"checkbox\",\n    \"TQ_show_depends_on\": \"checkbox\",\n    \"TQ_show_done_date\": \"checkbox\",\n    \"TQ_show_due_date\": \"checkbox\",\n    \"TQ_show_edit_button\": \"checkbox\",\n    \"TQ_show_id\": \"checkbox\",\n    \"TQ_show_on_completion\": \"checkbox\",\n    \"TQ_show_postpone_button\": \"checkbox\",\n    \"TQ_show_priority\": \"checkbox\",\n    \"TQ_show_recurrence_rule\": \"checkbox\",\n    \"TQ_show_scheduled_date\": \"checkbox\",\n    \"TQ_show_start_date\": \"checkbox\",\n    \"TQ_show_tags\": \"checkbox\",\n    \"TQ_show_task_count\": \"checkbox\",\n    \"TQ_show_tree\": \"checkbox\",\n    \"TQ_show_urgency\": \"checkbox\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Month and Week Number in Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Applies the function task.due.format with pattern \"YYYY[%%]-MM[%%] MMM [- Week] WW\" to group tasks by both month and ISO week number, including hidden values for accurate chronological ordering. Requires the Tasks plugin and properly formatted due fields; output organizes tasks under combined month-week headings, with sorting enhancements.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_results.approved.txt#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"YYYY[%%]-MM[%%] MMM [- Week] WW\")\n// Output:\n// 2023%%-05%% May - Week 22\n// 2023%%-06%% Jun - Week 22\n// Invalid date\n```\n\n----------------------------------------\n\nTITLE: No Global Filter in Obsidian Tasks\nDESCRIPTION: This markdown snippet illustrates the behavior of Obsidian Tasks without a global filter applied. Without a filter, all standard checklist items are considered tasks. This implies that all items marked with `[ ]` will be tracked.  There are no specific tag or string requirements.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Global Filter.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] take out the trash\n```\n\n----------------------------------------\n\nTITLE: Grouping by Modified Description (JavaScript)\nDESCRIPTION: Groups tasks based on their description after using JavaScript's `replace()` string method to highlight the word \"short\" by wrapping it in \"==short==\". This primarily demonstrates string manipulation for group headings. Requires the task object (`task`) and its `description` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description.replace('short', '==short==')\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by default urgency score (JavaScript)\nDESCRIPTION: This code snippet filters tasks with the default urgency score of 1.95. To avoid floating point comparison issues, both values are rounded to two decimal places using `toFixed(2)` before comparison.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency.toFixed(2) === 1.95.toFixed(2)\n```\n\n----------------------------------------\n\nTITLE: Tasks Plugin Query: Tasks Due Today\nDESCRIPTION: This code snippet demonstrates a Tasks query to filter for tasks that are not done and are due on the current date. It employs the `date:YYYY-MM-DD` template to dynamically determine the current date. This is designed to assist in showcasing tasks that need to be tackled immediately.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Daily Agenda.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\nnot done\ndue on {{date:YYYY-MM-DD}}\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering with AND NOT (Obsidian Tasks, text)\nDESCRIPTION: Shows how to construct a filter that requires a task to have a start date but the description must not include a specific term. Uses the AND NOT operator. Requires only the Obsidian Tasks plugin. Relevant parameters are in the filter expressions; matching tasks are output.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n(has start date) AND NOT (description includes some)\n```\n\n----------------------------------------\n\nTITLE: Calling task.due.format() Method with Format String in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `format(formatString)` method on the `task.due` object in Obsidian Tasks. This method formats the due date using a specified Moment.js format string (e.g., 'dddd' for the day of the week). It returns an empty string if the task has no due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.format('dddd')\n```\n\n----------------------------------------\n\nTITLE: Dataview Format for Dependencies in Obsidian Tasks\nDESCRIPTION: Examples of how to use dataview format to create task dependencies using unique IDs in Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Dataview Format.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task do this first  [id:: dcf64c]\n- [ ] #task do this after first and some other task  [dependsOn:: dcf64c,0h17ye]\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by tags without heading for no tags\nDESCRIPTION: This snippet groups tasks by their tags, creating headings for each tag. Tasks without tags are not assigned a heading, effectively ignoring untagged tasks in the grouping. It uses the task.tags attribute and generates headings based on each tag, supporting custom formatting and ignoring tasks without tags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags\nLike \"group by tags\" except that tasks with no tags have no heading instead of \"(No tags)\".\n=>\n#context/home\n#context/work\n#multiple-tags1\n#multiple-tags2\n#project/project1\n#tag\n#tag/subtag\n#tag/subtag/sub-sub-tag\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Creation Date - JavaScript\nDESCRIPTION: This snippet groups tasks in Obsidian Tasks based on the creation date, formatted as 'YYYY-MM-DD dddd'. It utilizes the `task.created.format()` method to achieve the specified date format.  If `task.created` is null or undefined, the function effectively returns an empty string, which then serves as the group identifier for tasks without a creation date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.created_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.created.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Tasks Query with Line Count Limit in Obsidian Tasks Plugin\nDESCRIPTION: A tasks code block that queries tasks from the current folder, sorts them by path, and limits the results to 150 lines. It dynamically uses the filename as an instruction and includes the explain tag for additional context.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 150.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Folder and Parent Folder - JavaScript\nDESCRIPTION: Functions for grouping tasks by their containing folders. One returns the full folder path (always ending with a slash) without escaping markdown characters. Another extracts the immediate parent folder name by trimming the trailing slash, splitting the path, and reappending a slash. This approach facilitates grouping tasks by the nearest folder level independently of deeper paths. Requires tasks to have a \"file\" property with a \"folder\" string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.folder\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.folder.slice(0, -1).split('/').pop() + '/'\n```\n\n----------------------------------------\n\nTITLE: Grouping by Formatted Cancelled Date (JavaScript)\nDESCRIPTION: Groups tasks based on their cancellation date, applying a custom date format string \"YYYY-MM-DD dddd\". If a task has no cancelled date, it will be grouped under an empty string header. Requires the task object (`task`) and its `cancelled` property with a `format` method.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.cancelled.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Toggle Task Completion - TypeScript\nDESCRIPTION: This TypeScript example shows how to use the `executeToggleTaskDoneCommand` method from the Tasks API. It takes a Markdown string representing a task line and the path to the file it's in, and programmatically toggles its completion status according to user preferences, handling recurrence. It returns the updated Markdown string(s) for the task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Tasks Api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasksApi = this.app.plugins.plugins['obsidian-tasks-plugin'].apiV1;\nconst sourceFile: TFile = file;\nconst taskLine = '- [ ] This is a task 📅 2024-04-24';\n\nconst result = tasksApi.executeToggleTaskDoneCommand(taskLine, sourceFile.path);\n\n// Do whatever you want with the returned value.\n// It's just a string containing the Markdown for the toggled task.\nconsole.log(result); // \"- [x] This is a task 📅 2024-04-24 ✅ 2024-04-23\"\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks in root directory using JavaScript\nDESCRIPTION: This snippet filters tasks that are located directly in the root directory of the Obsidian vault by matching the file root path to '/'. It is case-sensitive, requiring exact capitalization. The snippet assumes a function or context where `task.file.root` is accessible and comparable.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.root_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.root === '/'\n```\n\n----------------------------------------\n\nTITLE: Querying Obsidian Tasks with Dataview Fields using tasks plugin\nDESCRIPTION: Shows an example of a `tasks` query block used within Obsidian to filter and display tasks based on their metadata. The query filters tasks by file path, groups them by their heading in the document, and sorts the results by task description, demonstrating how Dataview-enhanced tasks can be queried.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Formats/Dataview Format.md#_snippet_6\n\nLANGUAGE: tasks\nCODE:\n```\npath regex matches /^Formats\\/Dataview Format/\ngroup by heading\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Example Query Block: Daily Notes Tasks Excluding Today\nDESCRIPTION: A complex Obsidian Tasks query example within a fenced code block. It retrieves incomplete tasks that either have the '#DailyNote' tag OR are in the 'daily/Notes/Folder/' path, but specifically excludes tasks from the file path containing '2022-07-11' (representing today's note).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n```tasks\nnot done\n(tags include #DailyNote) OR \\\n( (path includes daily/Notes/Folder/) AND \\\n  (path does not include 2022-07-11) \\\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Obsidian Task Priorities using Emojis (Markdown)\nDESCRIPTION: This Markdown snippet showcases how to assign various priority levels to tasks in Obsidian using the Tasks plugin convention. Each line represents a task with a distinct priority: Lowest (⏬), Low (🔽), Normal (no emoji), Medium (🔼), High (⏫), and Highest (🔺). These emojis are recognized by the Obsidian Tasks plugin to sort and filter tasks based on priority.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Priorities_tasksPluginEmoji-snippet.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Lowest priority ⏬\n- [ ] #task Low priority 🔽\n- [ ] #task Normal priority\n- [ ] #task Medium priority 🔼\n- [ ] #task High priority ⏫\n- [ ] #task Highest priority 🔺\n```\n\n----------------------------------------\n\nTITLE: Tracking Created Dates for Tasks in Obsidian Tasks Plugin with Markdown\nDESCRIPTION: Depicts how to mark the creation date of a task, which must be enabled in plugin settings. This is done by appending the heavy plus emoji (➕) and a 'YYYY-MM-DD' date to the task line. The created date helps track when the task was added and is accessible via the 'task.created' property in queries.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Dates.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] take out the trash ➕ 2021-04-09\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Status Type and Urgency in Obsidian Tasks\nDESCRIPTION: A code example showing how to sort tasks by status type first and then by urgency to avoid completed tasks appearing at the top of the list due to their urgency score.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Urgency.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```tasks\nsort by status.type\nsort by urgency\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Tasks with Fixed Day of Month\nDESCRIPTION: This code defines a recurring task using the Obsidian Tasks plugin syntax, set to repeat every month on the 25th.  The tasks include a due date, and some examples show completed tasks with a completion date.  The purpose is to verify the correct recurrence calculation when the day is always valid.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Recurrence handling invalid dates.md#_snippet_0\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task do stuff 🔁 every month on the 25th 📅 2022-04-25\n- [x] #task do stuff 🔁 every month on the 25th 📅 2022-03-25 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 25th 📅 2022-02-25 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 25th 📅 2022-01-25 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 25th 📅 2021-12-25 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 25th 📅 2021-11-25 ✅ 2022-10-03\n```\n\n----------------------------------------\n\nTITLE: Calling task.due.formatAsDateAndTime() Method with Fallback in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `formatAsDateAndTime(fallback)` method on the `task.due` object in Obsidian Tasks. This method formats the due date and time into a `YYYY-MM-DD HH:mm` string representation. It returns the provided fallback string (e.g., 'no date') if the task has no due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.formatAsDateAndTime('no date')\n```\n\n----------------------------------------\n\nTITLE: Sorting by Heading in Tasks\nDESCRIPTION: This snippet enables sorting tasks based on the preceding heading, using `task.heading`. Tasks with no heading have `task.heading` values of `null`, and sort before tasks with headings. The input is the heading preceding the task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.heading\n```\n\n----------------------------------------\n\nTITLE: Sorting tasks by done date's day of the week in JavaScript\nDESCRIPTION: This snippet sorts tasks based on the day of the week from their done date, formatted as 'dddd' (full day name). It compares these formatted strings to arrange tasks in alphabetical order of the weekdays. Dependencies include the task object with a 'done' date property and a date formatting function.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.done_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function task.done.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Setting Task Priorities using Dataview in Markdown\nDESCRIPTION: Explains how to assign priority levels to Obsidian tasks using the inline Dataview field `[priority:: level]`. Shows examples for the supported priority levels: lowest, low, normal (default), medium, high, and highest, indicating how they appear in task lists.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Formats/Dataview Format.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Lowest priority  [priority:: lowest]\n- [ ] #task Low priority  [priority:: low]\n- [ ] #task Normal priority\n- [ ] #task Medium priority  [priority:: medium]\n- [ ] #task High priority  [priority:: high]\n- [ ] #task Highest priority  [priority:: highest]\n```\n\n----------------------------------------\n\nTITLE: Running all tests\nDESCRIPTION: This command executes all the automated tests in the project. It is useful for verifying that the build environment is set up correctly and that all tests pass.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Introduction to Running the tests.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter with Multiple Aliases in Obsidian\nDESCRIPTION: This snippet shows how to define multiple aliases in YAML frontmatter for an Obsidian document. Aliases allow the same note to be referenced by different names in the Obsidian vault.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_2_aliases.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n  - YAML Alias 1\n  - YAML Alias 2\n---\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Year, Month, and Week Number Using JavaScript\nDESCRIPTION: This snippet formats the task's due date to group tasks by displaying the year, month, and week number. It uses a date format string with escaped percentage signs and includes inline HTML <mark> tags styled via CSS variables to visually de-emphasize the fixed text '- Week'. The key parameter is the task's 'due' date formatted as \"YYYY %%MM%% MMMM [<mark style='background: var(--color-base-00); color: var(--color-base-40)'>- Week</mark>] WW\". The output is a grouping label combining the year, month, and week, with styled components for clarity.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.special_cases_formatting_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.format(\"YYYY %%MM%% MMMM [<mark style='background: var(--color-base-00); color: var(--color-base-40)'>- Week</mark>] WW\", \"Undated\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Happens Date using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to filter tasks based on their happens date. It uses the `task.happens.format('dddd')` function to check if the happens date falls on a specific day of the week (Friday in this example).  It is intended for use within the Obsidian Tasks plugin's custom filtering capabilities. The 'happens' date includes the start, scheduled, or due date.  The day of the week may need to be localized.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.happens.format('dddd') === 'Friday'\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Urgency Inequality with Rounding in JavaScript\nDESCRIPTION: This snippet filters tasks to find those that do NOT have the default urgency score of 1.95. Similar to the equality example, `.toFixed(2)` is used on both sides of the inequality comparison (`!==`) to handle potential floating-point precision issues and ensure accurate filtering. The code aims to filter out any tasks having an urgency value other than the default value.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_docs.approved.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency.toFixed(2) !== 1.95.toFixed(2)\n```\n\n----------------------------------------\n\nTITLE: Filtering Not Completed Tasks - Dataview - dataview\nDESCRIPTION: Returns all tasks from the parent-child task file that are not marked as completed. Depends on the presence of the boolean 'completed' attribute and Dataview. Outputs a list of uncompleted tasks; input structure is identical to the completed task filter.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_3\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nWHERE !completed\n```\n\n----------------------------------------\n\nTITLE: Status Transition Table for Standard Task Progress\nDESCRIPTION: A table listing statuses: Todo, In Progress, and Done, with their symbols, next statuses, type classification, and whether they require custom styling to guide users on status workflows.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Example Statuses.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name | Status Type | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `space` | `/` | Todo | `TODO` | No |\n| `/` | `x` | In Progress | `IN_PROGRESS` | Yes |\n| `x` | `space` | Done | `DONE` | No |\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Root Folder - JavaScript\nDESCRIPTION: A function to group tasks by the root folder of the file containing them. It returns the top-level directory as a string without escaping markdown characters. This enables grouping tasks by vault top-level folders. Requires the task object to have a \"file\" property with a \"root\" string indicating the root folder path (usually \"/\" for files in the vault root).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.root\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Day of Week in Obsidian Tasks\nDESCRIPTION: This custom filter finds tasks that were completed on Thursdays by checking if the formatted day name of the completion date equals 'Thursday'. For non-English systems, the day name should be provided in the local language.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.done_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntask.done.format('dddd') === 'Thursday'\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by folder path and sub-folders in JavaScript\nDESCRIPTION: This JavaScript snippet filters tasks that are located in files within a specific folder and its sub-folders. It uses the `.includes()` method to check if the folder path contains the specified target folder.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder.includes(\"Work/Projects/\")\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Day of Week in Obsidian Tasks\nDESCRIPTION: Sorts tasks based on the day of the week derived from the 'happens' date field. This uses a custom query syntax interpreted by the Obsidian Tasks plugin, employing a function call to format the date. The sorting is performed alphabetically by the full day name (e.g., 'Monday', 'Tuesday').\n\nDependencies: Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.happens_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.happens.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Start Date with Tasks query\nDESCRIPTION: This Tasks query demonstrates how to find tasks that either start before tomorrow or do not have a start date at all. It is intended to filter out tasks that cannot yet be worked on, by excluding those with a future start date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n# Find tasks which:\n#    EITHER start before today or earlier\n#    OR     have no start date:\nstarts before tomorrow\n```\n\n----------------------------------------\n\nTITLE: Dataview Format for Priorities in Obsidian Tasks\nDESCRIPTION: Examples of how to use dataview format to set different priority levels (lowest, low, medium, high, highest) for tasks in Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Dataview Format.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Lowest priority  [priority:: lowest]\n- [ ] #task Low priority  [priority:: low]\n- [ ] #task Normal priority\n- [ ] #task Medium priority  [priority:: medium]\n- [ ] #task High priority  [priority:: high]\n- [ ] #task Highest priority  [priority:: highest]\n```\n\n----------------------------------------\n\nTITLE: Finding Tasks with Invalid Dates\nDESCRIPTION: This Tasks query demonstrates how to find tasks with any invalid dates (cancelled, created, done, due, scheduled, or start). It is typically used to locate and fix erroneous date entries in tasks. The query groups the results by path for easier identification within the Obsidian vault.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n# These instructions need to be all on one line:\n(cancelled date is invalid) OR (created date is invalid) OR (done date is invalid) OR (due date is invalid) OR (scheduled date is invalid) OR (start date is invalid)\n\n# Optionally, uncomment this line and exclude your templates location\n# path does not include _templates\n\ngroup by path\n```\n\n----------------------------------------\n\nTITLE: Explained Output for Query File Defaults - Obsidian Tasks - text\nDESCRIPTION: Displays the detailed output produced by 'explain' when query file defaults are active. The explanation lists injected properties from file frontmatter (such as folder filter and display options) and reports their effect. Also describes the final query as executed. Input is a file with query frontmatter and an 'explain'-only query block; output is explanation of all property-driven instructions and the default query matching behavior.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nExplanation of the Query File Defaults (from properties/frontmatter in the query's file):\n\n  folder includes {{query.file.folder}} =>\n  folder includes Test Data/\n\n  not done\n\n  short mode\n\n  show tree\n\nExplanation of this Tasks code block query:\n\n  No filters supplied. All tasks will match the query.\n```\n\n----------------------------------------\n\nTITLE: Accessing task.due.fromNow.name Property in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `name` property on the `fromNow` object within `task.due` in Obsidian Tasks. This property provides a human-readable string indicating the time difference from the current date (e.g., 'in 22 days'). It returns an empty string if the date is null.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.fromNow.name\n```\n\n----------------------------------------\n\nTITLE: Dataview Format for OnCompletion Behavior in Obsidian Tasks\nDESCRIPTION: Examples of how to use dataview format to control what happens to tasks when completed (keep or delete) in Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Dataview Format.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Keep this task when done\n- [ ] #task Keep this task when done too  [onCompletion:: keep]\n- [ ] #task Remove this task when done  [onCompletion:: delete]\n- [ ] #task Remove completed instance of this recurring task when done  [repeat:: every day]  [onCompletion:: delete]\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks by Filename and Displaying Tree Structure in Dataview\nDESCRIPTION: This Dataview code snippet queries for tasks within the current file (specified by `{{query.file.filename}}`). It then uses the `show tree` option to render the tasks in a hierarchical, tree-like structure reflecting the parent-child relationships. The query relies on the Tasks and Dataview plugins to process tasks and display the data.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_non_task_child.md#_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\n```tasks\nfilename includes {{query.file.filename}}\nshow tree\n```\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by File Path (with extension)\nDESCRIPTION: This demonstrates sorting tasks based on their file path, including the file extension. The sorting function is `task.file.path`.  The output lists tasks along with their file paths and headings, showcasing the order resulting from the file path sort, effectively organizing the tasks based on the full path of the file they reside in.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.path_results.approved.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsort by function task.file.path\nLike 'Sort by path' but includes the file extension.\n=>\n- [ ] xyz in '' in heading 'heading'\n- [ ] xyz in 'a_b_c.md' in heading 'a_b_c'\n- [ ] xyz in 'a/b.md' in heading 'null'\n- [ ] xyz in 'a/b/_c_.md' in heading 'null'\n- [ ] xyz in 'a/b/_c_.md' in heading 'heading _italic text_'\n- [ ] xyz in 'a/b/c.md' in heading 'null'\n- [ ] xyz in 'a/b/c.md' in heading 'c'\n- [ ] xyz in 'a/d/c.md' in heading 'heading'\n- [ ] xyz in 'e/d/c.md' in heading 'heading'\n```\n\n----------------------------------------\n\nTITLE: Getting Filename Without Extension (JavaScript)\nDESCRIPTION: Gets the filename without the file extension. Useful for operations that need the base name of the file, ignoring the type.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/QueryProperties.test.query_file_properties.approved.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.filenameWithoutExtension\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks Due in Week\nDESCRIPTION: This JavaScript snippet filters tasks that are due within the week containing May 31, 2023. It uses the `isSame` method from moment.js to compare the task's due date with the specified date, using 'week' precision. The filter returns true if the task's due date falls within the same week as May 31, 2023.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSame(moment('2023-05-31'), 'week') || false\n```\n\n----------------------------------------\n\nTITLE: Finding tasks under specific headings in Obsidian Tasks\nDESCRIPTION: Shows how to query for tasks based on the heading they appear under. This example finds all completed tasks that are under any heading containing the word 'tasks'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\ndone\nheading includes tasks\n```\n\n----------------------------------------\n\nTITLE: Scheduling Tasks in Obsidian Tasks Plugin With Scheduled Dates in Markdown\nDESCRIPTION: Shows how to schedule a task by adding the hourglass emoji (⏳) and a date to indicate when the task is planned to be worked on. This scheduled date is distinct from the due date and helps plan the workflow. The date must be in 'YYYY-MM-DD' format and will be exposed as the 'task.scheduled' property in query blocks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Dates.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] take out the trash ⏳ 2021-04-09\n```\n\n----------------------------------------\n\nTITLE: Result of Incorrect 'delete' Action on Nested Tasks (Plain Text)\nDESCRIPTION: Shows the problematic result after completing a parent task with nested items that had the 'delete' action applied. The indentation remains after the parent task text is removed, turning the former nested list items into an unintended code block, rather than preserving them as list items.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/On Completion.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n    - [ ] I am a nested task\n    - I am a nested list item.\n```\n\n----------------------------------------\n\nTITLE: Adding Data with Emojis\nDESCRIPTION: Provides an example of the markdown syntax for adding data (like priorities or due dates) to tasks using emojis. Relies on the Obsidian Tasks plugin. Shows how to create tasks and incorporate additional features that the Tasks plugin offers.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Getting Started.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Filtering Completed Tasks - Dataview - dataview\nDESCRIPTION: Queries only tasks that are marked as completed from the parent-child tasks file. Requires that tasks have a 'completed' attribute, and relies on the Dataview plugin. Outputs tasks where the completed property is true; input is the standard task data structure from the specified file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nWHERE completed\n```\n\n----------------------------------------\n\nTITLE: Custom Grouping by Task ID (JavaScript)\nDESCRIPTION: Groups tasks by their unique Task ID using `group by function task.id`. This is useful for separating specific tasks if they have IDs assigned via the dependency system. Requires Tasks plugin version 6.1.0 or later.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.id\n```\n\n----------------------------------------\n\nTITLE: Multiple Tag Filters with Boolean OR\nDESCRIPTION: Example of combining multiple tag filters with OR operator. Shows how to search for tasks containing any of several specified tags, with varied spacing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_61\n\nLANGUAGE: text\nCODE:\n```\n'(description includes #context/location1) OR (description includes #context/location2 ) OR (  description includes #context/location3 ) OR   (  description includes #context/location4 )'\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: Complex Boolean Expression\nDESCRIPTION: This example presents a complex boolean expression that combines AND, OR, NOT and nested structures.  It successfully interprets the operations demonstrating the capability of parsing nested and compound boolean constructs.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n'( (description includes 1) AND (description includes 2) AND (description includes 3) ) OR ( (description includes 5) AND (description includes 6) AND (description includes 7) ) AND NOT (description includes 7)'\n=>\nResult:\n  ( (description includes 1) AND (description includes 2) AND (description includes 3) ) OR ( (description includes 5) AND (description includes 6) AND (description includes 7) ) AND NOT (description includes 7) =>\n    OR (At least one of):\n      AND (All of):\n        description includes 1\n        description includes 2\n        description includes 3\n      AND (All of):\n        AND (All of):\n          description includes 5\n          description includes 6\n          description includes 7\n        NOT:\n          description includes 7\n```\n\n----------------------------------------\n\nTITLE: Define and Invoke Function in JavaScript\nDESCRIPTION: Defines a function `f` that takes one argument (`value`) and returns \"yes\" or \"no\" based on its value. The snippet then calls this function with `f(1)` and returns the result. Illustrates function definition, parameter passing, and invocation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/Expression.test.Expression_returns_and_functions.approved.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfunction f(value) {                 \\\n    if (value === 1 ) {             \\\n        return \"yes\";               \\\n    } else {                        \\\n        return \"no\";                \\\n    }                               \\\n}                                   \\\nreturn f(1);\n=> 'yes'\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Day of the Week (Date Order; Sunday Start) in Obsidian Tasks - JavaScript\nDESCRIPTION: Groups tasks by the day of the week corresponding to their due date, sorting days in natural date order starting from Sunday (Sunday, Monday, etc.). Requires the Obsidian Tasks plugin with JavaScript grouping support, and the use of Moment.js under the hood. Tasks must have a valid 'due' property for correct processing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"[%%]d[%%]dddd\")\n```\n\n----------------------------------------\n\nTITLE: Obsidian Daily Notes Plugin Filename Format Example (Configuration List)\nDESCRIPTION: Shows a sample list of daily note formats with folders and date formats as might be configured in Obsidian's Daily Notes plugin. It guides users on extracting the relevant portion of the pattern to use as the additional filename date format for Tasks integration.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Use Filename as Default Date.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nYYYY/MM/dddd, MMMM Do YYYY\n```\n\n----------------------------------------\n\nTITLE: Querying Non-Blocked Tasks (Not Done)\nDESCRIPTION: This Obsidian Tasks query filters for tasks that are not blocked by other tasks and are not yet done. It restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_7\n\nLANGUAGE: tasks\nCODE:\n```\nis not blocked\nnot done\n\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Grouping by Priority Name (JavaScript)\nDESCRIPTION: Groups tasks based on their priority name (e.g., 'Highest priority', 'Normal priority'). The resulting groups are sorted alphabetically by name. Requires the task object (`task`) and its `priorityName` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.priorityName\n```\n\n----------------------------------------\n\nTITLE: Combining Tag and Path Filters with OR (Obsidian Tasks, markdown/text)\nDESCRIPTION: Shows a simple tasks code block where the user finds tasks not done and either in files with 'inbox' in the path or with the tag #inbox in their description. Requires the Obsidian Tasks plugin. Filters are joined via an OR clause, displaying tasks matching at least one sub-condition. No input beyond the task queries is necessary; output is the list of filtered tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\nnot done\n(path includes inbox) OR (description includes #inbox)\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering by Dates in Obsidian Tasks Plugin Syntax\nDESCRIPTION: Commands used within a `tasks` block to filter tasks based on specific date fields (done, created) using various date comparisons or presence/validity checks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_6\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ndone (on, before, after, on or before, on or after) <date>\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ndone (in, before, after, in or before, in or after) ...\n... YYYY-MM-DD YYYY-MM-DD\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ndone (in, before, after, in or before, in or after) ...\n... (last, this, next) (week, month, quarter, year)\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ndone (in, before, after, in or before, in or after) ...\n... (YYYY-Www,YYYY-mm, YYYY-Qq, YYYY)\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nhas done date\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nno done date\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ndone date is invalid\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ncreated (on, before, after, on or before, on or after) <date>\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ncreated (in, before, after, in or before, in or after) ...\n... YYYY-MM-DD YYYY-MM-DD\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ncreated (in, before, after, in or before, in or after) ...\n... (last, this, next) (week, month, quarter, year)\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ncreated (in, before, after, in or before, in or after) ...\n... (YYYY-Www,YYYY-mm, YYYY-Qq, YYYY)\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nhas created date\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nno created date\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ncreated date is invalid\n```\n\n----------------------------------------\n\nTITLE: Formatting Custom Group Headings in Obsidian Tasks\nDESCRIPTION: This snippet demonstrates how to format custom group headings using the Obsidian Tasks plugin. It groups tasks based on their due dates, formatting them to show the year, month, week, and day of the week. It utilizes the 'group by function' feature and formatting options within the Tasks plugin to customize the appearance of the headings, including using HTML tags for visual styling.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/How To/Use formatting in custom group headings.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nlimit groups 4\n\nnot done\n\n# First group level:\n# Show Year then Month, and then week number.\n# Draw the fixed text paler, to de-emphasize it.\ngroup by function task.due.format(\"YYYY %%MM%% MMMM [<mark style='background: var(--color-base-00); color: var(--color-base-40)'>- Week</mark>] WW\", \"Undated\")\n\n# Second group level:\n# Show the day of the week, then the date in paler text.\ngroup by function task.due.format(\"[%%]YYYY-MM-DD[%%]dddd [<mark style='background: var(--color-base-00); color: var(--color-base-40);'>](YYYY-MM-DD)[</mark>]\")\nshort mode\n```\n```\n\n----------------------------------------\n\nTITLE: Using logical operators to combine task filters in Obsidian Tasks\nDESCRIPTION: Demonstrates using AND/OR logical operators to create complex queries. This example finds tasks due in the next two weeks that either have the #inbox tag or are located in an Inbox note.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\n(due after yesterday) AND (due before in two weeks)\n(tags include #inbox) OR (path includes Inbox)\n```\n\n----------------------------------------\n\nTITLE: Grouping by Urgency Rounded to Three Decimal Places with JavaScript in Obsidian Tasks\nDESCRIPTION: This snippet demonstrates how to group tasks by urgency, rounding the urgency value to three decimal places using the task.urgency.toFixed(3) method. It improves upon the built-in 'group by urgency' functionality by displaying greater precision for urgency values and produces sorted urgency groups like -1.800, 0.000, and so on. The grouping function requires that each task has an 'urgency' property; outputs are urgency group labels as three-decimal-place strings. No additional external dependencies are required; the environment must support JavaScript with task objects conforming to the expected interface.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.urgency_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.urgency.toFixed(3)\n```\n\n----------------------------------------\n\nTITLE: Defining File Tags as a List Property - YAML\nDESCRIPTION: Shows how to define multiple tags under the `tags` property in the file's YAML frontmatter as a list. This is a standard way to associate multiple tags with a file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntags:\n  - project/project-1\n---\n```\n\n----------------------------------------\n\nTITLE: Grouping by tags, listed once per task\nDESCRIPTION: Groups tasks by tag values from the `tags` frontmatter property, but lists tasks with multiple tags only once. Tags are sorted and joined into a comma-separated string. Requires Obsidian Tasks plugin and files containing tasks with a `tags` property (array of strings) in their frontmatter.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/How To/Access properties in frontmatter.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes Test Data\ngroup by function task.file.property('tags').sort().join(', ')\n\nlimit groups 5\n```\n\n----------------------------------------\n\nTITLE: Grouping Not Fully Completed Tasks by Subpath - Dataview - dataview\nDESCRIPTION: Lists tasks not marked as fully completed and groups them by the section's subpath for clarity on partially done items. Requires 'fullyCompleted' attribute and the Dataview plugin. Outputs grouped lists of outstanding or partially done tasks by note section.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_10\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nWHERE !fullyCompleted\nGROUP BY meta(section).subpath\n```\n\n----------------------------------------\n\nTITLE: Custom Grouping by Task Dependencies (Depends On) (JavaScript)\nDESCRIPTION: Groups tasks based on the IDs of the tasks they depend on, accessed via `task.dependsOn` within a `group by function`. If a task depends on multiple other tasks, it will be listed under each dependency's group. Requires Tasks plugin version 6.1.0 or later.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.dependsOn\n```\n\n----------------------------------------\n\nTITLE: Sample Tasks with Custom Statuses\nDESCRIPTION: These are example tasks demonstrating custom statuses that will be styled with a CSS snippet. They showcase the default appearance before any custom styling is applied, using characters like '!', 'D', and 'X' within the task status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Style custom statuses.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [!] #task Do important stuff\n- [D] #task Do important stuff\n- [X] #task Do important stuff ✅ 2023-01-09\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Urgency with Conditional Decimal Precision in JavaScript\nDESCRIPTION: This snippet groups tasks by their urgency with a custom function that formats non-integer urgency values to five decimal places and integer values to zero decimals. This approach addresses sorting issues caused by inconsistent decimal lengths in group names, ensuring stable and reliable group ordering by returning urgency as a formatted string. The task object is expected to have a numeric urgency property. Sorting consistency is a key consideration in this implementation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.urgency_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.urgency\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Nested Tags in JavaScript\nDESCRIPTION: Filters tasks to identify those that contain at least one nested tag where the tag includes a '/' character. The snippet uses the Array.prototype.find method on the task's tags array, returning true if any tag includes a '/', indicating a nested structure. This function expects a task object with a tags array and returns a boolean indicating presence of nested tags. Dependencies include having task objects with properly formatted tags. The output is a boolean used to filter tasks accordingly.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.tags.find( (tag) => tag.includes('/') ) && true || false\n```\n\n----------------------------------------\n\nTITLE: Formatting and Accessing TasksDate Fields and Methods (Markdown Table, Pseudo-Javascript Reference)\nDESCRIPTION: This snippet specifies function/method calls and nested properties on TasksDate objects in Obsidian Tasks, including formatting, ISO conversion, and categorizations. Methods shown include formatAsDate, format, toISOString, and access to category and fromNow meta-information. The feature depends on the plugin's TasksDate internal implementation and requires Moment.js for date formatting operations. Inputs are TasksDate objects; outputs are formatted strings, numbers, or grouped labels, with fallback mechanisms for missing dates. Note that some values (like 'Invalid date') require specific plugin versions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Task Properties.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n| Field | Type 1 | Example 1 | Type 2 | Example 2 |\n| ----- | ----- | ----- | ----- | ----- |\n| `task.due` | `TasksDate` | `2023-07-04 00:00` | `TasksDate` | `` |\n| `task.due.moment` | `Moment` | `moment('2023-07-04 00:00')` | `null` | `null` |\n| `task.due.formatAsDate()` | `string` | `'2023-07-04'` | `string` | `''` |\n| `task.due.formatAsDate('no date')` | `string` | `'2023-07-04'` | `string` | `'no date'` |\n| `task.due.formatAsDateAndTime()` | `string` | `'2023-07-04 00:00'` | `string` | `''` |\n| `task.due.formatAsDateAndTime('no date')` | `string` | `'2023-07-04 00:00'` | `string` | `'no date'` |\n| `task.due.format('dddd')` | `string` | `'Tuesday'` | `string` | `''` |\n| `task.due.format('dddd', 'no date')` | `string` | `'Tuesday'` | `string` | `'no date'` |\n| `task.due.toISOString()` | `string` | `'2023-07-04T00:00:00.000Z'` | `string` | `''` |\n| `task.due.toISOString(true)` | `string` | `'2023-07-04T00:00:00.000+00:00'` | `string` | `''` |\n| `task.due.category.name` | `string` | `'Future'` | `string` | `'Undated'` |\n| `task.due.category.sortOrder` | `number` | `3` | `number` | `4` |\n| `task.due.category.groupText` | `string` | `'%%3%% Future'` | `string` | `'%%4%% Undated'` |\n| `task.due.fromNow.name` | `string` | `'in 22 days'` | `string` | `''` |\n| `task.due.fromNow.sortOrder` | `number` | `320230704` | `number` | `0` |\n| `task.due.fromNow.groupText` | `string` | `'%%320230704%% in 22 days'` | `string` | `''` |\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Query Instructions via Properties (JavaScript Placeholders)\nDESCRIPTION: Shows how to use a property value (`groupby`) from frontmatter to include an entire query instruction (e.g., 'group by happens'). The nullish coalescing operator (`?? ''`) ensures that if the 'groupby' property is not set in the frontmatter, an empty string is inserted, effectively ignoring the instruction instead of inserting 'null'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{{query.file.property('groupby') ?? ''}}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Duplicate Description (Matching Tasks)\nDESCRIPTION: This filter filters out tasks based on their description counts, which are calculated in the preceding filter. The filter relies on a cache mechanism, `query.searchCache`, and ensures only the tasks having counts greater than 1 are kept. The cacheKey used is 'descriptionCountsForMatchingTasks' and needs to be the last filter in the query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters With Complex Caching.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function { \\n    const cacheKey = 'descriptionCountsForMatchingTasks'; \\n    const group = task.descriptionWithoutTags; \\n    const count = query.searchCache[cacheKey].get(group); \\n    return count > 1; \\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Happen Date in Obsidian Tasks Plugin\nDESCRIPTION: Enables filtering tasks based on their occurrence date, supporting specific dates and ranges, with sorting and grouping capabilities based on 'task.happens'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n`happens (on, before, after, on or before, on or after) <date>`\\n`happens (in, before, after, in or before, in or after) ...`\\n`... YYYY-MM-DD YYYY-MM-DD`\\n`... (last, this, next) (week, month, quarter, year)`\\n`... (YYYY-Www,YYYY-mm, YYYY-Qq, YYYY)`\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Regex - Tasks\nDESCRIPTION: This snippet illustrates the correct way to escape special characters, such as the forward slash `/`, within a regular expression. By adding a backslash `\\` before the forward slash, the regex engine interprets it as a literal character rather than the end of the pattern, allowing for accurate searching of strings containing special characters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription regex matches /#context\\/pc_abigail/\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /#context\\/pc_abigail/\n```\n\n----------------------------------------\n\nTITLE: Listing Task Dates in Markdown\nDESCRIPTION: This Markdown snippet illustrates how tasks are formatted and displayed within Obsidian Tasks, incorporating different dates related to task management.  Each task includes a status indicator ([ ], [x], [-]) and various date fields (created, scheduled, start, due, completion, cancelled). No dependencies are necessary as this is a basic markdown example for display.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Dates_dataview-include.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- placeholder to force blank line before included text -->\n\n- [ ] #task Has a created date  [created:: 2023-04-13]\n- [ ] #task Has a scheduled date  [scheduled:: 2023-04-14]\n- [ ] #task Has a start date  [start:: 2023-04-15]\n- [ ] #task Has a due date  [due:: 2023-04-16]\n- [x] #task Has a done date  [completion:: 2023-04-17]\n- [-] #task Has a cancelled date  [cancelled:: 2023-04-18]\n\n<!-- placeholder to force blank line after included text -->\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Plugin with Grouping and Sorting - tasks\nDESCRIPTION: This snippet configures the Tasks Plugin to display tasks located in the current file, grouping them by their heading and sorting them by description. It uses the plugin's full query mode and is typically placed within a Markdown callout for contextual clarity. Dependencies include the Obsidian Tasks Plugin with full query syntax support; expected input is any file containing tasks, and the output is a grouped and sorted list rendering. No parameters beyond those described are needed, but the path uses a Mustache-style variable.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Callouts and Block Quotes.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes {{query.file.path}}\ngroup by heading\nsort by description\n\n```\n\n----------------------------------------\n\nTITLE: Grouping by Modified Recurrence Rule (JavaScript)\nDESCRIPTION: Groups tasks based on their recurrence rule string after applying a transformation using JavaScript's `replace()` method. This example highlights occurrences of \"when done\" within the rule string for demonstration purposes. Requires the task object (`task`) and its `recurrenceRule` string property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.recurrenceRule.replace('when done', '==when done==')\n```\n\n----------------------------------------\n\nTITLE: Embedding Filtered Tasks Query in Callout in Obsidian Tasks\nDESCRIPTION: Shows how a `tasks` query block can be embedded within an Obsidian callout element (e.g., `> [!check]`) for better visual organization or styling. The query itself filters for tasks due today that are not yet done.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/About Queries.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\ndue today\nnot done\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Scheduled Dates in Obsidian Tasks Plugin - Markdown\nDESCRIPTION: This snippet demonstrates usage of the Obsidian Tasks plugin code block within Markdown to search for tasks based on their scheduled dates. It filters tasks in a specific folder (as given by {{query.file.folder}}) and groups the results according to whether each task has a 'scheduled' date and by the actual scheduled date. No external dependencies beyond the Obsidian Tasks plugin are required; users must have their vault and plugin enabled. The query outputs groups labeled either '✅ Has scheduled date from filename' or '❌ No scheduled date from filename', and the scheduled date, allowing quick inspection of scheduling status for each task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Scheduled Date Implied/Search for Scheduled Dates.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```tasks\nfolder includes {{query.file.folder}}\ngroup by function task.scheduled.moment ? '✅ Has scheduled date from filename' : '❌ No scheduled date from filename'\ngroup by scheduled\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Tasks Results in a Callout - JavaScript\nDESCRIPTION: This complete DataviewJS script shows how to wrap the generated Tasks output in an Obsidian callout of chosen type (e.g., 'todo'), allowing for a more stylized and highlighted display. It defines a function to format multiline output as a callout, then generates and inserts the dynamic Tasks block inside it. Dependencies: Dataview plugin, Tasks plugin, and Obsidian's callout feature. Inputs: none (uses file context). Output: rendered callout containing the task list.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to get tasks in current file.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction callout(text, type) {\n    const allText = `> [!${type}]\\n` + text;\n    const lines = allText.split('\\n');\n    return lines.join('\\n> ') + '\\n'\n}\n\nconst query = `\nnot done\npath includes ${dv.current().file.path}\n# you can add any number of extra Tasks instructions, for example:\ngroup by heading\n`;\n\ndv.paragraph(callout('```tasks\\n' + query + '\\n```', 'todo'));\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Description Without Tags (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a grouping function within the context of the Obsidian Tasks plugin. The `group by function task.descriptionWithoutTags` expression groups tasks based on their description after removing any associated tags. The primary use case is to identify tasks sharing a common description, even if the tags differ. This enables finding completed recurrences of the same task. No dependencies are explicitly shown in this simple snippet, but it assumes it is part of an overall system within the Obsidian Tasks plugin where `task` refers to a task object with a description and the `descriptionWithoutTags` method already exists. The output is a grouped set of tasks based on the modified description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.descriptionWithoutTags_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.descriptionWithoutTags\n```\n\n----------------------------------------\n\nTITLE: Custom Grouping by Uppercase Task Status Name (JavaScript)\nDESCRIPTION: Groups tasks by their custom status names, converting the names to uppercase using `task.status.name.toUpperCase()` within a `group by function` instruction. This allows for case-insensitive grouping or visual emphasis. Requires Tasks plugin version 4.0.0 or later.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.status.name.toUpperCase()\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Root Folder in Obsidian Tasks\nDESCRIPTION: This snippet demonstrates the 'sort by function task.file.root' custom sorter which organizes tasks based on the root folder of their containing files. The results show tasks sorted alphabetically by their file paths.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.root_results.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsort by function task.file.root\nEnable sorting by the root folder.\n=>\n- [ ] xyz in '' in heading 'heading'\n- [ ] xyz in 'a_b_c.md' in heading 'a_b_c'\n- [ ] xyz in 'a/b.md' in heading 'null'\n- [ ] xyz in 'a/b/_c_.md' in heading 'null'\n- [ ] xyz in 'a/b/_c_.md' in heading 'heading _italic text_'\n- [ ] xyz in 'a/b/c.md' in heading 'null'\n- [ ] xyz in 'a/b/c.md' in heading 'c'\n- [ ] xyz in 'a/d/c.md' in heading 'heading'\n- [ ] xyz in 'e/d/c.md' in heading 'heading'\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Relative Due Time in Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Uses the function task.due.fromNow.groupText to group tasks by the time from now (e.g., '8 days ago', 'in 11 hours'). The output omits headings if no due date is present and exposes name and sortOrder fields to control rendering. Requires the Tasks plugin and tasks with due dates; outputs tasks grouped under relative time headings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.fromNow.groupText\n// Output:\n// %%0%% Invalid date\n// %%120230529%% 2 days ago\n// %%120230531%% 20 hours ago\n// %%320230601%% in 4 hours\n// %%320230601%% in a day\n```\n\n----------------------------------------\n\nTITLE: Showing Task Status Changes\nDESCRIPTION: This snippet demonstrates the status changes of an 'important' task when the checkbox is clicked. This illustrates the cycling of custom statuses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Set up custom statuses.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- [D] #task Do important stuff\n```\n\n----------------------------------------\n\nTITLE: Listing Tasks with Priority Indicators - Markdown\nDESCRIPTION: This Markdown code snippet displays a list of tasks with priority indicators.  Each task is represented as a checkbox item using the `- [ ]` syntax followed by task details, including a `#task` tag and a priority level indicator.  The indicators use unicode emojis to visually differentiate the priorities, organized in order from lowest to highest.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Priorities_tasksPluginEmoji-include.approved.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- placeholder to force blank line before included text -->\n\n- [ ] #task Lowest priority ⏬\n- [ ] #task Low priority 🔽\n- [ ] #task Normal priority\n- [ ] #task Medium priority 🔼\n- [ ] #task High priority ⏫\n- [ ] #task Highest priority 🔺\n\n<!-- placeholder to force blank line after included text -->\n```\n\n----------------------------------------\n\nTITLE: Default Sort Order - Tasks Query\nDESCRIPTION: This snippet shows the default sorting instructions automatically applied to every Tasks query. Tasks are primarily sorted by status type, followed by urgency, due date, priority, and file path. These defaults are always appended and have lower precedence than any 'sort by' lines provided by the user.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsort by status.type\nsort by urgency\nsort by due\nsort by priority\nsort by path\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Task Statuses\nDESCRIPTION: This snippet shows the default statuses provided by the Tasks plugin: TODO and DONE. The plugin supports these statuses by default, allowing users to toggle between them by clicking the checkbox.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Set up custom statuses.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [ ] I am a TODO task that is not yet done\n- [x] I am a DONE task that has been done\n```\n\n----------------------------------------\n\nTITLE: Combining OR groups with AND in Obsidian Tasks Query\nDESCRIPTION: Demonstrates how to combine two groups of OR conditions using an AND operator in the Obsidian Tasks query language. The query selects tasks where the description includes 'a', 'b', or 'c', AND also includes 'd', 'e', or 'f'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_26\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n( (description includes a) OR (description includes b) OR (description includes c) ) AND ( (description includes d) OR (description includes e) OR (description includes f) )\n```\n\n----------------------------------------\n\nTITLE: Extracting Third-Level Sub-Subtag from Task Tags in JavaScript\nDESCRIPTION: This snippet extracts the third level in the hierarchical tag structure by checking if a third segment exists in the slash-separated tag and returning it; otherwise, it returns an empty string. This approach allows grouping by more granular sub-subtags when present. Inputs are tags formatted as '#tag/subtag/sub-sub-tag', and outputs are arrays containing the third-level segment or empty strings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[2] ? tag.split('/').slice(2, 3) : '')\n```\n\n----------------------------------------\n\nTITLE: Defining task with start date - Markdown\nDESCRIPTION: Defines an incomplete task in Markdown with the '#task' tag. It includes a start date using the '[start:: YYYY-MM-DD]' inline field. This date signifies when the task becomes available or should begin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Dates_dataview-snippet.approved.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Has a start date [start:: 2023-04-15]\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Original Markdown Line - JavaScript\nDESCRIPTION: Functions to group tasks by their original markdown text lines. One method encloses the original markdown string with backticks to render it as code, preserving markdown formatting including single backticks. Another method removes all characters up to the checkbox (e.g., '[ ]') in the task line and then renders the remaining text as normal markdown. These groups enable organizing tasks based on the raw content of their markdown source lines. Requires the task object to have an \"originalMarkdown\" property containing the full raw task line as a string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function '``' + task.originalMarkdown + '``'\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.originalMarkdown.replace(/^[^\\[\\]]+\\[.\\] */, '')\n```\n\n----------------------------------------\n\nTITLE: Grouping by Parent Folder - JavaScript\nDESCRIPTION: This snippet groups tasks by the immediate parent folder of the file containing the task. It removes the trailing slash from the folder path, splits the path into an array of folder names, retrieves the last folder name (the parent), and adds the trailing slash back. The expression evaluates to a string representing the parent folder of the file containing the task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.folder.slice(0, -1).split('/').pop() + '/'\n```\n\n----------------------------------------\n\nTITLE: Getting File Folder Path (JavaScript)\nDESCRIPTION: Accesses the path of the parent folder containing the file, relative to the vault root. Useful for grouping or filtering tasks based on their containing directory.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/QueryProperties.test.query_file_properties.approved.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.folder\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Tasks with 31st Day of Month\nDESCRIPTION: This code defines a recurring task using Obsidian Tasks plugin syntax, set to repeat every month on the 31st. Some months do not have a 31st day, so the test verifies how the plugin handles those invalid dates and calculates the next valid occurrence. The tasks include a due date and examples of completed tasks with completion dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Recurrence handling invalid dates.md#_snippet_1\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task do stuff 🔁 every month on the 31st 📅 2022-07-31\n- [x] #task do stuff 🔁 every month on the 31st 📅 2022-05-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 31st 📅 2022-03-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 31st 📅 2022-01-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 31st 📅 2021-12-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 31st 📅 2021-11-30 ✅ 2022-10-03\n```\n\n----------------------------------------\n\nTITLE: Current Behavior: Recurring Task on Last Day\nDESCRIPTION: This defines the current testing behavior of recurring tasks, using Obsidian Tasks syntax, and checks how it handles calculating the last day of each month. It includes both open and completed tasks with completion dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Recurrence handling invalid dates.md#_snippet_8\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task do stuff 🔁 every month on the last 📅 2022-04-30\n- [x] #task do stuff 🔁 every month on the last 📅 2022-03-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the last 📅 2022-02-28 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the last 📅 2022-01-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the last 📅 2021-12-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the last 📅 2021-11-30 ✅ 2022-10-03\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Status Symbol in Obsidian Tasks\nDESCRIPTION: This example shows the result of applying the 'sort by function task.status.symbol' sorter in Obsidian Tasks. It orders tasks according to their status symbols, starting with empty status, then todo, cancelled, in progress, non-task, and done status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.statuses_task.status.symbol_results.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsort by function task.status.symbol\nSort by the status symbol.\n=>\n- [] Status EMPTY\n- [ ] Status Todo\n- [-] Status Cancelled\n- [/] Status In Progress\n- [Q] Status Non-Task\n- [x] Status Done\n```\n\n----------------------------------------\n\nTITLE: Styling Task Tags, Links and Recurrence in Gray\nDESCRIPTION: CSS snippet that makes tags, internal links, and recurrence rules appear in gray by using Obsidian's built-in CSS variables for consistent theming.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.tasks-list-text a.tag {\n    color: var(--list-marker-color);\n}\n\n.tasks-backlink a.internal-link {\n    color: var(--list-marker-color);\n}\n\n.task-recurring {\n    color: var(--list-marker-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Nested Tags using JavaScript\nDESCRIPTION: These advanced filtering examples identify tasks with nested or doubly nested tags by examining the structure of tags in the `task.tags` array. The first snippet detects tasks with at least one nested tag by searching for the slash character (`/`). The second snippet finds tasks having tags nested to at least two levels (three parts when split by `/`), like `#context/home/ground-floor`. These require the Obsidian Tasks plugin version 4.2.0 or later. Inputs are arrays of tag strings, and outputs are tasks filtered by tag nesting depth.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.tags.find( (tag) => tag.includes('/') ) && true || false\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.tags.find( (tag) => tag.split('/').length >= 3 ) && true || false\n```\n\n----------------------------------------\n\nTITLE: Combining Start Date and Description Filters with AND (Obsidian Tasks, text)\nDESCRIPTION: Filters for tasks that both have a start date and whose description includes the word 'some'. No external dependencies are needed aside from the Tasks plugin. Parameters are filter expressions using AND; the output will be only tasks matching both sub-conditions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n(has start date) AND (description includes some)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Created Date with Tasks query\nDESCRIPTION: This Tasks query demonstrates how to find tasks created before tomorrow. This will return tasks that were created today or earlier.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\ncreated before tomorrow\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by date - date range\nDESCRIPTION: Demonstrates filtering tasks by date ranges using the `due`, and `happens` keywords. The query returns tasks with due dates within the specified range.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndue 2023-11-25 2023-11-30\nhappens this week\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Completion Date and Grouping - Tasks\nDESCRIPTION: This snippet filters tasks that are marked as 'done' before the 'workdate' property from the file frontmatter. The results are then grouped using the 'groupby' property, again using the property from the frontmatter. The results are limited to 10. The `query.file.property('workdate')` call retrieves the 'workdate' property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/workdate Example.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\n#explain\ndone before {{query.file.property('workdate')}}\n{{query.file.property('groupby')}}\nlimit 10\n```\n\n----------------------------------------\n\nTITLE: Exclusive OR (XOR) Filtering (Obsidian Tasks, markdown/text)\nDESCRIPTION: A tasks code block using the XOR operator to return only tasks which are either in files with 'inbox' in the path or tagged #inbox on the task line, but not both. Needs only the Tasks plugin. Inputs are filter expressions; output is the task list that matches only one of the conditions. Limitation: combining more than two filters with XOR can yield unexpected results.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\nnot done\n(path includes inbox) XOR (description includes #inbox)\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Home Context Tag Using Custom Function in Tasks Query Language\nDESCRIPTION: This snippet filters tasks to include only those tagged with '#context/home' or within a heading that contains this tag. It uses a function-based filter in the Tasks query language, checking the task's tags array and heading text. It depends on the Tasks plugin's support for functional filters and expects task objects with 'tags' and 'heading' properties. The output is tasks associated with the home context tag.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters - Demo.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\n\nfilename includes Custom Filters - Demo\n\n# Infer tag from heading\nfilter by function task.heading.includes('#context/home') || task.tags.find( (tag) => tag === '#context/home' ) && true || false\n```\n\n----------------------------------------\n\nTITLE: Sorting/Grouping by Status in Obsidian Tasks Plugin Syntax\nDESCRIPTION: Commands used within a `tasks` block to sort or group the resulting task list based on their status or status details.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_1\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nsort by status\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ngroup by status\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nsort by status.name\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ngroup by status.name\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nsort by status.type\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ngroup by status.type\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Next Status Symbol - Javascript\nDESCRIPTION: This snippet sorts tasks based on the symbol of the status they would transition to when completed or advanced. It uses the `task.status.nextSymbol` property with `sort by function` to order tasks based on the character code or alphabetical order of their next status symbols. There is no standard `sort by` instruction for next status symbols.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.status.nextSymbol\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: Conjunctions with string\nDESCRIPTION: This demonstrates an expression that includes two conditions combined using AND, where both conditions are represented by strings. This valid example shows successful interpretation and formatting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n'\"description includes d1\" AND \"description includes d2\"'\n=>\nResult:\n  \"description includes d1\" AND \"description includes d2\" =>\n    AND (All of):\n      description includes d1\n      description includes d2\n```\n\n----------------------------------------\n\nTITLE: Sorting by Description Length\nDESCRIPTION: Sorts tasks by the length of their description, shortest first. The description is obtained using the `task.description` property. Dependencies: Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.description.length\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Urgency in Reverse Order in Obsidian Tasks\nDESCRIPTION: This example demonstrates using the custom sorter 'sort by function reverse task.urgency' to arrange tasks from most urgent to least urgent. The urgency is determined by due dates and priority markers, with due dates and higher priority tasks appearing at the top of the list.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.urgency_results.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsort by function reverse task.urgency\nSort by task urgency values.\nWe use `reverse` to put the most urgent tasks first.\n=>\n- [ ] due 2023-06-11 📅 2023-06-11\n- [ ] #task Highest priority 🔺\n- [ ] #task High priority ⏫\n- [ ] #task Medium priority 🔼\n- [ ] #task Normal priority\n- [ ] #task Low priority 🔽\n- [ ] #task Lowest priority ⏬\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Formatted Date String in Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Groups tasks by a formatted string using task.due.format(\"YYYY-MM-DD dddd\"). Produces headings with full date and day names, omitting headings for tasks without a due date, resulting in improved timeline clarity. The snippet needs the Tasks plugin, and expects valid date properties; output is organized by verbose date headings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_results.approved.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"YYYY-MM-DD dddd\")\n// Output:\n// 2023-05-30 Tuesday\n// 2023-05-31 Wednesday\n// 2023-06-01 Thursday\n// 2023-06-02 Friday\n// Invalid date\n```\n\n----------------------------------------\n\nTITLE: Combining Tag Filters with AND Operator in Obsidian Tasks Query Language\nDESCRIPTION: Illustrates how to combine two or three tag filters using the AND Boolean operator to select tasks that include all specified tags. Dependencies include the Obsidian Tasks plugin with support for Boolean filter syntax. The input is a task list with tags, and the output is a filtered task set matching all given tags. Parameters are tag names specified with '#'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Boolean Combinations.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(tags includes #XX) AND (tags includes #YY)\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(tags includes #XX) AND (tags includes #YY) AND (tags includes #ZZ)\n```\n\n----------------------------------------\n\nTITLE: Sorting by File Path in JavaScript\nDESCRIPTION: Sorts tasks in the same file as the query file before tasks in other files. The `task.file.path === query.file.path` expression returns `true` for tasks in the same file and `false` otherwise, resulting in a boolean sort. Tasks for which the expression evaluates to `true` are sorted earlier (before tasks for which the result is `false`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Sorting.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.path === query.file.path\n```\n\n----------------------------------------\n\nTITLE: Using Text Keywords for Emoji Auto-Completion in Obsidian Tasks\nDESCRIPTION: Provides a comprehensive list of keyword triggers that, when typed, will suggest emojis such as dates, priorities, recurrence, and task actions. Typing partial text like 'du', 'start', or 'delete' will prompt the plugin to insert corresponding emojis, aiding quick task editing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Editing/Auto-Suggest.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n>\n| Searchable Text | Text that is added |\n| ----- | ----- |\n| ⏎ | &lt;new line&gt; |\n| 📅 due date | 📅  |\n| 🛫 start date | 🛫  |\n| ⏳ scheduled date | ⏳  |\n| ⏫ high priority | ⏫  |\n| 🔼 medium priority | 🔼  |\n| 🔽 low priority | 🔽  |\n| 🔺 highest priority | 🔺  |\n| ⏬ lowest priority | ⏬  |\n| 🔁 recurring (repeat) | 🔁  |\n| ➕ created today (2022-07-11) | ➕ 2022-07-11  |\n| 🆔 id | 🆔  |\n| ⛔ depends on id | ⛔  |\n| 🏁 on completion | 🏁  |\n| every | 🔁 every  |\n| every day | 🔁 every day  |\n| every week | 🔁 every week  |\n| every month | 🔁 every month  |\n| every month on the | 🔁 every month on the  |\n| every year | 🔁 every year  |\n| every week on Sunday | 🔁 every week on Sunday  |\n| every week on Monday | 🔁 every week on Monday  |\n| every week on Tuesday | 🔁 every week on Tuesday  |\n| every week on Wednesday | 🔁 every week on Wednesday  |\n| every week on Thursday | 🔁 every week on Thursday  |\n| every week on Friday | 🔁 every week on Friday  |\n| every week on Saturday | 🔁 every week on Saturday  |\n| today (2022-07-11) | 📅 2022-07-11  |\n| tomorrow (2022-07-12) | 📅 2022-07-12  |\n| Sunday (2022-07-17) | 📅 2022-07-17  |\n| Monday (2022-07-18) | 📅 2022-07-18  |\n| Tuesday (2022-07-12) | 📅 2022-07-12  |\n| Wednesday (2022-07-13) | 📅 2022-07-13  |\n| Thursday (2022-07-14) | 📅 2022-07-14  |\n| Friday (2022-07-15) | 📅 2022-07-15  |\n| Saturday (2022-07-16) | 📅 2022-07-16  |\n| next week (2022-07-18) | 📅 2022-07-18  |\n| next month (2022-08-11) | 📅 2022-08-11  |\n| next year (2023-07-11) | 📅 2023-07-11  |\n| today (2022-07-11) | ⏳ 2022-07-11  |\n| tomorrow (2022-07-12) | ⏳ 2022-07-12  |\n| Sunday (2022-07-17) | ⏳ 2022-07-17  |\n| Monday (2022-07-18) | ⏳ 2022-07-18  |\n| Tuesday (2022-07-12) | ⏳ 2022-07-12  |\n| Wednesday (2022-07-13) | ⏳ 2022-07-13  |\n| Thursday (2022-07-14) | ⏳ 2022-07-14  |\n| Friday (2022-07-15) | ⏳ 2022-07-15  |\n| Saturday (2022-07-16) | ⏳ 2022-07-16  |\n| next week (2022-07-18) | ⏳ 2022-07-18  |\n| next month (2022-08-11) | ⏳ 2022-08-11  |\n| next year (2023-07-11) | ⏳ 2023-07-11  |\n| today (2022-07-11) | 🛫 2022-07-11  |\n| tomorrow (2022-07-12) | 🛫 2022-07-12  |\n| Sunday (2022-07-17) | 🛫 2022-07-17  |\n| Monday (2022-07-18) | 🛫 2022-07-18  |\n| Tuesday (2022-07-12) | 🛫 2022-07-12  |\n| Wednesday (2022-07-13) | 🛫 2022-07-13  |\n| Thursday (2022-07-14) | 🛫 2022-07-14  |\n| Friday (2022-07-15) | 🛫 2022-07-15  |\n| Saturday (2022-07-16) | 🛫 2022-07-16  |\n| next week (2022-07-18) | 🛫 2022-07-18  |\n| next month (2022-08-11) | 🛫 2022-08-11  |\n| next year (2023-07-11) | 🛫 2023-07-11  |\n| delete | 🏁 delete  |\n| keep | 🏁 keep  |\n| generate unique id | 🆔 ******  |\n```\n\n----------------------------------------\n\nTITLE: QuickAdd Format for Task with Shared Date Field\nDESCRIPTION: This markdown snippet demonstrates a capture format for QuickAdd. It creates a task with a shared date field for the reminder and due date, reducing repetitive data entry.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Other Plugins/QuickAdd.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#task {{VALUE:task name}} ⏰ {{VDATE:same date,YYYY-MM-DD}} {{VDATE:time,HH:mm}} 📅 {{VDATE:same date,YYYY-MM-DD}}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Due on 2021-08-22 Using Tasks Plugin\nDESCRIPTION: This snippet filters tasks within Obsidian files that are due on August 22, 2021, using the Tasks plugin syntax combined with Dataview query features. It filters by file path and due date, then groups the results by note headings while hiding backlinks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Testing File Formats/Dataview Format - Queries - Tasks Plugin.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n# explain\npath includes Manual Testing/Testing File Formats\ndue on 2021-08-22\n\ngroup by heading\nhide backlink\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks for today's date or heading containing today's date\nDESCRIPTION: This code filters tasks based on whether they are due today or their preceding heading includes today's date formatted as 'YYYY-MM-DD'. It employs Moment.js for date comparison and handles missing due dates gracefully, demonstrating date-based filtering logic.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst taskDate = task.due.moment; \nconst now = moment(); \nreturn taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false\n```\n\n----------------------------------------\n\nTITLE: Single-Line Equivalent Filters with AND (Obsidian Tasks, text)\nDESCRIPTION: Demonstrates two filters placed one per line, which is functionally equivalent to a single AND operation in Tasks syntax. This snippet does not use explicit operators, highlighting that multiple lines imply AND. Requires only the Tasks plugin. Each line acts as a separate filter; all must match.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhas start date\ndescription includes some\n```\n\n----------------------------------------\n\nTITLE: Categorizing Dates with Highlighting JavaScript\nDESCRIPTION: This code is similar to the previous one, but adds highlighting to the output strings for the categories 'Invalid date', 'Overdue', 'Today', 'Future', and 'Undated'.  It relies on the same date-handling library and date comparison functions. The input is a task object with a due date, and the output is a string representing a category, with highlighting applied.  It showcases formatted category labels.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\ \n    const date = task.due.moment; \\ \n    return \\ \n        (!date)                           ? '%%4%% ==Undated==' :      \\ \n        !date.isValid()                   ? '%%0%% ==Invalid date==' : \\ \n        date.isBefore(moment(), 'day')    ? '%%1%% ==Overdue==' :      \\ \n        date.isSame(moment(), 'day')      ? '%%2%% ==Today=='   :      \\ \n        '%%3%% ==Future=='\n```\n\n----------------------------------------\n\nTITLE: Markdown Task Status Markers in Obsidian Tasks\nDESCRIPTION: A complete reference list of task status markers used in the Obsidian Tasks plugin. Each line follows the format of checkbox syntax with different symbols representing various task states, followed by the #task tag and a description of what the symbol represents.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Things_Tasks.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task `space` to-do\n- [/] #task `/` incomplete\n- [x] #task `x` done\n- [-] #task `-` canceled\n- [>] #task `>` forwarded\n- [<] #task `<` scheduling\n- [?] #task `?` question\n- [!] #task `!` important\n- [*] #task `*` star\n- [\"] #task `\"` quote\n- [l] #task `l` location\n- [b] #task `b` bookmark\n- [i] #task `i` information\n- [S] #task `S` savings\n- [I] #task `I` idea\n- [p] #task `p` pros\n- [c] #task `c` cons\n- [f] #task `f` fire\n- [k] #task `k` key\n- [w] #task `w` win\n- [u] #task `u` up\n- [d] #task `d` down\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: 'delete' Action with Nested Tasks (Plain Text)\nDESCRIPTION: Warning example illustrating incorrect usage of the 'On Completion' feature. Applying the 'delete' action (🏁 delete) to a parent task that contains nested tasks or list items is discouraged as it can break the list structure upon completion.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/On Completion.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- [ ] Delete me upon completion 🏁 delete\n    - [ ] I am a nested task\n    - I am a nested list item.\n```\n\n----------------------------------------\n\nTITLE: Querying Blocking Tasks\nDESCRIPTION: This Obsidian Tasks query filters for tasks that are currently blocking other tasks from being completed. It restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nis blocking\n\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Created Date using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to filter tasks based on their created date. It uses the `task.created.format('dddd')` function to check if the created date falls on a specific day of the week (Monday in this example). It's designed to work with Obsidian Tasks' custom filtering. The day of the week may need to be localized.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.created.format('dddd') === 'Monday'\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by date - single date\nDESCRIPTION: Demonstrates filtering tasks by single dates using the `starts before`, and `due on or before` keywords. The query returns tasks matching the specified criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nstarts before 2023-04-20\ndue on or before today\n```\n\n----------------------------------------\n\nTITLE: Accessing task.due.fromNow.groupText Property in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `groupText` property on the `fromNow` object within `task.due` in Obsidian Tasks. This property provides a string formatted for grouping tasks by their relative due time, often including the sort order prefix. It returns an empty string if the date is null.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.fromNow.groupText\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Recurrence Rule Text using JavaScript\nDESCRIPTION: These snippets use the `task.recurrenceRule` property to filter tasks according to the textual content of their recurrence rules. The filters perform case-sensitive includes checks to find tasks with or without specific recurrence patterns such as \"every week\", and combined conditions to also check for phrases like \"when done\". This requires Tasks plugin 4.2.0 or later and assumes that tasks expose standardized recurrence rule text in `task.recurrenceRule`. The input is the task recurrence string, and the output is a filtered list of tasks whose recurrence rules meet the specified text criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.recurrenceRule.includes(\"every week\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function !task.recurrenceRule.includes(\"every week\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.recurrenceRule.includes(\"every week\") && task.recurrenceRule.includes(\"when done\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.recurrenceRule.includes(\"every week\") && !task.recurrenceRule.includes(\"when done\")\n```\n\n----------------------------------------\n\nTITLE: Querying Non-Blocking Tasks (Not Done)\nDESCRIPTION: This Obsidian Tasks query filters for tasks that are not blocking other tasks and are not yet done.  It restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\nis not blocking\nnot done\n\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Grouping by Recurrence Status (JavaScript)\nDESCRIPTION: Groups tasks into two categories based on whether they are recurring or not, using a JavaScript ternary operator. Tasks with `task.isRecurring` being true are grouped as \"Recurring\", otherwise as \"Non-Recurring\". Requires the task object (`task`) and its `isRecurring` boolean property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.isRecurring ? \"Recurring\" : \"Non-Recurring\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global Layout (Hide Priority) - Obsidian Tasks Query\nDESCRIPTION: An example demonstrating how to use a layout option (`hide priority`) as the Global Query. This configures all task blocks to hide the priority symbol by default. This setting can be overridden by including the `show priority` instruction in a specific block.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Global Query.md#_snippet_4\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\nhide priority\n```\n\n----------------------------------------\n\nTITLE: QuickAdd Format for Task with Recurrence, Scheduled, and Start Date\nDESCRIPTION: This markdown snippet shows a capture format for QuickAdd.  This is used for a task with recurrence, scheduled, and start date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Other Plugins/QuickAdd.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#task {{VALUE:task name}} 🔁 {{VALUE:recurrence}} 🛫 {{VDATE:start date,YYYY-MM-DD}} ⏳ {{VDATE:scheduled date,YYYY-MM-DD}}\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by root folder in JavaScript\nDESCRIPTION: This JavaScript snippet filters tasks located in files at the vault's root directory. It leverages the `task.file.root` property to determine if the task's file resides directly within the root.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.root === '/'\n```\n\n----------------------------------------\n\nTITLE: Sorting by Description Without Tags\nDESCRIPTION: Sorts tasks by their description, but with any tags removed. Useful for sorting together tasks with similar descriptions but different tags. The `task.descriptionWithoutTags` property is required.  Dependencies: Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.descriptionWithoutTags\n```\n\n----------------------------------------\n\nTITLE: Grouping Dates into Categories JavaScript\nDESCRIPTION: This snippet categorizes task due dates into broader categories: 'Invalid date', 'Overdue', 'Today', 'Future', and 'Undated'. It uses `moment()` and related functions to determine the category based on date comparisons. This requires a date manipulation library such as moment.js. The input is a task object, with the output consisting of a string representing the category of the due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\ \n    const date = task.due.moment; \\ \n    return \\ \n        (!date)                           ? '%%4%% Undated' :      \\ \n        !date.isValid()                   ? '%%0%% Invalid date' : \\ \n        date.isBefore(moment(), 'day')    ? '%%1%% Overdue' :      \\ \n        date.isSame(moment(), 'day')      ? '%%2%% Today'   :      \\ \n        '%%3%% Future';\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Due Date in Obsidian Tasks Plugin\nDESCRIPTION: Defines filters to find tasks based on their due dates, supporting specific dates, relative periods, and date ranges. Includes sorting, grouping, and hiding options, referencing the 'task.due' property for task queries.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n`due (on, before, after, on or before, on or after) <date>`\\n`due (in, before, after, in or before, in or after) ...`\\n`... YYYY-MM-DD YYYY-MM-DD`\\n`... (last, this, next) (week, month, quarter, year)`\\n`... (YYYY-Www,YYYY-mm, YYYY-Qq, YYYY)`\\n`has due date`\\n`no due date`\\n`due date is invalid`\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Month - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Groups tasks by due month using a custom format: `YYYY%%-MM%% MMM`, where the embedded month number controls sort order, but is hidden in the final heading (e.g., `2023 May`). Includes a default heading 'no due date' if no date is available. Square brackets and double percent symbols are used to escape characters for sorting and display purposes. Requires an understanding of moment.js formatting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"YYYY[%%]-MM[%%] MMM\", \"no due date\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom YAML Property in Markdown for Obsidian Tasks - YAML\nDESCRIPTION: This snippet defines a YAML frontmatter section with a custom numeric property named 'custom_number_prop' set to 42. It requires the file to be part of an Obsidian vault configured to parse YAML properties for task management. This property can be referenced or queried within Obsidian Tasks plugin queries.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_custom_number_property.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncustom_number_prop: 42\n---\n```\n\n----------------------------------------\n\nTITLE: Example Tasks List in Markdown\nDESCRIPTION: This snippet displays a sample list of four tasks formatted as checkboxes with associated tags. It illustrates the typical task structure in Obsidian markdown files and serves as example data for testing or reference.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Search for tasks in file or folder containing the Query.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Task 1\n- [ ] #task Task 2\n- [ ] #task Task 3\n- [ ] #task Task 4\n```\n\n----------------------------------------\n\nTITLE: Defining Recurrence with Tasks Emoji Format - Markdown\nDESCRIPTION: This snippet demonstrates how to define a recurring task using the Tasks plugin's emoji format in markdown. The 🔁 emoji indicates recurrence, followed by a description of the recurrence rule (e.g., 'every day when done'). The task must have the '#task' tag to be parsed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Tasks Emoji Format.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Is a recurring task 🔁 every day when done\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Created Date Day of Week - Javascript\nDESCRIPTION: This snippet sorts tasks based on the day of the week they were created. It accesses the created date via `task.created` and formats it to the full day name string using `.format(\"dddd\")`. `sort by function` then orders tasks alphabetically by this day name.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.created.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Start Date using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to filter tasks based on their start date. It uses the `task.start.format('dddd')` function to check if the start date falls on a specific day of the week (Sunday in this example).  It is intended for use within the Obsidian Tasks plugin's custom filtering capabilities.  The day of the week may need to be localized.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.start.format('dddd') === 'Sunday'\n```\n\n----------------------------------------\n\nTITLE: Finding or Excluding Empty Fields Using Regex\nDESCRIPTION: Demonstrates how to use the regex pattern `/^$/` in Obsidian Tasks queries to filter tasks based on whether their `description` field is empty. `/^$/` matches an empty string (start `^` immediately followed by end `$`). The first example finds empty descriptions, while the second excludes them.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /^$/\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex does not match /^$/\n```\n\n----------------------------------------\n\nTITLE: Relative Date Filter with Boolean OR and NOT\nDESCRIPTION: Example of using 'this week' relative date filter combined with OR and NOT operators. Shows how relative dates are resolved to specific date ranges.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_57\n\nLANGUAGE: text\nCODE:\n```\n'(created this week) OR NOT (created this week)'\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Custom Status with JavaScript in Obsidian Tasks\nDESCRIPTION: This JavaScript filter function selects all tasks where the status name equals 'Unknown', allowing users to identify tasks with custom statuses that have not been defined in the Tasks plugin settings. The function references the task object's status name property and returns a boolean indicating if the task matches the criteria. This approach requires the task object to include a status property with a nested name field, and the snippet is expected to be used within Obsidian Tasks' filtering capabilities.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.name_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.status.name === 'Unknown'\n```\n\n----------------------------------------\n\nTITLE: Getting File Path Without Extension (JavaScript)\nDESCRIPTION: Retrieves the file path without the file extension. Useful for operations that only need the path and base name, ignoring the file type.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/QueryProperties.test.query_file_properties.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.pathWithoutExtension\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Simplified Date in Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Uses the function task.due.formatAsDate() to group tasks by date formatted as YYYY-MM-DD, omitting headings if there is no due date. The output highlights undated or invalid entries, allowing clear chronological organization. Requires the Tasks plugin and expects date fields; output is grouped under date headings or left unheaded for undated tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_results.approved.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.formatAsDate()\n// Output:\n// 2023-05-30\n// 2023-05-31\n// 2023-06-01\n// 2023-06-02\n// Invalid date\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by non-case-sensitive file path in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to perform a non-case-sensitive comparison of file paths. It converts both the `task.file.path` and the comparison string to lowercase using `toLocaleLowerCase()` before comparing, making the filter insensitive to capitalization.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase()\n```\n\n----------------------------------------\n\nTITLE: Example Query: GTD Contexts - Tasks in One of Several Locations (OR)\nDESCRIPTION: Illustrates selecting tasks based on GTD-style context tags. This query finds tasks that can be done in any of the specified nearby locations (#context/loc1, #context/loc2, or #context/loc3).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n# Show all tasks I CAN do in this area:\n(tags include #context/loc1) OR \\\n  (tags include #context/loc2) OR \\\n  (tags include #context/loc3)\n```\n\n----------------------------------------\n\nTITLE: Filtering Obsidian Tasks Due on Tuesday\nDESCRIPTION: This query filters Obsidian tasks to show only those due on any Tuesday. It uses the `task.due.format('dddd')` function to extract the full day name from the task's due date and compares it to 'Tuesday'. Note that on non-English systems, the day name ('Tuesday') might need to be adjusted to the local language.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due_docs.approved.md#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\nfilter by function task.due.format('dddd') === 'Tuesday'\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks by Due Date Day of Week (Tasks Query)\nDESCRIPTION: This filter uses a JavaScript expression within a Tasks query to select tasks whose due date falls on a Tuesday. It accesses the task's `due` date, formats it as a full day name using `format('dddd')`, and checks if the result is strictly equal to 'Tuesday'. Note that the day name 'Tuesday' may need to be localized depending on your system's language settings. Requires a task with a valid due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript Expression\nCODE:\n```\ntask.due.format('dddd') === 'Tuesday'\n```\n\n----------------------------------------\n\nTITLE: Tag Filters with Various Operator Precedence (Obsidian Tasks, text)\nDESCRIPTION: Provides multiple examples showing how parentheses affect execution priority in Boolean filter expressions. Each snippet filters tasks based on different tag combinations, demonstrating equivalence between expressions with and without extra nesting. Relies on Tasks plugin, expects filter expressions as input, outputs tasks that meet the logical conditions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n(tag includes #XX) OR (tag includes #YY) AND (tag includes #ZZ)\n```\n\nLANGUAGE: text\nCODE:\n```\n(tag includes #XX) OR ( (tag includes #YY) AND (tag includes #ZZ) )\n```\n\nLANGUAGE: text\nCODE:\n```\n(tag includes #XX) AND (tag includes #YY) OR (tag includes #ZZ)\n```\n\nLANGUAGE: text\nCODE:\n```\n( (tag includes #XX) AND (tag includes #YY) ) OR (tag includes #ZZ)\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Including Specific Folder Path (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'folder includes' filter combined with 'OR NOT'. This query matches all tasks by selecting those whose folder path includes \"some/path\" OR those whose path does not include it.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_99\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(folder includes some/path) OR NOT (folder includes some/path)\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Query as Text Block - JavaScript\nDESCRIPTION: This single-line DataviewJS command replaces the output block type from 'tasks' to 'text', causing rendered output to show the raw Tasks query instead of a parsed list. Useful for debugging or inspecting the actual instructions generated by the script. Requires Dataview plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to get tasks in current file.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndv.paragraph('```text\\n' + query + '\\n```');\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Date Formatted String - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Groups tasks by a formatted due date string, using the pattern `YYYY-MM-DD dddd` (e.g., 2023-05-15 Monday). Tasks without a due date result in no heading. This method relies on the moment.js formatting syntax. It is equivalent to 'group by due' but omits a heading for tasks lacking a due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Text Inclusion with Boolean OR\nDESCRIPTION: Example of combining multiple text inclusion filters with OR operator. Shows how to search for tasks containing either of two different text strings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_59\n\nLANGUAGE: text\nCODE:\n```\n'(description includes \"hello world\") OR (description includes \"42\")'\n```\n\n----------------------------------------\n\nTITLE: Rendering Text-Based Task Action Buttons with CSS\nDESCRIPTION: This snippet converts task action buttons into text representations by changing their font and using the ::after pseudo-element. The '.tasks-edit' and '.tasks-postpone' classes are styled for readability, using small-caps and bold font, and the buttons display '[edit]' and '[move]' text respectively. Add this CSS to an Obsidian snippet to activate text buttons. Requires no additional dependencies, but relies on theme variables such as --font-ui-smaller for sizing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to style buttons.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.tasks-edit, .tasks-postpone {\n    font-size: var(--font-ui-smaller);\n    font-variant: small-caps;\n    font-weight: bold;\n    margin-left: 1em;\n}\n\n.tasks-edit::after {\n    content: '[edit]';\n}\n\n.tasks-postpone::after {\n    content: '[move]';\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing 'NOT HAS START DATE'\nDESCRIPTION: This snippet parses a query that filters out tasks that have a start date. The 'NOT' operator ensures tasks matching that criteria are excluded. The result is an array containing parts of the original statement.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n[\n    \"NOT (\",\n    \"HAS START DATE\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Sorting by Number of Tags (alternative)\nDESCRIPTION: Sorts tasks by the number of tags they contain, putting tasks with the most tags first.  This is an alternative method of sorting by tag count compared to the previous example.  Requires the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function -task.tags.length\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status Type\nDESCRIPTION: This Tasks code snippet demonstrates how to group tasks based on their status type within Obsidian Tasks. It ignores the global query to prevent interference and includes tasks from the current file. The tasks are grouped by status type and sorted by description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Snippet - SlRvb's Alternate Checkboxes.md#_snippet_2\n\nLANGUAGE: Tasks\nCODE:\n```\n# We need to ignore the global query, as it ignores this file:\nignore global query\n\npath includes {{query.file.path}}\ngroup by status.type\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Sort Tasks by File Folder in Obsidian Tasks (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a sorting function for the Obsidian Tasks plugin. It sorts tasks based on the folder in which the task's file is located. The `task.file.folder` property provides the folder path for each task, enabling the sorting logic.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.folder_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.folder\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks scheduled on Wednesdays - JavaScript\nDESCRIPTION: This snippet demonstrates how to filter tasks in Obsidian Tasks to find those scheduled for a specific day of the week (Wednesday). It leverages the task.scheduled property and the format('dddd') method to extract the day of the week from the scheduled date. Note that on non-English systems, the day name should be localized.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.scheduled_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.scheduled.format('dddd') === 'Wednesday'\n```\n\n----------------------------------------\n\nTITLE: Finding Tasks Recur Weekly and Do Not Contain 'when done' in Recurrence Rule\nDESCRIPTION: This snippet filters for tasks that recur every week but do not include the phrase 'when done' in their recurrence rule. It combines two conditions with a logical AND, using negation for the second. The expected input is a task object with a 'recurrenceRule' string property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.recurrenceRule_docs.approved.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.recurrenceRule.includes(\"every week\") && !task.recurrenceRule.includes(\"when done\")\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by query folder path only in JavaScript\nDESCRIPTION: This JavaScript snippet filters tasks located only in the same folder as the current query. It uses strict equality (`===`) to compare the `task.file.folder` property to the `query.file.folder` property, excluding tasks in any sub-folders.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder === query.file.folder\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by File Path Properties - JavaScript\nDESCRIPTION: Examples demonstrating grouping tasks based on the file paths containing them. One function returns the full file path (including extension) without escaping markdown characters, the other trims the query's folder path prefix from the task's file path for shorter display. These functions require tasks to have a \"file\" property with a \"path\" string and access to the query's file folder string. Outputs are strings representing directory and filename paths.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.path\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.path.replace(query.file.folder, '')\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by File Tag Property - Javascript (Tasks Query)\nDESCRIPTION: Demonstrates how to filter tasks to include only those located in files whose frontmatter `tags` property includes a specific tag. This uses the `task.file.property('tags')` function to access the file's tags array and the Javascript `includes()` method.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.property('tags').includes('#sample-tag')\n```\n\n----------------------------------------\n\nTITLE: Calling task.due.formatAsDateAndTime() Method in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `formatAsDateAndTime()` method on the `task.due` object in Obsidian Tasks. This method formats the due date and time into a `YYYY-MM-DD HH:mm` string representation. It returns an empty string if the task has no due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.formatAsDateAndTime()\n```\n\n----------------------------------------\n\nTITLE: Creating Task Markdown\nDESCRIPTION: Demonstrates the basic markdown syntax for creating a task within an Obsidian vault. It uses a list item starting with a space-bracket pattern, indicating a checklist item.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Getting Started.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [ ] take out the trash\n```\n\n----------------------------------------\n\nTITLE: Custom Grouping by Task Status Type (Alphabetical) (JavaScript)\nDESCRIPTION: Groups tasks based on their status types (e.g., TODO, DONE, IN_PROGRESS) using `group by function task.status.type`. Unlike the built-in `group by status.type`, this custom method sorts the resulting group headings alphabetically. Requires Tasks plugin version 4.0.0 or later.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.status.type\n```\n\n----------------------------------------\n\nTITLE: Fixing Mixed Delimiters (Post-7.0.0): Consistent Delimiters\nDESCRIPTION: Provides examples of how to correct the mixed delimiter query (shown previously) to be valid in Tasks 7.0.0 and later, by using either only parentheses or only double quotes as delimiters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n(not done) AND (is recurring)\n\"not done\" AND \"is recurring\"\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by combined tags with comma separation\nDESCRIPTION: This snippet groups tasks based on their multiple tags joined into a single string separated by commas. Tasks with multiple tags are listed once under a heading combining all their tags, making tags clickable. The method uses task.tags.join(\", \") to generate the headers, facilitating organize multi-tag tasks efficiently.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags.join(\", \")\nTasks with multiple tags are listed once, with a heading that combines all the tags.\nSeparating with commas means the tags are clickable in the headings.\n=>\n#context/home\n#context/work\n#multiple-tags1, #multiple-tags2\n#project/project1\n#tag\n#tag/subtag\n#tag/subtag/sub-sub-tag\n```\n\n----------------------------------------\n\nTITLE: Accessing task.due.category.groupText Property in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `groupText` property on the `category` object within `task.due` in Obsidian Tasks. This property provides a string formatted for grouping tasks by due date category, often including the sort order prefix.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.category.groupText\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Status Properties in Obsidian Tasks (Markdown Table, Type Reference)\nDESCRIPTION: This snippet lists all accessible properties related to a task's status, such as completion state, status name, type, symbol, and custom group/sort values. The metadata allows scripts to distinguish between different task states for grouping or filtering. No external dependencies are needed beyond Obsidian Tasks 4.0.0+. All fields are accessed as properties on the task object, which may be either primitive types (boolean/string) or nested objects. Inputs are task objects as parsed by the Tasks plugin; outputs are the associated values for each property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Task Properties.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Field | Type 1 | Example 1 | Type 2 | Example 2 |\n| ----- | ----- | ----- | ----- | ----- |\n| `task.isDone` | `boolean` | `false` | `boolean` | `false` |\n| `task.status.name` | `string` | `'Todo'` | `string` | `'In Progress'` |\n| `task.status.type` | `string` | `'TODO'` | `string` | `'IN_PROGRESS'` |\n| `task.status.typeGroupText` | `string` | `'%%2%%TODO'` | `string` | `'%%1%%IN_PROGRESS'` |\n| `task.status.symbol` | `string` | `' '` | `string` | `'/'` |\n| `task.status.nextSymbol` | `string` | `'x'` | `string` | `'x'` |\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by ID in Obsidian Tasks\nDESCRIPTION: The built-in group instruction for organizing tasks by their dependencies in the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ngroup by id\n```\n\n----------------------------------------\n\nTITLE: Defining task with created date - Markdown\nDESCRIPTION: Defines an incomplete task using the Obsidian Tasks syntax within a Markdown file. It includes a '#task' tag for identification and specifies the task's creation date using the '[created:: YYYY-MM-DD]' inline field format.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Dates_dataview-snippet.approved.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Has a created date [created:: 2023-04-13]\n```\n\n----------------------------------------\n\nTITLE: Filtering with OR NOT (Obsidian Tasks, text)\nDESCRIPTION: Example of an OR NOT expression: the filter matches tasks that either have a start date, or where the description does not include the specified term. This requires no dependencies except the Tasks plugin. Parameters are in the filter expressions; output includes tasks matching either subcondition.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n(has start date) OR NOT (description includes special)\n```\n\n----------------------------------------\n\nTITLE: Defining On Completion with Tasks Emoji Format - Markdown\nDESCRIPTION: This snippet demonstrates how to define the behavior of a task upon completion using the Tasks plugin's emoji format in markdown. The 🏁 emoji, along with 'keep' or 'delete', determines whether the task is kept or removed when done. The task must have the '#task' tag to be parsed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Tasks Emoji Format.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Keep this task when done\n- [ ] #task Keep this task when done too 🏁 keep\n- [ ] #task Remove this task when done 🏁 delete\n- [ ] #task Remove completed instance of this recurring task when done 🔁 every day 🏁 delete\n```\n\n----------------------------------------\n\nTITLE: Calculate Dates using Templater (JavaScript)\nDESCRIPTION: This Templater snippet executes JavaScript code to calculate and define variables for yesterday, today, and tomorrow. It uses the `tp.date.now` function provided by the Templater plugin, basing the calculation reference on the current note's file title, assuming it is in 'YYYY-MM-DD' format.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/_meta/templates/daily note template - Templater plugin.md#_snippet_0\n\nLANGUAGE: Templater (JavaScript)\nCODE:\n```\nlet yesterday = tp.date.now(\"YYYY-MM-DD\", -1, tp.file.title, \"YYYY-MM-DD\")\n  let today     = tp.date.now(\"YYYY-MM-DD\",  0, tp.file.title, \"YYYY-MM-DD\")\n  let tomorrow  = tp.date.now(\"YYYY-MM-DD\",  1, tp.file.title, \"YYYY-MM-DD\")\n```\n\n----------------------------------------\n\nTITLE: Embedding Property Values in Tasks Queries (JavaScript Placeholders)\nDESCRIPTION: Demonstrates using `{{query.file.property('property-name')}}` placeholders within a Tasks query to dynamically insert values from the note's frontmatter into search instructions. Requires the specified properties (`search-text`, `workdate`) to be set in the query file's frontmatter, otherwise 'null' might be inserted.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndescription includes {{query.file.property('search-text')}}\ndue on or before {{query.file.property('workdate')}}\n```\n\n----------------------------------------\n\nTITLE: Example Custom Task Status Definitions in Markdown\nDESCRIPTION: Demonstrates various custom task statuses defined using Markdown task list syntax. Each line represents a status with its unique symbol within square brackets (e.g., `[ ]`, `[x]`, `[-]`), the mandatory `#task` tag, the symbol character repeated within backticks (likely for reference, filtering, or plugin processing), and a descriptive label indicating the status meaning. This format is commonly used to extend task management capabilities in Markdown-based note-taking apps like Obsidian, particularly with the Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_ITS_Text.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task `space` Unchecked\n- [x] #task `x` Regular\n- [X] #task `X` Checked\n- [-] #task `-` Dropped\n- [>] #task `>` Forward\n- [D] #task `D` Date\n- [?] #task `?` Question\n- [/] #task `/` Half Done\n- [+] #task `+` Add\n- [R] #task `R` Research\n- [!] #task `!` Important\n- [i] #task `i` Idea\n- [B] #task `B` Brainstorm\n- [P] #task `P` Pro\n- [C] #task `C` Con\n- [Q] #task `Q` Quote\n- [N] #task `N` Note\n- [b] #task `b` Bookmark\n- [I] #task `I` Information\n- [p] #task `p` Paraphrase\n- [L] #task `L` Location\n- [E] #task `E` Example\n- [A] #task `A` Answer\n- [r] #task `r` Reward\n- [c] #task `c` Choice\n- [d] #task `d` Doing\n- [T] #task `T` Time\n- [@] #task `@` Character / Person\n- [t] #task `t` Talk\n- [O] #task `O` Outline / Plot\n- [~] #task `~` Conflict\n- [W] #task `W` World\n- [f] #task `f` Clue / Find\n- [F] #task `F` Foreshadow\n- [H] #task `H` Favorite / Health\n- [&] #task `&` Symbolism\n- [s] #task `s` Secret\n```\n\n----------------------------------------\n\nTITLE: Filter tasks due in a specific week (JavaScript)\nDESCRIPTION: This JavaScript code snippet filters tasks due in the week of 31 May 2023. It uses `isSame` with a 'week' precision to find tasks due within that week, utilizing `task.due.moment` to access the due date's moment object.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSame(moment('2023-05-31'), 'week') || false\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Due Today Using Moment.js in JavaScript\nDESCRIPTION: Filters tasks that are either due on the current day (today) or have no due date but their preceding heading contains today's date as a string formatted 'YYYY-MM-DD'. Utilizes Moment.js to get the current day and perform date comparisons safely with optional chaining. Returns a boolean indicating if a task matches the criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.heading_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst taskDate = task.due.moment; \\nconst now = moment(); \\nreturn taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Obsidian Task Statuses\nDESCRIPTION: This Markdown snippet defines a list of custom statuses for the Obsidian Tasks plugin. Each line represents a status, using a specific character (e.g., `/`, `x`, `-`, `>`) within the task checkbox `[ ]` to denote the status (e.g., In Progress, Done, Cancelled, Rescheduled). Each task is also tagged with `#task` for organization and querying.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Border_Tasks.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task `space` To Do\n- [/] #task `/` In Progress\n- [x] #task `x` Done\n- [-] #task `-` Cancelled\n- [>] #task `>` Rescheduled\n- [<] #task `<` Scheduled\n- [!] #task `!` Important\n- [?] #task `?` Question\n- [i] #task `i` Infomation\n- [S] #task `S` Amount\n- [*] #task `*` Star\n- [b] #task `b` Bookmark\n- [“] #task `“` Quote\n- [n] #task `n` Note\n- [l] #task `l` Location\n- [I] #task `I` Idea\n- [p] #task `p` Pro\n- [c] #task `c` Con\n- [u] #task `u` Up\n- [d] #task `d` Down\n```\n\n----------------------------------------\n\nTITLE: Sorting and Grouping Tasks by Cancellation Date\nDESCRIPTION: Enables organizing tasks based on when they were cancelled, using the 'task.cancelled' property. Includes options for hiding the cancellation date to streamline task views.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n`sort by cancelled`\\n`group by cancelled`\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical Tasks with Obsidian Tasks Plugin in Markdown\nDESCRIPTION: This snippet demonstrates how to structure parent-child relationships between tasks using markdown indentation and the #task tag in Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_1parent2children.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task parent\n    - [ ] #task child 1\n    - [ ] #task child 2\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by status.name Property in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to sort tasks based on the nested property status.name. It is used in the context of the Obsidian Tasks plugin to order task objects or entries by their current status's name. The snippet relies on the plugin's understanding of task properties and expects that task objects contain a status attribute with a name field. The output would be a sorted list of tasks arranged according to their status names in ascending order.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.statuses_task.status.name_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.status.name\n```\n\n----------------------------------------\n\nTITLE: Embedding a TypeScript Snippet\nDESCRIPTION: Shows how to embed a section of a TypeScript file as a code snippet. The process requires surrounding the snippet with `begin-snippet:` and `end-snippet` comments. Then, in the markdown file, you use `snippet:` followed by the snippet's name.  Running `mdsnippets` replaces the `snippet:` line with a code block that contains the snippet.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Embedding code and data in documentation.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntest('SimpleVerify', () => {\n    verify('Hello From Approvals');\n});\n```\n\n----------------------------------------\n\nTITLE: Example Query: GTD Contexts - Tasks Not in Several Locations (AND/NOT)\nDESCRIPTION: Presents a less maintainable alternative for finding tasks not doable in specific locations. It explicitly checks that the tags do not include each context, combining these conditions with AND.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n# Show all tasks I CANNOT do in this area - HARDER WAY\n(tags do not include #context/loc1) AND \\\n  (tags do not include #context/loc2) AND \\\n  (tags do not include #context/loc3)\n```\n\n----------------------------------------\n\nTITLE: Explain Filters with No Filters - Tasks\nDESCRIPTION: This Tasks block with the `explain` instruction displays the explanation of the filter conditions, but because there are no specific filters defined besides `limit 1` , it should explain the base behavior. This allows to display the behavior when no specific filters are used.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Explain Filters.md#_snippet_5\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nexplain\nlimit 1\n```\n```\n\n----------------------------------------\n\nTITLE: Ignoring Global Query - Obsidian Tasks Query\nDESCRIPTION: Illustrates how to prevent the configured Global Query from being applied to a specific task block. Including `ignore global query` anywhere within the block's instructions causes only the instructions written directly in the block to be executed. Requires Tasks v4.6.0+.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Global Query.md#_snippet_2\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\ntags include work\nignore global query\n```\n\n----------------------------------------\n\nTITLE: Recurring Task with Multiple Dates in Markdown\nDESCRIPTION: Shows a recurring task with both scheduled and due dates, demonstrating how relative date spacing is maintained in the new task instance.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Mow the lawn 🔁 every 2 weeks ⏳ 2021-10-28 📅 2021-10-30\n```\n\n----------------------------------------\n\nTITLE: Filter tasks with invalid due dates (JavaScript)\nDESCRIPTION: This JavaScript snippet filters tasks that have an invalid due date. It uses the `task.due.moment` property to check if the due date is valid using `!date.isValid()`. If `task.due.moment` is null, it returns false.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function \\\n    const date = task.due.moment; \\\n    return date ? !date.isValid() : false;\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Happening Date After (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'happens after' filter (checking due, start, or scheduled date) combined with 'OR NOT'. This query matches all tasks by including those happening after 2021-12-27 OR those not.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_100\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(happens after 2021-12-27) OR NOT (happens after 2021-12-27)\n```\n\n----------------------------------------\n\nTITLE: Filtering Not Blocking and Not Blocked Tasks\nDESCRIPTION: This Obsidian Tasks query filters for tasks that are neither blocking nor blocked, suggesting they can be done at any time. It excludes DONE, CANCELLED, and NON_TASK statuses and restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nis not blocking\nis not blocked\n\n# DONE, CANCELLED and NON_TASK are never blocking nor blocked,\n# so we need to exclude those:\nnot done\n\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Tag or Heading Text Match in JavaScript\nDESCRIPTION: Filters tasks that either have a tag exactly matching '#context/home' on the task line or whose preceding heading contains the text '#context/home' anywhere. Uses optional chaining and array search with 'find' to identify matching tags. Returns a boolean indicating task inclusion. Note: the heading text match is imprecise and could match nested tags such as '#context/home/ground-floor'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.heading_docs.approved.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst wanted = '#context/home'; \\nreturn task.heading?.includes(wanted) || task.tags.find((tag) => tag === wanted) && true || false;\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks for Fridays Using Obsidian Tasks JavaScript Filter\nDESCRIPTION: This snippet filters tasks using a JavaScript function that checks if the task's occurrence day, formatted using 'dddd', equals 'Friday'. It requires the Obsidian Tasks plugin with accessible task objects featuring a 'happens' property implementing a 'format' method (moment.js compatible). The filter expects the format string to return English weekday names; on non-English systems, localization may affect output, and the comparison string should match the system language.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.happens_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.happens.format('dddd') === 'Friday'\n```\n\n----------------------------------------\n\nTITLE: Filtering for Tasks Excluding NON_TASK and CANCELLED in JavaScript\nDESCRIPTION: This JavaScript snippet filters tasks, excluding those with status types 'NON_TASK' and 'CANCELLED'.  It uses the `includes()` method to determine if the task's status should be excluded by using a logical NOT operator (!).  The input is a task object, and the output is a boolean indicating if the task should be included (is neither NON_TASK nor CANCELLED).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.type_docs.approved.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type)\n```\n\n----------------------------------------\n\nTITLE: Defining Dates with Tasks Emoji Format - Markdown\nDESCRIPTION: This snippet demonstrates how to define created, scheduled, start, due, done, and cancelled dates for tasks using the Tasks plugin's emoji format in markdown. Each date is specified using a corresponding emoji followed by the date in YYYY-MM-DD format. The task must have the '#task' tag to be parsed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Tasks Emoji Format.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Has a created date ➕ 2023-04-13\n- [ ] #task Has a scheduled date ⏳ 2023-04-14\n- [ ] #task Has a start date 🛫 2023-04-15\n- [ ] #task Has a due date 📅 2023-04-16\n- [x] #task Has a done date ✅ 2023-04-17\n- [-] #task Has a cancelled date ❌ 2023-04-18\n```\n\n----------------------------------------\n\nTITLE: Example Query Block: Combining Path and Tag Filters (OR)\nDESCRIPTION: An example Obsidian Tasks query within a fenced code block. It finds all incomplete tasks ('not done') that are either located in a file path containing 'Peter' OR have the tag '#Peter'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n```tasks\nnot done\n(path includes Peter) OR (tags includes #Peter)\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Tasks in Original Order (Obsidian Tasks)\nDESCRIPTION: Displays all tasks from the current folder (`folder includes {{query.file.folder}}`), sorted by their line number (`sort by function task.lineNumber`) to maintain the original order as written in the file. Backlinks are hidden (`hide backlinks`), and tasks are shown in a hierarchical tree structure (`show tree`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by function task.lineNumber\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by multiple status symbols (shortcut)\nDESCRIPTION: This snippet filters tasks to find those with a status symbol of `P`, `C`, `Q`, or `A`. It uses the `includes` method on a string containing the allowed symbols to check if the task's status symbol is present.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.symbol_docs.approved.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function 'PCQA'.includes(task.status.symbol)\n```\n\n----------------------------------------\n\nTITLE: Equivalent Query (Post-7.0.0): Implicit Space Handling\nDESCRIPTION: Shows the equivalent query with spaces explicitly added around the 'AND' operator. In Tasks 7.0.0 and later, this is functionally identical to the version without spaces, as the spaces are inferred.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n(path includes a) AND (path includes b)\n```\n\n----------------------------------------\n\nTITLE: Using Full-Line Comments in Tasks Plugin Query - tasks\nDESCRIPTION: Demonstrates the syntax for full-line comments in the Obsidian Tasks plugin query language. Lines beginning with the '#' character are treated as comments and ignored during query processing. This feature allows users to document or disable query lines without affecting behavior. The example shows how to comment out the 'short mode' option.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Comments.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\n# Uncomment the following line to enable short mode:\n# short mode\n```\n\n----------------------------------------\n\nTITLE: Advanced Grouping by Due Date Status (Including Tomorrow) - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Extends status grouping to include a separate group for tasks due 'Tomorrow'. The logic distinguishes between Undated, Invalid date, Overdue, Today, Tomorrow, and Future, with clearly labeled headings and hidden sort keys (e.g., '%%3%% ==Tomorrow=='). Particularly useful for users who want a heads-up for near-term deadlines. Relies on moment.js and local label function.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\\n    const date = task.due.moment; \\\n    const tomorrow  = moment().add(1,'days'); \\\n    const now = moment(); \\\n    const label = (order, name) => `%%${order}%% ==${name}==`; \\\n    if (!date)                           return label(5, 'Undated'); \\\n    if (!date.isValid())                 return label(0, 'Invalid date'); \\\n    if (date.isBefore(now, 'day'))       return label(1, 'Overdue'); \\\n    if (date.isSame(now, 'day'))         return label(2, 'Today'); \\\n    if (date.isSame(tomorrow, 'day'))    return label(3, 'Tomorrow'); \\\n    return label(4, 'Future');\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Non-Empty List Property in Obsidian Tasks\nDESCRIPTION: A custom function filter that finds tasks in files where a specific list property exists and contains at least one item. It checks the length of 'sample_list_property' to be greater than zero.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.obsidian_properties_task.file.frontmatter_results.approved.txt#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfilter by function task.file.property(\"sample_list_property\")?.length > 0\n```\n\n----------------------------------------\n\nTITLE: Filtering by List Property Length Equal to Zero (Obsidian Tasks JavaScript)\nDESCRIPTION: Filters tasks based on whether a specified file list property exists and contains no items. It uses optional chaining (`?.`) to safely access the `length` property. Useful for finding tasks in files with an empty list under a specific key. Requires the file to have the property; otherwise, it evaluates to `false`. Returns `true` if the list exists and is empty, `false` otherwise.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.obsidian_properties_task.file.frontmatter_docs.approved.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.property(\"sample_list_property\")?.length === 0\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no created date\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no created date'. The term is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_60\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no created date\",\n        \"f2\": \"no created date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing task display with UI options in Obsidian Tasks\nDESCRIPTION: Shows tasks due within a specific date range while customizing the display by hiding the due date and edit button. Demonstrates both date range filtering and UI customization options.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_7\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndue 2021-05-01 2021-05-14\nhide due date\nhide edit button\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Status Name - Javascript\nDESCRIPTION: This snippet shows how to use `sort by function` to sort tasks alphabetically based on their status name (e.g., 'Todo', 'Done', 'In Progress'). The `task.status.name` property provides the string value for the status name, which is then used for sorting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.status.name\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Day of the Week (Date Order, Monday Start, Sunday Last) - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Provides advanced grouping by day of the week, explicitly moving Sunday to the end for Monday-based week order. If `task.due` is missing, labels the task as 'Undated'. Otherwise, applies a special format for Sunday ('[%%][8][%%]dddd') and a date-based format for other days. Suitable for teams or users operating on a Monday-to-Sunday schedule. Includes inline comments, multiline string syntax, and requires moment.js.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function                                   \\\n    const date = task.due;                          \\\n    if (!date.moment) {                             \\\n        return \"Undated\";                           \\\n    }                                               \\\n    if (date.moment.day() === 0) {                  \\\n        {{! Put the Sunday group last: }}           \\\n        return date.format(\"[%%][8][%%]dddd\");      \\\n    }                                               \\\n    return date.format(\"[%%]d[%%]dddd\");\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Negative Number of Tags in JavaScript for Descending Order\nDESCRIPTION: This snippet sorts tasks by the negative value of their tag count, effectively ordering tasks in descending order by number of tags. It provides an alternative approach to prioritize more tagged tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags_docs.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function -task.tags.length\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by filename containing specific text in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to filter tasks based on file names that include a specific substring. The `.includes()` method is used to check if the `task.file.filename` contains the desired text, finding tasks in files such as `14.1.0 Release.md` and `4.1.0 Release Notes.md`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.filename.includes(\"4.1.0 Release\")\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Category with 'Tomorrow' in Obsidian Tasks - JavaScript\nDESCRIPTION: Extends previous category groupings by adding a 'Tomorrow' category, which appears between 'Today' and 'Future'. Calculates both now and tomorrow using Moment.js, returning uniquely formatted group names. Useful when users want finer granularity in upcoming and urgent tasks; requires tasks to expose 'due.moment' and use Moment.js for comparisons.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\\n    const date = task.due.moment; \\\n    const tomorrow  = moment().add(1,'days'); \\\n    const now = moment(); \\\n    const label = (order, name) => `%%${order}%% ==${name}==`; \\\n    if (!date)                           return label(5, 'Undated'); \\\n    if (!date.isValid())                 return label(0, 'Invalid date'); \\\n    if (date.isBefore(now, 'day'))       return label(1, 'Overdue'); \\\n    if (date.isSame(now, 'day'))         return label(2, 'Today'); \\\n    if (date.isSame(tomorrow, 'day'))    return label(3, 'Tomorrow'); \\\n    return label(4, 'Future');\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Date Category - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Groups tasks based on the `task.due.category.groupText` property into five broad categories: `Invalid date`, `Overdue`, `Today`, `Future`, and `Undated`, ensuring that groupings are displayed in a logical order. Requires the Tasks plugin for Obsidian, with `task.due` available as a `TasksDate` object. This approach is useful for breaking down a cluttered list of due dates into hierarchical sections and supports additional values such as `task.due.category.name` and `task.due.category.sortOrder` for further customization.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.category.groupText\n```\n\n----------------------------------------\n\nTITLE: Example Filenames Matching Supported Date Formats (Markdown)\nDESCRIPTION: Provides examples of file names that would match the built-in date formats ('YYYY-MM-DD' and 'YYYYMMDD'), enabling tasks within such files to have their scheduled date automatically set. No dependencies required; these are for user reference when naming files.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Use Filename as Default Date.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndaily/2022-10-12 Wednesday.md\nmeetings/rd. 2022-09-07.md\n20220612 - random thoughts.md\n```\n\n----------------------------------------\n\nTITLE: Toggling Done on Blank/Simple Line (Issue #460, Markdown)\nDESCRIPTION: Test case for issue #460. Demonstrates toggling 'done' on a blank line or a line with simple text (`wibble`). The expected result is prefixing the line with `- ` and placing the cursor appropriately. The `>>` indicates suggested cursor placement for testing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Toggle Done Cursor Fixes.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n>>\nwibble\n>> wibble\n```\n\n----------------------------------------\n\nTITLE: Finding Exact Short Tags with Regex Anchors\nDESCRIPTION: Demonstrates using the `$` anchor in an Obsidian Tasks regex query to find tasks with a specific, short tag (`#t`) and ensure no other characters follow it within the tag field. This prevents matching longer tags like `#task` or `#t/subtag`. The `i` flag ensures case-insensitivity.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ntag regex matches /#t$/i\n```\n\n----------------------------------------\n\nTITLE: Simplifying XOR Query with Description Includes\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using the XOR operator with two 'description includes' filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) XOR (description includes d2)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) XOR (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"description includes d2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Completion Day Using Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: This snippet demonstrates how to use a custom JavaScript filter in the Obsidian Tasks plugin to select only the tasks marked as done on a Thursday. It accesses the 'done' property of task objects, formats the date into the day of the week using the 'format' method, and checks for 'Thursday'. Dependencies include the Obsidian Tasks plugin with JavaScript query support. Key input is the task object, and the filter outputs a boolean indicating if the task was completed on a Thursday. If your system uses a non-English locale, replace 'Thursday' with the localized day name.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.done_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.done.format('dddd') === 'Thursday'\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks in the Same File as Query\nDESCRIPTION: This JavaScript snippet sorts tasks within the same file as the query before other files. It compares the `task.file.path` with `query.file.path`. True sort keys sort before false.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.path === query.file.path\n```\n\n----------------------------------------\n\nTITLE: Filtering by Exact File Path (Case-Insensitive) Using JavaScript\nDESCRIPTION: This snippet performs a case-insensitive equality check on file paths by converting both sides to lower case using toLocaleLowerCase() before comparison. It is useful for scenarios where file paths may differ in capitalization across operating systems. Inputs are task objects with file.path properties; output is true if the lower-cased paths match. Dependencies include JavaScript's toLocaleLowerCase() method, and attention must be paid to locale-specific behavior.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.path_docs.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase()\n```\n\n----------------------------------------\n\nTITLE: Sorting by Priority Name\nDESCRIPTION: Sorts tasks alphabetically by their priority name using `task.priorityName`. Requires the Obsidian Tasks plugin.  Note the difference in default priority names (\"Normal\") as opposed to other sort methods.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.priorityName\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Due Date Using Custom Function in Tasks Query Language\nDESCRIPTION: This snippet defines a Tasks query filter that selects tasks either due on a specific date (2023-07-10) or that have no due date but are under a heading containing that date. It uses a 'filter by function' with a JavaScript function accessing task properties such as 'task.happens.moment' and 'task.heading'. Dependencies include the Tasks plugin supporting function filters. Input is a list of tasks; output is tasks matching the due date criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters - Demo.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\n\nfilename includes Custom Filters - Demo\n\n# Infer happens date from heading for specific date, if not on task\nfilter by function task.happens.moment?.isSame('2023-07-10', 'day') || ( !task.happens.moment && task.heading.includes('2023-07-10'))\n```\n\n----------------------------------------\n\nTITLE: Creating Important Task Example\nDESCRIPTION: This snippet provides an example of creating an important task in the Tasks plugin using custom statuses.  The example shows how to create a task with the '!' status, and then how it cycles through 'D' and 'X' statuses when clicking on the checkbox.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Set up custom statuses.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- [!] #task Do important stuff\n```\n\n----------------------------------------\n\nTITLE: Sort Tasks by File Path in Obsidian Tasks (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a sorting function for the Obsidian Tasks plugin. It prioritizes tasks located in the same file as the query. It compares `task.file.path` with `query.file.path` and sorts `true` values (tasks in the same file) before `false` values (tasks in other files).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.folder_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.path === query.file.path\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Priority in Obsidian Tasks Plugin\nDESCRIPTION: Defines filters to categorize tasks based on priority levels, supporting conditions like above, below, or not, relative to specific priority labels. Includes sorting and grouping options using 'task.priorityName', 'task.priorityNameGroupText', and 'task.priorityNumber'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_21\n\nLANGUAGE: Markdown\nCODE:\n```\n`priority is (above, below, not)? (lowest, low, none, medium, high, highest)`\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Task Items in Markdown Lists with Obsidian Tasks\nDESCRIPTION: This example demonstrates the proper syntax for nesting a task checkbox item under a regular list item in Obsidian markdown. The parent item is a regular list item with a hyphen bullet, while the child item is an unchecked task with proper indentation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_listitem_task.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- parent list item\n    - [ ] child task\n```\n\n----------------------------------------\n\nTITLE: Filtering completed tasks by completion date in Obsidian Tasks\nDESCRIPTION: Displays tasks that were completed before a specific date. This can be useful for reviewing historical task completion patterns or generating reports on past activities.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_8\n\nLANGUAGE: tasks\nCODE:\n```\ndone before 2020-12-01\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by folder name prefix in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to filter tasks in files within folders that start with a specific prefix, by using `task.file.folder.includes(\"Work/Projects\")` without a trailing `/`, the filter will include tasks from folders such as `Work/Projects 2023/` and `Work/Projects Top Secret/`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder.includes(\"Work/Projects\")\n```\n\n----------------------------------------\n\nTITLE: Tasks Plugin Query: Overdue Tasks\nDESCRIPTION: This code snippet defines a Tasks query to filter for tasks that are not done and are due before the current date. It utilizes the `date:YYYY-MM-DD` template to represent the current date. This setup helps display tasks that have passed their deadline, prompting the user to address them.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Daily Agenda.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\nnot done\ndue before {{date:YYYY-MM-DD}}\n```\n```\n\n----------------------------------------\n\nTITLE: Tasks query for non-blocked tasks\nDESCRIPTION: This Tasks query searches for tasks that are not yet done and are not blocked by any dependencies. It uses the `is not blocked` filter in conjunction with `not done` to find tasks that are ready to be worked on.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nis not blocked\n```\n\n----------------------------------------\n\nTITLE: Querying with Single-Line Property with Spaces - Tasks\nDESCRIPTION: This snippet demonstrates how to read a Tasks instruction from a single-line property named 'task_instruction_with_spaces' that contains extra spaces. The embedded property value is used in the Tasks query, and the results are limited to 10.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/query_using_properties.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nexplain\nignore global query\n{{query.file.property('task_instruction_with_spaces')}}\nlimit 10\n```\n\n----------------------------------------\n\nTITLE: Sorting/Grouping/Displaying Dates in Obsidian Tasks Plugin Syntax\nDESCRIPTION: Commands used within a `tasks` block to sort, group, or control the display of task date fields (done, created).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_7\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nsort by done\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ngroup by done\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nhide done date\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nsort by created\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ngroup by created\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nhide created date\n```\n\n----------------------------------------\n\nTITLE: Filtering Obsidian Tasks by Unknown Status Name\nDESCRIPTION: This filter expression, used within the Obsidian Tasks plugin, identifies tasks where the `status.name` property evaluates to 'Unknown'. This is useful for finding tasks that use custom status symbols not yet configured in the Tasks plugin settings. The '=>' indicates the expected results.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.name_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Tasks Filter\nCODE:\n```\nfilter by function task.status.name === 'Unknown'\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Recurring Status in JavaScript\nDESCRIPTION: This code snippet sorts tasks based on whether they are recurring or not. Recurring tasks will be listed first, followed by non-recurring tasks. It uses the task.isRecurring property which returns a boolean value.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.isRecurring_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.isRecurring\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by modified description with text replacement\nDESCRIPTION: This snippet demonstrates grouping tasks by their descriptions after replacing 'short' with '==short=='. It uses the `replace()` JavaScript method to highlight or modify specific words in the description for grouping purposes. It showcases how to modify text for better grouping readability.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.description_results.approved.txt#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\ngroup by function task.description.replace('short', '==short==')\nHighlight the word \"short\" in any group descriptions.\n=>\n==short== description\nlong description Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quam ipsum, consectetur ut dolor nec, fringilla lobortis mi. Vestibulum gravida tincidunt urna nec ornare. Cras sit amet sagittis sapien, vitae mattis velit. Vestibulum sem tortor, blandit at ultrices eget, ultrices eget odio. Donec efficitur purus massa, vel molestie turpis tincidunt id. \nmy description\nmy description #context/home\nmy description #context/work\nmy description #multiple-tags1 #multiple-tags2\nmy description #project/project1\nmy description #tag\nmy description #tag/subtag\nmy description #tag/subtag/sub-sub-tag\n```\n\n----------------------------------------\n\nTITLE: Group Tasks by Folder (No Markdown Escaping) - JavaScript\nDESCRIPTION: This JavaScript snippet defines a grouping function within the Obsidian Tasks plugin to group tasks based on the task's file folder. It directly uses `task.file.folder` which means that any markdown characters are not escaped. This function is used to group tasks in the same way as 'group by folder'.  It takes no specific input parameters and returns groups of tasks based on folder.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.folder_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.folder\n```\n\n----------------------------------------\n\nTITLE: Hiding On Completion Status of Tasks\nDESCRIPTION: Provides an option to hide the 'on completion' status of tasks, controlling visibility related to task completion within the task list or query results.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_20\n\nLANGUAGE: Markdown\nCODE:\n```\n`hide on completion`\n```\n\n----------------------------------------\n\nTITLE: Filtering and Grouping Tasks with Obsidian Tasks Query Syntax - tasks\nDESCRIPTION: This snippet defines a query using the Obsidian Tasks plugin syntax that filters tasks whose file path includes the phrase \"Sample Tasks for Styling Documentation\" and groups the resulting tasks by their heading. It requires the Obsidian Tasks plugin to run the query within Obsidian markdown files. The inputs are the configured query parameters, and the output is a dynamically generated list of matching tasks organized under headings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Sample Tasks for Styling Documentation.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Sample Tasks for Styling Documentation\ngroup by heading\n```\n\n----------------------------------------\n\nTITLE: Grouping by Formatted Created Date (JavaScript)\nDESCRIPTION: Groups tasks based on their creation date, applying a custom date format string \"YYYY-MM-DD dddd\". Similar to the start date example, tasks without a created date are grouped under an empty string header. Requires the task object (`task`) and its `created` property with a `format` method.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.created.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Specific Tag in File Tags List - Javascript (Tasks Query)\nDESCRIPTION: Filters tasks based on whether a specific, exact tag is present in the list of tags defined in the file's `tags` frontmatter property. Uses `task.file.property('tags')` which returns an array.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.property('tags').includes('#project/project-1')\n```\n\n----------------------------------------\n\nTITLE: Filtering by Exact File Path (Case-Sensitive) Using JavaScript\nDESCRIPTION: This snippet filters tasks by checking for exact, case-sensitive equality between the task's file path and the specified string, using the JavaScript strict equality operator (===). It requires including the full file extension in the query. Inputs are a task object with a file.path property; the function returns true if the path matches exactly. There are no external dependencies, but case and special characters must be carefully managed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.path_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.path === 'tasks releases/4.1.0 Release.md'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Filtered Output for Tasks Using Relative Date Query (text)\nDESCRIPTION: This snippet shows the expected output when running the dynamic 'due before in 7 days' query on the sample data, listing tasks due within the next 7 days. It is intended for manual or visual confirmation of correct filter behavior in the Obsidian Tasks plugin. It does not represent actual query logic but the result set for validation purposes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Find tasks for coming 7 days.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n0 days 📅 2022-09-08\n1 days 📅 2022-09-09\n2 days 📅 2022-09-10\n3 days 📅 2022-09-11\n4 days 📅 2022-09-12\n5 days 📅 2022-09-13\n6 days 📅 2022-09-14\n7 tasks\n```\n\n----------------------------------------\n\nTITLE: Managing Task Dependencies using Dataview in Markdown\nDESCRIPTION: Explains how to define task dependencies using the inline Dataview fields `[id:: identifier]` and `[dependsOn:: identifiers]`. Shows examples of setting a unique ID for a task and specifying that another task depends on one or more task IDs, enabling task blocking features.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Formats/Dataview Format.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task do this first  [id:: dcf64c]\n- [ ] #task do this after first and some other task  [dependsOn:: dcf64c,0h17ye]\n```\n\n----------------------------------------\n\nTITLE: Defining Task Statuses for LYT Mode\nDESCRIPTION: This code snippet defines the supported task statuses within the Obsidian Tasks plugin when used with the LYT Mode theme. It specifies the symbol, next status, status name, status type, and whether custom styling is needed for each status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/LYT Mode Theme.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- [ ] #task `space` Unchecked\n- [x] #task `x` Checked\n- [>] #task `>` Rescheduled\n- [<] #task `<` Scheduled\n- [!] #task `!` Important\n- [-] #task `-` Cancelled\n- [/] #task `/` In Progress\n- [?] #task `?` Question\n- [*] #task `*` Star\n- [n] #task `n` Note\n- [l] #task `l` Location\n- [i] #task `i` Information\n- [I] #task `I` Idea\n- [S] #task `S` Amount\n- [p] #task `p` Pro\n- [c] #task `c` Con\n- [b] #task `b` Bookmark\n- [f] #task `f` Fire\n- [k] #task `k` Key\n- [w] #task `w` Win\n- [u] #task `u` Up\n- [d] #task `d` Down\n```\n\n----------------------------------------\n\nTITLE: In Progress Status Type Name: IN_PROGRESS\nDESCRIPTION: Represents the internal type name for the 'In Progress' task status. This identifier is used by the plugin to refer to the in-progress status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_todo-in_progress-done.approved.md#_snippet_4\n\nLANGUAGE: Configuration\nCODE:\n```\nIN_PROGRESS\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Obsidian Tasks Status Symbols\nDESCRIPTION: A detailed markdown table showing all available task status symbols in the Obsidian Tasks plugin. The table includes the status symbol, next status symbol, status name (with query examples), status type (with query examples), and styling requirements for each task status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_ITS_Table.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name<br>`status.name includes...`<br>`sort by status.name`<br>`group by status.name` | Status Type<br>`status.type is...`<br>`sort by status.type`<br>`group by status.type` | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `space` | `x` | Unchecked | `TODO` | No |\n| `x` | `space` | Regular | `DONE` | No |\n| `X` | `space` | Checked | `DONE` | Yes |\n| `-` | `space` | Dropped | `CANCELLED` | Yes |\n| `>` | `x` | Forward | `TODO` | Yes |\n| `D` | `x` | Date | `TODO` | Yes |\n| `?` | `x` | Question | `TODO` | Yes |\n| `/` | `x` | Half Done | `IN_PROGRESS` | Yes |\n| `+` | `x` | Add | `TODO` | Yes |\n| `R` | `x` | Research | `TODO` | Yes |\n| `!` | `x` | Important | `TODO` | Yes |\n| `i` | `x` | Idea | `TODO` | Yes |\n| `B` | `x` | Brainstorm | `TODO` | Yes |\n| `P` | `x` | Pro | `TODO` | Yes |\n| `C` | `x` | Con | `TODO` | Yes |\n| `Q` | `x` | Quote | `TODO` | Yes |\n| `N` | `x` | Note | `TODO` | Yes |\n| `b` | `x` | Bookmark | `TODO` | Yes |\n| `I` | `x` | Information | `TODO` | Yes |\n| `p` | `x` | Paraphrase | `TODO` | Yes |\n| `L` | `x` | Location | `TODO` | Yes |\n| `E` | `x` | Example | `TODO` | Yes |\n| `A` | `x` | Answer | `TODO` | Yes |\n| `r` | `x` | Reward | `TODO` | Yes |\n| `c` | `x` | Choice | `TODO` | Yes |\n| `d` | `x` | Doing | `IN_PROGRESS` | Yes |\n| `T` | `x` | Time | `TODO` | Yes |\n| `@` | `x` | Character / Person | `TODO` | Yes |\n| `t` | `x` | Talk | `TODO` | Yes |\n| `O` | `x` | Outline / Plot | `TODO` | Yes |\n| `~` | `x` | Conflict | `TODO` | Yes |\n| `W` | `x` | World | `TODO` | Yes |\n| `f` | `x` | Clue / Find | `TODO` | Yes |\n| `F` | `x` | Foreshadow | `TODO` | Yes |\n| `H` | `x` | Favorite / Health | `TODO` | Yes |\n| `&` | `x` | Symbolism | `TODO` | Yes |\n| `s` | `x` | Secret | `TODO` | Yes |\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Status Symbol in JavaScript\nDESCRIPTION: This code snippet sorts tasks based on their status symbols, such as !, ?, >, etc. It is intended for use within Obsidian to organize tasks visually according to their completion or priority status. The snippet assumes an array of task objects with a 'status.symbol' property for sorting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.statuses_task.status.symbol_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function task.status.symbol\n```\n\n----------------------------------------\n\nTITLE: Generating date-offset task entries using Obsidian Templater syntax\nDESCRIPTION: This snippet generates task list items in markdown with dynamic date values generated using Templater's tp.date.now function. Each task uses a different integer offset for days (-9 to +9) applied to the current date, formatted as YYYY-MM-DD. Dependencies include Obsidian with the Templater plugin enabled. Each task line outputs a checkbox with a #task tag followed by three placeholders that display the target date, allowing for automated date annotations within task descriptions. The expected input is an integer day offset to tp.date.now; output is a markdown task line with inserted dates. Constraints include that these placeholders only render when Templater syntax is processed inside Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/_meta/templates/tasks with range of all dates - Templater plugin.md#_snippet_0\n\nLANGUAGE: templater\nCODE:\n```\n- [ ] #task -9 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -9) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", -9) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", -9) %>\n- [ ] #task -8 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -8) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", -8) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", -8) %>\n- [ ] #task -7 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -7) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", -7) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", -7) %>\n- [ ] #task -6 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -6) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", -6) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", -6) %>\n- [ ] #task -5 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -5) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", -5) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", -5) %>\n- [ ] #task -4 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -4) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", -4) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", -4) %>\n- [ ] #task -3 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -3) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", -3) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", -3) %>\n- [ ] #task -2 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -2) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", -2) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", -2) %>\n- [ ] #task -1 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -1) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", -1) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", -1) %>\n- [ ] #task 0 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 0) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 0) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 0) %>\n- [ ] #task 1 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 1) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 1) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 1) %>\n- [ ] #task 2 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 2) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 2) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 2) %>\n- [ ] #task 3 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 3) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 3) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 3) %>\n- [ ] #task 4 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 4) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 4) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 4) %>\n- [ ] #task 5 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 5) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 5) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 5) %>\n- [ ] #task 6 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 6) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 6) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 6) %>\n- [ ] #task 7 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 7) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 7) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 7) %>\n- [ ] #task 8 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 8) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 8) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 8) %>\n- [ ] #task 9 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 9) %> ⏳ <% tp.date.now(\"YYYY-MM-DD\", 9) %> 📅 <% tp.date.now(\"YYYY-MM-DD\", 9) %>\n```\n\n----------------------------------------\n\nTITLE: Example Query: GTD Contexts - Tasks Not in Several Locations (NOT/OR)\nDESCRIPTION: Shows an easy way to find tasks that *cannot* be done in any of the specified GTD context locations. It uses the NOT operator to negate the combined OR conditions for tasks within those locations.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n# Show all tasks I CANNOT do in this area - EASY WAY:\nNOT ( \\\n  (tags include #context/loc1) OR \\\n  (tags include #context/loc2) OR \\\n  (tags include #context/loc3) \\\n)\n```\n\n----------------------------------------\n\nTITLE: Grouping by Truncated Task Description - JavaScript\nDESCRIPTION: This snippet truncates the task description to the first 25 characters and groups the tasks based on the truncated string.  It uses the `slice()` method of the string object in JavaScript. The expression evaluates to the first 25 characters of the task's description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description.slice(0, 25)\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Truncated Description - JavaScript\nDESCRIPTION: This JavaScript snippet truncates task descriptions to the first 25 characters and then groups the tasks. It utilizes the `slice(0, 25)` method to extract the first 25 characters of the `task.description`. This can be used to group tasks based on their beginning words or phrases and can be useful when grouping based on initial context or task topic.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.description_docs.approved.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description.slice(0, 25)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Date Property String Content in Obsidian Tasks\nDESCRIPTION: A custom function filter that finds tasks in files where a date property contains a specific substring. It checks if 'creation date' includes '2024' and uses the nullish coalescing operator to handle missing properties.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.obsidian_properties_task.file.frontmatter_results.approved.txt#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nfilter by function task.file.property('creation date')?.includes('2024') ?? false\n```\n\n----------------------------------------\n\nTITLE: Reverse Sorting by Urgency in JavaScript\nDESCRIPTION: Sorts tasks in reverse order by their urgency value. The `reverse` keyword is used with the `sort by function` instruction to change the sort order. The `task.urgency` property is used for comparison. Tasks with higher urgency values are sorted first.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Sorting.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function reverse task.urgency\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks: Search for remaining steps, excluding Final check\nDESCRIPTION: This Tasks query searches for tasks within a specific file path that do not include 'Final check' in their heading. It sorts results by line number and uses 'short mode' for conciseness. Requires the Obsidian Tasks plugin. The output is a sorted list of remaining tasks, excluding those with the specified heading.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Task Toggling Scenarios/On Completion Delete.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\npath includes {{query.file.path}}\nheading does not include Final check\nsort by function task.lineNumber\nshort mode\n```\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Description Count (All Tasks)\nDESCRIPTION: This code snippet defines a grouping function for Obsidian Tasks. It retrieves task counts from the cache, formats the output with the counts and description, and sorts tasks based on the description count. The output format includes a sorting key (%%1000000 - count%%) and the task description with the count.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters With Complex Caching.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function { \\n    const cacheKey = 'descriptionCountsAllTasks'; \\n    const getDescription = (t) => t.descriptionWithoutTags; \\n    const group = getDescription(task); \\n    const counts = query.searchCache[cacheKey].get(group); \\n    return `%%${1000000 - counts}%%` + group + \" (\" + (counts || 0) + \" tasks)\"; \\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Month and Week Number - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Groups tasks by both the month and ISO week number using a format like `2023%%-05%% May - Week 22`, rendered as `2023 May - Week 22` in Obsidian. The hidden month number ensures correct sorting of group headings even across years. Suitable when more granular time-based task grouping is necessary. Requires moment.js and the Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"YYYY[%%]-MM[%%] MMM [- Week] WW\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Status Flowchart with Mermaid\nDESCRIPTION: This Mermaid flowchart visually represents various task states in the Obsidian Tasks project, including Todo, Done, In Progress, Cancelled, and Non-Task, with distinct styles and transitions. The diagram uses class definitions for styling and arrow connections to indicate possible state changes, serving as a visual workflow guide.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_core-statuses.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Todo\"]:::TODO\n2[\"Done\"]:::DONE\n1 --> 2\n2 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks scheduled on Wednesdays using Obsidian Tasks in JavaScript\nDESCRIPTION: This code snippet filters tasks to show only those scheduled on Wednesdays. It uses the task.scheduled property with the format method to extract the weekday name and compares it with 'Wednesday'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.scheduled_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.scheduled.format('dddd') === 'Wednesday'\n```\n\n----------------------------------------\n\nTITLE: Tasks Query - Grouping by Status Type\nDESCRIPTION: This Obsidian Tasks query demonstrates how to group tasks based on their status type. It includes instructions to ignore the global query and to only include tasks from the current file.  It also specifies sorting by description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Theme - Border.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n# We need to ignore the global query, as it ignores this file:\nignore global query\n\npath includes {{query.file.path}}\ngroup by status.type\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Statuses (Text)\nDESCRIPTION: This snippet defines the various checkbox statuses supported by SlRvb's Alternate Checkboxes. It lists the symbol, name and description of each status that can be applied to tasks within Obsidian. This text is used within the documentation of the plugin to show what is possible.  It requires no external dependencies, but is designed to be used with the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/SlRvb's Alternate Checkboxes.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- [ ] #task `space` Unchecked\n- [x] #task `x` Regular\n- [X] #task `X` Checked\n- [-] #task `-` Dropped\n- [>] #task `>` Forward\n- [D] #task `D` Date\n- [?] #task `?` Question\n- [/] #task `/` Half Done\n- [+] #task `+` Add\n- [R] #task `R` Research\n- [!] #task `!` Important\n- [i] #task `i` Idea\n- [B] #task `B` Brainstorm\n- [P] #task `P` Pro\n- [C] #task `C` Con\n- [Q] #task `Q` Quote\n- [N] #task `N` Note\n- [b] #task `b` Bookmark\n- [I] #task `I` Information\n- [p] #task `p` Paraphrase\n- [L] #task `L` Location\n- [E] #task `E` Example\n- [A] #task `A` Answer\n- [r] #task `r` Reward\n- [c] #task `c` Choice\n- [d] #task `d` Doing\n- [T] #task `T` Time\n- [@] #task `@` Character / Person\n- [t] #task `t` Talk\n- [O] #task `O` Outline / Plot\n- [~] #task `~` Conflict\n- [W] #task `W` World\n- [f] #task `f` Clue / Find\n- [F] #task `F` Foreshadow\n- [H] #task `H` Favorite / Health\n- [&] #task `&` Symbolism\n- [s] #task `s` Secret\n```\n\n----------------------------------------\n\nTITLE: Querying Task Rendering Block for Section with Obsidian Tasks Plugin - tasks\nDESCRIPTION: This tasks query lists all tasks in the file section under the 'Rendering of Task Blocks' heading. It filters by the current file name and heading to ensure only relevant section tasks are displayed. Intended for verifying that the plugin accurately captures all tasks within this section, regardless of completion state. Requires an active Obsidian vault with the Tasks plugin; key parameters are path and section heading matches. The resulting output visually enumerates all section-related task lines for user validation, though it depends on strict heading naming and structure for accuracy.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Smoke Testing the Tasks Plugin.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Smoke Testing the Tasks Plugin\nheading includes Rendering of Task Blocks\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Cancelled Date using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to filter tasks based on their cancelled date. It uses the `task.cancelled.format('dddd')` function to check if the cancelled date falls on a specific day of the week (Wednesday in this example). This is for custom filtering within the Obsidian Tasks plugin. The day of the week may need to be localized.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.cancelled.format('dddd') === 'Wednesday'\n```\n\n----------------------------------------\n\nTITLE: Sorting by Tags including \"#context/\"\nDESCRIPTION: Sorts tasks by tags that contain \"#context/\". Requires the Obsidian Tasks plugin and uses `task.tags` to access tags, then `filter` and `sort`. Tasks without the tag will be sorted first.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.tags.filter( (tag) => tag.includes(\"#context/ \")).sort().join(\",\")\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Urgency - JavaScript\nDESCRIPTION: This JavaScript snippet sorts tasks by their urgency values. The 'reverse' keyword ensures that tasks with higher urgency are listed first, prioritizing them in the sorted output. This is used within the Obsidian Tasks plugin to order tasks based on importance.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.urgency_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function reverse task.urgency\n```\n\n----------------------------------------\n\nTITLE: Grouping by Date as YYYY-MM-DD - JavaScript\nDESCRIPTION: This snippet groups tasks by their due date, formatted as YYYY-MM-DD or empty string if no due date. This utilizes the `formatAsDate()` method. If there is no due date, there will be no heading. The expression evaluates to a string representing the task's due date formatted as YYYY-MM-DD.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.formatAsDate()\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by date and heading inclusion with JavaScript\nDESCRIPTION: This snippet filters tasks to find those due on a specific date or whose headings contain that date as a string. It utilizes optional chaining and date comparison via Moment.js, ensuring tasks match either criteria, illustrating flexible date and heading filtering.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst taskDate = task.due.moment; \nconst wanted = '2023-06-11'; \nreturn taskDate?.isSame(wanted, 'day') || ( !taskDate && task.heading?.includes(wanted)) || false\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Plugin for Uncompleted Items with Description\nDESCRIPTION: This snippet demonstrates a Tasks plugin query for all tasks that are not marked as done and whose description contains the word 'trash'. Place this code block within an Obsidian note to view filtered task results. Requires the Obsidian Tasks plugin to be installed and enabled. No code execution occurs; it dictates how tasks are collected and displayed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to style backlinks.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndescription includes trash\n```\n\n----------------------------------------\n\nTITLE: Recurring Task with Created Date in Markdown\nDESCRIPTION: Demonstrates how a recurring task appears with a created date when that setting is enabled.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] take out the trash 🔁 every Sunday ➕ 2023-03-10 📅 2021-05-02\n- [x] take out the trash 🔁 every Sunday 📅 2021-04-25 ✅ 2023-03-10\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with Exact Filename Match in Obsidian (JavaScript)\nDESCRIPTION: This snippet filters tasks to find files that exactly match the filename \"4.1.0 Release.md\". It uses equality operator `===` to ensure precision, requiring the complete filename including extension. Dependencies include the `task` object with a nested `file.filename` property. This filter is useful for identifying tasks associated with a specific release note file. Inputs are task objects, and the output is a boolean indicating whether the filename matches exactly. This approach is effective when filenames are unique and consistent.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.filename_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.filename === \"4.1.0 Release.md\"\n```\n\n----------------------------------------\n\nTITLE: Defining Task Statuses - Markdown\nDESCRIPTION: This Markdown table defines the task statuses, their transitions, names, types and styling requirements. It is likely designed to be consumed by a program or plugin that renders or interacts with tasks within a note-taking environment. Key parameters include the 'Status Symbol', 'Next Status Symbol', 'Status Name', 'Status Type', and 'Needs Custom Styling'. There are no apparent dependencies for this markdown data itself, as it represents static configuration. The output is a visual representation of task states and transitions, and, depending on the consuming software, it might have an interactive impact.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_important-cycle.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n| Status Symbol | Next Status Symbol | Status Name | Status Type | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `!` | `D` | Important | `TODO` | Yes |\n| `D` | `X` | Doing - Important | `IN_PROGRESS` | Yes |\n| `X` | `!` | Done - Important | `DONE` | Yes |\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by 'TODO' or 'IN_PROGRESS' - JavaScript\nDESCRIPTION: This snippet uses a custom filter function that searches for tasks whose status type is either 'TODO' or 'IN_PROGRESS'. It demonstrates the use of 'OR' logic to combine statuses. The filter uses the `includes()` method.  This is intended to replace manual 'OR' operations. The output shows the matching tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.type_results.approved.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function 'TODO,IN_PROGRESS'.includes(task.status.type)\nFind tasks that are either type `TODO` or type `IN_PROGRESS`.\nThis can be more convenient than doing Boolean `OR` searches.\n=>\n- [/] Status In Progress\n- [ ] Status Todo\n- [p] Unknown symbol\n- [s] Toggles to self\n- [P] Pro\n- [C] Con\n- [Q] Question\n- [A] Answer\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Canceled Date's Day of the Week in JavaScript\nDESCRIPTION: This snippet demonstrates a custom sorter function in JavaScript for the Obsidian Tasks plugin that sorts tasks based on the day of the week of their cancellation dates. It formats the cancellation date using the moment.js library and sorts alphabetically by the weekday name. Dependencies include the format method from moment.js, and the input is an array of task objects with cancellation date properties. The output is a sorted list of tasks prioritized by the weekday of cancellation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.cancelled_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function task.cancelled.format(\"dddd\")\\nsort by cancelled date's day of the week, alphabetically.\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Checkbox Statuses in Aura Theme for Obsidian Tasks\nDESCRIPTION: This code snippet shows the various custom checkbox statuses supported by the Aura Theme in Obsidian Tasks. Each line demonstrates a different task status with its corresponding symbol, such as incomplete, complete, cancelled, deferred, and many specialized statuses like important, question, and bookmark.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/Aura Theme.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- [ ] #task `space` incomplete\n- [x] #task `x` complete / done\n- [-] #task `-` cancelled\n- [>] #task `>` deferred\n- [/] #task `/` in progress, or half-done\n- [!] #task `!` Important\n- [?] #task `?` question\n- [R] #task `R` review\n- [+] #task `+` Inbox / task that should be processed later\n- [b] #task `b` bookmark\n- [B] #task `B` brainstorm\n- [D] #task `D` deferred or scheduled\n- [I] #task `I` Info\n- [i] #task `i` idea\n- [N] #task `N` note\n- [Q] #task `Q` quote\n- [W] #task `W` win / success / reward\n- [P] #task `P` pro\n- [C] #task `C` con\n```\n\n----------------------------------------\n\nTITLE: Incorrectly filter tasks by exact urgency score (JavaScript)\nDESCRIPTION: This JavaScript code attempts to filter tasks with an exact urgency score of 10.29. This approach is unreliable due to floating-point precision issues and will likely not find any matching tasks. It serves as a negative example.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency === 10.29\n```\n\n----------------------------------------\n\nTITLE: Sorting by Description with Coloured Squares (Priority)\nDESCRIPTION: Sorts tasks based on the presence of colored squares in their descriptions, representing a custom priority system. The function returns an integer representing the square's position. Tasks without squares return 999, preserving original order.  Dependencies: Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function \\n    const priorities = [...'🟥🟧🟨🟩🟦'];  \\n    for (let i = 0; i < priorities.length; i++) {  \\n        if (task.description.includes(priorities[i])) return i;  \\n    }  \\n    return 999;\n```\n\n----------------------------------------\n\nTITLE: Enforcing Group Sort Order with task.priorityNumber in Obsidian Tasks - JavaScript\nDESCRIPTION: Creates a grouping expression using the task's priority number and name to control sort order for task groups. The hidden text inside '%%...%%' ensures the sort order is preserved even if headings are visually similar. Requires Obsidian Tasks and assumes 'task' object exposes 'priorityNumber' and 'priorityName' fields. Outputs headings from 'High priority' to 'Lowest priority' in order.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function '%%' + task.priorityNumber.toString() + '%%' + task.priorityName +' priority'\n```\n\n----------------------------------------\n\nTITLE: Multiple Text Filters with Boolean AND\nDESCRIPTION: Example of combining multiple text inclusion filters with AND operator. Shows how to search for tasks containing all three specified strings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_63\n\nLANGUAGE: text\nCODE:\n```\n'(description includes 1) AND (description includes 2) AND (description includes 3)'\n```\n\n----------------------------------------\n\nTITLE: Group Tasks by Immediate Parent Folder - JavaScript\nDESCRIPTION: This JavaScript snippet groups tasks by the immediate parent folder of the file containing the task. It extracts the parent folder using string manipulation methods such as `slice()`, `split()`, and `pop()`.  First removes the trailing slash, splits the path, and returns the last folder name.  It takes no specific parameters, using the `task.file.folder` data. This prevents empty strings for files at the top level.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.folder_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.folder.slice(0, -1).split('/').pop() + '/'\n```\n\n----------------------------------------\n\nTITLE: Code Block Query with Active Global Query and Explain - Obsidian Tasks - text\nDESCRIPTION: Defines a tasks code block with local filters while a global query is active, using 'explain' to show both global and local filter effects. Inputs combine a 'not done' status, a due date filter, and the 'explain' keyword, and depend on a previously configured global query. Output details both global and code-block-level query logic and resolved dates. Obsidian Tasks (v3.5.0 or newer) required.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nnot done\ndue next week\nexplain\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Obsidian Tasks in the Current File\nDESCRIPTION: Defines a custom sorting function for Obsidian Tasks queries that prioritizes tasks located in the same file as the query block. It compares the task's file path (`task.file.path`) with the query's file path (`query.file.path`). Tasks where this condition is true (same file) will appear before tasks where it is false (different file).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.folder_results.approved.txt#_snippet_1\n\nLANGUAGE: Custom Function\nCODE:\n```\nsort by function task.file.path === query.file.path\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks inside 'Work' folder using JavaScript\nDESCRIPTION: This snippet filters tasks located within the 'Work' directory inside the vault root. It matches the `task.file.root` path to 'Work/' exactly, emphasizing case sensitivity. The code assumes a context where task objects are accessible and their file path can be evaluated.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.root_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.root === 'Work/'\n```\n\n----------------------------------------\n\nTITLE: Combining Tag Filters with OR Operator in Obsidian Tasks Query Language\nDESCRIPTION: Demonstrates use of the OR Boolean operator to match tasks that have at least one of the specified tags. Requires the Obsidian Tasks plugin supporting Boolean queries. Inputs are tagged tasks, outputs are filtered tasks containing any mentioned tag. The key parameter is the list of tags included in the OR condition.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Boolean Combinations.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(tags includes #XX) OR (tags includes #YY)\n```\n\n----------------------------------------\n\nTITLE: Testing 'hide' Directives Styling - Obsidian Tasks Query\nDESCRIPTION: This query filters tasks in the current file matching \"priority\" and hides specific task metadata (priority, backlinks, urgency, edit button). It tests CSS styling applied to task list items where certain fields are hidden, expecting the entire task line to be colored red when the test CSS snippet `tasks-plugin-smoke-test-query-styling` is enabled. Requires the Obsidian Tasks plugin and the specified CSS snippet. Expected outcome: Task lines colored red.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Styling of Queries.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Styling of Queries\ndescription includes priority\nhide priority\nhide backlinks\nhide urgency\nhide edit button\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents - Shell\nDESCRIPTION: This code snippet demonstrates the usage of the 'ls -la' command in a shell to list all files and directories, including hidden ones, in long format with detailed information. No external dependencies are required beyond a standard Unix shell environment. The snippet is used as an example within both task and non-task lists to test Markdown rendering; inputs and outputs depend on the current directory contents.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/code_block_in_task.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls -la\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks in Original Order - Dataview - dataview\nDESCRIPTION: Fetches all tasks from the specified notes and sorts them by their original line order in ascending sequence. Requires Dataview; uses the 'line' field for sorting and does not change task filtering. Expected output is a list of tasks matching the original file structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_5\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nSORT line asc\n```\n\n----------------------------------------\n\nTITLE: Handling Syntax Error During Parsing of 'sort by function' in Tasks Query\nDESCRIPTION: This snippet showcases how the Obsidian Tasks plugin handles a syntax error triggered by incomplete or incorrect syntax inside a 'sort by function' expression during parsing. The code attempts to call 'task.due.formatAsDate(' without closing the parenthesis or completing the expression, causing a SyntaxError. This tests the plugin's robustness in detecting and reporting improper expressions before evaluation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Sorting.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nsort by function task.due.formatAsDate(\n```\n\n----------------------------------------\n\nTITLE: Combined Description and Priority Filters with AND\nDESCRIPTION: Example of combining text inclusion filter with priority filter using AND operator. Shows how to filter tasks containing specific text that have medium priority.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_67\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) AND (priority medium)'\n```\n\n----------------------------------------\n\nTITLE: Grouping by Truncated Description (JavaScript)\nDESCRIPTION: Groups tasks based on the first 25 characters of their description using JavaScript's `slice()` string method. This is useful for grouping tasks with similar but potentially long descriptions by their initial text. Requires the task object (`task`) and its `description` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description.slice(0, 25)\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - is blocking\nDESCRIPTION: Simplifies 'OR NOT' expression with 'is blocking'. 'is blocking' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_53\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"is blocking\",\n        \"f2\": \"is blocking\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Date and Time (Demo/Not Fully Supported) - Obsidian Tasks JavaScript\nDESCRIPTION: Formats and groups tasks by due date and time as \"YYYY-MM-DD HH:mm\" using formatAsDateAndTime(). Not fully supported by the Tasks plugin since it does not store times; using times in tasks may break task interpretation. Provided as a demonstration only. Input should avoid tasks with times set.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_docs.approved.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.formatAsDateAndTime()\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Recurrence using JavaScript\nDESCRIPTION: These snippets demonstrate how to filter tasks based on their recurrence status using JavaScript functions within the Obsidian Tasks plugin. The examples show the use of `task.isRecurring` to determine if a task is recurring or not, including how to combine this condition with other filters using Boolean operators. A more advanced example detects broken or invalid recurrence rules by checking the presence of the recurrence emoji in the original markdown despite `task.isRecurring` being false. Dependencies include the Obsidian Tasks plugin (version 1.22.0 or later) and use of task properties. Inputs are task objects with recurrence metadata, and outputs are filtered task lists matching the recurrence criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.isRecurring\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function !task.isRecurring\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁')\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status Type in Obsidian Tasks plugin - tasks\nDESCRIPTION: This snippet defines a query for the Obsidian Tasks plugin to group tasks by their status type. It ignores global queries, filters tasks by the current file path, groups results by the task's status type, and sorts them by their description. Dependencies include the Obsidian Tasks plugin and the context variable {{query.file.path}}. Inputs are implicitly all tasks within the specified file; the output is a grouped and sorted list of tasks based on status type. The query is intended for use in notes configured with the Obsidian Tasks plugin and may have limitations based on file context or plugin version.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Theme - Ebullientworks.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n# We need to ignore the global query, as it ignores this file:\nignore global query\n\npath includes {{query.file.path}}\ngroup by status.type\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Recurring Task Based on Original Date in Markdown\nDESCRIPTION: Shows how a recurring weekly task appears when completed late, with the new task scheduled based on the original date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] sweep the floors 🔁 every week ⏳ 2021-02-13\n- [x] sweep the floors 🔁 every week ⏳ 2021-02-06 ✅ 2022-02-13\n```\n\n----------------------------------------\n\nTITLE: Filtering by Date Property String Inclusion (Obsidian Tasks JavaScript)\nDESCRIPTION: Filters tasks based on whether a specified file date property exists and its string representation includes a specific substring. It uses optional chaining (`?.`) and nullish coalescing (`?? false`) for safe access and default evaluation. Useful for finding tasks in files created or associated with dates containing a certain year or pattern. Requires the file to have the property; otherwise, it evaluates to `false`. Returns `true` if the property exists and includes the substring, `false` otherwise.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.obsidian_properties_task.file.frontmatter_docs.approved.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.property('creation date')?.includes('2024') ?? false\n```\n\n----------------------------------------\n\nTITLE: Sorting by Description Length in JavaScript\nDESCRIPTION: Sorts tasks by the length of their description, with the shortest descriptions appearing first. This is achieved by using the `sort by function` instruction and evaluating the `task.description.length` expression for each task.  The output is a reordered list of tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Sorting.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.description.length\n```\n\n----------------------------------------\n\nTITLE: Custom Grouping by Task Status Name (JavaScript)\nDESCRIPTION: Groups tasks by their custom status names using the `group by function` instruction with `task.status.name`. This achieves the same result as the built-in `group by status.name` instruction, sorting groups alphabetically by status name. Requires Tasks plugin version 4.0.0 or later.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.status.name\n```\n\n----------------------------------------\n\nTITLE: Filtering Obsidian Tasks by priority number using JavaScript\nDESCRIPTION: This code snippet is a JavaScript expression intended for use within an Obsidian Tasks custom filter. It evaluates to `true` for tasks where the `task.priorityNumber` is even. The `task.priorityNumber` property maps priorities to integers (Highest=0, High=1, Medium=2, Low=3, Lowest=4, None=5). This filter will match tasks with Highest, Medium, and Low priorities.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.priorityNumber_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntask.priorityNumber % 2 === 0\n```\n\n----------------------------------------\n\nTITLE: Multiple Text Filters with Boolean AND\nDESCRIPTION: Example of combining multiple text inclusion filters with AND operator. Shows how to search for tasks containing all specified strings with extra spacing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_62\n\nLANGUAGE: text\nCODE:\n```\n'(description includes 1)   AND   (description includes 2)   AND   (description includes 3)   AND   (description includes 4)   AND   (description includes 5)   AND   (description includes 6)   AND   (description includes 7)   AND   (description includes 8)   AND   (description includes 9)'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Access of Non-Existent Task Field in Filter Function Causing Error\nDESCRIPTION: This snippet demonstrates an evaluation error by trying to access a property 'nonExistentField' which does not exist on the task object. This triggers an error during filter function evaluation within the Tasks plugin, illustrating the plugin's error detection and handling mechanism for invalid field access in custom filters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters - Demo.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\nfilter by function \\\n    task.nonExistentField\n```\n\n----------------------------------------\n\nTITLE: Querying Non-Blocking Tasks (Any Status)\nDESCRIPTION: This Obsidian Tasks query filters for tasks that are not blocking other tasks, regardless of their completion status. It restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_5\n\nLANGUAGE: tasks\nCODE:\n```\nis not blocking\n\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Filter tasks excluding default status symbols\nDESCRIPTION: This snippet filters tasks to find those with any status symbol that is not supported by Tasks in the default settings. It uses the `includes` method on a string containing the default status symbols and negates the result.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.symbol_docs.approved.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function !' -x/'.includes(task.status.symbol)\n```\n\n----------------------------------------\n\nTITLE: Sorting tasks by heading in Obsidian Tasks\nDESCRIPTION: This snippet demonstrates how to sort tasks by heading using the 'sort by function task.heading' command. Tasks without a preceding heading will have a `task.heading` value of `null` and will be sorted before tasks with headings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.heading_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.heading\n```\n\n----------------------------------------\n\nTITLE: Sort Tasks by Due Date's Day of Week - Obsidian Tasks Query\nDESCRIPTION: Sorts tasks based on the day of the week extracted from the 'due' date field using a custom JavaScript function. The `format(\"dddd\")` call formats the date into the full day name (e.g., 'Monday'). Tasks are then sorted alphabetically by this day name. This snippet is part of a larger query block within the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.due_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\nsort by function task.due.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Finding tasks with links to project notes in Obsidian Tasks\nDESCRIPTION: This query finds tasks that link to a note with the name matching the current file's project property. It handles various formats of Markdown links, including direct links, aliased links, heading links, and links within the same file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/Project Search.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nexplain\n(description includes [[{{query.file.property('project')}}]]) OR \\\n(description includes [[{{query.file.property('project')}}|) OR \\\n(description includes [[{{query.file.property('project')}}#) OR \\\n(description includes [[#) AND (filename includes {{query.file.property('project')}})\n```\n\n----------------------------------------\n\nTITLE: Simple Monthly Recurring Task in Markdown\nDESCRIPTION: Shows a task with 'every month' recurrence rule and how it handles month transitions, automatically adjusting to earlier dates when necessary.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] do stuff 🔁 every month 📅 2022-03-28\n- [x] do stuff 🔁 every month 📅 2022-02-28 ✅ 2022-02-28\n- [x] do stuff 🔁 every month 📅 2022-01-30 ✅ 2022-01-30\n- [x] do stuff 🔁 every month 📅 2021-12-30 ✅ 2021-12-30\n- [x] do stuff 🔁 every month 📅 2021-11-30 ✅ 2021-11-30\n- [x] do stuff 🔁 every month 📅 2021-10-31 ✅ 2021-10-31\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Query Folder and Subfolders - JavaScript\nDESCRIPTION: This JavaScript filter expression for Obsidian Tasks finds tasks in files located within the same folder as the query file and any of its subfolders. It dynamically uses `query.file.folder` to get the current query file's path and the `includes()` method for recursive matching.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_results.approved.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntask.file.folder.includes( query.file.folder )\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with Invalid Due Dates Using Moment.js in JavaScript\nDESCRIPTION: This snippet defines a filter function that checks whether a task's due date exists and is invalid using Moment.js. It returns true if the due date is present but not a valid date, allowing identification of tasks with incorrectly formatted or impossible due dates. No external dependencies beyond Moment.js are required. The input is a task object with a due date property, and the output is a boolean indicating invalidity.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst date = task.due.moment;\\nreturn date ? !date.isValid() : false;\n```\n\n----------------------------------------\n\nTITLE: Toggling Done on Incomplete Task (No Global Filter, Markdown)\nDESCRIPTION: Test case showing the toggle from an incomplete task (`- [ ] Wibble`) to a completed task (`- [x] Wibble`) when the global filter is *not* present. Cursor position relative to `>>` should be tested.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Toggle Done Cursor Fixes.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] w\n\n>> - [ ] wibble\n```\n\n----------------------------------------\n\nTITLE: Filtering for NON_TASK Tasks in JavaScript\nDESCRIPTION: This snippet filters tasks to identify those with a status type equal to 'NON_TASK'. It uses a function that likely iterates through a list of tasks and evaluates `task.status.type === 'NON_TASK'` for each task.  The expected input is a task object, and the output is a boolean indicating whether the task matches the specified status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.type_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.status.type === 'NON_TASK'\n```\n\n----------------------------------------\n\nTITLE: Grouping by Priority Number (JavaScript)\nDESCRIPTION: Groups tasks based on their priority represented as a number, where 0 is Highest priority and 5 is Lowest priority. This allows numerical sorting of priority groups. Requires the task object (`task`) and its `priorityNumber` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.priorityNumber\n```\n\n----------------------------------------\n\nTITLE: AnuPpuccin Theme Supported Task Statuses (Markdown Table)\nDESCRIPTION: Presents the custom task statuses supported by the AnuPpuccin theme in a Markdown table format. Details include the status symbol, the next symbol upon toggle, status name, status type (TODO, DONE, IN_PROGRESS, CANCELLED, NON_TASK), and whether custom styling is needed. This table is designed to be added via a one-click button in the Tasks settings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/AnuPpuccin Theme.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name<br>`status.name includes...`<br>`sort by status.name`<br>`group by status.name` | Status Type<br>`status.type is...`<br>`sort by status.type`<br>`group by status.type` | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `space` | `x` | Unchecked | `TODO` | No |\n| `x` | `space` | Checked | `DONE` | No |\n| `>` | `x` | Rescheduled | `TODO` | Yes |\n| `<` | `x` | Scheduled | `TODO` | Yes |\n| `!` | `x` | Important | `TODO` | Yes |\n| `-` | `space` | Cancelled | `CANCELLED` | Yes |\n| `/` | `x` | In Progress | `IN_PROGRESS` | Yes |\n| `?` | `x` | Question | `TODO` | Yes |\n| `*` | `x` | Star | `TODO` | Yes |\n| `n` | `x` | Note | `TODO` | Yes |\n| `l` | `x` | Location | `TODO` | Yes |\n| `i` | `x` | Information | `TODO` | Yes |\n| `I` | `x` | Idea | `TODO` | Yes |\n| `S` | `x` | Amount | `TODO` | Yes |\n| `p` | `x` | Pro | `TODO` | Yes |\n| `c` | `x` | Con | `TODO` | Yes |\n| `b` | `x` | Bookmark | `TODO` | Yes |\n| `\"` | `x` | Quote | `TODO` | Yes |\n| `0` | `0` | Speech bubble 0 | `NON_TASK` | Yes |\n| `1` | `1` | Speech bubble 1 | `NON_TASK` | Yes |\n| `2` | `2` | Speech bubble 2 | `NON_TASK` | Yes |\n| `3` | `3` | Speech bubble 3 | `NON_TASK` | Yes |\n| `4` | `4` | Speech bubble 4 | `NON_TASK` | Yes |\n| `5` | `5` | Speech bubble 5 | `NON_TASK` | Yes |\n| `6` | `6` | Speech bubble 6 | `NON_TASK` | Yes |\n| `7` | `7` | Speech bubble 7 | `NON_TASK` | Yes |\n| `8` | `8` | Speech bubble 8 | `NON_TASK` | Yes |\n| `9` | `9` | Speech bubble 9 | `NON_TASK` | Yes |\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters (Parentheses and Quotes) in XOR\nDESCRIPTION: Illustrates a parsing error with mixed parentheses and quotes as delimiters in an XOR expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) XOR \"is recurring\"'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Task Completion Behavior using Dataview in Markdown\nDESCRIPTION: Explains how to control whether a task is kept or deleted upon completion using the inline Dataview field `[onCompletion:: behavior]`. Shows examples for keeping the task (default), explicitly keeping it, deleting it, and deleting only the completed instance of a recurring task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Formats/Dataview Format.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Keep this task when done\n- [ ] #task Keep this task when done too  [onCompletion:: keep]\n- [ ] #task Remove this task when done  [onCompletion:: delete]\n- [ ] #task Remove completed instance of this recurring task when done  [repeat:: every day]  [onCompletion:: delete]\n```\n\n----------------------------------------\n\nTITLE: Replacing Backlink Text with an Icon in Obsidian Tasks Using CSS\nDESCRIPTION: This CSS snippet replaces backlink text with a link icon by embedding an SVG directly into the content property of backlink elements. Compatible with Tasks 3.0.0 and above, it targets the .plugin-tasks-list-item span.tasks-backlink > a selector. Place the snippet in your CSS snippets folder in Obsidian to activate. Dependencies include Obsidian CSS snippet support and the Tasks plugin; ensure compatibility with your current Tasks version.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to style backlinks.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* By Anna Kornfeld Simpson (@AnnaKornfeldSimpson) https://github.com/AnnaKornfeldSimpson\n   From https://github.com/obsidian-tasks-group/obsidian-tasks/discussions/834#discussioncomment-3028600\n\n   Then converted to embed the icon inside this .css file, to remove the need\n   for an internet connection, as follows:\n   1. Link icon downloaded from https://twemoji.twitter.com\n      https://github.com/twitter/twemoji/blob/master/assets/svg/1f517.svg\n      licensed under the CC-BY 4.0\n   2. SVG encoded for embedding here with https://yoksel.github.io/url-encoder/\n\nTasks 3.0.0 compatibility note.\n\n    Prior to Tasks 3.0.0, the first CSS line below was the following, with a '>'\n    separator.\n\nli.plugin-tasks-list-item > span.tasks-backlink > a {\n*/\nli.plugin-tasks-list-item span.tasks-backlink > a {\n    content: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 36 36'%3E%3Cpath fill='%238899A6' d='M15 9l6-6s6-6 12 0 0 12 0 12l-8 8s-6 6-12 0c-1.125-1.125-1.822-2.62-1.822-2.62l3.353-3.348S14.396 18.396 16 20c0 0 3 3 6 0l8-8s3-3 0-6-6 0-6 0l-3.729 3.729s-1.854-1.521-5.646-.354L15 9z'/%3E%3Cpath fill='%238899A6' d='M20.845 27l-6 6s-6 6-12 0 0-12 0-12l8-8s6-6 12 0c1.125 1.125 1.822 2.62 1.822 2.62l-3.354 3.349s.135-1.365-1.469-2.969c0 0-3-3-6 0l-8 8s-3 3 0 6 6 0 6 0l3.729-3.729s1.854 1.521 5.646.354l-.374.375z'/%3E%3C/svg%3E\");\n    height: .9em;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by full file path in JavaScript\nDESCRIPTION: This snippet provides a grouping function that groups tasks by their complete file path, retaining the file extension and not escaping any Markdown formatting characters in the path. It is intended for use in Obsidian task queries where grouping by precise file location is needed. No external dependencies are required beyond the task object's 'file.path' property. The input is a task object, and the output is a string representing that task's file path for grouping purposes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.path_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.path\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Formatted Start Date in JavaScript\nDESCRIPTION: This snippet groups tasks by their start date formatted as 'YYYY-MM-DD dddd'. It skips grouping tasks without a start date, instead using an empty string for such cases. The code relies on a task object with a 'start' property that can be formatted accordingly, likely depending on a date formatting library like moment.js or Day.js.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.start_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.start.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Generating Due Date Suggestions with Specific Date Input\nDESCRIPTION: This snippet shows the generated due date suggestion when a partial date (e.g., '27 oct') is entered. The system likely interprets the input and suggests a corresponding date in the YYYY-MM-DD format. The 'insertAt' and 'insertSkip' parameters likely indicate where to insert or modify the text.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__dataview__symbols_offers_correct_options_for_partial_due_date_lines.approved.txt#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"2022-10-27\",\n    \"appendText\": \"due:: 2022-10-27] \",\n    \"insertAt\": 16,\n    \"insertSkip\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Plugin with Path Placeholder - Tasks Query\nDESCRIPTION: Demonstrates how to use the Tasks plugin's placeholder feature to dynamically filter only tasks belonging to the current file, by inserting the {{query.file.path}} variable in the path filter. This enables task blocks to show only relevant items. No external dependencies are required, but Tasks v4.7.0 or later must be installed. The input is a Tasks query block, and the output is a rendered list of incomplete tasks in that file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to get tasks in current file.md#_snippet_0\n\nLANGUAGE: Tasks Query\nCODE:\n```\nnot done\npath includes {{query.file.path}}\n```\n\n----------------------------------------\n\nTITLE: Accessing task.due Property in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `task.due` property in Obsidian Tasks. This property holds the due date of a task as a `TasksDate` object, providing an interface to date-related information and methods. It will be null if no due date is assigned to the task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks in Exact Query Folder Without Sub-Folders Using JavaScript\nDESCRIPTION: Filters tasks in files located exactly in the folder specified by 'query.file.folder' using strict equality. This approach excludes tasks that reside in sub-folders, providing precise control over task locations when filtering by a dynamic folder path from the query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_docs.approved.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.folder === query.file.folder\n```\n\n----------------------------------------\n\nTITLE: Dynamic Task Query with Uppercase Path - Tasks\nDESCRIPTION: This snippet showcases using a JavaScript function to modify the file path before including it in the task query. It uses `query.file.path.toUpperCase()` to convert the path to uppercase. The Tasks plugin interprets the placeholder and executes the query accordingly. This requires the Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/Placeholder examples to capture in tests and docs.md#_snippet_1\n\nLANGUAGE: Tasks\nCODE:\n```\n```tasks\npath includes {{query.file.path.toUpperCase()}}\n```\n```\n\n----------------------------------------\n\nTITLE: JSON Translation Key Example\nDESCRIPTION: This JSON snippet illustrates the nested structure of translation keys within the `en.json` file. The keys are organized hierarchically to improve maintainability and reflect the application's structure. It allows for easy access to specific translatable strings within the codebase.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Translation/Overview of the translation setup.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modals\": {\n    \"customStatusModal\": {\n      \"editAvailableAsCommand\": {\n        \"name\": \"Available as command\"\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Creation Day (Monday) in Obsidian Tasks\nDESCRIPTION: This code snippet demonstrates how to filter tasks in Obsidian that were created on a Monday using the Tasks plugin. It leverages the task.created.format('dddd') function to extract the day of the week from the creation date and compares it to 'Monday'. On non-English systems, ensure the day of the week is provided in the local language.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.created_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.created.format('dddd') === 'Monday'\n```\n\n----------------------------------------\n\nTITLE: Description Filter with a Specific Context\nDESCRIPTION: This snippet filters tasks based on whether the description includes a specific context tag '#context/location1'. It's used to identify tasks related to a particular location.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescription includes #context/location1\n```\n\n----------------------------------------\n\nTITLE: Defining DONE Status ('2') Transitioning to IN_PROGRESS\nDESCRIPTION: Defines '2' as a DONE status symbol ('DONE followed by IN_PROGRESS'). It transitions to the '/' symbol (In Progress) when toggled, suitable for recurring tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n2\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks due today or earlier using Moment.js\nDESCRIPTION: This snippet filters tasks that are due today or earlier. It utilizes Moment.js to compare the task's due date with the current date, considering only the day, month, and year. The `isSameOrBefore` function checks if the task's due date is the same as or before the current date, returning true if it is and false otherwise.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Date (Date Only) - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Formats and groups tasks by due date in the format YYYY-MM-DD. If there is no due date, an empty string is used, resulting in no group heading. This is useful for date-based task organization without time information. Relies on moment.js and the Tasks plugin's custom date functions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.formatAsDate()\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Partial Filename (Obsidian Tasks Function)\nDESCRIPTION: This filter utilizes a custom function in Obsidian Tasks to locate tasks within files whose names contain the substring \"4.1.0 Release\". By using the `includes()` method and omitting the file extension, it allows for finding tasks in files like \"4.1.0 Release.md\", \"14.1.0 Release.md\", or \"4.1.0 Release Notes.md\".\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.filename_results.approved.txt#_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nfilter by function task.file.filename.includes(\"4.1.0 Release\")\n```\n\n----------------------------------------\n\nTITLE: Styling Task Buttons with Gradients and Unicode Icons in CSS\nDESCRIPTION: This CSS snippet enhances task buttons to mimic real button visuals with gradient backgrounds and shadowing, and assigns distinct Unicode icons for edit (U+1F58B) and postpone (U+1F4A4) actions. It applies padding, border-radius, and a linear gradient background to both buttons, and defines the icon via the ::after pseudo-element. The snippet depends only on standard CSS and should be included as a CSS snippet in Obsidian. Platform Unicode support may affect icon display; CSS variables such as --radius-s may need to be defined in your theme.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to style buttons.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.tasks-edit::after {\n    content: '\\1f58b';\n}\n\n.tasks-postpone::after {\n    content: '\\1f4a4';\n}\n\n.tasks-edit, .tasks-postpone {\n    background: linear-gradient(to bottom, #ffda89, #ffa07a);\n    padding: 2px 5px;\n    border-radius: var(--radius-s);\n    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Formatted Start Date (Obsidian Tasks Query)\nDESCRIPTION: This snippet shows a 'sort by function' line used within an Obsidian Tasks query block. It applies the `format(\"dddd\")` function to the `task.start` date, extracting the full day name (e.g., \"Monday\", \"Tuesday\"). The query then sorts the task list alphabetically based on these day names. This method depends on the Obsidian Tasks plugin's query language and Luxon.js-compatible date formatting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.start_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.start.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Default Obsidian Task Behavior (Keep on Completion)\nDESCRIPTION: This example shows a basic Obsidian task using Markdown checkbox syntax and a tag. By default, without an explicit `[onCompletion]` tag, completed tasks are kept in the note but marked as done.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_OnCompletion_dataview-include.approved.md#_snippet_0\n\nLANGUAGE: obsidian-tasks\nCODE:\n```\n- [ ] #task Keep this task when done\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Item in Obsidian Tasks Plugin Format\nDESCRIPTION: This snippet demonstrates how to create a task item using the Obsidian Tasks plugin format. The task includes a checkbox (unchecked), a hashtag for categorization, and the task description text.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_2_aliases.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Task in 'yaml_2_aliases'\n```\n\n----------------------------------------\n\nTITLE: Obsidian Property Interpretation in Tasks Queries - Markdown Table\nDESCRIPTION: A markdown table documenting how Obsidian Tasks interprets and returns different types of values stored in file frontmatter properties when accessed via the `task.file.property()` or `task.file.hasProperty()` functions in queries. It lists the property name, expected return type, and an example value.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type 1 | Example 1 |\n| ----- | ----- | ----- |\n| `task.file.hasProperty('creation date')` | `boolean` | `true` |\n| `task.file.property('creation date')` | `string` | `'2024-05-25T15:17:00'` |\n| `task.file.property('sample_checkbox_property')` | `boolean` | `true` |\n| `task.file.property('sample_date_property')` | `string` | `'2024-07-21'` |\n| `task.file.property('sample_date_and_time_property')` | `string` | `'2024-07-21T12:37:00'` |\n| `task.file.property('sample_list_property')` | `string[]` | `['Sample', 'List', 'Value']` |\n| `task.file.property('sample_number_property')` | `number` | `246` |\n| `task.file.property('sample_text_property')` | `string` | `'Sample Text Value'` |\n| `task.file.property('sample_text_multiline_property')` | `string` | `'Sample\\nText\\nValue\\n'` |\n| `task.file.property('sample_link_property')` | `string` | `'[[yaml_all_property_types_populated]]'` |\n| `task.file.property('sample_link_list_property')` | `string[]` | `['[[yaml_all_property_types_populated]]', '[[yaml_all_property_types_empty]]']` |\n| `task.file.property('tags')` | `string[]` | `['#tag-from-file-properties']` |\n```\n\n----------------------------------------\n\nTITLE: Documenting Tasks Plugin HTML Structure – Markdown\nDESCRIPTION: This snippet provides a commented pseudo-code block in Markdown that describes the HTML and CSS class structure generated by the Obsidian Tasks plugin when rendering task queries or reading view lists. It outlines the hierarchy, class names, and data attributes assigned to each task and its components, including checkboxes, descriptions, tags, priorities, recurrences, dates, IDs, and extras. The pseudo-HTML is not executable code but serves as a detailed, line-by-line reference for plugin users and theme developers wanting to understand how to target or customize different task parts via CSS. No additional dependencies are required, but familiarity with Obsidian's CSS, task plugin internals, and DOM structure is beneficial. This documentation is meant for inspection and not to be rendered directly.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Obsidian code block (div class=\"block-language-tasks\")\n  - Results list (ul class=\"plugin-tasks-query-result\") OR Reading View list (ul class=\"contains-task-list\")\n    - Task (li class=\"task-list-item\" + attributes like data-task-priority=\"medium\" data-task-due=\"past-1d\" + data-task=\"[custom_status]\" + data-line=\"[line]\")\n      - Task checkbox (li class=\"task-list-item-checkbox\")\n      - Task content (span class=\"tasks-list-text\")\n        - Task description and tags (span class=\"task-description\")\n          - Internal span\n            - Each tag in the description is wrapped in <a href class=\"tag\" data-tag-name=\"[tag-name]\">\n        - Task ID (span class=\"task-id\")\n          - Internal span\n        - Task 'depends on' (span class=\"task-dependsOn\")\n          - Internal span\n        - Task priority (span class=\"task-priority\" + data-task-priority attribute)\n          - Internal span\n        - Task recurrence rule (span class=\"task-recurring\")\n          - Internal span\n        - Task 'on completion' (span class=\"onCompletion\")\n          - Internal span\n        - Task created date (span class=\"task-created\" + data-task-created attribute)\n          - Internal span\n        - ... start date, scheduled date, due date, cancelled date and done date in this order\n      - Task extras (link, edit button, postpone button) (span class=\"task-extras\")\n  - Tasks count (div class=\"tasks-count\")\n\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Done Date Day of Week - Javascript\nDESCRIPTION: This snippet sorts tasks based on the day of the week they were marked as done. It accesses the done date via `task.done` and formats it to the full day name string using `.format(\"dddd\")`. `sort by function` then orders tasks alphabetically by this day name.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.done.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Non-Recurring Tasks in Obsidian Tasks\nDESCRIPTION: Selects tasks that are *not* marked as recurring using the `!task.isRecurring` function (negation). This filter is identical in function to the built-in `is not recurring` filter and can be combined with other conditions using Boolean operators (`&&` for AND, `||` for OR).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isRecurring_results.approved.txt#_snippet_1\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\nfilter by function !task.isRecurring\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Tags - JavaScript\nDESCRIPTION: Defines several functions for grouping tasks by their tags in different ways using tag lists. These include grouping by each tag individually, joining tags into a string for combined headings, sorting tags before joining to ensure consistent order, and filtering tags to include or exclude specific patterns like '#context/'. Requires that tasks have a \"tags\" property representing a list of tag strings. Outputs are strings or arrays representing the tags used as grouping headings. These functions demonstrate flexible grouping based on task metadata and tag processing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.join(\", \")\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.sort().join(\", \")\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.filter( (tag) => tag.includes(\"#context/\") )\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.filter( (tag) => ! tag.includes(\"#tag\") )\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by 'NON_TASK' Status - JavaScript\nDESCRIPTION: This snippet defines a custom filter function that retrieves tasks where the task status type is 'NON_TASK'. This filter is used to find tasks with the specific status, and would require Obsidian Tasks plugin to function. The expected output includes tasks with a matching status type.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.type_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.status.type === 'NON_TASK'\nFind tasks of type `NON_TASK`.\n=>\n- [Q] Status Non-Task\n```\n\n----------------------------------------\n\nTITLE: Querying and Explaining Tasks in Folders with Obsidian Tasks Plugin - Markdown\nDESCRIPTION: This snippet demonstrates how to use a fenced code block with \"tasks\" to filter tasks by their containing folder in Obsidian, sort results by their file paths, and reference the note's filename as an instruction, all within a Markdown file. It assumes the Obsidian Tasks community plugin is installed and enabled. The snippet uses template variables (e.g., {{query.file.folder}}, {{query.file.filenameWithoutExtension}}) to inject dynamic context, and includes an inline comment for explanatory context; it operates solely within the bounds of the Obsidian vault and does not support external querying.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 500.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```tasks\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Day of Week JavaScript\nDESCRIPTION: This snippet groups tasks by the day of the week, displaying them alphabetically. It uses the `task.due.format(\"dddd\")` function to format the date into the full day name.  Dependencies include a date handling library (likely Moment.js or similar) to access and format date values.  The input is a task object, and the output is a string containing the day names, sorted alphabetically.  The expected input is a date object and the output is a formatted string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Detail of Completed Recurring Task Instance\nDESCRIPTION: Isolates the first line from the previous 'Completed and Recurred' example, focusing on the completed task instance. It shows the DONE status '[x]' and the automatically added done date '✅ 2023-10-15'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n- [x] Do something 🔁 every day 📅 2023-10-15 ✅ 2023-10-15\n```\n\n----------------------------------------\n\nTITLE: Sorting by Priority Number\nDESCRIPTION: Sorts tasks by their priority number, from highest (0) to lowest (5), using `task.priorityNumber`.  Dependencies: Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.priorityNumber\n```\n\n----------------------------------------\n\nTITLE: Grouping by Raw Urgency (JavaScript)\nDESCRIPTION: Groups tasks based on their raw numerical urgency score. To ensure consistent sorting, Tasks may internally convert non-integer values to strings with a fixed number of decimal places. Requires the task object (`task`) and its `urgency` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.urgency\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - is not blocked\nDESCRIPTION: Simplifies 'OR NOT' expression with 'is not blocked'. 'is not blocked' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_54\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"is not blocked\",\n        \"f2\": \"is not blocked\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Regex and Path Filters with AND\nDESCRIPTION: Example of an Obsidian Tasks query combining a regular expression search on the task description with a path inclusion filter using the AND operator. It selects tasks whose description matches the regex '/buy/i' AND whose path includes 'some/sample/note.md'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_31\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n( description regex matches /buy/i ) AND ( path includes some/sample/note.md )\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by First Tag Level (Including '#') in Obsidian Tasks\nDESCRIPTION: This JavaScript function, used with 'group by function' in Obsidian Tasks, groups tasks based on the first level of their hierarchical tags, including the leading '#'. It iterates through each task's tags, splits the tag string by '/', and returns the first element (index 0).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[0] )\n```\n\n----------------------------------------\n\nTITLE: Filtering Completed Tasks with Obsidian Tasks (Tasks Query Language)\nDESCRIPTION: This snippet displays only the tasks marked as done (completed) in files whose path contains \"Custom Task Statuses\". The results are sorted by task description. Obsidian Tasks plugin is required. Input: none directly; Output: a sorted list of completed tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Custom Task Statuses.md#_snippet_2\n\nLANGUAGE: Tasks Query Language\nCODE:\n```\npath includes Custom Task Statuses\ndone\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Finding Tasks Recur Weekly and Contain 'when done' in Recurrence Rule\nDESCRIPTION: This snippet filters for tasks that recur every week and also include the phrase 'when done' in their recurrence rule. It uses a combined conditional check with logical AND to ensure both conditions are met. It assumes 'task' objects have a 'recurrenceRule' property with string value.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.recurrenceRule_docs.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.recurrenceRule.includes(\"every week\") && task.recurrenceRule.includes(\"when done\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Filtered Output for Tasks Due Within 7 Days (text)\nDESCRIPTION: This snippet illustrates the expected output when filtering tasks that are due up to and including the 7th day (2022-09-14) based on the provided sample data. It is intended for result verification when testing filter logic with the Obsidian Tasks plugin. The output lists the matching task descriptions and summarizes the count. No filtering logic is shown; this represents the result set.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Find tasks for coming 7 days.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0 days 📅 2022-09-08\n1 days 📅 2022-09-09\n2 days 📅 2022-09-10\n3 days 📅 2022-09-11\n4 days 📅 2022-09-12\n5 days 📅 2022-09-13\n6 days 📅 2022-09-14\n7 tasks\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: OR Operations\nDESCRIPTION: This demonstrates an expression containing nested and regular OR operations with string literals. The output indicates the successful interpretation and proper structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n'( (description includes a) AND (description includes b) AND (description includes c) ) OR ( (description includes d) AND (description includes e) AND (description includes f) )'\n=>\nResult:\n  ( (description includes a) AND (description includes b) AND (description includes c) ) OR ( (description includes d) AND (description includes e) AND (description includes f) ) =>\n    OR (At least one of):\n      AND (All of):\n        description includes a\n        description includes b\n        description includes c\n      AND (All of):\n        description includes d\n        description includes e\n        description includes f\n```\n\n----------------------------------------\n\nTITLE: Explain Single Filter - Tasks\nDESCRIPTION: This Tasks block uses the `explain` instruction with a single filter, specifically looking for tasks that start before today. The `limit 1` instruction restricts the results to one.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Explain Filters.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nexplain\nstarts before today\nlimit 1\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying an Object as JSON with Approval Tests (TypeScript)\nDESCRIPTION: Illustrates how to use the `verifyAsJson()` function to test JavaScript objects. This function automatically serializes the provided object into a JSON string before comparing it against an approved JSON file, useful for testing complex data structures.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Approval Tests.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest('JsonVerify', () => {\n    const data = { name: 'fred', age: 30 };\n    verifyAsJson(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Negating Compound OR Expression with NOT (Obsidian Tasks, text)\nDESCRIPTION: Demonstrates how to negate a compound OR filter across path and tag criteria, using the NOT operator to exclude all tasks matching either sub-condition. Also shows the equivalent alternative using AND and individual negations. Requires the Tasks plugin, operates on two sub-filters, outputs tasks that match neither condition.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n(path includes x) OR (description includes #x)\n```\n\nLANGUAGE: text\nCODE:\n```\nNOT ( (path includes x) OR (description includes #x) )\n```\n\nLANGUAGE: text\nCODE:\n```\n(path does not include x) AND (description does not include #x)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks in Exact Folder Path Using JavaScript\nDESCRIPTION: Filters tasks that reside in files located exactly in the specified folder \"Work/Projects/\" using strict equality comparison (===). The trailing slash is required to ensure the match targets the folder exactly, excluding any sub-folders. This method expects a 'task' object with a 'file.folder' string property representing the file's folder path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.folder === \"Work/Projects/\"\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by sorted tags joined by commas\nDESCRIPTION: This snippet sorts the task tags alphabetically and joins them with commas for grouping, ensuring consistent heading order regardless of the original tag order in tasks. It aids in creating predictable, sorted groupings of tasks with multiple tags, utilizing task.tags.sort().join(\", \").\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_results.approved.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags.sort().join(\", \")\nAs above, but sorting the tags first ensures that the final headings are independent of order of tags in the tasks.\n=>\n#context/home\n#context/work\n#multiple-tags1, #multiple-tags2\n#project/project1\n#tag\n#tag/subtag\n#tag/subtag/sub-sub-tag\n```\n\n----------------------------------------\n\nTITLE: Defining Status Symbol ('p') with Unknown Next Symbol\nDESCRIPTION: Defines the 'p' character as a status symbol representing 'Unknown next symbol' (type TODO). It is configured to transition to 'q', but 'q' is not defined as a status symbol, resulting in a configuration error requiring 'q' to be defined.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\np\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Scheduled Date in Obsidian Tasks Plugin\nDESCRIPTION: Specifies filters to query tasks based on scheduled dates, with support for precise dates, relative periods, and date formats. Enables sorting, grouping, and hiding scheduled dates, referencing the 'task.scheduled' property for query filtering.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n`scheduled (on, before, after, on or before, on or after) <date>`\\n`scheduled (in, before, after, in or before, in or after) ...`\\n`... YYYY-MM-DD YYYY-MM-DD`\\n`... (last, this, next) (week, month, quarter, year)`\\n`... (YYYY-Www,YYYY-mm, YYYY-Qq, YYYY)`\\n`has scheduled date`\\n`no scheduled date`\\n`scheduled date is invalid`\n```\n\n----------------------------------------\n\nTITLE: Monthly Recurring Task on Last Day in Markdown\nDESCRIPTION: Demonstrates a task that repeats on the last day of each month, showing how it correctly handles months with different numbers of days.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] do stuff 🔁 every month on the last 📅 2022-06-30\n- [x] do stuff 🔁 every month on the last 📅 2022-05-31 ✅ 2022-05-31\n- [x] do stuff 🔁 every month on the last 📅 2022-04-30 ✅ 2022-04-30\n- [x] do stuff 🔁 every month on the last 📅 2022-03-31 ✅ 2022-03-31\n- [x] do stuff 🔁 every month on the last 📅 2022-02-28 ✅ 2022-02-28\n- [x] do stuff 🔁 every month on the last 📅 2022-01-31 ✅ 2022-01-31\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Due Date After (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'due after' filter combined with 'OR NOT'. This query matches all tasks by including those due after 2021-12-27 OR those not due after that date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_86\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(due after 2021-12-27) OR NOT (due after 2021-12-27)\n```\n\n----------------------------------------\n\nTITLE: Complex Query Input with Multiple Function Filters (Potentially Corrected Syntax)\nDESCRIPTION: Presents the input for a complex Obsidian Tasks query using multiple 'filter by function' conditions combined with OR. This version appears to add semicolons at the end of some function bodies, possibly attempting to fix syntax errors seen in a previous example. The parsing result for this specific input is not provided.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_33\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n'( filter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type); ) OR ( filter by function const date = task.due.moment; return date ? !date.isValid() : false; ) OR ( filter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false; ) OR ( filter by function task.urgency.toFixed(2) === 1.95.toFixed(2); ) OR ( filter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁'); ) OR ( filter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase(); ) OR ( filter by function const taskDate = task.due.moment; const now = moment(); return taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false; ) OR ( filter by function const wanted = '#context/home'; return task.heading?.includes(wanted) || task.tags.find( (tag) => tag === wanted ) && true || false; )'\n```\n\n----------------------------------------\n\nTITLE: Custom Grouping by Task Status Type (Standard Order) (JavaScript)\nDESCRIPTION: Groups tasks based on their status types using `group by function task.status.typeGroupText`. This method preserves the standard display order (IN_PROGRESS, TODO, DONE, CANCELLED, NON_TASK), identical to the built-in `group by status.type`. Requires Tasks plugin version 4.9.0 or later.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.status.typeGroupText\n```\n\n----------------------------------------\n\nTITLE: Grouping by Custom-Formatted Urgency (Integer or Five Decimal Places) with JavaScript in Obsidian Tasks\nDESCRIPTION: This snippet groups tasks by their urgency attribute, formatting integer urgency values without decimals and non-integers to five decimal places for consistent sorting and display. The approach solves unreliable sorting in group names caused by mixed decimal precision. Each task's urgency is checked; integers are rendered as strings with no decimals, non-integers as strings fixed to five decimals. The environment must recognize JavaScript and provide task objects with a numeric urgency property. No external dependencies are needed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.urgency_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.urgency\nShow non-integer urgency values to 5 decimal places, and integer ones to 0 decimal places.\nSorting of groups by name has been found to be unreliable with varying numbers of decimal places.\nSo to ensure consistent sorting, Tasks will round non-integer numbers to a fixed 5 decimal places, returning the value as a string.\nThis still sorts consistently even when some of the group's values are integers.\n```\n\n----------------------------------------\n\nTITLE: Initializing short mode configuration in Obsidian Tasks (JavaScript)\nDESCRIPTION: This snippet initializes the short mode for the Obsidian Tasks plugin, setting up necessary configurations to enable brief task views. It depends on JavaScript execution within Obsidian's plugin environment and modifies plugin settings to support short mode features.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DefaultsDocs/DocsSamplesForDefaults.test.DocsSamplesForDefaults_demo-short-mode_instructions.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Code initializes the short mode configuration in Obsidian Tasks plugin */\n\nconst configureShortMode = () => {\n  // Enable short mode in plugin settings\n  app.plugins.plugins['obsidian-tasks'].settings.shortMode = true;\n  // Save settings\n  app.plugins.plugins['obsidian-tasks'].saveSettings();\n};\n\nconfigureShortMode();\n```\n\n----------------------------------------\n\nTITLE: Filter tasks excluding default open status symbol\nDESCRIPTION: This snippet filters tasks to find those with any status symbol other than the space character, which represents the default open task `[ ]`. It uses the `task.status.symbol` property and a not-equals comparison.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.symbol_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.status.symbol !== ' '\n```\n\n----------------------------------------\n\nTITLE: Sorting by First Level Tag Name (No Hash) - JavaScript\nDESCRIPTION: This snippet extracts the first level tag (root tag) from a task's tags, removing the '#' prefix. It splits the tag string by '/' and takes the first element. The `replace('#', '')` function removes the '#' character from the start of the tag, so 'tag' is returned instead of '#tag'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[0].replace('#', '') )\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Folder Path Substring Without Trailing Slash in JavaScript\nDESCRIPTION: Filters tasks by checking if the folder path includes the string \"Work/Projects\" without the trailing slash. This method can yield broader matches, including folders like \"Work/Projects 2023/\" or \"Work/Projects Top Secret/\", hence matching more loosely on folder names and their extensions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_docs.approved.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.folder.includes(\"Work/Projects\")\n```\n\n----------------------------------------\n\nTITLE: Sorting by Day of the Week in JavaScript\nDESCRIPTION: Sorts tasks by the day of the week of their due date, using the format 'dddd' for the day name. The `task.due.format(\"dddd\")` expression provides a string key for sorting tasks alphabetically by day of the week.  This relies on the Tasks plugin's date handling functionality.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Sorting.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.due.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Priority in Obsidian Tasks Plugin\nDESCRIPTION: This snippet demonstrates the 'sort by function task.priorityNumber' sorter which arranges tasks based on their priority level. The priorityNumber function assigns numerical values (0-5) to different priority indicators, where Highest (🔺) is 0 and Lowest (⏬) is 5.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.priorityNumber_results.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsort by function task.priorityNumber\n- [ ] #task Highest priority 🔺\n- [ ] #task High priority ⏫\n- [ ] #task Medium priority 🔼\n- [ ] #task Normal priority\n- [ ] #task Low priority 🔽\n- [ ] #task Lowest priority ⏬\n```\n\n----------------------------------------\n\nTITLE: Testing Task Description Regex Filters Using Jest Custom Matchers in TypeScript\nDESCRIPTION: This suite of Jest tests verifies the functionality of description regex filters applied to task lines. It uses Tasks-specific helper classes and custom matchers like toMatchTaskFromLine to assert whether tasks matching specific time stamp patterns are correctly identified or rejected by the filter. The tests depend on DescriptionField for filter creation and the Tasks custom matcher infrastructure imported globally in tests.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Example Tests.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndescribe('search description for time stamps', () => {\n    it('should find a time stamp in the description - simple version', () => {\n        // Arrange\n        const filter = new DescriptionField().createFilterOrErrorMessage(\n            String.raw`description regex matches /\\d\\d:\\d\\d/`,\n        );\n\n        // Assert\n        expect(filter).toMatchTaskFromLine('- [ ] Do me at 23:59');\n        expect(filter).toMatchTaskFromLine('- [ ] Do me at 00:01');\n        expect(filter).toMatchTaskFromLine('- [ ] Do me at 99:99');\n    });\n\n    it('should find a time stamp in the description - more precise version', () => {\n        // Arrange\n        const filter = new DescriptionField().createFilterOrErrorMessage(\n            'description regex matches /[012][0-9]:[0-5][0-9]/',\n        );\n\n        // Assert\n        expect(filter).toMatchTaskFromLine('- [ ] Do me at 23:59');\n        expect(filter).toMatchTaskFromLine('- [ ] Do me at 00:01');\n        expect(filter).not.toMatchTaskFromLine('- [ ] Do me at 99:99');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Priority in Obsidian Tasks\nDESCRIPTION: This code snippet demonstrates how to group tasks by their priority using the 'group by function' command in Obsidian Tasks. The priority values are numerically represented, with Highest priority as 0 and Lowest priority as 5.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.priority_docs.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngroup by function task.priority\n```\n\n----------------------------------------\n\nTITLE: Grouping by Month with Hidden Sort Order - JavaScript\nDESCRIPTION: This snippet groups tasks by month, formatted as 'YYYY%%-MM%% MMM'. The month number is embedded between `%%` strings to control the sort order. A default heading \"no due date\" is displayed if there is no due date. The expression evaluates to a string representing the formatted month of the task's due date, including hidden characters for sorting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.format(\"YYYY[%%]-MM[%%] MMM\", \"no due date\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Grouping by Due Date Status (Highlighted Headings) - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: As above, but outputs headings as highlighted words (e.g., '==Overdue==') for enhanced visibility in rendered markdown. The same date logic and hidden sort order are applied (e.g., '%%4%% ==Undated=='). Useful for users who want visually distinct status breakdowns. Requires that highlighting syntax (double equal signs) is supported by the theme or markdown processor.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\\n    const date = task.due.moment; \\\n    return \\\n        (!date)                           ? '%%4%% ==Undated==' :      \\\n        !date.isValid()                   ? '%%0%% ==Invalid date==' : \\\n        date.isBefore(moment(), 'day')    ? '%%1%% ==Overdue==' :      \\\n        date.isSame(moment(), 'day')      ? '%%2%% ==Today=='   :      \\\n        '%%3%% ==Future==';\n```\n\n----------------------------------------\n\nTITLE: Styling Links in Mermaid Diagram\nDESCRIPTION: This Mermaid code sets the default style for links in the flowchart to gray. This ensures visual consistency and readability of the diagram, providing a clear representation of the relationships between task icons.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_AnuPpuccin_Table.approved.mermaid.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Explain Boolean Combinations of Filters - Tasks\nDESCRIPTION: This Tasks block utilizes the `explain` instruction to demonstrate boolean combinations. It filters for tasks that are not done and also satisfy the condition \"due before tomorrow AND is recurring.\"  The `limit 1` restricts the output.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Explain Filters.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nexplain\nnot done\n(due before tomorrow) AND (is recurring)\nlimit 1\n```\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Description Without Tags in JavaScript\nDESCRIPTION: This snippet provides a method to sort tasks by the description text, excluding any tags. It removes tags from the sort key to ensure that completed recurrences of the same task, even with different tags, are grouped and sorted together. This requires each task object to have a descriptionWithoutTags function that returns the description stripped of tags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.descriptionWithoutTags_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.descriptionWithoutTags\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Scheduled Date Day of Week - Javascript\nDESCRIPTION: This snippet sorts tasks based on the day of the week they are scheduled. It accesses the scheduled date via `task.scheduled` and formats it to the full day name string using `.format(\"dddd\")`. `sort by function` then orders tasks alphabetically by this day name.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.scheduled.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Grouping Fully Completed Tasks by Subpath - Dataview - dataview\nDESCRIPTION: Selects tasks marked as 'fullyCompleted' and groups them by the subpath of their section. Intended for contexts where completion of all subtasks is tracked distinctly. Requires Dataview with the 'fullyCompleted' property and groups using 'meta(section).subpath'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_8\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nWHERE fullyCompleted\nGROUP BY meta(section).subpath\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Priority Number in JavaScript for Obsidian Tasks\nDESCRIPTION: A JavaScript function that sorts tasks based on their priority number property. This sorting uses a numerical scale where Highest priority is represented as 0 and Lowest priority is represented as 5.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.priorityNumber_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.priorityNumber\n```\n\n----------------------------------------\n\nTITLE: Searching for Blocking Tasks in Obsidian Tasks\nDESCRIPTION: A tasks query that finds all tasks that are blocking other tasks in the current file. This helps identify which tasks need to be completed first to unblock dependent tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies - Worked Example.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nis blocking\n\npath includes {{query.file.path}}\nhide backlink\nhide task count\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Custom File Property Value - Javascript (Tasks Query)\nDESCRIPTION: Filters tasks to include only those located in files where a specific custom property (`project`) has a particular value (`'Project 1'`). This uses `task.file.property()` to retrieve the string value.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.property('project') === 'Project 1'\n```\n\n----------------------------------------\n\nTITLE: Filtering by Description Length (Obsidian Tasks Filter)\nDESCRIPTION: This snippet shows a custom filter expression used within the Obsidian Tasks plugin. It filters tasks where the length of the task description (`task.description.length`) is greater than 100 characters. This is used to find tasks with extensive details.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.description_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Tasks Filter\nCODE:\n```\ntask.description.length > 100\n```\n\n----------------------------------------\n\nTITLE: Defining a Markdown Task with a Link in Obsidian Tasks\nDESCRIPTION: This Markdown snippet demonstrates how to define an incomplete task (`- [ ]`) using the Obsidian Tasks plugin syntax. It includes the tag `#task` and a hyperlink `[Tasks Documentation](https://publish.obsidian.md/tasks/Introduction)` within the task description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/link_in_task_html.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Task in 'link_in_task_html' - see the [Tasks Documentation](https://publish.obsidian.md/tasks/Introduction)\n```\n\n----------------------------------------\n\nTITLE: Custom Checkboxes CSS Snippet\nDESCRIPTION: This CSS snippet defines the styling for custom checkboxes within Obsidian, allowing for visual distinction between various task statuses. It is intended to be used with the Obsidian Tasks plugin and requires adding the CSS file to the Obsidian vault and enabling the snippet.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Snippet - SlRvb's Alternate Checkboxes.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Priority - Task Query\nDESCRIPTION: This snippet demonstrates using a custom 'group by function' to organize tasks based on their assigned priority. The `task.priority` function returns a numerical value representing the priority level (0 for Highest, 5 for Lowest). Tasks will be grouped under headings corresponding to these numbers.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.priority_results.approved.txt#_snippet_0\n\nLANGUAGE: Task Query\nCODE:\n```\ngroup by function task.priority\n```\n\n----------------------------------------\n\nTITLE: Text Inclusion with Boolean OR and NOT\nDESCRIPTION: Example of using text inclusion filter with OR and NOT operators. Shows how to find tasks that either contain specific text or don't contain that same text.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_77\n\nLANGUAGE: text\nCODE:\n```\n'(description includes wibble) OR NOT (description includes wibble)'\n```\n\n----------------------------------------\n\nTITLE: Filtering Non-Recurring Tasks with Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Filters tasks that are not recurring by evaluating the negation of the 'isRecurring' property. Similar to the recurring filter, it supports logical combinations with other conditions using '&&' or '||'. It depends on the task object structure from the Obsidian Tasks plugin where 'isRecurring' identifies recurring tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isRecurring_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function !task.isRecurring\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Filename and Heading Using Obsidian Tasks (JavaScript)\nDESCRIPTION: This code snippet organizes tasks by a combination of filename (without file extension) and task heading, using a JavaScript function in Obsidian Tasks queries. It is suitable when tasks should be grouped under both their file and specific headings, without links generated to either. Requirements include running within Obsidian Tasks and access to properties like 'task.file.filenameWithoutExtension', 'task.hasHeading', and 'task.heading'. The function dynamically builds the group label based on the presence of a heading. Input is the task context; output is a string such as 'Filename > Heading' if a heading exists. There are no external dependencies or outputs outside of group labels.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.filename_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.file.filenameWithoutExtension + (task.hasHeading ? (' > ' + task.heading) : '')\n```\n\n----------------------------------------\n\nTITLE: Example Task After Toggling (DONE -> CANCELLED Flow)\nDESCRIPTION: Shows the result after toggling the previous example task. The original task is marked DONE ('[x]') with a completion date. Crucially, the new recurrence is created with the TODO status ('[ ]') and the next due date, demonstrating that the plugin correctly skips the CANCELLED status for new recurrences.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n- [x] Do something 🔁 every day 📅 2024-10-16 ✅ 2023-10-16\n- [ ] Do something 🔁 every day 📅 2024-10-17\n```\n\n----------------------------------------\n\nTITLE: Broken Query: Closing Delimiter Conflict with 'filter by function'\nDESCRIPTION: This Obsidian Tasks query demonstrates a common error where the closing parenthesis ')' of the 'filter by function' expression conflicts with the closing parenthesis ')' used as the boolean sub-expression delimiter, leading to a malformed query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n(filter by function task.tags.join(',').toUpperCase().includes('#XX')) AND \\\n(filter by function task.tags.join(',').toUpperCase().includes('#YY')) AND \\\n(filter by function task.tags.join(',').toUpperCase().includes('#ZZ'))\n```\n\n----------------------------------------\n\nTITLE: Launching Task Edit Modal with Newline Character\nDESCRIPTION: This JavaScript snippet is an alternative to the previous one, adding a newline character after the task line.  It's intended for QuickAdd Capture and provides a slightly different formatting option when creating tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Other Plugins/QuickAdd.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nreturn await this.app.plugins.plugins['obsidian-tasks-plugin'].apiV1.createTaskLineModal() + '\\n';\n```\n\n----------------------------------------\n\nTITLE: Grouping by Urgency with 3 Decimal Places - JavaScript\nDESCRIPTION: This snippet groups tasks by their urgency, showing the urgency value to 3 decimal places. It utilizes the `toFixed(3)` method.  The expression evaluates to a string representing the task's urgency value, rounded to 3 decimal places.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.urgency.toFixed(3)\n```\n\n----------------------------------------\n\nTITLE: Task blocking example - Mermaid diagram\nDESCRIPTION: This Mermaid diagram illustrates the concept of blocking in task dependencies.  If both the dependent and the dependency are TODO or IN_PROGRESS, blocking occurs. One task depends on another which blocks its progress.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\nclassDef TASK        stroke-width:3px,font-family:monospace;\n\n2[\"\\- [ ] this is blocking  🆔 abcdef\"]:::TASK\n1[\"\\- [ ] this is blocked&nbsp ⛔ abcdef\"]:::TASK\n1-- depends on --> 2\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Grouping by Task Description - JavaScript\nDESCRIPTION: This snippet groups tasks by their description.  It's useful for finding completed recurrences of the same task.  The expression evaluates to the task's description string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Task Status (Done) - Javascript\nDESCRIPTION: This snippet demonstrates custom sorting using `sort by function` to sort tasks based on whether they are marked as done. The `!task.isDone` expression evaluates to `true` for undone tasks and `false` for done tasks. The `sort by function` sorts `true` before `false`, effectively listing undone tasks before done tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function !task.isDone\n```\n\n----------------------------------------\n\nTITLE: Sorting by File Path (Without Extension) in Tasks\nDESCRIPTION: This JavaScript snippet sorts tasks based on the file path, excluding the file extension.  It employs `task.file.pathWithoutExtension`. It sorts by file path but ignores the extension. The primary input is the file information associated with each task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.pathWithoutExtension\n```\n\n----------------------------------------\n\nTITLE: Sort Tasks by Done Date Day of Week - Obsidian Tasks Query\nDESCRIPTION: This custom sorter command for the Obsidian Tasks plugin sorts query results based on the day of the week derived from the task's completion date. It uses the `function` keyword and the `task.done.format(\"dddd\")` expression to extract the full day name (e.g., \"Friday\") and sort alphabetically. Tasks without a done date or with an invalid date will be grouped accordingly based on how the formatter handles them.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.done_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\nsort by function task.done.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Folder in Obsidian Tasks - JavaScript\nDESCRIPTION: This code snippet groups tasks by the folder where their parent file is located using the 'task.file.folder' property. The grouping preserves all original Markdown characters, providing an unescaped folder path. No additional dependencies are needed, and the main input is the file path string. The output groups tasks by the full folder hierarchy; paths are returned as-is with trailing slashes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.folder_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.file.folder\n```\n\n----------------------------------------\n\nTITLE: Grouping by Formatted Start Date (JavaScript)\nDESCRIPTION: Groups tasks based on their start date, applying a custom date format string \"YYYY-MM-DD dddd\". Unlike the built-in `group by start`, tasks without a start date will be grouped under an empty string header. Requires the task object (`task`) and its `start` property with a `format` method.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.start.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical Task List in Obsidian Tasks\nDESCRIPTION: Example of how to structure a parent task with child tasks in Obsidian's markdown format. The syntax uses checkbox markers '- [ ]' for tasks and indentation for creating hierarchy.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_task_mixed_children.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] parent task\n    - [ ] child task 1\n    - child list item 1\n    - [ ] child task 2\n```\n\n----------------------------------------\n\nTITLE: Sorting by Folder in Tasks\nDESCRIPTION: This JavaScript snippet facilitates sorting of tasks according to the containing folder via `task.file.folder`. The result is a list of sorted tasks, based on the folder containing each task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.folder\n```\n\n----------------------------------------\n\nTITLE: Example Filter Result Task (Markdown)\nDESCRIPTION: This snippet shows a standard Markdown task list item representing a task that satisfies the custom filter criteria (description length > 100). It serves as an example of the output format when a task matches the filter.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.description_results.approved.txt#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] long description Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quam ipsum, consectetur ut dolor nec, fringilla lobortis mi. Vestibulum gravida tincidunt urna nec ornare. Cras sit amet sagittis sapien, vitae mattis velit. Vestibulum sem tortor, blandit at ultrices eget, ultrices eget odio. Donec efficitur purus massa, vel molestie turpis tincidunt id.\n```\n\n----------------------------------------\n\nTITLE: Declaring Moment type in src/ (TypeScript)\nDESCRIPTION: This snippet shows how to declare the `Moment` type for use in TypeScript files within the `src/` directory of the Obsidian Tasks plugin.  It imports the `Moment` type from the `moment` package.  This is necessary for type checking when working with Moment objects.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Code/How do I use Moment in src.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Moment } from 'moment';\n```\n\n----------------------------------------\n\nTITLE: Grouping by Urgency (3 Decimal Places) (JavaScript)\nDESCRIPTION: Groups tasks based on their numerical urgency score, formatted to exactly three decimal places using JavaScript's `toFixed(3)` method. This differs from the built-in `group by urgency` which uses 2 decimal places. Requires the task object (`task`) and its `urgency` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.urgency.toFixed(3)\n```\n\n----------------------------------------\n\nTITLE: Inserting Inline Comments with Mustache.js Syntax in Tasks Queries - tasks\nDESCRIPTION: Explains the use of inline comments within a single query line using Mustache.js syntax ({{! comment }}). Text between '{{!' and '}}' is ignored by the Tasks plugin during query processing, allowing for inline annotation without breaking query functionality. This feature requires Tasks version 4.7.0 or higher. Multiline inline comments are not supported.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Comments.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\nshort mode {{! This comment will be ignored }}\n```\n\n----------------------------------------\n\nTITLE: Using the 'descriptionWithoutTags' Sorter in Obsidian Tasks\nDESCRIPTION: Specifies a custom sorting function within an Obsidian Tasks query block. This function sorts tasks alphanumerically based on their description text after removing any tags (e.g., #tag, #tag/subtag). This approach groups similar tasks, like recurrences, even if their tags differ.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.descriptionWithoutTags_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\nsort by function task.descriptionWithoutTags\n```\n\n----------------------------------------\n\nTITLE: Calling task.due.format() Method with Format String and Fallback in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `format(formatString, fallback)` method on the `task.due` object in Obsidian Tasks. This method formats the due date using a specified Moment.js format string. It returns the provided fallback string (e.g., 'no date') if the task has no due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.format('dddd', 'no date')\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Day of Week (Ordered) JavaScript\nDESCRIPTION: This code snippet groups tasks by the day of the week, with the days sorted in date order starting from Sunday. It uses `task.due.format(\"[%%]d[%%]dddd\")`. Dependencies likely include a date-handling library to format and handle the dates correctly.  It takes a task object and formats it to a specified format and provides the days of the week in the specified order.  The output consists of strings representing the days of the week, sorted with Sunday first.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"[%%]d[%%]dddd\")\n```\n\n----------------------------------------\n\nTITLE: Completed Recurring Task with New Instance in Markdown\nDESCRIPTION: Shows how a recurring task appears after being completed, with the original task marked done and a new task created with an updated due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] take out the trash 🔁 every Sunday 📅 2021-05-02\n- [x] take out the trash 🔁 every Sunday 📅 2021-04-25 ✅ 2021-04-24\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by File Path in Obsidian Tasks (JavaScript)\nDESCRIPTION: This snippet groups tasks using the full file path of the file containing the task. It utilizes the `task.file.path` property within a `group by function` clause. This method includes the file extension and does not escape Markdown characters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.path_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\ngroup by function task.file.path\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Date with Date and Time - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Groups tasks by due date formatted as YYYY-MM-DD HH:mm. Omits the heading if no due date exists. Although times can be shown for demonstration, the Tasks plugin does not support storing times, and adding times to your tasks may break task data reading. Use only for illustration or when future support for times becomes available.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.formatAsDateAndTime()\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks in Folder and Its Sub-Folders Using JavaScript\nDESCRIPTION: Filters tasks in files that are inside the specified folder \"Work/Projects/\" including any of its sub-folders by checking whether the folder path string includes the folder segment using the 'includes' method. Useful for recursive folder searches where tasks from nested directories should be included.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.folder.includes(\"Work/Projects/\")\n```\n\n----------------------------------------\n\nTITLE: Example Task Status Markers in Obsidian Markdown\nDESCRIPTION: Demonstrates the Markdown syntax used by the Obsidian Tasks plugin to represent different task statuses (Todo, In Progress, Done, Cancelled). The character within the brackets (` `, `/`, `x`, `-`) corresponds to the `task` field value in `cachedMetadata.listItems`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/list_statuses.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Todo\n- [/] #task In Progress\n- [x] #task Done ✅ 2024-05-26\n- [-] #task Cancelled ❌ 2024-05-26\n```\n\n----------------------------------------\n\nTITLE: Grouping Task Objects by Status Symbol in Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: This snippet defines a function to group task objects by their status symbol, replacing spaces with the literal string 'space' for visibility. It operates on task objects containing a status property with a symbol attribute. No external dependencies beyond the Obsidian Tasks plugin context are required. Input consists of task objects; output is a string identifying the status group. Limitations include reliance on the 'status.symbol' property structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.statuses_task.status.symbol_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \"Status symbol: \" + task.status.symbol.replace(\" \", \"space\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with Duplicate Descriptions (All Tasks)\nDESCRIPTION: This snippet filters tasks based on duplicate descriptions across the entire vault, regardless of the global query. It uses a caching mechanism (`query.searchCache`) to store and retrieve counts of task descriptions, and it groups the tasks accordingly. This approach is less accurate because the counts do not respect the global query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters With Complex Caching.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function { \\n    const cacheKey = 'descriptionCountsAllTasks'; \\n    const getDescription = (t) => t.descriptionWithoutTags; \\n    if (!query.searchCache[cacheKey]) { \\n        console.log('Computing and caching description counts...'); \\n        const taskCounts = new Map(); \\n        query.allTasks.forEach(t => { \\n            const group = getDescription(t); \\n            taskCounts.set(group, (taskCounts.get(group) || 0) + 1); \\n        }); \\n        query.searchCache[cacheKey] = taskCounts; \\n    } \\n    const taskCounts = query.searchCache[cacheKey]; \\n    const group = getDescription(task); \\n    const counts = taskCounts.get(group); \\n    return counts > 1; \\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks from Folder and Explaining via Filename Instruction in Obsidian Tasks - tasks\nDESCRIPTION: This snippet uses the Obsidian Tasks plugin code block to retrieve tasks from notes whose folder path matches the dynamic variable {{query.file.folder}}, sorting results by path, and limiting the query to 25 tasks. The snippet demonstrates embedding filename-based context by using {{query.file.filenameWithoutExtension}} as an instruction within the query, potentially driving plugin behavior or supplementing user prompts, and includes a special comment #explain to invoke extra information or clarification. No external dependencies beyond the Obsidian Tasks plugin are required. Inputs include current file context, and the output is a filtered task list, with comments/instructions processed as supported by the plugin; it is limited by Obsidian's variable substitution and Tasks plugin syntax constraints.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 25.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Task Statuses using Custom Checkboxes in Plain Text\nDESCRIPTION: This snippet enumerates all supported statuses for tasks represented in the ITS Theme using a custom checkbox syntax in plain text format. Each line shows a checkbox with a status symbol, an associated tag #task, and a short description. This serves as a reference for task item types recognized by the theme. No external dependencies are required, and the input is plain text representing task items, which can be used for documentation or theme debugging.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/ITS Theme.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- [ ] #task `space` Unchecked\n- [x] #task `x` Regular\n- [X] #task `X` Checked\n- [-] #task `-` Dropped\n- [>] #task `>` Forward\n- [D] #task `D` Date\n- [?] #task `?` Question\n- [/] #task `/` Half Done\n- [+] #task `+` Add\n- [R] #task `R` Research\n- [!] #task `!` Important\n- [i] #task `i` Idea\n- [B] #task `B` Brainstorm\n- [P] #task `P` Pro\n- [C] #task `C` Con\n- [Q] #task `Q` Quote\n- [N] #task `N` Note\n- [b] #task `b` Bookmark\n- [I] #task `I` Information\n- [p] #task `p` Paraphrase\n- [L] #task `L` Location\n- [E] #task `E` Example\n- [A] #task `A` Answer\n- [r] #task `r` Reward\n- [c] #task `c` Choice\n- [d] #task `d` Doing\n- [T] #task `T` Time\n- [@] #task `@` Character / Person\n- [t] #task `t` Talk\n- [O] #task `O` Outline / Plot\n- [~] #task `~` Conflict\n- [W] #task `W` World\n- [f] #task `f` Clue / Find\n- [F] #task `F` Foreshadow\n- [H] #task `H` Favorite / Health\n- [&] #task `&` Symbolism\n- [s] #task `s` Secret\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Tag Count (Descending) with 'reverse' in Obsidian Tasks\nDESCRIPTION: Demonstrates an Obsidian Tasks 'sort by function' instruction. It uses the 'reverse' keyword with a Javascript expression (`task.tags.length`) to sort tasks by the number of tags in descending order (most tags first).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags_results.approved.txt#_snippet_1\n\nLANGUAGE: obsidian-tasks-sort\nCODE:\n```\nsort by function reverse task.tags.length\n```\n\n----------------------------------------\n\nTITLE: Sorting Obsidian Tasks by Folder\nDESCRIPTION: Specifies a custom sorting function for Obsidian Tasks queries that orders tasks alphabetically based on the path of the folder containing the task's file. The `task.file.folder` property provides the folder path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.folder_results.approved.txt#_snippet_0\n\nLANGUAGE: Custom Function\nCODE:\n```\nsort by function task.file.folder\n```\n\n----------------------------------------\n\nTITLE: Sorting by First and Second Level Tag (Combined) - JavaScript\nDESCRIPTION: This snippet extracts the first and second level tags and combines them with a '/' delimiter. If a second level tag exists, it combines it with the first level tag; otherwise, it returns an empty string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[1] ? tag.split('/').slice(0, 2).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Number of Tags in Descending Order in JavaScript\nDESCRIPTION: This snippet sorts tasks based on their number of tags in descending order, placing tasks with more tags first. It uses a reverse flag to invert the natural ascending sort order.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function reverse task.tags.length\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Relative Due Time - Obsidian Tasks JavaScript\nDESCRIPTION: This snippet groups tasks by how much time remains until or since the due date, displaying headings such as \"8 days ago\" or \"in 11 hours\". Requires the Tasks plugin with access to moment.js and properties like task.due.fromNow. Uses an empty heading if no due date is present, with additional fields for name and sort order. Designed for time-based task groupings that adjust with the current date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.fromNow.groupText\n```\n\n----------------------------------------\n\nTITLE: Using Filename as Instruction in Obsidian Tasks\nDESCRIPTION: This snippet utilizes the filename (without the extension) as an instruction within the Obsidian Tasks query. The \"{{query.file.filenameWithoutExtension}}\" template variable dynamically inserts the filename into the query, allowing for context-specific processing or filtering. This relies on the Obsidian Tasks plugin and requires the correct file context to work properly.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 5000.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by description\nDESCRIPTION: This snippet demonstrates grouping tasks by their full description. It shows how tasks with identical descriptions, including tags, are grouped together. This is useful for finding recurring tasks or instances of the same task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.description_results.approved.txt#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\ngroup by function task.description\ngroup by description.\nThis might be useful for finding completed recurrences of the same task.\n=>\nlong description Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quam ipsum, consectetur ut dolor nec, fringilla lobortis mi. Vestibulum gravida tincidunt urna nec ornare. Cras sit amet sagittis sapien, vitae mattis velit. Vestibulum sem tortor, blandit at ultrices eget, ultrices eget odio. Donec efficitur purus massa, vel molestie turpis tincidunt id. \nmy description\nmy description #context/home\nmy description #context/work\nmy description #multiple-tags1 #multiple-tags2\nmy description #project/project1\nmy description #tag\nmy description #tag/subtag\nmy description #tag/subtag/sub-sub-tag\nshort description\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Nested Tag Levels - JavaScript\nDESCRIPTION: Provides multiple functions to group tasks based on different levels of nested tags by splitting hierarchical tags on slashes '/' and extracting specific levels or combinations of levels. These handle cases such as extracting the top-level tag, subtag, sub-sub-tag, and combinations of nested tag paths. Outputs are strings representing the selected hierarchy level of tags. This technique is useful for organizing tasks by hierarchical tag structures in markdown notes with nested tagging. Requires the tags to follow a slash-separated hierarchical format.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[0].replace('#', '') )\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[1] ? tag.split('/').slice(1, 2) : '')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[2] ? tag.split('/').slice(2, 3) : '')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[3] ? tag.split('/').slice(3, 4) : '')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[0] )\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[1] ? tag.split('/').slice(0, 2).join('/') : '')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[2] ? tag.split('/').slice(0, 3).join('/') : '')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[3] ? tag.split('/').slice(0, 4).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Showing Task Status Changes With Date\nDESCRIPTION: This snippet continues the example, showing the task with the 'X' status, and includes a date. This highlights how the cycle progresses after clicking the checkbox multiple times.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Set up custom statuses.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n- [X] #task Do important stuff ✅ 2023-01-09\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Core Status Syntax in Markdown\nDESCRIPTION: Shows the basic syntax for uncompleted and completed tasks in conventional markdown format. These core statuses don't require any custom CSS styling to display correctly in Tasks blocks or Live Preview.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Core Statuses.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [ ] I am a task that is not yet done\n- [x] I am a task that has been done\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Scheduled Day Using Obsidian Tasks API - JavaScript\nDESCRIPTION: This JavaScript snippet sorts tasks by the day of the week extracted from each task's scheduled date using the Obsidian Tasks plugin. It involves calling a sort function that accesses the scheduled property of each task, formats it into the full weekday name (e.g., Monday), and sorts alphabetically based on this string. The snippet depends on the task object having a scheduled property with a format method compatible with date formatting libraries. Input is a collection of tasks, and output is a sorted list based on weekday names. It assumes tasks have valid scheduled dates and the format method supports the \"dddd\" token for full weekday names.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.scheduled_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function task.scheduled.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Styling Explanation Blocks in Obsidian Tasks Plugin Using CSS\nDESCRIPTION: This CSS snippet styles the explanation blocks generated by the Obsidian Tasks plugin by changing their text color to blue. It targets the '.plugin-tasks-query-explanation' CSS class and sets the 'color' property to the CSS variable '--color-blue'. The snippet is intended to be added as a CSS snippet in Obsidian to customize the plugin's output appearance for better visual distinction and readability. No additional dependencies are required beyond Obsidian's CSS snippet support.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n/* Make the Tasks plugin's 'explain' output stand out in blue */\n.plugin-tasks-query-explanation {\n    color: var(--color-blue);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by case-sensitive file path in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to filter tasks based on the exact, case-sensitive file path. It uses the `task.file.path` property to check if the path is equal to a specific string, including the `.md` extension.  Capitalization matters in this comparison.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.path.includes('tasks releases/4.1.0 Release.md')\n```\n\n----------------------------------------\n\nTITLE: Grouping by File Folder - JavaScript\nDESCRIPTION: This snippet groups tasks by the folder containing the file in which they are defined.  It behaves like 'group by folder', but doesn't escape Markdown formatting characters. The expression evaluates to the string representing the folder of the file containing the task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.folder\n```\n\n----------------------------------------\n\nTITLE: Task Blocking Example\nDESCRIPTION: This example shows how to define blocking tasks using IDs. The first task is blocking the second task because the second task depends on the first task's ID.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n- [ ] I am blocking 🆔 12345\n- [ ] I am not blocking ⛔ 12345\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Presence of File Property - Javascript (Tasks Query)\nDESCRIPTION: Filters tasks to include only those located in files that have a specific property defined in their frontmatter. This example checks for the `kanban-plugin` property, useful for interacting with the Obsidian Kanban plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.hasProperty('kanban-plugin')\n```\n\n----------------------------------------\n\nTITLE: Filtering by File Property Existence (Obsidian Tasks JavaScript)\nDESCRIPTION: Filters tasks based on whether the file containing the task has a specified property. This is useful for locating tasks within files associated with particular plugins or metadata, such as Kanban boards. Requires the `task.file` object to access file properties. Returns `true` if the property exists, `false` otherwise.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.obsidian_properties_task.file.frontmatter_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.hasProperty('kanban-plugin')\n```\n\n----------------------------------------\n\nTITLE: Query Today's Tasks using Obsidian Tasks\nDESCRIPTION: This code block uses the Obsidian Tasks plugin's query language to display tasks. It filters for tasks that are 'not done' and whose 'happens' date matches the exact date stored in the `today` variable, which is generated by the Templater snippet. This section lists tasks specifically planned for the current day.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/_meta/templates/daily note template - Templater plugin.md#_snippet_2\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\nnot done\nhappens <% today %>\n```\n\n----------------------------------------\n\nTITLE: Text Filter with Boolean Keyword as Search Term\nDESCRIPTION: Example of using a boolean operator word (AND) as a search term. Shows how to search for tasks containing the word 'AND' in description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_64\n\nLANGUAGE: text\nCODE:\n```\n'(description includes AND) OR NOT (description includes AND)'\n```\n\n----------------------------------------\n\nTITLE: Custom Filter - Status Symbol - JavaScript\nDESCRIPTION: Demonstrates filtering by status symbol using custom JavaScript filters. Examples include finding tasks with a checkbox symbol '-', finding tasks with any symbol other than a space, and more complex examples using multiple symbols or excluding specific symbols. It shows different ways to express the filters, using both explicit comparisons and the `includes` method for brevity.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function task.status.symbol === '-'\n```\n```\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function task.status.symbol !== ' '\n```\n```\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function \\\n    const symbol = task.status.symbol; \\\n    return symbol === 'P' || symbol === 'C' || symbol === 'Q' || symbol === 'A';\n```\n```\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function 'PCQA'.includes(task.status.symbol)\n```\n```\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function !' -x/'.includes(task.status.symbol)\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing Error for Complex Query with Malformed Function Filters\nDESCRIPTION: Illustrates parsing errors in a complex Obsidian Tasks query that combines multiple 'filter by function' clauses using OR. Several function expressions contain syntax errors (like missing closing parentheses or unexpected tokens), causing the overall boolean combination to fail parsing. The error breakdown identifies which specific function filters are malformed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_32\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n( filter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type) ) OR ( filter by function const date = task.due.moment; return date ? !date.isValid() : false; ) OR ( filter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false ) OR ( filter by function task.urgency.toFixed(2) === 1.95.toFixed(2) ) OR ( filter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁') ) OR ( filter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase() ) OR ( filter by function const taskDate = task.due.moment; const now = moment(); return taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false ) OR ( filter by function const wanted = '#context/home'; return task.heading?.includes(wanted) || task.tags.find( (tag) => tag === wanted ) && true || false; )\n```\n\n----------------------------------------\n\nTITLE: Sort tasks by description length\nDESCRIPTION: This snippet sorts tasks by the length of their description, arranging them from shortest to longest. It's useful for identifying tasks that may require more details or could be made more concise. The function `task.description.length` returns the length of the task's description, which is used as the sorting criterion.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.description_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.description.length\n```\n\n----------------------------------------\n\nTITLE: Sorting Obsidian Tasks by Block Link\nDESCRIPTION: This Obsidian Tasks query snippet sorts tasks based on their associated block link ('task.blockLink'). The surrounding text emphasizes the importance of removing any leading space and caret from the block link itself to prevent the rendered heading from being incorrectly interpreted as part of the block link.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.blockLink_docs.approved.md#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\nsort by function task.blockLink\n```\n\n----------------------------------------\n\nTITLE: Including Frontmatter with Templater\nDESCRIPTION: This Templater snippet includes content from a file named \"[[standard frontmatter]]\" into the current note. This is likely to populate the YAML frontmatter section of the note, defining metadata like date, author, and other properties. It's a common practice to keep the frontmatter separate for reusability and organization within the vault.  The content of [[standard frontmatter]] would be required to use this snippet.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/_meta/templates/new documentation file.md#_snippet_0\n\nLANGUAGE: Templater\nCODE:\n```\n<% tp.file.include(\"[[\"standard frontmatter\"]]\") %>\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by First Two Tag Levels in Obsidian Tasks\nDESCRIPTION: This JavaScript function, used with 'group by function' in Obsidian Tasks, groups tasks by the first two levels of their hierarchical tags combined, provided the second level exists. It splits the tag by '/', checks for the second element (index 1), and if present, joins the first two elements back with '/'; otherwise, it returns an empty string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[1] ? tag.split('/').slice(0, 2).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Sorting by Urgency\nDESCRIPTION: Sorts tasks by their urgency, using `task.urgency`, in reverse order (most urgent first). Dependencies: Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function reverse task.urgency\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Creation Date Month in Obsidian Tasks\nDESCRIPTION: This snippet groups tasks by the month extracted from their file's creation date property. It uses moment.js to format the date into the month name. Tasks without a creation date are grouped under 'no month'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.obsidian_properties_task.file.frontmatter_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function \\\n    const value = task.file.property('creation date'); \\\n    return value ? window.moment(value).format('MMMM') : 'no month'\n```\n\n----------------------------------------\n\nTITLE: Structured documentation for Query Search Properties in Obsidian Tasks\nDESCRIPTION: Details on accessing task data via query search properties, specifically `query.allTasks`, which returns all tracked tasks in the vault. Explains the context, filtering behavior, and version history. Dependencies include the Tasks plugin source code and its task data model.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Query Properties.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n```markdown\n# Query Search Properties in Obsidian Tasks Plugin\n\n<!-- placeholder to force blank line before included text --><!-- include: QueryProperties.test.query_search_properties.approved.md -->\n\n| Field | Type | Example |\n| ----- | ----- | ----- |\n| `query.allTasks` | `Task[]` | `[... an array with all the Tasks-tracked tasks in the vault ...]` |\n\n<!-- placeholder to force blank line after included text --><!-- endInclude -->\n\n1. `query.allTasks` provides access to all the tasks that Tasks has read from the vault.\n    - If [[Global Filter|global filter]] is enabled, only tasks containing the global filter are included.\n    - The [[Global Query|global query]] does not affect `query.allTasks`: all tasks tracked by the Tasks plugin are included.\n    - See [[Task Properties]] for the available properties on each task.\n    - `query.allTasks` was added in Tasks 6.1.0.\n```\n```\n\n----------------------------------------\n\nTITLE: Using filename as an instruction in Obsidian Tasks\nDESCRIPTION: This snippet utilizes the filename without its extension as an instruction or label for task grouping or filtering. It derives the filename dynamically via the query syntax and can be incorporated into task templates or filters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 3000.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\n{{query.file.filenameWithoutExtension}}\n```\n\n----------------------------------------\n\nTITLE: Filter tasks due on a specific date (JavaScript)\nDESCRIPTION: This code snippet filters tasks due on 31 May 2023. It uses the `task.due.moment` property and the `isSame` method to compare the task's due date with the specified date ('2023-05-31') at the 'day' precision level.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSame(moment('2023-05-31'), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Sorting by First, Second, Third and Fourth Level Tags (Combined) - JavaScript\nDESCRIPTION: This snippet extracts the first four levels of tags and combines them with a '/' delimiter. If a fourth-level tag is present, all tags up to that level are combined; otherwise, an empty string is returned.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[3] ? tag.split('/').slice(0, 4).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Tags in Obsidian Tasks Plugin\nDESCRIPTION: This snippet groups tasks based on their tags, creating a task group for each unique tag. Tasks without tags are omitted from the output. It requires an environment where 'task.tags' is defined, such as Obsidian with the Tasks plugin, and uses JavaScript for processing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status Type with Obsidian Tasks Plugin - Markdown\nDESCRIPTION: This snippet illustrates how to group and sort tasks in an Obsidian note based on their status type with the tasks plugin. It uses a code block labeled 'tasks' to specify query instructions: ignoring global settings, filtering based on file path, grouping by the type of task status, and sorting by the task description. Requires the Obsidian Tasks plugin with support for advanced queries. Inputs include the current file path (via the variable {{query.file.path}}) and the statuses of markdown tasks present in the note. Outputs a grouped and sorted list of tasks as rendered inside Obsidian. Limitations include requiring Obsidian with the tasks plugin and proper status formatting in tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Theme - Aura.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\n# We need to ignore the global query, as it ignores this file:\nignore global query\n\npath includes {{query.file.path}}\ngroup by status.type\nsort by description\n```\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Tag Count (Descending, Negation) in Obsidian Tasks\nDESCRIPTION: Shows an alternative Obsidian Tasks 'sort by function' instruction for sorting tasks by tag count in descending order. It achieves this by negating the result of the Javascript expression (`-task.tags.length`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags_results.approved.txt#_snippet_2\n\nLANGUAGE: obsidian-tasks-sort\nCODE:\n```\nsort by function -task.tags.length\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Parent Folder in Obsidian Tasks - JavaScript\nDESCRIPTION: This snippet groups tasks by the immediate parent folder of their containing file. It removes the trailing slash from the folder path, splits the path by '/', takes the last folder name, and appends a slash to standardize formatting. No external dependencies are required. Input is the file folder path, and the output is the parent folder name with a trailing slash, supporting top-level files gracefully.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.folder_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.file.folder.slice(0, -1).split('/').pop() + '/'\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks with Dates and Urgency in Obsidian Tasks Format (Markdown)\nDESCRIPTION: This snippet displays multiple examples of tasks defined using the Obsidian Tasks plugin's extended Markdown syntax. Each line represents a task (`- [ ]`) with optional Start (🛫), Scheduled (⏳), and Due (📅) dates, followed by a calculated `urgency` score. Dates can be relative ('long ago', 'yesterday', 'today', 'tomorrow', 'far future'), absolute (YYYY-MM-DD), empty, or invalid.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Sort/Sort.test.Sort_visualise_date_impact_on_default_sort_order.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Start: long ago     Scheduled: long ago     Due: long ago     urgency = 18.95000 🛫 2022-01-01 ⏳ 2022-01-01 📅 2022-01-01\n- [ ] Start: long ago     Scheduled: yesterday    Due: long ago     urgency = 18.95000 🛫 2022-01-01 ⏳ 2022-01-14 📅 2022-01-01\n- [ ] Start: long ago     Scheduled: today        Due: long ago     urgency = 18.95000 🛫 2022-01-01 ⏳ 2022-01-15 📅 2022-01-01\n- [ ] Start: yesterday    Scheduled: long ago     Due: long ago     urgency = 18.95000 🛫 2022-01-14 ⏳ 2022-01-01 📅 2022-01-01\n- [ ] Start: yesterday    Scheduled: yesterday    Due: long ago     urgency = 18.95000 🛫 2022-01-14 ⏳ 2022-01-14 📅 2022-01-01\n- [ ] Start: yesterday    Scheduled: today        Due: long ago     urgency = 18.95000 🛫 2022-01-14 ⏳ 2022-01-15 📅 2022-01-01\n- [ ] Start: today        Scheduled: long ago     Due: long ago     urgency = 18.95000 🛫 2022-01-15 ⏳ 2022-01-01 📅 2022-01-01\n- [ ] Start: today        Scheduled: yesterday    Due: long ago     urgency = 18.95000 🛫 2022-01-15 ⏳ 2022-01-14 📅 2022-01-01\n- [ ] Start: today        Scheduled: today        Due: long ago     urgency = 18.95000 🛫 2022-01-15 ⏳ 2022-01-15 📅 2022-01-01\n- [ ] Start:              Scheduled: long ago     Due: long ago     urgency = 18.95000 ⏳ 2022-01-01 📅 2022-01-01\n- [ ] Start:              Scheduled: yesterday    Due: long ago     urgency = 18.95000 ⏳ 2022-01-14 📅 2022-01-01\n- [ ] Start:              Scheduled: today        Due: long ago     urgency = 18.95000 ⏳ 2022-01-15 📅 2022-01-01\n- [ ] Start: invalid      Scheduled: long ago     Due: long ago     urgency = 18.95000 🛫 Invalid date ⏳ 2022-01-01 📅 2022-01-01\n- [ ] Start: invalid      Scheduled: yesterday    Due: long ago     urgency = 18.95000 🛫 Invalid date ⏳ 2022-01-14 📅 2022-01-01\n- [ ] Start: invalid      Scheduled: today        Due: long ago     urgency = 18.95000 🛫 Invalid date ⏳ 2022-01-15 📅 2022-01-01\n- [ ] Start: long ago     Scheduled: long ago     Due: yesterday    urgency = 16.20714 🛫 2022-01-01 ⏳ 2022-01-01 📅 2022-01-14\n- [ ] Start: long ago     Scheduled: yesterday    Due: yesterday    urgency = 16.20714 🛫 2022-01-01 ⏳ 2022-01-14 📅 2022-01-14\n- [ ] Start: long ago     Scheduled: today        Due: yesterday    urgency = 16.20714 🛫 2022-01-01 ⏳ 2022-01-15 📅 2022-01-14\n- [ ] Start: yesterday    Scheduled: long ago     Due: yesterday    urgency = 16.20714 🛫 2022-01-14 ⏳ 2022-01-01 📅 2022-01-14\n- [ ] Start: yesterday    Scheduled: yesterday    Due: yesterday    urgency = 16.20714 🛫 2022-01-14 ⏳ 2022-01-14 📅 2022-01-14\n- [ ] Start: yesterday    Scheduled: today        Due: yesterday    urgency = 16.20714 🛫 2022-01-14 ⏳ 2022-01-15 📅 2022-01-14\n- [ ] Start: today        Scheduled: long ago     Due: yesterday    urgency = 16.20714 🛫 2022-01-15 ⏳ 2022-01-01 📅 2022-01-14\n- [ ] Start: today        Scheduled: yesterday    Due: yesterday    urgency = 16.20714 🛫 2022-01-15 ⏳ 2022-01-14 📅 2022-01-14\n- [ ] Start: today        Scheduled: today        Due: yesterday    urgency = 16.20714 🛫 2022-01-15 ⏳ 2022-01-15 📅 2022-01-14\n- [ ] Start:              Scheduled: long ago     Due: yesterday    urgency = 16.20714 ⏳ 2022-01-01 📅 2022-01-14\n- [ ] Start:              Scheduled: yesterday    Due: yesterday    urgency = 16.20714 ⏳ 2022-01-14 📅 2022-01-14\n- [ ] Start:              Scheduled: today        Due: yesterday    urgency = 16.20714 ⏳ 2022-01-15 📅 2022-01-14\n- [ ] Start: invalid      Scheduled: long ago     Due: yesterday    urgency = 16.20714 🛫 Invalid date ⏳ 2022-01-01 📅 2022-01-14\n- [ ] Start: invalid      Scheduled: yesterday    Due: yesterday    urgency = 16.20714 🛫 Invalid date ⏳ 2022-01-14 📅 2022-01-14\n- [ ] Start: invalid      Scheduled: today        Due: yesterday    urgency = 16.20714 🛫 Invalid date ⏳ 2022-01-15 📅 2022-01-14\n- [ ] Start: tomorrow     Scheduled: long ago     Due: long ago     urgency = 15.95000 🛫 2022-01-16 ⏳ 2022-01-01 📅 2022-01-01\n- [ ] Start: tomorrow     Scheduled: yesterday    Due: long ago     urgency = 15.95000 🛫 2022-01-16 ⏳ 2022-01-14 📅 2022-01-01\n- [ ] Start: tomorrow     Scheduled: today        Due: long ago     urgency = 15.95000 🛫 2022-01-16 ⏳ 2022-01-15 📅 2022-01-01\n- [ ] Start: far future   Scheduled: long ago     Due: long ago     urgency = 15.95000 🛫 2022-01-31 ⏳ 2022-01-01 📅 2022-01-01\n- [ ] Start: far future   Scheduled: yesterday    Due: long ago     urgency = 15.95000 🛫 2022-01-31 ⏳ 2022-01-14 📅 2022-01-01\n- [ ] Start: far future   Scheduled: today        Due: long ago     urgency = 15.95000 🛫 2022-01-31 ⏳ 2022-01-15 📅 2022-01-01\n- [ ] Start: long ago     Scheduled: long ago     Due: today        urgency = 15.75000 🛫 2022-01-01 ⏳ 2022-01-01 📅 2022-01-15\n- [ ] Start: long ago     Scheduled: yesterday    Due: today        urgency = 15.75000 🛫 2022-01-01 ⏳ 2022-01-14 📅 2022-01-15\n- [ ] Start: long ago     Scheduled: today        Due: today        urgency = 15.75000 🛫 2022-01-01 ⏳ 2022-01-15 📅 2022-01-15\n- [ ] Start: yesterday    Scheduled: long ago     Due: today        urgency = 15.75000 🛫 2022-01-14 ⏳ 2022-01-01 📅 2022-01-15\n- [ ] Start: yesterday    Scheduled: yesterday    Due: today        urgency = 15.75000 🛫 2022-01-14 ⏳ 2022-01-14 📅 2022-01-15\n- [ ] Start: yesterday    Scheduled: today        Due: today        urgency = 15.75000 🛫 2022-01-14 ⏳ 2022-01-15 📅 2022-01-15\n- [ ] Start: today        Scheduled: long ago     Due: today        urgency = 15.75000 🛫 2022-01-15 ⏳ 2022-01-01 📅 2022-01-15\n- [ ] Start: today        Scheduled: yesterday    Due: today        urgency = 15.75000 🛫 2022-01-15 ⏳ 2022-01-14 📅 2022-01-15\n- [ ] Start: today        Scheduled: today        Due: today        urgency = 15.75000 🛫 2022-01-15 ⏳ 2022-01-15 📅 2022-01-15\n- [ ] Start:              Scheduled: long ago     Due: today        urgency = 15.75000 ⏳ 2022-01-01 📅 2022-01-15\n- [ ] Start:              Scheduled: yesterday    Due: today        urgency = 15.75000 ⏳ 2022-01-14 📅 2022-01-15\n- [ ] Start:              Scheduled: today        Due: today        urgency = 15.75000 ⏳ 2022-01-15 📅 2022-01-15\n- [ ] Start: invalid      Scheduled: long ago     Due: today        urgency = 15.75000 🛫 Invalid date ⏳ 2022-01-01 📅 2022-01-15\n- [ ] Start: invalid      Scheduled: yesterday    Due: today        urgency = 15.75000 🛫 Invalid date ⏳ 2022-01-14 📅 2022-01-15\n- [ ] Start: invalid      Scheduled: today        Due: today        urgency = 15.75000 🛫 Invalid date ⏳ 2022-01-15 📅 2022-01-15\n- [ ] Start: long ago     Scheduled: long ago     Due: tomorrow     urgency = 15.29286 🛫 2022-01-01 ⏳ 2022-01-01 📅 2022-01-16\n- [ ] Start: long ago     Scheduled: yesterday    Due: tomorrow     urgency = 15.29286 🛫 2022-01-01 ⏳ 2022-01-14 📅 2022-01-16\n- [ ] Start: long ago     Scheduled: today        Due: tomorrow     urgency = 15.29286 🛫 2022-01-01 ⏳ 2022-01-15 📅 2022-01-16\n- [ ] Start: yesterday    Scheduled: long ago     Due: tomorrow     urgency = 15.29286 🛫 2022-01-14 ⏳ 2022-01-01 📅 2022-01-16\n- [ ] Start: yesterday    Scheduled: yesterday    Due: tomorrow     urgency = 15.29286 🛫 2022-01-14 ⏳ 2022-01-14 📅 2022-01-16\n- [ ] Start: yesterday    Scheduled: today        Due: tomorrow     urgency = 15.29286 🛫 2022-01-14 ⏳ 2022-01-15 📅 2022-01-16\n- [ ] Start: today        Scheduled: long ago     Due: tomorrow     urgency = 15.29286 🛫 2022-01-15 ⏳ 2022-01-01 📅 2022-01-16\n- [ ] Start: today        Scheduled: yesterday    Due: tomorrow     urgency = 15.29286 🛫 2022-01-15 ⏳ 2022-01-14 📅 2022-01-16\n- [ ] Start: today        Scheduled: today        Due: tomorrow     urgency = 15.29286 🛫 2022-01-15 ⏳ 2022-01-15 📅 2022-01-16\n- [ ] Start:              Scheduled: long ago     Due: tomorrow     urgency = 15.29286 ⏳ 2022-01-01 📅 2022-01-16\n- [ ] Start:              Scheduled: yesterday    Due: tomorrow     urgency = 15.29286 ⏳ 2022-01-14 📅 2022-01-16\n- [ ] Start:              Scheduled: today        Due: tomorrow     urgency = 15.29286 ⏳ 2022-01-15 📅 2022-01-16\n- [ ] Start: invalid      Scheduled: long ago     Due: tomorrow     urgency = 15.29286 🛫 Invalid date ⏳ 2022-01-01 📅 2022-01-16\n- [ ] Start: invalid      Scheduled: yesterday    Due: tomorrow     urgency = 15.29286 🛫 Invalid date ⏳ 2022-01-14 📅 2022-01-16\n- [ ] Start: invalid      Scheduled: today        Due: tomorrow     urgency = 15.29286 🛫 Invalid date ⏳ 2022-01-15 📅 2022-01-16\n- [ ] Start: long ago     Scheduled: tomorrow     Due: long ago     urgency = 13.95000 🛫 2022-01-01 ⏳ 2022-01-16 📅 2022-01-01\n- [ ] Start: long ago     Scheduled: far future   Due: long ago     urgency = 13.95000 🛫 2022-01-01 ⏳ 2022-01-31 📅 2022-01-01\n- [ ] Start: long ago     Scheduled:              Due: long ago     urgency = 13.95000 🛫 2022-01-01 📅 2022-01-01\n- [ ] Start: long ago     Scheduled: invalid      Due: long ago     urgency = 13.95000 🛫 2022-01-01 ⏳ Invalid date 📅 2022-01-01\n- [ ] Start: yesterday    Scheduled: tomorrow     Due: long ago     urgency = 13.95000 🛫 2022-01-14 ⏳ 2022-01-16 📅 2022-01-01\n- [ ] Start: yesterday    Scheduled: far future   Due: long ago     urgency = 13.95000 🛫 2022-01-14 ⏳ 2022-01-31 📅 2022-01-01\n- [ ] Start: yesterday    Scheduled:              Due: long ago     urgency = 13.95000 🛫 2022-01-14 📅 2022-01-01\n- [ ] Start: yesterday    Scheduled: invalid      Due: long ago     urgency = 13.95000 🛫 2022-01-14 ⏳ Invalid date 📅 2022-01-01\n- [ ] Start: today        Scheduled: tomorrow     Due: long ago     urgency = 13.95000 🛫 2022-01-15 ⏳ 2022-01-16 📅 2022-01-01\n- [ ] Start: today        Scheduled: far future   Due: long ago     urgency = 13.95000 🛫 2022-01-15 ⏳ 2022-01-31 📅 2022-01-01\n- [ ] Start: today        Scheduled:              Due: long ago     urgency = 13.95000 🛫 2022-01-15 📅 2022-01-01\n- [ ] Start: today        Scheduled: invalid      Due: long ago     urgency = 13.95000 🛫 2022-01-15 ⏳ Invalid date 📅 2022-01-01\n- [ ] Start:              Scheduled: tomorrow     Due: long ago     urgency = 13.95000 ⏳ 2022-01-16 📅 2022-01-01\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Start Date Day of Week - Javascript\nDESCRIPTION: This snippet sorts tasks based on the day of the week they are started. It accesses the start date via `task.start` and formats it to the full day name string using `.format(\"dddd\")`. `sort by function` then orders tasks alphabetically by this day name.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.start.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Grouping by Month and Week - JavaScript\nDESCRIPTION: This snippet groups tasks by month and week number, formatted as 'YYYY%%-MM%% MMM - Week WW'.  The month number is embedded to control sort order. If the month number is not embedded, the first or last week of the year may be displayed in a non-logical order. The expression evaluates to a string representing the formatted month and week number of the task's due date, including hidden characters for sorting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.format(\"YYYY[%%]-MM[%%] MMM [- Week] WW\")\n```\n\n----------------------------------------\n\nTITLE: Setting up the Obsidian Tasks development environment with Yarn\nDESCRIPTION: Commands to initialize the development environment for the Obsidian Tasks plugin, including installing dependencies, building the project, running tests, and linting code and markdown files.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Building/Setting up build environment.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn build\nyarn test\nyarn lint\nyarn lint:markdown\n```\n\n----------------------------------------\n\nTITLE: Single Date Filter with Boolean OR and NOT\nDESCRIPTION: Example of filtering tasks created on a specific date combined with OR and NOT operators. Shows the logical structure of the filter expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_56\n\nLANGUAGE: text\nCODE:\n```\n'(created on 2021-12-27) OR NOT (created on 2021-12-27)'\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Category (Broad Categories) in Obsidian Tasks - JavaScript\nDESCRIPTION: Segments tasks into five main categories: 'Invalid date', 'Overdue', 'Today', 'Future', and 'Undated', each with a specific sort order. Uses Moment.js to assess due date status against the current date and returns a formatted label for each group. Works best with tasks that include a 'due' property, and can be used to reduce heading clutter when many due dates exist; familiar with JavaScript ternary expressions and task object structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\\n    const date = task.due.moment; \\\n    return \\\n        (!date)                           ? '%%4%% Undated' :      \\\n        !date.isValid()                   ? '%%0%% Invalid date' : \\\n        date.isBefore(moment(), 'day')    ? '%%1%% Overdue' :      \\\n        date.isSame(moment(), 'day')      ? '%%2%% Today'   :      \\\n        '%%3%% Future';\n```\n\n----------------------------------------\n\nTITLE: Linking to Multiple Headings in Obsidian Notes with JavaScript\nDESCRIPTION: This snippet demonstrates how to programmatically insert links to multiple headings within a note using JavaScript, facilitating navigation or task referencing. It likely involves parsing note content for headings and inserting links accordingly. Dependencies include Obsidian's API and JavaScript.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/link_in_heading.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example code to generate links to multiple headings\nconst linkToHeadings = async (app, notePath, headings) => {\n  const vault = app.vault;\n  const file = await vault.getAbstractFileByPath(notePath);\n  if (file instanceof TFile) {\n    const content = await vault.read(file);\n    let links = '';\n    headings.forEach(heading => {\n      links += `- [[${notePath}#${heading}]]\\n`;\n    });\n    await vault.modify(file, content + '\\n' + links);\n  }\n};\n// Usage: linkToHeadings(app, 'notes/example.md', ['Introduction', 'Tasks']);\n```\n\n----------------------------------------\n\nTITLE: Structuring New Notes with Obsidian Templater\nDESCRIPTION: Defines an Obsidian note template structure using the Templater plugin. It first includes standard frontmatter by embedding the content of the note '[[standard frontmatter]]'. It then sets the file's title as a level 1 Markdown heading using `<% tp.file.title %>'. Finally, it includes content, likely tags or links, from the note '[[tags for related pages]]' under a placeholder heading.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/_meta/templates/new documentation file.md#_snippet_0\n\nLANGUAGE: Obsidian Templater\nCODE:\n```\n<% tp.file.include(\"[[standard frontmatter]]\") %>\n# <% tp.file.title %>\n\n<% tp.file.include(\"[[tags for related pages]]\") %>\n## ...\n```\n\n----------------------------------------\n\nTITLE: Listing Tasks with Query\nDESCRIPTION: Shows how to use a code block to create a tasks query that lists all open tasks in a markdown file.  It depends on the Obsidian Tasks plugin being installed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Getting Started.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\n    not done\n    ```\n```\n\n----------------------------------------\n\nTITLE: Dataview Format for Recurrence in Obsidian Tasks\nDESCRIPTION: Example of how to use dataview format to set up a recurring task in Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Dataview Format.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Is a recurring task [repeat:: every day when done]\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by query folder (JavaScript)\nDESCRIPTION: This JavaScript code filters tasks located only in the same folder as the query itself. It excludes tasks present in any subfolders by utilizing `task.file.folder === query.file.folder`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder === query.file.folder\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with Tag Reference in Markdown for Obsidian Tasks - Markdown\nDESCRIPTION: This snippet declares a task item in markdown format with an unchecked checkbox and tags it with #task. It illustrates how to write tasks inside a markdown file, which can be tracked and managed by the Obsidian Tasks plugin. The tag helps categorize or filter the task during queries.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_custom_number_property.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Task in 'yaml_custom_number_property'\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Status Symbol ('space')\nDESCRIPTION: Defines the 'space' character as a status symbol representing 'Todo' (type TODO). When this status is toggled, it transitions to the 'x' symbol (representing Done).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nspace\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks Query: Grouping by Formatted Happens Date\nDESCRIPTION: This snippet demonstrates how to group tasks by their 'happens' date using a function that formats the date string. It utilizes the `task.happens.format()` method with the format string \"YYYY-MM-DD dddd\". Unlike the standard `group by happens`, tasks without a 'happens' date will be grouped under an empty string instead of \"No happens date\". Requires tasks to potentially have a 'happens' date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.happens_docs.approved.md#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\ngroup by function task.happens.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Task Status Symbols in Obsidian Tasks\nDESCRIPTION: This snippet shows four different task status types in Obsidian Tasks' markdown format. It demonstrates the default 'Todo' status (empty checkbox), 'Done' status (x checkbox), and two custom statuses with slash and p symbols.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_create_set_of_sample_task_lines,_excluding_duplicate_and_empty_symbols.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Sample task 1: status symbol=`space` status name='Todo'\n- [x] Sample task 2: status symbol=`x` status name='Done'\n- [/] Sample task 3: status symbol=`/` status name='A slash'\n- [p] Sample task 4: status symbol=`p` status name='A p'\n```\n\n----------------------------------------\n\nTITLE: Define Auto-Suggest Integration Method - TypeScript\nDESCRIPTION: This TypeScript function signature defines the `showTasksPluginAutoSuggest` method required for plugins that extend Obsidian's markdown editor and wish to control when the Tasks auto-suggest feature appears. Implementing this method allows the plugin to explicitly request the suggest to be shown or hidden, or defer to the default Tasks behavior.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Tasks Api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns\n * - true to explicitly request that the suggest be displayed\n * - false to request that it be hidden\n * - undefined to defer to Tasks' default behavior\n *\n * @param cursor The current cursor position in the editor\n * @param editor The editor instance\n * @param lineHasGlobalFilter True if the line the cursor is in matches the\n *        global filter or if no global filter is set\n */\nshowTasksPluginAutoSuggest(\n  cursor: EditorPosition,\n  editor: Editor,\n  lineHasGlobalFilter: boolean\n): boolean | undefined\n```\n\n----------------------------------------\n\nTITLE: Generating a Tasks Block with DataviewJS - JavaScript\nDESCRIPTION: This dataviewjs script constructs a multi-line Tasks query string that includes only not-done tasks from the current file, using dv.current().file.path for dynamic filtering. It outputs a full Tasks block rendered by the Tasks plugin. Dataview and Tasks plugins must both be installed and enabled. Inputs: none (runs in context). Output: generated Tasks block with grouped headings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to get tasks in current file.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst query = `\nnot done\npath includes ${dv.current().file.path}\n# you can add any number of extra Tasks instructions, for example:\ngroup by heading\n`;\n\ndv.paragraph('```tasks\\n' + query + '\\n```');\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by cancelled status symbol\nDESCRIPTION: This snippet filters tasks to find those with a checkbox containing a hyphen `[-]`, which is conventionally used to mean \"cancelled\". It uses the `task.status.symbol` property to check the symbol.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.symbol_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.status.symbol === '-'\n```\n\n----------------------------------------\n\nTITLE: Filtering Not Fully Completed Tasks - Dataview - dataview\nDESCRIPTION: Retrieves tasks that are not fully completed, depending on a custom 'fullyCompleted' property for each task. Requires the Dataview plugin and a boolean 'fullyCompleted' field. Only tasks where 'fullyCompleted' is false are output; commonly used when tasks have subtasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_4\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nWHERE !fullyCompleted\n```\n\n----------------------------------------\n\nTITLE: Tasks Plugin Search Query\nDESCRIPTION: This snippet defines a Tasks plugin search query that filters for incomplete tasks (`not done`) within the current file's path.  It groups the results first by a function that displays the current Timezone based on the process.env.TZ variable. Then it groups the results by due date and hides backlinks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Time Zones/Pacific-Auckland.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\npath includes {{query.file.path}}\n\ngroup by function 'Timezone: ' + process.env.TZ\ngroup by due\n\nhide backlinks\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Joined Tags in Obsidian Tasks Plugin\nDESCRIPTION: This snippet groups tasks by a single combined string of all their tags joined with commas, allowing tasks with multiple tags to be grouped under a combined heading. It requires 'task.tags' and joins tags with ', ' for clickable headings. Suitable for organizing tasks with multiple tags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags.join(\", \")\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Urgency with Three Decimal Places in JavaScript\nDESCRIPTION: This snippet groups tasks based on their urgency, formatted to three decimal places using the toFixed(3) method. It is intended to provide more precise grouping than the built-in 'group by urgency' which defaults to two decimal places. It depends on the task object having an urgency property, which is a numeric value. The output groups tasks by urgency strings rounded to exactly three decimals.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.urgency_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.urgency.toFixed(3)\n```\n\n----------------------------------------\n\nTITLE: Simplifying XOR with Nested OR Boolean Expression\nDESCRIPTION: This snippet simplifies an expression using 'XOR' and a nested 'OR' combination. 'is not recurring' is aliased to 'f1', 'path includes ab/c' to 'f2', and 'happens before 2021-12-27' to 'f3'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_57\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) XOR ((f2) OR (f3))\",\n    \"filters\": {\n        \"f1\": \"is not recurring\",\n        \"f2\": \"path includes ab/c\",\n        \"f3\": \"happens before 2021-12-27\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Category in Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Groups tasks into five categories: Invalid date, Overdue, Today, Future, and Undated using the function task.due.category.groupText. This snippet improves clarity in due date headings by breaking them into broader, user-friendly groups. Dependencies include the Obsidian Tasks plugin with support for custom group functions; expected input is task objects with due categories; output is a categorized task list by groupText.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.category.groupText\n// Output:\n// %%0%% Invalid date\n// %%1%% Overdue\n// %%2%% Today\n// %%3%% Future\n// %%4%% Undated\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported Sort Key Type (Array) in 'sort by function' Expression\nDESCRIPTION: This snippet tests how the Tasks plugin handles unsupported key types during sorting by function. Specifically, it attempts to sort tasks by the 'task.tags' property, which is likely an array or complex type that does not support direct comparison for sorting. The snippet is a demonstration of limitations when sorting by complex object types instead of primitives.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Sorting.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\nsort by function task.tags\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Complex Nested OR/AND Expression\nDESCRIPTION: Demonstrates preprocessing of `(A OR B OR C) AND (D OR E OR F)`. All operands use parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'( (description includes a) OR (description includes b) OR (description includes c) ) AND ( (description includes d) OR (description includes e) OR (description includes f) )'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"( (\",\n    \"description includes a\",\n    \") OR (\",\n    \"description includes b\",\n    \") OR (\",\n    \"description includes c\",\n    \") \",\n    \") AND (\",\n    \" (\",\n    \"description includes d\",\n    \") OR (\",\n    \"description includes e\",\n    \") OR (\",\n    \"description includes f\",\n    \") )\"\n]\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by formatted 'happens' date in Obsidian Tasks (JavaScript)\nDESCRIPTION: This code demonstrates how to group tasks based on the 'happens' date attribute, formatted as 'YYYY-MM-DD dddd'. It replaces missing 'happens' dates with an empty string, enabling grouping by date or unspecified dates. The primary dependencies involve date formatting functions and task data structures, and the output generates groups labeled by formatted date strings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.happens_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.happens.format(\"YYYY-MM-DD dddd\")\nLike \"group by happens\", except it uses an empty string instead of \"No happens date\" if there is no happens date.\n=>\n2023-05-30 Tuesday\n2023-05-31 Wednesday\n2023-06-01 Thursday\n2023-06-02 Friday\n```\n\n----------------------------------------\n\nTITLE: Corrected Regex Path Search - Tasks\nDESCRIPTION: This snippet shows the corrected way to perform a regex search on the path. It demonstrates how to properly escape the forward slash `/` characters within the regex pattern using a backslash `\\`, ensuring that the entire path is correctly matched. This avoids the truncation issue shown in the previous example.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n```tasks\npath regex matches /Filters\\/Regular Expression Searches/\n```\n```\n\nLANGUAGE: text\nCODE:\n```\npath regex matches /Filters\\/Regular Expression Searches/\n```\n\n----------------------------------------\n\nTITLE: Setting Global Query (Path Filter) - Obsidian Tasks Query\nDESCRIPTION: Demonstrates how a global query is defined, in this case, filtering tasks to include only those whose file path contains `/tasks`. This instruction is prepended to every task block query unless explicitly ignored. This example is shown in the context of how it combines with a block-specific query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Global Query.md#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\npath includes /tasks\n```\n\n----------------------------------------\n\nTITLE: Minimal Theme Task Status Configuration Table (Markdown)\nDESCRIPTION: Displays a Markdown table outlining the configuration details for each custom task status supported by the Minimal Theme. Columns include Status Symbol, Next Status Symbol, Status Name, Status Type, and whether custom styling is needed. This configuration can be added via a one-click button in the Tasks plugin settings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/Minimal Theme.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name<br>`status.name includes...`<br>`sort by status.name`<br>`group by status.name` | Status Type<br>`status.type is...`<br>`sort by status.type`<br>`group by status.type` | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `space` | `x` | to-do | `TODO` | No |\n| `/` | `x` | incomplete | `IN_PROGRESS` | Yes |\n| `x` | `space` | done | `DONE` | No |\n| `-` | `space` | canceled | `CANCELLED` | Yes |\n| `>` | `x` | forwarded | `TODO` | Yes |\n| `<` | `x` | scheduling | `TODO` | Yes |\n| `?` | `x` | question | `TODO` | Yes |\n| `!` | `x` | important | `TODO` | Yes |\n| `*` | `x` | star | `TODO` | Yes |\n| `\"` | `x` | quote | `TODO` | Yes |\n| `l` | `x` | location | `TODO` | Yes |\n| `b` | `x` | bookmark | `TODO` | Yes |\n| `i` | `x` | information | `TODO` | Yes |\n| `S` | `x` | savings | `TODO` | Yes |\n| `I` | `x` | idea | `TODO` | Yes |\n| `p` | `x` | pros | `TODO` | Yes |\n| `c` | `x` | cons | `TODO` | Yes |\n| `f` | `x` | fire | `TODO` | Yes |\n| `k` | `x` | key | `TODO` | Yes |\n| `w` | `x` | win | `TODO` | Yes |\n| `u` | `x` | up | `TODO` | Yes |\n| `d` | `x` | down | `TODO` | Yes |\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Description Length in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates filtering tasks by checking if the length of the task description exceeds 100 characters. It relies on each task object having a 'description' property and is typically used in an environment where tasks are represented as JavaScript objects. The key parameter is the numeric threshold (100) for the description length, and the output is a filtered list of tasks matching this criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.description_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.description.length > 100\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Happening Date Range (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'happens in' filter (checking due, start, or scheduled date) combined with 'OR NOT'. This query matches all tasks by selecting those happening within 2021-12-27 to 2021-12-29 OR those not.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_102\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(happens in 2021-12-27 2021-12-29) OR NOT (happens in 2021-12-27 2021-12-29)\n```\n\n----------------------------------------\n\nTITLE: Recurring Task Based on Completion Date in Markdown\nDESCRIPTION: Shows a recurring task with the 'when done' modifier that schedules the new task based on the completion date rather than the original date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] sweep the floors 🔁 every week when done ⏳ 2022-02-20\n- [x] sweep the floors 🔁 every week when done ⏳ 2021-02-06 ✅ 2022-02-13\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting Tasks by Status Type - Obsidian Tasks\nDESCRIPTION: This illustrates a custom sorting implementation that sorts tasks based on their status type in alphabetical order.  It utilizes a function to retrieve the task's status type and then arranges the tasks accordingly. The output shows the tasks sorted, demonstrating the functionality.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.statuses_task.status.type_results.approved.txt#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Filtering tasks with urgency between 8.0 and 11.0 inclusive\nDESCRIPTION: This snippet filters tasks whose urgency scores are within the range of 8.0 to 11.0 inclusive, demonstrating the use of combined 'and' conditions with floating-point comparison to account for possible rounding. It showcases range filtering based on numeric urgency values.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_results.approved.txt#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfilter by function task.urgency > 7.9999 && task.urgency < 11.0001\nFind tasks with an urgency score between `8.0` and `11.0`, inclusive.\n=>\n- [ ] #task Highest priority ➙\n- [ ] due 2023-06-11 ➙ 2023-06-11\n====================================================================================\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Urgency in Obsidian Tasks Plugin\nDESCRIPTION: Provides options to filter tasks based on urgency levels, enabling sorting and grouping via the 'task.urgency' property. Useful for prioritizing tasks based on urgency criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_22\n\nLANGUAGE: Markdown\nCODE:\n```\n`sort by urgency`\\n`group by urgency`\\n`show urgency`\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Next Status Symbol (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to group tasks using a custom JavaScript function in the Obsidian Tasks query language. It groups tasks based on the symbol that the task's status will change to upon toggling, making spaces in the symbol explicit by replacing them with the word 'space'. This allows for clear visual separation of groups based on symbols that might otherwise look similar.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.statuses_task.status.nextSymbol_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function \"Next status symbol: \" + task.status.nextSymbol.replace(\" \", \"space\")\n```\n\n----------------------------------------\n\nTITLE: Status Cycle for Important Tasks with Custom Symbols\nDESCRIPTION: A table that details the statuses for important tasks, highlighting the use of symbols like '!', 'D', and 'X' to denote importance, progress, and completion, respectively, along with their classification and styling needs.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Example Statuses.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name | Status Type | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `!` | `D` | Important | `TODO` | Yes |\n| `D` | `X` | Doing - Important | `IN_PROGRESS` | Yes |\n| `X` | `!` | Done - Important | `DONE` | Yes |\n```\n\n----------------------------------------\n\nTITLE: Workflow Diagram for Todo -> In Progress -> Done Statuses\nDESCRIPTION: A Mermaid flowchart that visualizes the progression of tasks from Todo to In Progress and then to Done, with styled classes for each status. It serves to illustrate a standard task lifecycle workflow.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Example Statuses.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Todo\"]:::TODO\n2[\"In Progress\"]:::IN_PROGRESS\n3[\"Done\"]:::DONE\n1 --> 2\n2 --> 3\n3 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Setting Note Title with Templater\nDESCRIPTION: This Templater snippet sets the title of the current note to be the same as the filename. `tp.file.title` is a Templater variable which represents the name of the current file, excluding the extension. The purpose is to ensure the heading matches the file name and establish consistency.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/_meta/templates/new documentation file.md#_snippet_1\n\nLANGUAGE: Templater\nCODE:\n```\n# <% tp.file.title %>\n```\n\n----------------------------------------\n\nTITLE: Querying Incomplete Tasks with Obsidian Tasks Plugin Query Language\nDESCRIPTION: This snippet demonstrates a task query block in the Obsidian Tasks plugin syntax that retrieves all not completed (\"not done\") tasks from files whose file path matches the current note's file path dynamically via a template variable. It relies on the Obsidian Tasks plugin to parse and execute the query, filtering tasks by completion status and file path. The expected output is a dynamically updated list of incomplete tasks within the specified path context.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/callouts_nested_issue_2890_labelled.md#_snippet_1\n\nLANGUAGE: tasks plugin query\nCODE:\n```\nnot done\npath includes {{query.file.path}}\n```\n\n----------------------------------------\n\nTITLE: Example Task Advanced to IN_PROGRESS\nDESCRIPTION: Shows the state of the example recurring task after the first click. The status symbol has changed from '[ ]' (TODO) to '[/]' (IN_PROGRESS), according to the default status transition settings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- [/] Do something 🔁 every day 📅 2023-10-15\n```\n\n----------------------------------------\n\nTITLE: Sorting by File Path in Tasks\nDESCRIPTION: This JavaScript snippet enables sorting tasks based on their file path. It utilizes `task.file.path` to extract the file path. The file path includes the file extension. The output is a sorted list of tasks based on the file paths.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.path\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by urgency range (JavaScript)\nDESCRIPTION: This JavaScript snippet finds tasks with an urgency score between 8.0 and 11.0, inclusive.  Due to rounding issues when comparing numbers, the comparison is done against 7.9999 and 11.0001.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency > 7.9999 && task.urgency < 11.0001\n```\n\n----------------------------------------\n\nTITLE: Sorting and Grouping Tasks by Scheduled Date\nDESCRIPTION: Allows organizing tasks based on their scheduled dates through sorting and grouping options, using the 'task.scheduled' attribute. Support for hiding the scheduled date field enables customized task list views.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n`sort by scheduled`\\n`group by scheduled`\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks with Highlighted Word - JavaScript\nDESCRIPTION: This JavaScript snippet groups tasks based on their description with the word \"short\" replaced with \"==short==\". It utilizes the `replace()` method on the `task.description` property. This is useful for highlighting specific keywords or phrases within the task descriptions and then grouping by the results, showing where the keyword appears within the description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.description_docs.approved.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description.replace('short', '==short==')\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by First Tag Level (No '#') in Obsidian Tasks\nDESCRIPTION: This JavaScript function, used with 'group by function' in Obsidian Tasks, groups tasks based on the first level of their hierarchical tags. It iterates through each task's tags, splits the tag string by '/', takes the first element (index 0), and removes the leading '#' character.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[0].replace('#', '') )\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Specific Cancelled Date\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a specific cancelled date filter. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(cancelled on 2021-12-27) OR NOT (cancelled on 2021-12-27)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"cancelled on 2021-12-27\",\n        \"f2\": \"cancelled on 2021-12-27\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Status Transition Flowchart in Mermaid\nDESCRIPTION: A Mermaid flowchart that defines task statuses with different styling classes and shows the transition paths between them. The chart uses color-coded stroke styles to represent different states like TODO, DONE, IN_PROGRESS, and CANCELLED, with arrows showing possible transitions between task states.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_LYT_Mode_Table.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Unchecked\"]:::TODO\n2[\"Checked\"]:::DONE\n3[\"Rescheduled\"]:::TODO\n4[\"Scheduled\"]:::TODO\n5[\"Important\"]:::TODO\n6[\"Cancelled\"]:::CANCELLED\n7[\"In Progress\"]:::IN_PROGRESS\n8[\"Question\"]:::TODO\n9[\"Star\"]:::TODO\n10[\"Note\"]:::TODO\n11[\"Location\"]:::TODO\n12[\"Information\"]:::TODO\n13[\"Idea\"]:::TODO\n14[\"Amount\"]:::TODO\n15[\"Pro\"]:::TODO\n16[\"Con\"]:::TODO\n17[\"Bookmark\"]:::TODO\n18[\"Fire\"]:::TODO\n19[\"Key\"]:::TODO\n20[\"Win\"]:::TODO\n21[\"Up\"]:::TODO\n22[\"Down\"]:::TODO\n1 --> 2\n2 --> 1\n3 --> 2\n4 --> 2\n5 --> 2\n6 --> 1\n7 --> 2\n8 --> 2\n9 --> 2\n10 --> 2\n11 --> 2\n12 --> 2\n13 --> 2\n14 --> 2\n15 --> 2\n16 --> 2\n17 --> 2\n18 --> 2\n19 --> 2\n20 --> 2\n21 --> 2\n22 --> 2\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Extracting Combined First and Second-Level Tags from Task Tags in JavaScript\nDESCRIPTION: This snippet extracts a combined tag string consisting of the first and second hierarchical segments joined by '/' if the second segment exists; otherwise, it returns an empty string. This facilitates grouping tasks by a combined tag path two levels deep, e.g., '#tag/subtag'. Input tag strings must be slash-separated, starting with '#', and outputs include concatenated segments or empty strings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[1] ? tag.split('/').slice(0, 2).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Handling Parsing Error - AND with Description\nDESCRIPTION: This snippet shows how a parsing error is handled when combining 'has start date' with a description inclusion using 'AND'. The error message indicates that delimiters are required around the filters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_36\n\nLANGUAGE: TEXT\nCODE:\n```\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Sorting by File Name in Tasks\nDESCRIPTION: This snippet allows sorting tasks based on the file name using `task.file.filename`. This is similar to the `sort by filename` query in Tasks. The input includes the file names of tasks, and the output is a sorted list.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.filename\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status Symbol and Handling Spaces in JavaScript\nDESCRIPTION: This JavaScript code snippet groups tasks by their status symbols. It uses a function that concatenates \"Status symbol: \" with the task's status symbol. Crucially, it replaces spaces within the status symbol with the word \"space\" to ensure visibility in the output. This snippet is likely used within a task management system to display grouped tasks based on status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.statuses_task.status.symbol_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function \"Status symbol: \" + task.status.symbol.replace(\" \", \"space\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Task Query with File Properties - Tasks\nDESCRIPTION: This snippet demonstrates a dynamic task query that includes the file path using the `query.file.path` placeholder.  It also dynamically adds `sort by` clauses based on the `TQ_sort_by` file property.  If the property is not set, it defaults to an empty string, preventing errors. It relies on the Tasks plugin for Obsidian to interpret and execute the query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/Placeholder examples to capture in tests and docs.md#_snippet_0\n\nLANGUAGE: Tasks\nCODE:\n```\n```tasks\npath includes {{query.file.path}}\n\n# Instructions are listed in the order that items are displayed in Tasks search results\n\n{{const prop = 'TQ_sort_by';                return query.file.hasProperty(prop) &&   query.file.property(prop).map((g) => 'sort by ' + g).join('\\n') || ''}}\n{{const prop = 'TQ_group_by';               return query.file.hasProperty(prop) &&   query.file.property(prop).map((g) => 'group by ' + g).join('\\n') || ''}}\n```\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Formatted Done Date (obsidian-tasks query)\nDESCRIPTION: This obsidian-tasks query groups tasks by their completion date, utilizing a JavaScript function to format the `task.done` property into a `YYYY-MM-DD dddd` string. Tasks lacking a done date are assigned an empty string group key instead of the default \"No done date\". This functionality requires the obsidian-tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.done_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.done.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Time From Now - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Uses `task.due.fromNow.groupText` to group tasks by their relative due date, such as `8 days ago` or `in 11 hours`. If there is no due date, the heading is omitted. Requires moment.js for date calculation, and supports auxiliary properties like `task.due.fromNow.name` and `task.due.fromNow.sortOrder` for fine-tuning group display.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.fromNow.groupText\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: Combined OR and AND\nDESCRIPTION: The provided example shows how OR and AND operators are combined in a complex expression. The parser breaks down the expression and successfully interprets the operation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n'( (description includes a) OR (description includes b) OR (description includes c) ) AND ( (description includes d) OR (description includes e) OR (description includes f) )'\n=>\nResult:\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no depends on\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no depends on'. The term is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_61\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no depends on\",\n        \"f2\": \"no depends on\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query/FilterParser.ts and Query/Filter/BooleanField.ts - Filter Parsing and Boolean Field Handling\nDESCRIPTION: Implementations for parsing complex filter expressions and handling boolean field filters within queries, supporting advanced filtering options.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Parsing of filter expressions and boolean field filter management, enabling flexible query filters */\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Original Markdown (Obsidian)\nDESCRIPTION: This snippet describes a method to group tasks based on their original Markdown text, enclosed in backticks for code formatting. The backticks preserve single backtick characters within the task line and prevent the task checkbox from appearing in the headings.  There are no direct dependencies; this is a configuration approach within the Obsidian Tasks environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.originalMarkdown_results.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngroup by function '``' + task.originalMarkdown + '``'\nGroup by the raw text of the task's original line in the MarkDown file as code.\nNote the pairs of backtick characters ('`'), to preserve even single backtick characters in the task line.\nIt's important to prevent the task checkbox (for example, '[ ]') from being rendered in the heading, as it gets very confusing if there are checkboxes on both headings and tasks.\n=>\n``- [ ] my description #context/home``\n``- [ ] my description #context/work``\n``- [ ] my description #multiple-tags1 #multiple-tags2``\n``- [ ] my description #project/project1``\n``- [ ] my description #tag/subtag/sub-sub-tag``\n``- [ ] my description #tag/subtag``\n``- [ ] my description #tag``\n``- [ ] my description``\n```\n\n----------------------------------------\n\nTITLE: Tasks Plugin Query: Tasks with No Due Date\nDESCRIPTION: This code snippet from the Tasks plugin is designed to filter and display tasks without a set due date. It uses the `no due date` syntax to achieve this. This is useful for prioritizing tasks that don't have deadlines and are flexible in completion.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Daily Agenda.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\nnot done\nno due date\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks with urgency greater than 8.9999\nDESCRIPTION: This snippet filters tasks whose urgency score exceeds 9.0, using a slightly lower threshold (8.9999) to account for floating-point rounding. It demonstrates the common pattern for numerical 'greater than' comparisons with a small adjustment to ensure accuracy.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_results.approved.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfilter by function task.urgency > 8.9999\nFind tasks with an urgency score above `9.0`.\nNote that limiting value used is `8.9999`.\nSearches that compare two urgency values for 'less than' or 'more than' (using one of `>`, `>=`, `<` or `<=`) **must adjust their values slightly to allow for rounding**.\n=>\n- [ ] #task Highest priority ➙\n- [ ] due 2023-06-11 ➙ 2023-06-11\n====================================================================================\n```\n\n----------------------------------------\n\nTITLE: Installing Jekyll Dependencies for Local Development\nDESCRIPTION: Commands to install the required Ruby dependencies for running Jekyll locally without Docker. This includes installing Bundler and the project dependencies.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Old Jekyll-based docs/Test documentation locally with Jekyll.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd obsidian-tasks/\ngem install bundler\ncd docs/\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Non-Normal Priority Using Obsidian Tasks Plugin in JavaScript\nDESCRIPTION: This snippet filters tasks by evaluating the 'priorityName' property, excluding any tasks where the priority is set to 'Normal'. The required dependency is the Obsidian Tasks plugin, and the filter function leverages JavaScript for custom logic inside the task query block. The primary parameter is the task object, with a focus on its 'priorityName'; input is an array of tasks, and the output is a filtered array excluding those with 'Normal' priority. The snippet assumes tasks have already been defined or parsed by the plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.priorityName_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.priorityName !== 'Normal'\n```\n\n----------------------------------------\n\nTITLE: Extracting Combined First, Second, and Third-Level Tags from Task Tags in JavaScript\nDESCRIPTION: This snippet conditionally extracts and joins the first three segments of task tags with '/' to form a hierarchical tag string like '#tag/subtag/sub-sub-tag'. If the third segment does not exist, it returns an empty string. This supports grouping tasks by a detailed tag path three levels deep. The input is an array of slash-separated tag strings, and the output is concatenated strings of up to three segments.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[2] ? tag.split('/').slice(0, 3).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Defining Task Status Markers in Obsidian Tasks Plugin with Markdown\nDESCRIPTION: A comprehensive list of task status markers used in the Obsidian Tasks plugin. Each line follows the format of a checkbox with a specific status character, followed by the #task tag, the character representation in backticks, and a description of the status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Minimal_Tasks.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task `space` to-do\n- [/] #task `/` incomplete\n- [x] #task `x` done\n- [-] #task `-` canceled\n- [>] #task `>` forwarded\n- [<] #task `<` scheduling\n- [?] #task `?` question\n- [!] #task `!` important\n- [*] #task `*` star\n- [\"] #task `\"` quote\n- [l] #task `l` location\n- [b] #task `b` bookmark\n- [i] #task `i` information\n- [S] #task `S` savings\n- [I] #task `I` idea\n- [p] #task `p` pros\n- [c] #task `c` cons\n- [f] #task `f` fire\n- [k] #task `k` key\n- [w] #task `w` win\n- [u] #task `u` up\n- [d] #task `d` down\n```\n\n----------------------------------------\n\nTITLE: Creating a Task in Obsidian Using JavaScript\nDESCRIPTION: This snippet defines a function to create a new task in Obsidian. It constructs a task object with properties like text, completion status, and tags, then saves it to a specified note. Dependencies include Obsidian's API and markdown parsing functions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Obsidian/File.test.replaceTaskWithTasks_issue_1680_-_Cannot_read_properties_of_undefined.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createTask(notePath, taskText, tags) {\n    const task = {\n        text: taskText,\n        completed: false,\n        tags: tags\n    };\n    // Load note, append task, and save (implementation details depend on Obsidian API)\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Available Unblocked Tasks in Obsidian Tasks\nDESCRIPTION: A tasks query that finds incomplete tasks that are not blocked by other tasks in the current file. This helps identify which tasks can be worked on immediately.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies - Worked Example.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\nis not blocked\n\npath includes {{query.file.path}}\nhide backlink\nhide task count\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by truncated description\nDESCRIPTION: This snippet demonstrates grouping tasks by the first 25 characters of their description. It uses the `slice()` JavaScript method to truncate the description string. This is useful for grouping tasks with similar prefixes or categories.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.description_results.approved.txt#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\ngroup by function task.description.slice(0, 25)\nTruncate descriptions to at most their first 25 characters, and group by that string.\n=>\nlong description Lorem ip\nmy description\nmy description #context/h\nmy description #context/w\nmy description #multiple-\nmy description #project/p\nmy description #tag\nmy description #tag/subta\nshort description\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Exact Path (Case-Sensitive) in Obsidian\nDESCRIPTION: This snippet filters tasks with an exact, case-sensitive match of the file path using the strict equality operator (`===`). The file extension must be included. The function searches for an exact match with the path 'tasks releases/4.1.0 Release.md'. This requires exact matching of the path and any other characteristics. With built-in searches, this could only be done using a regular expression, with special characters `^` and `$`, and escaping any characters with special meaning such as `/`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.path_results.approved.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.path === 'tasks releases/4.1.0 Release.md'\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters\nDESCRIPTION: This section describes cases where expressions fail due to invalid delimiters.  The error messages highlight the constraints regarding allowed delimiters, like parentheses. The parser requires all boolean instructions to be inside a valid set of delimiters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n'\"not done\" AND (is recurring)'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    \"not done\" AND (is recurring)\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Task Lists with Multiple Heading Levels in Markdown\nDESCRIPTION: This snippet demonstrates the use of hierarchical Markdown headings (Level 2 and Level 3) combined with unchecked task list items tagged with #task. Each task item is prefixed by '- [ ]' to denote an incomplete task. The tasks are organized under headings, with a visual divider denoting a new logical section. It requires a Markdown parser that supports task lists for proper rendering. Tasks include descriptive text and tags for categorization.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/multiple_headings.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Level 2 heading\n\n- [ ] #task Task 1 in Level 2 heading - in 'multiple_headings' - list 1\n- [ ] #task task 2 in Level 2 heading - in 'multiple_headings' - list 1\n\nDivider to create a new section\n\n- [ ] #task task 3 in Level 2 heading - in 'multiple_headings' - list 2\n\n### Level 3 heading\n\n- [ ] #task Task 4 in 'multiple_headings' - in 'multiple_headings' - list 3\n- [ ] #task Task 5 in 'multiple_headings' - in 'multiple_headings' - list 3\n```\n\n----------------------------------------\n\nTITLE: Querying tasks in Obsidian\nDESCRIPTION: This code snippet defines a task query for the Obsidian Tasks plugin. It filters tasks based on the file path, ensuring it includes \"Reading Mode line numbers in blockquotes\". It also sorts the results by description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Task Toggling Scenarios/Reading Mode line numbers in blockquotes.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Reading Mode line numbers in blockquotes\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Caution against direct numeric comparison of floating-point urgency values\nDESCRIPTION: This code illustrates that searching for a raw numeric value like 10.29 will not match tasks with an approximate urgency of that value due to floating-point precision issues. It explains the pitfalls of using direct equality checks for floating-point numbers and emphasizes using approximate comparisons instead.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_results.approved.txt#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nfilter by function task.urgency === 10.29\n**This will not find any tasks**.\n==Do not use raw numbers in searches for equality or inequality of any numbers==, either seemingly integer or floating point ones.\nFrom using `group by urgency` and reviewing the headings, we might conclude that tasks with the following values have urgency `10.19`:\n    due tomorrow,\n    have no priority symbol.\nFrom this, it might be natural to presume that we can search for `task.urgency === 10.29`.\nHowever, our function is checking the following values for equality:\n    `task.urgency` is approximately:\n        `10.292857142857140928526860079728`\n    `10.29` is approximately:\n        `10.289999999999999147348717087880`\nThese values are **not exactly equal**, so the test fails to find any matching tasks.\n=>\n====================================================================================\n```\n\n----------------------------------------\n\nTITLE: Grouping Obsidian Tasks by File Creation Date\nDESCRIPTION: This snippet demonstrates grouping tasks using the `group by function` directive in Obsidian Tasks. It accesses the 'creation date' file property directly using `task.file.property()`. If the property doesn't exist for a task's file, it assigns that task to the 'no creation date' group using the nullish coalescing operator (??).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.obsidian_properties_task.file.frontmatter_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\ngroup by function task.file.property('creation date') ?? 'no creation date'\n```\n\n----------------------------------------\n\nTITLE: Inserting File Title using Templater in Obsidian\nDESCRIPTION: This snippet uses the Templater plugin in Obsidian to dynamically insert the current file's title. It accesses the 'tp' object, which provides access to Templater's functions and properties, specifically 'file.title' to retrieve the title of the active file. This tag is evaluated when the template is processed, replacing the placeholder with the actual file title.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/_meta/templates/Test Data file.md#_snippet_0\n\nLANGUAGE: Templater\nCODE:\n```\n<% tp.file.title %>\n```\n\n----------------------------------------\n\nTITLE: Sorting by Fourth Level Tag Name - JavaScript\nDESCRIPTION: This snippet attempts to extract the fourth level tag from a task's tags. It splits the tag string using '/' and selects the fourth element (index 3). If the fourth element does not exist, it returns an empty string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[3] ? tag.split('/').slice(3, 4) : '')\n```\n\n----------------------------------------\n\nTITLE: Representing Nested Tasks in Markdown\nDESCRIPTION: This snippet demonstrates how to create a nested task list in Markdown format, using checkboxes and indentation to show parent-child-grandchild relationships. The '#task' tag is applied to each task item for categorization. Each nested level is indented with tabs or spaces, enabling structured task grouping in compatible Markdown editors. There are no external dependencies other than Markdown rendering support. Input is the task list with hierarchy; output is a visual nested checklist.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_1parent2children2grandchildren.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task parent task\n    - [ ] #task child task 1\n        - [ ] #task grandchild 1\n    - [ ] #task child task 2\n        - [ ] #task grandchild 2\n```\n\n----------------------------------------\n\nTITLE: Corrected Boolean Query Using Alternative Delimiters (Obsidian Tasks, text)\nDESCRIPTION: Provides a corrected query for the previous malformed filter, choosing square brackets to avoid delimiter collision with the filter's contents. Only the Tasks plugin is needed. Uses filter expressions as input, outputs only tasks matching either sub-condition.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[description includes (maybe)] OR [description includes (perhaps)]\n```\n\n----------------------------------------\n\nTITLE: Processing Complex Nested Boolean Expressions\nDESCRIPTION: These examples show how the parser handles more complex boolean expressions with multiple levels of nesting and various boolean operators (AND, OR, XOR, NOT). Each filter is given a unique identifier in the simplified representation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"( (f1) AND (f2) AND (f3) ) OR ( (f4) AND (f5) AND (f6) ) AND NOT (f7)\",\n    \"filters\": {\n        \"f1\": \"description includes 1\",\n        \"f2\": \"description includes 2\",\n        \"f3\": \"description includes 3\",\n        \"f4\": \"description includes 5\",\n        \"f5\": \"description includes 6\",\n        \"f6\": \"description includes 7\",\n        \"f7\": \"description includes 7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing task.due.moment Property in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `moment` property on the `task.due` object in Obsidian Tasks. This property provides access to the underlying Moment.js object representing the due date, allowing use of standard Moment.js methods. It will be null if the task has no due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.moment\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with Exactly One Tag in Obsidian Tasks (Javascript)\nDESCRIPTION: This Obsidian Tasks query uses a Javascript function (`filter by function`) to filter for tasks that have precisely one tag assigned. The `task.tags.length === 1` expression checks the number of tags associated with each task, excluding any tags applied via a global filter, and returns tasks where the count is exactly one.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.tags_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.tags.length === 1\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by File Root with task.file.root (Obsidian Tasks)\nDESCRIPTION: This snippet illustrates the 'group by function' command in the Obsidian Tasks query language to group tasks by the root directory of their source file. It specifically uses the 'task.file.root' function to access the file root property and, as noted, does not escape Markdown formatting characters present in the root path, differentiating it from a standard 'group by root' command.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.root_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.root\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Line Number in JavaScript for Obsidian Tasks\nDESCRIPTION: This code sorts tasks by their line number in the original Markdown file. This sorting method is useful as an alternative to the default sort order when you want to maintain the original document's task sequence.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.lineNumber_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.lineNumber\n```\n\n----------------------------------------\n\nTITLE: Defining task with scheduled date - Markdown\nDESCRIPTION: Defines an incomplete task in Markdown, tagged with '#task'. It includes a scheduled date using the '[scheduled:: YYYY-MM-DD]' inline field. This date indicates when the task is planned to be actively worked on.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Dates_dataview-snippet.approved.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Has a scheduled date [scheduled:: 2023-04-14]\n```\n\n----------------------------------------\n\nTITLE: Running Jekyll Server Locally without Docker\nDESCRIPTION: Command to start the Jekyll documentation server using a local installation rather than Docker. This is run from the docs directory after installing all dependencies.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Old Jekyll-based docs/Test documentation locally with Jekyll.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd obsidian-tasks/docs\nbundle exec jekyll serve\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Folder Path Prefix (includes) - JavaScript\nDESCRIPTION: This JavaScript filter expression for Obsidian Tasks demonstrates the effect of using the `includes()` method without a trailing slash on the target folder path. It finds tasks in files located in any folder whose path contains the string \"Work/Projects\", which can unintentionally match unrelated folders like \"Work/Projects 2023/\".\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_results.approved.txt#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntask.file.folder.includes(\"Work/Projects\")\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Tasks with Last Day of Month\nDESCRIPTION: This code defines a recurring task in Obsidian Tasks plugin syntax to repeat every month on the last day. The test verifies how the plugin calculates the due date when the last day of each month varies.  The tasks include a due date, and some examples show completed tasks with a completion date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Recurrence handling invalid dates.md#_snippet_2\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task do stuff 🔁 every month on the last 📅 2022-04-30\n- [x] #task do stuff 🔁 every month on the last 📅 2022-03-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the last 📅 2022-02-28 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the last 📅 2022-01-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the last 📅 2021-12-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the last 📅 2021-11-30 ✅ 2022-10-03\n```\n\n----------------------------------------\n\nTITLE: Using the task.file.root grouper function in Obsidian Tasks\nDESCRIPTION: Example demonstrating the 'task.file.root' custom grouper function which groups tasks by their root folder without escaping Markdown characters. The example shows tasks grouped into three roots: the root folder (/), an 'a/' folder, and an 'e/' folder.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.root_results.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngroup by function task.file.root\nLike 'group by root' except that it does not escape any Markdown formatting characters in the root.\n=>\n/\na/\ne/\n====================================================================================\n```\n\n----------------------------------------\n\nTITLE: Querying with Multi-Line Property: task_instructions - Tasks\nDESCRIPTION: This snippet illustrates reading multiple Tasks instructions from a multi-line property named 'task_instructions'. The instructions are embedded into a Tasks query, ignoring the global query and filtering by folder 'Test Data'. The output is limited to 10 results.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/query_using_properties.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nfolder includes Test Data\nexplain\n{{query.file.property('task_instructions')}}\nlimit 10\n```\n\n----------------------------------------\n\nTITLE: Grouping by Day of Week (Monday-Based) JavaScript\nDESCRIPTION: This JavaScript code groups tasks by day of the week, starting from Monday, ensuring tasks without due dates are categorized as \"Undated\". It employs conditional logic to handle Sunday differently, assigning it a specific number to order it last. The code uses Moment.js-like functions for date manipulation. Input is a task object. The output is a formatted string representing the day of the week for the task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function                                   \\\n    const date = task.due;                          \\\n    if (!date.moment) {                             \\\n        return \"Undated\";                           \\\n    }                                               \\\n    if (date.moment.day() === 0) {                  \\\n        {{! Put the Sunday group last: }}           \\\n        return date.format(\"[%%][8][%%]dddd\");      \\\n    }                                               \\\n    return date.format(\"[%%]d[%%]dddd\");\n```\n\n----------------------------------------\n\nTITLE: Calling task.due.formatAsDate() Method in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `formatAsDate()` method on the `task.due` object in Obsidian Tasks. This method formats the due date into a `YYYY-MM-DD` string representation. It returns an empty string if the task has no due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.formatAsDate()\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by File Path Using Function in Tasks Query Language\nDESCRIPTION: This snippet demonstrates sorting tasks in the same file as the query first by comparing the task's file path with the query file path using a custom 'sort by function' expression. It requires the Obsidian Tasks plugin’s query capabilities with support for JavaScript expressions in the 'sort by function' clause. The key parameters are 'task.file.path' and 'query.file.path' which represent the task's source file path and the current query's source file path respectively. It outputs tasks prioritized by whether they originate from the same file, facilitating grouping based on task location.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Sorting.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\n\n# Put tasks in the same file as the query first.\nsort by function task.file.path === query.file.path\n```\n\n----------------------------------------\n\nTITLE: Dataview format sample\nDESCRIPTION: This is an example dependency in Dataview format.  The first task includes `[id:: abcdef]`, and the second task includes `[dependsOn:: abcdef]`. This indicates that the second task depends on the first task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\nclassDef TASK        stroke-width:3px,font-family:monospace;\n\n2[\"\\- [ ] do this first&nbsp;&nbsp;[id:: abcdef]\"]:::TASK\n1[\"\\- [ ] do this after first&nbsp;&nbsp;[dependsOn:: abcdef]\"]:::TASK\n1-- depends on --> 2\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Explained Boolean Logic Output for Tasks Query - Obsidian Tasks - text\nDESCRIPTION: Displays the result of the 'explain' instruction on a Boolean logic-rich Tasks query. Describes, in expanded form, the grouping and logic (such as AND/OR/NOT) evaluated by the plugin, including resolution of date expressions. Inputs are the Boolean query filters; output details the structure and order of evaluation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nExplanation of this Tasks code block query:\n\n  not done\n\n  (due before tomorrow) AND (is recurring) =>\n    AND (All of):\n      due before tomorrow =>\n        due date is before 2022-10-22 (Saturday 22nd October 2022)\n      is recurring\n```\n\n----------------------------------------\n\nTITLE: Tasks Emoji format sample\nDESCRIPTION: This is an example dependency in Tasks Emoji format. The first task has an `id` field, and the second task has a `dependsOn` field referencing the first task's `id`. This indicates that the second task depends on the first task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\nclassDef TASK        stroke-width:3px,font-family:monospace;\n\n2[\"\\- [ ] do this first 🆔 abcdef\"]:::TASK\n1[\"\\- [ ] do this after first ⛔ abcdef\"]:::TASK\n1-- depends on --> 2\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Defining an Obsidian Titled Callout\nDESCRIPTION: Illustrates the basic Markdown syntax for creating a callout with a custom title in Obsidian. It starts with '> [!type] Title' followed by the content on subsequent lines, each prefixed with '>'. This structure is central to the bug discussed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Support and Help/Missing tasks in callouts with some Obsidian 1.6.x versions.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> [!tip] Callouts can have custom titles\n> Like this one.\n```\n\n----------------------------------------\n\nTITLE: Sorting tasks by file path in Obsidian Tasks\nDESCRIPTION: This snippet sorts the displayed tasks based on their file path in ascending order. It enhances task organization by ensuring tasks are ordered according to their location within the project hierarchy.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 3000.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nsort by path\n```\n\n----------------------------------------\n\nTITLE: Grouping Obsidian Tasks by Formatted Cancelled Date\nDESCRIPTION: This snippet uses the `group by function` clause in the Obsidian Tasks Query Language to group tasks. It accesses the `cancelled` property of the `task` object and formats the date using the `format(\"YYYY-MM-DD dddd\")` method. The `function` keyword ensures that tasks without a cancelled date are grouped under an empty string instead of the default \"No cancelled date\". This allows for custom handling of missing dates in groupings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.cancelled_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.cancelled.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: Complex and Valid\nDESCRIPTION: This showcases a boolean expression involving nested AND operations and simple strings. The parsers successfully processed a valid expression with multiple AND operations and string-based components.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n'( (description includes a) AND (description includes b) ) AND (description includes c)'\n=>\nResult:\n  ( (description includes a) AND (description includes b) ) AND (description includes c) =>\n    AND (All of):\n      description includes a\n      description includes b\n      description includes c\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Status Type - Javascript\nDESCRIPTION: This snippet sorts tasks based on their status type using `sort by function`. The `task.status.type` property returns the status type string (e.g., 'TODO', 'DONE', 'IN_PROGRESS'). Unlike the built-in `sort by status.type`, this method sorts the status types alphabetically.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.status.type\n```\n\n----------------------------------------\n\nTITLE: Jekyll Server Complete Startup Output\nDESCRIPTION: Full console output when Jekyll server starts, showing configuration details, build information, and the URL to access the documentation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Old Jekyll-based docs/Test documentation locally with Jekyll.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nweb_1  | Configuration file: /code/docs/_config.yml\nweb_1  |             Source: /code/docs\nweb_1  |        Destination: /code/docs/_site\nweb_1  |  Incremental build: disabled. Enable with --incremental\nweb_1  |       Generating...\nweb_1  |       Remote Theme: Using theme pmarsceill/just-the-docs\nweb_1  |        Jekyll Feed: Generating feed for posts\nweb_1  |                     done in 4.838 seconds.\nweb_1  | /usr/local/bundle/gems/pathutil-0.16.2/lib/pathutil.rb:502: warning: Using the last argument as keyword parameters is deprecated\nweb_1  |  Auto-regeneration: enabled for '/code/docs'\nweb_1  |     Server address: http://0.0.0.0:4000/obsidian-tasks/\nweb_1  |   Server running... press ctrl-c to stop.\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Recurrence Rule - JavaScript\nDESCRIPTION: This snippet demonstrates how to sort tasks based on their recurrence rule. The function `task.recurrenceRule` is used as the key for sorting. This assumes that the `task` object has a property named `recurrenceRule` that represents the recurrence rule of the task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.recurrenceRule_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.recurrenceRule\n```\n\n----------------------------------------\n\nTITLE: Filtering Recurring Tasks in Obsidian Tasks Plugin\nDESCRIPTION: Provides filters to sort and group tasks based on whether they are recurring or not, referencing 'task.isRecurring'. It helps in managing repeated tasks effectively.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\n`is recurring`\\n`is not recurring`\n```\n\n----------------------------------------\n\nTITLE: Querying Non-Blocked Tasks (Any Status)\nDESCRIPTION: This Obsidian Tasks query filters for tasks that are not blocked by other tasks, regardless of their completion status. It restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_8\n\nLANGUAGE: tasks\nCODE:\n```\nis not blocked\n\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Description Length in JavaScript\nDESCRIPTION: This snippet demonstrates a custom sorting function for Obsidian Tasks that orders task items by the length of their 'description' property in ascending order. No external dependencies are required, but tasks must be structured as objects with a 'description' string attribute. Sorting by length can help identify tasks needing more detail or those that are overly verbose. The function is designed to be used as a comparator in JavaScript's Array.prototype.sort method.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.description_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function task.description.length\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Month with Hidden Sort Key - Obsidian Tasks JavaScript\nDESCRIPTION: Groups tasks by month, formatting headings like \"2023%%-05%% May\" which renders as \"2023 May\" in Obsidian. Embeds a hidden month number using '%%' markers to preserve proper sort order. Uses a default heading \"no due date\" if no due date is set. Demonstrates escaping in moment.js format strings and supports predictable sorting in grouped presentation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_docs.approved.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"YYYY[%%]-MM[%%] MMM\", \"no due date\")\n```\n\n----------------------------------------\n\nTITLE: Handling Boolean Logic with Priority Filters\nDESCRIPTION: Demonstrates processing of priority-based filters in boolean expressions. The parser correctly identifies priority filters with various values (high, medium, low, none) and combines them with boolean operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR (f2)\",\n    \"filters\": {\n        \"f1\": \"priority is highest\",\n        \"f2\": \"priority is lowest\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - 'has scheduled date'\nDESCRIPTION: This snippet simplifies a boolean expression with 'OR NOT' using 'has scheduled date'.  It replaces both instances of 'has scheduled date' with aliases 'f1' and 'f2', providing a simplified line and a mapping of aliases.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_35\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"has scheduled date\",\n        \"f2\": \"has scheduled date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks Plugin Auto-Suggest Settings Overview\nDESCRIPTION: Describes the available configuration options for auto-suggest behavior, including enabling/disabling the feature, adjusting minimum match length, and setting maximum suggestions displayed. Changes require Obsidian restart to take effect.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Editing/Auto-Suggest.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![](../images/settings-auto-suggest-task-content.png)\n\n### Auto-suggest task content\n\nThis allows the entire auto-suggest feature to be disabled. It is turned on by default.\n\n### Minimum match length for auto-suggest\n\nBy default, the auto-suggest menu pops up before you have even typed any non-space characters.\nAs you become more familiar with the options it offers, this can get annoying, and you may\nfind that you prefer to just type a few characters instead.\n\nYou can make the menu pop up less often, by increasing this setting from 0 to 1, 2 or 3,\nwhich will mean that the menu will only pop up when you have typed\nat least the specified number of characters to find a match.\n\n### Maximum number of auto-suggestions to show\n\nHow many suggestions should be shown when an auto-suggest menu pops up (including the \"⏎\" option).\n\nThe default is 20, and you can select any value from 3 to 20.\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks: Task Creation with Filter and Date\nDESCRIPTION: This snippet demonstrates task creation with both a global filter (e.g., '#task') and a creation date. This snippet showcases how combining a global filter and explicit creation date modifies the final task syntax.  The ➕ symbol is used to denote the creation date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/ui/EditTask.test.Exhaustive_editing_Edit_and_save_All_inputs.approved.txt#_snippet_3\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '' =>\n    '- [ ] #task simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    'plain text, not a list item' =>\n    '- [ ] #task plain text, not a list item ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '-' =>\n    '- [ ] #task simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '- ' =>\n    '- [ ] #task simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '- [ ]' =>\n    '- [ ] #task simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '- [ ] ' =>\n    '- [ ] #task simulate user typing text in to empty description field ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '- list item, but no checkbox' =>\n    '- [ ] #task list item, but no checkbox ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '- [ ] checkbox with initial description' =>\n    '- [ ] #task checkbox with initial description ➕ 2023-07-18'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '- [ ] checkbox with initial description and created date ➕ 2023-01-01' =>\n    '- [ ] #task checkbox with initial description and created date ➕ 2023-01-01'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '- [ ] #task checkbox with global filter string and initial description' =>\n    '- [ ] #task checkbox with global filter string and initial description'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', true)\n    '- [ ] checkbox with initial description ending with task tag at end #task' =>\n    '- [ ] #task checkbox with initial description ending with task tag at end'\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Cancellation Day Using a Custom Function in JavaScript\nDESCRIPTION: This snippet defines a custom filter function that checks if a task was cancelled on a Wednesday by formatting the task's cancellation date to a day-of-week string and comparing it. It requires the task object to have a 'cancelled' property containing a date that supports the format method. The filter returns true for tasks cancelled on Wednesdays, facilitating dynamic querying within task lists. Note that localization may require adjusting the day name for non-English systems.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.cancelled_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.cancelled.format('dddd') === 'Wednesday'\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by First Three Tag Levels in Obsidian Tasks\nDESCRIPTION: This JavaScript function, used with 'group by function' in Obsidian Tasks, groups tasks by the first three levels of their hierarchical tags combined, provided the third level exists. It splits the tag by '/', checks for the third element (index 2), and if present, joins the first three elements back with '/'; otherwise, it returns an empty string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[2] ? tag.split('/').slice(0, 3).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by urgency score (JavaScript)\nDESCRIPTION: This snippet filters tasks with an urgency score above 9.0.  Due to rounding issues when comparing numbers, the comparison is done against 8.9999 instead of 9.0.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency > 8.9999\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Filename Date Format (Markdown Configuration Example)\nDESCRIPTION: Illustrates how a user might configure an additional filename date format for use with Obsidian Tasks, allowing the feature to detect dates beyond the built-in formats. Assumes the user will enter this format into the plugin's settings under the additional date format field. No code execution is performed; this is a configuration reference.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Use Filename as Default Date.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMMMM Do YYYY\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by folder using Obsidian Tasks syntax\nDESCRIPTION: This snippet filters tasks to include only those within the folder corresponding to the current file's folder. It requires the 'folder includes' clause with the folder path derived from the current file. This enables context-aware filtering of tasks based on their location.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 3000.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by First Four Tag Levels (Conditional) in Obsidian Tasks\nDESCRIPTION: This JavaScript function, intended for 'group by function' in Obsidian Tasks, attempts to group tasks by the first four levels of their hierarchical tags combined. It splits the tag by '/', checks if the fourth element (index 3) exists, and if present, joins the first four elements back with '/'; otherwise, it returns an empty string, resulting in no group heading for tags with fewer than four levels.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[3] ? tag.split('/').slice(0, 4).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: Combination of OR\nDESCRIPTION: This showcases a more elaborate combination of OR operations. The structure showcases how it interprets various OR expressions and groups the terms under \"OR (At least one of)\".\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n'( (description includes a) OR (description includes b) ) OR (description includes c)'\n=>\nResult:\n  ( (description includes a) OR (description includes b) ) OR (description includes c) =>\n    OR (At least one of):\n      description includes a\n      description includes b\n      description includes c\n```\n\n----------------------------------------\n\nTITLE: Nested AND Conditions in Obsidian Tasks Query\nDESCRIPTION: Shows how to use nested AND conditions within an Obsidian Tasks query. This query selects tasks where the description includes 'a' AND also includes both 'b' AND 'c'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_28\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n( description includes a )   AND ( (description includes b)  AND (description includes c) )\n```\n\n----------------------------------------\n\nTITLE: Markdown Task Ignored in Standard Code Block\nDESCRIPTION: This snippet shows a standard Markdown task syntax (`- [ ] ...`) placed inside a regular fenced code block (```). Tasks formatted this way within standard code blocks are treated as literal text and are not recognized or processed by Obsidian or the Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/non_tasks.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] I look like a task but am in a code block\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by priority name (priority order) (JavaScript)\nDESCRIPTION: This snippet groups tasks in Obsidian by the task.priorityNameGroupText function. This displays the priority names from highest to lowest priority. Note that the default priority is called 'Normal' as opposed to with `group by priority` which calls the default 'None'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.priorityName_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.priorityNameGroupText\n```\n\n----------------------------------------\n\nTITLE: Querying Obsidian Tasks Urgency and Due Date\nDESCRIPTION: This query for the Obsidian Tasks plugin filters tasks located in the current file ('Urgency Scores Examples'), groups them first by their calculated urgency score, and then by their due date formatted as date and time. It is used to verify that the tasks defined in the note are correctly parsed and assigned the expected urgency values.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Urgency Scores Examples.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfilename includes Urgency Scores Examples\ngroup by urgency\ngroup by function task.due.formatAsDateAndTime()\n```\n\n----------------------------------------\n\nTITLE: Output of the 'explain' Keyword for a Regex Query\nDESCRIPTION: Displays the explanation text generated by Obsidian Tasks when the `explain` keyword is used with a `regex matches` filter. It clarifies the exact regex pattern and flags used internally by Tasks, showing escaped characters (like `\\/` for `/` and `\\.` for `.`) and the applied flags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nExplanation of this Tasks code block query:\n\n  path regex matches /^Root/Sub-Folder/Sample File\\.md/i =>\n    using regex:     '^Root\\/Sub-Folder\\/Sample File\\.md' with flag 'i'\n```\n\n----------------------------------------\n\nTITLE: Todo Status Type Name: TODO\nDESCRIPTION: Represents the internal type name for the 'Todo' task status. This identifier is used programmatically within the plugin to refer to the todo status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_todo-in_progress-done.approved.md#_snippet_3\n\nLANGUAGE: Configuration\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: Filter with Start Date, Description, and Due Date (OR)\nDESCRIPTION: This filter combines 'HAS START DATE', 'DESCRIPTION INCLUDES SPECIAL', and 'HAS DUE DATE' using 'OR' and 'AND' operators. It checks if the task has a start date or the description includes 'SPECIAL' and has a due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      HAS START DATE\n      AND (All of):\n        DESCRIPTION INCLUDES SPECIAL\n        HAS DUE DATE\n```\n\n----------------------------------------\n\nTITLE: Adjusting Minimum Match Length for Auto-Suggest Activation\nDESCRIPTION: Sets the minimum number of characters that must be typed before auto-suggestions appear, reducing unwanted pop-ups. Increasing this setting (e.g., to 3) filters suggestions until more characters are entered, to improve user experience.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Editing/Auto-Suggest.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n>\n- Increase the [[#Minimum match length for auto-suggest]] value in settings (and re-start Obsidian) so that the menu will only appear when you have typed a few characters from your chosen menu option.\n- For example, if you set the `Minimum match length for auto-suggest` to 3, you need to type at least three characters like \"pri\" or \"hig\" to see suggestions.\n```\n\n----------------------------------------\n\nTITLE: Invalid Mixed Delimiter Types in Boolean Expressions (Obsidian Tasks, text)\nDESCRIPTION: Shows an invalid filter line that mixes parentheses and curly braces as delimiters, which is not permitted. Designed to illustrate syntax errors when combining delimiters within a single line. Requires Tasks plugin, input is the Boolean instruction, outputs an error from the parser.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n(not done) AND {is recurring}\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: XOR Operator\nDESCRIPTION: This demonstrates the parsing of boolean expressions that utilize the XOR operator. XOR, is interpreted as \"Exactly one of\", highlighting the parser's understanding of exclusive logic.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n'(not done) XOR (is recurring)'\n=>\nResult:\n  (not done) XOR (is recurring) =>\n    XOR (Exactly one of):\n      not done\n      is recurring\n```\n\n----------------------------------------\n\nTITLE: Finding Invalid Recurrence Rules in Tasks - Tasks\nDESCRIPTION: This code snippet finds tasks that have the recurrence emoji (🔁) in their original Markdown but are not recognized as recurring tasks by Obsidian Tasks. This inconsistency suggests a potentially invalid or incorrectly formatted recurrence rule. It utilizes `is not recurring` filter and `filter by function` to check for the presence of the recurrence emoji in the original markdown.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Find tasks with invalid data.md#_snippet_2\n\nLANGUAGE: Tasks\nCODE:\n```\n```tasks\nis not recurring\nfilter by function task.originalMarkdown.includes('🔁')\n```\n```\n\n----------------------------------------\n\nTITLE: Highlighting Due Today and Overdue Tasks\nDESCRIPTION: CSS snippet that applies different background colors to due dates based on when they're due. Tasks due today get a cyan background while overdue tasks get a pink background.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* A special color for the 'due' component if it's for today */\n.task-list-item[data-task-status-type=\"TODO\"] .task-due[data-task-due=\"today\"] span,\n.task-list-item[data-task-status-type=\"IN_PROGRESS\"] .task-due[data-task-due=\"today\"] span {\n    background: var(--color-cyan);\n    border-radius: 10px;\n    padding: 2px 8px;\n}\n\n/* A special color for overdue due dates */\n.task-list-item[data-task-status-type=\"TODO\"] .task-due[data-task-due^=\"past-\"] span,\n.task-list-item[data-task-status-type=\"IN_PROGRESS\"] .task-due[data-task-due^=\"past-\"] span {\n    background: var(--color-pink);\n    border-radius: 10px;\n    padding: 2px 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling task.due.toISOString(true) Method in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `toISOString(keepOffset)` method with `keepOffset=true` on the `task.due` object in Obsidian Tasks. This method formats the due date into an ISO 8601 string, preserving the original time zone offset (`YYYY-MM-DDTHH:mm:ss.sss+HH:mm`). It returns an empty string if the task has no due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.toISOString(true)\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Query Function in Obsidian Tasks Plugin\nDESCRIPTION: This snippet likely represents a code comment or a placeholder for a function named 'query_file_defaults_short_mode' that queries tasks within Obsidian using default parameters set for short mode. It indicates a task query operation in the plugin, where tasks are queried or filtered based on default settings like 'TQ_short_mode'. The purpose is to facilitate quick retrieval of tasks matching specific criteria for display or processing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/query_file_defaults_short_mode.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Task in 'query_file_defaults_short_mode'\n```\n\n----------------------------------------\n\nTITLE: Grouping by Raw Description (JavaScript)\nDESCRIPTION: Groups tasks using the raw string value of their description. This can be helpful for gathering tasks with identical descriptions, such as completed recurrences of the same task. Requires the task object (`task`) and its `description` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description\n```\n\n----------------------------------------\n\nTITLE: Writing Date-Based Tasks Query with Explain - Obsidian Tasks - text\nDESCRIPTION: Defines a tasks query with complex date filters, utilizing the 'explain' instruction to expand and clarify date expressions for the user. Requires the Obsidian Tasks plugin (v1.19.0 or newer) and is intended for use in Tasks code blocks to help users understand what date ranges their queries cover. Inputs are natural language date filters; the expected output is an explanation block showing resolved dates and clarifying query behavior.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nstarts after 2 years ago\nscheduled after 1 week ago\ndue before tomorrow\nexplain\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks from Current File with Tasks Plugin\nDESCRIPTION: A Tasks plugin query block that displays all incomplete tasks from the current file. The query uses the 'path includes' filter with a template variable to reference the current file path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/callout.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\nnot done\npath includes {{query.file.path}}\n```\n```\n\n----------------------------------------\n\nTITLE: Recording Done Dates for Completed Tasks in Obsidian Tasks Plugin Using Markdown\nDESCRIPTION: Shows how to annotate a completed task with the completion date by appending a white check-mark emoji (✅) followed by a 'YYYY-MM-DD' date. This date reflects when the task was finished and is available as the 'task.done' property for queries and filtering.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Dates.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] take out the trash ✅ 2021-04-09\n```\n\n----------------------------------------\n\nTITLE: Listing Tasks with Tags in Markdown\nDESCRIPTION: This markdown snippet contains a header title and task list items marked with checkboxes. Tasks include embedded tags designated with #tags that categorize and link these tasks contextually. This snippet demonstrates how to write and organize tasks with relevant metadata and tagging directly within the markdown body, intended for task management and referencing in documentation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/docs_sample_for_task_properties_reference.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# docs_sample_for_task_properties_reference\n\n#tag-from-file-body\n\n- [ ] #task Task in 'docs_sample_for_task_properties_reference' #tag-from-task-line\n- [ ] #task Another task in 'docs_sample_for_task_properties_reference'\n```\n\n----------------------------------------\n\nTITLE: Grouping Completed Tasks by Heading (Obsidian Tasks)\nDESCRIPTION: Displays completed tasks (`done`) from the current folder (`folder includes {{query.file.folder}}`), grouped by their parent heading (`group by heading`). Backlinks are hidden (`hide backlinks`), and tasks are shown in a tree structure (`show tree`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_6\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\ndone\ngroup by heading\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate In Progress Symbol ('/')\nDESCRIPTION: Illustrates a configuration problem where the '/' symbol is defined again for 'In Progress DUPLICATE' (type IN_PROGRESS). Because the symbol '/' is already in use, this subsequent definition will be ignored by the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n```\n\n----------------------------------------\n\nTITLE: Placeholder Expansion Results in Tasks Query\nDESCRIPTION: Output showing how each placeholder is expanded when the query is executed in a file located at 'some/sample/file path.md'. Demonstrates the actual values each placeholder resolves to.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Placeholders.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nExplanation of this Tasks code block query:\n\n  path includes {{query.file.path}} =>\n  path includes some/sample/file path.md\n\n  path includes {{query.file.pathWithoutExtension}} =>\n  path includes some/sample/file path\n\n  root includes {{query.file.root}} =>\n  root includes some/\n\n  folder includes {{query.file.folder}} =>\n  folder includes some/sample/\n\n  filename includes {{query.file.filename}} =>\n  filename includes file path.md\n\n  filename includes {{query.file.filenameWithoutExtension}} =>\n  filename includes file path\n\n  description includes Some Cryptic String {{! Inline comments are removed before search }} =>\n  description includes Some Cryptic String\n```\n\n----------------------------------------\n\nTITLE: Preprocessing OR NOT Expression\nDESCRIPTION: Shows preprocessing of an expression combining OR with a negated operand using NOT. Both operands are enclosed in parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) OR NOT (is recurring)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"(\",\n    \"not done\",\n    \") OR\",\n    \" \",\n    \"NOT (\",\n    \"is recurring\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Property Definitions for Obsidian Tasks Plugin in YAML\nDESCRIPTION: Defines multiple property types such as checkbox, date, list, number, text, and link properties, along with aliases, tags, and creation date, to structure task data within Obsidian. These properties serve as templates for consistent task metadata management.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_all_property_types_empty.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsample_checkbox_property: \nsample_date_property: \nsample_date_and_time_property: \nsample_list_property: \nsample_number_property: \nsample_text_property: \nsample_link_property: \nsample_link_list_property: \naliases: \ntags: \ncreation date:\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Dynamically using File Context in Obsidian Tasks\nDESCRIPTION: This snippet defines a query for the Obsidian Tasks plugin. It filters tasks to include only those located in the same folder as the current file (`{{query.file.folder}}`), sorts them by path (`sort by path`), and dynamically incorporates instructions from the current file's name without its extension (`{{query.file.filenameWithoutExtension}}`), which is expected to contain commands like `limit 100` based on the surrounding text. The `#explain` command is included for query analysis.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 100.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Parsing Task Filter with AND Operator and Brackets in JavaScript (JSON Pair)\nDESCRIPTION: This snippet depicts parsing of task filter queries using the AND operator with filter conditions enclosed in square or curly brackets. It extracts each filter condition—potentially including descriptive text and special characters—and maps them to placeholders in the output. The parser identifies logical structure, bracket type, and filter content, and emits a standardized JSON structure. Input is a string filter query; output is the parsed representation, suitable for subsequent evaluation. This snippet assumes that brackets enclose valid filter conditions and does not expand nested logic within a single bracketed expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) AND (f2)\",\n    \"filters\": {\n        \"f1\": \"due this week\",\n        \"f2\": \"description includes I use square brackets\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks to group by non-tag tags\nDESCRIPTION: This snippet filters out tags containing \"#tag\" and groups tasks by all other tags, such as context or project tags. It enables users to exclude certain tags from grouping, focusing on other categorization schemes. Uses task.tags.filter((tag) => ! tag.includes(\"#tag\")), facilitating customized filtering based on tag patterns.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_results.approved.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags.filter( (tag) => ! tag.includes(\"#tag\") )\nCreate headings for all tags that do not contain \"#tag\".\n=>\n#context/home\n#context/work\n#multiple-tags1\n#multiple-tags2\n#project/project1\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Day of the Week (Date Order, Sunday Start) - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Organizes tasks by weekday, using formatting to sort days in calendar date order, starting with Sunday. The format string '[%%]d[%%]dddd' works in tandem with moment.js to control ordering. Appropriate for users who start their week on Sunday and desire chronological ordering in reports.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"[%%]d[%%]dddd\")\n```\n\n----------------------------------------\n\nTITLE: Setting Global Layout (Short Mode) - Obsidian Tasks Query\nDESCRIPTION: An example showing how to use a layout option (`short mode`) as the Global Query. This sets the default display for all task blocks to a condensed view, hiding details. This can be overridden by using the `full mode` instruction in a specific block.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Global Query.md#_snippet_3\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\nshort mode\n```\n\n----------------------------------------\n\nTITLE: Defining DONE Status ('4') Transitioning to CANCELLED\nDESCRIPTION: Defines '4' as a DONE status symbol ('DONE followed by CANCELLED'). It transitions to the 'X' symbol (Cancelled). Similar to other non-standard DONE transitions, completing a recurring task with this status will result in the next occurrence being TODO or IN_PROGRESS.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: Using regex pattern matching in Obsidian Tasks\nDESCRIPTION: Demonstrates using regular expressions to filter tasks by their description. This example finds tasks that begin with a time in HH:MM format followed by whitespace, useful for time-specific tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_12\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndescription regex matches /^[012][0-9]:[0-5][0-9]\\s/\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Filter Expressions with Tokenization - JavaScript\nDESCRIPTION: This series of code snippets represents sample input-output expectations for a function that parses complex boolean filter expressions into token arrays. The snippets specify test cases, where each input is a filter string (such as 'created before 2021-12-27') and each result is the expected array output after parsing, showing distinct tokens for operators, parenthesis, and filter clauses. Dependencies include a parsing/tokenization function capable of handling boolean operators (AND, OR, NOT, XOR), differentiating expressions with or without spaces, handling quotes and escapes, and supporting field types like created, done, and description filters. Inputs are strings containing various combinations of boolean filter syntax, and outputs are JavaScript arrays representing tokenized results. The collection highlights the importance of spacing around operators and proper handling of quoted/escaped text. These snippets are essential for testing robustness and correctness of boolean filter parsing in task/query features.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(created before 2021-12-27) OR NOT (created before 2021-12-27)\" => [\n    \"(\",\n    \"created before 2021-12-27\",\n    \") OR\",\n    \" \",\n    \"NOT (\",\n    \"created before 2021-12-27\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(created date is invalid) OR NOT (created date is invalid)\" => [\n    \"(\",\n    \"created date is invalid\",\n    \") OR\",\n    \" \",\n    \"NOT (\",\n    \"created date is invalid\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(created in 2021-12-27 2021-12-29) OR NOT (created in 2021-12-27 2021-12-29)\" => [\n    \"(\",\n    \"created in 2021-12-27 2021-12-29\",\n    \") OR\",\n    \" \",\n    \"NOT (\",\n    \"created in 2021-12-27 2021-12-29\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(description does not include wibble) OR NOT (description does not include wibble)\" => [\n    \"(\",\n    \"description does not include wibble\",\n    \") OR\",\n    \" \",\n    \"NOT (\",\n    \"description does not include wibble\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(description includes \\\"hello world\\\") OR (description includes \\\"42\\\")\" => [\n    \"(\",\n    \"description includes \\\"hello world\\\"\",\n    \") OR (\",\n    \"description includes \\\"42\\\"\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(description includes #context/location1) OR (description includes #context/location2 ) OR (  description includes #context/location3 ) OR   (  description includes #context/location4 )\" => [\n    \"(\",\n    \"description includes #context/location1\",\n    \") OR (\",\n    \"description includes #context/location2\",\n    \" \",\n    \") OR (\",\n    \"  \",\n    \"description includes #context/location3\",\n    \" \",\n    \") OR   (\",\n    \"  \",\n    \"description includes #context/location4\",\n    \" )\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(description includes 1)   AND   (description includes 2)   AND   (description includes 3)   AND   (description includes 4)   AND   (description includes 5)   AND   (description includes 6)   AND   (description includes 7)   AND   (description includes 8)   AND   (description includes 9)\" => [\n    \"(\",\n    \"description includes 1\",\n    \")   AND   (\",\n    \"description includes 2\",\n    \")   AND   (\",\n    \"description includes 3\",\n    \")   AND   (\",\n    \"description includes 4\",\n    \")   AND   (\",\n    \"description includes 5\",\n    \")   AND   (\",\n    \"description includes 6\",\n    \")   AND   (\",\n    \"description includes 7\",\n    \")   AND   (\",\n    \"description includes 8\",\n    \")   AND   (\",\n    \"description includes 9\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(description includes AND) OR NOT (description includes AND)\" => [\n    \"(\",\n    \"description includes AND\",\n    \") OR\",\n    \" \",\n    \"NOT (\",\n    \"description includes AND\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(description includes d1) AND   NOT (priority medium)\" => [\n    \"(\",\n    \"description includes d1\",\n    \") AND\",\n    \"   \",\n    \"NOT (\",\n    \"priority medium\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(description includes d1) XOR (priority medium)\" => [\n    \"(\",\n    \"description includes d1\",\n    \") XOR (\",\n    \"priority medium\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(description includes line 1) OR (description includes line 1 continued with \\\\ backslash)\" => [\n    \"(\",\n    \"description includes line 1\",\n    \") OR (\",\n    \"description includes line 1 continued with \\\\ backslash\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(description regex matches /#t\\\\s/i) OR (description regex matches /#t$/i)\" => [\n    \"(\",\n    \"description regex matches /#t\\\\s/i\",\n    \") OR (\",\n    \"description regex matches /#t$/i\",\n    \")\"\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"(done date is invalid) OR NOT (done date is invalid)\" => [\n    \"(\",\n    \"done date is invalid\",\n    \") OR\",\n    \" \",\n    \"NOT (\",\n    \"done date is invalid\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Grouping by custom property\nDESCRIPTION: Groups tasks based on the value of the `custom_number_prop` frontmatter property. Tasks from files without this property will not be grouped. Requires Obsidian Tasks plugin and files containing tasks with the `custom_number_prop` property in their frontmatter.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/How To/Access properties in frontmatter.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes Test Data\ngroup by function task.file.property('custom_number_prop')\n\nlimit groups 5\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks: Task Creation with Global Filter\nDESCRIPTION: This snippet demonstrates the task creation syntax while also applying a global filter (e.g., '#task'). It shows the impact of the global filter on how different input strings are transformed into valid task entries. It including the addition of checkboxes where needed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/ui/EditTask.test.Exhaustive_editing_Edit_and_save_All_inputs.approved.txt#_snippet_2\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '' =>\n    '- [ ] #task simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    'plain text, not a list item' =>\n    '- [ ] #task plain text, not a list item'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '-' =>\n    '- [ ] #task simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '- ' =>\n    '- [ ] #task simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '- [ ]' =>\n    '- [ ] #task simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '- [ ] ' =>\n    '- [ ] #task simulate user typing text in to empty description field'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '- list item, but no checkbox' =>\n    '- [ ] #task list item, but no checkbox'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '- [ ] checkbox with initial description' =>\n    '- [ ] #task checkbox with initial description'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '- [ ] checkbox with initial description and created date ➕ 2023-01-01' =>\n    '- [ ] #task checkbox with initial description and created date ➕ 2023-01-01'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '- [ ] #task checkbox with global filter string and initial description' =>\n    '- [ ] #task checkbox with global filter string and initial description'\n```\n\nLANGUAGE: Obsidian\nCODE:\n```\n('#task', false)\n    '- [ ] checkbox with initial description ending with task tag at end #task' =>\n    '- [ ] #task checkbox with initial description ending with task tag at end'\n```\n\n----------------------------------------\n\nTITLE: Regex Matching Recurrence\nDESCRIPTION: Demonstrates regular expression matching against the recurrence rule of a task. It includes the regex pattern and any flags used.  It shows both matching and non-matching examples.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/TextField.test.explains_regular_expression_searches_bulk_test.approved.txt#_snippet_5\n\nLANGUAGE: regex\nCODE:\n```\n'\\d' with no flags\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Status Task List Items in Markdown\nDESCRIPTION: Shows syntax for representing tasks with non-standard status symbols (e.g., '[X]', '[-]', '[?]', '[/]') to enable custom behaviour and appearance using the Tasks plugin. These custom symbols require additional configuration, such as CSS snippets or theme support, to ensure correct display in Live Preview and Tasks blocks. Each line starts with '- [symbol]' where 'symbol' is the custom status character followed by the task text. Inputs and outputs are plain text representations of custom-status tasks. Limitations include required theming and Tasks configuration for full support.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- [X] Checked\n- [-] A dropped/cancelled task\n- [?] A question\n- [/] A Half Done/In-progress task\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by non-default urgency score (JavaScript)\nDESCRIPTION: This code snippet filters tasks with any urgency other than the default score of 1.95. To avoid floating point comparison issues, both values are rounded to two decimal places using `toFixed(2)` before comparison.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency.toFixed(2) !== 1.95.toFixed(2)\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Status with Obsidian Tasks (Tasks Query Language)\nDESCRIPTION: This snippet sorts tasks first by their status and then by description using the Obsidian Tasks plugin. It selects tasks from any file where the path contains \"Custom Task Statuses\". Requires the Obsidian Tasks plugin active in the Obsidian workspace. Input: none directly; Output: sorted task lists.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Custom Task Statuses.md#_snippet_1\n\nLANGUAGE: Tasks Query Language\nCODE:\n```\npath includes Custom Task Statuses\nsort by status\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Embedding a File in Obsidian (Transclusion)\nDESCRIPTION: This snippet demonstrates how to embed the entire content of another note ('Embed File in to Note - File to Embed') into the current note using Obsidian's transclusion syntax.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Task Toggling Scenarios/Embed File in to Note.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![[Embed File in to Note - File to Embed]]\n```\n\n----------------------------------------\n\nTITLE: Writing Nested Boolean Combinations in Tasks Query with Explain - Obsidian Tasks - text\nDESCRIPTION: Demonstrates a complex tasks query involving deeply nested Boolean logic, benefitting from the 'explain' instruction for transparency. Intended to help users understand operator precedence and grouping within intricate queries. Requires Obsidian Tasks and is executed in a Tasks code block. The input uses line continuations for readability, and 'explain' visualizes the combined logic as interpreted.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nexplain\n(                                                                                       \\\n    (description includes 1) AND (description includes 2) AND (description includes 3)  \\\n) OR (                                                                                  \\\n    (description includes 5) AND (description includes 6) AND (description includes 7)  \\\n)                                                                                       \\\nAND NOT (description includes 7)\n```\n\n----------------------------------------\n\nTITLE: Alternative Description Search (Old Style) - Tasks\nDESCRIPTION: This snippet demonstrates an old-style boolean combination search to find tasks whose description includes one of several alternatives (pc_abigail, pc_edwina, or at_work). It combines multiple `OR` conditions to match tasks containing any of the specified strings in their descriptions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n```tasks\n(description includes pc_abigail) OR (description includes pc_edwina) OR (description includes at_work)\n```\n```\n\nLANGUAGE: text\nCODE:\n```\n(description includes pc_abigail) OR (description includes pc_edwina) OR (description includes at_work)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Even Priority Number in JavaScript\nDESCRIPTION: This JavaScript snippet filters tasks to include only those with an even priority number (0, 2, 4). The task's priority number ranges from 0 (Highest) to 5 (Lowest). The code is used to select tasks with specific priority values, enabling targeted task management within Obsidian. Dependencies include the existence of a task object with a priorityNumber property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.priorityNumber_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.priorityNumber % 2 === 0\n```\n\n----------------------------------------\n\nTITLE: Simplifying XOR Query with Mixed Filters\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using the XOR operator with a mix of description and priority filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) XOR (priority medium)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) XOR (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"priority medium\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Simple Task Queries\nDESCRIPTION: This snippet demonstrates the parsing of a task query containing 'HAS START DATE' and 'DESCRIPTION INCLUDES SPECIAL' with 'OR' and 'NOT'. This structure likely builds up complex logical conditions, to filter for tasks that match a particular filter, or a negated filter. The output result shows how the query is transformed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n[\n    \"(\",\n    \"HAS START DATE\",\n    \") OR (\",\n    \"DESCRIPTION INCLUDES SPECIAL\",\n    \")\")\n]\n```\n\n----------------------------------------\n\nTITLE: Combining Regex and Path Filters with OR\nDESCRIPTION: Example of an Obsidian Tasks query combining a regular expression search on the task description with a path inclusion filter using the OR operator. It selects tasks whose description matches the regex or whose path includes 'Home/Shopping'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_30\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n( description regex matches /(buy|order|voucher|lakeland|purchase|\\spresent)/i ) OR ( path includes Home/Shopping )\n```\n\n----------------------------------------\n\nTITLE: Nested OR Conditions in Obsidian Tasks Query\nDESCRIPTION: Demonstrates nested OR conditions in an Obsidian Tasks query. This query selects tasks where the description includes 'a' OR includes either 'b' OR 'c'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_29\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n( description includes a )   OR  ( (description includes b)  OR  (description includes c) )\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by matching current file's project property in Obsidian Tasks\nDESCRIPTION: This query finds all tasks where the file has a 'project' property that matches the current query file's project property. This allows for showing tasks that belong to the same project as the current note.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/Project Search.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nfilter by function task.file.hasProperty('project')\nfilter by function task.file.property('project') === query.file.property('project')\ngroup by function task.file.property('project')\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom File Property - YAML\nDESCRIPTION: Illustrates adding a custom property, such as `project`, to the file's YAML frontmatter. Custom properties can store any relevant information about the file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nproject: Project 1\n---\n```\n\n----------------------------------------\n\nTITLE: Supported Query File Defaults Properties\nDESCRIPTION: This snippet lists all the properties currently supported by Tasks as Query File Defaults. These properties can be set at the top of a file to configure the behavior of all Tasks queries within that file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Query File Defaults.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n--- \nTQ_explain:\nTQ_extra_instructions:\nTQ_short_mode:\nTQ_show_backlink:\nTQ_show_cancelled_date:\nTQ_show_created_date:\nTQ_show_depends_on:\nTQ_show_done_date:\nTQ_show_due_date:\nTQ_show_edit_button:\nTQ_show_id:\nTQ_show_on_completion:\nTQ_show_postpone_button:\nTQ_show_priority:\nTQ_show_recurrence_rule:\nTQ_show_scheduled_date:\nTQ_show_start_date:\nTQ_show_tags:\nTQ_show_task_count:\nTQ_show_tree:\nTQ_show_urgency:\n---\n```\n\n----------------------------------------\n\nTITLE: Calling task.due.toISOString() Method in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `toISOString()` method on the `task.due` object in Obsidian Tasks. This method formats the due date into a UTC ISO 8601 string (`YYYY-MM-DDTHH:mm:ss.sssZ`). It returns an empty string if the task has no due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.toISOString()\n```\n\n----------------------------------------\n\nTITLE: Query Overdue Tasks using Obsidian Tasks\nDESCRIPTION: This code block is a query written in the Obsidian Tasks plugin's query language. It filters for tasks that are marked as 'not done' and whose 'happens' date is strictly before the date stored in the `today` variable, which is populated by the preceding Templater snippet. This effectively lists all overdue tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/_meta/templates/daily note template - Templater plugin.md#_snippet_1\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\nnot done\nhappens before <% today %>\n```\n\n----------------------------------------\n\nTITLE: Finding Duplicate IDs in Obsidian Tasks (Fast with Caching)\nDESCRIPTION: This snippet implements a custom filter to find tasks with duplicate non-empty IDs, using caching for optimization. It uses a `query.searchCache` to store task ID counts. It first checks if the cache is available.  If not, it calculates counts using a map, then the filter checks if the current task ID has a count greater than 1.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters With Simple Caching.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nfilter by function { \\ \n    const cacheKey = 'idCounts'; \\ \n    const getValue = (task) => task.id; \\ \n    if (!query.searchCache[cacheKey]) { \\ \n        const taskCounts = new Map(); \\ \n        query.allTasks.forEach(t => { \\ \n            const group = getValue(t); \\ \n            taskCounts.set(group, (taskCounts.get(group) || 0) + 1); \\ \n        }); \\ \n        query.searchCache[cacheKey] = taskCounts; \\ \n    } \\ \n    const taskCounts = query.searchCache[cacheKey]; \\ \n    const value = getValue(task); \\ \n    if (value === '') return false; \\ \n    const count = taskCounts.get(value); \\ \n    return count > 1; \\ \n} \n\ngroup by id\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Complex Nested AND/OR Expression\nDESCRIPTION: Demonstrates preprocessing of `(A AND B AND C) OR (D AND E AND F)`. All operands use parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'( (description includes a) AND (description includes b) AND (description includes c) ) OR ( (description includes d) AND (description includes e) AND (description includes f) )'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"( (\",\n    \"description includes a\",\n    \") AND (\",\n    \"description includes b\",\n    \") AND (\",\n    \"description includes c\",\n    \") \",\n    \") OR (\",\n    \" (\",\n    \"description includes d\",\n    \") AND (\",\n    \"description includes e\",\n    \") AND (\",\n    \"description includes f\",\n    \") )\"\n]\n```\n\n----------------------------------------\n\nTITLE: Attempting to Extract Fourth-Level Tag from Task Tags in JavaScript with Fallback\nDESCRIPTION: This snippet attempts extraction of a fourth-level tag segment from each tag string. It checks if the fourth segment exists; if so, it returns that segment, else it returns an empty string. Since most tags may not extend to a fourth level, this often results in empty output and no headings for grouping. The function processes tag arrays formatted as '#tag/subtag/sub-sub-tag'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[3] ? tag.split('/').slice(3, 4) : '')\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks in Reverse Order - Dataview - dataview\nDESCRIPTION: Lists all tasks from the given file and sorts them by the line number in descending order. Uses the Dataview plugin and relies on the 'line' attribute being available for sorting. Outputs tasks with the most recently defined ones first.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_6\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nSORT line desc\n```\n\n----------------------------------------\n\nTITLE: Simplifying Single Description Includes Query with Tag\nDESCRIPTION: Example showing the simplification of a simple Obsidian Tasks query with a single 'description includes' filter targeting a specific tag. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes #context/location1)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1)\",\n    \"filters\": {\n        \"f1\": \"description includes #context/location1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Path (Case-Sensitive) in Obsidian\nDESCRIPTION: This snippet filters tasks whose file path includes a specific string using the `includes` method. It demonstrates a case-sensitive search, meaning capitalization matters. The function checks if the task's file path includes 'tasks releases/4.1.0 Release.md'. The expected output is a list of tasks that match this path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.path_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.path.includes('tasks releases/4.1.0 Release.md')\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Urgency Above Threshold in JavaScript\nDESCRIPTION: This snippet filters tasks based on an urgency score greater than a specific threshold.  The example provided looks for tasks with urgency greater than 9.0. Note that the actual comparison uses a slightly reduced value (8.9999) to account for potential rounding discrepancies when comparing floating-point numbers. The output of this filter will be a subset of tasks with an urgency value greater than the specified threshold.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency > 8.9999\n```\n\n----------------------------------------\n\nTITLE: Grouping by Formatted Due Date - JavaScript\nDESCRIPTION: This snippet groups tasks by their due date, formatted as 'YYYY-MM-DD dddd'.  It utilizes the `format()` method with the specified format string. If there is no due date, there will be no heading. The expression evaluates to a string representing the formatted due date of the task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Defining In Progress Status Symbol ('/')\nDESCRIPTION: Defines the '/' character as a status symbol representing 'In Progress' (type IN_PROGRESS). When this status is toggled, it transitions to the 'x' symbol (representing Done).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Complex Nested AND/OR/NOT Expression\nDESCRIPTION: Demonstrates preprocessing of a complex boolean expression involving nested AND groups combined with OR, followed by an AND NOT condition. All operands use parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'( (description includes 1) AND (description includes 2) AND (description includes 3) ) OR ( (description includes 5) AND (description includes 6) AND (description includes 7) ) AND NOT (description includes 7)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"( (\",\n    \"description includes 1\",\n    \") AND (\",\n    \"description includes 2\",\n    \") AND (\",\n    \"description includes 3\",\n    \") \",\n    \") OR (\",\n    \" (\",\n    \"description includes 5\",\n    \") AND (\",\n    \"description includes 6\",\n    \") AND (\",\n    \"description includes 7\",\n    \") \",\n    \") AND\",\n    \" \",\n    \"NOT (\",\n    \"description includes 7\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Tasks by '#context/' Tag in JavaScript\nDESCRIPTION: This snippet filters task tags for those containing '#context/' and sorts the filtered list alphabetically, then joins the tags into a string. It emphasizes identifying tasks with specific context tags for better organization.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function task.tags.filter( (tag) => tag.includes(\"#context/\")).sort().join(\",\")\n```\n\n----------------------------------------\n\nTITLE: Using Regex in Tasks Query with Explain - Obsidian Tasks - text\nDESCRIPTION: Defines a tasks search using a regular expression on the path, accompanied by the 'explain' instruction to clarify regex use. Requires Obsidian Tasks (v4.3.0 or newer) for regex support and explanation functionality. The query matches file paths against the given regex; 'explain' annotates the regex pattern and flags in the results block. Input is the regex filter; output is the detailed explanation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nexplain\npath regex matches /^Root/Sub-Folder/Sample File\\.md/i\n```\n\n----------------------------------------\n\nTITLE: Querying tasks by multiple date criteria in Obsidian Tasks\nDESCRIPTION: Displays tasks completed this month that were due or scheduled last month. Demonstrates combining date conditions with logical operators to track task completion against scheduled timeframes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_5\n\nLANGUAGE: tasks\nCODE:\n```\n(due last month) OR (scheduled last month)\ndone this month\n```\n\n----------------------------------------\n\nTITLE: Searching for Multiple Word Variations with Regex OR\nDESCRIPTION: Shows how to use the `|` (OR) operator within a case-insensitive regex search in Obsidian Tasks to find tasks whose descriptions contain any of the specified words (\"waiting\", \"waits\", \"wartet\"). The `i` flag makes the search case-insensitive.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /waiting|waits|wartet/i\n```\n\n----------------------------------------\n\nTITLE: Sample Search Query for Tasks in Obsidian\nDESCRIPTION: This code snippet defines a set of search filters using the 'tasks' keyword and various file attribute conditions. It enables filtering tasks based on file path, root folder, folder name, and filename, supporting dynamic query parameters with placeholders.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Search for tasks in file or folder containing the Query.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nexplain\npath includes {{query.file.path}}\nroot includes {{query.file.root}}\nfolder includes {{query.file.folder}}\nfilename includes {{query.file.filename}}\n```\n\n----------------------------------------\n\nTITLE: Current Behavior: Recurring Task with 31st Day\nDESCRIPTION: This defines the current testing behavior of recurring tasks, using Obsidian Tasks syntax. It tests recurrence every month on the 31st, including how it handles months without a 31st day.  It shows completed tasks, with completion dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Recurrence handling invalid dates.md#_snippet_6\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task do stuff 🔁 every month on the 31st 📅 2022-07-31\n- [x] #task do stuff 🔁 every month on the 31st 📅 2022-05-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 31st 📅 2022-03-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 31st 📅 2022-01-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 31st 📅 2021-12-31 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 31st 📅 2021-11-30 ✅ 2022-10-03\n```\n\n----------------------------------------\n\nTITLE: Negative Regex Description Search - Tasks\nDESCRIPTION: This snippet shows how to search for tasks whose description does not match a given regular expression.  It finds tasks whose description does not include 'pc_abigail', 'pc_edwina', or 'at_work'. The 'limit' parameter limits the number of returned tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription regex does not match /pc_abigail|pc_edwina|at_work/\nlimit 5\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex does not match /pc_abigail|pc_edwina|at_work/\nlimit 5\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no start date\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no start date'. The term is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_66\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no start date\",\n        \"f2\": \"no start date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Task Parsing with Emojis in Description Using Jest in TypeScript\nDESCRIPTION: This Jest test checks that task lines containing signifier emojis within the task description are correctly parsed by the fromLine function. It verifies that the task status, description, startDate, dueDate, and doneDate are properly extracted as expected. The test depends on the fromLine function and Status enum, and utilizes Jest's expect assertions, including custom matchers for moment date equality.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Example Tests.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nit('allows signifier emojis as part of the description', () => {\n    // Arrange\n    const line = '- [x] this is a ✅ done task 📍 2021-09-12 ✅ 2021-06-20';\n\n    // Act\n    const task = fromLine({\n        line,\n    });\n\n    // Assert\n    expect(task).not.toBeNull();\n    expect(task!.description).toEqual('this is a ✅ done task');\n    expect(task!.status).toStrictEqual(Status.DONE);\n    expect(task!.startDate).toBeNull();\n\n    // Note for docs: The following are actually Tasks-specific testers...\n    expect(task!.dueDate).toEqualMoment(moment('2021-09-12'));\n    expect(task!.doneDate).toEqualMoment(moment('2021-06-20'));\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Due Today or Earlier Using Moment.js in JavaScript\nDESCRIPTION: This filter function selects tasks that are due on or before the current day by comparing the task's due date moment to the present day using Moment.js's isSameOrBefore method with 'day' precision. The function returns true if the task is due today or any day in the past. Requires Moment.js library for date handling, and expects the task object to include a due moment property. The output is a boolean indicating if the task's due date meets the condition.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.moment?.isSameOrBefore(moment(), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Launching Task Edit Modal with QuickAdd Capture\nDESCRIPTION: This JavaScript snippet is designed to be used within a QuickAdd Capture format. It utilizes the Obsidian Tasks plugin's API to launch the task creation modal. This allows users to quickly create tasks via QuickAdd.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Other Plugins/QuickAdd.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nreturn await this.app.plugins.plugins['obsidian-tasks-plugin'].apiV1.createTaskLineModal();\n```\n\n----------------------------------------\n\nTITLE: Regex Description Search Mismatched Brackets - Tasks\nDESCRIPTION: This snippet demonstrates a regular expression search with mismatched square brackets, which results in a parsing error. This highlights the need to ensure proper syntax in regex patterns, including balanced brackets, to avoid errors during query execution.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription regex matches /[123/\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /[123/\n```\n\n----------------------------------------\n\nTITLE: Preprocessing AND Expression with Quoted Operands\nDESCRIPTION: Shows successful preprocessing of an AND expression where both operands are enclosed in double quotes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'\"description includes d1\" AND \"description includes d2\"'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"\\\"\",\n    \"description includes d1\",\n    \"\\\" \",\n    \"AND\",\n    \" \\\"\",\n    \"description includes d2\",\n    \"\\\"\"\n]\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks Workflow Diagram\nDESCRIPTION: This Mermaid diagram visualizes the state transitions of tasks in Obsidian Tasks. It defines styles for different task states (TODO, DONE, IN_PROGRESS, CANCELLED) and illustrates how tasks move between these states.  It utilizes `flowchart LR` to specify the diagram type and direction.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_done-toggles-to-cancelled.approved.detailed.mermaid.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"'Todo'<<br>>[ ] -> [/]<<br>>(TODO)\"]:::TODO\n2[\"'Done'<<br>>[x] -> [-]<<br>>(DONE)\"]:::DONE\n3[\"'In Progress'<<br>>[/] -> [x]<<br>>(IN_PROGRESS)\"]:::IN_PROGRESS\n4[\"'Cancelled'<<br>>[-] -> [ ]<<br>>(CANCELLED)\"]:::CANCELLED\n1 --> 3\n2 --> 4\n2-. \"🔁\" .-> 1\n3 --> 2\n4 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Filtering Incomplete Tasks with Path Criteria in Obsidian Tasks Query Language\nDESCRIPTION: This snippet uses the Obsidian Tasks plugin query syntax to filter and display tasks that are not done (incomplete) and belong to files whose paths include a specified variable. It requires the Obsidian Tasks plugin and supports dynamic queries using template placeholders like {{query.file.path}}. Inputs include the task completion status and path matching criteria, while output is a filtered list of tasks matching these conditions. Limitations include dependency on the correct setup of the Obsidian Tasks plugin and correct path variables.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/callouts_nested_issue_2890_unlabelled.md#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\nnot done\npath includes {{query.file.path}}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Combined Recurrence Rules (includes and not includes)\nDESCRIPTION: This snippet shows how to filter tasks whose recurrence rule includes \"every week\" but does not include \"when done\". It uses a combined condition `task.recurrenceRule.includes(\"every week\") && !task.recurrenceRule.includes(\"when done\")`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.recurrenceRule_results.approved.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.recurrenceRule.includes(\"every week\") && !task.recurrenceRule.includes(\"when done\")\n```\n\n----------------------------------------\n\nTITLE: Sorting and Grouping Tasks by Due Date\nDESCRIPTION: Provides mechanisms to organize tasks by their due dates via sorting and grouping options, utilizing the 'task.due' property. Optionally hide the due date field for cleaner task views.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n`sort by due`\\n`group by due`\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with Recurrence Rule Including 'every week' (Case-Sensitive)\nDESCRIPTION: This snippet filters tasks whose recurrence rule includes the phrase 'every week'. It performs a case-sensitive check, meaning it matches only if the exact casing is present. Dependencies include the task object having a 'recurrenceRule' property, and the snippet outputs tasks matching this condition.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.recurrenceRule_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.recurrenceRule.includes(\"every week\")\n```\n\n----------------------------------------\n\nTITLE: Generating Due Date Suggestions Relative to Current Date\nDESCRIPTION: This snippet illustrates due date suggestion based on relative time input (e.g., '1 year'). The system calculates and suggests a date one year from the current date. The 'appendText' field details how the suggestion will be added to the markdown.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__dataview__symbols_offers_correct_options_for_partial_due_date_lines.approved.txt#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"2023-07-11\",\n    \"appendText\": \"due:: 2023-07-11] \",\n    \"insertAt\": 16,\n    \"insertSkip\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Filter (Path Regex) - Obsidian Tasks Query\nDESCRIPTION: An example demonstrating the use of a complex filter instruction (`path regex does not match /^_templates/`) as the Global Query. This sets a default rule to exclude tasks located in files whose path matches the given regular expression, in this case, excluding tasks from a `_templates` folder.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Global Query.md#_snippet_7\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\npath regex does not match /^_templates/\n```\n\n----------------------------------------\n\nTITLE: Jekyll Server Output Example\nDESCRIPTION: Example console output displayed when the Jekyll server successfully starts, showing the server address and build information.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Old Jekyll-based docs/Test documentation locally with Jekyll.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nweb_1  |       Regenerating: 1 file(s) changed at 2022-05-07 08:03:54\nweb_1  |                     README.md\nweb_1  |       Remote Theme: Using theme pmarsceill/just-the-docs\nweb_1  |        Jekyll Feed: Generating feed for posts\nweb_1  |                     ...done in 4.02288725 seconds.\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no due date\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no due date'. The term is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_62\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no due date\",\n        \"f2\": \"no due date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Plugin in Short Mode with Sorting - tasks\nDESCRIPTION: This snippet uses the Tasks Plugin's short mode to display tasks from the current file and sorts them by description. Placed commonly in a Markdown callout, it disables heading grouping for a more compact view. Dependencies are the Tasks Plugin with short mode enabled. Input is tasks within the specified file path, and output is a flat, sorted task list suitable for space-constrained areas. It's ideal where headings are not relevant.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Callouts and Block Quotes.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\npath includes {{query.file.path}}\nshort mode\nsort by description\n\n```\n\n----------------------------------------\n\nTITLE: AnuPpuccin Theme Supported Task Statuses (Text Format)\nDESCRIPTION: Lists the custom task statuses supported by the AnuPpuccin theme for Obsidian Tasks in plain text format. Each line shows the checkbox representation (e.g., `- [ ]`), the status symbol (e.g., `space`), and a descriptive name (e.g., `Unchecked`). This format is likely used for reference or testing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/AnuPpuccin Theme.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- [ ] #task `space` Unchecked\n- [x] #task `x` Checked\n- [>] #task `>` Rescheduled\n- [<] #task `<` Scheduled\n- [!] #task `!` Important\n- [-] #task `-` Cancelled\n- [/] #task `/` In Progress\n- [?] #task `?` Question\n- [*] #task `*` Star\n- [n] #task `n` Note\n- [l] #task `l` Location\n- [i] #task `i` Information\n- [I] #task `I` Idea\n- [S] #task `S` Amount\n- [p] #task `p` Pro\n- [c] #task `c` Con\n- [b] #task `b` Bookmark\n- [\"] #task `\"` Quote\n- [0] #task `0` Speech bubble 0\n- [1] #task `1` Speech bubble 1\n- [2] #task `2` Speech bubble 2\n- [3] #task `3` Speech bubble 3\n- [4] #task `4` Speech bubble 4\n- [5] #task `5` Speech bubble 5\n- [6] #task `6` Speech bubble 6\n- [7] #task `7` Speech bubble 7\n- [8] #task `8` Speech bubble 8\n- [9] #task `9` Speech bubble 9\n```\n\n----------------------------------------\n\nTITLE: Description Negation Filter with Boolean OR and NOT\nDESCRIPTION: Example of using 'does not include' text filter with boolean OR and NOT operators. Shows how to combine negative text matching with logical operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_58\n\nLANGUAGE: text\nCODE:\n```\n'(description does not include wibble) OR NOT (description does not include wibble)'\n```\n\n----------------------------------------\n\nTITLE: Extracting Second-Level Subtag from Task Tags in JavaScript\nDESCRIPTION: This snippet maps over task.tags and conditionally extracts the second segment of each tag if present, representing the immediate subtag beneath the top-level tag. If the second segment does not exist, it returns an empty string. This facilitates grouping tasks by their direct subtags. The input tags follow a slash-separated naming convention starting with '#' and the output is an array containing the second level or empty strings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[1] ? tag.split('/').slice(1, 2) : '')\n```\n\n----------------------------------------\n\nTITLE: Defining Query Properties in YAML Frontmatter\nDESCRIPTION: Example YAML frontmatter defining custom properties (`search-text`, `workdate`, `groupby`) within the note that contains the Tasks query. These properties can be accessed within the query itself using placeholders.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsearch-text: exercise\nworkdate: 2024-04-01\ngroupby: group by happens\n---\n```\n\n----------------------------------------\n\nTITLE: Searching Sample Tasks with Obsidian Tasks\nDESCRIPTION: This Tasks search query is designed to display all tasks within the current file, grouped by their status type and name. It sorts the tasks by their line number and hides the postpone button. The `short mode` option simplifies the task display.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusRegistryReport.test.StatusRegistryReport_should_create_a_report.approved.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\npath includes {{query.file.path}}\ngroup by status.type\ngroup by status.name\nsort by function task.lineNumber\nhide postpone button\nshort mode\n```\n```\n\n----------------------------------------\n\nTITLE: Finding Tasks with Invalid Dates Using Obsidian Tasks\nDESCRIPTION: This query specifically filters for tasks with any type of invalid date. It uses Boolean operators to match tasks where any date field (cancelled, created, done, due, scheduled, or start) contains invalid date values.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Invalid Dates.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Manual Testing/Invalid Dates.md\n(cancelled date is invalid) OR (created date is invalid) OR (done date is invalid) OR (due date is invalid) OR (scheduled date is invalid) OR (start date is invalid)\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Approved Output for Async Combination Test (Text)\nDESCRIPTION: Shows the content of the `.approved.txt` file generated by the `verifyAllCombinations3Async` test. This file lists the output of the asynchronous callback function for every possible combination of the input parameters, providing a comprehensive verification of the function's behavior across various inputs.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Approval Tests.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nsample outputs\n(0, hello, true) => 0 'hello' true\n(0, hello, false) => 0 'hello' false\n(0, world, true) => 0 'world' true\n(0, world, false) => 0 'world' false\n(1, hello, true) => 1 'hello' true\n(1, hello, false) => 1 'hello' false\n(1, world, true) => 1 'world' true\n(1, world, false) => 1 'world' false\n```\n\n----------------------------------------\n\nTITLE: Query File with File Defaults Frontmatter and Explain - Obsidian Tasks - text\nDESCRIPTION: Demonstrates a sample Markdown file using frontmatter properties to inject defaults into Tasks queries, coupled with an explicit 'explain'. Requires Obsidian Tasks (v7.15.0 or newer) and understanding of property-based query file defaults. Inputs include frontmatter settings to add extra instructions, alter display mode, and enable tree view, with a Tasks code block executing only 'explain'. Expected output is a breakdown of matched frontmatter effects and resulting query behavior.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n---\nTQ_extra_instructions: |-\n  folder includes {{query.file.folder}}\n  not done\nTQ_short_mode: true\nTQ_show_tree: true\n---\n\n```tasks\nexplain\n```\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - description includes\nDESCRIPTION: This snippet demonstrates simplifying an expression with 'OR NOT' using 'description includes special'. 'has start date' is aliased to 'f1' and 'description includes special' to 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_41\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"has start date\",\n        \"f2\": \"description includes special\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Due Dates using Dataview Inline Fields in Markdown Tasks\nDESCRIPTION: Shows various ways to define a 'due' date using Dataview's bracketed `[key:: value]` or parenthesized `(key:: value)` inline field syntax within Markdown task items. These formats are recognized by Dataview for querying. Examples include variations in spacing around the key-value pair and colon.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Testing File Formats/Dataview Format - Tasks to Parse.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task B 1 Some task - with dataview square brackets [due:: 2021-08-22]\n- [ ] #task B 2 Some task - with dataview parens - which remove rendering of field name (due:: 2021-08-22)\n- [ ] #task B 3 Some task - no space after colon - with dataview square brackets [due::2021-08-22]\n- [ ] #task B 4 Some task - no space after colon - with dataview parens - which remove rendering of field name (due::2021-08-22)\n- [ ] #task B 5 Some task - leading space - no space after colon - with dataview square brackets [  due::2021-08-22]\n- [ ] #task B 6 Some task - leading space - no space after colon - with dataview parens - which remove rendering of field name (  due::2021-08-22)\n- [ ] #task B 7 Some task - trailing space - no space after colon - with dataview square brackets [due::2021-08-22  ]\n- [ ] #task B 8 Some task - trailing space - no space after colon - with dataview parens - which remove rendering of field name (due::2021-08-22  )\n```\n\n----------------------------------------\n\nTITLE: Working with Task Dependencies (Markdown Table, Type System Reference)\nDESCRIPTION: This snippet enumerates dependency-related properties and methods available for a task, including unique ID, lists of dependencies (by IDs), and booleans indicating if a task is blocked or blocking in relation to all tasks. These facilities are dependent on Obsidian Tasks v6.1.0+ and the internal query system. Inputs are task objects and the set of all available tasks; outputs are IDs, arrays, or boolean state indicating dependency relationships. It allows for programmatic traversal and grouping by task dependencies.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Task Properties.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n| Field | Type 1 | Example 1 | Type 2 | Example 2 |\n| ----- | ----- | ----- | ----- | ----- |\n| `task.id` | `string` | `'abcdef'` | `string` | `''` |\n| `task.dependsOn` | `string[]` | `['123456', 'abc123']` | `any[]` | `[]` |\n| `task.isBlocked(query.allTasks)` | `boolean` | `false` | `boolean` | `false` |\n| `task.isBlocking(query.allTasks)` | `boolean` | `false` | `boolean` | `false` |\n```\n\n----------------------------------------\n\nTITLE: Filter by Created Date (after)\nDESCRIPTION: This snippet filters tasks based on whether they were created after a specified date (2021-12-27). The example uses the 'OR' and 'NOT' operators to build the filter logic.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      created after 2021-12-27 =>\n        created date is after 2021-12-27 (Monday 27th December 2021)\n      NOT:\n        created after 2021-12-27 =>\n          created date is after 2021-12-27 (Monday 27th December 2021)\n```\n\n----------------------------------------\n\nTITLE: Fixing Delimiter Conflict: Adding Semicolons\nDESCRIPTION: This snippet presents Option 2 for resolving the delimiter conflict: adding a semicolon ';' inside each 'filter by function' expression just before the closing parenthesis. This separates the expression's ')' from the boolean delimiter ')'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n(filter by function task.tags.join(',').toUpperCase().includes('#XX'); ) AND \\\n(filter by function task.tags.join(',').toUpperCase().includes('#YY'); ) AND \\\n(filter by function task.tags.join(',').toUpperCase().includes('#ZZ'); )\n```\n\n----------------------------------------\n\nTITLE: Defining Task Hierarchy with Obsidian Tasks (Markdown)\nDESCRIPTION: This Markdown snippet defines a nested task structure. It demonstrates parent tasks with child tasks, and further nested grandchild tasks. The use of `- [ ] #task` indicates a to-do item using the Obsidian Tasks plugin. The indentation levels show the task relationships. The expected output is a list of tasks organized hierarchically within the Obsidian environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_1parent2children2grandchildren1sibling.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task parent task\n    - [ ] #task child task 1\n        - [ ] #task grandchild 1\n    - [ ] #task child task 2\n        - [ ] #task grandchild 2\n- [ ] #task sibling\n```\n\n----------------------------------------\n\nTITLE: Implicit Task Scheduling Using Filename Date in Markdown\nDESCRIPTION: Defines a markdown task item that implicitly assigns a scheduled date by parsing the filename formatted as YYYY-MM-DD. The task uses a #task tag and does not explicitly specify the date within the task body, relying instead on the filename's built-in date format. This snippet assumes integration with Obsidian tasks plugin or similar tooling that supports date inference from filenames.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Scheduled Date Implied/Scheduled Implied - 20221105.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Scheduled date read from filename which **contains** the built-in format `YYYY-MM-DD`\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters with Complex Filters\nDESCRIPTION: Demonstrates the mixed delimiter error even with more complex filter names ('HAS DUE DATE', 'DESCRIPTION INCLUDES SPECIAL'), using quotes and parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'\"HAS DUE DATE\" OR (DESCRIPTION INCLUDES SPECIAL)'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Visualizing Task Status Flowchart using Mermaid\nDESCRIPTION: This snippet defines a flowchart diagram using Mermaid syntax designed to illustrate task statuses and their transitions in a visual manner. It includes custom class definitions for task categories like TODO, DONE, IN_PROGRESS, CANCELLED, and NON_TASK with specific stroke colors and widths. Nodes represent different task states and edges indicate allowed state transitions. The 'linkStyle' sets the default stroke color for all transition arrows. This diagram depends solely on Mermaid and serves as a visual aid for understanding task workflow.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Ebullientworks_Table.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Unchecked\"]:::TODO\n2[\"Checked\"]:::DONE\n3[\"Cancelled\"]:::CANCELLED\n4[\"In Progress\"]:::IN_PROGRESS\n5[\"Deferred\"]:::TODO\n6[\"Important\"]:::TODO\n7[\"Question\"]:::TODO\n8[\"Review\"]:::TODO\n1 --> 2\n2 --> 1\n3 --> 1\n4 --> 2\n5 --> 2\n6 --> 2\n7 --> 2\n8 --> 2\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Created After Date\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a 'created after' date filter. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(created after 2021-12-27) OR NOT (created after 2021-12-27)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"created after 2021-12-27\",\n        \"f2\": \"created after 2021-12-27\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Broken Query: Mismatched Boolean Delimiters\nDESCRIPTION: Shows an example of an invalid Obsidian Tasks query where different types of delimiters ('\"...\"' and '(...)') are used for sub-expressions within the same boolean instruction. This mixing is not allowed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n\"not done\" AND (is recurring)\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks in Original Order - Dataview - dataview\nDESCRIPTION: Retrieves all tasks from the specified file using the Dataview plugin without any filtering, preserving the original order. No dependencies outside of Dataview are required. The parameter 'FROM' indicates the path to the target vault file, and the output is a list of all tasks in input order.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Obsidian Tasks Conditionally by Heading in JavaScript\nDESCRIPTION: This JavaScript snippet defines a custom grouping function for Obsidian Tasks queries. It groups tasks by their heading, but assigns them to an empty group ('') if the heading (with '.md' appended) is identical to the task's filename. This approach is useful immediately following a 'group by filename' line to prevent redundant grouping when a heading matches the filename. The use of strict equality (`===`) is highlighted for safety.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.heading_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function (task.heading + '.md' === task.file.filename) ? '' : task.heading\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no happens date\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no happens date'.  The term is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_63\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no happens date\",\n        \"f2\": \"no happens date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no scheduled date\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no scheduled date'. The filter is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_65\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no scheduled date\",\n        \"f2\": \"no scheduled date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Long AND Query with Multiple Description Includes\nDESCRIPTION: Example showing the simplification of a long Obsidian Tasks query using the AND operator with numerous 'description includes' filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes 1) AND (description includes 2) AND (description includes 3) AND (description includes 4) AND (description includes 5) AND (description includes 6) AND (description includes 7) AND (description includes 8) AND (description includes 9)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) AND (f2) AND (f3) AND (f4) AND (f5) AND (f6) AND (f7) AND (f8) AND (f9)\",\n    \"filters\": {\n        \"f1\": \"description includes 1\",\n        \"f2\": \"description includes 2\",\n        \"f3\": \"description includes 3\",\n        \"f4\": \"description includes 4\",\n        \"f5\": \"description includes 5\",\n        \"f6\": \"description includes 6\",\n        \"f7\": \"description includes 7\",\n        \"f8\": \"description includes 8\",\n        \"f9\": \"description includes 9\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Task Priority in Markdown Using Emoji Signifiers\nDESCRIPTION: This snippet shows how to assign a medium priority to a task by appending a specific emoji (🔼) after the task description in standard markdown task list format. The emoji acts as a priority indicator which the Obsidian Tasks plugin can interpret. No dependencies are required other than usage within Obsidian Tasks plugin context. The input is a markdown task line with an emoji added and the expected output is the task interpreted with the corresponding priority for filtering or sorting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Priority.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] take out the trash 🔼\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Day of Week in Obsidian Tasks Plugin - Plaintext\nDESCRIPTION: This snippet demonstrates the use of a custom sorting function within the Obsidian Tasks plugin to organize task lists based on the alphabetical order of the day of the week obtained from the 'happens' field. It requires the Obsidian Tasks plugin and relies on tasks having an optional 'happens' date property that can be formatted using moment.js-style formatting. The sorting function accounts for invalid or missing dates, and tasks without valid dates may appear unsorted or at the top.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.happens_results.approved.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsort by function task.happens.format(\"dddd\")\nSort by happens date's day of the week, alphabetically.\n=>\n- [ ] my description 📅 Invalid date\n- [ ] my description\n- [ ] my description 📅 2023-06-02\n- [ ] my description 📅 2023-06-01\n- [ ] my description 📅 2023-05-30\n- [ ] my description 📅 2023-05-31\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Task Statuses\nDESCRIPTION: This markdown demonstrates defining custom task statuses using specific characters enclosed in square brackets. These custom statuses can be used within the Obsidian Tasks plugin to represent different states of tasks, such as 'Dropped', 'Forward', 'Question', etc.  The #task tag identifies them as Tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Snippet - SlRvb's Alternate Checkboxes.md#_snippet_1\n\nLANGUAGE: Tasks\nCODE:\n```\n- [ ] #task `space` Unchecked\n- [x] #task `x` Regular\n- [X] #task `X` Checked\n- [-] #task `-` Dropped\n- [>] #task `>` Forward\n- [D] #task `D` Date\n- [?] #task `?` Question\n- [/] #task `/` Half Done\n- [+] #task `+` Add\n- [R] #task `R` Research\n- [!] #task `!` Important\n- [i] #task `i` Idea\n- [B] #task `B` Brainstorm\n- [P] #task `P` Pro\n- [C] #task `C` Con\n- [Q] #task `Q` Quote\n- [N] #task `N` Note\n- [b] #task `b` Bookmark\n- [I] #task `I` Information\n- [p] #task `p` Paraphrase\n- [L] #task `L` Location\n- [E] #task `E` Example\n- [A] #task `A` Answer\n- [r] #task `r` Reward\n- [c] #task `c` Choice\n- [d] #task `d` Doing\n- [T] #task `T` Time\n- [@] #task `@` Character / Person\n- [t] #task `t` Talk\n- [O] #task `O` Outline / Plot\n- [~] #task `~` Conflict\n- [W] #task `W` World\n- [f] #task `f` Clue / Find\n- [F] #task `F` Foreshadow\n- [H] #task `H` Favorite / Health\n- [&] #task `&` Symbolism\n- [s] #task `s` Secret\n```\n\n----------------------------------------\n\nTITLE: Grouping Completed Tasks by Subpath - Dataview - dataview\nDESCRIPTION: Fetches completed tasks and groups them by the subpath of their section metadata within the source note. Uses the Dataview plugin; relies on a 'completed' property and the 'meta(section).subpath' field for grouping. The output organizes completed tasks under their section headings for improved navigation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_7\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nWHERE completed\nGROUP BY meta(section).subpath\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: Nested Parentheses\nDESCRIPTION: This demonstrates parsing expressions with nested parentheses and how the parser interprets nested structures. The examples shows how the parser handles nested structures with AND and OR operations.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n'((not done)) AND ((is recurring))'\n=>\nResult:\n  ((not done)) AND ((is recurring)) =>\n    AND (All of):\n      not done\n      is recurring\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Original Markdown in Obsidian Tasks Plugin\nDESCRIPTION: This example demonstrates how the 'sort by function task.originalMarkdown' command orders tasks based on their raw text in the Markdown file. The result shows tasks sorted alphabetically by their complete Markdown string, including description and tags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.originalMarkdown_results.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsort by function task.originalMarkdown\n- [ ] my description\n- [ ] my description #context/home\n- [ ] my description #context/work\n- [ ] my description #multiple-tags1 #multiple-tags2\n- [ ] my description #project/project1\n- [ ] my description #tag\n- [ ] my description #tag/subtag\n- [ ] my description #tag/subtag/sub-sub-tag\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks with any nested tags using Array.find() in JavaScript\nDESCRIPTION: This snippet defines a filter to find all tasks that have at least one nested tag, i.e., tags containing a '/' character. It utilizes Array.find() to check each tag within a task's tags array. Dependencies include the task object with a 'tags' property; the output is a boolean indicating if such a tag exists.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.tags.find( (tag) => tag.includes('/') ) && true || false\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Instructions for Tasks Queries\nDESCRIPTION: This snippet shows how to add extra instructions to Tasks queries using the `TQ_extra_instructions` property.  This allows for common instructions to be added to multiple queries in a file, avoiding redundancy.  The property uses a multi-line string format.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Query File Defaults.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n--- \nTQ_extra_instructions: |-\n  not done\n  group by filename\n---\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Day of the Week with Undated Handling in Obsidian Tasks - JavaScript\nDESCRIPTION: Customizes grouping so undated tasks appear under the 'Undated' heading and Sunday groups appear last (after Monday–Saturday). Leverages Moment.js's day calculations and formats weekday numbering, assigning '8' to Sundays to control display order. Embeds Obsidian-style comments and handles multi-line expressions with trailing backslashes. Requires tasks to have a 'due' property, and falls back gracefully for undated tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function                                   \\\n    const date = task.due;                          \\\n    if (!date.moment) {                             \\\n        return \"Undated\";                           \\\n    }                                               \\\n    if (date.moment.day() === 0) {                  \\\n        {{! Put the Sunday group last: }}           \\\n        return date.format(\"[%%][8][%%]dddd\");      \\\n    }                                               \\\n    return date.format(\"[%%]d[%%]dddd\");\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Month with Custom Format in Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Utilizes task.due.format with the pattern \"YYYY[%%]-MM[%%] MMM\" to group tasks by month, where hidden month numbers aid in consistent sort order. Provides a fallback heading for tasks without dates. Dependencies include the Tasks plugin and correct date formatting; output is grouped under month headings with internal sort metadata.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_results.approved.txt#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"YYYY[%%]-MM[%%] MMM\", \"no due date\")\n// Output:\n// 2023%%-05%% May\n// 2023%%-06%% Jun\n// Invalid date\n// no due date\n```\n\n----------------------------------------\n\nTITLE: Approved Output for Simple String Verification (Text)\nDESCRIPTION: Shows the content of the `.approved.txt` file that corresponds to the `SimpleVerify` test. This file holds the expected output for the test, which is created during the first test run and manually approved, or updated when the code's behavior is intentionally changed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Approval Tests.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nHello From Approvals\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Urgency Within Range in JavaScript\nDESCRIPTION: This code snippet filters tasks based on their urgency score being within a specified range (inclusive).  It searches for tasks with an urgency score between 8.0 and 11.0. The comparison uses the range boundaries 7.9999 and 11.0001 respectively, to mitigate rounding differences. The filtered results will be tasks whose urgency values fall inside the specified range.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency > 7.9999 && task.urgency < 11.0001\n```\n\n----------------------------------------\n\nTITLE: Task Status Transition Flowchart in Mermaid for Obsidian Tasks Plugin\nDESCRIPTION: A Mermaid flowchart that visualizes task status transitions. The diagram defines styling for different task statuses (TODO, DONE, IN_PROGRESS, CANCELLED, NON_TASK) and shows how various task states can transition between each other, with most paths leading to the Done state.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Border_Table.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"To Do\"]:::TODO\n2[\"In Progress\"]:::IN_PROGRESS\n3[\"Done\"]:::DONE\n4[\"Cancelled\"]:::CANCELLED\n5[\"Rescheduled\"]:::TODO\n6[\"Scheduled\"]:::TODO\n7[\"Important\"]:::TODO\n8[\"Question\"]:::TODO\n9[\"Infomation\"]:::TODO\n10[\"Amount\"]:::TODO\n11[\"Star\"]:::TODO\n12[\"Bookmark\"]:::TODO\n13[\"Quote\"]:::TODO\n14[\"Note\"]:::TODO\n15[\"Location\"]:::TODO\n16[\"Idea\"]:::TODO\n17[\"Pro\"]:::TODO\n18[\"Con\"]:::TODO\n19[\"Up\"]:::TODO\n20[\"Down\"]:::TODO\n1 --> 3\n2 --> 3\n3 --> 1\n4 --> 1\n5 --> 3\n6 --> 3\n7 --> 3\n8 --> 3\n9 --> 3\n10 --> 3\n11 --> 3\n12 --> 3\n13 --> 3\n14 --> 3\n15 --> 3\n16 --> 3\n17 --> 3\n18 --> 3\n19 --> 3\n20 --> 3\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Querying Non-Task Checkbox ListItems via Obsidian Tasks Plugin - tasks\nDESCRIPTION: This query block retrieves checkboxes from the file section 'Toggling non-task checkboxes' that are not recognized as tasks (i.e., missing the global filter). It targets list items with checkboxes, filtering out items that include '**check**:' in their description, and displays them as a tree for hierarchical context. Pre-requisites: Obsidian with the Tasks plugin and the corresponding query syntax. It assists in manual toggling tests to ensure visual and status updates are accurately reflected by the plugin. Limitations include dependency on heading and filename—incorrect or changed values could omit items from the results.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Smoke Testing the Tasks Plugin.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nfilename includes {{query.file.filename}}\nheading includes Toggling non-task checkboxes\ndescription does not include **check**:\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Getting Full Filename (JavaScript)\nDESCRIPTION: Retrieves the full filename, including its extension. Useful for displaying or matching files based on their name and type.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/QueryProperties.test.query_file_properties.approved.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.filename\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: NOT Operator\nDESCRIPTION: This displays the handling of the NOT operator combined with other operators.  The example showcases how the parser interprets expressions with NOT, ensuring correct logical inversions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n'(not done) AND NOT (is recurring)'\n=>\nResult:\n  (not done) AND NOT (is recurring) =>\n    AND (All of):\n      not done\n      NOT:\n        is recurring\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks in Obsidian Tasks Plugin\nDESCRIPTION: This Obsidian Tasks query block retrieves all tasks from the file specifically named 'Reading Mode line numbers in callouts' and sorts the results alphabetically by task description. It's used to observe how tasks, including those nested within callouts, are processed and listed by the plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Task Toggling Scenarios/Reading Mode line numbers in callouts.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Reading Mode line numbers in callouts\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Defining Task Status Indicators in Obsidian Tasks (Markdown)\nDESCRIPTION: This Markdown list defines the various status indicators used by the Obsidian Tasks plugin. Each line specifies the character used in the checkbox (`[ ]`), the corresponding status symbol (e.g., ` ` ` for to-do, `x` for done), and a short description of the status. These indicators are used within Markdown files to track task progress in Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Minimal_Text.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task ` ` to-do\n- [/] #task `/` incomplete\n- [x] #task `x` done\n- [-] #task `-` canceled\n- [>] #task `>` forwarded\n- [<] #task `<` scheduling\n- [?] #task `?` question\n- [!] #task `!` important\n- [*] #task `*` star\n- [\"] #task `\"` quote\n- [l] #task `l` location\n- [b] #task `b` bookmark\n- [i] #task `i` information\n- [S] #task `S` savings\n- [I] #task `I` idea\n- [p] #task `p` pros\n- [c] #task `c` cons\n- [f] #task `f` fire\n- [k] #task `k` key\n- [w] #task `w` win\n- [u] #task `u` up\n- [d] #task `d` down\n```\n\n----------------------------------------\n\nTITLE: Querying All Tasks Using Obsidian Tasks Plugin Syntax\nDESCRIPTION: A basic query that retrieves all tasks in the vault without any filtering conditions. No dependencies beyond the Obsidian Tasks plugin. This snippet serves as a starting template for listing every task across all notes. Input is the note repository; output is a list of every task entry unfiltered.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Tasks.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\n```\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Specific Created Date\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a specific created date filter. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(created on 2021-12-27) OR NOT (created on 2021-12-27)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"created on 2021-12-27\",\n        \"f2\": \"created on 2021-12-27\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters (Quotes and Parentheses) in AND\nDESCRIPTION: Illustrates a parsing error when mixing double quotes and parentheses as delimiters for operands in an AND expression. The preprocessor requires consistent delimiters for boolean instructions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'\"not done\" AND (is recurring)'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Syntax Error in Filter Function Parsing in Tasks Plugin\nDESCRIPTION: This snippet illustrates a deliberately broken filter function syntax to demonstrate how the Tasks plugin handles parsing errors. The filter function is incomplete, missing a closing parenthesis and function body. This example helps developers understand error messaging and debugging when writing custom filters. The Tasks plugin must detect and report this SyntaxError correctly.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters - Demo.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nfilter by function \\\n    task.due.formatAsDate(\n```\n\n----------------------------------------\n\nTITLE: Sorting/Grouping/Displaying Dependencies/ID in Obsidian Tasks Plugin Syntax\nDESCRIPTION: Commands used within a `tasks` block to sort, group, or control the display of task IDs and dependency information.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_4\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nsort by id\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ngroup by id\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nhide id\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nhide depends on\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks with exact urgency score of 1.95 using toFixed\nDESCRIPTION: This code filters tasks that have an urgency score precisely equal to 1.95 by formatting both numbers to two decimal places with `toFixed(2)` before comparison. It highlights the importance of rounding in equality checks for non-integer floating-point numbers.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_results.approved.txt#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfilter by function task.urgency.toFixed(2) === 1.95.toFixed(2)\nFind tasks with the [[Urgency#Why do all my tasks have urgency score 1.95?|default urgency]] of `1.95`.\nThis is the correct way to do an equality or inequality search for any numeric values.\nThe `.toFixed(2)` on both sides of the `===` ensures that two numbers being compared are both rounded to the same number of decimal places (2).\nThis is important, to prevent being tripped up `10.29` being not exactly the same when comparing non-integer numbers.\n=>\n- [ ] #task Normal priority\n====================================================================================\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks Done on Thursdays\nDESCRIPTION: This JavaScript snippet demonstrates how to filter tasks that were done on Thursdays using the `task.done.format()` method.  It uses the moment.js library for date formatting. The filter function checks if the formatted day of the week is equal to 'Thursday'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.done.format('dddd') === 'Thursday'\n```\n\n----------------------------------------\n\nTITLE: Embedding a TypeScript Snippet in Markdown\nDESCRIPTION: Demonstrates how a TypeScript code snippet is represented within the Markdown file using `snippet:`.  This line is a placeholder for mdsnippets to replace with the actual code snippet extracted from the corresponding TypeScript file. The result is a properly formatted code block.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Embedding code and data in documentation.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n````markdown\n\n<!-- snippet: approval-test-as-text -->\n```ts\ntest('SimpleVerify', () => {\n    verify('Hello From Approvals');\n});\n```\n<!-- endSnippet -->\n\n````\n```\n\n----------------------------------------\n\nTITLE: Task Query with Potentially Null Property - Tasks\nDESCRIPTION: This snippet demonstrates handling a potentially null property. It attempts to include the value of the `stuff` property from the file, which may not be set. The Tasks plugin's handling of the null value returned by `query.file.property('stuff')` will determine the query's behavior. Relies on the Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/Placeholder examples to capture in tests and docs.md#_snippet_2\n\nLANGUAGE: Tasks\nCODE:\n```\n```tasks\npath includes {{query.file.path}}\n{{query.file.property('stuff')}}\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing Task Filter with OR and NOT Operators in JavaScript (JSON Pair)\nDESCRIPTION: This snippet demonstrates parsing a filter query string with logical OR and NOT operators, extracting individual filter phrases, and mapping each to unique placeholders in a simplified structure. Dependencies include a string parsing utility that tokenizes filter input, recognizes parenthetical expressions, and normalizes operators (OR, NOT). The snippet converts the input \"(starts after 2021-12-27) OR NOT (starts after 2021-12-27)\" into a JSON object indicating the logical structure and extracted filters. Input is a string; output is a JSON object with 'simplifiedLine' and 'filters' properties. The function assumes well-formed input and does not handle malformed expressions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"starts after 2021-12-27\",\n        \"f2\": \"starts after 2021-12-27\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Specific Date Using Moment.js in JavaScript\nDESCRIPTION: Filters tasks that are either due on the exact date '2023-06-11' or have no due date but whose preceding heading contains the date string '2023-06-11'. Uses Moment.js to compare dates and optional chaining to safely access task properties. Returns a boolean indicating task inclusion. Requires Moment.js to be available in the environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.heading_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst taskDate = task.due.moment; \\nconst wanted = '2023-06-11'; \\nreturn taskDate?.isSame(wanted, 'day') || ( !taskDate && task.heading?.includes(wanted)) || false\n```\n\n----------------------------------------\n\nTITLE: Styling Tasks with Status Types\nDESCRIPTION: CSS snippet that adds a green halo effect around checkboxes of all actionable tasks (TODO and IN_PROGRESS status types), using data-task-status-type attribute selectors.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nli.task-list-item[data-task-status-type=\"TODO\"] .task-list-item-checkbox,\nli.task-list-item[data-task-status-type=\"IN_PROGRESS\"] .task-list-item-checkbox {\n    box-shadow: 0 0 10px green !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Filter (Heading) - Obsidian Tasks Query\nDESCRIPTION: An example using a filter instruction (`heading includes Task`) as the Global Query. This sets a default rule that all task blocks will only display tasks found under headings that contain the word \"Task\".\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Global Query.md#_snippet_6\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\nheading includes Task\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Removing Checkbox (Obsidian)\nDESCRIPTION: This snippet demonstrates grouping tasks by removing the checkbox and initial text from the task line, rendering the remainder as normal Markdown. It replaces the leading characters up to the end of the checkbox (e.g., `[ ] `) and displays the task's description and associated tags.  It does not have specific dependencies; it is part of a task grouping approach.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.originalMarkdown_results.approved.txt#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ngroup by function task.originalMarkdown.replace(/^[^\\u005B\\u005D]+[\\u005B.&#93; */, '')\nAn alternative to formatting the markdown line as code is to remove everything up to the end of the checkbox.\nThen render the rest of the task line as normal markdown.\n=>\nmy description\nmy description #context/home\nmy description #context/work\nmy description #multiple-tags1 #multiple-tags2\nmy description #project/project1\nmy description #tag\nmy description #tag/subtag\nmy description #tag/subtag/sub-sub-tag\n```\n\n----------------------------------------\n\nTITLE: YAML frontmatter with multiple tags in Obsidian\nDESCRIPTION: YAML frontmatter section that defines multiple tags for the document. This demonstrates how to set up multiple tags that will be associated with all tasks in the document.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_tags_has_multiple_values.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntags:\n  - multiple1\n  - multiple2\n---\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Day of the Week (Alphabetical) in Obsidian Tasks - JavaScript\nDESCRIPTION: Groups tasks according to the day of the week using the task's due date, sorted alphabetically by day name (Monday, Tuesday, etc.). There are no prerequisites beyond the standard Obsidian Tasks plugin and its query block support for JavaScript. Expects each task to have a 'due' property; tasks with undated due fields may be omitted or treated by default handling.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Case-sensitive Regex Description Search - Tasks\nDESCRIPTION: This snippet shows a case-sensitive regular expression search for tasks where the description matches the pattern \"case\". The example demonstrates that regex searches are case-sensitive by default and will only match tasks with the specified casing in the description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription regex matches /case/\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /case/\n```\n\n----------------------------------------\n\nTITLE: Alternative Description Search (Regex) - Tasks\nDESCRIPTION: This snippet uses a regular expression to search for tasks whose description includes one of the given alternatives (pc_abigail, pc_edwina, or at_work). The `|` character within the regex pattern allows searching for any of the specified words, providing a concise way to perform alternative searches.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription regex matches /pc_abigail|pc_edwina|at_work/\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /pc_abigail|pc_edwina|at_work/\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters (Parentheses and Quotes) in AND\nDESCRIPTION: Illustrates a parsing error, similar to previous ones but with the order of delimiters reversed (parentheses first, then quotes) in an AND expression. Consistent delimiters are mandatory.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) AND \"is recurring\"'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (AND NOT with string)\nDESCRIPTION: This example demonstrates an expression that is incorrectly formatted. The error message clarifies the allowed delimiters for forming valid boolean expressions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n'(not done) AND NOT \"is recurring\"'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    (not done) AND NOT \"is recurring\"\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Things Theme Task Status Examples (Text)\nDESCRIPTION: A plain text list showcasing example tasks using the custom statuses supported by the Things Theme for Obsidian Tasks. Each line demonstrates a different status symbol (`[ ]`, `[/]`, `[x]`, etc.) and its corresponding descriptive name used as a tag.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/Things Theme.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- [ ] #task `space` to-do\n- [/] #task `/` incomplete\n- [x] #task `x` done\n- [-] #task `-` canceled\n- [>] #task `>` forwarded\n- [<] #task `<` scheduling\n- [?] #task `?` question\n- [!] #task `!` important\n- [*] #task `*` star\n- [\"] #task `\"` quote\n- [l] #task `l` location\n- [b] #task `b` bookmark\n- [i] #task `i` information\n- [S] #task `S` savings\n- [I] #task `I` idea\n- [p] #task `p` pros\n- [c] #task `c` cons\n- [f] #task `f` fire\n- [k] #task `k` key\n- [w] #task `w` win\n- [u] #task `u` up\n- [d] #task `d` down\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Day of Week in Obsidian Tasks\nDESCRIPTION: This snippet describes how to sort tasks based on the day of the week of their scheduled dates, using a custom sorter function.  The `task.scheduled.format(\"dddd\")` function extracts the day of the week from the scheduled date, allowing for an alphabetical sort. The provided example shows the expected output after sorting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.scheduled_results.approved.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsort by function task.scheduled.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Complete Styling Example for Tasks Plugin in CSS\nDESCRIPTION: A comprehensive CSS snippet for styling the Obsidian Tasks plugin. It includes colorful priority indicators using round checkboxes, special highlighting for due/overdue tasks, grid layout for task components, and various visual improvements.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* I like tags to appear in gray so they won't grab too much attention */\n.tasks-list-text a.tag {\n    color: var(--list-marker-color);\n}\n\n/* Set internal links to gray too instead of Obsidian's default */\n.tasks-backlink a.internal-link {\n    color: var(--list-marker-color);\n}\n\n/* Paint the recurrence rule in gray so it will be less distracting */\n.task-recurring {\n    color: var(--list-marker-color);\n}\n\n/* List indentation values that seem to work well for me */\nul.contains-task-list.plugin-tasks-query-result {\n    padding: 0 10px;\n}\n\n/* This seems to be needed for the task description to word-wrap correctly if they're too long */\nspan.tasks-list-text {\n    width: auto;\n}\n\n/* Represent tasks' priority with colorful round checkboxes instead of the priority emoticons */\n.task-list-item[data-task-priority=\"highest\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-purple);\n    border-color: var(--color-purple);\n}\n\n.task-list-item[data-task-priority=\"high\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-red);\n    border-color: var(--color-red);\n}\n\n.task-list-item[data-task-priority=\"medium\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-orange);\n    border-color: var(--color-orange);\n}\n\n.task-list-item[data-task-priority=\"normal\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-blue);\n    border-color: var(--color-blue);\n}\n\n.task-list-item[data-task-priority=\"low\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-cyan);\n    border-color: var(--color-cyan);\n}\n\n.task-list-item[data-task-priority=\"lowest\"] input[type=checkbox] {\n    box-shadow: 0px 0px 2px 2px var(--color-green);\n    border-color: var(--color-green);\n}\n\n/* This part removes the regular priority emoticon */\nspan.task-priority {\n    display: none;\n}\n\n/* A special color for the 'due' component if it's for today, and still needs work on */\n.task-list-item[data-task-status-type=\"TODO\"] .task-due[data-task-due=\"today\"] span,\n.task-list-item[data-task-status-type=\"IN_PROGRESS\"] .task-due[data-task-due=\"today\"] span {\n    background: var(--color-cyan);\n    border-radius: 10px;\n    padding: 2px 8px;\n}\n\n/* A special color for overdue due dates, for tasks that still need work on */\n.task-list-item[data-task-status-type=\"TODO\"] .task-due[data-task-due^=\"past-\"] span,\n.task-list-item[data-task-status-type=\"IN_PROGRESS\"] .task-due[data-task-due^=\"past-\"] span {\n    background: var(--color-pink);\n    border-radius: 10px;\n    padding: 2px 8px;\n}\n\n/* Make checkboxes a circle instead of a square */\nul > li.plugin-tasks-list-item .task-list-item-checkbox {\n    margin-inline-start: 0;\n    margin: 5px 2px;\n    border-radius: 50%;\n}\n\n/* The following section organizes the task components in a grid, so the description will be on the first row\n * of each item and most components will be in the 2nd row. */\nul > li.plugin-tasks-list-item {\n    grid-template-columns: 25px auto;\n    display: grid;\n    align-items: top;\n}\n\nspan.task-description {\n    grid-row: 1;\n    grid-column: 1/10;\n}\n\nspan.tasks-backlink {\n    grid-row: 2;\n    grid-column: 2;\n    font-size: small;\n}\n\nspan.task-recurring {\n    grid-row: 2;\n    font-size: small;\n    width: max-content;\n}\n\nspan.task-due {\n    grid-row: 2;\n    font-size: small;\n    width: max-content;\n}\n\nspan.task-done {\n    grid-row: 2;\n    font-size: small;\n    width: max-content;\n}\n\n.tasks-list-text {\n    position: relative;\n    display: inline-grid;\n    width: max-content;\n    grid-column-gap: 10px;\n}\n\nspan.task-extras {\n    grid-row: 2;\n    grid-column: 2;\n    font-size: small;\n}\n\n/* Make sure nested bullets in Reading mode get the whole width of the grid */\nli.task-list-item ul.has-list-bullet {\n grid-row: 3;\n grid-column: 1/10;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status Name - JavaScript\nDESCRIPTION: This snippet demonstrates how to group tasks by their status name using the `group by function task.status.name` command within the Obsidian Tasks plugin. It directly groups tasks based on the string representation of the status name. No external dependencies are required as this is part of the Obsidian Tasks plugin's query language.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.statuses_task.status.name_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.status.name\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Due on a Specific Date Using Moment.js in JavaScript\nDESCRIPTION: This filter function identifies tasks due on a precise date (May 31, 2023) by comparing the task's due date moment with the fixed date using Moment.js's isSame method at a 'day' precision level. The task must have a due moment property for the comparison. The output is a boolean that signals whether the task is due exactly on the specified date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.moment?.isSame(moment('2023-05-31'), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Sorted Tags in Obsidian Tasks Plugin\nDESCRIPTION: This snippet sorts the tags alphabetically before joining them with commas to create consistent grouping headers regardless of tag order. It depends on 'task.tags', sorts them with 'sort()', and joins with ', '. This ensures standardized grouping for tasks with same tags in different orders.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_docs.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags.sort().join(\", \")\n```\n\n----------------------------------------\n\nTITLE: Valid Query (Post-7.0.0): Optional Spaces Around Operators\nDESCRIPTION: Illustrates a query without spaces around the 'AND' operator. Prior to Tasks 7.0.0, this was invalid. Now, Tasks automatically handles missing spaces, making this query valid.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n(path includes a)AND(path includes b)\n```\n\n----------------------------------------\n\nTITLE: Negating Path Filter with NOT (Obsidian Tasks, text)\nDESCRIPTION: Shows two ways to exclude tasks in files with 'inbox' in the path: one using plain language ('does not include'), and one using the explicit NOT operator. Requires only the Tasks plugin. Both filter expressions are equivalent and will filter out matching paths.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npath does not include inbox\n```\n\nLANGUAGE: text\nCODE:\n```\nNOT (path includes inbox)\n```\n\n----------------------------------------\n\nTITLE: Running mdsnippets in Bash\nDESCRIPTION: This command executes the mdsnippets tool, followed by linting the generated markdown using `yarn run lint:markdown` and finally staging the changes with `git add --renormalize .`.  This ensures the output conforms to the defined markdownlint configuration and correct line endings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Embedding code and data in documentation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmdsnippets && yarn run lint:markdown && git add --renormalize .\n```\n\n----------------------------------------\n\nTITLE: Extract File Path with Templater\nDESCRIPTION: This snippet uses the Templater plugin to extract the full file path of the current note. It then removes the '.md' file extension using a regular expression replacement.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/_meta/templates/file path for redirecting alias.md#_snippet_0\n\nLANGUAGE: Templater\nCODE:\n```\n<% tp.file.path(true).replace(/\\.md$/, \"\") %>\n```\n\n----------------------------------------\n\nTITLE: Sorting by Recurring Status\nDESCRIPTION: Sorts tasks by whether they are recurring, with recurring tasks listed first using `task.isRecurring`. Dependencies: Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.isRecurring\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status using JavaScript Ternary Operator\nDESCRIPTION: This snippet demonstrates how to group tasks in the Obsidian Tasks plugin based on the boolean value of the `task.isDone` property. It uses a JavaScript ternary operator to return 'Action Required' if the task is not done (`task.isDone` is false) and 'Nothing To Do' if the task is done (`task.isDone` is true). This requires the Obsidian Tasks plugin and its query syntax.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.isDone_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.isDone ? \"Action Required\" : \"Nothing To Do\"\n```\n\n----------------------------------------\n\nTITLE: Monthly Recurring Task on Specific Day in Markdown\nDESCRIPTION: Demonstrates a task that repeats on the 31st of each month, showing how it skips months without 31 days.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Recurring Tasks.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] do stuff 🔁 every month on the 31st 📅 2022-08-31\n- [x] do stuff 🔁 every month on the 31st 📅 2022-07-31 ✅ 2022-07-31\n- [x] do stuff 🔁 every month on the 31st 📅 2022-05-31 ✅ 2022-05-31\n- [x] do stuff 🔁 every month on the 31st 📅 2022-03-31 ✅ 2022-03-31\n- [x] do stuff 🔁 every month on the 31st 📅 2022-01-31 ✅ 2022-01-31\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Description - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates grouping tasks by their original description. It leverages the `task.description` property, grouping tasks that share identical descriptions. This is useful for identifying tasks that are essentially the same, which is the default and most basic way to group tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.description_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description\n```\n\n----------------------------------------\n\nTITLE: Toggling Done on Simple Task Line (Markdown)\nDESCRIPTION: Test case demonstrating toggling 'done' on a line already marked as a simple task (`- wibble`). The expected result is converting it to an incomplete task (`- [ ] wibble`). Cursor position relative to `>>` should be tested.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Toggle Done Cursor Fixes.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- w\n\n>> - wibble\n```\n\n----------------------------------------\n\nTITLE: Example Input Markdown Task with Due Date Emoji\nDESCRIPTION: Represents a markdown task line entered by the user, including the Obsidian Tasks due date emoji (📅) to trigger suggestions. This is the input before typing any specific date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__emoji__symbols_offers_correct_options_for_partial_due_date_lines.approved.txt#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- [ ] some task 📅\"\n```\n\n----------------------------------------\n\nTITLE: Creating Task Dependencies in Obsidian Tasks with ID and dependsOn Attributes\nDESCRIPTION: Example showing how to create task dependencies in Obsidian Tasks plugin. The first task has an ID, and the second task depends on the first task and another task using the dependsOn attribute that references the task IDs.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Dependencies_dataview-include.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task do this first  [id:: dcf64c]\n- [ ] #task do this after first and some other task  [dependsOn:: dcf64c,0h17ye]\n```\n\n----------------------------------------\n\nTITLE: Generating Task Suggestions based on Input - JSON\nDESCRIPTION: This code snippet represents the suggestion generated by the Obsidian Tasks plugin when the user types the specified input within a Markdown line. The suggestion includes details such as the type of suggestion, text to display, text to append, and the insertion position and skip length, informing how to update the user's input. The functionality depends on the `Obsidian Tasks` plugin itself. No further prerequisites are explicitly mentioned in this context, assuming standard Obsidian environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__dataview__symbols_offers_correct_options_for_partial_recurrence_lines.approved.txt#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"✅ every day\",\n    \"appendText\": \"repeat:: every day] \",\n    \"insertAt\": 16,\n    \"insertSkip\": 18\n}\n```\n\n----------------------------------------\n\nTITLE: Filter by Cancelled Date (this week)\nDESCRIPTION: This snippet filters tasks by cancellation date, checking if the cancellation occurred this week (2024-03-25 to 2024-03-31) using 'OR' and 'NOT' operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      cancelled this week =>\n        cancelled date is between:\n          2024-03-25 (Monday 25th March 2024) and\n          2024-03-31 (Sunday 31st March 2024) inclusive\n      NOT:\n        cancelled this week =>\n          cancelled date is between:\n            2024-03-25 (Monday 25th March 2024) and\n            2024-03-31 (Sunday 31st March 2024) inclusive\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Cancelled Date Day of Week in JavaScript\nDESCRIPTION: This JavaScript snippet sorts task objects by their cancelled date, formatted as the full day of the week ('dddd'), enabling alphabetical sorting based on weekdays. It requires that each task has a 'cancelled' date property formatted appropriately and depends on the date formatting method to produce consistent weekday names. The input is a collection of task objects and the output is the tasks sorted alphabetically by the weekday name of their cancellation date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.cancelled_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.cancelled.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Complex Filter with Date and Description\nDESCRIPTION: This is a more complex filter that combines date-based criteria ('due this week') and a description filter ('description includes Hello World') with the 'OR' and 'NOT' operators. It demonstrates the combination of different conditions to filter the tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      AND (All of):\n        due this week =>\n          due date is between:\n            2024-03-25 (Monday 25th March 2024) and\n            2024-03-31 (Sunday 31st March 2024) inclusive\n        description includes Hello World\n      NOT:\n        AND (All of):\n          due this week =>\n            due date is between:\n              2024-03-25 (Monday 25th March 2024) and\n              2024-03-31 (Sunday 31st March 2024) inclusive\n          description includes Hello World\n```\n\n----------------------------------------\n\nTITLE: Line Continuation with Single Backslash - Tasks Plugin\nDESCRIPTION: This code snippet demonstrates how to use a single backslash (`\\`) as a line continuation character in a Tasks query. The backslash at the end of the first line indicates that the query continues on the next line. The `explain` instruction is used to show how the query is interpreted.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Line Continuations.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(priority is highest) OR       \\\n    (priority is lowest)\nexplain\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Date using Custom Category Function\nDESCRIPTION: A tasks query using a custom function to group tasks by due date categories. Demonstrates how invalid dates should be placed in an 'Invalid date' heading, not under 'Future'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Invalid dates with Sorting and Grouping.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\ngroup by function task.due.category.groupText\n\npath includes {{query.file.path}}\nhide backlinks\nhide postpone button\nhide task count\n```\n\n----------------------------------------\n\nTITLE: Defining AnuPpuccin Task Status Examples in Markdown\nDESCRIPTION: This Markdown snippet lists various Obsidian tasks, each tagged with `#task` and using a different status character (e.g., `[ ]`, `[x]`, `[>]`). These examples serve to demonstrate how the AnuPpuccin theme styles different task statuses within Obsidian notes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Theme - AnuPpuccin.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task `space` Unchecked\n- [x] #task `x` Checked\n- [>] #task `>` Rescheduled\n- [<] #task `<` Scheduled\n- [!] #task `!` Important\n- [-] #task `-` Cancelled\n- [/] #task `/` In Progress\n- [?] #task `?` Question\n- [*] #task `*` Star\n- [n] #task `n` Note\n- [l] #task `l` Location\n- [i] #task `i` Information\n- [I] #task `I` Idea\n- [S] #task `S` Amount\n- [p] #task `p` Pro\n- [c] #task `c` Con\n- [b] #task `b` Bookmark\n- [\"] #task `\"` Quote\n- [0] #task `0` Speech bubble 0\n- [1] #task `1` Speech bubble 1\n- [2] #task `2` Speech bubble 2\n- [3] #task `3` Speech bubble 3\n- [4] #task `4` Speech bubble 4\n- [5] #task `5` Speech bubble 5\n- [6] #task `6` Speech bubble 6\n- [7] #task `7` Speech bubble 7\n- [8] #task `8` Speech bubble 8\n- [9] #task `9` Speech bubble 9\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - has tag\nDESCRIPTION: Simplifies an expression with 'OR NOT' involving 'has tag'. 'has tag' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_44\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"has tag\",\n        \"f2\": \"has tag\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: De-emphasizing Backlinks in Obsidian Tasks Using CSS\nDESCRIPTION: This CSS snippet reduces the visual prominence of backlinks in the Tasks plugin output by reducing font size, decreasing opacity, and applying a grayscale filter. Add this snippet to the Obsidian vault's CSS snippets folder and enable it via Obsidian Settings. Targets the .tasks-backlink class; no parameters are required. Visual appearance is constrained by the level of support for CSS custom snippets in your theme.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to style backlinks.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* By David Phillips (autonia) https://github.com/autonia\n   From https://github.com/obsidian-tasks-group/obsidian-tasks/discussions/622#discussioncomment-2649299\n*/\n.tasks-backlink {\n    font-size: 0.7em;\n    opacity: 0.6;\n    filter: grayscale(60%);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Task List in Markdown - text\nDESCRIPTION: This snippet provides a basic example of a Markdown task list item as recognized by the Tasks Plugin. It is useful for testing base detection of plain tasks, without any nesting, blockquotes, or callout context involved. The input is the Markdown line, and the expected output is a single recognized task by the plugin, showing baseline compatibility.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Callouts and Block Quotes.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n- [ ] #task Task 1 Vanilla\n\n```\n\n----------------------------------------\n\nTITLE: Simplifying AND Boolean Expression\nDESCRIPTION: This snippet demonstrates simplifying a boolean expression using 'AND' to combine 'has start date' and 'description includes some'.  It replaces 'has start date' and 'description includes some' with aliases 'f1' and 'f2' respectively.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_38\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) AND (f2)\",\n    \"filters\": {\n        \"f1\": \"has start date\",\n        \"f2\": \"description includes some\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Point: Recurring Task on Last Day\nDESCRIPTION: This defines a basic recurring task, acting as a starting point for testing the last day of month recurrence. It uses the Obsidian Tasks syntax. This version is unchanged in testing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Recurrence handling invalid dates.md#_snippet_7\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task do stuff 🔁 every month on the last 📅 2021-11-30\n```\n\n----------------------------------------\n\nTITLE: Filter with Start Date and Description (XOR)\nDESCRIPTION: This filter uses 'HAS START DATE' and 'DESCRIPTION INCLUDES SPECIAL', using the 'XOR' operator, meaning the task should have exactly one of the properties.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nXOR (Exactly one of):\n      HAS START DATE\n      DESCRIPTION INCLUDES SPECIAL\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Root Folder Function - Javascript\nDESCRIPTION: This snippet enables sorting of tasks within the Obsidian Tasks plugin based on the root folder of the file containing the task. It utilizes a function-based sort, referencing `task.file.root` for determining the root folder. No specific dependencies are explicitly required beyond the base Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.root_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.root\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status Type (Default Order)\nDESCRIPTION: This snippet groups tasks by their status type, preserving the default order defined by the Obsidian Tasks plugin. It uses the 'task.status.typeGroupText' property to achieve this. It's an alternative to 'task.status.type' which sorts alphabetically.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.statuses_task.status.type_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.status.typeGroupText\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Filename Including Extension in JavaScript\nDESCRIPTION: This snippet defines a sorting function that orders tasks based on their file names including the file extension. It is useful to distinguish tasks across files with the same name but different extensions. The input is an array of task objects with a nested file property containing the filename string. Sorting is performed by accessing task.file.filename.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.filename_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.filename\n```\n\n----------------------------------------\n\nTITLE: Grouping by Custom Heading using Obsidian Tasks JavaScript\nDESCRIPTION: This snippet demonstrates how to group tasks by their heading, except when the heading matches the file name, using JavaScript in the Obsidian Tasks plugin configuration. It uses a custom group by function to compare the task.heading and task.file.filename properties, returning the heading only if they do not match. This approach requires familiarity with the Tasks plugin's group by API and JavaScript's strict equality checks, and is intended for advanced custom query setups within Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function (task.heading + '.md' === task.file.filename) ? '' : task.heading\n```\n\n----------------------------------------\n\nTITLE: Defining a Markdown Task Item with YAML Tags\nDESCRIPTION: This snippet shows a markdown task checkbox item with two YAML tags defined in the front matter. It requires knowledge of markdown syntax for tasks and YAML structure for specifying metadata. The task is represented as an unchecked checkbox with tags indicating its categorization. Input includes the task description and tags; output is the note structure with associated metadata for use in markdown parsers or task managers.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_tags_with_two_values_on_one_line.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntags: value-1-of-2-on-one-line, value-2-of-2-on-one-line\n---\n\n# yaml_tags_with_two_values_on_one_line\n\n- [ ] #task Task in 'yaml_tags_with_two_values_on_one_line'\n```\n\n----------------------------------------\n\nTITLE: Highlighting Task Description with Specific Tag\nDESCRIPTION: CSS snippet that applies a rounded red background to the entire task description when it contains the #task/strategic tag, using the :has() selector to detect tag presence.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.task-description span:has(.tag[data-tag-name=\"#task/strategic\"]) {\n    background: #ffbfcc;\n    border-radius: 10px;\n    padding: 2px 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Colored-Square Priority System in JavaScript\nDESCRIPTION: This snippet implements a custom priority sorting function for tasks in Obsidian using a home-grown system based on colored Unicode squares. It checks the 'description' property of each task for the presence of specific colored squares (🟥, 🟧, 🟨, 🟩, 🟦) and assigns a numerical priority accordingly, returning 0 for the highest priority (red) and higher numbers for lower priorities. If no square is found, the function returns 999 to maintain the relative order for tasks without a priority indicator. The snippet requires each task to have a 'description' property containing the visual priority marker.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.description_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst priorities = [...'🟥🟧🟨🟩🟦'];  \\\nfor (let i = 0; i < priorities.length; i++) {  \\\n    if (task.description.includes(priorities[i])) return i;  \\\n}  \\\nreturn 999;\n```\n\n----------------------------------------\n\nTITLE: Explained Output for Tasks Query with Placeholders - Obsidian Tasks - text\nDESCRIPTION: Shows the output generated by 'explain' for a Tasks query using file path, filename, root, and folder placeholders, along with a cleanup of an inline commented filter. Explains the mapping from placeholders to their actual values given the current file context, helping users understand and troubleshoot dynamic queries. Inputs must include placeholder tokens; outputs reveal their resolved strings and show removal of inline comments.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nExplanation of this Tasks code block query:\n\n  path includes {{query.file.path}} =>\n  path includes some/sample/file path.md\n\n  path includes {{query.file.pathWithoutExtension}} =>\n  path includes some/sample/file path\n\n  root includes {{query.file.root}} =>\n  root includes some/\n\n  folder includes {{query.file.folder}} =>\n  folder includes some/sample/\n\n  filename includes {{query.file.filename}} =>\n  filename includes file path.md\n\n  filename includes {{query.file.filenameWithoutExtension}} =>\n  filename includes file path\n\n  description includes Some Cryptic String {{! Inline comments are removed before search }} =>\n  description includes Some Cryptic String\n```\n\n----------------------------------------\n\nTITLE: Grouping Fully Completed Tasks (Not Implemented) (Obsidian Tasks)\nDESCRIPTION: Attempts to display fully completed tasks (`done`) from the current folder (`folder includes {{query.file.folder}}`), grouped by heading (`group by heading`). Lacks a specific \"fully done\" filter, only showing individually completed tasks. Backlinks are hidden (`hide backlinks`), and tasks are shown in a tree structure (`show tree`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_7\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\n# There is no Tasks instruction for \"fully done\" yet\ndone\ngroup by heading\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Nested OR Expression\nDESCRIPTION: Shows preprocessing of a nested OR expression: `(A OR B) OR C`. All operands use parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'( (description includes a) OR (description includes b) ) OR (description includes c)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"( (\",\n    \"description includes a\",\n    \") OR (\",\n    \"description includes b\",\n    \") \",\n    \") OR (\",\n    \"description includes c\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting a Global Query in Tasks and Using Explain - Obsidian Tasks - text\nDESCRIPTION: Shows how to define a global query using Tasks plugin, which provides default search criteria for all tasks searches. Intended for inclusion in Tasks plugin settings or via a separate code block. Inputs set result limits and filter by heading; no 'explain' required as these are defaults.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nlimit 50\nheading includes tasks\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks with Filename, Sort, and Group Directives (Obsidian Tasks Query)\nDESCRIPTION: This code snippet is an Obsidian Tasks query block used within a Markdown file. It defines criteria for filtering, sorting, and displaying tasks. The query selects tasks from files whose name includes 'internal_heading_links', sorts the results by the task's line number, groups the output by the Markdown heading the task is under, and hides backlink information from the display. This requires the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Internal Heading Links/Internal Heading Links.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\ntasks\nfilename includes internal_heading_links\n\nsort by function task.lineNumber\n\ngroup by heading\n\nhide backlinks\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Logic in Tasks Query with Explain - Obsidian Tasks - text\nDESCRIPTION: Shows an example query combining Boolean logic operators, with 'explain' to clarify nested structure. Requires Obsidian Tasks plugin and works within a Tasks code block. The input makes use of 'not', grouping, and 'AND' to combine conditions on task properties. 'Explain' expands the Boolean logic for user comprehension.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nexplain\nnot done\n(due before tomorrow) AND (is recurring)\n```\n\n----------------------------------------\n\nTITLE: Grouping Not Fully Completed Tasks (Not Implemented) (Obsidian Tasks)\nDESCRIPTION: Attempts to display tasks that are not fully completed (`not done`) from the current folder (`folder includes {{query.file.folder}}`), grouped by heading (`group by heading`). Lacks a specific \"not fully done\" filter, only showing individually incomplete tasks. Backlinks are hidden (`hide backlinks`), and tasks are shown in a tree structure (`show tree`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_9\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\n# There is no Tasks instruction for \"not fully done\" yet\nnot done\ngroup by heading\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - has start date\nDESCRIPTION: This snippet shows the simplification of a boolean expression using 'OR NOT' with 'has start date'. Both instances are replaced with 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_42\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"has start date\",\n        \"f2\": \"has start date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Recurrence Rule using Regular Expressions\nDESCRIPTION: Allows filtering tasks based on their recurrence rule string, supporting inclusion, exclusion, and regex-based matches or non-matches via 'task.recurrenceRule'. Useful for advanced recurrence pattern management.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\n`recurrence (includes, does not include) <string>`\\n`recurrence (regex matches, regex does not match) /regex/i`\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by shortened file path in JavaScript\nDESCRIPTION: This snippet groups tasks by their file path after removing the query's folder path prefix from the task's file path string. It allows displaying shortened paths that exclude a common folder prefix, enhancing readability for tasks located within or under the query folder. The method is a simple string replacement and does not verify if the query's folder actually prefixes the task's path, which could lead to unexpected results if the prefix appears elsewhere. It requires access to 'task.file.path' and 'query.file.folder' properties. Inputs are the task and query objects, and the output is a string with the modified file path for grouping.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.path_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.path.replace(query.file.folder, '')\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks Query with Dynamic Parameters\nDESCRIPTION: This Obsidian Tasks query retrieves tasks from the folder specified by the 'query.file.folder' variable and sorts them by their file path.  It uses the 'query.file.filenameWithoutExtension' variable to interpret the filename as an instruction. The 'limit' parameter restricts the number of results to 250.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 250.md#_snippet_0\n\nLANGUAGE: ObsidianTasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Defining Task Status Flow with Mermaid\nDESCRIPTION: This Mermaid code defines a flowchart representing the lifecycle of tasks. It includes various task states and their relationships, primarily focusing on transitioning different task types to a 'complete' status. The diagram uses CSS classes to style each status node, providing a visual representation of task progress.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Aura_Table.approved.mermaid.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"incomplete\"]:::TODO\n2[\"complete / done\"]:::DONE\n3[\"cancelled\"]:::CANCELLED\n4[\"deferred\"]:::TODO\n5[\"in progress, or half-done\"]:::IN_PROGRESS\n6[\"Important\"]:::TODO\n7[\"question\"]:::TODO\n8[\"review\"]:::TODO\n9[\"Inbox / task that should be processed later\"]:::TODO\n10[\"bookmark\"]:::TODO\n11[\"brainstorm\"]:::TODO\n12[\"deferred or scheduled\"]:::TODO\n13[\"Info\"]:::TODO\n14[\"idea\"]:::TODO\n15[\"note\"]:::TODO\n16[\"quote\"]:::TODO\n17[\"win / success / reward\"]:::TODO\n18[\"pro\"]:::TODO\n19[\"con\"]:::TODO\n1 --> 2\n2 --> 1\n3 --> 1\n4 --> 2\n5 --> 2\n6 --> 2\n7 --> 2\n8 --> 2\n9 --> 2\n10 --> 2\n11 --> 2\n12 --> 2\n13 --> 2\n14 --> 2\n15 --> 2\n16 --> 2\n17 --> 2\n18 --> 2\n19 --> 2\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Organizing Nested Task Lists in Markdown for Obsidian\nDESCRIPTION: This markdown snippet demonstrates nested task lists using checkboxes and hierarchical indentation with headings and nested bullet points. It serves to manually list multiple tasks with tags for contextual categorization (#task), enabling easy visual management and integration with Obsidian Tasks plugin queries. Inputs are manual task descriptions and tags; outputs are readable checklists within notes. It requires markdown support and benefit from Obsidian's plugin environment for enhanced task handling.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/callouts_nested_issue_2890_unlabelled.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n> [!Calendar]+\n>> [!Check]+\n>>> [!Attention]+\n>>> Some stuff goes here\n>>> - [ ] #task Correction1\n>>> - [ ] #task Correction2\n>>> - [ ] #task Correction3\n>>> - [ ] #task Correction4\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Due Date using Built-in Function\nDESCRIPTION: A tasks query that sorts tasks by their due dates. This demonstrates how tasks with invalid dates should be sorted before tasks with valid dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Invalid dates with Sorting and Grouping.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nsort by due\n\npath includes {{query.file.path}}\nhide backlinks\nhide postpone button\nhide task count\n```\n\n----------------------------------------\n\nTITLE: Embedding CSS File Snippet\nDESCRIPTION: Shows the usage of `snippet:` to embed a CSS file, specifying the file path that is within a hidden directory. This results in the CSS code being formatted inside a code block with the CSS language tag. It includes a comment at the top of the CSS and demonstrates that the process depends on browser support.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Embedding code and data in documentation.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* By David Phillips (autonia) https://github.com/autonia\n   From https://github.com/obsidian-tasks-group/obsidian-tasks/discussions/622#discussioncomment-2649299\n*/\n.tasks-backlink {\n    font-size: 0.7em;\n    opacity: 0.6;\n    filter: grayscale(60%);\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Special Character Handling - Tasks\nDESCRIPTION: This snippet demonstrates how to handle special characters in regular expressions. Specifically, it shows the incorrect usage of `/` which can be interpreted as the end of the regex pattern, leading to unexpected results. It highlights the importance of escaping special characters within the pattern.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription regex matches /#context/pc_abigail/\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /#context/pc_abigail/\n```\n\n----------------------------------------\n\nTITLE: Accessing Translation String in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to access a translated string using the `i18n.t()` function. The function takes a string representing the translation key as input and returns the corresponding translated text.  This is used in conjunction with the JSON structure to provide translated text.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Translation/Overview of the translation setup.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ni18n.t('modals.customStatusModal.editAvailableAsCommand.name')\n```\n\n----------------------------------------\n\nTITLE: Simplifying XOR Boolean Expression\nDESCRIPTION: This example simplifies a boolean expression using the 'XOR' operator.  'has start date' is aliased to 'f1', and 'description includes special' is aliased to 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_43\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) XOR (f2)\",\n    \"filters\": {\n        \"f1\": \"has start date\",\n        \"f2\": \"description includes special\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for a Backslash - Tasks Plugin\nDESCRIPTION: This code snippet shows how to search for a literal backslash character in a Tasks query.  Two backslashes (`\\\\`) at the end of the line are interpreted as a single backslash in the search term. The `explain` instruction shows the resulting search string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Line Continuations.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Search for a single backslash:\ndescription includes \\\\\nexplain\n```\n\n----------------------------------------\n\nTITLE: Sorting by Number of Tags\nDESCRIPTION: Sorts tasks by the number of tags they contain using `task.tags.length`. The `reverse` option puts tasks with the most tags first. Requires the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function reverse task.tags.length\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Uppercase Status Name - JavaScript\nDESCRIPTION: This snippet demonstrates how to group tasks by the uppercase version of their status name using the `group by function task.status.name.toUpperCase()` command within the Obsidian Tasks plugin. This will group tasks with similar status names regardless of case. No external dependencies are required as this is part of the Obsidian Tasks plugin's query language.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.statuses_task.status.name_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.status.name.toUpperCase()\n```\n\n----------------------------------------\n\nTITLE: Handling Forward Slashes in Folder Path Regex Searches\nDESCRIPTION: Illustrates that since Tasks 4.3.0, forward slashes (`/`) in folder paths do not necessarily need to be escaped (`\\/`) in regex searches, although escaping still works. Both examples find tasks in folders containing `Root/Sub-Folder/Sub-Sub-Folder`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_1\n\nLANGUAGE: task\nCODE:\n```\nfolder regex matches /Root/Sub-Folder/Sub-Sub-Folder/\n```\n\nLANGUAGE: task\nCODE:\n```\nfolder regex matches /Root\\/Sub-Folder\\/Sub-Sub-Folder/\n```\n\n----------------------------------------\n\nTITLE: Calling task.due.formatAsDate() Method with Fallback in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `formatAsDate(fallback)` method on the `task.due` object in Obsidian Tasks. This method formats the due date into a `YYYY-MM-DD` string representation. It returns the provided fallback string (e.g., 'no date') if the task has no due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.formatAsDate('no date')\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Checkboxes for Tasks\nDESCRIPTION: CSS snippet that transforms the standard square checkboxes into circular checkboxes by adjusting the border-radius and margins.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\nul > li.plugin-tasks-list-item .task-list-item-checkbox {\n    margin-inline-start: 0;\n    margin: 5px 2px;\n    border-radius: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Due Date Day of Week - Javascript\nDESCRIPTION: This snippet sorts tasks based on the day of the week they are due. It accesses the due date via `task.due` and formats it to the full day name string using `.format(\"dddd\")`. `sort by function` then orders tasks alphabetically by this day name.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.due.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Uncompleted task with tag in Obsidian Tasks format\nDESCRIPTION: A markdown task item using Obsidian Tasks syntax. This demonstrates how to create an uncompleted task with a tag reference.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_tags_has_multiple_values.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Task in 'yaml_tags_has_multiple_values'\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks with non-equal urgency scores using toFixed\nDESCRIPTION: This snippet filters tasks with urgency scores that do not equal 1.95 by using `toFixed(2)` on both sides of the inequality. It demonstrates handling floating-point precision differences when excluding a specific urgency value, with multiple priority tags showing various task urgencies.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_results.approved.txt#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfilter by function task.urgency.toFixed(2) !== 1.95.toFixed(2)\nFind tasks with any urgency other than the default score of `1.95`.\n=>\n- [ ] #task Highest priority ➙\n- [ ] #task High priority ⏫\n- [ ] #task Medium priority ➚\n- [ ] #task Low priority ▼\n- [ ] #task Lowest priority ⏬\n- [ ] due 2023-06-11 ➙ 2023-06-11\n====================================================================================\n```\n\n----------------------------------------\n\nTITLE: Filter by Description and Due Date\nDESCRIPTION: This snippet combines description filtering with due date filtering, using the 'OR' operator. It checks if the description contains specific text or the task has a due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      DESCRIPTION INCLUDES wibble\n      has due date\n```\n\n----------------------------------------\n\nTITLE: Explained Nested Boolean Output for Tasks Query - Obsidian Tasks - text\nDESCRIPTION: Presents the output from using 'explain' on a complex, line-continued Tasks Boolean query. The explanation clarifies the full grouping and hierarchy of conditions, showing how nested AND, OR, and NOT are handled by the query engine. Users see a visualization of their query's logic, aiding in debugging and refinement.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nExplanation of this Tasks code block query:\n\n  (                                                                                       \\\n      (description includes 1) AND (description includes 2) AND (description includes 3)  \\\n  ) OR (                                                                                  \\\n      (description includes 5) AND (description includes 6) AND (description includes 7)  \\\n  )                                                                                       \\\n  AND NOT (description includes 7)\n   =>\n  ( (description includes 1) AND (description includes 2) AND (description includes 3) ) OR ( (description includes 5) AND (description includes 6) AND (description includes 7) ) AND NOT (description includes 7) =>\n    OR (At least one of):\n      AND (All of):\n        description includes 1\n        description includes 2\n        description includes 3\n      AND (All of):\n        AND (All of):\n          description includes 5\n          description includes 6\n          description includes 7\n        NOT:\n          description includes 7\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter Metadata with Various Property Types\nDESCRIPTION: This YAML snippet defines a variety of sample properties for a document including booleans, date and datetime formats, lists, numbers, single and multiline strings, and internal link references. It includes aliases and tags to categorize the content, as well as creation date and project metadata. This frontmatter provides structured data to be parsed by tools that support YAML metadata in markdown files.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/docs_sample_for_task_properties_reference.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsample_checkbox_property: true\nsample_date_property: 2024-07-21\nsample_date_and_time_property: 2024-07-21T12:37:00\nsample_list_property:\n  - Sample\n  - List\n  - Value\nsample_number_property: 246\nsample_text_property: Sample Text Value\nsample_text_multiline_property: |\n  Sample\n  Text\n  Value\nsample_link_property: \"[[yaml_all_property_types_populated]]\"\nsample_link_list_property:\n  - \"[[yaml_all_property_types_populated]]\"\n  - \"[[yaml_all_property_types_empty]]\"\naliases:\n  - YAML All Property Types Populated\ntags:\n  - tag-from-file-properties\ncreation date: 2024-05-25T15:17:00\nproject: Secret Project\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Custom Done Date Format in Obsidian Query Language\nDESCRIPTION: This snippet utilizes the Obsidian Tasks plugin query language to group tasks by their completion date, using a custom date format ('YYYY-MM-DD dddd'). It modifies the behavior of the default 'group by done' by substituting an empty string in cases where no done date is available, instead of displaying 'No done date.' This query does not require external dependencies but assumes the Obsidian Tasks plugin and appropriate task metadata. The main parameter is the task's 'done' property, and the output groups tasks by formatted completion date or leaves them grouped under an empty heading if undated.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.done_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Query Language\nCODE:\n```\ngroup by function task.done.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks in Obsidian using JavaScript\nDESCRIPTION: This snippet sorts tasks within Obsidian using a function that orders them based on their original Markdown line text. It relies on the 'task.originalMarkdown' property for comparison, enabling better organization of tasks in note files.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.originalMarkdown_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function task.originalMarkdown\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - path does not include\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'path does not include some/path'. The term is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_70\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"path does not include some/path\",\n        \"f2\": \"path does not include some/path\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Tags with Templater\nDESCRIPTION: This Templater snippet includes content from the file \"[[tags for related pages]]\" into the current note. This is to add tags to the current note. This aids in organization and linking related pages together. The content of \"[[tags for related pages]]\" would be required to use this snippet.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/_meta/templates/new documentation file.md#_snippet_2\n\nLANGUAGE: Templater\nCODE:\n```\n<% tp.file.include(\"[[\"tags for related pages\"]]\") %>\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Task Field During 'sort by function' Evaluation\nDESCRIPTION: This example shows the behavior of the Tasks plugin when a 'sort by function' expression tries to access a non-existent field 'nonExistentField' on a task object. The snippet is used to evaluate the plugin's error handling when input expressions reference task properties that do not exist, potentially leading to undefined or evaluation errors.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Sorting.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nsort by function task.nonExistentField\n```\n\n----------------------------------------\n\nTITLE: Filter by Cancelled Date (on a specific date)\nDESCRIPTION: This snippet filters tasks that were cancelled on a specific date (2021-12-27) using 'OR' and 'NOT' operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      cancelled on 2021-12-27 =>\n        cancelled date is on 2021-12-27 (Monday 27th December 2021)\n      NOT:\n        cancelled on 2021-12-27 =>\n          cancelled date is on 2021-12-27 (Monday 27th December 2021)\n```\n\n----------------------------------------\n\nTITLE: Defining a Code Validation Flowchart with Mermaid\nDESCRIPTION: This Mermaid code defines a left-to-right (LR) flowchart. It models a process starting with 'Input Data' feeding into 'Updated Code'. The output is then compared ('Output the same?'). If the output matches ('Yes'), the process results in 'Pass', indicated by a green link. If the output differs ('No'), it results in 'Fail', indicated by a red link, which then leads to the action 'Open diff tool to show changes'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/_meta/templates/sample mermaid diagram.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n1[Input Data]\n2[Updated Code]\n3{Output the same?}\n1 --> 2\n2 --> 3\n\n4[Pass]\n3---|Yes|4\nlinkStyle 2 stroke:green\n\n5[Fail]\n6[Open diff tool to show changes]\n3---|No|5\n5 --> 6\n\nlinkStyle 3 stroke:red\n```\n\n----------------------------------------\n\nTITLE: Task/Task.ts and related task management modules\nDESCRIPTION: These files implement core task data structures, dependencies, serialization, and task-specific logic including handling task dependencies, completion logic, and serialization strategies. They depend on settings and serializer configurations.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Core task data structures, dependency handling, and serialization code managing task objects and their lifecycle, with dependencies on TaskDependency.ts and serializers */\n```\n\n----------------------------------------\n\nTITLE: Parsing Balanced and Unbalanced Parentheses in Path Filters\nDESCRIPTION: Demonstrates how the parser handles paths containing balanced and unbalanced parentheses. The parser extracts individual filter conditions and assigns them identifiers, then reconstructs the boolean expression with simplified references.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1)) OR (f2)))\",\n    \"filters\": {\n        \"f1\": \"path includes ()some example(\",\n        \"f2\": \"path includes ((some example\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Fully Completed Tasks (Not Implemented) (Obsidian Tasks)\nDESCRIPTION: Attempts to display fully completed tasks (including sub-tasks) from the current folder (`folder includes {{query.file.folder}}`). However, as noted by the comment, there is no specific instruction for \"fully done\", so it currently only filters for individually `done` tasks. Backlinks are hidden (`hide backlinks`), and tasks are shown in a tree structure (`show tree`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\n# There is no Tasks instruction for \"fully done\" yet\ndone\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Grouping by Description Without Tags (JavaScript)\nDESCRIPTION: Groups tasks based on their description after all hash tags have been removed. This is useful for grouping tasks that are otherwise identical, even if their tags differ. Requires the task object (`task`) and its `descriptionWithoutTags` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.descriptionWithoutTags\n```\n\n----------------------------------------\n\nTITLE: Showing Task Status Cycling\nDESCRIPTION: This snippet completes the cycle of custom statuses, demonstrating the final status after another click. This emphasizes the cyclical nature of the defined statuses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Set up custom statuses.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n- [!] #task Do important stuff\n```\n\n----------------------------------------\n\nTITLE: Replacing Task Button Icons with Unicode Characters in CSS\nDESCRIPTION: This CSS modifies the appearance of task action buttons by setting their ::after pseudo-element content to specific Unicode characters. The .tasks-edit button displays the 'LOWER LEFT BALLPOINT PEN' (U+1F589) and .tasks-postpone uses 'UPWARDS BUTTON' (U+2BEE). No external dependencies are required, but platform support for these Unicode symbols may vary—characters from Unicode version 7 or later might not render on all systems. The snippet should be saved as a CSS file and enabled in Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to style buttons.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.tasks-edit::after {\n    content: '\\1f589';\n}\n\n.tasks-postpone::after {\n    content: '\\2bee';\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Task Filter with NOT Operator in JavaScript (JSON Pair)\nDESCRIPTION: This snippet illustrates handling filter strings containing the NOT operator in different positions with various filter types. It parses expressions such as 'NOT (description includes d1)' and maps the inner filter to a placeholder. The parser must correctly identify the scope of negation and extract filter contents, delivering a JSON output that represents the negation structure and corresponding filter. Input is a string; output is a JSON object. This approach requires that filters enclosed in parentheses after NOT keywords are well-formed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"simplifiedLine\": \"NOT (f1)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks Scheduled on Wednesdays\nDESCRIPTION: This JavaScript snippet demonstrates how to filter tasks that are scheduled on Wednesdays using the `task.scheduled.format()` method. It uses the moment.js library for date formatting. The filter function checks if the formatted day of the week is equal to 'Wednesday'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.scheduled.format('dddd') === 'Wednesday'\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Created Before Date\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a 'created before' date filter. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(created before 2021-12-27) OR NOT (created before 2021-12-27)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"created before 2021-12-27\",\n        \"f2\": \"created before 2021-12-27\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Simple OR Expression with Parentheses\nDESCRIPTION: Demonstrates the preprocessing of a basic boolean OR expression with operands enclosed in parentheses. The output is a tokenized array.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) OR (is recurring)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"(\",\n    \"not done\",\n    \") OR (\",\n    \"is recurring\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining DONE Status ('3') Transitioning to DONE\nDESCRIPTION: Defines '3' as a DONE status symbol ('DONE followed by DONE'). It transitions to the 'x' symbol (Done). This configuration has specific behavior for recurring tasks: completing a recurring task with this status will result in the next occurrence being TODO or IN_PROGRESS, not DONE, to ensure it appears in 'not done' filters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n3\n```\n\n----------------------------------------\n\nTITLE: Dataview Format for Dates in Obsidian Tasks\nDESCRIPTION: Examples of how to use dataview format to add date fields (created, scheduled, start, due, completion, cancelled) to tasks in Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Dataview Format.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Has a created date  [created:: 2023-04-13]\n- [ ] #task Has a scheduled date  [scheduled:: 2023-04-14]\n- [ ] #task Has a start date  [start:: 2023-04-15]\n- [ ] #task Has a due date  [due:: 2023-04-16]\n- [x] #task Has a done date  [completion:: 2023-04-17]\n- [-] #task Has a cancelled date  [cancelled:: 2023-04-18]\n```\n\n----------------------------------------\n\nTITLE: Updating Task Status in Obsidian via JavaScript\nDESCRIPTION: This snippet provides a function to update the completion status of a specific task within an Obsidian note. It retrieves the note's content, modifies the task's status, and saves the changes. It relies on parsing markdown and using Obsidian's API to access notes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Obsidian/File.test.replaceTaskWithTasks_issue_1680_-_Cannot_read_properties_of_undefined.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction updateTaskStatus(notePath, taskId, completed) {\n    // Load note content\n    const content = loadNoteContent(notePath);\n    // Find task by ID or position\n    // Update task completion status\n    // Save updated content\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Not Due on 2021-08-22 Using Tasks Plugin\nDESCRIPTION: This snippet filters tasks that are not due on August 22, 2021, within Obsidian files. It uses path inclusion and negation of the due date to exclude tasks due on that date, with grouping by headings and hiding backlinks, allowing for targeted task management.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Testing File Formats/Dataview Format - Queries - Tasks Plugin.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\n# explain\npath includes Manual Testing/Testing File Formats\nNOT (due on 2021-08-22)\n\ngroup by heading\nhide backlink\n```\n\n----------------------------------------\n\nTITLE: Default Debugging Settings Configuration in JSON\nDESCRIPTION: The default configuration for hidden debugging settings in the Obsidian Tasks plugin. These settings can be modified by manually editing the data.json file to enable various debugging features.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Debugging/How do I enable hidden debugging and visualisation facilities.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"debugSettings\": {\n    \"ignoreSortInstructions\": false,\n    \"showTaskHiddenData\": false,\n    \"recordTimings\": false\n  }\n```\n\n----------------------------------------\n\nTITLE: Generating Relative Dates using Obsidian Templater\nDESCRIPTION: This snippet utilizes the Obsidian Templater plugin's `tp.date.now()` function within a Markdown task list item to insert a date string formatted as 'YYYY-MM-DD'. The second argument specifies an offset in days relative to the current date, allowing for dynamic date generation within Obsidian notes. Requires the Templater plugin to be enabled and configured in Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/_meta/templates/tasks with range of due dates - Templater plugin.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task [offset] days 📅 <% tp.date.now(\"YYYY-MM-DD\", offset) %>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<% tp.date.now(\"YYYY-MM-DD\", offset) %>\n```\n\n----------------------------------------\n\nTITLE: Sorting by Line Number\nDESCRIPTION: Sorts tasks by the line number of their original line in the MarkDown file using `task.lineNumber`. The first line is 0.  Dependencies: Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.lineNumber\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Task in Obsidian Using JavaScript\nDESCRIPTION: This snippet likely automates the creation or update of a task within an Obsidian note by utilizing Obsidian's API via JavaScript. It possibly involves locating specific headings or links and inserting task checkboxes, supporting batch or individual task management. Dependencies include Obsidian's API and JavaScript environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/link_in_heading.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example code to create a task in Obsidian\nconst createTask = async (app, notePath, taskDescription) => {\n  const vault = app.vault;\n  const file = await vault.getAbstractFileByPath(notePath);\n  if (file instanceof TFile) {\n    const content = await vault.read(file);\n    const updatedContent = content + '\\n- [ ] ' + taskDescription;\n    await vault.modify(file, updatedContent);\n  }\n};\n// Usage: createTask(app, 'path/to/note.md', 'Task description');\n```\n\n----------------------------------------\n\nTITLE: Getting File Property Value (JavaScript)\nDESCRIPTION: Retrieves the value of a specific YAML frontmatter property from the file containing the query. Takes the property name as a string argument. Returns the property value or `null` if the property does not exist.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/QueryProperties.test.query_file_properties.approved.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.property('task_instruction')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.property('non_existent_property')\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks with Grouping by Heading - Obsidian Tasks Plugin - tasks\nDESCRIPTION: This snippet includes a query block in the 'tasks' language that filters tasks by the current file path dynamically using a template variable, groups tasks by their heading, and suppresses backlink displays. It is designed to retrieve and organize tasks from this file based on their respective headings for previewing or review purposes within Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/internal_heading_links.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes {{query.file.path}}\ngroup by heading\nhide backlinks\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Cancelled Date with Tasks query\nDESCRIPTION: This Tasks query demonstrates how to find tasks cancelled yesterday. This means tasks with a cancelled date matching yesterday.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\ncancelled yesterday\n```\n\n----------------------------------------\n\nTITLE: Highlighting Specific Tag with Green Glow\nDESCRIPTION: CSS snippet that adds a green glow effect specifically around the #task/atHome tag, using the data-tag-name attribute selector.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\na.tag[data-tag-name=\"#task/atHome\"] {\n    box-shadow: 0 0 5px green;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks based on grouping criteria in Obsidian Tasks (JavaScript)\nDESCRIPTION: This snippet sets up filtering logic to display specific groups of tasks in short mode, enabling focused task management. It relies on the plugin's filtering API and user-defined criteria to selectively show tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DefaultsDocs/DocsSamplesForDefaults.test.DocsSamplesForDefaults_demo-short-mode_instructions.approved.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Code applies filtering to display specific task groups in short mode */\n\nconst applyGroupFilter = (groupName) => {\n  const plugin = app.plugins.plugins['obsidian-tasks'];\n  if (plugin) {\n    plugin.settings.activeGroup = groupName;\n    plugin.saveSettings();\n  }\n};\n\napplyGroupFilter('Today');\n```\n\n----------------------------------------\n\nTITLE: Defining Done Status Symbol ('x')\nDESCRIPTION: Defines the 'x' character as a status symbol representing 'Done' (type DONE). When this status is toggled, it transitions back to the 'space' symbol (representing Todo).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nx\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by multiple status symbols (verbose)\nDESCRIPTION: This snippet filters tasks to find those with a status symbol of `P`, `C`, `Q`, or `A`. It uses a variable to hold the symbol and then checks against each possible value. Note that a `return` statement is required in this format.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.symbol_docs.approved.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function \\\n    const symbol = task.status.symbol; \\\n    return symbol === 'P' || symbol === 'C' || symbol === 'Q' || symbol === 'A';\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Due on Specific Date with Dataview - Dataview\nDESCRIPTION: This snippet retrieves all tasks from the folder \"Manual Testing/Testing File Formats\" where the task's due date exactly matches 2021-08-22. The query groups results by the subpath within the section using the meta(section).subpath function. Requires the Dataview Obsidian plugin enabled, and the appropriate date metadata set in tasks. No parameters are required; output is a grouped list of matching tasks. Limitations include dependence on correctly formatted due dates in the source files.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Testing File Formats/Dataview Format - Queries - Dataview Plugin.md#_snippet_0\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Manual Testing/Testing File Formats\"\nWHERE due = date(\"2021-08-22\")\nGROUP BY meta(section).subpath\n```\n\n----------------------------------------\n\nTITLE: Sorting Obsidian Tasks by Due Day of Week (JavaScript)\nDESCRIPTION: This Obsidian Tasks query snippet utilizes the 'sort by function' feature to arrange tasks. It applies the Luxon format 'dddd' to the task's due date using `task.due.format(\"dddd\")`, resulting in sorting based on the full name of the day of the week (e.g., 'Friday', 'Monday', 'Saturday') in alphabetical order. Requires the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.due_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.due.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Logic Expressions in Obsidian Tasks Queries\nDESCRIPTION: These examples demonstrate how Obsidian Tasks parses query expressions with logical operators (AND, OR, NOT, XOR) and various task filtering conditions. Each input example shows a query string and the resulting tokenized array that would be used for query processing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"(\",\n    \"heading includes wibble\",\n    \") OR\",\n    \" \",\n    \"NOT (\",\n    \"heading includes wibble\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Suggestion for Task with Relative Date\nDESCRIPTION: The JSON object returned by the Obsidian Tasks plugin as the first suggestion when the user types the due date emoji (📅) followed by '1 year'. It suggests the date one year from the current date and provides details for appending the full date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__emoji__symbols_offers_correct_options_for_partial_due_date_lines.approved.txt#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"2023-07-11\",\n    \"appendText\": \"📅 2023-07-11 \",\n    \"insertAt\": 16,\n    \"insertSkip\": 9\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Boolean Filter Expressions\nDESCRIPTION: This snippet demonstrates simplifying a boolean filter expression where 'has happens date' is present on both sides of the OR condition. It maps 'has happens date' to aliases 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_33\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"filters\": {\n        \"f1\": \"has happens date\",\n        \"f2\": \"has happens date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status Type in Obsidian Tasks with LYT Mode Theme\nDESCRIPTION: A tasks query that ignores the global query, filters tasks from the current file path, groups them by status type, and sorts by description. This demonstrates how to visualize the different task statuses in the LYT Mode theme.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Theme - LYT Mode.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\n# We need to ignore the global query, as it ignores this file:\nignore global query\n\npath includes {{query.file.path}}\ngroup by status.type\nsort by description\n```\n```\n\n----------------------------------------\n\nTITLE: Representing Tasks in YAML\nDESCRIPTION: This snippet represents a task item within a YAML structure. It uses a hyphen and square brackets to represent a task with a checkmark indicating its status (in this case, an unchecked task).  The `#task` tag is used for categorization. The example shows a task in 'yaml_complex_example'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_complex_example.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n- [ ] #task Task in 'yaml_complex_example'\n```\n\n----------------------------------------\n\nTITLE: Querying Date-Type Tasks for Edit Date Testing - tasks\nDESCRIPTION: This snippet provides a template for querying tasks that have all supported date types within the current file. It uses dynamic filters for file path and task description, and suppresses backlink and postpone button displays for clarity in UI review. Designed for use in sections testing date editing features, it facilitates hands-on validation that date-picking and context menu updates propagate correctly to tasks. Dependencies: Obsidian Tasks plugin; may require template variable substitution for correct file path. Outputs a focused list of relevant tasks for live manual manipulation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Smoke Testing the Tasks Plugin.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\npath includes {{query.file.path}}\ndescription includes I have all the supported date types\nhide backlink\nhide postpone button\n```\n\n----------------------------------------\n\nTITLE: Structured documentation for Query File Properties in Obsidian Tasks\nDESCRIPTION: Provides detailed descriptions of available query file properties, their types, examples, and version additions. Explains the TasksFile object and its methods for accessing file metadata, such as path, filename, and property existence. Dependencies include the Obsidian Tasks plugin and its source code for TasksFile.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Query Properties.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```markdown\n# Query Properties in Obsidian Tasks Plugin\n\n> [!released]\n> \n> - Query Properties were introduced in Tasks 4.7.0.\n> - Their direct use in Custom Filters and Custom Groups, without the use of Placeholders, was introduced in Tasks 5.1.0.\n\n## Introduction\n\nIn a growing number of locations, Tasks allows programmatic/scripting access to properties of the file containing the search query:\n\n- [[Placeholders]]\n- [[Custom Filters]]\n- [[Custom Sorting]]\n- [[Custom Grouping]]\n\nThis page documents all the available pieces of information in Queries that you can access.\n\n## Values for Query File Properties\n\n<!-- placeholder to force blank line before included text --><!-- include: QueryProperties.test.query_file_properties.approved.md -->\n\n| Field | Type | Example |\n| ----- | ----- | ----- |\n| `query.file.path` | `string` | `'root/sub-folder/file containing query.md'` |\n| `query.file.pathWithoutExtension` | `string` | `'root/sub-folder/file containing query'` |\n| `query.file.root` | `string` | `'root/'` |\n| `query.file.folder` | `string` | `'root/sub-folder/'` |\n| `query.file.filename` | `string` | `'file containing query.md'` |\n| `query.file.filenameWithoutExtension` | `string` | `'file containing query'` |\n| `query.file.hasProperty('task_instruction')` | `boolean` | `true` |\n| `query.file.hasProperty('non_existent_property')` | `boolean` | `false` |\n| `query.file.property('task_instruction')` | `string` | `'group by filename'` |\n| `query.file.property('non_existent_property')` | `null` | `null` |\n\n<!-- placeholder to force blank line after included text --><!-- endInclude -->\n\n1. `query.file` is a `TasksFile` object.\n1. You can see the current [TasksFile source code](https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/src/Scripting/TasksFile.ts), to explore its capabilities.\n1. The presence of `.md` filename extensions is chosen to match the existing conventions in the Tasks filter instructions [[Filters#File Path|path]] and [[Filters#File Name|filename]].\n1. `query.file.pathWithoutExtension` was added in Tasks 4.8.0.\n1. `query.file.filenameWithoutExtension` was added in Tasks 4.8.0.\n1. `query.file.hasProperty()` was added in Tasks 7.15.0.\n1. `query.file.property()` was added in Tasks 7.15.0.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Core Status Task List Items in Markdown\nDESCRIPTION: Demonstrates usage of default status symbols ('[ ]' for undone, '[x]' for done) to represent tasks using core Markdown checklist syntax. No dependencies are required beyond support for basic Markdown formatting. Each line begins with '- [ ]' or '- [x]' followed by task description, indicating incomplete or complete tasks respectively. Inputs are plain text lines, outputs are rendered checkboxes in compatible Markdown viewers. Customization is not required, and this approach is limited to default tasks only.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [ ] I am a task that is not yet done\n- [x] I am a task that has been done\n```\n\n----------------------------------------\n\nTITLE: Script for Manually Copying Plugin Files (Shell)\nDESCRIPTION: A shell script located at `scripts/Test-TasksInLocalObsidian.sh` designed to copy all three necessary plugin files to a local test vault's plugin folder. This script automates the manual copying step but still requires the user to run it after every build. Requires a shell environment and potentially configuration for the target vault path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Building/Local development.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nscripts/Test-TasksInLocalObsidian.sh\n```\n\n----------------------------------------\n\nTITLE: Generate Relative Date String - Templater JavaScript\nDESCRIPTION: Uses the Obsidian Templater plugin's `tp.date.now` function to calculate and format a date string relative to the current date. The first parameter is the desired date format (using Moment.js syntax), and the second is an integer representing the number of days offset from today (positive for future, negative for past). This is commonly used within markdown files and requires the Templater plugin to be installed and enabled in Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/_meta/templates/tasks with range of start dates - Templater plugin.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task -9 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", -9) %>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task 0 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 0) %>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task 9 days 🛫 <% tp.date.now(\"YYYY-MM-DD\", 9) %>\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Plugin in Short Mode without Callout - tasks\nDESCRIPTION: This snippet demonstrates the use of the short mode query for the Tasks Plugin outside of any callout block. It searches the current file for tasks and displays them without headings and with sorting by description. Required dependency is the Tasks Plugin. The input is the Markdown file content, and the output is a minimal, sorted list of tasks detected by the plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Callouts and Block Quotes.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\npath includes {{query.file.path}}\nshort mode\nsort by description\n\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Data Structures\nDESCRIPTION: This snippet demonstrates the basic structure of YAML data, which includes lists, nested structures, and different data types.  It showcases how to define lists with string values using dashes. Additionally, it shows a nested structure where 'parent' contains 'child' objects, each holding 'grandchild' data represented by numbers. It represents key-value pairs of diverse types, including lists, strings, and numbers.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_complex_example.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nTAG:\n  - value1\n  - value2\nALIAS:\n  - test 1\n  - test 2\ncustom_list:\n  - value 1\n  - value 2\ncustom_list_2:\n  - x\ncustom_number_prop: 42\nunknown_property:\n  - hello\n  - world\nunknown_property_2:\n  - 1\n  - 2\nunknown_number_property: 13\nunknown_empty_property:\nunknown_list:\n  -\n  -\nparent:\n  - child1:\n    - grandchild1: 1\n    - grandchild2: 2\n  - child2:\n    - grandchild3: 3\n    - grandchild4: 4\n---\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Date Category - Obsidian Tasks JavaScript\nDESCRIPTION: This snippet groups tasks into five broad due date categories: \"Invalid date\", \"Overdue\", \"Today\", \"Future\", and \"Undated\", in that order, using the Obsidian Tasks plugin's JavaScript API. Dependencies: the Tasks plugin and the existence of the task.due property. Parameters such as task.due.category.groupText, task.due.category.name, and task.due.category.sortOrder are used to access group information. Input is a task object; output is grouped headings for query results. Use before standard 'group by due' if fine-grained structure is desired.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.category.groupText\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Not Due on Specific Date with Dataview - Dataview\nDESCRIPTION: This snippet retrieves all tasks from the folder \"Manual Testing/Testing File Formats\" where the task's due date is not 2021-08-22. Like the previous snippet, results are grouped by the section subpath using meta(section).subpath. To use, ensure the Dataview plugin is installed and files contain 'due' date metadata. The output is a grouped listing of all tasks with any due date except 2021-08-22. This query will not match tasks with missing or malformatted due dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Testing File Formats/Dataview Format - Queries - Dataview Plugin.md#_snippet_1\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Manual Testing/Testing File Formats\"\nWHERE due != date(\"2021-08-22\")\nGROUP BY meta(section).subpath\n```\n\n----------------------------------------\n\nTITLE: Adding Version Marker After Section Heading in Obsidian Tasks Documentation\nDESCRIPTION: This snippet shows the placeholder format used to indicate when a feature was introduced, typically placed after a section heading. The 'X.Y.Z' is automatically replaced with the actual version number during release.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Version numbers in documentation.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> [!released]\n> Introduced in Tasks X.Y.Z.\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR Query with Quoted Description Includes\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using the OR operator with multiple 'description includes' filters containing quoted strings. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes \"hello world\") OR (description includes \"42\")'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes \\\"hello world\\\"\",\n        \"f2\": \"description includes \\\"42\\\"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Excluding 'NON_TASK' and 'CANCELLED' - JavaScript\nDESCRIPTION: This snippet implements a filter that finds tasks that are not of the 'NON_TASK' or 'CANCELLED' status. It uses the `!` operator in conjunction with the `includes()` method, effectively performing a 'NOT' operation on the specified statuses. The expected output includes all tasks that do not match the excluded statuses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.type_results.approved.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type)\nFind tasks that are not type `NON_TASK` and not type `CANCELLED`.\n=>\n- [x] Status Done\n- [] Status EMPTY\n- [/] Status In Progress\n- [ ] Status Todo\n- [p] Unknown symbol\n- [s] Toggles to self\n- [P] Pro\n- [C] Con\n- [Q] Question\n- [A] Answer\n```\n\n----------------------------------------\n\nTITLE: Group Tasks by Modified Recurrence Rule (Javascript)\nDESCRIPTION: This snippet groups tasks based on their recurrence rule field. It utilizes a Javascript function within the 'group by' clause to transform the 'recurrenceRule' string before grouping, replacing occurrences of the literal string 'when done' with '==when done==' to highlight or modify the sort order for these specific rules.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.recurrenceRule_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.recurrenceRule.replace('when done', '==when done==')\n```\n\n----------------------------------------\n\nTITLE: Description and Priority Filters with Boolean XOR\nDESCRIPTION: Example of using XOR operator with different filter types. Shows how to find tasks that either contain d1 or have medium priority, but not both.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_75\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) XOR (priority medium)'\n```\n\n----------------------------------------\n\nTITLE: Querying and Grouping Tasks by Status Type in Obsidian Tasks\nDESCRIPTION: This Obsidian Tasks query block retrieves tasks specifically from the current file (`path includes {{query.file.path}}`), explicitly ignoring any global query settings (`ignore global query`). It then groups the found tasks based on their status type (e.g., TODO, DONE, IN_PROGRESS) and sorts the tasks alphabetically by description within each group.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Theme - AnuPpuccin.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\n# We need to ignore the global query, as it ignores this file:\nignore global query\n\npath includes {{query.file.path}}\ngroup by status.type\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Templater script for prompting caption and inserting image in Obsidian\nDESCRIPTION: This script utilizes Obsidian's Templater plugin to prompt the user for an image caption, insert an image link referencing a filename, and display the caption in a span element beneath the image. It requires the Templater plugin for execution and enhances note interactivity by dynamically inserting content based on user input.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/_meta/templates/image embed.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<%-*\nconst caption = await tp.system.prompt(\"Caption for image\");\n-%>\n![<%* tR += caption %>](../images/insert-filename-here.png)\n<span class=\"caption\"><%* tR += caption %></span>\n```\n\n----------------------------------------\n\nTITLE: Initializing Description Counts Map (Matching Tasks)\nDESCRIPTION: This filter initializes a map to store the counts of task descriptions. It's designed to be used when only the tasks matching the query should be counted. The cacheKey is 'descriptionCountsForMatchingTasks', the count is stored into `query.searchCache` and needs to be the second to last filter in the query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters With Complex Caching.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function { \\n    const cacheKey = 'descriptionCountsForMatchingTasks'; \\n    if (!query.searchCache[cacheKey]) { \\n        console.log('Initialising description counts map...'); \\n        const taskCounts = new Map(); \\n        query.searchCache[cacheKey] = taskCounts; \\n    } \\n    const group = task.descriptionWithoutTags; \\n    taskCounts = query.searchCache[cacheKey]; \\n    taskCounts.set(group, (taskCounts.get(group) || 0) + 1); \\n    return true; \\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Incomplete Tasks with Negated isDone Function in Obsidian Tasks\nDESCRIPTION: This filter uses the negated task.isDone function (! task.isDone) to show only incomplete tasks. It's equivalent to the 'not done' filter but can be combined with other expressions for more complex queries.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isDone_results.approved.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function ! task.isDone\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks by Description Regex (Obsidian Tasks Query Language)\nDESCRIPTION: Filters tasks where the description contains '#t ' or ends with '#t', using case-insensitive regular expressions combined with an OR operator.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_78\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(description regex matches /#t\\s/i) OR (description regex matches /#t$/i)\n```\n\n----------------------------------------\n\nTITLE: Tag Inclusion Filter with Parentheses\nDESCRIPTION: Example of filtering tasks by tag inclusion using parentheses. Shows how to search for tasks containing a specific tag in their description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_60\n\nLANGUAGE: text\nCODE:\n```\n'(description includes #context/location1)'\n```\n\n----------------------------------------\n\nTITLE: Deleting Completed Instance of a Recurring Obsidian Task\nDESCRIPTION: Shows a recurring task defined with `[repeat:: every day]` and configured with `[onCompletion:: delete]`. When this specific instance of the task is completed, it will be deleted from the note, and the Obsidian Tasks plugin will generate the next occurrence according to the recurrence rule.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_OnCompletion_dataview-include.approved.md#_snippet_3\n\nLANGUAGE: obsidian-tasks\nCODE:\n```\n- [ ] #task Remove completed instance of this recurring task when done  [repeat:: every day]  [onCompletion:: delete]\n```\n\n----------------------------------------\n\nTITLE: Defining cancelled task with cancelled date - Markdown\nDESCRIPTION: Defines a task marked as cancelled using the '[-]' checkbox status in Markdown. It includes a cancellation date using the '[cancelled:: YYYY-MM-DD]' inline field. This date indicates when the task was cancelled.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Dates_dataview-snippet.approved.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n- [-] #task Has a cancelled date [cancelled:: 2023-04-18]\n```\n\n----------------------------------------\n\nTITLE: Advanced Grouping by Due Date Status (Local Label Function) - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Builds upon previous status grouping by defining a local labeling function for DRY (Don't Repeat Yourself) coding. Uses `moment()` to assess the due date and returns labeled headings, such as '%%1%% ==Overdue=='. If the date is absent or invalid, the function handles those cases explicitly. Supports easy modification of label styles or category ordering.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\\n    const date = task.due.moment; \\\n    const now = moment(); \\\n    const label = (order, name) => `%%${order}%% ==${name}==`; \\\n    if (!date)                      return label(4, 'Undated'); \\\n    if (!date.isValid())            return label(0, 'Invalid date'); \\\n    if (date.isBefore(now, 'day'))  return label(1, 'Overdue'); \\\n    if (date.isSame(now, 'day'))    return label(2, 'Today'); \\\n    return label(3, 'Future');\n```\n\n----------------------------------------\n\nTITLE: Generating TypeDoc Documentation with Yarn\nDESCRIPTION: Executes the `code-docs` script defined in the project's `package.json` using Yarn. This script runs TypeDoc to generate HTML documentation from TypeScript source code comments, populating the `code-docs` directory with `index.html` and related files.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Code/Generating documentation of the code.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn code-docs\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks with doubly-nested tags using Array.find() and String.split() in JavaScript\nDESCRIPTION: This snippet defines a filter to find tasks containing tags with at least three levels of nesting (e.g., #context/home/ground-floor). It splits each tag at '/' and checks if the resulting array length is greater than or equal to 3. Required data includes each task's 'tags' array; the result is a boolean indicating the presence of such tags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.tags.find( (tag) => tag.split('/').length >= 3 ) && true || false\n```\n\n----------------------------------------\n\nTITLE: Defining Task Status Flowchart with Mermaid\nDESCRIPTION: This Mermaid code defines a flowchart that illustrates the different statuses a task can have, along with icons associated with each state.  It visualizes how tasks can transition between statuses like 'to-do', 'incomplete', 'done', and 'canceled'. Various icons are mapped to the 'done' state.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Things_Table.approved.mermaid.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"to-do\"]:::TODO\n2[\"incomplete\"]:::IN_PROGRESS\n3[\"done\"]:::DONE\n4[\"canceled\"]:::CANCELLED\n5[\"forwarded\"]:::TODO\n6[\"scheduling\"]:::TODO\n7[\"question\"]:::TODO\n8[\"important\"]:::TODO\n9[\"star\"]:::TODO\n10[\"quote\"]:::TODO\n11[\"location\"]:::TODO\n12[\"bookmark\"]:::TODO\n13[\"information\"]:::TODO\n14[\"savings\"]:::TODO\n15[\"idea\"]:::TODO\n16[\"pros\"]:::TODO\n17[\"cons\"]:::TODO\n18[\"fire\"]:::TODO\n19[\"key\"]:::TODO\n20[\"win\"]:::TODO\n21[\"up\"]:::TODO\n22[\"down\"]:::TODO\n1 --> 3\n2 --> 3\n3 --> 1\n4 --> 1\n5 --> 3\n6 --> 3\n7 --> 3\n8 --> 3\n9 --> 3\n10 --> 3\n11 --> 3\n12 --> 3\n13 --> 3\n14 --> 3\n15 --> 3\n16 --> 3\n17 --> 3\n18 --> 3\n19 --> 3\n20 --> 3\n21 --> 3\n22 --> 3\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Example Task Completed and Recurred\nDESCRIPTION: Displays the outcome after the second click on the example task's checkbox. The original task line is marked DONE ('[x]') with an appended completion date, and a new task line representing the next recurrence (with TODO status '[ ]' and the next due date) is created below it.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n- [x] Do something 🔁 every day 📅 2023-10-15 ✅ 2023-10-15\n- [ ] Do something 🔁 every day 📅 2023-10-16\n```\n\n----------------------------------------\n\nTITLE: Custom Filter - Status Name - JavaScript\nDESCRIPTION: Demonstrates how to create a custom filter using JavaScript to find tasks with a specific status name. This example targets tasks with a custom status named 'Unknown', useful for identifying tasks with statuses not yet defined in the Tasks settings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function task.status.name === 'Unknown'\n```\n```\n\n----------------------------------------\n\nTITLE: Formatting Tasks Query Blocks for Bug Reporting in Plain Text\nDESCRIPTION: Illustrates how to represent task query blocks for bug reports by wrapping them in triple tildes (~~~) and enclosing the actual query inside fenced code block markers with language 'tasks'. This preserves the exact query syntax for accurate reproduction and diagnosis. Users must use this formatting to copy and paste their task queries as text in bug reports.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Support and Help/Report a Bug.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n~~~\n```tasks\nnot done\ndue today\n```\n~~~\n```\n\n----------------------------------------\n\nTITLE: Filtering Undone Tasks with Description Matching in Obsidian Tasks Query Language\nDESCRIPTION: This snippet filters tasks within an Obsidian vault that are not marked as done and whose description contains the keyword 'trash'. It uses the 'tasks' code block syntax, which is specific to the Obsidian Tasks plugin. Key parameters include 'not done' to filter incomplete tasks and 'description includes trash' to filter based on task description text. The output includes backlinks (file and heading names) that may visually dominate the result display. This snippet depends on the Obsidian Tasks plugin to interpret and execute the query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Styling the Backlinks.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndescription includes trash\n```\n\n----------------------------------------\n\nTITLE: Querying Recurring Tasks Due Before Tomorrow (Obsidian Tasks Query Language)\nDESCRIPTION: Filters tasks that are both recurring AND have a due date before tomorrow. It demonstrates combining a relative date filter ('due before tomorrow') and a status filter ('is recurring') using the AND operator.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_88\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(due before tomorrow) AND (is recurring)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Status Symbol in JavaScript\nDESCRIPTION: This JavaScript snippet filters tasks based on their status symbols. It compares the current symbol (`task.status.symbol`) of a task to its next symbol (`task.status.nextSymbol`). Tasks that have the same current and next symbol are considered 'toggled to themselves,' implying their status would not change if toggled again. The function's purpose is to filter such tasks, likely to avoid unnecessary state changes in a task management system. It doesn't take any explicit parameters, but it expects a list of task objects where each task has status and nextSymbol properties.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.statuses_task.status.nextSymbol_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.status.symbol === task.status.nextSymbol\n```\n\n----------------------------------------\n\nTITLE: Generating Task Suggestions based on Input - JSON\nDESCRIPTION: This code snippet represents the suggestion generated by the Obsidian Tasks plugin when the user types the specified input within a Markdown line. The suggestion includes details such as the type of suggestion, text to display, text to append, and the insertion position and skip length, informing how to update the user's input. The functionality depends on the `Obsidian Tasks` plugin itself. No further prerequisites are explicitly mentioned in this context, assuming standard Obsidian environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__dataview__symbols_offers_correct_options_for_partial_recurrence_lines.approved.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"every\",\n    \"appendText\": \"repeat:: every] \",\n    \"insertAt\": 16,\n    \"insertSkip\": 8\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Doubly-Nested Tags in JavaScript\nDESCRIPTION: Filters tasks to find those with at least one doubly-nested tag, identified by splitting each tag at '/' and checking if it consists of three or more segments. This snippet uses Array.prototype.find with a callback that splits each tag string and checks its length. Inputs must include tasks with arrays of tags formatted using '/' to denote nested levels. The output is a boolean indicating whether the task meets the doubly-nested tag criteria. This method helps to identify deeper tag nesting such as 'context/home/ground-floor'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.tags.find( (tag) => tag.split('/').length >= 3 ) && true || false\n```\n\n----------------------------------------\n\nTITLE: Converting Test Data Using Templater in JavaScript\nDESCRIPTION: This code snippet uses the Obsidian Templater plugin to invoke the custom function tp.user.convert_test_data_markdown_to_js, passing the current tp context as an argument. Its purpose is to parse Markdown-formatted test data and return an equivalent JavaScript representation for unit tests or integration within the plugin. Prerequisites include the Templater plugin being installed in Obsidian as well as the implementation of the referenced tp.user.convert_test_data_markdown_to_js user script. No direct parameters except the template context are used, and the output is JavaScript code or object literals derived from the Markdown input. Limitations depend on the implementation of the user script and the structure of the source Markdown data.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/_meta/templates/convert_test_data_markdown_to_js.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<%- tp.user.convert_test_data_markdown_to_js(tp) -%>\n```\n\n----------------------------------------\n\nTITLE: Things Theme Custom Status Configuration Table (Markdown)\nDESCRIPTION: A Markdown table summarizing the custom task statuses provided by the Things Theme, intended for easy addition to Obsidian Tasks settings. It details the status symbol, the next status symbol upon completion (usually 'x' for done or ' ' for todo), the status name for sorting/grouping, the status type (TODO, IN_PROGRESS, DONE, CANCELLED), and indicates if custom styling is needed for the theme.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/Things Theme.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name<br>`status.name includes...`<br>`sort by status.name`<br>`group by status.name` | Status Type<br>`status.type is...`<br>`sort by status.type`<br>`group by status.type` | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `space` | `x` | to-do | `TODO` | No |\n| `/` | `x` | incomplete | `IN_PROGRESS` | Yes |\n| `x` | `space` | done | `DONE` | No |\n| `-` | `space` | canceled | `CANCELLED` | Yes |\n| `>` | `x` | forwarded | `TODO` | Yes |\n| `<` | `x` | scheduling | `TODO` | Yes |\n| `?` | `x` | question | `TODO` | Yes |\n| `!` | `x` | important | `TODO` | Yes |\n| `*` | `x` | star | `TODO` | Yes |\n| `\"` | `x` | quote | `TODO` | Yes |\n| `l` | `x` | location | `TODO` | Yes |\n| `b` | `x` | bookmark | `TODO` | Yes |\n| `i` | `x` | information | `TODO` | Yes |\n| `S` | `x` | savings | `TODO` | Yes |\n| `I` | `x` | idea | `TODO` | Yes |\n| `p` | `x` | pros | `TODO` | Yes |\n| `c` | `x` | cons | `TODO` | Yes |\n| `f` | `x` | fire | `TODO` | Yes |\n| `k` | `x` | key | `TODO` | Yes |\n| `w` | `x` | win | `TODO` | Yes |\n| `u` | `x` | up | `TODO` | Yes |\n| `d` | `x` | down | `TODO` | Yes |\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Full File Path Using JavaScript\nDESCRIPTION: This snippet defines a sorting function that sorts tasks based on the full file path including the file extension. It expects task objects to have a 'file.path' property representing the complete file name. This allows ordering tasks according to the precise file location and name.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.path_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.path\n```\n\n----------------------------------------\n\nTITLE: CSS Snippet to Widen Obsidian Property Names\nDESCRIPTION: This CSS snippet is used to widen the property names in the Obsidian file properties view. This makes it easier to view the full names of Tasks-specific properties, which are otherwise truncated.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Query File Defaults.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Make property labels wider, to fit the names of Tasks-specific properties */\n.metadata-content {\n    --metadata-label-width: 14em;\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks by Tag Count (More Than One)\nDESCRIPTION: This snippet filters Obsidian Tasks to find tasks with more than one tag (excluding global filters). It utilizes a JavaScript function within the `filter by function` feature of the Tasks plugin. The `task.tags.length > 1` condition verifies if the task has more than one tag assigned to it.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.tags_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.tags.length > 1\n```\n\n----------------------------------------\n\nTITLE: Simple Description Filter\nDESCRIPTION: This snippet demonstrates filtering based on the description of a task. The filter checks if the description includes a specified string 'd1'. This is a simple example of keyword matching in a task description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nNOT:\n      description includes d1\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in Markdown for Task Management\nDESCRIPTION: This snippet defines a series of tasks using the markdown format. Each task begins with a checkbox and includes a #task tag, which is likely used for filtering or selecting tasks. The '🏁' character appears to denote a status or action associated with the task such as 'keep' or 'delete' when completed. Some tasks also include a '🔁' symbol potentially signifying recurring tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_OnCompletion_tasksPluginEmoji-snippet.approved.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Keep this task when done\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Keep this task when done too 🏁 keep\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Remove this task when done 🏁 delete\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Remove completed instance of this recurring task when done 🔁 every day 🏁 delete\n```\n\n----------------------------------------\n\nTITLE: Visualizing Status Flow with DONE -> CANCELLED Transition\nDESCRIPTION: A Mermaid flowchart depicting a custom status configuration where the DONE status ('[x]') transitions to CANCELLED ('[-]'). A dashed arrow labeled with '🔁' indicates that when a recurring task is completed, the plugin bypasses the CANCELLED status and creates the new recurrence with the first available TODO status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"'Todo'<br>[ ] -> [/]<br>(TODO)\"]:::TODO\n2[\"'Done'<br>[x] -> [-]<br>(DONE)\"]:::DONE\n3[\"'In Progress'<br>[/] -> [x]<br>(IN_PROGRESS)\"]:::IN_PROGRESS\n4[\"'Cancelled'<br>[-] -> [ ]<br>(CANCELLED)\"]:::CANCELLED\n1 --> 3\n2 --> 4\n2-. \"🔁\" .-> 1\n3 --> 2\n4 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Sorting by File Path (with Extension) in Tasks\nDESCRIPTION: This JavaScript snippet provides an alternative to the 'sort by path', including the file extension in the sort order.  It relies on the `task.file.path` to access file information. The functionality is similar to 'Sort by path', sorting tasks based on the full file path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.path\n```\n\n----------------------------------------\n\nTITLE: Custom Filter - isDone Status - JavaScript\nDESCRIPTION: Demonstrates custom filtering by task completion status using JavaScript. It shows how to filter for both completed (isDone) and incomplete (!isDone) tasks using the `task.isDone` property within a `filter by function` declaration.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function task.isDone\n```\n```\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nfilter by function ! task.isDone\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Query Folder Including Sub-Folders in JavaScript\nDESCRIPTION: Filters tasks whose files are located in the folder specified by 'query.file.folder' or any of its sub-folders using the 'includes' method. The 'query' variable is assumed to provide context folder path dynamically, making this a reusable filter for different folder scopes with inclusion of subdirectories.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_docs.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.folder.includes( query.file.folder )\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Done Date Before (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'done before' filter combined with 'OR NOT'. This query matches all tasks by including those done before 2021-12-27 OR those not done before that date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_80\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(done before 2021-12-27) OR NOT (done before 2021-12-27)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Excluding Specific Tag Patterns in Obsidian Tasks Plugin\nDESCRIPTION: This snippet groups tasks by all tags that do not include '#tag', filtering out such tags from grouping. It uses 'filter' with '!tag.includes(\"#tag\")' to create groups for other tags, allowing exclusion of specific tag patterns from the grouping logic. Depends on 'task.tags'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_docs.approved.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags.filter( (tag) => ! tag.includes(\"#tag\") )\n```\n\n----------------------------------------\n\nTITLE: Filtering Not Fully Completed Tasks (Not Implemented) (Obsidian Tasks)\nDESCRIPTION: Attempts to display tasks that are not fully completed (i.e., the parent task or any sub-task is incomplete) from the current folder (`folder includes {{query.file.folder}}`). As noted by the comment, there is no specific instruction for \"not fully done\", so it currently filters for individually `not done` tasks. Backlinks are hidden (`hide backlinks`), and tasks are shown in a tree structure (`show tree`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\n# There is no Tasks instruction for \"not fully done\" yet\nnot done\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Declaring Moment in Tests with jsdom Environment\nDESCRIPTION: Required boilerplate code to properly set up the jsdom test environment and import the moment library in test files. This must be included at the top of any test file that calls code using moment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/How do I use Moment in tests.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @jest-environment jsdom\n */\n\nimport moment from 'moment';\n```\n\n----------------------------------------\n\nTITLE: Highlighting a Word in Group Descriptions - JavaScript\nDESCRIPTION: This snippet replaces the word 'short' in the task description with '==short==', effectively highlighting it in the group descriptions.  It utilizes the `replace()` method of the string object in JavaScript.  The expression evaluates to the task's description string with 'short' replaced by '==short=='.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description.replace('short', '==short==')\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR Query with Multiple Mixed Filters\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using the OR operator with multiple description and priority filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) OR (description includes d2) OR (priority medium)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR (f2) OR (f3)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"description includes d2\",\n        \"f3\": \"priority medium\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Remaining Tasks with Query in Obsidian Tasks\nDESCRIPTION: A Tasks plugin query to display all incomplete tasks grouped by heading. This query filters for uncompleted tasks and organizes them by their heading sections in the document.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/migration.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\nnot done\n\ngroup by heading\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Task Status Diagram with Mermaid\nDESCRIPTION: This Mermaid code generates a flowchart that visualizes the transitions between different task statuses within the Obsidian Tasks plugin. It defines the classes and connections between statuses, showing the flow of task states. The diagram helps in understanding how tasks move from one state to another.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusRegistryReport.test.StatusRegistryReport_should_create_a_report.approved.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"'Todo'<br>[ ] -> [x]<br>(TODO)\"]:::TODO\n2[\"'Done'<br>[x] -> [ ]<br>(DONE)\"]:::DONE\n3[\"'In Progress'<br>[/] -> [x]<br>(IN_PROGRESS)\"]:::IN_PROGRESS\n4[\"'Cancelled'<br>[-] -> [ ]<br>(CANCELLED)\"]:::CANCELLED\n5[\"'Question'<br>[Q] -> [A]<br>(NON_TASK)\"]:::NON_TASK\n6[\"'Answer'<br>[A] -> [Q]<br>(NON_TASK)\"]:::NON_TASK\n1 --> 2\n2 --> 1\n3 --> 2\n4 --> 1\n5 --> 6\n6 --> 5\n\nlinkStyle default stroke:gray\n```\n```\n\n----------------------------------------\n\nTITLE: Dual Description Filters with Boolean OR\nDESCRIPTION: Example of combining two description filters with OR operator. Shows how to find tasks that include either of two different terms.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_70\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) OR (description includes d2)'\n```\n\n----------------------------------------\n\nTITLE: Grouping Obsidian Tasks by Creation Date Month (JS/Moment.js)\nDESCRIPTION: This example uses an embedded JavaScript function within `group by function` to group Obsidian tasks. It retrieves the 'creation date' file property, checks if it exists, and if so, uses the globally available Moment.js library (`window.moment`) to format the date into the full month name (e.g., 'May'). Tasks whose files lack the 'creation date' property are grouped under 'no month'. This requires Moment.js to be available in the Obsidian environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.obsidian_properties_task.file.frontmatter_results.approved.txt#_snippet_1\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\ngroup by function \\\n    const value = task.file.property('creation date'); \\\n    return value ? window.moment(value).format('MMMM') : 'no month'\n```\n\n----------------------------------------\n\nTITLE: Testing Tag Presence Styling (Tags Hidden) - Obsidian Tasks Query\nDESCRIPTION: This query filters tasks in the current file matching \"tag\" and groups them by tags, while hiding both the task tags and the backlink. It tests CSS styling based on the presence of specific tags when tags *are* hidden, expecting the description to still be red and the tag to still appear in the group heading when the test CSS snippet `tasks-plugin-smoke-test-query-styling` is enabled. Requires the Obsidian Tasks plugin and the specified CSS snippet. Expected outcome: #todo/strategic tag hidden, description still red, tag still in group heading.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Styling of Queries.md#_snippet_5\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Styling of Queries\ndescription includes tag\ngroup by tags\nhide tags\nhide backlink\n```\n\n----------------------------------------\n\nTITLE: Categorizing Dates Using a Function JavaScript\nDESCRIPTION: This JavaScript code refactors the date categorization logic from previous snippets by using a local function. This improves readability and reduces code duplication.  It uses conditional statements and a helper function called `label` to format the output. The input is a task object with a due date, and the output is a formatted string indicating the category and the order.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\ \n    const date = task.due.moment; \\ \n    const now = moment(); \\ \n    const label = (order, name) => `%%${order}%% ==${name}==`; \\ \n    if (!date)                      return label(4, 'Undated'); \\ \n    if (!date.isValid())            return label(0, 'Invalid date'); \\ \n    if (date.isBefore(now, 'day'))  return label(1, 'Overdue'); \\ \n    if (date.isSame(now, 'day'))    return label(2, 'Today'); \\ \n    return label(3, 'Future');\n```\n\n----------------------------------------\n\nTITLE: Testing Tag Presence Styling (Tags Visible) - Obsidian Tasks Query\nDESCRIPTION: This query filters tasks in the current file matching \"tag\" and groups them by tags, while hiding the backlink. It tests CSS styling based on the presence of specific tags when tags are *not* hidden, expecting the description to be red and the tag to be visible in the task line and group heading when the test CSS snippet `tasks-plugin-smoke-test-query-styling` is enabled. Requires the Obsidian Tasks plugin and the specified CSS snippet. Expected outcome: #todo/strategic tag shown, description red, tag in group heading.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Styling of Queries.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Styling of Queries\ndescription includes tag\ngroup by tags\nhide backlink\n```\n\n----------------------------------------\n\nTITLE: Querying Incomplete Tasks Before a Fixed Date with Obsidian Tasks (Tasks query language)\nDESCRIPTION: This snippet uses the Obsidian Tasks plugin's query language to list all tasks that are not marked as done and have a due date before a specific fixed date (2022-09-15). It requires the Obsidian Tasks plugin to be installed. The 'not done' filter selects unfinished tasks and the 'due before' parameter provides a cutoff date. The expected output is a list of matching tasks due before the specified date. The primary limitation is the need to adjust the date if used on a different day.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Find tasks for coming 7 days.md#_snippet_0\n\nLANGUAGE: Tasks query language\nCODE:\n```\nnot done\ndue before 2022-09-15\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - heading includes wibble\nDESCRIPTION: Simplifies 'OR NOT' expression with 'heading includes wibble'. 'heading includes wibble' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_48\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"heading includes wibble\",\n        \"f2\": \"heading includes wibble\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - heading includes AND\nDESCRIPTION: Simplifies 'OR NOT' expression with 'heading includes AND'. 'heading includes AND' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_47\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"heading includes AND\",\n        \"f2\": \"heading includes AND\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Status Transition Table for Pro/Con Toggles\nDESCRIPTION: A table displaying toggling statuses 'Pro' and 'Con' with their symbols 'P' and 'C', classified as non-tasks, and requiring styling for clarity in workflows.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Example Statuses.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name | Status Type | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `P` | `C` | Pro | `NON_TASK` | Yes |\n| `C` | `P` | Con | `NON_TASK` | Yes |\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Tasks with 'On Completion' Actions (Plain Text)\nDESCRIPTION: Example Markdown task list demonstrating various tasks with and without the 'On Completion' action specified using the 🏁 emoji. Includes tasks set to 'keep' and 'delete', as well as a recurring task set to 'delete'. This represents the state before any tasks are completed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/On Completion.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# My Project Tasks\n- [ ] Leave me alone\n- [ ] Leave me alone too! 🏁 keep\n- [ ] Delete me upon completion 🏁 delete\n- [ ] Delete my completed instance, leave my next instance 📅 2021-05-20 🔁 every day when done 🏁 delete\n```\n\n----------------------------------------\n\nTITLE: Querying Incomplete Tasks with Obsidian Tasks Plugin (tasks)\nDESCRIPTION: This snippet uses the Obsidian Tasks plugin query syntax to filter and list tasks that are not completed (\"not done\") within the current file. It uses the built-in {{query.file.path}} variable to constrain results to only those tasks found in the same file where the query is run. Dependencies include the Obsidian Tasks plugin and a note with tasks formatted as checkboxes. Inputs are task items marked as Markdown checkboxes; output is a dynamic list of incomplete tasks. The snippet is intended for embedding inside an Obsidian note and will not function outside the Obsidian environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/callout_labelled.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\npath includes {{query.file.path}}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Day of the Week and Date Using JavaScript\nDESCRIPTION: This snippet groups tasks by formatting their due dates to show the day of the week followed by the date, with the date repeated in a paler style. The format string uses escaped brackets and inline HTML <mark> elements styled to de-emphasize the date portion \"(YYYY-MM-DD)\". It expects the task's 'due' date and outputs a label combining the weekday name and the date in distinct visual emphasis for better readability.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.special_cases_formatting_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.format(\"[%%]YYYY-MM-DD[%%]dddd [<mark style='background: var(--color-base-00); color: var(--color-base-40);'>](YYYY-MM-DD)[</mark>]\")\n```\n\n----------------------------------------\n\nTITLE: Connecting Task Icons in Mermaid Flowchart\nDESCRIPTION: This Mermaid code defines connections between the task icon nodes, illustrating possible state transitions or relationships. Most task icons point towards the \"Checked\" state (node 2), potentially representing task completion. The NON_TASK icons point to themselves, illustrating that these are independent and non-task-related.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_AnuPpuccin_Table.approved.mermaid.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n1 --> 2\n2 --> 1\n3 --> 2\n4 --> 2\n5 --> 2\n6 --> 1\n7 --> 2\n8 --> 2\n9 --> 2\n10 --> 2\n11 --> 2\n12 --> 2\n13 --> 2\n14 --> 2\n15 --> 2\n16 --> 2\n17 --> 2\n18 --> 2\n19 --> 19\n20 --> 20\n21 --> 21\n22 --> 22\n23 --> 23\n24 --> 24\n25 --> 25\n26 --> 26\n27 --> 27\n28 --> 28\n```\n\n----------------------------------------\n\nTITLE: Limiting query results and filtering by description in Obsidian Tasks\nDESCRIPTION: Demonstrates how to limit the number of results returned and filter by task description content. This example finds one task due on a specific date containing a priority tag.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_10\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndue on 2021-05-05\ndescription includes #prio1\nlimit to 1 tasks\n```\n\n----------------------------------------\n\nTITLE: Error Log: Mismatched Delimiter Error Message\nDESCRIPTION: Provides the specific error message generated by Obsidian Tasks when a query attempts to mix different delimiter types (e.g., quotes and parentheses) in a single boolean instruction.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nTasks query: Could not interpret the following instruction as a Boolean combination:\n    \"not done\" AND (is recurring)\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\nProblem line: \"\"not done\" AND (is recurring)\"\n```\n\n----------------------------------------\n\nTITLE: Task Dependency Test Cases with isBlocked() and isBlocking() Results\nDESCRIPTION: A collection of test cases demonstrating the behavior of isBlocked() and isBlocking() methods across various dependency scenarios. Tasks use the 🆔 symbol to define IDs and ⛔ symbol to reference dependencies. Each scenario shows the status (TODO, DONE, etc.) and the expected boolean result from both methods.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Task/Task.test.task_dependencies_blocking_and_blocked.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] No dependency - TODO\n    isBlocked():  ❌ false\n    isBlocking(): ❌ false\n\n- [x] No dependency - DONE\n    isBlocked():  ❌ false\n    isBlocking(): ❌ false\n\n- [ ] scenario 1 - TODO depends on TODO 🆔 scenario1\n    isBlocked():  ❌ false\n    isBlocking(): ✅ true\n\n- [ ] scenario 1 - TODO depends on TODO ⛔ scenario1\n    isBlocked():  ✅ true\n    isBlocking(): ❌ false\n\n- [x] scenario 2 - TODO depends on DONE 🆔 scenario2\n    isBlocked():  ❌ false\n    isBlocking(): ❌ false\n\n- [ ] scenario 2 - TODO depends on DONE ⛔ scenario2\n    isBlocked():  ❌ false\n    isBlocking(): ❌ false\n```\n\n----------------------------------------\n\nTITLE: Finding Tasks with Invalid Recurrence Rules in Obsidian Tasks\nDESCRIPTION: Identifies tasks that have a potentially broken or invalid recurrence rule. It searches for tasks that are not recognized as recurring (`!task.isRecurring`) but whose original markdown source (`task.originalMarkdown`) still contains the recurrence emoji (`🔁`). This technique relies on the implementation detail that Tasks removes the recurrence rule from the description even if it's invalid, requiring a check against the original text. Assumes the standard Tasks emoji format.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isRecurring_results.approved.txt#_snippet_2\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\nfilter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁')\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Raw File Date Property - Javascript (Tasks Query)\nDESCRIPTION: Groups tasks based on the raw string value of a date property (`creation date`) from the file's frontmatter. Uses the nullish coalescing operator (`??`) to provide a default group name for files lacking the property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.property('creation date') ?? 'no creation date'\n```\n\n----------------------------------------\n\nTITLE: Conditional Grouping by Heading in Obsidian Tasks (JavaScript)\nDESCRIPTION: This JavaScript expression defines a custom grouping function for Obsidian Tasks. It groups tasks by their heading (`task.heading`), but returns an empty string (effectively skipping the heading group) if the heading, appended with '.md', exactly matches the task's filename (`task.file.filename`). This is useful after a `group by filename` directive to avoid redundant heading groups when the heading mirrors the filename. The use of strict equality (`===`) is important for type safety.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.heading_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n(task.heading + '.md' === task.file.filename) ? '' : task.heading\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Done Date This Week (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the relative 'done this week' filter combined with 'OR NOT'. This query matches all tasks by selecting those done this week OR those not done this week.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_84\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(done this week) OR NOT (done this week)\n```\n\n----------------------------------------\n\nTITLE: Outputting User-Provided Issue Number (Templater JS)\nDESCRIPTION: This inline Templater expression takes the value stored in the 'issue_number' variable (which was previously obtained from the user prompt) and appends it to the output string 'tR'. It's used here to dynamically insert the issue number into a Markdown link's text and URL. This snippet assumes the 'issue_number' variable has been populated by a prior Templater script.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/_meta/templates/we are tracking this in issue.md#_snippet_1\n\nLANGUAGE: Templater JS\nCODE:\n```\n<%* tR += issue_number %>\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Category with Highlighted Headings in Obsidian Tasks - JavaScript\nDESCRIPTION: Functions similarly to the previous grouping by broad categories but adds extra Markdown formatting (double equals) to highlight each category in the resulting Obsidian view. Returns highlighted group names such as '==Overdue==', preserving the same five-category classification and sort order. Requires the Obsidian Tasks plugin, JavaScript grouping support, and tasks with a 'due' property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\\n    const date = task.due.moment; \\\n    return \\\n        (!date)                           ? '%%4%% ==Undated==' :      \\\n        !date.isValid()                   ? '%%0%% ==Invalid date==' : \\\n        date.isBefore(moment(), 'day')    ? '%%1%% ==Overdue==' :      \\\n        date.isSame(moment(), 'day')      ? '%%2%% ==Today=='   :      \\\n        '%%3%% ==Future==';\n```\n\n----------------------------------------\n\nTITLE: Formatting Task Groups with Custom Dates and Markup in Obsidian Tasks - JavaScript\nDESCRIPTION: Shows how to use the task's due date and custom format strings to create richly formatted, theme-aware group headings. Uses Moment.js-style date formatting with inline HTML/CSS for colored markup, leveraging Obsidian theme variables for appearance compatibility. Assumes the 'task.due.format' method is available; provides a fallback for undated tasks. Allows inline customization of week, day, and color formats.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.format(\"YYYY %%MM%% MMMM [<mark style='background: var(--color-base-00); color: var(--color-base-40)'>- Week</mark>] WW\", \"Undated\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.format(\"[%%]YYYY-MM-DD[%%]dddd [<mark style='background: var(--color-base-00); color: var(--color-base-40);'>](YYYY-MM-DD)[</mark>]\")\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Specific Due Date (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'due on' filter combined with 'OR NOT'. This query matches all tasks by selecting those due on 2021-12-27 OR those not due on that date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_91\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(due on 2021-12-27) OR NOT (due on 2021-12-27)\n```\n\n----------------------------------------\n\nTITLE: Using PerformanceTracker Class for Timing in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize and utilize the PerformanceTracker class to measure execution time of code sections. It involves creating an instance with a descriptive label, starting the timer, executing the target code, and finishing the timing to record elapsed time. Dependencies include the PerformanceTracker.ts module. Inputs are the labels for sections, and output is the console log of elapsed time. The pattern supports performance profiling within the plugin’s environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Debugging/Console timing facilities in Tasks.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tracker = new PerformanceTracker('some descriptive text');\ntracker.start();\n// ... some slow code\ntracker.finish();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Filtering Tasks by Urgency Equality in JavaScript\nDESCRIPTION: This code shows an example of an incorrect filter, which aims to find tasks with an urgency of exactly 10.29. The snippet highlights a common pitfall: directly comparing floating-point numbers without accounting for precision differences. It explains how floating point numbers can result in precision differences, which can lead to unexpected filtering results. Because of differences in how the value 10.29 is represented internally vs. the task.urgency value, this comparison won't find any matching tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_docs.approved.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency === 10.29\n```\n\n----------------------------------------\n\nTITLE: Sorting by Original Markdown\nDESCRIPTION: Sorts tasks by the raw text of their original markdown line in the MarkDown file.  Uses `task.originalMarkdown`.  Dependencies: Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.originalMarkdown\n```\n\n----------------------------------------\n\nTITLE: Approved Output for JSON Object Verification (JSON)\nDESCRIPTION: Presents the content of the `.approved.json` file associated with the `JsonVerify` test. This file contains the expected JSON representation of the object being tested, serving as the baseline for comparison by the `verifyAsJson()` function.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Approval Tests.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"fred\",\n  \"age\": 30\n}\n```\n\n----------------------------------------\n\nTITLE: Query/Query.ts and Query/Explain/Explainer.ts - Query Processing and Explanation\nDESCRIPTION: These modules handle query parsing, execution, and explanation functionalities, providing users with insights into how queries are processed and results are derived.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Query parsing, execution, and explanatory features, enabling advanced task filtering and user understanding of query results */\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Invalid Due Date (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'due date is invalid' filter combined with 'OR NOT'. This query matches all tasks by including those with an invalid due date OR those without an invalid due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_89\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(due date is invalid) OR NOT (due date is invalid)\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks from Specific File - Obsidian Tasks Plugin - Tasks Query\nDESCRIPTION: This `tasks` query retrieves all tasks located within the file whose path includes 'Smoke Testing the Tasks Plugin'. The commented instructions `# group by heading` and `# short view` specify desired output formatting, although these might be ignored if the plugin's debug settings are configured to do so (as shown in the accompanying JSON snippet). This query is intended for use in a note to display the filtered tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Smoke Testing the Tasks Plugin - Debug View.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Smoke Testing the Tasks Plugin\n# group by heading\n# short view\n```\n\n----------------------------------------\n\nTITLE: Setting Default Query Options for Obsidian Tasks (JavaScript)\nDESCRIPTION: This snippet sets a configuration variable 'TQ_short_mode' to true, enabling a short mode for task queries in the Obsidian Tasks plugin. It influences how tasks are queried or displayed by default, likely simplifying or abbreviating task results. The setting is a boolean toggle, and no dependencies are explicitly indicated, but it is intended for use within the plugin environment to customize behavior.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/query_file_defaults_short_mode.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nTQ_short_mode: true\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: Combining NOT and OR\nDESCRIPTION: This demonstrates how to parse complex boolean expressions by mixing multiple boolean operators. The expression uses the OR and NOT operators. The result shows the intended meaning by showing OR combined with NOT.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n'(not done) OR NOT (is recurring)'\n=>\nResult:\n  (not done) OR NOT (is recurring) =>\n    OR (At least one of):\n      not done\n      NOT:\n        is recurring\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Filename Content (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'filename includes' filter combined with 'OR NOT'. This query matches all tasks by selecting those whose filename contains \"wibble\" OR those whose filename does not.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_95\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(filename includes wibble) OR NOT (filename includes wibble)\n```\n\n----------------------------------------\n\nTITLE: Custom Grouping by Next Task Status Symbol (JavaScript)\nDESCRIPTION: Groups tasks based on the symbol of their next logical status using `group by function`. The example formats the group heading as 'Next status symbol: [symbol]' and replaces spaces with 'space' using `task.status.nextSymbol.replace(\" \", \"space\")`. Requires Tasks plugin version 4.0.0 or later.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function \"Next status symbol: \" + task.status.nextSymbol.replace(\" \", \"space\")\n```\n\n----------------------------------------\n\nTITLE: Filtering by List Property Length Greater Than Zero (Obsidian Tasks JavaScript)\nDESCRIPTION: Filters tasks based on whether a specified file list property exists and contains at least one item. It uses optional chaining (`?.`) to safely access the `length` property. Useful for finding tasks in files with non-empty lists under a specific key. Requires the file to have the property; otherwise, it evaluates to `false`. Returns `true` if the list exists and is not empty, `false` otherwise.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.obsidian_properties_task.file.frontmatter_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.property(\"sample_list_property\")?.length > 0\n```\n\n----------------------------------------\n\nTITLE: Current Behavior: Recurring Task with Fixed Day\nDESCRIPTION: This defines the current testing behavior of recurring tasks, using Obsidian Tasks syntax. It is designed to test recurrence every month on the 25th and observe any issues. It shows completed tasks, with completion dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Recurrence handling invalid dates.md#_snippet_4\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task do stuff 🔁 every month on the 25th 📅 2022-04-25\n- [x] #task do stuff 🔁 every month on the 25th 📅 2022-03-25 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 25th 📅 2022-02-25 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 25th 📅 2022-01-25 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 25th 📅 2021-12-25 ✅ 2022-10-03\n- [x] #task do stuff 🔁 every month on the 25th 📅 2021-11-25 ✅ 2022-10-03\n```\n\n----------------------------------------\n\nTITLE: Including a Task within a Titled Callout\nDESCRIPTION: Demonstrates how a standard task list item ('- [ ] Task') is placed within a titled callout block in Obsidian Markdown. This specific combination of a task line inside a titled callout was prone to being missed by plugins due to the metadata cache bug in affected Obsidian versions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Support and Help/Missing tasks in callouts with some Obsidian 1.6.x versions.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> [!NOTE] Some Title - Remove me to make the task be found\n> - [ ] Task in callout\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by priority name alphabetically (JavaScript)\nDESCRIPTION: This snippet groups tasks in Obsidian by the task.priorityName function. This displays the priority names in alphabetical order. Note that the default priority is called 'Normal' as opposed to with `group by priority` which calls the default 'None'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.priorityName_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.priorityName\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no tag\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no tag'. The term is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_67\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no tag\",\n        \"f2\": \"no tag\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Task Statuses in Text Format\nDESCRIPTION: This snippet lists the supported task statuses in plain text format, illustrating the symbols and their corresponding meanings as used in the Ebullientworks Theme for Obsidian Tasks. It serves as a reference for the status characters recognized by the theme to display different task states such as unchecked, checked, cancelled, in progress, deferred, important, question, and review.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/Ebullientworks Theme.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- [ ] #task `space` Unchecked\n- [x] #task `x` Checked\n- [-] #task `-` Cancelled\n- [/] #task `/` In Progress\n- [>] #task `>` Deferred\n- [!] #task `!` Important\n- [?] #task `?` Question\n- [r] #task `r` Review\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Filename Using Obsidian Tasks (JavaScript)\nDESCRIPTION: This snippet groups tasks by the filename using a JavaScript function within Obsidian Tasks' query context. It is intended for users who want to categorize tasks based on the file in which they reside, without linking to the file. No external dependencies are required, but it assumes execution inside Obsidian Tasks where the 'task.file.filename' property is available. The function returns the filename as the grouping key. Input is the task context, and output is the group label (filename).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.file_properties_task.file.filename_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.file.filename\n```\n\n----------------------------------------\n\nTITLE: Extracting Full Top-Level Tag Including Hash from Task Tags in JavaScript\nDESCRIPTION: This snippet maps over task.tags and extracts the entire top-level tag with leading '#' by splitting the tag string and returning the first segment as-is. This preserves the original hash symbol, useful for grouping tasks while keeping tag prefixes intact. Inputs are slash-separated tag strings and outputs are first-level tags including the '#'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[0] )\n```\n\n----------------------------------------\n\nTITLE: Fixing CSS Selectors for Tasks 3.0.0 Compatibility\nDESCRIPTION: A code example showing how to modify CSS selectors to maintain compatibility with Tasks 3.0.0. The key change is removing direct child selectors (>) for elements that are now nested differently in the DOM structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- li.plugin-tasks-list-item > span.tasks-backlink > a {\n+ li.plugin-tasks-list-item   span.tasks-backlink > a {\n```\n\n----------------------------------------\n\nTITLE: Adding Version Marker for Specific Feature Components in Obsidian Tasks Documentation\nDESCRIPTION: This snippet demonstrates the placeholder format used when tagging a sub-part of a feature, such as in a list item. The 'X.Y.Z' is automatically replaced with the actual version number during release.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Version numbers in documentation.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> [!released]\n> X (Y and Z) was introduced in Tasks X.Y.Z.\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Creation Day Using JavaScript Function in Obsidian Tasks\nDESCRIPTION: This snippet applies a filter to a collection of tasks, selecting those where the task's creation date, formatted to the full day name ('dddd'), matches 'Monday'. It leverages the Obsidian Tasks plugin's ability to use custom JavaScript functions for advanced filtering. Users should ensure their task objects implement the 'created.format' method, and be aware that the day name must match the locale used by their Obsidian installation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.created_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.created.format('dddd') === 'Monday'\n```\n\n----------------------------------------\n\nTITLE: Testing Async Function with Combinations (TypeScript)\nDESCRIPTION: Demonstrates the usage of a custom helper function, `verifyAllCombinations3Async`, designed within the project to handle testing asynchronous functions with combinations of multiple input parameters. This utility creates the test block and iterates through all permutations of the provided input arrays, calling the async callback for each.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Approval Tests.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ndescribe('demonstrate async combination approvals', () => {\n    // Note that we do not have an 'it' section here.\n    // verifyAllCombinations3Async() creates the 'it' block.\n    verifyAllCombinations3Async(\n        'documentation example',\n        'sample outputs',\n        async (a, b, c) => {\n            return `(${a}, ${b}, ${c}) => ${a} '${b}' ${c}`;\n        },\n        [0, 1],\n        ['hello', 'world'],\n        [true, false],\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: Single NOT\nDESCRIPTION: This snippet showcases parsing a simple NOT expression. The output indicates that a simple NOT operation can be successfully processed and understood by the parser.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n'NOT (not done)'\n=>\nResult:\n  NOT (not done) =>\n    NOT:\n      not done\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by exact folder path in JavaScript\nDESCRIPTION: This JavaScript snippet filters tasks located in files within the exact specified folder. It uses strict equality (`===`) to ensure that only files in the target folder, and not sub-folders, are included. The trailing slash (`/`) is crucial for the comparison.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder === \"Work/Projects/\"\n```\n\n----------------------------------------\n\nTITLE: Querying All Tasks in a File with Obsidian Tasks\nDESCRIPTION: This query displays all tasks from the 'Invalid Dates' file, groups them by heading, and sorts them by description. Used to show a complete list of both valid and invalid date examples.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Invalid Dates.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Manual Testing/Invalid Dates\ngroup by heading\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Table for Non-Actionable Display Statuses\nDESCRIPTION: A table listing statuses used for display purposes only, with their symbols, next states (which are the same), classification as non-tasks, and necessary styling cues to prevent toggling.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Example Statuses.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name | Status Type | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `b` | `b` | Bookmark | `NON_TASK` | Yes |\n| `E` | `E` | Example | `NON_TASK` | Yes |\n| `I` | `I` | Information | `NON_TASK` | Yes |\n| `P` | `P` | Paraphrase | `NON_TASK` | Yes |\n| `Q` | `Q` | Quote | `NON_TASK` | Yes |\n```\n\n----------------------------------------\n\nTITLE: Configuring Obsidian Kanban Plugin Settings - JSON\nDESCRIPTION: This snippet provides a JSON configuration for the Obsidian Kanban plugin, specifying the use of the 'basic' kanban mode. It is intended to be placed within a code block, enabling the plugin to recognize and apply the desired settings. There are no required parameters beyond 'kanban-plugin', and no additional dependencies are needed besides the plugin itself. This configuration only applies to kanban boards using the plugin and does not affect tasks outside of the plugin context.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/example_kanban.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"kanban-plugin\":\"basic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block Query (Tag Filter) - Obsidian Tasks Query\nDESCRIPTION: Shows a typical task block query that filters tasks based on tags. This query runs in addition to the configured Global Query, effectively combining the filters unless the block explicitly uses `ignore global query`. In the example context, this block query is combined with the global `path includes /tasks` query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Global Query.md#_snippet_1\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\ntags include work\n```\n\n----------------------------------------\n\nTITLE: Embedding Related Page Tags using HTML Span\nDESCRIPTION: Shows how to embed tags for related page categorization directly after the main H1 heading using an HTML `<span>` element with the class `related-pages`. This method groups documentation pages by topic using tags like `#plugin/calendar`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Linking to other pages in the docs.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"related-pages\">#plugin/calendar #plugin/periodic-notes</span>\n```\n\n----------------------------------------\n\nTITLE: Declaring Tasks with Full HTML Comment Block in Markdown\nDESCRIPTION: This snippet shows a complete task line wrapped inside an HTML block comment. The task line is entirely ignored by Obsidian's cachedMetadata, making it invisible for Obsidian's native task tracking, but potentially still recognized by external task plugins. There are no dependencies. The input is a todo list item inside the comment, and the expected effect is that Obsidian excludes it from task metadata aggregation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/comments_html_style.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n- [ ] #task Whole task in 'comments_html_style'\n-->\n```\n\n----------------------------------------\n\nTITLE: Explained Regex Output for Tasks Query - Obsidian Tasks - text\nDESCRIPTION: Demonstrates Tasks output explaining a regex-based query filter. The explanation dissects the regular expression, presenting the exact pattern and flag used during the search. Inputs are the user's code block with a regex filter; output gives an understandable representation of what the regex matches.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nExplanation of this Tasks code block query:\n\n  path regex matches /^Root/Sub-Folder/Sample File\\.md/i =>\n    using regex:     '^Root\\/Sub-Folder\\/Sample File\\.md' with flag 'i'\n```\n\n----------------------------------------\n\nTITLE: Creating Task Workflow Flowchart - Mermaid\nDESCRIPTION: This Mermaid code defines a flowchart representing the workflow of tasks, with different classes (TODO, IN_PROGRESS, DONE, CANCELLED, NON_TASK) styled with specific colors and stroke widths. It defines the transition of a task through 'Important' (TODO), 'Doing - Important' (IN_PROGRESS), and 'Done - Important' (DONE) states.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_important-cycle.approved.mermaid.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Important\"]:::TODO\n2[\"Doing - Important\"]:::IN_PROGRESS\n3[\"Done - Important\"]:::DONE\n1 --> 2\n2 --> 3\n3 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by File Path (without extension)\nDESCRIPTION: This shows sorting tasks based on their file path, excluding the file extension. The sorting function is `task.file.pathWithoutExtension`. The output lists tasks along with their file paths and headings, demonstrating the order resulting from the sort, with tasks grouped according to their paths, ignoring the file extensions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.path_results.approved.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsort by function task.file.pathWithoutExtension\nLike 'Sort by path'.\n=>\n- [ ] xyz in '' in heading 'heading'\n- [ ] xyz in 'a_b_c.md' in heading 'a_b_c'\n- [ ] xyz in 'a/b.md' in heading 'null'\n- [ ] xyz in 'a/b/_c_.md' in heading 'null'\n- [ ] xyz in 'a/b/_c_.md' in heading 'heading _italic text_'\n- [ ] xyz in 'a/b/c.md' in heading 'null'\n- [ ] xyz in 'a/b/c.md' in heading 'c'\n- [ ] xyz in 'a/d/c.md' in heading 'heading'\n- [ ] xyz in 'e/d/c.md' in heading 'heading'\n```\n\n----------------------------------------\n\nTITLE: Error Text: Template Text Error Message\nDESCRIPTION: This snippet contains the text of an error message that the Tasks plugin displays when it detects unexpanded template text in a query. This error can occur in template files or if the template syntax is not correctly interpreted by the Tasks plugin. The message offers potential causes for the error and how to resolve it.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Daily Agenda.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```text\nInstruction contains unexpanded template text: \"<%\" - and cannot be interpreted.\n\nPossible causes:\n- The query is an a template file, and is not intended to be searched.\n- A command such as \"Replace templates in the active file\" needs to be run.\n- The core \"Daily notes\" plugin is in use, and the template contained\n  date calculations that it does not support.\n- Some sample template text was accidentally pasted in to a tasks query,\n  instead of in to a template file.\n\nSee: https://publish.obsidian.md/tasks/Advanced/Daily+Agenda#Instruction+contains+unexpanded+template+text\n```\n```\n\n----------------------------------------\n\nTITLE: Toggling Done on Incomplete Task (Global Filter, Issue #449, Markdown)\nDESCRIPTION: Test case for issue #449. Shows toggling an incomplete task (`- [ ] Wibble`) to completed (`- [x] Wibble`) when a global filter is present or disabled. Expects a completion date to be added (`✅ YYYY-MM-DD`), adding 13 characters. Focuses on cursor movement, which should move right 13 characters regardless of start position (relative to `>>`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Toggle Done Cursor Fixes.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task w\n\n>> - [ ] #task wibble\n```\n\n----------------------------------------\n\nTITLE: Toggling Done on Recurring Task (Global Filter, Markdown)\nDESCRIPTION: Test case for toggling a recurring incomplete task (`- [ ] Wibble 🔁 every day`) when a global filter is present or disabled. Expects the original line to remain/become incomplete, and a new completed instance with a date (`- [x] Wibble 🔁 every day ✅ YYYY-MM-DD`) to be added on the next line. Focuses on cursor movement relative to `>>` on the original line.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Toggle Done Cursor Fixes.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task wibble 🔁 every day\n\n>> - [ ] #task wibble 🔁 every day\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Recursion Status using JavaScript\nDESCRIPTION: This snippet demonstrates using a JavaScript expression within the `group by function` clause of an Obsidian Tasks query. It utilizes a ternary operator to check the `task.isRecurring` property. If true, it returns the string \"Recurring\"; otherwise, it returns \"Non-Recurring\". This effectively groups tasks into these two categories based on their recurring status.\n\nPrerequisites: Basic understanding of Obsidian Tasks query syntax and JavaScript ternary operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.isRecurring_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.isRecurring ? \"Recurring\" : \"Non-Recurring\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Queries with NOT and OR (Obsidian Tasks)\nDESCRIPTION: This snippet represents a query parsing with the 'NOT' operator applied to a more complex statement that includes a condition 'has start date' or 'description includes special'. This means that any task that does not fulfill either one of those conditions will match this query. The output is an array, where each part of the original statement is parsed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n[\n    \"NOT (\",\n    \"(\",\n    \"has start date\",\n    \") OR (\",\n    \"description includes special\",\n    \"))\"\n]\n```\n\n----------------------------------------\n\nTITLE: Sorting by Custom Priority System in JavaScript\nDESCRIPTION: Sorts tasks based on a custom priority system represented by colored squares within the task description.  The JavaScript expression iterates through an array of priority symbols and returns an index corresponding to the first matching symbol found.  Tasks without any matching symbols are given a high index to preserve their relative order.  This assumes a home-grown priority system and uses `sort by function` instruction.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Sorting.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function \\\n    const priorities = [...'🟥🟧🟨🟩🟦'];  \\\n    for (let i = 0; i < priorities.length; i++) {  \\\n        if (task.description.includes(priorities[i])) return i;  \\\n    }  \\\n    return 999;\n```\n\n----------------------------------------\n\nTITLE: Filtering Fully Completed Tasks - Dataview - dataview\nDESCRIPTION: Selects tasks that are considered 'fully completed', presuming a custom 'fullyCompleted' property is defined per task. Requires the Dataview plugin and that tasks contain 'fullyCompleted'. Only tasks with a true value for 'fullyCompleted' are returned; expected to be used where tasks have subtask structures.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_2\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nWHERE fullyCompleted\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Priority Name in JavaScript\nDESCRIPTION: This code snippet demonstrates how to sort tasks by their priority name in the Obsidian Tasks plugin. The sorting function uses the task's priorityName property, arranging tasks alphabetically by priority name.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.priorityName_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.priorityName\n```\n\n----------------------------------------\n\nTITLE: Building Development Bundle for Debugging (yarn)\nDESCRIPTION: Generates a development build of the Obsidian Tasks plugin into a `main.js` file in the repository root, including a sourcemap. This build is intended for manual copying to a local Obsidian vault's plugin folder to facilitate debugging using the Obsidian development console (`Ctrl+Shift+i` or `Cmd+Shift+i`). Requires `yarn`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Building/Local development.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build:dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Incomplete Tasks (Obsidian Tasks)\nDESCRIPTION: Displays only tasks that are not completed (`not done`) from the current folder (`folder includes {{query.file.folder}}`). Backlinks are hidden (`hide backlinks`), and tasks are shown in a tree structure (`show tree`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nnot done\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Date and Time in Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Groups tasks by both date and time using task.due.formatAsDateAndTime(), producing headings like YYYY-MM-DD HH:mm or omitting headings if no due date is given. As of now, Tasks does not officially store times, so this is only for demonstration; adding times can break task recognition. Requires the Tasks plugin and date fields; use with caution due to time parsing limitations.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_results.approved.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.formatAsDateAndTime()\n// Output:\n// 2023-05-30 00:00\n// 2023-05-31 00:00\n// 2023-06-01 00:00\n// 2023-06-02 00:00\n// Invalid date\n```\n\n----------------------------------------\n\nTITLE: Case-insensitive Regex Description Search - Tasks\nDESCRIPTION: This snippet performs a case-insensitive regular expression search. By adding the 'i' flag after the closing forward slash in the regex pattern, the search becomes case-insensitive, matching tasks regardless of the casing of the word \"case\" in their description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription regex matches /case/i\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /case/i\n```\n\n----------------------------------------\n\nTITLE: Example Input Markdown Task with Partial Date\nDESCRIPTION: Represents a markdown task line where the user has typed the due date emoji (📅) followed by a partial date string, like '27 oct'. This input triggers a suggestion matching the partial date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__emoji__symbols_offers_correct_options_for_partial_due_date_lines.approved.txt#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- [ ] some task 📅 27 oct\"\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters (Nested Parentheses and Quotes) in AND\nDESCRIPTION: Shows a parsing error involving nested parentheses for the first operand and double quotes for the second in an AND expression, reinforcing the rule against mixed delimiters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'((not done)) AND \"is recurring\"'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Start Date in Obsidian Tasks Plugin\nDESCRIPTION: Defines filter parameters to query tasks based on their start dates, supporting various date formats and relative time descriptors. Includes options for sorting, grouping, and hiding the start date field, leveraging the 'task.start' property to filter relevant tasks. Dependencies include the Obsidian Tasks plugin with the appropriate query syntax.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n`starts (on, before, after, on or before, on or after) <date>`\\n`starts (in, before, after, in or before, in or after) ...`\\n`... YYYY-MM-DD YYYY-MM-DD`\\n`... (last, this, next) (week, month, quarter, year)`\\n`... (YYYY-Www,YYYY-mm, YYYY-Qq, YYYY)`\\n`has start date`\\n`no start date`\\n`start date is invalid`\n```\n\n----------------------------------------\n\nTITLE: Displaying Obsidian Frontmatter as JSON\nDESCRIPTION: This js-engine script retrieves the Obsidian's frontmatter and displays it in JSON format using the `engine.markdown.createBuilder()` and custom `jsonCodeBlock()` function. It uses various Obsidian API methods such as `app.vault.getAbstractFileByPath()`, `app.metadataCache.getFileCache()`, `app.vault.read()` and `obsidian` API methods to access and display frontmatter data. The script is intended to be run within the Obsidian environment with the js-engine plugin installed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/Tags in Frontmatter.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet markdownBuilder = engine.markdown.createBuilder();\n\nconst path = 'Manual Testing/Frontmatter/Tags in Frontmatter.md';\n\nlet tfile = app.vault.getAbstractFileByPath(path);\nlet cache = app.metadataCache.getFileCache(tfile);\nlet content = await app.vault.read(tfile);\n\n// -------------------------------------------------------------------------\nmarkdownBuilder.createHeading(3, '`CachedMetadata`');\njsonCodeBlock(cache)\n\n// -------------------------------------------------------------------------\nmarkdownBuilder.createHeading(3, 'get frontmatter text via `getFrontMatterInfo()`');\nmarkdownBuilder.createParagraph( 'needs v.1.5.7 - released publicly in 1.5.8 on February 22, 2024');\n\n// v.1.5.7 getFrontMatterInfo()\nlet frontmatterInfo = obsidian.getFrontMatterInfo(content);\nmarkdownBuilder.createParagraph('`getFrontMatterInfo(content)`:');\njsonCodeBlock(frontmatterInfo)\n\n// v0.11.11 parseYaml()\nlet parseYamlSays = obsidian.parseYaml(frontmatterInfo.frontmatter)\nmarkdownBuilder.createParagraph('`parseYaml(frontmatterInfo.frontmatter)`:');\njsonCodeBlock(parseYamlSays)\n\n// -------------------------------------------------------------------------\nmarkdownBuilder.createHeading(3, 'get frontmatter text via `metadataCache` and `parseYaml()`');\nmarkdownBuilder.createParagraph( 'should probably work with any version of Obsidian over the last couple of years???');\n\n// TODO check its type is 'yaml'\nlet section = cache.sections[0];\nlet manualMetadataContent = content.slice(section.position.start.offset, section.position.end.offset)\nmarkdownBuilder.createParagraph('metadata content via metadataCache:');\njsonCodeBlock(manualMetadataContent);\n\n// Need to strip off first and last line\n// TODO Make this work with lines longer than '---'\nlet manualMetadataContentStripped = manualMetadataContent.split('\\n').filter((l) => l !== '---').join('\\n')\nmarkdownBuilder.createParagraph('metadata content via metadataCache - stripped of leading ---:');\njsonCodeBlock(manualMetadataContentStripped);\n\nlet parseYamlSays2 = obsidian.parseYaml(manualMetadataContentStripped);\nmarkdownBuilder.createParagraph('`parseYaml(manualMetadataContentStripped)`:');\njsonCodeBlock(parseYamlSays2)\n\n// -------------------------------------------------------------------------\nmarkdownBuilder.createHeading(3, 'get all tags');\nlet allTags = obsidian.getAllTags(cache);\nmarkdownBuilder.createParagraph('`getAllTags(cache)`:');\njsonCodeBlock(allTags)\n\n// -------------------------------------------------------------------------\nmarkdownBuilder.createHeading(3, 'get frontmatter manually');\n\nlet frontmatter = cache.frontmatter;\nmarkdownBuilder.createParagraph('`cache.frontmatter`:');\njsonCodeBlock(frontmatter);\n\n// Get the keys of the JSON object\nconst keys = Object.keys(frontmatter);\nmarkdownBuilder.createParagraph('`Object.keys(frontmatter)`:');\njsonCodeBlock(keys)\n\n// TODO Iterate over the keys and construct a tidied-up frontmatter object.\n\n// v0.9.16 parseFrontMatterAliases()\nmarkdownBuilder.createParagraph('`parseFrontMatterAliases(frontmatter)`:');\njsonCodeBlock(obsidian.parseFrontMatterAliases(frontmatter));\n\n// v0.9.16 parseFrontMatterTags()\nmarkdownBuilder.createParagraph('`parseFrontMatterTags(frontmatter)`:');\njsonCodeBlock(obsidian.parseFrontMatterTags(frontmatter));\n\nfunction jsonCodeBlock(value) {\n    markdownBuilder.createCodeBlock('json', JSON.stringify(value, null, 4));\n}\n\nreturn markdownBuilder;\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks in Obsidian Using JavaScript\nDESCRIPTION: This snippet demonstrates how to search for tasks within Obsidian notes based on criteria such as tags or completion status. It scans notes, filters tasks, and returns matching results, assuming the use of Obsidian's API and markdown parsing functions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Obsidian/File.test.replaceTaskWithTasks_issue_1680_-_Cannot_read_properties_of_undefined.approved.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction findTasks(criteria) {\n    const notes = getAllNotes();\n    const results = [];\n    notes.forEach(note => {\n        const tasks = parseTasksFromNote(note);\n        // Filter tasks based on criteria\n        // ...\n    });\n    return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Happens Date (Obsidian Tasks)\nDESCRIPTION: This Obsidian Tasks query groups tasks based on their 'happens' date, which is determined as the earliest valid date among the start, scheduled, or due dates. The query is scoped to include tasks only from the current file, shows the task's urgency, and hides backlinks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Invalid Dates and Happens.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\ngroup by happens\n\npath includes {{query.file.path}}\n\nshow urgency\n\nhide backlinks\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Due on Specific Date or with Date in Heading (JavaScript)\nDESCRIPTION: This snippet filters tasks to identify those due on a specific date ('2023-06-11') or without a due date but with a heading containing that date. It employs optional chaining and moment.js for date comparisons. Dependencies include moment.js; the snippet returns true if conditions match, otherwise false.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.heading_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst taskDate = task.due.moment; \nconst wanted = '2023-06-11'; \nreturn taskDate?.isSame(wanted, 'day') || ( !taskDate && task.heading?.includes(wanted)) || false\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid Dataview Due Date Syntax in Markdown Tasks\nDESCRIPTION: Provides examples of task lines with date information resembling Dataview syntax (`due:: YYYY-MM-DD`, `due: YYYY-MM-DD`, `due YYYY-MM-DD`) but lacking the required brackets or parentheses. As explained in the note, this syntax is *not* parsed as inline fields by Dataview.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Testing File Formats/Dataview Format - Tasks to Parse.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task C 1 Some task - due value not found by dataview - un-bracketed and 2 colons - due:: 2021-08-22\n- [ ] #task C 2 Some task - due value not found by dataview - un-bracketed and 1 colon - due: 2021-08-22\n- [ ] #task C 3 Some task - due value not found by dataview - un-bracketed and 0 colons - due 2021-08-22\n```\n\n----------------------------------------\n\nTITLE: Sort Tasks by Next Status Symbol - JavaScript\nDESCRIPTION: This JavaScript code snippet sorts a list of tasks based on the `nextSymbol` property of their `status`. The `sort` function is used to compare the `nextSymbol` of each task object. It assumes the existence of a `task` object with properties such as `status` and `nextSymbol`.  The outcome is a sorted array of tasks based on `task.status.nextSymbol`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.statuses_task.status.nextSymbol_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.status.nextSymbol\n```\n\n----------------------------------------\n\nTITLE: Prompting for Caption and Inserting into Image and Span in Templater\nDESCRIPTION: This Templater code snippet prompts the user for a caption using `tp.system.prompt()`. It then inserts the user-provided caption into the image's `alt` attribute (using an image tag) and a span element's content.  Requires Templater plugin to be installed and enabled.  It takes the caption as a string input, and the output includes the image tag with the caption and the caption in a span element.  There are no real limitations, but the use case is defined to be for use within Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/_meta/templates/image embed.md#_snippet_0\n\nLANGUAGE: Templater\nCODE:\n```\n<%-*\nconst caption = await tp.system.prompt(\"Caption for image\");\n-%>\n![<%* tR += caption %>](../images/insert-filename-here.png)\n<span class=\"caption\"><%* tR += caption %></span>\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (OR)\nDESCRIPTION: This shows an invalid boolean expression with incorrect use of delimiters, specifically demonstrating the error associated with OR operators. The error message clearly states the requirement for valid delimiters like \"(...)\" or \"[...]\"\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n'\"not done\" OR (is recurring)'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    \"not done\" OR (is recurring)\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Parentheses in Filters Using Alternative Delimiters in Obsidian Tasks Queries\nDESCRIPTION: Illustrates challenges with nested parentheses inside filter functions causing parser errors, and provides multiple practical workarounds: using alternate delimiters like square brackets instead of parentheses, adding semicolons after filter expressions to separate closing delimiters, or porting Boolean logic to JavaScript syntax. Requires familiarity with Obsidian Tasks query syntax and JavaScript expressions within filters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Boolean Combinations.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(description includes (maybe)) OR (description includes (perhaps))\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n[description includes (maybe)] OR [description includes (perhaps)]\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(filter by function task.tags.join(',').toUpperCase().includes('#XX')) AND \\\n(filter by function task.tags.join(',').toUpperCase().includes('#YY')) AND \\\n(filter by function task.tags.join(',').toUpperCase().includes('#ZZ'))\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n[filter by function task.tags.join(',').toUpperCase().includes('#XX')] AND \\\n[filter by function task.tags.join(',').toUpperCase().includes('#YY')] AND \\\n[filter by function task.tags.join(',').toUpperCase().includes('#ZZ')]\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(filter by function task.tags.join(',').toUpperCase().includes('#XX'); ) AND \\\n(filter by function task.tags.join(',').toUpperCase().includes('#YY'); ) AND \\\n(filter by function task.tags.join(',').toUpperCase().includes('#ZZ'); )\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\nfilter by function \\\n    task.tags.join(',').toUpperCase().includes('#XX') && \\\n    task.tags.join(',').toUpperCase().includes('#YY') && \\\n    task.tags.join(',').toUpperCase().includes('#ZZ')\n```\n\n----------------------------------------\n\nTITLE: Extracting Combined First through Fourth-Level Tags from Task Tags in JavaScript with Conditional Fallback\nDESCRIPTION: This snippet attempts to extract and concatenate the first four segments of a task tag separated by '/', conditional on the presence of the fourth segment. If the fourth segment is missing, it returns an empty string. Since many tags do not have four levels, this often results in empty outputs, used for grouping by deep hierarchical tag paths when available.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[3] ? tag.split('/').slice(0, 4).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Define Tasks API v1 Interface - TypeScript\nDESCRIPTION: This TypeScript interface defines the structure and available methods for the Obsidian Tasks API version 1. It outlines two primary functions: `createTaskLineModal` for creating new tasks via the UI and `executeToggleTaskDoneCommand` for programmatically toggling the completion status of an existing task line.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Tasks Api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Tasks API v1 interface\n */\nexport interface TasksApiV1 {\n    /**\n     * Opens the Tasks UI and returns the Markdown string for the task entered.\n     *\n     * @returns {Promise<string>} A promise that contains the Markdown string for the task entered or\n     * an empty string, if data entry was cancelled.\n     */\n    createTaskLineModal(): Promise<string>;\n\n    /**\n     * Executes the 'Tasks: Toggle task done' command on the supplied line string\n     *\n     * @param line The markdown string of the task line being toggled\n     * @param path The path to the file containing line\n     * @returns The updated line string, which will contain two lines\n     *          if a recurring task was completed.\n     */\n    executeToggleTaskDoneCommand: (line: string, path: string) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Recurrence Status using JavaScript\nDESCRIPTION: This snippet uses a JavaScript ternary operator within a group by function to classify tasks as either 'Recurring' or 'Non-Recurring' based on the boolean property `isRecurring`. It requires that each task object has an `isRecurring` property indicating its recurrence. The input is a task object and the output is a string representing the group category. This technique is useful for organizing tasks dynamically in scenarios like task management applications.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.isRecurring_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.isRecurring ? \"Recurring\" : \"Non-Recurring\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Nested Task Filter Expressions with Multiple Logical Operators in JavaScript (JSON Pair)\nDESCRIPTION: This snippet represents the parsing of more complex, nested filter statements, such as 'NOT ((has start date) OR (description includes special))', into a logical abstraction. The output includes a simplified structure reflecting operator precedence and filter groupings, and associates each inner filter with a placeholder. Input is a multi-layered logical expression; output is a JSON with 'simplifiedLine' and a mapping of keys to original filter text. Parsing correctness hinges on proper handling of parentheses and logical groupings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"simplifiedLine\": \"NOT ((f1) OR (f2))\",\n    \"filters\": {\n        \"f1\": \"has start date\",\n        \"f2\": \"description includes special\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (XOR with string)\nDESCRIPTION: This demonstrates error cases from invalid delimiter usage with the XOR operator, further illustrating the error message regarding allowed delimiters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n'(not done) XOR \"is recurring\"'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    (not done) XOR \"is recurring\"\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Pro and Con Toggling Workflow Diagram\nDESCRIPTION: A Mermaid diagram demonstrating toggling between 'Pro' and 'Con' statuses using symbols 'P' and 'C', which are designated as non-actionable to exclude from task searches, facilitating brainstorming sessions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Example Statuses.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Pro\"]:::NON_TASK\n2[\"Con\"]:::NON_TASK\n1 --> 2\n2 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Visualizing Task Statuses with Mermaid - Mermaid\nDESCRIPTION: This Mermaid code snippet creates a directional flowchart with nodes representing distinct task statuses, each with custom stroke color and width using the classDef feature. It defines styling for TODO, DONE, IN_PROGRESS, CANCELLED, and NON_TASK, then instantiates two example nodes (In Progress and Cancelled) with their corresponding styles. The default linkStyle sets the arrow color for diagram connections. To render, ensure your environment supports Mermaid blocks (such as GitHub, Obsidian, or markdown previewers that include Mermaid support).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_custom-statuses.approved.mermaid.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"In Progress\"]:::IN_PROGRESS\n2[\"Cancelled\"]:::CANCELLED\n\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - 'has id'\nDESCRIPTION: This snippet demonstrates the simplification of a boolean expression using 'OR NOT' with 'has id'. It replaces both instances of 'has id' with aliases 'f1' and 'f2'. The result includes a simplified line and a mapping of the aliases.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_34\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"has id\",\n        \"f2\": \"has id\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Month and Week Number - Obsidian Tasks JavaScript\nDESCRIPTION: Groups tasks by both month and ISO week number, using \"YYYY[%%]-MM[%%] MMM [- Week] WW\" to ensure correct ordering and readable headings like \"2023 May - Week 22\". Embeds the hidden month number for sort order. Essential when grouping by weeks across months to avoid illogical heading order. Assumes valid due dates and Tasks plugin integration.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_docs.approved.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"YYYY[%%]-MM[%%] MMM [- Week] WW\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Due Today or with Today's Date in Heading (JavaScript)\nDESCRIPTION: This snippet filters tasks that are due today or lack a due date but have a heading containing today's date formatted as 'YYYY-MM-DD'. It utilizes moment.js for date comparison and string formatting, facilitating dynamic daily filtering. Dependencies include moment.js, and the snippet outputs true when the task matches the criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.heading_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst taskDate = task.due.moment; \nconst now = moment(); \nreturn taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false\n```\n\n----------------------------------------\n\nTITLE: Custom QuickAdd Format for Task Creation\nDESCRIPTION: This markdown snippet demonstrates a custom capture format for QuickAdd, allowing you to define task properties like name, reminder, priority, recurrence, start date, scheduled date and due date directly when creating the task. It leverages QuickAdd's variable substitution capabilities.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Other Plugins/QuickAdd.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#task {{VALUE:task name}} ⏰ {{VDATE:reminder date and time,YYYY-MM-DD HH:mm}} {{VALUE:⏫,🔼,🔽, }} 🔁 {{VALUE:recurrence}} 🛫 {{VDATE:start date,YYYY-MM-DD}} ⏳ {{VDATE:scheduled date,YYYY-MM-DD}} 📅 {{VDATE:due date,YYYY-MM-DD}}\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters in OR NOT\nDESCRIPTION: Illustrates a parsing error when mixing double quotes and parentheses as delimiters in an OR NOT expression. Consistent delimiters are required.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'\"not done\" OR NOT (is recurring)'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Urgency Equality with Rounding in JavaScript\nDESCRIPTION: This code snippet filters tasks based on an exact urgency value. The example searches for tasks with the default urgency score of 1.95. To avoid comparison issues related to the precision of floating-point numbers, .toFixed(2) is used on both sides of the equality comparison (===). This rounds the values to two decimal places before comparison. This ensures an accurate comparison and allows the correct matches to be identified.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.urgency_docs.approved.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.urgency.toFixed(2) === 1.95.toFixed(2)\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (AND with string)\nDESCRIPTION: This highlights how incorrect delimiter usage leads to parsing failures. The error message states that a valid set of delimiters is required for all filters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n'(not done) AND \"is recurring\"'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    (not done) AND \"is recurring\"\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Grouping Incomplete Tasks by Heading (Obsidian Tasks)\nDESCRIPTION: Displays incomplete tasks (`not done`) from the current folder (`folder includes {{query.file.folder}}`), grouped by their parent heading (`group by heading`). Backlinks are hidden (`hide backlinks`), and tasks are shown in a tree structure (`show tree`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_8\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nnot done\ngroup by heading\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in Tasks Query with Explain - Obsidian Tasks - text\nDESCRIPTION: Defines a tasks search using various built-in placeholders for path, filename, and folder information and includes a filter with an inline comment. Uses 'explain' to show how placeholders are expanded and cleaned for search. Requires Obsidian Tasks (v4.7.0 or newer) with placeholder support. Inputs demonstrate all main {{query.file.*}} placeholders and an inline comment; outputs are their expanded forms as understood by Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nexplain\npath includes {{query.file.path}}\npath includes {{query.file.pathWithoutExtension}}\nroot includes {{query.file.root}}\nfolder includes {{query.file.folder}}\nfilename includes {{query.file.filename}}\nfilename includes {{query.file.filenameWithoutExtension}}\n\ndescription includes Some Cryptic String {{! Inline comments are removed before search }}\n```\n\n----------------------------------------\n\nTITLE: Todo Status Symbol: space\nDESCRIPTION: Represents the 'Todo' task status symbol as defined in the configuration table. This symbol is used for tasks that are pending or not yet started.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_todo-in_progress-done.approved.md#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nspace\n```\n\n----------------------------------------\n\nTITLE: Prompting User for GitHub Issue Number (Templater JS)\nDESCRIPTION: This code snippet utilizes the Obsidian Templater plugin's 'tp.system.prompt' function to display a modal dialog box to the user, requesting input for a 'GitHub Issue Number'. The function execution pauses until the user provides input and confirms, and the entered value is then stored asynchronously in the 'issue_number' constant. This requires the Obsidian Templater plugin to be installed and enabled.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/_meta/templates/we are tracking this in issue.md#_snippet_0\n\nLANGUAGE: Templater JS\nCODE:\n```\n<%-*\nconst issue_number = await tp.system.prompt(\"GitHub Issue Number\");\n-%>\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Reverse Original Order (Obsidian Tasks)\nDESCRIPTION: Displays tasks from the current folder (`folder includes {{query.file.folder}}`), sorted by line number in reverse order (`sort by function reverse task.lineNumber`). Backlinks are hidden (`hide backlinks`), and tasks are shown in a tree structure (`show tree`).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_5\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\nsort by function reverse task.lineNumber\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (Nested with string)\nDESCRIPTION: This section demonstrates error cases arising from the incorrect use of delimiters, particularly when combining nested expressions with string literals. It consistently highlights delimiter constraints for all filters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n'((not done)) AND \"is recurring\"'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    ((not done)) AND \"is recurring\"\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (OR NOT with string)\nDESCRIPTION: The description highlights invalid expressions using OR, NOT, and a string, leading to errors because of improper delimiters. The error message highlights the need for correct formatting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n'(not done) OR NOT \"is recurring\"'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    (not done) OR NOT \"is recurring\"\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Due Today or Later Using Moment.js in JavaScript\nDESCRIPTION: This snippet defines a filter that returns true for tasks whose due dates are today or any future date. It uses Moment.js's isSameOrAfter method with a 'day' precision to include all tasks due on or after the current day. The task object is expected to have a due moment property. The filter returns a boolean indicating the task's due date status relative to now.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.moment?.isSameOrAfter(moment(), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Finding Time Patterns in Task Descriptions with Regex\nDESCRIPTION: Illustrates searching for time-like patterns (HH:MM) in task descriptions using regex in Obsidian Tasks. The first example uses `\\d\\d:\\d\\d` which matches any two digits followed by a colon and two more digits (potentially invalid times). The second example uses character sets `[012][0-9]:[0-5][0-9]` for a more precise match of valid hour and minute ranges.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /\\d\\d:\\d\\d/\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /[012][0-9]:[0-5][0-9]/\n```\n\n----------------------------------------\n\nTITLE: Applying Grayscale Filter to Task Buttons with CSS\nDESCRIPTION: This CSS snippet desaturates the task action buttons (edit and postpone) by applying a 100% grayscale filter to the .tasks-edit and .tasks-postpone classes. It requires Obsidian and the Obsidian Tasks plugin, and is placed in a custom CSS snippet file. No parameters are needed—simply enabling the snippet will render the icons monochrome. This technique works on all platforms that support CSS filters and requires no modifications to the HTML structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to style buttons.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.tasks-edit, .tasks-postpone {\n    filter: grayscale(100%);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Due in a Specific Week Using Moment.js in JavaScript\nDESCRIPTION: This snippet filters tasks that are due within the calendar week containing May 31, 2023. It uses Moment.js's isSame method with 'week' precision to check if the task's due date moment falls in the same week as the provided date. The task must include a due moment property. The function returns a boolean indicating whether the task's due date is in the target week.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.moment?.isSame(moment('2023-05-31'), 'week') || false\n```\n\n----------------------------------------\n\nTITLE: Explain Filters with Date-dependent Values - Tasks\nDESCRIPTION: This Tasks block uses the `explain` instruction to show the details of date-dependent filters. It specifies that tasks should be scheduled after two years ago and due before tomorrow. The `limit 1` is used to restrict the number of results displayed.  The output shows the expanded date values during the filter processing, allowing you to check its interpretation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Explain Filters.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nscheduled after 2 years ago\ndue before tomorrow\nexplain\nlimit 1\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Due Date Suggestions Based on User Input\nDESCRIPTION: This snippet represents a due date suggestion generated when the user starts typing a due date. The input is a markdown line, and the expected output is a formatted date string. The suggestion object provides the details for displaying the suggestion in the UI.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__dataview__symbols_offers_correct_options_for_partial_due_date_lines.approved.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"today (2022-07-11)\",\n    \"appendText\": \"due:: 2022-07-11] \",\n    \"insertAt\": 16,\n    \"insertSkip\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Get Current File Path Without Extension (Templater)\nDESCRIPTION: This Templater snippet retrieves the full path of the current Obsidian file using `tp.file.path(true)` and then employs the JavaScript `replace()` method with a regular expression (`/\\.md$/`) to remove the trailing '.md' extension. The output is the file path string without the extension.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/_meta/templates/file path for redirecting alias.md#_snippet_0\n\nLANGUAGE: templater\nCODE:\n```\n<% tp.file.path(true).replace(/\\.md$/, \"\") %>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Task Statuses for Obsidian Tasks\nDESCRIPTION: This Markdown list defines custom statuses for tasks managed by the Obsidian Tasks plugin. Each line uses the `[char]` syntax followed by `#task` and a descriptive name to map a character symbol to a specific task state (e.g., incomplete, complete, cancelled, deferred, important, etc.). This format allows users to represent diverse task states beyond the standard incomplete/complete.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Aura_Text.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task `space` incomplete\n- [x] #task `x` complete / done\n- [-] #task `-` cancelled\n- [>] #task `>` deferred\n- [/] #task `/` in progress, or half-done\n- [!] #task `!` Important\n- [?] #task `?` question\n- [R] #task `R` review\n- [+] #task `+` Inbox / task that should be processed later\n- [b] #task `b` bookmark\n- [B] #task `B` brainstorm\n- [D] #task `D` deferred or scheduled\n- [I] #task `I` Info\n- [i] #task `i` idea\n- [N] #task `N` note\n- [Q] #task `Q` quote\n- [W] #task `W` win / success / reward\n- [P] #task `P` pro\n- [C] #task `C` con\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks Due on Specific Date\nDESCRIPTION: This JavaScript snippet filters tasks that are due on a specific date (May 31, 2023). It uses the `isSame` method from moment.js to compare the task's due date with the specified date, using 'day' precision. The filter returns true only if the task's due date is exactly May 31, 2023.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSame(moment('2023-05-31'), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (OR with string)\nDESCRIPTION: This section showcases expressions where delimiter use is incorrect when the OR operator is used. The error message consistently emphasizes the need for correct and supported delimiter sets.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n'(not done) OR \"is recurring\"'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    (not done) OR \"is recurring\"\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Testing 'group by due' Styling - Obsidian Tasks Query\nDESCRIPTION: This query filters tasks in the current file matching \"priority\" and groups them by due date. It tests CSS styling for group headings, specifically targeting the 'No due date' group heading, expecting it to be black when the test CSS snippet `tasks-plugin-smoke-test-query-styling` is enabled. Requires the Obsidian Tasks plugin and the specified CSS snippet. Expected outcome: Black heading named 'No due date'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Styling of Queries.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Styling of Queries\ndescription includes priority\ngroup by due\n```\n\n----------------------------------------\n\nTITLE: Task Workflow Flowchart Using Mermaid.js\nDESCRIPTION: This Mermaid.js flowchart visualizes task states and transitions for the Obsidian Tasks plugin. It defines classes for different statuses with styles and illustrates the flow between non-task and task states. It requires a Mermaid.js renderer or compatible viewer to generate the diagram from this syntax.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_pro-con-cycle.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Pro\"]:::NON_TASK\n2[\"Con\"]:::NON_TASK\n1 --> 2\n2 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status with Obsidian Tasks (Tasks Query Language)\nDESCRIPTION: This snippet groups tasks by their current status using the Obsidian Tasks plugin. It filters tasks from files where the path includes the phrase \"Custom Task Statuses\", then groups the results by status and sorts them by their description. Requires the Obsidian Tasks plugin. Input: none directly; Output: grouped and sorted task lists.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Custom Task Statuses.md#_snippet_0\n\nLANGUAGE: Tasks Query Language\nCODE:\n```\npath includes Custom Task Statuses\ngroup by status\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Managing Auto-Suggest Conflicts with Other Obsidian Plugins\nDESCRIPTION: Guidance on ensuring compatibility when using auto-suggest features from multiple plugins. Recommends adjusting the minimum match length setting, managing auto-suggest activation lines, and restarting Obsidian to prevent conflicts and overlap of suggestions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Editing/Auto-Suggest.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nObsidian plugins such as Tasks cannot tell if you have auto-suggest features from other plugins enabled.\nTherefore it is the user's responsibility to manage conflicts between auto-suggest features.\n\nThe Tasks auto-suggest will only appear on lines that start `- [` ] and contain the global filter (if one is set).\nIf you want to use auto-suggest features from another plugin on such lines, make sure that plugin's settings for auto-suggest appearance do not overlap with the keywords listed above,\nthen increase the [[#Minimum match length for auto-suggest]] value in the Tasks settings to more characters than used to activate the other plugin's auto-suggest,\nand re-start Obsidian.\n```\n\n----------------------------------------\n\nTITLE: Creating Task Items in Markdown\nDESCRIPTION: This snippet demonstrates the creation of task items with sub-items using Markdown syntax within Obsidian. The structure includes the use of a numbered list, task markers ([ ] for incomplete tasks), and nested sub-items within the numbered list. The '#task' tag can be used to identify the specific tasks. There are no dependencies, just basic Markdown. The output is a formatted task with nested sub-items within an Obsidian note.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/numbered_list_items_with_paren.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# numbered_list_items_with_paren\n\n1) [ ] #task Task 1 in 'numbered_list_items_with_paren'\n    1) Sub-item 1\n2) [ ] #task Task 2 in 'numbered_list_items_with_paren'\n    1) Sub-item 2\n3) List item in 'numbered_list_items_with_paren'\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Due Date Range (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'due in' filter combined with 'OR NOT'. This query matches all tasks by selecting those due within the range 2021-12-27 to 2021-12-29 (inclusive) OR those not due within that range.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_90\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(due in 2021-12-27 2021-12-29) OR NOT (due in 2021-12-27 2021-12-29)\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Modified Block Link (JavaScript)\nDESCRIPTION: This code snippet is intended for use within an Obsidian Tasks query block to group tasks. It utilizes the `group by function` syntax, applying a JavaScript function to the `task.blockLink` property. The `replace(' ^', '')` method removes the leading space and carat character from the block link string before it is used for grouping. This specific modification is required to prevent potential issues where the rendered block link in a heading is interpreted as a self-referential link.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.blockLink_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.blockLink.replace(' ^', '')\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Mixed Filters\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a mix of description and priority filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) OR   NOT (priority medium)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR   NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"priority medium\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Tag or Heading Containing Specific Tag (JavaScript)\nDESCRIPTION: This snippet identifies tasks that either have the exact tag '#context/home' or have that string in their heading. It performs a check on both the tags array and the heading text, making it suitable for flexible tag or heading-based filtering. Dependencies are minimal; it returns true if either condition is met.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.heading_results.approved.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst wanted = '#context/home'; \nreturn task.heading?.includes(wanted) || task.tags.find( (tag) => tag === wanted ) && true || false;\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone and Opening Obsidian Note (Bash)\nDESCRIPTION: This command sets the timezone environment variable to 'Pacific/Auckland' and then opens a specific Obsidian note related to timezone testing within the 'Tasks-Demo' vault.  It uses the `open` command (common on macOS) to open an Obsidian URL scheme.  The vault must be previously opened so that obsidian is aware of the path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Time Zones/Pacific-Auckland.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTZ=Pacific/Auckland open 'obsidian://open?vault=Tasks-Demo&file=Manual%20Testing%2FTime%20Zones%2FPacific-Auckland'\n```\n\n----------------------------------------\n\nTITLE: Regex Matching Description\nDESCRIPTION: Demonstrates regular expression matching against the description of a task. It shows both successful matches and non-matches, along with the specific regex pattern and flags used.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/TextField.test.explains_regular_expression_searches_bulk_test.approved.txt#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n'(buy|order|voucher|lakeland|purchase|\\spresent)' with flag 'i'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'^$' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'  ' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'#context\\/pc_photos|#context\\/pc_clare|#context\\/pc_macbook' with flag 'i'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'#tag\\/subtag[0-9]\\/subsubtag[0-9]' with flag 'i'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'[⏫🔼🔽📅⏳🛫🔁]' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'[⏫🔼🔽📅⏳🛫🔁]' with flag 'u'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'^Log' with flag 'i'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'waiting|waits|wartet' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'waiting|waits|wartet' with flag 'i'\n```\n\n----------------------------------------\n\nTITLE: Specifying Task Dates using Dataview in Markdown\nDESCRIPTION: Explains how to add various date types (creation, scheduling, start, due, completion, cancellation) to Obsidian tasks using inline Dataview fields `[field:: YYYY-MM-DD]`. Shows examples for each date type, demonstrating the correct syntax for active, completed, and cancelled tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Formats/Dataview Format.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Has a created date  [created:: 2023-04-13]\n- [ ] #task Has a scheduled date  [scheduled:: 2023-04-14]\n- [ ] #task Has a start date  [start:: 2023-04-15]\n- [ ] #task Has a due date  [due:: 2023-04-16]\n- [x] #task Has a done date  [completion:: 2023-04-17]\n- [-] #task Has a cancelled date  [cancelled:: 2023-04-18]\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Description Count (Matching Tasks)\nDESCRIPTION: This grouping function is used in conjunction with the filtering and counting steps. It accesses the description counts from the `query.searchCache` and formats the output as a group name, including the description and the count of matching tasks. The group name is prepended with a sorting key (%%1000000 - count%%).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters With Complex Caching.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function { \\n    const cacheKey = 'descriptionCountsForMatchingTasks'; \\n    const group = task.descriptionWithoutTags; \\n    const count = query.searchCache[cacheKey].get(group); \\n    return `%%${1000000 - count}%%` + group + \" (\" + (count || 0) + \" tasks)\"; \\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR Query with Mixed Filters\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using the OR operator with a mix of description and priority filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) OR (priority medium)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"priority medium\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing NON_TASK Status Cycle (Pro/Con)\nDESCRIPTION: A Mermaid flowchart demonstrating a custom status cycle using the NON_TASK status type. In this example, '[P]' (Pro) transitions to '[C]' (Con), and vice versa. Clicking checkboxes with these statuses cycles between them but does not trigger standard task completion behavior like adding done dates or creating recurrences.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"'Pro'<br>[P] -> [C]<br>(NON_TASK)\"]:::NON_TASK\n2[\"'Con'<br>[C] -> [P]<br>(NON_TASK)\"]:::NON_TASK\n1 --> 2\n2 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Start Date (Sunday) - Obsidian Tasks\nDESCRIPTION: This filter uses the `task.start.format('dddd') === 'Sunday'` expression to find tasks that start on a Sunday. This filter is designed for use within the Obsidian Tasks plugin. The filter checks the start date of each task and compares the formatted day of the week (e.g., 'Sunday') against the target day.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.start_results.approved.txt#_snippet_0\n\nLANGUAGE: obsidian tasks\nCODE:\n```\nfilter by function task.start.format('dddd') === 'Sunday'\nFind tasks starting on Sundays, that is, any Sunday.\nOn non-English systems, you may need to supply the day of the week in the local language.\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by specific root folder in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to filter tasks that are located in files within a specific folder (e.g., 'Work/') directly in the root of the vault.  It uses the strict equality operator (`===`) to match the `task.file.root` property against the target folder path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.root === 'Work/'\n```\n\n----------------------------------------\n\nTITLE: Processing Boolean Expressions with Consistent Quote Delimiters\nDESCRIPTION: This snippet shows successful parsing of boolean expressions where all filters are wrapped in double quotes. The parser can handle these expressions as long as delimiter types are consistent throughout the expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"\\\"f1\\\" AND \\\"f2\\\"\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"description includes d2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Multiple Criteria\nDESCRIPTION: This snippet filters tasks based on a variety of criteria, including task status, due date, urgency, recurring status, file path, and tags. The filtering is based on the provided criteria in order to find the correct task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type);\nfilter by function const date = task.due.moment; return date ? !date.isValid() : false;\nfilter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false;\nfilter by function task.urgency.toFixed(2) === 1.95.toFixed(2);\nfilter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁');\nfilter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase();\nfilter by function const taskDate = task.due.moment; const now = moment(); return taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false;\nfilter by function const wanted = '#context/home'; return task.heading?.includes(wanted) || task.tags.find( (tag) => tag === wanted ) && true || false;\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Task Status Symbols in Obsidian Tasks Plugin\nDESCRIPTION: A markdown table that documents the default status symbols in the Obsidian Tasks plugin. It shows the relationship between status symbols, their next state, status names, status types, and styling requirements.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_core-statuses.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name<br>`status.name includes...`<br>`sort by status.name`<br>`group by status.name` | Status Type<br>`status.type is...`<br>`sort by status.type`<br>`group by status.type` | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `space` | `x` | Todo | `TODO` | No |\n| `x` | `space` | Done | `DONE` | No |\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters (Parentheses and Quotes) in OR\nDESCRIPTION: Illustrates a parsing error with mixed parentheses and quotes as delimiters in an OR expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) OR \"is recurring\"'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Testing 'short mode' Styling - Obsidian Tasks Query\nDESCRIPTION: This query filters tasks in the current file matching \"priority\" and displays them in short mode. It is used to test CSS styling applied specifically to task list items rendered in short mode, expecting an aqua background when the test CSS snippet `tasks-plugin-smoke-test-query-styling` is enabled. Requires the Obsidian Tasks plugin and the specified CSS snippet. Expected outcome: Aqua background for task lines.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Styling of Queries.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Styling of Queries\ndescription includes priority\nshort mode\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with a Single-Value YAML Tag in Markdown\nDESCRIPTION: This snippet shows how to define a markdown task list item annotated with a single-value YAML tag placed inline on the same line. It uses the Obsidian task syntax with a single incomplete task marked by '- [ ]' and tagged with '#task'. The tag helps categorize or filter tasks based on metadata. No additional dependencies are required beyond markdown support with task list and tag parsing capabilities.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_tags_with_one_value_on_single_line.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Task in 'yaml_tags_with_one_value_on_single_line'\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Completion Status in Obsidian Tasks\nDESCRIPTION: This snippet shows a custom sorting command for Obsidian Tasks. Using `sort by function !task.isDone` sorts tasks based on the negation of their completion status, effectively prioritizing tasks that are not done (`TODO`, `IN_PROGRESS`) over tasks that are done (`DONE`, `CANCELLED`, `NON_TASK`). This relies on the `sort by function` feature treating boolean `true` as sorting before `false`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.isDone_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\nsort by function !task.isDone\n```\n\n----------------------------------------\n\nTITLE: Matching Sub-tags with Specific Patterns Using Regex\nDESCRIPTION: Example of an Obsidian Tasks query using regex to find hierarchical tags matching a specific structure (`#tag/subtag[digit]/subsubtag[digit]`). It uses character classes (`[0-9]` or `\\d`) to match any single digit and escapes the forward slashes (`\\/`) within the tag pattern. The `i` flag makes the search case-insensitive.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ntags regex matches /#tag\\/subtag[0-9]\\/subsubtag[0-9]/i\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates to Group Tasks by Year, Month, Week in JavaScript\nDESCRIPTION: This snippet demonstrates how to format a date using the `task.due.format()` function to group tasks by year, month, and week. The format string includes year (YYYY), month (%%MM%% MMMM), and week number (WW). Fixed text is styled to appear paler.  The input is expected to be a valid date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.special_cases_formatting_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntask.due.format(\"YYYY %%MM%% MMMM [<mark style='background: var(--color-base-00); color: var(--color-base-40)'>- Week</mark>] WW\", \"Undated\")\n```\n\n----------------------------------------\n\nTITLE: Create Task via UI Modal - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to access the Tasks API and use the `createTaskLineModal` method. This function opens the standard Tasks task creation user interface, allowing the user to enter task details. It returns a Promise that resolves with the Markdown string of the created task once the user confirms, or an empty string if cancelled.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Tasks Api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tasksApi = this.app.plugins.plugins['obsidian-tasks-plugin'].apiV1;\nlet taskLine = await tasksApi.createTaskLineModal();\n\n// Do whatever you want with the returned value.\n// It's just a string containing the Markdown for the task.\nconsole.log(taskLine);\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks by Status Type in Obsidian Tasks\nDESCRIPTION: This `tasks` query filters tasks within the current file and groups them by their status type. It ignores the global query to specifically target the current file. The `path includes {{query.file.path}}` ensures only tasks in the current file are processed. The `group by status.type` groups the results, and `sort by description` sorts the results alphabetically by the task description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Styling/Theme - Things Theme.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\n# We need to ignore the global query, as it ignores this file:\nignore global query\n\npath includes {{query.file.path}}\ngroup by status.type\nsort by description\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Path Using Obsidian Tasks Query Language\nDESCRIPTION: This snippet uses the Obsidian Tasks query syntax to filter tasks based on a path regex matching folders starting with 'Formats/Tasks Format'. It groups the matched tasks by their heading and sorts them by their description field, facilitating organized display of task items in Obsidian notes. No additional dependencies are required beyond the Obsidian Tasks plugin itself.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Formats/Tasks Format.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath regex matches /^Formats\\/Tasks Format/ group by heading sort by description\n```\n\n----------------------------------------\n\nTITLE: Custom Filter with List Property: root_dirs_to_search - Tasks/JS\nDESCRIPTION: This snippet shows how to use a list property named 'root_dirs_to_search' in a custom filter written in JavaScript. The filter checks if the task's file root is included in the list. An error is thrown if the property isn't set or doesn't have the expected format.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/query_using_properties.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\n\nfilter by function \\\n    if (!query.file.hasProperty('root_dirs_to_search')) { \\\n        throw Error('Please set the \"root_dirs_to_search\" list property, with each value ending in a backslash...'); \\\n    } \\\n    const roots = query.file.property('root_dirs_to_search'); \\\n    return roots.includes(task.file.root);\n\nlimit groups 5\ngroup by root\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Second Tag Level in Obsidian Tasks\nDESCRIPTION: This JavaScript function, used with 'group by function' in Obsidian Tasks, groups tasks by the second level of their hierarchical tags, if it exists. It splits each tag by '/', checks if the second element (index 1) exists, and if so, returns it; otherwise, it returns an empty string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[1] ? tag.split('/').slice(1, 2) : '')\n```\n\n----------------------------------------\n\nTITLE: Combining Tag Filters with XOR Operator in Obsidian Tasks Query Language\nDESCRIPTION: Shows advanced Boolean filtering using the XOR operator on tags to select tasks that include exactly one of the specified tags. This operator can produce non-intuitive results when chaining multiple XORs due to its binary nature. It requires careful usage with the Obsidian Tasks plugin's query system. Syntax and usage are demonstrated along with alternative workarounds for matching exactly one among multiple tags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Boolean Combinations.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(tags includes #XX) XOR (tags includes #YY)\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(tags includes #XX) XOR (tags includes #YY) XOR (tags includes #ZZ)\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n( (tags includes #XX) AND (tags does not include #YY) AND (tags does not include #ZZ) ) OR ( (tags includes #YY) AND (tags does not include #XX) AND (tags does not include #ZZ) ) OR ( (tags includes #ZZ) AND (tags does not include #XX) AND (tags does not include #YY) )\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(tags includes #XX) XOR (tags includes #YY) XOR (tags includes #ZZ)\nNOT ( (tags includes #XX) AND (tags includes #YY) AND (tags includes #ZZ) )\n```\n\n----------------------------------------\n\nTITLE: Testing Moment Object Equality in Tests\nDESCRIPTION: Examples demonstrating how to test for equality between Moment objects using a custom matcher 'toEqualMoment'. Used for comparing dates in task objects.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/How do I use Moment in tests.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(task!.dueDate).toEqualMoment(moment('2021-09-12'));\nexpect(task!.doneDate).toEqualMoment(moment('2021-06-20'));\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Formatted File Date Property (Moment.js) - Javascript (Tasks Query)\nDESCRIPTION: Demonstrates grouping tasks based on a formatted date derived from a date property in the file frontmatter. It uses `window.moment()` to parse the date string and `format()` to display it in a specific format (e.g., 'YYYY MMMM'), providing a default group for files without the property. Requires the Moment.js library.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function \\\n    const value = task.file.property('creation date'); \\\n    return value ? window.moment(value).format('YYYY MMMM') : 'no date'\n```\n\n----------------------------------------\n\nTITLE: Regex Matching Filename\nDESCRIPTION: Demonstrates regular expression matching against the filename of a task file.  It includes the regex pattern and any flags used. The example provided demonstrates a non-match case.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/TextField.test.explains_regular_expression_searches_bulk_test.approved.txt#_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n'^Tasks User Support Kanban\\.md$' with no flags\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Syntax Issues in Obsidian Tasks Boolean Queries\nDESCRIPTION: Contains examples displaying common syntax errors in Boolean task queries, such as unmatched delimiters and extra parentheses, with explanations on error messages from the parser. This snippet is intended to help users identify and correct invalid query syntax when writing complex Boolean expressions in the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Boolean Combinations.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(tags includes #XX) AND (tags includes #YY))\n```\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nexplain\nhide backlinks\n\n(tags includes #XX) AND (tags includes #YY\n```\n\n----------------------------------------\n\nTITLE: Sorting by Second Level Tag Name - JavaScript\nDESCRIPTION: This snippet extracts the second level tag (subtag) from a task's tags, using '/' as the delimiter. It splits the tag string and then selects the second element (index 1). If the second element doesn't exist, it returns an empty string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[1] ? tag.split('/').slice(1, 2) : '')\n```\n\n----------------------------------------\n\nTITLE: Regex Path Search with Extra Slashes - Tasks\nDESCRIPTION: This snippet demonstrates a potentially incorrect usage of regex in the `path` filter. The extra slash `/` at the end of \"Regular Expression Searches/\" might truncate the query, leading to unintended results. It showcases a scenario where understanding how special characters are interpreted is important for effective querying.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n```tasks\npath regex matches /Filters/Regular Expression Searches/\n```\n```\n\nLANGUAGE: text\nCODE:\n```\npath regex matches /Filters/Regular Expression Searches/\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Cancellation Date in Obsidian Tasks Plugin\nDESCRIPTION: Specifies filters to locate tasks based on their cancellation dates, with support for date ranges and relative periods. Sorting and grouping by cancellation date are available via the 'task.cancelled' property, and hiding this field is possible.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n`cancelled (on, before, after, on or before, on or after) <date>`\\n`cancelled (in, before, after, in or before, in or after) ...`\\n`... YYYY-MM-DD YYYY-MM-DD`\\n`... (last, this, next) (week, month, quarter, year)`\\n`... (YYYY-Www,YYYY-mm, YYYY-Qq, YYYY)`\\n`has cancelled date`\\n`no cancelled date`\\n`cancelled date is invalid`\n```\n\n----------------------------------------\n\nTITLE: Explaining an Obsidian Tasks Query\nDESCRIPTION: This `tasks` code block utilizes the `explain` instruction within the Obsidian Tasks plugin context. Instead of displaying task results, it outputs a detailed explanation of how the query is constructed and executed, taking into account default settings, any instructions within the block itself (none here), and frontmatter overrides like `TQ_extra_instructions` from the preceding text block.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Explain/DocsSamplesForExplain.test.explain_query_file_defaults_file_content.approved.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nexplain\n```\n\n----------------------------------------\n\nTITLE: Querying Scheduled Tasks by Filename-Based Dates with Tasks Query Block (Markdown)\nDESCRIPTION: Demonstrates a sample Tasks query block that filters and groups undated tasks whose scheduled date is inferred from the file name. It requires the Tasks plugin in Obsidian and the 'Use filename as Scheduled date for undated tasks' setting enabled. The query lists tasks scheduled before today and groups them by their inferred scheduled date, excluding completed items.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Use Filename as Default Date.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```tasks\nscheduled before today\ngroup by scheduled\nnot done\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Due Date and Grouping - Tasks\nDESCRIPTION: This snippet filters tasks based on their due date being before the 'workdate' property defined in the frontmatter of the current file. It also groups the results by the value of the 'groupby' property, also defined in the frontmatter. The 'limit 10' constraint limits the number of results to 10.  The 'workdate' is retrieved using `query.file.property('workdate')`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/workdate Example.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n#explain\ndue before {{query.file.property('workdate')}}\n{{query.file.property('groupby')}}\nlimit 10\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks due within a specific week using Moment.js\nDESCRIPTION: This snippet filters tasks due within the week containing May 31, 2023. It uses Moment.js to compare the task's due date with the specified week. The `isSame` function checks if the task's due date falls within the same week as the target date, considering only the week. It returns true if it does and false otherwise.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSame(moment('2023-05-31'), 'week') || false\n```\n\n----------------------------------------\n\nTITLE: Querying with Multi-Line Property with Continuation - Tasks\nDESCRIPTION: This snippet reads multiple Tasks instructions from a multi-line property named 'task_instructions_with_continuation_line', where instructions are using a continuation line. However, the text notes that continuation lines are currently unsupported in placeholders. The query ignores the global query, filters by folder 'Test Data', and limits results to 10.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/query_using_properties.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nignore global query\nfolder includes Test Data\nexplain\n{{query.file.property('task_instructions_with_continuation_line')}}\nlimit 10\n```\n\n----------------------------------------\n\nTITLE: Filter by Due Date and Description\nDESCRIPTION: This snippet combines due date and description filtering using the 'AND' operator. It requires that the due date is 'DUE THIS WEEK' and the description includes 'HELLO WORLD'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nAND (All of):\n      DUE THIS WEEK =>\n        due date is on 2024-03-24 (Sunday 24th March 2024)\n      DESCRIPTION INCLUDES HELLO WORLD\n```\n\n----------------------------------------\n\nTITLE: Filter with Start Date, Description, and Due Date\nDESCRIPTION: This is a more advanced filter that combines 'HAS START DATE', 'DESCRIPTION INCLUDES SOME', and 'HAS DUE DATE' using the 'AND' and 'OR' operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nAND (All of):\n      HAS START DATE\n      OR (At least one of):\n        DESCRIPTION INCLUDES SOME\n        HAS DUE DATE\n```\n\n----------------------------------------\n\nTITLE: Toggling Done on Completed Task (Global Filter, Markdown)\nDESCRIPTION: Test case showing toggling a completed task with a date (`- [x] Wibble ✅ YYYY-MM-DD`) back to incomplete (`- [ ] Wibble`) when a global filter is present or disabled. Expects the completion date (13 chars) to be removed. Focuses on cursor movement relative to `>>`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Toggle Done Cursor Fixes.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] #task wibble ✅ 2022-09-02\n\n>> - [x] #task wibble ✅ 2022-09-02\n```\n\n----------------------------------------\n\nTITLE: Regex Search for No Digits in Description - Tasks\nDESCRIPTION: This snippet demonstrates searching for tasks where the description contains no digits, using the regex pattern `^\\D+$`. This pattern matches descriptions that contain at least one non-digit character from the beginning to the end of the description. `limit 10` and `short mode` are also applied.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n```tasks\n# At least one non-digit\ndescription regex matches /^\\D+$/\nlimit 10\nshort mode\n```\n```\n\nLANGUAGE: text\nCODE:\n```\n# At least one non-digit\ndescription regex matches /^\\D+$/\nlimit 10\nshort mode\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR Query with Multiple Description Includes Tags\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using the OR operator with multiple 'description includes' filters targeting different tags, including variations in spacing. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes #context/location1) OR (description includes #context/location2 ) OR (  description includes #context/location3 ) OR   (  description includes #context/location4 )'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR (f2 ) OR (  f3 ) OR   (  f4 )\",\n    \"filters\": {\n        \"f1\": \"description includes #context/location1\",\n        \"f2\": \"description includes #context/location2\",\n        \"f3\": \"description includes #context/location3\",\n        \"f4\": \"description includes #context/location4\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cancelled Status Symbol ('X')\nDESCRIPTION: Defines the 'X' character as a status symbol representing 'Cancelled' (type CANCELLED). It transitions to the 'space' symbol (Todo) when toggled. A note indicates that 'X' is conventionally used for DONE status types, suggesting a potential review of this choice.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nX\n```\n\n----------------------------------------\n\nTITLE: Creating Parent, Child, and Sibling Tasks in Obsidian Tasks (Markdown)\nDESCRIPTION: This Markdown snippet demonstrates how to structure tasks hierarchically for the Obsidian Tasks plugin. Indenting a checklist item makes it a child of the preceding, less indented task. Items at the same indentation level are siblings. The `#task` tag marks list items as actionable tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_1parent1child1sibling_emptystring.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task parent task\n    - [ ] #task child task 1\n\n - [ ] #task sibling\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks due on a specific date using Moment.js\nDESCRIPTION: This snippet filters tasks due on a specific date (May 31, 2023). It compares the task's due date with the specified date using Moment.js. The `isSame` function checks if the task's due date is the same as the target date, considering only the day, month, and year. It returns true if they are the same and false otherwise.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.due.advanced_docs.approved.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.moment?.isSame(moment('2023-05-31'), 'day') || false\n```\n\n----------------------------------------\n\nTITLE: Defining Due Dates using Tasks Plugin Emoji Syntax in Markdown\nDESCRIPTION: Demonstrates using the 📅 emoji followed by a date (YYYY-MM-DD) to specify a due date for a task, as recognized by the Obsidian Tasks plugin. Notes that Dataview may parse the date depending on its position, while the Tasks plugin typically requires it at the end.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Testing File Formats/Dataview Format - Tasks to Parse.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task A 1 Some task - with Tasks emoji at end of line 📅2021-08-22\n- [ ] #task A 2 Some task - with Tasks emoji in 📅2021-08-22 middle of line - dataview finds the date, Tasks does not\n```\n\n----------------------------------------\n\nTITLE: Grouping by Urgency with Dynamic Decimal Places - JavaScript\nDESCRIPTION: This snippet groups tasks by their urgency, showing non-integer urgency values to 5 decimal places and integer ones to 0. To ensure consistent sorting, Tasks rounds non-integer numbers to a fixed 5 decimal places and returns the value as a string. The expression evaluates to a string representation of the task's urgency, with a varying number of decimal places depending on whether it's an integer.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.urgency\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks Cancelled on Wednesdays Using JavaScript\nDESCRIPTION: This snippet filters tasks marked as cancelled and occurring on 'Wednesday' by formatting the 'cancelled' date with the 'dddd' pattern. It requires the task object with a 'cancelled' date property and assumes the availability of a date formatting method. On non-English systems, localized day names must be used, which may impact filtering accuracy.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.cancelled_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.cancelled.format('dddd') === 'Wednesday'\n```\n\n----------------------------------------\n\nTITLE: Grouping by Date and Time as YYYY-MM-DD HH:mm - JavaScript\nDESCRIPTION: This snippet groups tasks by their due date and time, formatted as YYYY-MM-DD HH:mm or empty string if no due date. It uses the `formatAsDateAndTime()` method. It is mentioned that the Tasks plugin doesn't fully support times. If there is no due date, there will be no heading. The expression evaluates to a string representing the task's due date and time formatted as YYYY-MM-DD HH:mm.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.formatAsDateAndTime()\n```\n\n----------------------------------------\n\nTITLE: Embedding a JSON file with 'include:' mdsnippets\nDESCRIPTION: Demonstrates embedding the contents of a JSON file directly into a markdown document using the `include:` instruction.  After running `mdsnippets`, the instruction will be replaced by the file's content, without code block formatting.  No language highlighting is added, because the file contents are not enclosed in a code block.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Embedding code and data in documentation.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{<!-- include: ApprovalTestsDemo.test.ApprovalTests_JsonVerify.approved.json -->\n  \"name\": \"fred\",\n  \"age\": 30\n}<!-- endInclude -->\n```\n\n----------------------------------------\n\nTITLE: Task Query with Null Coalescing Operator - Tasks\nDESCRIPTION: This snippet demonstrates how to safely access a potentially missing property using the null coalescing operator `??`. If `query.file.property('stuff')` returns null or undefined, it will be replaced with an empty string. This ensures the query remains valid even when the property is not set. Depends on the Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/Placeholder examples to capture in tests and docs.md#_snippet_3\n\nLANGUAGE: Tasks\nCODE:\n```\n```tasks\npath includes {{query.file.path}}\n{{query.file.property('stuff') ?? ''}}\n```\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Description Including 'AND'\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators where the 'description includes' filter contains the literal word 'AND'. The input query string is transformed into a JSON object, correctly treating 'AND' as part of the description text.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes AND) OR NOT (description includes AND)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes AND\",\n        \"f2\": \"description includes AND\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Circular Dependency Check - Bash\nDESCRIPTION: These bash commands are used to identify circular dependencies locally using the `yarn` package manager and the installed dependencies. The prerequisites include having Graphviz and `gvpr` command installed and available in your system's PATH. The commands trigger scripts defined in the `package.json` file, likely utilizing a tool to analyze module dependencies.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Code/How do I see circular dependencies.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn run circular-deps-text\nyarn run circular-deps-image\n```\n\n----------------------------------------\n\nTITLE: Invalid Query (Pre-7.0.0): Mixed Delimiter Types\nDESCRIPTION: Shows a query using mixed delimiters ('(...)', '\"...\"') that was valid before Obsidian Tasks 7.0.0 but became invalid afterward. Tasks 7.0.0 requires consistent delimiters within a boolean instruction.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n(not done) AND \"is recurring\"\n```\n\n----------------------------------------\n\nTITLE: Adding Start Dates to Tasks in Obsidian Tasks Plugin Using Markdown\nDESCRIPTION: Illustrates how to set a start date for a task by appending the departing airplane emoji (🛫) followed by a date in 'YYYY-MM-DD'. Start dates prevent tasks from being considered active before a specified date and can be used in filtering and grouping. The associated query property is 'task.start'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Dates.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] take out the trash 🛫 2021-04-09\n```\n\n----------------------------------------\n\nTITLE: Grouping by custom property with default value\nDESCRIPTION: Groups tasks based on the value of the `custom_number_prop` frontmatter property. If a file does not have this property, tasks from that file are grouped under the label 'no \"custom_number_prop\" value'. Requires Obsidian Tasks plugin and files containing tasks with the `custom_number_prop` property in their frontmatter.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/How To/Access properties in frontmatter.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes Test Data\ngroup by function task.file.property('custom_number_prop') ?? 'no \"custom_number_prop\" value'\n\nlimit groups 5\n```\n\n----------------------------------------\n\nTITLE: Valid Use of Single Delimiter Type in Boolean Expressions (Obsidian Tasks, text)\nDESCRIPTION: An example of a valid filter line using a single delimiter type (parentheses) across both sub-expressions. Shows correct construction according to parser requirements. Only uses the Tasks plugin, input via filter strings, output is the resulting filtered tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n(not done) AND (is recurring)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Regex Matches in Obsidian Tasks\nDESCRIPTION: Demonstrates the basic structure of a regex filter in Obsidian Tasks, showing a case-sensitive search for specific strings (`pc_abigail`, `pc_edwina`, `at_work`) in the description field using the `|` (OR) operator. The second example shows how to make the search case-insensitive by adding the `i` flag.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /pc_abigail|pc_edwina|at_work/\n^1          ^2            ^3\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /pc_abigail|pc_edwina|at_work/i\n^1          ^2            ^3                            ^4\n```\n\n----------------------------------------\n\nTITLE: Defining Priorities with Tasks Emoji Format - Markdown\nDESCRIPTION: This snippet demonstrates how to define task priorities using the Tasks plugin's emoji format in markdown. Each priority level is represented by a specific emoji: Lowest, Low, Normal, Medium, High, and Highest. The task must have the '#task' tag to be parsed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Task Formats/Tasks Emoji Format.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Lowest priority ⏬\n- [ ] #task Low priority 🔽\n- [ ] #task Normal priority\n- [ ] #task Medium priority 🔼\n- [ ] #task High priority ⏫\n- [ ] #task Highest priority 🔺\n```\n\n----------------------------------------\n\nTITLE: Tasks Plugin Query: Tasks Due in Two Weeks\nDESCRIPTION: This snippet is for the Tasks plugin and filters for tasks that are not done, and are due between today and two weeks from today. It uses the `date:YYYY-MM-DD` template for the current date and `date+14d:YYYY-MM-DD` to represent the date two weeks in the future. This assists in displaying tasks for the next two weeks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Daily Agenda.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\nnot done\ndue after {{date:YYYY-MM-DD}}\ndue before {{date+14d:YYYY-MM-DD}}\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks to group only by context tags\nDESCRIPTION: This snippet filters task tags to include only those containing \"#context/\" and creates groupings accordingly. It helps focus on specific context-related tags, leaving out other tags. Implemented via task.tags.filter((tag) => tag.includes(\"#context/\")), providing a targeted view of context tags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_results.approved.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags.filter( (tag) => tag.includes(\"#context/\") )\nOnly create headings for tags that contain \"#context/\".\n=>\n#context/home\n#context/work\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Formatted Due Date (No Heading on Missing Date) - Obsidian Tasks JavaScript\nDESCRIPTION: This snippet groups tasks by their due date formatted as \"YYYY-MM-DD dddd\" using moment.js syntax. When there is no due date, it uses no heading. Useful for date-based grouping with clear daily headings while omitting null cases. Assumes Tasks plugin and moment.js integration.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due_docs.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"YYYY-MM-DD dddd\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Incomplete Tasks with Obsidian Tasks (Tasks Query Language)\nDESCRIPTION: This snippet lists only tasks that are not completed, filtering from files with paths including \"Custom Task Statuses\". Results are sorted by description. Requires the Obsidian Tasks plugin. Input: none directly; Output: a sorted list of incomplete tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Custom Task Statuses.md#_snippet_3\n\nLANGUAGE: Tasks Query Language\nCODE:\n```\npath includes Custom Task Statuses\nnot done\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by File Path and Root in Obsidian Tasks Plugin\nDESCRIPTION: Defines filters for tasks based on their file path and root directory, supporting inclusion, exclusion, and regex matching. Includes options for sorting and grouping by 'task.file.path', 'task.file.pathWithoutExtension', 'task.file.root', and 'query.file.*' properties.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_23\n\nLANGUAGE: Markdown\nCODE:\n```\n`path (includes, does not include) <path>`\\n`path (regex matches, regex does not match) /regex/i`\\n`path includes {{query.file.path}}`\\n`path includes {{query.file.pathWithoutExtension}}`\\n`root (includes, does not include) <root>`\\n`root (regex matches, regex does not match) /regex/i`\\n`root includes {{query.file.root}}`\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Third Tag Level in Obsidian Tasks\nDESCRIPTION: This JavaScript function, used with 'group by function' in Obsidian Tasks, groups tasks by the third level of their hierarchical tags, if it exists. It splits each tag by '/', checks if the third element (index 2) exists, and if so, returns it; otherwise, it returns an empty string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[2] ? tag.split('/').slice(2, 3) : '')\n```\n\n----------------------------------------\n\nTITLE: Setting Short Mode for Tasks Queries\nDESCRIPTION: This snippet demonstrates how to set short mode for tasks queries using the `TQ_short_mode` property.  It defines how the `short mode` instruction will be injected into any Tasks code blocks in the file if the property is set to true.  The snippet is part of an example and illustrates the possible values and resulting instructions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Query File Defaults.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n--- \nTQ_short_mode: true\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reference Error in Evaluating Filter Function in Tasks Plugin\nDESCRIPTION: This snippet contains a filter function referencing an undefined variable 'hello', causing a ReferenceError during evaluation in the Tasks plugin. It shows error handling behavior for runtime exceptions in user-supplied filter functions. The plugin should catch and report such errors gracefully without crashing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters - Demo.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nfilter by function \\\n    hello\n```\n\n----------------------------------------\n\nTITLE: Deleting an Obsidian Task on Completion\nDESCRIPTION: Illustrates how to use the `[onCompletion:: delete]` tag to configure an Obsidian task to be automatically removed from the note file once it is marked as completed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_OnCompletion_dataview-include.approved.md#_snippet_2\n\nLANGUAGE: obsidian-tasks\nCODE:\n```\n- [ ] #task Remove this task when done  [onCompletion:: delete]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Statuses\nDESCRIPTION: This snippet demonstrates the use of custom statuses in Markdown tasks, showcasing how different symbols represent different task states like checked, dropped, questioned, and in-progress.  These statuses require custom CSS styling or theming to display correctly within Tasks blocks or Live Preview in Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Custom Statuses.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [X] Checked\n- [-] A dropped/cancelled task\n- [?] A question\n- [/] A Half Done/In-progress task\n```\n\n----------------------------------------\n\nTITLE: Simplifying AND Query with Mixed Filters\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using the AND operator with a mix of description and priority filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) AND (priority medium)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) AND (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"priority medium\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Default Task Status Flow with Mermaid\nDESCRIPTION: A Mermaid flowchart diagram illustrating the default status transition cycle (TODO -> IN_PROGRESS -> DONE -> TODO) used by the Obsidian Tasks plugin. This helps visualize the standard behavior when task checkboxes are clicked.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"'Todo'<br>[ ] -> [/]<br>(TODO)\"]:::TODO\n2[\"'In Progress'<br>[/] -> [x]<br>(IN_PROGRESS)\"]:::IN_PROGRESS\n3[\"'Done'<br>[x] -> [ ]<br>(DONE)\"]:::DONE\n1 --> 2\n2 --> 3\n3 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Filter Invalid Due Dates\nDESCRIPTION: This JavaScript snippet filters tasks with invalid due dates using the `task.due.moment` property and the `isValid()` method. It checks if the `task.due.moment` object exists and if it's not valid. Tasks that have a due date specified, but that date is invalid, will be matched.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function \\\n    const date = task.due.moment; \\\n    return date ? !date.isValid() : false;\n```\n\n----------------------------------------\n\nTITLE: Using Moment Functions in Tests\nDESCRIPTION: Examples showing how to create moment objects in tests, including creating a moment from a specific date string and getting the current time.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/How do I use Moment in tests.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst date = moment('2003-10-12');\nconst now = moment();\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Settings - Obsidian Tasks Plugin - JSON\nDESCRIPTION: This JSON snippet shows how to configure debug settings for the Obsidian Tasks plugin. Setting `ignoreSortInstructions` to true disables sorting specified in queries, and `showTaskHiddenData` to true reveals internal task data, aiding in debugging specific task properties. These settings should be applied within the plugin's configuration.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Smoke Testing the Tasks Plugin - Debug View.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"debugSettings\": {\n  \"ignoreSortInstructions\": true,\n  \"showTaskHiddenData\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Tasks by Tag Count (Exactly One)\nDESCRIPTION: This snippet demonstrates how to filter Obsidian Tasks to find tasks that have exactly one tag (excluding global filters). It uses a JavaScript function within the `filter by function` syntax of the Tasks plugin. The `task.tags.length === 1` condition checks if the number of tags associated with the task is equal to 1.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.tags_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.tags.length === 1\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Exact Query Folder Path - JavaScript\nDESCRIPTION: This JavaScript filter expression for Obsidian Tasks identifies tasks located in files whose folder path exactly matches the folder of the query file. Using strict equality (`===`) with the dynamic `query.file.folder` ensures that only tasks in files directly within the query's folder are included, excluding any tasks in subfolders.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_results.approved.txt#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntask.file.folder === query.file.folder\n```\n\n----------------------------------------\n\nTITLE: Filtering Completed Tasks (Obsidian Tasks)\nDESCRIPTION: Displays only completed tasks (`done`) from the current folder (`folder includes {{query.file.folder}}`). Backlinks are hidden (`hide backlinks`), and tasks are shown in a tree structure (`show tree`). Default sorting (typically by due date unless overridden) applies.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Tasks.md#_snippet_1\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}\ndone\nhide backlinks\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Markdown Task Ignored within Obsidian Comment\nDESCRIPTION: This illustrates a Markdown task (`- [ ] ...`) placed inside an Obsidian comment block (`%% ... %%`). Obsidian comments hide their content in reading view and are generally ignored by plugins like Tasks, meaning the enclosed task-like string is not parsed or tracked.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/non_tasks.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] I look like a task but am in an Obsidian (percent) comment\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Filename Without Extension in JavaScript\nDESCRIPTION: This snippet shows a sorting function that orders tasks by file names excluding the file extension. It enables grouping tasks by base file names disregarding different extensions. The function operates on an array of task objects that have a file property with filenameWithoutExtension string. The tasks are sorted based on the base file names only.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.filename_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.filenameWithoutExtension\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Completion Status in Obsidian Tasks (JavaScript)\nDESCRIPTION: This JavaScript snippet sorts tasks within the Obsidian Tasks plugin based on their completion status. It uses the `!` operator to negate the `task.isDone` property. This ensures that incomplete tasks (where `task.isDone` is false) are sorted before complete tasks (where `task.isDone` is true). It relies on the internal structure of task objects within the plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.isDone_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function !task.isDone\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Done Date Range (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'done in' filter combined with 'OR NOT'. This query matches all tasks by selecting those done within the range 2021-12-27 to 2021-12-29 (inclusive) OR those not done within that range.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_82\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(done in 2021-12-27 2021-12-29) OR NOT (done in 2021-12-27 2021-12-29)\n```\n\n----------------------------------------\n\nTITLE: Extract i18n Translations using Yarn\nDESCRIPTION: This command uses Yarn to extract the i18n translations. It reads the source code, identifies translatable strings, and outputs them into a JSON file for the new language, located in the `src/i18n/locales/` directory. For example, if the new language code is `de`, the file `src/i18n/locales/de.json` is created.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Translation/Support a new language.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn extract-i18n\n```\n\n----------------------------------------\n\nTITLE: Extracted Additional Filename Date Format for Daily Notes (Markdown Configuration Example)\nDESCRIPTION: Demonstrates how to isolate the portion of a filename format that should be specified as the additional filename date format in Tasks settings, ensuring only the date fragment is used. This is relevant when the daily note file includes folders and a date segment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Use Filename as Default Date.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ndddd, MMMM Do YYYY\n```\n\n----------------------------------------\n\nTITLE: Filtering by Substring in File Path Using JavaScript\nDESCRIPTION: This snippet filters tasks by checking if the file path includes a specific substring ('tasks releases/4.1.0 Release.md'), using the JavaScript includes() method. The filter is case-sensitive, which means the capitalisation in the path must match exactly as specified. Expected input is a task object with a file.path property; output is a boolean indicating whether the path substring exists. No external dependencies are required, but attention to case is necessary for accurate results.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.path_docs.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.path.includes('tasks releases/4.1.0 Release.md')\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks with Markdown Links in Obsidian Tasks\nDESCRIPTION: A task item that demonstrates how to include markdown-style internal links within an Obsidian Tasks entry. The task includes a tag and multiple links to other pages in the vault.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/link_in_task_markdown_link.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Task in 'link_in_task_markdown_link' [jason_properties](jason_properties) [multiple_headings](multiple_headings)\n```\n\n----------------------------------------\n\nTITLE: Simplifying AND Query with Multiple Description Includes\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using the AND operator with several 'description includes' filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes 1) AND (description includes 2) AND (description includes 3)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) AND (f2) AND (f3)\",\n    \"filters\": {\n        \"f1\": \"description includes 1\",\n        \"f2\": \"description includes 2\",\n        \"f3\": \"description includes 3\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Search for Digits in Description - Tasks\nDESCRIPTION: This snippet demonstrates searching for tasks that have at least one digit in the description using the regex pattern `\\d`. It also uses `limit 5` to limit the results to 5 tasks, and `short mode` to display a condensed view of each task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n```tasks\n# Any digit\ndescription regex matches /\\d/\nlimit 5\nshort mode\n```\n```\n\nLANGUAGE: text\nCODE:\n```\n# Any digit\ndescription regex matches /\\d/\nlimit 5\nshort mode\n```\n\n----------------------------------------\n\nTITLE: Obsidian Tasks: Search for tasks in Search results\nDESCRIPTION: This Tasks query searches for tasks within a specific file path and heading that contains 'Complete in Search results'. It uses 'short mode' to display results concisely. Requires the Obsidian Tasks plugin and a file with tasks tagged appropriately. The output is a list of matching tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Task Toggling Scenarios/On Completion Delete.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\npath includes {{query.file.path}}\nheading includes Complete in Search results\nshort mode\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing Delimiter Conflict: Using Square Brackets\nDESCRIPTION: This snippet shows Option 1 to fix the closing delimiter conflict: changing the boolean delimiters from parentheses '( )' to square brackets '[ ]'. This works because the 'filter by function' expressions do not end with a ']'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n[filter by function task.tags.join(',').toUpperCase().includes('#XX')] AND \\\n[filter by function task.tags.join(',').toUpperCase().includes('#YY')] AND \\\n[filter by function task.tags.join(',').toUpperCase().includes('#ZZ')]\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Exact Path (Case-Insensitive) in Obsidian\nDESCRIPTION: This snippet filters tasks using a case-insensitive comparison of file paths. It uses `toLocaleLowerCase()` to convert both the task's file path and the comparison string to lowercase, enabling a case-insensitive equality search. The snippet checks if the lowercase version of the task's file path matches the lowercase version of 'TASKS RELEASES/4.1.0 RELEASE.MD'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.path_results.approved.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase()\n```\n\n----------------------------------------\n\nTITLE: Task Query with hasProperty Check - Tasks\nDESCRIPTION: This snippet uses `query.file.hasProperty('stuff')` to check if a property exists before attempting to use it. This avoids potential errors when the property is not defined in the file.  The result, a boolean value, is included in the query string. Depends on the Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/Placeholder examples to capture in tests and docs.md#_snippet_4\n\nLANGUAGE: Tasks\nCODE:\n```\n```tasks\npath includes {{query.file.path}}\n{{query.file.hasProperty('stuff')}}\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing 'NOT happens before ...'\nDESCRIPTION: This snippet shows how to parse a query that filters out tasks based on a temporal constraint with the 'NOT' operator. It targets tasks with a certain event happening before blahblahblah.  The result provides a structured representation of the original query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n[\n    \"NOT (\",\n    \"happens before blahblahblah\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Happening Date Before (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'happens before' filter (checking due, start, or scheduled date) combined with 'OR NOT'. This query matches all tasks by including those happening before 2021-12-27 OR those not.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_101\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(happens before 2021-12-27) OR NOT (happens before 2021-12-27)\n```\n\n----------------------------------------\n\nTITLE: Description Filters with OR and NOT\nDESCRIPTION: Example of combining text inclusion filter with negated text filter using OR operator. Shows how to find tasks that either contain d1 or don't contain d2.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_73\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) OR NOT (description includes d2)'\n```\n\n----------------------------------------\n\nTITLE: Using tags in YAML/Frontmatter properties in Obsidian\nDESCRIPTION: Example of defining tags in YAML frontmatter at the beginning of an Obsidian note. Since Tasks 7.7.0, the plugin can read tags defined in this way.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Tags.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n---\ntags:\n - 🏷/some_tag\n - 🏢/companyA\n---\n```\n\n----------------------------------------\n\nTITLE: Parsing Error for Malformed Boolean Query with Function Filters\nDESCRIPTION: Illustrates a common parsing error in Obsidian Tasks queries when using 'filter by function'. The query fails because the JavaScript expressions within 'filter by function' are missing closing parentheses, leading to syntax errors and the inability to parse the overall boolean combination. The provided error message and breakdown pinpoint the specific malformed sub-expressions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_27\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n'( (filter by function task.description.includes('a')) OR (filter by function task.description.includes('b')) OR (filter by function task.description.includes('c')) ) AND ( (filter by function task.description.includes('d')) OR (filter by function task.description.includes('e')) OR (filter by function task.description.includes('f')) )'\n```\n\n----------------------------------------\n\nTITLE: Regex Description Search with Invalid Flag - Tasks\nDESCRIPTION: This snippet demonstrates a regex search with an invalid flag '&'. While the query may work, it is intended to complain about the invalid flag. The example highlights potential issues with unsupported regex flags in the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription regex matches /CASE/&\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches /CASE/&\n```\n\n----------------------------------------\n\nTITLE: Accessing task.due.fromNow.sortOrder Property in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `sortOrder` property on the `fromNow` object within `task.due` in Obsidian Tasks. This property provides a numerical value used for sorting tasks based on their relative due time ('from now'). It returns 0 if the date is null.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.fromNow.sortOrder\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Due Date using Built-in Function\nDESCRIPTION: A tasks query that groups tasks by their due dates, showing how invalid dates are handled. This addresses a fixed bug where invalid dates should appear before valid dates in grouping.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Invalid dates with Sorting and Grouping.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\ngroup by due\n\npath includes {{query.file.path}}\nhide backlinks\nhide postpone button\nhide task count\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Specific Tag Prefix in Obsidian Tasks (JavaScript Function)\nDESCRIPTION: Defines a Javascript function used within Obsidian Tasks 'sort by function' to sort tasks. It extracts tags containing '#context/', sorts them alphabetically, and joins them into a string. Tasks without matching tags appear first due to the resulting empty string sorting before non-empty strings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.filter( (tag) => tag.includes(\"#context/\")).sort().join(\",\")\n```\n\n----------------------------------------\n\nTITLE: Mermaid Task Workflow State Diagram\nDESCRIPTION: This code defines a Mermaid flowchart illustrating task states for Obsidian Tasks plugin. It categorizes task statuses with specific styles and shows transitions between 'Pro' and 'Con' non-task states, aiding visual understanding of task progression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_pro-con-cycle.approved.detailed.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"'Pro'<br>[P] -> [C]<br>(NON_TASK)\"]:::NON_TASK\n2[\"'Con'<br>[C] -> [P]<br>(NON_TASK)\"]:::NON_TASK\n\n1 --> 2\n2 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Supported Task Status Syntax for Minimal Theme (Text)\nDESCRIPTION: Provides a plain text list demonstrating the markdown syntax for various task statuses supported by the Minimal Theme in Obsidian Tasks. Each line shows the checkbox character, the `#task` tag, the status character, and a brief description.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/Minimal Theme.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- [ ] #task `space` to-do\n- [/] #task `/` incomplete\n- [x] #task `x` done\n- [-] #task `-` canceled\n- [>] #task `>` forwarded\n- [<] #task `<` scheduling\n- [?] #task `?` question\n- [!] #task `!` important\n- [*] #task `*` star\n- [\"] #task `\"` quote\n- [l] #task `l` location\n- [b] #task `b` bookmark\n- [i] #task `i` information\n- [S] #task `S` savings\n- [I] #task `I` idea\n- [p] #task `p` pros\n- [c] #task `c` cons\n- [f] #task `f` fire\n- [k] #task `k` key\n- [w] #task `w` win\n- [u] #task `u` up\n- [d] #task `d` down\n```\n\n----------------------------------------\n\nTITLE: Finding Unread Emojis in Tasks - Tasks\nDESCRIPTION: This code snippet is designed to find tasks in Obsidian Tasks that contain emojis in their description, indicating data that might not have been correctly interpreted by Tasks. It uses a filter to identify tasks with specific emoji characters in their description, suggesting the presence of unparsed data at the end of the line. It is recommended to optionally exclude templates to focus only on relevant tasks. The results are grouped by file path for easier navigation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Find tasks with invalid data.md#_snippet_0\n\nLANGUAGE: Tasks\nCODE:\n```\n```tasks\n# These instructions need to be all on one line:\n(description includes 🔺) OR (description includes ⏫) OR (description includes 🔼) OR (description includes 🔽) OR (description includes ⏬) OR (description includes 🛫) OR (description includes ➕) OR (description includes ⏳) OR (description includes 📅) OR (description includes ✅) OR (description includes ❌) OR (description includes 🔁) OR (description includes 🏁) OR (description includes ⛔) OR (description includes 🆔)\n\n# Optionally, uncomment this line and exclude your templates location\n# path does not include _templates\n\ngroup by path\n```\n```\n\n----------------------------------------\n\nTITLE: Example Task List Sorted by descriptionWithoutTags\nDESCRIPTION: An example Markdown list showing the expected output order when tasks are sorted using 'sort by function task.descriptionWithoutTags'. Notice how tasks with the same base description ('my description') are grouped together despite variations in tags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.descriptionWithoutTags_results.approved.txt#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] long description Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quam ipsum, consectetur ut dolor nec, fringilla lobortis mi. Vestibulum gravida tincidunt urna nec ornare. Cras sit amet sagittis sapien, vitae mattis velit. Vestibulum sem tortor, blandit at ultrices eget, ultrices eget odio. Donec efficitur purus massa, vel molestie turpis tincidunt id. \n- [ ] my description\n- [ ] my description #tag\n- [ ] my description #tag/subtag\n- [ ] my description #tag/subtag/sub-sub-tag\n- [ ] my description #multiple-tags1 #multiple-tags2\n- [ ] my description #project/project1\n- [ ] my description #context/home\n- [ ] my description #context/work\n- [ ] short description\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status Properties in Obsidian Tasks\nDESCRIPTION: This Obsidian Tasks query demonstrates grouping tasks based on different properties of their status: `name`, `symbol`, `nextSymbol`, and `type`. It uses the `group by function` directive for each property and limits the output to the first 10 results. This is useful for analyzing tasks based on their specific status characteristics.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Fields for Functions - Demo.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\ngroup by function task.status.name\ngroup by function task.status.symbol\ngroup by function task.status.nextSymbol\ngroup by function task.status.type\n\nlimit 10\n```\n\n----------------------------------------\n\nTITLE: main.ts > Renderer/QueryRenderer.ts - Query Rendering Logic\nDESCRIPTION: Handles rendering of task queries within the UI, translating query results into visual components for user interaction.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* UI rendering logic for displaying query results, supporting user interaction and visualization */\n```\n\n----------------------------------------\n\nTITLE: Configuring task grouping display in Obsidian Tasks (JavaScript)\nDESCRIPTION: This snippet manages the display of task groups in short mode, allowing users to view grouped tasks succinctly. It depends on the plugin's API and modifies display parameters to enhance task grouping visualization within Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DefaultsDocs/DocsSamplesForDefaults.test.DocsSamplesForDefaults_demo-short-mode_instructions.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Code adjusts grouping display settings for short mode in Obsidian Tasks */\n\nconst setGroupingDisplay = () => {\n  const plugin = app.plugins.plugins['obsidian-tasks'];\n  if (plugin) {\n    plugin.settings.showGroupHeaders = true;\n    plugin.settings.groupingMode = 'short';\n    plugin.saveSettings();\n  }\n};\n\nsetGroupingDisplay();\n```\n\n----------------------------------------\n\nTITLE: Sorting by Third Level Tag Name - JavaScript\nDESCRIPTION: This snippet extracts the third level tag (sub-sub-tag) from a task's tags, using '/' as the delimiter. It splits the tag string and then selects the third element (index 2). If the third element doesn't exist, it returns an empty string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[2] ? tag.split('/').slice(2, 3) : '')\n```\n\n----------------------------------------\n\nTITLE: Fixing Delimiter Conflict: Using JavaScript Boolean Logic\nDESCRIPTION: This snippet illustrates Option 3, which avoids Tasks boolean operators altogether by performing the logical AND operations within a single 'filter by function' block using JavaScript's '&&' operator.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nfilter by function \\\n    task.tags.join(',').toUpperCase().includes('#XX') && \\\n    task.tags.join(',').toUpperCase().includes('#YY') && \\\n    task.tags.join(',').toUpperCase().includes('#ZZ')\n```\n\n----------------------------------------\n\nTITLE: Grouping Not Completed Tasks by Subpath - Dataview - dataview\nDESCRIPTION: Retrieves not completed tasks and organizes them by their section's subpath in the notes. Assumes a 'completed' property and uses Dataview's GROUP BY clause. Helpful for identifying pending tasks under different categories or headings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Other Plugins/Dataview/Parent-Child relationships - Searches - Dataview.md#_snippet_9\n\nLANGUAGE: dataview\nCODE:\n```\nTASK\nFROM \"Other Plugins/Dataview/Parent-Child relationships - Tasks\"\nWHERE !completed\nGROUP BY meta(section).subpath\n```\n\n----------------------------------------\n\nTITLE: Explanation of Line Continuation - Tasks Plugin\nDESCRIPTION: This code snippet shows the explanation of the line continuation example. It demonstrates how the backslash and surrounding whitespace are compressed into a single space when the query is interpreted.  The `explain` instruction provides insights into the parsed query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Line Continuations.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nExplanation of this Tasks code block query:\n\n  (priority is highest) OR       \\\n      (priority is lowest)\n   =>\n  (priority is highest) OR (priority is lowest) =>\n    OR (At least one of):\n      priority is highest\n      priority is lowest\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Folder Path including Subfolders - JavaScript\nDESCRIPTION: This JavaScript filter expression for Obsidian Tasks identifies tasks in files whose folder path contains the specified string. Using the `includes()` method allows tasks from files within the \"Work/Projects/\" folder and any of its subfolders to be included in the results, providing a recursive search.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.folder_results.approved.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntask.file.folder.includes(\"Work/Projects/\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with Partial Filename Match in Obsidian (JavaScript)\nDESCRIPTION: This snippet filters tasks based on whether the filename contains a specific substring, such as \"4.1.0 Release\". It uses the `includes()` method, which returns true if the filename contains the provided text, regardless of position or extension. Dependencies include the `task` object with a nested `file.filename` property. This method allows flexible searches for files with similar naming patterns, such as release notes or versioning files. Inputs are task objects, and the output is a boolean indicating inclusion criteria. It is useful for broad filename searches where exact match is not necessary.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.filename_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function task.file.filename.includes(\"4.1.0 Release\")\n```\n\n----------------------------------------\n\nTITLE: Example Query Block: Finding Tasks with Variations of 'Waiting' (OR)\nDESCRIPTION: Demonstrates an Obsidian Tasks query in a fenced code block to find incomplete tasks. It searches for tasks whose description includes any of the variations 'waiting', 'waits', or 'wartet' using OR logic.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n```tasks\nnot done\n(description includes waiting) OR \\\n  (description includes waits) OR \\\n  (description includes wartet)\n```\n```\n\n----------------------------------------\n\nTITLE: Workflow Diagram for Important Tasks Cycle\nDESCRIPTION: A Mermaid diagram illustrating a cycle for important tasks using non-standard symbols, enabling visual differentiation and re-opening of completed tasks within the 'Important' theme.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Example Statuses.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Important\"]:::TODO\n2[\"Doing - Important\"]:::IN_PROGRESS\n3[\"Done - Important\"]:::DONE\n1 --> 2\n2 --> 3\n3 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Displaying Tasks Sorted by Description as Expected Order Reference\nDESCRIPTION: A tasks query that sorts tasks by description to demonstrate the expected sort order for reference purposes. This helps visualize how tasks with different date statuses should be prioritized.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Invalid dates with Sorting and Grouping.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\nsort by description\n\npath includes {{query.file.path}}\nhide backlinks\nhide postpone button\nhide task count\n```\n\n----------------------------------------\n\nTITLE: Executing Stress Test Script - Bash\nDESCRIPTION: This bash snippet provides the command to execute the stress test script. It navigates to the 'obsidian-tasks' directory and then executes the python script named 'stress_test_obsidian_tasks.py' to generate files for stress testing. The generated files are written to the current directory.  Requires Python3 to be installed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/Stress Test Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd obsidian-tasks\n./scripts/stress_test_obsidian_tasks.py\n```\n\n----------------------------------------\n\nTITLE: Setting Global Layout (Limit) - Obsidian Tasks Query\nDESCRIPTION: An example showing how to set a default task limit using the Global Query. Configuring `limit 50` as the global query will restrict all task blocks to displaying a maximum of 50 tasks by default. This can be overridden by specifying a different `limit` value within an individual block.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Global Query.md#_snippet_5\n\nLANGUAGE: Obsidian Tasks Query\nCODE:\n```\nlimit 50\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Due This Week with Specific Description (Obsidian Tasks Query Language)\nDESCRIPTION: Filters tasks that are due this week AND whose description contains the text \"Hello World\". It combines a relative date filter ('due this week') and a text filter ('description includes') using the AND operator.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_92\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(due this week) AND (description includes Hello World)\n```\n\n----------------------------------------\n\nTITLE: Defining DONE Status ('5') Transitioning to NON_TASK\nDESCRIPTION: Defines '5' as a DONE status symbol ('DONE followed by NON_TASK'). It transitions to the 'n' symbol (Non-task). Similar to other non-standard DONE transitions, completing a recurring task with this status will result in the next occurrence being TODO or IN_PROGRESS.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n5\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Context-Specific Tags in Obsidian Tasks Plugin\nDESCRIPTION: This snippet filters and groups tasks by tags that include the pattern '#context/'. It uses 'filter' with 'tag.includes(\"#context/\")' to create groups only for context-specific tags, useful for organizing tasks based on context tags. Requires 'task.tags' array.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags_docs.approved.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.tags.filter( (tag) => tag.includes(\"#context/\") )\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks using boolean operators - Tasks Query\nDESCRIPTION: Demonstrates how to combine filters using boolean operators such as OR and AND NOT in Tasks queries. This allows for more complex filtering conditions to be defined, such as tasks with no due date OR due after a specific date, or tasks that include a specific path but not a specific tag.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_2\n\nLANGUAGE: Tasks\nCODE:\n```\n    ```tasks\n    (no due date) OR (due after 2021-04-04)\n    path includes GitHub\n    ```\n```\n\nLANGUAGE: Tasks\nCODE:\n```\n    ```tasks\n    due after 2021-04-04\n    (path includes GitHub) AND NOT (tags include #todo)\n    ```\n```\n\n----------------------------------------\n\nTITLE: Markdown Task Ignored within HTML Comment\nDESCRIPTION: This demonstrates a Markdown task line (`- [ ] ...`) embedded within an HTML comment (`<!-- ... -->`). Content inside HTML comments is typically ignored by Markdown processors, including Obsidian and its plugins, thus preventing the line from being recognized as a task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/non_tasks.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n- [ ] I look like a task but am in an HTML comment\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Including Specific Folder Text (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'folder includes' filter combined with 'OR NOT'. This query matches all tasks by selecting those whose folder path contains \"AND\" OR those whose path does not contain it.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_98\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(folder includes AND) OR NOT (folder includes AND)\n```\n\n----------------------------------------\n\nTITLE: Creating a Tasks query with limit parameter and folder filtering\nDESCRIPTION: This snippet demonstrates a Tasks plugin query that filters tasks from the current folder, sorts them by path, and limits the results to 50 entries using the filename as the limit instruction. The #explain tag requests an explanation of the query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 50.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntasks\nfolder includes {{query.file.folder}}\nsort by path\n\n# Use the filename as an instruction:\n{{query.file.filenameWithoutExtension}}\n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Detail of New Recurring Task Instance\nDESCRIPTION: Isolates the second line from the 'Completed and Recurred' example, showing the newly generated task recurrence. It features the default TODO status '[ ]' and the correctly advanced due date '📅 2023-10-16'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- [ ] Do something 🔁 every day 📅 2023-10-16\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by folder path with potential partial matches (JavaScript)\nDESCRIPTION: This JavaScript snippet filters tasks in files located in folders that *contain* the string \"Work/Projects\". Leaving off the trailing slash allows for partial matches, finding tasks in folders like \"Work/Projects 2023/\" or \"Work/Projects Top Secret/\".\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder.includes(\"Work/Projects\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Day of Week in JavaScript (Obsidian Tasks)\nDESCRIPTION: A JavaScript filter expression that matches tasks starting on Sundays. The filter uses the task's start date and formats it to the full day name, then compares it to 'Sunday'. Note that on non-English systems, the day name might need to be in the local language.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.start_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.start.format('dddd') === 'Sunday'\n```\n\n----------------------------------------\n\nTITLE: Running i18next-parser using Yarn\nDESCRIPTION: This bash command executes the `i18next-parser` tool via a yarn script. It ensures that all locale `.json` files contain placeholders for all translatable strings within the application. This helps maintain consistency across translations and prevents missing translations.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Translation/Overview of the translation setup.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn extract-i18n\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Excluding Specific Folder Path (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'folder does not include' filter combined with 'OR NOT'. This query matches all tasks by selecting those whose folder path does not include \"some/path\" OR those whose path does include it.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_97\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(folder does not include some/path) OR NOT (folder does not include some/path)\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks from File Path with Tasks Plugin Query\nDESCRIPTION: A Tasks plugin query that searches for tasks within a file path containing '654' and sorts the results by description. This query is used to demonstrate the bug where clicking on section references fails when the section title contains tags.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/654 - Unable to find section, when title has tag inside.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes 654\nsort by description\n```\n\n----------------------------------------\n\nTITLE: Date Range Filter with Boolean OR and NOT\nDESCRIPTION: Example of using boolean operators with date range filters. Shows how to filter tasks created between specific dates combined with OR and NOT operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_55\n\nLANGUAGE: text\nCODE:\n```\n'(created in 2021-12-27 2021-12-29) OR NOT (created in 2021-12-27 2021-12-29)'\n```\n\n----------------------------------------\n\nTITLE: Filtering Recurring Tasks in Obsidian Tasks\nDESCRIPTION: Selects tasks that are marked as recurring using the `task.isRecurring` function. This filter is identical in function to the built-in `is recurring` filter and can be combined with other conditions using Boolean operators (`&&` for AND, `||` for OR).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isRecurring_results.approved.txt#_snippet_0\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\nfilter by function task.isRecurring\n```\n\n----------------------------------------\n\nTITLE: Processing Boolean Expressions with Consistent Parentheses Delimiters\nDESCRIPTION: These snippets demonstrate successful preprocessing of boolean expressions where all filters are wrapped in parentheses. The parser converts each filter into a simplified representation with placeholders and extracts the filter content.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) AND (f2)\",\n    \"filters\": {\n        \"f1\": \"not done\",\n        \"f2\": \"is recurring\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter by Cancelled Date (in a range)\nDESCRIPTION: This snippet filters tasks that were cancelled between a range of dates: 2021-12-27 and 2021-12-29. The date range is inclusive.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      cancelled in 2021-12-27 2021-12-29 =>\n        cancelled date is between:\n          2021-12-27 (Monday 27th December 2021) and\n          2021-12-29 (Wednesday 29th December 2021) inclusive\n      NOT:\n        cancelled in 2021-12-27 2021-12-29 =>\n          cancelled date is between:\n            2021-12-27 (Monday 27th December 2021) and\n            2021-12-29 (Wednesday 29th December 2021) inclusive\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Exact Filename (Obsidian Tasks Function)\nDESCRIPTION: This filter uses a custom function within Obsidian Tasks to find tasks located specifically in files named \"4.1.0 Release.md\". It employs the strict equality operator (`===`), requiring an exact match of the filename, including the `.md` extension.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.file_properties_task.file.filename_results.approved.txt#_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nfilter by function task.file.filename === \"4.1.0 Release.md\"\n```\n\n----------------------------------------\n\nTITLE: Grouping by each tag\nDESCRIPTION: Groups tasks by each tag value found in the `tags` frontmatter property. Tasks with multiple tags will be listed multiple times, once for each tag. Requires Obsidian Tasks plugin and files containing tasks with a `tags` property (array of strings) in their frontmatter.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/How To/Access properties in frontmatter.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes Test Data\ngroup by function task.file.property('tags')\n\nlimit groups 5\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by exact case-sensitive file path in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to filter tasks based on the exact and case-sensitive file path. The `task.file.path` property is used with the strict equality operator (`===`) to find tasks only from the specified file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.path === 'tasks releases/4.1.0 Release.md'\n```\n\n----------------------------------------\n\nTITLE: Example Initial Recurring Task\nDESCRIPTION: A sample Obsidian task line representing a basic recurring task. It uses the standard TODO status '[ ]', includes a recurrence rule '🔁 every day', and specifies a due date '📅 2023-10-15'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- [ ] Do something 🔁 every day 📅 2023-10-15\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Done Date After (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'done after' filter combined with 'OR NOT'. This specific query matches all tasks by including those done after 2021-12-27 OR those not done after that date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_79\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(done after 2021-12-27) OR NOT (done after 2021-12-27)\n```\n\n----------------------------------------\n\nTITLE: Parsing 'NOT path includes b'\nDESCRIPTION: This snippet shows the processing of a filter that checks if the path includes 'b' while using the NOT operator. The aim is to select tasks whose path does not include the letter 'b'. The result represents a parsed, structured query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n[\n    \"NOT(\",\n    \"path includes b\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Sorting and Grouping Tasks by Start Date\nDESCRIPTION: Provides options to sort and group tasks based on their start dates, facilitating organized task views. Includes parameters for hiding the start date field to customize task list presentation. Utilizes the 'task.start' attribute for filtering and categorization.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n`sort by start`\\n`group by start`\n```\n\n----------------------------------------\n\nTITLE: Starting Development Build (yarn)\nDESCRIPTION: Executes a development build of the Obsidian Tasks plugin. This command sets up a watcher that automatically rebuilds the code base whenever changes are detected, allowing developers to quickly catch code errors during active development. Requires `yarn`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Building/Local development.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Task Status Markers in Obsidian Tasks\nDESCRIPTION: A reference list showing the different task status markers available in the Obsidian Tasks plugin. Each line demonstrates the markdown syntax for a specific task status, including the checkbox character and the #task tag.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Ebullientworks_Tasks.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task `space` Unchecked\n- [x] #task `x` Checked\n- [-] #task `-` Cancelled\n- [/] #task `/` In Progress\n- [>] #task `>` Deferred\n- [!] #task `!` Important\n- [?] #task `?` Question\n- [r] #task `r` Review\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Day of the Week (Alphabetical) - Obsidian Tasks Plugin (JavaScript)\nDESCRIPTION: Groups tasks by the weekday their due date falls on (e.g., Monday, Tuesday, etc.), with day names sorted alphabetically. Utilizes moment.js's weekday formatting. Suitable for users who wish to review or plan tasks by weekday patterns.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function task.due.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Config/Settings.ts and Suggestor/Suggestor.ts - Configuration and Suggestion Logic\nDESCRIPTION: These files define the configuration settings for the plugin and implement suggestion logic to enhance task input, including dependencies on Suggestor/index.ts. They manage user preferences and input assistance functionalities.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Contents of Config/Settings.ts, Suggestor/Suggestor.ts and related files would include configuration definitions and suggestion algorithms for task input, dependencies, and settings management */\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Specific Done Date (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'done on' filter combined with 'OR NOT'. This query matches all tasks by selecting those done on 2021-12-27 OR those not done on that date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_83\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(done on 2021-12-27) OR NOT (done on 2021-12-27)\n```\n\n----------------------------------------\n\nTITLE: Verifying a String with Approval Tests (TypeScript)\nDESCRIPTION: Demonstrates a basic test using the `verify()` function from the Approval Tests library to assert that a simple string output matches a previously approved text file. This is a fundamental use case for verifying plain text outputs.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Approval Tests.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest('SimpleVerify', () => {\n    verify('Hello From Approvals');\n});\n```\n\n----------------------------------------\n\nTITLE: Explicitly Keeping an Obsidian Task on Completion\nDESCRIPTION: Demonstrates using the `[onCompletion:: keep]` tag to explicitly specify that the task should be kept after being marked as completed. This reinforces the default behavior and can be useful for clarity or overriding other potential settings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_OnCompletion_dataview-include.approved.md#_snippet_1\n\nLANGUAGE: obsidian-tasks\nCODE:\n```\n- [ ] #task Keep this task when done too  [onCompletion:: keep]\n```\n\n----------------------------------------\n\nTITLE: Starting Point: Recurring Task with Fixed Day\nDESCRIPTION: This defines a basic recurring task, acting as a starting point for testing.  It uses the Obsidian Tasks syntax. It repeats every month on the 25th of the month. This version is unchanged in testing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Recurrence handling invalid dates.md#_snippet_3\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task do stuff 🔁 every month on the 25th 📅 2021-11-25\n```\n\n----------------------------------------\n\nTITLE: Explain Nested Boolean Logic Filters - Tasks\nDESCRIPTION: This Tasks block uses the `explain` instruction with nested boolean logic. The filter includes multiple `AND` conditions applied to the description of the task, checking if the description includes the numbers 1, 2, 3, and 4. `limit 1` limits the output.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Explain Filters.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nexplain\n(description includes 1) AND (description includes 2) AND (description includes 3) AND (description includes 4)\nlimit 1\n```\n```\n\n----------------------------------------\n\nTITLE: Defining DONE Status ('1') Transitioning to TODO\nDESCRIPTION: Defines '1' as a DONE status symbol ('DONE followed by TODO'). It transitions to the 'space' symbol (Todo) when toggled, suitable for recurring tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Excluding Tasks by File Tag Property - Javascript (Tasks Query)\nDESCRIPTION: Shows how to filter out tasks that are located in files whose frontmatter `tags` property includes a specific tag. This is useful for excluding tasks from files marked with tags like '#notasks'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function ! task.file.property('tags').includes('#notasks')\n```\n\n----------------------------------------\n\nTITLE: Filtering Completed Tasks with isDone Function in Obsidian Tasks\nDESCRIPTION: This filter uses the task.isDone function to show only completed tasks in an Obsidian Tasks query. It's equivalent to using the 'done' filter but can be combined with other expressions on the same line for more complex filtering.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isDone_results.approved.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.isDone\n```\n\n----------------------------------------\n\nTITLE: Filtering Open Tasks Done After a Specific Date Using Obsidian Tasks Plugin Syntax\nDESCRIPTION: This query searches for tasks that are not done but completed after November 21st, 2021. It uses `not done` in combination with `done after` to potentially capture recently completed or reconsidered tasks depending on how the plugin interprets these parameters. The focus is on temporal filtering of task completion dates within the Obsidian environment. Output is a list of such tasks matching these status and date criteria.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Tasks.md#_snippet_4\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nnot done\ndone after 2021-11-21\n```\n```\n\n----------------------------------------\n\nTITLE: Weekly Note Filename Date Format (Markdown Configuration Example)\nDESCRIPTION: Presents an example filename date format as used for weekly notes, which can be specified in Tasks settings for automatic scheduled date detection. Assumes the user applies this in the additional filename date format field for weekly scheduling.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Use Filename as Default Date.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nYYYY-[W]ww\n```\n\n----------------------------------------\n\nTITLE: Accessing task.due.category.sortOrder Property in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `sortOrder` property on the `category` object within `task.due` in Obsidian Tasks. This property provides a numerical value indicating the sort order for the due date's category, useful for custom sorting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.category.sortOrder\n```\n\n----------------------------------------\n\nTITLE: Explain Nested Boolean Logic with NOT Filters - Tasks\nDESCRIPTION: This Tasks block uses `explain` instruction and demonstrates NOT operator with nested boolean logic.  The filter checks if the description doesn't include all of the characters 1, 2, 3 and 4.  `limit 1` is used.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Explain Filters.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\n```tasks\nexplain\nNOT ( (description includes 1) AND (description includes 2) AND (description includes 3) AND (description includes 4) )\nlimit 1\n```\n```\n\n----------------------------------------\n\nTITLE: Querying with Single-Line Property: task_instruction - Tasks\nDESCRIPTION: This snippet shows how to read a Tasks instruction from a single-line property named 'task_instruction' within the current file and embed it into a Tasks query. It ignores the global query and limits the results to 10.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/query_using_properties.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nexplain\nignore global query\n{{query.file.property('task_instruction')}}\nlimit 10\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by File Path Without Extension Using JavaScript\nDESCRIPTION: This snippet defines a sorting function that sorts tasks based on the file path excluding the file extension. It requires task objects to have a 'file.pathWithoutExtension' property that contains the path stripped of any extension. This facilitates sorting tasks by their file locations while ignoring file types.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.file_properties_task.file.path_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.pathWithoutExtension\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Task Structure in Obsidian Tasks Markdown\nDESCRIPTION: A markdown example showing how to structure nested tasks in Obsidian Tasks. It demonstrates parent-child relationships across multiple indentation levels with checkbox syntax for tasks and regular list items for non-tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_rendering_sample.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-  grandparent list item\n    - [ ] parent 1\n        - [ ] child 1\n            - [ ] grandchild 1\n                - list item grand grand child\n        - [ ] child 2\n            - non task grandchild\n                - [ ] grand grand child\n    - [ ] parent 2\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry for New Theme Support\nDESCRIPTION: This snippet shows the format for adding an entry to the Changelog file (`docs/What is New/Changelog.md`) when support for a new theme or snippet is introduced. It includes the version number and a link to the theme's specific documentation page.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Code/How do I add one-click support for new themes or snippets for custom statuses.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- X.Y.Z:\n  - Add one-click support for the [[Border Theme|Border]] theme.\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Created Date Range\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a created date range filter. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(created in 2021-12-27 2021-12-29) OR NOT (created in 2021-12-27 2021-12-29)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"created in 2021-12-27 2021-12-29\",\n        \"f2\": \"created in 2021-12-27 2021-12-29\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Combined Recurrence Rules (includes and includes)\nDESCRIPTION: This snippet shows how to filter tasks whose recurrence rule includes both \"every week\" and \"when done\". It uses a combined condition `task.recurrenceRule.includes(\"every week\") && task.recurrenceRule.includes(\"when done\")`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.recurrenceRule_results.approved.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.recurrenceRule.includes(\"every week\") && task.recurrenceRule.includes(\"when done\")\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Using Obsidian Tasks Plugin - tasks Query Language\nDESCRIPTION: This snippet defines a task query using the Obsidian Tasks plugin syntax. It filters tasks to only include those within the current file's folder, specified by the dynamic placeholder {{query.file.folder}}. Tasks are sorted by their file path, ensuring an organized output. It also dynamically utilizes the current file's name without extension to provide context or instruction for the query, inserted as a comment. Dependencies include the Obsidian Tasks plugin and usage within an Obsidian environment with templating enabled. Inputs are implicit via the placeholder variables, and the output is a filtered, sorted task list. Limitations include reliance on Obsidian's internal variables and plugin support.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Stress Test/limit 750.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfolder includes {{query.file.folder}}  \nsort by path  \n\n# Use the filename as an instruction:  \n{{query.file.filenameWithoutExtension}}  \n\n#explain\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Cancelled Date Range\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a cancelled date range filter. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(cancelled in 2021-12-27 2021-12-29) OR NOT (cancelled in 2021-12-27 2021-12-29)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"cancelled in 2021-12-27 2021-12-29\",\n        \"f2\": \"cancelled in 2021-12-27 2021-12-29\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Explained Dates Output for Tasks Query - Obsidian Tasks - text\nDESCRIPTION: Shows the output generated by the 'explain' instruction when evaluating date-based task filters. This output describes how the Tasks plugin interprets the input filters, listing actual resolved dates and their associated weekdays. Requires running the query in Tasks on a specified date. The input is the user's query; the output is an explanation block describing search parameters in detail.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nExplanation of this Tasks code block query:\n\n  starts after 2 years ago =>\n    start date is after 2020-10-21 (Wednesday 21st October 2020) OR no start date\n\n  scheduled after 1 week ago =>\n    scheduled date is after 2022-10-14 (Friday 14th October 2022)\n\n  due before tomorrow =>\n    due date is before 2022-10-22 (Saturday 22nd October 2022)\n```\n\n----------------------------------------\n\nTITLE: Sorting by File Name (Without Extension) in Tasks\nDESCRIPTION: This JavaScript snippet sorts by filename excluding the extension by using `task.file.filenameWithoutExtension`. It is similar to 'sort by filename', but it omits the file extension when sorting. The core input is the filename without the extension.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.filenameWithoutExtension\n```\n\n----------------------------------------\n\nTITLE: Task mixture blocking example - Mermaid diagram\nDESCRIPTION: This Mermaid diagram demonstrates a more complex scenario where a task depends on multiple tasks with different states.  A task is only un-blocked when *all* of the tasks it `dependsOn` have been `DONE` or `CANCELLED` (or marked as `NON_TASK`). Here task 3 depends on tasks 4 and 5, but task 4 is still blocking.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\nclassDef TASK        stroke-width:3px,font-family:monospace;\n\n5[\"\\- [x] not blocking  🆔 abcdef\"]:::TASK\n4[\"\\- [ ] blocking 🆔 ghijkl\"]:::TASK\n3[\"\\- [ ] blocked ⛔ abcdef,ghijkl\"]:::TASK\n3-- depends on --> 5\n3-- depends on --> 4\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Defining Status Symbol ('c') with Unknown Next Symbol\nDESCRIPTION: Defines the 'c' character as a status symbol representing 'Followed by d' (type TODO). It is configured to transition to 'd', but 'd' is not defined as a status symbol, resulting in a configuration error requiring 'd' to be defined.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nc\n```\n\n----------------------------------------\n\nTITLE: Filter by Created Date (before)\nDESCRIPTION: This snippet filters tasks based on whether they were created before a specific date (2021-12-27) using 'OR' and 'NOT' operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      created before 2021-12-27 =>\n        created date is before 2021-12-27 (Monday 27th December 2021)\n      NOT:\n        created before 2021-12-27 =>\n          created date is before 2021-12-27 (Monday 27th December 2021)\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks in Current File using Obsidian Tasks\nDESCRIPTION: This snippet utilizes the Obsidian Tasks plugin's query language within a `tasks` code block. It's configured to find and display tasks located specifically within the current Obsidian note file by using the `path includes {{query.file.path}}` filter.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/non_tasks.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes {{query.file.path}}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Description Includes\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with two 'description includes' filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) OR NOT (description includes d2)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"description includes d2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Excluding/Including Sub-items (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'exclude sub-items' filter combined with 'OR NOT'. This query matches all tasks, as it includes tasks where sub-items are excluded OR tasks where they are not.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_94\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(exclude sub-items) OR NOT (exclude sub-items)\n```\n\n----------------------------------------\n\nTITLE: Sort tasks by custom priority squares\nDESCRIPTION: This snippet sorts tasks based on a custom priority system implemented using colored squares in the task descriptions. It iterates through a predefined array of colored square characters and returns the index of the first square found in the task description. If no squares are found, it returns 999 to maintain the original order of tasks without a priority square.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.description_docs.approved.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function \\\n    const priorities = [...'🟥🟧🟨🟩🟦'];  \\\n    for (let i = 0; i < priorities.length; i++) {  \\\n        if (task.description.includes(priorities[i])) return i;  \\\n    }  \\\n    return 999;\n```\n\n----------------------------------------\n\nTITLE: Grouping by Uppercase Description (JavaScript)\nDESCRIPTION: Groups tasks based on their description after converting it entirely to uppercase using JavaScript's `toUpperCase()` string method. This creates case-insensitive grouping based on the task description. Requires the task object (`task`) and its `description` property.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Grouping.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description.toUpperCase()\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Using Custom Function Filter (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'filter by function' capability combined with 'OR NOT'. This query matches all tasks by applying the custom filter 'task.isDone' OR its negation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_96\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(filter by function task.isDone) OR NOT (filter by function task.isDone)\n```\n\n----------------------------------------\n\nTITLE: Filter by Cancelled Date (before)\nDESCRIPTION: This filter example applies to tasks where the cancellation date is before a specific date (2021-12-27) using 'OR' and 'NOT' operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      cancelled before 2021-12-27 =>\n        cancelled date is before 2021-12-27 (Monday 27th December 2021)\n      NOT:\n        cancelled before 2021-12-27 =>\n          cancelled date is before 2021-12-27 (Monday 27th December 2021)\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (AND NOT)\nDESCRIPTION: This snippet presents a boolean expression which fails due to incorrect delimiter usage. The error message explicitly mentions delimiter constraints.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n'\"not done\" AND NOT (is recurring)'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    \"not done\" AND NOT (is recurring)\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Creating a Todo Callout with Tasks in Obsidian Markdown\nDESCRIPTION: An example of how to create a 'todo' callout in Obsidian with nested task items. The callout contains two tasks, with the second one being indented under the first, both tagged with #task.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/callout.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!todo]\n> - [ ] #task Task in 'callout'\n>     - [ ] #task Task indented in 'callout'\n```\n\n----------------------------------------\n\nTITLE: Explaining a Regex Query in Obsidian Tasks\nDESCRIPTION: Shows how to use the `explain` keyword in an Obsidian Tasks query block to understand how Tasks interprets a specific regular expression filter. This example explains a case-insensitive regex matching a specific file path starting at the root.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Regular Expressions.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nexplain\npath regex matches /^Root/Sub-Folder/Sample File\\.md/i\n```\n\n----------------------------------------\n\nTITLE: Sorting by First Level Tag (Including Hash) - JavaScript\nDESCRIPTION: This snippet extracts the first level tag (root tag) including the '#' prefix. It splits the tag string by '/' and takes the first element. The result includes the leading '#' character.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[0] )\n```\n\n----------------------------------------\n\nTITLE: Testing 'group by priority' Styling - Obsidian Tasks Query\nDESCRIPTION: This query filters tasks in the current file matching \"priority\" and groups them by priority. It is used to test CSS styling applied to group headings based on the priority value, expecting red headings for different priorities when the test CSS snippet `tasks-plugin-smoke-test-query-styling` is enabled. Requires the Obsidian Tasks plugin and the specified CSS snippet. Expected outcome: Red headings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Styling of Queries.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\npath includes Styling of Queries\ndescription includes priority\ngroup by priority\n```\n\n----------------------------------------\n\nTITLE: Adding an Empty Alias in YAML Frontmatter\nDESCRIPTION: Example of YAML frontmatter with an empty alias line that serves as the starting point for the redirect process. This structure needs to be in place before applying the templater template for file redirects.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Redirects - Renaming files.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npublish: true\naliases:\n  - \n--- \n```\n\n----------------------------------------\n\nTITLE: Custom Released Callout Style\nDESCRIPTION: This snippet presents a custom 'released' callout style used within the Obsidian Tasks documentation.  It is displayed in green and is likely used to indicate newly released features or changes. Refer to [[Version numbers in documentation]] for usage context.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Callouts.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> [!released]\n> I will be shown in green\n```\n\n----------------------------------------\n\nTITLE: Filter by Cancelled Date (after)\nDESCRIPTION: This demonstrates filtering tasks where the cancellation date is after a specific date (2021-12-27) using 'OR' and 'NOT' operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      cancelled after 2021-12-27 =>\n        cancelled date is after 2021-12-27 (Monday 27th December 2021)\n      NOT:\n        cancelled after 2021-12-27 =>\n          cancelled date is after 2021-12-27 (Monday 27th December 2021)\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by due date (JavaScript)\nDESCRIPTION: This code snippet filters tasks due on Tuesdays. It uses the `task.due.format('dddd')` property to get the day of the week from the due date and compares it to 'Tuesday'. Note: day of the week may need to be supplied in the local language.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.due.format('dddd') === 'Tuesday'\n```\n\n----------------------------------------\n\nTITLE: Fixing Mismatched Delimiters: Using Consistent Parentheses\nDESCRIPTION: Demonstrates how to fix the mismatched delimiter error by ensuring all sub-expressions in the boolean instruction use the same type of delimiter, in this case, parentheses '(...)'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n(not done) AND (is recurring)\n```\n\n----------------------------------------\n\nTITLE: Identifying Blocked Tasks in Obsidian Tasks\nDESCRIPTION: A tasks query that finds all tasks that are currently blocked by other tasks in the current file. This helps identify which tasks need to wait for dependencies to be resolved before they can be worked on.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies - Worked Example.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nis blocked\n\npath includes {{query.file.path}}\nhide backlink\nhide task count\n```\n\n----------------------------------------\n\nTITLE: Sample Task with Checkbox in Obsidian Task List\nDESCRIPTION: Represents a sample task item within Obsidian, marked as incomplete with a checkbox. This example illustrates how tasks are formatted in Markdown with Obsidian's task list syntax, used for task tracking and management.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_all_property_types_empty.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Task in 'yaml_all_property_types_empty'\n```\n\n----------------------------------------\n\nTITLE: Running a subset of tests\nDESCRIPTION: These commands execute a subset of the automated tests, which saves time when working on a particular area of the codebase. Specific test files or directories can be targeted. The specified file path should be relative to the root of the project.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Introduction to Running the tests.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test Task.test.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn test tests/Query/Filter/DueDateField.test.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn test tests/Query/Filter/\n```\n\n----------------------------------------\n\nTITLE: Showing Tree View for Tasks Queries\nDESCRIPTION: This snippet is an example that demonstrates how to show tree view in Tasks code blocks using the `TQ_show_tree` property, similar to the `short mode` example. The snippet is used to illustrate the feature.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Query File Defaults.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n--- \nTQ_show_tree: true\n---\n```\n\n----------------------------------------\n\nTITLE: Tasks Query - Status Name Includes\nDESCRIPTION: Shows how to search tasks by custom status name using the `status.name includes` filter within a Tasks query. This example finds tasks with a status name that includes the word 'unknown' and groups them by path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_8\n\nLANGUAGE: Tasks\nCODE:\n```\n    ```tasks\n    status.name includes unknown\n    group by path\n    ```\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Invalid Cancelled Date\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with an invalid cancelled date filter. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(cancelled date is invalid) OR NOT (cancelled date is invalid)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"cancelled date is invalid\",\n        \"f2\": \"cancelled date is invalid\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Task Structure with Hierarchy in Markdown\nDESCRIPTION: Shows the syntax for creating tasks in Obsidian Tasks plugin, including parent-child relationships. Tasks are defined using checkbox syntax '- [ ]' with the #task tag, and hierarchy is created through indentation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/inheritance_1parent1child1newroot_after_header.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# first header\n\n- [ ] #task parent task\n    - [ ] #task child task 1\n\n## second header\n\n- [ ] #task root task\n```\n\n----------------------------------------\n\nTITLE: Extracting Top-Level Tag from Task Tags in JavaScript\nDESCRIPTION: This snippet extracts the top-level tag name by mapping over task.tags, splitting each tag string by '/' and retrieving the first segment after removing any leading '#'. It is used for grouping tasks by their primary tag category. Inputs are arrays of tag strings with slash-separated levels. Outputs are strings representing the highest-level tag name without the hash symbol. Requires that each tag be a string formatted like '#tag/subtag'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.tags.advanced_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.tags.map( (tag) => tag.split('/')[0].replace('#', '') )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Placeholder Usage in Tasks Query\nDESCRIPTION: Example of using various file path placeholders in a Tasks query with the 'explain' instruction to show how they're expanded. Shows all available query file path properties.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Placeholders.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexplain\npath includes {{query.file.path}}\npath includes {{query.file.pathWithoutExtension}}\nroot includes {{query.file.root}}\nfolder includes {{query.file.folder}}\nfilename includes {{query.file.filename}}\nfilename includes {{query.file.filenameWithoutExtension}}\n\ndescription includes Some Cryptic String {{! Inline comments are removed before search }}\n```\n\n----------------------------------------\n\nTITLE: Accessing task.due.category.name Property in Obsidian Tasks (JavaScript)\nDESCRIPTION: Documents the `name` property on the `category` object within `task.due` in Obsidian Tasks. This property provides a string representing the due date's category (e.g., 'Future', 'Undated').\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/TaskProperties.test.task_date_fields.approved.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.due.category.name\n```\n\n----------------------------------------\n\nTITLE: Explained Output for Tasks Query with Global Query Active - Obsidian Tasks - text\nDESCRIPTION: Shows the result of running a code block query with 'explain' while a global query is also active. Explains both the global restrictions (like heading includes and task limit) and the local code block filters, with resolved dates presented for date range queries. Inputs are the global and local filter queries; output is a combined explanation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Explaining Queries.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nExplanation of the global query:\n\n  heading includes tasks\n\n  At most 50 tasks.\n\nExplanation of this Tasks code block query:\n\n  not done\n\n  due next week =>\n    due date is between:\n      2022-10-24 (Monday 24th October 2022) and\n      2022-10-30 (Sunday 30th October 2022) inclusive\n```\n\n----------------------------------------\n\nTITLE: Grouping tasks by uppercase description\nDESCRIPTION: This snippet demonstrates grouping tasks by their descriptions converted to uppercase. This is case-insensitive grouping, where 'my description' and 'My Description' would be grouped together. It uses the `toUpperCase()` JavaScript method.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.other_properties_task.description_results.approved.txt#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\ngroup by function task.description.toUpperCase()\nConvert the description to capitals.\n=>\nLONG DESCRIPTION LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT. FUSCE QUAM IPSUM, CONSECTETUR UT DOLOR NEC, FRINGILLA LOBORTIS MI. VESTIBULUM GRAVIDA TINCIDUNT URNA NEC ORNARE. CRAS SIT AMET SAGITTIS SAPIEN, VITAE MATTIS VELIT. VESTIBULUM SEM TORTOR, BLANDIT AT ULTRICES EGET, ULTRICES EGET ODIO. DONEC EFFICITUR PURUS MASSA, VEL MOLESTIE TURPIS TINCIDUNT ID. \nMY DESCRIPTION\nMY DESCRIPTION #CONTEXT/HOME\nMY DESCRIPTION #CONTEXT/WORK\nMY DESCRIPTION #MULTIPLE-TAGS1 #MULTIPLE-TAGS2\nMY DESCRIPTION #PROJECT/PROJECT1\nMY DESCRIPTION #TAG\nMY DESCRIPTION #TAG/SUBTAG\nMY DESCRIPTION #TAG/SUBTAG/SUB-SUB-TAG\nSHORT DESCRIPTION\n```\n\n----------------------------------------\n\nTITLE: Grouping by Uppercase Task Description - JavaScript\nDESCRIPTION: This snippet converts the task description to uppercase and then groups the tasks. It utilizes the `toUpperCase()` method of the string object in JavaScript.  The expression evaluates to the task's description string in uppercase.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.description.toUpperCase()\n```\n\n----------------------------------------\n\nTITLE: Result After Task Completion with 'On Completion' Actions (Plain Text)\nDESCRIPTION: Shows the resulting state of the Markdown task list after completing the tasks from the previous example using the Obsidian Tasks plugin. Demonstrates how tasks marked 'keep' remain as completed ([x]), tasks marked 'delete' are removed, and recurring tasks marked 'delete' regenerate their next instance.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/On Completion.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# My Project Tasks\n- [x] Leave me alone\n- [x] Leave me alone too! 🏁 keep\n- [ ] Delete my completed instance, leave my next instance 📅 2021-05-21 🔁 every day when done 🏁 delete\n```\n\n----------------------------------------\n\nTITLE: Task Status Flowchart Implementation in Mermaid\nDESCRIPTION: A Mermaid flowchart that defines task status styles and relationships between different task types in Obsidian Tasks. The diagram uses custom CSS classes to indicate task states (TODO, DONE, IN_PROGRESS, CANCELLED, NON_TASK) with different colored borders, and maps connections between 37 different task types showing their relationships to regular tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_ITS_Table.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Unchecked\"]:::TODO\n2[\"Regular\"]:::DONE\n3[\"Checked\"]:::DONE\n4[\"Dropped\"]:::CANCELLED\n5[\"Forward\"]:::TODO\n6[\"Date\"]:::TODO\n7[\"Question\"]:::TODO\n8[\"Half Done\"]:::IN_PROGRESS\n9[\"Add\"]:::TODO\n10[\"Research\"]:::TODO\n11[\"Important\"]:::TODO\n12[\"Idea\"]:::TODO\n13[\"Brainstorm\"]:::TODO\n14[\"Pro\"]:::TODO\n15[\"Con\"]:::TODO\n16[\"Quote\"]:::TODO\n17[\"Note\"]:::TODO\n18[\"Bookmark\"]:::TODO\n19[\"Information\"]:::TODO\n20[\"Paraphrase\"]:::TODO\n21[\"Location\"]:::TODO\n22[\"Example\"]:::TODO\n23[\"Answer\"]:::TODO\n24[\"Reward\"]:::TODO\n25[\"Choice\"]:::TODO\n26[\"Doing\"]:::IN_PROGRESS\n27[\"Time\"]:::TODO\n28[\"Character / Person\"]:::TODO\n29[\"Talk\"]:::TODO\n30[\"Outline / Plot\"]:::TODO\n31[\"Conflict\"]:::TODO\n32[\"World\"]:::TODO\n33[\"Clue / Find\"]:::TODO\n34[\"Foreshadow\"]:::TODO\n35[\"Favorite / Health\"]:::TODO\n36[\"Symbolism\"]:::TODO\n37[\"Secret\"]:::TODO\n1 --> 2\n2 --> 1\n3 --> 1\n4 --> 1\n5 --> 2\n6 --> 2\n7 --> 2\n8 --> 2\n9 --> 2\n10 --> 2\n11 --> 2\n12 --> 2\n13 --> 2\n14 --> 2\n15 --> 2\n16 --> 2\n17 --> 2\n18 --> 2\n19 --> 2\n20 --> 2\n21 --> 2\n22 --> 2\n23 --> 2\n24 --> 2\n25 --> 2\n26 --> 2\n27 --> 2\n28 --> 2\n29 --> 2\n30 --> 2\n31 --> 2\n32 --> 2\n33 --> 2\n34 --> 2\n35 --> 2\n36 --> 2\n37 --> 2\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Tasks query result - showing only unblocked\nDESCRIPTION: This is the result of the query when the dependent task is blocked, thus only showing the 'Build a first draft' task. The Task 'Test with users' is not shown because it depends on the first task which is not complete.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n- [ ] Build a first draft 🆔 4ijuhy\n```\n\n----------------------------------------\n\nTITLE: Generated Instruction based on TQ_short_mode\nDESCRIPTION: This snippet shows the `short mode` instruction that is generated in Tasks code blocks when the `TQ_short_mode` property is set to `true`. It is a single line text file representing the injected instruction.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Query File Defaults.md#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nshort mode\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Simple AND Expression with Parentheses\nDESCRIPTION: Demonstrates the preprocessing of a basic boolean AND expression where both operands ('not done', 'is recurring') are enclosed in parentheses. The output is a tokenized array representing the structured expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) AND (is recurring)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"(\",\n    \"not done\",\n    \") AND (\",\n    \"is recurring\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Triple Filter Combination with Boolean OR\nDESCRIPTION: Example of combining multiple filters with OR operator. Shows how to find tasks that match any of three conditions: containing d1, containing d2, or having medium priority.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_71\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) OR (description includes d2) OR (priority medium)'\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Frontmatter Tags in Obsidian Tasks\nDESCRIPTION: A query that filters tasks based on whether the file containing them has a specific tag in its frontmatter. This example searches for tasks in notes that have the '#examples' tag in their frontmatter properties.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/How To/Find tasks in notes with particular tag.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfilter by function task.file.property('tags').includes('#examples')\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by folder path including subfolders (JavaScript)\nDESCRIPTION: This code snippet filters tasks located in files within the \"Work/Projects/\" folder and all its subfolders, using the `includes()` method to check if the folder path contains the specified string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder.includes(\"Work/Projects/\")\n```\n\n----------------------------------------\n\nTITLE: Grouping by Due Date Category - JavaScript\nDESCRIPTION: This snippet groups tasks by the category of their due date (Invalid date, Overdue, Today, Future, Undated). It utilizes the `task.due.category.groupText` property.  The expression evaluates to a string representing the category of the task's due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.due.category.groupText\n```\n\n----------------------------------------\n\nTITLE: Filtering Blocking and Not Blocked Tasks\nDESCRIPTION: This Obsidian Tasks query filters for tasks that are blocking other tasks and are not blocked themselves, implying they should be done soon. It also restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nis blocking\nis not blocked\n# by definition these are all 'not done'\n\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Styling Tasks with Custom Status Symbols\nDESCRIPTION: CSS snippet that adds a green halo effect around checkboxes of tasks with a specific status symbol (\"/\"), using the data-task attribute selector.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nli.task-list-item[data-task=\"/\"] .task-list-item-checkbox {\n    box-shadow: 0 0 10px green !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Perform Basic Arithmetic in JavaScript\nDESCRIPTION: Declares a constant variable `x`, assigns it the result of an addition (`1 + 1`), and then returns the result of multiplying `x` by itself (`x * x`). Shows variable declaration and basic arithmetic.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/Expression.test.Expression_returns_and_functions.approved.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nconst x = 1 + 1; return x * x\n=> 4\n```\n\n----------------------------------------\n\nTITLE: Tasks query for blocking tasks\nDESCRIPTION: This Tasks query searches for tasks that are currently blocking other tasks. Tasks are considered 'blocking' if they are not yet done and there is at least one other task directly depending on them, that is also not yet done.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nis blocking\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Recurrence Rule (not includes)\nDESCRIPTION: This snippet shows how to filter tasks whose recurrence rule does not include the string \"every week\". It is case-sensitive. The filter uses the `!task.recurrenceRule.includes(\"every week\")` function.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.recurrenceRule_results.approved.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n!task.recurrenceRule.includes(\"every week\")\n```\n\n----------------------------------------\n\nTITLE: Description and Priority Filters with OR and NOT\nDESCRIPTION: Example of combining text inclusion filter with priority filter using OR and NOT operators. Shows how to find tasks that either contain specific text or don't have medium priority.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_69\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) OR   NOT (priority medium)'\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters (Quotes/Parentheses) with Different Filters\nDESCRIPTION: Another example reinforcing the mixed delimiter error, using 'has due date' in quotes and 'description includes special' in parentheses with an OR operator.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'\"has due date\" OR (description includes special)'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Tasks query for blocked tasks\nDESCRIPTION: This Tasks query searches for tasks that are currently blocked. Tasks are considered 'blocked' if they are not yet done and there is at least one other task they directly depend on, that is also not yet done.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nis blocked\n```\n\n----------------------------------------\n\nTITLE: Handling Recurrence and Root Path Filters\nDESCRIPTION: Demonstrates parsing of recurrence and root path filters in boolean expressions. The system correctly identifies specialized filter types like recurrence patterns and root path conditions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"recurrence includes wednesday\",\n        \"f2\": \"recurrence includes wednesday\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Explanation of Backslash Search - Tasks Plugin\nDESCRIPTION: This code snippet shows the explanation of the backslash search example. It demonstrates that `\\\\` is interpreted as `\\` when searching task descriptions. The `explain` instruction is key to verifying this behavior.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Line Continuations.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nExplanation of this Tasks code block query:\n\n  description includes \\\\ =>\n  description includes \\\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Recurrence using Dataview in Markdown\nDESCRIPTION: Explains how to make a task recurring using the inline Dataview field `[repeat:: schedule]`. Shows an example demonstrating how to define a daily recurring task that triggers upon completion.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Formats/Dataview Format.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Is a recurring task  [repeat:: every day when done]\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by query folder path and sub-folders in JavaScript\nDESCRIPTION: This JavaScript snippet filters tasks located in the same folder as the current query and any of its sub-folders. It uses `task.file.folder.includes(query.file.folder)` to match tasks in the current folder context and any subfolders it may have.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Filters.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder.includes( query.file.folder )\n```\n\n----------------------------------------\n\nTITLE: Task with Block Link Example\nDESCRIPTION: Demonstrates the markdown syntax for creating a task and including a block link. The block link will still work even with metadata such as dates, priorities, recurrence rules.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Getting Started.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-   [ ] Task with block link _works_ 📅 2021-04-09 ^e5bebf\n```\n\n----------------------------------------\n\nTITLE: Combined Description and Priority Filters with AND and NOT\nDESCRIPTION: Example of combining text inclusion filter with priority filter using AND and NOT operators. Shows how to filter tasks containing specific text that don't have medium priority.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_66\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) AND   NOT (priority medium)'\n```\n\n----------------------------------------\n\nTITLE: QuickAdd Format for Task with Priority, Reminder, and Due Date\nDESCRIPTION: This markdown snippet shows a capture format for QuickAdd.  This is used for a task with priority, reminder, and due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Other Plugins/QuickAdd.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n#task {{VALUE:task name}} ⏰ {{VDATE:reminder date and time,YYYY-MM-DD HH:mm}} {{VALUE:🔺,⏫,🔼,🔽,⏬️, }} 📅 {{VDATE:due date,YYYY-MM-DD}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dependency Properties/Methods in JavaScript Scripting\nDESCRIPTION: Properties and methods available on a `task` object within a JavaScript scripting block to access the task's ID or determine its blocking/blocked status relative to other tasks in the query result.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.id\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.dependsOn\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.isBlocked(query.allTasks)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.isBlocking(query.allTasks)\n```\n\n----------------------------------------\n\nTITLE: Sorting by Cancelled Date's Day of the Week\nDESCRIPTION: Sorts tasks by the day of the week on which they were cancelled, in alphabetical order.  Requires the `task.cancelled` property to be available for use with dates, which is achieved with the plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.cancelled.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with Recurrence Rule Not Including 'every week' (Case-Sensitive)\nDESCRIPTION: This snippet filters tasks whose recurrence rule does not include the phrase 'every week'. It performs a case-sensitive exclusion check. It requires the task object with 'recurrenceRule' property, returning tasks that do not contain 'every week' as specified.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.recurrenceRule_docs.approved.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function !task.recurrenceRule.includes(\"every week\")\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by project property existence in Obsidian Tasks\nDESCRIPTION: This query finds all tasks where the file has a 'project' property defined and groups them by their project property value. This provides an overview of tasks across all projects.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Frontmatter/Project Search.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfilter by function task.file.hasProperty('project')\ngroup by function task.file.property('project')\n```\n\n----------------------------------------\n\nTITLE: Defining Task Status Flowchart Using Mermaid Language\nDESCRIPTION: This Mermaid flowchart models the lifecycle transitions between task statuses in a task management system. It defines custom CSS classes to style task nodes representing TODO, IN_PROGRESS, DONE, CANCELLED, and NON_TASK states with distinct stroke colors and widths. The flowchart includes three main nodes depicting transitions from TODO to IN_PROGRESS, IN_PROGRESS to DONE, and DONE back to TODO, illustrating a repetitive task workflow cycle. No external dependencies are required beyond Mermaid support. Input is the Mermaid diagram syntax, and the output is a rendered flowchart visualization.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_todo-in_progress-done.approved.detailed.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"'Todo'<br>[ ] -> [/]<br>(TODO)\"]:::TODO\n2[\"'In Progress'<br>[/] -> [x]<br>(IN_PROGRESS)\"]:::IN_PROGRESS\n3[\"'Done'<br>[x] -> [ ]<br>(DONE)\"]:::DONE\n1 --> 2\n2 --> 3\n3 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - heading does not include\nDESCRIPTION: Simplifies 'OR NOT' expression with 'heading does not include wibble'. 'heading does not include wibble' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_46\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"heading does not include wibble\",\n        \"f2\": \"heading does not include wibble\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tasks Plugin Query: Done Tasks Today\nDESCRIPTION: This is a Tasks plugin query to display tasks completed on the current day. It uses the `date:YYYY-MM-DD` template to represent the current date. This provides an overview of completed tasks for the day.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Daily Agenda.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```tasks\ndone on {{date:YYYY-MM-DD}}\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Empty List Property in Obsidian Tasks\nDESCRIPTION: A custom function filter that finds tasks in files where a specific list property exists but is empty. It checks if 'sample_list_property' has exactly zero items.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.obsidian_properties_task.file.frontmatter_results.approved.txt#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nfilter by function task.file.property(\"sample_list_property\")?.length === 0\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Status Type Alphabetically in JavaScript\nDESCRIPTION: Custom sorting function that sorts tasks by their status type in alphabetical order. Unlike the built-in 'Sort by status.type' command which uses a predefined order, this function sorts status types alphabetically.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.statuses_task.status.type_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.status.type\n```\n\n----------------------------------------\n\nTITLE: Configuring Obsidian Tasks Query via Frontmatter (Text Block)\nDESCRIPTION: This snippet uses YAML-like frontmatter within a `text` block to configure Obsidian Tasks query behavior for the current note. `TQ_extra_instructions` adds specific query lines ('folder includes {{query.file.folder}}', 'not done') to subsequent queries, `TQ_short_mode` enables short mode display, and `TQ_show_tree` enables tree view. These settings override global defaults for queries in this note.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Explain/DocsSamplesForExplain.test.explain_query_file_defaults_file_content.approved.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n---\nTQ_extra_instructions: |-\n  folder includes {{query.file.folder}}\n  not done\nTQ_short_mode: true\nTQ_show_tree: true\n---\n```\n\n----------------------------------------\n\nTITLE: Setting window.moment for Tests\nDESCRIPTION: Required code to fix calls to window.moment() in tests by assigning the imported moment to the window object. This prevents 'window.moment is not a function' errors.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/How do I use Moment in tests.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.moment = moment;\n```\n\n----------------------------------------\n\nTITLE: Filter by Start Date and Description (NOT, another example)\nDESCRIPTION: This filter uses 'HAS START DATE' and filters out descriptions that include 'SPECIAL', combining 'OR' and 'NOT'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      HAS START DATE\n      NOT:\n        DESCRIPTION INCLUDES SPECIAL\n```\n\n----------------------------------------\n\nTITLE: Dual Description Filters with AND and NOT\nDESCRIPTION: Example of combining two description filters with AND and NOT operators. Shows how to find tasks that include one term but exclude another term.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_68\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) AND NOT (description includes d2)'\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Kanban Plugin Property in Obsidian Tasks\nDESCRIPTION: A custom function filter that finds tasks in files managed by the Kanban Plugin. It checks if a file has the property 'kanban-plugin' and returns matching tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.obsidian_properties_task.file.frontmatter_results.approved.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfilter by function task.file.hasProperty('kanban-plugin')\n```\n\n----------------------------------------\n\nTITLE: Description and Priority Filters with Boolean OR\nDESCRIPTION: Example of combining text inclusion filter with priority filter using OR operator. Shows how to find tasks that either contain specific text or have medium priority.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_72\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) OR (priority medium)'\n```\n\n----------------------------------------\n\nTITLE: Filter tasks by folder path (JavaScript)\nDESCRIPTION: This JavaScript snippet filters tasks in files located directly within the \"Work/Projects/\" folder. The `===` comparison requires the trailing slash to be included for an exact match.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Filters.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfilter by function task.file.folder === \"Work/Projects/\"\n```\n\n----------------------------------------\n\nTITLE: Filtering by Status in Obsidian Tasks Plugin Syntax\nDESCRIPTION: Commands used within a `tasks` block to filter tasks based on their completion status or status name/type. These are added on new lines after the initial `tasks` line.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_0\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\ndone\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nnot done\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nstatus.name (includes, does not include) <string>\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nstatus.name (regex matches, regex does not match) /regex/i\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nstatus.type (is, is not) (TODO, DONE, IN_PROGRESS, CANCELLED, NON_TASK)\n```\n\n----------------------------------------\n\nTITLE: Filtering Blocked Tasks\nDESCRIPTION: This Obsidian Tasks query filters for tasks that are blocked by other tasks, indicating they cannot be done yet. It restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nis blocked\n# by definition these are all 'not done'\n\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Due Date using Custom Category Function\nDESCRIPTION: A tasks query using a custom function to sort tasks by due date categories. Shows how tasks with invalid dates should appear before tasks with valid dates.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Invalid dates with Sorting and Grouping.md#_snippet_3\n\nLANGUAGE: tasks\nCODE:\n```\nsort by function task.due.category.groupText\n\npath includes {{query.file.path}}\nhide backlinks\nhide postpone button\nhide task count\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Status Type (Alphabetical)\nDESCRIPTION: This snippet groups tasks by their status type.  It utilizes the 'task.status.type' property which results in alphabetical sorting of the status types. This is different from the default sorting behavior of the Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.statuses_task.status.type_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.status.type\n```\n\n----------------------------------------\n\nTITLE: Description Filters with Boolean XOR\nDESCRIPTION: Example of using XOR (exclusive OR) operator with description filters. Shows how to find tasks that contain either d1 or d2, but not both.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_74\n\nLANGUAGE: text\nCODE:\n```\n'(description includes d1) XOR (description includes d2)'\n```\n\n----------------------------------------\n\nTITLE: Filtering tasks by exact date and path in Obsidian Tasks\nDESCRIPTION: Finds incomplete tasks due on a specific date and located in notes with 'GitHub' in their path. Shows how to combine exact date matching with path filtering.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Examples.md#_snippet_6\n\nLANGUAGE: tasks\nCODE:\n```\nnot done\ndue on 2021-04-09\npath includes GitHub\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Recurrence Rule (includes)\nDESCRIPTION: This snippet shows how to filter tasks whose recurrence rule includes the string \"every week\". It is case-sensitive. The filter uses the `task.recurrenceRule.includes(\"every week\")` function.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.recurrenceRule_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.recurrenceRule.includes(\"every week\")\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - has tags\nDESCRIPTION: Simplifies an expression with 'OR NOT' involving 'has tags'. 'has tags' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_45\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"has tags\",\n        \"f2\": \"has tags\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Date and Date & Time File Properties - YAML\nDESCRIPTION: Shows the standard YAML format used by Obsidian for storing Date (`YYYY-MM-DD`) and Date & Time (`YYYY-MM-DDTHH:MM:SS`) property values in the file frontmatter.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Obsidian Properties.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2020-08-21\ntime: 2020-08-21T10:30:00\n---\n```\n\n----------------------------------------\n\nTITLE: Grouping by Priority Name - JavaScript\nDESCRIPTION: This snippet sorts the groups by priority name, from `High priority` to `Normal priority` by appending the string \" priority\" to `task.priorityName`. The expression evaluates to the combined priority name string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Grouping.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.priorityName +' priority'\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters (Quotes and Parentheses) in OR\nDESCRIPTION: Illustrates a parsing error when mixing double quotes and parentheses as delimiters for operands in an OR expression. Consistent delimiters are required.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'\"not done\" OR (is recurring)'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout for Tasks Plugin in CSS\nDESCRIPTION: This CSS snippet organizes task items in a 3-line grid layout. The description appears on the first line, various components on the second line, and urgency/backlink/buttons on the third line if displayed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Advanced/Styling.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nul > li.plugin-tasks-list-item {\n    grid-template-columns: 25px auto;\n    display: grid;\n    align-items: top;\n}\n\nspan.task-description {\n    grid-row: 1;\n    grid-column: 1/10;\n}\n\nspan.tasks-backlink {\n    grid-row: 2;\n    grid-column: 2;\n    font-size: small;\n}\n\nspan.task-recurring {\n    grid-row: 2;\n    font-size: small;\n    width: max-content;\n}\n\nspan.task-due {\n    grid-row: 2;\n    font-size: small;\n    width: max-content;\n}\n\nspan.task-done {\n    grid-row: 2;\n    font-size: small;\n    width: max-content;\n}\n\n.tasks-list-text {\n    position: relative;\n    display: inline-grid;\n    width: max-content;\n    grid-column-gap: 10px;\n}\n\nspan.task-extras {\n    grid-row: 2;\n    grid-column: 2;\n    font-size: small;\n}\n\n/* Make sure nested bullets in Reading mode get the whole width of the grid */\nli.task-list-item ul.has-list-bullet {\n grid-row: 3;\n grid-column: 1/10;\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting by Happens Date's Day of the Week\nDESCRIPTION: Sorts tasks by the day of the week on which they happen (earliest of start, scheduled, or due date), alphabetically. Requires the `task.happens` property to be available for use with dates, which is achieved with the plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.happens.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Simplifying Complex Boolean Expression\nDESCRIPTION: This example demonstrates simplifying a complex boolean expression using nested conditions and logical operators.  It maps 'has start date', 'description includes some', and 'has due date' to aliases 'f1', 'f2', and 'f3' respectively.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_37\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) AND ((f2) OR (f3))\",\n    \"filters\": {\n        \"f1\": \"has start date\",\n        \"f2\": \"description includes some\",\n        \"f3\": \"has due date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Malformed Boolean Query: Nested Delimiters Example (Obsidian Tasks, text)\nDESCRIPTION: Example illustrating a malformed query where filter sub-expressions use delimiters that conflict with the filter content, leading to bracket mismatch errors. Requires only the Tasks plugin. The input is a Boolean filter with nested parentheses, which will trigger a parse error.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n(description includes (maybe)) OR (description includes (perhaps))\n```\n\n----------------------------------------\n\nTITLE: Generating a Task Status Flowchart with Mermaid Syntax\nDESCRIPTION: This Mermaid diagram defines task statuses as nodes with specific styles and illustrates transition arrows between them. It enables visualizing task workflows in Obsidian, aiding in task state management.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_Minimal_Table.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"to-do\"]:::TODO\n2[\"incomplete\"]:::IN_PROGRESS\n3[\"done\"]:::DONE\n4[\"canceled\"]:::CANCELLED\n5[\"forwarded\"]:::TODO\n6[\"scheduling\"]:::TODO\n7[\"question\"]:::TODO\n8[\"important\"]:::TODO\n9[\"star\"]:::TODO\n10[\"quote\"]:::TODO\n11[\"location\"]:::TODO\n12[\"bookmark\"]:::TODO\n13[\"information\"]:::TODO\n14[\"savings\"]:::TODO\n15[\"idea\"]:::TODO\n16[\"pros\"]:::TODO\n17[\"cons\"]:::TODO\n18[\"fire\"]:::TODO\n19[\"key\"]:::TODO\n20[\"win\"]:::TODO\n21[\"up\"]:::TODO\n22[\"down\"]:::TODO\n\n1 --> 3\n2 --> 3\n3 --> 1\n4 --> 1\n5 --> 3\n6 --> 3\n7 --> 3\n8 --> 3\n9 --> 3\n10 --> 3\n11 --> 3\n12 --> 3\n13 --> 3\n14 --> 3\n15 --> 3\n16 --> 3\n17 --> 3\n18 --> 3\n19 --> 3\n20 --> 3\n21 --> 3\n22 --> 3\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Creation Date Weekday Using JavaScript\nDESCRIPTION: This snippet shows how to sort tasks by the day of the week of their creation date, formatted as a string (e.g., Monday, Tuesday). It requires tasks to have a 'created' date property accessible with a 'format' method that returns the day name. The sorting is alphabetical on the weekday string, and tasks with invalid or missing dates appear accordingly. The input is a collection of tasks, each with a creation timestamp; the output is a reordered list of these tasks sorted by the weekday name as a string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.created_results.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort by function task.created.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Created Day of Week in JavaScript\nDESCRIPTION: This code snippet sorts tasks alphabetically by the day of the week they were created. It uses the format() method with 'dddd' parameter which returns the full day name (e.g., Monday, Tuesday).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.dates_task.created_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.created.format(\"dddd\")\n```\n\n----------------------------------------\n\nTITLE: Finding Duplicate IDs in Obsidian Tasks (Slow)\nDESCRIPTION: This snippet implements a custom filter to find tasks with duplicate non-empty IDs. It iterates through all tasks for each task, making it slow on large datasets. The `filter by function` takes a task as input and returns true if the task's ID is duplicated, false otherwise. It uses a nested loop to compare each task's ID with all other tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Filters With Simple Caching.md#_snippet_0\n\nLANGUAGE: tasks\nCODE:\n```\nfilter by function { \\ \n    const thisValue = task.id; \\ \n    if (thisValue === '') return false; \\ \n    let count = 0; \\ \n    query.allTasks.forEach(t => { \\ \n        if (t.id === thisValue) count += 1; \\ \n    }); \\ \n    return (count > 1); \\ \n} \n\ngroup by id\n```\n\n----------------------------------------\n\nTITLE: Displaying Filtered Task List in Obsidian Markdown\nDESCRIPTION: This snippet shows a Markdown-formatted checklist representing tasks returned from a custom filter in Obsidian. Each item includes a label, priority indication, and relevant emoji for quick identification. No external dependencies are required beyond Obsidian and its Tasks plugin. Each line is a standard Markdown checkbox; input reflects the results from a filtered query, and output is a human-readable task list where each task's priority level is visually indicated.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.priorityName_results.approved.txt#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] #task Highest priority 🔺\n- [ ] #task High priority ⏫\n- [ ] #task Medium priority 🔼\n- [ ] #task Low priority 🔽\n- [ ] #task Lowest priority ⏬\n```\n\n----------------------------------------\n\nTITLE: Diagram for Immobile Display-Only Statuses\nDESCRIPTION: A Mermaid diagram showing statuses that are purely for display, which do not toggle or affect task states even when clicked. Useful for annotative or informational purposes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Example Statuses.md#_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Bookmark\"]:::NON_TASK\n2[\"Example\"]:::NON_TASK\n3[\"Information\"]:::NON_TASK\n4[\"Paraphrase\"]:::NON_TASK\n5[\"Quote\"]:::NON_TASK\n1 --> 1\n2 --> 2\n3 --> 3\n4 --> 4\n5 --> 5\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Accessing Date Properties in JavaScript Scripting\nDESCRIPTION: Properties available on a `task` object within a JavaScript scripting block to access the task's done date or creation date. These properties typically return date objects or null.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.done\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.created\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by File Creation Date in Obsidian Tasks\nDESCRIPTION: This snippet groups tasks by their file's creation date property. If a task's file doesn't have a creation date property, it will be grouped under 'no creation date'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.obsidian_properties_task.file.frontmatter_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.file.property('creation date') ?? 'no creation date'\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - is not blocking\nDESCRIPTION: Simplifies 'OR NOT' expression with 'is not blocking'. 'is not blocking' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_55\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"is not blocking\",\n        \"f2\": \"is not blocking\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: QuickAdd Format for Task with Due Date\nDESCRIPTION: This markdown snippet shows a capture format for QuickAdd.  This is used for a task with only the task name and due date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Other Plugins/QuickAdd.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#task {{VALUE:task name}} 📅 {{VDATE:due date,YYYY-MM-DD}}\n```\n\n----------------------------------------\n\nTITLE: Getting Full File Path (JavaScript)\nDESCRIPTION: Accesses the full path of the file containing the query, including the filename and extension. Useful for identifying the exact location of the query file within the vault.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/QueryProperties.test.query_file_properties.approved.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.path\n```\n\n----------------------------------------\n\nTITLE: Generated Instruction based on TQ_show_tree\nDESCRIPTION: This snippet demonstrates the expected output that is generated when the `TQ_show_tree` property is set to true. This shows the generated instruction.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Query File Defaults.md#_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nshow tree\n```\n\n----------------------------------------\n\nTITLE: Filtering by Dependencies/ID in Obsidian Tasks Plugin Syntax\nDESCRIPTION: Commands used within a `tasks` block to filter tasks based on their ID or dependency relationships (dependsOn, is blocked by, is blocking).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_3\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nid (includes, does not include) <string>\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nid (regex matches, regex does not match) /regex/i\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nhas id\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nno id\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nhas depends on\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nno depends on\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nis blocked\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nis not blocked\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nis blocking\n```\n\nLANGUAGE: Obsidian Tasks Plugin Syntax\nCODE:\n```\nis not blocking\n```\n\n----------------------------------------\n\nTITLE: Regex Matching Tag\nDESCRIPTION: Demonstrates regular expression matching against a single tag of a task. It includes the regex pattern and any flags used. The examples provided demonstrate successful matches and non-matches.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/TextField.test.explains_regular_expression_searches_bulk_test.approved.txt#_snippet_6\n\nLANGUAGE: regex\nCODE:\n```\n'.' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'#book$' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'#t$' with no flags\n```\n\n----------------------------------------\n\nTITLE: Description Filters with Backslash Character\nDESCRIPTION: Example of searching for text containing a backslash character. Shows how to create filters that match text with special characters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_76\n\nLANGUAGE: text\nCODE:\n```\n'(description includes line 1) OR (description includes line 1 continued with \\\\ backslash)'\n```\n\n----------------------------------------\n\nTITLE: Regex Matching Path\nDESCRIPTION: Demonstrates regular expression matching against the path of a task file. It includes the regex pattern and any flags used.  The snippets show both matching and non-matching examples.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/TextField.test.explains_regular_expression_searches_bulk_test.approved.txt#_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n'^_meta' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'^_templates' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'sadfasfdafa' with flag 'i'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'sadfasfdafa' with flags 'gim'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'w.bble' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'(george phone|exercise|100th|knee|TRVs|HWRC|2023-03-21 Python Pairing on the Hub with so-and-so|Epson|Fred's flat|1519 - feat - Theme-ability|McDermid)' with flag 'i'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'(george)' with flag 'i'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'Log' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'clare' with flag 'i'\n```\n\nLANGUAGE: regex\nCODE:\n```\n'root\\/sub-folder\\/sub-sub-folder\\/index\\.md' with no flags\n```\n\n----------------------------------------\n\nTITLE: Accessing Status Properties in JavaScript Scripting\nDESCRIPTION: Properties available on a `task` object within a JavaScript scripting block (used with `eval`) to access details about the task's status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Quick Reference.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.isDone\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.status.name\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.status.type\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.status.typeGroupText\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.status.symbol\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.status.nextSymbol\n```\n\n----------------------------------------\n\nTITLE: Running Jekyll Documentation Server with Docker\nDESCRIPTION: Command to start the Jekyll documentation server using Docker. This is run from the docs directory of the Obsidian Tasks project.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Old Jekyll-based docs/Test documentation locally with Jekyll.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd obsidian-tasks/docs\n./docker_start\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Invalid Done Date (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'done date is invalid' filter combined with 'OR NOT'. This query matches all tasks by including those with an invalid done date OR those without an invalid done date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_81\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(done date is invalid) OR NOT (done date is invalid)\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - id includes AND\nDESCRIPTION: Simplifies 'OR NOT' expression with 'id includes AND'. 'id includes AND' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_50\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"id includes AND\",\n        \"f2\": \"id includes AND\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sort by Status Symbol - Javascript\nDESCRIPTION: This snippet demonstrates custom sorting by the task's status symbol character (e.g., ' ', 'x', '/'). It uses the `task.status.symbol` property with `sort by function` to order tasks based on the character code or alphabetical order of their status symbols. There is no standard `sort by` instruction for status symbols.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Sorting.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.status.symbol\n```\n\n----------------------------------------\n\nTITLE: Sorting by File Folder in JavaScript\nDESCRIPTION: Sorts tasks by the folder they are located in. The `task.file.folder` property is used to compare the folders. The output is a reordered list of tasks.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Custom Sorting.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsort by function task.file.folder\n```\n\n----------------------------------------\n\nTITLE: Querying Blocked Tasks\nDESCRIPTION: This Obsidian Tasks query filters for tasks that are currently blocked by other tasks. It restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_6\n\nLANGUAGE: tasks\nCODE:\n```\nis blocked\n\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Hiding Depends On\nDESCRIPTION: This Obsidian Tasks query hides the depends on field from being displayed in the search results. It restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_10\n\nLANGUAGE: tasks\nCODE:\n```\nhide depends on\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Getting File Root Path (JavaScript)\nDESCRIPTION: Gets the root folder path relative to the vault root. Useful for queries that need to operate based on files within the top-level directory.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/QueryProperties.test.query_file_properties.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery.file.root\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Nested Parentheses in AND Expression\nDESCRIPTION: Shows preprocessing of an AND expression with extra nested parentheses around the operands. The tokenizer correctly handles and preserves the nested structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'((not done)) AND ((is recurring))'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"((\",\n    \"not done\",\n    \")\",\n    \") AND (\",\n    \"(\",\n    \"is recurring\",\n    \"))\"\n]\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Obsidian Journal\nDESCRIPTION: YAML frontmatter configuration for an Obsidian journal entry that specifies tags and publishing settings. The entry is tagged as 'journal' and set not to be published.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/jason_properties.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  \"tags\": \"journal\",\n  \"publish\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Preprocessing AND NOT Expression\nDESCRIPTION: Shows preprocessing of an expression combining AND with a negated operand using NOT. Both operands are enclosed in parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) AND NOT (is recurring)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"(\",\n    \"not done\",\n    \") AND\",\n    \" \",\n    \"NOT (\",\n    \"is recurring\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Task Item with Tag\nDESCRIPTION: A markdown checkbox task item using the Obsidian Tasks plugin syntax. The task is tagged with '#task' and belongs to the 'jason_properties' context.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/jason_properties.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Task in 'jason_properties'\n```\n\n----------------------------------------\n\nTITLE: Hiding Task ID\nDESCRIPTION: This Obsidian Tasks query hides the task ID from being displayed in the search results. It restricts the search to the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Dependencies Samples.md#_snippet_9\n\nLANGUAGE: tasks\nCODE:\n```\nhide id\npath includes {{query.file.path}}\n#explain\n```\n\n----------------------------------------\n\nTITLE: Tasks query for not blocked tasks\nDESCRIPTION: This Tasks query searches for tasks that are not blocked and not done. This query is helpful in finding tasks that are ready to be worked on.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nnot done\nis not blocked\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Completion Status (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the simple 'done' status filter combined with 'OR NOT'. This query matches all tasks by selecting those marked as done OR those not marked as done.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_85\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(done) OR NOT (done)\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Complex Nested OR/AND with Function Filters\nDESCRIPTION: Illustrates preprocessing of a complex nested OR/AND expression similar to the previous one, but using 'filter by function' syntax within the parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'( (filter by function task.description.includes('a')) OR (filter by function task.description.includes('b')) OR (filter by function task.description.includes('c')) ) AND ( (filter by function task.description.includes('d')) OR (filter by function task.description.includes('e')) OR (filter by function task.description.includes('f')) )'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"( (\",\n    \"filter by function task.description.includes('a'\",\n    \")\",\n    \") OR (\",\n    \"filter by function task.description.includes('b'\",\n    \")\",\n    \") OR (\",\n    \"filter by function task.description.includes('c'\",\n    \")) \",\n    \") AND (\",\n    \" (\",\n    \"filter by function task.description.includes('d'\",\n    \")\",\n    \") OR (\",\n    \"filter by function task.description.includes('e'\",\n    \")\",\n    \") OR (\",\n    \"filter by function task.description.includes('f'\",\n    \")) )\"\n]\n```\n\n----------------------------------------\n\nTITLE: Grouping Tasks by Dependency IDs in JavaScript\nDESCRIPTION: Groups tasks by the IDs of the tasks they depend on using the task.dependsOn property. This method allows categorizing tasks according to their dependencies, listing tasks multiple times if they depend on more than one other task. It requires task objects to have a dependsOn property containing dependent task IDs. A noted limitation is that the tasks being depended on are not accessible directly with this approach.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dependencies_task.dependsOn_docs.approved.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngroup by function task.dependsOn\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with Broken Recurrence Rules in Obsidian Tasks Plugin - JavaScript\nDESCRIPTION: Identifies tasks that have broken or invalid recurrence rules by combining a negated 'isRecurring' status with a search for the recurrence emoji ('🔁') within the task's original markdown text. This leverages the implementation detail that recurrence markers are removed even if invalid, so presence in 'task.originalMarkdown' indicates an attempt at recurrence despite 'isRecurring' being false. This snippet assumes the use of the Tasks emoji format and requires that the task data expose 'originalMarkdown' and 'isRecurring' properties.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.other_properties_task.isRecurring_docs.approved.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfilter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁')\n```\n\n----------------------------------------\n\nTITLE: Parsing 'NOT description includes d1'\nDESCRIPTION: This example demonstrates parsing a query that filters tasks based on description including a specific string with the NOT keyword.  The 'NOT' operator is used to negate the condition, which filters out the tasks with a description including the substring.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n[\n    \"NOT (\",\n    \"description includes d1\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Simplifying Long AND Query with Multiple Description Includes (Spaced)\nDESCRIPTION: Example showing the simplification of a long Obsidian Tasks query using the AND operator with numerous 'description includes' filters, separated by multiple spaces. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes 1)   AND   (description includes 2)   AND   (description includes 3)   AND   (description includes 4)   AND   (description includes 5)   AND   (description includes 6)   AND   (description includes 7)   AND   (description includes 8)   AND   (description includes 9)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1)   AND   (f2)   AND   (f3)   AND   (f4)   AND   (f5)   AND   (f6)   AND   (f7)   AND   (f8)   AND   (f9)\",\n    \"filters\": {\n        \"f1\": \"description includes 1\",\n        \"f2\": \"description includes 2\",\n        \"f3\": \"description includes 3\",\n        \"f4\": \"description includes 4\",\n        \"f5\": \"description includes 5\",\n        \"f6\": \"description includes 6\",\n        \"f7\": \"description includes 7\",\n        \"f8\": \"description includes 8\",\n        \"f9\": \"description includes 9\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Sums of Three-Number Combinations in Plaintext\nDESCRIPTION: A series of arithmetic expressions showing the sums of different combinations of three numbers. Each line presents a calculation in the format (a + b + c) => result, where a, b, and c are selected from the numbers 0 through 5.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TestingTools/CombinationApprovalsAsync.test.CombinationApprovalsAsync_verify3.approved.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(0 + 2 + 4) => 6\n(0 + 2 + 5) => 7\n(0 + 3 + 4) => 7\n(0 + 3 + 5) => 8\n(1 + 2 + 4) => 7\n(1 + 2 + 5) => 8\n(1 + 3 + 4) => 8\n(1 + 3 + 5) => 9\n```\n\n----------------------------------------\n\nTITLE: Parsing 'NOT has start date'\nDESCRIPTION: This snippet shows the parsing logic when there's a 'NOT' clause before 'has start date'. The purpose is to find all tasks that do not have a start date. The result transforms the query into a structured form.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_36\n\nLANGUAGE: text\nCODE:\n```\n[\n    \"NOT (\",\n    \"has start date\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Nested AND with Varied Spacing\nDESCRIPTION: Shows preprocessing of a nested AND expression `A AND (B AND C)` with extra whitespace, demonstrating that spacing is handled correctly during tokenization.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'( description includes a )   AND ( (description includes b)  AND (description includes c) )'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"(\",\n    \" \",\n    \"description includes a\",\n    \" \",\n    \")   AND (\",\n    \" (\",\n    \"description includes b\",\n    \")  AND (\",\n    \"description includes c\",\n    \") )\"\n]\n```\n\n----------------------------------------\n\nTITLE: Example task list - dependency resolved\nDESCRIPTION: This task list shows the state after the first task ('Build a first draft') has been marked as complete.  As a result, the second task ('Test with users'), which depended on the first task, is now visible.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Task Dependencies.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- [x] Build a first draft 🆔 4ijuhy\n- [ ] Test with users ⛔ 4ijuhyz\n```\n\n----------------------------------------\n\nTITLE: Supported Task Statuses - Border Theme\nDESCRIPTION: This snippet defines the supported task statuses in the Border theme for the Obsidian Tasks plugin. It lists the characters used to represent each status, along with their corresponding descriptions, like 'To Do', 'In Progress', 'Done', etc. The content is intended to be used as a sample of supported status symbols for the theme.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/Border Theme.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n- [ ] #task `space` To Do\n- [/] #task `/` In Progress\n- [x] #task `x` Done\n- [-] #task `-` Cancelled\n- [>] #task `>` Rescheduled\n- [<] #task `<` Scheduled\n- [!] #task `!` Important\n- [?] #task `?` Question\n- [i] #task `i` Infomation\n- [S] #task `S` Amount\n- [*] #task `*` Star\n- [b] #task `b` Bookmark\n- [“] #task `“` Quote\n- [n] #task `n` Note\n- [l] #task `l` Location\n- [I] #task `I` Idea\n- [p] #task `p` Pro\n- [c] #task `c` Con\n- [u] #task `u` Up\n- [d] #task `d` Down\n```\n\n----------------------------------------\n\nTITLE: Simplifying AND Query with Unspaced Operator\nDESCRIPTION: Example demonstrating that an unspaced 'AND' between filter clauses is treated as part of the description text, not as a boolean operator, during simplification. The input query string is transformed into a JSON object with two filters combined by a correctly spaced 'AND'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes SHOULD NOT BE RECOGNISED AS A BOOLEAN)AND(description includes BECAUSE THERE ARE NO SPACES AROUND THE \\'AND\\' OPERATOR)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) AND (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes SHOULD NOT BE RECOGNISED AS A BOOLEAN\",\n        \"f2\": \"description includes BECAUSE THERE ARE NO SPACES AROUND THE 'AND' OPERATOR\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (String and OR)\nDESCRIPTION: This snippet displays an expression that is considered invalid and cannot be processed because the delimiters aren't in the correct position. The error message repeats the constraints on the correct delimiter structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n'\"HAS DUE DATE\" OR (DESCRIPTION INCLUDES SPECIAL)'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    \"HAS DUE DATE\" OR (DESCRIPTION INCLUDES SPECIAL)\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Mermaid Flowchart for Task State Transitions\nDESCRIPTION: Defines task states (TODO, DONE, CANCELLED) with custom styles and demonstrates possible transitions and cyclic flows between them, including a refresh indicator. Relies on Mermaid syntax for flowchart visualization.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_done-toggles-to-cancelled-with-unconventional-symbols.approved.detailed.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"'Todo'<br>[ ] -> [*]<br>(TODO)\"]:::TODO\n2[\"'Done'<br>[*] -> [x]<br>(DONE)\"]:::DONE\n3[\"'Cancelled'<br>[x] -> [ ]<br>(CANCELLED)\"]:::CANCELLED\n\n1 --> 2\n2 --> 3\n2-. \"🔁\" .-> 1\n3 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Categorizing Dates with Tomorrow JavaScript\nDESCRIPTION: This code extends the date categorization to include a 'Tomorrow' category.  It uses moment.js to determine if a task is due tomorrow.  It requires the same dependencies as the previous snippets. Input: a task object with a due date. Output: a string representing the category, adding the 'Tomorrow' category to the available choices. The addition of the 'Tomorrow' category offers a more granular grouping.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomGrouping/CustomGroupingExamples.test.dates_task.due.advanced_results.approved.txt#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ngroup by function \\ \n    const date = task.due.moment; \\ \n    const tomorrow  = moment().add(1,'days'); \\ \n    const now = moment(); \\ \n    const label = (order, name) => `%%${order}%% ==${name}==`; \\ \n    if (!date)                           return label(5, 'Undated'); \\ \n    if (!date.isValid())                 return label(0, 'Invalid date'); \\ \n    if (date.isBefore(now, 'day'))       return label(1, 'Overdue'); \\ \n    if (date.isSame(now, 'day'))         return label(2, 'Today'); \\ \n    if (date.isSame(tomorrow, 'day'))    return label(3, 'Tomorrow'); \\ \n    return label(4, 'Future');\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Invalid Placeholders\nDESCRIPTION: Example showing how Tasks handles errors when invalid properties are used in placeholders. Demonstrates the case-sensitive nature of property names.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Placeholders.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# query.file.fileName is invalid, because of the capital N.\n# query.file.filename is the correct property name.\nfilename includes {{query.file.fileName}}\n```\n\n----------------------------------------\n\nTITLE: Mapping Task Status Symbols to Status Names and Types in Markdown Table\nDESCRIPTION: This markdown table shows the mapping between task checkbox symbols, their respective next status symbols, status names with sorting/grouping hints, status types for logical categorization, and need for custom styling. The table aids users of the ITS Theme to understand how tasks transition between statuses and which statuses require custom theme styles. Dependencies include markdown rendering support; inputs are the status symbol definitions and related metadata. Outputs are rendered tables in markdown views.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Reference/Status Collections/ITS Theme.md#_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name<br>`status.name includes...`<br>`sort by status.name`<br>`group by status.name` | Status Type<br>`status.type is...`<br>`sort by status.type`<br>`group by status.type` | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `space` | `x` | Unchecked | `TODO` | No |\n| `x` | `space` | Regular | `DONE` | No |\n| `X` | `space` | Checked | `DONE` | Yes |\n| `-` | `space` | Dropped | `CANCELLED` | Yes |\n| `>` | `x` | Forward | `TODO` | Yes |\n| `D` | `x` | Date | `TODO` | Yes |\n| `?` | `x` | Question | `TODO` | Yes |\n| `/` | `x` | Half Done | `IN_PROGRESS` | Yes |\n| `+` | `x` | Add | `TODO` | Yes |\n| `R` | `x` | Research | `TODO` | Yes |\n| `!` | `x` | Important | `TODO` | Yes |\n| `i` | `x` | Idea | `TODO` | Yes |\n| `B` | `x` | Brainstorm | `TODO` | Yes |\n| `P` | `x` | Pro | `TODO` | Yes |\n| `C` | `x` | Con | `TODO` | Yes |\n| `Q` | `x` | Quote | `TODO` | Yes |\n| `N` | `x` | Note | `TODO` | Yes |\n| `b` | `x` | Bookmark | `TODO` | Yes |\n| `I` | `x` | Information | `TODO` | Yes |\n| `p` | `x` | Paraphrase | `TODO` | Yes |\n| `L` | `x` | Location | `TODO` | Yes |\n| `E` | `x` | Example | `TODO` | Yes |\n| `A` | `x` | Answer | `TODO` | Yes |\n| `r` | `x` | Reward | `TODO` | Yes |\n| `c` | `x` | Choice | `TODO` | Yes |\n| `d` | `x` | Doing | `IN_PROGRESS` | Yes |\n| `T` | `x` | Time | `TODO` | Yes |\n| `@` | `x` | Character / Person | `TODO` | Yes |\n| `t` | `x` | Talk | `TODO` | Yes |\n| `O` | `x` | Outline / Plot | `TODO` | Yes |\n| `~` | `x` | Conflict | `TODO` | Yes |\n| `W` | `x` | World | `TODO` | Yes |\n| `f` | `x` | Clue / Find | `TODO` | Yes |\n| `F` | `x` | Foreshadow | `TODO` | Yes |\n| `H` | `x` | Favorite / Health | `TODO` | Yes |\n| `&` | `x` | Symbolism | `TODO` | Yes |\n| `s` | `x` | Secret | `TODO` | Yes |\n```\n\n----------------------------------------\n\nTITLE: Obsidian Warning Callout\nDESCRIPTION: This snippet demonstrates the usage of the Obsidian warning callout. It's typically displayed in red within the Tasks documentation, deviating from Obsidian's default orange/brown color for warnings. This callout is used to highlight important information that users should be aware of.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Callouts.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> [!warning]\n> I will be shown in red (not the standard orange/brown colour)\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR Query with Description Includes\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using the OR operator with two 'description includes' filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) OR (description includes d2)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"description includes d2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Matching Tags\nDESCRIPTION: Demonstrates regular expression matching against the tags of a task. It includes the regex pattern and any flags used. The examples provided demonstrate successful matches and non-matches.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/TextField.test.explains_regular_expression_searches_bulk_test.approved.txt#_snippet_7\n\nLANGUAGE: regex\nCODE:\n```\n'(home|town)' with no flags\n```\n\nLANGUAGE: regex\nCODE:\n```\n'(home|pc_mac|town)' with no flags\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR with Nested AND Boolean Expression\nDESCRIPTION: This snippet illustrates simplifying a complex boolean expression using 'OR' and nested 'AND' conditions.  'has start date', 'description includes special', and 'has due date' are aliased to 'f1', 'f2', and 'f3' respectively.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_40\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR ((f2) AND (f3))\",\n    \"filters\": {\n        \"f1\": \"has start date\",\n        \"f2\": \"description includes special\",\n        \"f3\": \"has due date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Obsidian Task using Markdown\nDESCRIPTION: This Markdown line defines an incomplete task item, recognizable by the Obsidian Tasks plugin. It uses standard Markdown checkbox syntax `[ ]`, includes the `#task` tag for organization and querying, and provides the task description 'Task in \\'yaml_1_alias\\''.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_1_alias.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Task in 'yaml_1_alias'\n```\n\n----------------------------------------\n\nTITLE: Task/Task.ts - Task ListItem and Urgency Modules\nDESCRIPTION: Modules for defining task list items and priority levels, facilitating task display, urgency assessments, and categorization within the plugin's UI.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Types and utility functions for task list items and urgency levels to support task prioritization and display */\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - is not recurring\nDESCRIPTION: Simplifies an expression involving 'OR NOT' with the filter 'is not recurring'. 'is not recurring' is aliased to 'f1', and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_56\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"is not recurring\",\n        \"f2\": \"is not recurring\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Task Urgency Calculation with Simulated Times (TypeScript)\nDESCRIPTION: This Jest test suite demonstrates how to simulate specific times using `jest.useFakeTimers()` and `jest.setSystemTime()` to test the impact of time of day on task urgency calculation in the Obsidian Tasks plugin. It iterates through various times for a fixed task and asserts that the calculated urgency score remains constant, reproducing a specific GitHub issue test case (issue #2068). Dependencies include Jest for testing and the Obsidian Tasks codebase components like `fromLine` and `Urgency`.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Simulating Dates and Times.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ndescribe('urgency - test time-of-day impact on due-date score', () => {\n    // Test to reproduce https://github.com/obsidian-tasks-group/obsidian-tasks/issues/2068\n    beforeEach(() => {\n        jest.useFakeTimers();\n    });\n\n    afterEach(() => {\n        jest.useRealTimers();\n    });\n\n    const task = fromLine({ line: '- [ ] #task 🔽 📅 2023-06-26', path: 'a/b/c.md', precedingHeader: null });\n\n    it.each([\n        // Force new line for each time\n        ['00:00'],\n        ['00:01'],\n        ['06:00'],\n        ['09:00'],\n        ['11:59'],\n        ['12:00'],\n        ['12:01'],\n        ['19:00'],\n        ['23:59'],\n    ])('with time  \"%s\"', (time: string) => {\n        jest.setSystemTime(new Date('2023-06-26 ' + time));\n        expect(Urgency.calculate(task)).toEqual(8.8);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding a JSON File with mdsnippets\nDESCRIPTION: This example shows how to embed a JSON file into a markdown document using the `snippet:` instruction.  The file extension (.json) is used to set the language of the rendered code block, enabling syntax highlighting. The process involves running `mdsnippets` to transform the instruction into a formatted code block.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Embedding code and data in documentation.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- snippet: ApprovalTestsDemo.test.ApprovalTests_JsonVerify.approved.json -->\n```json\n{\n  \"name\": \"fred\",\n  \"age\": 30\n}\n```\n<!-- endSnippet -->\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Simple NOT Expression\nDESCRIPTION: Demonstrates preprocessing of a single negated operand using NOT, enclosed in parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'NOT (not done)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"NOT (\",\n    \"not done\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - id includes\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'id includes abc123'. 'id includes abc123' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_51\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"id includes abc123\",\n        \"f2\": \"id includes abc123\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Task Filtering: Sample Tasks with Sequential Due Dates (text)\nDESCRIPTION: This snippet provides an example dataset of tasks with sequential due dates from 0 to 9 days after the baseline date (2022-09-08). It is used for testing filter rules in the Obsidian Tasks plugin context. Tasks are marked as unchecked and each line summarizes the due date. No external dependencies are required. This is purely for demonstration and manual testing purposes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/Find tasks for coming 7 days.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- [ ] 0 days 📅 2022-09-08\n- [ ] 1 days 📅 2022-09-09\n- [ ] 2 days 📅 2022-09-10\n- [ ] 3 days 📅 2022-09-11\n- [ ] 4 days 📅 2022-09-12\n- [ ] 5 days 📅 2022-09-13\n- [ ] 6 days 📅 2022-09-14\n- [ ] 7 days 📅 2022-09-15\n- [ ] 8 days 📅 2022-09-16\n- [ ] 9 days 📅 2022-09-17\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Task Lists with Markdown in Obsidian\nDESCRIPTION: This snippet uses markdown syntax within an Obsidian note to create nested task lists grouped by calendar month, task group, and correction titles. Each task is an unchecked checkbox labeled with a #task tag, representing individual corrections. This structure helps in organizing and visually grouping tasks for easier navigation and management within Obsidian notes. It depends on Obsidian's markdown rendering capabilities but requires no additional dependencies.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/callouts_nested_issue_2890_labelled.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!Calendar]+ MONTH\n>> [!Check]+ GROUP\n>>> [!Attention]+ Correction TITLE\n>>> Some stuff goes here\n>>> - [ ] #task Correction1\n>>> - [ ] #task Correction2\n>>> - [ ] #task Correction3\n>>> - [ ] #task Correction4\n```\n\n----------------------------------------\n\nTITLE: Sorting by First, Second and Third Level Tags (Combined) - JavaScript\nDESCRIPTION: This snippet extracts the first, second, and third level tags and combines them using '/' as the delimiter. If a third level tag exists, it joins the tags; otherwise, it returns an empty string.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomSorting/CustomSortingExamples.test.other_properties_task.tags.advanced_results.approved.txt#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntask.tags.map( (tag) => tag.split('/')[2] ? tag.split('/').slice(0, 3).join('/') : '')\n```\n\n----------------------------------------\n\nTITLE: Filter by Start Date and Description\nDESCRIPTION: This snippet demonstrates filtering using the 'HAS START DATE' and 'DESCRIPTION INCLUDES SOME', but shows the error that it can not parse correctly because of the format of the 'AND' operator.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nAll filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Example Task Scheduled on Wednesday\nDESCRIPTION: This snippet shows an example of a task that would be matched by the filter described above. The task includes a description and a scheduled date, which falls on a Wednesday (2023-05-31).\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/ScriptingReference/CustomFiltering/CustomFilteringExamples.test.dates_task.scheduled_results.approved.txt#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] my description ⏳ 2023-05-31\n```\n\n----------------------------------------\n\nTITLE: Task Example with Footnote\nDESCRIPTION: Demonstrates the markdown syntax for creating a task and including an inline footnote. The footnote must be inline and can not be a regular footnote.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Getting Started.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n-   [ ] This is a task^[with a working inline footnote]\n-   [ ] This footnote _will not work_[^notworking]\n```\n\n----------------------------------------\n\nTITLE: Embedding an Image in Documentation (Example)\nDESCRIPTION: This snippet demonstrates how to embed an image, specifically \"acme.png\", within a documentation page in Obsidian. It uses the Markdown image syntax, linking to the local image file and including a descriptive summary below the image to provide context for the user.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Screenshots in documentation.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```text\n![ACME Tasks](acme.png)\nThe `ACME` note has some tasks.\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: Basic Combinations\nDESCRIPTION: This section demonstrates parsing of simple boolean expressions using AND, OR, XOR, and NOT. The examples show the expected result when the expressions are parsed correctly, along with the structure of their logical representation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n'(not done) AND (is recurring)'\n=>\nResult:\n  (not done) AND (is recurring) =>\n    AND (All of):\n      not done\n      is recurring\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters in AND NOT\nDESCRIPTION: Illustrates a parsing error when mixing double quotes and parentheses as delimiters in an AND NOT expression. Consistent delimiters are required.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'\"not done\" AND NOT (is recurring)'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Mixed Delimiter Types\nDESCRIPTION: These examples demonstrate error cases where the expression uses a mix of delimiter types (quotes and parentheses). The parser rejects these expressions with an error message explaining that consistent delimiter pairs must be used throughout the expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Regex Matching Folder\nDESCRIPTION: Demonstrates regular expression matching against the folder path of a task file. It includes the regex pattern and any flags used. The provided example demonstrates successful matches.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/TextField.test.explains_regular_expression_searches_bulk_test.approved.txt#_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n'root\\/sub-folder\\/sub-sub-folder' with no flags\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (String and OR)\nDESCRIPTION: This shows an invalid expression that is not correctly formatted and is therefore uninterpretable by the boolean expression parser. The error message emphasizes the importance of correct delimiter usage.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n'\"has due date\" OR (description includes special)'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    \"has due date\" OR (description includes special)\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Restoring Pre-6.0.0 Task Button Style Using SVG Masks in CSS\nDESCRIPTION: This advanced CSS snippet replaces button icons with embedded SVG graphics using webkit-mask-image and applies background color, layout, and spacing for '.tasks-edit' and '.tasks-postpone'. The SVG data is included as a data URI. No after-content is displayed. The snippet is meant for use in Obsidian and requires a theme that supports the relevant CSS variables (e.g., --text-faint). Platform support for webkit-specific properties is necessary for the mask images to render consistently.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/How To/How to style buttons.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.tasks-edit, .tasks-postpone {\n    background-color: var(--text-faint);\n    -webkit-mask-size: contain;\n    margin-left: .66em;\n    display: inline-block;\n}\n\n.tasks-edit {\n    -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20aria-hidden%3D%22true%22%20focusable%3D%22false%22%20width%3D%221em%22%20height%3D%221em%22%20style%3D%22-ms-transform%3A%20rotate(360deg)%3B%20-webkit-transform%3A%20rotate(360deg)%3B%20transform%3A%20rotate(360deg)%3B%22%20preserveAspectRatio%3D%22xMidYMid%20meet%22%20viewBox%3D%220%200%201536%201536%22%3E%3Cpath%20d%3D%22M363%201408l91-91l-235-235l-91%2091v107h128v128h107zm523-928q0-22-22-22q-10%200-17%207l-542%20542q-7%207-7%2017q0%2022%2022%2022q10%200%2017-7l542-542q7-7%207-17zm-54-192l416%20416l-832%20832H0v-416zm683%2096q0%2053-37%2090l-166%20166l-416-416l166-165q36-38%2090-38q53%200%2091%2038l235%20234q37%2039%2037%2091z%22%20fill%3D%22%23626262%22%2F%3E%3C%2Fsvg%3E\");\n}\n\n.tasks-postpone {\n    -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20aria-hidden%3D%22true%22%20focusable%3D%22false%22%20width%3D%221em%22%20height%3D%221em%22%20style%3D%22-ms-transform%3A%20rotate(360deg)%3B%20-webkit-transform%3A%20rotate(360deg)%3B%20transform%3A%20rotate(360deg)%3B%22%20preserveAspectRatio%3D%22xMidYMid%20meet%22%20viewBox%3D%220%200%201536%201536%22%3E%3Cpath%20d%3D%22M45%20-115q-19%20-19%20-32%20-13t-13%2032v1472q0%2026%2013%2032t32%20-13l710%20-710q9%20-9%2013%20-19v710q0%2026%2013%2032t32%20-13l710%20-710q9%20-9%2013%20-19v678q0%2026%2019%2045t45%2019h128q26%200%2045%20-19t19%20-45v-1408q0%20-26%20-19%20-45t-45%20-19h-128q-26%200%20-45%2019t-19%2045v678q-4%20-10%20-13%20-19l-710%20-710%20q-19%20-19%20-32%20-13t-13%2032v710q-4%20-10%20-13%20-19z%22%20fill%3D%22%23626262%22%2F%3E%3C%2Fsvg%3E\");\n}\n\n.tasks-edit::after, .tasks-postpone::after {\n    content: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mermaid Flowchart for Obsidian Tasks Statuses\nDESCRIPTION: This Mermaid diagram defines styled classes for various task statuses and categories used in Obsidian Tasks, such as TODO, DONE, IN_PROGRESS, CANCELLED, and NON_TASK. It visually links non-task items like Bookmark, Example, Information, Paraphrase, and Quote, illustrating their relationships with stylized node borders. The linkStyle sets the default stroke color for the links between nodes.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_toggle-does-nothing.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Bookmark\"]:::NON_TASK\n2[\"Example\"]:::NON_TASK\n3[\"Information\"]:::NON_TASK\n4[\"Paraphrase\"]:::NON_TASK\n5[\"Quote\"]:::NON_TASK\n1 --> 1\n2 --> 2\n3 --> 3\n4 --> 4\n5 --> 5\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Embedding Tasks with Inline HTML Comments in Markdown for Obsidian Tasks Plugin\nDESCRIPTION: This snippet shows tasks with inline HTML comments either commenting out part of the tag or a link. While Obsidian's cachedMetadata ignores these lines, the Tasks plugin recognizes the tasks for tracking purposes. No additional dependencies are needed beyond the Tasks plugin. Inputs are markdown todo list items with inline HTML comments, and outputs include these tasks being visible to the Tasks plugin but not native Obsidian task metadata.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/comments_html_style.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Whole task in 'comments_html_style' - with commented-out tag: <!-- #i-am-ignored-by-obsidian  --> - is ignored by Obsidian's `cachedMetadata`, but Tasks recognises it\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] #task Whole task in 'comments_html_style' - with commented-out link: <!-- [[comments_markdown_style]]  --> - is ignored by Obsidian's `cachedMetadata`\n```\n\n----------------------------------------\n\nTITLE: Defining Non-task Status Symbol ('n')\nDESCRIPTION: Defines the 'n' character as a status symbol representing 'Non-task' (type NON_TASK). When toggled, this status transitions back to itself ('n').\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Statuses/StatusSettingsReport.test.StatusSettingsReport_should_include_problems_in_table.approved.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nn\n```\n\n----------------------------------------\n\nTITLE: Regex Matching Heading\nDESCRIPTION: Demonstrates regular expression matching against the heading of a task. It includes the regex pattern and any flags used.  The example provided demonstrates a successful match.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/TextField.test.explains_regular_expression_searches_bulk_test.approved.txt#_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n'^Exactly Matched Heading$' with no flags\n```\n\n----------------------------------------\n\nTITLE: Nested Titled Callouts with Multiple Tasks\nDESCRIPTION: Provides an example of deeply nested titled callouts in Obsidian Markdown, each containing task items. This structure demonstrates how the metadata cache bug affected line number reporting, with increasing discrepancy related to nesting depth, leading to tasks potentially being missed by plugins.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Support and Help/Missing tasks in callouts with some Obsidian 1.6.x versions.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> [!Calendar]+ MONTH\n>> [!Check]+ GROUP\n>>> [!Attention]+ Correction TITLE\n>>> Some stuff goes here\n>>> - [ ] Correction1\n>>> - [ ] Correction2\n>>> - [ ] Correction3\n>>> - [ ] Correction4\n```\n\n----------------------------------------\n\nTITLE: Verifying Proper Task Formatting in Obsidian Tasks Plugin\nDESCRIPTION: Guidance on how to check if individual tasks are correctly formatted in Obsidian to ensure they are properly detected and included in search results. Emphasizes attention to task description, emojis, recurrence, and due date recognition.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Editing/Auto-Suggest.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [ ] Do stuff at the #office by 📅 2022-07-18 #project-x 🔁 every week #testing\n- [ ] Do stuff at the #office by 📅 2022-07-18 for #project-x 🔁 every week #testing\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (OR NOT)\nDESCRIPTION: This section describes parsing errors caused by invalid delimiters, specifically focusing on expressions that use the OR and NOT operators.  The error messages emphasize the need for correct delimiters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n'\"not done\" OR NOT (is recurring)'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    \"not done\" OR NOT (is recurring)\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Error: Invalid Delimiters (XOR)\nDESCRIPTION: This section illustrates the parsing errors due to incorrect use of delimiters, and includes expressions with the XOR operator. The error messages point out the need for delimiters to enclose filters.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n'\"not done\" XOR (is recurring)'\n=>\nResult:\nCould not interpret the following instruction as a Boolean combination:\n    \"not done\" XOR (is recurring)\n\nThe error message is:\n    All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \"...\". Combinations of those delimiters are no longer supported.\n```\n\n----------------------------------------\n\nTITLE: Completed YAML Frontmatter with Path Alias\nDESCRIPTION: Example of YAML frontmatter after adding the current file path as an alias. This configuration enables Obsidian Publish to create a redirect from the old location to the new one after a file is renamed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Redirects - Renaming files.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\npublish: true\naliases:\n  - Current/Path/To/Documentation File\n---\n```\n\n----------------------------------------\n\nTITLE: Processing Multi-line Task Description Strings in JavaScript\nDESCRIPTION: This snippet contains functions designed to process task description strings, removing line continuation characters ('\\') and concatenating split lines into a single continuous string. It handles various cases where descriptions include line breaks and escape characters, ensuring the output strings are clean and properly formatted for further use. Dependencies are minimal, relying solely on standard JavaScript string methods. The functions operate on input strings and produce cleaned output strings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Scanner.test.continue_lines_visualise_continue_lines.approved.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction continueLines(input) {\n  // Replaces backslash line continuations with empty string and trims whitespace\n  return input.replace(/\\\\\\n/g, '').trim();\n}\n\n// Example usage with the provided descriptions\nconst examples = [\n  \"description includes 1 hello world    \",\n  \"description includes 2 hello   \\\n   world   \",\n  \"description includes 3 hello \\\nworld\",\n  \"description includes 4 hello    \\\nworld\",\n  \"description includes 5 hello    \\\\\",\n  \"description includes 6 world\",\n  \"description includes 7 hello world\\\\\",\n  \"description includes 8 hello world\\\\\",\n  \"description includes 9 hello world\\\\\",\n  \"description includes 10 hello world\\\\\",\n  \"description includes 11 hello world\\\\\n  \",\n  \"description includes 12 hello world\",\n  \"description includes 13 hello world\\\\\n  \",\n  \"description includes 14 hello world\\\\\n  \",\n  \"description includes 15 hello world\\\\\",\n  \"description includes 16 hello world \\ \",\n  \"description includes 17 hello world \\\\ \",\n  \"  description includes 17 hello world  \"\n];\n\nexamples.forEach(example => {\n  const cleaned = continueLines(example);\n  console.log(cleaned);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Task Icon States in Mermaid\nDESCRIPTION: This Mermaid code defines different task states (TODO, DONE, IN_PROGRESS, CANCELLED, NON_TASK) and assigns custom stroke styles for visualization. It uses `classDef` to define CSS-like classes within the diagram. These classes are then applied to specific nodes representing icons, allowing for visual differentiation based on task status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_AnuPpuccin_Table.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n```\n\n----------------------------------------\n\nTITLE: Example Task Before Toggling (DONE -> CANCELLED Flow)\nDESCRIPTION: An example task line shown with the IN_PROGRESS status ('[/]'). This task exists in a vault configured with the custom status flow where DONE transitions to CANCELLED, as illustrated in the previous Mermaid diagram.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Getting Started/Statuses/Recurring Tasks and Custom Statuses.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n- [/] Do something 🔁 every day 📅 2024-10-16\n```\n\n----------------------------------------\n\nTITLE: Kanban Plugin Settings Configuration (JSON)\nDESCRIPTION: This JSON snippet configures the Kanban plugin for the board.  It sets the plugin to use a 'board' for display and sets a configuration for list collapse, specifically setting the list to not be collapsed. There are no other dependencies or prerequisites for this. The output is the configuration of the Kanban plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Smoke test Kanban Integration.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"kanban-plugin\":\"board\",\"list-collapse\":[false]}\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Due Date Before (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the 'due before' filter combined with 'OR NOT'. This query matches all tasks by including those due before 2021-12-27 OR those not due before that date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_87\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(due before 2021-12-27) OR NOT (due before 2021-12-27)\n```\n\n----------------------------------------\n\nTITLE: Creating Numbered Task Lists with Sub-Items in Markdown\nDESCRIPTION: This snippet demonstrates how to create a numbered list containing task items with checkboxes and tags, and nested numbered sub-items in markdown format. Dependencies include markdown support in rendering tools. Each task line consists of a checkbox indicating completion status and an associated tag (#task). The expected input is plain text in markdown, which outputs a structured and interactive task list. Limitations include markdown rendering engine compatibility for checkbox states and nested list styling.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/numbered_list_items_standard.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1. [ ] #task Task 1 in 'numbered_list_items_standard'  \n    1. Sub-item 1  \n2. [ ] #task Task 2 in 'numbered_list_items_standard'  \n    1. Sub-item 2  \n3. List item in 'numbered_list_items_standard'\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Simple XOR Expression with Parentheses\nDESCRIPTION: Demonstrates the preprocessing of a basic boolean XOR expression with operands enclosed in parentheses. The output is a tokenized array.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) XOR (is recurring)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"(\",\n    \"not done\",\n    \") XOR (\",\n    \"is recurring\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Regex Description Search Missing Slashes - Tasks\nDESCRIPTION: This snippet demonstrates an invalid regex search where the leading and trailing slashes are missing. This will result in an error during parsing because the regex pattern is not correctly delimited. The error message warns about missing slashes for the query.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Filters/Regular Expression Searches.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n```tasks\ndescription regex matches CASE\n```\n```\n\nLANGUAGE: text\nCODE:\n```\ndescription regex matches CASE\n```\n\n----------------------------------------\n\nTITLE: Parsing 'NOT description ...'\nDESCRIPTION: This snippet is designed to parse a query that excludes tasks that contain a certain text (d1) in their descriptions. It uses the 'NOT' operator to negate the condition, hence filtering out all tasks containing the mentioned description. The result provides the parsed array.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n[\n    \"NOT (\",\n    \"description blahblah d1\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - not done\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'not done'. The filter is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_69\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"not done\",\n        \"f2\": \"not done\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Description Does Not Include\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a 'description does not include' filter. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description does not include wibble) OR NOT (description does not include wibble)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"description does not include wibble\",\n        \"f2\": \"description does not include wibble\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Date-Related Filters in Boolean Expressions\nDESCRIPTION: Shows how the parser handles date-based filters with various criteria (before, after, on) combined with boolean operators. The system extracts specific date conditions and represents them in the simplified structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"scheduled after 2021-12-27\",\n        \"f2\": \"scheduled after 2021-12-27\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining completed task with completion date - Markdown\nDESCRIPTION: Defines a task marked as complete using the '[x]' checkbox status in Markdown. It includes a completion date using the '[completion:: YYYY-MM-DD]' inline field. This date records when the task was finished.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TaskSerializer/DocsSamplesForTaskFormats.test.Serializer_Dates_dataview-snippet.approved.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- [x] #task Has a done date [completion:: 2023-04-17]\n```\n\n----------------------------------------\n\nTITLE: In Progress Status Symbol: /\nDESCRIPTION: Represents the 'In Progress' task status symbol in the configuration table. This symbol indicates a task that is currently being worked on.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_todo-in_progress-done.approved.md#_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\n/\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks Based on Due Date This Week (Obsidian Tasks Query Language)\nDESCRIPTION: Demonstrates the relative 'due this week' filter combined with 'OR NOT'. This query matches all tasks by selecting those due this week OR those not due this week.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_93\n\nLANGUAGE: Obsidian Tasks Query Language\nCODE:\n```\n(due this week) OR NOT (due this week)\n```\n\n----------------------------------------\n\nTITLE: Handling ReferenceError During Evaluation of 'sort by function' in Tasks Query\nDESCRIPTION: This snippet illustrates how the Tasks plugin reacts when a 'sort by function' expression references an undefined variable 'hello'. The error occurs at evaluation time because 'hello' is not defined in the context of the task or query, demonstrating protection against invalid references during sorting.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Functions/Custom Sorting.md#_snippet_2\n\nLANGUAGE: tasks\nCODE:\n```\nsort by function hello\n```\n\n----------------------------------------\n\nTITLE: Simplifying AND NOT Query with Description Includes\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using AND NOT operators with two 'description includes' filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) AND NOT (description includes d2)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) AND NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"description includes d2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Invalid Created Date\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with an invalid created date filter. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(created date is invalid) OR NOT (created date is invalid)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"created date is invalid\",\n        \"f2\": \"created date is invalid\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Relative Created Date\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a relative created date filter ('this week'). The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(created this week) OR NOT (created this week)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"created this week\",\n        \"f2\": \"created this week\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no tags\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no tags'. The filter is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_68\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no tags\",\n        \"f2\": \"no tags\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Task Suggestions based on Input - JSON\nDESCRIPTION: This code snippet represents the suggestion generated by the Obsidian Tasks plugin when the user types the specified input within a Markdown line. The suggestion includes details such as the type of suggestion, text to display, text to append, and the insertion position and skip length, informing how to update the user's input. The functionality depends on the `Obsidian Tasks` plugin itself. No further prerequisites are explicitly mentioned in this context, assuming standard Obsidian environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__dataview__symbols_offers_correct_options_for_partial_recurrence_lines.approved.txt#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"✅ every day when done\",\n    \"appendText\": \"repeat:: every day when done] \",\n    \"insertAt\": 16,\n    \"insertSkip\": 28\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - id does not include\nDESCRIPTION: Simplifies 'OR NOT' expression with 'id does not include abc123'.  'id does not include abc123' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_49\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"id does not include abc123\",\n        \"f2\": \"id does not include abc123\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter Alias in Obsidian\nDESCRIPTION: This YAML block, enclosed by '---', defines metadata for the Obsidian note. The `aliases` key specifies an alternative name ('YAML Alias 1') for the note file, allowing it to be referenced by this alias within Obsidian.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Test Data/yaml_1_alias.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n  - YAML Alias 1\n---\n```\n\n----------------------------------------\n\nTITLE: Filter by Invalid Cancelled Date\nDESCRIPTION: This snippet filters tasks based on invalid cancellation dates with 'OR' and 'NOT' operators. \nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      cancelled date is invalid\n      NOT:\n        cancelled date is invalid\n```\n\n----------------------------------------\n\nTITLE: Error Log: Malformed Boolean Query ('filter by function')\nDESCRIPTION: Displays the detailed error output from Obsidian Tasks when encountering the malformed boolean query caused by the 'filter by function' closing delimiter conflict. It shows the simplified interpretation and the specific parsing errors.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Queries/Combining Filters.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nTasks query: Could not interpret the following instruction as a Boolean combination:\n    (filter by function task.tags.join(',').toUpperCase().includes('#XX')) AND (filter by function task.tags.join(',').toUpperCase().includes('#YY')) AND (filter by function task.tags.join(',').toUpperCase().includes('#ZZ'))\n\nThe error message is:\n    malformed boolean query -- Invalid token (check the documentation for guidelines)\n\nThe instruction was converted to the following simplified line:\n    (f1)) AND (f2)) AND (f3))\n\nWhere the sub-expressions in the simplified line are:\n    'f1': 'filter by function task.tags.join(',').toUpperCase().includes('#XX''\n        => ERROR:\n           Error: Failed parsing expression \"task.tags.join(',').toUpperCase().includes('#XX'\".\n           The error message was:\n           \"SyntaxError: missing ) after argument list\"\n    'f2': 'filter by function task.tags.join(',').toUpperCase().includes('#YY''\n        => ERROR:\n           Error: Failed parsing expression \"task.tags.join(',').toUpperCase().includes('#YY'\".\n           The error message was:\n           \"SyntaxError: missing ) after argument list\"\n    'f3': 'filter by function task.tags.join(',').toUpperCase().includes('#ZZ''\n        => ERROR:\n           Error: Failed parsing expression \"task.tags.join(',').toUpperCase().includes('#ZZ'\".\n           The error message was:\n           \"SyntaxError: missing ) after argument list\"\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters in AND NOT (Parentheses/Quotes)\nDESCRIPTION: Illustrates a parsing error with mixed parentheses and quotes as delimiters in an AND NOT expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) AND NOT \"is recurring\"'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Boolean Operators Without Proper Spacing\nDESCRIPTION: Example showing that boolean operators need spaces around them to be recognized. Demonstrates that operators without spaces are treated as regular text.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_65\n\nLANGUAGE: text\nCODE:\n```\n'(description includes SHOULD NOT BE RECOGNISED AS A BOOLEAN)AND(description includes BECAUSE THERE ARE NO SPACES AROUND THE \\'AND\\' OPERATOR)'\n```\n\n----------------------------------------\n\nTITLE: TaskSerializer/DataviewTaskSerializer.ts - Data View Specific Serialization\nDESCRIPTION: This file defines serialization tailored for DataView integration, allowing tasks to be displayed or managed within DataView components, depending on specific serializer settings.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Serializer customized for DataView integration, converting task data into DataView-compatible formats */\n```\n\n----------------------------------------\n\nTITLE: Creating Task Icon Nodes in Mermaid\nDESCRIPTION: This Mermaid code creates nodes representing different task icons and applies the previously defined CSS classes to style them. Each node corresponds to a specific icon within the Obsidian Tasks plugin. The `:::` syntax is used to apply the defined `classDef` styles to each node, visually categorizing them.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_AnuPpuccin_Table.approved.mermaid.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n1[\"Unchecked\"]:::TODO\n2[\"Checked\"]:::DONE\n3[\"Rescheduled\"]:::TODO\n4[\"Scheduled\"]:::TODO\n5[\"Important\"]:::TODO\n6[\"Cancelled\"]:::CANCELLED\n7[\"In Progress\"]:::IN_PROGRESS\n8[\"Question\"]:::TODO\n9[\"Star\"]:::TODO\n10[\"Note\"]:::TODO\n11[\"Location\"]:::TODO\n12[\"Information\"]:::TODO\n13[\"Idea\"]:::TODO\n14[\"Amount\"]:::TODO\n15[\"Pro\"]:::TODO\n16[\"Con\"]:::TODO\n17[\"Bookmark\"]:::TODO\n18[\"Quote\"]:::TODO\n19[\"Speech bubble 0\"]:::NON_TASK\n20[\"Speech bubble 1\"]:::NON_TASK\n21[\"Speech bubble 2\"]:::NON_TASK\n22[\"Speech bubble 3\"]:::NON_TASK\n23[\"Speech bubble 4\"]:::NON_TASK\n24[\"Speech bubble 5\"]:::NON_TASK\n25[\"Speech bubble 6\"]:::NON_TASK\n26[\"Speech bubble 7\"]:::NON_TASK\n27[\"Speech bubble 8\"]:::NON_TASK\n28[\"Speech bubble 9\"]:::NON_TASK\n```\n\n----------------------------------------\n\nTITLE: Obsidian Info Callout\nDESCRIPTION: This snippet showcases the Obsidian info callout.  It is displayed in blue and used to present general information or helpful tips to the user within the Tasks documentation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Callouts.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> [!info]\n> I will be shown in blue\n```\n\n----------------------------------------\n\nTITLE: Starting Point: Recurring Task with 31st Day\nDESCRIPTION: This defines a basic recurring task, acting as a starting point for testing invalid dates.  It uses the Obsidian Tasks syntax. It repeats every month on the 31st of the month. This version is unchanged in testing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/resources/sample_vaults/Tasks-Demo/Manual Testing/Recurrence handling invalid dates.md#_snippet_5\n\nLANGUAGE: Obsidian Tasks\nCODE:\n```\n- [ ] #task do stuff 🔁 every month on the 31st 📅 2021-11-30\n```\n\n----------------------------------------\n\nTITLE: Prompt for GitHub Discussion Number in Templater\nDESCRIPTION: This Templater script uses `tp.system.prompt` to ask the user for a GitHub discussion number. This number is then used to construct a markdown link to the corresponding GitHub discussion page. The script relies on the Templater plugin for Obsidian and requires the GitHub discussion number as input. The output is a markdown link inserted into the current file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/_meta/templates/we are tracking this in discussion.md#_snippet_0\n\nLANGUAGE: Templater\nCODE:\n```\n<%-*\nconst discussion_number = await tp.system.prompt(\"GitHub Discussion Number\");\n-%>\n```\n\nLANGUAGE: Templater\nCODE:\n```\nWe are tracking this in [discussion #<%* tR += discussion_number %>](https://github.com/obsidian-tasks-group/obsidian-tasks/discussions/<%* tR += discussion_number %>).\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters (Quotes and Parentheses) in XOR\nDESCRIPTION: Illustrates a parsing error when mixing double quotes and parentheses as delimiters for operands in an XOR expression. Consistent delimiters are required.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'\"not done\" XOR (is recurring)'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Fully Populated Task in Short Mode for Obsidian Tasks Plugin\nDESCRIPTION: HTML structure for displaying a fully populated task in short mode within the Obsidian Tasks plugin. The snippet shows task elements including checkbox, description, metadata (ID, dependencies, priority, recurrence), dates (created, start, scheduled, due, cancelled, done), and action buttons for editing and postponing.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/snippets-embedded-in-multiple-pages/Sample HTML - Short mode.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n  - [ ] Do exercises #todo #health 🆔 abcdef ⛔ 123456,abc123 🔼 🔁 every day when done 🏁 delete ➕ 2023-07-01 🛫 2023-07-02 ⏳ 2023-07-03 📅 2023-07-04 ❌ 2023-07-06 ✅ 2023-07-05 ^dcf64c\n-->\n\n<div>\n  <ul class=\"contains-task-list plugin-tasks-query-result tasks-layout-short-mode\">\n    <li\n      class=\"task-list-item plugin-tasks-list-item\"\n      data-task-priority=\"medium\"\n      data-task-created=\"past-4d\"\n      data-task-start=\"past-3d\"\n      data-task-scheduled=\"past-2d\"\n      data-task-due=\"past-1d\"\n      data-task-cancelled=\"future-1d\"\n      data-task-done=\"today\"\n      data-task=\"\"\n      data-line=\"0\"\n      data-task-status-name=\"Todo\"\n      data-task-status-type=\"TODO\">\n      <input class=\"task-list-item-checkbox\" type=\"checkbox\" title=\"Right-click for options\" data-line=\"0\" />\n      <span class=\"tasks-list-text\">\n        <span class=\"task-description\"><span>Do exercises #todo #health</span></span>\n        <span class=\"task-id\"><span>🆔</span></span>\n        <span class=\"task-dependsOn\"><span>⛔</span></span>\n        <span class=\"task-priority\" data-task-priority=\"medium\"><span>🔼</span></span>\n        <span class=\"task-recurring\"><span>🔁</span></span>\n        <span class=\"task-onCompletion\"><span>🏁</span></span>\n        <span\n          class=\"task-created\"\n          data-task-created=\"past-4d\"\n          title=\"Click to edit created date, Right-click for more options\">\n          <span>➕</span>\n        </span>\n        <span\n          class=\"task-start\"\n          data-task-start=\"past-3d\"\n          title=\"Click to edit start date, Right-click for more options\">\n          <span>🛫</span>\n        </span>\n        <span\n          class=\"task-scheduled\"\n          data-task-scheduled=\"past-2d\"\n          title=\"Click to edit scheduled date, Right-click for more options\">\n          <span>⏳</span>\n        </span>\n        <span class=\"task-due\" data-task-due=\"past-1d\" title=\"Click to edit due date, Right-click for more options\">\n          <span>📅</span>\n        </span>\n        <span\n          class=\"task-cancelled\"\n          data-task-cancelled=\"future-1d\"\n          title=\"Click to edit cancelled date, Right-click for more options\">\n          <span>❌</span>\n        </span>\n        <span class=\"task-done\" data-task-done=\"today\" title=\"Click to edit done date, Right-click for more options\">\n          <span>✅</span>\n        </span>\n        <span class=\"task-block-link\"><span>^dcf64c</span></span>\n      </span>\n      <span class=\"task-extras\">\n        <span class=\"tasks-urgency\">18.157</span>\n        <span class=\"tasks-backlink\">\n          <a rel=\"noopener\" target=\"_blank\" class=\"internal-link internal-link-short-mode\">🔗</a>\n        </span>\n        <a class=\"tasks-edit\" title=\"Edit task\" href=\"#\"></a>\n        <a\n          class=\"tasks-postpone tasks-postpone-short-mode\"\n          title=\"ℹ️ Due tomorrow, on Thu 6th Jul (right-click for more options)\"></a>\n      </span>\n    </li>\n  </ul>\n  <div class=\"task-count\">1 task</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Formatting Task Text for Bug Reporting in Plain Text\nDESCRIPTION: Demonstrates how to format task text by enclosing lines with triple tildes (~~~) to preserve raw text formatting. This technique enables users to submit exact task lines for replication and debugging, preventing issues caused by theme or CSS alterations. The snippet requires users to place each task line between two lines containing only three tildes to ensure it is copied literally.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Support and Help/Report a Bug.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n~~~\n- [ ] My lovely task with 📅 2023-04-10 that Tasks search does not find\n~~~\n```\n\n----------------------------------------\n\nTITLE: Simple JavaScript Expressions in Obsidian Tasks\nDESCRIPTION: Examples of basic JavaScript expressions that can be used in Obsidian Tasks plugin, showing the syntax and evaluated results for strings, numbers, arrays, boolean values, and basic operations.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Scripting/Expressions.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n'hello' => 'hello'\n\"hello\" => 'hello'\n\"\" => ''\n[] => []\n\"\" || \"No value\" => 'No value'\nfalse => false\ntrue => true\n1 => 1\n0 => 0\n0 || \"No value\" => 'No value'\n1.0765456 => 1.0765456\n6 * 7 => 42\n[\"heading1\", \"heading2\"] => ['heading1', 'heading2']\n[1, 2] => [1, 2]\nnull => null\nnull || \"No value\" => 'No value'\nundefined => undefined\nundefined || \"No value\" => 'No value'\n\"I _am_ not _italic_\".replaceAll(\"_\", \"\\\\_\") => 'I \\_am\\_ not \\_italic\\_'\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Status Flowchart in Mermaid\nDESCRIPTION: This Mermaid code defines a left-to-right flowchart (LR) visualizing task status transitions. It includes CSS class definitions (classDef) to style nodes representing different statuses (TODO, IN_PROGRESS, DONE, CANCELLED, NON_TASK) with distinct border colors and widths. The flowchart shows transitions from 'Todo' to 'In Progress', 'In Progress' to 'Done', and 'Done' back to 'Todo'. The default link style is set to gray.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_todo-in_progress-done.approved.mermaid.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\nclassDef TODO        stroke:#f33,stroke-width:3px;\nclassDef DONE        stroke:#0c0,stroke-width:3px;\nclassDef IN_PROGRESS stroke:#fa0,stroke-width:3px;\nclassDef CANCELLED   stroke:#ddd,stroke-width:3px;\nclassDef NON_TASK    stroke:#99e,stroke-width:3px;\n\n1[\"Todo\"]:::TODO\n2[\"In Progress\"]:::IN_PROGRESS\n3[\"Done\"]:::DONE\n1 --> 2\n2 --> 3\n3 --> 1\n\nlinkStyle default stroke:gray\n```\n\n----------------------------------------\n\nTITLE: Deploying Locally via Symbolic Link (yarn)\nDESCRIPTION: Runs a Powershell script via `yarn` to create a symbolic link from the build output directory to a local Obsidian vault's plugin folder. This allows the plugin to be automatically updated in the target vault whenever a build occurs using `yarn run dev` or `yarn run build:dev`. Requires `yarn` and the `OBSIDIAN_PLUGIN_ROOT` environment variable to specify the target vault path.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Building/Local development.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn deploy:local\n```\n\n----------------------------------------\n\nTITLE: Evaluate Literal Value in JavaScript\nDESCRIPTION: This snippet evaluates a literal number `42` and returns it. It demonstrates the simplest form of an executable expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Scripting/Expression.test.Expression_returns_and_functions.approved.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nreturn 42\n=> 42\n```\n\n----------------------------------------\n\nTITLE: Creating Obsidian Wikilinks for Internal Documentation\nDESCRIPTION: Demonstrates various syntaxes for creating internal links within Obsidian documentation using wikilinks. Examples include linking directly to a file, using custom display text for a link, and linking to a specific heading within a file.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Documentation/Linking to other pages in the docs.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[Filters]]\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[[Filters|search filters]]\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[[Filters#Appendix: Tasks 2.0.0 improvements to date filters|Appendix below]]\n```\n\n----------------------------------------\n\nTITLE: Filter by Invalid Created Date\nDESCRIPTION: This snippet filters tasks based on whether the creation date is invalid using 'OR' and 'NOT' operators.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nOR (At least one of):\n      created date is invalid\n      NOT:\n        created date is invalid\n```\n\n----------------------------------------\n\nTITLE: JSON Suggestion for Task with Due Date Emoji\nDESCRIPTION: The JSON object returned by the Obsidian Tasks plugin as the first suggestion when the user types only the due date emoji (📅). It suggests 'today' and provides details for appending the date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__emoji__symbols_offers_correct_options_for_partial_due_date_lines.approved.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"today (2022-07-11)\",\n    \"appendText\": \"📅 2022-07-11 \",\n    \"insertAt\": 16,\n    \"insertSkip\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying AND NOT Query with Mixed Filters\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using AND NOT operators with a mix of description and priority filters. The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(description includes d1) AND   NOT (priority medium)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) AND   NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"description includes d1\",\n        \"f2\": \"priority medium\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Expressions: OR Operator\nDESCRIPTION: This section shows the parsing of an expression using the OR operator.  The example shows the expected interpretation of an OR expression, representing conditions joined with \"At least one of\".\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_explain.approved.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n'(not done) OR (is recurring)'\n=>\nResult:\n  (not done) OR (is recurring) =>\n    OR (At least one of):\n      not done\n      is recurring\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - is blocked\nDESCRIPTION: Simplifies 'OR NOT' expression with 'is blocked'.  'is blocked' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_52\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"is blocked\",\n        \"f2\": \"is blocked\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Input Markdown Task with Relative Date\nDESCRIPTION: Represents a markdown task line where the user has typed the due date emoji (📅) followed by a relative date string, like '1 year'. This input triggers a suggestion matching the relative date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__emoji__symbols_offers_correct_options_for_partial_due_date_lines.approved.txt#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- [ ] some task 📅 1 year\"\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Report with Jest - Shell\nDESCRIPTION: This command runs Jest, a JavaScript testing framework, with the --coverage flag using Yarn's package script. It generates a test coverage report in the coverage directory for the current codebase. Dependencies required include having Node.js, Yarn, and Jest installed in the project. No parameters are required, but the command assumes that test scripts are defined in the project's package.json. The output includes HTML and other formats showing coverage details for the codebase; results are stored in the coverage directory, which should be excluded from version control as configured in .gitignore.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/contributing/Testing/Test Coverage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn run jest --coverage\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Query Display Options with HTML Form Elements in Markdown\nDESCRIPTION: A form-like interface built with HTML input elements embedded in Markdown to configure how tasks are displayed in query results. It includes toggle switches for various task properties and metadata fields, as well as a text area for additional instructions.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DefaultsDocs/DocsSamplesForDefaults.test.DocsSamplesForDefaults_meta-bind-widgets-include.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- placeholder to force blank line before included text -->\n\n\nshort mode: `INPUT[toggle:TQ_short_mode]`\ntree: `INPUT[toggle:TQ_show_tree]`\ntags: `INPUT[toggle:TQ_show_tags]`\nid: `INPUT[toggle:TQ_show_id]` depends on: `INPUT[toggle:TQ_show_depends_on]`\npriority: `INPUT[toggle:TQ_show_priority]`\nrecurrence rule: `INPUT[toggle:TQ_show_recurrence_rule]` on completion: `INPUT[toggle:TQ_show_on_completion]`\nstart date: `INPUT[toggle:TQ_show_start_date]` scheduled date: `INPUT[toggle:TQ_show_scheduled_date]` due date: `INPUT[toggle:TQ_show_due_date]`\ncreated date: `INPUT[toggle:TQ_show_created_date]` cancelled date: `INPUT[toggle:TQ_show_cancelled_date]` done date: `INPUT[toggle:TQ_show_done_date]`\nurgency: `INPUT[toggle:TQ_show_urgency]`\nbacklink: `INPUT[toggle:TQ_show_backlink]`\nedit button: `INPUT[toggle:TQ_show_edit_button]` postpone button: `INPUT[toggle:TQ_show_postpone_button]`\ntask count: `INPUT[toggle:TQ_show_task_count]`\nextra instructions: `INPUT[textArea:TQ_extra_instructions]`\nexplain: `INPUT[toggle:TQ_explain]`\n\n\n<!-- placeholder to force blank line after included text -->\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no id\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no id'.  The term is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_64\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no id\",\n        \"f2\": \"no id\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Nested AND Expression\nDESCRIPTION: Shows preprocessing of a nested AND expression: `(A AND B) AND C`. All operands use parentheses.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'( (description includes a) AND (description includes b) ) AND (description includes c)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n[\n    \"( (\",\n    \"description includes a\",\n    \") AND (\",\n    \"description includes b\",\n    \") \",\n    \") AND (\",\n    \"description includes c\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Number of Auto-Suggestions in Obsidian Tasks Plugin\nDESCRIPTION: Adjusts the maximum suggestions shown in the auto-suggest menu by changing the slider setting in plugin options. Increasing the value enhances suggestion availability with a recommended default of 20, replacing the previous default of 6, which only affects new vaults.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/Editing/Auto-Suggest.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n>\n- The default value for [[#Maximum number of auto-suggestions to show]] was changed from 6 to 20 in Tasks 7.5.0.\n  - This new value only takes effect in new Tasks installations: the value in existing vaults will not be updated.\n  - We recommend increasing the value in your vault, for a better experience with auto-suggest.\n```\n\n----------------------------------------\n\nTITLE: Commands/index.ts and main.ts - Command Initialization and Main Application Setup\nDESCRIPTION: Setup files registering commands and initializing the main plugin application, integrating various modules and configurations for plugin operation.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Command registration and core application initialization, linking settings, UI, and core modules */\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Error: Mixed Delimiters in OR NOT (Parentheses/Quotes)\nDESCRIPTION: Illustrates a parsing error with mixed parentheses and quotes as delimiters in an OR NOT expression.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(not done) OR NOT \"is recurring\"'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nResult:\nError: Parsing expression.\nThe error message was:\n    \"Error: All filters in a Boolean instruction must be inside one of these pairs of delimiter characters: (...) or [...] or {...} or \\\"...\\\". Combinations of those delimiters are no longer supported.\"\n```\n\n----------------------------------------\n\nTITLE: JSON Suggestion for Task with Partial Date\nDESCRIPTION: The JSON object returned by the Obsidian Tasks plugin as the first suggestion when the user types the due date emoji (📅) followed by '27 oct'. It suggests the corresponding date in the current year and provides details for appending the full date.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__emoji__symbols_offers_correct_options_for_partial_due_date_lines.approved.txt#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"2022-10-27\",\n    \"appendText\": \"📅 2022-10-27 \",\n    \"insertAt\": 16,\n    \"insertSkip\": 9\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Task Status Symbols for Obsidian Tasks Plugin\nDESCRIPTION: A comprehensive markdown table that documents all the status symbols used in the Obsidian Tasks plugin. The table includes the status symbol, the next status symbol, the status name (with associated query examples), the status type, and whether custom styling is needed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.Theme_LYT_Mode_Table.approved.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Symbol | Next Status Symbol | Status Name<br>`status.name includes...`<br>`sort by status.name`<br>`group by status.name` | Status Type<br>`status.type is...`<br>`sort by status.type`<br>`group by status.type` | Needs Custom Styling |\n| ----- | ----- | ----- | ----- | ----- |\n| `space` | `x` | Unchecked | `TODO` | No |\n| `x` | `space` | Checked | `DONE` | No |\n| `>` | `x` | Rescheduled | `TODO` | Yes |\n| `<` | `x` | Scheduled | `TODO` | Yes |\n| `!` | `x` | Important | `TODO` | Yes |\n| `-` | `space` | Cancelled | `CANCELLED` | Yes |\n| `/` | `x` | In Progress | `IN_PROGRESS` | Yes |\n| `?` | `x` | Question | `TODO` | Yes |\n| `*` | `x` | Star | `TODO` | Yes |\n| `n` | `x` | Note | `TODO` | Yes |\n| `l` | `x` | Location | `TODO` | Yes |\n| `i` | `x` | Information | `TODO` | Yes |\n| `I` | `x` | Idea | `TODO` | Yes |\n| `S` | `x` | Amount | `TODO` | Yes |\n| `p` | `x` | Pro | `TODO` | Yes |\n| `c` | `x` | Con | `TODO` | Yes |\n| `b` | `x` | Bookmark | `TODO` | Yes |\n| `f` | `x` | Fire | `TODO` | Yes |\n| `k` | `x` | Key | `TODO` | Yes |\n| `w` | `x` | Win | `TODO` | Yes |\n| `u` | `x` | Up | `TODO` | Yes |\n| `d` | `x` | Down | `TODO` | Yes |\n```\n\n----------------------------------------\n\nTITLE: Addition Examples\nDESCRIPTION: Demonstrates several simple addition operations along with their results. These examples might illustrate test cases or calculation logic potentially used in the Obsidian Tasks plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TestingTools/CombinationApprovalsAsync.test.CombinationApprovalsAsync_verify2.approved.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(0 + 2) => 2\n(0 + 3) => 3\n(1 + 2) => 3\n(1 + 3) => 4\n```\n\n----------------------------------------\n\nTITLE: Obsidian/TasksEvents.ts - Task Related Event Handling\nDESCRIPTION: Event management system for handling task creation, update, and deletion events within Obsidian, enabling reactive updates and plugins.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Event emitters and listeners for task lifecycle events to support reactive UI updates and integrations */\n```\n\n----------------------------------------\n\nTITLE: Generating Task Suggestions based on Input - JSON\nDESCRIPTION: This code snippet represents the suggestion generated by the Obsidian Tasks plugin when the user types the specified input within a Markdown line. The suggestion includes details such as the type of suggestion, text to display, text to append, and the insertion position and skip length, informing how to update the user's input. The functionality depends on the `Obsidian Tasks` plugin itself. No further prerequisites are explicitly mentioned in this context, assuming standard Obsidian environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__dataview__symbols_offers_correct_options_for_partial_recurrence_lines.approved.txt#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"displayText\": \"due:: due date\",\n    \"appendText\": \"due:: \"\n}\n```\n\n----------------------------------------\n\nTITLE: Obsidian/Cache.ts and Obsidian/FileParser.ts - Caching and File Parsing\nDESCRIPTION: Modules responsible for caching file data and parsing Obsidian files to extract tasks, improving performance and data synchronization.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Caching strategies and file parsing logic to optimize task data retrieval and processing */\n```\n\n----------------------------------------\n\nTITLE: Processing Path Filters with Basic Boolean Logic\nDESCRIPTION: Shows how the parser processes simple path filters with AND, OR, and NOT operators. The system extracts each filter condition and replaces it with a placeholder in the simplified expression structure.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR (f2)\",\n    \"filters\": {\n        \"f1\": \"path includes A\",\n        \"f2\": \"path includes Test.md\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - is recurring\nDESCRIPTION: Simplifies 'OR NOT' expression with 'is recurring'. 'is recurring' is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_58\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"is recurring\",\n        \"f2\": \"is recurring\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of problematic callout code from Jekyll\nDESCRIPTION: A code example showing a custom callout format from Jekyll that needs to be converted to Obsidian's native callout format during the migration process.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/docs/migration.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"code-example\" markdown=\"1\">\nWarning\n{: .label .label-yellow }\nFolders with a comma (`,`) in their name are not supported.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calculating Sums of 7-Number Combinations in Mathematical Notation\nDESCRIPTION: This snippet presents an exhaustive calculation of sums where 7 numbers are selected from a range (0-13) and added together. Each line shows a unique combination with its resulting sum, organized in ascending order of both input values and resulting totals.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/TestingTools/CombinationApprovalsAsync.test.CombinationApprovalsAsync_verify7.approved.txt#_snippet_0\n\nLANGUAGE: mathematical notation\nCODE:\n```\n(0 + 2 + 4 + 6 + 8 + 10 + 12) => 42\n(0 + 2 + 4 + 6 + 8 + 10 + 13) => 43\n(0 + 2 + 4 + 6 + 8 + 11 + 12) => 43\n(0 + 2 + 4 + 6 + 8 + 11 + 13) => 44\n(0 + 2 + 4 + 6 + 9 + 10 + 12) => 43\n(0 + 2 + 4 + 6 + 9 + 10 + 13) => 44\n(0 + 2 + 4 + 6 + 9 + 11 + 12) => 44\n(0 + 2 + 4 + 6 + 9 + 11 + 13) => 45\n(0 + 2 + 4 + 7 + 8 + 10 + 12) => 43\n(0 + 2 + 4 + 7 + 8 + 10 + 13) => 44\n(0 + 2 + 4 + 7 + 8 + 11 + 12) => 44\n(0 + 2 + 4 + 7 + 8 + 11 + 13) => 45\n(0 + 2 + 4 + 7 + 9 + 10 + 12) => 44\n(0 + 2 + 4 + 7 + 9 + 10 + 13) => 45\n(0 + 2 + 4 + 7 + 9 + 11 + 12) => 45\n(0 + 2 + 4 + 7 + 9 + 11 + 13) => 46\n(0 + 2 + 5 + 6 + 8 + 10 + 12) => 43\n(0 + 2 + 5 + 6 + 8 + 10 + 13) => 44\n(0 + 2 + 5 + 6 + 8 + 11 + 12) => 44\n(0 + 2 + 5 + 6 + 8 + 11 + 13) => 45\n(0 + 2 + 5 + 6 + 9 + 10 + 12) => 44\n(0 + 2 + 5 + 6 + 9 + 10 + 13) => 45\n(0 + 2 + 5 + 6 + 9 + 11 + 12) => 45\n(0 + 2 + 5 + 6 + 9 + 11 + 13) => 46\n(0 + 2 + 5 + 7 + 8 + 10 + 12) => 44\n(0 + 2 + 5 + 7 + 8 + 10 + 13) => 45\n(0 + 2 + 5 + 7 + 8 + 11 + 12) => 45\n(0 + 2 + 5 + 7 + 8 + 11 + 13) => 46\n(0 + 2 + 5 + 7 + 9 + 10 + 12) => 45\n(0 + 2 + 5 + 7 + 9 + 10 + 13) => 46\n(0 + 2 + 5 + 7 + 9 + 11 + 12) => 46\n(0 + 2 + 5 + 7 + 9 + 11 + 13) => 47\n(0 + 3 + 4 + 6 + 8 + 10 + 12) => 43\n(0 + 3 + 4 + 6 + 8 + 10 + 13) => 44\n(0 + 3 + 4 + 6 + 8 + 11 + 12) => 44\n(0 + 3 + 4 + 6 + 8 + 11 + 13) => 45\n(0 + 3 + 4 + 6 + 9 + 10 + 12) => 44\n(0 + 3 + 4 + 6 + 9 + 10 + 13) => 45\n(0 + 3 + 4 + 6 + 9 + 11 + 12) => 45\n(0 + 3 + 4 + 6 + 9 + 11 + 13) => 46\n(0 + 3 + 4 + 7 + 8 + 10 + 12) => 44\n(0 + 3 + 4 + 7 + 8 + 10 + 13) => 45\n(0 + 3 + 4 + 7 + 8 + 11 + 12) => 45\n(0 + 3 + 4 + 7 + 8 + 11 + 13) => 46\n(0 + 3 + 4 + 7 + 9 + 10 + 12) => 45\n(0 + 3 + 4 + 7 + 9 + 10 + 13) => 46\n(0 + 3 + 4 + 7 + 9 + 11 + 12) => 46\n(0 + 3 + 4 + 7 + 9 + 11 + 13) => 47\n(0 + 3 + 5 + 6 + 8 + 10 + 12) => 44\n(0 + 3 + 5 + 6 + 8 + 10 + 13) => 45\n(0 + 3 + 5 + 6 + 8 + 11 + 12) => 45\n(0 + 3 + 5 + 6 + 8 + 11 + 13) => 46\n(0 + 3 + 5 + 6 + 9 + 10 + 12) => 45\n(0 + 3 + 5 + 6 + 9 + 10 + 13) => 46\n(0 + 3 + 5 + 6 + 9 + 11 + 12) => 46\n(0 + 3 + 5 + 6 + 9 + 11 + 13) => 47\n(0 + 3 + 5 + 7 + 8 + 10 + 12) => 45\n(0 + 3 + 5 + 7 + 8 + 10 + 13) => 46\n(0 + 3 + 5 + 7 + 8 + 11 + 12) => 46\n(0 + 3 + 5 + 7 + 8 + 11 + 13) => 47\n(0 + 3 + 5 + 7 + 9 + 10 + 12) => 46\n(0 + 3 + 5 + 7 + 9 + 10 + 13) => 47\n(0 + 3 + 5 + 7 + 9 + 11 + 12) => 47\n(0 + 3 + 5 + 7 + 9 + 11 + 13) => 48\n(1 + 2 + 4 + 6 + 8 + 10 + 12) => 43\n(1 + 2 + 4 + 6 + 8 + 10 + 13) => 44\n(1 + 2 + 4 + 6 + 8 + 11 + 12) => 44\n(1 + 2 + 4 + 6 + 8 + 11 + 13) => 45\n(1 + 2 + 4 + 6 + 9 + 10 + 12) => 44\n(1 + 2 + 4 + 6 + 9 + 10 + 13) => 45\n(1 + 2 + 4 + 6 + 9 + 11 + 12) => 45\n(1 + 2 + 4 + 6 + 9 + 11 + 13) => 46\n(1 + 2 + 4 + 7 + 8 + 10 + 12) => 44\n(1 + 2 + 4 + 7 + 8 + 10 + 13) => 45\n(1 + 2 + 4 + 7 + 8 + 11 + 12) => 45\n(1 + 2 + 4 + 7 + 8 + 11 + 13) => 46\n(1 + 2 + 4 + 7 + 9 + 10 + 12) => 45\n(1 + 2 + 4 + 7 + 9 + 10 + 13) => 46\n(1 + 2 + 4 + 7 + 9 + 11 + 12) => 46\n(1 + 2 + 4 + 7 + 9 + 11 + 13) => 47\n(1 + 2 + 5 + 6 + 8 + 10 + 12) => 44\n(1 + 2 + 5 + 6 + 8 + 10 + 13) => 45\n(1 + 2 + 5 + 6 + 8 + 11 + 12) => 45\n(1 + 2 + 5 + 6 + 8 + 11 + 13) => 46\n(1 + 2 + 5 + 6 + 9 + 10 + 12) => 45\n(1 + 2 + 5 + 6 + 9 + 10 + 13) => 46\n(1 + 2 + 5 + 6 + 9 + 11 + 12) => 46\n(1 + 2 + 5 + 6 + 9 + 11 + 13) => 47\n(1 + 2 + 5 + 7 + 8 + 10 + 12) => 45\n(1 + 2 + 5 + 7 + 8 + 10 + 13) => 46\n(1 + 2 + 5 + 7 + 8 + 11 + 12) => 46\n(1 + 2 + 5 + 7 + 8 + 11 + 13) => 47\n(1 + 2 + 5 + 7 + 9 + 10 + 12) => 46\n(1 + 2 + 5 + 7 + 9 + 10 + 13) => 47\n(1 + 2 + 5 + 7 + 9 + 11 + 12) => 47\n(1 + 2 + 5 + 7 + 9 + 11 + 13) => 48\n(1 + 3 + 4 + 6 + 8 + 10 + 12) => 44\n(1 + 3 + 4 + 6 + 8 + 10 + 13) => 45\n(1 + 3 + 4 + 6 + 8 + 11 + 12) => 45\n(1 + 3 + 4 + 6 + 8 + 11 + 13) => 46\n(1 + 3 + 4 + 6 + 9 + 10 + 12) => 45\n(1 + 3 + 4 + 6 + 9 + 10 + 13) => 46\n(1 + 3 + 4 + 6 + 9 + 11 + 12) => 46\n(1 + 3 + 4 + 6 + 9 + 11 + 13) => 47\n(1 + 3 + 4 + 7 + 8 + 10 + 12) => 45\n(1 + 3 + 4 + 7 + 8 + 10 + 13) => 46\n(1 + 3 + 4 + 7 + 8 + 11 + 12) => 46\n(1 + 3 + 4 + 7 + 8 + 11 + 13) => 47\n(1 + 3 + 4 + 7 + 9 + 10 + 12) => 46\n(1 + 3 + 4 + 7 + 9 + 10 + 13) => 47\n(1 + 3 + 4 + 7 + 9 + 11 + 12) => 47\n(1 + 3 + 4 + 7 + 9 + 11 + 13) => 48\n(1 + 3 + 5 + 6 + 8 + 10 + 12) => 45\n(1 + 3 + 5 + 6 + 8 + 10 + 13) => 46\n(1 + 3 + 5 + 6 + 8 + 11 + 12) => 46\n(1 + 3 + 5 + 6 + 8 + 11 + 13) => 47\n(1 + 3 + 5 + 6 + 9 + 10 + 12) => 46\n(1 + 3 + 5 + 6 + 9 + 10 + 13) => 47\n(1 + 3 + 5 + 6 + 9 + 11 + 12) => 47\n(1 + 3 + 5 + 6 + 9 + 11 + 13) => 48\n(1 + 3 + 5 + 7 + 8 + 10 + 12) => 46\n(1 + 3 + 5 + 7 + 8 + 10 + 13) => 47\n(1 + 3 + 5 + 7 + 8 + 11 + 12) => 47\n(1 + 3 + 5 + 7 + 8 + 11 + 13) => 48\n(1 + 3 + 5 + 7 + 9 + 10 + 12) => 47\n(1 + 3 + 5 + 7 + 9 + 10 + 13) => 48\n(1 + 3 + 5 + 7 + 9 + 11 + 12) => 48\n(1 + 3 + 5 + 7 + 9 + 11 + 13) => 49\n```\n\n----------------------------------------\n\nTITLE: Simplifying AND NOT Boolean Expression\nDESCRIPTION: This snippet simplifies an expression combining 'has start date' and 'NOT (description includes some)' using 'AND'. 'has start date' is aliased to 'f1' and 'description includes some' to 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_39\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) AND NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"has start date\",\n        \"f2\": \"description includes some\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TaskSerializer/DefaultTaskSerializer.ts and TaskSerializer/index.ts - Default Task Serialization\nDESCRIPTION: These files provide implementation for serializing tasks into the default format and aggregate serializer functionalities. They depend on task settings and support data export/import within the plugin.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Default task serializer implementations, supporting serialization/deserialization of task data, integrated with task settings */\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Boolean Expression - no cancelled date\nDESCRIPTION: Simplifies an 'OR NOT' expression involving 'no cancelled date'. The term is aliased to 'f1' and 'f2'.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_59\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"no cancelled date\",\n        \"f2\": \"no cancelled date\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Done Status Symbol: x\nDESCRIPTION: Represents the 'Done' task status symbol as defined in the configuration table. This symbol marks a task as completed.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_todo-in_progress-done.approved.md#_snippet_2\n\nLANGUAGE: Configuration\nCODE:\n```\nx\n```\n\n----------------------------------------\n\nTITLE: Simplifying OR NOT Query with Relative Cancelled Date\nDESCRIPTION: Example showing the simplification of an Obsidian Tasks query using OR NOT operators with a relative cancelled date filter ('this week'). The input query string is transformed into a JSON object with a simplified line and a filters map.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_rewrite.approved.txt#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nInput:\n'(cancelled this week) OR NOT (cancelled this week)'\n```\n\nLANGUAGE: json\nCODE:\n```\nResult:\n{\n    \"simplifiedLine\": \"(f1) OR NOT (f2)\",\n    \"filters\": {\n        \"f1\": \"cancelled this week\",\n        \"f2\": \"cancelled this week\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Done Status Type Name: DONE\nDESCRIPTION: Represents the internal type name for the 'Done' task status. This identifier is used by the plugin to refer to the completed status.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/DocumentationSamples/DocsSamplesForStatuses.test.DefaultStatuses_todo-in_progress-done.approved.md#_snippet_5\n\nLANGUAGE: Configuration\nCODE:\n```\nDONE\n```\n\n----------------------------------------\n\nTITLE: Parsing 'OR description includes d1'\nDESCRIPTION: This snippet parses a query with the 'OR' operator and 'description includes d1'. It targets tasks that have 'd1' included in their description, the 'OR' operator is likely part of a compound condition. The result displays the parsed parts.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Query/Filter/BooleanField.test.boolean_query_-_exhaustive_tests_preprocess_-_split_line.approved.txt#_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n[\n    \"OR (description includes d1\",\n    \")\"\n]\n```\n\n----------------------------------------\n\nTITLE: main.ts and Config/SettingsTab.ts - Main Entry Point and Settings Tab\nDESCRIPTION: Main entry point for plugin loading and configuration UI setup, providing user access to settings and plugin controls.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/circular-deps.txt#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Main plugin load sequence and settings tab UI setup */\n```\n\n----------------------------------------\n\nTITLE: Generating Task Suggestions based on Input - JSON\nDESCRIPTION: This code snippet represents the suggestion generated by the Obsidian Tasks plugin when the user types the specified input within a Markdown line. The suggestion includes details such as the type of suggestion, text to display, text to append, and the insertion position and skip length, informing how to update the user's input. The functionality depends on the `Obsidian Tasks` plugin itself. No further prerequisites are explicitly mentioned in this context, assuming standard Obsidian environment.\nSOURCE: https://github.com/obsidian-tasks-group/obsidian-tasks/blob/main/tests/Suggestor/Suggestor.test.auto-complete_with__dataview__symbols_offers_correct_options_for_partial_recurrence_lines.approved.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"suggestionType\": \"match\",\n    \"displayText\": \"every\",\n    \"appendText\": \"repeat:: every] \",\n    \"insertAt\": 16,\n    \"insertSkip\": 11\n}\n```"
  }
]