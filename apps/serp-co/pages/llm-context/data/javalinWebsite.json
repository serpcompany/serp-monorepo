[
  {
    "owner": "javalin",
    "repo": "website",
    "content": "TITLE: Configuring API Routes with Handler Groups in Javalin\nDESCRIPTION: Demonstrates how to use apiBuilder() and path() methods to group endpoints in Javalin. It shows the setup of RESTful routes for user operations, including WebSocket events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nconfig.router.apiBuilder(() -> {\n    path(\"/users\", () -> {\n        get(UserController::getAllUsers);\n        post(UserController::createUser);\n        path(\"/{id}\", () -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n        ws(\"/events\", UserController::webSocketEvents);\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.router.apiBuilder {\n    path(\"/users\") {\n        get(UserController::getAllUsers)\n        post(UserController::createUser)\n        path(\"/{id}\") {\n            get(UserController::getUser)\n            patch(UserController::updateUser)\n            delete(UserController::deleteUser)\n        }\n        ws(\"/events\", UserController::webSocketEvents)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Handlers in Javalin\nDESCRIPTION: Examples of before-handlers that run before all requests or specific path patterns. These handlers can be used for authentication, logging, or other pre-request processing.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> {\n    // runs before all requests\n});\napp.before(\"/path/*\", ctx -> {\n    // runs before request to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.before { ctx ->\n    // runs before all requests\n}\napp.before(\"/path/*\") { ctx ->\n    // runs before request to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty Server in Javalin for Java\nDESCRIPTION: Illustrates how to configure the embedded Jetty server in Javalin, including default host and port, thread pool, multipart config, and server modifications.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.jetty.defaultHost = \"localhost\"; // set the default host for Jetty\n    config.jetty.defaultPort = 1234; // set the default port for Jetty\n    config.jetty.threadPool = new ThreadPool(); // set the thread pool for Jetty\n    config.jetty.multipartConfig = new MultipartConfig(); // set the multipart config for Jetty\n    config.jetty.modifyJettyWebSocketServletFactory(factory -> {}); // modify the JettyWebSocketServletFactory\n    config.jetty.modifyServer(server -> {}); // modify the Jetty Server\n    config.jetty.modifyServletContextHandler(handler -> {}); // modify the ServletContextHandler (you can set a SessionHandler here)\n    config.jetty.modifyHttpConfiguration(httpConfig -> {}); // modify the HttpConfiguration\n    config.jetty.addConnector((server, httpConfig) -> new ServerConnector(server)); // add a connector to the Jetty Server\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin with Configuration Options in Java\nDESCRIPTION: Demonstrates how to create a new Javalin instance with various configuration options, including HTTP settings, routing, static files, and plugins.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.http // The http layer configuration: etags, request size, timeout, etc\n    config.router // The routing configuration: context path, slash treatment, etc\n    config.jetty // The embedded Jetty webserver configuration\n    config.staticFiles // Static files and webjars configuration\n    config.spaRoot = // Single Page Application roots configuration\n    config.requestLogger // Request Logger configuration: http and websocket loggers\n    config.bundledPlugins // Bundled plugins configuration: enable bundled plugins or add custom ones\n    config.events // Events configuration\n    config.vue // Vue Plugin configuration\n    config.contextResolver // Context resolver implementation configuration\n    config.validation // Default validator configuration\n    config.useVirtualThreads // Use virtual threads (based on Java Project Loom)\n    config.showJavalinBanner // Show the Javalin banner in the logs\n    config.startupWatcherEnabled // Print warning if instance was not started after 5 seconds\n    config.pvt // This is \"private\", only use it if you know what you're doing\n\n    config.events(listenerConfig) // Add an event listener\n    config.jsonMapper(jsonMapper) // Set a custom JsonMapper\n    config.fileRenderer(fileRenderer) // Set a custom FileRenderer\n    config.registerPlugin(plugin) // Register a plugin\n    config.appData(key, data) // Store data on the Javalin instance\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Server with API Routes\nDESCRIPTION: Demonstrates server configuration options and RESTful route structuring with nested paths for user management.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2019-06-11-javalin-3.0.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n    config.defaultContentType = \"application/json\";\n    config.autogenerateEtags = true;\n    config.addStaticFiles(\"/public\");\n    config.asyncRequestTimeout = 10_000L;\n    config.dynamicGzip = true;\n    config.enforceSsl = true;\n}).routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAll);\n        post(UserController::create);\n        path(\":user-id\"(() -> {\n            get(UserController::getOne);\n            patch(UserController::update);\n            delete(UserController::delete);\n        });\n        ws(\"events\", userController::webSocketEvents);\n    });\n}).start(port);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create { config ->\n    config.defaultContentType = \"application/json\"\n    config.autogenerateEtags = true\n    config.addStaticFiles(\"/public\")\n    config.asyncRequestTimeout = 10_000L\n    config.dynamicGzip = true\n    config.enforceSsl = true\n}.routes {\n    path(\"users\") {\n        get(UserController::getAll)\n        post(UserController::create)\n        path(\":user-id\") {\n            get(UserController::getOne)\n            patch(UserController::update)\n            delete(UserController::delete)\n        }\n        ws(\"events\", userController::webSocketEvents)\n    }\n}.start(port)\n```\n\n----------------------------------------\n\nTITLE: Using BeforeMatched Handlers in Javalin\nDESCRIPTION: Implementation of beforeMatched handlers that only execute for matched requests, including static files. Used for pre-processing of known valid routes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.beforeMatched(ctx -> {\n    // runs before all matched requests (including static files)\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.beforeMatched { ctx ->\n    // runs before all matched requests (including static files)\n}\n```\n\n----------------------------------------\n\nTITLE: Using BeforeMatched Handlers in Javalin\nDESCRIPTION: Implementation of beforeMatched handlers that only execute for matched requests, including static files. Used for pre-processing of known valid routes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.beforeMatched(ctx -> {\n    // runs before all matched requests (including static files)\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.beforeMatched { ctx ->\n    // runs before all matched requests (including static files)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin with Configuration Options\nDESCRIPTION: This snippet demonstrates how to create a new Javalin instance with various configuration options. It showcases the main configuration categories available in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.http             // etags, request size, timeout, etc\n    config.routing          // context path, slash treatment\n    config.jetty            // jetty settings\n    config.staticFiles      // static files and webjars\n    config.spaRoot          // single page application roots\n    config.compression      // gzip, brotli, disable compression\n    config.requestLogger    // http and websocket loggers\n    config.plugins          // enable bundled plugins or add custom ones\n    config.vue              // vue settings, see /plugins/vue\n    config.contextResolvers // change implementation for Context functions\n    config.accessManager()  // configure the access manager\n    config.jsonMapper()     // configure the json mapper\n    config.fileRenderer()   // configure the file renderer\n});\n```\n\n----------------------------------------\n\nTITLE: Javalin Context Methods Reference\nDESCRIPTION: Complete listing of available methods in Javalin's Context object for handling HTTP requests and responses, including request methods, response methods, and utility functions.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Request methods\nbody()                                  // request body as string\nbodyAsBytes()                           // request body as array of bytes\nbodyAsInputStream()                     // request body as input stream\nbodyAsClass(clazz)                      // request body as specified class (deserialized from JSON)\nbodyStreamAsClass(clazz)                // request body as specified class (memory optimized version of above)\nbodyValidator(clazz)                    // request body as validator typed as specified class\nuploadedFile(\"name\")                    // uploaded file by name\nuploadedFiles(\"name\")                   // all uploaded files by name\nuploadedFiles()                         // all uploaded files as list\nformParam(\"name\")                       // form parameter by name, as string\nformParamAsClass(\"name\", clazz)         // form parameter by name, as validator typed as specified class\nformParams(\"name\")                      // list of form parameters by name\nformParamMap()                          // map of all form parameters\npathParam(\"name\")                       // path parameter by name as string\npathParamAsClass(\"name\", clazz)         // path parameter as validator typed as specified class\npathParamMap()                          // map of all path parameters\nbasicAuthCredentialsExist()             // true if request has basic auth credentials\nbasicAuthCredentials()                  // basic auth credentials (if set)\nattribute(\"name\", value)                // set an attribute on the request\nattribute(\"name\")                       // get an attribute on the request\nattributeMap()                          // map of all attributes on the request\ncontentLength()                         // content length of the request body\ncontentType()                           // request content type\ncookie(\"name\")                          // request cookie by name\ncookieMap()                             // map of all request cookies\nheader(\"name\")                          // request header by name (can be used with Header.HEADERNAME)\nheaderAsClass(\"name\", clazz)            // request header by name, as validator typed as specified class\nheaderMap()                             // map of all request headers\nhost()                                  // host as string\nip()                                    // ip as string\nisMultipart()                           // true if the request is multipart\nisMultipartFormData()                   // true if the request is multipart/formdata\nmethod()                                // request methods (GET, POST, etc)\npath()                                  // request path\nport()                                  // request port\nprotocol()                              // request protocol\nqueryParam(\"name\")                      // query param by name as string\nqueryParamAsClass(\"name\", clazz)        // query param parameter by name, as validator typed as specified class\nqueryParams(\"name\")                      // list of query parameters by name\nqueryParamMap()                         // map of all query parameters\nqueryString()                           // full query string\nscheme()                                // request scheme\nsessionAttribute(\"name\", value)         // set a session attribute\nsessionAttribute(\"name\")                // get a session attribute\nconsumeSessionAttribute(\"name\")         // get a session attribute, and set value to null\ncachedSessionAttribute(\"name\", value)   // set a session attribute, and cache the value as a request attribute\ncachedSessionAttribute(\"name\")          // get a session attribute, and cache the value as a request attribute\ncachedSessionAttributeOrCompute(...)    // same as above, but compute and set if value is absent\nsessionAttributeMap()                   // map of all session attributes\nurl()                                   // request url\nfullUrl()                               // request url + query string\ncontextPath()                           // request context path\nuserAgent()                             // request user agent\n\n// Response methods\nresult(\"result\")                        // set result stream to specified string (overwrites any previously set result)\nresult(byteArray)                       // set result stream to specified byte array (overwrites any previously set result)\nresult(inputStream)                     // set result stream to specified input stream (overwrites any previously set result)\nseekableStream(inputStream, \"type\")     // write content immediately as seekable stream (useful for audio and video)\nresultStream()                          // get current result stream\nresultString()                          // get current result stream as string (if possible), and reset result stream\nfuture(future, callback)                // set the result to be a future, see async section (overwrites any previously set result)\nresultFuture()                          // get current result future\ncontentType(\"type\")                     // set the response content type\nheader(\"name\", \"value\")                 // set response header by name (can be used with Header.HEADERNAME)\nredirect(\"/path\", code)                 // redirect to the given path with the given status code\nstatus(code)                            // set the response status code\nstatus()                                // get the response status code\ncookie(\"name\", \"value\", maxAge)         // set response cookie by name, with value and max-age (optional).\ncookie(cookie)                          // set cookie using javalin Cookie class\nremoveCookie(\"name\", \"/path\")           // removes cookie by name and path (optional)\njson(obj)                               // calls result(jsonString), and also sets content type to json\njsonStream(obj)                         // calls result(jsonStream), and also sets content type to json\nhtml(\"html\")                            // calls result(string), and also sets content type to html\nrender(\"/template.tmpl\", model)         // calls html(renderedTemplate)\n\n// Other methods\nhandlerType()                           // handler type of the current handler (BEFORE, AFTER, GET, etc)\nappAttribute(\"name\")                    // get an attribute on the Javalin instance. see app attributes section below\nmatchedPath()                           // get the path that was used to match this request (ex, \"/hello/{name}\")\nendpointHandlerPath()                   // get the path of the endpoint handler that was used to match this request\ncookieStore                             // see cookie store section below\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Server in Javalin\nDESCRIPTION: Basic example showing how to create and start a Javalin server that responds with 'Hello World' on the root path.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2019-06-11-javalin-3.0.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    var app = Javalin.create().start(7000);\n    app.get(\"/\", ctx -> ctx.result(\"Hello World\"));\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val app = Javalin.create().start(7000)\n    app.get(\"/\") { it.result(\"Hello World\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Javalin\nDESCRIPTION: This snippet shows how to use Javalin's built-in naive rate limiter to restrict the number of requests per time unit. It demonstrates limiting requests and customizing the key function used for rate limiting.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_48\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> {\n    NaiveRateLimit.requestPerTimeUnit(ctx, 5, TimeUnit.MINUTES); // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\");\n});\n\n// you can overwrite the key-function:\nRateLimitUtil.keyFunction = ctx -> // uses (ip+method+endpointPath) by default\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/\") { ctx ->\n    NaiveRateLimit.requestPerTimeUnit(ctx, 5, TimeUnit.MINUTES) // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\")\n}\n\n// you can overwrite the key-function:\nRateLimitUtil.keyFunction = { ctx -> } // uses (ip+method+endpointPath) by default\n```\n\n----------------------------------------\n\nTITLE: Exception Mapping in Javalin\nDESCRIPTION: Demonstrates how to handle different types of exceptions for both HTTP and WebSocket connections using exception mappers.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n// HTTP exceptions\napp.exception(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.exception(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n\n// WebSocket exceptions\napp.wsException(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.wsException(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// HTTP exceptions\napp.exception(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.exception(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n\n// WebSocket exceptions\napp.wsException(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.wsException(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Server with Javalin in Java\nDESCRIPTION: A minimal Javalin application that creates and launches an HTTP server on port 7000 with a single endpoint returning 'Hello World'. This demonstrates how simple it is to set up a web server with Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/for-educators.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Javalin app = Javalin.create().start(7000); // create and launch server\n        app.get(\"/\", ctx -> ctx.result(\"Hello World\")); // add root endpoint\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin Validation Examples (Java)\nDESCRIPTION: Provides examples of using Javalin's Validator for various scenarios, including validating query parameters, dependent parameters, JSON body, and custom validation errors in Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n// VALIDATE A SINGLE QUERY PARAMETER WITH A DEFAULT VALUE /////////////////////////////////////////////\nInteger myValue = ctx.queryParamAsClass(\"value\", Integer.class).getOrDefault(788) // validate value\nctx.result(value) // return validated value to the client\n// GET ?value=a would yield HTTP 400 - {\"my-qp\":[{\"message\":\"TYPE_CONVERSION_FAILED\",\"args\":{},\"value\":\"a\"}]}\n// GET ?value=1 would yield HTTP 200 - 1 (the validated value)\n// GET ?        would yield HTTP 200 - 788 (the default value)\n\n\n// VALIDATE TWO DEPENDENT QUERY PARAMETERS ////////////////////////////////////////////////////////////\nInstant fromDate = ctx.queryParamAsClass(\"from\", Instant.class).get();\nInstant toDate = ctx.queryParamAsClass(\"to\", Instant.class)\n    .check(it -> it.isAfter(fromDate), \"'to' has to be after 'from'\")\n    .get();\n\n\n// VALIDATE A JSON BODY ///////////////////////////////////////////////////////////////////////////////\nMyObject myObject = ctx.bodyValidator(MyObject.class)\n    .check(obj -> obj.myObjectProperty == someValue, \"THINGS_MUST_BE_EQUAL\")\n    .get();\n\n// VALIDATE WITH CUSTOM VALIDATIONERROR ///////////////////////////////////////////////////////////////\nctx.queryParamAsClass(\"param\", Integer.class)\n    .check({ it > 5 }, new ValidationError(\"OVER_LIMIT\", Map.of(\"limit\", 5)))\n    .get();\n// GET ?param=10 would yield HTTP 400 - {\"param\":[{\"message\":\"OVER_LIMIT\",\"args\":{\"limit\":5},\"value\":10}]}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Javalin Hello World Server\nDESCRIPTION: Demonstrates the minimal setup required to create a Javalin web server that responds with 'Hello World' on the root path. Shows both Java and Kotlin implementations.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-09-13-javalin-4.0.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    var app = Javalin.create().start(7000);\n    app.get(\"/\", ctx -> ctx.result(\"Hello World\"));\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val app = Javalin.create().start(7000)\n    app.get(\"/\") { it.result(\"Hello World\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Settings in Javalin for Java\nDESCRIPTION: Shows how to configure various HTTP-related settings in Javalin, including ETag generation, request size limits, content types, and compression options.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.http.generateEtags = booleanValue;       // if javalin should generate etags for dynamic responses (not static files)\n    config.http.prefer405over404 = booleanValue;    // return 405 instead of 404 if path is mapped to different HTTP method\n    config.http.maxRequestSize = longValue;         // the max size of request body that can be accessed without using using an InputStream\n    config.http.defaultContentType = stringValue;   // the default content type\n    config.http.asyncTimeout = longValue;           // timeout in milliseconds for async requests (0 means no timeout)\n    config.http.strictContentTypes = booleanValue;  // throw exception if e.g content-type is missing/incorrect when attempting to parse JSON\n    \n    config.http.customCompression(strategy);        // set a custom compression strategy\n    config.http.brotliAndGzipCompression(lvl, lvl); // enable brotli and gzip compression with the specified levels\n    config.http.gzipOnlyCompression(lvl);           // enable gzip compression with the specified level\n    config.http.brotliOnlyCompression(lvl);         // enable brotli compression with the specified level\n    config.http.disableCompression();               // disable compression\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Management in Javalin 6\nDESCRIPTION: Demonstrates how to implement access management using beforeMatched handler to check user roles against route roles. Throws UnauthorizedResponse for unauthorized access attempts.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_23\n\nLANGUAGE: java\nCODE:\n```\napp.beforeMatched(ctx -> {\n    var userRole = getUserRole(ctx); // some user defined function that returns a user role\n    if (!ctx.routeRoles().contains(userRole)) { // routeRoles are provided through the Context interface\n        throw new UnauthorizedResponse(); // request will have to be explicitly stopped by throwing an exception\n    }\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.beforeMatched { ctx ->\n    val userRole = getUserRole(ctx) // some user defined function that returns a user role\n    if (!ctx.routeRoles().contains(userRole)) { // routeRoles are provided through the Context interface\n        throw UnauthorizedResponse() // request will have to be explicitly stopped by throwing an exception\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Javalin Setup\nDESCRIPTION: Demonstrates the basic setup for a Javalin application, including creating an instance and defining a route.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n{% include macros/gettingStarted.md %}\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Web Server with Javalin in Java\nDESCRIPTION: This snippet demonstrates how to create a basic Javalin web server in Java. It sets up a GET route for the root path ('/') that responds with 'Hello World' and starts the server on port 7070.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/gettingStarted.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        var app = Javalin.create(/*config*/)\n            .get(\"/\", ctx -> ctx.result(\"Hello World\"))\n            .start(7070);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Store to Pass Data Between Servers in Javalin\nDESCRIPTION: This example demonstrates how to use Javalin's cookie store to store and retrieve data between different servers. Various data types (strings, integers, and lists) can be stored and later retrieved from a completely different server instance since the cookie is stored on the client side.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\", ctx -> {\n    ctx.cookieStore().set(\"string\", \"Hello world!\");\n    ctx.cookieStore().set(\"i\", 42);\n    ctx.cookieStore().set(\"list\", Arrays.asList(\"One\", \"Two\", \"Three\"));\n});\nserverTwoApp.get(\"/cookie-reader\", ctx -> { // runs on a different server than serverOneApp\n    String string = ctx.cookieStore().get(\"string\")\n    int i = ctx.cookieStore().get(\"i\")\n    List<String> list = ctx.cookieStore().get(\"list\")\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\") { ctx ->\n    ctx.cookieStore().set(\"string\", \"Hello world!\")\n    ctx.cookieStore().set(\"i\", 42)\n    ctx.cookieStore().set(\"list\", listOf(\"One\", \"Two\", \"Three\"))\n}\nserverTwoApp.get(\"/cookie-reader\") { ctx -> // runs on a different server than serverOneApp\n    val string = ctx.cookieStore().get(\"string\")\n    val i = ctx.cookieStore().get(\"i\")\n    val list = ctx.cookieStore().get(\"list\")\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Examples in Javalin (Kotlin)\nDESCRIPTION: Provides examples of more complex validations in Javalin using Kotlin. It shows how to validate dependent query parameters and a JSON body.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\n// validate two dependent query parameters:\nval fromDate = ctx.queryParam<Instant>(\"from\").get()\nval toDate = ctx.queryParam<Instant>(\"to\")\n        .check({ it.isAfter(fromDate) }, \"'to' has to be after 'from'\")\n        .get()\n\n// validate a json body:\nval myObject = ctx.bodyValidator<MyObject>()\n        .check({ it.myObjectProperty == someValue })\n        .get()\n```\n\n----------------------------------------\n\nTITLE: Using Context Methods for Request and Response Handling in Java\nDESCRIPTION: This code snippet provides an extensive list of all available methods on the Context object in Javalin, organized by purpose (request methods, response methods, and other utility methods).\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Request methods\nbody()                                // request body as string\nbodyAsBytes()                         // request body as array of bytes\nbodyAsClass(clazz)                    // request body as specified class (deserialized from JSON)\nbodyStreamAsClass(clazz)              // request body as specified class (memory optimized version of above)\nbodyValidator(clazz)                  // request body as validator typed as specified class\nbodyInputStream()                     // the underyling input stream of the request\nuploadedFile(\"name\")                  // uploaded file by name\nuploadedFiles(\"name\")                 // all uploaded files by name\nuploadedFiles()                       // all uploaded files as list\nuploadedFileMap()                     // all uploaded files as a \"names by files\" map\nformParam(\"name\")                     // form parameter by name, as string\nformParamAsClass(\"name\", clazz)       // form parameter by name, as validator typed as specified class\nformParams(\"name\")                    // list of form parameters by name\nformParamMap()                        // map of all form parameters\npathParam(\"name\")                     // path parameter by name as string\npathParamAsClass(\"name\", clazz)       // path parameter as validator typed as specified class\npathParamMap()                        // map of all path parameters\nbasicAuthCredentials()                // basic auth credentials (or null if not set)\nattribute(\"name\", value)              // set an attribute on the request\nattribute(\"name\")                     // get an attribute on the request\nattributeOrCompute(\"name\", ctx -> {}) // get an attribute or compute it based on the context if absent\nattributeMap()                        // map of all attributes on the request\ncontentLength()                       // content length of the request body\ncontentType()                         // request content type\ncookie(\"name\")                        // request cookie by name\ncookieMap()                           // map of all request cookies\nheader(\"name\")                        // request header by name (can be used with Header.HEADERNAME)\nheaderAsClass(\"name\", clazz)          // request header by name, as validator typed as specified class\nheaderMap()                           // map of all request headers\nhost()                                // host as string\nip()                                  // ip as string\nisMultipart()                         // true if the request is multipart\nisMultipartFormData()                 // true if the request is multipart/formdata\nmethod()                              // request methods (GET, POST, etc)\npath()                                // request path\nport()                                // request port\nprotocol()                            // request protocol\nqueryParam(\"name\")                    // query param by name as string\nqueryParamAsClass(\"name\", clazz)      // query param by name, as validator typed as specified class\nqueryParamsAsClass(\"name\", clazz)     // query param list by name, as validator typed as list of specified class\nqueryParams(\"name\")                   // list of query parameters by name\nqueryParamMap()                       // map of all query parameters\nqueryString()                         // full query string\nscheme()                              // request scheme\nsessionAttribute(\"name\", value)       // set a session attribute\nsessionAttribute(\"name\")              // get a session attribute\nconsumeSessionAttribute(\"name\")       // get a session attribute, and set value to null\ncachedSessionAttribute(\"name\", value) // set a session attribute, and cache the value as a request attribute\ncachedSessionAttribute(\"name\")        // get a session attribute, and cache the value as a request attribute\ncachedSessionAttributeOrCompute(...)  // same as above, but compute and set if value is absent\nsessionAttributeMap()                 // map of all session attributes\nurl()                                 // request url\nfullUrl()                             // request url + query string\ncontextPath()                         // request context path\nuserAgent()                           // request user agent\nreq()                                 // get the underlying HttpServletRequest\n\n// Response methods\nresult(\"result\")                      // set result stream to specified string (overwrites any previously set result)\nresult(byteArray)                     // set result stream to specified byte array (overwrites any previously set result)\nresult(inputStream)                   // set result stream to specified input stream (overwrites any previously set result)\nfuture(futureSupplier)                // set the result to be a future, see async section (overwrites any previously set result)\nwriteSeekableStream(inputStream)      // write content immediately as seekable stream (useful for audio and video)\nresult()                              // get current result stream as string (if possible), and reset result stream\nresultInputStream()                   // get current result stream\ncontentType(\"type\")                   // set the response content type\nheader(\"name\", \"value\")               // set response header by name (can be used with Header.HEADERNAME)\nredirect(\"/path\", code)               // redirect to the given path with the given status code\nstatus(code)                          // set the response status code\nstatus()                              // get the response status code\ncookie(\"name\", \"value\", maxAge)       // set response cookie by name, with value and max-age (optional).\ncookie(cookie)                        // set cookie using javalin Cookie class\nremoveCookie(\"name\", \"/path\")         // removes cookie by name and path (optional)\njson(obj)                             // calls result(jsonString), and also sets content type to json\njsonStream(obj)                       // calls result(jsonStream), and also sets content type to json\nhtml(\"html\")                          // calls result(string), and also sets content type to html\nrender(\"/template.tmpl\", model)       // calls html(renderedTemplate)\nres()                                 // get the underlying HttpServletResponse\n\n// Other methods\nasync(runnable)                       // lifts request out of Jetty's ThreadPool, and moves it to Javalin's AsyncThreadPool\nasync(asyncConfig, runnable)          // same as above, but with additonal config\nhandlerType()                         // handler type of the current handler (BEFORE, AFTER, GET, etc)\nappData(typedKey)                     // get data from the Javalin instance (see app data section below)\nwith(pluginClass)                     // get context plugin by class, see plugin section below\nmatchedPath()                         // get the path that was used to match this request (ex, \"/hello/{name}\")\nendpointHandlerPath()                 // get the path of the endpoint handler that was used to match this request\ncookieStore()                         // see cookie store section below\nskipRemainingHandlers()               // skip all remaining handlers for this request\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty in Javalin for Java and Kotlin\nDESCRIPTION: Shows how to configure Jetty directly through Javalin in both Java and Kotlin. It includes examples of setting thread pool, modifying WebSocket factory, server, and servlet context handler.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n    config.jetty.threadPool = new QueuedThreadPool();\n    config.jetty.modifyWebSocketServletFactory(factory -> {});\n    config.jetty.modifyServer(server -> {});\n    config.jetty.modifyServletContextHandler(handler -> {});\n    config.jetty.addConnector((server, httpConfig) -> new ServerConnector(server));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.createAndStart {\n    it.jetty.threadPool = QueuedThreadPool()\n    it.jetty.modifyWebSocketServletFactory { factory -> }\n    it.jetty.modifyServer { server -> }\n    it.jetty.modifyServletContextHandler { handler -> }\n    it.jetty.addConnector { server, httpConfig -> ServerConnector(server) }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Endpoint Handlers in Javalin\nDESCRIPTION: Examples of endpoint handlers for GET and POST requests, demonstrating response handling and status codes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/output\", ctx -> {\n    // some code\n    ctx.json(object);\n});\n\napp.post(\"/input\", ctx -> {\n    // some code\n    ctx.status(201);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/output\") { ctx ->\n    // some code\n    ctx.json(object)\n}\n\napp.post(\"/input\") { ctx ->\n    // some code\n    ctx.status(201)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin Application in Java and Kotlin\nDESCRIPTION: Demonstrates how to create a basic Javalin application that responds with 'Hello World' on the root path. This example showcases Javalin's simplicity and developer-friendly API.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    var app = Javalin.create(/*config*/)\n        .get(\"/\", ctx -> ctx.result(\"Hello World\"))\n        .start(7070);\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val app = Javalin.create(/*config*/)\n        .get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n        .start(7070)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Javalin\nDESCRIPTION: Code demonstrating how to handle file uploads in Javalin using the uploadedFiles() method, which processes files from multipart form data and saves them to a specified location.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_61\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(uploadedFile -> {\n        FileUtil.streamToFile(uploadedFile.getContent(), \"upload/\" + uploadedFile.getFilename())\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { uploadedFile ->\n        FileUtil.streamToFile(uploadedFile.content, \"upload/${uploadedFile.filename}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing App Data in Java\nDESCRIPTION: Demonstrates how to register, access, and use custom app data in Javalin. This allows passing data throughout the application by registering it on the Javalin instance and accessing it through typed keys.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// register a custom attribute\nvar myKey = new Key<MyValue>(\"my-key\");\nvar app = Javalin.create(config -> {\n    config.appData(myKey, myValue);\n});\n// access a custom attribute\nvar myValue = ctx.appData(myKey); // var will be inferred to MyValue\n// call a custom method on a custom attribute\nctx.appData(myKey).myMethod();\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete REST API with Javalin and Kotlin\nDESCRIPTION: A full implementation of a REST API using Javalin with Kotlin. Sets up routes for creating, reading, updating, and deleting users, with exception handling and status code management. Demonstrates Kotlin's concise syntax for API route definitions.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-kotlin-example.md#2025-04-08_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport app.user.User\nimport app.user.UserDao\nimport io.javalin.apibuilder.ApiBuilder.*\nimport io.javalin.Javalin\nimport io.javalin.http.HttpStatus\nimport io.javalin.http.NotFoundResponse\nimport io.javalin.http.bodyAsClass\nimport io.javalin.http.pathParamAsClass\n\nfun main() {\n\n    val userDao = UserDao()\n\n    val app = Javalin.create {\n        it.router.apiBuilder {\n\n            get(\"/\") { it.redirect(\"/users\") } // redirect root to /users\n\n            get(\"/users\") { ctx ->\n                ctx.json(userDao.users)\n            }\n\n            get(\"/users/{user-id}\") { ctx ->\n                val userId = ctx.pathParamAsClass<Int>(\"user-id\").get()\n                val user = userDao.findById(userId) ?: throw NotFoundResponse()\n                ctx.json(user)\n            }\n\n            get(\"/users/email/{email}\") { ctx ->\n                val email = ctx.pathParam(\"email\")\n                val user = userDao.findByEmail(email) ?: throw NotFoundResponse()\n                ctx.json(user)\n            }\n\n            post(\"/users\") { ctx ->\n                val user = ctx.bodyAsClass<User>()\n                userDao.save(name = user.name, email = user.email)\n                ctx.status(201)\n            }\n\n            patch(\"/users/{user-id}\") { ctx ->\n                val userId = ctx.pathParamAsClass<Int>(\"user-id\").get()\n                val user = ctx.bodyAsClass<User>()\n                userDao.update(id = userId, user = user)\n                ctx.status(204)\n            }\n\n            delete(\"/users/{user-id}\") { ctx ->\n                val userId = ctx.pathParamAsClass<Int>(\"user-id\").get()\n                userDao.delete(userId)\n                ctx.status(204)\n            }\n        }\n    }.apply {\n        exception(Exception::class.java) { e, ctx -> e.printStackTrace() }\n        error(HttpStatus.NOT_FOUND) { ctx -> ctx.json(\"not found\") }\n    }.start(7070)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Multiple Validation Errors in Javalin\nDESCRIPTION: Shows how to collect and merge multiple validation errors from different validators in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nValidator<Integer> ageValidator = ctx.queryParamAsClass(\"age\", Integer.class)\n    .check(n -> !n.contains(\"-\"), \"ILLEGAL_CHARACTER\")\n\n// Empty map if no errors, otherwise a map with the key \"age\" and failed check messages in the list.\nMap<String, List<Integer>> errors = ageValidator.errors();\n\n// Merges all errors from all validators in the list. Empty map if no errors exist.\nMap<String, List<Object>> manyErrors = JavalinValidation.collectErrors(ageValidator, otherValidator, ...)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval ageValidator = ctx.queryParamAsClass<Int>(\"age\")\n    .check({ !it.contains(\"-\") }, \"ILLEGAL_CHARACTER\")\n\n// Empty map if no errors, otherwise a map with the key \"age\" and failed check messages in the list.\nval errors = ageValidator.errors()\n\n// Merges all errors from all validators in the list. Empty map if no errors exist.\nval manyErrors = listOf(ageValidator, otherValidator, ...).collectErrors()\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Web Server with Javalin in Kotlin\nDESCRIPTION: This snippet shows how to create a basic Javalin web server in Kotlin. It sets up a GET route for the root path ('/') that responds with 'Hello World' and starts the server on port 7070.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/gettingStarted.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\n\nfun main() {\n    val app = Javalin.create(/*config*/)\n        .get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n        .start(7070)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Javalin Server\nDESCRIPTION: Shows basic server lifecycle management in Javalin with start and stop methods. The start method is non-blocking, while both methods can be used to control the server's lifecycle.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create()\n    .start() // start server (sync/blocking)\n    .stop() // stop server (sync/blocking)\n```\n\n----------------------------------------\n\nTITLE: File Upload Handler in Javalin\nDESCRIPTION: Demonstrates how to handle file uploads in Javalin using ctx.uploadedFiles(). Includes both Java and Kotlin examples along with corresponding HTML form markup.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_60\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(uploadedFile -> {\n        FileUtil.streamToFile(uploadedFile.getContent(), \"upload/\" + uploadedFile.getFilename())\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { uploadedFile ->\n        FileUtil.streamToFile(uploadedFile.content, \"upload/${uploadedFile.filename}\")\n    }\n}\n```\n\nLANGUAGE: markup\nCODE:\n```\n<form method=\"post\" action=\"/upload\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"files\" multiple>\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Operations with CrudHandler in Javalin\nDESCRIPTION: Shows how to use the CrudHandler interface within an apiBuilder() call to quickly set up CRUD operations for a resource.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nconfig.router.apiBuilder(() -> {\n    crud(\"users/{user-id}\", new UserController());\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.router.apiBuilder {\n    crud(\"users/{user-id}\", UserController())\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin API Setup\nDESCRIPTION: Main application setup with Javalin, configuring routes and their corresponding roles.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-24-javalin-auth-example.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\nimport static io.javalin.apibuilder.ApiBuilder.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Javalin app = Javalin.create(config -> {\n            config.router.mount(router -> {\n                router.beforeMatched(Auth::handleAccess);\n            }).apiBuilder(() -> {\n                get(\"/\", ctx -> ctx.redirect(\"/users\"), Role.ANYONE);\n                path(\"users\", () -> {\n                    get(UserController::getAllUserIds, Role.ANYONE);\n                    post(UserController::createUser, Role.USER_WRITE);\n                    path(\"{userId}\", () -> {\n                        get(UserController::getUser, Role.USER_READ);\n                        patch(UserController::updateUser, Role.USER_WRITE);\n                        delete(UserController::deleteUser, Role.USER_WRITE);\n                    });\n                });\n            });\n        }).start(7070);\n        \n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.apibuilder.ApiBuilder.*\nimport io.javalin.Javalin\n\nfun main() {\n\n    Javalin.create {\n        it.router.mount {\n            it.beforeMatched(Auth::handleAccess)\n        }.apiBuilder {\n            get(\"/\", { ctx -> ctx.redirect(\"/users\") }, Role.ANYONE)\n            path(\"users\") {\n                get(UserController::getAllUserIds, Role.ANYONE)\n                post(UserController::createUser, Role.USER_WRITE)\n                path(\"{userId}\") {\n                    get(UserController::getUser, Role.USER_READ)\n                    patch(UserController::updateUser, Role.USER_WRITE)\n                    delete(UserController::deleteUser, Role.USER_WRITE)\n                }\n            }\n        }\n    }.start(7070)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Javalin Server\nDESCRIPTION: Shows how to start and stop a Javalin server, and how to set up a clean shutdown hook.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create()\n    .start() // start server (sync/blocking)\n    .stop() // stop server (sync/blocking)\n\nRuntime.getRuntime().addShutdownHook(new Thread(() -> {\n\tapp.stop();\n}));\n\napp.events(event -> {\n    event.serverStopping(() -> { /* Your code here */ });\n    event.serverStopped(() -> { /* Your code here */ });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files in Javalin\nDESCRIPTION: Shows how to configure static file serving in Javalin with various options including hosted path, directory location, compression, and custom headers.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n  config.staticFiles.add(staticFiles -> {\n    staticFiles.hostedPath = \"/\";                   // change to host files on a subpath, like '/assets'\n    staticFiles.directory = \"/public\";              // the directory where your files are located\n    staticFiles.location = Location.CLASSPATH;      // Location.CLASSPATH (jar) or Location.EXTERNAL (file system)\n    staticFiles.precompress = false;                // if the files should be pre-compressed and cached in memory (optimization)\n    staticFiles.aliasCheck = null;                  // you can configure this to enable symlinks (= ContextHandler.ApproveAliases())\n    staticFiles.headers = Map.of(...);              // headers that will be set for the files\n    staticFiles.skipFileFunction = req -> false;    // you can use this to skip certain files in the dir, based on the HttpServletRequest\n    staticFiles.mimeTypes.add(mimeType, ext);       // you can add custom mimetypes for extensions\n  });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n  config.staticFiles.add { staticFiles ->\n    staticFiles.hostedPath = \"/\"                    // change to host files on a subpath, like '/assets'\n    staticFiles.directory = \"/public\"               // the directory where your files are located\n    staticFiles.location = Location.CLASSPATH       // Location.CLASSPATH (jar) or Location.EXTERNAL (file system)\n    staticFiles.precompress = false                 // if the files should be pre-compressed and cached in memory (optimization)\n    staticFiles.aliasCheck = null                   // you can configure this to enable symlinks (= ContextHandler.ApproveAliases())\n    staticFiles.headers = mapOf(...)                // headers that will be set for the files\n    staticFiles.skipFileFunction = { req -> false } // you can use this to skip certain files in the dir, based on the HttpServletRequest\n    staticFiles.mimeTypes.add(mimeType, ext)        // you can add custom mimetypes for extensions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Settings in Javalin for Kotlin\nDESCRIPTION: Demonstrates how to configure HTTP-related settings in Javalin using Kotlin, including ETag generation, request size limits, content types, and compression options.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.http.generateEtags = booleanValue        // if javalin should generate etags for dynamic responses (not static files)\n    config.http.prefer405over404 = booleanValue     // return 405 instead of 404 if path is mapped to different HTTP method\n    config.http.maxRequestSize = longValue          // the max size of request body that can be accessed without using using an InputStream\n    config.http.defaultContentType = stringValue    // the default content type\n    config.http.asyncTimeout = longValue            // timeout in milliseconds for async requests (0 means no timeout)\n    config.http.strictContentTypes = booleanValue   // throw exception if e.g content-type is missing/incorrect when attempting to parse JSON\n\n    config.http.customCompression(strategy)         // set a custom compression strategy\n    config.http.brotliAndGzipCompression(lvl, lvl)  // enable brotli and gzip compression with the specified levels\n    config.http.gzipOnlyCompression(lvl)            // enable gzip compression with the specified level\n    config.http.brotliOnlyCompression(lvl)          // enable brotli compression with the specified level\n    config.http.disableCompression()                // disable compression\n}\n```\n\n----------------------------------------\n\nTITLE: Context API Methods for Request and Response Handling in Java\nDESCRIPTION: This comprehensive list shows all available methods on the Context object in Javalin, divided into request methods, response methods, and other utility methods. These methods provide access to everything needed to handle HTTP requests and responses.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Request methods\nbody()                                // request body as string\nbodyAsBytes()                         // request body as array of bytes\nbodyAsClass(clazz)                    // request body as specified class (deserialized from JSON)\nbodyStreamAsClass(clazz)              // request body as specified class (memory optimized version of above)\nbodyValidator(clazz)                  // request body as validator typed as specified class\nbodyInputStream()                     // the underyling input stream of the request\nuploadedFile(\"name\")                  // uploaded file by name\nuploadedFiles(\"name\")                 // all uploaded files by name\nuploadedFiles()                       // all uploaded files as list\nuploadedFileMap()                     // all uploaded files as a \"names by files\" map\nformParam(\"name\")                     // form parameter by name, as string\nformParamAsClass(\"name\", clazz)       // form parameter by name, as validator typed as specified class\nformParams(\"name\")                    // list of form parameters by name\nformParamMap()                        // map of all form parameters\npathParam(\"name\")                     // path parameter by name as string\npathParamAsClass(\"name\", clazz)       // path parameter as validator typed as specified class\npathParamMap()                        // map of all path parameters\nbasicAuthCredentials()                // basic auth credentials (or null if not set)\nattribute(\"name\", value)              // set an attribute on the request\nattribute(\"name\")                     // get an attribute on the request\nattributeOrCompute(\"name\", ctx -> {}) // get an attribute or compute it based on the context if absent\nattributeMap()                        // map of all attributes on the request\ncontentLength()                       // content length of the request body\ncontentType()                         // request content type\ncookie(\"name\")                        // request cookie by name\ncookieMap()                           // map of all request cookies\nheader(\"name\")                        // request header by name (can be used with Header.HEADERNAME)\nheaderAsClass(\"name\", clazz)          // request header by name, as validator typed as specified class\nheaderMap()                           // map of all request headers\nhost()                                // host as string\nip()                                  // ip as string\nisMultipart()                         // true if the request is multipart\nisMultipartFormData()                 // true if the request is multipart/formdata\nmethod()                              // request methods (GET, POST, etc)\npath()                                // request path\nport()                                // request port\nprotocol()                            // request protocol\nqueryParam(\"name\")                    // query param by name as string\nqueryParamAsClass(\"name\", clazz)      // query param parameter by name, as validator typed as specified class\nqueryParams(\"name\")                   // list of query parameters by name\nqueryParamMap()                       // map of all query parameters\nqueryString()                         // full query string\nscheme()                              // request scheme\nsessionAttribute(\"name\", value)       // set a session attribute\nsessionAttribute(\"name\")              // get a session attribute\nconsumeSessionAttribute(\"name\")       // get a session attribute, and set value to null\ncachedSessionAttribute(\"name\", value) // set a session attribute, and cache the value as a request attribute\ncachedSessionAttribute(\"name\")        // get a session attribute, and cache the value as a request attribute\ncachedSessionAttributeOrCompute(...)  // same as above, but compute and set if value is absent\nsessionAttributeMap()                 // map of all session attributes\nurl()                                 // request url\nfullUrl()                             // request url + query string\ncontextPath()                         // request context path\nuserAgent()                           // request user agent\nreq()                                 // get the underlying HttpServletRequest\n\n// Response methods\nresult(\"result\")                      // set result stream to specified string (overwrites any previously set result)\nresult(byteArray)                     // set result stream to specified byte array (overwrites any previously set result)\nresult(inputStream)                   // set result stream to specified input stream (overwrites any previously set result)\nfuture(futureSupplier)                // set the result to be a future, see async section (overwrites any previously set result)\nwriteSeekableStream(inputStream)      // write content immediately as seekable stream (useful for audio and video)\nresult()                              // get current result stream as string (if possible), and reset result stream\nresultInputStream()                   // get current result stream\ncontentType(\"type\")                   // set the response content type\nheader(\"name\", \"value\")               // set response header by name (can be used with Header.HEADERNAME)\nredirect(\"/path\", code)               // redirect to the given path with the given status code\nstatus(code)                          // set the response status code\nstatus()                              // get the response status code\ncookie(\"name\", \"value\", maxAge)       // set response cookie by name, with value and max-age (optional).\ncookie(cookie)                        // set cookie using javalin Cookie class\nremoveCookie(\"name\", \"/path\")         // removes cookie by name and path (optional)\njson(obj)                             // calls result(jsonString), and also sets content type to json\njsonStream(obj)                       // calls result(jsonStream), and also sets content type to json\nhtml(\"html\")                          // calls result(string), and also sets content type to html\nrender(\"/template.tmpl\", model)       // calls html(renderedTemplate)\nres()                                 // get the underlying HttpServletResponse\n\n// Other methods\nasync(runnable)                       // lifts request out of Jetty's ThreadPool, and moves it to Javalin's AsyncThreadPool\nhandlerType()                         // handler type of the current handler (BEFORE, AFTER, GET, etc)\nappAttribute(\"name\")                  // get an attribute on the Javalin instance. see app attributes section below\nmatchedPath()                         // get the path that was used to match this request (ex, \"/hello/{name}\")\nendpointHandlerPath()                 // get the path of the endpoint handler that was used to match this request\ncookieStore()                         // see cookie store section below\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Converters for Validation in Javalin\nDESCRIPTION: Shows how to register a custom converter for a non-included class to be used in Javalin's validation system.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.validation.register(Instant.class, v -> Instant.ofEpochMilli(Long.parseLong(v)));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.validation.register(Instant::class.java) { Instant.ofEpochMilli(it.toLong()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World in Javalin 6.0\nDESCRIPTION: Basic Hello World example that demonstrates Javalin's simple setup. Creates a Javalin instance, defines a GET endpoint that returns 'Hello World', and starts the server on port 7070.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    var app = Javalin.create(/*config*/)\n        .get(\"/\", ctx -> ctx.result(\"Hello World\"))\n        .start(7070);\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val app = Javalin.create(/*config*/)\n        .get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n        .start(7070)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Responses to Clients in Javalin 6.0\nDESCRIPTION: Demonstrates different methods for sending responses to clients in Javalin, including plain text, JSON serialization, stream handling, asynchronous responses, and template rendering.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nctx.result(stringOrStream);           // writes string or input stream to client (`text/plain` by default)\nctx.json(myJson);                     // serializes object to JSON string and writes to client (as `application/json`)\nctx.jsonStream(myJson);               // serializes JSON directly to client (nothing buffered in memory)\nctx.writeSeekableStream(myMediaFile); // stream audio and video to client (supports seeking/skipping)\nctx.future(myFutureSupplier);         // instructs Javalin to handle request asynchronously\nctx.render(\"/file.ext\", model);       // render template or markdown file (as `text/html`)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.result(stringOrStream)            // writes string or input stream to client (`text/plain` by default)\nctx.json(myJson)                      // serializes object to JSON string and writes to client (as `application/json`)\nctx.jsonStream(myJson)                // serializes JSON directly to client (nothing buffered in memory)\nctx.writeSeekableStream(myMediaFile)  // stream audio and video to client (supports seeking/skipping)\nctx.future(myFutureSupplier)          // instructs Javalin to handle request asynchronously\nctx.render(\"/file.ext\", model)        // render template or markdown file (as `text/html`)\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Task Execution with Timeout in Javalin\nDESCRIPTION: Shows how to execute blocking tasks asynchronously with timeout handling using ctx.async(). Includes custom timeout duration and callback handling.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_52\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/async\", ctx -> {\n    ctx.async(\n        1000,                                      // timeout in ms\n        () -> ctx.result(\"Request took too long\"), // timeout callback\n        () -> ctx.result(someSlowResult)           // some long running task\n    );\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/async\") { ctx ->\n    ctx.async(\n        1000,                                    // timeout in ms\n        { ctx.result(\"Request took too long\") }, // timeout callback\n        { ctx.result(someSlowResult)             // some long running task\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Options in Javalin\nDESCRIPTION: Shows how to configure routing options in Javalin including context path, trailing slash handling, multiple slash normalization, and case sensitivity for routes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.router.contextPath = stringValue; // the context path (ex '/blog' if you are hosting an app on a subpath, like 'mydomain.com/blog')\n    config.router.ignoreTrailingSlashes = booleanValue; // treat '/path' and '/path/' as the same path\n    config.router.treatMultipleSlashesAsSingleSlash = booleanValue; // treat '/path//subpath' and '/path/subpath' as the same path\n    config.router.caseInsensitiveRoutes = booleanValue; // treat '/PATH' and '/path' as the same path\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.router.contextPath = stringValue // the context path (ex '/blog' if you are hosting an app on a subpath, like 'mydomain.com/blog')\n    config.router.ignoreTrailingSlashes = booleanValue // treat '/path' and '/path/' as the same path\n    config.router.treatMultipleSlashesAsSingleSlash = booleanValue // treat '/path//subpath' and '/path/subpath' as the same path\n    config.router.caseInsensitiveRoutes = booleanValue // treat '/PATH' and '/path' as the same path\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clean Shutdown With Event Handlers in Javalin\nDESCRIPTION: Shows how to implement clean server shutdown using Java's Runtime shutdown hooks and Javalin's event system. This allows executing custom code when the server is stopping or has stopped.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nRuntime.getRuntime().addShutdownHook(new Thread(() -> {\n\tapp.stop();\n}));\n\napp.events(event -> {\n    event.serverStopping(() -> { /* Your code here */ });\n    event.serverStopped(() -> { /* Your code here */ });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lifecycle Events in Javalin\nDESCRIPTION: This snippet demonstrates how to use Javalin's event system to hook into server lifecycle events such as starting, started, start failed, stopping, and stopped. It also shows how to listen for handler additions.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create().events(event -> {\n    event.serverStarting(() -> { ... });\n    event.serverStarted(() -> { ... });\n    event.serverStartFailed(() -> { ... });\n    event.serverStopping(() -> { ... });\n    event.serverStopped(() -> { ... });\n    event.handlerAdded(handlerMetaInfo -> { ... });\n    event.wsHandlerAdded(wsHandlerMetaInfo -> { ... });\n});\n\napp.start() // serverStarting -> (serverStarted || serverStartFailed)\napp.stop() // serverStopping -> serverStopped\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin app = Javalin.create().events { event ->\n    event.serverStarting { ... }\n    event.serverStarted { ... }\n    event.serverStartFailed { ... }\n    event.serverStopping { ... }\n    event.serverStopped { ... }\n    event.handlerAdded { handlerMetaInfo -> }\n    event.wsHandlerAdded { wsHandlerMetaInfo -> }\n}\n\napp.start() // serverStarting -> (serverStarted || serverStartFailed)\napp.stop() // serverStopping -> serverStopped\n```\n\n----------------------------------------\n\nTITLE: Javalin Validation Examples (Kotlin)\nDESCRIPTION: Provides examples of using Javalin's Validator for various scenarios, including validating query parameters, dependent parameters, JSON body, and custom validation errors in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\n// VALIDATE A SINGLE QUERY PARAMETER WITH A DEFAULT VALUE /////////////////////////////////////////////\nval myValue = ctx.queryParamAsClass<Int>(\"value\").getOrDefault(788) // validate value\nctx.result(value) // return validated value to the client\n// GET ?value=a would yield HTTP 400 - {\"my-qp\":[{\"message\":\"TYPE_CONVERSION_FAILED\",\"args\":{},\"value\":\"a\"}]}\n// GET ?value=1 would yield HTTP 200 - 1 (the validated value)\n// GET ?        would yield HTTP 200 - 788 (the default value)\n\n\n// VALIDATE TWO DEPENDENT QUERY PARAMETERS ////////////////////////////////////////////////////////////\nval fromDate = ctx.queryParamAsClass<Instant>(\"from\").get()\nval toDate = ctx.queryParamAsClass<Instant>(\"to\")\n    .check({ it.isAfter(fromDate) }, \"'to' has to be after 'from'\")\n    .get()\n\n\n// VALIDATE A JSON BODY ///////////////////////////////////////////////////////////////////////////////\nval myObject = ctx.bodyValidator<MyObject>()\n    .check({ it.myObjectProperty == someValue }, \"THINGS_MUST_BE_EQUAL\")\n    .get()\n\n// VALIDATE WITH CUSTOM VALIDATIONERROR ///////////////////////////////////////////////////////////////\nctx.queryParamAsClass<Int>(\"param\")\n    .check({ it > 5 }, ValidationError(\"OVER_LIMIT\", args = mapOf(\"limit\" to 5)))\n    .get()\n// GET ?param=10 would yield HTTP 400 - {\"param\":[{\"message\":\"OVER_LIMIT\",\"args\":{\"limit\":5},\"value\":10}]}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic CORS Configuration in Javalin\nDESCRIPTION: Basic CORS setup allowing specific host origins with default HTTPS scheme. Demonstrates how to enable CORS plugin and allow specific host domains.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/cors.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.bundledPlugins.enableCors(cors -> {\n        cors.addRule(it -> {\n            it.allowHost(\"example.com\", \"javalin.io\");\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.bundledPlugins.enableCors { cors ->\n        cors.addRule {\n            it.allowHost(\"example.com\", \"javalin.io\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Examples in Javalin\nDESCRIPTION: Provides various examples of using Javalin's validation features, including validating query parameters, JSON body, and custom validation errors.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n// VALIDATE A SINGLE QUERY PARAMETER WITH A DEFAULT VALUE /////////////////////////////////////////////\nInteger myValue = ctx.queryParamAsClass(\"value\", Integer.class).getOrDefault(788) // validate value\nctx.result(value) // return validated value to the client\n// GET ?value=a would yield HTTP 400 - {\"my-qp\":[{\"message\":\"TYPE_CONVERSION_FAILED\",\"args\":{},\"value\":\"a\"}]}\n// GET ?value=1 would yield HTTP 200 - 1 (the validated value)\n// GET ?        would yield HTTP 200 - 788 (the default value)\n\n\n// VALIDATE TWO DEPENDENT QUERY PARAMETERS ////////////////////////////////////////////////////////////\nInstant fromDate = ctx.queryParamAsClass(\"from\", Instant.class).get();\nInstant toDate = ctx.queryParamAsClass(\"to\", Instant.class)\n    .check(it -> it.isAfter(fromDate), \"'to' has to be after 'from'\")\n    .get();\n\n\n// VALIDATE A JSON BODY ///////////////////////////////////////////////////////////////////////////////\nMyObject myObject = ctx.bodyValidator(MyObject.class)\n    .check(obj -> obj.myObjectProperty == someValue, \"THINGS_MUST_BE_EQUAL\")\n    .get();\n\n// VALIDATE WITH CUSTOM VALIDATIONERROR ///////////////////////////////////////////////////////////////\nctx.queryParamAsClass(\"param\", Integer.class)\n    .check({ it > 5 }, new ValidationError(\"OVER_LIMIT\", Map.of(\"limit\", 5)))\n    .get();\n// GET ?param=10 would yield HTTP 400 - {\"param\":[{\"message\":\"OVER_LIMIT\",\"args\":{\"limit\":5},\"value\":10}]}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// VALIDATE A SINGLE QUERY PARAMETER WITH A DEFAULT VALUE /////////////////////////////////////////////\nval myValue = ctx.queryParamAsClass<Int>(\"value\").getOrDefault(788) // validate value\nctx.result(value) // return validated value to the client\n// GET ?value=a would yield HTTP 400 - {\"my-qp\":[{\"message\":\"TYPE_CONVERSION_FAILED\",\"args\":{},\"value\":\"a\"}]}\n// GET ?value=1 would yield HTTP 200 - 1 (the validated value)\n// GET ?        would yield HTTP 200 - 788 (the default value)\n\n\n// VALIDATE TWO DEPENDENT QUERY PARAMETERS ////////////////////////////////////////////////////////////\nval fromDate = ctx.queryParamAsClass<Instant>(\"from\").get()\nval toDate = ctx.queryParamAsClass<Instant>(\"to\")\n    .check({ it.isAfter(fromDate) }, \"'to' has to be after 'from'\")\n    .get()\n\n\n// VALIDATE A JSON BODY ///////////////////////////////////////////////////////////////////////////////\nval myObject = ctx.bodyValidator<MyObject>()\n    .check({ it.myObjectProperty == someValue }, \"THINGS_MUST_BE_EQUAL\")\n    .get()\n\n// VALIDATE WITH CUSTOM VALIDATIONERROR ///////////////////////////////////////////////////////////////\nctx.queryParamAsClass<Int>(\"param\")\n    .check({ it > 5 }, ValidationError(\"OVER_LIMIT\", args = mapOf(\"limit\" to 5)))\n    .get()\n// GET ?param=10 would yield HTTP 400 - {\"param\":[{\"message\":\"OVER_LIMIT\",\"args\":{\"limit\":5},\"value\":10}]}\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in Javalin\nDESCRIPTION: Demonstration of path parameter handling using both {} and <> syntax, where <> allows for slash characters in parameters.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/hello/{name}\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"));\n});\napp.get(\"/hello/<name>\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/hello/{name}\") { ctx ->\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"))\n}\napp.get(\"/hello/<name>\") { ctx ->\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint Handlers in Javalin\nDESCRIPTION: Demonstrates how to define endpoint handlers for GET and POST requests in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> {\n    // some code\n    ctx.json(object);\n});\n\napp.post(\"/\", ctx -> {\n    // some code\n    ctx.status(201);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/\") { ctx ->\n    // some code\n    ctx.json(object)\n}\n\napp.post(\"/\") { ctx ->\n    // some code\n    ctx.status(201)\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive WebSocket Endpoint Configuration in Javalin (Java and Kotlin)\nDESCRIPTION: Demonstrates a full WebSocket endpoint configuration with all event handlers, including JSON conversion for messages.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/:path\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n    ws.onMessage(ctx -> {\n        User user = ctx.message(User.class); // convert from json\n        ctx.send(user); // convert to json and send back\n    });\n    ws.onBinaryMessage(ctx -> System.out.println(\"Message\"))\n    ws.onClose(ctx -> System.out.println(\"Closed\"));\n    ws.onError(ctx -> System.out.println(\"Errored\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/:path\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n    ws.onMessage { ctx ->\n        val user = ctx.message<User>(); // convert from json\n        ctx.send(user); // convert to json and send back\n    }\n    ws.onBinaryMessage { ctx -> println(\"Message\") }\n    ws.onClose { ctx -> println(\"Closed\") }\n    ws.onError { ctx -> println(\"Errored\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete WebSocket Handler Implementation in Javalin\nDESCRIPTION: A comprehensive example showing all WebSocket event handlers in Javalin, including handlers for connection, message reception, binary messages, connection closure, and error handling. The example also demonstrates how to convert JSON messages to objects and back.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/{path}\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n    ws.onMessage(ctx -> {\n        User user = ctx.messageAsClass(User.class); // convert from json\n        ctx.send(user); // convert to json and send back\n    });\n    ws.onBinaryMessage(ctx -> System.out.println(\"Message\"))\n    ws.onClose(ctx -> System.out.println(\"Closed\"));\n    ws.onError(ctx -> System.out.println(\"Errored\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/{path}\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n    ws.onMessage { ctx ->\n        val user = ctx.messageAsClass<User>(); // convert from json\n        ctx.send(user); // convert to json and send back\n    }\n    ws.onBinaryMessage { ctx -> println(\"Message\") }\n    ws.onClose { ctx -> println(\"Closed\") }\n    ws.onError { ctx -> println(\"Errored\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Management in Javalin\nDESCRIPTION: Shows how to implement role-based authentication using Javalin's AccessManager interface. Includes role enum definition and endpoint security configuration.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nconfig.accessManager((handler, ctx, routeRoles) -> {\n    MyRole userRole = getUserRole(ctx);\n    if (routeRoles.contains(userRole)) {\n        handler.handle(ctx);\n    } else {\n        ctx.status(401).result(\"Unauthorized\");\n    }\n});\n\nRole getUserRole(Context ctx) {\n    // determine user role based on request.\n    // typically done by inspecting headers, cookies, or user session\n}\n\nenum Role implements RouteRole {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE;\n}\n\napp.get(\"/un-secured\",   ctx -> ctx.result(\"Hello\"),   Role.ANYONE);\napp.get(\"/secured\",      ctx -> ctx.result(\"Hello\"),   Role.ROLE_ONE);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.accessManager { handler, ctx, routeRoles ->\n    val userRole = getUserRole(ctx) // determine user role based on request\n    if (routeRoles.contains(userRole)) {\n        handler.handle(ctx)\n    } else {\n        ctx.status(401).result(\"Unauthorized\")\n    }\n}\n\nfun getUserRole(ctx: Context) : Role {\n    // determine user role based on request.\n    // typically done by inspecting headers, cookies, or user session\n}\n\nenum class Role : RouteRole {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE\n}\n\napp.get(\"/un-secured\",   { ctx -> ctx.result(\"Hello\") },   Role.ANYONE);\napp.get(\"/secured\",      { ctx -> ctx.result(\"Hello\") },   Role.ROLE_ONE);\n```\n\n----------------------------------------\n\nTITLE: Routing in Javalin 6.0\nDESCRIPTION: Demonstrates different routing approaches in Javalin 6.0, including direct routing on the Javalin instance and using the config.router object. Shows API builder pattern for organizing routes hierarchically with nested paths.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// app object\nvar app = Javalin.create(/*config*/)\n    .get(\"/\", ctx -> ctx.result(\"Hello World\"))\n    .start(7070);\n\n// config.router object\nvar app = Javalin.create(config -> {\n    config.router.mount(router -> { // access to router instance\n        router.get(\"/\", ctx -> ctx.result(\"Hello World\"));\n    });\n    config.router.apiBuilder(() -> { // sets a static variable scoped to the lambda\n        path(\"users\", () -> { // statically imported to improve readability\n            get(UserController::getAll);\n            post(UserController::create);\n            path(\":user-id\", () -> {\n                get(UserController::getOne);\n                patch(UserController::update);\n                delete(UserController::delete);\n            });\n        });\n    });\n}).start(7070);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// app object\nval app = Javalin.create(/*config*/)\n    .get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n    .start(7070)\n\n// config.router object\nval app = Javalin.create { config ->\n    config.router.mount { router -> // access to router instance\n        router.get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n    }\n    config.router.apiBuilder { // sets a static variable scoped to the lambda\n        path(\"users\") { // statically imported to improve readability\n            get(UserController::getAll)\n            post(UserController::create)\n            path(\":user-id\") {\n                get(UserController::getOne)\n                patch(UserController::update)\n                delete(UserController::delete)\n            }\n        }\n    }\n}.start(7070)\n```\n\n----------------------------------------\n\nTITLE: Setting Route Roles in Javalin Endpoints\nDESCRIPTION: Shows how to set roles when declaring endpoints for public and private routes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_24\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/public\", ctx -> ctx.result(\"Hello public\"), Role.OPEN);\napp.get(\"/private\", ctx -> ctx.result(\"Hello private\"), Role.LOGGED_IN);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/public\", { ctx -> ctx.result(\"Hello public\") }, Role.OPEN)\napp.get(\"/private\", { ctx -> ctx.result(\"Hello private\") }, Role.LOGGED_IN)\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSockets and Server-Sent Events in Javalin 6.0\nDESCRIPTION: Shows how to implement WebSockets and Server-Sent Events (SSE) using Javalin's lambda-based API. Includes event handlers for WebSocket lifecycle events and demonstrates JSON serialization with WebSockets and SSE.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/{path}\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n    ws.onMessage(ctx -> {\n        var user = ctx.messageAsClass(User.class); // convert from json\n        ctx.send(user); // convert to json and send back\n    });\n    ws.onBinaryMessage(ctx -> System.out.println(\"Message\"))\n    ws.onClose(ctx -> System.out.println(\"Closed\"));\n    ws.onError(ctx -> System.out.println(\"Errored\"));\n});\n\napp.sse(\"/sse\", client -> {\n    client.sendEvent(\"connected\", \"Hello, SSE\");  // can also send an object, which will be serialized\n    client.onClose(() -> System.out.println(\"Client disconnected\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/{path}\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n    ws.onMessage { ctx ->\n        val user = ctx.messageAsClass<User>(); // convert from json\n        ctx.send(user); // convert to json and send back\n    }\n    ws.onBinaryMessage { ctx -> println(\"Message\") }\n    ws.onClose { ctx -> println(\"Closed\") }\n    ws.onError { ctx -> println(\"Errored\") }\n}\n\napp.sse(\"/sse\") { client ->\n    client.sendEvent(\"connected\", \"Hello, SSE\") // can also send an object, which will be serialized\n    client.onClose { println(\"Client disconnected\") }\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Before Handlers in Javalin\nDESCRIPTION: WebSocket before handlers run before WebSocket requests. These handlers can be applied globally to all WebSocket endpoints or to specific path patterns. Multiple before-handlers can be used for each endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\napp.wsBefore(ws -> {\n    // runs before all WebSocket requests\n});\napp.wsBefore(\"/path/*\", ws -> {\n    // runs before websocket requests to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsBefore { ws ->\n    // runs before all WebSocket requests\n}\napp.wsBefore(\"/path/*\") { ws ->\n    // runs before websocket requests to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin Configuration Examples\nDESCRIPTION: Examples showing how to configure a Javalin instance using the create method with a config object. Demonstrates setting up static files and other configuration options.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.addStaticFiles(...)\n    // your config here\n}).start()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.addStaticFiles(...)\n    // your config here\n}.start()\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Handler Configuration in Javalin\nDESCRIPTION: Shows how to set up a WebSocket endpoint with a path parameter and configure a connect event handler. This is the simplest form of WebSocket implementation in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/{path}\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/{path}\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Path Matching in Javalin\nDESCRIPTION: Example of using wildcard paths to match multiple endpoints with a single handler.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/path/*\", ctx -> {\n    ctx.result(\"You are here because \" + ctx.path() + \" matches \" + ctx.matchedPath());\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/path/*\") { ctx ->\n    ctx.result(\"You are here because \" + ctx.path() + \" matches \" + ctx.matchedPath())\n}\n```\n\n----------------------------------------\n\nTITLE: Using AfterMatched Handlers in Javalin\nDESCRIPTION: Implementation of afterMatched handlers that only execute for matched requests, including static files. Used for post-processing of known valid routes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\napp.afterMatched(ctx -> {\n    // runs after all matched requests (including static files)\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.afterMatched { ctx ->\n    // runs after all matched requests (including static files)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Resolvers in Javalin for Kotlin\nDESCRIPTION: Demonstrates how to set up custom context resolvers for IP, host, scheme, URL, and full URL in Javalin using Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.contextResolver.ip = { ctx -> \"custom ip\" }           // called by Context#ip()\n    config.contextResolver.host = { ctx -> \"custom host\" }       // called by Context#host()\n    config.contextResolver.scheme = { ctx -> \"custom scheme\" }   // called by Context#scheme()\n    config.contextResolver.url = { ctx -> \"custom url\" }         // called by Context#url()\n    config.contextResolver.fullUrl = { ctx -> \"custom fullUrl\" } // called by Context#fullUrl()\n}\n```\n\n----------------------------------------\n\nTITLE: Async Context Configuration in Javalin 6\nDESCRIPTION: Demonstrates the new consumer-based async context configuration in Javalin 6.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nctx.async(config -> {\n    config.timeout = 10L;\n    config.onTimeout(timeoutCtx -> timeoutCtx.result(\"Timeout\"));\n}, () -> {\n    Thread.sleep(500L);\n    ctx.result(\"Result\");\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.async({ config ->\n    config.timeout = 10L\n    config.onTimeout { timeoutCtx -> timeoutCtx.result(\"Timeout\") }\n}) {\n    Thread.sleep(500L)\n    ctx.result(\"Result\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Manager in Javalin (Java)\nDESCRIPTION: Demonstrates how to configure and use an AccessManager in Javalin using Java. It shows setting up role-based access control for different endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_34\n\nLANGUAGE: java\nCODE:\n```\n// Set the access-manager that Javalin should use\nconfig.accessManager((handler, ctx, permittedRoles) -> {\n    MyRole userRole = getUserRole(ctx);\n    if (permittedRoles.contains(userRole)) {\n        handler.handle(ctx);\n    } else {\n        ctx.status(401).result(\"Unauthorized\");\n    }\n});\n\nRole getUserRole(Context ctx) {\n    // determine user role based on request\n    // typically done by inspecting headers\n}\n\nenum MyRole implements Role {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE;\n}\n\napp.routes(() -> {\n    get(\"/un-secured\",   ctx -> ctx.result(\"Hello\"),   roles(ANYONE));\n    get(\"/secured\",      ctx -> ctx.result(\"Hello\"),   roles(ROLE_ONE));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin in Java and Kotlin\nDESCRIPTION: Demonstrates how to configure Javalin using JavalinConfig in both Java and Kotlin. It shows setting HTTP async timeout, router options, and adding static files.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n    config.http.asyncTimeout = 10_000L;\n    config.router.ignoreTrailingSlashes = true;\n    config.staticFiles.add(\"/public\", Location.CLASSPATH);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create { config ->\n    config.http.asyncTimeout = 10_000L\n    config.router.ignoreTrailingSlashes = true\n    config.staticFiles.add(\"/public\", Location.CLASSPATH)\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Resolvers in Javalin\nDESCRIPTION: This snippet demonstrates how to configure custom context resolvers for various Context methods in Javalin, such as IP, host, scheme, URL, and full URL.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.contextResolver.ip = ctx -> \"custom ip\";           // called by Context#ip()\n    config.contextResolver.host = ctx -> \"custom host\";       // called by Context#host()\n    config.contextResolver.scheme = ctx -> \"custom scheme\";   // called by Context#scheme()\n    config.contextResolver.url = ctx -> \"custom url\";         // called by Context#url()\n    config.contextResolver.fullUrl = ctx -> \"custom fullUrl\"; // called by Context#fullUrl()\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.contextResolver.ip = { ctx -> \"custom ip\" }           // called by Context#ip()\n    config.contextResolver.host = { ctx -> \"custom host\" }       // called by Context#host()\n    config.contextResolver.scheme = { ctx -> \"custom scheme\" }   // called by Context#scheme()\n    config.contextResolver.url = { ctx -> \"custom url\" }         // called by Context#url()\n    config.contextResolver.fullUrl = { ctx -> \"custom fullUrl\" } // called by Context#fullUrl()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Endpoint Handlers in Javalin\nDESCRIPTION: Endpoint handlers define the API and handle specific HTTP methods. They can return data or process incoming requests and are matched in the order defined.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/output\", ctx -> {\n    // some code\n    ctx.json(object);\n});\n\napp.post(\"/input\", ctx -> {\n    // some code\n    ctx.status(201);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/output\") { ctx ->\n    // some code\n    ctx.json(object)\n}\n\napp.post(\"/input\") { ctx ->\n    // some code\n    ctx.status(201)\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Javalin Handlers in Java\nDESCRIPTION: This code snippet demonstrates how to write unit tests for Javalin handlers in Java using Mockito for mocking the Context object. It includes tests for valid and invalid user creation scenarios.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.http.BadRequestResponse;\nimport io.javalin.http.Context;\nimport org.junit.Test;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.verify;\n\npublic class UnitTest {\n\n    private final Context ctx = mock(Context.class);\n\n    @Test\n    public void POST_to_create_users_gives_201_for_valid_username() {\n        when(ctx.queryParam(\"username\")).thenReturn(\"Roland\");\n        UserController.create(ctx); // the handler we're testing\n        verify(ctx).status(201);\n    }\n\n    @Test(expected = BadRequestResponse.class)\n    public void POST_to_create_users_throws_for_invalid_username() {\n        when(ctx.queryParam(\"username\")).thenReturn(null);\n        UserController.create(ctx); // the handler we're testing\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin Configuration Options Reference\nDESCRIPTION: Comprehensive reference of all available configuration options for Javalin, organized into HTTP, WebSocket, Server, and Misc categories. Includes default values and descriptions for each option.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_39\n\nLANGUAGE: java\nCODE:\n```\n// HTTP\nautogenerateEtags = false;                      // generate etags for responses\nprefer405over404 = false;                       // return 405 instead of 404 if path is mapped to different HTTP method\nenforceSsl = false;                             // redirect all http requests to https\ndefaultContentType = \"text/plain\";              // the default content type\nmaxRequestSize = 1_000_000L;                    // either increase this or use inputstream to handle large requests\nasyncRequestTimeout = 0L;                       // timeout in milliseconds for async requests (0 means no timeout)\naddSinglePageRoot(\"/path\", \"/file\")             // fancy 404 handler that returns the specified file for 404s on /path\naddSinglePageRoot(\"/path\", \"/file\", location)   // fancy 404 handler that returns the specified file for 404s on /path\naddSinglePageHandler(\"/path\", handler)          // fancy 404 handler that runs the specified Handler for 404s on /path\naddStaticFiles(\"/directory\", location)          // add static files in directory at location (Location.CLASSPATH/Location.EXTERNAL)\naddStaticFiles(staticFileConfig)                // add static files by StaticFileConfig, see Static Files section\nenableWebjars()                                 // add static files though webjars\nenableCorsForAllOrigins()                       // enable CORS for all origins\nenableCorsForOrigin(\"origin1\", \"origin2\", ...)  // enable CORS the specified origins\nenableDevLogging()                              // enable dev logging (extensive debug logging meant for development)\nregisterPlugin(myPlugin)                        // register a plugin\nrequestLogger((ctx, timeInMs) -> {})            // register a request logger\n\n// WebSocket\nwsFactoryConfig((factory) -> {})                // configure the Jetty WebSocketServletFactory\nwsLogger((ws) -> {})                            // register a WebSocket logger\n\n// Server\nignoreTrailingSlashes = true;                   // treat '/path' and '/path/' as the same path\ncontextPath = \"/\";                               // the context path (ex '/blog' if you are hosting an app on a subpath, like 'mydomain.com/blog')\nserver(() -> Server())                          // set the Jetty Server\nsessionHandler(() -> SessionHandler())          // set the Jetty SessionHandler\nconfigureServletContextHandler(handler -> {})   // configure the Jetty ServletContextHandler\njsonMapper(jsonMapper)                          // configure Javalin's JsonMapper\n\n// Misc\nshowJavalinBanner = true;                       // show the glorious Javalin banner on startup\n```\n\n----------------------------------------\n\nTITLE: Implementing After Handlers in Javalin\nDESCRIPTION: Examples of after-handlers that run after all requests or specific path patterns, useful for post-processing responses.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\napp.after(ctx -> {\n    // run after all requests\n});\napp.after(\"/path/*\", ctx -> {\n    // runs after request to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.after { ctx ->\n    // run after all requests\n}\napp.after(\"/path/*\") { ctx ->\n    // runs after request to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin App and Main Class\nDESCRIPTION: Sets up the Javalin application with route configurations for course operations. The Main class initializes and starts the Javalin server on port 8080.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2024-10-20-javalin-hibernate.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class JavalinApp {\n\n    public static Javalin create() {\n        return Javalin.create((var config) -> config.router.apiBuilder(() -> {\n            path(\"/\", () -> get(ctx -> ctx.json(\"Ok\")));\n            path(\"/courses\", () -> {\n                get(CourseHandler.listAll);\n                post(CourseHandler.save);\n            });\n        }));\n    }\n\n}\n\npublic class Main {\n\n    public static void main(String[] args) {\n        JavalinApp.create().start(8080);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin Context API Methods\nDESCRIPTION: Complete list of available methods on the Context object for handling HTTP requests and responses in Javalin. Includes methods for accessing request parameters, headers, body content, and setting response data.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nctx.appAttribute(class)             // retrieve an attribute from the app serving the request - since 2.3.0\n\n// request methods:\nctx.req;                            // get underlying HttpServletRequest\nctx.anyFormParamNull(\"k1\", \"k2\");   // returns true if any form-param is null\nctx.anyQueryParamNull(\"k1\", \"k2\");  // returns true if any query-param is null\n// ... [truncated for brevity]\n```\n\n----------------------------------------\n\nTITLE: Implementing Endpoint Handlers in Javalin\nDESCRIPTION: Examples of implementing HTTP endpoint handlers for GET and POST requests. Shows how to return JSON responses and set HTTP status codes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/output\", ctx -> {\n    // some code\n    ctx.json(object);\n});\n\napp.post(\"/input\", ctx -> {\n    // some code\n    ctx.status(201);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/output\") { ctx ->\n    // some code\n    ctx.json(object)\n}\n\napp.post(\"/input\") { ctx ->\n    // some code\n    ctx.status(201)\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Handlers with Routes in Javalin (Java and Kotlin)\nDESCRIPTION: Shows how to group API endpoints using the routes() and path() methods, demonstrating CRUD operations and WebSocket events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAllUsers);\n        post(UserController::createUser);\n        path(\":id\", () -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n        ws(\"events\", userController::webSocketEvents);\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    path(\"users\") {\n        get(UserController::getAllUsers)\n        post(UserController::createUser)\n        path(\":id\") {\n            get(UserController::getUser)\n            patch(UserController::updateUser)\n            delete(UserController::deleteUser)\n        }\n        ws(\"events\", UserController::webSocketEvents)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Instance in Java\nDESCRIPTION: This snippet demonstrates how to create and configure a Javalin instance using Java. It includes options for JavalinServlet, WsServlet, Server, and Misc settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n\n    // JavalinServlet\n    config.addSinglePageRoot(root, file)            // ex (\"/\", \"/index.html\")\n    config.addSinglePageRoot(root, file, location)  // ex (\"/\", \"src/file.html\", Location.EXTERNAL)\n    config.addStaticFiles(directory)                // ex (\"/public\")\n    config.addStaticFiles(directory, location)      // ex (\"src/folder\", Location.EXTERNAL)\n    config.addStaticFiles(prefix, dir, location)    // ex (\"/assets\", \"src/folder\", Location.EXTERNAL)\n    config.aliasCheckForStaticFiles = AliasCheck    // symlink config, ex new ContextHandler.ApproveAliases();\n    config.asyncRequestTimeout = timeoutInMs        // timeout for async requests (default is 0, no timeout)\n    config.autogenerateEtags = true/false           // auto generate etags (default is false)\n    config.compressionStrategy(Brotli(4), Gzip(6))  // set the compression strategy and levels - since 3.2.0\n    config.contextPath = contextPath                // context path for the http servlet (default is \"/\")\n    config.defaultContentType = contentType         // content type to use if no content type is set (default is \"text/plain\")\n    config.dynamicGzip = true/false                 // dynamically gzip http responses (default is true)\n    config.enableCorsForAllOrigins()                // enable cors for all origins\n    config.enableCorsForOrigin(origins)             // enable cors for specific origins\n    config.enableDevLogging()                       // enable extensive development logging for http and websocket\n    config.enableWebjars()                          // enable webjars (static files)\n    config.enforceSsl = true/false                  // redirect http traffic to https (default is false)\n    config.ignoreTrailingSlashes = true/false       // default is true\n    config.logIfServerNotStarted = true/false       // log a warning if user doesn't start javalin instance (default is true)\n    config.precompressStaticFiles = true/false      // store compressed files in memory (avoid recompression and ensure content-length is set)\n    config.prefer405over404 = true/false            // send a 405 if handlers exist for different verb on the same path (default is false)\n    config.requestCacheSize = sizeInBytes           // set the request cache size, used for reading request body multiple times (default is 4kb)\n    config.requestLogger { ... }                    // set a request logger\n    config.sessionHandler { ... }                   // set a SessionHandler\n\n    // WsServlet\n    config.wsContextPath = contextPath              // context path for the websocket servlet (default is \"/\")\n    config.wsFactoryConfig { ... }                  // set a websocket factory config\n    config.wsLogger { ... }                         // set a websocket logger\n\n    // Server\n    config.server { ... }                           // set a Jetty server for Javalin to run on\n\n    // Misc\n    config.accessManager { ... }                    // set an access manager (affects both http and websockets)\n    config.showJavalinBanner = true/false           // show the Javalin banner when starting the instance\n}).start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Javalin Plugin Interfaces\nDESCRIPTION: Defines the two core plugin interfaces in Javalin: Plugin for applying functionality and PluginLifecycleInit for initialization. The PluginLifecycleInit interface cannot add handlers during initialization.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_43\n\nLANGUAGE: java\nCODE:\n```\ninterface Plugin {\n    void apply(@NotNull Javalin app);\n}\ninterface PluginLifecycleInit {\n    void init(@NotNull Javalin app);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Exception and Error Mapping in Javalin\nDESCRIPTION: Demonstrates how to combine exception mapping with error mapping. In this example, FileNotFoundException is mapped to a 404 status code, and then a generic 404 error handler provides a standard message.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_39\n\nLANGUAGE: java\nCODE:\n```\napp.exception(FileNotFoundException.class, (e, ctx) -> {\n    ctx.status(404);\n}).error(404, ctx -> {\n    ctx.result(\"Generic 404 message\")\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(FileNotFoundException::class.java) { e, ctx ->\n    ctx.status(404)\n}.error(404) { ctx ->\n    ctx.result(\"Generic 404 message\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Handlers in Javalin\nDESCRIPTION: Examples of implementing before-handlers that run prior to request processing. Shows both global and path-specific handlers that can be used for tasks like authentication, logging, etc.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> {\n    // runs before all requests\n});\napp.before(\"/path/*\", ctx -> {\n    // runs before request to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.before { ctx ->\n    // runs before all requests\n}\napp.before(\"/path/*\") { ctx ->\n    // runs before request to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the GraphQL Plugin in Javalin\nDESCRIPTION: Kotlin code showing how to register and configure the GraphQL plugin in a Javalin application. Includes setting up the endpoint, adding packages, and registering query, mutation, and subscription classes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/graphql.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create {\n    val graphQLOption = GraphQLOptions(\"/graphql\", ContextExample())\n            .addPackage(\"io.javalin.examples\")\n            .register(QueryExample(message))\n            .register(MutationExample(message))\n            .register(SubscriptionExample())\n            .context()\n    it.registerPlugin(GraphQLPlugin(graphQLOption))\n}\n\napp.start()\n```\n\n----------------------------------------\n\nTITLE: Comparing findByEmail Implementation in Kotlin vs Java\nDESCRIPTION: Side-by-side comparison of a findByEmail method in Kotlin and Java. Shows the conciseness of Kotlin's stream operations, 'it' keyword, and built-in collection functions compared to Java's more verbose syntax.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-kotlin-example.md#2025-04-08_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n// Kotlin\nfun findByEmail(email: String): User? {\n    return users.values.find { it.email == email }\n}\n\n// Java\npublic User findByEmail(String email) {\n    return users.values().stream()\n            .filter(user -> user.getEmail().equals(email))\n            .findFirst()\n            .orElse(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Content-Type Specific Error Mapping in Javalin\nDESCRIPTION: Examples showing how to map errors with specific content types. Demonstrates setting up a 404 error handler that returns HTML content.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_35\n\nLANGUAGE: java\nCODE:\n```\napp.error(404, \"html\" ctx -> {\n    ctx.html(\"Generic 404 message\")\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.error(404, \"html\") { ctx ->\n    ctx.html(\"Generic 404 message\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin API Structure and Server in Java and Kotlin\nDESCRIPTION: Shows how to create a more complex Javalin application with static file handling, request logging, and structured API routes. This example demonstrates server configuration and route organization.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-06-javalin-1.0.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nJavalin app = Javalin.create()\n    .enableStaticFiles(\"/public\")\n    .enableStandardRequestLogging()\n    .port(port)\n    .start();\n\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAllUserIds);\n        post(UserController::createUser);\n        path(\":user-id\"(() -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n    });\n});\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nval app = Javalin.create().apply {\n    enableStaticFiles(\"/public\")\n    enableStandardRequestLogging()\n    port(port)\n}.start()\n\napp.routes {\n    path(\"users\") {\n        get(UserController::getAllUserIds)\n        post(UserController::createUser)\n        path(\":user-id\") {\n            get(UserController::getUser)\n            patch(UserController::updateUser)\n            delete(UserController::deleteUser)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebSocket Logging in Javalin\nDESCRIPTION: Shows how to configure WebSocket logging in Javalin. The example demonstrates logging for the onMessage event, but onConnect, onError, and onClose are also available.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_43\n\nLANGUAGE: java\nCODE:\n```\napp.create(config -> {\n    config.wsLogger(ws -> {\n        ws.onMessage(ctx -> {\n            System.out.println(\"Received: \" + ctx.message());\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.create { config ->\n    config.wsLogger(ws -> {\n        ws.onMessage { ctx ->\n            println(\"Received: \" + ctx.message());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin with Access Management and Vue Integration in Kotlin\nDESCRIPTION: This snippet demonstrates how to set up Javalin with access management using roles and filters, as well as integrating Vue components and API routes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\nimport io.javalin.apibuilder.ApiBuilder.get\nimport io.javalin.security.RouteRole\nimport io.javalin.http.Header\nimport io.javalin.http.Context\nimport io.javalin.http.HttpStatus\nimport io.javalin.http.UnauthorizedResponse\nimport io.javalin.vue.VueComponent\n\nenum class Role : RouteRole { ANYONE, LOGGED_IN }\n\nfun main() {\n\n    val app = Javalin.create { config ->\n        config.staticFiles.enableWebjars()\n        config.vue.apply {\n            stateFunction = { ctx -> mapOf(\"currentUser\" to ctx.currentUser()) }\n            vueInstanceNameInJs = \"app\"\n        }\n        config.router.mount {\n            it.beforeMatched { ctx ->\n                if (Role.LOGGED_IN in ctx.routeRoles() && ctx.currentUser() == null) {\n                    ctx.header(Header.WWW_AUTHENTICATE, \"Basic\")\n                    throw UnauthorizedResponse()\n                }\n            }\n        }.apiBuilder { // frontend routes\n            get(\"/\", VueComponent(\"hello-world\"), Role.ANYONE)\n            get(\"/users\", VueComponent(\"user-overview\"), Role.ANYONE)\n            get(\"/users/{user-id}\", VueComponent(\"user-profile\"), Role.LOGGED_IN)\n        }.apiBuilder { // api routes\n            get(\"/api/users\", UserController::getAll, Role.ANYONE)\n            get(\"/api/users/{user-id}\", UserController::getOne, Role.LOGGED_IN)\n        }\n    }.apply {\n        error(HttpStatus.NOT_FOUND, \"html\", VueComponent(\"not-found\"))\n    }.start(7070)\n\n}\n\nprivate fun Context.currentUser() = this.basicAuthCredentials()?.username\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Event Handlers in Javalin (Kotlin)\nDESCRIPTION: Kotlin version of implementing various WebSocket event handlers in Javalin. Covers handlers for connect, message, binary message, close, and error events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/{path}\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n    ws.onMessage { ctx ->\n        val user = ctx.messageAsClass<User>(); // convert from json\n        ctx.send(user); // convert to json and send back\n    }\n    ws.onBinaryMessage { ctx -> println(\"Message\") }\n    ws.onClose { ctx -> println(\"Closed\") }\n    ws.onError { ctx -> println(\"Errored\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin Server Configuration\nDESCRIPTION: Demonstrates how to configure various Javalin server settings using JavalinConfig in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-09-13-javalin-4.0.0-released.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n    config.autogenerateEtags = true;\n    config.addStaticFiles(\"/public\", Location.CLASSPATH);\n    config.asyncRequestTimeout = 10_000L;\n    config.enforceSsl = true;\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create { config ->\n    config.autogenerateEtags = true\n    config.addStaticFiles(\"/public\", Location.CLASSPATH);\n    config.asyncRequestTimeout = 10_000L\n    config.enforceSsl = true\n};\n```\n\n----------------------------------------\n\nTITLE: Server-sent Events Implementation\nDESCRIPTION: Shows how to implement server-sent events (SSE) in Javalin, including connection handling and client management.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nQueue<SseClient> clients = new ConcurrentLinkedQueue<SseClient>();\n\napp.sse(\"/sse\", client -> {\n    client.keepAlive();\n    client.onClose(() - > clients.remove(client));\n    clients.add(client);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval clients = ConcurrentLinkedQueue<SseClient>()\n\napp.sse(\"/sse\") { client ->\n    client.keepAlive()\n    client.onClose { clients.remove(client) }\n    clients.add(client)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Manager in Javalin (Java)\nDESCRIPTION: Shows how to implement and use an AccessManager for per-endpoint authentication and authorization in Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_26\n\nLANGUAGE: java\nCODE:\n```\n// Set the access-manager that Javalin should use\nconfig.accessManager((handler, ctx, routeRoles) -> {\n    MyRole userRole = getUserRole(ctx);\n    if (routeRoles.contains(userRole)) {\n        handler.handle(ctx);\n    } else {\n        ctx.status(401).result(\"Unauthorized\");\n    }\n});\n\nRole getUserRole(Context ctx) {\n    // determine user role based on request.\n    // typically done by inspecting headers, cookies, or user session\n}\n\nenum Role implements RouteRole {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE;\n}\n\napp.get(\"/un-secured\",   ctx -> ctx.result(\"Hello\"),   Role.ANYONE);\napp.get(\"/secured\",      ctx -> ctx.result(\"Hello\"),   Role.ROLE_ONE);\n```\n\n----------------------------------------\n\nTITLE: Advanced JWT Route Handlers with Access Control in Java\nDESCRIPTION: Implementation of JWT-protected routes with role-based access control in Javalin\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-11-javalin-jwt-example.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nHandler generateHandler = context -> {\n    MockUser mockUser = new MockUser(\"Mocky McMockface\", \"user\");\n    String token = provider.generateToken(mockUser);\n    context.json(new JWTResponse(token));\n};\n\nHandler validateHandler = context -> {\n    DecodedJWT decodedJWT = JavalinJWT.getDecodedFromContext(context);\n    context.result(\"Hi \" + decodedJWT.getClaim(\"name\").asString());\n};\n\napp.get(\"/generate\",  generateHandler, roles(Roles.ANYONE));\napp.get(\"/validate\", validateHandler, roles(Roles.USER, Roles.ADMIN));\napp.get(\"/adminslounge\", validateHandler, roles(Roles.ADMIN));\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Client for WebSocket Chat\nDESCRIPTION: JavaScript code for the chat application's client-side functionality. It establishes a WebSocket connection, handles sending and receiving messages, and updates the UI in real-time.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-09-22-javalin-websocket-example.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// small helper function for selecting element by id\nlet id = id => document.getElementById(id);\n\n//Establish the WebSocket connection and set up event handlers\nlet ws = new WebSocket(\"ws://\" + location.hostname + \":\" + location.port + \"/chat\");\nws.onmessage = msg => updateChat(msg);\nws.onclose = () => alert(\"WebSocket connection closed\");\n\n// Add event listeners to button and input field\nid(\"send\").addEventListener(\"click\", () => sendAndClear(id(\"message\").value));\nid(\"message\").addEventListener(\"keypress\", function (e) {\n    if (e.keyCode === 13) { // Send message if enter is pressed in input field\n        sendAndClear(e.target.value);\n    }\n});\n\nfunction sendAndClear(message) {\n    if (message !== \"\") {\n        ws.send(message);\n        id(\"message\").value = \"\";\n    }\n}\n\nfunction updateChat(msg) { // Update chat-panel and list of connected users\n    let data = JSON.parse(msg.data);\n    id(\"chat\").insertAdjacentHTML(\"afterbegin\", data.userMessage);\n    id(\"userlist\").innerHTML = data.userlist.map(user => \"<li>\" + user + \"</li>\").join(\"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a UserDao for CRUD Operations in Kotlin\nDESCRIPTION: A data access object implementation that provides CRUD functionality for User objects. Includes methods to save, find, update, and delete users, showcasing Kotlin's null safety, lambda expressions, and collection operations.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-kotlin-example.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.util.concurrent.atomic.AtomicInteger\n\nclass UserDao {\n\n    // \"Initialize\" with a few users\n    // This demonstrates type inference, map-literals and named parameters\n    val users = hashMapOf(\n            0 to User(name = \"Alice\", email = \"alice@alice.kt\", id = 0),\n            1 to User(name = \"Bob\", email = \"bob@bob.kt\", id = 1),\n            2 to User(name = \"Carol\", email = \"carol@carol.kt\", id = 2),\n            3 to User(name = \"Dave\", email = \"dave@dave.kt\", id = 3)\n    )\n\n    var lastId: AtomicInteger = AtomicInteger(users.size - 1)\n\n    fun save(name: String, email: String) {\n        val id = lastId.incrementAndGet()\n        users[id] = User(name = name, email = email, id = id)\n    }\n\n    fun findById(id: Int): User? {\n        return users[id]\n    }\n\n    fun findByEmail(email: String): User? {\n        return users.values.find { it.email == email } // == is equivalent to java .equals() (referential equality is checked by ===)\n    }\n\n    fun update(id: Int, user: User) {\n        users[id] = User(name = user.name, email = user.email, id = id)\n    }\n\n    fun delete(id: Int) {\n        users.remove(id)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Instance in Java\nDESCRIPTION: Shows how to configure a Javalin application in Java, including HTTP settings, routing behavior, and static file handling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n    config.http.generateEtags = true;\n    config.http.asyncTimeout = 10_000L;\n    config.routing.ignoreTrailingSlashes = true;\n    config.staticFiles.add(\"/public\", Location.CLASSPATH);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty in Javalin\nDESCRIPTION: This snippet demonstrates how to configure Jetty-specific settings in Javalin, including server, session handler, context handler, WebSocket factory, and HTTP configuration.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.jetty.server(serverSupplier); // set the Jetty Server for Javalin to run on\n    config.jetty.sessionHandler(sessionHandlerSupplier); // set the SessionHandler that Jetty will use for sessions\n    config.jetty.contextHandlerConfig(contextHandlerConsumer); // configure the ServletContextHandler Jetty runs on\n    config.jetty.wsFactoryConfig(jettyWebSocketServletFactoryConsumer); // configure the JettyWebSocketServletFactory\n    config.jetty.httpConfigurationConfig(httpConfigurationConsumer); // configure the HttpConfiguration of Jetty\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.jetty.server(serverSupplier) // set the Jetty Server for Javalin to run on\n    config.jetty.sessionHandler(sessionHandlerSupplier) // set the SessionHandler that Jetty will use for sessions\n    config.jetty.contextHandlerConfig(contextHandlerConsumer) // configure the ServletContextHandler Jetty runs on\n    config.jetty.wsFactoryConfig(jettyWebSocketServletFactoryConsumer) // configure the JettyWebSocketServletFactory\n    config.jetty.httpConfigurationConfig(httpConfigurationConsumer) // configure the HttpConfiguration of Jetty\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes Using Javalin ApiBuilder in Java\nDESCRIPTION: Demonstrates how to structure routes using the ApiBuilder utility in Java, including path nesting, request handlers, middleware, and WebSocket endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport static io.javalin.apibuilder.ApiBuilder.*\n...\napp.routes(() -> {\n    before(GlobalController::globalAction)               // handler that runs for every request to the app\n    path(\"users\", () -> {                                // push subpath /users on the router\n        get(UserController::getAll);                     // get controller for /users/\n        post(UserController::create);                    // post controller for /users/\n        before(\"{userId}*\", UserController:userIdCheck); // handler that runs for every request to /users/{userId} as well as al subpaths\n        path(\"{userId}\", (() -> {                        // new subpath /{userId} on the router\n            get(UserController::getOne);                 // get controller for /users/{userId}\n            patch(UserController::update);               // patch controller for /users/{userId}\n            path(\"subpath\", (() -> { ... });             // push subpath /subpath on the router (and pop it immediately)\n        });                                              // pop subpath /{userId} on the router\n        ws(\"events\", UserController::webSocketEvents);   // websocket controller for /users/events\n    });                                                  // pop subpath /users on the router\n}).start(port);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Rendering Engines in Javalin (Java)\nDESCRIPTION: Shows how to register custom rendering engines for specific file extensions using JavalinRenderer.register method.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_63\n\nLANGUAGE: java\nCODE:\n```\nJavalinRenderer.register(JavalinPebble.INSTANCE, \".peb\", \".pebble\");\n\nJavalinRenderer.register((filePath, model) -> {\n    return MyRenderer.render(filePath, model);\n}, \".ext\");\n```\n\n----------------------------------------\n\nTITLE: Javalin Request Lifecycle Flow\nDESCRIPTION: This snippet outlines the complete Javalin request lifecycle, showing the order in which different handlers and hooks are executed during request processing.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nJavalin#before              // runs first, can throw exception (which will skip any endpoint handlers)\nJavalin#get/post/patch/etc  // runs second, can throw exception\nJavalin#error               // runs third, can throw exception\nJavalin#after               // runs fourth, can throw exception\nJavalin#exception           // runs any time a handler throws (cannot throw exception)\nJavalinConfig#requestLogger // runs after response is written to client\nJavalinConfig#accessManager // wraps all your endpoint handlers in a lambda of your choice\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Handlers in Javalin\nDESCRIPTION: Shows how to set up WebSocket endpoint handlers for connection, message, close and error events. Demonstrates sending messages back to clients and handling different WebSocket events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_25\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/:path\", ws -> {\n    ws.onConnect(session -> System.out.println(\"Connected\"));\n    ws.onMessage((session, message) -> {\n        System.out.println(\"Received: \" + message);\n        session.getRemote().sendString(\"Echo: \" + message);\n    });\n    ws.onClose((session, statusCode, reason) -> System.out.println(\"Closed\"));\n    ws.onError((session, throwable) -> System.out.println(\"Errored\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/:path\") { ws ->\n    ws.onConnect { session -> println(\"Connected\") }\n    ws.onMessage { session, message ->\n        println(\"Received: \" + message)\n        session.remote.sendString(\"Echo: \" + message)\n    }\n    ws.onClose { session, statusCode, reason -> println(\"Closed\") }\n    ws.onError { session, throwable -> println(\"Errored\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Handlers in Javalin\nDESCRIPTION: Demonstrates setting up WebSocket handlers for connect, message, close, and error events with both synchronous and asynchronous message handling.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/:path\", ws -> {\n    ws.onConnect(session -> System.out.println(\"Connected\"));\n    ws.onMessage((session, message) -> {\n        System.out.println(\"Received: \" + message);\n        session.getRemote().sendString(\"Echo: \" + message);\n    });\n    ws.onClose((session, statusCode, reason) -> System.out.println(\"Closed\"));\n    ws.onError((session, throwable) -> System.out.println(\"Errored\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/:path\") { ws ->\n    ws.onConnect { session -> println(\"Connected\") }\n    ws.onMessage { session, message ->\n        println(\"Received: \" + message)\n        session.remote.sendString(\"Echo: \" + message)\n    }\n    ws.onClose { session, statusCode, reason -> println(\"Closed\") }\n    ws.onError { session, throwable -> println(\"Errored\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple CORS Configurations in Javalin\nDESCRIPTION: Setup for different CORS configurations based on URL paths, allowing different hosts for different resource types.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/cors.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.bundledPlugins.enableCors(cors -> {\n        cors.addRule(it -> {\n            it.path = \"images*\";\n            it.allowHost(\"https://images.local\");\n        });\n        cors.addRule(it -> {\n            it.path = \"videos*\";\n            it.allowHost(\"https://videos.local\");\n        });\n        cors.addRule(it -> {\n            it.path = \"music*\";\n            it.allowHost(\"https://music.local\");\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.bundledPlugins.enableCors { cors ->\n        cors.addRule {\n            it.path = \"images*\"\n            it.allowHost(\"https://images.local\")\n        }\n        cors.addRule {\n            it.path = \"videos*\"\n            it.allowHost(\"https://videos.local\")\n        }\n        cors.addRule {\n            it.path = \"music*\"\n            it.allowHost(\"https://music.local\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Javalin's Validator for Request Parameters and Body\nDESCRIPTION: Demonstrates how to use Javalin's Validator class for validating query, form, path parameters, headers, and request body. It shows the syntax for both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nctx.queryParamAsClass(\"paramName\", MyClass.class)   // creates a Validator<MyClass> for the value of queryParam(\"paramName\")\nctx.formParamAsClass(\"paramName\", MyClass.class)    // creates a Validator<MyClass> for the value of formParam(\"paramName\")\nctx.pathParamAsClass(\"paramName\", MyClass.class)    // creates a Validator<MyClass> for the value of pathParam(\"paramName\")\nctx.headerAsClass(\"headerName\", MyClass.class)      // creates a Validator<MyClass> for the value of header(\"paramName\")\nctx.bodyValidator(MyClass.class)                    // creates a Validator<MyClass> for the value of body()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.queryParamAsClass<MyClass>(\"paramName\")         // creates a Validator<MyClass> for the value of queryParam(\"paramName\")\nctx.formParamAsClass<MyClass>(\"paramName\")          // creates a Validator<MyClass> for the value of formParam(\"paramName\")\nctx.pathParamAsClass<MyClass>(\"paramName\")          // creates a Validator<MyClass> for the value of pathParam(\"paramName\")\nctx.headerAsClass<MyClass>(\"headerName\")            // creates a Validator<MyClass> for the value of header(\"paramName\")\nctx.bodyValidator<MyClass>()                        // creates a Validator<MyClass> for the value of body()\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin Web Server with Vue Configuration\nDESCRIPTION: Kotlin code showing the basic setup of a Javalin web server with Vue.js integration and static file serving configuration.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\n\nfun main() {\n    val app = Javalin.create { config ->\n        config.staticFiles.enableWebjars()\n        config.vue.vueInstanceNameInJs = \"app\" // only required for Vue 3, is defined in layout.html\n    }.start(7070)\n```\n\n----------------------------------------\n\nTITLE: Grouping Endpoints with Handler Groups in Javalin (Java)\nDESCRIPTION: Demonstrates how to use handler groups to organize and structure endpoints in Javalin using Java. This example groups user-related endpoints and includes a WebSocket endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAllUsers);\n        post(UserController::createUser);\n        path(\"{id}\", () -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n        ws(\"events\", UserController::webSocketEvents);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ClassLoader for Javalin in Minecraft Plugins\nDESCRIPTION: Java code showing how to set a custom ClassLoader when using Javalin in Minecraft plugins. This workaround helps resolve class not found errors by temporarily switching to the plugin's ClassLoader.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nThread.currentThread().setContextClassLoader(RemoteAPI.class.getClassLoader());\nJavalin app = Javalin.create().start(PORT);\nThread.currentThread().setContextClassLoader(classLoader);\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates in Javalin (Java and Kotlin)\nDESCRIPTION: Demonstrates how to render templates with model data in both Java and Kotlin using Javalin's render method.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_62\n\nLANGUAGE: java\nCODE:\n```\nctx.render(\"/templateFile.ext\", model(\"firstName\", \"John\", \"lastName\", \"Doe\"))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.render(\"/templateFile.ext\", mapOf(\"firstName\" to \"John\", \"lastName\" to \"Doe\"))\n```\n\n----------------------------------------\n\nTITLE: Custom Jetty Handler Configuration\nDESCRIPTION: Shows how to set up custom Jetty handlers with statistics tracking.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_54\n\nLANGUAGE: java\nCODE:\n```\nStatisticsHandler statisticsHandler = new StatisticsHandler();\n\nJavalin.create(config -> {\n    config.server(() -> {\n        Server server = new Server();\n        server.setHandler(statisticsHandler);\n        return server;\n    })\n}).start();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval statisticsHandler = StatisticsHandler()\n\nJavalin.create { config ->\n    config.server {\n        Server().apply {\n            handler = statisticsHandler\n        }\n    }\n}.start();\n```\n\n----------------------------------------\n\nTITLE: Grouping Endpoints with Handler Groups in Javalin (Kotlin)\nDESCRIPTION: Shows how to use handler groups to organize and structure endpoints in Javalin using Kotlin. This example groups user-related endpoints and includes a WebSocket endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    path(\"users\") {\n        get(UserController::getAllUsers)\n        post(UserController::createUser)\n        path(\"{id}\") {\n            get(UserController::getUser)\n            patch(UserController::updateUser)\n            delete(UserController::deleteUser)\n        }\n        ws(\"events\", UserController::webSocketEvents)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Handlers in Javalin\nDESCRIPTION: Before-handlers are executed before every request, functioning as filters or middleware. They can be applied globally or to specific paths.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> {\n    // runs before all requests\n});\napp.before(\"/path/*\", ctx -> {\n    // runs before request to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.before { ctx ->\n    // runs before all requests\n}\napp.before(\"/path/*\") { ctx ->\n    // runs before request to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing App Data in Kotlin\nDESCRIPTION: Shows how to register and access custom app data in Javalin using Kotlin. The pattern is similar to Java but uses Kotlin syntax for lambda expressions and type inference.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// register a custom attribute\nval myKey = Key<MyValue>(\"my-key\")\nval app = Javalin.create { config ->\n    config.appData(myKey, myValue)\n}\n// access a custom attribute\nval myValue = ctx.appData(myKey) // val will be inferred to MyValue\n// call a custom method on a custom attribute\nctx.appData(myKey).myMethod()\n```\n\n----------------------------------------\n\nTITLE: Using OpenAPI Annotations in Javalin\nDESCRIPTION: Illustrates how to use OpenAPI annotations to document a Javalin endpoint handler.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_55\n\nLANGUAGE: kotlin\nCODE:\n```\n@OpenApi(\n    requestBody = OpenApiRequestBody(User::class),\n    responses = [\n        OpenApiResponse(\"400\", Unit::class),\n        OpenApiResponse(\"201\", Unit::class)\n    ]\n)\nfun createUser(ctx: Context) {\n    val user = ctx.body<User>()\n    UserRepository.createUser(user)\n    ctx.status(201)\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Request Body in Javalin (Kotlin)\nDESCRIPTION: Demonstrates how to validate the request body in Javalin using Kotlin. It shows an example of validating a custom object type from the request body.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\n// Body Validation\nval myObject = ctx.bodyValidator<MyObject>();\n```\n\n----------------------------------------\n\nTITLE: Handling Async Cat Facts Endpoint in Javalin\nDESCRIPTION: Implements a GET endpoint that asynchronously returns cat facts to the client. Includes error handling and response status management.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_51\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/cat-facts\", ctx -> {\n    ctx.future(() -> {\n        return getRandomCatFactFuture()\n            .thenAccept(response -> ctx.html(response.body()).status(response.statusCode()))\n            .exceptionally(throwable -> {\n                ctx.status(500).result(\"Could not get cat facts\" + throwable.getMessage());\n                return null;\n            })\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/cat-facts\") { ctx ->\n    ctx.future {\n        getRandomCatFactFuture()\n            .thenAccept { response -> ctx.html(response.body()).status(response.statusCode()) }\n            .exceptionally { throwable ->\n                ctx.status(500).result(\"Could not get cat facts: ${throwable.message}\")\n                null\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-sent Events (SSE)\nDESCRIPTION: Demonstrates how to implement Server-sent Events including sending events to clients and handling client disconnection.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_28\n\nLANGUAGE: java\nCODE:\n```\napp.sse(\"/sse\", client ->\n    client.sendEvent(\"connected\", \"Hello, SSE\");\n    client.onClose(() -> System.out.println(\"Client disconnected\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.sse(\"/sse\") { client ->\n    client.sendEvent(\"connected\", \"Hello, SSE\")\n    client.onClose { println(\"Client disconnected\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Route Handlers with Handler Groups in Javalin\nDESCRIPTION: Shows how to group related endpoints using routes() and path() methods. This approach helps organize controllers by resource type and provides a cleaner API definition structure.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAllUsers);\n        post(UserController::createUser);\n        path(\"{id}\", () -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n        ws(\"events\", UserController::webSocketEvents);\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    path(\"users\") {\n        get(UserController::getAllUsers)\n        post(UserController::createUser)\n        path(\"{id}\") {\n            get(UserController::getUser)\n            patch(UserController::updateUser)\n            delete(UserController::deleteUser)\n        }\n        ws(\"events\", UserController::webSocketEvents)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Plugin in Java and Kotlin\nDESCRIPTION: Demonstrates how to configure the SSL Plugin with a PEM certificate and key file in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/ssl-helpers.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nSslPlugin plugin = new SslPlugin(conf -> {\n    conf.pemFromPath(\"/path/to/cert.pem\", \"/path/to/key.pem\");\n    // additional configuration options\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval plugin = SslPlugin { conf ->\n    conf.pemFromPath(\"/path/to/cert.pem\", \"/path/to/key.pem\")\n    // additional configuration options\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Range Requests with Seekable Streams in Javalin\nDESCRIPTION: Demonstrates how to use seekableStream for streaming large files like audio and video, which enables seeking functionality in media players and resuming downloads.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-03-27-javalin-3.8.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/file\", ctx -> {\n    File file = new File(\"/my-file.mp3\");\n    ctx.seekableStream(new FileInputStream(file), \"audio/mpeg\");\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/file\") { ctx ->\n    val file = File(\"/my-file.mp3\")\n    ctx.seekableStream(file.inputStream(), \"audio/mpeg\")\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Interface Implementation\nDESCRIPTION: Basic plugin system interfaces for Javalin 3.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_56\n\nLANGUAGE: java\nCODE:\n```\ninterface Plugin {\n    void apply(@NotNull Javalin app);\n}\ninterface PluginLifecycleInit {\n    void init(@NotNull Javalin app);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Javalin Routes\nDESCRIPTION: Handlers can include path parameters that capture values from the URL. These parameters are available through ctx.pathParam() method with different syntax options for slashes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/hello/{name}\", ctx -> { // the {} syntax does not allow slashes ('/') as part of the parameter\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"));\n});\napp.get(\"/hello/<name>\", ctx -> { // the <> syntax allows slashes ('/') as part of the parameter\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/hello/{name}\") { ctx -> // the {} syntax does not allow slashes ('/') as part of the parameter\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"))\n}\napp.get(\"/hello/<name>\") { ctx -> // the <> syntax allows slashes ('/') as part of the parameter\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing After Handlers in Javalin\nDESCRIPTION: Shows how to implement after handlers in Javalin, which run after all requests or specific paths, even if an exception occurred.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\napp.after(ctx -> {\n    // run after all requests\n});\napp.after(\"/path/*\", ctx -> {\n    // runs after request to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.after { ctx ->\n    // run after all requests\n}\napp.after(\"/path/*\") { ctx ->\n    // runs after request to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Host IP in Javalin\nDESCRIPTION: Shows how to specify the host IP address when starting a Javalin server. This allows binding the server to a specific network interface.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_44\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create().start(\"127.0.0.1\", 1235)\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Engines in Javalin\nDESCRIPTION: Shows how to configure various template engines supported by Javalin, allowing customization of rendering behavior for templates.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_69\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalinThymeleaf.configure(templateEngine)\nJavalinVelocity.configure(velocityEngine)\nJavalinFreemarker.configure(configuration)\nJavalinMustache.configure(mustacheFactory)\nJavalinJtwig.configure(configuration)\nJavalinPebble.configure(configuration)\nJavalinCommonmark.configure(htmlRenderer, markdownParser)\n```\n\n----------------------------------------\n\nTITLE: Creating Handler Groups in Javalin 2.X\nDESCRIPTION: Examples of grouping endpoints using routes() and path() methods. This approach allows for creating a structured API with nested paths and removes the need to repeat the app prefix.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAllUsers);\n        post(UserController::createUser);\n        path(\":id\", () -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    path(\"users\") {\n        get(userController::getAllUsers);\n        post(userController::createUser);\n        path(\":id\") {\n            get(userController::getUser);\n            patch(userController::updateUser);\n            delete(userController::deleteUser);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java 11 in Maven\nDESCRIPTION: Maven configuration to set the Java language level to Java 11. This plugin configuration ensures your project uses Java 11 for compilation and runtime.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-24-javalin-maven-example.md#2025-04-08_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.10.1</version>\n            <configuration>\n                <source>11</source>\n                <target>11</target>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Registering Route Overview Plugin in Javalin\nDESCRIPTION: Shows how to enable and configure the Route Overview Plugin, which provides an HTML page displaying all routes of the application.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config ->\n    config.registerPlugin(new RouteOverviewPlugin(path));        // show all routes on specified path\n    config.registerPlugin(new RouteOverviewPlugin(path, roles)); // show all routes on specified path (with auth)\n)\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Implementation in Javalin\nDESCRIPTION: A simple WebSocket handler implementation in Javalin showing connection handling. The WebSocket is configured with a path that can include path parameters, and the onConnect handler is triggered when a client connects to the WebSocket endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/{path}\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/{path}\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin Context API Methods\nDESCRIPTION: Complete list of available methods on the Context object for handling HTTP requests and responses. Includes methods for accessing request data, manipulating responses, and managing sessions.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nctx.appAttribute(class)                 // get an attribute set on the app\nctx.register(class, object)             // register an extension on the context\nctx.use(class)                          // use an extension on the context\nctx.cookieStore(key)                    // get cookie store value\nctx.cookieStore(key, value)             // set a cookie store value\nctx.clearCookieStore()                  // clear the cookie store\n// ... [additional methods]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Jetty Handlers in Javalin\nDESCRIPTION: Demonstrates how to configure custom Jetty handlers for a Javalin application, such as adding a StatisticsHandler. Javalin will attach its own handlers to the end of this chain.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nStatisticsHandler statisticsHandler = new StatisticsHandler();\n\nJavalin.create(config -> {\n    config.server(() -> {\n        Server server = new Server();\n        server.setHandler(statisticsHandler);\n        return server;\n    })\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval statisticsHandler = StatisticsHandler()\n\nJavalin.create { config ->\n    config.server {\n        Server().apply {\n            handler = statisticsHandler\n        }\n    }\n}.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue.js Layout Template in Javalin\nDESCRIPTION: This snippet demonstrates how to create a layout template for Vue.js support in Javalin. It includes script loading, component registration, and Vue instance initialization.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_57\n\nLANGUAGE: markup\nCODE:\n```\n<head>\n    <script src=\"/webjars/vue/2.6.10/dist/vue.min.js\"></script>\n    @componentRegistration\n</head>\n<body>\n<main id=\"main-vue\" v-cloak>\n    @routeComponent\n</main>\n<script>\n    new Vue({el: \"#main-vue\"});\n</script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in Javalin\nDESCRIPTION: Examples of handling path parameters in route definitions using both {} and <> syntax. The <> syntax allows slashes in parameters while {} does not.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/hello/{name}\", ctx -> { // the {} syntax does not allow slashes ('/') as part of the parameter\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"));\n});\napp.get(\"/hello/<name>\", ctx -> { // the <> syntax allows slashes ('/') as part of the parameter\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/hello/{name}\") { ctx -> // the {} syntax does not allow slashes ('/') as part of the parameter\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"))\n}\napp.get(\"/hello/<name>\") { ctx -> // the <> syntax allows slashes ('/') as part of the parameter\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin Request Lifecycle Handlers\nDESCRIPTION: Lists the complete request handling lifecycle in Javalin, showing the order of execution for different handler types.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nJavalin#before              // runs first, can throw exception (which will skip any endpoint handlers)\nJavalin#get/post/patch/etc  // runs second, can throw exception\nJavalin#error               // runs third, can throw exception\nJavalin#after               // runs fourth, can throw exception\nJavalin#exception           // runs any time a handler throws (cannot throw exception)\nJavalinConfig#requestLogger // runs after response is written to client\nJavalinConfig#accessManager // wraps all your endpoint handlers in a lambda of your choice\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Manager in Javalin (Kotlin)\nDESCRIPTION: Demonstrates how to configure and use an AccessManager in Javalin using Kotlin. It shows setting up role-based access control for different endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\n// Set the access-manager that Javalin should use\nconfig.accessManager { handler, ctx, permittedRoles ->\n    val userRole = getUserRole(ctx) // determine user role based on request\n    if (permittedRoles.contains(userRole)) {\n        handler.handle(ctx)\n    } else {\n        ctx.status(401).result(\"Unauthorized\")\n    }\n}\n\nfun getUserRole(ctx: Context) : Role {\n    // determine user role based on request\n    // typically done by inspecting headers\n}\n\ninternal enum class MyRole : Role {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE\n}\n\napp.routes {\n    get(\"/un-secured\",   { ctx -> ctx.result(\"Hello\")},   roles(MyRole.ANYONE));\n    get(\"/secured\",      { ctx -> ctx.result(\"Hello\")},   roles(MyRole.ROLE_ONE));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Settings in Javalin\nDESCRIPTION: Demonstrates how to configure file upload settings including cache directory, maximum file sizes, and request size limits. Covers configuration for individual file size, in-memory file handling, and total request size limits.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2023-01-01-javalin-5.3.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.fileUpload.cacheDirectory(\"c:/temp\"); //where to write files that exceed the in memory limit\n    config.fileUpload.maxFileSize(100, SizeUnit.MB); //the maximum individual file size allowed\n    config.fileUpload.maxInMemoryFileSize(10, SizeUnit.MB); //the maximum file size to handle in memory\n    config.fileUpload.maxTotalRequestSize(1, SizeUnit.GB); //the maximum size of the entire multipart request\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.fileUpload.cacheDirectory(\"c:/temp\") //where to write files that exceed the in memory limit\n    config.fileUpload.maxFileSize(100, SizeUnit.MB) //the maximum individual file size allowed\n    config.fileUpload.maxInMemoryFileSize(10, SizeUnit.MB) //the maximum file size to handle in memory\n    config.fileUpload.maxTotalRequestSize(1, SizeUnit.GB) //the maximum size of the entire multipart request\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI in Javalin\nDESCRIPTION: Shows how to enable and configure OpenAPI documentation generation and hosting in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_56\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create {\n    it.enableOpenApi(\n            OpenApiOptions(Info().version(\"1.0\").description(\"My Application\"))\n                    .path(\"/swagger-json\")\n                    .swagger(SwaggerOptions(\"/swagger\").title(\"My Swagger Documentation\"))\n                    .reDoc(ReDocOptions(\"/redoc\").title(\"My ReDoc Documentation\"))\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Routes in Javalin\nDESCRIPTION: Shows how to set up CRUD routes using the CrudHandler interface in a Javalin application.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    crud(\"users/{user-id}\", new UserController());\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    crud(\"users/{user-id}\", UserController())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build File for Javalin Project\nDESCRIPTION: Basic Gradle build configuration for a Javalin project. Sets up Java 11 compatibility, adds Maven Central repository, and includes the Javalin dependency. This configuration works for both Java and Kotlin projects.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-24-javalin-gradle-example.md#2025-04-08_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngroup 'io.javalin' // your group id\nversion '1.0-SNAPSHOT'\n\napply plugin: 'java'\n\nsourceCompatibility = 11\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'io.javalin:javalin:{{site.javalinversion}}'\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Configurable Javalin Plugin\nDESCRIPTION: Examples showing how to register a plugin with configuration. The consumer pattern allows for easy customization of the plugin's behavior during registration.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/how-to.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create { config ->\n    config.registerPlugin(Ratey { rateyConfig ->\n        rateyConfig.limit = 100_000\n    })\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n    config.registerPlugin(new Ratey(rateyConfig -> {\n        rateyConfig.limit = 100_000;\n    }));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Event Handlers in Javalin (Java)\nDESCRIPTION: Comprehensive example of implementing various WebSocket event handlers in Javalin using Java. Includes handlers for connect, message, binary message, close, and error events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/{path}\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n    ws.onMessage(ctx -> {\n        User user = ctx.messageAsClass(User.class); // convert from json\n        ctx.send(user); // convert to json and send back\n    });\n    ws.onBinaryMessage(ctx -> System.out.println(\"Message\"))\n    ws.onClose(ctx -> System.out.println(\"Closed\"));\n    ws.onError(ctx -> System.out.println(\"Errored\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Manager in Javalin (Kotlin)\nDESCRIPTION: Shows how to implement and use an AccessManager for per-endpoint authentication and authorization in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\n// Set the access-manager that Javalin should use\nconfig.accessManager { handler, ctx, routeRoles ->\n    val userRole = getUserRole(ctx) // determine user role based on request\n    if (routeRoles.contains(userRole)) {\n        handler.handle(ctx)\n    } else {\n        ctx.status(401).result(\"Unauthorized\")\n    }\n}\n\nfun getUserRole(ctx: Context) : Role {\n    // determine user role based on request.\n    // typically done by inspecting headers, cookies, or user session\n}\n\nenum class Role : RouteRole {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE\n}\n\napp.get(\"/un-secured\",   { ctx -> ctx.result(\"Hello\") },   Role.ANYONE);\napp.get(\"/secured\",      { ctx -> ctx.result(\"Hello\") },   Role.ROLE_ONE);\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Path Matching in Javalin\nDESCRIPTION: Handlers can use wildcard patterns to match multiple paths. This allows a single handler to process requests for various related endpoints that share a common prefix.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/path/*\", ctx -> { // will match anything starting with /path/\n    ctx.result(\"You are here because \" + ctx.path() + \" matches \" + ctx.matchedPath());\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/path/*\") { ctx -> // will match anything starting with /path/\n    ctx.result(\"You are here because \" + ctx.path() + \" matches \" + ctx.matchedPath())\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Template in Javalin (HTML)\nDESCRIPTION: Shows an example of a Vue component template that accesses Javalin path parameters.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_66\n\nLANGUAGE: markup\nCODE:\n```\n<template id=\"thread-view\">\n    <div>{{ $javalin.pathParams[\"user\"] }}</div>\n</template>\n<script>\n    Vue.component(\"thread-view\", {\n        template: \"#thread-view\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using CookieStore for State Management in Java\nDESCRIPTION: Demonstrates the CookieStore API which provides a way to share information between handlers, requests, or servers. The cookie store serializes data, encodes it as base64, and stores it in cookies for persistence.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nctx.cookieStore().set(key, value); // store any type of value\nctx.cookieStore().get(key);        // read any type of value\nctx.cookieStore().clear();         // clear the cookie-store\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Mapping in Javalin for Java and Kotlin\nDESCRIPTION: Demonstrates how to use Javalin's built-in JSON mapping capabilities for both request and response bodies. This example shows serialization and deserialization of Todo objects.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-06-javalin-1.0.0-released.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nTodo[] todos = ...\napp.get(\"/todos\", ctx -> { // map array of Todos to json-string\n    ctx.json(todos);\n});\napp.put(\"/todos\", ctx -> { // map request-body (json) to array of Todos\n    todos = ctx.bodyAsClass(Todo[].class);\n    ctx.status(204);\n});\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nvar todos = arrayOf(...)\napp.get(\"/todos\") { ctx -> // map array of Todos to json-string\n    ctx.json(todos)\n}\napp.put(\"/todos\") { ctx -> // map request-body (json) to array of Todos\n    todos = ctx.bodyAsClass(Array<Todo>::class.java)\n    ctx.status(204)\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Paths to Vue Components in Javalin\nDESCRIPTION: Java code demonstrating how to map URL paths to Vue components using the VueComponent class in Javalin. This allows routing specific URLs to specific Vue components.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_58\n\nLANGUAGE: java\nCODE:\n```\nget(\"/messages\",        VueComponent(\"inbox-view\"))\nget(\"/messages/{user}\", VueComponent(\"thread-view\"))\n```\n\n----------------------------------------\n\nTITLE: WebSocket After-Handlers in Javalin\nDESCRIPTION: Demonstrates how to add handlers that run after WebSocket handlers execute. Examples show applying after-handlers to all WebSocket endpoints or specific path patterns.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\napp.wsAfter(ws -> {\n    // runs after all WebSocket requests\n});\napp.wsAfter(\"/path/*\", ws -> {\n    // runs after websocket requests to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsAfter { ws ->\n    // runs after all WebSocket requests\n}\napp.wsAfter(\"/path/*\") { ws ->\n    // runs after websocket requests to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SSL Plugin with Javalin in Java and Kotlin\nDESCRIPTION: Shows how to register the configured SSL Plugin with Javalin in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/ssl-helpers.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(javalinConfig -> {\n    javalinConfig.plugins.register(plugin);\n}).start();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { javalinConfig ->\n    javalinConfig.plugins.register(plugin)\n}.start()\n```\n\n----------------------------------------\n\nTITLE: JavalinVue Layout Template for Vue.js Integration\nDESCRIPTION: Example of a layout template for JavalinVue, which provides simplified Vue.js development without requiring NPM or frontend builds. The template includes placeholders for component registration and routing.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_70\n\nLANGUAGE: markup\nCODE:\n```\n<head>\n    <script src=\"/webjars/vue/2.6.10/dist/vue.min.js\"></script>\n    @componentRegistration\n</head>\n<body>\n<main id=\"main-vue\" v-cloak>\n    @routeComponent\n</main>\n<script>\n    new Vue({el: \"#main-vue\"});\n</script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson JSON Mapper in Javalin\nDESCRIPTION: Demonstrates how to configure the default Jackson JSON mapper with custom serialization settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_53\n\nLANGUAGE: java\nCODE:\n```\nconfig.jsonMapper(new JavalinJackson().updateMapper(mapper -> {\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.jsonMapper(JavalinJackson().updateMapper { mapper ->\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Javalin Plugin with Configuration\nDESCRIPTION: An improved version of the Ratey plugin that includes a configuration class for customizing the rate limit. It demonstrates how to create a configurable plugin using the Consumer<Config> pattern.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/how-to.md#2025-04-08_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Ratey(userConfig: Consumer<Config>) : Plugin<Ratey.Config>(userConfig, Config()) {\n    // the Ratey.Config class is the config type\n    // we need to pass the config + default config to the super constructor\n    // this will merge the user config with the default config\n    var counter = 0\n    class Config {\n        var limit = 1\n    }\n\n    override fun onInitialize(config: JavalinConfig) {\n        config.router.mount { router ->\n            router.before { ctx ->\n                if (counter++ > pluginConfig.limit) { // we can access the config through the pluginConfig field\n                    throw TooManyRequestsResponse()\n                }\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nclass Ratey extends Plugin<Ratey.Config> { // the Ratey.Config class is the config type\n    int counter;\n    public Ratey(Consumer<Config> userConfig) {\n        super(userConfig, new Config()); // we pass config + default config to the super constructor\n    }\n    public static class Config {\n        public int limit = 1;\n    }\n    @Override\n    public void onInitialize(JavalinConfig config) {\n        config.router.mount(router -> {\n            router.before(ctx -> {\n                if (counter++ > pluginConfig.limit) { // we can access the config through the pluginConfig field\n                    throw new TooManyRequestsResponse();\n                }\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Basic WebSocket Endpoint in Javalin (Java)\nDESCRIPTION: Shows how to create a basic WebSocket endpoint in Javalin using Java. This example sets up a connection handler for the WebSocket.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/{path}\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Jetty Server in Javalin\nDESCRIPTION: Demonstrates how to set up a custom Jetty server instance and statistics handler in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nStatisticsHandler statisticsHandler = new StatisticsHandler();\n\nJavalin.create(config -> {\n    config.server(() -> {\n        Server server = new Server();\n        server.setHandler(statisticsHandler);\n        return server;\n    })\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval statisticsHandler = StatisticsHandler()\n\nJavalin.create { config ->\n    config.server {\n        Server().apply {\n            handler = statisticsHandler\n        }\n    }\n}.start();\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin Application with InfluxDB Integration\nDESCRIPTION: Main application setup that creates Javalin endpoints for statistics upload and retrieval. Includes data classes for statistics and controller implementation for handling HTTP requests.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2017-12-11-javalin-influxdb-example.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Statistic(val count: Int = 0, val timestamp: Long = Date().time)\n\ndata class Total(val count: Double, val sum: Double, val min: Double, val max: Double)\n\nval influxHost = System.getenv().getOrDefault(\"influx.host\", \"influxdb\")!!\n\nval influxDB: InfluxDB by lazy { InfluxDBFactory.connect(\"http://$influxHost:8086\", \"root\", \"root\") }\n\nfun main(args: Array<String>) {\n    val app = Javalin.create().start(7000)\n    val statisticService = StatisticsService(influxDB)\n    val controller = Controller(statisticService)\n\n    app.routes {\n        get(\"/statistics\", { ctx ->\n            controller.get(ctx)\n        })\n        post(\"/upload\", { ctx ->\n            controller.post(ctx)\n        })\n    }\n\n}\n\nclass Controller(private val statisticService: StatisticsService) {\n    private val asStatusCode = fun StatisticResult.(): Int {\n        return if (this == StatisticResult.OK) {\n            201\n        } else {\n            204\n        }\n    }\n\n    fun post(ctx: Context) {\n        val statistic = ctx.bodyAsClass(Statistic::class.java)\n        val result = statisticService.create(statistic)\n        ctx.status(result.asStatusCode())\n    }\n\n    fun get(ctx: Context) {\n        ctx.json(statisticService.aggregated())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Request Handling in Javalin\nDESCRIPTION: Shows how to handle asynchronous requests in Javalin using CompletableFuture. Example demonstrates creating and returning a future result in a Kotlin endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_61\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\n\nfun main(args: Array<String>) {\n    val app = Javalin.create().start(7000)\n    app.get(\"/\") { ctx -> ctx.result(getFuture()) }\n}\n\n// hopefully your future is less pointless than this:\nprivate fun getFuture() = CompletableFuture<String>().apply {\n    Executors.newSingleThreadScheduledExecutor().schedule({ this.complete(\"Hello World!\") }, 1, TimeUnit.SECONDS)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Mapping in Javalin\nDESCRIPTION: Shows how to handle exceptions thrown by handlers in Javalin applications. Two exception mappers are demonstrated: one for a specific exception type (NullPointerException) and another for general exceptions. The more specific mapper takes precedence when applicable.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_36\n\nLANGUAGE: java\nCODE:\n```\napp.exception(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.exception(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.exception(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Javalin Filters and Mappers in Java and Kotlin\nDESCRIPTION: Demonstrates how to add before and after filters, exception handlers, and error handlers in a Javalin application. These features allow for request/response manipulation and error handling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-06-javalin-1.0.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\napp.before(\"/some-path/*\", ctx -> { ... }); // runs before requests to /some-path/*\napp.before(ctx -> { ... }); // runs before all requests\napp.after(ctx -> { ... }); // runs after all requests\napp.exception(Exception.class, (e, ctx) -> { ... }); // runs if uncaught Exception\napp.error(404, ctx -> { ... }); // runs if status is 404 (after all other handlers)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\napp.before(\"/some-path/*\") { ctx ->  ... } // runs before requests to /some-path/*\napp.before { ctx -> ... } // runs before all requests\napp.after { ctx -> ... } // runs after all requests\napp.exception(Exception.class) { e, ctx -> ... } // runs if uncaught Exception\napp.error(404) { ctx -> ... } // runs if status is 404 (after all other handlers)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty in Javalin 6\nDESCRIPTION: Demonstrates the new Jetty configuration approach in Javalin 6 focusing on modifying existing Jetty objects rather than replacing them.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.jetty.defaultHost = \"localhost\"; // set the default host for Jetty\n    config.jetty.defaultPort = 1234; // set the default port for Jetty\n    config.jetty.threadPool = new ThreadPool(); // set the thread pool for Jetty\n    config.jetty.multipartConfig = new MultipartConfig(); // set the multipart config for Jetty\n    config.jetty.modifyJettyWebSocketServletFactory(factory -> {}); // modify the JettyWebSocketServletFactory\n    config.jetty.modifyServer(server -> {}); // modify the Jetty Server\n    config.jetty.modifyServletContextHandler(handler -> {}); // modify the ServletContextHandler (you can set a SessionHandler here)\n    config.jetty.modifyHttpConfiguration(httpConfig -> {}); // modify the HttpConfiguration\n    config.jetty.addConnector((server, httpConfig) -> new ServerConnector(server)); // add a connector to the Jetty Server\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.jetty.defaultHost = \"localhost\" // set the default host for Jetty\n    config.jetty.defaultPort = 1234 // set the default port for Jetty\n    config.jetty.threadPool = ThreadPool() // set the thread pool for Jetty\n    config.jetty.multipartConfig = MultipartConfig() // set the multipart config for Jetty\n    config.jetty.modifyJettyWebSocketServletFactory { factory -> } // modify the JettyWebSocketServletFactory\n    config.jetty.modifyServer { server -> } // modify the Jetty Server\n    config.jetty.modifyServletContextHandler { handler -> } // modify the ServletContextHandler (you can set a SessionHandler here)\n    config.jetty.modifyHttpConfiguration { httpConfig -> } // modify the HttpConfiguration\n    config.jetty.addConnector { server, httpConfig -> ServerConnector(server) } // add a connector to the Jetty Server\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Exception and Error Mapping in Java\nDESCRIPTION: Demonstrates how to combine exception mapping and error mapping in Javalin using Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_23\n\nLANGUAGE: java\nCODE:\n```\napp.exception(FileNotFoundException.class, (e, ctx) -> {\n    ctx.status(404);\n}).error(404, ctx -> {\n    ctx.result(\"Generic 404 message\")\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters in Javalin (Kotlin)\nDESCRIPTION: Demonstrates how to validate query parameters using Javalin's Validator class in Kotlin. It shows examples of validating different data types, applying checks, and using default values.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n// Query Parameters\n// example url: /example?exampleId=123&color=blue&size=1&ts=1584647077000\nval color = ctx.queryParam(\"color\") // blue\nval exampleId = ctx.queryParam<Int>(\"exampleId\").get(); // 123\nval size = ctx.queryParam<Int>(\"size\").check({ it > 4 }).get(); // exception\nval qty = ctx.queryParam<Int>(\"qty\", \"12\").get(); // uses default value 12\nval instant = ctx.queryParam<Instant>(\"ts\").get();\n```\n\n----------------------------------------\n\nTITLE: JavalinVue Component Example with Path Parameters\nDESCRIPTION: Example of a Vue.js component for JavalinVue that accesses Javalin path parameters. This demonstrates how to create Vue components that can work with Javalin's routing system.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_71\n\nLANGUAGE: markup\nCODE:\n```\n<template id=\"thread-view\">\n    <div>{{ $javalin.pathParams[\"user\"] }}</div>\n</template>\n<script>\n    Vue.component(\"thread-view\", {\n        template: \"#thread-view\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: WebSocket Event Handlers in Javalin\nDESCRIPTION: Lists the five supported WebSocket events in Javalin: onConnect, onError, onClose, onMessage, and onBinaryMessage.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nws.onConnect(WsConnectContext)\nws.onError(WsErrorContext)\nws.onClose(WsCloseContext)\nws.onMessage(WsMessageContext)\nws.onBinaryMessage(WsBinaryMessageContext)\n```\n\n----------------------------------------\n\nTITLE: Declaring Javalin 4.0.0.RC1 Dependency in Maven POM\nDESCRIPTION: Specifies the Maven dependency for Javalin 4.0.0.RC1. This XML snippet shows how to include the Javalin library in a Maven project's pom.xml file.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-07-28-javalin-4.0.0-rc.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin</artifactId>\n    <version>4.0.0.RC1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Comprehensive WebSocket Endpoint Configuration in Javalin\nDESCRIPTION: Shows a complete WebSocket endpoint implementation with all event handlers: connect, message, binary message, close, and error. The example includes JSON message handling with automatic conversion.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/{path}\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n    ws.onMessage(ctx -> {\n        User user = ctx.messageAsClass(User.class); // convert from json\n        ctx.send(user); // convert to json and send back\n    });\n    ws.onBinaryMessage(ctx -> System.out.println(\"Message\"))\n    ws.onClose(ctx -> System.out.println(\"Closed\"));\n    ws.onError(ctx -> System.out.println(\"Errored\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/{path}\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n    ws.onMessage { ctx ->\n        val user = ctx.messageAsClass<User>(); // convert from json\n        ctx.send(user); // convert to json and send back\n    }\n    ws.onBinaryMessage { ctx -> println(\"Message\") }\n    ws.onClose { ctx -> println(\"Closed\") }\n    ws.onError { ctx -> println(\"Errored\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty in Javalin 5\nDESCRIPTION: Shows how Jetty was configured in Javalin 5 using supplier methods for server, session handler, and other components.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.jetty.server(serverSupplier); // set the Jetty Server for Javalin to run on\n    config.jetty.sessionHandler(sessionHandlerSupplier); // set the SessionHandler that Jetty will use for sessions\n    config.jetty.contextHandlerConfig(contextHandlerConsumer); // configure the ServletContextHandler Jetty runs on\n    config.jetty.wsFactoryConfig(jettyWebSocketServletFactoryConsumer); // configure the JettyWebSocketServletFactory\n    config.jetty.httpConfigurationConfig(httpConfigurationConsumer); // configure the HttpConfiguration of Jetty\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.jetty.server(serverSupplier) // set the Jetty Server for Javalin to run on\n    config.jetty.sessionHandler(sessionHandlerSupplier) // set the SessionHandler that Jetty will use for sessions\n    config.jetty.contextHandlerConfig(contextHandlerConsumer) // configure the ServletContextHandler Jetty runs on\n    config.jetty.wsFactoryConfig(jettyWebSocketServletFactoryConsumer) // configure the JettyWebSocketServletFactory\n    config.jetty.httpConfigurationConfig(httpConfigurationConsumer) // configure the HttpConfiguration of Jetty\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Javalin Handler\nDESCRIPTION: This snippet demonstrates how to use the new RateLimit utility class to limit requests per time unit for a specific endpoint. The implementation is IP and Handler based, with independent rate limiters for different endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-01-01-javalin-3.7.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/\") { ctx ->\n    RateLimit(ctx).requestPerTimeUnit(5, TimeUnit.MINUTES) // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Development Logging in Javalin\nDESCRIPTION: Shows how to enable extensive development logging for HTTP and WebSocket communications.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_48\n\nLANGUAGE: java\nCODE:\n```\napp.create(config -> {\n    config.enableDevLogging(); // enable extensive development logging for http and websocket\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.create { config ->\n    config.enableDevLogging() // enable extensive development logging for http and websocket\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Structure and Server Settings\nDESCRIPTION: Demonstrates setting up routes and server configuration including CORS, static files, and RESTful endpoint structure.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-08-19-javalin-2.0.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create()\n    .enableCorsForAllOrigins()\n    .enableStaticFiles(\"/public\")\n    .enableStaticFiles(\"uploads\", Location.EXTERNAL)\n    .start(port);\n\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAll);\n        post(UserController::create);\n        path(\":user-id\"(() -> {\n            get(UserController::getOne);\n            patch(UserController::update);\n            delete(UserController::delete);\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create().apply {\n    enableCorsForAllOrigins()\n    enableStaticFiles(\"/public\")\n    enableStaticFiles(\"uploads\", Location.EXTERNAL)\n}.start(port)\n\napp.routes {\n    path(\"users\") {\n        get(UserController::getAll)\n        post(UserController::create)\n        path(\":user-id\") {\n            get(UserController::getOne)\n            patch(UserController::update)\n            delete(UserController::delete)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Javalin\nDESCRIPTION: This snippet demonstrates how to process uploaded files in Javalin using the ctx.uploadedFiles() method, which provides access to file content, filename, and other properties of the uploaded files.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_49\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(uploadedFile ->\n        FileUtil.streamToFile(uploadedFile.content(), \"upload/\" + uploadedFile.filename()));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { uploadedFile ->\n        FileUtil.streamToFile(uploadedFile.content(), \"upload/${uploadedFile.filename()}\")\n    }\n}\n```\n\nLANGUAGE: markup\nCODE:\n```\n<form method=\"post\" action=\"/upload\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"files\" multiple>\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Instance in Kotlin\nDESCRIPTION: Shows how to configure a Javalin application in Kotlin, including HTTP settings, routing behavior, and static file handling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create { config ->\n    config.http.generateEtags = true\n    config.http.asyncTimeout = 10_000L\n    config.routing.ignoreTrailingSlashes = true\n    config.staticFiles.add(\"/public\", Location.CLASSPATH)\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Handlers in Javalin 2.X\nDESCRIPTION: Examples of before-handlers which run before every request. These can be scoped to specific paths or run globally and function similar to filters, interceptors, or middleware in other frameworks.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.before(\"/some-path/*\", ctx -> {\n    // runs before all request to /some-path/*\n});\napp.before(ctx -> {\n    // calls before(\"/*\", handler)\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.before(\"/some-path/*\") { ctx ->\n    // runs before all request to /some-path/*\n}\napp.before { ctx ->\n    // calls before(\"/*\", handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Request Body in Javalin (Java)\nDESCRIPTION: Demonstrates how to validate the request body in Javalin using Java. It shows an example of validating a custom object type from the request body.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n// Body Validation\nMyObject myObject = ctx.bodyValidator(MyObject.class).get();\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Exception Mapping in Javalin\nDESCRIPTION: Demonstrates how to handle exceptions in WebSocket handlers using wsException() method. Similar to regular exception mapping, it allows handling specific exception types with precedence over general exception handlers.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_37\n\nLANGUAGE: java\nCODE:\n```\napp.wsException(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.wsException(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsException(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.wsException(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in Path Handlers\nDESCRIPTION: Examples of using wildcard patterns in route paths to match multiple URLs. Shows how to access the matched path information.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/path/*\", ctx -> { // will match anything starting with /path/\n    ctx.result(\"You are here because \" + ctx.path() + \" matches \" + ctx.matchedPath());\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/path/*\") { ctx -> // will match anything starting with /path/\n    ctx.result(\"You are here because \" + ctx.path() + \" matches \" + ctx.matchedPath())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Localizer Class in Java\nDESCRIPTION: Creates a Localizer class that loads localization strings from a ResourceBundle and provides methods to retrieve localized messages with optional formatting.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage app;\n\nimport java.text.MessageFormat;\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\npublic class Localizer {\n\n    private final ResourceBundle bundle;\n\n    public Localizer(Locale locale) {\n        bundle = ResourceBundle.getBundle(\"localization\", locale);\n    }\n\n    public String localize(String key) {\n        return bundle.getString(key);\n    }\n\n    public String localize(String key, Object ... params) {\n        return MessageFormat.format(localize(key), params);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoints and Continuous Request Simulation Loop\nDESCRIPTION: Setting up different API endpoints with varying behaviors (normal response, slow response, redirects, error responses) and an infinite loop to continuously generate test traffic for monitoring.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-12-02-javalin-prometheus-example.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nrouter.apiBuilder(() -> { // available on config.router inside Javalin.create()\n    get(\"/1\", ctx -> ctx.result(\"Hello World\"));\n    get(\"/2\", ctx -> {\n        Thread.sleep((long) (Math.random() * 2000));\n        ctx.result(\"Slow Hello World\");\n    });\n    get(\"/3\", ctx -> ctx.redirect(\"/2\"));\n    get(\"/4\", ctx -> ctx.status(400));\n    get(\"/5\", ctx -> ctx.status(500));\n});\n\nwhile (true) {\n    spawnRandomRequests();\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nrouter.apiBuilder { // available on config.router inside Javalin.create()\n    get(\"/1\") { ctx -> ctx.result(\"Hello World\") }\n    get(\"/2\") { ctx ->\n        Thread.sleep((Math.random() * 2000).toLong())\n        ctx.result(\"Slow Hello World\")\n    }\n    get(\"/3\") { ctx -> ctx.redirect(\"/2\") }\n    get(\"/4\") { ctx -> ctx.status(400) }\n    get(\"/5\") { ctx -> ctx.status(500) }\n}\n\nwhile (true) {\n    spawnRandomRequests()\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Exception and Error Mapping in Javalin\nDESCRIPTION: Examples demonstrating how to use exception and error mapping together. Maps FileNotFoundException to a 404 status, then applies generic error handler for all 404s.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_34\n\nLANGUAGE: java\nCODE:\n```\napp.exception(FileNotFoundException.class, (e, ctx) -> {\n    ctx.status(404);\n}).error(404, ctx -> {\n    ctx.result(\"Generic 404 message\")\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(FileNotFoundException::class.java) { e, ctx ->\n    ctx.status(404)\n}.error(404) { ctx ->\n    ctx.result(\"Generic 404 message\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handler with Content Type in Javalin - Kotlin\nDESCRIPTION: Demonstrates the new simplified error handling syntax in Javalin 3.3.0 that allows specifying content-type for error handlers. This example shows how to set up a custom 404 error page handler for HTML responses.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2019-07-28-javalin-3.3.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\napp.error(404, \"html\", my404PageHandler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Logging in Javalin\nDESCRIPTION: Shows how to set up HTTP request logging using config.requestLogger(). The logger receives the request context and processing time in milliseconds.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.requestLogger((ctx, ms) -> {\n        // log things here\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.requestLogger { ctx, ms ->\n        // log things here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Route Handling in Javalin\nDESCRIPTION: Demonstrates basic GET route handling and after-middleware using Javalin's Context approach. Shows how to set response content using the context object.\nSOURCE: https://github.com/javalin/website/blob/master/pages/comparison-to-spark.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njavalin.get(\"/path\", ctx -> ctx.result(\"Hello, World!\"));\njavalin.after(\"/path\", ctx -> ctx.result(\"Actually, nevermind...\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dynamic Single Page Handler in Javalin\nDESCRIPTION: Shows how to use a Handler to serve single page applications dynamically instead of using a static file. This approach allows generating HTML content programmatically for SPA routes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nconfig.spaRoot.addHandler(\"/root\",  ctx -> {\n    ctx.html(...);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Server\nDESCRIPTION: Comprehensive configuration options for Javalin server including content types, CORS, static files, debugging, and other server settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create() // create has to be called first\n    .attribute(class, object) // register an app attribute - since 2.3.0\n    .attribute(class) // retrieve an app attribute - since 2.3.0\n    .contextPath(\"/context-path\") // set a context path (default is \"/\")\n    .dontIgnoreTrailingSlashes() // treat '/test' and '/test/' as different URLs\n    .defaultContentType(string) // set a default content-type for responses\n    .disableStartupBanner() // remove the javalin startup banner from logs\n    .enableCaseSensitiveUrls() // allow urls like '/camelCasedUrl' and match on case\n    .enableCorsForOrigin(\"origin\") // enables cors for the specified origin(s)\n    .enableAutogeneratedEtags() // auto-generates etags for get-requests\n    .enableDebugLogging() // enable extensive debug logging\n    .enableMicrometer() // enable micrometer support - since 2.8.0\n    .enableRouteOverview(\"/path\") // render a HTML page showing all mapped routes\n    .enableSinglePageMode(\"path\", \"filePath\") // catch 404s and return file-content as response body\n    .enableStaticFiles(\"/public\") // enable static files (opt. second param Location.CLASSPATH/Location.EXTERNAL)\n    .enableWebJars() // enables webjars at /webjars/name/version/file.ext\n    .disableDynamicGzip() // don't gzip any dynamic responses (static files are still gzipped)\n    .maxBodySizeForRequestCache(long) // set max body size for request cache\n    .port(port) // set the port\n    .register(extension) // register extension - since 2.5.0\n    .requestLogger( ... ) // see section below\n    .server( ... ) // see section below\n    .sessionHandler( ... ) // see section below\n    .start(); // start the server (has to be called last)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create().apply { // create has to be called first\n    attribute(class, object) // register an app attribute - since 2.3.0\n    attribute(class) // retrieve an app attribute - since 2.3.0\n    contextPath(\"/context-path\") // set a context path (default is \"/\")\n    dontIgnoreTrailingSlashes() // treat '/test' and '/test/' as different URLs\n    defaultContentType(string) // set a default content-type for responses\n    disableStartupBanner() // remove the javalin startup banner from logs\n    enableAutogeneratedEtags() // auto-generates etags for get-requests\n    enableCaseSensitiveUrls() // allow urls like '/camelCasedUrl' and match on case\n    enableCorsForOrigin(\"origin\") // enables cors for the specified origin(s)\n    enableDebugLogging() // enable extensive debug logging\n    enableMicrometer() // enable micrometer support - since 2.8.0\n    enableRouteOverview(\"/path\") // render a HTML page showing all mapped routes\n    enableSinglePageMode(\"path\", \"filePath\") // catch 404s and return file-content as response body\n    enableStaticFiles(\"/public\") // enable static files (opt. second param Location.CLASSPATH/Location.EXTERNAL)\n    enableWebJars() // enables webjars at /webjars/name/version/file.ext\n    disableDynamicGzip() // don't gzip any dynamic responses (static files are still gzipped)\n    maxBodySizeForRequestCache(long) // set max body size for request cache\n    port(port) // set the port\n    register(extension) // register extension - since 2.5.0\n    requestLogger( ... ) // see section below\n    server( ... ) // see section below\n    sessionHandler( ... ) // see section below\n}.start() // start the server (has to be called last)\n```\n\n----------------------------------------\n\nTITLE: Custom Converter Registration\nDESCRIPTION: Demonstrates how to register custom converters for non-included classes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nJavalinValidation.register(Instant.class, v -> Instant.ofEpochMilli(v.toLong());\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalinValidation.register(Instant::class.java) { Instant.ofEpochMilli(it.toLong()) }\n```\n\n----------------------------------------\n\nTITLE: WsContext Methods in Javalin\nDESCRIPTION: Lists the available methods on the WsContext object for handling WebSocket requests, including sending messages and accessing request parameters.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nctx.matchedPath()            // get the path used to match this request, ex \"/path/:param\"\n\nctx.send(object)             // send an object as JSON (string message)\nctx.send(string)             // send a string message\nctx.send(byteBuffer)         // send a bytebuffer message\n\nctx.queryString()            // get the query string\nctx.queryParamMap()          // get a map of the query parameters\nctx.queryParams(key)         // get query parameters by key\nctx.queryParam(key)          // get query parameter by key\nctx.queryParam(key, default) // get query parameter (or default value)\nctx.queryParam(key, class)   // get query parameter as class\n\nctx.pathParamMap()           // get path parameter map\nctx.pathParam(key)           // get path parameter\nctx.pathParam(key, class)    // get path parameter as class\n\nctx.host()                   // get the host\n\nctx.header(key)              // get request header\nctx.headerMap()              // get a map of the request headers\n\nctx.cookie(key)              // get request cookie\nctx.cookieMap()              // get a map of all request cookies\n\nctx.attribute(key, value)    // set request attribute\nctx.attribute(key)           // get request attribute\nctx.attributeMap()           // get a map of request attributes\n\nctx.sessionAttribute(key)    // get request session attribute (from when WebSocket upgrade was performed)\nctx.sessionAttributeMap()    // get a map of session attributes (from when WebSocket upgrade was performed)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Logger in Javalin\nDESCRIPTION: Demonstrates how to set up a WebSocket logger in Javalin that can log WebSocket events including onMessage, onConnect, onError, and onClose. The logger runs after the WebSocket handler for the endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.requestLogger.ws(ws -> {\n        ws.onMessage(ctx -> {\n            System.out.println(\"Received: \" + ctx.message());\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.requestLogger.ws(ws -> {\n        ws.onMessage { ctx ->\n            println(\"Received: \" + ctx.message());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Route with MithrilComponent in Javalin\nDESCRIPTION: Java code showing how to register a route in Javalin that renders a Mithril component. Maps the root path to display the HelloWorld component through the JavalinMithril plugin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin\nimport io.javalin.plugin.rendering.mithril.JavalinMithril;\nimport io.javalin.plugin.rendering.mithril.MithrilComponent;\n\npublic void start(){\n    app = Javalin.create();\n    app.config.enableWebjars();\n    JavalinMithril.configure(config -> {\n            config.isDev(true);\n    });\n\n    app.get(\"/\", new MithrilComponent(\"io.javalin.mithril.demo.HelloWorld\"));\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Plugin Integration in Kotlin\nDESCRIPTION: Shows how to use Javalin's OpenAPI plugin to document API endpoints with annotations, including request details, response specifications, and metadata.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@OpenApi(\n    path = \"/api/v1/users\",\n    methods = [HttpMethod.POST],\n    summary = \"Register a user\",\n    tags = [\"Users\"],\n    requestBody = OpenApiRequestBody(\n        content = [OpenApiContent(RegistrationRequest::class)],\n        required = true,\n        description = \"Data about the user\"\n    ),\n    responses = [\n        OpenApiResponse(status = \"200\", ...),\n        OpenApiResponse(status = \"401\", ...),\n    ]\n)\nfun register(context: Context) {\n    // handler code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Class Usage Examples\nDESCRIPTION: Demonstrates various ways to use Javalin's Validator class for different parameter types.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nctx.queryParamAsClass(\"paramName\", MyClass.class)   // creates a Validator<MyClass> for the value of queryParam(\"paramName\")\nctx.formParamAsClass(\"paramName\", MyClass.class)    // creates a Validator<MyClass> for the value of formParam(\"paramName\")\nctx.pathParamAsClass(\"paramName\", MyClass.class)    // creates a Validator<MyClass> for the value of pathParam(\"paramName\")\nctx.headerAsClass(\"headerName\", MyClass.class)      // creates a Validator<MyClass> for the value of header(\"paramName\")\nctx.bodyValidator(MyClass.class)                    // creates a Validator<MyClass> for the value of body()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.queryParamAsClass<MyClass>(\"paramName\")         // creates a Validator<MyClass> for the value of queryParam(\"paramName\")\nctx.formParamAsClass<MyClass>(\"paramName\")          // creates a Validator<MyClass> for the value of formParam(\"paramName\")\nctx.pathParamAsClass<MyClass>(\"paramName\")          // creates a Validator<MyClass> for the value of pathParam(\"paramName\")\nctx.headerAsClass<MyClass>(\"headerName\")            // creates a Validator<MyClass> for the value of header(\"paramName\")\nctx.bodyValidator<MyClass>()                        // creates a Validator<MyClass> for the value of body()\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Settings in Javalin\nDESCRIPTION: This snippet shows how to configure various HTTP-related settings in Javalin, including ETag generation, 405 vs 404 responses, max request size, default content type, and async timeout.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.http.generateEtags = booleanValue;     // if javalin should generate etags for dynamic responses (not static files)\n    config.http.prefer405over404 = booleanValue;  // return 405 instead of 404 if path is mapped to different HTTP method\n    config.http.maxRequestSize = longValue;       // the max size of request body that can be accessed without using using an InputStream\n    config.http.defaultContentType = stringValue; // the default content type\n    config.http.asyncTimeout = longValue;         // timeout in milliseconds for async requests (0 means no timeout)\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.http.generateEtags = booleanValue     // if javalin should generate etags for dynamic responses (not static files)\n    config.http.prefer405over404 = booleanValue  // return 405 instead of 404 if path is mapped to different HTTP method\n    config.http.maxRequestSize = longValue       // the max size of request body that can be accessed without using using an InputStream\n    config.http.defaultContentType = stringValue //  the default content type\n    config.http.asyncTimeout = longValue         // timeout in milliseconds for async requests (0 means no timeout)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Engines in Javalin (Kotlin)\nDESCRIPTION: Demonstrates how to configure various template engines supported by Javalin, including Thymeleaf, Velocity, Freemarker, Mustache, Jtwig, Pebble, and Commonmark.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_64\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalinThymeleaf.configure(templateEngine)\nJavalinVelocity.configure(velocityEngine)\nJavalinFreemarker.configure(configuration)\nJavalinMustache.configure(mustacheFactory)\nJavalinJtwig.configure(configuration)\nJavalinPebble.configure(configuration)\nJavalinCommonmark.configure(htmlRenderer, markdownParser)\n```\n\n----------------------------------------\n\nTITLE: File Upload Handling\nDESCRIPTION: Demonstrates how to handle file uploads in Javalin using both server-side handlers and HTML form configuration.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_48\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(uploadedFile ->\n        FileUtil.streamToFile(uploadedFile.content(), \"upload/\" + uploadedFile.filename()));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { uploadedFile ->\n        FileUtil.streamToFile(uploadedFile.content(), \"upload/${uploadedFile.filename()}\")\n    }\n}\n```\n\nLANGUAGE: markup\nCODE:\n```\n<form method=\"post\" action=\"/upload\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"files\" multiple>\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing After Handlers in Javalin 2.X\nDESCRIPTION: Examples of after-handlers which run after every request, even if an exception occurred. These can be scoped to specific paths or run globally, similar to filters or interceptors in other frameworks.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\napp.after(\"/some-path/*\", ctx -> {\n    // runs after all request to /some-path/*\n});\n\napp.after(ctx -> {\n    // run after every request\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.after(\"/some-path/*\") { ctx ->\n    // runs after all request to /some-path/*\n}\n\napp.after { ctx ->\n    // run after every request\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Single Page Handler in Javalin\nDESCRIPTION: Shows how to use a Handler to serve a single page root dynamically in Javalin, as an alternative to serving a static file.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nconfig.addSinglePageHandler(\"/root\",  ctx -> {\n    ctx.html(...);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Javalin Backend for Form Handling\nDESCRIPTION: Java implementation of a Javalin backend that handles form submissions for a reservation system. The app processes POST requests to make reservations and GET requests to check reservations.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-07-28-javalin-html-forms-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\nimport io.javalin.http.staticfiles.Location;\nimport io.javalin.util.FileUtil;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class JavalinHtmlFormsExampleApp {\n\n    private static final Map<String, String> reservations = new HashMap<>() {{\n        put(\"saturday\", \"No reservation\");\n        put(\"sunday\", \"No reservation\");\n    }};\n\n    public static void main(String[] args) {\n\n        Javalin app = Javalin.create(config -> {\n            config.staticFiles.add(\"/public\", Location.CLASSPATH);\n        });\n\n        app.post(\"/make-reservation\", ctx -> {\n            reservations.put(ctx.formParam(\"day\"), ctx.formParam(\"time\"));\n            ctx.html(\"Your reservation has been saved\");\n        });\n\n        app.get(\"/check-reservation\", ctx -> {\n            ctx.html(reservations.get(ctx.queryParam(\"day\")));\n        });\n\n        app.start();\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Template Rendering in Javalin\nDESCRIPTION: Shows how to render templates using various template engines including Thymeleaf, Velocity, Freemarker, Mustache, and Jtwig.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nctx.renderThymeleaf(\"/templateFile\", model(\"firstName\", \"John\", \"lastName\", \"Doe\"))\nctx.renderVelocity(\"/templateFile\", model(\"firstName\", \"John\", \"lastName\", \"Doe\"))\nctx.renderFreemarker(\"/templateFile\", model(\"firstName\", \"John\", \"lastName\", \"Doe\"))\nctx.renderMustache(\"/templateFile\", model(\"firstName\", \"John\", \"lastName\", \"Doe\"))\nctx.renderJtwig(\"/templateFile\", model(\"firstName\", \"John\", \"lastName\", \"Doe\"))\nctx.renderMarkdown(\"/markdownFile\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.renderThymeleaf(\"/templateFile\", mapOf(\"firstName\" to \"John\", \"lastName\" to \"Doe\"))\nctx.renderVelocity(\"/templateFile\", mapOf(\"firstName\" to \"John\", \"lastName\" to \"Doe\"))\nctx.renderFreemarker(\"/templateFile\", mapOf(\"firstName\" to \"John\", \"lastName\" to \"Doe\"))\nctx.renderMustache(\"/templateFile\", mapOf(\"firstName\" to \"John\", \"lastName\" to \"Doe\"))\nctx.renderJtwig(\"/templateFile\", mapOf(\"firstName\" to \"John\", \"lastName\" to \"Doe\"))\nctx.renderMarkdown(\"/markdownFile\")\n```\n\n----------------------------------------\n\nTITLE: Mapping Routes to Vue Components in JavalinVue\nDESCRIPTION: Example of mapping URL paths to Vue components in Javalin using the VueComponent class, which connects backend routes to frontend Vue components.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_72\n\nLANGUAGE: java\nCODE:\n```\nget(\"/messages\",        VueComponent(\"inbox-view\"))\nget(\"/messages/{user}\", VueComponent(\"thread-view\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing GSON JSON Mapper in Javalin\nDESCRIPTION: Shows how to implement a custom JSON mapper using GSON instead of the default Jackson mapper.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_54\n\nLANGUAGE: java\nCODE:\n```\nGson gson = new GsonBuilder().create();\nJsonMapper gsonMapper = new JsonMapper() {\n    @Override\n    public String toJsonString(@NotNull Object obj, @NotNull Type type) {\n        return gson.toJson(obj, type);\n    }\n\n    @Override\n    public <T> T fromJsonString(@NotNull String json, @NotNull Type targetType) {\n        return gson.fromJson(json, targetType);\n    }\n};\nJavalin app = Javalin.create(config -> config.jsonMapper(gsonMapper)).start(7070);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval gson = GsonBuilder().create()\n\nval gsonMapper = object : JsonMapper {\n\n    override fun <T : Any> fromJsonString(json: String, targetType: Type): T =\n        gson.fromJson(json, targetType)\n\n    override fun toJsonString(obj: Any, type: Type) =\n        gson.toJson(obj)\n\n}\n\nval app = Javalin.create { it.jsonMapper(gsonMapper) }.start(7070)\n```\n\n----------------------------------------\n\nTITLE: Creating Javalin App with Protobuf and JSON Endpoints\nDESCRIPTION: Main class to set up a Javalin application with two endpoints: one serving protobuf data and another serving JSON data. It demonstrates how to configure Javalin, set up routes, and handle exceptions.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-03-25-serving-protobuf-with-javalin.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage app;\n\nimport app.model.dao.FakeDao;\nimport app.model.objects.SensorData;\nimport io.javalin.Javalin;\nimport io.javalin.core.JavalinConfig;\nimport io.javalin.http.Handler;\n\nimport static app.model.mappers.RouteMapper.getSensorDataResponse;\n\npublic class MyJavalinRunner {\n\n    public static void main(String[] args) {\n\n        Javalin app = Javalin.create(JavalinConfig::enableCorsForAllOrigins).start();\n\n        app.get(\"/pbuf\", handleServeProtobuf);\n        app.get(\"/json\", handleServeJSON);\n\n        app.exception(Exception.class, (e, ctx) -> {\n            e.printStackTrace();\n            ctx.status(500);\n        });\n\n    }\n\n    public static Handler handleServeProtobuf = ctx -> {\n        // Here's where you'd get your SensorData from your DB or device, etc.\n        FakeDao dao = new FakeDao();\n        SensorData sData = dao.getSensorDataFromVehicleDB();\n\n        ctx.status(200);\n        ctx.contentType(\"application/x-protobuf\");\n        ctx.result(getSensorDataResponse(sData));\n    };\n\n    public static Handler handleServeJSON = ctx -> {\n        // Here's where you'd get your SensorData from your DB or device, etc.\n        FakeDao dao = new FakeDao();\n        SensorData sData = dao.getSensorDataFromVehicleDB();\n\n        ctx.status(200);\n        ctx.json(sData);\n    };\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin SSL Plugin Dependency with Leiningen\nDESCRIPTION: Leiningen dependency configuration for adding the Javalin SSL plugin to a project.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n[io.javalin.community.ssl/ssl-plugin \"{{site.javalinversion}}\"]\n```\n\n----------------------------------------\n\nTITLE: Server-Sent Events Implementation\nDESCRIPTION: Demonstrates how to implement server-sent events (SSE) in Javalin, including client management and event handling.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nQueue<SseClient> clients = new ConcurrentLinkedQueue<SseClient>();\n\napp.sse(\"/sse\", client -> {\n    client.keepAlive();\n    client.onClose(() - > clients.remove(client));\n    clients.add(client);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval clients = ConcurrentLinkedQueue<SseClient>()\n\napp.sse(\"/sse\") { client ->\n    client.keepAlive()\n    client.onClose { clients.remove(client) }\n    clients.add(client)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Javalin Backend for Form Handling\nDESCRIPTION: Kotlin implementation of a Javalin backend that handles form submissions for a reservation system. The app processes POST requests to make reservations and GET requests to check reservations.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-07-28-javalin-html-forms-example.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\nimport io.javalin.http.staticfiles.Location\nimport io.javalin.util.FileUtil\n\nprivate val reservations = mutableMapOf<String?, String?>(\n\"saturday\" to \"No reservation\",\n\"sunday\" to \"No reservation\"\n)\n\nfun main() {\n\n    val app = Javalin.create {\n        it.staticFiles.add(\"/public\", Location.CLASSPATH)\n    }\n\n    app.post(\"/make-reservation\") { ctx ->\n        reservations[ctx.formParam(\"day\")] = ctx.formParam(\"time\")\n        ctx.html(\"Your reservation has been saved\")\n    }\n\n    app.get(\"/check-reservation\") { ctx ->\n        ctx.html(reservations[ctx.queryParam(\"day\")]!!)\n    }\n\n    app.start(7070)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Dependencies in Maven\nDESCRIPTION: XML configuration for adding the Javalin GraphQL plugin dependency to a Maven project.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin-graphql</artifactId>\n    <version>{{site.javalinversion}}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression in Javalin\nDESCRIPTION: This snippet shows how to configure compression settings in Javalin, including custom compression strategies, Gzip, and Brotli compression.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.compression.custom(compressionStrategy);       // set a custom CompressionStrategy\n    config.compression.brotliAndGzip(gzipLvl, brotliLvl); // use both gzip and brotli (optional lvls)\n    config.compression.gzipOnly(gzipLvl);                 // use gzip only (optional lvl)\n    config.compression.brotliOnly(brotliLvl);             // use brotli only (optional lvl)\n    config.compression.none();                            // disable compression\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.compression.custom(compressionStrategy)       // set a custom CompressionStrategy\n    config.compression.brotliAndGzip(gzipLvl, brotliLvl) // use both gzip and brotli (optional lvls)\n    config.compression.gzipOnly(gzipLvl)                 // use gzip only (optional lvl)\n    config.compression.brotliOnly(brotliLvl)             // use brotli only (optional lvl)\n    config.compression.none()                            // disable compression\n}\n```\n\n----------------------------------------\n\nTITLE: Using Javalin Context API Methods in Java\nDESCRIPTION: Comprehensive list of Context methods for accessing request data and manipulating responses in Javalin. This includes methods for handling request parameters, body content, attributes, headers, cookies, and response manipulation.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// request methods:\nctx.request();                      // get underlying HttpServletRequest\nctx.anyFormParamNull(\"k1\", \"k2\");   // returns true if any form-param is null\nctx.anyQueryParamNull(\"k1\", \"k2\");  // returns true if any query-param is null\nctx.body();                         // get the request body as string\nctx.bodyAsBytes();                  // get the request body as byte-array\nctx.bodyAsClass(clazz);             // convert json body to object\nctx.formParam(\"key\");               // get form param\nctx.formParams(\"key\");              // get form param with multiple values\nctx.formParamMap();                 // get all form param key/values as map\nctx.param(\"key\");                   // get a path-parameter, ex \"/:id\" -> param(\"id\")\nctx.paramMap();                     // get all param key/values as map\nctx.splat(0);                       // get splat by nr, ex \"/*\" -> splat(0)\nctx.splats();                       // get array of splat-values\nctx.attribute(\"key\", \"value\");      // set a request attribute\nctx.attribute(\"key\");               // get a request attribute\nctx.attributeMap();                 // get all attribute key/values as map\nctx.basicAuthCredentials()          // get username and password used for basic-auth\nctx.contentLength();                // get request content length\nctx.contentType();                  // get request content type\nctx.cookie(\"key\");                  // get cookie by name\nctx.cookieMap();                    // get all cookie key/values as map\nctx.header(\"key\");                  // get a header\nctx.headerMap();                    // get all header key/values as map\nctx.host();                         // get request host\nctx.ip();                           // get request up\nctx.isMultipart();                  // check if request is multipart\nctx.mapFormParams(\"k1\", \"k2\");      // map form params to their values, returns null if any form param is missing\nctx.mapQueryParams(\"k1\", \"k2\");     // map query params to their values, returns null if any query param is missing\nctx.matchedPath();                  // get matched path, ex \"/path/:param\"\nctx.next();                         // pass the request to the next handler\nctx.path();                         // get request path\nctx.port();                         // get request port\nctx.protocol();                     // get request protocol\nctx.queryParam(\"key\");              // get query param\nctx.queryParams(\"key\");             // get query param with multiple values\nctx.queryParamMap();                // get all query param key/values as map\nctx.queryString();                  // get request query string\nctx.method();                       // get request method\nctx.scheme();                       // get request scheme\nctx.sessionAttribute(\"foo\", \"bar\"); // set session-attribute \"foo\" to \"bar\"\nctx.sessionAttribute(\"foo\");        // get session-attribute \"foo\"\nctx.sessionAttributeMap();          // get all session attributes as map\nctx.uploadedFile(\"key\");            // get file from multipart form\nctx.uploadedFiles(\"key\");           // get files from multipart form\nctx.uri();                          // get request uri\nctx.url();                          // get request url\nctx.userAgent();                    // get request user agent\n\n// response methods:\nctx.response();                     // get underlying HttpServletResponse\nctx.result(\"result\");               // set result (string)\nctx.result(inputStream);            // set result (stream)\nctx.result(future);                 // set result (future)\nctx.resultString();                 // get response result (string)\nctx.resultStream();                 // get response result (stream)\nctx.resultFuture();                 // get response result (future)\nctx.charset(\"charset\");             // set response character encoding\nctx.header(\"key\", \"value\");         // set response header\nctx.html(\"body html\");              // set result and html content type\nctx.json(object);                   // set result with object-as-json\nctx.redirect(\"/location\");          // redirect to location\nctx.redirect(\"/location\", 302);     // redirect to location with code\nctx.status();                       // get response status\nctx.status(404);                    // set response status\nctx.cookie(\"key\", \"value\");         // set cookie with key and value\nctx.cookie(\"key\", \"value\", 0);      // set cookie with key, value, and maxage\nctx.cookie(cookieBuilder);          // set cookie using cookiebuilder\nctx.removeCookie(\"key\");            // remove cookie by key\nctx.removeCookie(\"/path\", \"key\");   // remove cookie by path and key\n```\n\n----------------------------------------\n\nTITLE: Configuring Multipart Requests in Javalin for Java\nDESCRIPTION: Demonstrates how to configure multipart request handling in Javalin, including setting cache directory, maximum file sizes, and total request size limits.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n  config.jetty.multipartConfig.cacheDirectory(\"c:/temp\"); //where to write files that exceed the in memory limit\n  config.jetty.multipartConfig.maxFileSize(100, SizeUnit.MB); //the maximum individual file size allowed\n  config.jetty.multipartConfig.maxInMemoryFileSize(10, SizeUnit.MB); //the maximum file size to handle in memory\n  config.jetty.multipartConfig.maxTotalRequestSize(1, SizeUnit.GB); //the maximum size of the entire multipart request\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Server Lifecycle Events in Javalin\nDESCRIPTION: Shows how to handle server lifecycle events including server starting, started, failed, stopping and stopped states.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create()\n    .event(EventType.SERVER_STARTING, e -> { ... })\n    .event(EventType.SERVER_STARTED, e -> { ... })\n    .event(EventType.SERVER_START_FAILED, e -> { ... })\n    .event(EventType.SERVER_STOPPING, e -> { ... })\n    .event(EventType.SERVER_STOPPED, e -> { ... });\n\napp.start(); // SERVER_STARTING -> (SERVER_STARTED || SERVER_START_FAILED)\napp.stop(); // SERVER_STOPPING -> SERVER_STOPPED\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create()\n    .event(EventType.SERVER_STARTING, { e -> ... })\n    .event(EventType.SERVER_STARTED, { e -> ... })\n    .event(EventType.SERVER_START_FAILED, { e -> ... })\n    .event(EventType.SERVER_STOPPING, { e -> ... })\n    .event(EventType.SERVER_STOPPED, { e -> ... });\n\napp.start() // SERVER_STARTING -> (SERVER_STARTED || SERVER_START_FAILED)\napp.stop() // SERVER_STOPPING -> SERVER_STOPPED\n```\n\n----------------------------------------\n\nTITLE: Writing Session Attributes in Javalin (Kotlin)\nDESCRIPTION: This Kotlin snippet shows how to write values to a session in a Javalin application. It sets a session attribute named 'my-key' with a string value using Kotlin's lambda syntax.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/write\") { ctx ->\n    // values written to the session will be available on all your instances if you use a session db\n    ctx.sessionAttribute(\"my-key\", \"My value\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using CookieStore for Persistent Data in Java\nDESCRIPTION: This example demonstrates the CookieStore API for storing and retrieving data across requests. The CookieStore provides a convenient way to share information between handlers, requests, or even different servers by serializing data into cookies.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nctx.cookieStore().set(key, value); // store any type of value\nctx.cookieStore().get(key);        // read any type of value\nctx.cookieStore().clear();         // clear the cookie-store\n```\n\n----------------------------------------\n\nTITLE: Exception Mapping in Java\nDESCRIPTION: Demonstrates how to use Javalin's exception mapping feature to handle different types of exceptions in Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\napp.exception(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.exception(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Server Configuration in Javalin\nDESCRIPTION: Demonstrates how to configure a custom Jetty server instance.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_52\n\nLANGUAGE: java\nCODE:\n```\napp.create(config -> {\n    config.server(() -> {\n        Server server = new Server(); // configure this however you want\n        return server;\n    }\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.create { config ->\n    config.server {\n        val server = Server() // configure this however you want\n        server\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logback XML Configuration for Javalin Applications\nDESCRIPTION: Comprehensive Logback configuration file with console and file appenders, including pattern layouts, rolling file policies, and log level settings for Javalin applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- sample logback configuration file -->\n<configuration>\n    <import class=\"ch.qos.logback.core.ConsoleAppender\"/>\n    <import class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"/>\n    <import class=\"ch.qos.logback.core.rolling.RollingFileAppender\"/>\n    <import class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"/>\n\n    <appender name=\"Console\" class=\"ConsoleAppender\">\n        <encoder class=\"PatternLayoutEncoder\">\n            <pattern>%cyan(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%c{20}): %msg%n%throwable</pattern>\n        </encoder>\n    </appender>\n\n    <appender name=\"File\" class=\"RollingFileAppender\">\n        <rollingPolicy class=\"SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern>sample-app.%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <maxHistory>30</maxHistory>\n            <maxFileSize>1MB</maxFileSize>\n            <totalSizeCap>1GB</totalSizeCap>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%d{ISO8601} %-5level [%t] %C{20}: %msg%n%throwable</pattern>\n        </encoder>\n    </appender>\n\n    <root level=\"info\">\n        <appender-ref ref=\"Console\"/>\n        <appender-ref ref=\"File\"/>\n    </root>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Defining RESTful Routes with ApiBuilder in Java\nDESCRIPTION: Example of using the improved ApiBuilder syntax in Java to define RESTful routes for a user resource. The code demonstrates how to organize routes hierarchically without supplying path parameters to verb methods (get, post, etc.).\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-07-07-javalin-0.3.4-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAllUsers);\n        post(UserController::createUser);\n        path(\":id\", () -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring File Renderer in Javalin\nDESCRIPTION: Shows how to configure a custom file renderer for template processing in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_56\n\nLANGUAGE: java\nCODE:\n```\nconfig.fileRenderer((filePath, model, context) -> \"Rendered template\");\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.fileRenderer { filePath, model, context -> \"Rendered template\" }\n```\n\n----------------------------------------\n\nTITLE: Reading Session Attributes in Javalin (Java)\nDESCRIPTION: This Java code demonstrates how to read values from a session in a Javalin application. It retrieves the value of the session attribute 'my-key' as a String.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/read\", ctx -> {\n    // values on the session will be available on all your instances if you use a session db\n    String myValue = ctx.sessionAttribute(\"my-key\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson JSON Mapper in Javalin\nDESCRIPTION: Demonstrates how to configure the default Jackson JSON mapper with custom serialization settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_52\n\nLANGUAGE: java\nCODE:\n```\nconfig.jsonMapper(new JavalinJackson().updateMapper(mapper -> {\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.jsonMapper(JavalinJackson().updateMapper { mapper ->\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Logger in Javalin\nDESCRIPTION: Shows how to set up an HTTP request logger in Javalin that captures the context and processing time for each request. This logger is configured during application creation.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.requestLogger.http((ctx, ms) -> {\n        // log things here\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.requestLogger.http { ctx, ms ->\n        // log things here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Metrics with Micrometer Gauge\nDESCRIPTION: Java code example showing how to create a custom metric using Micrometer's Gauge builder, which in this case reports a random number between 0 and 999.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/micrometer.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.micrometer.core.instrument.Gauge;\n\nGauge\n  .builder(\"myapp_random\", () -> (int) (Math.random() * 1000))\n  .description(\"Random number from My-Application.\")\n  .strongReference(true)\n  .register(registry);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sureness with Default Configuration\nDESCRIPTION: Java code that initializes Sureness with its default configuration which uses the sureness.yml document as the authentication data source.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-04-16-javalin-sureness-example.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    // init sureness default config\n    new DefaultSurenessConfig();\n}\n```\n\n----------------------------------------\n\nTITLE: AsyncCallback Implementation for CompletableFuture in Javalin\nDESCRIPTION: Code showing the full implementation of the ctx.future() method in Javalin, which handles asynchronous request processing using CompletableFuture with optional custom callbacks.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_64\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmOverloads\nfun future(future: CompletableFuture<*>, callback: Consumer<Any?>? = null): Context {\n    if (!handlerType.isHttpMethod() || inExceptionHandler) {\n        throw IllegalStateException(\"You can only set CompletableFuture results in endpoint handlers.\")\n    }\n    resultStream = null\n    resultFuture = future\n    futureConsumer = callback ?: Consumer { result ->\n        when (result) {\n            is InputStream -> result(result)\n            is String -> result(result)\n            is Any -> json(result)\n        }\n    }\n    return this\n}\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Javalin 2.X Handlers\nDESCRIPTION: Examples of using path parameters in endpoint handlers. Path parameters are defined with a colon prefix and can be accessed through the Context object.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/hello/:name\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/hello/:name\") { ctx ->\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Logging in Javalin\nDESCRIPTION: Demonstrates how to set up a custom request logger in Javalin. The logger receives the context and the time taken to process the request in milliseconds.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.requestLogger((ctx, ms) -> {\n        // log things here\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.requestLogger { ctx, ms ->\n        // log things here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Headers as Constants in Kotlin\nDESCRIPTION: Introduces the new Header.kt file, which defines common HTTP headers as constants. These constants can be used in both Kotlin and Java, behaving like public static final fields in Java.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-09-09-javalin-0.5.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Header {\n    const val ACCEPT = \"Accept\"\n    const val ACCEPT_CHARSET = \"Accept-Charset\"\n    etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multipart Uploads in Javalin\nDESCRIPTION: This snippet shows how to configure multipart file upload settings in Javalin, including cache directory, maximum file size, maximum in-memory file size, and maximum total request size.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n  config.jetty.multipartConfig.cacheDirectory(\"c:/temp\"); //where to write files that exceed the in memory limit\n  config.jetty.multipartConfig.maxFileSize(100, SizeUnit.MB); //the maximum individual file size allowed\n  config.jetty.multipartConfig.maxInMemoryFileSize(10, SizeUnit.MB); //the maximum file size to handle in memory\n  config.jetty.multipartConfig.maxTotalRequestSize(1, SizeUnit.GB); //the maximum size of the entire multipart request\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n  config.jetty.multipartConfig.cacheDirectory(\"c:/temp\") //where to write files that exceed the in memory limit\n  config.jetty.multipartConfig.maxFileSize(100, SizeUnit.MB) //the maximum individual file size allowed\n  config.jetty.multipartConfig.maxInMemoryFileSize(10, SizeUnit.MB) //the maximum file size to handle in memory\n  config.jetty.multipartConfig.maxTotalRequestSize(1, SizeUnit.GB) //the maximum size of the entire multipart request\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Micrometer Plugin in Javalin\nDESCRIPTION: Demonstrates how to enable the Micrometer plugin for Javalin, which provides metrics and monitoring capabilities.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_52\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config ->\n    config.registerPlugin(new MicrometerPlugin());\n)\n```\n\n----------------------------------------\n\nTITLE: Role Enum Definition\nDESCRIPTION: Definition of role enums implementing RouteRole interface for authentication purposes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-24-javalin-auth-example.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.security.RouteRole;\n\nenum Role implements RouteRole { ANYONE, USER_READ, USER_WRITE }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.security.RouteRole\n\nenum class Role : RouteRole { ANYONE, USER_READ, USER_WRITE }\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSockets and Server-Sent Events in Javalin\nDESCRIPTION: Demonstrates how to implement WebSocket connections and Server-Sent Events (SSE) in Javalin. It shows handling WebSocket lifecycle events and sending SSE events to clients.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/{path}\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n    ws.onMessage(ctx -> {\n        User user = ctx.messageAsClass(User.class); // convert from json\n        ctx.send(user); // convert to json and send back\n    });\n    ws.onBinaryMessage(ctx -> System.out.println(\"Message\"))\n    ws.onClose(ctx -> System.out.println(\"Closed\"));\n    ws.onError(ctx -> System.out.println(\"Errored\"));\n});\n\napp.sse(\"/sse\", client ->\n    client.sendEvent(\"connected\", \"Hello, SSE\");  // can also send an object, which will be serialized\n    client.onClose(() -> System.out.println(\"Client disconnected\"));\n);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/{path}\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n    ws.onMessage { ctx ->\n        val user = ctx.messageAsClass<User>(); // convert from json\n        ctx.send(user); // convert to json and send back\n    }\n    ws.onBinaryMessage { ctx -> println(\"Message\") }\n    ws.onClose { ctx -> println(\"Closed\") }\n    ws.onError { ctx -> println(\"Errored\") }\n}\n\napp.sse(\"/sse\") { client ->\n    client.sendEvent(\"connected\", \"Hello, SSE\") // can also send an object, which will be serialized\n    client.onClose { println(\"Client disconnected\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Session Storage in Kotlin\nDESCRIPTION: Kotlin snippet for setting up MongoDB as a session storage solution in Jetty. This approach provides scalability and flexibility for session management, but requires additional MongoDB dependencies.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nsessionDataStore = MongoSessionDataStoreFactory().apply {\n    connectionString = \"...\"\n    dbName = \"...\"\n    collectionName = \"...\"\n}.getSessionDataStore(sessionHandler)\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Javalin (Java)\nDESCRIPTION: Shows how to implement rate limiting in a Javalin endpoint using the NaiveRateLimit utility.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_59\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> {\n    NaiveRateLimit.requestPerTimeUnit(ctx, 5, TimeUnit.MINUTES); // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\");\n});\n\n// you can overwrite the key-function:\nRateLimitUti.keyFunction = ctx -> // uses (ip+method+endpointPath) by default\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Javalin (Java)\nDESCRIPTION: Shows how to implement rate limiting in a Javalin endpoint using the NaiveRateLimit utility.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_59\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> {\n    NaiveRateLimit.requestPerTimeUnit(ctx, 5, TimeUnit.MINUTES); // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\");\n});\n\n// you can overwrite the key-function:\nRateLimitUti.keyFunction = ctx -> // uses (ip+method+endpointPath) by default\n```\n\n----------------------------------------\n\nTITLE: User Roles Extraction\nDESCRIPTION: Implementation of user roles extraction from basic auth credentials.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-24-javalin-auth-example.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic static List<Role> getUserRoles(Context ctx) {\n    return Optional.ofNullable(ctx.basicAuthCredentials())\n        .map(credentials -> userRolesMap.getOrDefault(new Pair(credentials.getUsername(), credentials.getPassword()), List.of()))\n        .orElse(List.of());\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val Context.userRoles: List<Role>\n    get() = this.basicAuthCredentials()?.let { (username, password) ->\n        userRolesMap[Pair(username, password)] ?: listOf()\n    } ?: listOf()\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Converter in Java\nDESCRIPTION: Demonstrates how to register a custom converter for non-included classes in Javalin's validation system using Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nJavalinValidation.register(Instant.java, v -> Instant.ofEpochMilli(v.toLong());\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Mapping in Javalin\nDESCRIPTION: Shows how to handle different types of exceptions using exception mappers. Demonstrates handling both specific exceptions (NullPointerException) and general Exception class.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\napp.exception(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.exception(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.exception(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n```\n\n----------------------------------------\n\nTITLE: Context Future Usage Example\nDESCRIPTION: Example showing how to use Context#future in any handler type (before, after, exception, error). The future is now managed through a consolidated CompletableFuture wrapped in an AtomicReference.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-04-24-javalin-4.5.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nctx.result(\"My String\") // Transforms into completed future\nContext#future // Can now be used in any handler type\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the complete project structure including source files, components, and resources organization for a Javalin Vue application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\njavalinvue-example\n├───src\n│   └─── main\n│       └───kotlin\n│           ├───javalinvue\n│           │   ├───UserController.kt\n│           │   └───Main.kt\n│           └───resources\n│               ├───components\n│               │   └───app-frame.vue\n│               ├───components\n│               │   ├───not-found.vue\n│               │   ├───user-overview.vue\n│               │   └───user-profile.vue\n│               └───layout.html\n└───pom.xml\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters in Javalin (Java)\nDESCRIPTION: Demonstrates how to validate query parameters using Javalin's Validator class in Java. It shows examples of validating different data types, applying checks, and using default values.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n// Query Parameters\n// example url: /example?exampleId=123&color=blue&size=1&ts=1584647077000\nString color = ctx.queryParam(\"color\"); // blue\nint exampleId = ctx.queryParam(\"exampleId\", Integer.class).get(); // 123\nint size = ctx.queryParam(\"size\", Integer.class).check(i -> i > 4).get(); // exception\nint qty = ctx.queryParam(\"qty\", Integer.class, \"12\").get(); // uses default value 12\nInstant instant = ctx.queryParam(\"ts\", Instant.class).get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Micrometer Plugin in Javalin 5.2.0 (Kotlin)\nDESCRIPTION: Demonstrates how to register and configure the reintroduced Micrometer plugin in Javalin 5.2.0 using Kotlin. The plugin enables metrics collection with custom registry, tags, and configuration options.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-11-20-javalin-5.2.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.plugins.register(\n        MicrometerPlugin.create { metrics ->\n            metrics.registry = meterRegistry\n            metrics.tags = Tags.empty()\n            metrics.tagExceptionName = true\n            metrics.tagRedirectPaths = tagRedirectPaths\n            metrics.tagNotFoundMappedPaths = tagNotFoundMappedPaths\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Role-Based Access Control Setup in Java\nDESCRIPTION: Definition of roles and role mapping for JWT-based access control in Javalin\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-11-javalin-jwt-example.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nenum Roles implements Role {\n    ANYONE,\n    USER,\n    ADMIN\n}\n\nMap<String, Role> rolesMapping = new HashMap<String, Role>() {{\n    put(\"user\", Roles.USER);\n    put(\"admin\", Roles.ADMIN);\n}};\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin 3 Server Settings\nDESCRIPTION: Demonstrates the new configuration setup in Javalin 3 using JavalinConfig class within Javalin.create(). Shows various configuration options including static files, etags, gzip compression, SSL enforcement, and custom handlers.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-2-3.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.addStaticFiles(directory)\n    config.autogenerateEtags = true/false\n    config.dynamicGzip = true/false\n    config.enableDevLogging()\n    config.enforceSsl = true/false\n    config.requestCacheSize = sizeInBytes\n    config.sessionHandler { ... }\n    config.server { ... }\n    config.accessManager { ... }\n}).start()\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Basic WebSocket Endpoint in Javalin (Kotlin)\nDESCRIPTION: Demonstrates creating a basic WebSocket endpoint in Javalin using Kotlin. This example sets up a connection handler for the WebSocket.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/{path}\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin with Custom SessionHandler in Java\nDESCRIPTION: This Java code demonstrates how to integrate a custom SessionHandler into a Javalin application. It uses the Javalin configuration to modify the ServletContextHandler and set a custom session handler.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n    config.jetty.modifyServletContextHandler(handler -> handler.setSessionHandler(fileSessionHandler()));\n}).start(7070);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Converters in Javalin (Java)\nDESCRIPTION: Demonstrates how to register a custom converter for a non-included class in Javalin using Java. This example shows registering a converter for the Instant class.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nJavalinValidation.register(Instant.class, v -> Instant.ofEpochMilli(v.toLong());\n```\n\n----------------------------------------\n\nTITLE: Basic JWT Route Handlers in Java\nDESCRIPTION: Implementation of basic JWT token generation and validation endpoints in Javalin\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-11-javalin-jwt-example.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nHandler generateHandler = context -> {\n    MockUser mockUser = new MockUser(\"Mocky McMockface\", \"user\");\n    String token = provider.generateToken(mockUser);\n    context.json(new JWTResponse(token));\n};\n\nHandler validateHandler = context -> {\n    Optional<DecodedJWT> decodedJWT = JavalinJWT.getTokenFromHeader(context)\n                                                  .flatMap(provider::validateToken);\n\n    if (!decodedJWT.isPresent()) {\n        context.status(401).result(\"Missing or invalid token\");\n    }\n    else {\n        context.result(\"Hi \" + decodedJWT.get().getClaim(\"name\").asString());\n    }\n};\n\napp.get(\"/generate\", generateHandler);\napp.get(\"/validate\", validateHandler);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Javalin Validator API in Java\nDESCRIPTION: Shows the available methods on Javalin's Validator and TypedValidator classes for input validation in Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// methods available on Validator:\nnotNullOrEmpty(); // check that value is not null of empty (all validators do this by default, but can be called for readability)\nmatches(\"regex\"); // check that value matches regex\nasBoolean(); // validate and return TypedValidator<Boolean>\nasDouble(); // validate and return TypedValidator<Double>\nasFloat(); // validate and return TypedValidator<Float>\nasInt(); // validate and return TypedValidator<Integer>\nasLong(); // validate and return TypedValidator<Long>\nasClass(MyClass.class); // validate and return TypedValidator<MyClass>\n\n// methods available on both Validator and TypedValidator<T>:\ncheck(v -> ...); // check value against supplied lambda\ngetOrThrow(); // validate and get value\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control in Javalin 6\nDESCRIPTION: Example of implementing access control in Javalin 6 using beforeMatched handler, replacing the AccessManager interface.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.beforeMatched(ctx -> {\n    var userRole = getUserRole(ctx); // some user defined function that returns a user role\n    if (!ctx.routeRoles().contains(userRole)) { // routeRoles are provided through the Context interface\n        throw new UnauthorizedResponse(); // request will have to be explicitly stopped by throwing an exception\n    }\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.beforeMatched { ctx ->\n    val userRole = getUserRole(ctx) // some user defined function that returns a user role\n    if (!ctx.routeRoles().contains(userRole)) { // routeRoles are provided through the Context interface\n        throw UnauthorizedResponse() // request will have to be explicitly stopped by throwing an exception\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Javalin\nDESCRIPTION: Demonstrates how to handle file uploads using ctx.uploadedFiles() with corresponding HTML form\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_34\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(file -> {\n        FileUtil.streamToFile(file.getContent(), \"upload/\" + file.getName())\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { (contentType, content, name, extension) ->\n        FileUtil.streamToFile(content, \"upload/$name\")\n    }\n}\n```\n\nLANGUAGE: markup\nCODE:\n```\n<form method=\"post\" action=\"/upload\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"files\" multiple>\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Handlers with Lambdas in Java\nDESCRIPTION: Demonstrates how to set up WebSocket handlers for connect, message, close, and error events using Java lambdas. It shows how to send an echo response for received messages.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-09-22-javalin-0.5.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket\", ws -> {\n    ws.onConnect(session -> System.out.println(\"Connected\"));\n    ws.onMessage((session, message) -> {\n        System.out.println(\"Received: \" + message);\n        session.getRemote().sendString(\"Echo: \" + message);\n    });\n    ws.onClose((session, statusCode, reason) -> System.out.println(\"Closed\"));\n    ws.onError((session, throwable) -> System.out.println(\"Errored\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Path Parameters in Javalin (Java)\nDESCRIPTION: Shows how to validate path parameters in Javalin using Java. It includes examples of validating different data types and applying checks to path parameters.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n// Path Parameters\n// example url: /example/:exampleId/:name/:quantity/:timestamp-ms\nString name = ctx.pathParam(\"name\");\nint exampleId = ctx.pathParam(\"exampleId\", Integer.class).get();\nint quantity = ctx.pathParam(\"quantity\", Integer.class).check(i -> i > 4).get();\nInstant instant = ctx.pathParam(\"timestamp-ms\", Instant.class).get();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Converter in Kotlin\nDESCRIPTION: Demonstrates how to register a custom converter for non-included classes in Javalin's validation system using Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalinValidation.register(Instant::class.java) { Instant.ofEpochMilli(it.toLong()) }\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Cat Facts API Call with CompletableFuture in Javalin\nDESCRIPTION: Creates an HTTP client method that asynchronously fetches random cat facts from an external API. Returns a CompletableFuture containing the HTTP response.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_49\n\nLANGUAGE: java\nCODE:\n```\nprivate static CompletableFuture<HttpResponse<String>> getRandomCatFactFuture() {\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(\"https://catfact.ninja/fact\"))\n        .build();\n    return httpClient.sendAsync(request, ofString());\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun getRandomCatFactFuture(): CompletableFuture<HttpResponse<String>> {\n    val request = HttpRequest.newBuilder()\n        .uri(URI.create(\"https://catfact.ninja/fact\"))\n        .build()\n    return httpClient.sendAsync(request, ofString())\n)\n```\n\n----------------------------------------\n\nTITLE: Plugin Interface Definition in Javalin 5\nDESCRIPTION: Shows the original plugin interfaces in Javalin 5.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\ninterface Plugin {\n    void apply(@NotNull Javalin app);\n}\n\ninterface PluginLifecycleInit {\n    void init(@NotNull Javalin app);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Jetty Handlers\nDESCRIPTION: Example of configuring Jetty server with a custom handler chain using StatisticsHandler\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nStatisticsHandler statisticsHandler = new StatisticsHandler();\n\nJavalin.create()\n    .server(() -> {\n        Server server = new Server();\n        server.setHandler(statisticsHandler);\n        return server;\n    })\n    .start();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval statisticsHandler = StatisticsHandler()\n\nJavalin.create().apply {\n    server {\n        Server(queuedThreadPool).apply {\n            handler = statisticsHandler\n        }\n    }\n}.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Jetty Server in Javalin\nDESCRIPTION: Demonstrates how to set up a custom Jetty server in Javalin, including adding a StatisticsHandler to the server.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nStatisticsHandler statisticsHandler = new StatisticsHandler();\n\nJavalin.create(config -> {\n    config.server(() -> {\n        Server server = new Server();\n        server.setHandler(statisticsHandler);\n        return server;\n    })\n}).start();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval statisticsHandler = StatisticsHandler()\n\nJavalin.create { config ->\n    config.server {\n        Server().apply {\n            handler = statisticsHandler\n        }\n    }\n}.start();\n```\n\n----------------------------------------\n\nTITLE: Content-Type Specific Error Mapping in Javalin\nDESCRIPTION: Shows how to specify content type when creating error mappers. This allows different error handlers for different content types, such as HTML vs JSON responses.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_40\n\nLANGUAGE: java\nCODE:\n```\napp.error(404, \"html\" ctx -> {\n    ctx.html(\"Generic 404 message\")\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.error(404, \"html\") { ctx ->\n    ctx.html(\"Generic 404 message\")\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Async Cat Facts Endpoint in Javalin\nDESCRIPTION: Implements a GET endpoint that asynchronously returns cat facts to the client, including error handling and status code management.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_50\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/cat-facts\", ctx -> {\n    ctx.future(() -> {\n        return getRandomCatFactFuture()\n            .thenAccept(response -> ctx.html(response.body()).status(response.statusCode()))\n            .exceptionally(throwable -> {\n                ctx.status(500).result(\"Could not get cat facts\" + throwable.getMessage());\n                return null;\n            })\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/cat-facts\") { ctx ->\n    ctx.future {\n        getRandomCatFactFuture()\n            .thenAccept { response -> ctx.html(response.body()).status(response.statusCode()) }\n            .exceptionally { throwable ->\n                ctx.status(500).result(\"Could not get cat facts: ${throwable.message}\")\n                null\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Extensions with Fluent API in Java\nDESCRIPTION: Shows how to register and use context extensions to create a more expressive and fluent API. Extensions must be registered before use, typically in a before-filter.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> ctx.use(MyMapper.class).serialize(object)); // use MyMapper to serialize object\n```\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> ctx.register(MyMapper.class, new MyMapper(ctx, otherDependency));\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Implementation\nDESCRIPTION: Demonstrates how to implement rate limiting in Javalin endpoints using NaiveRateLimit utility.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_46\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> {\n    NaiveRateLimit.requestPerTimeUnit(ctx, 5, TimeUnit.MINUTES); // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\");\n});\n\n// you can overwrite the key-function:\nRateLimitUti.keyFunction = ctx -> // uses (ip+method+endpointPath) by default\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/\") { ctx ->\n    NaiveRateLimit.requestPerTimeUnit(ctx, 5, TimeUnit.MINUTES) // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\")\n}\n\n// you can overwrite the key-function:\nRateLimitUti.keyFunction = { ctx -> } // uses (ip+method+endpointPath) by default\n```\n\n----------------------------------------\n\nTITLE: Customizing Javalin Server Configuration\nDESCRIPTION: Demonstrates how to customize the embedded Jetty server in Javalin\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_31\n\nLANGUAGE: java\nCODE:\n```\napp.server(() -> {\n    Server server = new Server();\n    // do whatever you want here\n    return server;\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.server {\n    val server = Server()\n    // do whatever you want here\n    server\n}\n```\n\n----------------------------------------\n\nTITLE: User Roles Mapping\nDESCRIPTION: Definition of user roles mapping with username and password pairs.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-24-javalin-auth-example.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nrecord Pair(String a, String b) {}\nprivate static final Map<Pair, List<Role>> userRolesMap = Map.of(\n    new Pair(\"alice\", \"weak-1234\"), List.of(Role.USER_READ),\n    new Pair(\"bob\", \"weak-123456\"), List.of(Role.USER_READ, Role.USER_WRITE)\n);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val userRolesMap = mapOf(\n    Pair(\"alice\", \"weak-1234\") to listOf(Role.USER_READ),\n    Pair(\"bob\", \"weak-123456\") to listOf(Role.USER_READ, Role.USER_WRITE)\n)\n```\n\n----------------------------------------\n\nTITLE: Validating Headers in Javalin (Kotlin)\nDESCRIPTION: Shows how to validate headers in Javalin using Kotlin. It includes examples of validating different data types and applying checks to header values.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\n// Headers\nval exampleHeaderStr = ctx.header(\"Example\");\nval version = ctx.header<Int>(\"Version\").get();\nval version = ctx.header<Int>(\"Version\").check({ it > 4 }).get();\nval myValue = ctx.header<MyValue>(\"X-My-Header\").get();\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Template Engines in Java\nDESCRIPTION: Java code showing how to register multiple template engines (Mustache and JTE) with the custom JavalinRenderer class.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.fileRenderer(\n        new JavalinRenderer()\n            .register(\"mustache\", new JavalinMustache())\n            .register(\"jte\", new JavalinJte())\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue State Function in Kotlin\nDESCRIPTION: Sets up a state function that provides the current user information to all Vue components. This enables sharing server-side state with the client components.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.vue.stateFunction = { ctx -> mapOf(\"currentUser\" to currentUser(ctx)) }\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Metrics with Micrometer in Javalin\nDESCRIPTION: Java code showing how to add various system and JVM metrics to a Prometheus registry, including memory, garbage collection, thread, uptime, processor, and disk space metrics.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/micrometer.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.micrometer.core.instrument.binder.jvm.*;\nimport io.micrometer.core.instrument.binder.system.*;\n\n\nPrometheusMeterRegistry prometheusMeterRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n\n\n// add a tag to all reported values to simplify filtering in large installations:\nregistry.config().commonTags(\"application\", \"My-Application\");\n\nnew ClassLoaderMetrics().bindTo(registry);\nnew JvmMemoryMetrics().bindTo(registry);\nnew JvmGcMetrics().bindTo(registry);\nnew JvmThreadMetrics().bindTo(registry);\nnew UptimeMetrics().bindTo(registry);\nnew ProcessorMetrics().bindTo(registry);\nnew DiskSpaceMetrics(new File(System.getProperty(\"user.dir\"))).bindTo(registry);\n\nMicrometerPlugin micrometerPlugin = new MicrometerPlugin(micrometerPluginConfig -> micrometerPluginConfig.registry = prometheusMeterRegistry);\n\nJavalin app = Javalin.create(config -> config.registerPlugin(micrometerPlugin)).start(8080);\n\nString contentType = \"text/plain; version=0.0.4; charset=utf-8\";\napp.get(\"/prometheus\", ctx -> ctx.contentType(contentType).result(prometheusMeterRegistry.scrape()));\n```\n\n----------------------------------------\n\nTITLE: Using Javalin with Servlet Containers\nDESCRIPTION: Shows how to use Javalin without Jetty by implementing a custom servlet\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_35\n\nLANGUAGE: java\nCODE:\n```\n@WebServlet(urlPatterns = [\"/rest/*\"], name = \"MyServlet\")\nclass MyServlet extends HttpServlet() {\n    JavalinServlet javalin = EmbeddedJavalin()\n        .get(\"/rest\") { ctx -> ctx.result(\"Hello!\") }\n        .createServlet()\n    @Override\n    void service(HttpServletRequest req, HttpServletResponse resp) {\n        javalin.service(req, resp)\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@WebServlet(urlPatterns = [\"/rest/*\"], name = \"MyServlet\")\nclass MyServlet : HttpServlet() {\n    val javalin = EmbeddedJavalin()\n        .get(\"/rest\") { ctx -> ctx.result(\"Hello!\") }\n        .createServlet()\n\n    override fun service(req: HttpServletRequest, resp: HttpServletResponse) {\n        javalin.service(req, resp)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Javalin without Jetty through EmbeddedJavalin in a Servlet Container\nDESCRIPTION: Code example demonstrating how to use Javalin within a servlet container (like Tomcat or WebLogic) by creating a custom servlet that uses EmbeddedJavalin. This approach allows using Javalin's routing capabilities without Jetty as the underlying server.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-11-04-javalin-2.4.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@WebServlet(urlPatterns = [\"/rest/*\"], name = \"MyServlet\")\nclass MyServlet : HttpServlet() {\n    val javalin = EmbeddedJavalin()\n        .get(\"/rest\") { ctx -> ctx.result(\"Hello!\") }\n        .createServlet()\n\n    override fun service(req: HttpServletRequest, resp: HttpServletResponse) {\n        javalin.service(req, resp)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Engine in Javalin (Kotlin)\nDESCRIPTION: Kotlin code showing how to register a template engine (Mustache in this example) with Javalin's configuration.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.fileRenderer(JavalinMustache())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side State Injection\nDESCRIPTION: Sets up state injection to provide current user information to all Mithril components.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nJavalinMithril.configure(config -> {\n        config.isDev(true);\n        config.stateFunction((ctx) -> singletonMap(\"currentUser\", currentUser(ctx)));\n});\n```\n\n----------------------------------------\n\nTITLE: Using Javalin CookieStore for State Management\nDESCRIPTION: The cookieStore API provides methods for storing and retrieving typed data between requests and even servers. The data is serialized, base64-encoded, and stored in cookies with a 4kb size limit.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nctx.cookieStore(key, value); // store any type of value\nctx.cookieStore(key); // read any type of value\nctx.clearCookieStore(); // clear the cookie-store\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Lang Error Handler in Javalin (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to override the default error handler for java.lang.Error in Javalin, setting a custom status code and logging the error.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_61\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { cfg ->\n    cfg.pvt.javaLangErrorHandler { res, error ->\n        res.status = HttpStatus.INTERNAL_SERVER_ERROR.code\n        JavalinLogger.error(\"Exception occurred while servicing http-request\", error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Compose for PostgreSQL\nDESCRIPTION: Defines a Docker Compose configuration for running PostgreSQL locally. It specifies the container name, image version, environment variables, and port mapping.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2024-10-20-javalin-hibernate.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  postgres:\n    container_name: postgres1\n    image: postgres:15.7\n    environment:\n      POSTGRES_USER: sa\n      POSTGRES_PASSWORD: sa\n      POSTGRES_DB: mydatabase\n    ports:\n      - \"5432:5432\"\n    restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Using Typed App Data in Javalin 6\nDESCRIPTION: Example of using typed app data in Javalin 6 for storing and accessing custom data, replacing untyped app attributes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// register a custom attribute\nstatic var myKey = new Key<MyValue>(\"my-key\");\nvar app = Javalin.create(config -> {\n    config.appData(myKey, myValue);\n});\n// access a custom attribute\nvar myValue = ctx.appData(myKey); // var will be inferred to MyValue\n// call a custom method on a custom attribute\nctx.appData(myKey).myMethod();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// register a custom attribute\nval myKey = Key<MyValue>(\"my-key\")\nval app = Javalin.create { config ->\n    config.appData(myKey, myValue)\n}\n// access a custom attribute\nval myValue = ctx.appData(myKey) // val will be inferred to MyValue\n// call a custom method on a custom attribute\nctx.appData(myKey).myMethod()\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Logging in Javalin\nDESCRIPTION: This snippet shows how to add a WebSocket logger to Javalin. The logger can handle various WebSocket events such as onMessage, onConnect, onError, and onClose.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.requestLogger.ws(ws -> {\n        ws.onMessage(ctx -> {\n            System.out.println(\"Received: \" + ctx.message());\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.requestLogger.ws(ws -> {\n        ws.onMessage { ctx ->\n            println(\"Received: \" + ctx.message());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Data with CookieStore in Javalin (Java)\nDESCRIPTION: Demonstrates how to store and retrieve various data types using CookieStore across different servers in a Javalin application. Includes examples of storing strings, integers, and lists.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\", ctx -> {\n    ctx.cookieStore().set(\"string\", \"Hello world!\");\n    ctx.cookieStore().set(\"i\", 42);\n    ctx.cookieStore().set(\"list\", Arrays.asList(\"One\", \"Two\", \"Three\"));\n});\nserverTwoApp.get(\"/cookie-reader\", ctx -> { // runs on a different server than serverOneApp\n    String string = ctx.cookieStore().get(\"string\")\n    int i = ctx.cookieStore().get(\"i\")\n    List<String> list = ctx.cookieStore().get(\"list\")\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Components with Path Parameter Access in Javalin\nDESCRIPTION: Example of a Vue component that accesses Javalin path parameters. The component demonstrates how to access URL path parameters that Javalin makes available in the Vue instance.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_57\n\nLANGUAGE: markup\nCODE:\n```\n<template id=\"thread-view\">\n    <div>{{ $javalin.pathParams[\"user\"] }}</div>\n</template>\n<script>\n    Vue.component(\"thread-view\", {\n        template: \"#thread-view\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring File-based Session Handler\nDESCRIPTION: Shows how to set up a FileSessionDataStore for persisting sessions to the file system\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun fileSessionHandler() = SessionHandler().apply {\n    httpOnly = true\n    sessionCache = DefaultSessionCache(this).apply {\n        sessionDataStore = FileSessionDataStore().apply {\n            val baseDir = File(System.getProperty(\"java.io.tmpdir\"))\n            storeDir = File(baseDir, \"javalin-session-store\").apply { mkdir() }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Context to JavalinServletContext in Java and Kotlin\nDESCRIPTION: This example demonstrates how to cast the Context object to JavalinServletContext to access internal features like the task queue. This allows clearing remaining tasks for a request, skipping handlers that would normally execute.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> {\n    ctx.result(\"My result here\");\n    JavalinServletContext jsc = (JavalinServletContext) ctx;\n    jsc.getTasks().clear();\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.before { ctx ->\n    it.result(\"My result here\")\n    (ctx as JavalinServletContext).tasks.clear()\n}\n```\n\n----------------------------------------\n\nTITLE: Using CrudHandler Interface for RESTful Operations in Javalin\nDESCRIPTION: Demonstrates how to utilize the CrudHandler interface to implement the five standard CRUD operations for a resource (get all, get one, create, update, delete). This simplifies creating RESTful APIs.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    crud(\"users/{user-id}\", new UserController());\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    crud(\"users/{user-id}\", UserController())\n}\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Data with CookieStore in Javalin (Kotlin)\nDESCRIPTION: Kotlin version of storing and retrieving various data types using CookieStore across different servers in a Javalin application. Demonstrates storing strings, integers, and lists.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\") { ctx ->\n    ctx.cookieStore().set(\"string\", \"Hello world!\")\n    ctx.cookieStore().set(\"i\", 42)\n    ctx.cookieStore().set(\"list\", listOf(\"One\", \"Two\", \"Three\"))\n}\nserverTwoApp.get(\"/cookie-reader\") { ctx -> // runs on a different server than serverOneApp\n    val string = ctx.cookieStore().get(\"string\")\n    val i = ctx.cookieStore().get(\"i\")\n    val list = ctx.cookieStore().get(\"list\")\n}\n```\n\n----------------------------------------\n\nTITLE: Inlining Files in Javalin Vue Layout (HTML)\nDESCRIPTION: Shows how to inline files into the Vue layout template using Javalin's inline file functions for different environments.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_70\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <style>@inlineFile(\"/vue/styles.css\")</style> <!-- always included -->\n    <script>@inlineFileDev(\"/vue/scripts-dev.js\")</script> <!-- only included in dev -->\n    <script>@inlineFileNotDev(\"/vue/scripts-not-dev.js\")</script> <!-- only included in not dev -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Parameters in Javalin Routes\nDESCRIPTION: Shows how to use wildcard parameters (splats) in routes and access them via Context.splat().\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nget(\"/hello/*/and/*\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/hello/*/and/*\") { ctx ->\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin with Custom SessionHandler in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to set up a Javalin application with a custom SessionHandler. It uses Javalin's configuration to modify the ServletContextHandler and assign a custom session handler.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create { config ->\n    config.jetty.modifyServletContextHandler { it.sessionHandler = fileSessionHandler() }\n}.start(7070)\n```\n\n----------------------------------------\n\nTITLE: CSP and Nonces Configuration\nDESCRIPTION: Enable Content Security Policy and nonce generation for script tags.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nenableCspAndNonces = true/false;\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nenableCspAndNonces = true/false\n```\n\n----------------------------------------\n\nTITLE: Enabling DevLoggingPlugin in Javalin Configuration\nDESCRIPTION: Code snippet showing how to enable the DevLoggingPlugin through Javalin's configuration. This is done using the 'config.bundledPlugins.enableDevLogging()' method within the Javalin.create() call.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/devlogging.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.bundledPlugins.enableDevLogging();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Plugin in Kotlin\nDESCRIPTION: Shows how to use the OpenAPI plugin in Javalin with Kotlin. It demonstrates setting up an API endpoint with OpenAPI annotations for documentation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n@OpenApi(\n    path = \"/api/v1/users\",\n    methods = [HttpMethod.POST],\n    summary = \"Register a user\",\n    tags = [\"Users\"],\n    requestBody = OpenApiRequestBody(\n        content = [OpenApiContent(RegistrationRequest::class)],\n        required = true,\n        description = \"Data about the user\"\n    ),\n    responses = [\n        OpenApiResponse(status = \"200\", ...),\n        OpenApiResponse(status = \"401\", ...),\n    ]\n)\nfun register(context: Context) {\n    // handler code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin Server with Quick Start Method\nDESCRIPTION: Simplified method to start the Javalin server by specifying only the port number.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-06-javalin-0.3.7-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nstart(port)\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Component for 404 Not Found Page in HTML and JavaScript\nDESCRIPTION: This snippet defines a simple Vue component to display a 404 Not Found error page.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"not-found\">\n  <h1>Page not found (error 404)</h1>\n</template>\n<script>\n  app.component(\"not-found\", {template: \"#not-found\"});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Futures in Kotlin\nDESCRIPTION: Illustrates the new approach to handling futures in Javalin 4, providing more flexibility and control over the result processing.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-3-4.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.future(myFuture) { result ->\n    if (result != null) {\n        ctx.status(200)\n        ctx.json(result)\n    } else {\n        ctx.status(404)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Decode Handler Configuration in Java\nDESCRIPTION: Creation of JWT decode handler for automated token validation and context population\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-11-javalin-jwt-example.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nHandler decodeHandler = JavalinJWT.createHeaderDecodeHandler(provider);\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Documentation in Kotlin\nDESCRIPTION: Shows how to define OpenAPI documentation for a Javalin endpoint using the OpenAPI DSL in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_53\n\nLANGUAGE: kotlin\nCODE:\n```\nval addUserDocs = document()\n        .body<User>()\n        .result<Unit>(\"400\")\n        .result<Unit>(\"204\")\n\nfun addUserHandler(ctx: Context) {\n    val user = ctx.body<User>()\n    UserRepository.addUser(user)\n    ctx.status(204)\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for ForbiddenResponse\nDESCRIPTION: Example JSON response when the client accepts JSON format and a ForbiddenResponse is thrown. Contains title, status code, type URL, and optional details array.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\": \"Off limits!\",\n    \"status\": 403,\n    \"type\": \"https://javalin.io/documentation#forbiddenresponse\",\n    \"details\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin Route Binding Implementation\nDESCRIPTION: Code showing how to bind Vue components to Javalin routes with optional access management.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/my-path\", new VueComponent(\"my-component\"));\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/my-path\", VueComponent(\"my-component\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint Handlers in Javalin\nDESCRIPTION: Examples of endpoint handlers for GET and POST requests, demonstrating response handling with JSON and status codes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> {\n    // some code\n    ctx.json(object)\n});\n\napp.post(\"/\", ctx -> {\n    // some code\n    ctx.status(201)\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/\") { ctx ->\n    // some code\n    ctx.json(object)\n}\n\napp.post(\"/\") { ctx ->\n    // some code\n    ctx.status(201)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression in Javalin 6\nDESCRIPTION: Updated compression configuration syntax for Javalin 6, showing the new config.http path and renamed methods for compression settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.http.customCompression(compressionStrategy);      \n    config.http.brotliAndGzipCompression(gzipLvl, brotliLvl);\n    config.http.gzipOnlyCompression(gzipLvl);                \n    config.http.brotliOnlyCompression(brotliLvl);            \n    config.http.disableCompression();                           \n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.http.customCompression(compressionStrategy)      \n    config.http.brotliAndGzipCompression(gzipLvl, brotliLvl)\n    config.http.gzipOnlyCompression(gzipLvl)                \n    config.http.brotliOnlyCompression(brotliLvl)            \n    config.http.disableCompression()                           \n}\n```\n\n----------------------------------------\n\nTITLE: JavalinVue Configuration Setup\nDESCRIPTION: Configuration options for JavalinVue plugin including root directory, Vue app name, development mode, and other settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.vue.rootDirectory        // where JavalinVue should look for files (default: decided based on isDevFunction)\n    config.vue.vueAppName           // the Vue 3 app name (default: null)\n    config.vue.isDevFunction        // a function to determine if request is on localhost (default: checks ctx.url())\n    config.vue.optimizeDependencies // only include required vue files (default: true)\n    config.vue.stateFunction        // a function which runs on every request for transferring state from server (default: null)\n    config.vue.cacheControl         // cache control header (default: \"no-cache, no-store, must-revalidate\")\n    config.vue.enableCspAndNonces   // will enable csp and tag each component with a nonce (default: false)\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.vue.rootDirectory        // where JavalinVue should look for files (default: decided based on isDevFunction)\n    config.vue.vueAppName           // the Vue 3 app name (default: null)\n    config.vue.isDevFunction        // a function to determine if request is on localhost (default: checks ctx.url())\n    config.vue.optimizeDependencies // only include required vue files (default: true)\n    config.vue.stateFunction        // a function which runs on every request for transferring state from server (default: null)\n    config.vue.cacheControl         // cache control header (default: \"no-cache, no-store, must-revalidate\")\n    config.vue.enableCspAndNonces   // will enable csp and tag each component with a nonce (default: false)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for File Uploads\nDESCRIPTION: HTML form that enables file uploads. The form uses multipart/form-data encoding and allows multiple file selection, posting to the upload-example endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-07-28-javalin-html-forms-example.md#2025-04-08_snippet_7\n\nLANGUAGE: markup\nCODE:\n```\n<h1>Upload example</h1>\n<form method=\"post\" action=\"/upload-example\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"files\" multiple>\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Logging in Javalin\nDESCRIPTION: This snippet demonstrates how to add an HTTP request logger to Javalin. The logger receives the Context object and the time taken to process the request in milliseconds.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.requestLogger.http((ctx, ms) -> {\n        // log things here\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.requestLogger.http { ctx, ms ->\n        // log things here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Store Implementation Example\nDESCRIPTION: Practical example showing cookie store usage across different servers, demonstrating how to store and retrieve various data types including strings, integers, and lists.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\") { ctx ->\n    ctx.cookieStore(\"string\", \"Hello world!\");\n    ctx.cookieStore(\"i\", 42);\n    ctx.cookieStore(\"list\", Arrays.asList(\"One\", \"Two\", \"Three\"));\n}\nserverTwoApp.get(\"/cookie-reader\") { ctx -> // runs on a different server than serverOneApp\n    String string = ctx.cookieStore(\"string\")\n    int i = ctx.cookieStore(\"i\")\n    List<String> list = ctx.cookieStore(\"list\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\") { ctx ->\n    ctx.cookieStore(\"string\", \"Hello world!\")\n    ctx.cookieStore(\"i\", 42)\n    ctx.cookieStore(\"list\", listOf(\"One\", \"Two\", \"Three\"))\n}\nserverTwoApp.get(\"/cookie-reader\") { ctx -> // runs on a different server than serverOneApp\n    val string = ctx.cookieStore<String>(\"string\")\n    val i = ctx.cookieStore<Int>(\"i\")\n    val list = ctx.cookieStore<List<String>>(\"list\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vue App Name\nDESCRIPTION: Configuration for Vue 3 application name that should match the Vue instance initialization.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvueAppName = \"MyAppName\";\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvueAppName = \"MyAppName\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL in Javalin with Java\nDESCRIPTION: Java code to configure the Javalin SSL plugin using PEM certificate and key files. This setup enables SSL on the default secure port 443 and insecure port 80.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nSslPlugin plugin = new SslPlugin(conf -> {\n    conf.pemFromPath(\"/etc/ssl/certificate.pem\", \"/etc/ssl/privateKey.pem\");\n});\n\nJavalin.create(javalinConfig -> {\n    javalinConfig.plugins.register(plugin);\n}).start();\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Component with Path Parameters in Javalin\nDESCRIPTION: This snippet shows how to create a Vue component that accesses Javalin path parameters. It includes a template and component registration script.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_58\n\nLANGUAGE: markup\nCODE:\n```\n<template id=\"thread-view\">\n    {% raw %}<div>{{ $javalin.pathParams[\"user\"] }}</div>{% endraw %}\n</template>\n<script>\n    Vue.component(\"thread-view\", {\n        template: \"#thread-view\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Before Handlers in Javalin (Java and Kotlin)\nDESCRIPTION: Shows how to add handlers that run before WebSocket requests, both globally and for specific paths.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\napp.wsBefore(ws -> {\n    // runs before all WebSocket requests\n});\napp.wsBefore(\"/path/*\", ws -> {\n    // runs before websocket requests to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsBefore { ws ->\n    // runs before all WebSocket requests\n}\napp.wsBefore(\"/path/*\") { ws ->\n    // runs before websocket requests to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Exception Example\nDESCRIPTION: Demonstrates using Javalin's built-in HttpResponseException for returning standard HTTP responses.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_28\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/\") { throw new ForbiddenResponse(\"Off limits!\") }\n```\n\n----------------------------------------\n\nTITLE: Configuring JTE Engine in Kotlin\nDESCRIPTION: Kotlin version of setting up the JTE engine for Javalin, with configurations for both development and production environments using DirectoryCodeResolver and precompiled templates respectively.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmStatic\nfun main(args: Array<String>) {\n    JavalinJte.configure(createTemplateEngine())\n\n    val app = Javalin.create().start(7000)\n\n    app.get(\"/\", this::renderHelloPage)\n}\n\nprivate fun createTemplateEngine(): TemplateEngine {\n    return if (isDevSystem) {\n        val codeResolver = DirectoryCodeResolver(Path.of(\"src\", \"main\", \"jte\"))\n        TemplateEngine.create(codeResolver, ContentType.Html)\n    } else {\n        TemplateEngine.createPrecompiled(Path.of(\"jte-classes\"), ContentType.Html)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin Application with IP and Port\nDESCRIPTION: Basic setup of a Javalin application with error handling and binding to a specific IP address and port for Raspberry Pi deployment.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val ipAddress = \"0.0.0.0\" // change this to your Raspberry Pi's IP address\n    val app = Javalin.create().apply {\n        exception(Exception::class.java) { e, _ -> e.printStackTrace() }\n    }.start(ipAddress, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Server in Kotlin\nDESCRIPTION: This snippet demonstrates how to configure a custom server in Javalin using the create method with a configuration lambda. It showcases Javalin's approach to exposing configuration options through a single object.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-08-02-number-of-imports-and-library-usability.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.server { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Path in Javalin - Java implementation\nDESCRIPTION: Shows how to configure a context path in Javalin using Java. The example demonstrates setting a context path of '/my-path', enabling static files from the 'public' directory, configuring the port, and defining a route handler for the root path.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-10-16-javalin-0.5.3-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create()\n    .contextPath(\"/my-path\")\n    .enabledStaticFiles(\"public\")\n    .port(1234)\n    .start()\n\napp.get(\"/\", ctx -> ctx.result(\"Hello, World\"));\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Javalin Routes\nDESCRIPTION: Shows how to use path parameters in Javalin routes and access them in the handler.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/hello/:name\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/hello/:name\") { ctx ->\n    ctx.result(\"Hello: \" + ctx.pathParam(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Handling in Javalin\nDESCRIPTION: Demonstrates how to configure static file serving in Javalin using StaticFileConfig. It shows various options like setting the hosted path, directory, location, and other advanced settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n  config.addStaticFiles(staticFiles -> {\n    staticFiles.hostedPath = \"/\";                   // change to host files on a subpath, like '/assets'\n    staticFiles.directory = \"/public\";              // the directory where your files are located\n    staticFiles.location = Location.CLASSPATH;      // Location.CLASSPATH (jar) or Location.EXTERNAL (file system)\n    staticFiles.precompress = false;                // if the files should be pre-compressed and cached in memory (optimization)\n    staticFiles.aliasCheck = null;                  // you can configure this to enable symlinks (= ContextHandler.ApproveAliases())\n    staticFiles.headers = Map.of(...);              // headers that will be set for the files\n    staticFiles.skipFileFunction = req -> false;    // you can use this to skip certain files in the dir, based on the HttpServletRequest\n  });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n  config.addStaticFiles { staticFiles ->\n    staticFiles.hostedPath = \"/\"                    // change to host files on a subpath, like '/assets'\n    staticFiles.directory = \"/public\"               // the directory where your files are located\n    staticFiles.location = Location.CLASSPATH       // Location.CLASSPATH (jar) or Location.EXTERNAL (file system)\n    staticFiles.precompress = false                 // if the files should be pre-compressed and cached in memory (optimization)\n    staticFiles.aliasCheck = null                   // you can configure this to enable symlinks (= ContextHandler.ApproveAliases())\n    staticFiles.headers = mapOf(...)                // headers that will be set for the files\n    staticFiles.skipFileFunction = { req -> false } // you can use this to skip certain files in the dir, based on the HttpServletRequest\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using cookieStore in Javalin (Java)\nDESCRIPTION: Demonstrates how to use the new ctx.cookieStore() functions for storing and retrieving data across handlers, requests, or servers. The cookieStore allows sharing of information by serializing and encoding data into cookies.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-09-09-javalin-0.5.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nctx.cookieStore(key, value) // store any type of value\nctx.cookieStore(key) // read any type of value\nctx.clearCookieStore() // clear the cookie-store\n```\n\n----------------------------------------\n\nTITLE: Defining Javalin Plugin Interfaces\nDESCRIPTION: Defines the two interfaces used in Javalin's plugin system: Plugin and PluginLifecycleInit.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_49\n\nLANGUAGE: java\nCODE:\n```\ninterface Plugin {\n    void apply(@NotNull Javalin app);\n}\ninterface PluginLifecycleInit {\n    void init(@NotNull Javalin app);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Sent Events in Javalin\nDESCRIPTION: Demonstrates how to implement Server-Sent Events (SSE) in Javalin. The example shows sending an initial event to the client and setting up a callback for when the client disconnects.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_41\n\nLANGUAGE: java\nCODE:\n```\napp.sse(\"/sse\", client ->\n    client.sendEvent(\"connected\", \"Hello, SSE\");\n    client.onClose(() -> System.out.println(\"Client disconnected\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.sse(\"/sse\") { client ->\n    client.sendEvent(\"connected\", \"Hello, SSE\")\n    client.onClose { println(\"Client disconnected\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CookieStore in Java for Cross-Server Communication\nDESCRIPTION: Example of using CookieStore to share data between requests and even different servers. This allows for maintaining state between different endpoints and services through client-stored cookies.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\") { ctx ->\n    ctx.cookieStore(\"string\", \"Hello world!\");\n    ctx.cookieStore(\"i\", 42);\n    ctx.cookieStore(\"list\", Arrays.asList(\"One\", \"Two\", \"Three\"));\n}\nserverTwoApp.get(\"/cookie-reader\") { ctx -> // runs on a different server than serverOneApp\n    String string = ctx.cookieStore(\"string\")\n    int i = ctx.cookieStore(\"i\")\n    List<String> list = ctx.cookieStore(\"list\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring WebSocket Endpoint in Javalin (Java and Kotlin)\nDESCRIPTION: Demonstrates how to declare a WebSocket endpoint with a path and configure an onConnect event handler in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket/:path\", ws -> {\n    ws.onConnect(ctx -> System.out.println(\"Connected\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket/:path\") { ws ->\n    ws.onConnect { ctx -> println(\"Connected\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Sessions to Database using JDBC in Java\nDESCRIPTION: Shows how to configure Jetty to persist sessions to a database using JDBC. This method is more persistent and faster than file-based storage, suitable for production environments.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static SessionHandler sqlSessionHandler(String driver, String url) {\n    SessionHandler sessionHandler = new SessionHandler();\n    SessionCache sessionCache = new DefaultSessionCache(sessionHandler);\n    sessionCache.setSessionDataStore(\n        jdbcDataStoreFactory(driver, url).getSessionDataStore(sessionHandler)\n    );\n    sessionHandler.setSessionCache(sessionCache);\n    sessionHandler.setHttpOnly(true);\n    // make additional changes to your SessionHandler here\n    return sessionHandler;\n}\n\nprivate static JDBCSessionDataStoreFactory jdbcDataStoreFactory(String driver, String url) {\n    DatabaseAdaptor databaseAdaptor = new DatabaseAdaptor();\n    databaseAdaptor.setDriverInfo(driver, url);\n    // databaseAdaptor.setDatasource(myDataSource); // you can set data source here (for connection pooling, etc)\n    JDBCSessionDataStoreFactory jdbcSessionDataStoreFactory = new JDBCSessionDataStoreFactory();\n    jdbcSessionDataStoreFactory.setDatabaseAdaptor(databaseAdaptor);\n    return jdbcSessionDataStoreFactory;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing After Handlers in Javalin\nDESCRIPTION: Examples of after-handlers that run after requests, including path-specific and global handlers.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\napp.after(\"/some-path/*\", ctx -> {\n    // runs after all request to /some-path/* (excluding static files)\n});\n\napp.after(ctx -> {\n    // run after every request (excluding static files)\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.after(\"/some-path/*\") { ctx ->\n    // runs after all request to /some-path/* (excluding static files)\n}\n\napp.after { ctx ->\n    // run after every request (excluding static files)\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Javalin Hello World Application\nDESCRIPTION: Basic Javalin application that creates a REST endpoint returning a JSON object. This demonstrates a minimal application suitable for GraalVM compilation without heavy use of reflection.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Main {\n    public static void main(String[] args) {\n        Test t = new Test();\n        t.setSomeValue(\"Hello World!\");\n        Javalin app = Javalin.create().start(7000);\n        app.get(\"/\", ctx -> ctx.json(t));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin Server with OpenAPI Configuration (Java)\nDESCRIPTION: Main class implementation in Java that sets up Javalin server with OpenAPI, Swagger, and ReDoc plugins along with User API endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-03-javalin-openapi-example.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.javalin.example.java;\n\nimport io.javalin.Javalin;\nimport io.javalin.example.java.user.UserController;\nimport io.javalin.openapi.plugin.OpenApiConfiguration;\nimport io.javalin.openapi.plugin.OpenApiPlugin;\nimport io.javalin.openapi.plugin.redoc.ReDocConfiguration;\nimport io.javalin.openapi.plugin.redoc.ReDocPlugin;\nimport io.javalin.openapi.plugin.swagger.SwaggerConfiguration;\nimport io.javalin.openapi.plugin.swagger.SwaggerPlugin;\n\nimport static io.javalin.apibuilder.ApiBuilder.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Javalin.create(config -> {\n            config.registerPlugin(new OpenApiPlugin(pluginConfig -> {\n                pluginConfig.withDefinitionConfiguration((version, definition) -> {\n                    definition.withOpenApiInfo(info -> info.setTitle(\"Javalin OpenAPI example\"));\n                });\n            }));\n            config.registerPlugin(new SwaggerPlugin());\n            config.registerPlugin(new ReDocPlugin());\n            config.router.apiBuilder(() -> {\n                path(\"users\", () -> {\n                    get(UserController::getAll);\n                    post(UserController::create);\n                    path(\"{userId}\", () -> {\n                        get(UserController::getOne);\n                        patch(UserController::update);\n                        delete(UserController::delete);\n                    });\n                });\n            });\n        }).start(7002);\n\n        System.out.println(\"Check out ReDoc docs at http://localhost:7002/redoc\");\n        System.out.println(\"Check out Swagger UI docs at http://localhost:7002/swagger-ui\");\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Template Engine in Kotlin\nDESCRIPTION: Kotlin code showing how to configure Javalin with a custom Velocity engine instance.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.fileRenderer((JavalinVelocity(myVelocityEngine)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up WebSocket Handlers in Javalin for Java and Kotlin\nDESCRIPTION: Shows how to configure WebSocket endpoints in Javalin, including connect, message, close, and error handlers. This example demonstrates real-time communication capabilities.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-06-javalin-1.0.0-released.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\napp.ws(\"/websocket\", ws -> {\n    ws.onConnect(session -> System.out.println(\"Connected\"));\n    ws.onMessage((session, message) -> {\n        System.out.println(\"Received: \" + message);\n        session.getRemote().sendString(\"Echo: \" + message);\n    });\n    ws.onClose((session, statusCode, reason) -> System.out.println(\"Closed\"));\n    ws.onError((session, throwable) -> System.out.println(\"Errored\"));\n});\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\napp.ws(\"/websocket\") { ws ->\n    ws.onConnect { session -> println(\"Connected\") }\n    ws.onMessage { session, message ->\n        println(\"Received: \" + message)\n        session.remote.sendString(\"Echo: \" + message)\n    }\n    ws.onClose { session, statusCode, reason -> println(\"Closed\") }\n    ws.onError { session, throwable -> println(\"Errored\") }\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Exception Mapping in Javalin\nDESCRIPTION: Examples of mapping exceptions specifically for WebSocket handlers in Javalin. Demonstrates handling NullPointerException and general Exception cases in WebSocket contexts.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_32\n\nLANGUAGE: java\nCODE:\n```\napp.wsException(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.wsException(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsException(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.wsException(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Sessions in Javalin (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates how to invalidate a session in a Javalin application. It calls the invalidate() method on the session object, cleaning up all associated data.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/invalidate\") { ctx ->\n    // if you want to invalidate a session, jetty will clean everything up for you\n    ctx.req().session.invalidate()\n}\n```\n\n----------------------------------------\n\nTITLE: Context Extensions Usage\nDESCRIPTION: Examples of using context extensions in Java to extend Context functionality, showing both traditional approach and the enhanced extension method approach.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> MyMapperUtil.serialize(ctx, myMapper, myObject)); // three args, what happens where?\n```\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> ctx.use(MyMapper.class).serialize(object)); // use MyMapper to serialize object\n```\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> ctx.register(MyMapper.class, new MyMapper(ctx, otherDependency));\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ClassLoader for Javalin in Minecraft Environment\nDESCRIPTION: This Java code snippet demonstrates how to set a custom ClassLoader to resolve dependency missing errors when using Javalin in a Minecraft server plugin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_63\n\nLANGUAGE: java\nCODE:\n```\nClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nThread.currentThread().setContextClassLoader(RemoteAPI.class.getClassLoader());\nJavalin app = Javalin.create().start(PORT);\nThread.currentThread().setContextClassLoader(classLoader);\n```\n\n----------------------------------------\n\nTITLE: Implementing End-to-End Test for Javalin UI in Java\nDESCRIPTION: Java code demonstrating how to set up and run an end-to-end test for a Javalin application using Selenium WebDriver. It includes WebDriverManager setup, ChromeDriver configuration, and a simple assertion on page content.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport io.javalin.Javalin;\nimport io.javalin.testtools.JavalinTest;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class EndToEndTest {\n\n    Javalin app = new JavalinTestingExampleApp(\"someDependency\").javalinApp(); // inject any dependencies you might have\n\n    @Test\n    public void UI_contains_correct_heading() {\n        JavalinTest.test(app, (server, client) -> {\n            WebDriverManager.chromedriver().setup();\n            ChromeOptions options = new ChromeOptions();\n            options.addArguments(\"--headless\");\n            options.addArguments(\"--disable-gpu\");\n            WebDriver driver = new ChromeDriver(options);\n            driver.get(client.getOrigin() + \"/ui\");\n            assertThat(driver.getPageSource()).contains(\"<h1>User UI</h1>\");\n            driver.quit();\n        });\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Main Class with Class Loader Switching\nDESCRIPTION: Java class that demonstrates how to initialize Javalin in a Minecraft plugin by temporarily switching class loaders to overcome the custom class loading mechanism in Bukkit/BungeeCord.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-04-06-javalin-and-minecraft-servers.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// org.bukkit.plugin.java.JavaPlugin is the plugin interface of Bukkit,\n// BungeeCord should be changed to net.md_5.bungee.api.plugin.Plugin.\n// BungeeCord: public class JavalinPlugin extends Plugin\npublic class JavalinPlugin extends JavaPlugin {\n    @Override\n    public void onEnable() {\n        // Temporarily switch the plugin classloader to load Javalin.\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        // BungeeCord:  Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());\n        Thread.currentThread().setContextClassLoader(this.getClassLoader());\n        // Create a Javalin instance.\n        Javalin app = Javalin.create().start(8080);\n        // Restore default loader.\n        Thread.currentThread().setContextClassLoader(classLoader);\n        // The created instance can be used outside the class loader.\n        app.get(\"/\", ctx -> ctx.result(\"Hello World!\"));\n        // log\n        getLogger().info(\"JavalinPlugin is enabled\");\n    }\n\n    @Override\n    public void onDisable() {\n        getLogger().info(\"JavalinPlugin is disabled\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Attributes in WebSocket Handlers\nDESCRIPTION: Shows how to access session attributes in WebSocket handlers, which is useful for authentication in WebSocket connections.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-03-27-javalin-3.8.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/\", ws -> {\n    ws.onConnect(ctx -> {\n        ctx.sessionAttribute(\"current-user\");\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/\") { ws ->\n    ws.onConnect { ctx ->\n        ctx.sessionAttribute<String>(\"current-user\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing cookieStore across servers in Javalin (Kotlin)\nDESCRIPTION: Shows an example of using cookieStore to share data between two different server applications. One server stores data in the cookie, while the other retrieves it, demonstrating cross-server data sharing.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-09-09-javalin-0.5.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\") { ctx ->\n    ctx.cookieStore(\"string\", \"Hello world!\")\n    ctx.cookieStore(\"i\", 42)\n    ctx.cookieStore(\"list\", listOf(\"One\", \"Two\", \"Three\"))\n}\n\nserverTwoApp.get(\"/cookie-reader\") { ctx -> // runs on a different server than serverOneApp\n    val string = ctx.cookieStore<String>(\"string\")\n    val i = ctx.cookieStore<Int>(\"i\")\n    val list = ctx.cookieStore<List<String>>(\"list\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload in Javalin\nDESCRIPTION: Java endpoint that handles file uploads in Javalin. The implementation processes uploaded files from a form and saves them to an 'upload' directory.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-07-28-javalin-html-forms-example.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload-example\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(file -> {\n        FileUtil.streamToFile(file.content(), \"upload/\" + file.filename());\n    });\n    ctx.html(\"Upload successful\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL in Javalin with Kotlin\nDESCRIPTION: Kotlin code to configure the Javalin SSL plugin using PEM certificate and key files. This setup enables SSL on the default secure port 443 and insecure port 80.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval plugin = SslPlugin { conf ->\n    conf.pemFromPath(\"/etc/ssl/certificate.pem\", \"/etc/ssl/privateKey.pem\")\n}\n\nJavalin.create { javalinConfig ->\n    javalinConfig.plugins.register(plugin)\n}.start()\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Routes and Error Handling\nDESCRIPTION: Sets up basic routing for the admin interface including user overview, user profile pages, and API endpoints. Also configures 404 error handling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", new MithrilComponent(\"io.javalin.mithril.demo.HelloWorld\"));\napp.get(\"/users\", new MithrilComponent(\"io.javalin.mithril.demo.UserOverview\"));\napp.get(\"/users/:user-id\", new MithrilComponent(\"io.javalin.mithril.demo.UserProfile\"));\napp.error(404, \"html\", new MithrilComponent(\"io.javalin.mithril.demo.NotFound\");\napp.get(\"/api/users\", UserController::getAll);\napp.get(\"/api/users/:user-id\", UserController::getOne);\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Form Backend in Java\nDESCRIPTION: Java implementation of a contact form using Javalin. Sets up three endpoints for displaying the form, handling form submission, and showing success message. Uses Gmail SMTP for sending emails.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-06-javalin-email-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\nimport org.apache.commons.mail.DefaultAuthenticator;\nimport org.apache.commons.mail.Email;\nimport org.apache.commons.mail.SimpleEmail;\n\nimport static io.javalin.apibuilder.ApiBuilder.get;\nimport static io.javalin.apibuilder.ApiBuilder.post;\nimport static j2html.TagCreator.*;\n\npublic class JavalinEmailExampleApp {\n\n    public static void main(String[] args) {\n\n        Javalin.create(config -> {\n            config.router.apiBuilder(() -> {\n                get(\"/\", ctx -> ctx.html(\n                    form().withAction(\"/contact-us\").withMethod(\"post\").with(\n                        input().withName(\"subject\").withPlaceholder(\"Subject\"),\n                        br(),\n                        textarea().withName(\"message\").withPlaceholder(\"Your message ...\"),\n                        br(),\n                        button(\"Submit\")\n                    ).render()\n                ));\n                post(\"/contact-us\", ctx -> {\n                    Email email = new SimpleEmail();\n                    email.setHostName(\"smtp.googlemail.com\");\n                    email.setSmtpPort(465);\n                    email.setAuthenticator(new DefaultAuthenticator(\"YOUR_EMAIL\", \"YOUR_PASSWORD\"));\n                    email.setSSLOnConnect(true);\n                    email.setFrom(\"YOUR_EMAIL\");\n                    email.setSubject(ctx.formParam(\"subject\"));\n                    email.setMsg(ctx.formParam(\"message\"));\n                    email.addTo(\"RECEIVING_EMAIL\");\n                    email.send();\n                    ctx.redirect(\"/contact-us/success\");\n                });\n                get(\"/contact-us/success\", ctx -> ctx.html(\"Your message was sent\"));\n            });\n        }).start(7070);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Mapping by HTTP Status Code in Javalin\nDESCRIPTION: Examples of mapping HTTP status codes to custom handlers in Javalin. Shows how to handle 404 Not Found errors with custom response messages.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_33\n\nLANGUAGE: java\nCODE:\n```\napp.error(404, ctx -> {\n    ctx.result(\"Generic 404 message\")\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.error(404) { ctx ->\n    ctx.result(\"Generic 404 message\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload in Javalin\nDESCRIPTION: Demonstrates how to handle file uploads using Javalin's file upload API. The code processes uploaded files and saves them to a directory.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-12-javalin-0.4.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { (contentType, content, name, extension) ->\n        FileUtils.copyInputStreamToFile(content, File(\"upload/\" + name))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CORS Plugin Fix in Javalin\nDESCRIPTION: The CORS plugin bug fix replaces 'app.options(\"*\")' with a 'before' handler. This change improves how CORS preflight requests are handled in Javalin applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-08-27-javalin-3.10.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Fixed a bug in CORS plugin (`app.options(\"*\")` has been replaced by a `before`)\n```\n\n----------------------------------------\n\nTITLE: Implementing Update User Endpoint with OpenAPI Annotations\nDESCRIPTION: Shows how to document a PATCH endpoint with path parameters, request body, and multiple response types. Includes error handling scenarios and parameter validation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-03-javalin-openapi-example.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@OpenApi(\n    summary = \"Update user by ID\",\n    operationId = \"updateUserById\",\n    path = \"/users/:userId\",\n    methods = HttpMethod.PATCH,\n    pathParams = {@OpenApiParam(name = \"userId\", type = Integer.class, description = \"The user ID\")},\n    tags = {\"User\"},\n    requestBody = @OpenApiRequestBody(content = {@OpenApiContent(from = NewUserRequest.class)}),\n    responses = {\n        @OpenApiResponse(status = \"204\"),\n        @OpenApiResponse(status = \"400\", content = {@OpenApiContent(from = ErrorResponse.class)}),\n        @OpenApiResponse(status = \"404\", content = {@OpenApiContent(from = ErrorResponse.class)})\n    }\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@OpenApi(\n    summary = \"Update user by ID\",\n    operationId = \"updateUserById\",\n    tags = [\"User\"],\n    pathParams = [OpenApiParam(\"userId\", Int::class, \"The user ID\")],\n    requestBody = OpenApiRequestBody([OpenApiContent(NewUserRequest::class)]),\n    responses = [\n        OpenApiResponse(\"204\"),\n        OpenApiResponse(\"400\", [OpenApiContent(ErrorResponse::class)]),\n        OpenApiResponse(\"404\", [OpenApiContent(ErrorResponse::class)])\n    ],\n    path = \"/users/{userId}\",\n    methods = [HttpMethod.PUT]\n)\n```\n\n----------------------------------------\n\nTITLE: Writing JUnit 5 Test for Course Operations\nDESCRIPTION: Implements a JUnit 5 test class for testing course creation and listing operations. It uses JavalinTest to simulate HTTP requests and asserts the expected responses.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2024-10-20-javalin-hibernate.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nclass CoursesTest {\n\n    Javalin app = JavalinApp.create();\n    JavalinJackson javalinJackson = new JavalinJackson();\n\n    @Test\n    @DisplayName(\"Should save and list courses\")\n    void test1() {\n        JavalinTest.test(app, (server, client) -> {\n            var newCourse = new NewCourse(\"Course1\");\n            var postResponse = client.post(\"/courses\", newCourse);\n            assertEquals(postResponse.code(), HttpStatus.CREATED.getCode());\n            var response = client.get(\"/courses\");\n            assertEquals(response.code(), HttpStatus.OK.getCode());\n            assertNotNull(response.body());\n            ResultCourse result = javalinJackson.fromJsonString(response.body().string(), ResultCourse.class);\n            assertNotNull(result.courses());\n            var firstCourse = result.courses().stream().findFirst();\n            assertTrue(firstCourse.isPresent());\n            assertEquals(firstCourse.get().getName(), newCourse.name());\n        });\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Javalin Handler for Course Operations\nDESCRIPTION: Implements a CourseHandler class with static methods for handling HTTP requests related to courses. It uses the AppHibernate wrapper for database operations and Javalin's Context for request/response handling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2024-10-20-javalin-hibernate.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class CourseHandler {\n\n    public static Handler listAll = (context) -> {\n        var result = AppHibernate.fromTransaction(CourseQueries_::getAllCourses);\n        context.json(new ResultCourse(result));\n    };\n\n    public static Handler save = (context) -> {\n        var newCourse = context.bodyAsClass(NewCourse.class);\n        var result = AppHibernate.fromTransaction(session -> {\n            var insertedId = session.insert(Course.newCourse(newCourse.name()));\n            return session.get(Course.class, insertedId);\n        });\n        context.json(result).status(HttpStatus.CREATED);\n    };\n\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Javalin for Java and Kotlin\nDESCRIPTION: Shows how to handle file uploads in Javalin applications. This example demonstrates processing multiple uploaded files and saving them to the server's filesystem.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-06-javalin-1.0.0-released.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\napp.post(\"/upload\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(file -> {\n        copyInputStreamToFile(file.getContent(), new File(\"upload/\" + file.getName()));\n    });\n});\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { (contentType, content, name, extension) ->\n        FileUtils.copyInputStreamToFile(content, File(\"upload/\" + name))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Validation in Kotlin\nDESCRIPTION: Demonstrates the new validation capabilities in Javalin 4, including custom error messages with arguments and handling validation errors.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-3-4.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.queryParamAsClass<Int>(\"age\")\n    .check({ it >= 18 }, ValidationError(\"AGE_TOO_LOW\", args = mapOf(\"minAge\" to 18)))\n    .get()\n\napp.exception(ValidationException::class.java) { e, ctx ->\n    e.errors // do stuff with errors\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Javalin Project\nDESCRIPTION: Maven dependency configuration for a Javalin project. Includes the javalin-bundle dependency which provides all necessary components for the application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-07-28-javalin-html-forms-example.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.javalin</groupId>\n        <artifactId>javalin-bundle</artifactId>\n        <version>{{site.javalinversion}}</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Javalin Plugin Initialization Process\nDESCRIPTION: Illustrates the order in which plugin initialization methods are called during Javalin setup.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_50\n\nLANGUAGE: java\nCODE:\n```\ninitPlugins.forEach(plugin -> {\n    plugin.init(app);\n    // will throw exception if `init` adds Handler\n});\n\nplugins.forEach(plugin -> plugin.apply(app));\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Javalin (Kotlin)\nDESCRIPTION: Demonstrates how to implement rate limiting in a Javalin endpoint using the NaiveRateLimit utility in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_60\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/\") { ctx ->\n    NaiveRateLimit.requestPerTimeUnit(ctx, 5, TimeUnit.MINUTES) // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\")\n}\n\n// you can overwrite the key-function:\nRateLimitUti.keyFunction = { ctx -> } // uses (ip+method+endpointPath) by default\n```\n\n----------------------------------------\n\nTITLE: SseClient API Reference in Javalin\nDESCRIPTION: Reference for the SseClient API in Javalin, showing methods for sending events with different signatures, handling client disconnection, and accessing the original Context.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nsendEvent(\"myMessage\")                      // calls emit(\"message\", \"myMessage\", noId)\nsendEvent(\"eventName\", \"myMessage\")         // calls emit(\"eventName\", \"myMessage\", noId)\nsendEvent(\"eventName\", \"myMessage\", \"id\")   // calls emit(\"eventName\", \"myMessage\", \"id\")\nonClose(runnable)                           // callback which runs when a client closes its connection\nctx                                         // the Context from when the client connected (to fetch query-params, etc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lifecycle Events in Javalin\nDESCRIPTION: Shows how to set up and handle various lifecycle events in Javalin including server start/stop and handler addition events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create().events(event -> {\n    event.serverStarting(() -> { ... });\n    event.serverStarted(() -> { ... });\n    event.serverStartFailed(() -> { ... });\n    event.serverStopping(() -> { ... });\n    event.serverStopped(() -> { ... });\n    event.handlerAdded(handlerMetaInfo -> { ... });\n    event.wsHandlerAdded(wsHandlerMetaInfo -> { ... });\n});\n\napp.start() // serverStarting -> (serverStarted || serverStartFailed)\napp.stop() // serverStopping -> serverStopped\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin app = Javalin.create().events { event ->\n    event.serverStarting { ... }\n    event.serverStarted { ... }\n    event.serverStartFailed { ... }\n    event.serverStopping { ... }\n    event.serverStopped { ... }\n    event.handlerAdded { handlerMetaInfo -> }\n    event.wsHandlerAdded { wsHandlerMetaInfo -> }\n}\n\napp.start() // serverStarting -> (serverStarted || serverStartFailed)\napp.stop() // serverStopping -> serverStopped\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads\nDESCRIPTION: Demonstrates how to handle file uploads using Javalin's file upload functionality.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-08-19-javalin-2.0.0-released.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(file -> {\n        FileUtil.streamToFile(file.getContent(), \"upload/\" + file.getName())\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { (contentType, content, name, extension) ->\n        FileUtil.streamToFile(content, \"upload/$name\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Mapping in Kotlin\nDESCRIPTION: Demonstrates how to use Javalin's exception mapping feature to handle different types of exceptions in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.exception(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Manager in Java\nDESCRIPTION: Shows how to implement and use Javalin's AccessManager interface for per-endpoint authentication and authorization in Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// Set the access-manager that Javalin should use\napp.accessManager((handler, ctx, permittedRoles) -> {\n    MyRole userRole = getUserRole(ctx);\n    if (permittedRoles.contains(userRole)) {\n        handler.handle(ctx);\n    } else {\n        ctx.status(401).result(\"Unauthorized\");\n    }\n});\n\nRole getUserRole(Context ctx) {\n    // determine user role based on request\n    // typically done by inspecting headers\n}\n\nenum MyRole implements Role {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE;\n}\n\napp.routes(() -> {\n    get(\"/un-secured\",   ctx -> ctx.result(\"Hello\"),   roles(ANYONE));\n    get(\"/secured\",      ctx -> ctx.result(\"Hello\"),   roles(ROLE_ONE));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Cat Facts API with CompletableFuture in Javalin\nDESCRIPTION: Creates an HTTP client method that asynchronously fetches random cat facts from an external API. Returns a CompletableFuture containing the HTTP response.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nprivate static CompletableFuture<HttpResponse<String>> getRandomCatFactFuture() {\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(\"https://catfact.ninja/fact\"))\n        .build();\n    return httpClient.sendAsync(request, ofString());\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun getRandomCatFactFuture(): CompletableFuture<HttpResponse<String>> {\n    val request = HttpRequest.newBuilder()\n        .uri(URI.create(\"https://catfact.ninja/fact\"))\n        .build()\n    return httpClient.sendAsync(request, ofString())\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Session Attributes in Javalin (Java)\nDESCRIPTION: This Java code snippet demonstrates how to write values to a session in a Javalin application. It sets a session attribute named 'my-key' with a string value.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/write\", ctx -> {\n    // values written to the session will be available on all your instances if you use a session db\n    ctx.sessionAttribute(\"my-key\", \"My value\");\n});\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Javalin with Kotlin\nDESCRIPTION: A Kotlin example demonstrating how to handle file uploads in Javalin. It uses destructuring to extract file properties and saves the uploaded files to an 'upload' directory using Apache FileUtils.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-07-28-javalin-0.3.6-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { (contentType, content, name, extension) ->\n        FileUtils.copyInputStreamToFile(content, File(\"upload/\" + name))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Mapping in Kotlin\nDESCRIPTION: Shows how to use Javalin's error mapping feature to handle specific HTTP status codes in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\napp.error(404) { ctx ->\n    ctx.result(\"Generic 404 message\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Redirects in Javalin 1.4.1\nDESCRIPTION: This update addresses issues with redirects introduced in version 1.4.0. The fix involves moving away from HttpServletRequest#sendRedirect() to manual handling, while ensuring execution is halted to prevent 404 errors in certain cases, particularly for redirects from before-filters.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-03-04-javalin-1.4.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nHttpServletRequest#sendRedirect()\n```\n\n----------------------------------------\n\nTITLE: Access Handler Implementation\nDESCRIPTION: Implementation of authentication logic to handle access control based on user roles.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-24-javalin-auth-example.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic static void handleAccess(Context ctx) {\n    var permittedRoles = ctx.routeRoles();\n    if (permittedRoles.contains(Role.ANYONE)) {\n        return; // anyone can access\n    }\n    if (userRoles(ctx).stream().anyMatch(permittedRoles::contains)) {\n        return; // user has role required to access\n    }\n    ctx.header(Header.WWW_AUTHENTICATE, \"Basic\");\n    throw new UnauthorizedResponse();\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun handleAccess(ctx: Context) {\n    val permittedRoles = ctx.routeRoles()\n    when {\n        permittedRoles.contains(Role.ANYONE) -> return\n        ctx.userRoles.any { it in permittedRoles } -> return\n        else -> {\n            ctx.header(Header.WWW_AUTHENTICATE, \"Basic\")\n            throw UnauthorizedResponse();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Before-Handlers in Javalin\nDESCRIPTION: Demonstrates how to add handlers that run before WebSocket handlers execute. Examples include applying before-handlers to all WebSocket endpoints or specific path patterns.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\napp.wsBefore(ws -> {\n    // runs before all WebSocket requests\n});\napp.wsBefore(\"/path/*\", ws -> {\n    // runs before websocket requests to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsBefore { ws ->\n    // runs before all WebSocket requests\n}\napp.wsBefore(\"/path/*\") { ws ->\n    // runs before websocket requests to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Hello World Example\nDESCRIPTION: Single-file Vue component demonstrating template, script, and style sections for a simple Hello World component.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"hello-world\">\n  <h1 class=\"hello-world\">Hello, World!</h1>\n</template>\n<script>\n  app.component(\"hello-world\", {template: \"#hello-world\"});\n</script>\n<style>\n  .hello-world {\n    color: goldenrod;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Access Control in Java\nDESCRIPTION: Example of implementing an AccessManager in Java for role-based authentication and authorization. This enables declarative security at the endpoint level rather than using before-handlers.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Set the access-manager that Javalin should use\napp.accessManager((handler, ctx, permittedRoles) -> {\n    MyRole userRole = getUserRole(ctx);\n    if (permittedRoles.contains(userRole)) {\n        handler.handle(ctx);\n    } else {\n        ctx.status(401).result(\"Unauthorized\");\n    }\n});\n\nRole getUserRole(Context ctx) {\n    // determine user role based on request\n    // typically done by inspecting headers\n}\n\nenum MyRole implements Role {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE;\n}\n\napp.routes(() -> {\n    get(\"/un-secured\",   ctx -> ctx.result(\"Hello\"),   roles(ANYONE));\n    get(\"/secured\",      ctx -> ctx.result(\"Hello\"),   roles(ROLE_ONE));\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Multipart Request in Javalin Context (Java)\nDESCRIPTION: New function added to the Javalin Context to check if a request is multipart. This allows for easier handling of file uploads and form data.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-30-javalin-0.4.2-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nctx.isMultipart()\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Javalin OpenAPI\nDESCRIPTION: Maven dependencies required for Javalin OpenAPI implementation including core Javalin bundle, OpenAPI plugin, Swagger UI and ReDoc plugins.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-03-javalin-openapi-example.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n     <dependency>\n         <groupId>io.javalin</groupId>\n         <artifactId>javalin-bundle</artifactId>\n         <version>{{site.javalinversion}}</version>\n     </dependency>\n     <dependency>\n         <groupId>io.javalin.community.openapi</groupId>\n         <artifactId>javalin-openapi-plugin</artifactId>\n         <version>{{site.javalinversion}}</version>\n     </dependency>\n     <dependency>\n         <groupId>io.javalin.community.openapi</groupId>\n         <artifactId>javalin-swagger-plugin</artifactId>\n         <version>{{site.javalinversion}}</version>\n     </dependency>\n     <dependency>\n         <groupId>io.javalin.community.openapi</groupId>\n         <artifactId>javalin-redoc-plugin</artifactId>\n         <version>{{site.javalinversion}}</version>\n     </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: WsSession Method Reference\nDESCRIPTION: Lists available methods on the WsSession object for handling WebSocket connections including sending messages, accessing query parameters, headers, and path parameters.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nsession.send(\"message\")               // send a string message to session remote (the ws client)\nsession.send(bytes)                   // send a binary message to session remote (the ws client)\nsession.queryString()                 // get query-string from upgrade-request\nsession.queryParam(\"key\")             // get query-param from upgrade-request\nsession.queryParams(\"key\")            // get query-params from upgrade-request\nsession.queryParamMap()               // get query-param-map from upgrade-request\nsession.mapQueryParams(\"k1\", \"k2\")    // map query-params to values (only useful in kotlin)\nsession.anyQueryParamNull(\"k1\", \"k2\") // check if any query-param from upgrade-request is null\nsession.pathParam(\"key\")              // get a path-parameter, ex \"/:id\" -> param(\"id\")\nsession.pathParamMap()                // get all param key/values as map\nsession.header(\"key\")                 // get a header\nsession.headerMap()                   // get all header key/values as map\nsession.host()                        // get request host\n```\n\n----------------------------------------\n\nTITLE: Configuring mTLS in Javalin - Kotlin Implementation\nDESCRIPTION: Kotlin code demonstrating how to configure the SSL plugin with server certificates and CA trust configuration for mTLS.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-01-14-mtls-with-javalin-ssl.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval plugin = SslPlugin { conf ->\n    conf.insecure = false // Disable HTTP\n\n    // Server certificate and private key\n    conf.pemFromPath(\"/etc/ssl/certificate.pem\", \"/etc/ssl/privateKey.pem\") \n\n    conf.withTrustConfig { trustConfig ->\n        // CA certificate\n        trustConfig.certificateFromPath(\"/etc/ssl/ca.crt\")\n    }\n}\n\nJavalin.create { javalinConfig ->\n    javalinConfig.plugins.register(plugin)\n}.start()\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Requests in Javalin\nDESCRIPTION: Example of processing asynchronous requests in Javalin using CompletableFuture. This shows how to return a future result to the client after an asynchronous operation completes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_63\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\n\nfun main() {\n    val app = Javalin.create().start(7000)\n    app.get(\"/\") { ctx -> ctx.future(getFuture()) }\n}\n\n// hopefully your future is less pointless than this:\nprivate fun getFuture() = CompletableFuture<String>().apply {\n    Executors.newSingleThreadScheduledExecutor().schedule({ this.complete(\"Hello World!\") }, 1, TimeUnit.SECONDS)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context Extensions in Java\nDESCRIPTION: Example of Context extensions which allow Java developers to extend the Context object with custom functionality. This enables more fluent API usage compared to traditional utility methods.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> MyMapperUtil.serialize(ctx, myMapper, myObject)); // three args, what happens where?\n```\n\n----------------------------------------\n\nTITLE: Changelog in Markdown\nDESCRIPTION: List of changes and improvements introduced in Javalin 4.6.0, including SSE fixes, validator enhancements, and deprecation notices\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-05-10-javalin-4.6.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Server-sent events were broken by 4.5.0, but they should be working like before now\n* An option to programmatically close the SSE session has been added\n* You can now collect errors from `NullableValidator`\n* You can now call `getOrThrow` on all `Validator`s\n* The `TestUtil` class in the `javalin-testtools` module has been deprecated in favor of `JavalinTest`\n```\n\n----------------------------------------\n\nTITLE: Registering WebSocket Handlers Using an Annotated Class in Java\nDESCRIPTION: Demonstrates how to register WebSocket handlers using an annotated class in Java. The actual implementation of the WebSocketClass is not provided in the snippet.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-09-22-javalin-0.5.1-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket\", WebSocketClass.class);\n```\n\n----------------------------------------\n\nTITLE: Javalin Context Resolvers Configuration\nDESCRIPTION: Shows how to configure custom context resolvers for IP, host, scheme, URL, and full URL in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.contextResolvers(resolvers -> {\n        resolvers.ip = ctx -> \"custom ip\";     // called by Context#ip()\n        resolvers.host = ctx -> \"custom host\"; // called by Context#host()\n        resolvers.scheme = ctx -> \"custom scheme\"; // called by Context#scheme()\n        resolvers.url = ctx -> \"custom url\"; // called by Context#url()\n        resolvers.fullUrl = ctx -> \"custom fullUrl\"; // called by Context#fullUrl()\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.contextResolvers { resolvers ->\n        resolvers.ip = { ctx -> \"custom ip\" }     // called by Context#ip()\n        resolvers.host = { ctx -> \"custom host\" } // called by Context#host()\n        resolvers.scheme = { ctx -> \"custom scheme\" } // called by Context#scheme()\n        resolvers.url = { ctx -> \"custom url\" } // called by Context#url()\n        resolvers.fullUrl { = ctx -> \"custom fullUrl\" } // called by Context#fullUrl()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Shadow Plugin for Dependency Packaging\nDESCRIPTION: Gradle configuration to include the Shadow plugin, which is used to package Javalin and its dependencies into the plugin JAR file.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-04-06-javalin-and-minecraft-servers.md#2025-04-08_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'java'\n    id 'com.github.johnrengelman.shadow' version '7.1.2'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Mode Function\nDESCRIPTION: Custom function to determine if the application is running in development mode based on request context.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nisDevFunction = ctx -> // your code here\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nisDevFunction { /* Your code here */ }\n```\n\n----------------------------------------\n\nTITLE: JSON Future Implementation\nDESCRIPTION: Implementation of the json() method for handling CompletableFuture objects and converting them to JSON responses.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-09-16-javalin-2.2.0-released.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun json(future: CompletableFuture<*>): Context {\n    val mappingFuture = future.thenApply { obj -> JavalinJson.toJsonMapper.map(obj) }\n    return contentType(\"application/json\").result(mappingFuture)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Handlers\nDESCRIPTION: Shows how to set up WebSocket endpoint handlers for connection, message, close, and error events.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-08-19-javalin-2.0.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket\", ws -> {\n    ws.onConnect(session -> System.out.println(\"Connected\"));\n    ws.onMessage((session, message) -> {\n        System.out.println(\"Received: \" + message);\n        session.send(\"Echo: \" + message);\n    });\n    ws.onClose((session, statusCode, reason) -> System.out.println(\"Closed\"));\n    ws.onError((session, throwable) -> System.out.println(\"Errored\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket\") { ws ->\n    ws.onConnect { session -> println(\"Connected\") }\n    ws.onMessage { session, message ->\n        println(\"Received: \" + message)\n        session.send(\"Echo: \" + message)\n    }\n    ws.onClose { session, statusCode, reason -> println(\"Closed\") }\n    ws.onError { session, throwable -> println(\"Errored\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Javalin 4.6.1 Release Information in Markdown\nDESCRIPTION: This snippet contains the header information for the Javalin 4.6.1 release notes, including layout, category, date, version, title, and summary.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-06-05-javalin-4.6.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: news\ncategory: news\ndate: 2022-06-05\nversion: 4.6.1\ntitle: More SSE fixes, as well as some JavalinVue improvements\nsummary: The closing of SSE connections is now more consistent, and reloading data in JavalinVue is easier\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring RouteOverview Plugin in Javalin (Kotlin)\nDESCRIPTION: Shows how to enable and configure the RouteOverview plugin in a Javalin application using Kotlin. It covers setting the overview path, adding role-based authentication, and manually registering the plugin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/routeoverview.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.plugins.enableRouteOverview(path)                      // show all routes on specified path\n    config.plugins.enableRouteOverview(path, roles)               // show all routes on specified path (with auth)\n    config.plugins.register(RouteOverviewPlugin(path))            // show all routes on specified path\n    config.plugins.register(RouteOverviewPlugin(path, roles))     // show all routes on specified path (with auth)\n}}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Plugin in Kotlin\nDESCRIPTION: Demonstrates how to use the SslPlugin in Javalin with Kotlin. It shows setting up SSL/TLS configuration using PEM files.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.registerPlugin(SslPlugin { ssl ->\n        ssl.pemFromPath(\"/path/to/cert.pem\", \"/path/to/key.pem\")\n    })\n}.start()\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates in Javalin\nDESCRIPTION: Example of rendering template files with Javalin, passing a model with data to be used in the template. Javalin supports multiple template engines based on file extension.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_67\n\nLANGUAGE: java\nCODE:\n```\nctx.render(\"/templateFile.ext\", model(\"firstName\", \"John\", \"lastName\", \"Doe\"))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.render(\"/templateFile.ext\", mapOf(\"firstName\" to \"John\", \"lastName\" to \"Doe\"))\n```\n\n----------------------------------------\n\nTITLE: Object Mapping in Javalin\nDESCRIPTION: Demonstrates JSON object mapping for request and response handling with arrays of objects.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2019-06-11-javalin-3.0.0-released.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvar todos = new Todo[];\napp.get(\"/todos\", ctx -> { // map array of Todos to json-string\n    ctx.json(todos);\n});\napp.put(\"/todos\", ctx -> { // map request-body (json) to array of Todos\n    todos = ctx.body(Todo[].class);\n    ctx.status(204);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvar todos = arrayOf<Todo>()\napp.get(\"/todos\") { ctx -> // map array of Todos to json-string\n    ctx.json(todos)\n}\napp.put(\"/todos\") { ctx -> // map request-body (json) to array of Todos\n    todos = ctx.body<Array<Todo>>()\n    ctx.status(204)\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration\nDESCRIPTION: Maven dependency configuration for Javalin project setup including the javalin-bundle dependency.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-24-javalin-auth-example.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.javalin</groupId>\n        <artifactId>javalin-bundle</artifactId>\n        <version>{{site.javalinversion}}</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Registering WebSocket Handlers Using a WebSocket Object in Java\nDESCRIPTION: Shows how to register WebSocket handlers using a WebSocket object that implements Jetty's WebSocketListener interface or uses annotations. The actual implementation of WebSocketObject is not provided in the snippet.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-09-22-javalin-0.5.1-released.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket\", new WebSocketObject());\n```\n\n----------------------------------------\n\nTITLE: Cookie Store Usage Example\nDESCRIPTION: Demonstrates how to use the cookie store functionality across different servers, showing both storage and retrieval of various data types.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\", ctx -> {\n    ctx.cookieStore(\"string\", \"Hello world!\");\n    ctx.cookieStore(\"i\", 42);\n    ctx.cookieStore(\"list\", Arrays.asList(\"One\", \"Two\", \"Three\"));\n});\nserverTwoApp.get(\"/cookie-reader\", ctx -> { // runs on a different server than serverOneApp\n    String string = ctx.cookieStore(\"string\")\n    int i = ctx.cookieStore(\"i\")\n    List<String> list = ctx.cookieStore(\"list\")\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\") { ctx ->\n    ctx.cookieStore(\"string\", \"Hello world!\")\n    ctx.cookieStore(\"i\", 42)\n    ctx.cookieStore(\"list\", listOf(\"One\", \"Two\", \"Three\"))\n}\nserverTwoApp.get(\"/cookie-reader\") { ctx -> // runs on a different server than serverOneApp\n    val string = ctx.cookieStore<String>(\"string\")\n    val i = ctx.cookieStore<Int>(\"i\")\n    val list = ctx.cookieStore<List<String>>(\"list\")\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Case-Insensitive Path Matching Plugin\nDESCRIPTION: This snippet shows how to register the RedirectToLowercasePathPlugin which redirects requests with uppercase/mixcase paths to lowercase paths. This plugin replaces the case-insensitive matching functionality from Javalin 2.X.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-01-01-javalin-3.7.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.registerPlugin(RedirectToLowercasePathPlugin())\n```\n\n----------------------------------------\n\nTITLE: Configuring mTLS in Javalin - Java Implementation\nDESCRIPTION: Java code demonstrating how to configure the SSL plugin with server certificates and CA trust configuration for mTLS.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-01-14-mtls-with-javalin-ssl.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSslPlugin plugin = new SslPlugin(conf -> {\n    conf.insecure = false; // Disable HTTP\n\n    // Server certificate and private key\n    conf.pemFromPath(\"/etc/ssl/server.crt\", \"/etc/ssl/server.key\"); \n\n    conf.withTrustConfig(trustConfig -> {\n        // CA certificate\n        trustConfig.certificateFromPath(\"/etc/ssl/ca.crt\"); \n    });\n});\n\nJavalin.create(javalinConfig -> {\n    javalinConfig.plugins.register(plugin);\n}).start();\n```\n\n----------------------------------------\n\nTITLE: Javalin App Attributes Example\nDESCRIPTION: Demonstrates how to set and access app attributes in both Java and Kotlin using the Context object.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\napp.attribute(\"myValue\", \"foo\");\n\napp.get(\"/attribute\", ctx -> {\n    String myValue = ctx.attribute(\"myValue\");\n    ctx.result(myValue); // -> foo\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.attribute(\"myValue\", \"foo\")\n\napp.get(\"/attribute\") { ctx ->\n    val myValue: String = ctx.appAttribute(\"myValue\")\n    ctx.result(myValue) // -> foo\n}\n```\n\n----------------------------------------\n\nTITLE: Functional Testing Javalin Application in Kotlin\nDESCRIPTION: This code snippet shows how to write functional tests for a Javalin application in Kotlin using JavalinTest. It tests the GET endpoint for fetching users.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.plugin.json.JavalinJackson\nimport io.javalin.testtools.JavalinTest\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.Test\n\nclass FunctionalTest {\n\n    private val app = JavalinTestingExampleApp(\"someDependency\").app // inject any dependencies you might have\n    private val usersJson = JavalinJackson().toJsonString(UserController.users)\n\n    @Test\n    fun `GET to fetch users returns list of users`() = JavalinTest.test(app) { server, client ->\n        assertThat(client.get(\"/users\").code).isEqualTo(200)\n        assertThat(client.get(\"/users\").body?.string()).isEqualTo(usersJson)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: User Controller Implementation\nDESCRIPTION: Implementation of a UserController class with CRUD operations for managing user data, including dummy data initialization and REST endpoint handlers.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-24-javalin-auth-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.http.Context;\nimport java.util.*;\n\npublic class UserController {\n    public record User(String name, String email) {}\n\n    private static final Map<String, User> users;\n\n    static {\n        var tempMap = Map.of(\n            randomId(), new User(\"Alice\", \"alice@alice.kt\"),\n            randomId(), new User(\"Bob\", \"bob@bob.kt\"),\n            randomId(), new User(\"Carol\", \"carol@carol.kt\"),\n            randomId(), new User(\"Dave\", \"dave@dave.kt\")\n        );\n        users = new HashMap<>(tempMap);\n    }\n\n    public static void getAllUserIds(Context ctx) {\n        ctx.json(users.keySet());\n    }\n\n    public static void createUser(Context ctx) {\n        users.put(randomId(), ctx.bodyAsClass(User.class));\n    }\n\n    public static void getUser(Context ctx) {\n        ctx.json(users.get(ctx.pathParam(\"userId\")));\n    }\n\n    public static void updateUser(Context ctx) {\n        users.put(ctx.pathParam(\"userId\"), ctx.bodyAsClass(User.class));\n    }\n\n    public static void deleteUser(Context ctx) {\n        users.remove(ctx.pathParam(\"userId\"));\n    }\n\n    private static String randomId() {\n        return UUID.randomUUID().toString();\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.http.Context\nimport io.javalin.http.bodyAsClass\nimport java.util.*\n\nobject UserController {\n\n    private data class User(val name: String = \"\", val email: String = \"\")\n\n    private val users = hashMapOf(\n        randomId() to User(name = \"Alice\", email = \"alice@alice.kt\"),\n        randomId() to User(name = \"Bob\", email = \"bob@bob.kt\"),\n        randomId() to User(name = \"Carol\", email = \"carol@carol.kt\"),\n        randomId() to User(name = \"Dave\", email = \"dave@dave.kt\")\n    )\n\n    fun getAllUserIds(ctx: Context) {\n        ctx.json(users.keys)\n    }\n\n    fun createUser(ctx: Context) {\n        users[randomId()] = ctx.bodyAsClass()\n    }\n\n    fun getUser(ctx: Context) {\n        ctx.json(users[ctx.pathParam(\"userId\")]!!)\n    }\n\n    fun updateUser(ctx: Context) {\n        users[ctx.pathParam(\"userId\")] = ctx.bodyAsClass()\n    }\n\n    fun deleteUser(ctx: Context) {\n        users.remove(ctx.pathParam(\"userId\"))\n    }\n\n    private fun randomId() = UUID.randomUUID().toString()\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files in Javalin\nDESCRIPTION: Demonstrates advanced configuration for static file serving in Javalin, including setting hosted path, directory location, compression options, security checks, custom headers, and MIME types.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n  config.staticFiles.add(staticFiles -> {\n    staticFiles.hostedPath = \"/\";                   // change to host files on a subpath, like '/assets'\n    staticFiles.directory = \"/public\";              // the directory where your files are located\n    staticFiles.location = Location.CLASSPATH;      // Location.CLASSPATH (jar) or Location.EXTERNAL (file system)\n    staticFiles.precompress = false;                // if the files should be pre-compressed and cached in memory (optimization)\n    staticFiles.aliasCheck = null;                  // you can configure this to enable symlinks (= ContextHandler.ApproveAliases())\n    staticFiles.headers = Map.of(...);              // headers that will be set for the files\n    staticFiles.skipFileFunction = req -> false;    // you can use this to skip certain files in the dir, based on the HttpServletRequest\n    staticFiles.mimeTypes.add(mimeType, ext);       // you can add custom mimetypes for extensions\n  });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n  config.staticFiles.add { staticFiles ->\n    staticFiles.hostedPath = \"/\"                    // change to host files on a subpath, like '/assets'\n    staticFiles.directory = \"/public\"               // the directory where your files are located\n    staticFiles.location = Location.CLASSPATH       // Location.CLASSPATH (jar) or Location.EXTERNAL (file system)\n    staticFiles.precompress = false                 // if the files should be pre-compressed and cached in memory (optimization)\n    staticFiles.aliasCheck = null                   // you can configure this to enable symlinks (= ContextHandler.ApproveAliases())\n    staticFiles.headers = mapOf(...)                // headers that will be set for the files\n    staticFiles.skipFileFunction = { req -> false } // you can use this to skip certain files in the dir, based on the HttpServletRequest\n    staticFiles.mimeTypes.add(mimeType, ext)        // you can add custom mimetypes for extensions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sureness Exception Handling in Javalin\nDESCRIPTION: Java code that adds exception handlers to Javalin to handle different types of authentication and authorization errors thrown by Sureness, with appropriate HTTP status codes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-04-16-javalin-sureness-example.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// when auth error , the exception throw, you should use app.exception() catch it and define return\napp.exception(UnknownAccountException.class, (e, ctx) -> {\n    log.debug(\"this request user account not exist\");\n    ctx.status(401).result(e.getMessage());\n}).exception(IncorrectCredentialsException.class, (e, ctx) -> {\n    log.debug(\"this account credential is incorrect\");\n    ctx.status(401).result(e.getMessage());\n}).exception(ExpiredCredentialsException.class, (e, ctx) -> {\n    log.debug(\"this account credential expired\");\n    ctx.status(401).result(e.getMessage());\n}).exception(NeedDigestInfoException.class, (e, ctx) -> {\n    log.debug(\"you should try once again with digest auth information\");\n    ctx.status(401).header(\"WWW-Authenticate\", e.getAuthenticate());\n}).exception(UnauthorizedException.class, (e, ctx) -> {\n    log.debug(\"this account can not access this resource\");\n    ctx.status(403).result(e.getMessage());\n}).exception(Exception.class, (e, ctx) -> {\n    log.error(\"other exception happen: \", e);\n    ctx.status(500).result(e.getMessage());\n});\n```\n\n----------------------------------------\n\nTITLE: Sharing State with Vue in Javalin (Java)\nDESCRIPTION: Shows how to share server-side state with Vue components using JavalinVue's stateFunction.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_68\n\nLANGUAGE: java\nCODE:\n```\nJavalinVue.stateFunction = { ctx -> mapOf(\"user\" to getUser(ctx)) }\n```\n\n----------------------------------------\n\nTITLE: Testing GET request to simulated API (Kotlin)\nDESCRIPTION: This test demonstrates how to use Javalin to simulate a GET request to an external API. It sets up a fake endpoint, calls the method under test, and asserts the result.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-07-11-using-javalin-as-http-simulator.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun `gets a user profile by id`() {\n    fakeProfile = Javalin.create().get(\"profile/abc\") {\n        it.json(mapOf(\"id\" to \"abc\", \"email\" to \"x123@gmail.com\"))\n    }.start(1234)\n    val profileGateway = ProfileGateway(apiUrl = \"http://localhost:1234\")\n\n    val result = profileGateway.fetchProfile(\"abc\")\n\n    assertEquals(Profile(id = \"abc\", email = \"x123@gmail.com\".toEmail()), result)\n}\n```\n\n----------------------------------------\n\nTITLE: GraalVM Reflection Configuration JSON\nDESCRIPTION: This JSON configuration file specifies classes that need to be registered for reflection in GraalVM. It includes Jetty, Slf4j, Jackson, and custom classes to ensure proper functionality in the native image.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"[Lorg.eclipse.jetty.servlet.ServletMapping;\",\n    \"allDeclaredFields\": true,\n    \"allPublicFields\": true,\n    \"allDeclaredMethods\": true,\n    \"allPublicMethods\": true\n  },\n  {\n    \"name\": \"org.slf4j.impl.StaticLoggerBinder\",\n    \"allDeclaredFields\": true,\n    \"allPublicFields\": true,\n    \"allDeclaredMethods\": true,\n    \"allPublicMethods\": true\n  },\n  {\n    \"name\": \"com.fasterxml.jackson.databind.ObjectMapper\",\n    \"allDeclaredFields\": true,\n    \"allPublicFields\": true,\n    \"allDeclaredMethods\": true,\n    \"allPublicMethods\": true\n  },\n  {\n    \"name\": \"de.nerden.samples.graal.Test\",\n    \"allDeclaredFields\": true,\n    \"allPublicFields\": true,\n    \"allDeclaredMethods\": true,\n    \"allPublicMethods\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Files in Javalin Context (Java)\nDESCRIPTION: New function added to the Javalin Context to render and serve markdown files. This simplifies the process of serving dynamic content from markdown sources.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-30-javalin-0.4.2-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nctx.renderMarkdown(\"/path/to/markdown-file.md\")\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Mapping in Java\nDESCRIPTION: Shows how to implement and configure a custom JsonMapper in Javalin 4, replacing the previous JavalinJson static methods.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-3-4.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nconfig.jsonMapper(myJsonMapper);\n```\n\n----------------------------------------\n\nTITLE: Enabling External Static Resources in Javalin\nDESCRIPTION: This code snippet demonstrates how to enable external static resources in Javalin. It uses the app.enableStaticFiles() method with a folder path and the Location.EXTERNAL parameter.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-06-18-javalin-0.3.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\napp.enableStaticFiles(\"/folder\", Location.EXTERNAL)\n```\n\n----------------------------------------\n\nTITLE: Context Extensions Example\nDESCRIPTION: Shows how to implement and use context extensions in Javalin, providing a more elegant way to extend Context functionality compared to utility classes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> MyMapperUtil.serialize(ctx, myMapper, myObject)); // three args, what happens where?\n```\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> ctx.use(MyMapper.class).serialize(object)); // use MyMapper to serialize object\n```\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> ctx.register(MyMapper.class, new MyMapper(ctx, otherDependency));\n```\n\n----------------------------------------\n\nTITLE: Using App Attributes in Java and Kotlin\nDESCRIPTION: This example shows how to use App Attributes to share data across the application. Values are registered on the Javalin instance and can be accessed through any Context object via the appAttribute() method.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\napp.attribute(\"myValue\", \"foo\");\n\napp.get(\"/attribute\", ctx -> {\n    String myValue = ctx.appAttribute(\"myValue\");\n    ctx.result(myValue); // -> foo\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.attribute(\"myValue\", \"foo\")\n\napp.get(\"/attribute\") { ctx ->\n    val myValue: String = ctx.appAttribute(\"myValue\")\n    ctx.result(myValue) // -> foo\n}\n```\n\n----------------------------------------\n\nTITLE: Java Javalin App with jte Integration\nDESCRIPTION: Java implementation of a Javalin application that initializes jte and renders a template\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage app;\n\npublic class App {\n    public static void main(String[] args) {\n        JavalinJte.init();\n        Javalin app = Javalin.create().start(7000);\n\n        app.get(\"/\", ctx -> ctx.render(\"hello.jte\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependencies for Javalin with GraalVM\nDESCRIPTION: Required Gradle dependencies for the Javalin application, including Jackson for JSON serialization, SLF4J for logging, and the GraalVM SDK for native compilation support.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ncompile group: 'io.javalin', name: 'javalin', version: '2.2.0'\ncompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'\ncompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'\ncompile group: 'org.graalvm', name: 'graal-sdk', version: '1.0.0-rc6'\n```\n\n----------------------------------------\n\nTITLE: Adding SSL Plugin Dependency in Maven and Gradle\nDESCRIPTION: Shows how to add the SSL Plugin dependency to a project using Maven or Gradle build systems.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/ssl-helpers.md#2025-04-08_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<dependency>\n    <groupId>io.javalin.community.ssl</groupId>\n    <artifactId>ssl-plugin</artifactId>\n    <version>{{site.javalinversion}}</version>\n</dependency>\n```\n\nLANGUAGE: java\nCODE:\n```\nimplementation group: 'io.javalin.community.ssl', name: 'ssl-plugin', version: '{{site.javalinversion}}'\n```\n\n----------------------------------------\n\nTITLE: Building and Running GraalVM Native Image with Docker\nDESCRIPTION: Dockerfile for building a Javalin application with GraalVM and creating a minimal container with only the native executable. It uses multi-stage builds to separate the build environment from the runtime environment.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM birdy/graalvm:latest\nWORKDIR /tmp/build\nENV GRADLE_USER_HOME /tmp/build/.gradle\n\nADD . /tmp/build\nRUN ./gradlew build fatJar\nRUN native-image -jar /tmp/build/build/libs/graal-javalin-all-1.0-SNAPSHOT.jar -H:ReflectionConfigurationFiles=reflection.json -H:+JNI \\\n  -H:Name=graal-javalin --static --delay-class-initialization-to-runtime=io.javalin.json.JavalinJson\n\nFROM scratch\nCOPY --from=0 /tmp/build/graal-javalin /\nENTRYPOINT [\"/graal-javalin\"]\n```\n\n----------------------------------------\n\nTITLE: Registering Plugins in Javalin for Java and Kotlin\nDESCRIPTION: Demonstrates how to register a plugin in Javalin using both Java and Kotlin syntax. It shows the plugin system that requires plugin authors to extend a Plugin abstract class.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.registerPlugin(new ExamplePlugin(exampleConfig -> {\n        exampleConfig.exampleSetting = \"example\";\n    }));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.registerPlugin(ExamplePlugin { exampleConfig ->\n        exampleConfig.exampleSetting = \"example\"\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of Plugin Without Configuration\nDESCRIPTION: Example of implementing a plugin without configuration in Javalin 6.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class NoConfigPlugin extends Plugin<Void> {\n    // optionally override any of the methods in the Plugin class\n    // if you try to access pluginConfig, you will get an exception\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nopen class NoConfigPlugin : Plugin<Void>() {\n    // optionally override any of the methods in the Plugin class\n    // if you try to access pluginConfig, you will get an exception\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Java POJO for Sensor Data\nDESCRIPTION: This Java class represents the sensor data model with various attributes such as make and model, destination year, flux capacitor readings, last check-in time, and safety belt status. It implements the Serializable interface for JSON compatibility.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-03-25-serving-protobuf-with-javalin.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage app.model.objects;\n \nimport java.sql.Timestamp;\nimport java.util.List;\n \npublic class SensorData implements Serializable {\n\n    private String makeAndModel;\n    private int destinationYear;\n    private List<Double> fluxCapacitorReadings;\n    private Timestamp lastCheckIn;\n    private boolean safetyBeltsOn;\n\n    public String getMakeAndModel() { return makeAndModel; }\n    public void setMakeAndModel(String makeAndModel) { this.makeAndModel = makeAndModel; }\n\n    public List<Double> getFluxCapacitorReadings() { return fluxCapacitorReadings; }\n    public void setFluxCapacitorReadings(List<Double> fluxCapacitorReadings) { this.fluxCapacitorReadings = fluxCapacitorReadings; }\n\n    public int getDestinationYear() { return destinationYear; }\n    public void setDestinationYear(int destinationYear) { this.destinationYear = destinationYear; }\n\n    public Timestamp getLastCheckIn() { return lastCheckIn; }\n    public void setLastCheckIn(Timestamp lastCheckIn) { this.lastCheckIn = lastCheckIn; }\n\n    public boolean isSafetyBeltsOn() { return safetyBeltsOn; }\n    public void setSafetyBeltsOn(boolean safetyBeltsOn) { this.safetyBeltsOn = safetyBeltsOn; }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Request Logging Output Format\nDESCRIPTION: Shows the minimal log output format for request logging, including HTTP method, status code, and execution time.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-19-javalin-0.4.1-released.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nINFO - POST -> 200 (0.16 ms)\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard URL Parameters with Splats in Javalin\nDESCRIPTION: Demonstrates how to use wildcard parameters (splats) in URL routes to capture arbitrary path segments. The splat values can be accessed using Context.splat() method with a numeric index.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2021-01-19-javalin-3.13.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/hello/*/and/*\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/hello/*/and/*\") { ctx ->\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1))\n}\n```\n\n----------------------------------------\n\nTITLE: Updating module-info.java for Dedicated Provider in Java\nDESCRIPTION: Shows how to modify the module-info.java file to use a dedicated provider class for the PersonReader service.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nmodule org.example.services {\n    ...\n\n    // provides PersonReader with InMemoryPersonReader;\n\n    provides PersonReader with PersonReaderProvider;\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Javalin-based Omegle Clone\nDESCRIPTION: Maven dependency configuration for including the Javalin bundle, which contains Javalin, Jetty, Jackson, and Logback libraries necessary for the project.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2024-01-13-omeglin/2023-12-30-building-omegle-in-javalin.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin-bundle</artifactId>\n    <version>{{site.javalinversion}}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic GZIP Compression in Javalin\nDESCRIPTION: Demonstrates how to enable dynamic GZIP compression for responses over 1500 bytes in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-18-javalin-1.1.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Added `enableDynamicGzip()` option to gzip any response over 1500 bytes\n```\n\n----------------------------------------\n\nTITLE: Setting Up Proxy Servlet in Javalin\nDESCRIPTION: Demonstrates how to configure a proxy servlet using Jetty's AsyncProxyServlet for forwarding requests.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_54\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.jetty.contextHandlerConfig(sch -> {\n\tServletHolder proxyServlet = new ServletHolder(AsyncProxyServlet.Transparent.class);\n\tproxyServlet.setInitParameter(\"proxyTo\", \"https://javalin.io/\");\n\tproxyServlet.setInitParameter(\"prefix\", \"/proxy\");\n\tsch.addServlet(proxyServlet, \"/proxy/*\");\n    });\n}).start(7000);\n```\n\n----------------------------------------\n\nTITLE: Mapping SensorData to Byte Array for API Response\nDESCRIPTION: RouteMapper class with a method to convert SensorData object to a byte array for use in API responses. This is used to prepare the protobuf data for transmission over HTTP.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-03-25-serving-protobuf-with-javalin.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage app.model.mappers;\n\n\nimport app.model.objects.SensorData;\n\npublic class RouteMapper {\n    \n    public static byte[] getSensorDataResponse(SensorData data){\n        return data.toBuffer().toByteArray();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Profile Component\nDESCRIPTION: Implements a Mithril component that displays detailed information for a specific user.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass UserProfile {\n    constructor(vnode) {\n    }\n    oninit(vnode) {\n        return UserModel.fetchOne(window.javalin.pathParams[\"user-id\"]);\n    }\n\n    view(vnode) {\n        return m(AppFrame,\n            {content:\n                UserModel.current ? m(\"dl\", [\n                    m(\"dt\", \"User ID\"),\n                    m(\"dd\", UserModel.current.id),\n                    m(\"dt\", \"User Name\"),\n                    m(\"dd\", UserModel.current.name),\n                    m(\"dt\", \"Email\"),\n                    m(\"dd\", UserModel.current.email),\n                    m(\"dt\", \"Birthday\"),\n                    m(\"dd\", UserModel.current.userDetails.dateOfBirth),\n                    m(\"dt\", \"Salary\"),\n                    m(\"dd\", UserModel.current.userDetails.salary)\n                ]) : null\n            }\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Access Object for String Management\nDESCRIPTION: DAO class that manages an in-memory collection of StringData objects with methods for adding and removing items.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringDao {\n\n    val strings: MutableList<StringData> = mutableListOf() // Server starts with empty list\n\n    fun addStringData(data: StringData) {\n        strings.add(data)\n    }\n\n    fun removeStringData(stringId: Long): Boolean = strings.removeIf { it.id == stringId }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Javalin Plugin\nDESCRIPTION: Examples showing how to register a plugin with the Javalin application. This is done through the JavalinConfig.registerPlugin method in the Javalin.create lambda.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/how-to.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create { config ->\n    config.registerPlugin(Ratey())\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n    config.registerPlugin(new Ratey());\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Template Engines in Javalin\nDESCRIPTION: Shows how to register template engines in Javalin, including both built-in Pebble engine registration and custom renderer implementation.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nJavalinRenderer.register(JavalinPebble.INSTANCE, \".peb\", \".pebble\");\n\nJavalinRenderer.register((filePath, model) -> {\n    return MyRenderer.render(filePath, model);\n}, \".ext\");\n```\n\n----------------------------------------\n\nTITLE: Configuring API Module Descriptor\nDESCRIPTION: JPMS module descriptor for API module with required external and internal dependencies\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nmodule org.example.api {\n    // For Javalin, the ObjectMapper and the Logger & LoggerFactory to work we need to add these require statements\n    requires io.javalin;\n    requires com.fasterxml.jackson.databind;\n    requires org.slf4j;\n\n    // And since we're working with the InMemoryPersonReader we have to add this require statement as well\n    requires org.example.services;\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Context Extension Implementation\nDESCRIPTION: Shows the improved syntax for using context extensions, making the code more readable and maintainable.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-05-21-javalin-1.7.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> ctx.use(MyMapper.class).serialize(object)); // use MyMapper to serialize object\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Handlers in Java\nDESCRIPTION: Example of setting up before, get, and after handlers in a Javalin application. This configuration is used to demonstrate the improved request logging capabilities.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-10-22-javalin-0.5.4-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> {...});\napp.get(\"/matched/:param\", ctx -> ctx.result(ctx.matchedPath()));\napp.after(ctx -> {...});\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies for Javalin Application\nDESCRIPTION: XML snippet showing the required dependencies for the Javalin application including Javalin, SLF4J, and Jackson.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-12-javalin-tracing-example.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.javalin</groupId>\n        <artifactId>javalin</artifactId>\n        <version>{{site.javalinThreeVersion}}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-simple</artifactId>\n        <version>1.7.30</version>\n    </dependency>\n     <dependency>\n         <groupId>com.fasterxml.jackson.core</groupId>\n         <artifactId>jackson-databind</artifactId>\n         <version>2.11.2</version>\n     </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Handlers in Javalin\nDESCRIPTION: Shows how to implement before handlers in Javalin, which run before all requests or specific paths.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> {\n    // runs before all requests\n});\napp.before(\"/path/*\", ctx -> {\n    // runs before request to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.before { ctx ->\n    // runs before all requests\n}\napp.before(\"/path/*\") { ctx ->\n    // runs before request to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Javalin Request Lifecycle Overview\nDESCRIPTION: Provides an overview of the Javalin request lifecycle, showing the order of execution for various handlers and hooks.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_58\n\nLANGUAGE: java\nCODE:\n```\nJavalin#before              // runs first, can throw exception (which will skip any endpoint handlers)\nJavalin#get/post/patch/etc  // runs second, can throw exception\nJavalin#error               // runs third, can throw exception\nJavalin#after               // runs fourth, can throw exception\nJavalin#exception           // runs any time a handler throws (cannot throw exception)\nJavalinConfig#requestLogger // runs after response is written to client\nJavalinConfig#accessManager // wraps all your endpoint handlers in a lambda of your choice\n```\n\n----------------------------------------\n\nTITLE: Request Lifecycle Handlers\nDESCRIPTION: Shows the sequence and types of request lifecycle handlers available in Javalin, including before/after handlers, error handling, and request logging.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-09-13-javalin-4.0.0-released.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nJavalin#before              // runs first, can throw exception (which will skip any endpoint handlers)\nJavalin#get/post/patch/etc  // runs second, can throw exception\nJavalin#after               // runs third, can throw exception\nJavalin#error               // runs fourth, can throw exception\nJavalin#exception           // runs any time a handler throws (cannot throw exception)\nJavalinConfig#requestLogger // runs after response is written to client\nJavalinConfig#accessManager // wraps all your endpoint handlers in a lambda of your choice\n```\n\n----------------------------------------\n\nTITLE: Final API Module Descriptor with Kotlin Dependency\nDESCRIPTION: Complete module descriptor for the API module including the Kotlin standard library dependency required by Javalin. This resolves the NoClassDefFoundError for Kotlin classes that occurs because Javalin is not fully modularized.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nmodule org.example.api {\n    requires io.javalin;\n    requires com.fasterxml.jackson.databind;\n    requires org.slf4j;\n    requires kotlin.stdlib;                // <-- add this line\n\n    requires org.example.services;\n\n    uses org.example.services.api.PersonReader;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Controller with Dependency Injection\nDESCRIPTION: UserController class that handles HTTP requests, demonstrates Guice dependency injection with @Inject annotation and uses the UserService for business logic.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.kidbank.user;\n\nimport io.javalin.Context;\nimport io.kidbank.user.services.UserService;\n\nimport javax.inject.Inject;\nimport javax.inject.Singleton;\n\n@Singleton\nclass UserController {\n    private UserService userService;\n\n    @Inject\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n\n    public void index(Context ctx) {\n        ctx.json(userService.getAllUsersUppercase());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Startup with Entrypoint Resolution\nDESCRIPTION: Startup class that resolves and boots the appropriate application entrypoint based on the provided EntrypointType. Uses Guice map injection to collect all available entrypoints.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.inject.Inject;\nimport io.alzuma.AppEntrypoint;\nimport io.alzuma.EntrypointType;\n\nimport javax.inject.Singleton;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.Optional;\n\n@Singleton\npublic class Startup {\n    @Inject(optional = true)\n    private Map<EntrypointType, AppEntrypoint> entrypoints = Collections.emptyMap();\n\n    public void boot(EntrypointType entrypointType, String[] args) {\n        var entryPoint = Optional.ofNullable(entrypoints.get(entrypointType));\n        entryPoint.orElseThrow(() -> new RuntimeException(\"Entrypoint not defined\")).boot(args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Javalin Plugin without Configuration\nDESCRIPTION: A basic implementation of a rate limiting plugin named 'Ratey' that has no configuration and no context extension. It limits all requests after a hardcoded count of 100.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/how-to.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Ratey : Plugin<Void>() {\n    var counter = 0\n\n    override fun onInitialize(config: JavalinConfig) {\n        config.router.mount { router ->\n            router.before { ctx ->\n                if (counter++ > 100) {\n                    throw TooManyRequestsResponse()\n                }\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nclass Ratey extends Plugin<Void> {\n    int counter;\n    @Override\n    public void onInitialize(JavalinConfig config) {\n        config.router.mount(router -> {\n            router.before(ctx -> {\n                if (counter++ > 100) {\n                    throw new TooManyRequestsResponse();\n                }\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Javalin 6\nDESCRIPTION: Example of defining routes using the config.router.apiBuilder in Javalin 6, replacing the Javalin#routes() method.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.createAndStart(config -> {\n    config.router.apiBuilder(() -> {\n        get(\"/hello\", ctx -> ctx.result(\"Hello World\"));\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.createAndStart { config ->\n    config.router.apiBuilder {\n        get(\"/hello\") { ctx -> ctx.result(\"Hello World\") }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the API Subproject\nDESCRIPTION: Gradle commands to run the api subproject, demonstrating the initial setup is working.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Linux: invoke Gradle's 'run' task that comes with the 'application' plugin\n./gradlew :api:run\n\n# Windows\n.\\gradlew.bat :api:run\n\n# You should see an output like\n> Task :api:run\nAPI's kind of alive already :-)\n```\n\n----------------------------------------\n\nTITLE: Configuring GSON JSON Mapper in Javalin\nDESCRIPTION: Shows how to replace the default Jackson JSON mapper with GSON using JavalinJsonPlugin configuration methods.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-05-21-javalin-1.7.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nGson gson = new GsonBuilder().create();\nJavalinJsonPlugin.setJsonToObjectMapper(gson::fromJson);\nJavalinJsonPlugin.setObjectToJsonMapper(gson::toJson);\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven POM for a Javalin Project\nDESCRIPTION: A minimal Maven Project Object Model (POM) configuration file for a Javalin project. This XML defines the project coordinates and includes the Javalin dependency.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-24-javalin-maven-example.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<project>\n    <!-- model version - always 4.0.0 for Maven 2.x POMs -->\n    <modelVersion>4.0.0</modelVersion>\n\n    <!-- project coordinates - values which uniquely identify this project -->\n    <groupId>com.mygroup</groupId>\n    <artifactId>my-javalin-project</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n\n    <!-- library dependencies -->\n    <dependencies>\n        <dependency>\n            <groupId>io.javalin</groupId>\n            <artifactId>javalin</artifactId>\n            <version>{{site.javalinversion}}</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Multiple Extensions Registration\nDESCRIPTION: Demonstrates how to register multiple extensions with various dependencies in a single extension class.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-05-21-javalin-1.7.0-released.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nVelocityEngine velocityEngine = new VelocityEngine();\nGson gson = new GsonBuilder().create();\n\napp.before(ctx -> ctx.register(Ext.class, new Ext(ctx, gson, velocityEngine)));\n```\n\n----------------------------------------\n\nTITLE: Implementing JavalinRenderer Class in Java\nDESCRIPTION: Java implementation of a custom FileRenderer that can register and use multiple template engines based on file extensions.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nclass JavalinRenderer implements FileRenderer {\n    private Map<String, FileRenderer> renderers = new HashMap<>();\n    public JavalinRenderer register(String extension, FileRenderer renderer) {\n        renderers.put(extension, renderer);\n        return this;\n    }\n\n    @Override\n    public String render(String filePath, Map<String, ? extends Object> model, Context context) {\n        String extension = filePath.substring(filePath.lastIndexOf(\".\") + 1);\n        return renderers.get(extension).render(filePath, model, context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CookieStore for Cross-Server Data Exchange in Javalin\nDESCRIPTION: Demonstrates how to store and retrieve data using Javalin's CookieStore feature. The example shows storing strings, integers, and lists on one server and retrieving them on another server using the same cookie.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\", ctx -> {\n    ctx.cookieStore(\"string\", \"Hello world!\");\n    ctx.cookieStore(\"i\", 42);\n    ctx.cookieStore(\"list\", Arrays.asList(\"One\", \"Two\", \"Three\"));\n});\nserverTwoApp.get(\"/cookie-reader\", ctx -> { // runs on a different server than serverOneApp\n    String string = ctx.cookieStore(\"string\")\n    int i = ctx.cookieStore(\"i\")\n    List<String> list = ctx.cookieStore(\"list\")\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\") { ctx ->\n    ctx.cookieStore(\"string\", \"Hello world!\")\n    ctx.cookieStore(\"i\", 42)\n    ctx.cookieStore(\"list\", listOf(\"One\", \"Two\", \"Three\"))\n}\nserverTwoApp.get(\"/cookie-reader\") { ctx -> // runs on a different server than serverOneApp\n    val string = ctx.cookieStore<String>(\"string\")\n    val i = ctx.cookieStore<Int>(\"i\")\n    val list = ctx.cookieStore<List<String>>(\"list\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Symlinks in Java\nDESCRIPTION: Configuration example for setting up alias checking to resolve symlinks for static files using ContextHandler.AliasCheck interface\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-11-14-javalin-3.12.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconfig.aliasCheckForStaticFiles = ContextHandler.AliasCheck { path, resource ->\n    /* Your predicate here */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AtLeastEighteenFilter in Java\nDESCRIPTION: Implements the PersonFilter interface to filter persons who are at least 18 years old.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_26\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.services.filter;\n\nimport org.example.models.Person;\nimport org.example.services.api.PersonFilter;\n\npublic class AtLeastEighteenFilter implements PersonFilter {\n    @Override\n    public boolean filter(Person p) {\n        return p.getAge() >= 18;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Entrypoint for Javalin\nDESCRIPTION: WebEntrypoint class that implements AppEntrypoint interface, configures Javalin server, and binds all registered routes. It uses Guice's Set injection to collect all routing components.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage io.kidbank;\n\nimport com.google.inject.Inject;\nimport io.alzuma.AppEntrypoint;\nimport io.alzuma.Routing;\nimport io.javalin.Javalin;\n\nimport javax.inject.Singleton;\nimport java.util.Collections;\nimport java.util.Set;\n\n@Singleton\nclass WebEntrypoint implements AppEntrypoint {\n    private Javalin app;\n\n    @Inject(optional = true)\n    private Set<Routing> routes = Collections.emptySet();\n\n    @Inject\n    public WebEntrypoint(Javalin app) {\n        this.app = app;\n    }\n\n    @Override\n    public void boot(String[] args) {\n        bindRoutes();\n        app.port(7000);\n        app.start();\n    }\n\n    private void bindRoutes() {\n        routes.forEach(r -> r.bindRoutes());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GSON JSON Mapper in Javalin\nDESCRIPTION: Shows how to implement a custom JSON mapper using GSON instead of the default Jackson mapper.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_53\n\nLANGUAGE: java\nCODE:\n```\nGson gson = new GsonBuilder().create();\nJsonMapper gsonMapper = new JsonMapper() {\n    @Override\n    public String toJsonString(@NotNull Object obj, @NotNull Type type) {\n        return gson.toJson(obj, type);\n    }\n\n    @Override\n    public <T> T fromJsonString(@NotNull String json, @NotNull Type targetType) {\n        return gson.fromJson(json, targetType);\n    }\n};\nJavalin app = Javalin.create(config -> config.jsonMapper(gsonMapper)).start(7070);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval gson = GsonBuilder().create()\n\nval gsonMapper = object : JsonMapper {\n\n    override fun <T : Any> fromJsonString(json: String, targetType: Type): T =\n        gson.fromJson(json, targetType)\n\n    override fun toJsonString(obj: Any, type: Type) =\n        gson.toJson(obj)\n\n}\n\nval app = Javalin.create { it.jsonMapper(gsonMapper) }.start(7070)\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS with Client Origin Reflection in Javalin\nDESCRIPTION: Setup to reflect back the client's origin instead of using a wildcard. Similar to anyHost() but returns the specific origin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/cors.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.bundledPlugins.enableCors(cors -> {\n        cors.addRule(it -> {\n            it.reflectClientOrigin = true;\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.bundledPlugins.enableCors { cors ->\n        cors.addRule {\n            it.reflectClientOrigin = true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Java Lang Error Handler in Javalin\nDESCRIPTION: Code examples in Java and Kotlin for overriding Javalin's default error handler for java.lang.Error. The custom handler logs the error and returns a 500 status code.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_59\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create( cfg -> {\n    cfg.pvt.javaLangErrorHandler((res, error) -> {\n        res.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.getCode());\n        JavalinLogger.error(\"Exception occurred while servicing http-request\", error);\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { cfg ->\n    cfg.pvt.javaLangErrorHandler { res, error ->\n        res.status = HttpStatus.INTERNAL_SERVER_ERROR.code\n        JavalinLogger.error(\"Exception occurred while servicing http-request\", error)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying InMemoryPersonReader with Constructor Injection in Java\nDESCRIPTION: Updates the InMemoryPersonReader to accept a PersonFilter in its constructor and apply the filter in the getAll() method.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_27\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.services.inmemory;\n\nimport org.example.models.Person;\nimport org.example.services.api.PersonFilter;\nimport org.example.services.api.PersonReader;\n\nimport java.util.List;\nimport java.util.ServiceLoader;\n\npublic class InMemoryPersonReader implements PersonReader {\n\n    private PersonFilter filter;\n\n    public InMemoryPersonReader(PersonFilter filter) {\n        this.filter = filter;\n    }\n\n    @Override\n    public List<Person> getAll() {\n        return List.of(\n            new Person(\"Vincent Vega\", 73),\n            new Person(\"Jules Winnfield\", 12)\n        ).stream().filter(this.filter::filter).toList();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Static Files Locations in Javalin\nDESCRIPTION: This code demonstrates how to configure multiple static files locations in Javalin 1.3.0. It shows how to enable static files from both internal resources and external file system locations using the enableStaticFiles method.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-02-04-javalin-1.3.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create().apply {\n    enableStaticFiles(\"/public/a\")\n    enableStaticFiles(\"/public/b\")\n    enableStaticFiles(\"src/test/external/\", Location.EXTERNAL)\n}.start()\n```\n\n----------------------------------------\n\nTITLE: Creating a reusable test utility function (Kotlin)\nDESCRIPTION: This function creates a reusable utility for setting up Javalin tests, reducing boilerplate code and improving test readability.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-07-11-using-javalin-as-http-simulator.md#2025-04-08_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun testProfileGateway(testBody: (Javalin, ProfileGateway) -> Unit) {\n    val server = Javalin.create().start(0)\n    val gatewayClient = ProfileGateway(apiUrl = \"http://localhost:${server.port()}\")\n    testBody(server, gatewayClient)\n    server.stop()\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Sessions in Javalin (Java)\nDESCRIPTION: This Java code shows how to invalidate a session in a Javalin application. It calls the invalidate() method on the session object, which cleans up all associated data.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/invalidate\", ctx -> {\n    // if you want to invalidate a session, jetty will clean everything up for you\n    ctx.req().getSession().invalidate();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom File Renderer in Javalin\nDESCRIPTION: Shows how to implement a custom file renderer for template processing in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_55\n\nLANGUAGE: java\nCODE:\n```\nconfig.fileRenderer((filePath, model, context) -> \"Rendered template\");\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.fileRenderer { filePath, model, context -> \"Rendered template\" }\n```\n\n----------------------------------------\n\nTITLE: CrudHandler Interface Definition\nDESCRIPTION: Defines the five core CRUD operations in the CrudHandler interface.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface CrudHandler {\n    getAll(ctx)\n    getOne(ctx, resourceId)\n    create(ctx)\n    update(ctx, resourceId)\n    delete(ctx, resourceId)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Class for Javalin-based Omegle Clone\nDESCRIPTION: Main class setup for the Omegle clone application using Javalin. It configures static file handling, WebSocket handler, and starts the server on port 7070.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2024-01-13-omeglin/2023-12-30-building-omegle-in-javalin.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nsnippets/main/java/io/javalin/omeglin/OmeglinMain.java\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependencies in Gradle\nDESCRIPTION: Gradle dependencies configuration for a Javalin project, including core libraries for JSON serialization and logging.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ncompile 'io.javalin:javalin:{{site.javalinThreeVersion}}'\ncompile 'com.fasterxml.jackson.core:jackson-databind:2.10.3' // Necessary for serializing JSON\ncompile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.3' // Necessary for serializing JSON\ncompile 'org.slf4j:slf4j-simple:1.7.30' // Necessary to view logging output\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Javalin and Hibernate (Kotlin DSL)\nDESCRIPTION: Sets up the Gradle build file with dependencies for Javalin, Hibernate, PostgreSQL, and JUnit. It defines version variables and configures the necessary plugins and repositories.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2024-10-20-javalin-hibernate.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"java\")\n}\n\ngroup = \"com.brucemelo.app\"\n\nrepositories {\n    mavenCentral()\n}\n\nval javalinVersion = \"6.3.0\"\nval lpmbokVersion = \"1.18.34\"\nval postgresqlVersion = \"42.7.3\"\nval hibernateVersion = \"7.0.0.Beta1\"\nval junitVersion = \"5.10.3\"\n\ndependencies {\n    implementation(\"io.javalin:javalin-bundle:$javalinVersion\")\n    compileOnly(\"org.projectlombok:lombok:$lpmbokVersion\")\n    annotationProcessor(\"org.projectlombok:lombok:$lpmbokVersion\")\n    implementation(\"org.postgresql:postgresql:$postgresqlVersion\")\n    implementation(\"org.hibernate.orm:hibernate-core:$hibernateVersion\")\n    annotationProcessor(\"org.hibernate.orm:hibernate-jpamodelgen:$hibernateVersion\")\n    testImplementation(platform(\"org.junit:junit-bom:$junitVersion\"))\n    testImplementation(\"org.junit.jupiter:junit-jupiter\")\n}\n\ntasks.test {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JTE Engine in Java\nDESCRIPTION: Sets up the JTE engine for Javalin, with different configurations for development and production environments. It uses DirectoryCodeResolver for development and precompiled templates for production.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    JavalinJte.configure(createTemplateEngine());\n\n    Javalin app = Javalin.create().start(7000);\n\n    app.get(\"/\", TutorialJava::renderHelloPage);\n}\n\nprivate static TemplateEngine createTemplateEngine() {\n    if (isDevSystem) {\n        DirectoryCodeResolver codeResolver = new DirectoryCodeResolver(Path.of(\"src\", \"main\", \"jte\"));\n        return TemplateEngine.create(codeResolver, ContentType.Html);\n    } else {\n        return TemplateEngine.createPrecompiled(Path.of(\"jte-classes\"), ContentType.Html);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS to Allow Any Host in Javalin\nDESCRIPTION: Configuration to allow any host origin using anyHost() method, which sets the wildcard (*) origin. This provides unrestricted CORS access.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/cors.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.bundledPlugins.enableCors(cors -> {\n        cors.addRule(it -> {\n            it.anyHost();\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.bundledPlugins.enableCors { cors ->\n        cors.addRule {\n            it.anyHost()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Class for REST API\nDESCRIPTION: Kotlin data class definition for string data with ID and data properties, used for API request and response serialization.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class StringData(val id: Long, val data: String)\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin SSL Plugin Dependency with Gradle\nDESCRIPTION: Gradle dependency configuration for adding the Javalin SSL plugin to a project.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimplementation(\"io.javalin.community.ssl:ssl-plugin:{{site.javalinversion}}\")\n```\n\n----------------------------------------\n\nTITLE: Using anyQueryParamNull in Java for Parameter Validation\nDESCRIPTION: Shows how to use the anyQueryParamNull() method in Java to check if any of the specified query parameters are missing. This allows for clean validation before processing a request.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-07-20-javalin-0.3.5-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/new-user\", ctx ->\n    if (ctx.anyQueryParamNull(\"name\", \"email\")) {\n        throw new MissingQueryParamException();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Map of Users in Kotlin\nDESCRIPTION: Example of creating a map of users using Kotlin's map literal-like functions. Demonstrates type inference, named parameters, and the mapOf function.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-kotlin-example.md#2025-04-08_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval users = mapOf(\n    0 to User(name = \"Alice\", email = \"alice@alice.kt\", id = 0),\n    1 to User(name = \"Bob\", email = \"bob@bob.kt\", id = 1),\n    2 to User(name = \"Carol\", email = \"carol@carol.kt\", id = 2),\n    3 to User(name = \"Dave\", email = \"dave@dave.kt\", id = 3)\n)\n```\n\n----------------------------------------\n\nTITLE: Registering App Extensions in Javalin\nDESCRIPTION: Demonstrates how to register app extensions using lambda functions or classes implementing the Extension interface. This new feature allows for modular addition of functionality to Javalin applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2019-01-04-javalin-2.5.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create()\n    .register(app -> { ... }) // register lambda\n    .register(new ExtensionClass(...)); // ExtensionClass must implement Extension\n```\n\n----------------------------------------\n\nTITLE: Successful GraalVM Native Image Build with JNI Support\nDESCRIPTION: Terminal output showing a successful build of the native image with GraalVM after adding the JNI flag, displaying the compilation phases and timing information.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n j0e@thinkpad  ~/projects/graal-javalin  master ● ? ⍟1  native-image -jar ./build/libs/graal-javalin-all-1.0-SNAPSHOT.jar -H:+JNI\nBuild on Server(pid: 28578, port: 34643)\n[graal-javalin-all-1.0-SNAPSHOT:28578]    classlist:     753.67 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]        (cap):     528.63 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]        setup:     776.76 ms\n[ForkJoinPool-15-worker-0] INFO org.eclipse.jetty.util.log - Logging initialized @616692ms to org.eclipse.jetty.util.log.Slf4jLog\n[graal-javalin-all-1.0-SNAPSHOT:28578]   (typeflow):   5,934.19 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]    (objects):   6,646.13 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]   (features):      83.06 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]     analysis:  13,491.56 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]     universe:     519.25 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]      (parse):   2,360.81 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]     (inline):   3,674.24 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]    (compile):  15,925.13 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]      compile:  22,729.43 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]        image:   1,426.49 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]        write:     280.71 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]      [total]:  40,064.13 ms\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Handlers with Lambdas in Kotlin\nDESCRIPTION: Shows how to set up WebSocket handlers for connect, message, close, and error events using Kotlin lambdas. It demonstrates sending an echo response for received messages.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-09-22-javalin-0.5.1-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\napp.ws(\"/websocket\") { ws ->\n    ws.onConnect { session -> println(\"Connected\") }\n    ws.onMessage { session, message ->\n        println(\"Received: \" + message)\n        session.remote.sendString(\"Echo: \" + message)\n    }\n    ws.onClose { session, statusCode, reason -> println(\"Closed\") }\n    ws.onError { session, throwable -> println(\"Errored\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Strings with cURL GET Request\nDESCRIPTION: cURL command for sending a GET request to retrieve all strings from the Raspberry Pi REST API.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl your.raspberry.pi.ipaddress:8080/strings\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin SSL Plugin Dependency with Grape\nDESCRIPTION: Grape dependency configuration for adding the Javalin SSL plugin to a project.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Grab(group='io.javalin.community.ssl', module='ssl-plugin', version='{{site.javalinversion}}')\n```\n\n----------------------------------------\n\nTITLE: Using Rate Limiting Plugin in Javalin Application\nDESCRIPTION: Shows how to register and use the Ratey plugin in a Javalin application. Demonstrates setting up rate limits and applying different costs to different endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/how-to.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// register\nvar app = Javalin.create(config -> {\n    config.registerPlugin(new Ratey(rateyConfig -> {\n        rateyConfig.limit = 100_000;\n    }));\n});\n\n// use in handler\napp.get(\"/cheap-endpoint\", ctx -> {\n    ctx.with(Ratey.class).tryConsume(1);\n    ctx.result(\"Hello cheap world!\");\n});\napp.get(\"expensive-endpoint\", ctx -> {\n    ctx.with(Ratey.class).tryConsume(100);\n    ctx.result(\"Hello expensive world!\");\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// register\nval app = Javalin.create { config ->\n    config.registerPlugin(Ratey { rateyConfig ->\n        rateyConfig.limit = 100_000\n    })\n}\n\n// use in handler\napp.get(\"/cheap-endpoint\") { ctx ->\n    ctx.with(Ratey::class).tryConsume(1)\n    ctx.result(\"Hello cheap world!\")\n}\napp.get(\"expensive-endpoint\") { ctx ->\n    ctx.with(Ratey::class).tryConsume(100)\n    ctx.result(\"Hello expensive world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Methods in Javalin 6\nDESCRIPTION: Demonstrates the new configuration approach in Javalin 6 where static methods are replaced with config options.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n  config.fileRenderer(myFileRenderer);\n  config.validation.register(Custom.class, Custom::parse);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create { config ->\n  config.fileRenderer(myFileRenderer)\n  config.validation.register(Custom.class, Custom::parse)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Redirect-to-lowercase-path Plugin in Javalin\nDESCRIPTION: Demonstrates how to register the Redirect-to-lowercase-path plugin, which redirects requests with uppercase/mixcase paths to lowercase paths.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_57\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config ->\n    config.registerPlugin(new RedirectToLowercasePathPlugin());\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Component for User Overview in HTML and JavaScript\nDESCRIPTION: This snippet defines a Vue component for displaying a list of users, including HTML template, JavaScript logic, and CSS styling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"user-overview\">\n  <div>\n    <ul class=\"user-overview-list\">\n      <li v-for=\"user in users\">\n        <a :href=\"`/users/${user.id}`\">{{user.name}} ({{user.email}})</a>\n      </li>\n    </ul>\n  </div>\n</template>\n<script>\n  app.component(\"user-overview\", {\n    template: \"#user-overview\",\n    data: () => ({\n      users: [],\n    }),\n    created() {\n      fetch(\"/api/users\")\n        .then(res => res.json())\n        .then(res => this.users = res)\n        .catch(() => alert(\"Error while fetching users\"));\n    }\n  });\n</script>\n<style>\n  ul.user-overview-list {\n    padding: 0;\n    list-style: none;\n  }\n  ul.user-overview-list a {\n    display: block;\n    padding: 16px;\n    border-bottom: 1px solid #ddd;\n  }\n  ul.user-overview-list a:hover {\n    background: #00000010;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Rendering Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding the javalin-rendering module and a template engine dependency to your project.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimplementation(\"io.javalin:javalin-rendering:{{site.javalinversion}}\")\n// template engine dependency\n```\n\n----------------------------------------\n\nTITLE: Creating Javalin Server with JSON Endpoint in Kotlin\nDESCRIPTION: This snippet shows how to create a Javalin server with a JSON endpoint. It requires only one import and demonstrates Javalin's concise API for setting up a server and defining routes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-08-02-number-of-imports-and-library-usability.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\n\nval someData = setOf<String>()\n\nfun main() {\n    Javalin.create() // create server\n        .get(\"/\") { ctx -> ctx.json(someData) } // attach endpoint that serves json\n        .start(7000) // start server\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Javalin Application in Browser (Bash)\nDESCRIPTION: This command opens the Javalin application in the default web browser.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2023-11-13-javalin-bazel-example.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:7070\n```\n\n----------------------------------------\n\nTITLE: Kotlin Page Model Class\nDESCRIPTION: Kotlin data class definition for passing parameters to jte templates\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage app\n\nclass HelloPage {\n    @JvmField var userName: String? = null\n    @JvmField var userKarma = 0\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket After Handlers in Javalin\nDESCRIPTION: WebSocket after handlers run after WebSocket requests complete. Like before-handlers, they can be applied globally or to specific path patterns, and multiple after-handlers can be chained for each endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\napp.wsAfter(ws -> {\n    // runs after all WebSocket requests\n});\napp.wsAfter(\"/path/*\", ws -> {\n    // runs after websocket requests to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsAfter { ws ->\n    // runs after all WebSocket requests\n}\napp.wsAfter(\"/path/*\") { ws ->\n    // runs after websocket requests to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Happy New Year Message\nDESCRIPTION: CSS styles for displaying a centered, large font new year greeting message with top margin\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-01-02-javalin-4.2.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.happy-new-year {\n    margin-top: 32px;\n    text-align: center;\n    font-size: 44px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing App Frame Vue Component in HTML and JavaScript\nDESCRIPTION: This snippet creates a reusable app frame component with a header and slot for content, including CSS styling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"app-frame\">\n  <div class=\"app-frame\">\n    <header>\n      <span>JavalinVue demo app</span>\n    </header>\n    <slot></slot>\n  </div>\n</template>\n<script>\n  app.component(\"app-frame\", {template: \"#app-frame\"});\n</script>\n<style>\n  .app-frame > header {\n    padding: 20px;\n    background: #b6e2ff;\n    font-size: 20px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding Selenium and WebDriverManager Dependencies in Maven\nDESCRIPTION: XML configuration to include Selenium Chrome Driver and WebDriverManager dependencies in a Maven project for end-to-end testing.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium-chrome-driver</artifactId>\n    <version>4.3.0</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>io.github.bonigarcia</groupId>\n    <artifactId>webdrivermanager</artifactId>\n    <version>5.2.3</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Instance in Kotlin\nDESCRIPTION: This snippet shows how to create and configure a Javalin instance using Kotlin. It covers the same configuration options as the Java version, including JavalinServlet, WsServlet, Server, and Misc settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_43\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n\n    // JavalinServlet\n    config.addSinglePageRoot(root, file)            // ex (\"/\", \"/index.html\")\n    config.addSinglePageRoot(root, file, location)  // ex (\"/\", \"src/file.html\", Location.EXTERNAL)\n    config.addStaticFiles(directory)                // ex (\"/public\")\n    config.addStaticFiles(directory, location)      // ex (\"src/folder\", Location.EXTERNAL)\n    config.addStaticFiles(prefix, dir, location)    // ex (\"/assets\", \"src/folder\", Location.EXTERNAL)\n    config.aliasCheckForStaticFiles = AliasCheck    // symlink config, ex ContextHandler.ApproveAliases();\n    config.asyncRequestTimeout = timeoutInMs        // timeout for async requests (default is 0, no timeout)\n    config.autogenerateEtags = true/false           // auto generate etags (default is false)\n    config.compressionStrategy(Brotli(4), Gzip(6))  // set the compression strategy and levels - since 3.2.0\n    config.contextPath = contextPath                // context path for the http servlet (default is \"/\")\n    config.defaultContentType = contentType         // content type to use if no content type is set (default is \"text/plain\")\n    config.dynamicGzip = true/false                 // dynamically gzip http responses (default is true)\n    config.enableCorsForAllOrigins()                // enable cors for all origins\n    config.enableCorsForOrigin(origins)             // enable cors for specific origins\n    config.enableDevLogging()                       // enable extensive development logging for http and websocket\n    config.enableWebjars()                          // enable webjars (static files)\n    config.enforceSsl = true/false                  // redirect http traffic to https (default is false)\n    config.ignoreTrailingSlashes = true/false       // default is true\n    config.logIfServerNotStarted = true/false       // log a warning if user doesn't start javalin instance (default is true)\n    config.precompressStaticFiles = true/false      // store compressed files in memory (avoid recompression and ensure content-length is set)\n    config.prefer405over404 = true/false            // send a 405 if handlers exist for different verb on the same path (default is false)\n    config.requestCacheSize = sizeInBytes           // set the request cache size, used for reading request body multiple times (default is 4kb)\n    config.requestLogger { ... }                    // set a request logger\n    config.sessionHandler { ... }                   // set a SessionHandler\n\n    // WsServlet\n    config.wsContextPath = contextPath              // context path for the websocket servlet (default is \"/\")\n    config.wsFactoryConfig { ... }                  // set a websocket factory config\n    config.wsLogger { ... }                         // set a websocket logger\n\n    // Server\n    config.server { ... }                           // set a Jetty server for Javalin to run on\n\n    // Misc\n    config.accessManager { ... }                    // set an access manager (affects both http and websockets)\n    config.showJavalinBanner = true/false           // show the Javalin banner when starting the instance\n}.start()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Embedded Server in Javalin\nDESCRIPTION: Demonstrates how to customize the embedded Jetty server configuration using EmbeddedJettyFactory.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\napp.embeddedServer(new EmbeddedJettyFactory(() -> {\n    Server server = new Server();\n    // do whatever you want here\n    return server;\n}));\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.embeddedServer(EmbeddedJettyFactory({\n    val server = Server()\n    // do whatever you want here\n    server\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring JavalinJackson Mapper\nDESCRIPTION: Demonstrates how to update the JavalinJackson mapper configuration using the new updateMapper method. Shows setting serialization inclusion settings as an example.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2023-01-01-javalin-5.3.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nconfig.jsonMapper(new JavalinJackson().updateMapper(mapper -> {\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.jsonMapper(JavalinJackson().updateMapper { mapper ->\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Localization Properties in Java/Kotlin\nDESCRIPTION: Creates a properties file for localization strings used in the application. It defines two messages: a general visitor greeting and a user of the day message with placeholders for dynamic content.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nhello.visitor=Hello visitor!\nhello.user-of-the-day=The <b>user of the day</b> is {0} (karma: {1})!\n```\n\n----------------------------------------\n\nTITLE: Setting Maven Properties for Java 10\nDESCRIPTION: Maven properties configuration to set the source and target compiler versions to Java 10.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <maven.compiler.source>10</maven.compiler.source>\n    <maven.compiler.target>10</maven.compiler.target>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Layout Macros Usage\nDESCRIPTION: JavalinVue layout macros for file inclusion and component registration.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@inlineFile(\"/path/to/file.ext\")        // this file will always be inlined\n@inlineFileDev(\"/path/to/file.ext\")     // this file will be inlined if JavalinVue.isDev is true\n@inlineFileNotDev(\"/path/to/file.ext\")  // this file will be inlined if JavalinVue.isDev is false\n@componentRegistration                  // all required components will be inlined here\n@routeComponent                         // the current route component will be inlined here\n@cdnWebjar                              // will resolve to webjar path if dev, cdn if not dev\n```\n\n----------------------------------------\n\nTITLE: Persisting Sessions to File System in Java\nDESCRIPTION: Demonstrates how to set up a FileSessionDataStore to persist sessions to the file system using Jetty. This approach is suitable for development environments and has no external dependencies.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static SessionHandler fileSessionHandler() {\n    SessionHandler sessionHandler = new SessionHandler();\n    SessionCache sessionCache = new DefaultSessionCache(sessionHandler);\n    sessionCache.setSessionDataStore(fileSessionDataStore());\n    sessionHandler.setSessionCache(sessionCache);\n    sessionHandler.setHttpOnly(true);\n    // make additional changes to your SessionHandler here\n    return sessionHandler;\n}\n\nprivate static FileSessionDataStore fileSessionDataStore() {\n    FileSessionDataStore fileSessionDataStore = new FileSessionDataStore();\n    File baseDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File storeDir = new File(baseDir, \"javalin-session-store\");\n    storeDir.mkdir();\n    fileSessionDataStore.setStoreDir(storeDir);\n    return fileSessionDataStore;\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Examples in Java\nDESCRIPTION: Provides examples of validating query parameters and JSON body in Javalin using Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// validate two dependent query parameters:\nInstant fromDate = ctx.queryParam(\"from\", Instant.class).get();\nInstant toDate = ctx.queryParam(\"to\", Instant.class)\n        .check(it -> it.isAfter(fromDate), \"'to' has to be after 'from'\")\n        .get();\n\n// validate a json body:\nMyObject myObject = ctx.bodyValidator(MyObject.class)\n        .check(obj -> obj.myObjectProperty == someValue)\n        .getOrThrow();\n```\n\n----------------------------------------\n\nTITLE: Updating Student Records with cURL\nDESCRIPTION: Shell command using cURL to update a student record by sending a PATCH request to the Javalin application endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-12-javalin-tracing-example.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X PATCH -H \"Content-Type: application/json\" http://localhost:8080/students -d '{ \"id\": \"001\",\"name\": \"Quarkus\",\"age\": 32}'\n```\n\n----------------------------------------\n\nTITLE: Overriding ValidationException Handling in Javalin (Java/Kotlin)\nDESCRIPTION: Shows how to override the default ValidationException handling in Javalin for both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_24\n\nLANGUAGE: java\nCODE:\n```\napp.exception(ValidationException.class, (e, ctx) -> {\n    // your code\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(ValidationException::class.java) { e, ctx ->\n    // your code\n}\n```\n\n----------------------------------------\n\nTITLE: JTE Template with Localization\nDESCRIPTION: A JTE template that uses the Localizer to display localized messages. It includes a visitor greeting and a user of the day message with dynamic content.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n@param app.HelloPage page\n@param app.Localizer localizer\n\n<html lang=\"en\">\n<body>\n    <p>${localizer.localize(\"hello.visitor\")}</p>\n    <p>${localizer.localize(\"hello.user-of-the-day\", page.userName, page.userKarma)}</p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Javalin without Jetty\nDESCRIPTION: Gradle dependencies configuration that includes Javalin but excludes Jetty dependencies.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-11-15-javalin-embedded-example.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    compile(kotlin(\"stdlib-jdk8\"))\n    compile(\"io.javalin:javalin:{{site.javalinThreeVersion}}\") {\n        exclude(mapOf(\"group\" to \"org.eclipse.jetty\"))\n        exclude(mapOf(\"group\" to \"org.eclipse.jetty.websocket\"))\n    }\n    compile(\"org.slf4j:slf4j-simple:1.7.30\")\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Native Binary Size in Linux\nDESCRIPTION: Shows the file size of the GraalVM-compiled Javalin native binary using the 'ls' command in Linux. The binary is approximately 22MB in size.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n-rwxr-xr-x 1 j0e users  22M Sep 24 01:38 graal-javalin\n```\n\n----------------------------------------\n\nTITLE: Running Javalin Application with Elastic APM Agent\nDESCRIPTION: Shell command to start the Javalin application with the Elastic APM Java agent attached for tracing functionality.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-12-javalin-tracing-example.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ java -javaagent:elastic-apm-agent-1.22.0.jar -jar target/javalin-student-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom FileRenderer in Javalin\nDESCRIPTION: Shows how to configure a custom FileRenderer instance for template rendering. The renderer receives the file path, model, and context parameters to generate the rendered output.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2023-01-01-javalin-5.3.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nconfig.fileRenderer((filePath, model, context) -> \"Rendered template\");\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.fileRenderer { filePath, model, context -> \"Rendered template\" }\n```\n\n----------------------------------------\n\nTITLE: Converting POJO to Protobuf SensorData\nDESCRIPTION: Method to convert a Java POJO (Plain Old Java Object) into its Protocol Buffer equivalent. It demonstrates null safety checks and handling of optional fields in the protobuf message.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-03-25-serving-protobuf-with-javalin.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic SensorDataOuterClass.SensorData toBuffer() {\n    SensorDataOuterClass.SensorData.Builder builder = SensorDataOuterClass.SensorData.newBuilder();\n\n    // Set all non-nullable values first\n    builder.addAllFluxCapacitorReadings(fluxCapacitorReadings)\n            .setDestinationYear(destinationYear)\n            .setSafetyBeltsOn(safetyBeltsOn);\n\n    // Demonstrates using Java Optional for proto optionals, in this case lastCheckIn is optional in our proto\n    // therefore we should check that lastCheckIn is not null prior to setting the lastCheckIn value on our proto object\n    sqltimeToProtoTime(lastCheckIn).ifPresent(builder::setLastCheckIn);\n\n    // Demonstrates null string check for proto optionals, in this case make and model can be null in our proto\n    // so it can be assumed it could also be null in our datastore, thus we should check before setting it with our builder.\n    if(makeAndModel != null){ builder.setMakeAndModel(makeAndModel); }\n\n    return builder.build();\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for Bukkit/Spigot/Paper Projects in Gradle\nDESCRIPTION: Gradle configuration to add Spigot API as a compile-time dependency along with Javalin and its required runtime dependencies (SLF4J and Jackson).\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-04-06-javalin-and-minecraft-servers.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ndependencies {\n    // https://hub.spigotmc.org/nexus/content/repositories/snapshots/\n    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'\n\n    // https://mvnrepository.com/artifact/io.javalin/javalin\n    implementation 'io.javalin:javalin:{{site.javalinversion}}'\n    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple\n    implementation 'org.slf4j:slf4j-simple:{{site.slf4jversion}}'\n    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Engine in Javalin (Java)\nDESCRIPTION: Java code showing how to register a template engine (Mustache in this example) with Javalin's configuration.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.fileRenderer(new JavalinMustache());\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Javalin WebSocket Application\nDESCRIPTION: Maven dependency configuration for a Javalin WebSocket project. Includes the javalin-bundle dependency which provides all necessary components for creating a WebSocket server application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-04-22-javalin-realtime-collaboration-example.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.javalin</groupId>\n        <artifactId>javalin-bundle</artifactId>\n        <version>{{site.javalinversion}}</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Creating a Velocity Template for Book Display\nDESCRIPTION: Example of a Velocity template that displays book details with localization support. Demonstrates conditional rendering and layout template usage in Velocity.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2017-05-26-javalin-website-example.md#2025-04-08_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\n#parse(\"/velocity/layout.vm\")\n#@mainLayout()\n    #if($book)\n        <h1>$book.getTitle()</h1>\n        <h2>$book.getAuthor()</h2>\n        <img src=\"$book.largeCover\" alt=\"$book.title\">\n    #else\n        <h1>$msg.get(\"BOOKS_BOOK_NOT_FOUND\")</h1>\n    #end\n#end\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression in Javalin 5\nDESCRIPTION: Examples of setting up different compression strategies in Javalin 5, including custom compression, Brotli and Gzip configuration, and compression disabling.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.compression.custom(compressionStrategy);      \n    config.compression.brotliAndGzip(gzipLvl, brotliLvl);\n    config.compression.gzipOnly(gzipLvl);                \n    config.compression.brotliOnly(brotliLvl);            \n    config.compression.none();                           \n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.compression.custom(compressionStrategy)      \n    config.compression.brotliAndGzip(gzipLvl, brotliLvl)\n    config.compression.gzipOnly(gzipLvl)                \n    config.compression.brotliOnly(brotliLvl)            \n    config.compression.none()                           \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Mapping in Javalin\nDESCRIPTION: Shows how to map HTTP status codes to specific handlers using the error() method. This example maps a 404 status code to a handler that returns a generic message.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_38\n\nLANGUAGE: java\nCODE:\n```\napp.error(404, ctx -> {\n    ctx.result(\"Generic 404 message\")\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.error(404) { ctx ->\n    ctx.result(\"Generic 404 message\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Javalin, Guice, and Jackson\nDESCRIPTION: Maven dependency configuration that includes Javalin for web server, SLF4J for logging, Google Guice for dependency injection, and Jackson for JSON handling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.javalin</groupId>\n        <artifactId>javalin</artifactId>\n        <version>2.8.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-simple</artifactId>\n        <version>{{site.slf4jversion}}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.google.inject</groupId>\n        <artifactId>guice</artifactId>\n        <version>4.2.0</version>\n    </dependency>\n    <dependency>\n        <groupId>com.google.inject.extensions</groupId>\n        <artifactId>guice-multibindings</artifactId>\n        <version>4.2.0</version>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.9.5</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repositories for BungeeCord/Waterfall in Gradle\nDESCRIPTION: Gradle configuration for adding Maven repositories required for BungeeCord and Waterfall dependencies, including mavenCentral and Sonatype snapshots.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-04-06-javalin-and-minecraft-servers.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nrepositories {\n    mavenCentral()\n    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging HTTP Request and Response in Javalin\nDESCRIPTION: Example output of the DevLoggingPlugin for an HTTP GET request to '/hello-world'. It shows detailed information about the request, including headers, cookies, body, and query parameters, as well as the response status, headers, and body.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/devlogging.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[JettyServerThreadPool-81] INFO io.javalin.Javalin - JAVALIN REQUEST DEBUG LOG:\nRequest: GET [/hello-world]\n    Matching endpoint-handlers: [GET=/hello-world]\n    Headers: {User-Agent=unirest-java/3.1.00, Accept-Encoding=gzip, ... }\n    Cookies: {}\n    Body:\n    QueryString: null\n    QueryParams: {}\n    FormParams: {}\nResponse: [200 OK], execution took 0.19 ms\n    Headers: {Date=Fri, 19 Aug 2022 16:28:16 GMT, Content-Type=text/plain}\n    Body is 12 bytes (starts on next line):\n    Hello World!\n```\n\n----------------------------------------\n\nTITLE: Implementing Hibernate StatelessSession Wrapper\nDESCRIPTION: Creates a wrapper class for Hibernate StatelessSession operations. It provides methods for executing transactions with consumers and functions, simplifying database interactions.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2024-10-20-javalin-hibernate.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class AppHibernate {\n\n    public static void inTransaction(Consumer<StatelessSession> consumer) {\n        AppHibernateConfig.getSessionFactory().inStatelessTransaction(consumer);\n    }\n\n    public static <R> R fromTransaction(Function<StatelessSession, R> function) {\n        return AppHibernateConfig.getSessionFactory().fromStatelessTransaction(function);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GSON JSON Mapper in Javalin\nDESCRIPTION: Example of configuring a custom JSON mapper for Javalin using GSON, implementing the JsonMapper interface to handle JSON serialization and deserialization.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_66\n\nLANGUAGE: java\nCODE:\n```\nGson gson = new GsonBuilder().create();\nJsonMapper gsonMapper = new JsonMapper() {\n    @Override\n    public String toJsonString(@NotNull Object obj) {\n        return gson.toJson(obj);\n    }\n    @Override\n    public <T> T fromJsonString(@NotNull String json, @NotNull Class<T> targetClass) {\n        return gson.fromJson(json, targetClass);\n    }\n};\nJavalin app = Javalin.create(config -> config.jsonMapper(gsonMapper)).start(7070);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval gson = GsonBuilder().create()\n\nval gsonMapper = object : JsonMapper {\n    override fun <T> fromJsonString(json: String, targetClass: Class<T>): T {\n        return gson.fromJson(json, targetClass)\n    }\n    override fun toJsonString(obj: Any): String {\n        return gson.toJson(obj)\n    }\n}\n\nval app = Javalin.create { it.jsonMapper(gsonMapper) }.start(7070)\n```\n\n----------------------------------------\n\nTITLE: Creating Main Application Module\nDESCRIPTION: AppModule class that configures the core application bindings and installs the KidBankModule. This acts as the root module for the Guice injector.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.inject.AbstractModule;\nimport io.kidbank.KidBankModule;\n\npublic class AppModule extends AbstractModule {\n    protected void configure() {\n        bind(Startup.class);\n        install(new KidBankModule());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Javalin Bazel Starter Template (Bash)\nDESCRIPTION: This snippet shows how to clone the Kotlin Javalin Bazel starter template from GitHub and navigate to the project directory.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2023-11-13-javalin-bazel-example.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:javalin/kotlin-javalin-bazel-starter my-javalin-app\ncd my-javalin-app\n```\n\n----------------------------------------\n\nTITLE: Plugin Card Template for CORS\nDESCRIPTION: Liquid template that renders a plugin card for the CORS plugin, which provides functionality to configure Cross-Origin Resource Sharing headers in Javalin applications. Includes author details and documentation link.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{% include plugins/pluginCard.html\n    title=\"CORS\"\n    description=\"\n        The CORS plugin bundles the functionality to set CORS headers for some or all origins\n        as required.\n    \"\n    bundled=\"true\"\n    author=\"Playacem\"\n    docsUrl=\"/plugins/cors\"\n    ratingIssueNr=\"147\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Defining Hibernate Entity Mapping for Course\nDESCRIPTION: Creates a Course entity class with Hibernate annotations for mapping to a database table. It includes an ID field, a name field, and a static factory method for creating new courses.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2024-10-20-javalin-hibernate.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Setter @Getter\n@Entity\n@Table\npublic class Course {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n    private String name;\n\n    public static Course newCourse(String name) {\n        var course = new Course();\n        course.setName(name);\n        return course;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Input Validation Examples in Java/Kotlin\nDESCRIPTION: Demonstrates validation of query parameters and JSON body using Javalin's Validator. Shows how to validate dependent query parameters and object properties with custom validation rules.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-09-16-javalin-2.2.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// validate two dependent query parameters:\nInstant fromDate = ctx.validatedQueryParam(\"from\").asClass(Instant.class).getOrThrow();\nInstant toDate = ctx.validatedQueryParam(\"to\").asClass(Instant.class)\n        .check(it -> it.isAfter(fromDate), \"'to' has to be after 'from'\")\n        .getOrThrow();\n\n// validate a json body:\nMyObject myObject = ctx.validatedBodyAsClass(MyObject.class)\n        .check(obj -> obj.myObjectProperty == someValue)\n        .getOrThrow();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// validate two dependent query parameters:\nval fromDate = ctx.validatedQueryParam(\"from\").asClass<Instant>().getOrThrow()\nval toDate = ctx.validatedQueryParam(\"to\").asClass<Instant>()\n        .check({ it.isAfter(fromDate) }, \"'to' has to be after 'from'\")\n        .getOrThrow()\n\n// validate a json body:\nval myObject = ctx.validatedBody<MyObject>()\n        .check({ it.myObjectProperty == someValue })\n        .getOrThrow()\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Functionality for Omegle Clone Frontend\nDESCRIPTION: JavaScript file (chat.js) handling the chat functionality for the Omegle clone. It manages chat UI updates and message handling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2024-01-13-omeglin/2023-12-30-building-omegle-in-javalin.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{% include_relative snippets/main/resources/public/js/chat.js %}\n```\n\n----------------------------------------\n\nTITLE: Sending Data to Clients in Javalin\nDESCRIPTION: Illustrates various methods to send data to clients in Javalin, including plain text, JSON, streams, and template rendering. These methods cover different content types and response scenarios.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nctx.result(stringOrStream);           // writes string or input stream to client (`text/plain` by default)\nctx.json(myJson);                     // serializes object to JSON string and writes to client (as `application/json`)\nctx.jsonStream(myJson);               // serializes JSON directly to client (nothing buffered in memory)\nctx.writeSeekableStream(myMediaFile); // stream audio and video to client (supports seeking/skipping)\nctx.future(myFutureSupplier);         // instructs Javalin to handle request asynchronously\nctx.render(\"/file.ext\", model);       // render template or markdown file (as `text/html`)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.result(stringOrStream)            // writes string or input stream to client (`text/plain` by default)\nctx.json(myJson)                      // serializes object to JSON string and writes to client (as `application/json`)\nctx.jsonStream(myJson)                // serializes JSON directly to client (nothing buffered in memory)\nctx.writeSeekableStream(myMediaFile)  // stream audio and video to client (supports seeking/skipping)\nctx.future(myFutureSupplier)          // instructs Javalin to handle request asynchronously\nctx.render(\"/file.ext\", model)        // render template or markdown file (as `text/html`)\n```\n\n----------------------------------------\n\nTITLE: Deleting Student Records with cURL\nDESCRIPTION: Shell command using cURL to delete a student record by sending a DELETE request to the Javalin application endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-12-javalin-tracing-example.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X DELETE http://localhost:8080/students/001\n```\n\n----------------------------------------\n\nTITLE: Bazel Build and Run Output (Text)\nDESCRIPTION: This snippet shows the expected output when running the Javalin application with Bazel, including build information and server startup logs.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2023-11-13-javalin-bazel-example.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nStarting local Bazel server and connecting to it...\nINFO: Invocation ID: 84c2e9f4-6392-427c-ad4b-22f4fcd3010a\nINFO: Analyzed target //:server (61 packages loaded, 1022 targets configured).\nINFO: Found 1 target...\nTarget //:server up-to-date:\n  bazel-bin/server.jar\n  bazel-bin/server\nINFO: Elapsed time: 5.741s, Critical Path: 4.47s\nINFO: 85 processes: 10 internal, 69 darwin-sandbox, 6 worker.\nINFO: Build completed successfully, 85 total actions\nINFO: Running command line: bazel-bin/server\n[main] INFO io.javalin.Javalin - Starting Javalin ...\n[main] INFO org.eclipse.jetty.server.Server - jetty-11.0.15; built: 2023-04-11T18:37:53.775Z; git: 5bc5e562c8d05c5862505aebe5cf83a61bdbcb96; jvm 20+36\n[main] INFO org.eclipse.jetty.server.session.DefaultSessionIdManager - Session workerName=node0\n[main] INFO org.eclipse.jetty.server.handler.ContextHandler - Started i.j.j.@304bb45b{/,null,AVAILABLE}\n[main] INFO org.eclipse.jetty.server.AbstractConnector - Started ServerConnector@7dc0f706{HTTP/1.1, (http/1.1)}{0.0.0.0:7070}\n[main] INFO org.eclipse.jetty.server.Server - Started Server@2f465398{STARTING}[11.0.15,sto=0] @267ms\n[main] INFO io.javalin.Javalin -\n       __                  ___          ______\n      / /___ __   ______ _/ (_)___     / ____/\n __  / / __ `/ | / / __ `/ / / __ \\   /___ \\\n/ /_/ / /_/ /| |/ / /_/ / / / / / /  ____/ /\n\\____/\\__,_/ |___/\\__,_/_/_/_/ /_/  /_____/\n\n       https://javalin.io/documentation\n\n[main] INFO io.javalin.Javalin - Listening on http://localhost:7070/\n[main] INFO io.javalin.Javalin - You are running Javalin 5.6.1 (released June 22, 2023. Your Javalin version is 143 days old. Consider checking for a newer version.).\n[main] INFO io.javalin.Javalin - Javalin started in 180ms \\o/\n```\n\n----------------------------------------\n\nTITLE: Expected Javalin Application Output (HTML)\nDESCRIPTION: This snippet shows the expected HTML output when accessing the Javalin application in a web browser.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2023-11-13-javalin-bazel-example.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nHello World\n```\n\n----------------------------------------\n\nTITLE: Mapping Timestamps between Java and Protobuf\nDESCRIPTION: BaseMapper class for converting between Java SQL Timestamp and Protobuf Timestamp. It provides utility methods for handling nullable timestamps and converting between the two formats.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-03-25-serving-protobuf-with-javalin.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage app.model.mappers;\n\nimport com.google.protobuf.Timestamp;\n\nimport java.time.Instant;\nimport java.util.Optional;\n\n//Class for mapping standard library types, enums, etc to protobuf\npublic class BaseMapper {\n\n    public static Optional<Timestamp> sqltimeToProtoTime(java.sql.Timestamp sqltime){\n        if(sqltime != null){\n            Instant instant = sqltime.toInstant();\n            return Optional.of(Timestamp.newBuilder().setSeconds(instant.getEpochSecond()).setNanos(instant.getNano()).build());\n        }\n        return Optional.empty();\n    }\n\n    public static java.sql.Timestamp protoTimetoSQLTime(Timestamp tstamp){\n        return java.sql.Timestamp.from(Instant.ofEpochSecond(tstamp.getSeconds(), tstamp.getNanos()));\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JavalinVue Dependency Optimization\nDESCRIPTION: Enable optimization of dependency loading in JavalinVue to improve performance. When enabled, JavalinVue will only load dependencies required for the current route component.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-10-04-javalin-3.11.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJavalinVue.optimizeDependencies = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Services Gradle Build\nDESCRIPTION: Gradle build configuration for services module with dependency on models module\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'java-library'\n}\n\ndependencies {\n    implementation project(\":models\")            // <-- add dependency to models subproject\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Student Records with cURL\nDESCRIPTION: Shell commands using cURL to retrieve student records by sending GET requests to the Javalin application endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-12-javalin-tracing-example.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X GET http://localhost:8080/students\n$ curl -X GET http://localhost:8080/students/003\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript for Plugin Cards in Javalin Plugin Store\nDESCRIPTION: Includes a JavaScript file that provides functionality for the plugin cards displayed on the page. The script is embedded directly in the HTML using Liquid templating.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>{% include plugins/pluginCard.js %}</script>\n```\n\n----------------------------------------\n\nTITLE: Creating User Overview Component\nDESCRIPTION: Implements a Mithril component that displays a list of users with links to their individual profiles.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass UserOverview {\n    constructor(vnode) {\n    }\n    oninit(vnode) {\n        return UserModel.fetch();\n    }\n\n    view(vnode) {\n        return m(AppFrame, {content:\n            m(\"ul.user-overview-list\",\n                UserModel.list.map(function (user) {\n                    return m(\"li\",\n                        m(\"a\", {href: `/users/${user.id}`}, `${user.name} (${user.email})`))}\n                )\n             )\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Slash Behavior in Javalin\nDESCRIPTION: Configure Javalin to not ignore trailing slashes in URL paths. This setting allows routes with and without trailing slashes to be treated as distinct endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-10-04-javalin-3.11.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconfig.ignoreTrailingSlashes = false\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Before Handlers in Javalin (Java)\nDESCRIPTION: Shows how to set up WebSocket before handlers in Javalin using Java. These handlers run before all WebSocket requests or specific path-matched requests.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\napp.wsBefore(ws -> {\n    // runs before all WebSocket requests\n});\napp.wsBefore(\"/path/*\", ws -> {\n    // runs before websocket requests to /path/*\n});\n```\n\n----------------------------------------\n\nTITLE: Concurrency Configuration\nDESCRIPTION: Shows how to configure Loom virtual threads and handle concurrency settings in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nConcurrencyUtil.INSTANCE.setUseLoom(false);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nConcurrencyUtil.useLoom = false\n```\n\n----------------------------------------\n\nTITLE: Updating Services Module Descriptor for ServiceLoader\nDESCRIPTION: This code modifies the module-info.java file in the services module to expose the API while hiding implementation details. It uses the 'provides...with' directive to tell ServiceLoader that InMemoryPersonReader implements the PersonReader interface.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nimport org.example.services.api.PersonReader;\nimport org.example.services.inmemory.InMemoryPersonReader;\n\nmodule org.example.services {\n    exports org.example.services.api;\n\n    requires org.example.models;\n\n    // We're telling the ServiceLoader that the InMemoryPersonReader provides the implementation for the PersonReader interface\n    provides PersonReader with InMemoryPersonReader;\n}\n```\n\n----------------------------------------\n\nTITLE: Improving port() Method Behavior in Javalin\nDESCRIPTION: The port() method now returns the port even when the server is not started, instead of returning -1 as in previous versions.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-11-javalin-1.0.1-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nport()\n```\n\n----------------------------------------\n\nTITLE: Fixing Manual Async Start in HttpServletRequest for Java\nDESCRIPTION: An issue with manual calls to 'HttpServletRequest#startAsync' has been resolved, ensuring proper handling of asynchronous requests.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-06-16-javalin-4.6.X-released.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nHttpServletRequest.startAsync()\n```\n\n----------------------------------------\n\nTITLE: Defining a Kotlin Main Function\nDESCRIPTION: Simple demonstration of a Kotlin main function, which doesn't require the public static void declaration found in Java. This example shows a basic hello world output.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-kotlin-example.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() { // can omit args\n    println(\"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Application Settings\nDESCRIPTION: Demonstrates how to configure various Javalin application settings including content type, character encoding, request cache size, and cache disabling. These settings are applied during application creation using the create() method.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-03-03-javalin-1.4.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create().apply {\n    defaultContentType(string) // set a default content-type for responses\n    defaultCharacterEncoding(string) // set a default character-encoding for responses\n    maxBodySizeForRequestCache(long) // set max body size for request cache\n    disableRequestCache() // disable request caching\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Protobuf Compilation\nDESCRIPTION: This Gradle configuration sets up the Protobuf plugin, defines source sets, and configures the protoc executable for generating Java classes from .proto files. It also specifies project dependencies and other build settings.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-03-25-serving-protobuf-with-javalin.md#2025-04-08_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'\n    }\n}\n\nplugins {\n    id \"com.google.protobuf\" version \"0.8.18\"\n    id 'java'\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'org.slf4j:slf4j-simple:1.8.0-beta4'\n    implementation 'io.javalin:javalin:{{site.javalinversion}}'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2'\n    implementation 'com.google.protobuf:protobuf-java:3.19.6'\n}\n\nsourceSets {\n    main {\n        proto {\n            srcDir \"src/main/proto\"\n        }\n        java {\n            srcDirs \"src/main/java\", \"gen/main/java\"\n        }\n    }\n}\n\ngroup = 'tech.gmork'\nversion = '1.0-SNAPSHOT'\ndescription = 'serving-protobuf-with-javalin'\n\nrootProject.tasks.named(\"processResources\") {\n    duplicatesStrategy = 'include'\n}\n\nprotobuf {\n    // Configure the protoc executable\n    protoc {\n        // Download from repositories\n        artifact = 'com.google.protobuf:protoc:3.19.6'\n    }\n\n    generateProtoTasks.generatedFilesBaseDir = 'gen'\n\n    generateProtoTasks {\n        // all() returns the collection of all protoc tasks\n        all().each { task ->\n            // Here you can configure the task\n        }\n\n        ofSourceSet('main')\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Template Rendering Comparison\nDESCRIPTION: Demonstrates template rendering implementation in both frameworks, highlighting Javalin's simpler API compared to SparkJava's more verbose approach.\nSOURCE: https://github.com/javalin/website/blob/master/pages/comparison-to-spark.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\njavalin.get(\"/\", ctx -> ctx.render(\"path\", model));\n// vs\nSpark.get(\"/\", (req, res) -> new ModelAndView(model, \"path\"), new TemplateEngine());\n```\n\n----------------------------------------\n\nTITLE: Creating News Post List with Jekyll and Liquid Templates\nDESCRIPTION: This snippet uses Jekyll's Liquid templating to filter posts categorized as news and display them in reverse chronological order. Each post shows the Javalin version, title, date, and summary with a link to the full post.\nSOURCE: https://github.com/javalin/website/blob/master/pages/news.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% assign newsposts = site.posts | where: \"category\" , \"news\" | sort: 'date' | reverse %}\n\n<div class=\"posts-overview\">\n    <ul class=\"post-list\">\n        {% for post in newsposts %}\n            <li class=\"post-summary\">\n                <a href=\"{{ post.url }}\">\n                    <h2>Javalin {{ post.version }} - {{ post.title }}</h2>\n                    <span class=\"date\">\n                        <time datetime=\"{{ post.date | date_to_xmlschema }}\" itemprop=\"datePublished\">{{ post.date | date: \"%b %-d, %Y\" }}</time>\n                    </span>\n                    <p>{{ post.summary }}</p>\n                </a>\n            </li>\n        {% endfor %}\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering and Accessing App Attributes in Javalin\nDESCRIPTION: Demonstrates how to register a ConnectionPool as an app attribute and access it within a handler. This feature allows sharing of objects across the application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-10-06-javalin-2.3.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create()\n    .attribute(ConnectionPool.class, new ConnectionPool());\n    .get(\"/some-path\", SomeOtherClass::controller)\n    .start(7070);\n\nclass SomeOtherClass {\n    static void controller(Context ctx) {\n        Connection c = ctx.appAttribute(ConnectionPool.class).getConnection()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static File Processing Flow in Javalin\nDESCRIPTION: Illustrates the request processing flow for static files in Javalin, showing the order of handlers and decision points.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nrun before-handlers\nrun endpoint-handlers\nif no-endpoint-handler-found\n    run static-file-handler\n    if static-file-found\n        static-file-handler finishes response and\n        sends to user (response is commited)\n    else\n        response is 404, javalin finishes the response\n        with after-handlers and error-mapping\n```\n\n----------------------------------------\n\nTITLE: Implementing a Realtime Collaboration Server in Java with Javalin WebSockets\nDESCRIPTION: Java implementation of a realtime document collaboration server using Javalin and WebSockets. Creates a map to track documents and their collaborators, with WebSocket handlers for connection, message exchange, and disconnection events.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-04-22-javalin-realtime-collaboration-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\nimport io.javalin.http.staticfiles.Location;\nimport io.javalin.websocket.WsContext;\n\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class JavalinRealtimeCollaborationExampleApp {\n\n    private static final Map<String, Collab> collabs = new ConcurrentHashMap<>();\n\n    public static void main(String[] args) {\n\n        Javalin.create(config -> {\n            config.staticFiles.add(\"/public\", Location.CLASSPATH);\n            config.router.mount(router -> {\n                router.ws(\"/docs/{doc-id}\", ws -> {\n                    ws.onConnect(ctx -> {\n                        if (getCollab(ctx) == null) {\n                            createCollab(ctx);\n                        }\n                        getCollab(ctx).clients.add(ctx);\n                        ctx.send(getCollab(ctx).doc);\n                    });\n                    ws.onMessage(ctx -> {\n                        getCollab(ctx).doc = ctx.message();\n                        getCollab(ctx).clients.stream().filter(c -> c.session.isOpen()).forEach(s -> {\n                            s.send(getCollab(ctx).doc);\n                        });\n                    });\n                    ws.onClose(ctx -> {\n                        getCollab(ctx).clients.remove(ctx);\n                    });\n                });\n            });\n        }).start(7070);\n\n    }\n\n    private static Collab getCollab(WsContext ctx) {\n        return collabs.get(ctx.pathParam(\"doc-id\"));\n    }\n\n    private static void createCollab(WsContext ctx) {\n        collabs.put(ctx.pathParam(\"doc-id\"), new Collab());\n    }\n\n    static public class Collab {\n        public String doc;\n        public Set<WsContext> clients;\n\n        public Collab() {\n            this.doc = \"\";\n            this.clients = ConcurrentHashMap.newKeySet();\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using HaltException in Javalin\nDESCRIPTION: Demonstrates various ways to use HaltException for short-circuiting request lifecycle, including different constructor options for status codes and messages.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nthrow new HaltException();                     // (status: 200, message: \"Execution halted\")\nthrow new HaltException(401);                  // (status: 401, message: \"Execution halted\")\nthrow new HaltException(\"My message\");         // (status: 200, message: \"My message\")\nthrow new HaltException(401, \"Unauthorized\");  // (status: 401, message: \"Unauthorized\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthrow HaltException()                          // (status: 200, message: \"Execution halted\")\nthrow HaltException(401)                       // (status: 401, message: \"Execution halted\")\nthrow HaltException(\"My message\")              // (status: 200, message: \"My message\")\nthrow HaltException(401, \"Unauthorized\")       // (status: 401, message: \"Unauthorized\")\n```\n\n----------------------------------------\n\nTITLE: Sample Output from SimpleLogger in Javalin\nDESCRIPTION: Example log output when using the SimpleLogger with Javalin, showing the startup sequence with timestamps and log levels.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/usr/lib/jvm/java-17/bin/java #...\n2023-08-02 00:53:17.280 [main] INFO io.javalin.Javalin - Starting Javalin ...\n2023-08-02 00:53:17.419 [main] INFO org.eclipse.jetty.server.Server - jetty-11.0.15; built: 2023-04-11T18:37:53.775Z; git: 5bc5e562c8d05c5862505aebe5cf83a61bdbcb96; jvm 17.0.7+7\n2023-08-02 00:53:17.529 [main] INFO org.eclipse.jetty.server.session.DefaultSessionIdManager - Session workerName=node0\n2023-08-02 00:53:17.552 [main] INFO org.eclipse.jetty.server.handler.ContextHandler - Started i.j.j.@3a93b025{/,null,AVAILABLE}\n2023-08-02 00:53:17.565 [main] INFO org.eclipse.jetty.server.AbstractConnector - Started ServerConnector@7fad8c79{HTTP/1.1, (http/1.1)}{0.0.0.0:7070}\n2023-08-02 00:53:17.575 [main] INFO org.eclipse.jetty.server.Server - Started Server@4450d156{STARTING}[11.0.15,sto=0] @626ms\n2023-08-02 00:53:17.575 [main] INFO io.javalin.Javalin - \n       __                  ___          ______\n      / /___ __   ______ _/ (_)___     / ____/\n __  / / __ `/ | / / __ `/ / / __ \\   /___ \\\n/ /_/ / /_/ /| |/ / /_/ / / / / / /  ____/ /\n\\____/\\__,_/ |___/\\__,_/_/_/_/ /_/  /_____/\n\n       https://javalin.io/documentation\n\n2023-08-02 00:53:17.581 [main] INFO io.javalin.Javalin - Listening on http://localhost:7070/\n2023-08-02 00:53:17.594 [main] INFO io.javalin.Javalin - You are running Javalin 5.6.1 (released June 22, 2023).\n2023-08-02 00:53:17.596 [main] INFO io.javalin.Javalin - Javalin started in 318ms \\o/\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Javalin\nDESCRIPTION: Demonstrates file upload handling with corresponding HTML form implementation.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_23\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(file -> {\n        FileUtils.copyInputStreamToFile(file.getContent(), new File(\"upload/\" + file.getName()));\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/upload\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach { (contentType, content, name, extension) ->\n        content.copyTo(File(\"upload/\" + name))\n    }\n}\n```\n\nLANGUAGE: markup\nCODE:\n```\n<form method=\"post\" action=\"/upload\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"files\" multiple>\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Javalin LoginController\nDESCRIPTION: LoginController implementation with handlers for serving the login page, processing login attempts, and handling logout. Includes session management and redirection logic for authenticated routes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2017-05-26-javalin-website-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static Handler serveLoginPage = ctx -> {\n    Map<String, Object> model = ViewUtil.baseModel(ctx);\n    model.put(\"loggedOut\", removeSessionAttrLoggedOut(ctx));\n    model.put(\"loginRedirect\", removeSessionAttrLoginRedirect(ctx));\n    ctx.render(Path.Template.LOGIN, model);\n};\n\npublic static Handler handleLoginPost = ctx -> {\n    Map<String, Object> model = ViewUtil.baseModel(ctx);\n    if (!UserController.authenticate(getQueryUsername(ctx), getQueryPassword(ctx))) {\n        model.put(\"authenticationFailed\", true);\n        ctx.render(Path.Template.LOGIN, model);\n    } else {\n        ctx.sessionAttribute(\"currentUser\", getQueryUsername(ctx));\n        model.put(\"authenticationSucceeded\", true);\n        model.put(\"currentUser\", getQueryUsername(ctx));\n        if (getQueryLoginRedirect(req) != null) {\n            ctx.redirect(getQueryLoginRedirect(ctx));\n        }\n        ctx.render(Path.Template.LOGIN, model);\n    }\n};\n\npublic static Handler handleLogoutPost = ctx -> {\n    ctx.sessionAttribute(\"currentUser\", null);\n    ctx.sessionAttribute(\"loggedOut\", \"true\");\n    ctx.redirect(Path.Web.LOGIN);\n};\n\n// The origin of the request (ctx.path()) is saved in the session so\n// the user can be redirected back after login\npublic static Handler ensureLoginBeforeViewingBooks = ctx -> {\n    if (!ctx.path().startsWith(\"/books\")) {\n        return;\n    }\n    if (ctx.sessionAttribute\"currentUser\") == null) {\n        ctx.sessionAttribute(\"loginRedirect\", ctx.path());\n        ctx.redirect(Path.Web.LOGIN);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Java Main Class for JavalinMithril Application\nDESCRIPTION: Simple Java Main class that initializes and starts the JavalinMithril application by creating an App instance and calling its start method.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin\npackage io.javalin.javalinmithril.demo;\n\npublic class Main {\n\n    public static void main(String[] args){\n        new App().start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Nested Routes in Javalin\nDESCRIPTION: Demonstrates the new nested route declaration syntax using path() method for organizing related endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-12-javalin-0.4.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.routes {\n    path(\"users\") {\n        get(userController::getAllUsers);\n        post(userController::createUser);\n        path(\":id\") {\n            get(userController::getUser);\n            patch(userController::updateUser);\n            delete(userController::deleteUser);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Log4j2 Maven Dependency for Javalin\nDESCRIPTION: Maven dependency configuration to include Log4j2 with SLF4J implementation in a Javalin project. This dependency is required to use Log4j2 as the logging framework.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-slf4j2-impl</artifactId>\n    <version>2.20.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Jetty StatisticsHandler in Javalin\nDESCRIPTION: Demonstrates how to configure a Javalin application with a custom Jetty StatisticsHandler. The handler is added to the server's handler chain, allowing for integration with monitoring tools like Prometheus.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-12-02-javalin-1.2.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nStatisticsHandler statisticsHandler = new StatisticsHandler();\n\nJavalin.create()\n    .embeddedServer(new EmbeddedJettyFactory(() -> {\n        Server server = new Server();\n        server.setHandler(statisticsHandler);\n        return server;\n    }))\n    .start();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval statisticsHandler = StatisticsHandler()\n\nJavalin.create().apply {\n    embeddedServer(EmbeddedJettyFactory({\n        Server(queuedThreadPool).apply {\n            handler = statisticsHandler\n        }\n    }))\n}.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Shade Plugin for Javalin Application\nDESCRIPTION: This XML configuration adds the Maven Shade Plugin to the pom.xml file. It creates a shaded JAR containing all dependencies and specifies the main class of the application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2022-10-30-javalin-docker-example.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-shade-plugin</artifactId>\n    <version>3.4.1</version>\n    <configuration>\n        <transformers>\n            <transformer\n                implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                <mainClass>app.Main</mainClass> <!-- Here you should put the main class of your application -->\n            </transformer>\n        </transformers>\n        <filters>\n            <filter> <!-- This filter is needed to avoid a bug in the shade plugin -->\n                <artifact>*:*</artifact>\n                <excludes>\n                    <exclude>META-INF/*.SF</exclude>\n                    <exclude>META-INF/*.DSA</exclude>\n                    <exclude>META-INF/*.RSA</exclude>\n                </excludes>\n            </filter>\n        </filters>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>shade</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Implementing SLF4J Logging in Kotlin Application\nDESCRIPTION: Example of how to implement SLF4J logging in a Kotlin application. Uses lazy initialization for the logger and demonstrates parameterized logging similar to the Java example.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\npackage org.example\n\nimport org.slf4j.LoggerFactory\n\nclass App() {\n\n    val log by lazy { LoggerFactory.getLogger(App::class.java) }\n\n    constructor() {\n        log.info(\"hello {}!\", \"world\")\n    }\n\n}\n\nfun main(){\n    App()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AccessManager-like Behavior in Javalin 6\nDESCRIPTION: Example of implementing AccessManager-like behavior in Javalin 6 using beforeMatched handler with route role checking.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\napp.beforeMatched(ctx -> {\n    if (ctx.routeRoles().isEmpty()) { // route roles can only be attached to endpoint handlers\n        return; // if there are no route roles, we don't need to check anything\n    }\n    var userRole = getUserRole(ctx);\n    if (!ctx.routeRoles().contains(userRole)) {\n        throw new UnauthorizedResponse();\n    }\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.beforeMatched { ctx ->\n    if (ctx.routeRoles().isEmpty()) { // route roles can only be attached to endpoint handlers\n        return // if there are no route roles, we don't need to check anything\n    }\n    val userRole = getUserRole(ctx)\n    if (!ctx.routeRoles().contains(userRole)) {\n        throw UnauthorizedResponse()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SLF4J Logging in Java Application\nDESCRIPTION: Example of how to implement SLF4J logging in a Java application. Shows the standard pattern of creating a static logger instance and using parameterized logging to log messages with variables.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class App {\n\n    private static final Logger LOG = LoggerFactory.getLogger(App.class);    \n\n    public App(){\n        LOG.info(\"hello {}\",\"world\");\n    }\n\n    public static void main(String ...args) {\n        new App(); \n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Javalin 5\nDESCRIPTION: Demonstrates the new way to configure Cross-Origin Resource Sharing (CORS) in Javalin 5. The CORS plugin has been completely rewritten, replacing the previous methods with a more flexible lambda-based configuration approach.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-4-5.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\nconfig.plugins.enableCors(cors -> {\n    cors.add(corsConfig -> {\n        // replacement for enableCorsForOrigin(@NotNull String... origins)\n        corsConfig.allowHost(/* add your origins here */);\n        //replacement for enableCorsForAllOrigins()\n        corsConfig.anyHost();\n    });\n});\n\n}).start();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\nconfig.plugins.enableCors { cors ->\n    cors.add { corsConfig ->\n        //replacement for enableCorsForOrigin(@NotNull String... origins)\n        corsConfig.allowHost(/* add your origins here */)\n        //replacement for enableCorsForAllOrigins()\n        corsConfig.anyHost()\n    }\n}\n}.start()\n```\n\n----------------------------------------\n\nTITLE: Javalin's Solution: Static Methods in a Lambda Scope\nDESCRIPTION: Javalin's actual implementation using static methods that operate on an instance. This approach uses ThreadLocal variables to maintain instance state within the scope of a routes() call.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-07-17-static-methods-within-lambdas.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\nimport static io.javalin.apibuilder.ApiBuilder.*;\n\nJavalin.create(config -> {\n    config.enableCorsForAllOrigins();\n}).routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAll);\n        post(UserController::create);\n        path(\":user-id\", () -> {\n            get(UserController::getOne);\n            patch(UserController::update);\n            delete(UserController::delete);\n        });\n    });\n}).start(port);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Converters in Javalin (Java/Kotlin)\nDESCRIPTION: Demonstrates how to register custom converters for non-included classes in Javalin for both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nJavalinValidation.register(Instant.class, v -> Instant.ofEpochMilli(v.toLong());\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalinValidation.register(Instant::class.java) { Instant.ofEpochMilli(it.toLong()) }\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin and JSONassert dependencies in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to add Javalin and JSONassert as test dependencies in a Gradle build file. These libraries are used for simulating HTTP APIs and comparing JSON responses in tests.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-07-11-using-javalin-as-http-simulator.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.javalin:javalin:3.+\")\ntestImplementation(\"org.skyscreamer:jsonassert:1.+\")\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for 404 Page\nDESCRIPTION: Defines the styling for the 404 error page components, including flexbox layout, image sizing, and spacing adjustments.\nSOURCE: https://github.com/javalin/website/blob/master/404.md#2025-04-08_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.not-found {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n    }\n\n    .not-found img {\n        width: 360px;\n        max-width: calc(100% - 80px);\n        display: block;\n        margin: 32px 0;\n    }\n\n    .not-found p {\n        margin: 16px 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin Hello World Application in Java and Kotlin\nDESCRIPTION: Demonstrates how to create a basic Javalin application that responds with 'Hello World' on the root path. The example shows the simplicity of setting up a Javalin server and defining a route.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-06-javalin-1.0.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic static void main(String[] args) {\n    Javalin app = Javalin.start(7000);\n    app.get(\"/\", ctx -> ctx.result(\"Hello World\"));\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    val app = Javalin.start(7000)\n    app.get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson JSON Mapper in Javalin\nDESCRIPTION: Demonstrates how to configure the Jackson ObjectMapper globally in Javalin for JSON processing.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nJavalinJackson.configure(objectMapper)\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Users Endpoint with OpenAPI Annotations\nDESCRIPTION: Demonstrates how to add OpenAPI annotations to a GET endpoint that retrieves all users. Shows implementation for both Java and Kotlin with proper response type definitions.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-03-javalin-openapi-example.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@OpenApi(\n    summary = \"Get all users\",\n    operationId = \"getAllUsers\",\n    path = \"/users\",\n    methods = HttpMethod.GET,\n    tags = {\"User\"},\n    responses = {\n        @OpenApiResponse(status = \"200\", content = {@OpenApiContent(from = User[].class)})\n    }\n)\npublic static void getAll(Context ctx) {\n    ctx.json(UserService.getAll());\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@OpenApi(\n    summary = \"Get all users\",\n    operationId = \"getAllUsers\",\n    tags = [\"User\"],\n    responses = [OpenApiResponse(\"200\", [OpenApiContent(Array<User>::class)])],\n    path = \"/users\",\n    methods = [HttpMethod.GET]\n)\nfun getAll(ctx: Context) {\n    ctx.json(UserService.getAll())\n}\n```\n\n----------------------------------------\n\nTITLE: Using CrudHandler in Javalin 2.X\nDESCRIPTION: Examples of using the CrudHandler interface within a routes() call to implement the five most common CRUD operations (getAll, getOne, create, update, delete).\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    crud(\"users/:user-id\", new UserController());\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    crud(\"users/:user-id\", UserController())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin SSL Plugin Dependency with SBT\nDESCRIPTION: SBT dependency configuration for adding the Javalin SSL plugin to a project.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nlibraryDependencies += \"io.javalin.community.ssl\" % \"ssl-plugin\" % \"{{site.javalinversion}}\"\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for 404 Page\nDESCRIPTION: Defines the layout and content structure for the 404 error page, including an image and explanatory text.\nSOURCE: https://github.com/javalin/website/blob/master/404.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"not-found\">\n    <img src=\"/img/juke.png\" alt=\"Decorative illustration\">\n    <p>\n        Well... the bad news is that the page you requested isn't here.<br>\n        The good news is that you found Javalin's secret mascot, Juke.\n    </p>\n    <p>You can use the top menu to find what you're looking for.</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Graceful Shutdown in Javalin\nDESCRIPTION: Demonstrates how to configure a graceful shutdown period for the Jetty server in Javalin, allowing pending requests to complete before the server fully stops.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_43\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.jetty.modifyServer(server -> server.setStopTimeout(5_000)); // wait 5 seconds for existing requests to finish\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.jetty.modifyServer { server -> server.setStopTimeout(5_000) } // wait 5 seconds for existing requests to finish\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Logback in Javalin Application\nDESCRIPTION: Example console output when using Logback with Javalin, showing the formatted logs with timestamps, log levels, and thread information during application startup.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/usr/lib/jvm/java-17/bin/java #...\n2023-08-02 01:45:26,386 INFO  [main] io.javalin.Javalin: Starting Javalin ...\n2023-08-02 01:45:26,503 INFO  [main] o.e.j.server.Server: jetty-11.0.15; built: 2023-04-11T18:37:53.775Z; git: 5bc5e562c8d05c5862505aebe5cf83a61bdbcb96; jvm 17.0.7+7\n2023-08-02 01:45:26,560 INFO  [main] o.e.j.s.s.DefaultSessionIdManager: Session workerName=node0\n2023-08-02 01:45:26,576 INFO  [main] o.e.j.s.h.ContextHandler: Started i.j.j.@4bff7da0{/,null,AVAILABLE}\n2023-08-02 01:45:26,584 INFO  [main] o.e.j.s.AbstractConnector: Started ServerConnector@66d3eec0{HTTP/1.1, (http/1.1)}{0.0.0.0:7070}\n2023-08-02 01:45:26,592 INFO  [main] o.e.j.server.Server: Started Server@26e356f0{STARTING}[11.0.15,sto=0] @773ms\n2023-08-02 01:45:26,592 INFO  [main] io.javalin.Javalin: \n       __                  ___          ______\n      / /___ __   ______ _/ (_)___     / ____/\n __  / / __ `/ | / / __ `/ / / __ \\   /___ \\\n/ /_/ / /_/ /| |/ / /_/ / / / / / /  ____/ /\n\\____/\\__,_/ |___/\\__,_/_/_/_/ /_/  /_____/\n\n       https://javalin.io/documentation\n\n2023-08-02 01:45:26,597 INFO  [main] io.javalin.Javalin: Listening on http://localhost:7070/\n2023-08-02 01:45:26,609 INFO  [main] io.javalin.Javalin: You are running Javalin 5.6.1 (released June 22, 2023).\n2023-08-02 01:45:26,610 INFO  [main] io.javalin.Javalin: Javalin started in 227ms \\o/\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Parameters in Javalin 2.X Handlers\nDESCRIPTION: Examples of using wildcard parameters (splats) in endpoint handlers. Wildcards are defined with asterisks and can be accessed through the Context.splat() method.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/hello/*/and/*\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/hello/*/and/*\") { ctx ->\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin SSL Plugin Dependency with Buildr\nDESCRIPTION: Buildr dependency configuration for adding the Javalin SSL plugin to a project.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n'io.javalin.community.ssl:ssl-plugin:jar:{{site.javalinversion}}'\n```\n\n----------------------------------------\n\nTITLE: Updating API Module Descriptor to Consume Services\nDESCRIPTION: Adding the 'uses' directive to the API module descriptor to indicate that this module consumes the PersonReader service. This is required for ServiceLoader to properly load service implementations.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nmodule org.example.api {\n    requires io.javalin;\n    requires com.fasterxml.jackson.databind;\n    requires org.slf4j;\n\n    requires org.example.services;\n\n    uses org.example.services.api.PersonReader;    // <-- add this line\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vue Component Shorthand in JavalinVue\nDESCRIPTION: Shows the new shorthand syntax for defining Vue components in JavalinVue. This simplifies component declaration.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2019-09-15-javalin-3.5.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nVueComponent(\"my-tag\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up User Module with Guice Multibinder\nDESCRIPTION: UserModule class that configures Guice bindings for user-related components, installs service and repository modules, and uses Multibinder to register routing endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage io.kidbank.user;\n\nimport com.google.inject.AbstractModule;\nimport com.google.inject.multibindings.Multibinder;\nimport io.alzuma.Routing;\nimport io.kidbank.user.repositories.UserRepositoryModule;\nimport io.kidbank.user.services.UserServiceModule;\n\npublic class UserModule extends AbstractModule {\n    @Override\n    protected void configure() {\n        bind(UserController.class);\n        install(new UserServiceModule());\n        install(new UserRepositoryModule());\n        Multibinder.newSetBinder(binder(), Routing.class).addBinding().to(UserRouting.class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logback Dependency to Maven Project for Javalin\nDESCRIPTION: Maven dependency configuration to add the Logback Classic library as a logging implementation for Javalin applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>1.4.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Vue.js Layout Template in Javalin\nDESCRIPTION: HTML layout template for JavalinVue integration that allows simplified Vue.js development without NPM. The template includes placeholders for component registration and route components that Javalin will automatically populate.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_56\n\nLANGUAGE: markup\nCODE:\n```\n<head>\n    <script src=\"/webjars/vue/2.6.10/dist/vue.min.js\"></script>\n    @componentRegistration\n</head>\n<body>\n<main id=\"main-vue\" v-cloak>\n    @routeComponent\n</main>\n<script>\n    new Vue({el: \"#main-vue\"});\n</script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NullPointerException when mocking Context without InlineMockMaker\nDESCRIPTION: This code snippet shows the error that occurs when trying to mock the Context class without enabling InlineMockMaker in Javalin 2.1.0 or earlier.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2019-10-20-javalin-mockito-example.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava.lang.NullPointerException\n\tat io.javalin.http.Context.status(Context.kt:386)\n\tat com.shareplaylearn.httphandlers.TeapotRequestHandler.handleBrewCoffee(TeapotRequestHandler.java:47)\n\tat TeapotRequestHandlerTest.handleBrewCoffee(TeapotRequestHandlerTest.java:21)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Micrometer Plugin with Prometheus in Javalin\nDESCRIPTION: Java code demonstrating how to initialize a Prometheus meter registry, configure the Micrometer plugin in Javalin, and expose metrics through an endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/micrometer.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    PrometheusMeterRegistry prometheusMeterRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n\n    MicrometerPlugin micrometerPlugin = new MicrometerPlugin(micrometerPluginConfig -> micrometerPluginConfig.registry = prometheusMeterRegistry);\n    Javalin app = Javalin.create(config -> config.registerPlugin(micrometerPlugin)).start(8080);\n\n    String contentType = \"text/plain; version=0.0.4; charset=utf-8\";\n    app.get(\"/prometheus\", ctx -> ctx.contentType(contentType).result(prometheusMeterRegistry.scrape()));\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Query Parameter Handling in Javalin 1.4.1\nDESCRIPTION: This update fixes issues with query parameter handling and request body reading introduced in version 1.4.0. The solution involves parsing query parameters from HttpServletRequest#getQueryString instead of using Context#queryParam, which previously caused the request body to be drained prematurely.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-03-04-javalin-1.4.1-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nContext#queryParam\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nHttpServletRequest#getParameter\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nHttpServletRequest#getQueryString\n```\n\n----------------------------------------\n\nTITLE: Javalin Validator API Methods\nDESCRIPTION: Lists the available methods in the Validator API, including methods for allowing nullable values, adding checks, retrieving validated values, and handling errors.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nallowNullable()                     // turn the Validator into a NullableValidator (must be called first)\ncheck(predicate, \"error\")           // add a check with a ValidationError(\"error\") to the Validator\ncheck(predicate, validationError)   // add a check with a ValidationError to the Validator (can have args for localization)\nget()                               // return the validated value as the specified type, or throw ValidationException\ngetOrThrow(exceptionFunction)       // return the validated value as the specified type, or throw custom exception\ngetOrDefault()                      // return default-value if value is null, else call get()\nerrors()                            // get all the errors of the Validator (as map(\"fieldName\", List<ValidationError>))\n```\n\n----------------------------------------\n\nTITLE: Attempting to mock Context class in Javalin 2.1.0 or earlier\nDESCRIPTION: This code snippet demonstrates an attempt to mock the Context class, which fails silently due to the class being final in Javalin 2.1.0 or earlier versions.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2019-10-20-javalin-mockito-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nContext context = mock(Context.class);\n```\n\n----------------------------------------\n\nTITLE: Defining PersonReader Interface\nDESCRIPTION: Creates an interface for reading Person objects with a method to get all persons\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.services.api;\n\nimport org.example.models.Person;\n\nimport java.util.List;\n\npublic interface PersonReader {\n    List<Person> getAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-sent Events in Javalin with Kotlin\nDESCRIPTION: This snippet demonstrates how to set up Server-sent events in Javalin using Kotlin. It shows creating a client queue, handling connections, sending events, and managing client disconnections.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2019-01-17-javalin-2.6.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval clients = ConcurrentLinkedQueue<SseClient>()\n\napp.sse(\"/sse\") { client ->\n    clients.add(client)\n    client.sendEvent(\"connected\", \"Hello, SSE\")\n    client.onClose { clients.remove(client) }\n}\n\nwhile (true) {\n    for (client in clients) {\n        client.sendEvent(\"PING\")\n    }\n    Thread.sleep(1000)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Context Extension Usage\nDESCRIPTION: Demonstrates the basic usage of context extensions for object serialization, showing how to simplify method calls using the context object.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-05-21-javalin-1.7.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> MyMapperUtil.serialize(ctx, myMapper, myObject)); // three args, what happens where?\n```\n\n----------------------------------------\n\nTITLE: Collecting Validator Errors in Javalin (Java)\nDESCRIPTION: Shows how to collect and merge errors from multiple validators in Javalin using Java. It demonstrates creating a validator with multiple checks and accessing the errors.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nValidator<String> stringValidator = ctx.queryParam(\"first_name\", String.class)\n    .check(n -> !n.contains(\"-\"), \"cannot contain hyphens.\")\n    .check(n -> n.length() < 10, \"cannot be longer than 10 characters.\");\n\n//Empty map if no errors, otherwise a map with the key \"first_name\" and failed check messages in the list.\nMap<String, List<String>> errors = stringValidator.errors();\n\n// Merges all errors from all validators in the list. Empty map if no errors exist.\nMap<String, List<String>> manyErrors = Validator.collectErrors(stringValidator, otherValidator, etc)\n```\n\n----------------------------------------\n\nTITLE: Registering Context Extensions\nDESCRIPTION: Example of registering context extensions in a before filter, showing how to initialize extensions with dependencies.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-05-21-javalin-1.7.0-released.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.before(ctx -> ctx.register(MyMapper.class, new MyMapper(ctx, otherDependency));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Path Parameter Syntax in Javalin 4\nDESCRIPTION: Shows the change in path parameter syntax from :param to {param} format, and introduces new <param> syntax for slash-containing parameters. Allows for complex path patterns like /{p1}AND{p2} and /{filename}.{extension}.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-02-17-javalin-4.0.0-alpha.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n/{param}           // Standard parameter\n<param>            // Parameter that can contain slashes\n/{p1}AND{p2}      // Combined parameters\n/{filename}.{extension} // Complex pattern\n```\n\n----------------------------------------\n\nTITLE: Validation Examples in Javalin (Java)\nDESCRIPTION: Provides examples of more complex validations in Javalin using Java. It shows how to validate dependent query parameters and a JSON body.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_32\n\nLANGUAGE: java\nCODE:\n```\n// validate two dependent query parameters:\nInstant fromDate = ctx.queryParam(\"from\", Instant.class).get();\nInstant toDate = ctx.queryParam(\"to\", Instant.class)\n        .check(it -> it.isAfter(fromDate), \"'to' has to be after 'from'\")\n        .get();\n\n// validate a json body:\nMyObject myObject = ctx.bodyValidator(MyObject.class)\n        .check(obj -> obj.myObjectProperty == someValue)\n        .get();\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalizationSupport in Java\nDESCRIPTION: Updates the Localizer class to implement JTE's LocalizationSupport interface, which provides better XSS protection and content handling for localized strings.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npackage app;\n\nimport gg.jte.support.LocalizationSupport;\nimport java.util.*;\n\npublic class Localizer implements LocalizationSupport {\n\n    private final ResourceBundle bundle;\n\n    public Localizer(Locale locale) {\n        bundle = ResourceBundle.getBundle(\"localization\", locale);\n    }\n\n    @Override\n    public String lookup(String key) {\n        return bundle.getString(key);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Context Seekable Stream Usage\nDESCRIPTION: Improved implementation of Context#seekableStream that now properly closes the InputStream and handles range responses.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-04-24-javalin-4.5.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nContext#seekableStream\n```\n\n----------------------------------------\n\nTITLE: Declaring Javalin 4.0.0.RC0 Dependency in Maven POM\nDESCRIPTION: Specifies the Maven dependency for Javalin 4.0.0.RC0. This XML snippet demonstrates how to include the Javalin library in a Maven project's pom.xml file for the first release candidate version.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-07-28-javalin-4.0.0-rc.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin</artifactId>\n    <version>4.0.0.RC0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Subprojects in settings.gradle\nDESCRIPTION: Gradle settings file configuration to include the three subprojects: models, services, and api.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.name = 'javalin-with-jpms-and-gradle'\n\n// Include the subprojects as follows\ninclude 'models'\ninclude 'services'\ninclude 'api'\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Server in Javalin\nDESCRIPTION: Basic example showing how to create and start a Javalin server on port 7000 with a simple Hello World endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-08-19-javalin-2.0.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    Javalin app = Javalin.create().start(7000);\n    app.get(\"/\", ctx -> ctx.result(\"Hello World\"));\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) {\n    val app = Javalin.create().start(7000)\n    app.get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Validator Errors in Javalin (Kotlin)\nDESCRIPTION: Shows how to collect and merge errors from multiple validators in Javalin using Kotlin. It demonstrates creating a validator with multiple checks and accessing the errors.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval stringValidator = ctx.queryParam<String>(\"first_name\")\n    .check({ !it.contains(\"-\") }, \"cannot contain hyphens.\")\n    .check({ it.length < 10 }, \"cannot be longer than 10 characters.\")\n\n//Empty map if no errors, otherwise a map with the key \"first_name\" and failed check messages in the list.\nval errors = stringValidator.errors()\n\n// Merges all errors from all validators in the list. Empty map if no errors exist.\nval manyErrors = listOf(stringValidator, otherValidator, etc)\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Request Generator for Traffic Simulation\nDESCRIPTION: Method to generate randomized HTTP requests to the test endpoints. This code creates threads that make multiple requests, primarily targeting the '200 OK' endpoint but also randomly hitting other endpoints with different behaviors.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-12-02-javalin-prometheus-example.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate static void spawnRandomRequests() throws InterruptedException {\n    new Thread(() -> {\n        for (int i = 0; i < new Random().nextInt(50); i++) {\n            Unirest.get(\"http://localhost:7070/1\").asString(); // we want a lot more \"200 - OK\" traffic\n            Unirest.get(\"http://localhost:7070/\" + (1 + new Random().nextInt(5))).asString(); // hit a random (1-5) endpoint\n        }\n    }).start();\n    Thread.sleep((int) (Math.random() * 250));\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun spawnRandomRequests() {\n    Thread {\n        for (i in 0 until (0..50).shuffled()[0]) {\n            Unirest.get(\"http://localhost:7070/1\").asString() // we want a lot more \"200 - OK\" traffic\n            Unirest.get(\"http://localhost:7070/\" + (1..5).shuffled()[0]).asString() // hit a random (1-5) endpoint\n        }\n    }.start()\n    Thread.sleep((Math.random() * 250).toLong())\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Context Extension Example\nDESCRIPTION: Comprehensive example showing how to implement context extensions for form parameter validation and query parameter extraction.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-05-21-javalin-1.7.0-released.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class Ext {\n    private Context ctx;\n    public Ext(Context ctx) {\n        this.ctx = ctx;\n    }\n    public String formUsername() {\n        String username = ctx.formParam(\"username\");\n        if (userName == null) {\n            throw new InvalidFormException();\n        }\n        return username;\n    }\n    public String userLocale() {\n        return ctx.queryParam(\"locale\");\n    }\n}\n\napp.post(ctx -> {\n    String username = ctx.use(Ext.class).formUsername();\n    String locale = ctx.use(Ext.class).userLocale();\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Javalin 4.6.1 Changes in Markdown\nDESCRIPTION: This snippet outlines the changes and improvements made in Javalin 4.6.1, including SSE connection handling, JavalinVue enhancements, dependency updates, and a new plugin introduction.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-06-05-javalin-4.6.1-released.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Changes\n* The closing of SSE connections is now more consistent.\n  The close-callback is now called every time the connection is closed,\n  including when it is closed manually by the user.\n* The `LoadableData` JavaScript class in the `JavalinVue` plugin\n  now has more options for reloading itself\n* Bump Jackson (optional), Logback (bundle) and GSON (test) to latest versions\n* Jetty `EofException` and `TimeoutException` are no longer logged for async handlers\n* A new plugin, `HttpAllowedMethodsOnRoutesUtil` has been added\n```\n\n----------------------------------------\n\nTITLE: JWT Provider Configuration in Java\nDESCRIPTION: Setup of JWT provider including algorithm initialization, token generator, and verifier configuration using Auth0 JWT library\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-11-javalin-jwt-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nAlgorithm algorithm = Algorithm.HMAC256(\"very_secret\");\n\nJWTGenerator<MockUser> generator = (user, alg) -> {\n            JWTCreator.Builder token = JWT.create()\n                    .withClaim(\"name\", user.name)\n                    .withClaim(\"level\", user.level);\n            return token.sign(alg);\n        };\n\nJWTVerifier verifier = JWT.require(algorithm).build();\n\nJWTProvider provider = JWTProvider(algorithm, generator, verifier);\n```\n\n----------------------------------------\n\nTITLE: Managing SSE Clients in Javalin 5\nDESCRIPTION: Shows how to handle Server-Sent Events (SSE) clients in Javalin 5. Unlike in Javalin 4, connections are not automatically kept alive by default, so explicit keepAlive() calls are required to maintain connections outside the handler.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-4-5.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nArrayList<SseClient> clients = new ArrayList<>();\n\napp.sse(\"/sse\", client -> {\n    client.keepAlive();\n    client.onClose(() - > clients.remove(client));\n    clients.add(client);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval clients = mutableListOf<SseClient>()\n\napp.sse(\"/sse\") { client ->\n    client.keepAlive()\n    client.onClose { clients.remove(client) }\n    clients.add(client)\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Mapping in Javalin\nDESCRIPTION: Shows how to implement exception handlers for both HTTP and WebSocket endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_29\n\nLANGUAGE: java\nCODE:\n```\n// HTTP exceptions\napp.exception(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.exception(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n\n// WebSocket exceptions\napp.wsException(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.wsException(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// HTTP exceptions\napp.exception(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.exception(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n\n// WebSocket exceptions\napp.wsException(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.wsException(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes for Javalin 5.4.0\nDESCRIPTION: Structured changelog documenting new features, bug fixes, and other changes in Javalin 5.4.0. Includes links to GitHub pull requests and commits.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2023-03-04-javalin-5.4.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: news\nhidewhatsjavalin: false\ncategory: news\ndate: 2023-03-04\nversion: 5.4.0\ntitle: Javalin 5.4.0 is out!\nsummary: Mimetypes for static files, Jetty and Jackson updates, SSL port support, and various fixes and improvements.\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin SSL Plugin Dependency with Maven\nDESCRIPTION: Maven dependency configuration for adding the Javalin SSL plugin to a project. This plugin enables SSL support in Javalin applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n<dependency>\n    <groupId>io.javalin.community.ssl</groupId>\n    <artifactId>ssl-plugin</artifactId>\n    <version>{{site.javalinversion}}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Request Handling in Javalin with Kotlin\nDESCRIPTION: This snippet demonstrates how to use CompletableFuture to handle async requests in Javalin. It creates a simple server that responds with a delayed 'Hello World!' message using a CompletableFuture.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-04-14-javalin-1.6.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\n\nfun main(args: Array<String>) {\n    val app = Javalin.start(7000)\n    app.get(\"/\") { ctx -> ctx.result(getFuture()) }\n}\n\n// hopefully your future is less pointless than this:\nprivate fun getFuture() = CompletableFuture<String>().apply {\n    Executors.newSingleThreadScheduledExecutor().schedule({ this.complete(\"Hello World!\") }, 1, TimeUnit.SECONDS)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Strategy in Javalin 3.2.0\nDESCRIPTION: This snippet demonstrates how to configure the new compression strategy in Javalin 3.2.0, including both Brotli and Gzip compression with custom compression levels. It also shows the deprecated dynamicGzip setting.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2019-07-21-javalin-3.2.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.dynamicGzip = true // deprecated\n    config.compressionStrategy(Brotli(4), Gzip(6))\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Template Engines in Kotlin\nDESCRIPTION: Kotlin code showing how to register multiple template engines (Mustache and JTE) with the custom JavalinRenderer class.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.fileRenderer(\n        JavalinRenderer()\n            .register(\"mustache\", JavalinMustache())\n            .register(\"jte\", JavalinJte())\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Lifecycle Events in Java\nDESCRIPTION: Demonstrates how to set up lifecycle events for a Javalin application, including server start/stop events and handler addition events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create().events(event -> {\n    event.serverStarting(() -> { ... });\n    event.serverStarted(() -> { ... });\n    event.serverStartFailed(() -> { ... });\n    event.serverStopping(() -> { ... });\n    event.serverStopped(() -> { ... });\n    event.handlerAdded(handlerMetaInfo -> { ... });\n    event.wsHandlerAdded(wsHandlerMetaInfo -> { ... });\n});\n\napp.start() // serverStarting -> (serverStarted || serverStartFailed)\napp.stop() // serverStopping -> serverStopped\n```\n\n----------------------------------------\n\nTITLE: Exposing Default ObjectMapper in JavalinJackson\nDESCRIPTION: This update exposes the default ObjectMapper from JavalinJackson, allowing more flexibility in JSON serialization and deserialization in Javalin applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-08-27-javalin-3.10.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Exposed the default `ObjectMapper` from `JavalinJackson`\n```\n\n----------------------------------------\n\nTITLE: Creating a Fat JAR with Gradle\nDESCRIPTION: Gradle task configuration to create a fat JAR that includes all dependencies, necessary for the GraalVM compilation process to access all required classes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ntask fatJar(type: Jar) {\n    manifest {\n        attributes 'Implementation-Title': 'Gradle Jar File Example',\n                'Implementation-Version': version,\n                'Main-Class': 'de.nerden.samples.graal.Main'\n    }\n    baseName = project.name + '-all'\n    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }\n    with jar\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Model in Mithril\nDESCRIPTION: Defines a UserModel class that handles fetching user data from the API endpoints and maintains user state.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass UserModel {\n}\n\nUserModel.list = [];\nUserModel.current = null;\nUserModel.fetch = function () {\n    m.request(\"/api/users\").then(function (result) {\n        UserModel.list = result;\n    })\n};\n\nUserModel.fetchOne = function (id) {\n    m.request(`/api/users/${id}`).then(function (result) {\n        UserModel.current = result;\n    })\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing Options in Javalin\nDESCRIPTION: Demonstrates how to configure routing options in Javalin including context path, trailing slashes handling, and case sensitivity settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.routing.contextPath = stringValue; // the context path (ex '/blog' if you are hosting an app on a subpath, like 'mydomain.com/blog')\n    config.routing.ignoreTrailingSlashes = booleanValue; // treat '/path' and '/path/' as the same path\n    config.routing.treatMultipleSlashesAsSingleSlash = booleanValue; // treat '/path//subpath' and '/path/subpath' as the same path\n    config.routing.caseInsensitiveRoutes = booleanValue; // treat '/PATH' and '/path' as the same path\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.routing.contextPath = stringValue // the context path (ex '/blog' if you are hosting an app on a subpath, like 'mydomain.com/blog')\n    config.routing.ignoreTrailingSlashes = booleanValue // treat '/path' and '/path/' as the same path\n    config.routing.treatMultipleSlashesAsSingleSlash = booleanValue // treat '/path//subpath' and '/path/subpath' as the same path\n    config.routing.caseInsensitiveRoutes = booleanValue // treat '/PATH' and '/path' as the same path\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Kotlin dependency version in Javalin 1.2.1\nDESCRIPTION: Kotlin dependency was updated to version 1.2.10 with no breaking changes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-01-03-javalin-1.2.1-released.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1.2.10\n```\n\n----------------------------------------\n\nTITLE: Generating a Self-Signed Certificate with OpenSSL\nDESCRIPTION: Command to generate a self-signed certificate valid for 365 days using OpenSSL. This creates a private key file (key.pem) and a certificate file (cert.pem) using RSA 4096-bit encryption.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365\n```\n\n----------------------------------------\n\nTITLE: Exploring the Plugin Class Interface in Kotlin\nDESCRIPTION: The base Plugin class interface that must be extended to create a Javalin plugin. It accepts a generic type parameter CONFIG for configuration and provides methods to hook into Javalin's lifecycle.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/how-to.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class Plugin<CONFIG>(userConfig: Consumer<CONFIG>? = null, defaultConfig: CONFIG? = null) {\n\n    /** Initialize properties and access configuration before any handler is registered. */\n    open fun onInitialize(config: JavalinConfig) {}\n\n    /** Called when the plugin is applied to the Javalin instance. */\n    open fun onStart(config: JavalinConfig) {}\n\n    /** Checks if plugin can be registered multiple times. */\n    open fun repeatable(): Boolean = false\n\n    /** The priority of the plugin that determines when it should be started. */\n    open fun priority(): PluginPriority = PluginPriority.NORMAL\n\n    /** The name of this plugin. */\n    open fun name(): String = this.javaClass.simpleName\n\n    /** The combined config of the plugin. */\n    @JvmField\n    protected var pluginConfig: CONFIG = defaultConfig?.also { userConfig?.accept(it) } as CONFIG\n}\n```\n\n----------------------------------------\n\nTITLE: Host Configuration in Javalin\nDESCRIPTION: Setting up server host and port configuration.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create().start(\"127.0.0.1\", 1235)\n```\n\n----------------------------------------\n\nTITLE: Refactoring MyAPI to Use ServiceLoader\nDESCRIPTION: Updated API class that uses ServiceLoader to dynamically locate an implementation of the PersonReader interface. This decouples the API from specific implementations, improving modularity and maintainability.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.api;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.javalin.Javalin;\nimport org.example.services.api.PersonReader;        // <-- this is one is new, and we're no longer importing the InMemoryPersonReader\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ServiceLoader;                      // <-- importing the ServiceLoader\n\npublic class MyAPI {\n    private static Logger logger = LoggerFactory.getLogger(MyAPI.class);\n    private static short port = 7312;\n\n    public static void main(String[] args) {\n        var personReader = ServiceLoader.load(PersonReader.class).findFirst().get();     // <-- Getting an implementation for the PersonReader interface from the ServiceLoader\n        var objMapper = new ObjectMapper();\n        var result = objMapper.valueToTree(personReader.getAll());\n\n        logger.info(\"API: found {} people.\", personReader.getAll().size());\n\n        var app = Javalin.create().start(port);\n        app.get(\"/ping\", ctx -> ctx.result(\"pong\"));\n        app.get(\"/persons\", ctx -> ctx.json(result));\n\n        logger.info(\"API's alive for real :-)))\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin Lifecycle Events in Kotlin\nDESCRIPTION: Shows how to set up lifecycle events for a Javalin application in Kotlin, including server start/stop events and handler addition events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_48\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin app = Javalin.create().events { event ->\n    event.serverStarting { ... }\n    event.serverStarted { ... }\n    event.serverStartFailed { ... }\n    event.serverStopping { ... }\n    event.serverStopped { ... }\n    event.handlerAdded { handlerMetaInfo -> }\n    event.wsHandlerAdded { wsHandlerMetaInfo -> }\n}\n\napp.start() // serverStarting -> (serverStarted || serverStartFailed)\napp.stop() // serverStopping -> serverStopped\n```\n\n----------------------------------------\n\nTITLE: Implementing Main JavaScript Logic for Omegle Clone Frontend\nDESCRIPTION: Main JavaScript file (app.js) for the Omegle clone frontend. It initializes the application, sets up event listeners for peer connections and UI elements.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2024-01-13-omeglin/2023-12-30-building-omegle-in-javalin.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{% include_relative snippets/main/resources/public/js/app.js %}\n```\n\n----------------------------------------\n\nTITLE: Using Updated Validator API in Javalin 4.1.0\nDESCRIPTION: Demonstrates the new validator functionality in Javalin 4.1.0 that allows direct object validation instead of only string validation. This enhancement provides more flexibility in validation workflows.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-10-02-javalin-4.1.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nValidator(\"name\", myObject)\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Subscription Class in Kotlin\nDESCRIPTION: Example of creating a GraphQL subscription in Kotlin using the SubscriptionGraphql interface. Demonstrates using Reactor's Flux for a time-based counter subscription.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/graphql.md#2025-04-08_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@GraphQLDescription(\"Subscription Example\")\nclass SubscriptionExample: SubscriptionGraphql {\n    fun counter(): Flux<Int> = Flux.interval(Duration.ofMillis(100)).map { 1 }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Logging in Javalin\nDESCRIPTION: Demonstrates WebSocket event logging setup using config.wsLogger(). Handles onMessage, onConnect, onError and onClose events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_47\n\nLANGUAGE: java\nCODE:\n```\napp.create(config -> {\n    config.wsLogger(ws -> {\n        ws.onMessage(ctx -> {\n            System.out.println(\"Received: \" + ctx.message());\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.create { config ->\n    config.wsLogger(ws -> {\n        ws.onMessage { ctx ->\n            println(\"Received: \" + ctx.message());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency to Maven POM\nDESCRIPTION: The Maven dependency configuration needed to include Javalin in your project. This should be added to the dependencies section of your pom.xml file.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-24-javalin-maven-example.md#2025-04-08_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.javalin</groupId>\n        <artifactId>javalin</artifactId>\n        <version>{{site.javalinversion}}</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL on Ubuntu\nDESCRIPTION: Command to install OpenSSL on Ubuntu systems using apt package manager.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install openssl\n```\n\n----------------------------------------\n\nTITLE: Client Data Handling and Validation in Javalin\nDESCRIPTION: Demonstrates methods for extracting and validating client data, including form parameters, query parameters, file uploads, and JSON body validation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-09-13-javalin-4.0.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// basic methods\nctx.body();                           // get the request body as a string (caches the body)\nctx.formParam(\"name\");                // get a form parameter\nctx.queryParam(\"name\");               // get a query parameter\nctx.uploadedFile(\"name\");             // get an uploaded file\n\n// JSON methods\nctx.bodyAsClass(clazz);               // deserialize ctx.body() to class\nctx.bodyStreamAsClass(clazz);         // consume inputstream from request and deserialize to class\n\n// validation\nInteger age = ctx.queryParamAsClass(\"age\", Integer.class)  // wraps parameter in Validator\n    .check(age -> age > 18, \"NOT_OLD_ENOUGH\") // adds check with error message\n    .get(); // gets the validated value, or throws ValidationException\nBananaBox bananaBox = ctx.bodyValidator(BananaBox.class)\n    .check(box -> box.weight < 5, ValidationError(\"WEIGHT_TOO_HIGH\", Map.of(\"MAX_WEIGHT\", 5)))\n    .check(box -> box.bananas.length > 20, ValidationError(\"NOT_ENOUGH_BANANAS\", Map.of(\"MIN_BANANAS\", 20)))\n    .getOrDefault(defaultBananaBox) // uses default if body is null, runs validation rules otherwise\n```\n\n----------------------------------------\n\nTITLE: Object Mapping with JSON\nDESCRIPTION: Examples of mapping between JSON and objects using Javalin's built-in JSON functionality for both request and response handling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-08-19-javalin-2.0.0-released.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nTodo[] todos = ...\napp.get(\"/todos\", ctx -> { // map array of Todos to json-string\n    ctx.json(todos);\n});\napp.put(\"/todos\", ctx -> { // map request-body (json) to array of Todos\n    todos = ctx.bodyAsClass(Todo[].class);\n    ctx.status(204);\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvar todos = arrayOf(...)\napp.get(\"/todos\") { ctx -> // map array of Todos to json-string\n    ctx.json(todos)\n}\napp.put(\"/todos\") { ctx -> // map request-body (json) to array of Todos\n    todos = ctx.body<Array<Todo>>()\n    ctx.status(204)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repositories for Bukkit/Spigot/Paper in Gradle\nDESCRIPTION: Gradle configuration for adding Maven repositories required for Bukkit, Spigot, and Paper dependencies. This includes mavenCentral and the Spigot snapshot repository.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-04-06-javalin-and-minecraft-servers.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nrepositories {\n    mavenCentral()\n    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }\n}\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Events Configuration\nDESCRIPTION: Implementation of server lifecycle event handlers including start, stop, and handler addition events.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_55\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create().events(event -> {\n    event.serverStarting(() -> { ... });\n    event.serverStarted(() -> { ... });\n    event.serverStartFailed(() -> { ... });\n    event.serverStopping(() -> { ... });\n    event.serverStopped(() -> { ... });\n    event.handlerAdded(handlerMetaInfo -> { ... });\n    event.wsHandlerAdded(wsHandlerMetaInfo -> { ... });\n});\n\napp.start() // serverStarting -> (serverStarted || serverStartFailed)\napp.stop() // serverStopping -> serverStopped\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin app = Javalin.create().events { event ->\n    event.serverStarting { ... }\n    event.serverStarted { ... }\n    event.serverStartFailed { ... }\n    event.serverStopping { ... }\n    event.serverStopped { ... }\n    event.handlerAdded { handlerMetaInfo -> }\n    event.wsHandlerAdded { wsHandlerMetaInfo -> }\n}\n\napp.start() // serverStarting -> (serverStarted || serverStartFailed)\napp.stop() // serverStopping -> serverStopped\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency with Ivy\nDESCRIPTION: Ivy XML dependency declaration for including Javalin in a project.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/mavenDep.md#2025-04-08_snippet_6\n\nLANGUAGE: markup\nCODE:\n```\n<dependency org=\"io.javalin\" name=\"javalin\" rev=\"{{javalinVersion | default: site.javalinversion }}\" />\n```\n\n----------------------------------------\n\nTITLE: Static Configuration in Javalin 5\nDESCRIPTION: Shows the static configuration methods used in Javalin 5.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nJavalinRenderer.register(myFileRenderer);\nJavalinValidation.register(Custom.class, Custom::parse);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalinRenderer.register(myFileRenderer)\nJavalinValidation.register(Custom.class, Custom::parse)\n```\n\n----------------------------------------\n\nTITLE: Implementing WebRTC Peer Connection for Video Chat in JavaScript\nDESCRIPTION: JavaScript implementation for establishing WebRTC connections between peers. The code handles the SDP exchange process, manages data channels, and implements different flows for the 'offerer' and 'answerer' peers. It encapsulates all WebRTC logic in a class that exposes callbacks through its constructor.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2024-01-13-omeglin/2023-12-30-building-omegle-in-javalin.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{% include_relative snippets/main/resources/public/js/peer-connection.js %}\n```\n\n----------------------------------------\n\nTITLE: File-based Session Handler Configuration\nDESCRIPTION: Implementation of file-based session persistence using FileSessionDataStore.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_53\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun fileSessionHandler() = SessionHandler().apply {\n    httpOnly = true\n    sessionCache = DefaultSessionCache(this).apply {\n        sessionDataStore = FileSessionDataStore().apply {\n            val baseDir = File(System.getProperty(\"java.io.tmpdir\"))\n            storeDir = File(baseDir, \"javalin-session-store\").apply { mkdir() }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Card Template for JavalinVue\nDESCRIPTION: Liquid template that renders a plugin card for the JavalinVue plugin, which enables Vue.js integration with Javalin for frontend development without a build pipeline. Includes author details and documentation link.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% include plugins/pluginCard.html\n    title=\"JavalinVue\"\n    description=\"\n        JavalinVue let's you create simple Vue frontends without having a frontend build pipeline.\n        It uses Vue single-file components with Javalin's server side routing,\n        and automatically includes only the Vue code required per route.\n        It's ideal for rapid prototyping and creation of websites/web-portals.\n    \"\n    bundled=\"true\"\n    author=\"tipsy,TareqK\"\n    docsUrl=\"/plugins/javalinvue\"\n    ratingIssueNr=\"132\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable AppFrame Component in Mithril\nDESCRIPTION: JavaScript file defining an AppFrame component that serves as a layout wrapper for other components. It renders a header with application name and displays child content passed via attributes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n @package io.javalin.mithril.demo;\n */\nclass AppFrame {\n    constructor(content) {\n    }\n\n    view(vnode) {\n        return m(\"div.app-frame\", [\n            m(\"header\", [\n                m(\"span\", \"Javalin Mithril Demo App\")\n                ]),\n            vnode.attrs.content\n            ]\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Application User Volume Chart for Javalin\nDESCRIPTION: HTML visualization showing the number of users for Javalin-based applications in production. The chart compares 2020 and 2018 data across different user volume categories.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2020-03-20-javalin-user-survey-2020.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"chart-flex\">\n    <div>\n        2020\n        <div class=\"bar-chart\">\n            <div style=\"width:62%\" data-value=\"62%\">Less than 1k per day</div>\n            <div style=\"width:31%\" data-value=\"31%\">1k - 10k per day</div>\n            <div style=\"width:4%\" data-value=\"4%\">10k - 100k per day</div>\n            <div style=\"width:4%\" data-value=\"4%\">100k - 1m per day</div>\n            <div style=\"width:0%;background:transparent;\" data-value=\"0%\">More than 1m per day</div>\n        </div>\n    </div>\n    <div>\n        2018\n        <div class=\"bar-chart\">\n            <div style=\"width:63%\" data-value=\"63%\">Less than 1k per day</div>\n            <div style=\"width:22%\" data-value=\"22%\">1k - 10k per day</div>\n            <div style=\"width:5%\" data-value=\"5%\">10k - 100k per day</div>\n            <div style=\"width:10%\" data-value=\"10%\">100k - 1m per day</div>\n            <div style=\"width:0%;background:transparent;\" data-value=\"0%\">More than 1m per day</div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Context Validation Examples\nDESCRIPTION: Demonstrates validation prefix examples when using validation through the Context object.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-09-16-javalin-2.2.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.validatedFormParam(\"abc\") // \"Form parameter 'abc' with value '$value'\"\nctx.validatedPathParam(\"abc\") // \"Path parameter 'abc' with value '$value'\"\nctx.validatedQueryParam(\"abc\") // \"Query parameter 'abc' with value '$value'\"\nctx.validatedBody<T>() // \"Request body as $clazz\"\n```\n\n----------------------------------------\n\nTITLE: Creating Javalin API Endpoints\nDESCRIPTION: Main API class that initializes Javalin server with endpoints for ping and person list\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.api;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.javalin.Javalin;\nimport org.example.services.inmemory.InMemoryPersonReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class MyAPI {\n    private static Logger logger = LoggerFactory.getLogger(MyAPI.class);\n    private static short port = 7312;\n\n    public static void main(String[] args) {\n        var personReader = new InMemoryPersonReader();\n        var objMapper = new ObjectMapper();\n        var result = objMapper.valueToTree(personReader.getAll());\n\n        logger.info(\"API: found {} people.\", personReader.getAll().size());\n\n        var app = Javalin.create().start(port);\n        app.get(\"/ping\", ctx -> ctx.result(\"pong\"));\n        app.get(\"/persons\", ctx -> ctx.json(result));\n\n        logger.info(\"API's alive for real :-)))\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Parameters in Javalin Routes\nDESCRIPTION: Demonstrates how to use wildcard parameters (splats) in Javalin routes and access them in the handler.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/hello/*/and/*\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/hello/*/and/*\") { ctx ->\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1))\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Card Template for JavalinMithril\nDESCRIPTION: Liquid template that renders a plugin card for the JavalinMithril plugin, which enables Mithril.js integration with Javalin for frontend development with server-side routing. Includes author details and documentation link.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{% include plugins/pluginCard.html\n    title=\"JavalinMithril\"\n    description=\"\n        This is a <a href='https://mithril.js.org/'>Mithril.js</a> plugin.\n        It allows you to use Mithril.js and Server Side Routing and State Injection to create multi-page applications\n        with Javalin. It is heavily inspired by the JavalinVue plugin.\n    \"\n    bundled=\"false\"\n    author=\"TareqK\"\n    docsUrl=\"https://github.com/javalin/javalin-mithril\"\n    ratingIssueNr=\"151\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subproject build.gradle for Models and Services\nDESCRIPTION: Gradle build file configuration for the models and services subprojects, applying the java-library plugin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'java-library'\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Request Logging Output Format\nDESCRIPTION: Displays the standard log output format which includes HTTP method, endpoint path, status code, content type, and execution time.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-19-javalin-0.4.1-released.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nINFO - POST /endpoint-path -> 200 [text/plain;charset=utf-8] (took 0.15 ms)\n```\n\n----------------------------------------\n\nTITLE: Configuring JavalinMithril App Class with State Function\nDESCRIPTION: Java App class snippet showing how to initialize Javalin server, configure JavalinMithril plugin with development mode enabled, and set up a state function to inject user data into components.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/*package and imports*/\nprivate Javalin app;\n\npublic void start(){\n    app = Javalin.create();\n    app.config.enableWebjars();\n    JavalinMithril.configure(config -> {\n            config.isDev(true)\n                    .stateFunction((ctx) -> singletonMap(\"currentUser\", currentUser(ctx)));\n    });\n    ...\n    app.start(7000);\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Styling Contributors Section with CSS\nDESCRIPTION: CSS for displaying contributor information in a responsive grid layout. The styles include card formatting with avatars, username display, and commit count, and adapt to smaller screens with media queries.\nSOURCE: https://github.com/javalin/website/blob/master/pages/community.md#2025-04-08_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.total-contributors {\n        font-weight: 400;\n        color: rgba(0, 0, 0, 0.3);\n    }\n\n    .contributors {\n        width: 100%;\n        display: flex;\n        justify-content: space-between;\n        flex-wrap: wrap;\n    }\n\n    .contributors .contributor {\n        display: flex;\n        align-items: center;\n        width: calc(33% - 16px); /* 16*3/2 == 24 */\n        padding: 16px;\n        background: #fff;\n        box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.1);\n        border-radius: 5px;\n        margin-bottom: 16px;\n        color: rgba(0, 0, 0, 0.75);\n    }\n\n    .contributors .contributor img {\n        display: block;\n        max-width: 40px;\n        border-radius: 40px;\n        margin-right: 16px;\n    }\n\n    .contributors .contributor h4 {\n        font-weight: 500;\n        margin: 0;\n    }\n\n    .contributors .contributor .name-and-commit {\n        width: calc(100% - 56px);\n    }\n\n    .contributors .contributor h4,\n    .contributors .contributor .commits {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n\n    @media (max-width: 600px) {\n        .contributors .contributor {\n            width: 100%;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Simple HelloWorld Mithril Component\nDESCRIPTION: JavaScript file defining a HelloWorld Mithril component with package directive, containing a basic view method that renders a heading and a link using Mithril's hyperscript syntax.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n @package io.javalin.mithril.demo;\n */\nclass HelloWorld {\n    constructor() {\n\n    }\n\n    view(vnode) {\n        return m(\"div\",[\n                m(\"h1.hello-world\", \"Hello World !\"),\n                m(\"a\", {href: \"/users\"}, \"View user Overview\"),\n            ]\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Student Records with cURL\nDESCRIPTION: Shell commands using cURL to create student records by sending POST requests to the Javalin application endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-12-javalin-tracing-example.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST -H \"Content-Type: application/json\" http://localhost:8080/students -d '{ \"id\": \"003\",\"name\": \"Javalin\",\"age\": 15}'\n$ curl -X POST -H \"Content-Type: application/json\" http://localhost:8080/students -d '{ \"id\": \"005\",\"name\": \"Micronaut\",\"age\": 12}'\n$ curl -X POST -H \"Content-Type: application/json\" http://localhost:8080/students -d '{ \"id\": \"001\",\"name\": \"Quarkus\",\"age\": 16}'\n```\n\n----------------------------------------\n\nTITLE: Initializing a Javalin Application with Routes and Dependencies\nDESCRIPTION: Main application class that configures the Javalin app, defines routes, and initializes dependencies. Shows the complete setup of a web application including filters, controllers, and error handling.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2017-05-26-javalin-website-example.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n\n    // Declare dependencies\n    public static BookDao bookDao;\n    public static UserDao userDao;\n\n    public static void main(String[] args) {\n\n        // Instantiate your dependencies\n        bookDao = new BookDao();\n        userDao = new UserDao();\n\n        Javalin app = Javalin.create()\n            .enableStaticFiles(\"/public\", Location.CLASSPATH)\n            .start(7000);\n\n        app.routes(() -> {\n            before(Filters.stripTrailingSlashes);\n            before(Filters.handleLocaleChange);\n            before(LoginController.ensureLoginBeforeViewingBooks);\n            get(Path.Web.INDEX, IndexController.serveIndexPage);\n            get(Path.Web.BOOKS, BookController.fetchAllBooks);\n            get(Path.Web.ONE_BOOK, BookController.fetchOneBook);\n            get(Path.Web.LOGIN, LoginController.serveLoginPage);\n            post(Path.Web.LOGIN, LoginController.handleLoginPost);\n            post(Path.Web.LOGOUT, LoginController.handleLogoutPost);\n        });\n\n        app.error(404, ViewUtil.notFound);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Matchmaking Logic for Javalin-based Omegle Clone\nDESCRIPTION: Matchmaker class handling WebSocket connections, user pairing, and SDP exchange for the Omegle clone. It manages user connections, disconnections, and message routing.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2024-01-13-omeglin/2023-12-30-building-omegle-in-javalin.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nsnippets/main/java/io/javalin/omeglin/Matchmaking.java\n```\n\n----------------------------------------\n\nTITLE: Initializing Javalin Server with OpenAPI Configuration (Kotlin)\nDESCRIPTION: Main function implementation in Kotlin that sets up Javalin server with OpenAPI, Swagger, and ReDoc plugins along with User API endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-03-javalin-openapi-example.md#2025-04-08_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.javalin.example.kotlin\n\nimport io.javalin.Javalin\nimport io.javalin.apibuilder.ApiBuilder.delete\nimport io.javalin.apibuilder.ApiBuilder.get\nimport io.javalin.apibuilder.ApiBuilder.patch\nimport io.javalin.apibuilder.ApiBuilder.path\nimport io.javalin.apibuilder.ApiBuilder.post\nimport io.javalin.example.kotlin.user.UserController\nimport io.javalin.openapi.OpenApiInfo\nimport io.javalin.openapi.plugin.OpenApiPlugin\nimport io.javalin.openapi.plugin.redoc.ReDocPlugin\nimport io.javalin.openapi.plugin.swagger.SwaggerPlugin\n\nfun main() {\n\n    Javalin.create { config ->\n        config.registerPlugin(OpenApiPlugin { pluginConfig ->\n            pluginConfig.withDefinitionConfiguration { version, definition ->\n                definition.withOpenApiInfo { info: OpenApiInfo ->\n                    info.title = \"Javalin OpenAPI example\"\n                }\n            }\n        })\n        config.registerPlugin(SwaggerPlugin())\n        config.registerPlugin(ReDocPlugin())\n        config.router.apiBuilder {\n            path(\"users\") {\n                get(UserController::getAll);\n                post(UserController::create);\n                path(\"{userId}\") {\n                    get(UserController::getOne);\n                    patch(UserController::update);\n                    delete(UserController::delete);\n                }\n            }\n        }\n    }.start(7001)\n\n    println(\"Check out ReDoc docs at http://localhost:7001/redoc\")\n    println(\"Check out Swagger UI docs at http://localhost:7001/swagger\")\n\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Javalin OpenAPI Repository Using JavaScript\nDESCRIPTION: A simple JavaScript snippet that redirects the user's browser to the GitHub repository for Javalin OpenAPI. This client-side redirect ensures users are sent to the correct documentation location.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/openapi.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlocation.href = \"https://github.com/javalin/javalin-openapi\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Task Execution with Timeout in Javalin\nDESCRIPTION: Shows how to execute a blocking task asynchronously with custom timeout handling using ctx.async().\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_51\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/async\", ctx -> {\n    ctx.async(\n        1000,                                      // timeout in ms\n        () -> ctx.result(\"Request took too long\"), // timeout callback\n        () -> ctx.result(someSlowResult)           // some long running task\n    );\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/async\") { ctx ->\n    ctx.async(\n        1000,                                    // timeout in ms\n        { ctx.result(\"Request took too long\") }, // timeout callback\n        { ctx.result(someSlowResult)             // some long running task\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload in Javalin\nDESCRIPTION: Kotlin endpoint that handles file uploads in Javalin. The implementation processes uploaded files from a form and saves them to an 'upload' directory.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-07-28-javalin-html-forms-example.md#2025-04-08_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/upload-example\") { ctx ->\n    ctx.uploadedFiles(\"files\").forEach {\n        FileUtil.streamToFile(it.content, \"upload/${it.filename}\")\n    }\n    ctx.html(\"Upload successful\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j2 XML Configuration for Javalin Applications\nDESCRIPTION: Sample log4j2.xml configuration file that sets up console and file appenders for logging. It defines log patterns with color support for console output and configures rolling file appender with size-based rotation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Configuration status=\"WARN\" monitorInterval=\"30\">\n    <Properties>\n        <Property name=\"LOG_PATTERN\">%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${%pid} [%15.15t] %-40.40C{10.}: %m%n%ex</Property>\n        <Property name=\"COLOR_LOG_PATTERN\">%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{${LOG_LEVEL_PATTERN:-%5p}}{FATAL=red, ERROR=red, WARN=yellow, INFO=green, DEBUG=blue, TRACE=blue} %style{%pid}{magenta} [%15.15t] %style{%-40.40C{1.}}{cyan} : %m%n%ex</Property>\n    </Properties>\n\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\" follow=\"true\">\n            <PatternLayout pattern=\"${COLOR_LOG_PATTERN}\"/>\n        </Console>\n        <RollingFile name=\"File\"\n                     fileName=\"sample-app.log\"\n                     filePattern=\"sample-app-%d{yyyy-MM-dd}-%i.log\">\n            <PatternLayout pattern=\"${LOG_PATTERN}\"/>\n            <Policies>\n                <SizeBasedTriggeringPolicy size=\"1GB\"/>\n            </Policies>\n        </RollingFile>\n    </Appenders>\n\n    <Loggers>\n        <Root level=\"INFO\">\n            <AppenderRef ref=\"Console\"/>\n            <AppenderRef ref=\"File\"/>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Build for OpenAPI Annotations\nDESCRIPTION: Maven build configuration for processing OpenAPI annotations with specified source directory and annotation processor settings.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-03-javalin-openapi-example.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <sourceDirectory>src/main/kotlin</sourceDirectory>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.10.1</version>\n            <configuration>\n                <source>11</source>\n                <target>11</target>\n                <annotationProcessorPaths>\n                    <annotationProcessorPath>\n                        <groupId>io.javalin.community.openapi</groupId>\n                        <artifactId>openapi-annotation-processor</artifactId>\n                        <version>${javalin.version}</version>\n                    </annotationProcessorPath>\n                </annotationProcessorPaths>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Configuring Elastic APM Properties\nDESCRIPTION: Configuration file for Elastic APM agent with properties for service name, application packages, server URLs, and secret token.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-12-javalin-tracing-example.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nservice_name=javalin\napplication_packages=com.example\nserver_urls=\nsecret_token=\n```\n\n----------------------------------------\n\nTITLE: Counting Student Records with cURL\nDESCRIPTION: Shell command using cURL to get the count of student records by sending a GET request to the Javalin school count endpoint.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-12-javalin-tracing-example.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X GET http://locahost:8080/school/_count\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Plugin in Java and Kotlin\nDESCRIPTION: Demonstrates how to create and configure an SSL Plugin instance, then register it with Javalin in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/ssl-helpers.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSslPlugin plugin = new SslPlugin(conf -> {\n    conf.pemFromPath(\"certs/cert.pem\", \"certs/key.pem\");\n});\n\nJavalin.create(javalinConfig -> {\n    javalinConfig.plugins.register(plugin);\n}).start();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval plugin = SslPlugin { conf ->\n    conf.pemFromPath(\"/path/to/cert.pem\", \"/path/to/key.pem\")\n}\n\nJavalin.create { javalinConfig ->\n    javalinConfig.plugins.register(plugin)\n}.start()\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Basic Javalin Server in Kotlin\nDESCRIPTION: A minimal example showing how to create and start a Javalin server in Kotlin. This demonstrates Kotlin's trailing closure syntax and creates a simple endpoint that returns 'Hello World'.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-kotlin-example.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\n\nfun main() {\n    val app = Javalin.create().start(7070)\n    app.get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty Server in Java\nDESCRIPTION: Demonstrates how to customize the underlying Jetty server in a Javalin application using Java, including server instance, session handling, and WebSocket configuration.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create(config -> {\n    config.jetty.server(() -> Server());                 // set the Jetty Server\n    config.jetty.sessionHandler(() -> SessionHandler()); // set the Jetty SessionHandler\n    config.jetty.contextHandlerConfig(handler -> {});    // configure the Jetty ServletContextHandler\n    config.jetty.wsFactoryConfig((factory) -> {});       // configure the Jetty WebSocketServletFactory\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Services Module Descriptor\nDESCRIPTION: JPMS module descriptor for services module with required dependencies and exports\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nmodule org.example.services {\n    // Export both packages api and inmemory for now\n    exports org.example.services.api;\n    exports org.example.services.inmemory;\n\n    // Since we're using the Person class we're requiring the org.example.models module\n    requires org.example.models;}\n```\n\n----------------------------------------\n\nTITLE: Vue Layout Template Implementation\nDESCRIPTION: Basic Vue layout template showing component registration and route component placement for both Vue 2 and Vue 3.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.min.js\"></script>\n    @componentRegistration\n</head>\n<body>\n<main id=\"main-vue\" v-cloak>\n    @routeComponent\n</main>\n<script>\n    new Vue({el: \"#main-vue\"});\n</script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleLogger Properties for Javalin\nDESCRIPTION: A properties file configuration for the simple logger that customizes the log format, level, and specific package logging levels for Jetty and Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# simplelogger.properties\n# see https://www.slf4j.org/apidocs/org/slf4j/simple/SimpleLogger.html\norg.slf4j.simpleLogger.defaultLogLevel=DEBUG\norg.slf4j.simpleLogger.showDateTime=true\norg.slf4j.simpleLogger.dateTimeFormat=YYYY-MM-dd HH:mm:ss.SSS\n# less jetty noise\norg.slf4j.simpleLogger.log.org.eclipse.jetty=INFO\n# more javalin noise\norg.slf4j.simpleLogger.log.io.javalin=TRACE\n```\n\n----------------------------------------\n\nTITLE: Setting Up Maven Dependencies for Javalin and Sureness\nDESCRIPTION: XML configuration for adding required dependencies to a Maven project including Javalin, Sureness core library, and SLF4J for logging.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-04-16-javalin-sureness-example.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin</artifactId>\n    <version>{{site.javalinThreeVersion}}</version>\n</dependency>\n<dependency>\n    <groupId>com.usthe.sureness</groupId>\n    <artifactId>sureness-core</artifactId>\n    <version>1.0.2</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-simple</artifactId>\n    <version>1.7.30</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Deleting String with cURL DELETE Request\nDESCRIPTION: cURL command for sending a DELETE request to remove a specific string by ID from the Raspberry Pi REST API.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE your.raspberry.pi.ipaddress:8080/strings/1\n```\n\n----------------------------------------\n\nTITLE: Throwing ForbiddenResponse in Javalin\nDESCRIPTION: Example of using Javalin's built-in HttpResponseException class to return a 403 Forbidden response with a custom message. The response format depends on whether the client accepts JSON or plain text.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_28\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/\") { throw new ForbiddenResponse(\"Off limits!\") }\n```\n\n----------------------------------------\n\nTITLE: Plain Text Response Example for ForbiddenResponse\nDESCRIPTION: Example plain text response when the client does not accept JSON format and a ForbiddenResponse is thrown. Simply returns the status message.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nForbidden\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty Server in Kotlin\nDESCRIPTION: Demonstrates how to customize the underlying Jetty server in a Javalin application using Kotlin, including server instance, session handling, and WebSocket configuration.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create { config ->\n    config.jetty.server { Server() }                 // set the Jetty Server\n    config.jetty.sessionHandler { SessionHandler() } // set the Jetty SessionHandler\n    config.jetty.contextHandlerConfig { handler -> } // configure the Jetty ServletContextHandler\n    config.jetty.wsFactoryConfig { factory -> }      // configure the Jetty WebSocketServletFactory\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Community Boxes with CSS\nDESCRIPTION: CSS styles for creating responsive community information boxes with shadow effects, padding, and font styling. These styles create visually distinct sections for different community platforms.\nSOURCE: https://github.com/javalin/website/blob/master/pages/community.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.community-box {\n        position: relative;\n        color: #444;\n        display: block;\n        padding: 20px;\n        background: #fff;\n        border-radius: 5px;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n        margin-top: 20px;\n    }\n\n    .community-box h2 {\n        font-size: 22px;\n        margin-top: 0;\n    }\n\n    .community-box p {\n        font-size: 14px;\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nullable Values with Javalin Validator in Kotlin\nDESCRIPTION: Demonstrates the new feature in Javalin 3.1.0 that allows retrieving nullable values from query parameters using the .getOrNull() method. This example shows how to parse an optional Instant parameter from a request context.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2019-06-23-javalin-3.1.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval optionalInstant = ctx.queryParam<Instant>(\"instant\").getOrNull()\n```\n\n----------------------------------------\n\nTITLE: Implementing End-to-End Test for Javalin UI in Kotlin\nDESCRIPTION: Kotlin code showcasing the implementation of an end-to-end test for a Javalin application using Selenium WebDriver. It demonstrates WebDriverManager setup, ChromeDriver configuration with headless mode, and a basic assertion on page content.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport io.github.bonigarcia.wdm.WebDriverManager\nimport io.javalin.testtools.JavalinTest\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.Test\nimport org.openqa.selenium.WebDriver\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.chrome.ChromeOptions\n\nclass EndToEndTest {\n\n    private val app = JavalinTestingExampleApp(\"someDependency\").app // inject any dependencies you might have\n\n    @Test\n    fun `UI contains correct heading`() = JavalinTest.test(app) { server, client ->\n        WebDriverManager.chromedriver().setup()\n        val driver: WebDriver = ChromeDriver(ChromeOptions().apply {\n            addArguments(\"--headless\")\n            addArguments(\"--disable-gpu\")\n        })\n        driver.get(\"${client.origin}/ui\")\n        assertThat(driver.pageSource).contains(\"<h1>User UI</h1>\")\n        driver.quit()\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Hello Page with Localization in Java\nDESCRIPTION: Demonstrates how to use the Localizer class when rendering a page in Javalin. It creates a HelloPage object, sets some properties, and passes it along with a Localizer instance to the template renderer.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate static void renderHelloPage(Context ctx) {\n    HelloPage page = new HelloPage();\n    page.userName = \"<script>alert('xss')</script>\";\n    page.userKarma = 1337;\n    ctx.render(\"hello.jte\", Map.of(\"page\", page, \"localizer\", new Localizer(Locale.US)));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency\nDESCRIPTION: Instructions for adding Javalin as a dependency in a project. This is the first step to start using the framework.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n{% assign javalinVersion = site.javalinFourVersion %}\n{% include macros/mavenDep.md %}\n```\n\n----------------------------------------\n\nTITLE: Creating REST APIs with Javalin\nDESCRIPTION: Java code that sets up a Javalin application with multiple API endpoints organized in a nested structure with different HTTP methods and versions.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-04-16-javalin-sureness-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create().routes(() -> {\n    path(\"api\", () -> {\n        path(\"v3\", () -> {\n            get(\"host\", ctx -> ctx.result(\"get /api/v3/host success\"));\n            put(\"book\", ctx -> ctx.result(\"put /api/v3/book success\"));\n        });\n        path(\"v2\", () -> {\n            path(\"host\", () -> {\n                get(ctx -> ctx.result(\"get /api/v2/host success\"));\n                post(ctx -> ctx.result(\"post /api/v2/host success\"));\n                put(ctx -> ctx.result(\"put /api/v2/host success\"));\n                delete(ctx -> ctx.result(\"delete /api/v2/host success\"));\n            });\n        });\n        path(\"v1\", () -> {\n            path(\"source1\", () -> {\n                get(ctx -> ctx.result(\"get /api/v1/source1 success\"));\n                post(ctx -> ctx.result(\"post /api/v1/source1 success\"));\n                put(ctx -> ctx.result(\"put /api/v1/source1 success\"));\n                delete(ctx -> ctx.result(\"delete /api/v1/source1 success\"));\n            });\n        });\n    });\n}).start(8088);\n```\n\n----------------------------------------\n\nTITLE: Validator API Methods\nDESCRIPTION: Lists the available methods in the Validator API for parameter validation.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nallowNullable()                     // turn the Validator into a NullableValidator (must be called first)\ncheck(predicate, \"error\")           // add a check with a ValidationError(\"error\") to the Validator\ncheck(predicate, validationError)   // add a check with a ValidationError to the Validator (can have args for localization)\nget()                               // return the validated value as the specified type, or throw ValidationException\ngetOrThrow(exceptionFunction)       // return the validated value as the specified type, or throw custom exception\ngetOrDefault()                      // return default-value if value is null, else call get()\nerrors()                            // get all the errors of the Validator (as map(\"fieldName\", List<ValidationError>))\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty Server in Javalin for Kotlin\nDESCRIPTION: Shows how to configure the embedded Jetty server in Javalin using Kotlin, including default host and port, thread pool, multipart config, and server modifications.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.jetty.defaultHost = \"localhost\" // set the default host for Jetty\n    config.jetty.defaultPort = 1234 // set the default port for Jetty\n    config.jetty.threadPool = ThreadPool() // set the thread pool for Jetty\n    config.jetty.multipartConfig = MultipartConfig() // set the multipart config for Jetty\n    config.jetty.modifyJettyWebSocketServletFactory { factory -> } // modify the JettyWebSocketServletFactory\n    config.jetty.modifyServer { server -> } // modify the Jetty Server\n    config.jetty.modifyServletContextHandler { handler -> } // modify the ServletContextHandler (you can set a SessionHandler here)\n    config.jetty.modifyHttpConfiguration { httpConfig -> } // modify the HttpConfiguration\n    config.jetty.addConnector { server, httpConfig -> ServerConnector(server) } // add a connector to the Jetty Server\n}\n```\n\n----------------------------------------\n\nTITLE: Multipart Request Detection Improvement in Javalin\nDESCRIPTION: Describes a bugfix that enhances the detection of multipart requests to include all types of multipart content.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-18-javalin-1.1.0-released.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* `isMultipart()` now checks for any type of multipart (previously just `multipart/form-data`)\n```\n\n----------------------------------------\n\nTITLE: Implementing Localizer Class in Kotlin\nDESCRIPTION: Kotlin version of the Localizer class that loads localization strings from a ResourceBundle and provides methods to retrieve localized messages with optional formatting.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage app\n\nimport java.text.MessageFormat\nimport java.util.*\n\nclass Localizer(locale: Locale) {\n    private val bundle: ResourceBundle = ResourceBundle.getBundle(\"localization\", locale)\n\n    fun localize(key: String): String {\n        return bundle.getString(key)\n    }\n\n    fun localize(key: String, vararg params: Any?): String {\n        return MessageFormat.format(localize(key), *params)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation Handler in Java\nDESCRIPTION: This snippet demonstrates the implementation of a user creation handler in Java. It checks for a valid username and either adds the user or throws a BadRequestResponse.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static void create(Context ctx) {\n    String username = ctx.queryParam(\"username\");\n    if (username == null || username.length() < 5) {\n        throw new BadRequestResponse();\n    } else {\n        users.add(username);\n        ctx.status(201);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mockito dependency in Maven\nDESCRIPTION: This XML snippet shows how to add Mockito 2 or greater as a dependency in a Maven project's pom.xml file.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2019-10-20-javalin-mockito-example.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->\n<dependency>\n    <groupId>org.mockito</groupId>\n    <artifactId>mockito-core</artifactId>\n    <version>3.1.0</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Heroku Application via CLI\nDESCRIPTION: Command line instruction to create a new Heroku application using the Heroku CLI tool.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-heroku-example.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nheroku create javalin-heroku-example\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Form Backend in Kotlin\nDESCRIPTION: Kotlin implementation of the contact form using Javalin. Provides the same functionality as the Java version but with Kotlin-specific syntax and features.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-06-javalin-email-example.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\nimport io.javalin.apibuilder.ApiBuilder.get\nimport io.javalin.apibuilder.ApiBuilder.post\nimport org.apache.commons.mail.DefaultAuthenticator\nimport org.apache.commons.mail.SimpleEmail\n\nfun main() {\n\n    Javalin.create { config ->\n        config.router.apiBuilder {\n            get(\"/\") { ctx ->\n                ctx.html(\n                    \"\"\"\n                        <form action=\"/contact-us\" method=\"post\">\n                            <input name=\"subject\" placeholder=\"Subject\">\n                            <br>\n                            <textarea name=\"message\" placeholder=\"Your message ...\"></textarea>\n                            <br>\n                            <button>Submit</button>\n                        </form>\n                    \"\"\".trimIndent()\n                )\n            }\n            post(\"/contact-us\") { ctx ->\n                SimpleEmail().apply {\n                    setHostName(\"smtp.googlemail.com\")\n                    setSmtpPort(465)\n                    setAuthenticator(DefaultAuthenticator(\"YOUR_EMAIL\", \"YOUR_PASSWORD\"))\n                    setSSLOnConnect(true)\n                    setFrom(\"YOUR_EMAIL\")\n                    setSubject(ctx.formParam(\"subject\"))\n                    setMsg(ctx.formParam(\"message\"))\n                    addTo(\"RECEIVING_EMAIL\")\n                }.send()\n                ctx.redirect(\"/contact-us/success\")\n            }\n            get(\"/contact-us/success\") { ctx -> ctx.html(\"Your message was sent\") }\n        }\n    }.start(7070)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kotlin Data Class for User Model\nDESCRIPTION: Definition of a User data class in Kotlin. Data classes automatically provide toString, hashCode/equals, copying and destructuring functionality without requiring boilerplate code.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-kotlin-example.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val name: String, val email: String, val id: Int)\n```\n\n----------------------------------------\n\nTITLE: Javalin Route Configuration with Vue Component\nDESCRIPTION: Complete Kotlin server setup showing route configuration for serving Vue components through Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\nimport io.javalin.vue.VueComponent\n\nfun main() {\n\n    val app = Javalin.create { config ->\n        config.staticFiles.enableWebjars()\n        config.vue.vueInstanceNameInJs = \"app\"\n    }.start(7070)\n\n    app.get(\"/\", VueComponent(\"hello-world\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Card Template for DevLogging\nDESCRIPTION: Liquid template that renders a plugin card for the DevLogging plugin, which provides detailed logging of HTTP and WebSocket requests/responses for development and debugging. Includes author details and documentation link.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{% include plugins/pluginCard.html\n    title=\"DevLogging\"\n    description=\"\n        The development debugging logger catches most of the interesting stuff about requests\n        and responses, and logs it in an easy to read manner. It works both for\n        HTTP and WebSocket requests. Only intended for use during development and/or debugging.\n    \"\n    bundled=\"true\"\n    author=\"tipsy\"\n    docsUrl=\"/plugins/devlogging\"\n    ratingIssueNr=\"139\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Micrometer Dependencies with Maven\nDESCRIPTION: XML configuration showing the Maven dependencies required for using the Javalin Micrometer plugin with Prometheus monitoring system.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/micrometer.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin-micrometer</artifactId>\n    <version>{{site.javalinversion}}</version>\n</dependency>\n<dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-registry-prometheus</artifactId>\n    <version>${io.micrometer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Controller with CRUD Operations (Java)\nDESCRIPTION: Java implementation of UserController class with skeleton methods for CRUD operations on User resources.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-03-javalin-openapi-example.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.javalin.example.java.user;\n\nimport io.javalin.http.Context;\n\npublic class UserController {\n\n    public static void create(Context ctx) {\n    }\n\n    public static void getAll(Context ctx) {\n    }\n\n    public static void getOne(Context ctx) {\n    }\n\n    public static void update(Context ctx) {\n    }\n\n    public static void delete(Context ctx) {\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Build for Heroku Deployment\nDESCRIPTION: Maven configuration that creates an executable JAR with all dependencies and sets up the Java compiler version. Includes both compiler and assembly plugins configuration.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-heroku-example.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.10.1</version>\n            <configuration>\n                <source>11</source>\n                <target>11</target>\n            </configuration>\n        </plugin>\n        <plugin>\n            <artifactId>maven-assembly-plugin</artifactId>\n            <executions>\n                <execution>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>single</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <descriptorRefs>\n                    <descriptorRef>jar-with-dependencies</descriptorRef>\n                </descriptorRefs>\n                <archive>\n                    <manifest>\n                        <mainClass>JavalinHerokuExampleApp</mainClass>\n                    </manifest>\n                </archive>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Plugin Initialization Process\nDESCRIPTION: Shows how Javalin executes plugin initialization and application in sequence, ensuring proper handler registration order.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_44\n\nLANGUAGE: java\nCODE:\n```\ninitPlugins.forEach(plugin -> {\n    plugin.init(app);\n    // will throw exception if `init` adds Handler\n});\n\nplugins.forEach(plugin -> plugin.apply(app));\n```\n\n----------------------------------------\n\nTITLE: Javalin Routing Configuration\nDESCRIPTION: Demonstrates structured routing setup with path grouping, middleware, and various HTTP method handlers in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-09-13-javalin-4.0.0-released.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport static io.javalin.apibuilder.ApiBuilder.*\n...\napp.routes(() -> {\n    before(GlobalController::globalAction)               // handler that runs for every request to the app\n    path(\"users\", () -> {                                // push subpath /users on the router\n        get(UserController::getAll);                     // get controller for /users/\n        post(UserController::create);                    // post controller for /users/\n        before(\"{userId}*\", UserController:userIdCheck); // handler that runs for every request to /users/{userId} as well as al subpaths\n        path(\"{userId}\", (() -> {                        // new subpath /{userId} on the router\n            get(UserController::getOne);                 // get controller for /users/{userId}\n            patch(UserController::update);               // patch controller for /users/{userId}\n            path(\"subpath\", (() -> { ... });             // push subpath /subpath on the router (and pop it immediately)\n        });                                              // pop subpath /{userId} on the router\n        ws(\"events\", UserController::webSocketEvents);   // websocket controller for /users/events\n    });                                                  // pop subpath /users on the router\n}).start(port);\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport static io.javalin.apibuilder.ApiBuilder.*\n...\napp.routes {\n    before(GlobalController::globalAction)               // handler that runs for every request to the app\n    path(\"users\") {                                      // push subpath /users on the router\n        get(UserController::getAll)                      // get controller for /users/\n        post(UserController::create)                     // post controller for /users/\n        before(\"{userId}*\", UserController:userIdCheck)  // handler that runs for every request to /users/{userId} as well as al subpaths\n        path(\"{userId}\") {                               // new subpath /{userId} on the router\n            get(UserController::getOne)                  // get controller for /users/{userId}\n            patch(UserController::update)                // patch controller for /users/{userId}\n            path(\"subpath\") { ... }                      // push subpath /subpath on the router (and pop it immediately)\n        }                                                // pop subpath /{userId} on the router\n        ws(\"events\", UserController::webSocketEvents)    // websocket controller for /users/events\n    }                                                    // pop subpath /users on the router\n}.start(port)\n```\n\n----------------------------------------\n\nTITLE: Configuring Javalin with Prometheus Monitoring\nDESCRIPTION: Initialization of Javalin server with Jetty StatisticsHandler and QueuedThreadPool, and setting up Prometheus for data collection. This code configures the server and exposes statistics through Prometheus.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-12-02-javalin-prometheus-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws Exception {\n\n    StatisticsHandler statisticsHandler = new StatisticsHandler();\n    QueuedThreadPool queuedThreadPool = new QueuedThreadPool(200, 8, 60_000);\n\n    Javalin app = Javalin.create(config -> {\n        config.jetty.threadPool = queuedThreadPool;\n        config.jetty.modifyServer(server -> {\n            server.setHandler(statisticsHandler);\n        });\n    }).start(7070);\n    initializePrometheus(statisticsHandler, queuedThreadPool);\n}\n\nprivate static void initializePrometheus(StatisticsHandler statisticsHandler, QueuedThreadPool queuedThreadPool) throws IOException {\n    StatisticsHandlerCollector.initialize(statisticsHandler);\n    QueuedThreadPoolCollector.initialize(queuedThreadPool);\n    HTTPServer prometheusServer = new HTTPServer(7080);\n    LoggerFactory.getLogger(\"JavalinPrometheusExampleApp\").info(\"Prometheus is listening on: http://localhost:7080\");\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n\n    val statisticsHandler = StatisticsHandler()\n    val queuedThreadPool = QueuedThreadPool(200, 8, 60_000)\n\n    val app = Javalin.create {\n        it.jetty.threadPool = queuedThreadPool\n        it.jetty.modifyServer { \n            it.handler = statisticsHandler \n        }\n    }.start(7070)\n    initializePrometheus(statisticsHandler, queuedThreadPool)\n}\n\nprivate fun initializePrometheus(statisticsHandler: StatisticsHandler, queuedThreadPool: QueuedThreadPool) {\n    StatisticsHandlerCollector.initialize(statisticsHandler)\n    QueuedThreadPoolCollector.initialize(queuedThreadPool)\n    val prometheusServer = HTTPServer(7080)\n    LoggerFactory.getLogger(\"JavalinPrometheusExampleApp\").info(\"Prometheus is listening on: http://localhost:7080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Route Overview in Kotlin using Javalin\nDESCRIPTION: Demonstrates how to generate and host an overview of all mapped paths in a Javalin application. This feature shows verbs, paths, handlers, and roles for each route.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-03-23-javalin-1.5.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create().apply {\n    enableRouteOverview(\"route-overview\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Data Class in Kotlin\nDESCRIPTION: This snippet defines a Todo data class in Kotlin. It represents a single todo item with an id, title, and completion status. This class is used for serialization and deserialization of todo items in the application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-27-javalin-vuejs-example.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Todo(val id: Long = -1, val title: String = \"\", val completed: Boolean = false)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fake DAO for Sensor Data\nDESCRIPTION: This Java class simulates a data access object (DAO) that provides sensor data. It creates and returns a SensorData object with sample values, emulating data retrieval from a database.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-03-25-serving-protobuf-with-javalin.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage app.model.dao;\n\nimport app.model.objects.SensorData;\n\nimport java.sql.Timestamp;\nimport java.util.List;\n\npublic class FakeDao {\n\n    public FakeDao(){}\n\n    public SensorData getSensorDataFromVehicleDB(){\n        SensorData data = new SensorData();\n        data.setMakeAndModel(\"DMC, DeLorean\");\n        data.setDestinationYear(2035);\n        data.setFluxCapacitorReadings(List.of(37456.3245, 3453.3454, 348765.2343));\n        data.setLastCheckIn(new Timestamp(System.currentTimeMillis()));\n        data.setSafetyBeltsOn(true);\n        return data;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Compiled Javalin Application\nDESCRIPTION: Terminal output showing the initial successful startup of the compiled native Javalin application with the Javalin logo displayed in the console.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n j0e@thinkpad  ~/projects/graal-javalin  master ● ? ⍟1  ./graal-javalin-all-1.0-SNAPSHOT                          ✔  33695  00:53:54\n[main] INFO io.javalin.Javalin -\n _________________________________________\n|        _                  _ _           |\n|       | | __ ___   ____ _| (_)_ __      |\n|    _  | |/ _` \\ \\ / / _` | | | '_ \\     |\n|   | |_| | (_| |\\ V / (_| | | | | | |    |\n|    \\___/ \\__,_| \\_/ \\__,_|_|_|_| |_|    |\n\n```\n\n----------------------------------------\n\nTITLE: Using Javalin Bundle for Automatic Logback Configuration\nDESCRIPTION: Maven dependency configuration for javalin-bundle, which includes Logback and other dependencies with reasonable defaults, simplifying logging setup for Javalin applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin-bundle</artifactId>\n    <version>5.6.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Logger in Javalin\nDESCRIPTION: Shows how to add a custom request logger to log HTTP method, path and request duration\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_30\n\nLANGUAGE: java\nCODE:\n```\napp.requestLogger((ctx, timeMs) -> {\n    System.out.println(ctx.method() + \" \"  + ctx.path() + \" took \" + timeMs + \" ms\");\n    // prints \"GET /hello took 4.5 ms\"\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.requestLogger { ctx, timeMs ->\n    println(\"${ctx.method()} ${ctx.path()} took $timeMs ms\")\n    // prints \"GET /hello took 4.5 ms\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Mapping in Javalin\nDESCRIPTION: Examples of mapping exceptions to custom handlers in Javalin. Demonstrates how to handle specific exceptions like NullPointerException and general Exception cases with different behaviors.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_31\n\nLANGUAGE: java\nCODE:\n```\napp.exception(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.exception(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.exception(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n```\n\n----------------------------------------\n\nTITLE: New Plugin Base Class in Javalin 6\nDESCRIPTION: Defines the new abstract Plugin class structure introduced in Javalin 6.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class Plugin<CONFIG>(userConfig: Consumer<CONFIG>? = null, defaultConfig: CONFIG? = null) {\n    open fun onInitialize(config: JavalinConfig) {} // optional hook for initializing the plugin\n    open fun onStart(config: JavalinConfig) {} // optional hook for starting the plugin\n    open fun repeatable(): Boolean = false // whether the plugin can be registered multiple times\n    open fun priority(): PluginPriority = PluginPriority.NORMAL // the registration priority of the plugin [LOW, NORMAL, HIGH]\n    open fun name(): String = this.javaClass.simpleName // the name of the plugin\n    protected val pluginConfig // available to extending classes\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Handlers with Routes in Javalin\nDESCRIPTION: Demonstrates how to group related endpoints using routes() and path() methods for better organization.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAllUsers);\n        post(UserController::createUser);\n        path(\":id\", () -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    path(\"users\") {\n        get(userController::getAllUsers);\n        post(userController::createUser);\n        path(\":id\") {\n            get(userController::getUser);\n            patch(userController::updateUser);\n            delete(userController::deleteUser);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Mapping in Javalin\nDESCRIPTION: Examples of mapping exceptions to custom handlers in Javalin. Demonstrates how to handle specific exceptions like NullPointerException and general Exception cases with different behaviors.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_31\n\nLANGUAGE: java\nCODE:\n```\napp.exception(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\napp.exception(Exception.class, (e, ctx) -> {\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(NullPointerException::class.java) { e, ctx ->\n    // handle nullpointers here\n}\n\napp.exception(Exception::class.java) { e, ctx ->\n    // handle general exceptions here\n    // will not trigger if more specific exception-mapper found\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sureness with YAML Document Datasource\nDESCRIPTION: YAML configuration file for Sureness that defines protected resources, excluded resources, and user accounts with their roles and credentials.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-04-16-javalin-sureness-example.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n## -- sureness.yml document dataSource-- ##\n\n# load api resource which need be protected, config role who can access these resource.\n# resources that are not configured are also authenticated and protected by default, but not authorized\n# eg: /api/v2/host===post===[role2,role3] means /api/v2/host===post can be access by role2,role3\n# eg: /api/v1/source2===get===[] means /api/v1/source2===get can not be access by any role\nresourceRole:\n  - /api/v1/source1===get===[role2]\n  - /api/v1/source1===post===[role1]\n  - /api/v1/source1===delete===[role3]\n  - /api/v1/source1===put===[role1,role2]\n  - /api/v1/source2===get===[]  \n  - /api/v2/host===post===[role2,role3]\n  - /api/v2/host===get===[role2,role3]\n  - /api/v2/host===delete===[role2,role3]\n  - /api/v2/host===put===[role2,role3]\n  - /api/v3/*===*===[role1,role2,role3]\n\n# load api resource which do not need be protected, means them need be excluded.\n# these api resource can be access by everyone\nexcludedResource:\n  - /api/v3/host===get\n  - /**/*.html===get\n  - /**/*.js===get\n  - /**/*.css===get\n  - /**/*.ico===get\n\n# account info\n# there are three account: admin, root, tom\n# eg: admin has [role1,role2] ROLE, unencrypted password is admin, encrypted password is 0192023A7BBD73250516F069DF18B500\n# eg: root has role1, unencrypted password is 23456\n# eg: tom has role3, unencrypted password is 32113\naccount:\n  - appId: admin\n    # if add salt, the password is encrypted password - the result: MD5(password+salt)\n    # digest auth not support encrypted password\n    # if no salt, the password is unencrypted password\n    credential: 0192023A7BBD73250516F069DF18B500\n    salt: 123\n    role: [role1,role2]\n  - appId: root\n    credential: 23456\n    role: [role1,role2]\n  - appId: tom\n    credential: 32113\n    role: [role3]\n```\n\n----------------------------------------\n\nTITLE: Testing POST request to simulated API (Kotlin)\nDESCRIPTION: This test shows how to use Javalin to simulate a POST request to an external API. It captures the posted data, executes the method under test, and asserts the captured data.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-07-11-using-javalin-as-http-simulator.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun `posts a user profile`() {\n    var postedBody: String? = null\n    var contentType: String? = null\n    fakeProfileApi = Javalin.create().post(\"profile\") {\n        postedBody = it.body()\n        contentType = it.contentType()\n        it.status(201)\n    }.start(1234)\n    val profileGateway = ProfileGateway(apiUrl = \"http://localhost:1234\")\n\n    profileGateway.saveProfile(\n        Profile(id = \"abc\", email = \"john.doe@gmail.com\".toEmail())\n    )\n\n    JSONAssert.assertEquals(\n        \"\"\" { \"id\": \"abc\", \"email\": \"johndoe@gmail.com\" } \"\"\",\n        postedBody, true\n    )\n    assertEquals(\"application/json\", contentType)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Application Entry Point\nDESCRIPTION: Main application class with static main method that creates a Guice injector with the root AppModule, resolves the Startup instance, and boots the application as a REST service.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class App {\n    public static void main(String[] args) {\n        var injector = Guice.createInjector(new AppModule());\n        injector.getInstance(Startup.class).boot(EntrypointType.REST, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Javalin test boilerplate (Kotlin)\nDESCRIPTION: This code sets up a basic structure for Javalin tests, ensuring that the fake API server is stopped after each test to prevent interference between tests.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-07-11-using-javalin-as-http-simulator.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProfileGatewayTest {\n\n    private lateinit var fakeProfileApi: Javalin\n\n    @AfterEach\n    fun `after each`() {\n        fakeProfileApi.stop()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency with Grape\nDESCRIPTION: Grape annotation for declaring Javalin dependency in Groovy scripts.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/mavenDep.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Grab(group='io.javalin', module='javalin', version='{{javalinVersion | default: site.javalinversion }}')\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Slash Behavior in Javalin\nDESCRIPTION: Method to configure Javalin to stop ignoring trailing slashes in URLs, affecting how routes are matched.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-06-javalin-0.3.7-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.dontIgnoreTrailingSlashes()\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket with Dynamic Paths in Kotlin using Javalin\nDESCRIPTION: Demonstrates how to use dynamic paths (/:param) in WebSocket implementations with Javalin. The example shows handling messages in a specific chat channel.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-03-23-javalin-1.5.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nws(\"/chat/:channel\") { ws ->\n    ws.onMessage { session, message ->\n        val channel = session.param(\"channel\")\n        broadcastMessage(channel, message)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using mapQueryParams in Kotlin with Destructuring\nDESCRIPTION: Demonstrates how to use the mapQueryParams() method in Kotlin to retrieve multiple query parameters with clean destructuring syntax. It returns null if any parameter is missing, allowing for elegant error handling with the elvis operator.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-07-20-javalin-0.3.5-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/new-user\") { ctx ->\n    val (name, email) = ctx.mapQueryParams(\"name\", \"email\") ?: throw MissingQueryParamException()\n}\n```\n\n----------------------------------------\n\nTITLE: Using the reusable test utility for GET and POST tests (Kotlin)\nDESCRIPTION: These tests demonstrate how to use the reusable test utility function to simplify GET and POST request tests with Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-07-11-using-javalin-as-http-simulator.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun `gets a user profile by id`() = testProfileGateway { server, gatewayClient ->\n    server.get(\"profile/abc\") {\n        it.json(mapOf(\"id\" to \"abc\", \"email\" to \"x123@gmail.com\"))\n    }\n\n    val result = gatewayClient.fetchProfile(\"abc\")\n\n    assertEquals(Profile(id = \"abc\", email = \"x123@gmail.com\".toEmail()), result)\n}\n\n@Test\nfun `posts a user profile`() = testProfileGateway { server, profileGateway ->\n    var postedBody: String? = null\n    var contentType: String? = null\n    server.post(\"profile\") {\n        postedBody = it.body()\n        contentType = it.contentType()\n        it.status(201)\n    }\n\n    profileGateway.saveProfile(Profile(id = \"abc\", email = \"x123@gmail.com\".toEmail()))\n\n    JSONAssert.assertEquals(\n        \"\"\" { \"id\": \"abc\", \"email\": \"x123@gmail.com\"}  \"\"\",\n        postedBody, true\n    )\n    assertEquals(\"application/json\", contentType)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Routing Class for Javalin Endpoints\nDESCRIPTION: UserRouting class extends Routing<T> abstract class to bind HTTP endpoints to controller methods using Javalin's routing system with path and method definitions.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage io.kidbank.user;\n\nimport io.alzuma.Routing;\nimport io.javalin.Javalin;\n\nimport javax.inject.Inject;\nimport javax.inject.Singleton;\n\nimport static io.javalin.apibuilder.ApiBuilder.get;\nimport static io.javalin.apibuilder.ApiBuilder.path;\n\n@Singleton\nclass UserRouting extends Routing<UserController> {\n    private Javalin javalin;\n    @Inject\n    public UserRouting(Javalin javalin) {\n        this.javalin = javalin;\n    }\n\n    @Override\n    public void bindRoutes() {\n        javalin.routes(() -> {\n            path(\"api/kidbank/users\", () -> {\n                get(ctx -> getController().index(ctx));\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Attribute Management in Javalin 4\nDESCRIPTION: Shows the new methods for handling session attributes, including the renamed consumeSessionAttribute method and the new cachedSessionAttribute functionality.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-02-17-javalin-4.0.0-alpha.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.consumeSessionAttribute(\"key\")\nctx.cachedSessionAttribute(\"key\")\n```\n\n----------------------------------------\n\nTITLE: Fixed TemplateUtil#model method signature in Javalin\nDESCRIPTION: The model function signature was changed from 'vararg args: Any' to 'vararg args: Any?' to properly support nullable values in template models.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-01-03-javalin-1.2.1-released.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nvararg args: Any\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvararg args: Any?\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin and AssertJ Dependencies in Maven\nDESCRIPTION: This snippet shows how to add Javalin and AssertJ dependencies to a Maven project for testing purposes. It includes the javalin-bundle and assertj-core dependencies.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin-bundle</artifactId>\n    <version>{{site.javalinversion}}</version>\n</dependency>\n<dependency>\n    <groupId>org.assertj</groupId>\n    <artifactId>assertj-core</artifactId>\n    <version>3.11.1</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Path in Javalin - Kotlin implementation\nDESCRIPTION: Shows how to configure a context path in Javalin using Kotlin. The example uses Kotlin's apply function to configure the app with a context path of '/my-path', static files, and port before starting it, then defines a route handler for the root path.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-10-16-javalin-0.5.3-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create().apply {\n    contextPath(\"/my-path\")\n    enabledStaticFiles(\"public\")\n    port(1234)\n}.start()\n\napp.get(\"/\") { ctx -> ctx.result(\"Hello, World\") }\n```\n\n----------------------------------------\n\nTITLE: Adding Documented Route in Javalin with OpenAPI\nDESCRIPTION: Demonstrates how to add a route with OpenAPI documentation in Javalin using the documented function.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_54\n\nLANGUAGE: kotlin\nCODE:\n```\npost(\"/users\", documented(addUserDocs, ::addUserHandler))\n```\n\n----------------------------------------\n\nTITLE: Configuring JavalinVue Root Directory\nDESCRIPTION: Methods for setting the root directory for JavalinVue resources. Supports both classpath and external locations with optional jar class specification.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nrootDirectory(Path path) // set location with explicit Path object\nrootDirectory(String path) // set relative path (classpath by default)\nrootDirectory(String path, Location location) // location can be CLASSPATH or EXTERNAL\nrootDirectory(String path, Location location, Class resourcesJarClass) // add a class to specify which jar holds the resources\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nrootDirectory(path: Path) // set location with explicit Path object\nrootDirectory(path: String) // set relative path (classpath by default)\nrootDirectory(path: String, location: Location) // location can be CLASSPATH or EXTERNAL\nrootDirectory(path: String, location: Location, resourcesJarClass: Class<*>) // add a class to specify which jar holds the resources\n```\n\n----------------------------------------\n\nTITLE: Defining User Model Class in Java\nDESCRIPTION: Simple user class definition with name and level properties used for JWT token generation\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-11-javalin-jwt-example.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass MockUser {\n    String name;\n    String level;\n\n    MockUser(String name, String level) {\n        this.name = name;\n        this.level = level;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dedicated Provider Class in Java\nDESCRIPTION: Demonstrates how to create a dedicated provider class for the PersonReader service.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_30\n\nLANGUAGE: java\nCODE:\n```\npublic class PersonReaderProvider {\n    public static PersonReader provider() {\n        return new InMemoryPersonReader(\n                ServiceLoader.load(PersonFilter.class).findFirst().get()\n        );\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Javalin\nDESCRIPTION: Shows how to implement rate limiting in endpoint handlers, allowing 5 requests per minute per IP address per handler. Includes examples in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_58\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> {\n    new RateLimit(ctx).requestPerTimeUnit(5, TimeUnit.MINUTES); // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\");\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/\") { ctx ->\n    RateLimit(ctx).requestPerTimeUnit(5, TimeUnit.MINUTES) // throws if rate limit is exceeded\n    ctx.status(\"Hello, rate-limited World!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Template Engines in Javalin\nDESCRIPTION: Shows how to register template engines in Javalin, either using built-in renderers or custom implementations for specific file extensions.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_68\n\nLANGUAGE: java\nCODE:\n```\nJavalinRenderer.register(JavalinPebble.INSTANCE, \".peb\", \".pebble\");\n\nJavalinRenderer.register((filePath, model) -> {\n    return MyRenderer.render(filePath, model);\n}, \".ext\");\n```\n\n----------------------------------------\n\nTITLE: Cookie Store Operations\nDESCRIPTION: Example of using cookie store functionality to share data between handlers and servers. Demonstrates storing and retrieving different data types.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nctx.cookieStore(key, value); // store any type of value\nctx.cookieStore(key); // read any type of value\nctx.clearCookieStore(); // clear the cookie-store\n```\n\n----------------------------------------\n\nTITLE: Vue App Frame Template Component\nDESCRIPTION: Defines the main application frame template that displays the current user when authenticated. This component serves as a layout wrapper for other components.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"app-frame\">\n  <div class=\"app-frame\">\n    <header>\n      <span>JavalinVue demo app</span>\n      <span v-if=\"$javalin.state.currentUser\">Current user: '{{$javalin.state.currentUser}}'</span>\n    </header>\n    <slot></slot>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Javalin Routes\nDESCRIPTION: Demonstrates how to use named path parameters in routes and access them via Context.param().\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nget(\"/hello/:name\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.param(\"name\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nget(\"/hello/:name\") { ctx ->\n    ctx.result(\"Hello: \" + ctx.param(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Java Page Model Class\nDESCRIPTION: Java data class definition for passing parameters to jte templates\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage app;\n\npublic class HelloPage {\n    public String userName;\n    public int userKarma;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Localization with ResourceBundle in Java\nDESCRIPTION: Code snippet showing how to implement localization in Java using ResourceBundle. This allows the application to support multiple languages by loading different properties files based on locale.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2017-05-26-javalin-website-example.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nResourceBundle.getBundle(\"localization/messages\", new Locale(\"en\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Initial MyAPI Class\nDESCRIPTION: Java class containing the main method for the API subproject, which will eventually be used to start the Javalin application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.api;\n\npublic class MyAPI {\n    public static void main(String[] args) {\n        System.out.println(\"API's kind of alive already :-)\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Heroku via Maven\nDESCRIPTION: Command to deploy the application to Heroku using the Maven plugin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-heroku-example.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn heroku:deploy\n```\n\n----------------------------------------\n\nTITLE: Defining Javalin 1.6.1 Release Metadata in YAML\nDESCRIPTION: YAML front matter defining metadata for the Javalin 1.6.1 release notes, including layout, category, date, version, title, and summary.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-05-01-javalin-1.6.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: news\ncategory: news\ndate: 2018-05-01\nversion: 1.6.1\ntitle: Some minor bugfixes and bumps\nsummary: Fixed bug in redirect, json-mapping and log-util\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency with Maven\nDESCRIPTION: Maven dependency declaration for including Javalin in a Java project. Uses groupId 'io.javalin' and artifactId 'javalin'.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/mavenDep.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin</artifactId>\n    <version>{{javalinVersion | default: site.javalinversion}}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus with Custom Configuration\nDESCRIPTION: Command to start the Prometheus server with the custom configuration file. This simple command launches Prometheus using the previously defined configuration for Javalin monitoring.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-12-02-javalin-prometheus-example.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nprometheus --config.file=prometheus.yml\n```\n\n----------------------------------------\n\nTITLE: Rendering a Template in Java\nDESCRIPTION: Java code demonstrating how to render a template with a model containing first and last name variables.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nctx.render(\"/templateFile.ext\", model(\"firstName\", \"John\", \"lastName\", \"Doe\"));\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running the Example Project\nDESCRIPTION: Commands to clone the example project repository and run the application using Gradle.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-11-15-javalin-embedded-example.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tipsy/javalin-tomcat-embed-example\ncd javalin-tomcat-embed-example\n./gradlew clean appRun\n```\n\n----------------------------------------\n\nTITLE: Changing Session IDs in Javalin (Kotlin)\nDESCRIPTION: This Kotlin snippet shows how to change the session ID in a Javalin application. It uses the changeSessionId() method to protect against session fixation attacks, particularly useful after user login.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/change-id\") { ctx ->\n    // it could be wise to change the session id on login, to protect against session fixation attacks\n    ctx.req().changeSessionId()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Initializing Gradle Project\nDESCRIPTION: Commands to create a new directory for the project and initialize a basic Gradle project structure.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 1. Linux: create a new directory for our project wherever you host your projects\nmkdir javalin-with-jpms-and-gradle\n\n# 1. Windows: previous 'mkdir' should also work on Windows by now, but in case not you should be good with\nNew-Item -Type Directory javalin-with-jpms-and-gradle\n\n# 2. Change to new directory\ncd javalin-with-jpms-and-gradle\n\n# 3. Create new project based on Gradle's \"basic\" template\ngradle init --type basic --dsl groovy --project-name javalin-with-jpms-and-gradle\n```\n\n----------------------------------------\n\nTITLE: Handling Client Input in Javalin 6.0\nDESCRIPTION: Shows methods for extracting and validating client input data, including body parsing, form parameters, query parameters, file uploads, JSON deserialization, and validation with custom error messages.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-7.0/2024-01-10-javalin-6.0.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nctx.body();                     // get the request body as a string (caches the body)\nctx.formParam(\"name\");          // get a form parameter\nctx.queryParam(\"name\");         // get a query parameter\nctx.uploadedFile(\"name\");       // get an uploaded file\n\n// JSON methods\nctx.bodyAsClass(Clazz);         // deserialize ctx.body() to class\nctx.bodyStreamAsClass(Clazz);   // consume input stream from request body and deserialize to class\n\n// validation\nvar age = ctx.queryParamAsClass(\"age\", Integer.class)  // wraps parameter in Validator\n    .check(age -> age > 18, \"NOT_OLD_ENOUGH\") // adds check with error message\n    .get(); // gets the validated value, or throws ValidationException\nvar bananaBox = ctx.bodyValidator(BananaBox.class)\n    .check(box -> box.weight < 5, ValidationError(\"WEIGHT_TOO_HIGH\", Map.of(\"MAX_WEIGHT\", 5)))\n    .check(box -> box.bananas.length > 20, ValidationError(\"NOT_ENOUGH_BANANAS\", Map.of(\"MIN_BANANAS\", 20)))\n    .getOrDefault(defaultBananaBox) // uses default if body is null, runs validation rules otherwise\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.body()                      // get the request body as a string (caches the body)\nctx.formParam(\"name\")           // get a form parameter\nctx.queryParam(\"name\")          // get a query parameter\nctx.uploadedFile(\"name\")        // get an uploaded file\n\n// JSON methods\nctx.bodyAsClass<Clazz>()        // deserialize ctx.body() to class\nctx.bodyStreamAsClass<Clazz>()  // consume input stream from request body and deserialize to class\n\n// validation\nval age = ctx.queryParamAsClass<Int>(\"age\")  // wraps parameter in Validator\n    .check({ it > 18 }, \"NOT_OLD_ENOUGH\") // adds check with error message\n    .get() // gets the validated value, or throws ValidationException\nval bananaBox = ctx.bodyValidator<BananaBox>()\n    .check({ it.weight < 5 }, ValidationError(\"WEIGHT_TOO_HIGH\", mapOf(\"MAX_WEIGHT\" to 5)))\n    .check({ it.bananas.length > 20 }, ValidationError(\"NOT_ENOUGH_BANANAS\", mapOf(\"MIN_BANANAS\" to 20)))\n    .getOrDefault(defaultBananaBox) // uses default if body is null, runs validation rules otherwise\n```\n\n----------------------------------------\n\nTITLE: Collecting Multiple Validation Errors in Javalin (Java)\nDESCRIPTION: Demonstrates how to collect and merge multiple validation errors from different validators in Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nValidator<Integer> ageValidator = ctx.queryParamAsClass(\"age\", Integer.class)\n    .check(n -> !n.contains(\"-\"), \"ILLEGAL_CHARACTER\")\n\n// Empty map if no errors, otherwise a map with the key \"age\" and failed check messages in the list.\nMap<String, List<Integer>> errors = ageValidator.errors();\n\n// Merges all errors from all validators in the list. Empty map if no errors exist.\nMap<String, List<Object>> manyErrors = JavalinValidation.collectErrors(ageValidator, otherValidator, ...)\n```\n\n----------------------------------------\n\nTITLE: Including Javalin Dependency in Maven Project\nDESCRIPTION: This snippet shows how to include the Javalin dependency in a Maven project's pom.xml file. It uses a placeholder for the version number, which would be replaced with the actual version in the rendered page.\nSOURCE: https://github.com/javalin/website/blob/master/pages/download.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include macros/mavenDep.md %}\n```\n\n----------------------------------------\n\nTITLE: Configuring RouteOverview Plugin in Javalin (Java)\nDESCRIPTION: Demonstrates various ways to enable and configure the RouteOverview plugin in a Javalin application using Java. It shows how to set the path for the overview, add role-based authentication, and register the plugin manually.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/routeoverview.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.plugins.enableRouteOverview(path);                      // show all routes on specified path\n    config.plugins.enableRouteOverview(path, roles);               // show all routes on specified path (with auth)\n    config.plugins.register(new RouteOverviewPlugin(path));        // show all routes on specified path\n    config.plugins.register(new RouteOverviewPlugin(path, roles)); // show all routes on specified path (with auth)\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Template in Kotlin\nDESCRIPTION: Kotlin code demonstrating how to render a template with a model containing first and last name variables.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.render(\"/templateFile.ext\", mapOf(\"firstName\" to \"John\", \"lastName\" to \"Doe\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JPMS Module Execution\nDESCRIPTION: Updating the Gradle application plugin configuration to specify both the main class and main module. This is necessary when working with JPMS modules in Gradle applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_21\n\nLANGUAGE: groovy\nCODE:\n```\napplication {\n    mainClass = \"org.example.api.MyAPI\"\n    mainModule = \"org.example.api\"      // <-- add this line\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SessionHandler with SameSite Settings in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to create a custom SessionHandler with enhanced security settings for Jetty. It configures the session to be HTTP-only, secure, and strictly same-site using Kotlin's apply function.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun customSessionHandler() = SessionHandler().apply {\n    httpOnly = true\n    isSecureRequestOnly = true\n    sameSite = HttpCookie.SameSite.STRICT\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Maven Dependencies for Javalin with Prometheus\nDESCRIPTION: Maven dependencies required for setting up a Javalin server with Prometheus monitoring and Unirest for traffic simulation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-12-02-javalin-prometheus-example.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.javalin</groupId>\n        <artifactId>javalin-bundle</artifactId>\n        <version>{{site.javalinversion}}</version>\n    </dependency>\n    <dependency>\n        <groupId>io.prometheus</groupId>\n        <artifactId>simpleclient_httpserver</artifactId>\n        <version>0.16.0</version>\n    </dependency>\n    <dependency>\n        <groupId>com.konghq</groupId>\n        <artifactId>unirest-java</artifactId>\n        <version>3.13.10</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Micrometer Plugin in Javalin 5.2.0 (Java)\nDESCRIPTION: Demonstrates how to register and configure the reintroduced Micrometer plugin in Javalin 5.2.0 using Java. The plugin enables metrics collection with custom registry, tags, and configuration options.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-11-20-javalin-5.2.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.plugins.register(\n        MicrometerPlugin.create(metrics -> {\n            metrics.registry = meterRegistry;\n            metrics.tags = Tags.empty();\n            metrics.tagExceptionName = true;\n            metrics.tagRedirectPaths = tagRedirectPaths;\n            metrics.tagNotFoundMappedPaths = tagNotFoundMappedPaths;\n        })\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Query Class in Kotlin\nDESCRIPTION: Example of creating a GraphQL query class in Kotlin that implements the QueryGraphql interface. Shows how to define query methods and add GraphQL descriptions.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/graphql.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@GraphQLDescription(\"Query Example\")\nclass QueryExample : QueryGraphql {\n    fun hello(): String = \"Hello world\"\n\n    fun demoData(@GraphQLDescription(\"awesome input\") data: DemoData): DemoData = data\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Session Handler in Kotlin\nDESCRIPTION: Creates a Jetty SessionHandler that stores sessions in MongoDB using MongoSessionDataStore. Configures HTTP-only cookies and establishes connection to a MongoDB database for session persistence.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-08-27-javalin-2.1.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun mongoSessionHandler() = SessionHandler().apply {\n    httpOnly = true\n    sessionCache = DefaultSessionCache(this).apply {\n        sessionDataStore = MongoSessionDataStoreFactory().apply {\n            connectionString = \"mongodb://<user>:<pass>@<adr>:<port>/session_db\"\n            dbName = \"session_db\"\n            collectionName = \"sessions\"\n        }.getSessionDataStore(sessionHandler)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Access Control in Kotlin\nDESCRIPTION: Kotlin implementation of an AccessManager for role-based security in Javalin. Shows how to implement and apply an access manager with Kotlin's concise syntax.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// Set the access-manager that Javalin should use\napp.accessManager { handler, ctx, permittedRoles ->\n    val userRole = getUserRole(ctx) // determine user role based on request\n    if (permittedRoles.contains(userRole)) {\n        handler.handle(ctx)\n    } else {\n        ctx.status(401).result(\"Unauthorized\")\n    }\n}\n\nfun getUserRole(ctx: Context) : Role {\n    // determine user role based on request\n    // typically done by inspecting headers\n}\n\ninternal enum class MyRole : Role {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE\n}\n\napp.routes {\n    get(\"/un-secured\",   { ctx -> ctx.result(\"Hello\")},   roles(MyRole.ANYONE));\n    get(\"/secured\",      { ctx -> ctx.result(\"Hello\")},   roles(MyRole.ROLE_ONE));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency in Maven\nDESCRIPTION: This snippet shows how to add the Javalin dependency to a Maven project. It includes the Javalin bundle, which contains all necessary Javalin dependencies.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-27-javalin-vuejs-example.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin-bundle</artifactId>\n    <version>{{site.javalinversion}}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Updating module-info.java for Java Module System\nDESCRIPTION: Modifies the module-info.java file to include the new PersonFilter service and its implementation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nimport org.example.services.api.PersonFilter;\nimport org.example.services.api.PersonReader;\nimport org.example.services.filter.AtLeastEighteenFilter;\nimport org.example.services.inmemory.InMemoryPersonReader;\n\nmodule org.example.services {\n    exports org.example.services.api;\n\n    requires org.example.models;\n\n    provides PersonReader with InMemoryPersonReader;\n\n    provides PersonFilter with AtLeastEighteenFilter;\n\n    uses PersonFilter;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SessionHandler with SameSite Settings in Java\nDESCRIPTION: This snippet demonstrates how to create a custom SessionHandler with enhanced security settings, including SameSite=STRICT, for Jetty in a Java environment. It sets the session to be HTTP-only, secure, and strictly same-site.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nstatic SessionHandler customSessionHandler() {\n    final SessionHandler sessionHandler = new SessionHandler();\n    sessionHandler.setHttpOnly(true);\n    sessionHandler.setSecureRequestOnly(true);\n    sessionHandler.setSameSite(HttpCookie.SameSite.STRICT);\n    return sessionHandler;\n}\n```\n\n----------------------------------------\n\nTITLE: Liquid Template Include with CSS Styling\nDESCRIPTION: Includes a CSS file for landing page styling using Liquid template syntax.\nSOURCE: https://github.com/javalin/website/blob/master/pages/index.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>{% include landing.css %}</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Javalin WebSocket Chat Server in Kotlin\nDESCRIPTION: Kotlin implementation of the Javalin WebSocket chat server. It provides the same functionality as the Java version, including WebSocket event handling, user management, and message broadcasting.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-09-22-javalin-websocket-example.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\nimport io.javalin.http.staticfiles.Location\nimport io.javalin.websocket.WsContext\nimport j2html.TagCreator.*\nimport java.text.SimpleDateFormat\nimport java.util.*\nimport java.util.concurrent.ConcurrentHashMap\n\nprivate val userUsernameMap = ConcurrentHashMap<WsContext, String>()\nprivate var nextUserNumber = 1 // Assign to username for next connecting user\n\nfun main() {\n    Javalin.create {\n        it.staticFiles.add(\"/public\", Location.CLASSPATH)\n        it.router.mount {\n            it.ws(\"/chat\") { ws ->\n                ws.onConnect { ctx ->\n                    val username = \"User\" + nextUserNumber++\n                    userUsernameMap[ctx] = username\n                    broadcastMessage(\"Server\", \"$username joined the chat\")\n                }\n                ws.onClose { ctx ->\n                    val username = userUsernameMap[ctx]\n                    userUsernameMap.remove(ctx)\n                    broadcastMessage(\"Server\", \"$username left the chat\")\n                }\n                ws.onMessage { ctx ->\n                    broadcastMessage(userUsernameMap[ctx]!!, ctx.message())\n                }\n            }\n        }\n    }.start(7070)\n}\n\n// Sends a message from one user to all users, along with a list of current usernames\nfun broadcastMessage(sender: String, message: String) {\n    userUsernameMap.keys.filter { it.session.isOpen }.forEach { session ->\n        session.send(\n            mapOf(\n                \"userMessage\" to createHtmlMessageFromSender(sender, message),\n                \"userlist\" to userUsernameMap.values\n            )\n        )\n    }\n}\n\n// Builds a HTML element with a sender-name, a message, and a timestamp,\nprivate fun createHtmlMessageFromSender(sender: String, message: String): String {\n    return article(\n        b(\"$sender says:\"),\n        span(attrs(\".timestamp\"), SimpleDateFormat(\"HH:mm:ss\").format(Date())),\n        p(message)\n    ).render()\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Sent Events Implementation in Javalin\nDESCRIPTION: Examples showing how to implement Server-sent events (SSE) in Javalin. Demonstrates sending events, handling client disconnection, and closing the client connection.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_36\n\nLANGUAGE: java\nCODE:\n```\napp.sse(\"/sse\", client ->\n    client.sendEvent(\"connected\", \"Hello, SSE\");\n    client.onClose(() -> System.out.println(\"Client disconnected\"));\n    client.close(); // close the client\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.sse(\"/sse\") { client ->\n    client.sendEvent(\"connected\", \"Hello, SSE\")\n    client.onClose { println(\"Client disconnected\") }\n    client.close() // close the client\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Sessions to File System in Kotlin\nDESCRIPTION: Kotlin implementation of persisting sessions to the file system using Jetty's FileSessionDataStore. This method is ideal for development environments and requires no external dependencies.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun fileSessionHandler() = SessionHandler().apply {\n    sessionCache = DefaultSessionCache(this).apply {\n        sessionDataStore = FileSessionDataStore().apply {\n            val baseDir = File(System.getProperty(\"java.io.tmpdir\"))\n            this.storeDir = File(baseDir, \"javalin-session-store\").apply { mkdir() }\n        }\n    }\n    httpOnly = true\n    // make additional changes to your SessionHandler here\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Modularized Javalin Application\nDESCRIPTION: Command-line instructions for running the fully modularized application and testing the API endpoint. Shows both Gradle commands and expected output, including a curl request to verify functionality.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# Linux\n./gradlew :api:run\n\n# Windows\n.\\gradlew.bat :api:run\n\n# You should see an output like\n[main] INFO org.example.api.MyAPI - API: found 2 people.\n[main] INFO io.javalin.Javalin - Listening on http://localhost:7312/\n[main] INFO io.javalin.Javalin - Javalin started in 315ms \\o/\n[main] INFO org.example.api.MyAPI - APIs alive for real :-)))\n\n# Invoking the API in another window via\ncurl http://localhost:7312/persons\n\n# should print \n[{\"name\":\"Vincent Vega\",\"age\":73},{\"name\":\"Jules Winnfield\",\"age\":12}]\n```\n\n----------------------------------------\n\nTITLE: Working with Futures in Javalin 5\nDESCRIPTION: Demonstrates how to use futures in Javalin 5, which has changed from the Javalin 4 approach. Instead of ctx.future(future, callback), developers should now use ctx.future(futureSupplier) and rely on CompletableFuture's API for callbacks.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-4-5.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx ->\n    ctx.future(() -> myFuture\n        .thenAccept(result -> ctx.result(result))\n        .exceptionally(error -> ctx.result(\"Error: \" + error))\n    );\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/\") { ctx ->\n    ctx.future {\n        myFuture.thenAccept { ctx.result(it) }\n        myFuture.exceptionally { ctx.result(\"Error: \" + it) }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subproject Directories\nDESCRIPTION: Commands to create directory structures for the models, services, and api subprojects.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 1. Create directory for models subproject\nmkdir -p models/src/main/java/org/example/models\n\n# 2. Create directory for services subproject\nmkdir -p services/src/main/java/org/example/services\n\n# 3. Create directory for api subproject\nmkdir -p api/src/main/java/org/example/api\n\n# Windows: if 'mkdir' does not work then go with the 'New-Item` pendant for all previous three commands\nNew-Item -Type Directory <directory tree>\n```\n\n----------------------------------------\n\nTITLE: Persisting Sessions to Database using JDBC in Kotlin\nDESCRIPTION: Kotlin implementation for configuring Jetty to persist sessions to a database using JDBC. This approach provides better persistence and performance compared to file-based storage, making it suitable for production use.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun sqlSessionHandler(driver: String, url: String) = SessionHandler().apply {\n    sessionCache = DefaultSessionCache(this).apply {\n        sessionDataStore = JDBCSessionDataStoreFactory().apply {\n            setDatabaseAdaptor(DatabaseAdaptor().apply {\n                setDriverInfo(driver, url)\n                // setDatasource(myDataSource) // you can set data source here (for connection pooling, etc)\n            })\n        }.getSessionDataStore(sessionHandler)\n    }\n    httpOnly = true\n    // make additional changes to your SessionHandler here\n}\n```\n\n----------------------------------------\n\nTITLE: Application Size Chart for Javalin Projects\nDESCRIPTION: HTML bar chart showing the approximate codebase size of Javalin applications in production. The chart compares 2020 and 2018 data, revealing a trend toward larger applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2020-03-20-javalin-user-survey-2020.md#2025-04-08_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"chart-flex\">\n    <div>\n        2020\n        <div class=\"bar-chart\">\n            <div style=\"width:23%\" data-value=\"23%\">Less than 1k lines of code</div>\n            <div style=\"width:60%\" data-value=\"60%\">Between 1k and 10k lines of code</div>\n            <div style=\"width:20%\" data-value=\"20%\">More than 10k lines of code</div>\n        </div>\n    </div>\n    <div>\n        2018\n        <div class=\"bar-chart\">\n            <div style=\"width:37%\" data-value=\"37%\">Less than 1k lines of code</div>\n            <div style=\"width:63%\" data-value=\"63%\">Between 1k and 10k lines of code</div>\n            <div style=\"width:0%;background:transparent;\" data-value=\"0%\">More than 10k lines of code</div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Proxy Servlet in Javalin\nDESCRIPTION: Demonstrates how to add a proxy servlet using Jetty's AsyncProxyServlet for forwarding requests to another URL.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_55\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.jetty.modifyServletContextHandler(handler -> {\n        ServletHolder proxyServlet = new ServletHolder(AsyncProxyServlet.Transparent.class);\n        proxyServlet.setInitParameter(\"proxyTo\", \"https://javalin.io/\");\n        proxyServlet.setInitParameter(\"prefix\", \"/proxy\");\n        handler.addServlet(proxyServlet, \"/proxy/*\");\n    });\n}).start(7000);\n```\n\n----------------------------------------\n\nTITLE: Implementing JavalinRenderer Class in Kotlin\nDESCRIPTION: Kotlin implementation of a custom FileRenderer that can register and use multiple template engines based on file extensions.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass JavalinRenderer : FileRenderer {\n    private val renderers = HashMap<String, FileRenderer>()\n    fun register(extension: String, renderer: FileRenderer): JavalinRenderer {\n        renderers[extension] = renderer\n        return this\n    }\n\n\n    override fun render(filePath: String, model: Map<String, Any?>, context: Context): String {\n        val extension = filePath.substring(filePath.lastIndexOf(\".\") + 1)\n        return renderers[extension]!!.render(filePath, model, context)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Session Attributes in Javalin (Kotlin)\nDESCRIPTION: This Kotlin snippet illustrates how to read values from a session in a Javalin application. It retrieves the value of the session attribute 'my-key' as a String using Kotlin's type inference.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/read\") { ctx ->\n    // values on the session will be available on all your instances if you use a session db\n    val myValue = ctx.sessionAttribute<String>(\"my-key\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes Using Javalin ApiBuilder in Kotlin\nDESCRIPTION: Demonstrates how to structure routes using the ApiBuilder utility in Kotlin, including path nesting, request handlers, middleware, and WebSocket endpoints.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport static io.javalin.apibuilder.ApiBuilder.*\n...\napp.routes {\n    before(GlobalController::globalAction)               // handler that runs for every request to the app\n    path(\"users\") {                                      // push subpath /users on the router\n        get(UserController::getAll)                      // get controller for /users/\n        post(UserController::create)                     // post controller for /users/\n        before(\"{userId}*\", UserController:userIdCheck)  // handler that runs for every request to /users/{userId} as well as al subpaths\n        path(\"{userId}\") {                               // new subpath /{userId} on the router\n            get(UserController::getOne)                  // get controller for /users/{userId}\n            patch(UserController::update)                // patch controller for /users/{userId}\n            path(\"subpath\") { ... }                      // push subpath /subpath on the router (and pop it immediately)\n        }                                                // pop subpath /{userId} on the router\n        ws(\"events\", UserController::webSocketEvents)    // websocket controller for /users/events\n    }                                                    // pop subpath /users on the router\n}.start(port)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for POST Requests\nDESCRIPTION: HTML form for making reservations that uses the POST method. The form submits day and time selections to the server to create a new reservation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-07-28-javalin-html-forms-example.md#2025-04-08_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n<h2>Make reservation:</h2>\n<form method=\"post\" action=\"/make-reservation\">\n    Choose day\n    <select name=\"day\">\n        <option value=\"saturday\">Saturday</option>\n        <option value=\"sunday\">Sunday</option>\n    </select>\n    <br>\n    Choose time\n    <select name=\"time\">\n        <option value=\"8:00 PM\">8:00 PM</option>\n        <option value=\"9:00 PM\">9:00 PM</option>\n    </select>\n    <br>\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Root build.gradle\nDESCRIPTION: Root Gradle build file configuration to set up Maven Central as the repository for all subprojects.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\n// Let's setup Maven Central as repository for all dependencies of all subprojects\nsubprojects {\n    repositories {\n        mavenCentral()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding sendPing Method to WsContext in Java\nDESCRIPTION: A new 'sendPing' method has been added to the 'WsContext' class in Javalin 4.6.2. This method allows sending ping messages in WebSocket connections.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-06-16-javalin-4.6.X-released.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nWsContext.sendPing()\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency with Gradle\nDESCRIPTION: Gradle dependency declaration for including Javalin using the implementation configuration.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/mavenDep.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimplementation(\"io.javalin:javalin:{{javalinVersion | default: site.javalinversion }}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring RouteOverviewPlugin in Javalin\nDESCRIPTION: Demonstrates how to register the RouteOverviewPlugin with Javalin, which allows viewing all mapped routes. The plugin can be configured with or without authorization roles and will now serve JSON if the client accepts it.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2019-08-11-javalin-3.4.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config ->\n    config.registerPlugin(new RouteOverviewPlugin(path));        // show all routes on specified path\n    config.registerPlugin(new RouteOverviewPlugin(path, roles)); // show all routes on specified path (with auth)\n)\n```\n\n----------------------------------------\n\nTITLE: Frontend CORS Credential Configuration with Axios\nDESCRIPTION: Example of configuring CORS credentials in frontend JavaScript using Axios for making authenticated requests.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/cors.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from \"axios\";\n\nconst data = {};\naxios.post(\"https://example.com\", data, {\n  withCredentials: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementation of Plugin With Configuration\nDESCRIPTION: Example of implementing a plugin with configuration options in Javalin 6.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class PluginWithConfig extends Plugin<PluginWithConfig.Config> {\n    public PluginWithConfig(Consumer<Config> userConfig) {\n        super(userConfig, new Config()); // user config and a default config are passed to the super constructor\n    }\n    // override any methods you want here\n    static class Config { // could be stored in a separate file if you want\n        String someField = \"Default value\";\n    }\n    var userValue = pluginConfig.someField // pluginConfig holds the config supplied by the user, applied to the default config\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PluginWithConfig(userConfig: Consumer<PluginConfig>) : Plugin<PluginConfig>(userConfig, PluginConfig()) {\n    // user config and a default config are passed to the super constructor       ^^^^^^^^^^  ^^^^^^^^^^^^^^\n\n    // override any methods you want here\n    val userValue = pluginConfig.someField // pluginConfig holds the config supplied by the user, applied to the default config\n}\n\nclass PluginConfig {\n    @JvmField var someField: String = \"Default value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Statistics Service with InfluxDB Operations\nDESCRIPTION: Service implementation for handling statistics data with InfluxDB. Contains methods for creating new statistics entries and retrieving aggregated data within a 60-second time frame.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2017-12-11-javalin-influxdb-example.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val timeFrameInMillis = 60000\n\nprivate val aggregateQuery = \"\"\"\n    SELECT  count(s_count) as count,\n            sum(s_count) as sum,\n            min(s_count) as min,\n            max(s_count) as max\n    FROM uploads\n    where time > now() - 60s\n    \"\"\"\n\ninit {\n    influxDB.createDatabase(dbName)\n}\n\nfun create(statistic: Statistic): StatisticResult {\n    val now = Date().time\n    if ((statistic.timestamp + timeFrameInMillis) >= now) {\n        influxDB.write(dbName, \"\", Point.measurement(\"uploads\")\n                .time(statistic.timestamp, TimeUnit.MILLISECONDS)\n                .addField(\"s_count\", statistic.count)\n                .addField(\"s_timestamp\", statistic.timestamp)\n                .build())\n        return StatisticResult.OK\n    }\n    return StatisticResult.OLD\n}\n\nfun aggregated(): Total {\n    val query = Query(\n            aggregateQuery,\n            dbName\n    )\n    val results = influxDB.query(query)\n            .results\n    if (results.first().series == null) {\n        return Total(0.0, 0.0, 0.0, 0.0)\n    }\n    return results.first().series.first().values\n            .map { mutableList ->\n                Total(mutableList[1].toString().toDouble(),\n                        mutableList[2].toString().toDouble(),\n                        mutableList[3].toString().toDouble(),\n                        mutableList[4].toString().toDouble()\n                )\n            }[0]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World Template\nDESCRIPTION: Simple jte template example showing basic text output\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHello jte!\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku Maven Plugin\nDESCRIPTION: Maven plugin configuration for Heroku deployment, specifying JDK version, application name, and process types.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-heroku-example.md#2025-04-08_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n<plugin>\n    <groupId>com.heroku.sdk</groupId>\n    <artifactId>heroku-maven-plugin</artifactId>\n    <version>3.0.3</version>\n    <configuration>\n        <jdkVersion>11</jdkVersion>\n        <appName>javalin-heroku-example</appName>\n        <processTypes>\n            <web>java -jar ./target/javalin-heroku-example-1.0-jar-with-dependencies.jar</web>\n        </processTypes>\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Context Session Attribute Computation\nDESCRIPTION: New method for computing absent session attributes using cachedSessionAttributeOrCompute.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-04-24-javalin-4.5.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nContext#cachedSessionAttributeOrCompute\n```\n\n----------------------------------------\n\nTITLE: Writing a test using Mockito with Javalin Context\nDESCRIPTION: This Java code snippet demonstrates how to write a test using Mockito to mock the Javalin Context class after enabling InlineMockMaker.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2019-10-20-javalin-mockito-example.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void handleBrewCoffee() {\n    Context context = mock(Context.class);\n    this.teapotRequestHandler.handleBrewCoffee(context);\n    verify(context).status(418);\n    verify(context).result(\"I'm a teapot!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Engines in Javalin\nDESCRIPTION: Demonstrates configuration of various supported template engines including Thymeleaf, Velocity, Freemarker, Mustache, Jtwig, Pebble, and Commonmark.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalinThymeleaf.configure(templateEngine)\nJavalinVelocity.configure(velocityEngine)\nJavalinFreemarker.configure(configuration)\nJavalinMustache.configure(mustacheFactory)\nJavalinJtwig.configure(configuration)\nJavalinPebble.configure(configuration)\nJavalinCommonmark.configure(htmlRenderer, markdownParser)\n```\n\n----------------------------------------\n\nTITLE: Redirect Implementation Comparison\nDESCRIPTION: Compares redirect implementation between Javalin and SparkJava. Shows how Javalin simplifies the redirect operation while SparkJava requires additional return statement.\nSOURCE: https://github.com/javalin/website/blob/master/pages/comparison-to-spark.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\njavalin.get(\"/\", ctx -> ctx.redirect(\"/new-path\"));\n// vs\nSpark.get(\"/\", (req, res) -> {\n    res.redirect(\"/new-path\"); // can't return here, the redirect method is void\n    return \"\"; // if you return null here you get a 404\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Javalin Handlers in Kotlin\nDESCRIPTION: This code snippet shows how to write unit tests for Javalin handlers in Kotlin using MockK for mocking the Context object. It includes tests for valid and invalid user creation scenarios.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.http.BadRequestResponse\nimport io.javalin.http.Context\nimport io.mockk.every\nimport io.mockk.mockk\nimport io.mockk.verify\nimport org.junit.Test\n\nclass UnitTest {\n\n    private val ctx = mockk<Context>(relaxed = true)\n\n    @Test\n    fun `POST to create users gives 201 for valid username`() {\n        every { ctx.queryParam(\"username\") } returns \"Roland\"\n        UserController.create(ctx) // the handler we're testing\n        verify { ctx.status(201) }\n    }\n\n    @Test(expected = BadRequestResponse::class)\n    fun `POST to create users throws for invalid username`() {\n        every { ctx.queryParam(\"username\") } returns null\n        UserController.create(ctx) // the handler we're testing\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Person Model Class in Java\nDESCRIPTION: Defines a Person class with name and age properties including getters and setters\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.models;\n\npublic class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent API Attempt with Lambda Parameters\nDESCRIPTION: An attempt at creating a fluent API by passing the Javalin instance as a parameter to lambdas, showing naming conflicts that arise with nested paths.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-07-17-static-methods-within-lambdas.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create().path(\"/api\", server -> {\n    server.get(\"/users\", UserController::getAll);\n    server.path(\"/users\", server2 -> { // server is taken, also, which one should we use?\n        server.get(\"/:user-id\", UserController::getOne);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Javalin Application with Bazel (Bash)\nDESCRIPTION: This command uses Bazel to run the Javalin server application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2023-11-13-javalin-bazel-example.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbazel run //:server\n```\n\n----------------------------------------\n\nTITLE: Handling Different Response Types in Javalin\nDESCRIPTION: Shows various methods for sending different types of responses to clients, including JSON, streams, and template rendering.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-09-13-javalin-4.0.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nctx.json(myJson));                // serializes object to JSON string and writes to client\nctx.jsonStream(myJson));          // serializes JSON directly to client (nothing buffered in memory)\nctx.seekableStream(myMediaFile)); // stream audio and video to client (supports seeking/skipping)\nctx.future(myFuture));            // let's Javalin handle request asynchronously (supports callbacks)\nctx.render(\"/file.ext\", model));  // render template or markdown file\n```\n\n----------------------------------------\n\nTITLE: Javalin Request Lifecycle Execution Order\nDESCRIPTION: Outlines the order of execution for Javalin's request handling components, including middleware, handlers, error processing, and logging.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nJavalin#before              // runs first, can throw exception (which will skip any endpoint handlers)\nConfig#accessManager        // can be configured to run before endpoints (get/post/patch/etc)\nJavalin#get/post/patch/etc  // runs second, can throw exception\nJavalin#after               // runs third, can throw exception\nJavalin#error               // runs fourth, can throw exception\nJavalin#exception           // runs any time a handler throws (cannot throw exception)\nConfig#requestLogger        // runs after response is written to client\n```\n\n----------------------------------------\n\nTITLE: Exception Handler for ValidationException\nDESCRIPTION: Shows the default exception handler for ValidationException and how to override it.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(ValidationException::class.java) { e, ctx ->\n    ctx.json(e.errors).status(400)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Rendering Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding the javalin-rendering module and a template engine dependency to your project.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin-rendering</artifactId>\n    <version>{{site.javalinversion}}</version>\n</dependency>\n<dependency>\n    <groupId><!-- template engine group --></groupId>\n    <artifactId><!-- template engine artifact --></artifactId>\n    <version><!-- template engine version --></version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation Handler in Kotlin\nDESCRIPTION: This snippet shows the implementation of a user creation handler in Kotlin. It checks for a valid username and either adds the user or throws a BadRequestResponse.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun create(ctx: Context) {\n    val username = ctx.queryParam(\"username\")\n    if (username == null || username.length < 5) {\n        throw BadRequestResponse()\n    } else {\n        users.add(username)\n        ctx.status(201)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Local State Option for VueComponent Instances\nDESCRIPTION: A new feature has been added to allow setting local state for VueComponent instances, enhancing the flexibility of Vue.js integration in Javalin applications.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-08-27-javalin-3.10.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Added the option to set local state for `VueComponent` instances\n```\n\n----------------------------------------\n\nTITLE: Initializing Ktor Server with JSON Serialization in Kotlin\nDESCRIPTION: This snippet demonstrates setting up a Ktor server with JSON serialization capabilities. It includes multiple imports for various Ktor features and configures a server with content negotiation and a route for serving JSON data.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-08-02-number-of-imports-and-library-usability.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.ryanharter.ktor.moshi.moshi\nimport io.ktor.application.call\nimport io.ktor.application.install\nimport io.ktor.features.ContentNegotiation\nimport io.ktor.response.respond\nimport io.ktor.routing.get\nimport io.ktor.routing.routing\nimport io.ktor.server.engine.embeddedServer\nimport io.ktor.server.netty.Netty\n\nval someData = setOf<String>()\n\nfun main(args: Array<String>) {\n  val server = embeddedServer(Netty, 8080) { // create server\n    install(ContentNegotiation) {\n      moshi\n    }\n    routing { // attach endpoint\n      get(\"/data\") { // attach endpoint\n        call.respond(someData) // send json\n      }\n    }\n  }\n  server.start(wait = true) // start server\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for BungeeCord/Waterfall Projects in Gradle\nDESCRIPTION: Gradle configuration to add BungeeCord API as a compile-time dependency along with Javalin and its required runtime dependencies (SLF4J and Jackson).\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-04-06-javalin-and-minecraft-servers.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ndependencies {\n    compileOnly 'net.md-5:bungeecord-api:1.16-R0.5-SNAPSHOT'\n\n    // https://mvnrepository.com/artifact/io.javalin/javalin\n    implementation 'io.javalin:javalin:{{site.javalinversion}}'\n    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple\n    implementation 'org.slf4j:slf4j-simple:{{site.slf4jversion}}'\n    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReDoc Options in Kotlin\nDESCRIPTION: Example of configuring ReDoc options for OpenAPI documentation using the typed API, including theme customization and download button settings\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-11-14-javalin-3.12.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n.reDoc(ReDocOptions(\"/redoc\", RedocOptionsObject(\n    hideDownloadButton = true,\n    theme = RedocOptionsTheme(\n        spacingUnit = 10,\n        isTypographyOptimizeSpeed = true\n    )\n)))\n```\n\n----------------------------------------\n\nTITLE: Creating Not Found Component\nDESCRIPTION: Implements a simple 404 error page component.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass NotFound {\n    constructor() {\n\n    }\n\n    view(vnode) {\n        return m(AppFrame, {\n            content: m(\"h1\", \"Page Not Found (error 404)\")\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message for Sensor Data\nDESCRIPTION: This .proto file defines the structure of the SensorData message using Protocol Buffers syntax. It includes fields for make and model, destination year, flux capacitor readings, last check-in time, and safety belt status.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-03-25-serving-protobuf-with-javalin.md#2025-04-08_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n// The package directive (when generating Java src files) tells protoc where to store the generated Java files\npackage protos;\n\nimport \"google/protobuf/timestamp.proto\";\n\n// proto standard says field names should be lower_snake_case\n// except enum values (not covered here) which should be SCREAMING_SNAKE_CASE\n\nmessage SensorData {\n    optional string make_and_model = 1;\n    int32 destination_year = 2;\n    repeated double flux_capacitor_readings = 3;\n    optional google.protobuf.Timestamp last_check_in = 4;\n    bool safety_belts_on = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated OpenAPI Client in Kotlin\nDESCRIPTION: Example of using an auto-generated OpenAPI client to interact with the API endpoints. Demonstrates error handling and basic CRUD operations.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-03-javalin-openapi-example.md#2025-04-08_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.javalin.example.kotlin.client\n\nimport org.openapitools.client.apis.UserApi\nimport org.openapitools.client.infrastructure.ClientException\nimport org.openapitools.client.infrastructure.ServerException\nimport org.openapitools.client.models.NewUserRequest\n\nprivate val apiInstance = UserApi(\"http://localhost:7001\")\n\nfun main() {\n    try {\n        apiInstance.getAllUsers().forEach { println(it) }\n    } catch (e: ServerException) {\n        println(\"5xx response calling UserApi#getAllUsers\")\n    }\n\n    try {\n        val newUserRequest = NewUserRequest(\"Elaine\", \"Elaine@elaine.kt\")\n        apiInstance.createUser(newUserRequest)\n        println(\"Added new user: ${newUserRequest.name}\")\n        apiInstance.getAllUsers().forEach { println(it) }\n    } catch (e: ClientException) {\n        println(\"4xx response calling UserApi#createUser\")\n    } catch (e: ServerException) {\n        println(\"5xx response calling UserApi#createUser\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating and Casting Headers in Javalin 3.5.0\nDESCRIPTION: Demonstrates the new feature for validating and casting headers in Javalin 3.5.0. This allows for type-safe header retrieval.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2019-09-15-javalin-3.5.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nctx.header<Int>(\"my-header\")\n```\n\n----------------------------------------\n\nTITLE: Implementing After Handlers in Javalin\nDESCRIPTION: After-handlers run after every request completes, including when exceptions occur. They can be applied globally or to specific paths, similar to before-handlers.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\napp.after(ctx -> {\n    // run after all requests\n});\napp.after(\"/path/*\", ctx -> {\n    // runs after request to /path/*\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.after { ctx ->\n    // run after all requests\n}\napp.after(\"/path/*\") { ctx ->\n    // runs after request to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Javalin Application\nDESCRIPTION: This bash command builds a Docker image for the Javalin application using the Dockerfile in the current directory. The image is tagged as 'javalin-app'.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2022-10-30-javalin-docker-example.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t javalin-app .\n```\n\n----------------------------------------\n\nTITLE: GraalVM Native Image Build Command Output with Error\nDESCRIPTION: Terminal output showing an attempt to build a native image with GraalVM that fails due to unsupported native methods, indicating the need for JNI support.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nj0e@thinkpad  ~/projects/graal-javalin  master ● ? ⍟1  native-image -jar ./build/libs/graal-javalin-all-1.0-SNAPSHOT.jar\nBuild on Server(pid: 28578, port: 34643)*\n[graal-javalin-all-1.0-SNAPSHOT:28578]    classlist:   2,977.05 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]        (cap):     963.06 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]        setup:   1,663.57 ms\n[ForkJoinPool-3-worker-3] INFO org.eclipse.jetty.util.log - Logging initialized @5682ms to org.eclipse.jetty.util.log.Slf4jLog\n[graal-javalin-all-1.0-SNAPSHOT:28578]   (typeflow):  10,510.28 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]    (objects):   6,598.95 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]   (features):     110.60 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]     analysis:  17,612.10 ms\n[graal-javalin-all-1.0-SNAPSHOT:28578]     universe:     859.27 ms\nerror: unsupported features in 8 methods\nDetailed message:\nError: Unsupported method sun.nio.ch.InheritedChannel.soType0(int) is reachable: Native method. If you intend to use the Java Native Interface (JNI), specify -H:+JNI and see also -H:JNIConfigurationFiles=<path> (use -H:+PrintFlags for details)\nTo diagnose the issue, you can add the option --report-unsupported-elements-at-runtime. The unsupported element is then reported at run time when it is accessed the first time.\n...\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring MultipartUtil Pre-Upload Function\nDESCRIPTION: Customize the function executed before file uploads to specify a custom MultipartConfigElement. This allows for custom configuration of multipart file processing.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-10-04-javalin-3.11.0-released.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMultipartUtil.preUploadFunction = /* your function */\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Factory Settings\nDESCRIPTION: Example of configuring WebSocket factory settings like maximum text message size.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_27\n\nLANGUAGE: java\nCODE:\n```\napp.wsFactoryConfig(wsFactory -> {\n    wsFactory.policy.maxTextMessageSize = 1234;\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsFactoryConfig { wsFactory ->\n    wsFactory.policy.maxTextMessageSize = 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Javalin Validator API in Kotlin\nDESCRIPTION: Shows the available methods on Javalin's Validator and TypedValidator classes for input validation in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n// only available on Validator:\nnotNullOrEmpty() // check that value is not null of empty (all validators do this by default, but can be called for readability)\nmatches(\"regex\") // check that value matches regex\nasBoolean() // validate and return TypedValidator<Boolean>\nasDouble() // validate and return TypedValidator<Double>\nasFloat() // validate and return TypedValidator<Float>\nasInt() // validate and return TypedValidator<Int>\nasLong() // validate and return TypedValidator<Long>\nasClass<MyClass>() // validate and return TypedValidator<MyClass>\n\n// available on both Validator and TypedValidator<T>:\ncheck({ ... }) // check value against supplied lambda\ngetOrThrow() // validate and get value\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files in Java\nDESCRIPTION: Shows the updated method for configuring static file handlers in Javalin 4, including the new StaticFileConfig class and its options.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-3-4.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nconfig.addStaticFiles(path, location); // location is now required, default is gone\nconfig.addStaticFiles(staticFileConfig);\n\nconfig.addStaticFiles(staticFiles -> {\n    staticFiles.aliasCheck = ContextHandler.AliasCheck((path, resource) -> !path.endsWith(\".txt\"));\n    staticFiles.directory = \"src/test/external/\";\n    staticFiles.location = Location.EXTERNAL;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Type Conversion Registration\nDESCRIPTION: Example of registering a custom type converter for validation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-09-16-javalin-2.2.0-released.md#2025-04-08_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalinValidation.register(Instant::class.java) { Instant.ofEpochMilli(it.toLong()) }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Javalin Servlet\nDESCRIPTION: Kotlin code for a simple servlet that uses Javalin to handle REST requests. It demonstrates how to create a standalone Javalin instance and use it within a servlet.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-11-15-javalin-embedded-example.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@WebServlet(urlPatterns = [\"/rest/*\"], name = \"MyRestServlet\", asyncSupported = false)\nclass MyRestServlet : HttpServlet() {\n    val javalin: JavalinServlet = Javalin.createStandalone()\n            .get(\"/rest\") { ctx -> ctx.result(\"Hello!\") }\n            .servlet()\n\n    override fun service(req: HttpServletRequest, resp: HttpServletResponse) {\n        javalin.service(req, resp)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency with Buildr\nDESCRIPTION: Buildr dependency declaration for including Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/mavenDep.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n'io.javalin:javalin:jar:{{javalinVersion | default: site.javalinversion }}'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class Loading Issue with GraalVM\nDESCRIPTION: Simple example showing a problematic pattern with dynamic class loading that causes issues for GraalVM's ahead-of-time compilation, as the compiler cannot determine which classes to include at compile time.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nif (someVariable) {\n    Class.forName(\"SomeClazz\")\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Team Size Chart for Javalin Applications\nDESCRIPTION: HTML visualization showing the number of people working on Javalin applications in production. The chart compares 2020 and 2018 data, showing a shift toward larger team sizes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2020-03-20-javalin-user-survey-2020.md#2025-04-08_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"chart-flex\">\n    <div>\n        2020\n        <div class=\"bar-chart\">\n            <div style=\"width:58%\" data-value=\"58%\">1 - 2 people</div>\n            <div style=\"width:31%\" data-value=\"31%\">2 - 5 people</div>\n            <div style=\"width:8%\" data-value=\"8%\">5 - 10 people</div>\n            <div style=\"width:4%\" data-value=\"4%\">10+ people</div>\n        </div>\n    </div>\n    <div>\n        2018\n        <div class=\"bar-chart\">\n            <div style=\"width:79%\" data-value=\"79%\">1 - 2 people</div>\n            <div style=\"width:21%\" data-value=\"21%\">2 - 5 people</div>\n            <div style=\"width:0%;background:transparent;\" data-value=\"0%\">5 - 10 people</div>\n            <div style=\"width:0%;background:transparent;\" data-value=\"0%\">10+ people</div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using New Context Methods in Javalin 4\nDESCRIPTION: Demonstrates the reintroduction of reified methods with asClass suffix for type-safe parameter retrieval, and shows the new future handling API.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2021-02-17-javalin-4.0.0-alpha.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.queryParamAsClass<Int>(\"key\")\nctx.future(future)\nctx.future(future, Consumer)\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Validation Syntax in Kotlin\nDESCRIPTION: Demonstrates the deprecated validation syntax and the new, more concise syntax introduced in Javalin 2.8.0 for query parameter validation in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2019-03-26-javalin-2.8.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval myQpStr = ctx.queryParam(\"my-qp\")\nval myQpInt = ctx.validatedQueryParam(\"my-qp\").asInt().getOrThrow()\nval myQpInt = ctx.validatedQueryParam(\"my-qp\").asInt().check{ it  > 4 }.getOrThrow()\nval instant = ctx.validatedQueryParam(\"my-qp\").asClass<Instant>().getOrThrow()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myQpStr = ctx.queryParam(\"my-qp\")\nval myQpInt = ctx.queryParam<Int>(\"my-qp\").get()\nval myQpInt = ctx.queryParam<Int>(\"my-qp\").check{ it > 4 }.get()\nval instant = ctx.queryParam<Instant>(\"my-qp\").get()\n```\n\n----------------------------------------\n\nTITLE: Creating Hibernate SessionFactory\nDESCRIPTION: Implements a singleton pattern for creating and managing the Hibernate SessionFactory. It uses the configuration from AppHibernateConfig and handles potential exceptions during creation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2024-10-20-javalin-hibernate.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass AppHibernateSessionFactory {\n\n    private static final Logger logger = LoggerFactory.getLogger(AppHibernateSessionFactory.class);\n\n    private static SessionFactory sessionFactory;\n\n    static SessionFactory getSessionFactory() {\n        if (Objects.isNull(sessionFactory)) {\n            try {\n                var configuration = AppHibernateConfig.configuration();\n                var serviceRegistry = new StandardServiceRegistryBuilder()\n                        .applySettings(configuration.getProperties())\n                        .build();\n                sessionFactory = configuration.buildSessionFactory(serviceRegistry);\n            } catch (Throwable ex) {\n                logger.error(\"Failed to create session factory\", ex);\n            }\n        }\n        return sessionFactory;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Server Operations in Javalin\nDESCRIPTION: Basic server start and stop operations with shutdown hook implementation.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_49\n\nLANGUAGE: java\nCODE:\n```\nJavalin app = Javalin.create()\n    .start() // start server (sync/blocking)\n    .stop() // stop server (sync/blocking)\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Context Attributes in Kotlin\nDESCRIPTION: Updated function signatures in the Context class to properly mark return types as nullable using Kotlin's type system. These changes affect attribute retrieval methods for both regular and session attributes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-09-02-javalin-2.1.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> attribute(attribute: String): T?\nfun <T> attributeMap(): Map<String, T?>\nfun <T> sessionAttribute(attribute: String): T?\nfun <T> sessionAttributeMap(): Map<String, T?>\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency with Leiningen\nDESCRIPTION: Leiningen dependency vector for including Javalin in Clojure projects.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/mavenDep.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n[io.javalin/javalin \"{{javalinVersion | default: site.javalinversion }}\"]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Repository with Git\nDESCRIPTION: Command to clone the repository containing the Javalin student application example.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-12-javalin-tracing-example.md#2025-04-08_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://github.com/aravindputrevu/javalin-student.git\n```\n\n----------------------------------------\n\nTITLE: Modified Travis CI Configuration with Workarounds\nDESCRIPTION: Enhanced Travis CI configuration with sudo requirement, Maven caching, and disabled JDK versions to handle stability issues.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2019-11-03-moving-from-travis-to-github-actions.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo: required # this became required on 30-08-2018 for unknown reasons\nlanguage: java\njdk:\n- openjdk8\n#- openjdk9\n#- openjdk10\n- openjdk11\n#- openjdk12\ncache:\n  directories:\n    - $HOME/.m2\n```\n\n----------------------------------------\n\nTITLE: Server Shutdown Hook Configuration\nDESCRIPTION: Implementation of clean shutdown hooks and server event handlers.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nRuntime.getRuntime().addShutdownHook(new Thread(() -> {\n\tapp.stop();\n}));\n\napp.events(event -> {\n    event.serverStopping(() -> { /* Your code here */ });\n    event.serverStopped(() -> { /* Your code here */ });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sureness Authentication Interceptor in Javalin\nDESCRIPTION: Java code that adds a before interceptor to Javalin to check all incoming requests for authentication and authorization, along with an after interceptor to clean up the context.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-04-16-javalin-sureness-example.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// intercept all rest requests for authenticating and authorizing\napp.before(ctx -> {\n    SubjectSum subject = SurenessSecurityManager.getInstance().checkIn(ctx.req);\n    // when auth error , the exception throw, you should use app.exception() catch it and define return\n    if (subject != null) {\n        SurenessContextHolder.bindSubject(subject);\n    }\n});\n\napp.after(ctx ->  SurenessContextHolder.unbindSubject());\n```\n\n----------------------------------------\n\nTITLE: Getting Started with Javalin\nDESCRIPTION: Basic code to start a Javalin application. This is the entry point for creating a web application with Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n{% include macros/gettingStarted.md %}\n```\n\n----------------------------------------\n\nTITLE: Setting JavalinVue File Inlining Methods\nDESCRIPTION: Use JavalinVue's new methods for inlining files directly in layout templates. These methods allow for conditional inclusion of files based on development environment.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-10-04-javalin-3.11.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@inlineFile, @inlineFileDev and @inlineFileNotDev\n```\n\n----------------------------------------\n\nTITLE: Implementing a Realtime Collaboration Server in Kotlin with Javalin WebSockets\nDESCRIPTION: Kotlin implementation of a realtime document collaboration server using Javalin and WebSockets. Uses a concurrent hash map to track documents and their collaborators, with WebSocket handlers for managing connections and synchronizing document content.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-04-22-javalin-realtime-collaboration-example.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.Javalin\nimport io.javalin.http.staticfiles.Location\nimport io.javalin.websocket.WsContext\nimport java.util.concurrent.ConcurrentHashMap\n\ndata class Collaboration(var doc: String = \"\", val clients: MutableSet<WsContext> = ConcurrentHashMap.newKeySet())\n\nfun main() {\n\n    val collaborations = ConcurrentHashMap<String, Collaboration>()\n\n    Javalin.create {\n        it.staticFiles.add(\"/public\", Location.CLASSPATH)\n        it.router.mount {\n            it.ws(\"/docs/{doc-id}\") { ws ->\n                ws.onConnect { ctx ->\n                    if (collaborations[ctx.docId] == null) {\n                        collaborations[ctx.docId] = Collaboration()\n                    }\n                    collaborations[ctx.docId]!!.clients.add(ctx)\n                    ctx.send(collaborations[ctx.docId]!!.doc)\n                }\n                ws.onMessage { ctx ->\n                    collaborations[ctx.docId]!!.doc = ctx.message()\n                    collaborations[ctx.docId]!!.clients.filter { it.session.isOpen }.forEach {\n                        it.send(collaborations[ctx.docId]!!.doc)\n                    }\n                }\n                ws.onClose { ctx ->\n                    collaborations[ctx.docId]!!.clients.remove(ctx)\n                }\n            }\n        }\n    }.start(7070)\n\n}\n\nval WsContext.docId: String get() = this.pathParam(\"doc-id\")\n```\n\n----------------------------------------\n\nTITLE: Setting Dependency Optimization\nDESCRIPTION: Configuration to control whether JavalinVue should optimize Vue component dependencies or include all found .vue files.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\noptimizeDependencies = true/false;\n```\n\nLANGUAGE: kotlin\nCODE:\n```\noptimizeDependencies = true/false\n```\n\n----------------------------------------\n\nTITLE: Adding jte Dependencies in Maven\nDESCRIPTION: Maven dependencies required for jte template engine integration with Javalin\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>gg.jte</groupId>\n    <artifactId>jte</artifactId>\n    <version>2.2.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency with SBT\nDESCRIPTION: SBT (Scala Build Tool) dependency declaration for including Javalin in a project.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/mavenDep.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nlibraryDependencies += \"io.javalin\" % \"javalin\" % \"{{javalinVersion | default: site.javalinversion }}\"\n```\n\n----------------------------------------\n\nTITLE: Handling Client Input in Javalin\nDESCRIPTION: Shows methods for extracting and validating client data in Javalin, including form parameters, query parameters, uploaded files, and JSON deserialization. It also demonstrates input validation techniques.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2022-10-01-javalin-5.0.0-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nctx.body();                     // get the request body as a string (caches the body)\nctx.formParam(\"name\");          // get a form parameter\nctx.queryParam(\"name\");         // get a query parameter\nctx.uploadedFile(\"name\");       // get an uploaded file\n\n// JSON methods\nctx.bodyAsClass(Clazz);         // deserialize ctx.body() to class\nctx.bodyStreamAsClass(Clazz);   // consume input stream from request body and deserialize to class\n\n// validation\nvar age = ctx.queryParamAsClass(\"age\", Integer.class)  // wraps parameter in Validator\n    .check(age -> age > 18, \"NOT_OLD_ENOUGH\") // adds check with error message\n    .get(); // gets the validated value, or throws ValidationException\nvar bananaBox = ctx.bodyValidator(BananaBox.class)\n    .check(box -> box.weight < 5, ValidationError(\"WEIGHT_TOO_HIGH\", Map.of(\"MAX_WEIGHT\", 5)))\n    .check(box -> box.bananas.length > 20, ValidationError(\"NOT_ENOUGH_BANANAS\", Map.of(\"MIN_BANANAS\", 20)))\n    .getOrDefault(defaultBananaBox) // uses default if body is null, runs validation rules otherwise\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.body()                      // get the request body as a string (caches the body)\nctx.formParam(\"name\")           // get a form parameter\nctx.queryParam(\"name\")          // get a query parameter\nctx.uploadedFile(\"name\")        // get an uploaded file\n\n// JSON methods\nctx.bodyAsClass<Clazz>()        // deserialize ctx.body() to class\nctx.bodyStreamAsClass<Clazz>()  // consume input stream from request body and deserialize to class\n\n// validation\nval age = ctx.queryParamAsClass<Int>(\"age\")  // wraps parameter in Validator\n    .check({ it > 18 }, \"NOT_OLD_ENOUGH\") // adds check with error message\n    .get() // gets the validated value, or throws ValidationException\nval bananaBox = ctx.bodyValidator<BananaBox>()\n    .check({ it.weight < 5 }, ValidationError(\"WEIGHT_TOO_HIGH\", mapOf(\"MAX_WEIGHT\" to 5)))\n    .check({ it.bananas.length > 20 }, ValidationError(\"NOT_ENOUGH_BANANAS\", mapOf(\"MIN_BANANAS\" to 20)))\n    .getOrDefault(defaultBananaBox) // uses default if body is null, runs validation rules otherwise\n```\n\n----------------------------------------\n\nTITLE: Functional Testing Javalin Application in Java\nDESCRIPTION: This code snippet demonstrates how to write functional tests for a Javalin application in Java using JavalinTest. It tests the GET endpoint for fetching users.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\nimport io.javalin.plugin.json.JavalinJackson;\nimport io.javalin.testtools.JavalinTest;\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class FunctionalTest {\n\n    Javalin app = new JavalinTestingExampleApp(\"someDependency\").javalinApp(); // inject any dependencies you might have\n    private final String usersJson = new JavalinJackson().toJsonString(UserController.users);\n\n    @Test\n    public void GET_to_fetch_users_returns_list_of_users() {\n        JavalinTest.test(app, (server, client) -> {\n            assertThat(client.get(\"/users\").code()).isEqualTo(200);\n            assertThat(client.get(\"/users\").body().string()).isEqualTo(usersJson);\n        });\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Classloader for Javalin in Minecraft Plugins\nDESCRIPTION: This Java code snippet demonstrates how to use a custom classloader to resolve dependency missing errors when using Javalin in a Minecraft plugin. It temporarily sets the thread's context classloader to the plugin's classloader, initializes Javalin, and then restores the original classloader.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_74\n\nLANGUAGE: java\nCODE:\n```\nClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nThread.currentThread().setContextClassLoader(RemoteAPI.class.getClassLoader());\nJavalin app = Javalin.create().start(PORT);\nThread.currentThread().setContextClassLoader(classLoader);\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for All Origins in Javalin\nDESCRIPTION: Shows how to configure CORS (Cross-Origin Resource Sharing) to allow all origins in Javalin using wildcard or a specific method.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-18-javalin-1.1.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Added `*` as possible origin so you can do `enableCorsForOrigin(\"*\")`\n* Added `enableCorsForAllOrigins()` which just calls the above ^\n```\n\n----------------------------------------\n\nTITLE: Configuring API Subproject build.gradle\nDESCRIPTION: Gradle build file configuration for the api subproject, applying the application plugin and setting the main class.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'application'\n}\n\napplication {\n    // Don't worry, we're about to create this class in a sec :-)\n    mainClass = \"org.example.api.MyAPI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MockK Dependency for Kotlin Mocking\nDESCRIPTION: This snippet shows how to add the MockK dependency to a Maven project for mocking in Kotlin unit tests.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.mockk</groupId>\n    <artifactId>mockk</artifactId>\n    <version>1.12.5</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Tutorials using Liquid\nDESCRIPTION: This snippet uses Liquid templating to filter and sort tutorial posts. It separates official tutorials from community tutorials and sorts them by date in reverse order.\nSOURCE: https://github.com/javalin/website/blob/master/pages/tutorials.md#2025-04-08_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign tutorials = site.posts | where: \"layout\" , \"tutorial\" | sort: 'date' | reverse %}\n{% assign communityTuts = tutorials | where: \"official\", false %}\n{% assign officialTuts = tutorials | where: \"official\", true %}\n```\n\n----------------------------------------\n\nTITLE: Template with Parameters\nDESCRIPTION: jte template demonstrating parameter usage and HTML structure\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n@param app.HelloPage page\n\n<html lang=\"en\">\n<body>\n    <p>Hello visitor!</p>\n    <p>The <b>user of the day</b> is ${page.userName} (karma: ${page.userKarma})!</p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Repositories for Javalin Project\nDESCRIPTION: Gradle configuration to add JCenter repository alongside Maven Central for resolving dependencies.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n    mavenCentral()\n    jcenter()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Path Parameter Syntax in Java\nDESCRIPTION: Demonstrates the changes in path parameter syntax from Javalin 3 to Javalin 4, including new capabilities for handling multiple path parameters and slash-inclusive parameters.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-3-4.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nget(\"/:param\", ...) // old\nget(\"/{param}\", ...) // new\n\nget(\"/:param-suffix\", ...) // invalid\nget(\"/{param}-suffix\", ...) // new\n\nget(\"/files/:filename.:extension\", ...) // invalid\nget(\"/files/{filename}.{extension}\", ...) // new\n\nget(\"/root/:subpaths/leaf\") // old (will only match /root/1/leaf)\nget(\"/root/<subpaths>/leaf\") // new (will match /root/1/2/3/leaf)\n```\n\n----------------------------------------\n\nTITLE: Relocating Jetty Dependencies in Gradle for Javalin Minecraft Plugin\nDESCRIPTION: This Gradle configuration relocates the Jetty dependencies to avoid conflicts with other plugins. It uses the Shadow plugin to relocate the 'org.eclipse.jetty' package to 'shadow.org.eclipse.jetty'.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_73\n\nLANGUAGE: groovy\nCODE:\n```\nshadowJar {\n    relocate 'org.eclipse.jetty', 'shadow.org.eclipse.jetty'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Gradle Build\nDESCRIPTION: Gradle build configuration for API module with Javalin and other dependencies\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'application'\n}\n\ndependencies {\n    implementation project(\":models\")     // We need this dependency for serializing persons to JSON\n    implementation project(\":services\")   // We'll make use of the InMemoryPersonReader soon\n    \n    implementation group: 'io.javalin', name: 'javalin', version: '4.6.4'                             // Pulling in Javalin\n    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'   // For JSON serialization of persons \n    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.36'                        // To see some Javalin logging\n}\n\napplication {\n    mainClass = \"org.example.api.MyAPI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compilation Error Message for Visibility Issue\nDESCRIPTION: Error message shown when trying to access a package that is no longer exported by the services module. This demonstrates proper module encapsulation in JPMS.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nerror: package org.example.services.inmemory is not visible\nimport org.example.services.inmemory.InMemoryPersonReader;\n                           ^\n  (package org.example.services.inmemory is declared in module org.example.services, which does not export it)\n1 error\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin SSL Plugin Dependency with Ivy\nDESCRIPTION: Ivy dependency configuration for adding the Javalin SSL plugin to a project.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-11-17-javalin-ssl-tutorial.md#2025-04-08_snippet_8\n\nLANGUAGE: markup\nCODE:\n```\n<dependency org=\"io.javalin.community.ssl\" name=\"ssl-plugin\" rev=\"{{site.javalinversion}}\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Structure\nDESCRIPTION: Structured markdown document outlining the changes and improvements in Javalin 5.6.0, including front matter metadata and categorized changes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-6.0/2023-06-10-javalin-5.6.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: news\nhidewhatsjavalin: false\ncategory: news\ndate: 2023-06-10\nversion: 5.6.0\ntitle: Javalin 5.6.0 is now available!\nsummary: Support for Java 9 modules, improvements to Jetty, static files, compression and routing!\n---\n\n## Javalin 5.6.0 has been released!\nJavalin now supports Java 9 modules! We've also added various improvements,\nincluding the ability to configure HttpConfiguration for Jetty, and a method to clear\ncache of pre-compressed static files.\n\n## Added\n- [jetty] Add ability to configure HttpConfiguration [#1910]\n- [static-files] Add method to clear cache of pre-compressed files [#1903]\n- [meta] Support Java 9 modules\n- [websocket] Add missing headerAsClass to WsContext [#1878]\n- [corsplugin] Add maxAge parameter to config [#1880]\n- [content-types] Support AVIF [#1879]\n- [routing] Add case insensitive matching [#1892]\n\n## Fixed\n- [javalinvue] Fix filesystem scanning issue [#1905]\n- [gson] Fix JavalinGson#toJsonStream [#1885]\n\n## Improved\n- [compression] Add brotli4j and make it default in javalin-bundle [#1904]\n- [compression] Introduce Compressor interface [#1897]\n- [websocket] Add method level docs to WsContext [#1877]\n\n## Test Improvement\n- [tests] Improve tests using selenium/webdriver [#1886]\n- [tests] Improve custom jetty filter test\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Task for Fat JAR Creation\nDESCRIPTION: Gradle task definition to build a fat JAR that includes all dependencies, making the application self-contained and executable on a Raspberry Pi.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ntask fatJar(type: Jar) {\n    manifest {\n        attributes 'Main-Class': 'com.org.example.MainKt' // Make sure this includes Kt at the end of your main class\n    }\n    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }\n    with jar\n}\n```\n\n----------------------------------------\n\nTITLE: Custom AsyncCallback Example for Javalin's Future Handling\nDESCRIPTION: Example of providing a custom callback to handle the result of a CompletableFuture in Javalin, allowing for customized response handling with status codes.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-4-6-X.md#2025-04-08_snippet_65\n\nLANGUAGE: java\nCODE:\n```\nctx.future(myFuture, result -> {\n    if (result != null) {\n        ctx.status(200)\n        ctx.json(result)\n    } else {\n        ctx.status(404)\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Card Template for RouteOverview\nDESCRIPTION: Liquid template that renders a plugin card for the RouteOverview plugin, which provides an HTML/JSON overview of all registered routes in a Javalin application for debugging purposes. Includes author details and documentation link.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{% include plugins/pluginCard.html\n    title=\"RouteOverview\"\n    description=\"\n        The route overview provides you with a HTML and/or JSON overview of all the routes\n        registered on your Javalin application. Perfect for debugging!\n    \"\n    bundled=\"true\"\n    author=\"tipsy\"\n    docsUrl=\"/plugins/routeoverview\"\n    ratingIssueNr=\"135\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple HTML Interface for the Collaborative Editor\nDESCRIPTION: Basic HTML markup for the collaborative text editor interface. Includes a heading to instruct users on collaboration and a textarea input field where users can type and see collaborative changes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-04-22-javalin-realtime-collaboration-example.md#2025-04-08_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n<body>\n    <h1>Open the URL in another tab to start collaborating</h1>\n    <textarea placeholder=\"Type something ...\"></textarea>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Dependencies in plugin.yml for Spigot/Paper 1.17+\nDESCRIPTION: YAML configuration for plugin.yml to specify libraries that should be loaded by Spigot's dependency manager. This approach only works for Spigot/Paper version 1.17 and higher.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-04-06-javalin-and-minecraft-servers.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlibraries:\n  - \"io.javalin:javalin:{{site.javalinversion}}\"\n  - \"org.slf4j:slf4j-simple:{{site.slf4jversion}}\"\n  - \"com.fasterxml.jackson.core:jackson-databind:2.13.2\"\n```\n\n----------------------------------------\n\nTITLE: Relocating Jetty Dependencies in Minecraft Plugins with Gradle\nDESCRIPTION: Gradle configuration for relocating Jetty dependencies when using Javalin in Minecraft plugins. This helps prevent conflicts with other plugin dependencies in a Minecraft server environment.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_60\n\nLANGUAGE: groovy\nCODE:\n```\nshadowJar {\n    relocate 'org.eclipse.jetty', 'shadow.org.eclipse.jetty'\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend CORS Credential Configuration with Fetch API\nDESCRIPTION: Example of configuring CORS credentials in frontend JavaScript using the Fetch API for making authenticated requests.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/cors.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {};\nfetch(\"https://example.com\", {\n  method: \"POST\",\n  credentials: \"include\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(data)\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Paths to Vue Components in Javalin (Java)\nDESCRIPTION: Demonstrates how to map URL paths to Vue components using the VueComponent class in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_67\n\nLANGUAGE: java\nCODE:\n```\nget(\"/messages\", VueComponent(\"inbox-view\"))\nget(\"/messages/:user\", VueComponent(\"thread-view\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency (Maven)\nDESCRIPTION: Shows how to add the Javalin dependency to a Maven project. The version number is dynamically set using a variable.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n{% assign javalinVersion = site.javalinThreeVersion %}\n{% include macros/mavenDep.md %}\n```\n\n----------------------------------------\n\nTITLE: Nested Path Declaration in Sparkjava\nDESCRIPTION: Example of Sparkjava's approach to declaring routes in nested paths using static methods. Path information is pushed onto a stack and popped after completion of the lambda.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-07-17-static-methods-within-lambdas.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npath(\"/api\", () -> {\n    get(\"/users\", UserController::getAll);\n    post(\"/users\", UserController::create);\n    path(\"/users\", () -> {\n        get(\"/:user-id\", UserController::getOne);\n        patch(\"/:user-id\", UserController::update);\n        delete(\"/:user-id\", UserController::delete);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Kotlin Data Class Features\nDESCRIPTION: Example demonstrating data class functionality including object creation, copying with changed properties, and destructuring declarations. Shows how to create a new user object by copying from an existing one with only specific fields changed.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-kotlin-example.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = User(name = \"Alice\", email = \"alice@alice.kt\", id = 0)\nval aliceNewEmail = alice.copy(email = \"alice@bob.kt\") // new object with only email changed\n\nval (name, email) = aliceNewEmail // choose the fields you want\nprintln(\"$name's new email is $email\") // prints \"Alice's new email is alice@bob.kt\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Jetty Handlers in Javalin\nDESCRIPTION: Shows how to configure embedded Jetty server with a custom handler chain using StatisticsHandler. Demonstrates setup in both Java and Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nStatisticsHandler statisticsHandler = new StatisticsHandler();\n\nJavalin.create()\n    .embeddedServer(new EmbeddedJettyFactory(() -> {\n        Server server = new Server();\n        server.setHandler(statisticsHandler);\n        return server;\n    }))\n    .start();\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval statisticsHandler = StatisticsHandler()\n\nJavalin.create().apply {\n    embeddedServer(EmbeddedJettyFactory({\n        Server(queuedThreadPool).apply {\n            handler = statisticsHandler\n        }\n    }))\n}.start();\n```\n\n----------------------------------------\n\nTITLE: Styling Bar Chart for Survey Results in HTML/CSS\nDESCRIPTION: This code snippet defines the styling for a bar chart used to display survey results. It creates a responsive, visually appealing chart with percentage bars and labels.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2018-09-07-javalin-user-survey-2018.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n    .bar-chart {\n        margin-top: 20px;\n        border: 1px solid #ddd;\n        border-radius: 5px;\n        background: #fff;\n        padding: 10px 60px 10px 10px;\n        font-family: arial, sans-serif;\n        position: relative;\n    }\n\n    .bar-chart > div {\n        height: 28px;\n        line-height: 28px;\n        padding: 0 10px;\n        background: #c7e6f5;\n        font-size: 15px;\n        border-radius: 3px;\n        white-space: nowrap;\n    }\n\n    .bar-chart > div + div {\n        margin-top: 10px;\n    }\n\n    .bar-chart > div::before {\n        content: \" \";\n        position: absolute;\n        width: calc(100% - 70px); /* padding x 60 x 10 */\n        background: rgba(0, 0, 0, 0.08);\n        height: 28px;\n        border-radius: 3px;\n        left: 10px;\n    }\n\n    .bar-chart > div::after {\n        content: attr(data-value);\n        position: absolute;\n        right: 15px;\n        color: #008cbb;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding Javalin Dependency (Maven)\nDESCRIPTION: Shows how to add the Javalin dependency to a Maven project. The version number is dynamically set using a variable.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n{% assign javalinVersion = site.javalinThreeVersion %}\n{% include macros/mavenDep.md %}\n```\n\n----------------------------------------\n\nTITLE: Configuring JTE Maven Plugin for Precompilation\nDESCRIPTION: Maven plugin configuration for precompiling JTE templates. It specifies the source directory for templates, target directory for compiled classes, and sets the content type to HTML.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>gg.jte</groupId>\n    <artifactId>jte-maven-plugin</artifactId>\n    <version>1.0.0</version>\n    <configuration>\n        <sourceDirectory>${basedir}/src/main/jte</sourceDirectory>\n        <targetDirectory>${basedir}/jte-classes</targetDirectory>\n        <contentType>Html</contentType>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>process-classes</phase>\n            <goals>\n                <goal>precompile</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multipart Requests in Javalin for Kotlin\nDESCRIPTION: Shows how to set up multipart request handling in Javalin using Kotlin, including configuring cache directory, maximum file sizes, and total request size limits.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n  config.jetty.multipartConfig.cacheDirectory(\"c:/temp\") //where to write files that exceed the in memory limit\n  config.jetty.multipartConfig.maxFileSize(100, SizeUnit.MB) //the maximum individual file size allowed\n  config.jetty.multipartConfig.maxInMemoryFileSize(10, SizeUnit.MB) //the maximum file size to handle in memory\n  config.jetty.multipartConfig.maxTotalRequestSize(1, SizeUnit.GB) //the maximum size of the entire multipart request\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AccessManager in Javalin 5\nDESCRIPTION: Example of using the AccessManager interface in Javalin 5 to handle route access control.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconfig.accessManager((handler, ctx, routeRoles) -> {\n    var userRole = getUserRole(ctx); // some user defined function that returns a user role\n    if (routeRoles.contains(userRole)) { // routeRoles are provided through the AccessManager interface\n        handler.handle(ctx); // if handler.handle(ctx) is not called, the endpoint handler is not called\n    }\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nconfig.accessManager { handler, ctx, routeRoles ->\n    val userRole = getUserRole(ctx) // some user defined function that returns a user role\n    if (routeRoles.contains(userRole)) { // routeRoles are provided through the AccessManager interface\n        handler.handle(ctx) // if handler.handle(ctx) is not called, the endpoint handler is not called\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SLF4J Simple Logger Dependency\nDESCRIPTION: This snippet shows how to add the SLF4J Simple Logger dependency to a project's pom.xml file. This is useful for adding basic logging capabilities to a Javalin application.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_45\n\nLANGUAGE: markup\nCODE:\n```\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-simple</artifactId>\n    <version>{{site.slf4jversion}}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Javalin WebSocket Chat Server in Java\nDESCRIPTION: Java implementation of the Javalin WebSocket chat server. It sets up WebSocket handlers for connect, message, and close events, manages user sessions, and broadcasts messages to all connected clients.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-09-22-javalin-websocket-example.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\nimport io.javalin.http.staticfiles.Location;\nimport io.javalin.websocket.WsContext;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport static j2html.TagCreator.article;\nimport static j2html.TagCreator.attrs;\nimport static j2html.TagCreator.b;\nimport static j2html.TagCreator.p;\nimport static j2html.TagCreator.span;\n\npublic class JavalinWebsocketExampleApp {\n\n    private static final Map<WsContext, String> userUsernameMap = new ConcurrentHashMap<>();\n    private static int nextUserNumber = 1; // Assign to username for next connecting user\n\n    public static void main(String[] args) {\n        Javalin app = Javalin.create(config -> {\n            config.staticFiles.add(\"/public\", Location.CLASSPATH);\n            config.router.mount(router -> {\n                router.ws(\"/chat\", ws -> {\n                    ws.onConnect(ctx -> {\n                        String username = \"User\" + nextUserNumber++;\n                        userUsernameMap.put(ctx, username);\n                        broadcastMessage(\"Server\", (username + \" joined the chat\"));\n                    });\n                    ws.onClose(ctx -> {\n                        String username = userUsernameMap.get(ctx);\n                        userUsernameMap.remove(ctx);\n                        broadcastMessage(\"Server\", (username + \" left the chat\"));\n                    });\n                    ws.onMessage(ctx -> {\n                        broadcastMessage(userUsernameMap.get(ctx), ctx.message());\n                    });\n                });\n            });\n        }).start(7070);\n    }\n\n    // Sends a message from one user to all users, along with a list of current usernames\n    private static void broadcastMessage(String sender, String message) {\n        userUsernameMap.keySet().stream().filter(ctx -> ctx.session.isOpen()).forEach(session -> {\n            session.send(\n                Map.of(\n                    \"userMessage\", createHtmlMessageFromSender(sender, message),\n                    \"userlist\", userUsernameMap.values()\n                )\n            );\n        });\n    }\n\n    // Builds a HTML element with a sender-name, a message, and a timestamp\n    private static String createHtmlMessageFromSender(String sender, String message) {\n        return article(\n            b(sender + \" says:\"),\n            span(attrs(\".timestamp\"), new SimpleDateFormat(\"HH:mm:ss\").format(new Date())),\n            p(message)\n        ).render();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Role Distribution Chart with HTML/CSS\nDESCRIPTION: HTML code that implements a responsive bar chart visualization showing the distribution of roles among Javalin users in 2020 compared to 2018. The chart uses CSS styling for bar widths based on percentage values.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2020-03-20-javalin-user-survey-2020.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"chart-flex\">\n    <div>\n        2020\n        <div class=\"bar-chart\">\n            <div style=\"width:64%\" data-value=\"64%\">Software engineer / developer</div>\n            <div style=\"width:12%\" data-value=\"12%\">Tech lead / manager</div>\n            <div style=\"width:7%\" data-value=\"7%\">Hobbyist programmer</div>\n            <div style=\"width:7%\" data-value=\"7%\">Teacher</div>\n            <div style=\"width:10%\" data-value=\"10%\">Student</div>\n        </div>\n    </div>\n    <div>\n        2018\n        <div class=\"bar-chart\">\n            <div style=\"width:68%\" data-value=\"68%\">Software engineer / developer</div>\n            <div style=\"width:16%\" data-value=\"16%\">Tech lead / manager</div>\n            <div style=\"width:7%\" data-value=\"7%\">Hobbyist programmer</div>\n            <div style=\"width:0%;background:transparent;\" data-value=\"0%\">Teacher</div>\n            <div style=\"width:10%\" data-value=\"10%\">Student</div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Role-Based Access Control in Java\nDESCRIPTION: Illustrates the changes in specifying roles for routes in Javalin 4, moving from Set<Role> to varargs RouteRole.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-3-4.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nget(\"/path\", controller::method, roles(MyRole.ROLENAME)) // old, using util-method\nget(\"/path\", controller::method, new HashSet<>(Arrays.asList(MyRole.ROLENAME));) // old, no util method\nget(\"/path\", controller::method, Role.ROLENAME) // new\n```\n\n----------------------------------------\n\nTITLE: Styling a Video Chat Application with State-Based CSS\nDESCRIPTION: CSS implementation for the video chat interface. It uses CSS grid for layout and leverages data-state attributes on the body element to conditionally show/hide UI elements based on the connection state. The styling handles different states like NOT_CONNECTED, CONNECTING, CONNECTED, and DISCONNECTED.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2024-01-13-omeglin/2023-12-30-building-omegle-in-javalin.md#2025-04-08_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n{% include_relative snippets/main/resources/public/styles.css %}\n```\n\n----------------------------------------\n\nTITLE: Implementing the WebSocket Client in JavaScript with Caret Position Preservation\nDESCRIPTION: JavaScript client implementation for the realtime collaboration application. Handles WebSocket connections, document ID generation, reconnection on disconnection, and preserves the user's cursor position when updates are received from other clients.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-04-22-javalin-realtime-collaboration-example.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = setupWebSocket;\nwindow.onhashchange = setupWebSocket;\n\nif (!window.location.hash) { // document-id not present in url\n    const newDocumentId = Date.now().toString(36); // this should be more random\n    window.history.pushState(null, null, \"#\" + newDocumentId);\n}\n\nfunction setupWebSocket() {\n    const textArea = document.querySelector(\"textarea\");\n    const ws = new WebSocket(`ws://localhost:7070/docs/${window.location.hash.substr(1)}`);\n    textArea.onkeyup = () => ws.send(textArea.value);\n    ws.onmessage = msg => { // place the caret in the correct position\n        const offset = msg.data.length - textArea.value.length;\n        const selection = {start: textArea.selectionStart, end: textArea.selectionEnd};\n        const startsSame = msg.data.startsWith(textArea.value.substring(0, selection.end));\n        const endsSame = msg.data.endsWith(textArea.value.substring(selection.start));\n        textArea.value = msg.data;\n        if (startsSame && !endsSame) {\n            textArea.setSelectionRange(selection.start, selection.end);\n        } else if (!startsSame && endsSame) {\n            textArea.setSelectionRange(selection.start + offset, selection.end + offset);\n        } else { // this is what google docs does...\n            textArea.setSelectionRange(selection.start, selection.end + offset);\n        }\n    };\n    ws.onclose = setupWebSocket; // should reconnect if connection is closed\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of the routes() Method in Javalin\nDESCRIPTION: The implementation of Javalin's routes() method that sets and clears a static reference to the current Javalin instance, enabling the static-but-not-static API pattern.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-07-17-static-methods-within-lambdas.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic Javalin routes(@NotNull EndpointGroup endpointGroup) {\n    ApiBuilder.setStaticJavalin(this);\n    endpointGroup.addEndpoints();\n    ApiBuilder.clearStaticJavalin();\n    return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Log Printing in JavalinTest for Java\nDESCRIPTION: JavalinTest has been updated to print logs on assertion errors, improving debugging capabilities in test environments.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-5.0/2022-06-16-javalin-4.6.X-released.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nJavalinTest.printLogs()\n```\n\n----------------------------------------\n\nTITLE: Using CrudHandler in Javalin Routes (Java and Kotlin)\nDESCRIPTION: Demonstrates how to use the CrudHandler interface within a routes() call to implement common CRUD operations.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\napp.routes(() -> {\n    crud(\"users/:user-id\", new UserController());\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    crud(\"users/:user-id\", UserController())\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Card Template for Micrometer Plugin\nDESCRIPTION: Liquid template that renders a plugin card for the Micrometer plugin, which enables integration with the Micrometer metrics collection library for Javalin applications. Includes author details and documentation link.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{% include plugins/pluginCard.html\n    title=\"Micrometer Plugin\"\n    description=\"\n        The Micrometer plugin provides a simple way to add metrics to your Javalin application.\n        It uses the <a href='https://micrometer.io/'>Micrometer</a> library to collect metrics.\n    \"\n    bundled=\"false\"\n    author=\"jkschneider\"\n    docsUrl=\"/plugins/micrometer\"\n    ratingIssueNr=\"137\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Context Class in Kotlin\nDESCRIPTION: Example of creating a context class for GraphQL operations that can be passed to GraphQL methods.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/graphql.md#2025-04-08_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ContextExample {\n    val globalEnvironment = \"globalEnvironment\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Models Module Descriptor\nDESCRIPTION: JPMS module descriptor for models module exporting the models package\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nmodule org.example.models {\n    // We're exporting the only package we have in this subproject\n    exports org.example.models;\n}\n```\n\n----------------------------------------\n\nTITLE: Exploring the ContextPlugin Class Interface in Kotlin\nDESCRIPTION: A specialized Plugin class for adding functionality to the Context class. It requires an additional generic type parameter EXTENSION and provides a method to create the extension.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/how-to.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nabstract class ContextPlugin<CONFIG, EXTENSION>(\n    userConfig: Consumer<CONFIG>? = null,\n    defaultConfig: CONFIG? = null\n) : Plugin<CONFIG>(userConfig, defaultConfig) {\n    /** Context extending plugins cannot be repeatable, as they are keyed by class */\n    final override fun repeatable(): Boolean = false\n    abstract fun createExtension(context: Context): EXTENSION\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Handlers in Javalin\nDESCRIPTION: Examples of before-handlers (middleware/filters) that run before requests. Shows path-specific and global before handlers.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.before(\"/some-path/*\", ctx -> {\n    // runs before all request to /some-path/*\n});\napp.before(ctx -> {\n    // calls before(\"/*\", handler)\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.before(\"/some-path/*\") { ctx ->\n    // runs before all request to /some-path/*\n}\napp.before { ctx ->\n    // calls before(\"/*\", handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gradle Dependencies for Javalin and Protobuf\nDESCRIPTION: This Gradle configuration specifies the necessary dependencies for the project, including Javalin for the web server, SLF4J for logging, Jackson for JSON handling, and Protobuf for data serialization.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-03-25-serving-protobuf-with-javalin.md#2025-04-08_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation 'org.slf4j:slf4j-simple:1.8.0-beta4'\n    implementation 'io.javalin:javalin:{{site.javalinversion}}'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2'\n    implementation 'com.google.protobuf:protobuf-java:3.19.6'\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Form Parameters in Javalin (Kotlin)\nDESCRIPTION: Demonstrates validation of form parameters in Javalin using Kotlin. It shows examples of validating different data types, applying checks, and using default values for form parameters.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\n// Form Parameters\nval color = ctx.formParam(\"color\");\nval exampleId = ctx.formParam<Int>(\"exampleId\").get();\nval size = ctx.formParam<Int>(\"size\").check(i -> i > 4).get();\nval qty = ctx.formParam<Int>(\"qty\", \"12\").get(); // may default to value 12\nval instant = ctx.queryParam<Instant>(\"ts\").get();\n```\n\n----------------------------------------\n\nTITLE: Plugin Card Template for OpenAPI Annotation Processor\nDESCRIPTION: Liquid template that renders a plugin card for the OpenAPI Annotation Processor, displaying its features, author information, documentation link, and rating information.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% include plugins/pluginCard.html\n    title=\"OpenAPI Annotation Processor\"\n    description=\"\n        This OpenAPI plugin replaces the old DSL + annotation setup that was\n        available before Javalin 5.\n        Features:\n        <ul>\n            <li>Reflection free, does not perform any extra operations at runtime</li>\n            <li>Uses @OpenApi to simplify migration from bundled OpenApi implementation</li>\n            <li>Provides better projection of OpenAPI specification</li>\n            <li>Schema validation through Swagger core module</li>\n        </ul>\n    \"\n    bundled=\"false\"\n    author=\"dzikoysk\"\n    docsUrl=\"https://github.com/javalin/javalin-openapi#readme\"\n    ratingIssueNr=\"133\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Creation Pattern\nDESCRIPTION: Example of creating a Vue component with template and registration code for both Vue 2 and Vue 3.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"my-component\">\n    <div>\n        <!-- Component code goes here -->\n    </div>\n</template>\n<script>\n    Vue.component(\"my-component\", {\n        template: \"#my-component\"\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Component for User Profile in HTML and JavaScript\nDESCRIPTION: This snippet creates a Vue component to display detailed information for a single user, including fetching data from the API.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template id=\"user-profile\">\n  <div>\n    <dl v-if=\"user\">\n      <dt>User ID</dt>\n      <dd>{{user.id}}</dd>\n      <dt>Name</dt>\n      <dd>{{user.name}}</dd>\n      <dt>Email</dt>\n      <dd>{{user.email}}</dd>\n      <dt>Birthday</dt>\n      <dd>{{user.userDetails.dateOfBirth}}</dd>\n      <dt>Salary</dt>\n      <dd>{{user.userDetails.salary}}</dd>\n    </ul>\n  </div>\n</template>\n<script>\n  app.component(\"user-profile\", {\n    template: \"#user-profile\",\n    data: () => ({\n      user: null,\n    }),\n    created() {\n      const userId = this.$javalin.pathParams[\"user-id\"];\n      fetch(`/api/users/${userId}`)\n        .then(res => res.json())\n        .then(res => this.user = res)\n        .catch(() => alert(\"Error while fetching user\"));\n    }\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Provider Method to InMemoryPersonReader in Java\nDESCRIPTION: Adds a static provider method to InMemoryPersonReader to work with ServiceLoader when using constructor injection.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_29\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.services.inmemory;\n\nimport org.example.models.Person;\nimport org.example.services.api.PersonFilter;\nimport org.example.services.api.PersonReader;\n\nimport java.util.List;\nimport java.util.ServiceLoader;\n\npublic class InMemoryPersonReader implements PersonReader {\n\n    private PersonFilter filter;\n\n    public InMemoryPersonReader(PersonFilter filter) {\n        this.filter = filter;\n    }\n\n    @Override\n    public List<Person> getAll() {\n        return List.of(\n            new Person(\"Vincent Vega\", 73),\n            new Person(\"Jules Winnfield\", 12)\n        ).stream().filter(this.filter::filter).toList();\n    }\n\n    public static PersonReader provider() {\n        return new InMemoryPersonReader(            \n            ServiceLoader.load(PersonFilter.class)  \n                .findFirst()\n                .get()                              \n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Javalin Application with Dynamic Port\nDESCRIPTION: Java implementation of a Javalin web application that dynamically uses the port assigned by Heroku environment.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-25-javalin-heroku-example.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.javalin.Javalin;\n\npublic class JavalinHerokuExampleApp {\n\n    public static void main(String[] args) {\n        Javalin.create()\n            .get(\"/\", ctx -> ctx.result(\"Hello Heroku\"))\n            .start(getHerokuAssignedPort());\n    }\n\n    private static int getHerokuAssignedPort() {\n        ProcessBuilder processBuilder = new ProcessBuilder();\n        if (processBuilder.environment().get(\"PORT\") != null) {\n            return Integer.parseInt(processBuilder.environment().get(\"PORT\"));\n        }\n        return 7070;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Layout Template Configuration\nDESCRIPTION: HTML layout template that initializes Vue.js application and includes component registration placeholders for Javalin integration.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <script src=\"/webjars/vue/3.2.37/dist/vue.global.prod.js\"></script>\n    <script>\n      const app = Vue.createApp({});\n    </script>\n    @componentRegistration\n  </head>\n  <body>\n  <main id=\"main-vue\" v-cloak>\n    @routeComponent\n  </main>\n  <script>\n    app.mount(\"#main-vue\");\n  </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Relocating Dependencies with Gradle Shadow Plugin\nDESCRIPTION: Gradle Shadow configuration to relocate dependencies to prevent conflicts with other plugins that might use the same libraries. This is recommended for publicly released plugins.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-04-06-javalin-and-minecraft-servers.md#2025-04-08_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nshadowJar {\n    relocate 'io.javalin:javalin:{{site.javalinversion}}', 'shadow.io.javalin'\n    relocate 'org.slf4j:slf4j-simple:{{site.slf4jversion}}', 'shadow.org.slf4j'\n    relocate 'com.fasterxml.jackson.core:jackson-databind:2.13.2', 'shadow.com.fasterxml.jackson.core'\n}\n```\n\n----------------------------------------\n\nTITLE: Including CSS for Plugin Cards in Javalin Plugin Store\nDESCRIPTION: Includes a CSS file that provides styling for the plugin cards displayed on the page. The style is embedded directly in the HTML using Liquid templating.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>{% include plugins/pluginCard.css %}</style>\n```\n\n----------------------------------------\n\nTITLE: Cache Control Configuration\nDESCRIPTION: Setting custom cache control headers for JavalinVue responses.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\ncacheControl = \"cache header string\";\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncacheControl = \"cache header string\"\n```\n\n----------------------------------------\n\nTITLE: Adding Mockito Dependency for Java Mocking\nDESCRIPTION: This snippet demonstrates how to add the Mockito dependency to a Maven project for mocking in Java unit tests.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-18-javalin-testing-example.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.mockito</groupId>\n    <artifactId>mockito-core</artifactId>\n    <version>4.6.1</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration for Javalin and Vue\nDESCRIPTION: Maven dependency configuration showing required libraries for Javalin web framework and Vue.js frontend framework.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin-bundle</artifactId>\n    <version>{{site.javalinversion}}</version>\n</dependency>\n<dependency>\n    <groupId>org.webjars.npm</groupId>\n    <artifactId>vue</artifactId>\n    <version>3.2.37</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Javalin Application\nDESCRIPTION: This Dockerfile sets up a container for running a Javalin application. It uses an Eclipse Temurin JDK 11 base image, copies the application JAR, exposes the application port, and specifies the command to run the application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2022-10-30-javalin-docker-example.md#2025-04-08_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM eclipse-temurin:11-alpine\nCOPY target/app.jar /app.jar\n# This is the port that your javalin application will listen on\nEXPOSE 7000 \nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocketServletFactory in Javalin using Kotlin\nDESCRIPTION: Demonstrates how to use the new app.wsFactoryConfig() method to configure WebSocket settings in Javalin. This includes setting the maximum text message size, idle timeout, and registering extensions or custom handlers.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2019-03-02-javalin-2.7.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsFactoryConfig { wsFactory ->\n    wsFactory.policy.maxTextMessageSize = 1234;\n    wsFactory.policy.idleTimeout = 1234;\n    wsFactory.extensionFactory.register(...)\n    wsFactory.register(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach Using Kotlin's with() Function\nDESCRIPTION: A Kotlin-specific approach that achieves similar readability using Kotlin's 'with' scoping function, showing how the language can provide built-in solutions to this design problem.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-07-17-static-methods-within-lambdas.md#2025-04-08_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval server = Javalin.create()\nwith(server) {\n    path(\"users\") {\n        get(UserController::getAll)\n            ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for GET Requests\nDESCRIPTION: HTML form for checking reservations that uses the GET method. The form submits the selected day as a query parameter to retrieve reservation information.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-07-28-javalin-html-forms-example.md#2025-04-08_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\n<h2>Check your reservation:</h2>\n<form method=\"get\" action=\"/check-reservation\">\n    Choose day\n    <select name=\"day\">\n        <option value=\"saturday\">Saturday</option>\n        <option value=\"sunday\">Sunday</option>\n    </select>\n    <br>\n    <button>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Java 10 Variable Type Inference\nDESCRIPTION: Example showing Java 10's var keyword for type inference compared to traditional Java variable declaration.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvar amazingFramework = \"Javalin\"; // java10\n// vs\nString amazingFramework = \"Javalin\"; // not java10\n```\n\n----------------------------------------\n\nTITLE: Extensive Request Logging Output Example\nDESCRIPTION: Shows the enhanced LogLevel.EXTENSIVE output format that now includes matching endpoint-handlers. This example demonstrates the logging for a GET request to /matched/p1.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-10-22-javalin-0.5.4-released.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[qtp319977154-18] INFO io.javalin.core.JavalinServlet - JAVALIN EXTENSIVE REQUEST LOG (this clones the response, which is an expensive operation):\nRequest: GET [/matched/p1]\n    Matching endpoint-handlers: [BEFORE=*, GET=/matched/:param, AFTER=*]\n    Headers: {User-Agent=unirest-java/1.3.11, Connection=keep-alive, Host=localhost:7777, Accept-Encoding=gzip}\n    Cookies: {}\n    Body:\n    QueryString: null\n    QueryParams: {}\n    FormParams: {=[]}\nResponse: [200], execution took 1.65 ms\n    Headers: {Server=Javalin, Date=Sun, 22 Oct 2017 09:56:27 GMT, Content-Type=text/plain;charset=utf-8}\n    Body: (starts on next line)\n/matched/:param\n```\n\n----------------------------------------\n\nTITLE: Implementing InMemoryPersonReader\nDESCRIPTION: Provides an in-memory implementation of PersonReader interface with hardcoded person data\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.services.inmemory;\n\nimport org.example.models.Person;\nimport org.example.services.api.PersonReader;\n\nimport java.util.List;\n\npublic class InMemoryPersonReader implements PersonReader {\n    @Override\n    public List<Person> getAll() {\n        return List.of(\n            new Person(\"Vincent Vega\", 73),\n            new Person(\"Jules Winnfield\", 12)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Async API to CompletionStage in Javalin\nDESCRIPTION: Changed the async API to use CompletionStage instead of the previous implementation. This feature is now marked as experimental.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-11-javalin-1.0.1-released.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCompletionStage\n```\n\nLANGUAGE: java\nCODE:\n```\nasync\n```\n\n----------------------------------------\n\nTITLE: Handling ValidationException in Javalin\nDESCRIPTION: Demonstrates how to override the default ValidationException handler in Javalin to customize error responses.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\napp.exception(ValidationException.class, (e, ctx) -> {\n    // your code\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(ValidationException::class.java) { e, ctx ->\n    // your code\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ValidationException in Javalin\nDESCRIPTION: Demonstrates how to override the default ValidationException handler in Javalin to customize error responses.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\napp.exception(ValidationException.class, (e, ctx) -> {\n    // your code\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.exception(ValidationException::class.java) { e, ctx ->\n    // your code\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for JavalinMithril Project\nDESCRIPTION: Maven configuration for a JavalinMithril project, including core dependencies for Javalin, JavalinMithril plugin, Mithril.js webjar, and Jackson for JSON serialization.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin</artifactId>\n    <version>{{site.javalinThreeVersion}}</version>\n    <type>jar</type>\n</dependency>\n<dependency>\n    <groupId>io.github.javalin</groupId>\n    <artifactId>javalinmithril</artifactId>\n    <version>0.1.0</version>\n    <type>jar</type>\n</dependency>\n<dependency>\n    <groupId>org.webjars.npm</groupId>\n    <artifactId>mithril</artifactId>\n    <version>2.0.4</version>\n</dependency>\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>2.10.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining RESTful Routes with ApiBuilder in Kotlin\nDESCRIPTION: Example of using the improved ApiBuilder syntax in Kotlin to define RESTful routes for a user resource. The code showcases Kotlin's DSL-like approach to organizing routes hierarchically without path parameters in verb methods.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-07-07-javalin-0.3.4-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\napp.routes {\n    path(\"users\") {\n        get(userController::getAllUsers);\n        post(userController::createUser);\n        path(\":id\") {\n            get(userController::getUser);\n            patch(userController::updateUser);\n            delete(userController::deleteUser);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Configuration for Javalin\nDESCRIPTION: Configuration settings required to use Javalin in an Android project including SDK version, Java version and Gradle settings.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_59\n\nLANGUAGE: markup\nCODE:\n```\ndefaultconfig {\n  minSdkVersion 26\n  targetSdkVersion 28\n}\n```\n\nLANGUAGE: markup\nCODE:\n```\ncompileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n}\n```\n\nLANGUAGE: markup\nCODE:\n```\npackagingOptions {\n  exclude 'org/eclipse/jetty/http/encoding.properties'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalizationSupport in Kotlin\nDESCRIPTION: Kotlin version of the Localizer class implementing JTE's LocalizationSupport interface for improved XSS protection and content handling of localized strings.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\npackage app\n\nimport gg.jte.support.LocalizationSupport\nimport java.util.*\n\nclass Localizer2(locale: Locale) : LocalizationSupport {\n    private val bundle: ResourceBundle = ResourceBundle.getBundle(\"localization\", locale)\n\n    override fun lookup(key: String): String {\n        return bundle.getString(key)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing SERVER_STARTED Event Timing in Javalin\nDESCRIPTION: The SERVER_STARTED event is now fired after the started flag is set to true, correcting the event sequence.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-11-11-javalin-1.0.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSERVER_STARTED\n```\n\n----------------------------------------\n\nTITLE: Accessing GraphQL Context in Queries\nDESCRIPTION: Shows how to inject and access the GraphQL context in a query method using the @GraphQLContext annotation.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/graphql.md#2025-04-08_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryExample() : QueryGraphql {\n    fun context(@GraphQLContext context: ContextExample): ContextExample {\n        return context\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Session IDs in Javalin (Java)\nDESCRIPTION: This Java code illustrates how to change the session ID in a Javalin application. It uses the changeSessionId() method, which is useful for protecting against session fixation attacks, especially after user login.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2018-09-02-jetty-session-handling-java.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/change-id\", ctx -> {\n    // it could be wise to change the session id on login, to protect against session fixation attacks\n    ctx.req().changeSessionId();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TODO MVC Backend with Kotlin and Javalin\nDESCRIPTION: This Kotlin code sets up a Javalin server to handle TODO operations. It defines a Todo data class, initializes a sample todo list, and creates endpoints for getting and updating todos. The server also serves static files for the frontend.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-05-27-javalin-vuejs-example.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.http.staticfiles.Location\nimport io.javalin.http.bodyAsClass\n\ndata class Todo(val id: Long, val title: String, val completed: Boolean)\n\nfun main() {\n\n    var todos = arrayOf(Todo(123123123, \"My very first todo\", false))\n\n    val app = Javalin.create {\n        it.staticFiles.add(\"/public\", Location.CLASSPATH)\n        it.router.mount {\n            it.get(\"/todos\") { ctx ->\n                ctx.json(todos)\n            }\n            it.put(\"/todos\") { ctx ->\n                todos = ctx.bodyAsClass<Array<Todo>>()\n                ctx.status(204)\n            }\n        }\n    }.start(7070)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filters and Error Handlers\nDESCRIPTION: Shows how to implement before/after filters, exception handlers, and error handlers in Javalin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-08-19-javalin-2.0.0-released.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\napp.before(\"/some-path/*\", ctx -> { ... }); // runs before requests to /some-path/*\napp.before(ctx -> { ... }); // runs before all requests\napp.after(ctx -> { ... }); // runs after all requests\napp.exception(Exception.class, (e, ctx) -> { ... }); // runs if uncaught Exception\napp.error(404, ctx -> { ... }); // runs if status is 404 (after all other handlers)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\napp.before(\"/some-path/*\") { ctx ->  ... } // runs before requests to /some-path/*\napp.before { ctx -> ... } // runs before all requests\napp.after { ctx -> ... } // runs after all requests\napp.exception(Exception.class) { e, ctx -> ... } // runs if uncaught Exception\napp.error(404) { ctx -> ... } // runs if status is 404 (after all other handlers)\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Manager in Kotlin\nDESCRIPTION: Shows how to implement and use Javalin's AccessManager interface for per-endpoint authentication and authorization in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\n// Set the access-manager that Javalin should use\napp.accessManager { handler, ctx, permittedRoles ->\n    val userRole = getUserRole(ctx) // determine user role based on request\n    if (permittedRoles.contains(userRole)) {\n        handler.handle(ctx)\n    } else {\n        ctx.status(401).result(\"Unauthorized\")\n    }\n}\n\nfun getUserRole(ctx: Context) : Role {\n    // determine user role based on request\n    // typically done by inspecting headers\n}\n\ninternal enum class MyRole : Role {\n    ANYONE, ROLE_ONE, ROLE_TWO, ROLE_THREE\n}\n\napp.routes {\n    get(\"/un-secured\",   { ctx -> ctx.result(\"Hello\")},   roles(MyRole.ANYONE));\n    get(\"/secured\",      { ctx -> ctx.result(\"Hello\")},   roles(MyRole.ROLE_ONE));\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Server Operations in Javalin\nDESCRIPTION: The update changes server operations from asynchronous to synchronous, removing the await methods. Methods app.start() and app.stop() are now synchronous, replacing the previous app.awaitStart() and app.awaitStop() functionality.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-06-24-javalin-0.3.2-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.start()  // synchronous operation\napp.stop()   // synchronous operation\n```\n\n----------------------------------------\n\nTITLE: Testing the REST Endpoint\nDESCRIPTION: Command to test the REST endpoint using curl after the server has started.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-11-15-javalin-embedded-example.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8080/rest/\n```\n\n----------------------------------------\n\nTITLE: Defining PersonFilter Interface in Java\nDESCRIPTION: Creates a PersonFilter interface with a filter method that takes a Person object and returns a boolean.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_25\n\nLANGUAGE: java\nCODE:\n```\npackage org.example.services.api;\n\nimport org.example.models.Person;\n\npublic interface PersonFilter {\n    boolean filter(Person p);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Handling Comparison\nDESCRIPTION: Shows how both frameworks handle JSON responses, with Javalin offering a more straightforward approach compared to SparkJava's transformer requirement.\nSOURCE: https://github.com/javalin/website/blob/master/pages/comparison-to-spark.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\njavalin.get(\"/\", ctx -> ctx.json(object));\n// vs\nSpark.get(\"/\", (req, res) -> object, new JsonTransformer());\n```\n\n----------------------------------------\n\nTITLE: Package Import Updates for Javalin 5\nDESCRIPTION: Shows the changes in package imports required when migrating from Javalin 4 to Javalin 5. The core package has been removed, flattening the package structure, and some components have been relocated to different packages.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-4-5.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// core package\nimport io.javalin.core.compression -> import io.javalin.compression\nimport io.javalin.core.config -> import io.javalin.config\nimport io.javalin.core.event -> import io.javalin.event\nimport io.javalin.core.security -> import io.javalin.security\nimport io.javalin.core.util -> import io.javalin.util\nimport io.javalin.core.util.Header -> import io.javalin.http.Header\n\n// plugin package\nimport io.javalin.plugin.rendering.vue -> import io.javalin.vue\nimport io.javalin.plugin.json -> import io.javalin.json\n```\n\n----------------------------------------\n\nTITLE: Kotlin Implementation of Javalin's Route API\nDESCRIPTION: The Kotlin implementation of Javalin's route API, showing how the language's features (like trailing lambdas) result in clean, readable syntax without the need for special API design patterns.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-07-17-static-methods-within-lambdas.md#2025-04-08_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.enableCorsForAllOrigins()\n}.routes {\n    path(\"users\") {\n        get(UserController::getAll)\n        post(UserController::create)\n        path(\":user-id\") {\n            get(UserController::getOne)\n            patch(UserController::update)\n            delete(UserController::delete)\n        }\n    }\n}.start(port)\n```\n\n----------------------------------------\n\nTITLE: Using matchedPath() Function in Java\nDESCRIPTION: Shows how to use the new matchedPath() function that returns the route pattern that matched the current request, rather than the actual request path.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-10-22-javalin-0.5.4-released.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/matched/:param\", ...); // ctx.matchedPath() = \"/matched/:param\"\n```\n\n----------------------------------------\n\nTITLE: Basic Route Handling in SparkJava\nDESCRIPTION: Shows basic GET route handling and after-filter implementation in SparkJava using separate Request and Response objects. Demonstrates the different approach to setting response content.\nSOURCE: https://github.com/javalin/website/blob/master/pages/comparison-to-spark.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSpark.get(\"/path\", (req, res) -> \"Hello, World!\");\nSpark.after(\"/path\", (req, res) -> res.body(\"Actually, nevermind...\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Complete REST API with Javalin Routes\nDESCRIPTION: Full implementation of a Javalin application with REST endpoints for getting, adding, and deleting string data using a StringDao for data management.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    val stringDao = StringDao()\n\n    val ipAddress = \"0.0.0.0\" // change this to your Raspberry Pi's IP address\n    val app = Javalin.create().apply {\n        exception(Exception::class.java) { e, _ -> e.printStackTrace() }\n    }.start(ipAddress, 8080)\n\n    app.routes {\n        get(\"/strings\") { context ->\n            context.json(data.strings)\n        }\n\n        post(\"/strings\") { context ->\n            val stringData = context.body<StringData>()\n            stringDao.addStringData(stringData)\n            context.status(201)\n        }\n\n        delete(\"/strings/:stringId\") { context ->\n            stringDao.removeStringData(context.pathParam(\"stringId\").toLongOrNull() ?: -1).let {\n                if (it)\n                    context.status(204)\n                else\n                    context.status(400)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Subdomain Wildcard CORS in Javalin\nDESCRIPTION: Configuration to allow any subdomain of a specific domain using wildcard notation (*.example.com).\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/cors.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.bundledPlugins.enableCors(cors -> {\n        cors.addRule(it -> {\n            it.allowHost(\"*.example.com\");\n        });\n    });\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nJavalin.create { config ->\n    config.bundledPlugins.enableCors { cors ->\n        cors.addRule {\n            it.allowHost(\"*.example.com\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CookieStore in Kotlin for Cross-Server Communication\nDESCRIPTION: Kotlin implementation of CookieStore for sharing data between requests across different servers. Shows how to use Kotlin's type inference with the cookieStore API.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nserverOneApp.post(\"/cookie-storer\") { ctx ->\n    ctx.cookieStore(\"string\", \"Hello world!\")\n    ctx.cookieStore(\"i\", 42)\n    ctx.cookieStore(\"list\", listOf(\"One\", \"Two\", \"Three\"))\n}\nserverTwoApp.get(\"/cookie-reader\") { ctx -> // runs on a different server than serverOneApp\n    val string = ctx.cookieStore<String>(\"string\")\n    val i = ctx.cookieStore<Int>(\"i\")\n    val list = ctx.cookieStore<List<String>>(\"list\")\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Static Approach with Instance References\nDESCRIPTION: A potential non-static approach to Javalin's API where methods are called on the server instance. This introduces verbosity with repeated server references.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-07-17-static-methods-within-lambdas.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJavalin server = Javalin.create();\nserver.path(\"/api\", () -> {\n    server.get(\"/users\", UserController::getAll);\n    server.post(\"/users\", UserController::create);\n    server.path(\"/users\", () -> {\n        server.get(\"/:user-id\", UserController::getOne);\n        server.patch(\"/:user-id\", UserController::update);\n        server.delete(\"/:user-id\", UserController::delete);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Javalin WebSocket Project\nDESCRIPTION: XML configuration for Maven dependencies required for the Javalin WebSocket chat application. It includes Javalin and J2HTML libraries.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-09-22-javalin-websocket-example.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.javalin</groupId>\n        <artifactId>javalin-bundle</artifactId>\n        <version>{{site.javalinversion}}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.j2html</groupId>\n        <artifactId>j2html</artifactId>\n        <version>1.6.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Sparkjava's Static API\nDESCRIPTION: A simple example showing Sparkjava's static-first approach to defining routes. This demonstrates the simplicity that made Sparkjava popular.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-07-17-static-methods-within-lambdas.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static spark.Spark.*;\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        get(\"/hello\", (req, res) -> \"Hello World\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Syntax in Kotlin\nDESCRIPTION: Shows the equivalent syntax change in Kotlin, demonstrating how the context object replaces request/response pairs in route handlers.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-06-11-javalin-0.3.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\napp.get(\"/\") { ctx -> ctx.result(\"Hello World\") } // new syntax\napp.get(\"/\") { req, res -> res.body(\"Hello World\") } // old syntax\n```\n\n----------------------------------------\n\nTITLE: Configuring Hibernate Settings\nDESCRIPTION: Sets up Hibernate configuration with database connection properties, SQL highlighting, and schema generation. It also adds the Course class as an annotated entity.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2024-10-20-javalin-hibernate.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclass AppHibernateConfig {\n\n    static Configuration configuration() {\n        var configuration = new Configuration();\n        var settings = new Properties();\n        settings.put(AvailableSettings.JAKARTA_JDBC_DRIVER, \"org.postgresql.Driver\");\n        settings.put(AvailableSettings.JAKARTA_JDBC_URL, \"jdbc:postgresql://localhost:5432/mydatabase\");\n        settings.put(AvailableSettings.JAKARTA_JDBC_USER, \"sa\");\n        settings.put(AvailableSettings.JAKARTA_JDBC_PASSWORD, \"sa\");\n        settings.put(AvailableSettings.HIGHLIGHT_SQL, true);\n        settings.put(AvailableSettings.HBM2DDL_AUTO, Action.ACTION_CREATE);\n\n        configuration.setProperties(settings);\n        configuration.addAnnotatedClass(Course.class);\n        return configuration;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Layout Template in Javalin (HTML)\nDESCRIPTION: Provides an example of a Vue.js layout template used in Javalin for simplified Vue.js development without NPM and frontend builds.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_65\n\nLANGUAGE: markup\nCODE:\n```\n<head>\n    <script src=\"/webjars/vue/2.6.10/dist/vue.min.js\"></script>\n    @componentRegistration\n</head>\n<body>\n<main id=\"main-vue\" v-cloak>\n    @routeComponent\n</main>\n<script>\n    new Vue({el: \"#main-vue\"});\n</script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Implementing App Frame Component\nDESCRIPTION: Creates a layout component that wraps all other components and displays the current user state.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclass AppFrame {\n    constructor(content) {\n    }\n\n    view(vnode) {\n        return m(\"div.app-frame\", [\n            m(\"header\", [\n                m(\"span\", \"Javalin Mithril Demo App\"),\n                    window.javalin.state.currentUser ? m(\"span\", `Current User : '${window.javalin.state.currentUser}'`) : null,\n                ]),\n            vnode.attrs.content\n            ]\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Command Class in Kotlin\nDESCRIPTION: Example of creating a GraphQL command class (mutation) in Kotlin that implements the CommandGraphql interface. Shows method definitions with descriptions.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/graphql.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n@GraphQLDescription(\"Command Example\")\nclass CommandExample : CommandGraphql {\n    fun hello(): String = \"Hello world\"\n\n    fun demoData(@GraphQLDescription(\"awesome input\") data: DemoData): DemoData = data\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Javalin with Java\nDESCRIPTION: A Java example showing how to process uploaded files in Javalin using the uploadedFiles() method. It retrieves files from the 'files' form field and saves them to an 'upload' directory using Apache FileUtils.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-07-28-javalin-0.3.6-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.post(\"/upload\", ctx -> {\n    ctx.uploadedFiles(\"files\").forEach(file -> {\n        FileUtils.copyInputStreamToFile(file.getContent(), new File(\"upload/\" + file.getName()));\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing State Function\nDESCRIPTION: Function to share server-side state with Vue components through context-based mapping.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/javalinvue.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nstateFunction = ctx -> Map.of(\"user\", getUser(ctx));\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstateFunction = { mapOf(\"user\" to getUser(it)) }\n```\n\n----------------------------------------\n\nTITLE: Adding Slf4j Simple Dependency in Gradle\nDESCRIPTION: This snippet demonstrates how to add the Slf4j Simple logging dependency to a Gradle project's build.gradle file. This is necessary for the Javalin application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_8\n\nLANGUAGE: gradle\nCODE:\n```\ncompile \"org.slf4j:slf4j-simple:1.7.25\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach Using Varargs\nDESCRIPTION: An alternative API design using varargs instead of nested lambdas, which provides a different syntax that may be preferable in Java but less idiomatic in Kotlin.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2021-07-17-static-methods-within-lambdas.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.enableCorsForAllOrigins();\n}).routes(\n    path(\"users\",\n        get(UserController::getAll),\n        post(UserController::create),\n        path(\":user-id\",\n            get(UserController::getOne),\n            patch(UserController::update),\n            delete(UserController::delete)\n        )\n    )\n).start(port);\n```\n\n----------------------------------------\n\nTITLE: Updating HelloWorld Component with Component Imports and Nesting\nDESCRIPTION: Modified HelloWorld component that now imports and uses the AppFrame component as a wrapper. Demonstrates component composition and the import directive in JavalinMithril.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n @package io.javalin.mithril.demo;\n @import io.javalin.mithril.demo.AppFrame;\n */\nclass HelloWorld {\n    constructor() {\n\n    }\n\n    view(vnode) {\n        return m(AppFrame, {content: [\n                m(\"h1.hello-world\", \"Hello World !\"),\n                m(\"a\", {href: \"/users\"}, \"View user Overview\"),\n            ]\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Web Module for Javalin Configuration\nDESCRIPTION: WebModule class that extends AbstractModule and provides Javalin instance binding and registers the WebEntrypoint as a REST entrypoint using MapBinder for different application types.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-04-29-javalin-java-10-guice.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage io.kidbank;\n\nimport com.google.inject.AbstractModule;\nimport com.google.inject.multibindings.MapBinder;\nimport io.alzuma.AppEntrypoint;\nimport io.alzuma.EntrypointType;\nimport io.javalin.Javalin;\nimport org.jetbrains.annotations.NotNull;\n\nclass WebModule extends AbstractModule {\n    private Javalin app;\n\n    private WebModule(Javalin app) {\n        this.app = app;\n    }\n\n    @NotNull\n    public static WebModule create() {\n        return new WebModule(Javalin.create());\n    }\n\n    @Override\n    protected void configure() {\n        bind(Javalin.class).toInstance(app);\n        MapBinder.newMapBinder(binder(), EntrypointType.class, AppEntrypoint.class).addBinding(EntrypointType.REST).to(WebEntrypoint.class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default SLF4J Warning Output in Javalin without Logger\nDESCRIPTION: When running a Javalin application without a proper logging provider, it displays this warning message suggesting to add slf4j-simple as a dependency.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2023-07-30-javalin-logging.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/usr/lib/jvm/java-17/bin/java #...\nSLF4J: No SLF4J providers were found.\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.\n\n#########################################################################\nJavalin: It looks like you don't have a logger in your project.\nThe easiest way to fix this is to add 'slf4j-simple':\n\npom.xml:\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-simple</artifactId>\n    <version>2.0.7</version>\n</dependency>\n\nbuild.gradle or build.gradle.kts:\nimplementation(\"org.slf4j:slf4j-simple:2.0.7\")\n\nVisit https://javalin.io/documentation#logging if you need more help\n#########################################################################\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Attributes in Kotlin\nDESCRIPTION: Demonstrates the new convenience functions for setting, getting, and retrieving all session attributes in Javalin 0.5.4. These functions provide type-safe access to session data.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-10-22-javalin-0.5.4-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nctx.sessionAttribute(\"foo\", \"bar\") // set session-attribute \"foo\" to \"bar\"\nval foo = ctx.sessionAttribute<String>(\"foo\") // get session-attribute \"foo\" as string\nval sessionAttributeMap = ctx.sessionAttributeMap<Any>() // {foo=bar}\n```\n\n----------------------------------------\n\nTITLE: Updated Jetty dependency version in Javalin 1.2.1\nDESCRIPTION: Jetty dependency was updated to version 9.4.8.v20171121 with no breaking changes.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-01-03-javalin-1.2.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n9.4.8.v20171121\n```\n\n----------------------------------------\n\nTITLE: Adding Slf4j Simple Dependency in Maven POM\nDESCRIPTION: This snippet shows how to add the Slf4j Simple logging dependency to a Maven project's pom.xml file. This is required for the Javalin application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2018-09-27-javalin-graalvm-example.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-simple</artifactId>\n    <version>1.7.25</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSockets in Javalin\nDESCRIPTION: Shows how to set up WebSocket endpoints using either annotated classes or WebSocket objects.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-1-7-0.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket\", WebSocketClass.class);\n```\n\nLANGUAGE: java\nCODE:\n```\napp.ws(\"/websocket\", new WebSocketObject());\n```\n\n----------------------------------------\n\nTITLE: Kotlin Javalin App with jte Integration\nDESCRIPTION: Kotlin implementation of a Javalin application that initializes jte and renders a template\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage app\n\nobject TutorialKotlin {\n    @JvmStatic\n    fun main(args: Array<String>) {\n        JavalinJte.init();\n        val app = Javalin.create().start(7000)\n\n        app.get(\"/\") { ctx -> ctx.render(\"hello.jte\") }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Resolvers in Javalin for Java\nDESCRIPTION: Shows how to configure custom context resolvers for IP, host, scheme, URL, and full URL in Javalin using Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs.md#2025-04-08_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.contextResolver.ip = ctx -> \"custom ip\";           // called by Context#ip()\n    config.contextResolver.host = ctx -> \"custom host\";       // called by Context#host()\n    config.contextResolver.scheme = ctx -> \"custom scheme\";   // called by Context#scheme()\n    config.contextResolver.url = ctx -> \"custom url\";         // called by Context#url()\n    config.contextResolver.fullUrl = ctx -> \"custom fullUrl\"; // called by Context#fullUrl()\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Travis CI Configuration for Java Project\nDESCRIPTION: Simple Travis CI configuration that specifies Java as the language and lists multiple OpenJDK versions to test against.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2019-11-03-moving-from-travis-to-github-actions.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlanguage: java\njdk:\n- openjdk8\n- openjdk9\n- openjdk10\n- openjdk11\n- openjdk12\n```\n\n----------------------------------------\n\nTITLE: Plugin Card Template for GraphQL\nDESCRIPTION: Liquid template that renders a plugin card for the GraphQL plugin, which enables implementation of the GraphQL specification in Javalin applications. Includes author details and documentation link.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{% include plugins/pluginCard.html\n    title=\"GraphQL\"\n    description=\"\n        This plugin allows implementing the\n        <a href='https://graphql.org/'>GraphQL</a>\n        specification with a few easy steps.\n    \"\n    bundled=\"false\"\n    author=\"7agustibm\"\n    docsUrl=\"https://github.com/javalin/javalin-graphql\"\n    ratingIssueNr=\"150\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Error Message Example\nDESCRIPTION: Shows the format of validation error messages thrown by BadRequestResponse.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2018-09-16-javalin-2.2.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n\"Query parameter 'to' with value '1262347100000' invalid - 'to' has to be after 'from'\"\n```\n\n----------------------------------------\n\nTITLE: Creating String Data with cURL POST Request\nDESCRIPTION: cURL command for sending a POST request to create a new string on the Raspberry Pi REST API with JSON payload.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"Content-Type: application/json\" --request POST --data '{ \"id\": \"1\", \"string\": \"First String\"}' your.raspberry.pi.ipaddress:8080/strings\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Template Engine in Java\nDESCRIPTION: Java code showing how to configure Javalin with a custom Velocity engine instance.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/rendering.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config -> {\n    config.fileRenderer(new JavalinVelocity(myVelocityEngine));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for Javalin Application Scraping\nDESCRIPTION: Prometheus configuration file (prometheus.yml) that defines how to scrape metrics from the Javalin application. This sets up scraping every second from localhost port 7080 where the application exposes its metrics.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-12-02-javalin-prometheus-example.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nscrape_configs:\n  - job_name: 'javalin'\n    scrape_interval: 1s\n    static_configs:\n      - targets: ['localhost:7080']\n        labels:\n          group: 'test'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Multi-Platform Java CI\nDESCRIPTION: GitHub Actions workflow configuration that tests multiple Java versions across Windows, MacOS, and Ubuntu platforms using matrix strategy.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/2019-11-03-moving-from-travis-to-github-actions.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nname: Java CI\non: [push, pull_request]\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        java_version: [1.8, 9, 10, 11, 12, 13]\n        os: [windows-latest, macOS-latest, ubuntu-latest]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n      - name: Set up JDK ${{ matrix.java_version }}\n        uses: actions/setup-java@v1\n        with:\n          java-version: ${{ matrix.java_version }}\n      - name: Make Maven Wrapper executable\n        if: contains(matrix.os, 'win') == false\n        run: chmod +x ./mvnw\n      - name: Build with Maven\n        run: ./mvnw package --file pom.xml\n```\n\n----------------------------------------\n\nTITLE: Styling Bar Charts with CSS\nDESCRIPTION: CSS code for styling bar charts used to display survey results. It includes responsive design for different screen sizes and custom styling for chart bars and labels.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2021-08-31-javalin-user-survey-2021.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.chart-flex {\n    user-select: none;\n    margin-top: 16px;\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n}\n.chart-flex > * {\n    width: calc(50% - 12px);\n}\n@media (max-width: 700px) {\n    .chart-flex > * {\n        width: 100%\n    }\n}\n.bar-chart {\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    background: #fff;\n    padding: 10px 60px 10px 10px;\n    font-family: arial, sans-serif;\n    position: relative;\n}\n\n.bar-chart > div {\n    height: 28px;\n    line-height: 28px;\n    padding: 0 10px;\n    background: #c7e6f5;\n    font-size: 15px;\n    border-radius: 3px;\n    white-space: nowrap;\n}\n\n.bar-chart > div + div {\n    margin-top: 10px;\n}\n\n.bar-chart > div::before {\n    content: \" \";\n    position: absolute;\n    width: calc(100% - 70px); /* padding x 60 x 10 */\n    background: rgba(0, 0, 0, 0.08);\n    height: 28px;\n    border-radius: 3px;\n    left: 10px;\n}\n\n.bar-chart > div::after {\n    content: attr(data-value);\n    position: absolute;\n    right: 15px;\n    color: #008cbb;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Mapping in Java\nDESCRIPTION: Shows how to use Javalin's error mapping feature to handle specific HTTP status codes in Java.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-2-8-0.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\napp.error(404, ctx -> {\n    ctx.result(\"Generic 404 message\")\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Email Project\nDESCRIPTION: Maven dependencies required for the project including Javalin for HTTP handling, Apache Commons Email for email functionality, and J2HTML for form generation.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2017-08-06-javalin-email-example.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.javalin</groupId>\n        <artifactId>javalin-bundle</artifactId>\n        <version>{{site.javalinversion}}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.commons</groupId>\n        <artifactId>commons-email</artifactId>\n        <version>1.5</version>\n    </dependency>\n    <dependency>\n        <groupId>com.j2html</groupId>\n        <artifactId>j2html</artifactId>\n        <version>1.6.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Checking Java and Gradle Versions\nDESCRIPTION: Commands to verify the installed versions of Java and Gradle, ensuring they meet the prerequisites for the tutorial.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2022-08-03-javalin-with-jpms-and-gradle.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 1. Be sure to have Java 9 or above\njava -version\n\n# 2. Be sure to have Gradle set up and available on your machine\ngradle -v\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function in Kotlin\nDESCRIPTION: Basic Kotlin main function definition without arguments, which serves as the entry point for the application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-09-05-javalin-raspberry-pi-example.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Card Template for Javalin Rendering\nDESCRIPTION: Liquid template that renders a plugin card for the Javalin Rendering plugin, which provides templating engine integration for HTML rendering with various template engines like JTE, Mustache, and Thymeleaf.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins.md#2025-04-08_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{% include plugins/pluginCard.html\n    title=\"Javalin Rendering\"\n    description=\"\n        The javalin-rendering artifact is an optional module for the Javalin web framework that \n        provides a simple way to render HTML using popular template engines. \n        The javalin-rendering artifact includes default implementations for several template engines, \n        including JTE, Mustache, Velocity, Pebble, Handlebars, and Thymeleaf.\n    \"\n    bundled=\"false\"\n    author=\"tipsy\"\n    docsUrl=\"/plugins/rendering\"\n    ratingIssueNr=\"228\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting Plugin Class\nDESCRIPTION: Defines the Ratey plugin class that extends ContextPlugin to implement rate limiting functionality. Includes a Config class for setting limits and an Extension class that handles the rate limiting logic based on IP addresses.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/how-to.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nclass Ratey extends ContextPlugin<Ratey.Config, Ratey.Extension> {\n    public Ratey(Consumer<Config> userConfig) {\n        super(userConfig, new Config());\n    }\n\n    // map of ip to counter, to keep track of the number of requests per ip\n    Map<String, Integer> ipToCounter = new HashMap<>();\n\n    // called when the user calls ctx.with(Ratey.class), should return an instance of the extension class\n    @Override\n    public Extension createExtension(@NotNull Context context) {  \n        return new Extension(context);\n    }\n\n    // the config class that is used in JavalinConfig#registerPlugin\n    public static class Config {\n        public int limit = 1;\n    }\n    // this is an inner class, so it has access to the ipToCounter property of the outer class\n    public class Extension {\n        private final Context context;\n\n        public Extension(Context context) {\n            this.context = context;\n        }\n\n        public void tryConsume(int cost) {\n            String ip = context.ip();\n            int counter = ipToCounter.compute(ip, (k, v) -> v == null ? cost : v + cost);\n            if (counter > pluginConfig.limit) {\n                throw new TooManyRequestsResponse();\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Ratey(userConfig: Consumer<Config>) : ContextPlugin<Ratey.Config, Ratey.Extension>(userConfig, Config()) {\n    // map of ip to counter, to keep track of the number of requests per ip\n    val ipToCounter = mutableMapOf<String, Int>()\n    // this function is called when the user calls ctx.with(Ratey::class), \n    // and should return an instance of the extension class\n    override fun createExtension(context: Context) = Extension(context)\n    // the config class that is used in JavalinConfig#registerPlugin\n    class Config(var limit: Int = 0)\n    // this is an inner class, so it has access to the ipToCounter property of the outer class\n    inner class Extension(var context: Context) {\n        fun tryConsume(cost: Int = 1) {\n            val ip = context.ip()\n            val counter = ipToCounter.compute(ip) { _, v -> v?.plus(cost) ?: cost }!!\n            if (counter > pluginConfig.limit) {\n                throw TooManyRequestsResponse()\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket After Handlers in Javalin (Kotlin)\nDESCRIPTION: Shows how to configure WebSocket after handlers in Javalin using Kotlin. These handlers execute after all WebSocket requests or specific path-matched requests.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-5-6-x.md#2025-04-08_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\napp.wsAfter { ws ->\n    // runs after all WebSocket requests\n}\napp.wsAfter(\"/path/*\") { ws ->\n    // runs after websocket requests to /path/*\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Client Generator Maven Configuration\nDESCRIPTION: Maven plugin configuration for generating API clients from OpenAPI specifications. Configures the OpenAPI generator plugin with source paths and language settings.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2020-01-03-javalin-openapi-example.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.openapitools</groupId>\n    <artifactId>openapi-generator-maven-plugin</artifactId>\n    <version>4.2.2</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate</goal>\n            </goals>\n            <configuration>\n                <inputSpec>${project.basedir}/src/main/resources/api.json</inputSpec>\n                <language>kotlin</language>\n                <configOptions>\n                    <sourceFolder>src/gen/java/main</sourceFolder>\n                </configOptions>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared State in Vue Template (HTML)\nDESCRIPTION: Demonstrates how to access shared state from the server in a Vue template using the $javalin.state object.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_69\n\nLANGUAGE: markup\nCODE:\n```\n<template id=\"user-template\">\n    <div>{{ $javalin.state.user }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes List in Liquid for Javalin Versions\nDESCRIPTION: This Liquid template generates an unordered list of changes introduced between two specified minor versions of Javalin. It filters news posts by version, extracting and displaying the version number and summary for each relevant update.\nSOURCE: https://github.com/javalin/website/blob/master/_includes/macros/newsSummary.md#2025-04-08_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n## Other changes introduced from {{ include.from }}.0 to {{ include.to }}.0\n{% assign newsposts = (site.posts | where: \"category\" , \"news\") | sort: 'date' %}\n\n<ul>\n    {% for post in newsposts %}\n        {% assign minorVersion = post.version | slice: 0, 3 %}\n        {% if minorVersion == include.from %}\n            <li><code>{{ post.version }}</code> {{ post.summary }}</li>\n        {% endif %}\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating an EventSource Client with JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a client-side EventSource to receive Server-sent events from a Javalin server. It demonstrates connecting to the SSE endpoint and listening for a specific event type.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2019-01-17-javalin-2.6.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventSource = new EventSource(\"http://localhost:7000/sse\");\neventSource.addEventListener(\"connected\", msg => console.log(msg);\n```\n\n----------------------------------------\n\nTITLE: Creating an EventSource Client with JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a client-side EventSource to receive Server-sent events from a Javalin server. It demonstrates connecting to the SSE endpoint and listening for a specific event type.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2019-01-17-javalin-2.6.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventSource = new EventSource(\"http://localhost:7000/sse\");\neventSource.addEventListener(\"connected\", msg => console.log(msg);\n```\n\n----------------------------------------\n\nTITLE: Rendering Hello Page with Localization in Kotlin\nDESCRIPTION: Kotlin version of rendering a page with localization in Javalin. It creates a HelloPage object, sets properties, and passes it with a Localizer instance to the template renderer.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2020-08-23-javalin-jte-example.md#2025-04-08_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun renderHelloPage(ctx: Context) {\n    val page = HelloPage()\n    page.userName = \"<script>alert('xss')</script>\"\n    page.userKarma = 1337\n    ctx.render(\"hello.jte\", mapOf(\"page\" to page, \"localizer\" to Localizer(Locale.US)))\n}\n```\n\n----------------------------------------\n\nTITLE: Liquid Template Section Includes\nDESCRIPTION: Series of Liquid template includes that structure the landing page content with various sections including title, features, sponsors, API examples, and community information.\nSOURCE: https://github.com/javalin/website/blob/master/pages/index.md#2025-04-08_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n{% include landing/section-1-title-and-get-started.html\n    title=\"<h1>A simple web framework<br>for Java and Kotlin</h1>\"\n    docs=\"View documentation\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Syntax in Java\nDESCRIPTION: Demonstrates the syntax change in Java from using request/response pairs to using the new context object for handling HTTP requests.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-06-11-javalin-0.3.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\napp.get(\"/\", ctx -> ctx.result(\"Hello World\")); // new syntax\napp.get(\"/\", (req, res) -> res.body(\"Hello World\")); // old syntax\n```\n\n----------------------------------------\n\nTITLE: Responsive Bar Chart CSS Styling\nDESCRIPTION: CSS styles for creating a responsive bar chart layout with flexbox, including mobile breakpoints and visual styling for bars, labels and containers. Includes styling for chart container, individual bars, before/after pseudo-elements for backgrounds and values.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2020-03-20-javalin-user-survey-2020.md#2025-04-08_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.chart-flex {\n    user-select: none;\n    margin-top: 16px;\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n}\n.chart-flex > * {\n    width: calc(50% - 12px);\n}\n@media (max-width: 700px) {\n    .chart-flex > * {\n        width: 100%\n    }\n}\n.bar-chart {\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    background: #fff;\n    padding: 10px 60px 10px 10px;\n    font-family: arial, sans-serif;\n    position: relative;\n}\n\n.bar-chart > div {\n    height: 28px;\n    line-height: 28px;\n    padding: 0 10px;\n    background: #c7e6f5;\n    font-size: 15px;\n    border-radius: 3px;\n    white-space: nowrap;\n}\n\n.bar-chart > div + div {\n    margin-top: 10px;\n}\n\n.bar-chart > div::before {\n    content: \" \";\n    position: absolute;\n    width: calc(100% - 70px);\n    background: rgba(0, 0, 0, 0.08);\n    height: 28px;\n    border-radius: 3px;\n    left: 10px;\n}\n\n.bar-chart > div::after {\n    content: attr(data-value);\n    position: absolute;\n    right: 15px;\n    color: #008cbb;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Page Header Definition\nDESCRIPTION: Front matter and HTML heading defining the about page structure and basic metadata for the documentation site.\nSOURCE: https://github.com/javalin/website/blob/master/pages/about.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n---\nlayout: default\ntitle: About\nrightmenu: false\npermalink: /about\n---\n\n<h1 class=\"no-margin-top\">About Javalin</h1>\n```\n\n----------------------------------------\n\nTITLE: Form Parameter Access Methods in Kotlin\nDESCRIPTION: Demonstrates the four available methods for accessing form parameters in Javalin. Includes functions for single value retrieval, default value handling, multiple value retrieval, and getting all form parameters as a map.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-19-javalin-0.4.1-released.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nformParam(\"key\") // get one form-params\nformParamOrDefault(\"key\", \"default\") // get one form-params (or default if null)\nformParams(\"key\") // get multiple form-paramss\nformParamMap() // get map of all form-params key/values\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect-to-lowercase Plugin in Javalin\nDESCRIPTION: Demonstrates how to register the RedirectToLowercasePathPlugin which redirects uppercase/mixcase paths to lowercase. Only affects static URL fragments while preserving path and query parameter casing.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/docs-past-3-13-X.md#2025-04-08_snippet_57\n\nLANGUAGE: java\nCODE:\n```\nJavalin.create(config ->\n    config.registerPlugin(new RedirectToLowercasePathPlugin());\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Javalin Usage Purposes with HTML Bar Chart\nDESCRIPTION: HTML bar chart showing what users are using Javalin for in 2020 vs 2018. The chart displays percentages for REST APIs, WebSockets, and Websites usage with CSS-based visualization.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2020-03-20-javalin-user-survey-2020.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"chart-flex\">\n    <div>\n        2020\n        <div class=\"bar-chart\">\n           <div style=\"width:92%\" data-value=\"92%\">REST APIs</div>\n           <div style=\"width:33%\" data-value=\"33%\">WebSockets</div>\n           <div style=\"width:38%\" data-value=\"38%\">Websites</div>\n       </div>\n    </div>\n    <div>\n        2018\n        <div class=\"bar-chart\">\n            <div style=\"width:86%\" data-value=\"86%\">REST APIs</div>\n            <div style=\"width:34%\" data-value=\"34%\">WebSockets</div>\n            <div style=\"width:39%\" data-value=\"39%\">Websites</div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Omegle Clone Frontend\nDESCRIPTION: HTML structure for the Omegle clone frontend, including video elements, control buttons, and chat interface. It also includes necessary script imports.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2024-01-13-omeglin/2023-12-30-building-omegle-in-javalin.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% include_relative snippets/main/resources/public/index.html %}\n```\n\n----------------------------------------\n\nTITLE: Production Usage Chart for Javalin\nDESCRIPTION: HTML bar chart displaying whether users are utilizing Javalin in production environments. The chart compares 2020 and 2018 data across three categories: Yes, Soon, and No.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2020-03-20-javalin-user-survey-2020.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"chart-flex\">\n    <div>\n        2020\n        <div class=\"bar-chart\">\n            <div style=\"width:33%\" data-value=\"33%\">Yes</div>\n            <div style=\"width:47%\" data-value=\"47%\">Soon</div>\n            <div style=\"width:20%\" data-value=\"20%\">No</div>\n        </div>\n    </div>\n    <div>\n        2018\n        <div class=\"bar-chart\">\n            <div style=\"width:30%\" data-value=\"30%\">Yes</div>\n            <div style=\"width:45%\" data-value=\"45%\">Soon</div>\n            <div style=\"width:25%\" data-value=\"25%\">No</div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Programming Language Usage Chart for Javalin\nDESCRIPTION: HTML visualization showing the programming languages used with Javalin in 2020 compared to 2018. The chart highlights the shift from majority Kotlin usage to stronger Java adoption.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/blog/survey/2020-03-20-javalin-user-survey-2020.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"chart-flex\">\n    <div>\n        2020\n        <div class=\"bar-chart\">\n            <div style=\"width:78%\" data-value=\"78%\">Java</div>\n            <div style=\"width:40%\" data-value=\"40%\">Kotlin</div>\n            <div style=\"width:2%\" data-value=\"2%\">Other</div>\n        </div>\n    </div>\n    <div>\n        2018\n        <div class=\"bar-chart\">\n            <div style=\"width:57%\" data-value=\"57%\">Java</div>\n            <div style=\"width:61%\" data-value=\"61%\">Kotlin</div>\n            <div style=\"width:2%\" data-value=\"2%\">Other</div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Issuance Endpoint in Javalin\nDESCRIPTION: Java code that creates a GET endpoint for issuing JWT tokens to authenticated users, including the user's principal and roles in the token payload.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-04-16-javalin-sureness-example.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// issue jwt rest api\napp.get(\"/auth/token\", ctx -> {\n    SubjectSum subjectSum = SurenessContextHolder.getBindSubject();\n    if (subjectSum == null) {\n        ctx.result(\"Please auth!\");\n    } else {\n        String principal = (String) subjectSum.getPrincipal();\n        List<String> roles = (List<String>) subjectSum.getRoles();\n        // issue jwt\n        String jwt = JsonWebTokenUtil.issueJwt(UUID.randomUUID().toString(), principal,\n                \"token-server\", 3600L, roles);\n        ctx.result(jwt);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Form Parameters in Kotlin\nDESCRIPTION: Shows how to use Kotlin's destructuring declarations with Javalin's form parameter mapping to extract name and email parameters.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-12-javalin-0.4.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\napp.post(\"/new-user\") { ctx ->\n    val (name, email) = ctx.mapFormParams(\"name\", \"email\") ?: throw MissingFormParamException()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Javalin 5\nDESCRIPTION: Example of defining routes using the Javalin#routes() method in Javalin 5.\nSOURCE: https://github.com/javalin/website/blob/master/pages/docs/migration-guide-5-6.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvar app = Javalin.create().start();\napp.routes(() -> {\n    get(\"/hello\", ctx -> ctx.result(\"Hello World\"));\n});\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval app = Javalin.create().start()\napp.routes {\n    get(\"/hello\") { ctx -> ctx.result(\"Hello World\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging WebSocket Events in Javalin\nDESCRIPTION: Example output of the DevLoggingPlugin for WebSocket events, including onConnect and onClose. It shows session details, matched path, path parameters, and query parameters for each event.\nSOURCE: https://github.com/javalin/website/blob/master/pages/plugins/devlogging.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[JettyServerThreadPool-75] INFO io.javalin.Javalin - JAVALIN WEBSOCKET DEBUG LOG\nWebSocket Event: onConnect\nSession Id: ca762465-a30d-4f9d-97a3-ce24e9515135\nHost: localhost\nMatched Path: /path/{param}\nPathParams: {param=1}\nQueryParams: {test=[banana], hi=[1, 2]}\n\n[JettyServerThreadPool-80] INFO io.javalin.Javalin - JAVALIN WEBSOCKET DEBUG LOG\nWebSocket Event: onClose\nSession Id: ca762465-a30d-4f9d-97a3-ce24e9515135\nHost: localhost\nMatched Path: /path/{param}\nPathParams: {param=1}\nQueryParams: {test=[banana], hi=[1, 2]}\nStatusCode: 1000\nReason: No reason was provided\n```\n\n----------------------------------------\n\nTITLE: Extensive Request Logging Output Format\nDESCRIPTION: Shows the detailed logging format that includes complete request and response information, including headers, cookies, body content, query parameters, and form parameters.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-19-javalin-0.4.1-released.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nINFO - JAVALIN EXTENSIVE REQUEST LOG (this clones the response, which is an expensive operation):\nRequest: POST [/some-endpoint]\n    Headers: {User-Agent=unirest-java/1.3.11, Connection=keep-alive, Host=localhost:51958, Accept-Encoding=gzip, Content-Length=4, Content-Type=text/plain; charset=UTF-8}\n    Cookies: {}\n    Body: body=mybody\n    QueryString: qp=queryparam\n    QueryParams: {qp=[queryparam]}\n    FormParams: {body=[mybody]}\nResponse: [200], execution took 0.27 ms\n    Headers: {Server=Javalin, Date=Sat, 19 Aug 2017 09:11:12 GMT, Content-Type=text/plain;charset=utf-8}\n    Body: (starts on next line)\nresponse-body-content\n----------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Extensive Request Logging Output Format\nDESCRIPTION: Shows the detailed logging format that includes complete request and response information, including headers, cookies, body content, query parameters, and form parameters.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2017-08-19-javalin-0.4.1-released.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nINFO - JAVALIN EXTENSIVE REQUEST LOG (this clones the response, which is an expensive operation):\nRequest: POST [/some-endpoint]\n    Headers: {User-Agent=unirest-java/1.3.11, Connection=keep-alive, Host=localhost:51958, Accept-Encoding=gzip, Content-Length=4, Content-Type=text/plain; charset=UTF-8}\n    Cookies: {}\n    Body: body=mybody\n    QueryString: qp=queryparam\n    QueryParams: {qp=[queryparam]}\n    FormParams: {body=[mybody]}\nResponse: [200], execution took 0.27 ms\n    Headers: {Server=Javalin, Date=Sat, 19 Aug 2017 09:11:12 GMT, Content-Type=text/plain;charset=utf-8}\n    Body: (starts on next line)\nresponse-body-content\n----------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Validation Syntax in Java\nDESCRIPTION: Shows the new, more concise syntax for query parameter validation in Java, introduced in Javalin 2.8.0.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-3.0/2019-03-26-javalin-2.8.0-released.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvar myQpStr = ctx.queryParam(\"my-qp\");\nvar myQpInt = ctx.queryParam(\"my-qp\", Integer.class).get();\nvar myQpInt = ctx.queryParam(\"my-qp\", Integer.class).check(i -> i > 4).get();\nvar instant = ctx.queryParam(\"my-qp\", Instant.class).get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files with Path Prefix in Javalin\nDESCRIPTION: Example showing how to configure static file serving with a custom path prefix. This allows serving static files from a specific directory under a custom URL path.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/news/pre-4.0/2020-06-07-javalin-3.9.0-released.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconfig.addStaticFiles(\"/hosted-path\", \"/directory\")\n```\n\n----------------------------------------\n\nTITLE: Implementing UserController for Javalin API in Kotlin\nDESCRIPTION: This snippet defines a UserController with methods to handle API requests for retrieving all users and individual user details.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/2019-07-31-simple-frontends-with-javalin-and-vue.md#2025-04-08_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.javalin.http.Context\nimport io.javalin.http.NotFoundResponse\n\ndata class User(val id: String, val name: String, val email: String, val userDetails: UserDetails?)\ndata class UserDetails(val dateOfBirth: String, val salary: String)\n\nval users = setOf(\n    User(id = \"1\", name = \"John\", email = \"john@fake.co\", userDetails = UserDetails(\"21.02.1964\", \"2773 JB\")),\n    User(id = \"2\", name = \"Mary\", email = \"mary@fake.co\", userDetails = UserDetails(\"12.05.1994\", \"1222 JB\")),\n    User(id = \"3\", name = \"Dave\", email = \"dave@fake.co\", userDetails = UserDetails(\"01.05.1984\", \"1833 JB\")),\n    User(id = \"4\", name = \"Jane\", email = \"jane@fake.co\", userDetails = UserDetails(\"30.12.1989\", \"1532 JB\")),\n    User(id = \"5\", name = \"Eric\", email = \"eric@fake.co\", userDetails = UserDetails(\"14.09.1973\", \"2131 JB\")),\n    User(id = \"6\", name = \"Gina\", email = \"gina@fake.co\", userDetails = UserDetails(\"16.08.1977\", \"1982 JB\")),\n    User(id = \"7\", name = \"Ryan\", email = \"ryan@fake.co\", userDetails = UserDetails(\"07.11.1988\", \"1638 JB\")),\n    User(id = \"8\", name = \"Judy\", email = \"judy@fake.co\", userDetails = UserDetails(\"05.01.1959\", \"2983 JB\"))\n)\n\nobject UserController {\n\n    fun getAll(ctx: Context) {\n        ctx.json(users.map { it.copy(userDetails = null) }) // remove sensitive information\n    }\n\n    fun getOne(ctx: Context) {\n        val user = users.find { it.id == ctx.pathParam(\"user-id\") } ?: throw NotFoundResponse()\n        ctx.json(user)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Layout for JavalinMithril Components\nDESCRIPTION: HTML layout file that loads Mithril.js, includes placeholders for component registration and route component injection. Used as the main template for all pages in the application.\nSOURCE: https://github.com/javalin/website/blob/master/_posts/tutorials/community/2021-05-20-frontends-with-javalinmithril.md#2025-04-08_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf8\"/>\n        <script src=\"@cdnWebjar/mithril/2.0.4/mithril.min.js\"></script>\n        <style>\n            <!-- Your style here -->\n        </style>\n        @componentRegistration\n    </head>\n    <body>\n\n    </body>\n    <script>\n        m.mount(document.body, {view:()=>@routeComponent})\n    </script>\n</html>\n```"
  }
]