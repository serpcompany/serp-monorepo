[
  {
    "owner": "pmndrs",
    "repo": "gltfjsx",
    "content": "TITLE: Basic Implementation of a 3D Model in React Three Fiber\nDESCRIPTION: This code snippet shows how to integrate a generated Model component into a React Three Fiber Canvas, demonstrating the basic implementation pattern for using GLTFJSX components.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber'\nimport { Model } from './Model'\n\nfunction App() {\n  return (\n    <Canvas>\n      <Model />\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated React Component for a 3D Model\nDESCRIPTION: This JSX code shows the output of GLTFJSX, generating a React component that renders a 3D model using react-three-fiber. It includes camera setup, lighting, and mesh components with materials from the original model.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/*\nauto-generated by: https://github.com/pmdrs/gltfjsx\nauthor: abcdef (https://sketchfab.com/abcdef)\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nsource: https://sketchfab.com/models/...\ntitle: Model\n*/\n\nimport { useGLTF, PerspectiveCamera } from '@react-three/drei'\n\nexport function Model(props) {\n  const { nodes, materials } = useGLTF('/model-transformed.glb')\n  return (\n    <group {...props} dispose={null}>\n      <PerspectiveCamera name=\"camera\" fov={40} near={10} far={1000} position={[10, 0, 50]} />\n      <pointLight intensity={10} position={[100, 50, 100]} rotation={[-Math.PI / 2, 0, 0]} />\n      <group position={[10, -5, 0]}>\n        <mesh geometry={nodes.robot.geometry} material={materials.metal} />\n        <mesh geometry={nodes.rocket.geometry} material={materials.wood} />\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/model.gltf')\n```\n\n----------------------------------------\n\nTITLE: Reusing Model Instances in React Three Fiber\nDESCRIPTION: This JSX code demonstrates how to reuse a model component with different positions, highlighting one of the key benefits of the GLTFJSX approach where geometries and materials are automatically reused.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Model position={[0, 0, 0]} />\n<Model position={[10, 0, -10]} />\n```\n\n----------------------------------------\n\nTITLE: Preloading GLTF Assets for Faster Loading\nDESCRIPTION: This code snippet demonstrates how to preload GLTF assets using the useGLTF hook's preload method, which reduces time-to-paint by loading the model in advance.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nuseGLTF.preload('/model.gltf')\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using Animations in GLTF Models\nDESCRIPTION: This JSX code demonstrates how to access and use animations in a GLTF model using drei's useAnimations hook, which extracts animation clips and prepares them as actions that can be played.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst { nodes, materials, animations } = useGLTF('/model.gltf')\nconst { actions } = useAnimations(animations, group)\n```\n\n----------------------------------------\n\nTITLE: Auto-Instancing Implementation for GLTF Models\nDESCRIPTION: This JSX code shows the implementation of auto-instancing for GLTF models, creating efficient instances of repeated geometry using drei's Merged component with React context to minimize draw calls.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst context = createContext()\nexport function Instances({ children, ...props }) {\n  const { nodes } = useGLTF('/model-transformed.glb')\n  const instances = useMemo(() => ({ Screw1: nodes['Screw1'], Screw2: nodes['Screw2'] }), [nodes])\n  return (\n    <Merged meshes={instances} {...props}>\n      {(instances) => <context.Provider value={instances} children={children} />}\n    </Merged>\n  )\n}\n\nexport function Model(props) {\n  const instances = useContext(context)\n  return (\n    <group {...props} dispose={null}>\n      <instances.Screw1 position={[-0.42, 0.04, -0.08]} rotation={[-Math.PI / 2, 0, 0]} />\n      <instances.Screw2 position={[-0.42, 0.04, -0.08]} rotation={[-Math.PI / 2, 0, 0]} />\n    </group>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Instanced Models for Efficient Rendering\nDESCRIPTION: This JSX code demonstrates how to use instanced models efficiently by rendering multiple copies with minimal draw calls. The Instances component provides the context for efficient rendering of multiple instances of the same model.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Instances, Model } from './Model'\n\n<Instances>\n  <Model position={[10,0,0]}>\n  <Model position={[-10,0,0]}>\n  <Model position={[-10,10,0]}>\n</Instance>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers to 3D Model Meshes\nDESCRIPTION: This JSX code shows how to add event handlers to mesh components in a 3D model, enabling interactive behaviors like click handling for specific parts of the model.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh geometry={nodes.robot.geometry} material={materials.metal} onClick={handleClick} />\n```\n\n----------------------------------------\n\nTITLE: Changing Material Color for Dynamic 3D Models\nDESCRIPTION: This snippet shows how to modify material properties of a model component, specifically changing the color of a mesh using the material-color prop syntax in react-three-fiber.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh geometry={nodes.robot.geometry} material={materials.metal} material-color=\"green\" />\n```\n\n----------------------------------------\n\nTITLE: Replacing Materials in a GLTFJSX Model\nDESCRIPTION: This JSX code demonstrates how to completely replace the material of a mesh in a model component, using a meshPhysicalMaterial instead of the original material from the model.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh geometry={nodes.robot.geometry}>\n  <meshPhysicalMaterial color=\"hotpink\" />\n</mesh>\n```\n\n----------------------------------------\n\nTITLE: Playing Animations on User Interaction\nDESCRIPTION: This JSX snippet shows how to trigger animations on user interaction, specifically playing an animation when a mesh is clicked using the actions object from useAnimations.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh onClick={(e) => actions.jump.play()} />\n```\n\n----------------------------------------\n\nTITLE: Blending Animations in React Three Fiber\nDESCRIPTION: This code shows an implementation of animation blending in React Three Fiber, using useState and useEffect to manage which animation is playing and create smooth transitions between animations with fadeIn and fadeOut.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst [name, setName] = useState(\"jump\")\n...\nuseEffect(() => {\n  actions[name].reset().fadeIn(0.5).play()\n  return () => actions[name].fadeOut(0.5)\n}, [name])\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of 3D Model Parts\nDESCRIPTION: This snippet shows how to conditionally render parts of a 3D model by using JavaScript conditional expressions, allowing for dynamic control over which meshes are displayed.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n{condition && <mesh geometry={nodes.robot.geometry} material={materials.metal} />}\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Definitions to GLTF Model Components\nDESCRIPTION: This TypeScript code shows how to add type definitions to a GLTF model component, providing type safety for nodes, materials, and props to improve development experience and catch errors early.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ntype GLTFResult = GLTF & {\n  nodes: { robot: THREE.Mesh; rocket: THREE.Mesh }\n  materials: { metal: THREE.MeshStandardMaterial; wood: THREE.MeshStandardMaterial }\n}\n\nexport default function Model(props: JSX.IntrinsicElements['group']) {\n  const { nodes, materials } = useGLTF<GLTFResult>('/model.gltf')\n```\n\n----------------------------------------\n\nTITLE: Running GLTFJSX to Transform a 3D Model\nDESCRIPTION: This bash command demonstrates how to use GLTFJSX with the transform flag to convert a GLTF file into an optimized React component with compressed output.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gltfjsx model.gltf --transform\n```\n\n----------------------------------------\n\nTITLE: Displaying GLTFJSX Command-Line Usage and Options\nDESCRIPTION: This snippet shows the available command-line options for the GLTFJSX tool, including output configuration, optimization flags, and transformation options. It documents parameters for controlling compression, type definitions, and model optimization.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage\n  $ npx gltfjsx [Model.glb] [options]\n\nOptions\n  --output, -o        Output file name/path\n  --types, -t         Add Typescript definitions\n  --keepnames, -k     Keep original names\n  --keepgroups, -K    Keep (empty) groups, disable pruning\n  --bones, -b         Lay out bones declaratively (default: false)\n  --meta, -m          Include metadata (as userData)\n  --shadows, s        Let meshes cast and receive shadows\n  --printwidth, w     Prettier printWidth (default: 120)\n  --precision, -p     Number of fractional digits (default: 3)\n  --draco, -d         Draco binary path\n  --root, -r          Sets directory from which .gltf file is served\n  --instance, -i      Instance re-occuring geometry\n  --instanceall, -I   Instance every geometry (for cheaper re-use)\n  --exportdefault, -E Use default export\n  --transform, -T     Transform the asset for the web (draco, prune, resize)\n    --resolution, -R  Resolution for texture resizing (default: 1024)\n    --keepmeshes, -j  Do not join compatible meshes\n    --keepmaterials, -M Do not palette join materials\n    --format, -f      Texture format (default: \"webp\")\n    --simplify, -S    Mesh simplification (default: false)\n      --ratio         Simplifier ratio (default: 0)\n      --error         Simplifier error threshold (default: 0.0001)\n  --console, -c       Log JSX to console, won't produce a file\n  --debug, -D         Debug output\n```\n\n----------------------------------------\n\nTITLE: Using GLTFJSX Parser Standalone with GLTFLoader\nDESCRIPTION: This JSX code shows how to use the GLTFJSX parser as a standalone module with Three.js GLTFLoader and DRACOLoader, allowing programmatic conversion of GLTF models to JSX outside of the command-line tool.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { parse } from 'gltfjsx'\nimport { GLTFLoader, DRACOLoader } from 'three-stdlib'\n\nconst gltfLoader = new GLTFLoader()\nconst dracoloader = new DRACOLoader()\ndracoloader.setDecoderPath('https://www.gstatic.com/draco/v1/decoders/')\ngltfLoader.setDRACOLoader(dracoloader)\n\ngltfLoader.load(url, (gltf) => {\n  const jsx = parse(gltf, optionalConfig)\n})\n```\n\n----------------------------------------\n\nTITLE: Using GLTFJSX Parser for Three.js Scenes\nDESCRIPTION: This JSX snippet demonstrates how to use the GLTFJSX parser directly with Three.js scenes (Object3D instances) instead of GLTF models, providing flexibility for working with different 3D content sources.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nconst jsx = parse(scene, optionalConfig)\n```\n\n----------------------------------------\n\nTITLE: Using GLTFStructureLoader for GLTF asset testing in Jest\nDESCRIPTION: This code demonstrates how to use GLTFStructureLoader to extract and test the structure of a GLTF/GLB file in a Jest test environment without loading the actual binaries and textures. The loader allows checking properties of the 3D model structure.\nSOURCE: https://github.com/pmndrs/gltfjsx/blob/master/readme.md#2025-04-11_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GLTFStructureLoader } from 'gltfjsx'\nimport fs from 'fs/promises'\n\nit('should have a scene with a blue mesh', async () => {\n  const loader = new GLTFStructureLoader()\n  const data = await fs.readFile('./model.glb')\n  const { scene } = await new Promise((res) => loader.parse(data, '', res))\n  expect(() => scene.children.length).toEqual(1)\n  expect(() => scene.children[0].type).toEqual('mesh')\n  expect(() => scene.children[0].material.color).toEqual('blue')\n})\n```"
  }
]