[
  {
    "owner": "rest-assured",
    "repo": "rest-assured",
    "content": "TITLE: Using Given-When-Then Syntax in REST Assured\nDESCRIPTION: Example demonstrating the given-when-then syntax for creating readable API test assertions. Shows request configuration, execution, and response validation for a greeting endpoint.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_89\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n        param(\"firstName\", \"John\").\n        param(\"lastName\", \"Doe\").\nwhen().\n        get(\"/greet\").\nthen().\n        statusCode(200).\n        body(\"greeting\", equalTo(\"Greetings John Doe\"));\n```\n\n----------------------------------------\n\nTITLE: GET Request with Multiple Value Assertion in REST Assured\nDESCRIPTION: Shows how to verify multiple values in a JSON array response using hasItems matcher.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nget(\"/lotto\").then().assertThat().body(\"lotto.winners.winnerId\", hasItems(23, 54));\n```\n\n----------------------------------------\n\nTITLE: Response Parsing in REST Assured\nDESCRIPTION: Examples of parsing JSON and XML responses using JsonPath and XmlPath respectively.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Example with JsonPath\nString json = get(\"/lotto\").asString();\nList<String> winnerIds = from(json).get(\"lotto.winners.winnerId\");\n    \n// Example with XmlPath\nString xml = post(\"/shopping\").andReturn().body().asString();\nNode category = from(xml).get(\"shopping.category[0]\");\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation in REST Assured\nDESCRIPTION: Example of validating a response against a JSON schema definition stored in the classpath. This requires adding the JSON schema validator module to the classpath and importing the JsonSchemaValidator class.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_83\n\nLANGUAGE: java\nCODE:\n```\nget(\"/products\").then().assertThat().body(matchesJsonSchemaInClasspath(\"products-schema.json\"));\n```\n\n----------------------------------------\n\nTITLE: POST Request with Parameters in REST Assured\nDESCRIPTION: Demonstrates how to make a POST request with multiple query parameters and verify the response contains specific text.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n    param(\"key1\", \"value1\").\n    param(\"key2\", \"value2\").\nwhen().\n    post(\"/somewhere\").\nthen().\n    body(containsString(\"OK\"));\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication in REST Assured\nDESCRIPTION: Demonstrates how to perform HTTP Basic Authentication in a GET request.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ngiven().auth().basic(username, password).when().get(\"/secured\").then().statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Logging Request and Response Details in REST Assured\nDESCRIPTION: Shows how to use the enhanced logging capabilities to log different aspects of requests and responses, such as bodies, headers, and cookies.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_113\n\nLANGUAGE: java\nCODE:\n```\ngiven().log().body(). .. // Log the _request_ body in versions >= 1.5\n```\n\nLANGUAGE: java\nCODE:\n```\nexpect().log().body() .. // Log the response body in versions >= 1.5\n```\n\nLANGUAGE: java\nCODE:\n```\ngiven().log().headers(). .. // Log only the request headers\n```\n\nLANGUAGE: java\nCODE:\n```\nexpect().log().headers(). .. // Log only the response headers\n```\n\nLANGUAGE: java\nCODE:\n```\nexpect().log().ifError(). ..\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request with JSON Assertion in REST Assured\nDESCRIPTION: Demonstrates a simple GET request to /lotto endpoint with JSON response validation using body assertion.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nget(\"/lotto\").then().assertThat().body(\"lotto.lottoId\", equalTo(5));\n```\n\n----------------------------------------\n\nTITLE: Using Path Methods for Response Parsing in Rest Assured\nDESCRIPTION: Examples of using path methods to directly parse a single path from the response. The content-type determines whether JsonPath or XmlPath is used, or it can be specified explicitly.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_121\n\nLANGUAGE: java\nCODE:\n```\nString messageBody = get(\"/message\").path(\"message.body\");\n```\n\nLANGUAGE: java\nCODE:\n```\nString messageBody = get(\"/message\").jsonPath().getString(\"message.body\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in RestAssuredMockMvc\nDESCRIPTION: Demonstrates how to set up authentication in RestAssuredMockMvc for testing Spring MVC controllers, including request-specific authentication and global authentication configuration.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_78\n\nLANGUAGE: java\nCODE:\n```\ngiven().auth().principal(..);\n\nRestAssuredMockMvc.authentication = principal(\"username\", \"password\");\n\nMockMvcRequestSpecification spec = new MockMvcRequestSpecBuilder.setAuth(principal(\"username\", \"password\")).build();\n```\n\n----------------------------------------\n\nTITLE: XML XPath Validation in REST Assured\nDESCRIPTION: Shows how to make a POST request with parameters and validate the XML response using XPath expressions.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n    params(\"firstName\", \"John\", \"lastName\", \"Doe\").\nwhen().\n    post(\"/greetMe\").\nthen().\n    body(hasXPath(\"/greeting/firstName[text()='John']\")).\n```\n\n----------------------------------------\n\nTITLE: Configuring ResponseSpec with Logging\nDESCRIPTION: Example showing how to create a ResponseSpecification with logging enabled using the ResponseSpecBuilder. This allows setting up reusable response specifications with consistent logging behavior.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nResponseSpecification spec = new ResponseSpecBuilder().log(LogDetail.ALL).build();\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Request Specification in REST Assured\nDESCRIPTION: Example showing how to create a reusable request specification in REST Assured using RequestSpecBuilder.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_157\n\nLANGUAGE: java\nCODE:\n```\nRequestSpecification requestSpec = new RequestSpecBuilder().addParameter(\"parameter1\", \"value1\").build();\n\n  given().\n          spec(requestSpec).\n  expect().\n          body(\"x.y.z\", equalTo(\"something\")).\n  when().\n          get(\"/something\");\n```\n\n----------------------------------------\n\nTITLE: Parsing XML Response with XmlPath in REST Assured\nDESCRIPTION: Shows how to use the XmlPath object to easily parse an XML response from a POST request. The example extracts the 'firstName' from the 'greeting' element in the response.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_164\n\nLANGUAGE: Java\nCODE:\n```\nString xml = post(\"/greeting\").asString();\nString firstName = with(xml).get(\"greeting.firstName\");\n```\n\n----------------------------------------\n\nTITLE: Making Requests to the Root Resource in REST Assured\nDESCRIPTION: Example showing how to make a request to the root resource by calling the HTTP method without parameters, and then extracting a value from the response using a path expression.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_88\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.baseURI = \"http://localhost:8080/hello\";\nString y = get().path(\"x.y\");\n```\n\n----------------------------------------\n\nTITLE: Mixing Text and Path Assertions in REST Assured\nDESCRIPTION: Example showing how to combine string content assertions with JSON path assertions in a single verification chain, using string containment check and path-based item verification.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_82\n\nLANGUAGE: java\nCODE:\n```\nget(\"/lotto\").then().body(containsString(\"\\\"numbers\\\":[52\")).and().body(\"lotto.winners.winnerId\", hasItems(23, 54));\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Response Specification in REST Assured\nDESCRIPTION: Example showing how to create a reusable response specification in REST Assured using ResponseSpecBuilder.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_156\n\nLANGUAGE: java\nCODE:\n```\nResponseSpecification responseSpec = new ResponseSpecBuilder().expectStatusCode(200).expectBody(\"x.y.size()\", is(2)).build();\n\n  expect().\n         spec(responseSpec).\n         body(\"x.y.z\", equalTo(\"something\")).\n  when().\n         get(\"/something\");\n```\n\n----------------------------------------\n\nTITLE: Mapping Response Body to Objects in Rest Assured\nDESCRIPTION: Examples of mapping response content directly to Java objects using object mappers like Jackson, Gson or JAXB. This requires the response content-type to be defined or an explicit mapper to be specified.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_119\n\nLANGUAGE: java\nCODE:\n```\nSomeObject someObject = get(\"/something\").as(SomeObject.class);\n```\n\nLANGUAGE: java\nCODE:\n```\nSomeObject someObject = get(\"/something\").as(SomeObject.class, ObjectMapper.GSON);\n```\n\n----------------------------------------\n\nTITLE: Using Root Path with Multiple Body Assertions in REST Assured\nDESCRIPTION: Demonstrates how to use the root path method with multiple body expectations in a single request, applying the root path to all expectations.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_108\n\nLANGUAGE: java\nCODE:\n```\nexpect().\n       root(\"store.book\").\n       body(\n          \"category.size()\", equalTo(4),\n          \"author.size()\", equalTo(4)\n       ).\nwhen().\n       get(\"/jsonStore\");\n```\n\n----------------------------------------\n\nTITLE: Using ResponseAwareMatcher with Java 8 Lambda Expressions\nDESCRIPTION: Shows how ResponseAwareMatcher can be used with Java 8 lambda expressions for more concise code. The matcher can access the response object to create dynamic assertions based on response data.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nwhen().\n       get(\"/game\").\nthen().\n       body(\"_links.self.href\", response -> equalTo(\"http://localhost:8080/\" + response.path(\"id\")));\n```\n\n----------------------------------------\n\nTITLE: Using XSD Validation with Custom Resource Resolver in REST Assured\nDESCRIPTION: Shows how to validate XML responses against an XSD schema while providing a custom resource resolver to handle schema references.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_75\n\nLANGUAGE: java\nCODE:\n```\nget(\"/x\").then().body(matchesXsd(load(\"main.xsd\")).using(new ClasspathResourceResolver()));\n```\n\n----------------------------------------\n\nTITLE: Mapping Java Objects to Request Body in Rest Assured\nDESCRIPTION: Examples of mapping Java objects to JSON or XML in request bodies using content-type or explicit object mappers. This simplifies sending complex data structures in requests.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_120\n\nLANGUAGE: java\nCODE:\n```\ngiven().contentType(\"application/json\").and().body(someObject).when().post(\"/something\");\n```\n\nLANGUAGE: java\nCODE:\n```\ngiven().body(someObject, ObjectMapper.JACKSON).when().post(\"/something\");\n```\n\nLANGUAGE: java\nCODE:\n```\ngiven().body(42).when().post(\"/somewhere\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ResponseAwareMatcher in REST Assured\nDESCRIPTION: This snippet demonstrates how to implement a custom ResponseAwareMatcher to verify that an 'href' attribute ends with the value of the 'userId' attribute from the same response.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_79\n\nLANGUAGE: java\nCODE:\n```\nget(\"/x\").then().body(\"href\", new ResponseAwareMatcher<Response>() {\n                                        public Matcher<?> matcher(Response response) {\n                                              return equalTo(\"http://localhost:8080/\" + response.path(\"userId\"));\n                                        }\n                                  });\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Value Parameters with Var-Args in REST Assured\nDESCRIPTION: Example showing how to define multi-value parameters using var-args in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_134\n\nLANGUAGE: java\nCODE:\n```\nwith().param(\"list\", \"1\", \"2\", \"3\"). ..\n```\n\n----------------------------------------\n\nTITLE: Using Session Filter in REST Assured for Session Handling\nDESCRIPTION: Demonstrates how to maintain an authenticated session across multiple requests by using SessionFilter, which automatically applies the session ID from previous responses.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_102\n\nLANGUAGE: Java\nCODE:\n```\nSessionFilter sessionFilter = new SessionFilter();\n\ngiven().\n        auth().form(\"John\", \"Doe\").\n        filter(sessionFilter).\nexpect().\n        statusCode(200).\nwhen().\n        get(\"/formAuth\");\n\ngiven().\n        filter(sessionFilter). // Reuse the same session filter instance to automatically apply the session id from the previous response\nexpect().\n        statusCode(200).\nwhen().\n        get(\"/formAuth\");\n```\n\n----------------------------------------\n\nTITLE: Composing ResponseAwareMatchers with ResponseAwareMatcherComposer\nDESCRIPTION: Demonstrates how to compose multiple ResponseAwareMatchers using the ResponseAwareMatcherComposer utility. This allows for complex conditional assertions that can access response data.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_62\n\nLANGUAGE: java\nCODE:\n```\nwhen().\n       get(\"/game\").\nthen().\n       body(\"_links.self.href\", and(responseAwareMatcher1, containsString(\"something\"), or(responseAwareMatcher2, responseAwareMatcher3, endsWith(\"x\"))));\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Keystore in REST Assured\nDESCRIPTION: Example showing how to specify a Java keystore when using SSL to handle invalid certificates.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_132\n\nLANGUAGE: java\nCODE:\n```\ngiven().keystore(\"/pathToJksInClassPath\", <password>)\n```\n\n----------------------------------------\n\nTITLE: Validating Response Specifications in REST Assured\nDESCRIPTION: Example showing how to create and use a response specification to validate both status code and body content. The specification is created using ResponseSpecBuilder and passed to the request verification chain.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_81\n\nLANGUAGE: java\nCODE:\n```\nResponseSpecification specification = new ResponseSpecBuilder().expectStatusCode(200).expectBody(\"greeting\", equalTo(\"Greetings John Doe\")).build();\ngiven().\n        param(\"firstName\", \"John\").\n        param(\"lastName\", \"Doe\").\nwhen().\n        get(\"/greet\").\nthen().\n        spec(specification);\n```\n\n----------------------------------------\n\nTITLE: Declaring XML Namespaces in REST Assured for Body Validation\nDESCRIPTION: Shows how to declare XML namespaces in REST Assured configuration to properly validate XML elements with namespace prefixes in the body expectation.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_99\n\nLANGUAGE: Java\nCODE:\n```\ngiven().\n        config(newConfig().xmlConfig(xmlConfig().declareNamespace(\"ns\", \"http://localhost/\"))).\nexpect().\n        body(\"bar.text()\", equalTo(\"sudo make me a sandwich!\")).\n        body(\":bar.text()\", equalTo(\"sudo \")).\n        body(\"ns:bar.text()\", equalTo(\"make me a sandwich!\")).\nwhen().\n        get(\"/namespace-example\");\n```\n\n----------------------------------------\n\nTITLE: Multi-part Form Data Upload in Rest Assured\nDESCRIPTION: Example of uploading files using multi-part form data upload. The multiPart method is used to specify files, input streams, byte arrays, or text to be uploaded.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_122\n\nLANGUAGE: java\nCODE:\n```\ngiven().multiPart(new File(\"/home/user/myFile.txt\").when().post(\"/upload\");\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration with RestAssuredConfig in REST Assured\nDESCRIPTION: Demonstrates various ways to configure REST Assured settings using RestAssuredConfig, including specific request configuration and global configuration.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_112\n\nLANGUAGE: java\nCODE:\n```\ngiven().config(newConfig().redirect(redirectConfig().followRedirects(false))). ..\n```\n\nLANGUAGE: java\nCODE:\n```\nRequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().redirect(redirectConfig().followRedirects(false))).build();\n```\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config = config().redirect(redirectConfig().followRedirects(true).and().maxRedirects(0));\n```\n\n----------------------------------------\n\nTITLE: Configuring XmlPath with Custom Settings in REST Assured\nDESCRIPTION: Demonstrates how to supply custom XmlPathConfig when extracting XmlPath from a response, allowing for namespace declaration and other XML processing options.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_100\n\nLANGUAGE: Java\nCODE:\n```\nXmlPath xmlPath = get(\"/namespace-example\").xmlPath(xmlPathConfig().with().declaredNamespace(\"ns\", \"http://localhost/\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Response Body as String in REST Assured\nDESCRIPTION: Demonstrates how to retrieve the entire response body as a string using REST Assured. This is useful for debugging or using third-party tools for response validation.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_167\n\nLANGUAGE: Java\nCODE:\n```\nget(\"/something\").asString()\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Logging in REST Assured\nDESCRIPTION: Demonstrates how to set up conditional logging in REST Assured that will only log request or response details if validation fails, which helps with debugging while keeping logs clean.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_76\n\nLANGUAGE: java\nCODE:\n```\ngiven().log().ifValidationFails(). ..\n\nRestAssured.config = RestAssured.config().logConfig(logConfig().enableLoggingOfRequestAndResponseIfValidationFails());\n\nRestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n```\n\n----------------------------------------\n\nTITLE: Validating XML Body with XSD in REST Assured\nDESCRIPTION: Example showing how to validate an XML response body against an XSD schema in REST Assured using a matcher.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_161\n\nLANGUAGE: java\nCODE:\n```\nexpect().body(matchesXsd(xsd)).when().get(\"/carRecords\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Update Strategies\nDESCRIPTION: Examples showing how to configure how parameter types should be updated, either by merging (default) or replacing values.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_55\n\nLANGUAGE: java\nCODE:\n```\n// Default behavior (MERGE)\ngiven().queryParam(\"param1\", \"value1\").queryParam(\"param1\", \"value2\").when().get(\"/x\");\n// Results in param1=value1&param1=value2\n\n// Configure to replace parameters instead\ngiven().\n        config(config().paramConfig(paramConfig().queryParamsUpdateStrategy(REPLACE))).\n        queryParam(\"param1\", \"value1\").\n        queryParam(\"param1\", \"value2\").\nwhen().\n        get(\"/x\");\n// Results in param1=value2\n\n// Configure to replace all parameter types\ngiven().config(config().paramConfig(paramConfig().replaceAllParameters()));\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Type Serialization with EncoderConfig\nDESCRIPTION: Example of how to specify serialization format for a custom content type. This configuration tells REST Assured to encode 'my-custom-content-type' as text content.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_59\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n        config(RestAssured.config().encoderConfig(encoderConfig().encodeContentTypeAs(\"my-custom-content-type\", ContentType.TEXT))).\n        contentType(\"my-custom-content-type\").\n        content(\"Some text content\").\nwhen().\n        post(\"/somewhere\"). ..\n```\n\n----------------------------------------\n\nTITLE: Configuring XPath with Namespaces in REST Assured\nDESCRIPTION: Demonstrates how to use Hamcrest's XPath matcher with namespaces by configuring REST Assured to be namespace aware, allowing for XML validation with namespaces.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_98\n\nLANGUAGE: Java\nCODE:\n```\ngiven().\n        config(newConfig().xmlConfig(xmlConfig().with().namespaceAware(true))).\nexpect().\n        body(hasXPath(\"/db:package-database\", namespaceContext)).\nwhen().\n        get(\"/package-db-xml\");\n```\n\n----------------------------------------\n\nTITLE: Setting Default Content Charset Configuration in REST Assured\nDESCRIPTION: Demonstrates how to configure the default content charset encoding for REST Assured requests using the EncoderConfig.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_105\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config = newConfig().encoderConfig(encoderConfig().defaultContentCharset(\"US-ASCII\"));\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response with JsonPath in REST Assured\nDESCRIPTION: Demonstrates the use of JsonPath object to parse a JSON response from a POST request. The example extracts the 'firstName' from the 'greeting' object in the response.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_165\n\nLANGUAGE: Java\nCODE:\n```\nString json = post(\"/greeting\").asString();\nString firstName = with(json).get(\"greeting.firstName\");\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin Extensions for REST Assured MockMvc\nDESCRIPTION: Example of using the Kotlin extensions for Spring MockMvc module, which provides a more idiomatic Kotlin API with Given-When-Then syntax and value extraction.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RestAssuredMockMvcKotlinExtensionsTest {\n\n        @Test\n        fun example() {\n            val mockMvc =\n                MockMvcBuilders.standaloneSetup(GreetingController())\n                    .build()\n\n            val id: Int =\n            Given {\n                mockMvc(mockMvc)\n                param(\"name\", \"Johan\")\n            } When {\n                get(\"/greeting\")\n            } Then {\n                body(\n                    \"id\", Matchers.equalTo(1),\n                    \"content\", Matchers.equalTo(\"Hello, Johan!\")\n                )\n            } Extract {\n                path(\"id\")\n            }\n\n            assertThat(id).isEqualTo(1)\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Headers from Response in REST Assured\nDESCRIPTION: Example showing how to get header values from a response in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_160\n\nLANGUAGE: java\nCODE:\n```\nString headerValue = get(\"/something\").andReturn().header(\"headerName\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Hostname Verification for Certificate Authentication\nDESCRIPTION: Example of configuring certificate authentication to allow all hostnames (disabling hostname verification) using certificate authentication settings, which is useful for testing scenarios.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_86\n\nLANGUAGE: java\nCODE:\n```\ngiven().auth().certificate(certUrl, password, certAuthSettings().with().allowAllHostnames(). ..\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Array Elements in REST Assured\nDESCRIPTION: Shows how to access and verify elements in a JSON array using REST Assured. The example checks the first element of the 'items' array in the response body.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_166\n\nLANGUAGE: Java\nCODE:\n```\nexpect().body(\"items.get(0)\", equalTo(\"firstIndex\")).when().get(\"/something\");\n```\n\n----------------------------------------\n\nTITLE: Using Root Path Arguments in REST Assured Body Expectations\nDESCRIPTION: Shows how to use body expectations with empty paths and arguments, allowing for dynamic path construction during assertion validation.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_95\n\nLANGUAGE: Java\nCODE:\n```\nexpect().root(\"x.y.%s\").body(withArgs(\"z\"), equalTo(\"w\")). ..\n```\n\n----------------------------------------\n\nTITLE: Using HTMLPath in REST Assured for HTML Parsing\nDESCRIPTION: Shows how to use the htmlPath method to easily extract values from HTML responses without needing compatibility mode configuration.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_97\n\nLANGUAGE: Java\nCODE:\n```\nString pageTitle = get(\"/index.html\").htmlPath().getString(\"html.head.title\");\n```\n\n----------------------------------------\n\nTITLE: Using Preemptive Basic Authentication for Proxies\nDESCRIPTION: Example demonstrating how to specify preemptive basic authentication for proxies.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nimport static com.jayway.restassured.specification.ProxySpecification.auth;\n\ngiven().proxy(auth(\"username\", \"password\")).when();\n```\n\n----------------------------------------\n\nTITLE: Using Body Path Assertions in REST Assured\nDESCRIPTION: Example showing how to make assertions on specific body paths in REST Assured without using root path.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_153\n\nLANGUAGE: java\nCODE:\n```\nexpect().\n           body(\"x.y.firstName\", is(..)).\n           body(\"x.y.lastName\", is(..)).\n           body(\"x.y.age\", is(..)).\n           body(\"x.y.gender\", is(..)).\n  when().\n           get(\"/something\");\n```\n\n----------------------------------------\n\nTITLE: Verifying Header Absence in Rest Assured\nDESCRIPTION: Example of verifying that a header does not exist in the response by expecting it to have a null value.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_129\n\nLANGUAGE: java\nCODE:\n```\nexpect().header(\"someheader\", nullValue())\n```\n\n----------------------------------------\n\nTITLE: Form Authentication in REST Assured\nDESCRIPTION: Example showing how to use form authentication in REST Assured. The library will automatically parse the login page and find the form action and input fields.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_135\n\nLANGUAGE: java\nCODE:\n```\ngiven().auth().form(\"username\", \"password\")...\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonPathConfig to Return Doubles for Numbers\nDESCRIPTION: Configuration to force JsonPath to return all numeric values as doubles. This is useful when working with matchers like 'closeTo' that require specific numeric types.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_60\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config = RestAssured.config().jsonConfig(jsonConfig().numberReturnType(DOUBLE));\n```\n\n----------------------------------------\n\nTITLE: Using Root Path for Body Assertions in REST Assured\nDESCRIPTION: Example showing how to use a root path for body assertions to avoid repetition in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_154\n\nLANGUAGE: java\nCODE:\n```\nexpect().\n           rootPath(\"x.y\").\n           body(\"firstName\", is(..)).\n           body(\"lastName\", is(..)).\n           body(\"age\", is(..)).\n           body(\"gender\", is(..)).\n  when().\n          get(\"/something\");\n```\n\n----------------------------------------\n\nTITLE: Spring Security Form Authentication in REST Assured\nDESCRIPTION: Example showing how to use the pre-defined Spring Security form authentication configuration in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_137\n\nLANGUAGE: java\nCODE:\n```\ngiven().auth().form(\"username\", \"password\", FormAuthConfig.springSecurity())...\n```\n\n----------------------------------------\n\nTITLE: Combining CSRF with Form Authentication\nDESCRIPTION: Shows how to combine CSRF protection with form authentication in version 5.2.0, making it possible to handle secure forms that require both authentication and CSRF validation.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n       csrf(\"/users\").\n       formParm(\"firstName\", \"John\").\n       formParm(\"lastName\", \"Doe\").\n       auth().form(\"j_spring_security_check\", \"j_username\", \"j_password\").\nwhen().\n       post(\"/users\").\nthen().\n       statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Form Authentication in REST Assured\nDESCRIPTION: Shows how to configure REST Assured to log requests and responses generated by the form authentication scheme, which is useful for debugging authentication-related issues.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_73\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n        auth().form(\"John\", \"Doe\", springSecurity().withLoggingEnabled()).\nwhen().\n        get(\"/formAuth\").\nthen().\n        statusCode(200).\n        body(equalTo(\"OK\"));\n```\n\n----------------------------------------\n\nTITLE: Parsing Entire JSON Graph with JsonPath in Rest Assured\nDESCRIPTION: Examples of parsing an entire JSON structure to a List of Map objects. This is done by using an empty string or \"$\" as the path expression.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_127\n\nLANGUAGE: java\nCODE:\n```\nList<Map<String, String>> result = from(json).get(\"$\");\n```\n\nLANGUAGE: java\nCODE:\n```\nList<Map<String, String>> result = from(json).get(\"\");\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonPath with Custom Settings in REST Assured\nDESCRIPTION: Shows how to supply custom JsonPathConfig when extracting JsonPath from a response, allowing for number return type configuration and other JSON processing options.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_101\n\nLANGUAGE: Java\nCODE:\n```\nJsonPath jsonPath = get(\"/namespace-example\").jsonPath(jsonPathConfig().with().numberReturnType(BIG_DECIMAL));\n```\n\n----------------------------------------\n\nTITLE: Using Predefined REST Assured Matchers\nDESCRIPTION: Example of using the built-in 'endsWithPath' matcher to verify that an 'href' attribute ends with the value of the 'userId' attribute, which is a simpler alternative to implementing a custom ResponseAwareMatcher.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_80\n\nLANGUAGE: java\nCODE:\n```\nget(\"/x\").then().body(\"href\", endsWithPath(\"userId\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiPart Settings with MultiPartConfig\nDESCRIPTION: Shows how to customize default filename and control name for multipart requests. This is useful when working with file uploads that require specific naming conventions.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_63\n\nLANGUAGE: java\nCODE:\n```\ngiven().config(config().multiPartConfig(multiPartConfig().with().defaultFileName(\"custom1\").and().defaultControlName(\"custom2\"))). ..\n```\n\n----------------------------------------\n\nTITLE: Using Response Time Measurement in REST Assured\nDESCRIPTION: Examples of how to measure response time using the new time measurement feature added in version 2.8.0. Supports both retrieving time values and validating them using the assertion DSL.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_38\n\nLANGUAGE: java\nCODE:\n```\n// Get response time in milliseconds\nlong timeInMs = get(\"/lotto\").time();\n\n// Get response time in a specific time unit\nlong timeInSeconds = get(\"/lotto\").timeIn(SECONDS);\n\n// Validate response time using the validation DSL\nwhen().\n        get(\"/lotto\").\nthen().\n        time(lessThan(2000L)); // Milliseconds\n\n// Validate response time with a specific time unit\nwhen().\n        get(\"/lotto\").\nthen().\n        time(lessThan(2L), SECONDS);\n```\n\n----------------------------------------\n\nTITLE: Mapping JSON Path to Java Objects in REST Assured\nDESCRIPTION: Shows how to map a JSON path directly to a Java object using JsonPath's getObject method.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_117\n\nLANGUAGE: java\nCODE:\n```\nBook book = from(JSON).getObject(\"store.book[2]\", Book.class);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Response with ResponseBuilder in REST Assured\nDESCRIPTION: Shows how to create a new Response implementation using ResponseBuilder, which is useful when working with filters and modifying server responses.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_109\n\nLANGUAGE: java\nCODE:\n```\nResponse myResponse = new ResponseBuilder().clone(originalResponse).setBody(\"Something\").build();\n```\n\n----------------------------------------\n\nTITLE: Using Mapping Functions for Header Validation\nDESCRIPTION: Example showing how to use a mapping function to convert a header value for validation.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_54\n\nLANGUAGE: java\nCODE:\n```\nwhen().get(\"/something\").then().header(\"Content-Length\", Integer::parseInt, lessThan(1000));\n```\n\n----------------------------------------\n\nTITLE: Using ResponseAwareMatcher for Header Validation\nDESCRIPTION: Demonstrates how to use ResponseAwareMatcher to validate headers based on values from the response body. This example validates that a Location header ends with the ID value extracted from the response JSON.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_30\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n        redirects().follow(false).\nwhen().\n        get(\"/redirect\").\nthen().\n        statusCode(301).\n        header(\"Location\", response -> endsWith(\"/redirect/\"+response.path(\"id\")));\n```\n\n----------------------------------------\n\nTITLE: Setting Default Root Path in REST Assured\nDESCRIPTION: Example showing how to set a default root path for all requests in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_155\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.rootPath = \"x.y\";\n```\n\n----------------------------------------\n\nTITLE: Setting Default Filters in REST Assured\nDESCRIPTION: Example showing how to set default filters for all requests in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_140\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.filters(asList(new MyFilter()));\n```\n\n----------------------------------------\n\nTITLE: Specifying ObjectMapper for Multipart Serialization\nDESCRIPTION: Example demonstrating how to specify which ObjectMapper to use when serializing an object in a multipart request.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nGreeting greeting = new Greeting();\ngreeting.setFirstName(\"John\");\ngreeting.setLastName(\"Doe\");\n\ngiven().\n       multiPart(new MultiPartSpecBuilder(greeting, ObjectMapperType.GSON)\n               .fileName(\"RoleBasedAccessFeaturePlan.csv\")\n               .controlName(\"text\")\n               .mimeType(\"application/vnd.ms-excel\").build()).\nwhen().\n       post(\"/multipart/text\").\nthen().\n       statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Parameters in REST Assured\nDESCRIPTION: Example showing how to specify path parameters in a GET request using REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_131\n\nLANGUAGE: java\nCODE:\n```\nget(\"/{firstName}/{lastName}\");\n```\n\n----------------------------------------\n\nTITLE: Using Preemptive Basic Authentication in REST Assured\nDESCRIPTION: Example showing how to use preemptive basic authentication in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_151\n\nLANGUAGE: java\nCODE:\n```\ngiven().auth().preemptive().basic(\"username\", \"password\").when().get(\"/secured\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect Settings in REST Assured\nDESCRIPTION: Demonstrates how to configure redirect settings using the DSL, including setting maximum redirects and whether to follow redirects.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_110\n\nLANGUAGE: java\nCODE:\n```\ngiven().redirects().max(12).and().redirects().follow(true).when(). ..\n```\n\n----------------------------------------\n\nTITLE: Logging Response for Specific Status Code in REST Assured\nDESCRIPTION: Example showing how to log response bodies only for specific status codes in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_145\n\nLANGUAGE: java\nCODE:\n```\ngiven().filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(302))..\n```\n\n----------------------------------------\n\nTITLE: Extracting Multiple Values from a REST Assured Response\nDESCRIPTION: Example demonstrating how to extract multiple values from a response using the path method repeatedly. Shows calculating minimum and maximum book prices from a JSON response.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_87\n\nLANGUAGE: java\nCODE:\n```\nResponse response = get(\"/jsonStore\");\nfloat minPrice = response.path(\"store.book.price.min()\");\nfloat maxPrice = response.path(\"store.book.price.max()\");\n```\n\n----------------------------------------\n\nTITLE: Using Content Method for Request Body in Rest Assured\nDESCRIPTION: Example of passing string data directly to the content method in the RequestSpecification. This allows setting raw content as the request body.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_123\n\nLANGUAGE: java\nCODE:\n```\ngiven().content(\"{ \\\"message\\\" : \\\"hello world\\n\\\"}\").then().expect().statusCode(200).when().post(\"/json\");\n```\n\n----------------------------------------\n\nTITLE: Setting Keystore for HTTPS in REST Assured\nDESCRIPTION: Shows different ways to specify a keystore for HTTPS requests, including from file system paths and for all requests.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_111\n\nLANGUAGE: java\nCODE:\n```\ngiven().keystore(new File(\"..\"), \"password\"). ..\n```\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.keystore(new File(\"..\"), \"password\"). ..\n```\n\nLANGUAGE: java\nCODE:\n```\ngiven().keystore(\"some/path/my_keystore.jks\", \"password\"). ..\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Value Parameters in GET Request\nDESCRIPTION: Example showing how to use multi-value parameters in a GET request in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_150\n\nLANGUAGE: java\nCODE:\n```\nwith().param(\"list\", \"first\").and().param(\"list\", \"second\").when().get(\"/something\")\n```\n\n----------------------------------------\n\nTITLE: Using Form Parameters in Rest Assured\nDESCRIPTION: Example of explicitly specifying form parameters using the formParam method. This is useful when sending requests with both form parameters and query parameters.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_128\n\nLANGUAGE: java\nCODE:\n```\ngiven().formParam(\"name\", \"value\")\n```\n\n----------------------------------------\n\nTITLE: Working with JSON Paths Containing Hyphens in REST Assured\nDESCRIPTION: Example of automatic escaping for JsonPath fragments containing hyphens and index lookup operators, introduced in version 2.9.0. This improves the handling of JSON paths with special characters.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_39\n\nLANGUAGE: java\nCODE:\n```\n// JSON document\n{ \"some-list\" : [\"one\", \"two\"] }\n\n// Previous way - manual escaping required\nJsonPath jsonPath = ...\nString firstElement = jsonPath.getString(\"'some-list'[0]\"); // one\n\n// New way - no explicit escaping necessary\nString firstElement = jsonPath.getString(\"some-list[0]\"); // one\n\n// If you have a JSON document with a key that contains brackets\n{ \"some-list[0]\" : [\"one\", \"two\"] }\n\n// You would now have to escape it\nString firstElement = jsonPath.getString(\"'some-list[0]'[0]\"); // one\n```\n\n----------------------------------------\n\nTITLE: Deserializing Response to Generic Container Type\nDESCRIPTION: Example showing how to use TypeRef to deserialize a JSON response into a container with a generic type. This allows for type-safe deserialization of collections like List<Map<String, Object>>.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nList<Map<String, Object>> products = get(\"/products\").as(new TypeRef<List<Map<String, Object>>>() {});\n```\n\n----------------------------------------\n\nTITLE: Using 'when' Method for Simple Requests in REST Assured\nDESCRIPTION: Example showing how to use the static 'when' method to create simpler test specifications without request parameters or headers, useful for verifying multiple response attributes.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_90\n\nLANGUAGE: java\nCODE:\n```\nwhen().\n       get(\"/x\").\nthen().\n       body(\"x.y.z1\", equalTo(\"Z1\")).\n       body(\"x.y.z2\", equalTo(\"Z2\"));\n```\n\n----------------------------------------\n\nTITLE: Getting Status Line and Status Code in REST Assured\nDESCRIPTION: Example showing how to get the status line and status code from a response in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_159\n\nLANGUAGE: java\nCODE:\n```\nResponse response = get(\"/something\");\nString statusLine = response.getStatusLine();\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Decoder Charset in REST Assured\nDESCRIPTION: Shows how to change the default decoding content charset from ISO-8859-1 to UTF-8 using the DecoderConfig.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_107\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config = newConfig().decoderConfig(decoderConfig().defaultContentCharset(\"UTF-8\"));\n```\n\n----------------------------------------\n\nTITLE: Depth-first XML Parsing with XmlPath in Rest Assured\nDESCRIPTION: Example of using double-star notation for depth-first parsing of XML. This allows finding elements anywhere in the XML hierarchy that match specific criteria.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_124\n\nLANGUAGE: java\nCODE:\n```\nint chocolatePrice = from(XML).getInt(\"shopping.**.find { it.name == 'Chocolate' }.price\");\n```\n\n----------------------------------------\n\nTITLE: Using Predefined HTTP Methods in REST Assured\nDESCRIPTION: Shows how to use predefined HTTP methods from the Method enum when making requests, providing a type-safe alternative to string-based method specification.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nwhen().request(Method.GET, \"/lotto\").then().statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Using Multi-expectation Body Assertions with Arguments\nDESCRIPTION: Example showing how to specify multiple body assertions with arguments in REST Assured. The code demonstrates using the withArgs method to validate different price values for books by specific authors.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nwhen().\n        get(\"/jsonStore\").\nthen().\n        rootPath(\"store.book.find { it.author == '%s' }\").\n        body(\n                \"price\", withArgs(\"Nigel Rees\"), is(8.95f),\n                \"price\", withArgs(\"Evelyn Waugh\"), is(12.99f)\n        );\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters with Response Path Method\nDESCRIPTION: Example demonstrating how to use string format arguments with the path method when extracting values from a response, allowing for dynamic path expressions.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_91\n\nLANGUAGE: java\nCODE:\n```\nString z = get(\"/x\").path(\"x.y.%s\", \"z\");\n```\n\n----------------------------------------\n\nTITLE: JsonPath Object Mapping Example\nDESCRIPTION: Demonstrates how to map JSON response data to Java objects using JsonPath\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nJsonPath.from(json).getList(\"store.books\", Book.class)\n```\n\n----------------------------------------\n\nTITLE: Using Path Arguments with withArgs Method in Rest Assured\nDESCRIPTION: Examples of using parameterized path expressions with the withArgs method. This allows reusing complex path expressions by supplying arguments to placeholders in the path.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_126\n\nLANGUAGE: java\nCODE:\n```\nexpect().\n   root(\"filters.filterConfig[%d].filterConfigGroups.find { it.name == 'GroupName' }.includes\").\n   body(\"\", withArgs(0), hasItem(\"first\")).\n   body(\"\", withArgs(1), hasItem(\"second\"));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Encoder Config for Multipart Serialization\nDESCRIPTION: Example showing how to configure custom encoding for multipart content based on MIME type.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nGreeting greeting = new Greeting();\ngreeting.setFirstName(\"John\");\ngreeting.setLastName(\"Doe\");\n\ngiven().\n       config(config().encoderConfig(encoderConfig().encodeContentTypeAs(\"application/vnd.ms-excel\", ContentType.JSON))).\n       multiPart(new MultiPartSpecBuilder(greeting)\n               .fileName(\"RoleBasedAccessFeaturePlan.csv\")\n               .controlName(\"text\")\n               .mimeType(\"application/vnd.ms-excel\").build()).\nwhen().\n       post(\"/multipart/text\").\nthen().\n       statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Path Arguments with REST Assured\nDESCRIPTION: Shows how to specify arguments for root or append paths at a later stage using withArgs() method, allowing for more flexible and reusable path specifications in REST Assured test assertions.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_72\n\nLANGUAGE: java\nCODE:\n```\nwhen().\n     get(\"/jsonStore\").\nthen().\n     root(\"store.%s\", withArgs(\"book\")).\n     body(\"category.size()\", equalTo(4)).\n     appendRoot(\"%s.%s\", withArgs(\"author\")).\n     body(withArgs(\"size()\"), equalTo(4)); // The last argument defined in \"appendRoot\" is applied here\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Filter in REST Assured\nDESCRIPTION: Example showing how to add a custom filter to a request in REST Assured. Filters can be used to inspect and alter requests and responses.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_139\n\nLANGUAGE: java\nCODE:\n```\ngiven().filter(new MyFilter()). ..\n```\n\n----------------------------------------\n\nTITLE: Querying XML Attributes in REST Assured\nDESCRIPTION: Demonstrates how to expect and verify XML attributes in a response using REST Assured. This snippet shows the syntax for checking the 'firstName' attribute of a 'name' element within a 'greeting' structure.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_163\n\nLANGUAGE: Java\nCODE:\n```\nexpect().body(\"greeting.name.@firstName\", equalTo(\"John\")).when().get(\"/greetXMLAttribute?firstName=John&lastName=Doe\");\n```\n\n----------------------------------------\n\nTITLE: Using XML Namespace in GPath Expressions\nDESCRIPTION: Examples showing how to use XML namespaces in GPath expressions for XML response validation.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_53\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n        config(newConfig().xmlConfig(xmlConfig().declareNamespace(\"ns\", \"http://localhost/\"))).\nwhen().\n        get(\"/namespace-example\").\nthen().\n        body(\"foo.bar.text()\", equalTo(\"sudo make me a sandwich!\")).\n        body(\":foo.:bar.text()\", equalTo(\"sudo \")).\n        body(\"foo.ns:bar.text()\", equalTo(\"make me a sandwich!\"));\n```\n\n----------------------------------------\n\nTITLE: Using Response Logging Filter in REST Assured\nDESCRIPTION: Example showing how to use the ResponseLoggingFilter to log all response bodies in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_144\n\nLANGUAGE: java\nCODE:\n```\ngiven().filter(ResponseLoggingFilter.loggingFilter())..\n```\n\n----------------------------------------\n\nTITLE: Using onFailMessage Builder in Response Specification\nDESCRIPTION: Demonstrates how to add custom error messages that will be shown when assertions fail, which helps to distinguish between different test failures.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nwhen().\n        get().\n  then().\n        onFailMessage(\"Some specific message\").\n        statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Blacklisting Headers in Request Logs\nDESCRIPTION: Demonstrates how to configure logging to hide sensitive header values by replacing them with a blacklisted message in the logs.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_10\n\nLANGUAGE: java\nCODE:\n```\ngiven().config(config().logConfig(logConfig().blacklistHeader(\"Accept\"))). ..\n```\n\n----------------------------------------\n\nTITLE: Using Error Logger Filter in REST Assured\nDESCRIPTION: Example showing how to use the ErrorLogger filter to log response bodies when errors occur (status codes 400-500) in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_143\n\nLANGUAGE: java\nCODE:\n```\ngiven().filter(ErrorLogger.errorLogger())..\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple LogDetails to RequestLoggingFilter in Java\nDESCRIPTION: Shows how to configure a RequestLoggingFilter with multiple LogDetail parameters to log various aspects of HTTP requests including method, headers, and body.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ngiven().filter(RequestLoggingFilter.with(LogDetail.METHOD, LogDetail.HEADERS, LogDetail.BODY)).when(). ..\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Authentication with CSRF Support in Rest Assured\nDESCRIPTION: Demonstrates how to enable CSRF (Cross-Site Request Forgery) protection when using form authentication in Rest Assured. This example uses auto-detection of the CSRF token field.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_69\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n        auth().form(\"John\", \"Doe\", formAuthConfig().withAutoDetectionOfCsrf()).\nwhen().\n        get(\"/formAuthCsrf\");\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Value Parameters with List in REST Assured\nDESCRIPTION: Example showing how to define multi-value parameters using a List in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_133\n\nLANGUAGE: java\nCODE:\n```\nwith().param(\"list\", asList(\"1\", \"2\", \"3\")). ..\n```\n\n----------------------------------------\n\nTITLE: Using Detailed Cookie Matcher for Advanced Cookie Validation\nDESCRIPTION: Example of using the detailed cookie matcher to verify specific cookie attributes like maxAge, instead of just matching the cookie value. This allows for more comprehensive cookie validation.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\ngiven().\n    get(\"/multiCookie\").\nthen()\n    cookie(\"cookie1\", detailedCookie().maxAge(1234567));\n```\n\n----------------------------------------\n\nTITLE: Getting Response Body After Using Body Expectations in REST Assured\nDESCRIPTION: Example showing how to get the response body as a string after using body expectations in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_158\n\nLANGUAGE: java\nCODE:\n```\nString body = expect().body(\"x.y.z\", equalTo(\"something\")).when().get(\"/x\").andReturn().body().asString();\n```\n\n----------------------------------------\n\nTITLE: Using CSRF Protection with REST Assured\nDESCRIPTION: Demonstrates the improved CSRF support in version 5.2.0, which allows automatic handling of cross-site request forgery tokens by making a preliminary GET request to retrieve the token.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n       csrf(\"/users\").\n       formParm(\"firstName\", \"John\").\n       formParm(\"lastName\", \"Doe\").\nwhen().\n       post(\"/users\").\nthen().\n       statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Using onFailMessage for Improved Test Failure Messages\nDESCRIPTION: Demonstrates the onFailMessage feature added in version 5.3.2, which allows specifying a custom message to be displayed when a test fails.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nwhen().get(\"/somewhere\").then().onFailMessage(\"My fail message\").statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Serializing Objects to Parameters in REST Assured\nDESCRIPTION: Shows how to serialize a Java object to JSON when sending it as a form parameter, based on the specified content type.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_114\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n        contentType(\"application/json\").\n        queryParam(\"category\", \"Games\").\n        formParam(\"object\", new GameObject(..)). // GameObject will be serialized to JSON\nwhen().\n        post(\"/somewhere\");\n```\n\n----------------------------------------\n\nTITLE: Setting Default Form Authentication in REST Assured\nDESCRIPTION: Example showing how to set form authentication as the default authentication method for all requests in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_138\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.authentication = form(\"username\", \"password\");\n```\n\n----------------------------------------\n\nTITLE: Using REST Assured with Kotlin Extensions\nDESCRIPTION: Example demonstrating the Kotlin extensions for REST Assured, which provides a more fluent API with better error reporting. The code shows how to make a PUT request and extract a field from the response.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nval message: String =\nGiven {\n    port(7000)\n    header(\"Header\", \"Header\")\n    body(\"hello\")\n} When {\n    put(\"/the/path\")\n} Then {\n    statusCode(200)\n    body(\"message\", equalTo(\"Another World\"))\n} Extract {\n    path(\"message\")\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Default Content Charset from ISO-8859-1 to UTF-8 in REST Assured\nDESCRIPTION: Shows how to override the default ISO-8859-1 content encoding charset to UTF-8 using the EncoderConfig.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_106\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config = newConfig().encoderConfig(encoderConfig().defaultContentCharset(\"UTF-8\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy Support in REST Assured\nDESCRIPTION: Demonstrates various methods to configure proxy settings in REST Assured, including per-request configuration, global configuration, and using a RequestSpecification.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_74\n\nLANGUAGE: java\nCODE:\n```\ngiven().proxy(\"localhost\", 8888). ..\n\nRestAssured.proxy(\"localhost\", 8888);\nRestAssured.proxy = host(\"localhost\").withPort(8888); // \"host\" is statically imported from com.jayway.restassured.specification.ProxySpecification.\n\nRequestSpecification specification = new RequestSpecBuilder().setProxy(\"localhost\").build();\ngiven().spec(specification). ..\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Rest Assured\nDESCRIPTION: Examples of specifying path parameters in requests. Path parameters can be provided directly in the request method or using the pathParam method.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_130\n\nLANGUAGE: java\nCODE:\n```\nget(\"/{firstName}/{lastName}\", \"John\", \"Doe\")\n```\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n        pathParam(\"firstName\", \"John\").\n        pathParam(\"lastName\", \"Doe\").\nwhen().\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Instance Reuse in REST Assured\nDESCRIPTION: Demonstrates how to configure REST Assured to reuse the HTTP client instance between requests instead of creating a new one for each request, which can improve performance.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_94\n\nLANGUAGE: Java\nCODE:\n```\nRestAssured.config = newConfig().httpClient(httpClientConfig().reuseHttpClientInstance());\n```\n\n----------------------------------------\n\nTITLE: Setting Default Preemptive Basic Authentication in REST Assured\nDESCRIPTION: Example showing how to set preemptive basic authentication as the default authentication method for all requests in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_152\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.authentication = preemptive().basic(\"username\", \"password\");\n```\n\n----------------------------------------\n\nTITLE: Using Custom HTTP Methods in REST Assured\nDESCRIPTION: Demonstrates how to use custom HTTP methods/verbs with REST Assured by utilizing the 'request method' in the DSL. This allows for testing with non-standard HTTP methods beyond GET, POST, etc.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nwhen().request(\"CONNECT\", \"/somewhere\").then().statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Assured Global Settings\nDESCRIPTION: Example showing how to configure REST Assured globally to handle BigDecimal conversions for JSON responses.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_104\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config = new RestAssuredConfig().jsonPathConfig(new JsonPathConfig(..));\n```\n\n----------------------------------------\n\nTITLE: Using FilterContext Methods for Request Path and URI\nDESCRIPTION: Examples showing the various methods available in FilterContext for accessing request path and URI information.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_44\n\nLANGUAGE: java\nCODE:\n```\n// FilterContext request path and URI methods\nString path = filterContext.getRequestPath(); // Returns only the path\nString uri = filterContext.getRequestURI(); // Returns the entire URI\nString originalPath = filterContext.getOriginalRequestPath(); // Returns path before parameters applied\n\n// Deprecated method\n// String completePath = filterContext.getCompleteRequestPath(); // Use getRequestURI instead\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonPath Settings in REST Assured\nDESCRIPTION: Examples showing how to configure JsonPath settings both statically and per instance to handle BigDecimal conversions.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_103\n\nLANGUAGE: java\nCODE:\n```\nJsonPath.config = new JsonPathConfig(..);\n```\n\nLANGUAGE: java\nCODE:\n```\nnew JsonPath().using(new JsonPathConfig(..)).get(..);\n```\n\n----------------------------------------\n\nTITLE: Sending Detailed Cookies in REST Assured\nDESCRIPTION: Shows how to create and send detailed cookies with additional attributes like secure flag, comments, and expiry dates.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_116\n\nLANGUAGE: java\nCODE:\n```\nCookie someCookie = new Cookie.Builder(\"some_cookie\", \"some_value\").setSecured(true).build();\ngiven().cookie(someCookie).and().expect().body(equalTo(\"x\")).when().get(\"/cookie\");\n```\n\nLANGUAGE: java\nCODE:\n```\nCookie cookie1 =  Cookie.Builder(\"username\", \"John\").setComment(\"comment 1\").build();\nCookie cookie2 =  Cookie.Builder(\"token\", 1234).setComment(\"comment 2\").build();\nCookies cookies = new Cookies(cookie1, cookie2);\ngiven().cookies(cookies).then().expect().body(equalTo(\"username, token\")).when().get(\"/cookie\");\n```\n\n----------------------------------------\n\nTITLE: Mixing Form and Query Parameters in POST Request\nDESCRIPTION: Example showing how to mix form and query parameters when using the POST method in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_149\n\nLANGUAGE: java\nCODE:\n```\nwith().param(\"firstName\", \"John\").and().queryParam(\"lastName\", \"Doe\").expect().body(\"greeting.lastName\", equalTo(\"Doe\")).post(\"/greetXML\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Validation in REST Assured\nDESCRIPTION: Shows how to configure REST Assured to use relaxed HTTPS validation for testing with self-signed or invalid certificates, eliminating the need to specify keystores or trust stores.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_77\n\nLANGUAGE: java\nCODE:\n```\ngiven().relaxedHTTPSValidation().when().get(\"https://some-url-with-invalid-cert.com\"). ..\n\nRestAssured.useRelaxedHTTPValidation();\n```\n\n----------------------------------------\n\nTITLE: Custom Form Authentication Configuration in REST Assured\nDESCRIPTION: Example showing how to supply a custom FormAuthConfig for form authentication in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_136\n\nLANGUAGE: java\nCODE:\n```\ngiven().auth().form(\"username\", \"password\", new FormAuthConfig(..))..\n```\n\n----------------------------------------\n\nTITLE: Printing Response After Request in REST Assured\nDESCRIPTION: Example showing how to print the response after a request if expectations pass in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_148\n\nLANGUAGE: java\nCODE:\n```\nexpect().body(\"greeting\", equalTo(\"Greetings John Doe\")).when().get(\"/greet?firstName=John&lastName=Doe\").print();\n```\n\n----------------------------------------\n\nTITLE: Logging Response Using Hamcrest Matcher in REST Assured\nDESCRIPTION: Example showing how to log responses using a Hamcrest matcher to match status codes in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_146\n\nLANGUAGE: java\nCODE:\n```\ngiven().filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(greaterThan(200)))..\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON-B as Default Object Mapper in REST Assured\nDESCRIPTION: Shows how to configure REST Assured to use Jakarta EE JSON Binding (JSON-B) as the default object mapper type for serialization and deserialization.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config = RestAssured.config.objectMapperConfig(ObjectMapperConfig.objectMapperConfig().defaultObjectMapperType(ObjectMapperType.JSONB));\n```\n\n----------------------------------------\n\nTITLE: Disabling URL Encoding for Parameters in Rest Assured\nDESCRIPTION: Examples of disabling URL encoding for parameters. This is useful when parameters are already URL encoded before supplying them to Rest Assured to avoid double encoding.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_125\n\nLANGUAGE: java\nCODE:\n```\ngiven().urlEncodingEnabled(false)\n```\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.urlEncodingEnabled = false\n```\n\n----------------------------------------\n\nTITLE: Sending Request Body in GET Request\nDESCRIPTION: Example showing how to send a request body in a GET request, which was added in version 2.7.0.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_43\n\nLANGUAGE: java\nCODE:\n```\n// Example of sending a body with a GET request\ngiven().body(someObject).when().get(\"/endpoint\");\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Configuration Types in Rest Assured Request Specification\nDESCRIPTION: Shows how to apply multiple configuration types when using request specifications. This example configures both header settings and session settings which will be merged in the final configuration.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_68\n\nLANGUAGE: java\nCODE:\n```\nRequestSpecification spec = new RequestSpecBuilder.config(config().headerConfig().overwriteHeadersWithName(\"header1\")).build();\n\ngiven().\n        config(config().sessionConfig(sessionConfig().sessionIdName(\"phpsessionid\"))).\n        spec(spec).\n        ..\nwhen().\n        get(..)\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Validation Failure Listeners\nDESCRIPTION: Example showing how to add custom listeners for test validation failures. The code demonstrates configuring a failure listener that logs messages when REST Assured validation fails.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\ngiven().config(RestAssured.config().failureConfig(failureConfig().with().failureListeners((requestSpec, responseSpec, response) -> log.info(\"Rest Assured validation failed!\")).when(). ..\n```\n\n----------------------------------------\n\nTITLE: Expecting Cookies Without Values in REST Assured\nDESCRIPTION: Example showing how to expect a cookie without a value in a response using REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_142\n\nLANGUAGE: java\nCODE:\n```\nexpect().cookie(\"some_cookie\")..\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Decoders in REST Assured\nDESCRIPTION: Shows how to configure which content decoders (compression methods) to use with REST Assured requests. This example demonstrates how to use only DEFLATE compression and disable GZIP.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_93\n\nLANGUAGE: Java\nCODE:\n```\ngiven().config(newConfig().decoderConfig(decoderConfig().contentDecoders(DEFLATE))). ..\n```\n\n----------------------------------------\n\nTITLE: Validating XML Body with DTD in REST Assured\nDESCRIPTION: Example showing how to validate an XML response body against a DTD in REST Assured using a matcher.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_162\n\nLANGUAGE: java\nCODE:\n```\nexpect().body(matchesDtd(dtd)).when().get(\"/videos\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers to be Overwritten Instead of Merged in Rest Assured\nDESCRIPTION: Demonstrates how to configure Rest Assured to overwrite headers with the same name instead of merging them, using HeaderConfig. In this example, 'header1' will be overwritten when specified multiple times.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_67\n\nLANGUAGE: java\nCODE:\n```\nRequestSpecification spec = new RequestSpecBuilder.addHeader(\"header1\", \"value2\").build();\ngiven().\n        config(RestAssuredConfig.config().headerConfig(headerConfig().overwriteHeadersWithName(\"header1\"))).\n        header(\"header1\", \"value1\").\n        spec(spec).\nwhen().\n        get(..)\n```\n\n----------------------------------------\n\nTITLE: Using Certificate Authentication in Request Chain\nDESCRIPTION: Example showing how to configure certificate authentication within a given-when-then request chain using the auth() method, along with certificate authentication settings for port configuration.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_85\n\nLANGUAGE: java\nCODE:\n```\ngiven().auth().certificate(certUrl, password, certAuthSettings().with().port(435)). ..\n```\n\n----------------------------------------\n\nTITLE: Log on Error Shortcut in REST Assured\nDESCRIPTION: Shortcut method for logging errors in REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_147\n\nLANGUAGE: java\nCODE:\n```\ngiven().logOnError(). or expect().logOnError(). ..\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Value Headers and Cookies in REST Assured\nDESCRIPTION: Demonstrates how to create multiple headers or cookies with the same name but different values.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_115\n\nLANGUAGE: java\nCODE:\n```\ngiven().header(\"headerName\", \"value1\", \"value2\")...\n```\n\nLANGUAGE: java\nCODE:\n```\ngiven().cookie(\"cookieName\", \"value1\", \"value2\")...\n```\n\n----------------------------------------\n\nTITLE: Accessing HTML Elements with XMLPath Compatibility Mode in REST Assured\nDESCRIPTION: Demonstrates how to use xmlPath with HTML compatibility mode to extract elements from HTML responses. This allows parsing HTML documents using XMLPath syntax.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_92\n\nLANGUAGE: Java\nCODE:\n```\nString pageTitle = get(\"/index.html\").xmlPath(CompatibilityMode.HTML).getString(\"html.head.title\");\n```\n\n----------------------------------------\n\nTITLE: Configuring XmlPath Settings in REST Assured\nDESCRIPTION: Example showing how to configure XmlPath and REST Assured XML settings for namespace awareness, validation and doc type declaration handling.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nXmlPath xmlPath = new XmlPath(xml).using(xmlPathConfig().namespaceAware(false));\n\ngiven().config(RestAssured.config().xmlConfig(xmlConfig().namespaceAware(false)))\n```\n\n----------------------------------------\n\nTITLE: Multipart Request with Custom Boundary\nDESCRIPTION: Shows how to specify a custom boundary for multipart requests either directly or through configuration\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_27\n\nLANGUAGE: java\nCODE:\n```\ngiven().contentType(\"multipart/mixed; boundary=abcdef\").multiPart(..);\n\ngiven().config(config().multiPartConfig(multiPartConfig().defaultBoundary(\"abcdef\")))\n```\n\n----------------------------------------\n\nTITLE: Removing Content-Type Header from Request\nDESCRIPTION: Shows how to use the noContentType() method to explicitly remove any content-type header from an HTTP request when needed.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ngiven().\n        noContentType().\n    when().\n        post(\"/somewhere\").\n    then().\n        statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Using Path Arguments with Root Path in Multi-Expectation Blocks\nDESCRIPTION: Example showing how to use withArgs() to provide arguments to parameterized root paths in multi-expectation blocks, allowing dynamic path construction with different parameter values.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nget(\"/jsonStore\").then()\n    .root(\"store.book.find { it.author == '%s' }.price\")\n    .body(\n            withArgs(\"Nigel Rees\"), is(8.95f),\n            withArgs(\"Evelyn Waugh\"), is(12.99f),\n            withArgs(\"Herman Melville\"), is(8.99f),\n            withArgs(\"J. R. R. Tolkien\"), is(22.99f)\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining Cookies Without Values in REST Assured\nDESCRIPTION: Example showing how to define a cookie without a value in a request using REST Assured.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_141\n\nLANGUAGE: java\nCODE:\n```\ngiven().cookie(\"some_cookie\")..\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Content-Type for Multipart Requests\nDESCRIPTION: Example showing how to set a custom content-type for multipart requests, such as multipart/mixed.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_52\n\nLANGUAGE: java\nCODE:\n```\ngiven().contentType(\"multipart/mixed\").multiPart(...);\n```\n\n----------------------------------------\n\nTITLE: Specifying CSRF Field Name in Form Authentication in Rest Assured\nDESCRIPTION: Shows how to explicitly specify the CSRF token field name when using form authentication in Rest Assured instead of relying on auto-detection.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_70\n\nLANGUAGE: java\nCODE:\n```\ngiven(). auth().form(\"John\", \"Doe\", formAuthConfig().withCsrfFieldName(\"_csrf\")). ..\n```\n\n----------------------------------------\n\nTITLE: Using Spring MockMvc Module with ResultHandlers\nDESCRIPTION: Shows the deprecated and new way to use result handlers with the MockMvc module.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_45\n\nLANGUAGE: java\nCODE:\n```\n// Deprecated way\ngiven().resultHandlers(print()).when().get(\"/x\");\n\n// New way\nget(\"/x\").then().apply(print());\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Authentication with Additional Fields\nDESCRIPTION: Example of using FormAuthConfig to include additional input fields when performing form authentication. REST Assured automatically parses the HTML page to find values for these fields and includes them in the login request.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\ngiven().auth().form(\"username\", \"password\", formAuthConfig().withAdditionalFields(\"firstInputField\", \"secondInputField\"). ..\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Charset for Content Type\nDESCRIPTION: Shows how to explicitly specify a charset for a specific content type in a REST Assured request.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_9\n\nLANGUAGE: java\nCODE:\n```\ngiven().contentType(ContentType.JSON.withCharset(UTF_8)). ..\n```\n\n----------------------------------------\n\nTITLE: Setting Default Charset for Content Types\nDESCRIPTION: Shows how to configure REST Assured to add charset information to specific content types using EncoderConfig, to revert to pre-4.4.0 behavior.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().defaultCharsetForContentType(\"UTF-8\", \"application/json\")))\n```\n\n----------------------------------------\n\nTITLE: Using SpecificationQuerier to Extract Values from Request Specifications\nDESCRIPTION: Example of using the SpecificationQuerier to extract information from a RequestSpecification object, allowing access to headers and form parameters that were set on the specification.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nRequestSpecification spec = ...\nQueryableRequestSpecification queryable = SpecificationQuerier.query(spec);\nString headerValue = queryable.getHeaders().getValue(\"header\");\nString param = queryable.getFormParams().get(\"someparam\");\n```\n\n----------------------------------------\n\nTITLE: Using Spring Security RequestPostProcessor for Authentication\nDESCRIPTION: Example of using Spring Security's RequestPostProcessor for authentication in Spring Mock MVC tests. This requires the spring-security-test dependency in your classpath.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_64\n\nLANGUAGE: java\nCODE:\n```\ngiven().auth().with(httpBasic(\"username\", \"password\")). ..\n```\n\n----------------------------------------\n\nTITLE: Setting Default Parser in Rest Assured\nDESCRIPTION: Examples of setting a default parser for all responses or for specific responses using different approaches. The parser will be used when content-type doesn't match a pre-defined parser.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_118\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.defaultParser = Parser.JSON;\n```\n\nLANGUAGE: java\nCODE:\n```\nexpect().defaultParser(Parser.JSON).when(..);\n```\n\nLANGUAGE: java\nCODE:\n```\nnew ResponseSpecBuilder().setDefaultParser(Parser.JSON).build();\n```\n\n----------------------------------------\n\nTITLE: Using Path Method in FilterableRequestSpecification\nDESCRIPTION: Example showing how to change the request path from a filter using the path method in the requestSpec object.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_40\n\nLANGUAGE: java\nCODE:\n```\n// Example of changing the request path from a filter\nrequestSpec.path(\"/new/path\");\n```\n\n----------------------------------------\n\nTITLE: Using No-Wrap Configuration for Deflate Decompression in REST Assured\nDESCRIPTION: Demonstrates how to configure REST Assured to use no-wrap mode for inflating deflate-compressed (RFC 1951) response streams, which is required for services using formats like PHP's gzdeflate.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_71\n\nLANGUAGE: java\nCODE:\n```\ngiven().config(config().decoderConfig(decoderConfig().useNoWrapForInflateDecoding(true))).when().get(\"/x\")\n```\n\n----------------------------------------\n\nTITLE: Certificate Authentication with Custom Settings in REST Assured\nDESCRIPTION: Example of configuring certificate-based authentication with custom settings, specifically setting a custom port number for the certificate authority using the certificate authentication settings builder.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_84\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.authentication = certificate(certUrl, password, certAuthSettings().with().port(435));\n```\n\n----------------------------------------\n\nTITLE: Removing Parameters from FilterableRequestSpecification\nDESCRIPTION: Example showing how to remove parameters from a request specification using the remove methods.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_42\n\nLANGUAGE: java\nCODE:\n```\n// Example of removing a query parameter\nFilterableRequestSpecification requestSpec = given().queryParam(\"param1\", \"value1\");\nrequestSpec.removeQueryParam(\"param1\");\n```\n\n----------------------------------------\n\nTITLE: Setting Multipart Filename and MIME Type\nDESCRIPTION: Example showing how to set a filename when passing an object to multiPart method.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_49\n\nLANGUAGE: java\nCODE:\n```\ngiven().multiPart(\"name\", file, \"application/octet-stream\");\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Query Parameter Methods in RequestSpecification\nDESCRIPTION: List of deprecated query parameter methods in the RequestSpecification interface that should be replaced with their newer alternatives for better API consistency.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nio.restassured.specification.RequestSpecification.queryParameter(java.lang.String, java.lang.Object...) // Use queryParam() instead\nio.restassured.specification.RequestSpecification.queryParameters(java.util.Map<java.lang.String,?>) // Use queryParams() instead\nio.restassured.specification.RequestSpecification.queryParameters(java.lang.String, java.lang.Object, java.lang.Object...) // Use queryParams() instead\n```\n\n----------------------------------------\n\nTITLE: Creating HttpClientFactory with Lambda Expressions\nDESCRIPTION: Shows how to create an HttpClientFactory using lambda expressions in Java 8 compared to the old anonymous class approach.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_48\n\nLANGUAGE: java\nCODE:\n```\n// Old way with anonymous class\ngiven().config(RestAssured.config().httpClientConfig(httpClientConfig().httpClientFactory(new HttpClientConfig.HttpClientFactory() {\n    @Override\n    public HttpClient createHttpClient() {\n        return new SystemDefaultHttpClient();\n    }\n})));\n\n// New way with lambda expression\ngiven().config(RestAssured.config().httpClientConfig(httpClientConfig().httpClientFactory(SystemDefaultHttpClient::new)));\n```\n\n----------------------------------------\n\nTITLE: Using Nested Path Arguments with No Arguments in REST Assured\nDESCRIPTION: Demonstrates the use of withNoArgs() when working with dynamic path construction, allowing for complex nested path validation in JSON responses.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_96\n\nLANGUAGE: Java\nCODE:\n```\nexpect().\n       root(\"store.%s\", withArgs(\"book\")).\n       body(\"category.size()\", equalTo(4)).\n       appendRoot(\"%s.%s\", withArgs(\"author\", \"size()\")).\n       body(withNoArgs(), equalTo(4)).\nwhen().\n       get(\"/jsonStore\");\n```\n\n----------------------------------------\n\nTITLE: Using Named and Unnamed Path Parameters Together\nDESCRIPTION: Example demonstrating how to specify both named and unnamed path parameters simultaneously in a request.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_41\n\nLANGUAGE: java\nCODE:\n```\n// Example of using both named and unnamed path parameters\ngiven().pathParam(\"name\", \"value\").get(\"/users/{name}/{}\", 123);\n```\n\n----------------------------------------\n\nTITLE: Using Scala Support for REST Assured with Then Method\nDESCRIPTION: Example of using the Scala support module which adds a 'Then' method (capitalized) to avoid conflicts with Scala reserved keywords. This allows seamless use of REST Assured in Scala code.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_58\n\nLANGUAGE: scala\nCODE:\n```\nimport com.jayway.restassured.RestAssured.when\nimport com.jayway.restassured.module.scala.RestAssuredSupport.AddThenToResponse\nimport org.hamcrest.Matchers.equalTo\nimport org.junit.Test\n\n@Test\ndef `trying out rest assured in scala with implicit conversion`() {\n    when().\n            get(\"/greetJSON\").\n    Then().\n            statusCode(200).\n            body(\"key\", equalTo(\"value\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Charset for Content Types in EncoderConfig\nDESCRIPTION: Sets a specific charset (UTF-16) for a particular content-type (application/xml) when no charset is explicitly defined. This allows for fine-grained control over encoding based on content type.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_56\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config = config(config().encoderConfig(encoderConfig().defaultCharsetForContentType(\"UTF-16\", \"application/xml\")));\n```\n\n----------------------------------------\n\nTITLE: Including Kotlin Extensions Maven Dependency\nDESCRIPTION: Maven configuration for including the Kotlin extensions module which provides a more idiomatic API for Kotlin developers using REST Assured. The dependency should be added with test scope.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_14\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>io.rest-assured</groupId>\n    <artifactId>kotlin-extensions</artifactId>\n    <version>${rest-assured.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Specification Method in RequestSpecification\nDESCRIPTION: Deprecated specification method in the RequestSpecification interface that should be replaced with the shorter spec method.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nio.restassured.specification.RequestSpecification.specification // Use spec instead\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Charset for Content Types in DecoderConfig\nDESCRIPTION: Sets a specific charset (UTF-16) for a particular content-type (application/xml) when no charset is explicitly defined. This configuration affects how REST Assured decodes response content.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_57\n\nLANGUAGE: java\nCODE:\n```\nRestAssured.config = config(config().decoderConfig(decoderConfig().defaultCharsetForContentType(\"UTF-16\", \"application/xml\")));\n```\n\n----------------------------------------\n\nTITLE: Renamed Certificate and Keystore Methods\nDESCRIPTION: List of methods that have been renamed in REST Assured to maintain naming consistency, particularly around certificate authentication and keystore handling.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nio.restassured.authentication.CertificateAuthSettings.keystoreType to io.restassured.authentication.CertificateAuthSettings.keyStoreType\nio.restassured.authentication.CertificateAuthSettings.getKeystoreType to io.restassured.authentication.CertificateAuthSettings.getKeyStoreType\nio.restassured.specification.RequestSpecification.keystore to io.restassured.specification.RequestSpecification.keyStore\nio.restassured.RestAssured.keystore to io.restassured.RestAssured.keyStore\nio.restassured.builder.RequestSpecBuilder.setKeystore to io.restassured.builder.RequestSpecBuilder.setKeyStore\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Root Path Methods in ResponseSpecification\nDESCRIPTION: List of deprecated root path related methods in the ResponseSpecification interface that should be replaced with their newer alternatives.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nio.restassured.specification.ResponseSpecification#rootPath(java.lang.String) // Use root() instead\nio.restassured.specification.ResponseSpecification.noRootPath // Use noRoot instead\n```\n\n----------------------------------------\n\nTITLE: Using Spring WebTest Client with Kotlin Extensions\nDESCRIPTION: Shows how to use the spring-web-test-client-kotlin-extensions module introduced in version 5.4.0, which provides a Kotlin DSL for the Spring WebTest client integration.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval id: Int =\nGiven {\n    webTestClient(webTestClient)\n    param(\"name\", \"Johan\")\n} When {\n    get(\"/greeting\")\n} Then {\n    body(\n            \"id\", Matchers.equalTo(1),\n            \"content\", Matchers.equalTo(\"Hello, Johan!\")\n    )\n} Extract {\n    path(\"id\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rest Assured MockMvc Instance in Java\nDESCRIPTION: Sets a custom MockMvc instance to be used by RestAssuredMockMvc for testing.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_65\n\nLANGUAGE: java\nCODE:\n```\nRestAssuredMockMvc.mockMvc(myMockMvcInstance);\n```\n\n----------------------------------------\n\nTITLE: Using the When Method in Kotlin Extensions API\nDESCRIPTION: Shows how to use the When method directly without using Given in the Kotlin extensions API, providing a more flexible syntax.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nWhen {\n        get(\"/greeting\")\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MockMvcConfigurers with StandaloneSetup\nDESCRIPTION: Example showing how to supply MockMvcConfigurers when calling standaloneSetup in Spring MockMvc module.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_46\n\nLANGUAGE: java\nCODE:\n```\ngiven().standaloneSetup(new Controller1(), springSecurity());\n```\n\n----------------------------------------\n\nTITLE: Using REST Assured with Scala 3 Extensions\nDESCRIPTION: Demonstrates how to use the new scala-extensions module introduced in version 5.5.0, allowing for a more Scala-native syntax when writing REST Assured tests in Scala 3.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n@Test\ndef `extraction with rest assured scala extensions`: Unit =\n    val message: String = Given(req =>\n        req.port(7000)\n        req.header(\"Header\", \"Header\")\n        req.body(\"hello\")\n    )\n    .When(\n        _.put(\"/the/path\")\n    )\n    .Extract(\n        _.path(\"message\")\n    )\nassertThat(message).isEqualTo(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic SpringSecurity MockMvcConfigurer Application in Java\nDESCRIPTION: Configures Rest Assured to not automatically apply SpringSecurity MockMvcConfigurer during setup by modifying the MockMvcConfig.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_66\n\nLANGUAGE: java\nCODE:\n```\ngiven().config(config().mockMvcConfig(mockMvcConfig().dontAutomaticallyApplySpringSecurityMockMvcConfigurer())). ..\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JAXBObjectMapperFactory with Type Parameter in REST Assured\nDESCRIPTION: Example demonstrating the API change from using Class to Type in custom JAXBObjectMapperFactory implementations. This change was necessary for swagger integration and requires updating custom implementations.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyJAXBObjectMapperFactory implements JAXBObjectMapperFactory {\n   public JAXBContext create(Class cls, String charset) {\n       ...\n   }\n}\n```\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyJAXBObjectMapperFactory implements JAXBObjectMapperFactory {\n    public JAXBContext create(Type cls, String charset) {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Path Parameter Methods in RequestSpecification\nDESCRIPTION: List of deprecated path parameter methods in the RequestSpecification interface that should be replaced with their newer alternatives for better API consistency.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nio.restassured.specification.RequestSpecification.pathParameter(java.lang.String, java.lang.Object...) // Use pathParam() instead\nio.restassured.specification.RequestSpecification.pathParameters(java.util.Map<java.lang.String,?>) // Use pathParams() instead\nio.restassured.specification.RequestSpecification.pathParameters(java.lang.String, java.lang.Object, java.lang.Object...) // Use pathParams() instead\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Content Methods in ResponseSpecification\nDESCRIPTION: List of deprecated content assertion methods in the ResponseSpecification interface that should be replaced with body methods for better API consistency.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nio.restassured.specification.ResponseSpecification.content(java.util.List<io.restassured.specification.Argument>, org.hamcrest.Matcher, java.lang.Object...) // Use body() instead\nio.restassured.specification.ResponseSpecification.content(org.hamcrest.Matcher<?>, org.hamcrest.Matcher<?>...) // Use body() instead\nio.restassured.specification.ResponseSpecification.content(java.lang.String, java.util.List<io.restassured.specification.Argument>, org.hamcrest.Matcher, java.lang.Object...) // Use body() instead\nio.restassured.specification.ResponseSpecification.content(java.lang.String, org.hamcrest.Matcher<?>, java.lang.Object...) // Use body() instead\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Methods in RestAssured Class\nDESCRIPTION: List of deprecated methods in the RestAssured class that should be replaced with their shorter alternatives.\nSOURCE: https://github.com/rest-assured/rest-assured/blob/master/changelog.txt#2025-04-21_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nio.restassured.RestAssured.withArguments // Use withArgs instead\nio.restassured.RestAssured.withNoArguments // Use withNoArgs instead\n```"
  }
]