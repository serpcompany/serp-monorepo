[
  {
    "owner": "apache",
    "repo": "camel-website",
    "content": "TITLE: Manual AI Service Injection in Camel Routes\nDESCRIPTION: Traditional approach showing manual injection of AI service using @Inject annotation in a Camel route builder class. This method requires explicit dependency injection.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/langchain4j-bean-interface/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScoped\npublic class MyRoutes extends RouteBuilder {\n\n  @Inject\n  MyAIService myAiService;\n\n  @Override\n  public void configure() {\n    from(\"...\")\n      .bean(myAiService);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-field Secret Values in Camel Routes\nDESCRIPTION: Demonstrates how to access specific fields within a multi-field JSON secret stored in GCP Secret Manager. This example retrieves the 'username' field from a secret named 'database'.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext>\n    <route>\n        <from uri=\"direct:start\"/>\n        <log message=\"Username is {{gcp:database/username}}\"/>\n    </route>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Defining Target POJO for Data Extraction\nDESCRIPTION: Java class definition that represents the structured data to be extracted from unstructured text. It includes various field types that LangChain4j will populate from the model's JSON output.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/data-extraction-first-experiment/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nstatic class CustomPojo {\n  private boolean customerSatisfied;\n  private String customerName;\n  private LocalDate customerBirthday;\n  private String summary;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching JSON from Chuck Norris API with curl\nDESCRIPTION: Example of how to use curl to fetch a random joke from the Chuck Norris API and format it with jq. This demonstrates the API response format that the Camel component will integrate with.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ curl https://api.chucknorris.io/jokes/random | jq\n{\n  \"categories\": [],\n  \"created_at\": \"2016-05-01 10:51:41.584544\",\n  \"icon_url\": \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\",\n  \"id\": \"TMGDYHjLSu-G5Jkueph9lA\",\n  \"updated_at\": \"2016-05-01 10:51:41.584544\",\n  \"url\": \"https://api.chucknorris.io/jokes/TMGDYHjLSu-G5Jkueph9lA\",\n  \"value\": \"Who wins in a race car race? chuck Norris always wins. No excuses.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Camel Route for Data Extraction\nDESCRIPTION: Java code snippet showing a Camel route that reads files, extracts content, and invokes the AI service for data extraction.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/data-extraction-example/index.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nfrom(\"file:target/transcripts\")\n  .setBody(jsonpath(\"$.content\"))\n  .bean(customPojoExtractionService)\n```\n\n----------------------------------------\n\nTITLE: Versioned Secret Retrieval Example\nDESCRIPTION: XML route configuration demonstrating how to retrieve a specific version of a secret with a default value.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/secrets-properties-functions-part-2/index.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext>\n    <route>\n        <from uri=\"direct:start\"/>\n        <log message=\"Username is {{hashicorp:database/username:admin@2}}\"/>\n    </route>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Creating Extraction Service Interface with LangChain4j\nDESCRIPTION: Interface definition for the extraction service using LangChain4j annotations. It includes a user message template that guides the LLM on how to extract information from the provided text.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/data-extraction-first-experiment/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ninterface CamelCustomPojoExtractor {\n  @UserMessage(\n    \"Extract information about a customer from the text delimited by triple backticks: ```{{text}}```.\"\n    + \"The customerBirthday field should be formatted as YYYY-MM-DD.\"\n    + \"The summary field should concisely relate the customer main ask.\"\n  )\n  CustomPojo extractFromText(@V(\"text\") String text);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base64 Transformation using Data Types in Camel 4\nDESCRIPTION: Demonstrates how to declare a base64 data type and use it for message transformation in a Camel route. It shows the setup of a transformer and its application in a simple timer-to-log route.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoRoute extends EndpointRouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        transformer().name(\"base64\") // (1)\n                .withDataFormat(dataFormat().base64().end());\n        DataType base64 = new DataType(\"base64\"); // (2)\n\n\n        from(timer(\"tick\"))\n                .setBody()\n                .constant(\"Camel rocks!\")\n                .transform(base64) // (3)\n                .to(log(\"info\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a WhatsApp AI Chatbot Route with Apache Camel\nDESCRIPTION: This code snippet defines a Camel route that integrates WhatsApp messaging with an AI agent. The route receives webhook events from WhatsApp, extracts message content using JSONPath, processes it through a conversational AI agent, and replies back through WhatsApp. It illustrates Camel's integration patterns by connecting external messaging APIs with AI services.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/02/camel-whatsapp-langchain4j/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nConversationalAIAgent agent; // [1]\n\n...\n\nfrom(\"webhook:whatsapp:{{camel.component.whatsapp.phone-number-id}}\") // [2]\n   .log(\"${body}\")\n   // A lot of events are received by the webhook, in this case, we want to choose only the ones that contain a message\n   .choice().when().jsonpath(\"$.entry[0].changes[0].value.messages\", true)\n       // We will use this variable in the transformer to retrieve the recipient phone number\n       .setVariable(\"PhoneNumber\", jsonpath(\"$.entry[0].changes[0].value.contacts[0].wa_id\"))\n       // The body is used as input String in ConversationalAIAgent.chat(String)\n       .setBody(jsonpath(\"$.entry[0].changes[0].value.messages[0].text.body\")) // [3]\n       // Invoke the LLM\n       .bean(agent) // [4]\n       .convertBodyTo(TextMessageRequest.class) // [5]\n       // reply to the number that started the conversation\n       .to(\"whatsapp:{{camel.component.whatsapp.phone-number-id}}\") // [6]\n   .end();\n```\n\n----------------------------------------\n\nTITLE: Azure Key Vault Route Example\nDESCRIPTION: XML route configuration showing how to retrieve a secret from Azure Key Vault.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/secrets-properties-functions-part-2/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext>\n    <route>\n        <from uri=\"direct:start\"/>\n        <to uri=\"{{azure:route}}\"/>\n    </route>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Data Type Transformation in Camel 4\nDESCRIPTION: Shows how to create and use a custom data type transformer in a Camel route. It demonstrates defining a custom Java class for transformation and referencing it in the route configuration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoRoute extends EndpointRouteBuilder {\n   @Override\n   public void configure() throws Exception {\n       transformer().name(\"uppercase\")\n                 .withJava(UppercaseTransformer.class); // (1)\n\n\n       from(timer(\"tick\"))\n           .setBody()\n               .constant(\"Camel rocks!\")\n           .transform(new DataType(\"uppercase\")) // (2)\n           .to(log(\"info\"));\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Maven POM file for Camel Chuck component\nDESCRIPTION: Shell command to create the Maven Project Object Model (POM) file for the Chuck component. This defines project metadata, dependencies on Camel libraries, and test dependencies.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ cat <<EOF > pom.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>components</artifactId>\n        <version>3.1.0-SNAPSHOT</version>\n    </parent>\n\n    <artifactId>camel-chuck</artifactId>\n    <packaging>jar</packaging>\n    <name>Camel :: Chuck</name>\n    <description>Camel Chuck Norris API</description>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.camel</groupId>\n            <artifactId>camel-support</artifactId>\n        </dependency>\n        <!-- test dependencies -->\n        <dependency>\n            <groupId>org.apache.camel</groupId>\n            <artifactId>camel-test-junit5</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\nEOF\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Route Definition with Apache Camel\nDESCRIPTION: Defines the core API Gateway route using Apache Camel DSL, including authentication processing, path evaluation, backend proxying, header management, and metrics processing with error handling.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nrouteDefinition\n  .streamCaching()\n  .setHeader(...) //core headers\n  .process(authenticationProcessor)\n  .choice()\n      .when(...) //check execution of the authentication processor\n      .process(pathProcessor) //evaluates the path\n      .toF(toEndpoint) //proxy to the deployed backend\n      .removeHeader(...) //remove some core headers\n      .process(metricsProcessor) //process metrics\n\n  //api was not authenticated (ex.: expired token)\n  .otherwise()\n      .setHeader(...) //core error headers\n      .toF(apiGatewayErrorEndpoint) //proxy to default error endpoint\n      .removeHeader(...) //remove some core headers\n      .process(metricsProcessor) //process metrics\n      .end()\n      .setId(routeID);\n```\n\n----------------------------------------\n\nTITLE: Defining Quarkus LangChain4j AI Service Interface\nDESCRIPTION: Java interface definition for a custom AI service using Quarkus LangChain4j annotations to extract structured data from text.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/data-extraction-example/index.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@RegisterAiService\n@ApplicationScoped\npublic interface CustomPojoExtractionService {\n...\n  @Handler\n  CustomPojo extractFromText(String text);\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Chunking with Vector Embeddings in Camel\nDESCRIPTION: Shows how to combine the Chunking DSL with embedding features to create a complete data processing workflow. The route processes data through LangChain4j embeddings and stores the results in a Qdrant vector database.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/chunking-dsl/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"kafka:ingestion\")\n\t.to(\"langchain4j-embeddings:myEmbedding\")\n\t.setHeader(Qdrant.Headers.ACTION).constant(QdrantAction.UPSERT)\n\t.transform(new DataType(\"qdrant:embeddings\"))\n\t.toF(\"qdrant:%s\", configuration.qdrant().collection().name());\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Environment Variables\nDESCRIPTION: Environment variable configuration settings required for Azure Key Vault integration in Camel.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/secrets-properties-functions-part-2/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport $CAMEL_VAULT_AZURE_TENANT_ID=tenantId\nexport $CAMEL_VAULT_AZURE_CLIENT_ID=clientId\nexport $CAMEL_VAULT_AZURE_CLIENT_SECRET=clientSecret\nexport $CAMEL_VAULT_AZURE_VAULT_NAME=vaultName\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Chunking with Camel Tokenizer DSL\nDESCRIPTION: Demonstrates how to use the Chunking DSL to tokenize documents by paragraph with specific constraints like maximum tokens and overlap. The route reads from a Kafka topic, processes the documents, and sends the chunks to another Kafka topic.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/chunking-dsl/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"kafka:documents\")\n\t.tokenize(tokenizer()\n\t\t\t.byParagraph()\n\t\t\t.maxTokens(1024)\n\t\t\t.maxOverlap(10)\n\t\t\t.using(LangChain4jTokenizerDefinition.TokenizerType.OPEN_AI)\n\t\t\t.end())\n\t.split().body()\n\t.to(\"kafka:ingestion\");\n```\n\n----------------------------------------\n\nTITLE: Defining RandomJoke Model Class in Java\nDESCRIPTION: This Java class defines the model for the API response, using Jackson annotations for JSON mapping.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class RandomJoke {\n    @JsonProperty(\"id\")\n    private String id;\n    @JsonProperty(\"url\")\n    private String url;\n    @JsonProperty(\"value\")\n    private String value;\n    …\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat Language Model with LangChain4j\nDESCRIPTION: Java code to set up the ChatLanguageModel using Ollama. It configures the model to use JSON output format with temperature 0.0 to reduce output variability.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/data-extraction-first-experiment/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nChatLanguageModel model = OllamaChatModel.builder()\n  .baseUrl(\"http://localhost:11434\")\n  .modelName(\"codellama\")\n  .temperature(0.0)\n  .format(\"json\")\n  .timeout(Duration.ofMinutes(1L))\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Camel Route for CDC\nDESCRIPTION: Java class implementing a Camel route that processes database changes captured by Debezium and forwards them to MongoDB.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/05/camel-debezium-quarkus/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Map;\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class DebeziumRoute extends RouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n\n        from(\"debezium-postgres:my_connector\")\n        .log(\"${body}\")\n        .choice()\n          .when(header(\"CamelDebeziumOperation\").isEqualTo(\"c\"))\n              .convertBodyTo(Map.class)\n              .to(\"mongodb:mydb?database={{mongodb.database}}&collection={{mongodb.collection}}&operation=insert\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Google Sheets Interaction with Data Types in Camel Route\nDESCRIPTION: This snippet demonstrates a simplified Camel route using the 'google-sheets:application-x-struct' data type. It automatically transforms a JSON object into a ValueRange object for Google Sheets interaction.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class JsonToSheetsRoute extends EndpointRouteBuilder {\n   @Override\n   public void configure() throws Exception {\n       from(timer(\"tick\"))\n           .setHeader(GoogleSheetsConstants.PROPERTY_PREFIX + \"columnNames\")\n               .constant(\"client,product,amount\") // (1)\n           .setHeader(GoogleSheetsConstants.PROPERTY_PREFIX + \"spreadsheetId\")\n               .simple(\"{{sheets.spreadsheetId}}\")\n           .setHeader(GoogleSheetsConstants.PROPERTY_PREFIX + \"range\")\n               .simple(\"{{sheets.range}}\")\n           .setBody().simple(\"\"\"\n             {\"client\": \"java-route\",\"product\": \"Pineapple\",\"amount\": 100}\n           \"\"\") // (2)\n           .transform(new DataType(\"google-sheets:application-x-struct\")) // (3)\n           .to(googleSheets(\"data/append\")\n                   .clientId(\"{{sheets.clientId}}\")\n                   .accessToken(\"{{sheets.accessToken}}\")\n                   .refreshToken(\"{{sheets.refreshToken}}\")\n                   .clientSecret(\"{{sheets.clientSecret}}\"));\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Uppercase Transformer in Camel 4\nDESCRIPTION: Defines a custom transformer class that converts message body to uppercase. It uses the @DataTypeTransformer annotation to register the transformer and implements the transformation logic.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DataTypeTransformer(name = \"uppercase\")\npublic class UppercaseTransformer extends Transformer {\n   @Override\n   public void transform(Message message,\n                         DataType from,\n                         DataType to) throws Exception {\n      message.setBody(message.getBody(String.class)\n                             .toUpperCase());\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Properties\nDESCRIPTION: Main configuration properties for Azure Key Vault integration in Camel.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/secrets-properties-functions-part-2/index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncamel.vault.azure.tenantId = tenantId\ncamel.vault.azure.clientId = clientId\ncamel.vault.azure.clientSecret = clientSecret\ncamel.vault.azure.vaultName = vaultName\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API with Camel K YAML DSL\nDESCRIPTION: YAML DSL code for a Camel K integration that exposes a REST API with GET, POST, and DELETE operations for a customer database, backed by PostgreSQL.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# camel-k: dependency=mvn:io.quarkus:quarkus-jdbc-postgresql\n# camel-k: build-property=quarkus.datasource.camel.db-kind=postgresql\n# camel-k: config=secret:my-datasource\n# camel-k: trait=service.node-port=true\n\n- rest:\n    get:\n      - to: \"direct:get\"\n        path: \"/customers/{name}\"\n      - to: \"direct:getall\"\n        path: \"/customers/\"\n    post:\n      - to: \"direct:post\"\n        path: \"/customers/\"\n    delete:\n      - to: \"direct:delete\"\n        path: \"/customers/{name}\"\n- from:\n    uri: \"direct:getall\"\n    steps:\n      - set-body:\n          simple: \"select * from customers\"\n      - to: log:info\n      - to: jdbc:camel\n      - set-body:\n          simple: \"${bodyAs(String)}\"\n- from:\n    uri: \"direct:get\"\n    steps:\n      - set-body:\n          simple: \"select * from customers where name='${header.name}'\"\n      - to: log:info\n      - to: jdbc:camel\n      - set-body:\n          simple: \"${bodyAs(String)}\"\n- from:\n    uri: \"direct:post\"\n    steps:\n      - unmarshal:\n          json:\n            library: Jackson\n      - to: log:info\n      - set-body:\n          simple: \"insert into customers (name, city) values ('${body[name]}', '${body[city]}')\"\n      - to: jdbc:camel\n\n- from:\n    uri: \"direct:delete\"\n    steps:\n      - set-body:\n          simple: \"delete from customers where name = '${header.name}'\"\n      - to: log:info\n      - to: jdbc:camel\n```\n\n----------------------------------------\n\nTITLE: Adding Wiremock Dependency for Testing in XML\nDESCRIPTION: This XML snippet shows the dependency for Wiremock, used for HTTP response stubbing in tests.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n        <dependency>\n            <groupId>com.github.tomakehurst</groupId>\n            <artifactId>wiremock</artifactId>\n            <version>${wiremock-version}</version>\n            <scope>test</scope>\n        </dependency>\n```\n\n----------------------------------------\n\nTITLE: Example of Resolved LLM Prompt with Injected Values\nDESCRIPTION: A sample of how the prompt template looks after the variables have been replaced with values from the exchange body, header, and bean. Shows the final prompt sent to the LLM.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/10/langchain4j-camel-annotations/index.md#2025-04-08_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nGiven the text delimited by triple back ticks ```The well equipped ALPHA4 costs 100$...```. What is the price of the car ALPHA4 with equipment level HIGH ?\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Metadata with KServe in Java\nDESCRIPTION: This snippet demonstrates how to retrieve metadata for a KServe model named 'simple' using Apache Camel. It sets up a route that calls the KServe metadata endpoint and logs the response.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.2@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-kserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class model_metadata extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:model-metadata?repeatCount=1\")\n            .to(\"kserve:model/metadata?modelName=simple&modelVersion=1\")\n            .log(\"Metadata:\\n${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an AI Service with Camel Parameter Binding Annotations\nDESCRIPTION: A LangChain4j AI service method that uses Camel parameter binding annotations (@Body, @Header, @Bean) to inject values into the prompt template variables. This allows for dynamic customization of LLM requests.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/10/langchain4j-camel-annotations/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@UserMessage(\"Given the text delimited by triple back ticks ```{body}```. What is the price of the car {carName} with equipment level {carLevel} ?\")\n@Handler\nString getCarPrice(@Body String body, @Header(\"carName\") String carName, @Bean(ref = \"myBean\", method = \"getLevel\") String carLevel);\n```\n\n----------------------------------------\n\nTITLE: Defining JDBC DataSource in application.properties\nDESCRIPTION: Illustrates how to define a JDBC DataSource using Spring Boot style in application.properties file.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/05/camel46-whatsnew/index.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nspring.datasource.url= jdbc:sqlserver://db.example.net:1433;databaseName=test_db\nspring.datasource.username=user\nspring.datasource.password=password\nspring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver\n```\n\n----------------------------------------\n\nTITLE: MNIST Image Recognition Implementation with TensorFlow Serving Predict API\nDESCRIPTION: Java implementation for processing image data and making predictions using TensorFlow Serving Predict API. Includes image preprocessing, request/response handling, and result processing for MNIST model inference.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-tensorflow-serving\n\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.IntStream;\nimport javax.imageio.ImageIO;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.RuntimeCamelException;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.tensorflow.framework.DataType;\nimport org.tensorflow.framework.TensorProto;\nimport org.tensorflow.framework.TensorShapeProto;\nimport org.tensorflow.framework.TensorShapeProto.Dim;\nimport com.google.protobuf.Int64Value;\nimport tensorflow.serving.Model.ModelSpec;\nimport tensorflow.serving.Predict.PredictRequest;\nimport tensorflow.serving.Predict.PredictResponse;\n\npublic class predict extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"file:data?noop=true&recursive=true&include=.*\\.png\")\n            .process(this::toPredictRequest)   // (1)\n            .to(\"tensorflow-serving:predict?modelName=mnist&modelVersion=1\")\n            .process(this::argmax)             // (2)\n            .log(\"${headers.camelFileName} => ${body}\");\n    }\n\n    void toPredictRequest(Exchange exchange) { // (3)\n        byte[] body = exchange.getMessage().getBody(byte[].class);\n        List<Float> data = preprocess(body);\n        TensorProto inputs = TensorProto.newBuilder()\n                .setDtype(DataType.DT_FLOAT)\n                .setTensorShape(TensorShapeProto.newBuilder()\n                        .addDim(Dim.newBuilder().setSize(28))\n                        .addDim(Dim.newBuilder().setSize(28)))\n                .addAllFloatVal(data)\n                .build();\n        PredictRequest request = PredictRequest.newBuilder()\n                .putInputs(\"keras_tensor\", inputs)\n                .build();\n        exchange.getMessage().setBody(request);\n    }\n\n    List<Float> preprocess(byte[] data) {      // (4)\n        try {\n            BufferedImage image = ImageIO.read(new ByteArrayInputStream(data));\n            int width = image.getWidth();\n            int height = image.getHeight();\n            if (width != 28 || height != 28) {\n                throw new RuntimeCamelException(\"Image size must be 28x28\");\n            }\n            List<Float> normalised = new ArrayList<>(width * height);\n            for (int y = 0; y < height; y++) {\n                for (int x = 0; x < width; x++) {\n                    int rgb = image.getRGB(x, y);\n                    normalised.add((rgb & 0xFF) / 255.0f);\n                }\n            }\n            return normalised;\n        } catch (IOException e) {\n            throw new RuntimeCamelException(\"Error reading image\", e);\n        }\n    }\n\n    void argmax(Exchange exchange) {           // (5)\n        PredictResponse response = exchange.getMessage().getBody(PredictResponse.class);\n        TensorProto tensor = response.getOutputsOrThrow(\"output_0\");\n        int result = IntStream.range(0, tensor.getFloatValCount())\n                .reduce((max, i) -> tensor.getFloatVal(max) > tensor.getFloatVal(i) ? max : i)\n                .orElseThrow();\n        exchange.getMessage().setBody(result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Inference with KServe in Java\nDESCRIPTION: This snippet shows how to perform inference on a 'simple' model using KServe and Apache Camel. It creates a request with two input tensors, sends it to the KServe inference endpoint, and processes the response.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.2@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-kserve\n\nimport java.nio.ByteOrder;\nimport java.util.ArrayList;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.builder.RouteBuilder;\nimport com.google.protobuf.ByteString;\nimport inference.GrpcPredictV2.InferTensorContents;\nimport inference.GrpcPredictV2.ModelInferRequest;\nimport inference.GrpcPredictV2.ModelInferResponse;\n\npublic class infer_simple extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:infer-simple?repeatCount=1\")\n            .setBody(constant(createRequest()))\n            .to(\"kserve:infer?modelName=simple&modelVersion=1\")\n            .process(this::postprocess)\n            .log(\"Result[0]: ${body[0]}\")\n            .log(\"Result[1]: ${body[1]}\");\n    }\n\n    ModelInferRequest createRequest() {\n        var ints0 = IntStream.range(1, 17).boxed().collect(Collectors.toList());\n        var content0 = InferTensorContents.newBuilder().addAllIntContents(ints0);\n        var input0 = ModelInferRequest.InferInputTensor.newBuilder()\n                .setName(\"INPUT0\").setDatatype(\"INT32\").addShape(1).addShape(16)\n                .setContents(content0);\n        var ints1 = IntStream.range(0, 16).boxed().collect(Collectors.toList());\n        var content1 = InferTensorContents.newBuilder().addAllIntContents(ints1);\n        var input1 = ModelInferRequest.InferInputTensor.newBuilder()\n                .setName(\"INPUT1\").setDatatype(\"INT32\").addShape(1).addShape(16)\n                .setContents(content1);\n        return ModelInferRequest.newBuilder()\n                .addInputs(0, input0).addInputs(1, input1)\n                .build();\n    }\n\n    void postprocess(Exchange exchange) {\n        var response = exchange.getMessage().getBody(ModelInferResponse.class);\n        var outList = response.getRawOutputContentsList().stream()\n                .map(ByteString::asReadOnlyByteBuffer)\n                .map(buf -> buf.order(ByteOrder.LITTLE_ENDIAN).asIntBuffer())\n                .map(buf -> {\n                    var ints = new ArrayList<Integer>(buf.remaining());\n                    while (buf.hasRemaining()) {\n                        ints.add(buf.get());\n                    }\n                    return ints;\n                })\n                .collect(Collectors.toList());\n        exchange.getMessage().setBody(outList);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secret Manager with Default Credentials Provider via Environment Variables\nDESCRIPTION: Shows how to configure AWS Secret Manager to use the default AWS credentials provider chain through environment variables. This approach relies on credentials configured in the AWS standard locations.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport $CAMEL_VAULT_AWS_USE_DEFAULT_CREDENTIALS_PROVIDER=true\nexport $CAMEL_VAULT_AWS_REGION=region\n```\n\n----------------------------------------\n\nTITLE: Implementing CloudEvents Data Type Transformation in Camel Route\nDESCRIPTION: This snippet demonstrates how to use the 'http:application-cloudevents' data type provided by the 'camel-cloudevents' component in a Camel route. It transforms the message body according to the CloudEvents specification.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoRoute extends EndpointRouteBuilder {\n   @Override\n   public void configure() throws Exception {\n       from(timer(\"tick\"))\n           .setBody()\n               .constant(\"Camel rocks!\")\n           .transform(\n               new DataType(\"http:application-cloudevents\"))\n           .to(log(\"info\"));\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Classic URI and Endpoint DSL in Apache Camel 3\nDESCRIPTION: Demonstrates the difference between using classic URI strings and the new type-safe Endpoint DSL for configuring endpoints in Camel routes. The Endpoint DSL provides better compile-time safety and IDE support.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2019/12/Camel3-Whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"timer:click?period=3000&fixedRate=true\")\n    .to(\"seda:foo?blockWhenFull=true\");\n\nfrom(timer(\"click\").period(3000).fixedRate(true))\n    .to(seda(\"foo\").blockWhenFull(true));\n```\n\n----------------------------------------\n\nTITLE: Configuring LangChain4j BOM for Version Alignment\nDESCRIPTION: Maven dependency management configuration for aligning on a specific version of Quarkus LangChain4j dependencies. Requires version greater than 0.19.0 for Camel annotation support.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/10/langchain4j-camel-annotations/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>io.quarkiverse.langchain4j</groupId>\n      <artifactId>quarkus-langchain4j-bom</artifactId>\n      <version>${quarkus-langchain4j.version}</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Using Bean Method Call with Property Placeholders in Camel Route\nDESCRIPTION: Shows how to use a bean method call with property placeholders in a Camel route. This example demonstrates invoking a method on a bean to dynamically compute a Kafka topic name.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/11/camel42-whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"kafka:{{bean:myBean.computeTopic}}\")\n  .to(\"bean:cheese\");\n```\n\n----------------------------------------\n\nTITLE: Transforming Blueprint XML to modern Camel XML DSL\nDESCRIPTION: Using camel-jbang's transform command to convert OSGi Blueprint XML files to modern Camel XML DSL format.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncamel transform route pom.xml\n```\n\n----------------------------------------\n\nTITLE: Sample Camel Route Builder Implementation\nDESCRIPTION: Example Java class (MyRouteBuilder.java) defining a simple Camel route using the MyBean class.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/vimdap/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.camel.example;\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class MyRouteBuilder extends RouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:foo\").routeId(\"foo\")\n            .bean(\"myBean\", \"hello\")\n            .log(\"${body}\")\n            .bean(\"myBean\", \"bye\")\n            .log(\"${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Regression Analysis with TensorFlow Serving in Apache Camel\nDESCRIPTION: This Java code creates a Camel route that sends a regression request to a TensorFlow Serving endpoint. It uses the 'half_plus_two' model and includes a method to create the input data structure required by TensorFlow Serving.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-tensorflow-serving\n\nimport org.apache.camel.builder.RouteBuilder;\nimport org.tensorflow.example.Example;\nimport org.tensorflow.example.Feature;\nimport org.tensorflow.example.Features;\nimport org.tensorflow.example.FloatList;\nimport tensorflow.serving.InputOuterClass.ExampleList;\nimport tensorflow.serving.InputOuterClass.Input;\n\npublic class regress extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:regress?repeatCount=1\")\n            .setBody(constant(createInput(\"x\", 1.0f)))\n            .to(\"tensorflow-serving:regress?modelName=half_plus_two&modelVersion=123&signatureName=regress_x_to_y\")\n            .log(\"Result: ${body.result}\");\n    }\n\n    Input createInput(String key, float f) {\n        Feature feature = Feature.newBuilder()\n                .setFloatList(FloatList.newBuilder().addValue(f))\n                .build();\n        Features features = Features.newBuilder()\n                .putFeature(key, feature)\n                .build();\n        Example example = Example.newBuilder()\n                .setFeatures(features)\n                .build();\n        ExampleList exampleList = ExampleList.newBuilder()\n                .addExamples(example)\n                .build();\n        return Input.newBuilder()\n                .setExampleList(exampleList)\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Speech Recognition and Sentiment Analysis with Camel DJL Component in Java\nDESCRIPTION: This code implements a Camel route that processes WAV audio files through speech recognition using wav2vec 2.0 and sentiment analysis using DistilBERT. It loads a pre-trained speech model, processes audio files from a directory, and outputs sentiment analysis results.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/camel-ai-examples/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// camel-k: dependency=camel:djl\n//DEPS ai.djl.pytorch:pytorch-engine:0.29.0\n//DEPS ai.djl.pytorch:pytorch-model-zoo:0.29.0\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.file.Files;\nimport org.apache.camel.builder.RouteBuilder;\nimport ai.djl.MalformedModelException;\nimport ai.djl.Model;\nimport ai.djl.modality.audio.translator.SpeechRecognitionTranslator;\nimport ai.djl.util.ZipUtils;\n\npublic class speech_to_text extends RouteBuilder {\n\n    static final String MODEL_URL = \"https://resources.djl.ai/test-models/pytorch/wav2vec2.zip\";\n    static final String MODEL_NAME = \"wav2vec2.ptl\";\n\n    @Override\n    public void configure() throws Exception {\n        loadSpeechToTextModel();\n\n        from(\"file:data/inbox?include=.*\\\\.wav\")                    // (1)\n            .log(\"Processing: ${headers.camelFileName}\")\n            .to(\"djl:audio?model=SpeechToTextModel&translator=SpeechToTextTranslator\") // (2)\n            // The output of the model is all uppercase, which tends to be recognised\n            // as negative by the following distilbert model\n            .setBody(simple(\"${body.toLowerCase()}\"))\n            .log(\"  => ${body}\")\n            .to(\"djl:nlp/sentiment_analysis?artifactId=distilbert\") // (3)\n            .log(\"  => ${body.best}\");                              // (4)\n    }\n\n    void loadSpeechToTextModel() throws IOException, MalformedModelException, URISyntaxException {\n        // Load a model\n        var model = Model.newInstance(MODEL_NAME);\n        // TfModel doesn't allow direct loading from remote input stream yet\n        // https://github.com/deepjavalibrary/djl/issues/3303\n        var modelDir = Files.createTempDirectory(MODEL_NAME);\n        ZipUtils.unzip(new URI(MODEL_URL).toURL().openStream(), modelDir);\n        model.load(modelDir);\n\n        // Bind model beans\n        var context = getContext();\n        context.getRegistry().bind(\"SpeechToTextModel\", model);\n        context.getRegistry().bind(\"SpeechToTextTranslator\", new SpeechRecognitionTranslator());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Templated Routes in Java DSL - Apache Camel\nDESCRIPTION: Demonstrates how to create a route from a template using Java DSL. The example shows creating a route from 'someTemplate' with a message parameter.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/camel316-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ntemplatedRoute(\"someTemplate\")\n    .parameter(\"message\", \"Hello Camel templated route!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring TensorFlow Serving Endpoint for Regression in Apache Camel\nDESCRIPTION: This URI configures the TensorFlow Serving endpoint for regression analysis using the 'half_plus_two' model with version 123 and the 'regress_x_to_y' signature.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_8\n\nLANGUAGE: uri\nCODE:\n```\ntensorflow-serving:regress?modelName=half_plus_two&modelVersion=123&signatureName=regress_x_to_y\n```\n\n----------------------------------------\n\nTITLE: HTML Tip Box Styling\nDESCRIPTION: HTML and CSS code block for creating a styled tip box with a blue border and background\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/04/camel-designer-atlasmap/index.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"\n  padding: 12px 12px;\n  background-color: #e7f3fe;\n  border-left: 6px solid #2196F3;\">\n  <p><strong>Tip!</strong> Read Camel Designer's <a href=\"https://github.com/designer-for-camel/camel-designer/blob/master/docs/how-to.md\">how-to</a> documentation to get familiar with common UI tasks.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Properties in Camel Quarkus application.properties\nDESCRIPTION: Shows how to define a basic configuration property in application.properties file which can be accessed in various ways in a Camel Quarkus application.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nbasic=a-basic-value\n```\n\n----------------------------------------\n\nTITLE: Defining Camel URI Using Java DSL with String Text-blocks\nDESCRIPTION: Demonstrates how to use String text-blocks when defining Camel URIs in Java DSL. This allows for more readable and maintainable URI definitions, especially for complex configurations.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/11/camel42-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"\"\"debezium-postgres:customerEvents\n        ?databasePassword={{myPassword}}\n        &databaseDbname=myDB\n        &databaseHostname=myHost\n        &pollIntervalMs=2000\n        &queryFetchSize=100\"\"\")\n    .to(\"kafka:cheese\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Camel Test Class with Debugging Support in Java\nDESCRIPTION: This Java code snippet demonstrates how to set up a Camel test class with debugging support. It includes overriding the useJmx method to return true and adding a delay to allow the debugger to attach before the test runs.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/HowToUseCamelRouteTextualDebuggerWithUnitTest/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass MainTest extends CamelMainTestSupport {\n\t@Test\n\tvoid myTest() throws Exception {\n\t\tThread.sleep(2000); // to let time to Debugger to attach and install breakpoints\n\t\ttemplate.asyncSendBody(\"direct:demo\", \"\"); // Take care to start the route in an async way\n\t\tNotifyBuilder notify = new NotifyBuilder(context)\n\t\t\t.whenCompleted(1).whenBodiesDone(\"Bye World\").create();\n\t\tassertTrue(\n\t\t\tnotify.matches(60, TimeUnit.SECONDS), \"1 message should be completed\"\n\t\t);\n\t}\n\n\t@Override\n\tprotected boolean useJmx() {\n\t\treturn true;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: API Testing Script with Customer CRUD Operations\nDESCRIPTION: This bash script tests the RESTful API by creating, reading, and deleting customer records. It validates HTTP status codes to ensure the API is functioning correctly.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Create a user\ncurl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"name\":\"my-name\",\"city\":\"my-city\"}' \\\n  http://$1/customers/\n# Read the user\nHTTP_GET=$(curl -o /dev/null -s -w \"%{http_code}\\n\" http://$1/customers/my-name)\nif [[ \"$HTTP_GET\" != \"200\" ]]; then\n    echo \"ERROR: expected a 200 HTTP code\"\n    exit 1\nfi\n# Delete the user\nHTTP_DELETE=$(curl -o /dev/null -s -w \"%{http_code}\\n\" --request DELETE http://$1/customers/my-name)\nif [[ \"$HTTP_DELETE\" != \"200\" ]]; then\n    echo \"ERROR: expected a 200 HTTP code\"\n    exit 2\nfi\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with MNIST Model via Camel Route\nDESCRIPTION: Implements image recognition using MNIST model through TorchServe. Processes PNG files from a directory and outputs predictions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-torchserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class predictions extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"file:data?noop=true&recursive=true&include=.*\\.png\")\n            .to(\"torchserve:inference/predictions?modelName=mnist_v2\")\n            .log(\"${headers.camelFileName} => ${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image to Text Routing with Camel DJL Component\nDESCRIPTION: This code snippet demonstrates how to use the Camel DJL component to implement an Image to Text routing. It uses SSD and ResNet models for object detection and image classification, respectively, and incorporates WordNet for hypernym lookup.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/camel-ai-examples/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// camel-k: dependency=camel:djl\n//DEPS ai.djl.pytorch:pytorch-engine:0.29.0\n//DEPS ai.djl.pytorch:pytorch-model-zoo:0.29.0\n//DEPS net.sf.extjwnl:extjwnl:2.0.5\n//DEPS net.sf.extjwnl:extjwnl-data-wn31:1.2\n\nimport java.util.List;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.RuntimeCamelException;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.djl.DJLConstants;\nimport ai.djl.modality.Classifications;\nimport ai.djl.modality.cv.Image;\nimport net.sf.extjwnl.data.POS;\nimport net.sf.extjwnl.data.PointerUtils;\nimport net.sf.extjwnl.dictionary.Dictionary;\n\npublic class image_to_text extends RouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n        from(\"file:data/inbox?include=.*\\\\.(jpg|png)\")\n            .log(\"Processing: ${headers.camelFileName}\")\n            .to(\"djl:cv/object_detection?artifactId=ssd\")\n            .convertBodyTo(Image[].class)\n            .split(body())\n                .to(\"djl:cv/image_classification?artifactId=resnet\")\n                .process(this::extractClassName)\n                .process(this::addHypernym)\n                .log(\"  => ${body}\");\n    }\n\n    void extractClassName(Exchange exchange) {\n        var body = exchange.getMessage().getBody(Classifications.class);\n        var className = body.best().getClassName().split(\",\")[0].split(\" \", 2)[1];\n        exchange.getMessage().setBody(className);\n    }\n\n    void addHypernym(Exchange exchange) throws Exception {\n        var className = exchange.getMessage().getBody(String.class);\n        var dic = Dictionary.getDefaultResourceInstance();\n        var word = dic.getIndexWord(POS.NOUN, className);\n        if (word == null) {\n            throw new RuntimeCamelException(\"Word not found: \" + className);\n        }\n        var hypernyms = PointerUtils.getDirectHypernyms(word.getSenses().get(0));\n        var hypernym = hypernyms.stream()\n                .map(h -> h.getSynset().getWords().get(0).getLemma())\n                .findFirst().orElse(className);\n        exchange.getMessage().setBody(List.of(className, hypernym));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing KServeComponent in RouteBuilder\nDESCRIPTION: Demonstrates how to use the new 'customize' method in RouteBuilder to configure a KServeComponent with a lambda expression. This allows for easy component configuration within the route definition.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel410-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void configure() throws Exception {\n    customize(KServeComponent.class, k -> {\n        k.getConfiguration().setTarget(\"localhost:8888\");\n    });\n\n    from(\"timer:kserve?repeatCount=1\")\n        .to(\"kserve:model/metadata?modelName=myModel\")\n        .log(\"${body}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Model Version Route\nDESCRIPTION: Camel route for setting the default version of a registered TorchServe model\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-torchserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class set_default extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:set-default?repeatCount=1\")\n            .to(\"torchserve:management/set-default?modelName=mnist_v2&modelVersion=2.0\")\n            .log(\"Status: ${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wildcard Rest DSL in Camel\nDESCRIPTION: Illustrates the use of wildcards in Rest DSL to handle a wider range of requests from the same API service. This allows Camel to service all HTTP GET requests that start with a specific pattern.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/11/camel42-whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nrest(\"myapi\")\n  .get(\"user/*\")\n  .to(\"direct:userStuff\");\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Endpoint with Camel Route Builder\nDESCRIPTION: Example of a simple Camel route that creates a REST endpoint responding with a hello message. The route uses platform-http component and demonstrates basic request handling.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/03/camel-observability/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class PlatformHttpServer extends RouteBuilder {\n @Override\n public void configure() throws Exception {\n   from(\"platform-http:/hello?httpMethodRestrict=GET\")\n     .setBody(simple(\"Hello ${header.name}\"))\n     .to(\"log:info\");\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Camel Route for KServe Server Readiness Check\nDESCRIPTION: Java code that creates a Camel route to check if a KServe server is ready. The route calls the KServe server ready endpoint and logs the response.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.2@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-kserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class server_ready extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:server-ready?repeatCount=1\")\n            .to(\"kserve:server/ready\")\n            .log(\"Ready: ${body.ready}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting TorchServe Metrics with Camel Route\nDESCRIPTION: Retrieves Prometheus-style metrics from TorchServe using periodic timer. Specifically collects memory usage metrics.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-torchserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class metrics extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:metrics?period=10000\")\n            .to(\"torchserve:metrics/metrics?metricsName=MemoryUsed\")\n            .log(\"${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription with Predicate in Camel Dynamic Router EIP\nDESCRIPTION: This code demonstrates how to create a subscription to the Dynamic Router control channel. The subscription specifies a predicate that accepts exchanges with even numbers in the message body, and routes matching exchanges to a JMS destination.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/01/dynamic-router-eip-component/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Create a subscription that accepts an exchange\n// when the message body contains an even number\nDynamicRouterControlMessage evenSubscribeMsg =\n    new DynamicRouterControlMessage(\n        ControlMessageType.SUBSCRIBE,\n        \"evenNumberSubscription\", \"test\", 2, \"jms:even\",\n        body().regex(\"^\\\\d*[02468]$\"));\ntemplate.sendBody(\"dynamic-router:control\", evenSubscribeMsg);\n```\n\n----------------------------------------\n\nTITLE: Defining a Database Bean in YAML DSL\nDESCRIPTION: Shows how to define a database bean using YAML DSL in Camel, including environment variable placeholders for configuration properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/camel47-whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- beans:\n    - name: DemoDatabase\n      type: \"#class:org.apache.commons.dbcp2.BasicDataSource\"\n      properties:\n        driverClassName: org.postgresql.Driver\n        username: \"{{env:DEMO_DATASOURCE_USERNAME:scott}}\"\n        password: \"{{env:DEMO_DATASOURCE_PASSWORD:tiger}}\"\n        url: \"{{env:DEMO_DATASOURCE_URL:postgresql://localhost:5432}}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Based Routing with Camel DSL in Java\nDESCRIPTION: This code snippet demonstrates how to implement the Enterprise Integration Pattern for Content Based Routing using Camel DSL in a Quarkus application. It includes steps for message enrichment, logging, routing, and transformation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/ContentBasedRoutingWithCamelDroolsQuarkusKogitoAltasMapApacheKafka/index.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nfrom(\"direct:hl7\")\n    .enrich(\"direct:label\", aggregationStrategy)\n    .to(\"log:org.drools.demo?level=DEBUG&showAll=true&multiline=true\")\n    .routingSlip(header(\"whereTo\"))\n    .transform(HL7.ack())\n    ;\n\nfrom(\"direct:label\")\n    .unmarshal().hl7()\n    .to(\"atlasmap:atlasmap-mapping.adm\").unmarshal().json()\n    .process(kogitoDMNEvaluate) // <== Rules as DMN decisions\n    .setHeader(\"topicsHeader\", simple(\"${body[topic names]}\")\n    ;\n```\n\n----------------------------------------\n\nTITLE: Camel Route for Retrieving KServe Server Metadata\nDESCRIPTION: Java code that creates a Camel route to retrieve metadata from a KServe server. The route calls the KServe server metadata endpoint and logs the detailed metadata response.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.2@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-kserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class server_metadata extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:server-metadata?repeatCount=1\")\n            .to(\"kserve:server/metadata\")\n            .log(\"Metadata:\\n${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Plain Camel YAML Route Definition Example\nDESCRIPTION: A simple example of a plain Camel YAML file showing a route definition with a timer source, a body transformation, and a logging endpoint. This is the standard format for Camel K and Camel standalone YAML definitions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/yamlTagSupportInVSCode/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- from:\n    uri: \"timer:yaml\"\n    parameters:\n      period: \"1000\"\n    steps:\n      - set-body:\n          constant: \"Hello Camel K from yaml\"\n      - to: \"log:info\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Bean Configuration with Camel JBang\nDESCRIPTION: Demonstrates the use of 'camel get bean --dsl' command to display bean configuration and runtime values, highlighting the difference between configured and actual values.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/camel47-whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ camel get bean --dsl\nBEAN: DemoDatabase (#class:org.apache.commons.dbcp2.BasicDataSource):\n---------------------------------------------------------------------\n PROPERTY         TYPE              CONFIGURATION                                            VALUE\n password         java.lang.String  {{env:DEMO_DATASOURCE_PASSWORD:tiger}}                   tiger\n driverClassName  java.lang.String  org.postgresql.Driver                                    org.postgresql.Driver\n url              java.lang.String  {{env:DEMO_DATASOURCE_URL:postgresql://localhost:5432}}  postgresql://localhost:5432\n username         java.lang.String  {{env:DEMO_DATASOURCE_USERNAME:scott}}                   mySpecialUser\n```\n\n----------------------------------------\n\nTITLE: Camel K Integration Route Definition\nDESCRIPTION: Groovy-based Camel K route that processes HTTP requests and routes fruits to different AWS S3 buckets based on sugar content.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/camel-k-yaks/index.md#2025-04-08_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nfrom('platform-http:/fruits')\n    .log('received fruit ${body}')\n    .unmarshal().json()\n    .removeHeaders(\"*\")\n    .setHeader(\"CamelAwsS3Key\", constant(\"fruit.json\"))\n    .choice()\n        .when().simple('${body[nutrition][sugar]} <= 5')\n            .setHeader(\"CamelAwsS3BucketName\", constant(\"low-sugar\"))\n        .when().simple('${body[nutrition][sugar]} > 5 && ${body[nutrition][sugar]} <= 10')\n            .setHeader(\"CamelAwsS3BucketName\", constant(\"medium-sugar\"))\n        .otherwise()\n            .setHeader(\"CamelAwsS3BucketName\", constant(\"high-sugar\"))\n    .end()\n    .marshal().json()\n    .log('sending ${body}')\n    .to(\"aws2-s3://noop?$parameters\")\n```\n\n----------------------------------------\n\nTITLE: Customizing CamelContext for Unit Testing in Java\nDESCRIPTION: This Java method customizes the CamelContext for unit testing, setting up the Chuck component with a mock server URL.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    protected CamelContext createCamelContext() throws Exception {\n        final CamelContext context = super.createCamelContext();\n        context.disableJMX();\n        final ChuckComponent component = new ChuckComponent();\n        component.setBaseUrl(\"http://localhost:\" + port);\n        context.addComponent(\"chuck\", component);\n        return context;\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing TorchServe Models with Camel Route\nDESCRIPTION: Demonstrates how to retrieve the list of registered models from TorchServe using a Camel route. Uses the management API endpoint with a timer trigger.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-torchserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class list_models extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:list?repeatCount=1\")\n            .to(\"torchserve:management/list\")\n            .log(\"${body.models}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ObservationRegistry for Metrics and Tracing in Java\nDESCRIPTION: This snippet demonstrates how to set up basic metrics and tracing capabilities for an ObservationRegistry using Micrometer Core, Micrometer Observation, and Micrometer Tracing libraries.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/04/camel-observation/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Micrometer Core JAR\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n// Micrometer Observation JAR\nimport io.micrometer.core.instrument.observation.DefaultMeterObservationHandler;\nimport io.micrometer.observation.ObservationRegistry;\n// Micrometer Tracing JAR\nimport io.micrometer.tracing.Tracer;\n\n// [Tracing]\n// Skipped the whole setup of a Micrometer Tracing tracer\n// you can check the https://micrometer.io/docs/tracing docs\n// for examples of Brave and OpenTelemetry Tracer setup\nio.micrometer.tracing.Tracer tracer = ...; // <1>\n\n// [Metrics]\nMeterRegistry meterRegistry = new SimpleMeterRegistry(); // <2>\n\n// Setting up ObservationRegistry\nObservationRegistry registry = ObservationRegistry.create(); // <3>\n// Adding metrics support\nregistry.observationConfig().observationHandler(new DefaultMeterObservationHandler(meterRegistry)); // <4>\n// Adding basic tracing support\nregistry.observationConfig().observationHandler(new DefaultTracingObservationHandler(tracer)); // <5>\n```\n\n----------------------------------------\n\nTITLE: Configuring Timer Route with Cloud Properties in YAML\nDESCRIPTION: Example YAML configuration showing how to set up a timer route that uses cloud-configured properties accessed through mounted volumes. The route creates a message using a property value from a Kubernetes secret.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/camel48-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- from:\n    uri: \"timer:yaml\"\n    parameters:\n      period: \"1000\"\n    steps:\n      - setBody:\n          simple: \"Hello Camel from {{my-property}}\"\n      - log: \"${body}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Granite3 Dense Model in Quarkus LangChain4J\nDESCRIPTION: Sets the model ID for the Quarkus LangChain4J Ollama chat model to use the Granite3 Dense model. This configuration change is the primary step required to switch Large Language Models in the Camel Quarkus example.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/11/langchain4j-granite3/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nquarkus.langchain4j.ollama.chat-model.model-id = granite3-dense\n```\n\n----------------------------------------\n\nTITLE: Example Multi-field Secret in JSON Format\nDESCRIPTION: Shows an example of a multi-field JSON secret structure that might be stored in a secret manager service. Contains database connection parameters like username, password, engine, host, port, and database name.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"admin\",\n  \"password\": \"password123\",\n  \"engine\": \"postgres\",\n  \"host\": \"127.0.0.1\",\n  \"port\": \"3128\",\n  \"dbname\": \"db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secret Manager Credentials with Environment Variables\nDESCRIPTION: Shows how to configure AWS Secret Manager authentication using environment variables. These variables provide the access key, secret key, and region needed to authenticate with AWS Secret Manager.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport $CAMEL_VAULT_AWS_USE_DEFAULT_CREDENTIALS_PROVIDER=accessKey\nexport $CAMEL_VAULT_AWS_SECRET_KEY=secretKey\nexport $CAMEL_VAULT_AWS_REGION=region\n```\n\n----------------------------------------\n\nTITLE: Using Data Types for Message Transformation in Camel Pipe\nDESCRIPTION: This YAML snippet shows how to use data types for message transformation in a Camel Pipe. It demonstrates transforming Slack messages to a generic JsonNode format, extracting a specific field, and then converting to plain text for Kafka.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1\nkind: Pipe\nmetadata:\n name: slack-to-kafka\nspec:\n source:\n   ref:\n     kind: Kamelet\n     apiVersion: camel.apache.org/v1\n     name: slack-source\n   properties:\n     channel: \"{{slack.channel}}\"\n     token: \"{{slack.bot.token}}\"\n   dataTypes:\n     out:\n       format: application-x-struct # (1)\n steps:\n   - ref:\n       kind: Kamelet\n       apiVersion: camel.apache.org/v1\n       name: extract-field-action\n     properties:\n       field: text # (2)\n sink:\n   ref:\n     kind: KafkaTopic\n     apiVersion: kafka.strimzi.io/v1beta2\n     name: \"{{kafka.topic}}\"\n   dataTypes:\n     in:\n       format: plain-text # (3)\n   properties:\n     brokers: \"{{kafka.bootstrapServers}}\"\n```\n\n----------------------------------------\n\nTITLE: Camel Route for KServe Model Readiness Check\nDESCRIPTION: Java code that creates a Camel route to check if a specific model is ready in a KServe server. The route includes model name and version parameters for the target model.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.2@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-kserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class model_ready extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:model-ready?repeatCount=1\")\n            .to(\"kserve:model/ready?modelName=simple&modelVersion=1\")\n            .log(\"Ready: ${body.ready}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeConverter for WhatsApp Message Formatting in Camel\nDESCRIPTION: This Java class implements Camel's TypeConverters interface to convert String messages to TextMessageRequest objects that can be sent to the WhatsApp API. It extracts the recipient phone number from the exchange variables and builds a properly formatted request object. This converter is essential for the integration between Camel and the WhatsApp messaging API.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/02/camel-whatsapp-langchain4j/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Converter\n@Component\npublic class CamelWhatsAppTypeConverters implements TypeConverters {\n\n\t/**\n\t * Create an object that can be serialized to WhatsApp APIs, a variable PhoneNumber is expected\n\t * as well as a body containing the String message\n\t */\n\t@Converter\n\tpublic static TextMessageRequest toTextMessageRequest(String message, Exchange exchange) {\n\t\tString phoneNumber = exchange.getVariable(\"PhoneNumber\", String.class);\n\n\t\tTextMessageRequest responseMessage = new TextMessageRequest();\n\t\tresponseMessage.setTo(phoneNumber);\n\t\tresponseMessage.setText(new TextMessage());\n\t\tresponseMessage.getText().setBody(message);\n\n\t\treturn responseMessage;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using AWS Secrets Manager Properties in Camel Routes\nDESCRIPTION: Demonstrates how to reference AWS Secret Manager secrets in a Camel route using the {{aws:secretName}} syntax. The property will be replaced with the actual secret value retrieved from AWS Secret Manager during route initialization.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext>\n    <route>\n        <from uri=\"direct:start\"/>\n        <log message=\"Username is {{aws:username}}\"/>\n    </route>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Copying Sample Wave Files for Speech Recognition Processing\nDESCRIPTION: Commands to copy sample wave files from the repository to the inbox directory for processing by the Camel route. These files will be processed for speech recognition and sentiment analysis.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/camel-ai-examples/index.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncp speech1.wav data/inbox\ncp speech2.wav data/inbox\ncp speech3.wav data/inbox\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Camel Route with Hawtio Integration\nDESCRIPTION: Complete workflow showing how to create a Camel route file, run it, attach Jolokia agent, and launch Hawtio v3 for monitoring. These commands demonstrate the full process from route creation to management via the Hawtio web console.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/01/hawtio-v3/index.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncamel init hello.java\ncamel run hello.java\n```\n\nLANGUAGE: console\nCODE:\n```\ncamel jolokia hello\ncamel hawtio --version=3.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Knative to S3 Integration using KameletBinding in YAML\nDESCRIPTION: YAML configuration demonstrating how to move data from a Knative Channel or Kafka Topic to an AWS S3 bucket using streaming upload. The binding connects a source (Knative Channel) to a sink (AWS S3) using the aws-s3-streaming-upload-sink Kamelet.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/11/low-code-camel/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1alpha1\nkind: KameletBinding\nmetadata:\n  name: events-to-s3\nspec:\n  source:\n    ref:\n      apiVersion: messaging.knative.dev/v1\n      kind: Channel\n      name: messages\n      # Or a Strimzi \"KafkaTopic\", if you prefer\n  sink:\n    ref:\n      kind: Kamelet\n      apiVersion: camel.apache.org/v1alpha1\n      name: aws-s3-streaming-upload-sink\n    properties:\n      bucketNameOrArn: \"my-bucket\"\n      accessKey: \"<your-key>\"\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Types in Camel Pipe YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure data types in a Camel Pipe. It shows the setup of an AWS S3 to HTTP pipe, specifying CloudEvents formats for both the source and sink.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1\nkind: Pipe\nmetadata:\n name: aws-s3-to-http\nspec:\n integration:\n   dependencies:\n   - \"camel:cloudevents\"\n source:\n   ref:\n     kind: Kamelet\n     apiVersion: camel.apache.org/v1\n     name: aws-s3-source\n   properties:\n     bucketNameOrArn: \"{{aws.s3.bucketNameOrArn}}\"\n     accessKey: \"{{aws.s3.accessKey}}\"\n     secretKey: \"{{aws.s3.secretKey}}\"\n   dataTypes:\n     out:\n       format: aws2-s3:application-cloudevents # (1)\n sink:\n   ref:\n     kind: Kamelet\n     apiVersion: camel.apache.org/v1\n     name: http-sink\n   dataTypes:\n     in:\n       format: http:application-cloudevents  # (2)\n   properties:\n     url: \"{{http.sink.url}}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Details Route\nDESCRIPTION: Camel route for fetching detailed information about a registered TorchServe model\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-torchserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class describe_model extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:describe?repeatCount=1\")\n            .to(\"torchserve:management/describe?modelName=mnist_v2\")\n            .log(\"${body[0]}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning for Custom Transformers in Camel 4\nDESCRIPTION: Demonstrates how to use classpath scanning to discover and load custom transformer implementations. It shows the route configuration for scanning a specific package for transformers.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoRoute extends EndpointRouteBuilder {\n   @Override\n   public void configure() throws Exception {\n       transformer().scan(\"org.apache.camel.demo.transform\"); // (1)\n\n\n       from(timer(\"tick\"))\n           .setBody()\n               .constant(\"Camel rocks!\")\n           .transform(new DataType(\"uppercase\")) // (2)\n           .to(log(\"info\"));\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ollama CodeLLama Docker Container\nDESCRIPTION: Command to start a Docker container serving the Ollama CodeLLama language model on port 11434.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/data-extraction-example/index.md#2025-04-08_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -p11434:11434 langchain4j/ollama-codellama:latest\n```\n\n----------------------------------------\n\nTITLE: Defining Named AI Service Interface\nDESCRIPTION: Shows how to define a LangChain4j AI service interface with a specific name using @Named annotation, allowing it to be resolved by name in Camel routes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/01/langchain4j-bean-name/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScoped\n@Named(\"myBeanName\")\n@RegisterAiService\npublic interface AiServiceResolvedByName {\n\n    @UserMessage(\"My prompt\")\n    @Handler\n    String chatByName(String input);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Google Cloud Secret Manager Properties in Camel Routes\nDESCRIPTION: Demonstrates how to reference Google Cloud Secret Manager secrets in a Camel route using the {{gcp:secretName}} syntax. The property will be replaced with the actual secret value retrieved from GCP Secret Manager during route initialization.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext>\n    <route>\n        <from uri=\"direct:start\"/>\n        <log message=\"Username is {{gcp:username}}\"/>\n    </route>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Running CodeLlama Model in Docker Container\nDESCRIPTION: Command to run a CodeLlama model locally using Docker. This creates a local endpoint that can be used by LangChain4j for data extraction.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/data-extraction-first-experiment/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 11434:11434 langchain4j/ollama-codellama:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Up WireMock Server for Unit Testing in Java\nDESCRIPTION: This Java code sets up a WireMock server for unit testing, including port allocation and stub configuration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n    private static WireMockServer wireMockServer;\n \n    @BeforeAll\n    public static void startServer() {\n        port = AvailablePortFinder.getNextAvailable();\n        wireMockServer = new WireMockServer(port);\n        wireMockServer.start();\n        setupStubs();\n    }\n\n    public static void setupStubs() {\n        wireMockServer.stubFor(get(urlEqualTo(\"/jokes/random\"))\n            .willReturn(aResponse()\n                .withHeader(\"Content-Type\", \"application/json; charset=UTF-8\")\n                .withStatus(HttpURLConnection.HTTP_OK)\n                .withBodyFile(\"json/random-joke.json\")));\n    }\n```\n\n----------------------------------------\n\nTITLE: Injecting Kafka Service using Camel's test-infra in Java\nDESCRIPTION: This snippet demonstrates how to inject an abstract Kafka service into a test class using Camel's test-infra. It uses the JUnit 5 @RegisterExtension annotation to create and inject a KafkaService instance.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/02/camel-test-infra/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@RegisterExtension\npublic static KafkaService service = KafkaServiceFactory.createService();\n```\n\n----------------------------------------\n\nTITLE: Resolving AI Service by Name in Camel Route\nDESCRIPTION: Demonstrates the new method of resolving a LangChain4j AI service by name directly in a Camel route, eliminating the need for @Inject.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/01/langchain4j-bean-name/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScoped\npublic class MyRoutes extends RouteBuilder {\n\n  @Override\n  public void configure() {\n    from(\"...\")\n      .bean(\"myBeanName\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Camel Quarkus LangChain4j Extension Dependency\nDESCRIPTION: Maven dependency configuration for including the Camel Quarkus LangChain4j extension, which enables the use of Camel parameter binding annotations with LangChain4j.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/10/langchain4j-camel-annotations/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.camel.quarkus</groupId>\n  <artifactId>camel-quarkus-langchain4j</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Micrometer Observation with Apache Camel in Java\nDESCRIPTION: This code snippet shows how to set up Micrometer Observation with Apache Camel using the camel-observation component, MicrometerObservationTracer, and registering it in the CamelContext.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/04/camel-observation/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Camel\nCamelContext context = ...;\nMicrometerObservationTracer micrometerObservationTracer = new MicrometerObservationTracer();\n\n// Micrometer Core\nMeterRegistry meterRegistry = new SimpleMeterRegistry();\n\n// Micrometer Tracing\nTracer tracer = ...;\nPropagator propagator = ...;\n\n// Micrometer Observation setup\nObservationRegistry observationRegistry = ObservationRegistry.create();\nobservationRegistry.observationConfig().observationHandler(new DefaultMeterObservationHandler(meterRegistry));\nobservationRegistry.observationConfig().observationHandler(\n    new ObservationHandler.FirstMatchingCompositeObservationHandler(\n        new PropagatingSenderTracingObservationHandler<>(tracer, propagator),\n        new PropagatingReceiverTracingObservationHandler<>(tracer, propagator),\n        new DefaultTracingObservationHandler(tracer)\n    )\n);\n\n// Camel\n// Setting up Micrometer Observation Tracer\nmicrometerObservationTracer.setObservationRegistry(observationRegistry);\nmicrometerObservationTracer.setTracer(tracer);\nmicrometerObservationTracer.init(context);\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager with Environment Variables\nDESCRIPTION: Shows how to configure Google Cloud Secret Manager authentication using environment variables. These variables provide the service account key file path and project ID needed to authenticate with GCP Secret Manager.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport $CAMEL_VAULT_GCP_SERVICE_ACCOUNT_KEY=file:////path/to/service.accountkey\nexport $CAMEL_VAULT_GCP_PROJECT_ID=projectId\n```\n\n----------------------------------------\n\nTITLE: Example Access Token with Scope\nDESCRIPTION: JSON structure of an access token containing scope information used for API access control.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/api-management-infra/index.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://example.hitachi.com/\",\n  \"aud\": \"https://app1.hitachi.com/\",\n  \"sub\": \"jdoe\",\n  \"scope\": \"read write dolphin\",\n  \"iat\": 1458785796,\n  \"exp\": 1458872196\n}\n```\n\n----------------------------------------\n\nTITLE: Example Access Token with Scope\nDESCRIPTION: JSON structure of an access token containing scope information used for API access control.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/api-management-infra/index.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://example.hitachi.com/\",\n  \"aud\": \"https://app1.hitachi.com/\",\n  \"sub\": \"jdoe\",\n  \"scope\": \"read write dolphin\",\n  \"iat\": 1458785796,\n  \"exp\": 1458872196\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LangChain4j Ollama Dependency in Maven\nDESCRIPTION: Maven dependency configuration required to use LangChain4j with Ollama models in a Camel application.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/data-extraction-first-experiment/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>dev.langchain4j</groupId>\n  <artifactId>langchain4j-ollama</artifactId>\n  <version>${langchain.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Debezium PostgreSQL Properties\nDESCRIPTION: Application properties configuration for Debezium PostgreSQL connector including database connection details and capture settings.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/05/camel-debezium-quarkus/index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n#Camel Debezium Properties\ncamel.component.debezium-postgres.offset-storage=org.apache.kafka.connect.storage.FileOffsetBackingStore\ncamel.component.debezium-postgres.offset-storage-file-name=/tmp/offset.dat\ncamel.component.debezium-postgres.database-server-name=my_db_server\ncamel.component.debezium-postgres.database-hostname=localhost\ncamel.component.debezium-postgres.database-dbname=my_db\ncamel.component.debezium-postgres.database-user=my_username\ncamel.component.debezium-postgres.database-password=my_password\ncamel.component.debezium-postgres.database-port=5432\ncamel.component.debezium-postgres.plugin-name=pgoutput\ncamel.component.debezium-postgres.schema-include-list=public\ncamel.component.debezium-postgres.table-include-list=public.customer\ncamel.component.debezium-postgres.offset-flush-interval-ms=10000\n```\n\n----------------------------------------\n\nTITLE: Installing Camel K with Maven Settings\nDESCRIPTION: Bash command to install Camel K with specific Maven proxy settings from a ConfigMap.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/06/camel-k-maven-proxy/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkamel install --maven-settings configmap:my-maven-proxy/settings.xml\n```\n\n----------------------------------------\n\nTITLE: Deploying Order Service with Telemetry\nDESCRIPTION: Shell command to deploy the Order service with telemetry trait enabled in Camel K. Configures tracing, sampling, custom service name, and ingress settings.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkamel run OrderService.java --name order \\\n   -d camel-jackson \\\n   -t telemetry.enabled=true \\\n   -t telemetry.sampler=on \\\n   -t telemetry.service-name=external-order \\\n   -t ingress.enabled=true \\\n   -t ingress.host=order.local\n```\n\n----------------------------------------\n\nTITLE: Interface-based AI Service Resolution in Camel Routes\nDESCRIPTION: Improved approach using interface-based service resolution in Camel routes. This method simplifies the code by eliminating explicit injection and letting Camel handle service resolution.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/langchain4j-bean-interface/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScoped\npublic class MyRoutes extends RouteBuilder {\n\n  @Override\n  public void configure() {\n    from(\"...\")\n      .bean(MyAIService.class);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Type for Camel Route in Java\nDESCRIPTION: This snippet demonstrates how to create a Camel route with a specified input type. It shows two routes: one that sets a constant message body, and another that declares its input type as 'application-cloudevents+json'.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoRoute extends EndpointRouteBuilder {\n   @Override\n   public void configure() throws Exception {\n       from(timer(\"tick\"))\n           .setBody()\n               .constant(\"Camel rocks!\")\n           .to(direct(\"ce-outbound\")); // (1)\n\n\n       from(direct(\"ce-outbound\"))\n           .inputType(\"application-cloudevents+json\") // (2)\n           .to(log(\"info\"));\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Camel Observation in Spring Boot Application\nDESCRIPTION: This snippet demonstrates how to enable Camel Observation in a Spring Boot application by using the @CamelObservation annotation on the main application class.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/04/camel-observation/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\n@CamelObservation\npublic class ClientApplication {\n\n    public static void main(String[] args) {\n\t\tSpringApplication.run(ClientApplication.class, args);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Profile for Camel Debug Dependency in XML\nDESCRIPTION: This XML snippet shows how to set up a Maven profile that includes the camel-debug dependency when activated. This is necessary for enabling the Camel debugger in the project.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/HowToUseCamelRouteTextualDebuggerWithUnitTest/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<profiles>\n    <profile>\n        <id>camel.debug</id>\n        <activation>\n            <property>\n                <name>camel.debug</name>\n                <value>true</value>\n            </property>\n        </activation>\n        <dependencies>\n            <dependency>\n                <groupId>org.apache.camel</groupId>\n                <artifactId>camel-debug</artifactId>\n            </dependency>\n        </dependencies>\n    </profile>\n</profiles>\n```\n\n----------------------------------------\n\nTITLE: Running Camel KServe Server Readiness Check\nDESCRIPTION: Console command to execute the server readiness check using Camel CLI, with the expected output showing the server's ready status.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncamel run server_ready.java\n```\n\nLANGUAGE: console\nCODE:\n```\nReady: true\n```\n\n----------------------------------------\n\nTITLE: Defining Tekton Pipeline for Camel-K Microservice CI/CD\nDESCRIPTION: This snippet defines a complete Tekton Pipeline that handles the entire CI/CD workflow for a microservice. It includes stages for code checkout, deployment to development, automated testing, promotion to production, and smoke testing.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: pipeline-cicd\nspec:\n  description: |\n    CICD pipeline for a microservice\n  params:\n  - name: repo-url\n    type: string\n    description: The git repo URL to clone from.\n  - name: repo-branch\n    type: string\n    description: The git repo branch.\n  workspaces:\n  - name: shared-data\n    description: |\n      This workspace contains the cloned repo files, so they can be read by the\n      next task.\n  tasks:\n  # 1. checkout the code repository with the latest changes,\n  - name: fetch-source\n    taskRef:\n      name: git-clone\n    workspaces:\n    - name: output\n      workspace: shared-data\n    params:\n    - name: url\n      value: $(params.repo-url)\n    - name: revision\n      value: $(params.repo-branch)\n  # 2. release the Integration in a development environment,\n  - name: kamel-run\n    runAfter: [\"fetch-source\"]\n    taskRef:\n      name: kamel-run\n    workspaces:\n    - name: source\n      workspace: shared-data\n    params:\n      - name: filename\n        value: my-rest.yaml\n      - name: namespace\n        value: development\n  # 3. run a complete suite of automated test,\n  - name: e2e-test\n    runAfter: [\"kamel-run\"]\n    taskRef:\n      name: execute-test\n    workspaces:\n    - name: source\n      workspace: shared-data\n    params:\n      - name: script\n        value: test/e2e-test.sh\n      - name: hostname\n        value: $(tasks.kamel-run.results.integration-name).development\n  # 4. promote to production environment and\n  - name: kamel-promote\n    runAfter: [\"e2e-test\"]\n    taskRef:\n      name: kamel-promote\n    workspaces:\n    - name: source\n      workspace: shared-data\n    params:\n      - name: integration-name\n        value: $(tasks.kamel-run.results.integration-name)\n      - name: namespace\n        value: development\n      - name: to\n        value: production\n  # 5. run some smoke test on the production endpoints as last check stage.\n  - name: smoke-test\n    runAfter: [\"kamel-promote\"]\n    taskRef:\n      name: execute-test\n    workspaces:\n    - name: source\n      workspace: shared-data\n    params:\n      - name: script\n        value: test/smoke-test.sh\n      - name: hostname\n        value: $(tasks.kamel-run.results.integration-name).production\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handling in Camel Routes\nDESCRIPTION: Sets up exception handling for the Camel route to catch Network and IO exceptions, allowing for custom error management and redirection to the error endpoint.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nrouteDefinition\n  .onException(exceptionClass)\n  .continued(continued)\n  .setHeader(...) //exception headers\n  .toF(apiGatewayErrorEndpoint) //proxy to default error endpoint\n  .removeHeader(...) //remove some core headers\n  .end();\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Cluster with Registry\nDESCRIPTION: Command to start a new minikube cluster with specified CPU cores and memory allocation, including registry addon.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/Optimizing-Camel-K-Integration-Build-Time/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nminikube start --addons registry --cpus 2 --memory=3GB\n```\n\n----------------------------------------\n\nTITLE: Defining a Sourceless Integration in Camel K\nDESCRIPTION: YAML definition for a 'sourceless Integration' in Camel K that references an externally built container image. This approach allows running Camel Quarkus, Spring Boot, and Main runtimes through the Camel K operator.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/04/sourceless-ck-springboot/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1\nkind: Integration\nmetadata:\n  annotations:\n    camel.apache.org/operator.id: camel-k\n  name: test\nspec:\n  traits:\n    container:\n      image: docker.io/my-org/my-camel-app:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Adding a Processor for Java Debugging in Camel Routes\nDESCRIPTION: This code snippet demonstrates how to add a Processor between Camel route steps to create a suitable breakpoint location for debugging. The processor includes a simple println statement which serves as the line to place the breakpoint on.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  .process(new Processor(){\n    @Override\n    public void process(Exchange exchange) throws Exception {\n      System.out.println(\"can be breakpoint on this line\");\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring a Route with Camel Dynamic Router EIP\nDESCRIPTION: This snippet demonstrates how to use a RouteBuilder to configure a route that sends messages through a Dynamic Router channel. Messages sent to 'direct:start' will be routed through the 'test' channel of the Dynamic Router.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/01/dynamic-router-eip-component/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"direct:start\").to(\"dynamic-router://test\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Quarkus Dev Services\nDESCRIPTION: Properties configuration for Quarkus Dev Services to manage PostgreSQL and MongoDB containers during development.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/05/camel-debezium-quarkus/index.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n#Quarkus postgresql database devservices\nquarkus.datasource.devservices.enabled=true\nquarkus.datasource.devservices.port=5432\nquarkus.datasource.devservices.db-name=my_db\nquarkus.datasource.devservices.username=my_username\nquarkus.datasource.devservices.password=my_password\nquarkus.datasource.devservices.command=postgres -c wal_level=logical\n\n# MongoDB dev services\nquarkus.mongodb.devservices.enabled=true\nquarkus.mongodb.devservices.port=27017\n```\n\n----------------------------------------\n\nTITLE: Configuring Emacs Package Management and LSP Mode for Camel\nDESCRIPTION: This snippet initializes package management in Emacs, adds the MELPA repository, and sets up LSP mode for use with Camel. It also hooks the LSP mode to nxml-mode for XML editing.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/emacs/index.md#2025-04-08_snippet_0\n\nLANGUAGE: lisp\nCODE:\n```\n(require 'package)\n(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)\n;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`\n;; and `package-pinned-packages`. Most users will not need or want to do this.\n;;(add-to-list 'package-archives '(\"melpa-stable\" . \"https://stable.melpa.org/packages/\") t)\n(package-initialize)\n(custom-set-variables\n ;; custom-set-variables was added by Custom.\n ;; If you edit it by hand, you could mess it up, so be careful.\n ;; Your init file should contain only one such instance.\n ;; If there is more than one, they won't work right.\n '(package-selected-packages '(lsp-mode)))\n(custom-set-faces\n ;; custom-set-faces was added by Custom.\n ;; If you edit it by hand, you could mess it up, so be careful.\n ;; Your init file should contain only one such instance.\n ;; If there is more than one, they won't work right.\n )\n\n(require 'lsp-mode)\n(add-hook 'nxml-mode-hook #'lsp)\n```\n\n----------------------------------------\n\nTITLE: Google Sheets Interaction without Data Types in Camel Route\nDESCRIPTION: This snippet shows a Camel route interacting with Google Sheets without using data types. It requires manual creation of a ValueRange object and setting specific headers for the Google Sheets component.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class ModelToGoogleSheetsRoute extends EndpointRouteBuilder {\n   @Override\n   public void configure() throws Exception {\n       from(timer(\"tick\").period(5000))\n           .setHeader(GoogleSheetsConstants.PROPERTY_PREFIX + \"spreadsheetId\")\n               .simple(\"{{sheets.spreadsheetId}}\") // (1)\n           .setHeader(GoogleSheetsConstants.PROPERTY_PREFIX + \"range\")\n               .simple(\"{{sheets.range}}\")\n           .process(new CreateValueRangeProcessor()) // (2)\n           .to(googleSheets(\"data/append\") // (3)\n                   .clientId(\"{{sheets.clientId}}\")\n                   .accessToken(\"{{sheets.accessToken}}\")\n                   .refreshToken(\"{{sheets.refreshToken}}\")\n                   .clientSecret(\"{{sheets.clientSecret}}\"));\n   }\n\n\n   private static class CreateValueRangeProcessor implements Processor {\n       @Override\n       public void process(Exchange exchange) throws Exception {\n           ValueRange valueRange = new ValueRange();\n\n\n           List<List<Object>> values = new ArrayList<>();\n\n\n           values.add(Arrays.asList(\"java-route\", \"Pineapple\", 100)); // (4)\n\n\n           valueRange.setMajorDimension(\"ROWS\");\n           valueRange.setValues(values);\n\n\n           exchange.getMessage().setBody(valueRange);\n\n\n           exchange.getMessage()\n               .setHeader(GoogleSheetsConstants.PROPERTY_PREFIX +\n                                      \"valueInputOption\",\"USER_ENTERED\");\n           exchange.getMessage()\n               .setHeader(GoogleSheetsConstants.PROPERTY_PREFIX +\n                                      \"values\", valueRange); // (5)\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Aggregation Strategy for Multicast in Apache Camel\nDESCRIPTION: A custom implementation of Camel's AggregationStrategy that combines the output from multiple child routes into a Java List. This strategy merges results from successful and failed routes for consolidated processing.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/multicast-failure-routing/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleFlowMergeAggregator implements AggregationStrategy {\n    private static final Logger LOGGER = LoggerFactory.getLogger(SimpleFlowMergeAggregator.class.getName());\n    @Override\n    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        LOGGER.info(\"Inside aggregator \" + newExchange.getIn().getBody());\n        if(oldExchange == null) {\n            String data = newExchange.getIn().getBody(String.class);\n            List<String> aggregatedDataList = new ArrayList<>();\n            aggregatedDataList.add(data);\n            newExchange.getIn().setBody(aggregatedDataList);\n            return newExchange;\n        }\n\n        List<String> oldData = oldExchange.getIn().getBody(List.class);\n        oldData.add(newExchange.getIn().getBody(String.class));\n        oldExchange.getIn().setBody(oldData);\n\n        return oldExchange;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AI Service Prompt Template\nDESCRIPTION: Java code snippet showing the prompt template used by the AI service to extract information from the input text.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/data-extraction-example/index.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nString PROMPT = \"Extract information about a customer from the text delimited by triple backticks: ```{text}```.\"; \n...\n...\nCustomPojo extractFromText(String text);\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Container Image\nDESCRIPTION: Commands to build the Docker image from the Dockerfile and push it to a registry accessible to the Kubernetes cluster where Camel K is running.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/04/sourceless-ck-springboot/index.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t 10.103.186.147/default/csb .\ndocker push 10.103.186.147/default/csb\n```\n\n----------------------------------------\n\nTITLE: Using LambdaRouteBuilder with Spring Boot Dependency Injection\nDESCRIPTION: Example of defining a Camel route as a Spring Bean using LambdaRouteBuilder. This demonstrates how to integrate the lambda style routes with Spring's dependency injection.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/09/Camel35-Whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic LambdaRouteBuilder myRoute() {\n    return rb -> rb.from(\"kafka:cheese\").to(\"jms:cheese\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Master Routes in Camel K\nDESCRIPTION: Example of implementing a master route in Camel K using the master prefix for single-instance execution.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nfrom('master:mylock:telegram:bots')\n  .to('log:info')\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Endpoint Using Endpoint DSL in Java\nDESCRIPTION: Demonstrates how to use Endpoint DSL to configure an MQTT endpoint in a POJO class. It shows type-safe endpoint configuration as a Java field and usage with FluentProducerTemplate.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel34-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyPojo {\n\n    @Produce\n    private FluentProducerTemplate producer;\n\n    private final EndpointProducerBuilder mqtt = paho(\"sensor\").clientId(\"myClient\").userName(\"scott\").password(\"tiger\");\n\n    public void sendToSensor(String data) {\n        producer.withBody(data).to(mqtt).send();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transformer Service Locator in Camel 4\nDESCRIPTION: Shows how to use the service locator pattern for lazy loading of custom transformers. It demonstrates the content of a service locator file for a custom uppercase transformer.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nclass=org.apache.camel.demo.transformer.UppercaseTransformer\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Debug Launch in VS Code\nDESCRIPTION: JSON configuration for setting up a Camel debug launch configuration in VS Code. It specifies the debugger type, request mode, and process ID to attach to.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/02/camel-textual-debug-eclipse-vscode/index.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"apache.camel\",\n\t\t\t\"request\": \"attach\",\n\t\t\t\"attach_pid\": \"400335\",\n\t\t\t\"name\": \"Apache Camel Debugger\"\n\t\t}\n\t],\n\t\"compounds\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strimzi Kafka as a Sink in Camel K Pipe\nDESCRIPTION: Example of a Camel K Pipe YAML configuration using Strimzi Kafka as a sink. This demonstrates the new Strimzi Kafka integration feature in Camel K 2.3.0, allowing direct referencing of Kafka Custom Resources.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/04/camel-k-2-3/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1\nkind: Pipe\n...\nspec:\n  source:\n...\n  sink:\n    ref:\n      apiVersion: kafka.strimzi.io/v1beta2\n      kind: Kafka\n      name: my-cluster\n    properties:\n      topic: \"my-topic\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Camel HTTP Route with Bean Integration\nDESCRIPTION: A Camel route that handles HTTP requests and determines the semester based on a bean response. The route uses a bean called monthBean to get the current month number and returns the corresponding semester.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/mocking-beans-with-camel-quarkus/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"platform-http:/semester\").\nchoice().\n  when(simple(\"${bean:monthBean} <= 6\")).\n  setBody(constant(\"FIRST semester\")).\notherwise().\n  setBody(constant(\"SECOND semester\")).\nend();\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Deployment in Kubernetes\nDESCRIPTION: Kubernetes deployment configuration for Karavan with basic authentication, referencing the master password secret.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/camel-karavan-3.18.3/index.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Deployment\n...\n        - name: MASTER_PASSWORD\n            valueFrom:\n            secretKeyRef:\n            key: master-password\n            name: karavan\n        image: ghcr.io/apache/camel-karavan-basic:3.18.3\n```\n\n----------------------------------------\n\nTITLE: Defining Beer Source Kamelet in YAML\nDESCRIPTION: A Kamelet definition that generates random beer events at specified intervals. Includes configuration for period parameter and uses an external API to fetch random beer data.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/11/camel-k-jbang/index.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1alpha1\nkind: Kamelet\nmetadata:\n  name: beer-source\n  labels:\n    camel.apache.org/kamelet.type: \"source\"\nspec:\n  definition:\n    title: \"Beer Source\"\n    description: \"Retrieve a random beer from catalog\"\n    properties:\n      period:\n        title: Period\n        description: The interval between two events\n        type: integer\n        default: 1000\n  types:\n    out:\n      mediaType: application/json\n  flow:\n    from:\n      uri: timer:tick\n      parameters:\n        period: \"#property:period\"\n      steps:\n      - to: \"https://random-data-api.com/api/beer/random_beer\"\n      - to: \"kamelet:sink\"\n```\n\n----------------------------------------\n\nTITLE: Creating EventBridge Rule with Camel Route\nDESCRIPTION: Demonstrates creating an AWS EventBridge rule that monitors S3 events and targets an SQS queue. Uses camel-aws2-eventbridge component to define the rule name and event pattern from a JSON file.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/camel-aws2-eventbridge-intro/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class MyRouteBuilder extends EndpointRouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n\n        from(timer(\"fire\").repeatCount(\"1\"))\n        .setHeader(EventbridgeConstants.RULE_NAME, constant(\"s3-events-rule\"))\n        .to(aws2Eventbridge(\"default\")\n        \t\t.operation(EventbridgeOperations.putRule)\n        \t\t.eventPatternFile(\"file:src/main/resources/eventpattern.json\"))\n        .process(new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(EventbridgeConstants.RULE_NAME, \"s3-events-rule\");\n                Target target = Target.builder().id(\"sqs-queue\").arn(\"arn:aws:sqs:eu-west-1:780410022477:camel-connector-test\")\n                        .build();\n                List<Target> targets = new ArrayList<Target>();\n                targets.add(target);\n                exchange.getIn().setHeader(EventbridgeConstants.TARGETS, targets);\n            }\n        })\n        .to(aws2Eventbridge(\"default\")\n        \t\t.operation(EventbridgeOperations.putTargets))\n        .log(\"All set, enjoy!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minio in application.properties for Apache Camel\nDESCRIPTION: Example showing how to configure a Minio POJO class through application.properties file. This demonstrates Camel's enhanced property injection capabilities for external configuration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/04/Camel32-Whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncamel.beans.minio.address = http://my-minio.com\ncamel.beans.minio.access-key = ...\ncamel.beans.minio.secret-key = ...\n```\n\n----------------------------------------\n\nTITLE: Installing Service Account and Pipeline Components\nDESCRIPTION: These commands set up the necessary service account permissions and Tekton components before running the pipeline. They apply service account, role bindings, Tekton tasks, and the pipeline definition.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ci/sa.yaml -n development\nkubectl apply -f ci/rolebinding.yaml -n development\n```\n\n----------------------------------------\n\nTITLE: Configuring Sublime Project for Camel Debugging\nDESCRIPTION: Sublime project configuration file that includes debugger settings for Camel application debugging.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Sublimedap/index.md#2025-04-08_snippet_5\n\nLANGUAGE: lisp\nCODE:\n```\n{\n    \"folders\":\n    [\n        {\n            \"path\": \".\",\n        }\n    ],\n    \"debugger_configurations\":\n    [\n\n        {\n            \"type\": \"camel\",\n            \"request\": \"attach\",\n            \"port\": 1099,\n            \"name\": \"Attach to Camel Debugger\",\n\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Camel K Route in YAML\nDESCRIPTION: YAML DSL configuration for a simple Camel K route that reads from a configmap and logs the content.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-k-gitops/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- from:\n    uri: \"timer:yaml\"\n    parameters:\n      period: \"1000\"\n    steps:\n      - setBody:\n          simple: resource:classpath:my-configmap-file\n      - to: \"log:info\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple REST Camel Application\nDESCRIPTION: Java code for a simple Camel route that exposes a REST endpoint using platform-http component. This example creates a GET endpoint that returns a greeting with the name provided in a header.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/04/sourceless-ck-springboot/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class PlatformHttpServer extends RouteBuilder {\n  @Override\n  public void configure() throws Exception {\n    from(\"platform-http:/hello?httpMethodRestrict=GET\").setBody(simple(\"Hello ${header.name}\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Idempotency Topic Content with Kafkacat\nDESCRIPTION: Bash command to view the content of the idempotency Kafka topic using Kafkacat. This command shows how to inspect the idempotency repository entries.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/12/CKC-idempotency-070/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkafkacat -b localhost:9092 -t my.idempotency.topic -f 'Value:%s\\nKey:%k\\n'\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap and Kustomize Configuration\nDESCRIPTION: Commands for creating a ConfigMap and setting up Kustomize configuration for different environments.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-k-gitops/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create cm my-cm --from-literal my-configmap-file=\"I am a development environment\"\n\ncd base/\nkustomize create --resources my-it.yaml\nkustomize edit add configmap my-cm --from-literal=my-configmap-file=\"I am a default environment\" --behavior create --disableNameSuffixHash\ncd ../overlays/dev/\nkustomize create --resources ../../base\nkustomize edit add configmap my-cm --from-literal=my-configmap-file=\"I am a development environment\" --behavior replace\n```\n\n----------------------------------------\n\nTITLE: Implementing Camel Route Builder\nDESCRIPTION: Java implementation of a Camel route builder class that defines a simple route with bean processing and logging.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Sublimedap/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.camel.example;\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class MyRouteBuilder extends RouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:foo\").routeId(\"foo\")\n            .bean(\"myBean\", \"hello\")\n            .log(\"${body}\")\n            .bean(\"myBean\", \"bye\")\n            .log(\"${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch for Camel Debugging in JSON\nDESCRIPTION: This JSON configuration sets up a VS Code launch configuration to attach the Camel Debugger. It references the previously created task to start the test and automatically attach the debugger when ready.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/HowToUseCamelRouteTextualDebuggerWithUnitTest/index.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"name\": \"Start test and attach Camel Debugger\",\n\t\t\t\"type\": \"apache.camel\",\n\t\t\t\"request\": \"attach\",\n\t\t\t\"preLaunchTask\": \"Launch Camel test with Maven with camel.debug profile\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Volume Mount Configuration\nDESCRIPTION: YAML configuration showing how to mount a Kubernetes secret as a volume in a container deployment, making it accessible to the Camel application.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/camel48-whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    spec:\n      containers:\n...\n        volumeMounts:\n          - name: secret-volume\n            readOnly: true\n            mountPath: \"/etc/camel/conf.d/_secrets\"\n      volumes:\n      - name: secret-volume\n        secret:\n          secretName: my-secret\n```\n\n----------------------------------------\n\nTITLE: Using Default Values for Environment Variables in Properties\nDESCRIPTION: Demonstrates how to provide fallback values for environment variables that might not be defined, using the ${VARNAME:default} syntax.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nenvironment-variable-or-default = ${UNEXISTING_ENV_VAR:a-default-value}\n```\n\n----------------------------------------\n\nTITLE: Running Camel CDC Pipeline\nDESCRIPTION: Shell commands to compile and run the Camel-based CDC pipeline application, which uses the Debezium PostgreSQL Component for event-driven consumption.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/05/CdcWithCamelAndDebezium/index.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean compile exec:java -f ./camel-cdc/pom.xml\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Service with Camel K and REST\nDESCRIPTION: Java implementation of an order processing REST service using Camel K. Handles order placement and communicates with the Inventory service. Includes JSON processing and HTTP routing.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.HashMap;\nimport org.apache.camel.Processor;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.model.rest.RestBindingMode;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.component.jackson.JacksonDataFormat;\nimport org.apache.camel.processor.aggregate.GroupedBodyAggregationStrategy;\n\npublic class OrderService extends RouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n\n        restConfiguration()\n            .enableCORS(true)\n            .bindingMode(RestBindingMode.json);\n\n        rest()\n            .post(\"/place\")\n                .to(\"direct:placeorder\");\n\n        JacksonDataFormat jacksonDataFormat = new JacksonDataFormat();\n        jacksonDataFormat.setUnmarshalType(Order.class);\n\n        from(\"direct:placeorder\")\n            .log(\"-----IN ${headers}\")\n            .marshal(jacksonDataFormat)\n            .log(\"inputBody --> ${body}\")\n            .to(\"http://inventory/notify/order?bridgeEndpoint=true\")\n            .removeHeaders(\"*\")\n            .log(\"responseBody from inventory --> ${body}\")\n            .setHeader(Exchange.CONTENT_TYPE, constant(\"application/json\"))\n            .setBody(simple(\"{\\\"inventory\\\":${body}}\"))\n            .unmarshal().json()\n        ;\n    }\n\n    private static class Order implements java.io.Serializable{\n        private static final long serialVersionUID = 1L;\n        private Integer orderId;\n        private Integer itemId;\n        private Integer quantity;\n\n        private String orderItemName;\n        private Integer price;\n\n        public void setOrderId(Integer orderId){\n            this.orderId=orderId;\n        }\n        public void setItemId(Integer itemId){\n            this.itemId=itemId;\n        }\n        public void setQuantity(Integer quantity){\n            this.quantity=quantity;\n        }\n        public void setOrderItemName(String orderItemName){\n            this.orderItemName=orderItemName;\n        }\n        public void setPrice(Integer price){\n            this.price=price;\n        }\n        public Integer getOrderId(){\n            return this.orderId;\n        }\n        public Integer getItemId(){\n            return this.itemId;\n        }\n        public Integer getQuantity(){\n            return this.quantity;\n        }\n        public String getOrderItemName(){\n            return this.orderItemName;\n        }\n        public Integer getPrice(){\n            return this.price;\n        }\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Authorities for API Access\nDESCRIPTION: JSON snippet showing how API IDs are added as authorities to client configurations for enabling API access through role-based authorization.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"authorities\" : [\n    {\n        \"role\" : \"ROLE_USER\",\n        \"_class\" : \"org.springframework.security.core.authority.SimpleGrantedAuthority\"\n    },\n    {\n        \"role\" : \"ROLE_PUBLISHER\",\n        \"_class\" : \"org.springframework.security.core.authority.SimpleGrantedAuthority\"\n    },\n    {\n        \"role\" : \"YOUR API ID\",\n        \"_class\" : \"org.springframework.security.core.authority.SimpleGrantedAuthority\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Inventory Service with Camel K and REST\nDESCRIPTION: Java implementation of an inventory management REST service using Camel K. Handles product inventory notifications and includes data formatting using Jackson. Features CORS support and JSON binding.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.model.rest.RestBindingMode;\nimport org.apache.camel.component.jackson.JacksonDataFormat;\nimport java.text.SimpleDateFormat;\nimport org.apache.camel.Exchange;\nimport java.util.Date;\nimport java.util.Map;\n\n\npublic class InventoryService extends RouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n        restConfiguration()\n            .enableCORS(true)\n            .bindingMode(RestBindingMode.json);\n\n        rest()\n            .post(\"/notify/order/place\")\n                .to(\"direct:notify\");\n\n        JacksonDataFormat invDataFormat = new JacksonDataFormat();\n        invDataFormat.setUnmarshalType(InventoryNotification.class);\n\n        from(\"direct:notify\")\n            .log(\"notifyorder--> ${body}\")\n            .setHeader(Exchange.CONTENT_TYPE, constant(\"application/json\"))\n            .bean(InventoryNotification.class, \"getInventoryNotification(${body['orderId']},${body['itemId']},${body['quantity']} )\")\n            .marshal(invDataFormat)\n            .log(\"Inventory Notified ${body}\")\n            .convertBodyTo(String.class)\n        ;\n    }\n\n    private static class InventoryNotification {\n        private Integer orderId;\n        private Integer itemId;\n        private Integer quantity;\n        private String department;\n        private Date datetime;\n\n        public static InventoryNotification getInventoryNotification(Integer orderId, Integer itemId, Integer quantity ){\n            InventoryNotification invenNotification  = new InventoryNotification();\n            invenNotification.setOrderId(orderId);\n            invenNotification.setItemId(itemId);\n            invenNotification.setQuantity(quantity);\n            invenNotification.setDepartment(\"inventory\");\n            SimpleDateFormat formatter= new SimpleDateFormat(\"yyyy-MM-dd 'at' HH:mm:ss z\");\n            invenNotification.setDatetime(new Date(System.currentTimeMillis()));\n            return invenNotification;\n        }\n\n\n        public void setOrderId(Integer orderId){\n            this.orderId=orderId;\n        }\n        public void setItemId(Integer itemId){\n            this.itemId=itemId;\n        }\n        public void setQuantity(Integer quantity){\n            this.quantity=quantity;\n        }\n        public Integer getOrderId(){\n            return this.orderId;\n        }\n        public Integer getItemId(){\n            return this.itemId;\n        }\n        public Integer getQuantity(){\n            return this.quantity;\n        }\n        public String getDepartment() {\n            return department;\n        }\n        public void setDepartment(String department) {\n            this.department = department;\n        }\n        public Date getDatetime() {\n            return datetime;\n        }\n        public void setDatetime(Date datetime) {\n            this.datetime = datetime;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TorchServe Model Registration Route\nDESCRIPTION: Camel route for registering a pre-trained MNIST model and configuring its workers on TorchServe\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-torchserve\n\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.torchserve.TorchServeConstants;\nimport org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions;\n\npublic class register_model extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:register?repeatCount=1\")\n            .to(\"torchserve:management/register?url=https://torchserve.pytorch.org/mar_files/mnist_v2.mar\")\n            .log(\"Status: ${body}\")\n            .to(\"direct:scale-worker\");\n\n        // Set up workers for the model after registration to make it available for inference\n        from(\"direct:scale-worker\")\n            .setHeader(TorchServeConstants.SCALE_WORKER_OPTIONS,\n                constant(ScaleWorkerOptions.builder().minWorker(1).maxWorker(2).build()))\n            .to(\"torchserve:management/scale-worker?modelName=mnist_v2\")\n            .log(\"Status: ${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Event Pattern Configuration\nDESCRIPTION: JSON configuration defining the event pattern for S3 bucket operations to be monitored by EventBridge. Includes various bucket operations like creation, deletion, and policy modifications.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/camel-aws2-eventbridge-intro/index.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": [\n    \"aws.s3\"\n  ],\n  \"detail\": {\n    \"eventSource\": [\n      \"s3.amazonaws.com\"\n    ],\n    \"eventName\": [\n      \"DeleteBucket\",\n      \"DeleteBucketCors\",\n      \"DeleteBucketLifecycle\",\n      \"DeleteBucketPolicy\",\n      \"DeleteBucketReplication\",\n      \"DeleteBucketTagging\",\n      \"DeleteBucketWebsite\",\n      \"CreateBucket\",\n      \"PutBucketAcl\",\n      \"PutBucketCors\",\n      \"PutBucketLifecycle\",\n      \"PutBucketPolicy\",\n      \"PutBucketLogging\",\n      \"PutBucketNotification\",\n      \"PutBucketReplication\",\n      \"PutBucketTagging\",\n      \"PutBucketRequestPayment\",\n      \"PutBucketVersioning\",\n      \"PutBucketWebsite\",\n      \"PutBucketEncryption\",\n      \"DeleteBucketEncryption\",\n      \"DeleteBucketPublicAccessBlock\",\n      \"PutBucketPublicAccessBlock\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Templated Routes in YAML DSL - Apache Camel\nDESCRIPTION: Shows how to create a route from a template using YAML DSL. Defines a templated route with parameters in YAML format.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/camel316-whatsnew/index.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- templated-route:\n    route-template-ref: \"someTemplate\"\n    parameters:\n      - name: \"message\"\n        value: \"Hello Camel templated route!\"\n```\n\n----------------------------------------\n\nTITLE: Lambda Expression Route Configuration\nDESCRIPTION: Example of using lambda expressions to define Camel routes in a more concise way.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/camel3x-top10-features/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MyConfiguration {\\n    @BindToRegistry\\n    public LambdaEndpointRouteBuilder myRoute() {\\n        return rb -> rb.from(rb.kafka(\"cheese\")).to(rb.jms(\"queue:foo\"));\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CamelJBang with JBang\nDESCRIPTION: Command to install the CamelJBang utility using JBang's app installation feature. This enables access to Camel from the command line without needing a full project setup.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/07/camel-jbang/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njbang app install CamelJBang@apache/camel\n```\n\n----------------------------------------\n\nTITLE: Initializing Camel K Integration Files\nDESCRIPTION: Commands to initialize Camel K integration files for different programming languages using the kamel CLI tool.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkamel init Handler.java\nkamel init foo.js\n```\n\n----------------------------------------\n\nTITLE: Beer Source Integration Configuration\nDESCRIPTION: A simple Camel integration that uses the beer-source Kamelet and logs the output. Sets a 5-second interval between events.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/11/camel-k-jbang/index.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- from:\n    uri: \"kamelet:beer-source?period=5000\"\n    steps:\n      - log: \"${body}\"\n```\n\n----------------------------------------\n\nTITLE: Sample Camel Java Bean Implementation\nDESCRIPTION: Example Java class (MyBean.java) demonstrating a simple bean with hello and bye methods for use in Camel routes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/vimdap/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.camel.example;\n\npublic class MyBean {\n\n    private String hi;\n\n    public MyBean(String hi) {\n        this.hi = hi;\n    }\n\n    public String hello() {\n        return hi + \" Begin ? \";\n\n    }\n     public String bye() {\n        return hi + \" End ? \";\n}\n}\n```\n\n----------------------------------------\n\nTITLE: PipelineHelper Implementation for Determining Processing Continuation in Apache Camel\nDESCRIPTION: The implementation of the continueProcessing method from PipelineHelper that evaluates if an exchange should continue processing. It checks for failure, rollback, and error handler state to make this determination.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/multicast-failure-routing/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic final class PipelineHelper {\n    public static boolean continueProcessing(Exchange exchange, String message, Logger log) {\n        ExtendedExchange ee = (ExtendedExchange) exchange;\n        boolean stop = ee.isFailed() || ee.isRollbackOnly() || ee.isRollbackOnlyLast()\n                || (ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled());\n        if (stop) {\n            if (log.isDebugEnabled()) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"Message exchange has failed: \").append(message).append(\" for exchange: \").append(exchange);\n                if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                    sb.append(\" Marked as rollback only.\");\n                }\n                if (exchange.getException() != null) {\n                    sb.append(\" Exception: \").append(exchange.getException());\n                }\n                if (ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled()) {\n                    sb.append(\" Handled by the error handler.\");\n                }\n                log.debug(sb.toString());\n            }\n\n            return false;\n        }\n        if (ee.isRouteStop()) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"ExchangeId: {} is marked to stop routing: {}\", exchange.getExchangeId(), exchange);\n            }\n            return false;\n        }\n\n        return true;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Secret Configuration\nDESCRIPTION: Kubernetes Secret definition that stores an encoded property value which can be accessed by the Camel application through volume mounts.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/camel48-whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  my-property: Q2FtZWwgNC44\nkind: Secret\nmetadata:\n  name: my-secret\ntype: Opaque\n```\n\n----------------------------------------\n\nTITLE: Implementing Mocked Bean Test\nDESCRIPTION: Enhanced test implementation using @InjectMock to mock the MonthBean and control its behavior during tests.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/mocking-beans-with-camel-quarkus/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@QuarkusTest\npublic class SemesterRouteTest {\n  @InjectMock\n  MonthBean monthBean;\n\n  @Test\n  void januaryShouldIssueFirstSemester() {\n    when(monthBean.month()).thenReturn(1);\n    given().get(\"/semester\").then().statusCode(200).body(is(\"FIRST semester\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cron-based Task Implementation in Camel K\nDESCRIPTION: Example of implementing a scheduled task using the cron component in Camel K.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"cron:job?schedule=0/5+*+*+*+?\")\n  .to(this, \"businessLogic\")\n```\n\n----------------------------------------\n\nTITLE: FTP Endpoint Configuration - Traditional vs DSL\nDESCRIPTION: Comparison between traditional FTP endpoint configuration and the new type-safe Endpoint DSL approach in Camel 3.x.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/camel3x-top10-features/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"ftp://foo@myserver?password=secret&recursive=true&\\n               ftpClient.dataTimeout=30000&\\n               ftpClientConfig.serverLanguageCode=fr\")\n```\n\nLANGUAGE: java\nCODE:\n```\nfrom(ftp(\"myserver\").account(\"foo\").password(\"secret\").recursive(true)\\n            .advanced()\\n                .ftpClientParameters(Collections.singletonMap(\"dataTimeout\", 30000))\\n                .ftpClientConfig(Collections.singletonMap(\"serverLanguageCode\", \"fr\")))\n```\n\n----------------------------------------\n\nTITLE: Defining a Single-Execution Route in Camel Quarkus\nDESCRIPTION: A Java route definition that prints \"Hello World!\" to the console. It uses the timer component with parameters delay=-1 (no initial delay) and repeatCount=1 (execute only once).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/07/command-line-utility-with-camel-quarkus/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.camel.builder.RouteBuilder;\n\n@ApplicationScoped\npublic class CamelRoute extends RouteBuilder {\n\n    @Override\n    public void configure() {\n        from(\"timer:hello?delay=-1&repeatCount=1\")\n                .setBody().constant(\"Hello World!\")\n                .to(\"log:hello\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Periodic Task Implementation in Camel K\nDESCRIPTION: Example of implementing a periodic task using timer component in Camel K.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"timer:task?period=2000\")\n  .to(this, \"businessLogic\")\n```\n\n----------------------------------------\n\nTITLE: Implementing File Processing Route in Java with Camel\nDESCRIPTION: A Camel route that processes files from an input directory, filters content based on 'checked' keyword, and routes to different output directories. Uses Choice EIP for content-based routing.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/11/camel-k-jbang/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class MyJBangRoute extends RouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n        from(\"file:/tmp/input\")\n            .convertBodyTo(String.class)\n            .log(\"Processing file ${headers.CamelFileName} with content: ${body}\")\n            /*\n            .filter(simple(\"${body} !contains 'checked'\"))\n                .log(\"WARN not checked: ${body}\")\n                .to(\"file:/tmp/discarded\")\n            .end()\n            .to(\"file:/tmp/output\");\n            */\n            .choice()\n                .when(simple(\"${body} !contains 'checked'\"))\n                    .log(\"WARN not checked!\")\n                    .to(\"file:/tmp/discarded\")\n                .otherwise()\n                    .to(\"file:/tmp/output\")\n            .end();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS SQS Consumer Route\nDESCRIPTION: Camel route that consumes messages from an AWS SQS queue, configured to delete messages after reading. Used to receive EventBridge notifications.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/camel-aws2-eventbridge-intro/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class MyRouteBuilder extends EndpointRouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n\n        from(aws2Sqs(\"{{sqs-queue-name}}\").deleteAfterRead(true))\n        .log(\"${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Kafka Connector Release Note\nDESCRIPTION: YAML frontmatter block defining metadata for the Camel Kafka Connector 0.7.3 release note page, including URL path, date, version, title and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-0.7.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-0.7.3/\"\ndate: 2021-03-15\ntype: release-note\nversion: \"0.7.3\"\ntitle: \"Camel Kafka Connector release 0.7.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Source-less Integration in Camel K 2.2\nDESCRIPTION: This YAML snippet demonstrates how to define a source-less Integration in Camel K 2.2, referencing a pre-built container image. This allows running Camel Quarkus, Springboot, and Main runtimes from the Camel K operator without requiring source code.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/01/camel-k-2-2/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1\nkind: Integration\nmetadata:\n  annotations:\n    camel.apache.org/operator.id: camel-k\n  name: test\nspec:\n  traits:\n    container:\n      image: docker.io/my-org/my-camel-app:1.0.0\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Creation Route\nDESCRIPTION: Camel route that creates an S3 bucket and uploads a file, demonstrating how to trigger EventBridge events for testing the notification system.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/camel-aws2-eventbridge-intro/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class MyRouteBuilder extends EndpointRouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n\n    \tfrom(timer(\"fire\").repeatCount(\"1\"))\n    \t.setBody(constant(\"Camel rocks\"))\n    \t.to(aws2S3(\"{{bucketName}}\").keyName(\"firstfile\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS2-S3 Source Connector with Idempotency in Camel Kafka Connector\nDESCRIPTION: Configuration for setting up an AWS2-S3 Source Connector in Camel Kafka Connector with idempotency enabled. It includes AWS credentials, S3 bucket configuration, and Kafka idempotency settings.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/12/CKC-idempotency-070/index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nname=CamelAWS2S3SourceConnector\nconnector.class=org.apache.camel.kafkaconnector.aws2s3.CamelAws2s3SourceConnector\nkey.converter=org.apache.kafka.connect.storage.StringConverter\nvalue.converter=org.apache.kafka.connect.converters.ByteArrayConverter\n\ncamel.source.maxPollDuration=10000\n\ntopics=s3.source.topic\n\ncamel.source.path.bucketNameOrArn=camel-kafka-connector\n\ncamel.source.endpoint.deleteAfterRead=false\n\ncamel.component.aws2-s3.access-key=xxxx\ncamel.component.aws2-s3.secret-key=yyyy\ncamel.component.aws2-s3.region=eu-west-1\n\ncamel.idempotency.enabled=true\ncamel.idempotency.repository.type=kafka\ncamel.idempotency.expression.type=body\ncamel.idempotency.kafka.topic=my.idempotency.topic\n```\n\n----------------------------------------\n\nTITLE: Running Camel Quarkus Command Line Application with JVM Mode\nDESCRIPTION: This shell command demonstrates how to run the Camel Quarkus application in JVM mode, passing the 'greeted.subject' parameter. The output shows the application startup, route execution, and automatic shutdown after processing one message.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/07/command-line-utility-with-camel-quarkus/index.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ java -Dgreeted.subject=Joe -jar target/*-runner.jar\n2020-07-15 11:42:18,770 INFO  [org.apa.cam.qua.cor.CamelBootstrapRecorder] (main) bootstrap runtime: org.apache.camel.quarkus.main.CamelMainRuntime\n2020-07-15 11:42:18,816 INFO  [org.apa.cam.mai.BaseMainSupport] (main) Auto-configuration summary:\n2020-07-15 11:42:18,816 INFO  [org.apa.cam.mai.BaseMainSupport] (main)  camel.main.durationMaxMessages=1\n2020-07-15 11:42:18,892 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.4.0 (camel-1) is starting\n2020-07-15 11:42:18,893 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html\n2020-07-15 11:42:18,902 INFO  [org.apa.cam.imp.eng.InternalRouteStartupManager] (main) Route: route1 started and consuming from: timer://hello\n2020-07-15 11:42:18,907 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Total 1 routes, of which 1 are started\n2020-07-15 11:42:18,908 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.4.0 (camel-1) started in 0.015 seconds\n2020-07-15 11:42:18,911 INFO  [org.apa.cam.mai.MainSupport] (camel-main) Waiting until: 1 messages has been processed\n2020-07-15 11:42:18,914 INFO  [io.quarkus] (main) camel-quarkus-integration-test-main-command-mode 1.1.0-SNAPSHOT on JVM (powered by Quarkus 1.6.0.Final) started in 0.569s.\n2020-07-15 11:42:18,915 INFO  [io.quarkus] (main) Profile prod activated.\n2020-07-15 11:42:18,915 INFO  [io.quarkus] (main) Installed features: [camel-core, camel-log, camel-main, camel-policy, camel-support-common, camel-timer, cdi]\n2020-07-15 11:42:18,919 INFO  [hello] (Camel (camel-1) thread #0 - timer://hello) Exchange[ExchangePattern: InOnly, BodyType: String, Body: Hello Joe!]\n2020-07-15 11:42:18,921 INFO  [org.apa.cam.mai.MainLifecycleStrategy] (Camel (camel-1) thread #0 - timer://hello) Duration max messages triggering shutdown of the JVM.\n2020-07-15 11:42:18,922 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) Apache Camel 3.4.0 (camel-1) is shutting down\n2020-07-15 11:42:18,931 INFO  [org.apa.cam.mai.MainLifecycleStrategy] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) CamelContext: camel-1 has been shutdown, triggering shutdown of the JVM.\n2020-07-15 11:42:18,933 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) Apache Camel 3.4.0 (camel-1) uptime 0.040 seconds\n2020-07-15 11:42:18,933 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) Apache Camel 3.4.0 (camel-1) is shutdown in 0.011 seconds\n2020-07-15 11:42:18,937 INFO  [io.quarkus] (main) camel-quarkus-integration-test-main-command-mode stopped in 0.005s\n```\n\n----------------------------------------\n\nTITLE: Running Camel K with Quarkus Native Profile\nDESCRIPTION: Command to launch a Camel application with Quarkus Native profile in Camel K 1.7. This enables native compilation for improved performance and reduced resource footprint.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/11/camel-k-release-1-7/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kamel run -t quarkus.package-type=native ...\n```\n\n----------------------------------------\n\nTITLE: REST Route After Migration\nDESCRIPTION: Updated XML configuration showing the REST route with separated route definition using direct endpoint after migration to Camel 4.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<get path=\"/{id}\" outType=\"org.apache.camel.example.rest.User\" description=\"Find user by id\">\n    <param name=\"id\" type=\"path\" description=\"The id of the user to get\" dataType=\"integer\"/>\n    <responseMessage message=\"The user that was found\"/>\n    <responseMessage code=\"404\" message=\"User not found\"/>\n    <to uri=\"direct:getUser\"/>\n</get>\n\n<route>\n    <from uri=\"direct:getUser\"/>\n    <to uri=\"bean:userService?method=getUser(${header.id})\"/>\n    <filter>\n        <simple>${body} == null</simple>\n        <setHeader name=\"Exchange.HTTP_RESPONSE_CODE\">\n            <constant>404</constant>\n        </setHeader>\n    </filter>\n</route>\n```\n\n----------------------------------------\n\nTITLE: Installing Camel CLI with JBang\nDESCRIPTION: Console commands for installing the Camel CLI via JBang and verifying the installation. This setup is necessary before working with the KServe component.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\njbang app install camel@apache/camel\n```\n\nLANGUAGE: console\nCODE:\n```\n$ camel --version\n4.10.2 # Or newer\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with Vault Properties in Camel Routes\nDESCRIPTION: Shows how to specify fallback default values when accessing secret properties. If the secret or field doesn't exist, or if authentication fails, the default value 'admin' will be used instead.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<camelContext>\n    <route>\n        <from uri=\"direct:start\"/>\n        <log message=\"Username is {{gcp:database/username:admin}}\"/>\n    </route>\n</camelContext>\n```\n\n----------------------------------------\n\nTITLE: Model Status Check with Camel TensorFlow Serving\nDESCRIPTION: Java code demonstrating how to check the status of a TensorFlow model using Camel routes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-tensorflow-serving\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class model_status extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:model-status?repeatCount=1\")\n            .to(\"tensorflow-serving:model-status?modelName=mnist&modelVersion=1\")\n            .log(\"Status: ${body.getModelVersionStatus(0).state}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Camel 3.14.6 Release Notes in YAML\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel 3.14.6 release notes. It includes information such as the release date, end-of-life date, version number, title, and supported JDK versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.14.6.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-11-05\neol: 2023-12-16\ndraft: false\ntype: release-note\nversion: 3.14.6\ntitle: \"Release 3.14.6\"\npreview: \"New LTS release 3.14.6\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12352211\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint Settings for Apache Camel Routes\nDESCRIPTION: Defines the default configuration for the endpoint in the Camel route, including timeout settings, header handling, and exception management.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nthrowExceptionOnFailure=false //we will catch the exceptions\nconnectTimeout=...\nbridgeEndpoint=true\ncopyHeaders=true\nconnectionClose=true\n```\n\n----------------------------------------\n\nTITLE: Bridging MQTT to Knative Events in Groovy\nDESCRIPTION: A Camel K integration written in Groovy that transfers events from an MQTT broker to a Knative event broker.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nfrom('paho:mytopic?brokerUrl=tcp://broker-address:1883&clientId=knative-bridge')\n  .to('knative:event/device-event')\n```\n\n----------------------------------------\n\nTITLE: Configuring Rest DSL with OpenAPI Specification\nDESCRIPTION: Demonstrates how to configure Rest DSL using a contract-first approach with an OpenAPI specification file in Java DSL.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/05/camel46-whatsnew/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void configure() throws Exception {\n    rest().openApi(\"petstore-v3.json\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local File Dependencies in Camel K\nDESCRIPTION: Demonstrates how to include a local JAR file as a dependency in a Camel K integration using the -d flag with the file:// protocol. This allows users to directly upload their local dependencies to the running Integration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/04/camel-k-release-1-9/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkamel run MyIntegration.java -d file://path/to/my-integration.jar\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth MTLS in Apache Camel (Java)\nDESCRIPTION: Sample code demonstrating how to implement OAuth MTLS in Apache Camel using a custom processor to compare the client certificate's SHA-256 thumbprint with the cnf.x5t#S256 member in the access token.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/api-management-infra/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfrom(...) //receive the API request from the client application\n    .process(CertificateBindingProcessor.class) //compare the SHA-256 thumbprint of the client certificate and the cnf.x5t#S256 member of the access token\n    .choice() //check the result of the processor\n    .when(...) //if the the SHA-256 thumbprint and the cnf.x5t#S256 member was matched\n        .setHeader(...) //set the headers for requesting the backend\n        .recipientList(...); //request the backend\n    .otherwise()//if the the SHA-256 thumbprint and the cnf.x5t#S256 member was not matched\n        .setHeader(...) //set the error status code to 403\n        .setBody(...); //set the error response content\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Camel 3.7.0 Release Note\nDESCRIPTION: YAML configuration block defining metadata for the Apache Camel 3.7.0 LTS release note, including version information, release date, end-of-life date, and supported JDK versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.7.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2020-12-16\neol: 2022-01-01\ndraft: false\ntype: release-note\nversion: 3.7.0\ntitle: \"Release 3.7.0\"\npreview: \"New LTS release 3.7.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12349250\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Context Reload for Google Cloud Secret Manager\nDESCRIPTION: Properties configuration to enable automatic Camel context reload when Google Cloud Secret Manager values change. Includes project ID, refresh settings, secrets pattern, and PubSub subscription name.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/12/camel-context-reloading-secret-refresh/index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncamel.vault.gcp.projectId= projectId\ncamel.vault.gcp.refreshEnabled=true\ncamel.vault.gcp.refreshPeriod=60000\ncamel.vault.gcp.secrets=hello*\ncamel.vault.gcp.subscriptionName=subscriptionName\ncamel.main.context-reload-enabled = true\n```\n\n----------------------------------------\n\nTITLE: Running Camel Kafka Connector with AWS2-S3 Source Configuration\nDESCRIPTION: Bash command to run the Camel Kafka Connector standalone with the AWS2-S3 source configuration file. This command starts the connector with the specified properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/12/CKC-idempotency-070/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$KAFKA_HOME/bin/connect-standalone.sh $KAFKA_HOME/config/connect-standalone.properties s3-source.properties\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Kamelets 4.0.0 Release Note\nDESCRIPTION: YAML metadata block defining the properties of the Kamelets 4.0.0 release documentation page, including URL path, publication date, version number, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.0.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.0.0/\"\ndate: 2023-09-11\ntype: release-note\nversion: \"4.0.0\"\ntitle: \"Kamelets 4.0.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Camel JBang Application with JBang\nDESCRIPTION: Command to install the Camel application into JBang, enabling the use of the 'camel' command for running Camel applications from the terminal.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/05/camel317-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njbang app install camel@apache/camel\n```\n\n----------------------------------------\n\nTITLE: Camel K Java Integration with Modeline Options\nDESCRIPTION: Java integration file example showing how to specify dependencies and traits using modeline comments.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// camel-k: dependency=mvn:org.my:lib:1.0.0 dependency=mvn:org.my:otherlib:2.0.0 trait=quarkus.enabled=true\n\n// ...\n// your routes here\n```\n\n----------------------------------------\n\nTITLE: Using Property Expressions in Camel Quarkus Configuration\nDESCRIPTION: Demonstrates how to reference other properties within property values using the ${...} syntax, which allows for property value composition.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nembedded = resolved-via-a\nproperty-expression = a-value-${embedded}-property-expression\n```\n\n----------------------------------------\n\nTITLE: Tech Stack Versions\nDESCRIPTION: Lists the core technology stack versions that Camel K 1.12 is built upon, including Camel K Runtime, Camel Quarkus, Apache Camel, and Camel Kamelets.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/02/camel-k-release-1-12/index.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nApache Camel K Runtime 1.17.0\nApache Camel Quarkus 2.16.0\nApache Camel 3.20.1\nApache Camel Kamelets 3.20.1.1\n```\n\n----------------------------------------\n\nTITLE: Camel Scope Check Implementation\nDESCRIPTION: Apache Camel route implementation for scope checking using a custom processor to validate API access permissions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/api-management-infra/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfrom(...) //receive the API request from the client application\n    .process(ScopeCheckProcessor.class) //check the required scopes\n    .choice() //check the result of the processor\n    .when(...) //if the required scopes was exist\n        .setHeader(...) //set the headers for requesting the backend\n        .recipientList(...); //request the backend\n    .otherwise()//if the required scopes was not exist\n        .setHeader(...) //set the error status code to 403\n        .setBody(...); //set the error response content\n```\n\n----------------------------------------\n\nTITLE: Defining Kamelets 0.5.0 Release Metadata in YAML\nDESCRIPTION: YAML frontmatter block defining metadata for the Kamelets 0.5.0 release documentation. Specifies the release version, date, documentation URL, and JDK compatibility requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.5.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.5.0/\"\ndate: 2021-11-09\ntype: release-note\nversion: \"0.5.0\"\ntitle: \"Kamelets 0.5.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Idempotent Repository for Camel Kafka Connector\nDESCRIPTION: Example configuration for setting up a Kafka-based idempotent repository in Camel Kafka Connector. It enables idempotency, sets the repository type to Kafka, and configures various Kafka-specific options.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/12/CKC-idempotency-070/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncamel.idempotency.enabled=true\ncamel.idempotency.repository.type=kafka\ncamel.idempotency.expression.type=body\ncamel.idempotency.kafka.topic=my.idempotency.topic\ncamel.idempotency.kafka.bootstrap.servers=localhost:9092\ncamel.idempotency.kafka.max.cache.size=1500\ncamel.idempotency.kafka.poll.duration.ms=150\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Kafka Connector Release\nDESCRIPTION: YAML frontmatter metadata block defining properties of the Camel Kafka Connector 0.7.1 release documentation page, including URL path, release date, version number, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-0.7.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-0.7.1/\"\ndate: 2021-01-28\ntype: release-note\nversion: \"0.7.1\"\ntitle: \"Camel Kafka Connector release 0.7.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.1.0 Release Notes\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel 3.1.0 release notes. It specifies the release date, version, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.1.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2020-02-27\ndraft: false \ntype: release-note\nversion: 3.1.0\ntitle: \"Release 3.1.0\"\npreview: \"New minor release\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12346526\ncategory: camel\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Executing Camel Routes via Command Line\nDESCRIPTION: Example showing how to run multiple Camel routes with different DSL types using the Camel CLI with JBang.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/camel3x-top10-features/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncamel run route1.java route2.xml route3.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Camel K Integration with Dependencies\nDESCRIPTION: Example of running a Camel K integration with custom libraries and trait configurations using command line parameters.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkamel run -d mvn:org.my:lib:1.0.0 -d mvn:org.my:otherlib:2.0.0 -t quarkus.enabled=true Handler.java\n```\n\n----------------------------------------\n\nTITLE: Running Sample Integration\nDESCRIPTION: Command to run a sample integration in development mode with environment variable.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/Optimizing-Camel-K-Integration-Build-Time/index.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkamel run --env MY_ENV_VAR=\"hello world\" Env.java --dev\n```\n\n----------------------------------------\n\nTITLE: Checking Camel K Version\nDESCRIPTION: Command to verify the installed version of Camel K client, ensuring it's version 1.12 or higher for OpenTelemetry support.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kamel version\\nCamel K Client 1.12.0\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Exception-Handling AggregationStrategy in Java for Apache Camel\nDESCRIPTION: This snippet defines a SimpleFlowMergeAggregator class that implements Camel's AggregationStrategy interface with enhanced exception handling. It detects exchanges that have failed, and if the first exchange encounters an exception, it shifts the aggregation base to the first successful exchange to allow processing to continue.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/multicast-failure-routing/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class SimpleFlowMergeAggregator implements AggregationStrategy {\n    private static final Logger LOGGER = LoggerFactory.getLogger(SimpleFlowMergeAggregator.class.getName());\n    @Override\n    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        LOGGER.info(\"Inside aggregator \" + newExchange.getIn().getBody());\n        if(oldExchange == null) {\n            String data = newExchange.getIn().getBody(String.class);\n            List<String> aggregatedDataList = new ArrayList<>();\n            aggregatedDataList.add(data);\n            newExchange.getIn().setBody(aggregatedDataList);\n            return newExchange;\n        }\n\n        if(hadException(oldExchange)) {\n            if(!hadException(newExchange)) {\n                // aggregate and swap the base\n                LOGGER.info(\"Found new exchange with success. swapping the base exchange\");\n                List<String> oldData = oldExchange.getIn().getBody(List.class);\n                oldData.add(newExchange.getIn().getBody(String.class));\n                newExchange.getIn().setBody(oldData); // swapped the base here\n                return newExchange;\n            }\n        }\n\n        List<String> oldData = oldExchange.getIn().getBody(List.class);\n        oldData.add(newExchange.getIn().getBody(String.class));\n        oldExchange.getIn().setBody(oldData);\n\n        return oldExchange;\n    }\n\n\n    private boolean hadException(Exchange exchange) {\n\n        if(exchange.isFailed()) {\n            return true;\n        }\n\n        if(exchange.isRollbackOnly()) {\n            return true;\n        }\n\n        if(exchange.isRollbackOnlyLast()) {\n            return true;\n        }\n\n        if(((ExtendedExchange)exchange).isErrorHandlerHandledSet()\n                && ((ExtendedExchange)exchange).isErrorHandlerHandled()) {\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Kamelets 4.8.0 Release Page\nDESCRIPTION: YAML frontmatter defining metadata for the Kamelets 4.8.0 release page. It specifies the URL path, release date, content type, version number, title, and JDK compatibility information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.8.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.8.0/\"\ndate: 2024-09-19\ntype: release-note\nversion: \"4.8.0\"\ntitle: \"Kamelets 4.8.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Running FTP Service with Camel JBang Infra\nDESCRIPTION: Shows how to use the new Camel JBang 'infra' command to start an FTP service for testing. The command returns a JSON response with service configuration details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel410-whatsnew/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ camel infra run ftp\n\nStarting service ftp\n{\n  \"getPort\" : 52472,\n  \"getFtpRootDir\" : \"file://path/to/current/directory/target/ftp/camel-test-infra-test-directory/camel-test-infra-configuration-test-directory\"\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel-K 1.11.0 Release Note\nDESCRIPTION: YAML front matter metadata for the Camel-K 1.11.0 release note page. Contains information such as URL path, release date, version number, title, category, milestone, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.11.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.11.0/\"\ndate: 2022-12-07\ntype: release-note\nversion: \"1.11.0\"\ntitle: \"Camel-K 1.11.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 36\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Camel K in Development and Production Environments\nDESCRIPTION: Commands to create Kubernetes namespaces for development and production, and install Camel K operator in both environments with different configurations.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace development\nkubectl create namespace production\nkamel install -n development\nkamel install -n production -x camel-k-prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Route with Path Parameters in YAML\nDESCRIPTION: Example of how path parameters are set in Karavan 3.21.0, using the same key-value format as query parameters. This shows the new approach for configuring activemq routes with topic parameters.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-karavan-3.21.0/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- route:\n    from:\n      uri: activemq\n      parameters:\n        destinationType: topic\n        destinationName: topic1\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Datasource in Camel K\nDESCRIPTION: Example showing how to configure a JDBC Datasource in Camel K using both build-time and runtime properties along with PostgreSQL dependency.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/07/camel-k-properties-refactoring/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkamel run PostgresDBAutoDatasource.java --dev \\\n                                        --build-property quarkus.datasource.camel.db-kind=postgresql \\\n                                        -p quarkus.datasource.camel.jdbc.url=jdbc:postgresql://postgres:5432/test \\\n                                        -p quarkus.datasource.camel.username=postgresadmin \\\n                                        -p quarkus.datasource.camel.password=admin123 \\\n                                        -d mvn:io.quarkus:quarkus-jdbc-postgresql:1.13.7.Final\n```\n\n----------------------------------------\n\nTITLE: Installing Camel K Operator\nDESCRIPTION: Commands to install the Camel K operator and verify its deployment status in Kubernetes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kamel install\\n$ kubectl get pods -l name=camel-k-operator\\nNAME                                READY   STATUS    RESTARTS   AGE\\ncamel-k-operator-5b897ddcdd-4qwqb   1/1     Running   0          50s\n```\n\n----------------------------------------\n\nTITLE: Simple Classification Implementation with TensorFlow Serving Classify API\nDESCRIPTION: Java implementation for the half_plus_two model using TensorFlow Serving Classification API. Demonstrates input preparation and result handling for simple numerical classification.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-tensorflow-serving\n\nimport org.apache.camel.builder.RouteBuilder;\nimport org.tensorflow.example.Example;\nimport org.tensorflow.example.Feature;\nimport org.tensorflow.example.Features;\nimport org.tensorflow.example.FloatList;\nimport tensorflow.serving.InputOuterClass.ExampleList;\nimport tensorflow.serving.InputOuterClass.Input;\n\npublic class classify extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:classify?repeatCount=1\")\n            .setBody(constant(createInput(\"x\", 1.0f)))\n            .to(\"tensorflow-serving:classify?modelName=half_plus_two&modelVersion=123&signatureName=classify_x_to_y\")\n            .log(\"Result: ${body.result}\");\n    }\n\n    Input createInput(String key, float f) {  // (1)\n        Feature feature = Feature.newBuilder()\n                .setFloatList(FloatList.newBuilder().addValue(f))\n                .build();\n        Features features = Features.newBuilder()\n                .putFeature(key, feature)\n                .build();\n        Example example = Example.newBuilder()\n                .setFeatures(features)\n                .build();\n        ExampleList exampleList = ExampleList.newBuilder()\n                .addExamples(example)\n                .build();\n        return Input.newBuilder()\n                .setExampleList(exampleList)\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PipelineProcessor Logic for Flow Control in Apache Camel\nDESCRIPTION: Core code from Camel's PipelineProcessor that determines whether to continue processing to the next step. This snippet shows the decision logic that evaluates exchange state to determine if processing should continue.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/multicast-failure-routing/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run() {\n    boolean stop = exchange.isRouteStop();\n    int num = index;\n    boolean more = num < size;\n    boolean first = num == 0;\n\n    if (!stop && more && (first || continueProcessing(exchange, \"so breaking out of pipeline\", LOG))) {\n\n        // prepare for next run\n        if (exchange.hasOut()) {\n            exchange.setIn(exchange.getOut());\n            exchange.setOut(null);\n        }\n\n        // get the next processor\n        AsyncProcessor processor = processors.get(index++);\n\n        processor.process(exchange, this);\n    } else {\n        // copyResults is needed in case MEP is OUT and the message is not an OUT message\n        ExchangeHelper.copyResults(exchange, exchange);\n\n        // logging nextExchange as it contains the exchange that might have altered the payload and since\n        // we are logging the completion if will be confusing if we log the original instead\n        // we could also consider logging the original and the nextExchange then we have *before* and *after* snapshots\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Processing complete for exchangeId: {} >>> {}\", exchange.getExchangeId(), exchange);\n        }\n\n        AsyncCallback cb = callback;\n        taskFactory.release(this);\n        reactiveExecutor.schedule(cb);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 4.0.0-M3 Release Notes\nDESCRIPTION: This YAML frontmatter block defines metadata for the Apache Camel 4.0.0-M3 release notes. It specifies the release date, version, title, preview text, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.0.0-M3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-05-05\ndraft: false\ntype: release-note\nversion: 4.0.0-M3\ntitle: \"Release 4.0.0-M3\"\npreview: \"Third milestone for 4.0.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12352968\ncategory: camel\nkind: RC\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Variables using YAML DSL in Camel\nDESCRIPTION: Example of setting a variable using JQ expression in Camel YAML DSL, extracting alcohol percentage from beer data and converting it to float\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/02/camel44-whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- setVariable:\n    name: alc2\n    expression:\n      jq:\n        expression: .alcohol | rtrimstr(\"%\")\n        source: beer2\n        resultType: float\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Spring XML Context\nDESCRIPTION: XML configuration snippet showing camelContext element with registerEndpointIdsFromRoute option for backwards compatibility when registering endpoints in Spring registry.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.20.0.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<camelContext registerEndpointIdsFromRoute=\"true\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Debug Profile for Camel Spring Boot\nDESCRIPTION: Maven profile configuration that enables Camel debugging capabilities and Jolokia agent integration for remote debugging. Includes dependency management and build plugin configuration for the debug profile.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/08/camel-springboot-remote-debug-to-openshift-from-vscode/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n         <profile>\n            <id>camel.debug</id>\n            <activation>\n                <property>\n                    <name>camel.debug</name>\n                    <value>true</value>\n                </property>\n            </activation>\n            <dependencies>\n                <dependency>\n                    <groupId>org.apache.camel.springboot</groupId>\n                    <artifactId>camel-debug-starter</artifactId>\n                </dependency>\n            </dependencies>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-dependency-plugin</artifactId>\n                        <version>3.7.1</version>\n                        <executions>\n                            <execution>\n                                <id>copy</id>\n                                <phase>generate-sources</phase>\n                                <goals>\n                                    <goal>copy</goal>\n                                </goals>\n                                <configuration>\n                                    <artifactItems>\n                                      <artifactItem>\n                                        <groupId>org.jolokia</groupId>\n                                        <artifactId>jolokia-agent-jvm</artifactId>\n                                        <version>2.0.3</version>\n                                        <type>jar</type>\n                                        <classifier>javaagent</classifier>\n                                      </artifactItem>\n                                    </artifactItems>\n                                    <stripVersion>true</stripVersion>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.springframework.boot</groupId>\n                        <artifactId>spring-boot-maven-plugin</artifactId>\n                        <configuration>\n                            <jvmArguments>-javaagent:target/dependency/jolokia-agent-jvm-javaagent.jar=port=7878,host=localhost</jvmArguments>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n```\n\n----------------------------------------\n\nTITLE: Converting Traits Configuration from Legacy to New Schema in YAML\nDESCRIPTION: Example showing how to migrate from the legacy trait configuration schema to the new strongly-typed schema that was introduced in Camel K 1.10. The new format removes the nested 'configuration' property in favor of a flatter structure.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/camel-k-release-1-10/index.md#2025-04-08_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntraits:\n  container:\n    configuration:\n      enabled: true\n      name: my-integration\n```\n\nLANGUAGE: YAML\nCODE:\n```\ntraits:\n  container:\n    enabled: true\n    name: my-integration\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Format in Camel K\nDESCRIPTION: Command to customize the logging format in Camel K using the logging.format trait. This example sets a format that displays the hour, log level, thread name, and message.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/new-camel-k-logging-features/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--trait logging.format='%d{HH:mm:ss} %-5p (%t) %s%e%n'\n```\n\n----------------------------------------\n\nTITLE: Installing Cert Manager for Jaeger\nDESCRIPTION: Command to install cert-manager, a prerequisite for the Jaeger operator installation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Multicast Routes with Exception Handling in Apache Camel Java DSL\nDESCRIPTION: A Camel route configuration demonstrating multicast pattern with exception handling. It defines a main flow with multicast to two child routes, where one route purposely throws an exception while the other completes successfully.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/multicast-failure-routing/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void configure() throws Exception {\n    onException(Exception.class)\n        .useOriginalMessage()\n        .handled(true)\n        .log(\"Exception handler invoked\")\n        .transform().constant(\"{\\\"data\\\" : \\\"err\\\"}\")\n        .end();\n\n    from(\"jetty:http://localhost:8081/myapi?httpMethodRestrict=GET\")\n        .log(\"received request\")\n        .log(\"Entering multicast\")\n        .multicast(new SimpleFlowMergeAggregator())\n        .parallelProcessing().to(\"direct:A\", \"direct:B\")\n        .end()\n        .log(\"Aggregated results ${body}\")\n        .log(\"Another log\")\n        .transform(simple(\"{\\\"result\\\" : \\\"success\\\"}\"))\n        .end();\n\n    from(\"direct:A\")\n        .log(\"Executing PATH_1 - exception path\")\n        .transform(constant(\"DATA_FROM_PATH_1\"))\n        .log(\"Starting exception throw\")\n        .throwException(new Exception(\"USER INITIATED EXCEPTION\"))\n        .log(\"PATH_1\")\n        .end();\n\n    from(\"direct:B\")\n        .log(\"Executing PATH_2 - success path\")\n        .delayer(1000)\n        .transform(constant(\"DATA_FROM_PATH_2\"))\n        .log(\"PATH_2\")\n        .end();\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel 3.8.0 Release Notes\nDESCRIPTION: Metadata configuration for the release notes page using YAML front matter. Includes release date, version information, JDK compatibility, and page categorization details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.8.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2021-02-13\ndraft: false\ntype: release-note\nversion: 3.8.0\ntitle: \"Release 3.8.0\"\npreview: \"New minor release 3.8.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12349420\ncategory: camel\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Model Metadata Retrieval with Camel TensorFlow Serving\nDESCRIPTION: Java code showing how to retrieve metadata from a TensorFlow model using Camel routes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-tensorflow-serving\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class model_metadata extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:model-metadata?repeatCount=1\")\n            .to(\"tensorflow-serving:model-metadata?modelName=mnist&modelVersion=1\")\n            .log(\"Metadata: ${body.getMetadataOrThrow('signature_def')}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot application startup log output\nDESCRIPTION: Console output showing the successful startup of the migrated Camel application running on Spring Boot.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_9\n\nLANGUAGE: log\nCODE:\n```\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n\n :: Spring Boot ::                (v3.4.0)\n\n2024-12-04T08:24:19.113+01:00  INFO 45359 --- [           main] c.mycompany.myproject.CamelApplication   : Starting CamelApplication using Java 17.0.11 with PID 45359 (/Users/davsclaus/workspace/camel-karaf-examples/examples/camel-example-sql-blueprint/code/target/classes started by davsclaus in /Users/davsclaus/workspace/camel-karaf-examples/examples/camel-example-sql-blueprint/code)\n2024-12-04T08:24:19.114+01:00  INFO 45359 --- [           main] c.mycompany.myproject.CamelApplication   : No active profile set, falling back to 1 default profile: \"default\"\n2024-12-04T08:24:19.679+01:00  INFO 45359 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)\n2024-12-04T08:24:19.685+01:00  INFO 45359 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2024-12-04T08:24:19.685+01:00  INFO 45359 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.33]\n2024-12-04T08:24:19.708+01:00  INFO 45359 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2024-12-04T08:24:19.709+01:00  INFO 45359 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 574 ms\n2024-12-04T08:24:19.897+01:00  WARN 45359 --- [           main] o.a.c.i.e.DefaultCamelBeanPostProcessor  : No CamelContext defined yet so cannot inject into bean: startupConditionStrategy\n2024-12-04T08:24:20.160+01:00  INFO 45359 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 1 endpoint beneath base path '/actuator'\n2024-12-04T08:24:20.231+01:00  INFO 45359 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'\n2024-12-04T08:24:20.289+01:00  INFO 45359 --- [           main] o.apache.camel.example.sql.DatabaseBean  : Creating table orders ...\n2024-12-04T08:24:20.509+01:00  INFO 45359 --- [           main] o.apache.camel.example.sql.DatabaseBean  : ... created table orders\n2024-12-04T08:24:20.613+01:00  INFO 45359 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 4.9.0 (camel-example-sql-blueprint) is starting\n2024-12-04T08:24:20.619+01:00  INFO 45359 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Routes startup (total:2)\n2024-12-04T08:24:20.619+01:00  INFO 45359 --- [           main] o.a.c.impl.engine.AbstractCamelContext   :     Started generateOrder-route (timer://foo)\n2024-12-04T08:24:20.619+01:00  INFO 45359 --- [           main] o.a.c.impl.engine.AbstractCamelContext   :     Started processOrder-route (sql://select%20*%20from%20orders%20where%20processed%20=%20false)\n2024-12-04T08:24:20.619+01:00  INFO 45359 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 4.9.0 (camel-example-sql-blueprint) started in 6ms (build:0ms init:0ms start:6ms boot:715ms)\n2024-12-04T08:24:20.620+01:00  INFO 45359 --- [           main] c.mycompany.myproject.CamelApplication   : Started CamelApplication in 1.653 seconds (process running for 1.782)\n2024-12-04T08:24:21.685+01:00  INFO 45359 --- [2 - timer://foo] generateOrder-route                      : Inserted new order 0\n2024-12-04T08:24:22.187+01:00  INFO 45359 --- [sed%20=%20false] processOrder-route                       : Processed order id 0 item 222 of 10 copies of ActiveMQ in Action\n```\n\n----------------------------------------\n\nTITLE: Configuring Kamelets 0.9.3 Release Front Matter in YAML\nDESCRIPTION: YAML front matter configuration block defining metadata for the Kamelets 0.9.3 release documentation. Specifies the URL path, publication date, version number, title, and Java requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.9.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.9.3/\"\ndate: 2022-11-07\ntype: release-note\nversion: \"0.9.3\"\ntitle: \"Kamelets 0.9.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Hashicorp Vault Properties\nDESCRIPTION: Main configuration properties for Hashicorp Vault integration in Camel.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/secrets-properties-functions-part-2/index.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ncamel.vault.hashicorp.token = token\ncamel.vault.hashicorp.engine = engine\ncamel.vault.hashicorp.host = host\ncamel.vault.hashicorp.port = port\ncamel.vault.hashicorp.scheme = scheme\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Resources with kubectl in Camel K\nDESCRIPTION: Example of using kubectl to retrieve Camel catalog and integration platform information in Camel K. This demonstrates the enhanced Kubernetes-native CLI capabilities in Camel K 2.0 which provides more information directly through standard Kubernetes tools.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-k-2-0/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get camelcatalog\nNAME                   RUNTIME PROVIDER   RUNTIME VERSION   RUNTIME CAMEL VERSION   PHASE\ncamel-catalog-2.16.0   quarkus            2.16.0            3.20.1                  Ready\n$ kubectl get ip\nNAME      PHASE   BUILD STRATEGY   PUBLISH STRATEGY   REGISTRY ADDRESS   DEFAULT RUNTIME\ncamel-k   Ready   routine          Spectrum           10.110.251.124     2.16.0\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing MyBean Class for Camel Route\nDESCRIPTION: Java class implementation for a simple bean used in the Camel route example, containing hello and bye methods.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Sublimedap/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.camel.example;\n\npublic class MyBean {\n\n    private String hi;\n\n    public MyBean(String hi) {\n        this.hi = hi;\n    }\n\n    public String hello() {\n        return hi + \" Begin ? \";\n\n    }\n     public String bye() {\n        return hi + \" End ? \";\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jaeger Operator\nDESCRIPTION: Commands to create observability namespace and install the Jaeger operator.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl create namespace observability\\n$ kubectl create -f https://github.com/jaegertracing/jaeger-operator/releases/download/v1.42.0/jaeger-operator.yaml -n observability\n```\n\n----------------------------------------\n\nTITLE: Implementing ChuckComponent class in Java\nDESCRIPTION: Java code snippet showing the implementation of the ChuckComponent class, which extends DefaultComponent. This is the entry point for the component that creates endpoints based on URIs.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Component(\"chuck\")\npublic class ChuckComponent extends DefaultComponent {\n    @Override\n    protected Endpoint createEndpoint(final String uri, String remaining, final Map<String, Object> parameters) throws Exception {\n        final ChuckConfiguration configuration = new ChuckConfiguration();\n        //…\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel-K 1.4.0 Release Notes\nDESCRIPTION: YAML metadata block defining the properties of the Camel-K 1.4.0 release note page. Includes URL path, publication date, version number, and other metadata fields required for the documentation system.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.4.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.4.0/\"\ndate: 2021-04-20\ntype: release-note\nversion: \"1.4.0\"\ntitle: \"Camel-K 1.4.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 17\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Camel Route for KServe Server Liveness Check\nDESCRIPTION: Java code that creates a Camel route to check if a KServe server is live. The route calls the KServe server live endpoint and logs the response.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.2@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-kserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class server_live extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:server-live?repeatCount=1\")\n            .to(\"kserve:server/live\")\n            .log(\"Live: ${body.live}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Community Resource Section with Hugo Shortcodes\nDESCRIPTION: This code demonstrates how to structure a community resource section using Hugo shortcodes. The pattern creates a boxed layout with an icon, title, description, and a 'Read More' button that links to a detailed page.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/community/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< div \"box\" >}}\n\n<a href=\"/community/support/\" class=\"icon\" title=\"Community support\">{{< icon \"support\" \"Question bubble\" >}}</a>\n\n{{< div \"content\" >}}\n\n## Support\n\nIf you are experiencing problems using Camel, there are several channels available to seek help from the community.\n<p>\n<a class=\"button dark\" href=\"/community/support/\">Read More</a>\n</p>\n\n{{< /div >}}\n\n{{< /div >}}\n```\n\n----------------------------------------\n\nTITLE: Preparing Input Data for Camel Route\nDESCRIPTION: Shell commands to copy and move transcript files to the appropriate directory for processing by the Camel route.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/data-extraction-example/index.md#2025-04-08_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd camel-quarkus-examples/data-extract-langchain4j/\ncp -rf src/test/resources/transcripts/ target/transcripts-tmp\nmv target/transcripts-tmp/*.json target/transcripts/\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Context Reload for Azure Key Vault\nDESCRIPTION: Properties configuration to enable automatic Camel context reload when Azure Key Vault values change. Includes EventHub connection string, Azure Storage Blob parameters for checkpoint store, and refresh settings.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/12/camel-context-reloading-secret-refresh/index.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncamel.vault.azure.refreshEnabled=true\ncamel.vault.azure.refreshPeriod=60000\ncamel.vault.azure.secrets=Secret\ncamel.vault.azure.eventhubConnectionString=eventhub_conn_string\ncamel.vault.azure.blobAccountName=blob_account_name\ncamel.vault.azure.blobContainerName=blob_container_name\ncamel.vault.azure.blobAccessKey=blob_access_key\ncamel.main.context-reload-enabled = true\n```\n\n----------------------------------------\n\nTITLE: Querying IntegrationKit Root Images in Camel K 2.2\nDESCRIPTION: This shell command shows how to query the API to view the root images of IntegrationKits in Camel K 2.2. It displays the hierarchy of IntegrationKits and their corresponding root images, which helps in understanding the base image used for each Integration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/01/camel-k-2-2/index.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get ik\nNAME                       ROOT\nkit-ckofr2pbtegs738g3mog   eclipse-temurin:17\nkit-ckofrf9btegs738g3mp0   eclipse-temurin:17\nkit-ckofse1btegs738g3mqg   registry.access.redhat.com/ubi8/openjdk-17:1.16\nkit-ckofsq1btegs738g3mr0   registry.access.redhat.com/ubi8/openjdk-17:1.16\nkit-ckoh539btegs738g3mu0   eclipse-temurin:17.0.8.1_1-jdk-ubi9-minimal\n```\n\n----------------------------------------\n\nTITLE: Creating CDI Bean for Month Determination\nDESCRIPTION: Implementation of a CDI bean that provides the current month number. Uses LocalDateTime to get the current month value and is annotated for CDI integration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/mocking-beans-with-camel-quarkus/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScoped\n@Named(\"monthBean\")\n@RegisterForReflection\npublic class MonthBean {\n  public int month() {\n    return LocalDateTime.now().getMonth().getValue();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jaeger Instance\nDESCRIPTION: Commands to deploy a Jaeger instance using the AllInOne image and verify its status.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f - << EOF\\napiVersion: jaegertracing.io/v1\\nkind: Jaeger\\nmetadata:\\n  name: instance\\nEOF\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get jaeger\\nNAME       STATUS    VERSION   STRATEGY   STORAGE   AGE\\ninstance   Running   1.42.0    allinone   memory    8s\n```\n\n----------------------------------------\n\nTITLE: Implementing Integration Test for Chuck Component in Java\nDESCRIPTION: This Java class implements an integration test for the Chuck component using CamelTestSupport and a RouteBuilder.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class ChuckComponentTest extends CamelTestSupport {\n    @Test\n    public void testRandomJoke() throws Exception {\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(1);\n        mock.expectedBodyReceived().body(RandomJoke.class);\n        template.sendBody(\"direct:test\", \"\");\n        assertMockEndpointsSatisfied();\n    }\n\n    @Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() {\n                from(\"direct:test\")\n                  .to(\"chuck:jokes\")\n                  .log(\"${body}\")\n                  .to(\"mock:result\");\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dataformat Endpoint URI for Jackson in Camel K\nDESCRIPTION: This code snippet shows a dataformat endpoint URI using Jackson unmarshaller, which now automatically adds the camel:jackson dependency to the integration dependency list in Camel K 1.11.0.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/12/camel-k-release-1.11/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<to uri=\"dataformat:jackson:unmarshal\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager with Default Instance via Configuration Properties\nDESCRIPTION: Shows how to configure Google Cloud Secret Manager to use the default GCP instance credentials through main configuration properties. This approach relies on the VM instance having proper GCP permissions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ncamel.vault.gcp.useDefaultInstance = true\ncamel.vault.aws.projectId = region\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Kamelets Release Note\nDESCRIPTION: YAML frontmatter metadata defining the properties of the Kamelets 4.0.0-M2 release note page, including URL, date, version, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.0.0-M2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.0.0-M2/\"\ndate: 2023-04-18\ntype: release-note\nversion: \"4.0.0-M2\"\ntitle: \"Kamelets 4.0.0-M2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: AWS EventBridge Target Configuration\nDESCRIPTION: Complete JSON structure for configuring targets in AWS EventBridge rules, including all possible parameters and configurations.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/camel-aws2-eventbridge-intro/index.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"EventBusName\": \"string\",\n   \"Rule\": \"string\",\n   \"Targets\": [\n      {\n         \"Arn\": \"string\",\n         \"BatchParameters\": {\n            \"ArrayProperties\": {\n               \"Size\": number\n            },\n            \"JobDefinition\": \"string\",\n            \"JobName\": \"string\",\n            \"RetryStrategy\": {\n               \"Attempts\": number\n            }\n         },\n         \"DeadLetterConfig\": {\n            \"Arn\": \"string\"\n         },\n         \"EcsParameters\": {\n            \"Group\": \"string\",\n            \"LaunchType\": \"string\",\n            \"NetworkConfiguration\": {\n               \"awsvpcConfiguration\": {\n                  \"AssignPublicIp\": \"string\",\n                  \"SecurityGroups\": [ \"string\" ],\n                  \"Subnets\": [ \"string\" ]\n               }\n            },\n            \"PlatformVersion\": \"string\",\n            \"TaskCount\": number,\n            \"TaskDefinitionArn\": \"string\"\n         },\n         \"HttpParameters\": {\n            \"HeaderParameters\": {\n               \"string\" : \"string\"\n            },\n            \"PathParameterValues\": [ \"string\" ],\n            \"QueryStringParameters\": {\n               \"string\" : \"string\"\n            }\n         },\n         \"Id\": \"string\",\n         \"Input\": \"string\",\n         \"InputPath\": \"string\",\n         \"InputTransformer\": {\n            \"InputPathsMap\": {\n               \"string\" : \"string\"\n            },\n            \"InputTemplate\": \"string\"\n         },\n         \"KinesisParameters\": {\n            \"PartitionKeyPath\": \"string\"\n         },\n         \"RedshiftDataParameters\": {\n            \"Database\": \"string\",\n            \"DbUser\": \"string\",\n            \"SecretManagerArn\": \"string\",\n            \"Sql\": \"string\",\n            \"StatementName\": \"string\",\n            \"WithEvent\": boolean\n         },\n         \"RetryPolicy\": {\n            \"MaximumEventAgeInSeconds\": number,\n            \"MaximumRetryAttempts\": number\n         },\n         \"RoleArn\": \"string\",\n         \"RunCommandParameters\": {\n            \"RunCommandTargets\": [\n               {\n                  \"Key\": \"string\",\n                  \"Values\": [ \"string\" ]\n               }\n            ]\n         },\n         \"SqsParameters\": {\n            \"MessageGroupId\": \"string\"\n         }\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Camel Route with JBang\nDESCRIPTION: Command to initialize a new Camel route using the Camel JBang CLI.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/11/camel-k-jbang/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ camel init HelloJBang.java\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Property Placeholders in Camel\nDESCRIPTION: Demonstrates how to use optional property placeholders in Camel configurations. The '?' prefix indicates an optional placeholder that won't cause an error if not defined.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/03/Camel39-Whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n{{?myBufferSize}}\n```\n\n----------------------------------------\n\nTITLE: Deploying Inventory Service with Telemetry\nDESCRIPTION: Shell command to deploy the Inventory service with telemetry trait enabled in Camel K. Configures tracing, sampling, and ingress settings.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkamel run InventoryService.java --name inventory \\\n   -d camel-jackson \\\n   -t telemetry.enabled=true \\\n   -t telemetry.sampler=on \\\n   -t ingress.enabled=true \\\n   -t ingress.host=inventory.local\n```\n\n----------------------------------------\n\nTITLE: Ollama API Request and Response for Structured Output\nDESCRIPTION: Example of an Ollama API request that shows how a JSON schema is passed in the 'format' property to constrain the LLM's output to match a specific structure. The response contains a structured JSON object that follows the defined schema.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/langchain-structured-output/index.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n2025-02-03 11:03:50,722 INFO  [io.qua.lan.oll.OllamaRestApi$OllamaLogger] (vert.x-eventloop-thread-1) Request:\n- method: POST\n- url: http://localhost:11434/api/chat\n- headers: [Accept: application/json], [Content-Type: application/json], [User-Agent: Quarkus REST Client], [content-length: 1448]\n- body: {\n  \"model\" : \"granite3-dense\",\n  \"messages\" : [ {\n    \"role\" : \"user\",\n    \"content\" : \"Extract information about a customer from the text delimited by triple backticks: ```Operator: Hello, how may I help you ?\\nCustomer: Hello, I'm calling because I need to declare an accident on my main vehicle.\\nOperator: Ok, can you please give me your name ?\\nCustomer: My name is Sarah London.\\nOperator: Could you please give me your birth date ?\\nCustomer: 1986, July the 10th.\\nOperator: Ok, I've got your contract and I'm happy to share with you that we'll be able to reimburse all expenses linked to this accident.\\nCustomer: Oh great, many thanks.```.The summary field should concisely relate the customer main ask.\"\n  } ],\n  \"options\" : {\n    \"temperature\" : 0.0,\n    \"top_k\" : 40,\n    \"top_p\" : 0.9\n  },\n  \"format\" : {\n    \"type\" : \"object\",\n    \"properties\" : {\n      \"customerSatisfied\" : {\n        \"type\" : \"boolean\"\n      },\n      \"customerName\" : {\n        \"type\" : \"string\"\n      },\n      \"customerBirthday\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"year\" : {\n            \"type\" : \"integer\"\n          },\n          \"month\" : {\n            \"type\" : \"integer\"\n          },\n          \"day\" : {\n            \"type\" : \"integer\"\n          }\n        },\n        \"required\" : [ \"year\", \"month\", \"day\" ]\n      },\n      \"summary\" : {\n        \"type\" : \"string\"\n      }\n    },\n    \"required\" : [ \"customerSatisfied\", \"customerName\", \"customerBirthday\", \"summary\" ]\n  },\n  \"stream\" : false\n}\n2025-02-03 11:03:56,962 INFO  [io.qua.lan.oll.OllamaRestApi$OllamaLogger] (vert.x-eventloop-thread-1) Response:\n- status code: 200\n- headers: [Content-Type: application/json; charset=utf-8], [Date: Mon, 03 Feb 2025 10:03:56 GMT], [Content-Length: 645]\n- body: {\n  \"model\" : \"granite3-dense\",\n  \"created_at\" : \"2025-02-03T10:03:56.946464977Z\",\n  \"message\" : {\n    \"role\" : \"assistant\",\n    \"content\" : \"{\\n  \\\"customerSatisfied\\\": true,\\n  \\\"customerName\\\": \\\"Sarah London\\\",\\n  \\\"customerBirthday\\\": {\\n    \\\"year\\\": 1986,\\n    \\\"month\\\": 7,\\n    \\\"day\\\": 10\\n  },\\n  \\\"summary\\\": \\\"The customer, Sarah London, called to declare an accident on her main vehicle and was informed that the expenses related to the accident would be reimbursed.\\\"\\n}\"\n  },\n  \"done_reason\" : \"stop\",\n  \"done\" : true,\n  \"total_duration\" : 6227793363,\n  \"load_duration\" : 5201966,\n  \"prompt_eval_count\" : 189,\n  \"prompt_eval_duration\" : 2087000000,\n  \"eval_count\" : 97,\n  \"eval_duration\" : 4132000000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Debug Profile with Jolokia in Maven POM\nDESCRIPTION: XML configuration for the camel.debug Maven profile that enables Camel debugging capabilities with Jolokia JVM agent. This profile adds the camel-quarkus-debug dependency and configures the necessary JVM arguments.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/08/camel-quarkus-remote-debug-to-openshift-from-vscode/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n        <profile>\n            <id>camel.debug</id>\n            <activation>\n                <property>\n                    <name>camel.debug</name>\n                    <value>true</value>\n                </property>\n            </activation>\n            <dependencies>\n                <dependency>\n                    <groupId>org.apache.camel.quarkus</groupId>\n                    <artifactId>camel-quarkus-debug</artifactId>\n                </dependency>\n            </dependencies>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-dependency-plugin</artifactId>\n                        <version>3.7.1</version>\n                        <executions>\n                            <execution>\n                                <id>copy</id>\n                                <phase>generate-sources</phase>\n                                <goals>\n                                    <goal>copy</goal>\n                                </goals>\n                                <configuration>\n                                    <artifactItems>\n                                      <artifactItem>\n                                        <groupId>org.jolokia</groupId>\n                                        <artifactId>jolokia-agent-jvm</artifactId>\n                                        <version>2.0.3</version>\n                                        <type>jar</type>\n                                        <classifier>javaagent</classifier>\n                                      </artifactItem>\n                                    </artifactItems>\n                                    <stripVersion>true</stripVersion>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>${quarkus.platform.group-id}</groupId>\n                        <artifactId>quarkus-maven-plugin</artifactId>\n                        <configuration>\n                            <jvmArgs>-Dcamel.main.shutdownTimeout=30 -Dquarkus.camel.source-location-enabled=true -javaagent:target/dependency/jolokia-agent-jvm-javaagent.jar=port=7878,host=localhost</jvmArgs>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n```\n\n----------------------------------------\n\nTITLE: Dependency Versions Block\nDESCRIPTION: Lists the version numbers of key dependencies upgraded in Camel K 1.12, including Golang, Kubernetes, Knative and Prometheus versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/02/camel-k-release-1-12/index.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGolang to `1.18`\nUpgrade k8s to `1.25.2`\nUpgrade Knative to `1.8.3`\nPrometheus to `0.60.0`\n```\n\n----------------------------------------\n\nTITLE: TorchServe Health Check Route\nDESCRIPTION: Camel route implementation for checking TorchServe server health status using periodic ping requests\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-torchserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class ping extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:ping?period=10000\")\n            .to(\"torchserve:inference/ping\")\n            .log(\"Status: ${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a New Branch for the Component\nDESCRIPTION: These shell commands create a new branch, commit changes, and push the branch to the repository.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n$ git checkout -b camel-chuck\n$ git add .\n$ git commit -m \"camel-chuck component\"\n$ git push\n```\n\n----------------------------------------\n\nTITLE: AWS EventBridge Multiple States Event Pattern\nDESCRIPTION: Event pattern configuration for filtering multiple EC2 instance states (terminated and running).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/camel-aws2-eventbridge-intro/index.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": [ \"aws.ec2\" ],\n  \"detail-type\": [ \"EC2 Instance State-change Notification\" ],\n  \"detail\": {\n    \"state\": [ \"terminated\", \"running\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Camel JBang Application\nDESCRIPTION: Command to run a Camel JBang application and its output, showing the Camel version and route startup information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/11/camel-k-jbang/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ camel run HelloJBang.java\n2022-11-23 12:11:05.407  INFO 52841 --- [           main] org.apache.camel.main.MainSupport        : Apache Camel (JBang) 3.18.1 is starting\n2022-11-23 12:11:05.470  INFO 52841 --- [           main] org.apache.camel.main.MainSupport        : Using Java 11.0.17 with PID 52841. Started by squake in /home/squake/workspace/jbang/camel-blog\n2022-11-23 12:11:07.537  INFO 52841 --- [           main] e.camel.impl.engine.AbstractCamelContext : Apache Camel 3.18.1 (CamelJBang) is starting\n2022-11-23 12:11:07.675  INFO 52841 --- [           main] e.camel.impl.engine.AbstractCamelContext : Routes startup (started:1)\n2022-11-23 12:11:07.676  INFO 52841 --- [           main] e.camel.impl.engine.AbstractCamelContext :     Started java (timer://java)\n2022-11-23 12:11:07.676  INFO 52841 --- [           main] e.camel.impl.engine.AbstractCamelContext : Apache Camel 3.18.1 (CamelJBang) started in 397ms (build:118ms init:140ms start:139ms JVM-uptime:3s)\n2022-11-23 12:11:08.705  INFO 52841 --- [ - timer://java] HelloJBang.java:14                       : Hello Camel from java\n2022-11-23 12:11:09.676  INFO 52841 --- [ - timer://java] HelloJBang.java:14                       : Hello Camel from java\n...\n```\n\n----------------------------------------\n\nTITLE: Using Optional Parameters in Camel Endpoint URIs\nDESCRIPTION: Shows how to use optional parameters when defining Camel endpoints. If the placeholder is not defined, the option will not be set, allowing the use of default values.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/03/Camel39-Whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: uri\nCODE:\n```\nfile:foo?bufferSize={{?myBufferSize}}\n```\n\n----------------------------------------\n\nTITLE: Defining Camel K Production Integration Settings\nDESCRIPTION: YAML configuration for Camel K Integration in production, specifying container image and resource limits\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-k-gitops/index.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1\nkind: Integration\nmetadata:\n  annotations:\n    camel.apache.org/operator.id:\n  name: my-route\nspec:\n  traits:\n    container:\n      image: 10.110.251.124/default/camel-k-kit-cijrbp8vl1rc73dg99h0@sha256:038254c5c3d627eb230a1df2d6a140fb54d704f7d14443396e7273ee53d2ce3e\n      limitCPU: \"1\"\n      limitMemory: 1024Mi\n```\n\n----------------------------------------\n\nTITLE: OpenShift Devfile Configuration for Camel Debugging\nDESCRIPTION: Devfile configuration for OpenShift that sets up the development environment with debug capabilities, including Jolokia agent configuration and port exposures for remote debugging.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/08/camel-springboot-remote-debug-to-openshift-from-vscode/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncommands:\n- exec:\n    commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true -Pcamel.debug\n    component: tools\n    group:\n      isDefault: true\n      kind: build\n    workingDir: ${PROJECT_SOURCE}\n  id: build\n- exec:\n    commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run -Pcamel.debug\n    component: tools\n    group:\n      isDefault: true\n      kind: run\n    workingDir: ${PROJECT_SOURCE}\n  id: run\n- exec:\n    commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n -javaagent:target/dependency/jolokia-agent-jvm-javaagent.jar=port=7878,host=localhost\n      -jar target/*.jar\n    component: tools\n    group:\n      isDefault: true\n      kind: debug\n    workingDir: ${PROJECT_SOURCE}\n  id: debug\n- apply:\n    component: build\n  id: build-image\n- apply:\n    component: deploy\n  id: deployk8s\n- composite:\n    commands:\n    - build-image\n    - deployk8s\n    group:\n      isDefault: true\n      kind: deploy\n  id: deploy\ncomponents:\n- container:\n    command:\n    - tail\n    - -f\n    - /dev/null\n    endpoints:\n    - name: port-8080-tcp\n      protocol: tcp\n      targetPort: 8080\n    - name: port-jolokia\n      protocol: http\n      targetPort: 7878\n    env:\n    - name: DEBUG_PORT\n      value: \"5858\"\n    image: registry.access.redhat.com/ubi9/openjdk-17:1.20-2.1721752931\n    memoryLimit: 768Mi\n    mountSources: true\n    volumeMounts:\n    - name: m2\n      path: /home/user/.m2\n  name: tools\n- name: m2\n  volume:\n    size: 3Gi\n- image:\n    dockerfile:\n      buildContext: .\n      rootRequired: false\n      uri: docker/Dockerfile\n    imageName: java-springboot-image:latest\n  name: build\n- kubernetes:\n    endpoints:\n    - name: https-8081\n      protocol: https\n      targetPort: 8081\n    uri: kubernetes/deploy.yaml\n  name: deploy\nmetadata:\n  description: Java application using Spring Boot® and OpenJDK 17\n  displayName: Spring Boot®\n  globalMemoryLimit: 2674Mi\n  icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg\n  language: Java\n  name: my-demo\n  projectType: springboot\n  tags:\n  - Java\n  - Spring\n  version: 2.2.0\nschemaVersion: 2.2.2\nstarterProjects:\n- git:\n    remotes:\n      origin: https://github.com/devfile-samples/springboot-ex.git\n  name: springbootproject\n```\n\n----------------------------------------\n\nTITLE: Verifying Project Directory Structure\nDESCRIPTION: Shell command to display the directory structure of the newly created Camel component project. This shows the standard Maven project layout with source, test, and documentation directories.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ tree\n.\n├── pom.xml\n├── src\n│   ├── main\n│   │   ├── docs\n│   │   │   └── chuck-component.adoc\n│   │   └── java\n│   │       └── org\n│   │           └── apache\n│   │               └── camel\n│   │                   └── component\n│   │                       └── chuck\n│   └── test\n│       ├── java\n│       │   └── org\n│       │       └── apache\n│       │           └── camel\n│       │               └── component\n│       │                   └── chuck\n│       └── resources\n│           └── log4j2.properties\n```\n\n----------------------------------------\n\nTITLE: Adding DataSonnet Dependencies to Maven POM\nDESCRIPTION: This XML snippet shows how to add the necessary dependencies to the pom.xml file for evaluating expressions in the DataSonnet language. It includes the camel-datasonnet-starter and scala-library dependencies.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/camelDebuggerForIntelliJ/index.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.camel.springboot</groupId>\n    <artifactId>camel-datasonnet-starter</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.scala-lang</groupId>\n    <artifactId>scala-library</artifactId>\n    <version>2.13.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings JSON for YAML Schema Association\nDESCRIPTION: JSON configuration for VS Code settings that maps a specific file pattern to the Camel YAML schema. This allows automatic schema resolution for files matching the defined pattern without requiring inline comments or specific file naming conventions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/yamlTagSupportInVSCode/index.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"yaml.schemas\": {\n\t\t\"https://raw.githubusercontent.com/apache/camel/main/dsl/camel-yaml-dsl/camel-yaml-dsl/src/generated/resources/camel-yaml-dsl.json\" : \"/pattern-defined-in-settings*.yaml\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Camel JBang CLI to List Running Processes\nDESCRIPTION: Demonstrates how to use the Camel CLI to list all running Camel processes with their status information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel319-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncamel ps\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Launch Configuration for Jolokia Debugging\nDESCRIPTION: JSON configuration for VS Code's launch.json file that sets up a Camel debugger attachment via Jolokia. This configuration points to the forwarded Jolokia port on localhost.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/08/camel-quarkus-remote-debug-to-openshift-from-vscode/index.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{\n    \"name\": \"Jolokia attach\",\n    \"type\": \"apache.camel\",\n    \"request\": \"attach\",\n    \"attach_jmx_url\": \"service:jmx:jolokia://localhost:20002/jolokia/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Order Placement via REST API\nDESCRIPTION: Shell command demonstrating how to test the order placement endpoint using curl. Shows the request format and expected response.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl  http://order.local/place -d '{\"orderId\":1, \"itemId\":5, \"quantity\":1, \"orderItemName\":\"best product\", \"price\":99}' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Loading Routes from Source Files Example\nDESCRIPTION: Example usage of RoutesLoader system to load Camel routes from Java and XML source files at runtime. The system supports dynamic compilation of Java routes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/02/Camel38-Whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Example path from documentation\n// github.com/apache/camel-examples/tree/master/examples/camel-example-routeloader\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Spring Boot Application\nDESCRIPTION: Dockerfile to package the Spring Boot application into a container image. It uses Eclipse Temurin 17 as the base image and copies the compiled JAR file to the container.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/04/sourceless-ck-springboot/index.md#2025-04-08_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM eclipse-temurin:17\nCOPY --chown=185 target/my-csb-1.0.0.jar /deployments/my-camel-app.jar\nCMD java -jar /deployments/my-camel-app.jar\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration for Camel Debugging\nDESCRIPTION: VS Code launch configuration that sets up the connection to the Camel debugger through Jolokia for remote debugging capabilities.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/08/camel-springboot-remote-debug-to-openshift-from-vscode/index.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{\n    \"name\": \"Attach Camel Debugger\",\n    \"type\": \"apache.camel\",\n    \"request\": \"attach\",\n    \"attach_jmx_url\": \"service:jmx:jolokia://localhost:20002/jolokia/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Kustomization Commands\nDESCRIPTION: Shell commands to create and configure the production Kustomization file, including setting the namespace and configmap values\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-k-gitops/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../overlays/prod/\nkustomize create --resources ../../base/\nkustomize edit add configmap my-cm --from-literal=my-configmap-file=\"I am a production environment\" --behavior replace\nkustomize edit set namespace prod\n```\n\n----------------------------------------\n\nTITLE: Maven Development Command for Quarkus Live Coding\nDESCRIPTION: Command to enable Quarkus live coding feature for rapid development iterations\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/08/camel-quarkus-release-1.0.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile quarkus:dev\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secret Manager with Main Configuration Properties\nDESCRIPTION: Shows how to configure AWS Secret Manager authentication using Camel's main configuration properties. These properties provide the access key, secret key, and region needed to authenticate with AWS Secret Manager.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ncamel.vault.aws.accessKey = accessKey\ncamel.vault.aws.secretKey = secretKey\ncamel.vault.aws.region = region\n```\n\n----------------------------------------\n\nTITLE: Shortcode Template for Documentation Box Layout\nDESCRIPTION: Hugo shortcode template that creates a documentation section box with icon and content areas. Used consistently throughout the page to present different Camel projects.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/docs/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{< div \"box left\" >}}\n<a href=\"/manual/\" class=\"icon\" title=\"Camel User Manual\">{{< icon \"logo-d\" \"Apache Camel logo\" >}}</a>\n{{< div \"content\" >}}\n<!-- Content goes here -->\n{{< /div >}}\n{{< /div >}}\n```\n\n----------------------------------------\n\nTITLE: Running a Camel Example from GitHub\nDESCRIPTION: Command to directly run an existing Camel example loaded from a GitHub repository without needing to download it first.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/05/camel317-whatsnew/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncamel run https://github.com/apache/camel-kamelets-examples/tree/main/jbang/hello-java\n```\n\n----------------------------------------\n\nTITLE: Deploying Order Integration with Deprecated Tracing Trait in Apache Camel K\nDESCRIPTION: Command to create an Order Service integration using the deprecated tracing trait. It configures constant sampling, service name, and sets up ingress with a specific host for comparison purposes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkamel run OrderService.java --name order-tracing \\\n   -d camel-jackson \\\n   -t tracing.enabled=true \\\n   -t tracing.sampler-type=const \\\n   -t tracing.sampler-param=1 \\\n   -t tracing.service-name=order-external-tracing \\\n   -t ingress.enabled=true \\\n   -t ingress.host=order-tracing.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Context Reload for AWS Secrets Manager\nDESCRIPTION: Properties configuration to enable automatic Camel context reload when AWS Secrets Manager values change. The configuration includes refresh interval, secrets to track, and enables context reloading.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/12/camel-context-reloading-secret-refresh/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncamel.vault.aws.refreshEnabled=true\ncamel.vault.aws.refreshPeriod=60000\ncamel.vault.aws.secrets=Secret\ncamel.main.context-reload-enabled = true\n```\n\n----------------------------------------\n\nTITLE: Testing the Knative Service\nDESCRIPTION: Command to test the deployed application through the Knative service, demonstrating how it automatically scales from zero when traffic is received.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/04/sourceless-ck-springboot/index.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl -it exec camel-k-operator-5f77f8976b-qgknm -- curl http://csb.default.svc.cluster.local/hello --header 'name: CSB'\nHello CSB\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim for Camel Debugging\nDESCRIPTION: Vim configuration (.vimrc) to set up plugins, key mappings, and Vimspector settings for Camel debugging.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/vimdap/index.md#2025-04-08_snippet_2\n\nLANGUAGE: viml\nCODE:\n```\ncall plug#begin()\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\nPlug 'puremourning/vimspector'\ncall plug#end()\n\nlet g:vimspector_enable_mappings = 'HUMAN'\n\nnnoremap <Leader>dd :call vimspector#Launch()<CR>\nnnoremap <Leader>dt :call vimspector#ToggleBreakpoint()<CR>\nnnoremap <Leader>dc :call vimspector#Continue()<CR>\nnnoremap <Leader>de :call vimspector#Reset()<CR>\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter in Markdown\nDESCRIPTION: Sets the title and description for the page using YAML frontmatter syntax in Markdown.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Home\ndescription: Camel is an open source integration framework that empowers you to quickly and easily integrate various systems consuming or producing data.\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel-K 1.3.0 Release Notes\nDESCRIPTION: YAML front matter defining metadata for the Camel-K 1.3.0 release notes page, including URL path, release date, version number, and JDK compatibility information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.3.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.3.0/\"\ndate: 2020-12-29\ntype: release-note\nversion: \"1.3.0\"\ntitle: \"Camel-K 1.3.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 11\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Frontpage Section with Hugo Shortcodes\nDESCRIPTION: Uses Hugo shortcodes to create a structured section on the frontpage with columns and functionality descriptions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{< section \"frontpage columns functionalities\" >}}\n\n# Why Camel?\n\n{{< div \"box right\" >}}\n\n{{< div \"content\">}}\n\n## Based on Enterprise Integration Patterns\n\nCamel supports most of the Enterprise Integration Patterns from the excellent book by Gregor Hohpe and Bobby Woolf, and newer integration patterns from microservice architectures to help you solve your integration problem by applying best practices out of the box.\n\n<p><a class=\"button dark\" href=\"/components/next/eips/enterprise-integration-patterns.html\">Read more on EIP</a></p>\n\n{{< /div >}}\n\n{{< div \"icon\" >}}\n\n<img src=\"./img/patterns.svg\" alt=\"component icon\"/>\n\n{{< /div >}}\n\n{{< /div >}}\n\n<!-- Additional content omitted for brevity -->\n\n{{< /section >}}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Camel Integration with JBang\nDESCRIPTION: Command to initialize a new basic Camel integration file using Camel JBang's 'init' command.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/05/camel317-whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncamel init hello.java\n```\n\n----------------------------------------\n\nTITLE: Testing Order Integration with Telemetry Trait via HTTP Request\nDESCRIPTION: HTTP POST request using curl to test the Order service integration using the telemetry trait. It places an order with ID 20 by sending JSON data and receives a response from the inventory service.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://order.local/place -d '{\"orderId\":20, \"itemId\":5, \"quantity\":1, \"orderItemName\":\"strange product\", \"price\":10}' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenShift Devfile for Camel Debugging\nDESCRIPTION: YAML configuration for the OpenShift devfile that defines commands and components for running a Camel Quarkus application with debugging enabled. It configures the camel.debug profile and exposes the Jolokia port.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/08/camel-quarkus-remote-debug-to-openshift-from-vscode/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncommands:\n- exec:\n    commandLine: ./mvnw -Dmaven.repo.local=/home/user/.m2/repository compile\n    component: tools\n    workingDir: ${PROJECT_SOURCE}\n  id: init-compile\n- exec:\n    commandLine: ./mvnw -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0\n      -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n    component: tools\n    group:\n      isDefault: true\n      kind: run\n    hotReloadCapable: true\n    workingDir: ${PROJECT_SOURCE}\n  id: dev-run\n- exec:\n    commandLine: ./mvnw -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0\n      -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT} -Pcamel.debug\n    component: tools\n    group:\n      isDefault: true\n      kind: debug\n    hotReloadCapable: true\n    workingDir: ${PROJECT_SOURCE}\n  id: dev-debug\ncomponents:\n- container:\n    args:\n    - tail\n    - -f\n    - /dev/null\n    endpoints:\n    - name: port-8080-tcp\n      protocol: tcp\n      targetPort: 8080\n    - name: port-jolokia\n      protocol: http\n      targetPort: 7878\n    env:\n    - name: DEBUG_PORT\n      value: \"5858\"\n    image: registry.access.redhat.com/ubi8/openjdk-21:1.19-1\n    memoryLimit: 1024Mi\n    mountSources: true\n    volumeMounts:\n    - name: m2\n      path: /home/user/.m2\n  name: tools\n- name: m2\n  volume:\n    size: 3Gi\nevents:\n  postStart:\n  - init-compile\nmetadata:\n  description: Java application using Quarkus and OpenJDK 21\n  displayName: Quarkus Java\n  icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg\n  language: Java\n  name: camel-quarkus-demo\n  projectType: Quarkus\n  tags:\n  - Java\n  - Quarkus\n  version: 1.5.0\n  website: https://quarkus.io\nschemaVersion: 2.2.0\nstarterProjects:\n- name: community\n  zip:\n    location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile&j=21\n- name: redhat-product\n  zip:\n    location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&j=21\n```\n\n----------------------------------------\n\nTITLE: TensorFlow Serving Classification API Endpoint Configuration\nDESCRIPTION: URI configuration for calling TensorFlow Serving Classification API endpoint with half_plus_two model\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_6\n\nLANGUAGE: uri\nCODE:\n```\ntensorflow-serving:classify?modelName=half_plus_two&modelVersion=123&signatureName=classify_x_to_y\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Statistics Table in Markdown\nDESCRIPTION: A markdown table showing release statistics for Apache Camel 3, including release version, date, total issues solved, and release type. The table is sorted by the number of issues solved in descending order.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/camel-release-stats/index.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Release | Date       | Total | Type        |\n| ------- | ---------- | ----- | ----------- |\n| 3.0.0   | 28/11/2019 | 306   | Major **      |\n| 3.1.0   | 27/02/2020 | 289   | Minor       |\n| 3.5.0   | 04/09/2020 | 243   | Minor       |\n| 3.15.0  | 04/02/2022 | 218   | Minor       |\n| 3.10.0  | 20/05/2021 | 211   | Minor       |\n| 3.12.0  | 04/10/2021 | 205   | Minor       |\n| 3.7.0   | 16/12/2020 | 185   | Minor (LTS) |\n| 3.8.0   | 13/02/2021 | 166   | Minor       |\n| 3.9.0   | 28/03/2021 | 162   | Minor       |\n| 3.2.0   | 06/04/2020 | 160   | Minor       |\n| 3.6.0   | 20/09/2020 | 152   | Minor       |\n| 3.3.0   | 15/05/2020 | 148   | Minor       |\n| 3.4.0   | 18/06/2020 | 148   | Minor       |\n| 3.13.0  | 12/11/2021 | 118   | Minor       |\n| 3.14.0  | 16/12/2021 | 114   | Minor (LTS) |\n| 3.11.0  | 28/06/2021 | 102   | Minor (LTS) |\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel DAP Provider in Emacs\nDESCRIPTION: Emacs configuration for registering the Camel debug adapter provider and debug template. Sets up the connection host and server path configuration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Emacsdap/index.md#2025-04-08_snippet_0\n\nLANGUAGE: lisp\nCODE:\n```\n(dap-register-debug-provider\n \"camel\"\n (lambda (conf)\n   (plist-put conf :host \"localhost\")\n   conf))\n\n(dap-register-debug-template \"Camel Attach\"\n                             (list :type \"camel\"\n                                   :request \"attach\"\n                                   :port 1099\n                                   :dap-server-path '(\"java\" \"-jar\" \"PATH/TO/camel-dap-server-0.4.0.jar\")\n                                   :name \"Run Configuration\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Frontmatter for Camel-K Runtime Release Notes\nDESCRIPTION: YAML frontmatter template that defines the structure and metadata for Camel-K Runtime release note pages. Uses Hugo templating expressions to dynamically populate the version number from the filename and current date. Configures page type, title, preview text, changelog, category and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/archetypes/release-k-runtime.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-{{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}/\"\ndate: {{ .Date }}\ndraft: true\ntype: release-note\nversion: \"{{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}\"\ntitle: \"Camel-K Runtime release {{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone:\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Processor to Camel Route in Java\nDESCRIPTION: Code snippet showing how to add a Processor to a Camel route that allows setting breakpoints for debugging. This is a common pattern for debugging Camel routes by adding a processing step where breakpoints can be placed.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/JavaDebuggingInVSCode-iteration2/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n.process(new Processor(){\n  @Override\n  public void process(Exchange exchange) throws Exception {\n    System.out.println(\"can be breakpoint on this line\");\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel-K 2.5.0 Release Metadata in YAML\nDESCRIPTION: YAML frontmatter defining the metadata for the Camel-K 2.5.0 release documentation. Specifies the release version, date, JDK requirements, and related categorization information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-2.5.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-2.5.0/\"\ndate: 2024-11-03\ntype: release-note\nversion: \"2.5.0\"\ntitle: \"Camel-K 2.5.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 54\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Running YAKS Tests on Kubernetes\nDESCRIPTION: Command to run a YAKS test on a Kubernetes cluster. When run without the --local flag, the test creates a custom resource on the cluster which the YAKS operator uses to prepare the test runtime and execute it as a Pod.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/camel-k-yaks/index.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ yaks run fruit-service.feature\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Debug Adapter for Vimspector\nDESCRIPTION: JSON configuration for the Camel Debug Adapter in Vimspector, specifying the command to run the adapter.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/vimdap/index.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"adapters\": {\n    \"cust_camel-debug-adapter\": {\n         \"command\": [\n        \"java\",\n        \"-jar\",\n        \"/home/camel-dap-server-0.4.0.jar\"\n         ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Camel Application with JBang\nDESCRIPTION: Command to export a Camel application using JBang with observability services dependency and camel-main runtime.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/03/camel-observability/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncamel export PlatformHttpServer.java --dep camel:observability-services --dir ./app --runtime camel-main\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Camel Example\nDESCRIPTION: Shell commands for compiling and running the Camel example with debug profile enabled.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Sublimedap/index.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile\nmvn camel:run -Pcamel.debug\n```\n\n----------------------------------------\n\nTITLE: Defining Security Configuration Variables in Hugo Templates\nDESCRIPTION: This snippet defines security-related variables in a Hugo template, including canonical URL references, contact information, encryption settings, and a policy parameter. It also calculates an expiration date set one year into the future from the current date using Hugo's date manipulation functions.\nSOURCE: https://github.com/apache/camel-website/blob/main/layouts/security/single.txt#2025-04-08_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\nCanonical: {{ $.Params.canonical }}\nContact: {{ $.Params.contact }}\nEncryption: {{ $.Params.encryption }}\nPolicy: {{ $.Params.policy }}\nExpires: {{ now.UTC.AddDate 1 0 0 | time.Format \"2006-01-02T15:04:05Z07:00\" }}\n```\n\n----------------------------------------\n\nTITLE: Route Template Definition\nDESCRIPTION: Implementation of a route template with parameterized configuration in Camel 3.x.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/camel3x-top10-features/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class MyRouteTemplates extends RouteBuilder {\\n\\n    @Override\\n    public void configure() throws Exception {\\n        // create a route template with the given name\\n        routeTemplate(\"myTemplate\")\\n            // here we define the required input parameters (can have default values)\\n            .templateParameter(\"name\")\\n            .templateParameter(\"greeting\")\\n            .templateParameter(\"myPeriod\", \"3s\")\\n            // here comes the route in the template\\n            // notice how we use {{name}} to refer to the template parameters\\n            // we can also use {{propertyName}} to refer to property placeholders\\n            .from(\"timer:{{name}}?period={{myPeriod}}\")\\n                .setBody(simple(\"{{greeting}} ${body}\"))\\n                .log(\"${body}\");\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KEDA-enabled Kamelet Binding in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a Kamelet binding with KEDA autoscaling enabled. It uses a Kafka source and includes the necessary annotation to activate the KEDA trait in Camel K.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/01/camel-keda/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1alpha1\nkind: KameletBinding\nmetadata:\n  name: kafka-to-sink\n  annotations:\n    trait.camel.apache.org/keda.enabled: \"true\"\nspec:\n  source:\n    ref:\n      apiVersion: camel.apache.org/v1alpha1\n      kind: Kamelet\n      name: kafka-source\n    properties:\n      bootstrapServers: \"<-- bootstrap servers -->\"\n      consumerGroup: my-group\n      topic: \"<-- the topic -->\"\n      user: \"<-- user -->\"\n      password: \"<-- pwd -->\"\n  sink:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: TensorFlow Serving Regression Output in Apache Camel\nDESCRIPTION: This console output shows the result of the regression analysis performed by the TensorFlow Serving model. The result is 2.5, which is the output of the 'half_plus_two' model for the input value 1.0.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nResult: regressions {\n  value: 2.5\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Camel JBang Status with Remote Counters\nDESCRIPTION: Demonstrates how to use the 'camel get' command in Camel JBang to display status information, including the new remote performance counters for CamelContext and Routes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/camel47-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ camel get\n  PID   NAME    CAMEL  PLATFORM        PROFILE  READY  STATUS   RELOAD  AGE   ROUTE  MSG/S  TOTAL  FAIL  INFLIGHT  LAST  DELTA  SINCE-LAST\n 42240  cheese  4.7.0  JBang v0.116.0  dev       1/1   Running       0  1m8s    2/2   1.01   1/65   0/0       0/0     0     -1     1s/1s/-\n```\n\n----------------------------------------\n\nTITLE: Load Testing with Apache Benchmark\nDESCRIPTION: Command to generate test traffic using Apache Benchmark tool.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/camel-k-monitoring-ops/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nab -n 10000 http://192.168.49.2:31501/hello\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Task for Running Camel Tests with Debug Profile in JSON\nDESCRIPTION: This JSON snippet defines a VS Code task that runs Maven tests with the camel.debug profile activated. This task is used to start the Camel application with debugging enabled.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/HowToUseCamelRouteTextualDebuggerWithUnitTest/index.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"2.0.0\",\n\t\"tasks\": [\n\t\t{\n\t\t\t\"label\": \"Start test with camel.debug profile\",\n\t\t\t\"type\": \"shell\",\n\t\t\t\"command\": \"mvn\",\n\t\t\t\"args\": [\n\t\t\t\t\"test\",\n\t\t\t\t\"-Pcamel.debug\"\n\t\t\t],\n\t\t\t\"problemMatcher\": \"$camel.debug.problemMatcher\",\n\t\t\t\"presentation\": {\n\t\t\t\t\"reveal\": \"always\"\n\t\t\t},\n\t\t\t\"isBackground\": true\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Jaeger Tracing Container\nDESCRIPTION: Docker command to start a Jaeger tracing container for collecting and visualizing traces.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/03/camel-observability/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --name jaeger -p 16686:16686 -p 4317:4317 -p 4318:4318 -p 5778:5778 -p 9411:9411 jaegertracing/jaeger:2.1.0\n```\n\n----------------------------------------\n\nTITLE: Maven Commands for Camel Application\nDESCRIPTION: Maven commands to compile and run the Camel application with debug profile enabled.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Emacsdap/index.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmvn compile\nmvn camel:run -Pcamel.debug\n```\n\n----------------------------------------\n\nTITLE: Injecting AI Service in Camel Route (Previous Method)\nDESCRIPTION: Shows the previous method of injecting a LangChain4j AI service into a Camel route using @Inject annotation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/01/langchain4j-bean-name/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@ApplicationScoped\npublic class MyRoutes extends RouteBuilder {\n\n  @Inject\n  MyAIService myAiService;\n\n  @Override\n  public void configure() {\n    from(\"...\")\n      .bean(myAiService);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for HTTP Requests and JSON Parsing in XML\nDESCRIPTION: This XML snippet shows the dependencies required for HTTP requests and JSON parsing, including AsyncHttpClient and Jackson libraries.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n        <dependency>\n            <groupId>org.asynchttpclient</groupId>\n            <artifactId>async-http-client</artifactId>\n            <version>${ahc-version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-annotations</artifactId>\n            <version>${jackson2-version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.datatype</groupId>\n            <artifactId>jackson-datatype-jsr310</artifactId>\n            <version>${jackson2-version}</version>\n        </dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Kafka Connector 4.0.0 Release Page\nDESCRIPTION: YAML frontmatter that defines metadata for the Camel Kafka Connector 4.0.0 release page. It specifies the URL path, release date, content type, version, title, and JDK compatibility information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-4.0.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-4.0.0/\"\ndate: 2023-09-25\ntype: release-note\nversion: \"4.0.0\"\ntitle: \"Camel Kafka Connector release 4.0.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K 1.5.0 Release Metadata in YAML Frontmatter\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel-K 1.5.0 release documentation page. It specifies the URL path, release date (July 9, 2021), content type, version number, title, category, milestone number (21), and JDK compatibility (version 11).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.5.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.5.0/\"\ndate: 2021-07-09\ntype: release-note\nversion: \"1.5.0\"\ntitle: \"Camel-K 1.5.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 21\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Levels in application.properties\nDESCRIPTION: Demonstrates how to configure logging levels for specific packages in application.properties file.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/05/camel46-whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nlogging.level.org.apache.kafka = DEBUG\nlogging.level.com.foo.something = TRACE\n```\n\n----------------------------------------\n\nTITLE: Referencing Quarkus Mandrel Docker Image in Camel K\nDESCRIPTION: This snippet shows the updated Quarkus Mandrel Docker image reference used in Camel K 1.11.0, which has been updated to version 22.2.0.0-Final with Java 11.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/12/camel-k-release-1.11/index.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nquay.io/quarkus/ubi-quarkus-mandrel:22.2.0.0-Final-java11\n```\n\n----------------------------------------\n\nTITLE: Downloading Camel DAP Server JAR\nDESCRIPTION: Shell commands to download the Camel Debug Adapter server JAR file from Maven Central repository.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Emacsdap/index.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd /home\ncurl -LO https://repo1.maven.org/maven2/com/github/camel-tooling/camel-dap-server/0.4.0/camel-dap-server-0.4.0.jar\n```\n\n----------------------------------------\n\nTITLE: Displaying Camel Routes with JBang\nDESCRIPTION: Shows how to use the 'camel get route' command to display information about Camel routes, including remote endpoints and status.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/camel47-whatsnew/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ camel get route\n  PID   NAME            ID      FROM                     REMOTE  STATUS   AGE  COVER  MSG/S  TOTAL  FAIL  INFLIGHT  MEAN  MIN  MAX  LAST  DELTA  SINCE-LAST\n 75937  MyRouteBuilder  route1  activemq://test.MyQueue    x     Started  20s    0/1   0.00      0     0         0          0    0                    -/-/-\n 75937  MyRouteBuilder  route2  file://test                x     Started  20s    0/1   0.00      0     0         0          0    0                    -/-/-\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Profile for Camel Debug in XML\nDESCRIPTION: This XML snippet shows how to set up a Maven profile that includes the camel-debug dependency when activated. This profile is necessary for enabling Camel debugging functionality.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/HowToUseCamelRouteTextualDebuggerWithUnitTest/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<profiles>\n    <profile>\n        <id>camel.debug</id>\n        <activation>\n            <property>\n                <name>camel.debug</name>\n                <value>true</value>\n            </property>\n        </activation>\n        <dependencies>\n            <dependency>\n                <groupId>org.apache.camel</groupId>\n                <artifactId>camel-debug</artifactId>\n            </dependency>\n        </dependencies>\n    </profile>\n</profiles>\n```\n\n----------------------------------------\n\nTITLE: Adding a Symbolic Link for the Kamelet Plugin\nDESCRIPTION: Creates a symbolic link in the Knative plugins directory to integrate the Kamelet source plugin with the 'kn' CLI tool.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/10/managing-kamelets-with-kn/index.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/.config/kn/plugins\nln -s /the/path/to/my/kn-source-kamelet kn-source-kamelet\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Kafka Connector 0.9.0 Release Page\nDESCRIPTION: YAML frontmatter defining metadata for the Camel Kafka Connector 0.9.0 release page. It specifies the URL, release date, version number, title, and supported JDK versions (8 and 11).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-0.9.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-0.9.0/\"\ndate: 2021-04-02\ntype: release-note\nversion: \"0.9.0\"\ntitle: \"Camel Kafka Connector release 0.9.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel Quarkus 2.15.0 Release Note\nDESCRIPTION: YAML front matter block defining metadata for the Camel Quarkus 2.15.0 release note page. It includes the URL path, release date, version number, title, and other properties relevant for the website publishing system.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-2.15.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-2.15.0/\"\ndate: 2022-12-12\ntype: release-note\nversion: 2.15.0\ntitle: \"Camel Quarkus release 2.15.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 34\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Running Camel JBang Debug with Variables\nDESCRIPTION: Command to run Camel JBang debugger with exchange variables display enabled\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/02/camel44-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncamel debug * --show-exchange-variables\n```\n\n----------------------------------------\n\nTITLE: Installing Karavan Serverless on Kubernetes\nDESCRIPTION: Commands to clone the Karavan repository and deploy it to Kubernetes using kubectl. This sets up Karavan in serverless mode in the default namespace.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/11/camel-karavan-release-0.0.8/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth 1  https://github.com/apache/camel-karavan\ncd camel-karavan/karavan-demo/serverless\nkubectl apply -k karavan -n default\n```\n\n----------------------------------------\n\nTITLE: Defining ApiService Interface in Java\nDESCRIPTION: This Java interface defines the API service with a method for retrieving random jokes asynchronously.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic interface ApiService {\n    void randomJoke(Exchange exchange, AsyncCallback callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a Camel Example from GitHub\nDESCRIPTION: Command to download a Camel example from a GitHub repository to the local disk for editing and customization.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/05/camel317-whatsnew/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncamel init https://github.com/apache/camel-kamelets-examples/tree/main/jbang/hello-java\n```\n\n----------------------------------------\n\nTITLE: Running OpenRewrite Maven Plugin with Camel Upgrade Recipes for Migration\nDESCRIPTION: This shell command demonstrates how to run the OpenRewrite Maven plugin with Camel Upgrade Recipes to assist in migrating from Camel 4.3.0 to Camel 4.5.0. It specifies the recipe artifact coordinates and active recipes needed for the migration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/10/camel-upgrade-recipes-release-4.8.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn -U org.openrewrite.maven:rewrite-maven-plugin:5.20.0:run -Drewrite.recipeArtifactCoordinates=org.apache.camel.upgrade:camel-upgrade-recipes:4.8.0  -DactiveRecipes=org.apache.camel.upgrade.camel44.CamelMigrationRecipe,org.apache.camel.upgrade.camel45.CamelMigrationRecipe\n```\n\n----------------------------------------\n\nTITLE: Running Camel JBang with Specific Camel Version\nDESCRIPTION: Command to run a Camel JBang application with a specific Camel version, ensuring compatibility with the target Kubernetes environment.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/11/camel-k-jbang/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ jbang run -Dcamel.jbang.version=3.18.3 camel@apache/camel run HelloJBang.java\n...\n[1] 2022-11-23 11:13:02,825 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.18.3 (camel-1) started in 70ms (build:0ms init:61ms start:9ms)\n...\n```\n\n----------------------------------------\n\nTITLE: Camel Quarkus 3.8.1 Release Metadata Configuration\nDESCRIPTION: YAML front matter configuration defining the release metadata for Camel Quarkus 3.8.1, including version information, release date, EOL date, supported JDK versions, and release type details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.8.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.8.1/\"\ndate: 2024-03-19\neol: 2025-02-12\ntype: release-note\nversion: 3.8.1\ntitle: \"Camel Quarkus release 3.8.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 56\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter for Apache Camel Website Pages\nDESCRIPTION: This YAML front matter block defines the structure for new content pages on the Apache Camel website. It includes a dynamically generated title, creation date, and draft status.\nSOURCE: https://github.com/apache/camel-website/blob/main/archetypes/default.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Running Specific Windup Tests with Maven\nDESCRIPTION: Maven command to execute specific Windup ruleset tests by using the runTestsMatching parameter. This command runs only the tests related to xml-removed-components.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/09/windup/index.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn -DrunTestsMatching=xml-removed-components clean test\n```\n\n----------------------------------------\n\nTITLE: Displaying Registry Error Condition in Kubernetes YAML\nDESCRIPTION: This YAML snippet shows how registry errors are now exposed in the Integration status conditions, providing better visibility for troubleshooting deployment issues.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/10/camel-k-2-1/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  status:\n    conditions:\n...\n    - lastTransitionTime: \"2023-09-29T13:53:17Z\"\n      lastUpdateTime: \"2023-09-29T13:57:50Z\"\n      message: 'integration kit default/kit-ckbddjd5rv6c73cr99fg is in state \"Error\".\n        Failure: Get \"https://1.2.3.4/v2/\": dial tcp 1.2.3.4:443: i/o timeout; Get\n        \"http://1.2.3.4/v2/\": dial tcp 1.2.3.4:80: i/o timeout'\n      reason: IntegrationKitAvailable\n      status: \"False\"\n      type: IntegrationKitAvailable\n...\n    phase: Error\n```\n\n----------------------------------------\n\nTITLE: Installing Karavan Cloud Application with CLI\nDESCRIPTION: Command to install Karavan Cloud Application on Kubernetes using the newly introduced Karavan CLI. This allows for effortless setup with git repository integration and custom port configuration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-karavan-3.21.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njbang org.apache.camel.karavan:karavan-cli:3.21.0 install --git-repository=$REPO --git-password=$PASWORD --git-username=$USERNAME  --node-port=30777\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Reset in Camel Tests\nDESCRIPTION: Example showing how to reset mock endpoints between test executions using JUnit 5's @BeforeEach annotation. This ensures a clean test environment for each test case.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/modernizing-test-support/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@BeforeEach\nvoid reset() throws Exception {\n    MockEndpoint mock = getMockEndpoint(\"mock:result\");\n    mock.reset();\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Content for Release Announcement\nDESCRIPTION: Markdown formatted release announcement including headings, links, and version information for Camel Quarkus 2.14.0\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/11/camel-quarkus-release-2.14.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Camel Quarkus 2.14.0 Released\"\ndate: 2022-11-10\nauthors: [\"zbendhiba\"]\ncategories: [\"Releases\", \"Camel Quarkus\"]\npreview: \"Camel Quarkus 2.14.0 Released\"\nsummary: \"Camel Quarkus 2.14.0 is released and aligns with Camel 3.19.0 and Quarkus 2.14.0.Final\"\n---\n```\n\n----------------------------------------\n\nTITLE: Lambda Handler Configuration\nDESCRIPTION: Handler class configuration for AWS Lambda JVM runtime\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/08/DeployingCamelRouteInAWSLambda/index.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nio.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Camel 3.22.4 Release Notes\nDESCRIPTION: YAML configuration block defining metadata for Apache Camel 3.22.4 LTS release documentation, including release date, end-of-life date, version details, and JDK compatibility requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.22.4.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2025-03-09\neol: 2024-12-31\ndraft: false\ntype: release-note\nversion: 3.22.4\ntitle: \"Release 3.22.4\"\npreview: \"New LTS release 3.22.4\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12355745\ncategory: camel\nkind: lts\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Task for Camel Debugging in JSON\nDESCRIPTION: This JSON configuration sets up a VS Code task to launch a Camel test with Maven, activating the camel.debug profile. It includes environment variables and problem matcher settings for Camel debugging.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/HowToUseCamelRouteTextualDebuggerWithUnitTest/index.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"2.0.0\",\n\t\"tasks\": [\n\t\t{\n\t\t\t\"label\": \"Launch Camel test with Maven with camel.debug profile\",\n\t\t\t\"type\": \"shell\",\n\t\t\t\"command\": \"mvn\",\n\t\t\t\"args\": [\n\t\t\t\t\"test\",\n\t\t\t\t\"-Dtest=*\",\n\t\t\t\t\"-Pcamel.debug\"\n\t\t\t],\n\t\t\t\"options\": {\n\t\t\t\t\"env\": {\n\t\t\t\t\t\"CAMEL_DEBUGGER_SUSPEND\": \"true\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"problemMatcher\": \"$camel.debug.problemMatcher\",\n\t\t\t\"presentation\": {\n\t\t\t\t\"reveal\": \"always\"\n\t\t\t},\n\t\t\t\"isBackground\": true\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Quarkus 3.15.2 Release Note\nDESCRIPTION: This YAML frontmatter block defines metadata for the Camel Quarkus 3.15.2 release note. It specifies the URL, release date, end-of-life date, version number, title, and other relevant information for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.15.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.15.2/\"\ndate: 2025-01-21\neol: 2025-09-10\ntype: release-note\nversion: 3.15.2\ntitle: \"Camel Quarkus release 3.15.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 70\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Kamelet Version in YAML\nDESCRIPTION: Demonstrates how to specify a specific version of a Kamelet in a Camel route configuration. This new feature allows users to reference different versions of the same Kamelet within the cluster.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/11/camel-k-2-5/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- from:\n    uri: \"kamelet:my-kamelet?kameletVersion=v2\"\n    steps:\n      - to: \"log:info\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Trait Conditions in Camel K 2.2 Integration\nDESCRIPTION: This YAML snippet shows an example of exposed trait conditions in a Camel K 2.2 Integration. It demonstrates how trait-related information, such as configuration issues or warnings, are now visible directly in the Integration's conditions for easier troubleshooting.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/01/camel-k-2-2/index.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\n    - firstTruthyTime: \"2024-01-05T14:59:28Z\"\n      lastTransitionTime: \"2024-01-05T14:59:28Z\"\n      lastUpdateTime: \"2024-01-05T14:59:31Z\"\n      message: 'explicitly disabled by the platform: container image was not built\n        via Camel K operator'\n      reason: jvmTraitConfiguration\n      status: \"True\"\n      type: TraitInfo\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Proxy Settings\nDESCRIPTION: XML configuration for Maven settings to set up a proxy repository manager. This configuration redirects all Maven requests through a company proxy.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/06/camel-k-maven-proxy/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n    <mirrors>\n        <mirror>\n            <id>camel-k-maven-repository-manager</id>\n            <name>Maven Repository Manager</name>\n            <url>http://my-company-maven-repository-proxy/</url>\n            <mirrorOf>*</mirrorOf>\n        </mirror>\n    </mirrors>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Certificate Secret in Kubernetes\nDESCRIPTION: Command to create a Kubernetes secret containing SSL certificate files for HTTPS configuration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/07/camel-k-properties-refactoring/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic my-self-signed-ssl --from-file=server.key --from-file=server.crt\n```\n\n----------------------------------------\n\nTITLE: Deploying Camel K Integration to Kubernetes\nDESCRIPTION: Command to deploy the Camel K integration to a Kubernetes cluster and its output, showing the deployment process and runtime information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/11/camel-k-jbang/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kamel run HelloJBang.java --dev\nIntegration \"hello-j-bang\" created\n...\n[1] 2022-11-23 11:13:01,971 INFO  [org.apa.cam.k.Runtime] (main) Apache Camel K Runtime 1.15.2\n[1] 2022-11-23 11:13:01,997 INFO  [org.apa.cam.qua.cor.CamelBootstrapRecorder] (main) Bootstrap runtime: org.apache.camel.quarkus.main.CamelMainRuntime\n[1] 2022-11-23 11:13:02,000 INFO  [org.apa.cam.mai.MainSupport] (main) Apache Camel (Main) 3.18.3 is starting\n[1] 2022-11-23 11:13:02,044 INFO  [org.apa.cam.k.lis.SourcesConfigurer] (main) Loading routes from: SourceDefinition{name='HelloJBang', language='java', type='source', location='file:/etc/camel/sources/HelloJBang.java', }\n[1] 2022-11-23 11:13:02,816 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.18.3 (camel-1) is starting\n[1] 2022-11-23 11:13:02,824 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Routes startup (started:1)\n[1] 2022-11-23 11:13:02,825 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main)     Started java (timer://java)\n[1] 2022-11-23 11:13:02,825 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.18.3 (camel-1) started in 70ms (build:0ms init:61ms start:9ms)\n[1] 2022-11-23 11:13:02,828 INFO  [io.quarkus] (main) camel-k-integration 1.10.3 on JVM (powered by Quarkus 2.13.4.Final) started in 2.234s.\n[1] 2022-11-23 11:13:02,829 INFO  [io.quarkus] (main) Profile prod activated.\n[1] 2022-11-23 11:13:02,829 INFO  [io.quarkus] (main) Installed features: [camel-bean, camel-core, camel-java-joor-dsl, camel-k-core, camel-k-runtime, camel-kubernetes, camel-timer, cdi, kubernetes-client, security]\n[1] 2022-11-23 11:13:03,850 INFO  [java] (Camel (camel-1) thread #1 - timer://java) Hello Camel from java\n```\n\n----------------------------------------\n\nTITLE: Running Quarkus Development Mode\nDESCRIPTION: Command to run the Quarkus application in development mode with live coding enabled\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/08/DeployingCamelRouteInAWSLambda/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw compile quarkus:dev\n```\n\n----------------------------------------\n\nTITLE: Creating Camel Route using Yaml DSL\nDESCRIPTION: New command feature to create Camel Route files in Yaml DSL format. Creates *.camel.yaml files automatically in the active workspace using Apache Camel JBang. Requires JBang to be available on system command-line.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/language-support-0.7.0-release/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example shown in gif but not directly provided in text\n```\n\n----------------------------------------\n\nTITLE: Running Application with OpenTelemetry Agent\nDESCRIPTION: Command to run the Camel application with OpenTelemetry Java agent for trace collection.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/03/camel-observability/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava -javaagent:../opentelemetry-javaagent.jar -Dotel.logs.exporter=none -Dotel.metrics.exporter=none -jar target/PlatformHttpServer-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager with Default Instance via Environment Variables\nDESCRIPTION: Shows how to configure Google Cloud Secret Manager to use the default GCP instance credentials through environment variables. This approach relies on the VM instance having proper GCP permissions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/secrets-properties-functions/index.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport $CAMEL_VAULT_GCP_USE_DEFAULT_INSTANCE=true\nexport $CAMEL_VAULT_GCP_PROJECT_ID=projectId\n```\n\n----------------------------------------\n\nTITLE: Compiling and Debugging Camel Application\nDESCRIPTION: Shell commands to compile the Camel application and launch it in debug mode for attaching the debugger.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/vimdap/index.md#2025-04-08_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmvn compile\nmvn camel:debug\n```\n\n----------------------------------------\n\nTITLE: Generating Camel K Cluster Status Report\nDESCRIPTION: Demonstrates the use of the new 'kamel dump' command to generate a comprehensive status report of the Camel K environment for troubleshooting.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/04/camel-k-140-Whatsnew/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkamel dump status.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Secret in Kubernetes\nDESCRIPTION: Kubernetes secret configuration for basic authentication with built-in admin user and password.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/camel-karavan-3.18.3/index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Secret\napiVersion: v1\nmetadata:\n    name: karavan\ntype: Opaque\nstringData:\n    master-password: karavan\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring REST in Camel XML for Quarkus\nDESCRIPTION: This XML snippet shows a more detailed REST configuration for Camel on Quarkus, including data format properties and API properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<restConfiguration bindingMode=\"json\"\n                   contextPath=\"rest\" port=\"8080\"\n                   apiContextPath=\"api-docs\"\n                   enableCORS=\"true\"\n                   inlineRoutes=\"false\">\n\n    <!-- we want json output in pretty mode -->\n    <dataFormatProperty key=\"prettyPrint\" value=\"true\"/>\n\n    <!-- setup openapi api descriptions -->\n    <apiProperty key=\"base.path\" value=\"rest\"/>\n    <apiProperty key=\"api.version\" value=\"1.2.3\"/>\n    <apiProperty key=\"api.title\" value=\"User Services\"/>\n    <apiProperty key=\"api.description\" value=\"Camel Rest Example with OpenApi that provides an User REST service\"/>\n    <apiProperty key=\"api.contact.name\" value=\"The Apache Camel team\"/>\n\n</restConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Verifying Kamelet Plugin Installation\nDESCRIPTION: Displays the help output for the 'kn source' command after installing the Kamelet plugin, showing the plugin now appears in the plugins section.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/10/managing-kamelets-with-kn/index.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkn source -h\n\nManage event sources\n\nUsage:\n  kn source SOURCE|COMMAND [options]\n\nAliases:\n  source, sources\n\nAvailable Commands:\n  apiserver   Manage Kubernetes api-server sources\n  binding     Manage sink bindings\n  container   Manage container sources\n  list        List event sources\n  list-types  List event source types\n  ping        Manage ping sources\n\nPlugins:\n  kamelet      ~/.config/kn/plugins/kn-source-kamelet\n\nUse \"kn <command> --help\" for more information about a given command.\nUse \"kn options\" for a list of global command-line options (applies to all commands).\n```\n\n----------------------------------------\n\nTITLE: Starting Camel Quarkus Application in JVM Mode (Pre-1.7.0)\nDESCRIPTION: Command to start a Camel Quarkus application in JVM mode before version 1.7.0. This uses the runner JAR file.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/02/camel-quarkus-release-1.7.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ java -jar target/*-runner.jar\n```\n\n----------------------------------------\n\nTITLE: Creating Apache & OpenSource Section with Hugo Shortcodes\nDESCRIPTION: Uses Hugo shortcodes to create a section about Apache Software Foundation and open-source nature of Camel.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/_index.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n# Apache &amp; OpenSource\n\n{{< div \"split\" >}}\n{{< icon \"asf-estd-1999-logo\" \"Apache Software foundation, Est. 1999\" >}}\n{{< /div >}}\n\n{{< div \"split\" >}}\n\n**Camel is your project!**\n\nCamel is an [Apache Software Foundation](https://www.apache.org) project, available under the [Apache v2 license](https://apache.org/licenses/LICENSE-2.0). It's a complete open community, always listening to proposals and comments.\n\n[Sources](./community/sources/), [mailing lists](./community/mailing-list/), [issue tracker](./community/support/): it's fully open, you can access directly.\n\nWe also love contributions: don't hesitate to [contribute](./community/contributing/). You can contribute by <a href=\"https://github.com/apache/camel-website/edit/main/content/_index.md\">editing this page</a>!\n\n[Be Involved In The Community](./community/contributing/) | [How To Contribute](./community/contributing/)\n\n{{< /div >}}\n\n{{< /section >}}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Kafka Connector Release 3.19.0\nDESCRIPTION: YAML frontmatter defining metadata for the Camel Kafka Connector 3.19.0 release page. It specifies the URL, date, type, version, title, and JDK compatibility (versions 11 and 17).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-3.19.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-3.19.0/\"\ndate: 2022-12-18\ntype: release-note\nversion: \"3.19.0\"\ntitle: \"Camel Kafka Connector release 3.19.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel Quarkus Release Note\nDESCRIPTION: YAML frontmatter block defining metadata for the Camel Quarkus 2.11.0 release note page, including version, date, title and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-2.11.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-2.11.0/\"\ndate: 2022-07-27\ntype: release-note\nversion: 2.11.0\ntitle: \"Camel Quarkus release 2.11.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 29\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Access Token with OAuth MTLS Certificate Binding Example (JSON)\nDESCRIPTION: Example of an access token containing a cnf.x5t#S256 member, which represents the SHA-256 thumbprint of the client certificate for OAuth MTLS.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/api-management-infra/index.md#2025-04-08_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://example.hitachi.com\",\n  \"aud\": \"https://app1.hitachi.com\"\n  \"sub\": \"jdoe\",\n  \"iat\": 1458785796,\n  \"exp\": 1458872196,\n  \"cnf\":{\n    \"x5t#S256\": \"bwcK0esc3ACC3DB2Y5_lESsXE8o9ltc05O89jdN-dg2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP Settings for Camel in Sublime Text\nDESCRIPTION: JSON configuration to set up the Camel Language Server in Sublime Text. Specifies the command to execute the server jar file and enables support for both XML and Java files with appropriate selectors.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/08/sublime editor/index.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\n\t\"clients\":\n\t{\n\t\t\"Camel\":\n\t\t{\n\t\t\t\"command\":\n\t\t\t[\n\t\t\t\t\"java\",\n\t\t\t\t\"-jar\",\n\t\t\t\t\"PATH/TO/camel-lsp-server-1.6.0.jar\"\n\t\t\t],\n\t\t\t\"enabled\": true,\n\t\t\t\"languages\": [\n\t\t\t\t{\n\t\t\t\t\t\"selector\": \"text.xml\",\n\t\t\t\t\t\"priority_selector\": \"text.xml\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"selector\": \"source.java\",\n\t\t\t\t\t\"priority_selector\": \"source.java\",\n\t\t\t\t}\n\t\t\t],\n\t\t},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Quarkus Test Implementation\nDESCRIPTION: Initial test implementation using @QuarkusTest and RestAssured for testing the HTTP endpoint. This version doesn't include mocking functionality.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/mocking-beans-with-camel-quarkus/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@QuarkusTest\npublic class SemesterRouteTest {\n  @Test\n  void runningThisTestInOctoberShouldIssueSecondSemester() {\n    given().get(\"/semester\").then().statusCode(200).body(is(\"SECOND semester\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Active Token Introspection Response\nDESCRIPTION: JSON response structure returned when an access token is active, including token metadata such as client_id, username, scope, and expiration time.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/api-management-infra/index.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": true,\n  \"client_id\": \"l238j323ds-23ij4\",\n  \"username\": \"jdoe\",\n  \"scope\": \"read write dolphin\",\n  \"sub\": \"Z5O3upPC88QrAjx00dis\",\n  \"aud\": \"https://protected.example.net/resource\",\n  \"iss\": \"https://server.example.com/\",\n  \"exp\": 1419356238,\n  \"iat\": 1419350238,\n  \"extension_field\": \"twenty-seven\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Camel Language Server Protocol Client for Emacs\nDESCRIPTION: This extensive Lisp code defines the Camel Language Server Protocol client for Emacs. It sets up the necessary configurations, dependencies, and functions to integrate the Camel LSP server with Emacs' LSP mode.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/emacs/index.md#2025-04-08_snippet_1\n\nLANGUAGE: lisp\nCODE:\n```\n;;; lsp-camel.el --- LSP Camel server integration        -*- lexical-binding: t; -*-\n\n\n;;; Code:\n\n(require 'lsp-mode)\n\n(defgroup lsp-camel nil\n \"LSP support for Camel, using camel-language-server\"\n :group 'lsp-mode\n :tag \"Language Server\"\n :package-version '(lsp-mode . \"8.0.0\"))\n\n;; Define a variable to store camel language server jar version\n(defconst lsp-camel-jar-version \"1.5.0\")\n\n;; Define a variable to store camel language server jar name\n(defconst lsp-camel-jar-name (format \"camel-lsp-server-%s.jar\" lsp-camel-jar-version))\n\n;; Directory in which the servers will be installed. Lsp Server Install Dir: ~/.emacs.d/.cache/camells\n(defcustom lsp-camel-jar-file (f-join lsp-server-install-dir \"camells\" lsp-camel-jar-name)\n \"Camel Language server jar command.\"\n :type 'string\n :group 'lsp-camel\n :type 'file\n :package-version '(lsp-mode . \"8.0.0\"))\n\n(defcustom lsp-camel-jar-download-url\n (format \"https://repo1.maven.org/maven2/com/github/camel-tooling/camel-lsp-server/%s/%s\" lsp-camel-jar-version lsp-camel-jar-name)\n \"Automatic download url for lsp-camel.\"\n :type 'string\n :group 'lsp-camel\n :package-version '(lsp-mode . \"8.0.0\"))\n\n(lsp-dependency\n'camells\n'(:system lsp-camel-jar-file)\n`(:download :url lsp-camel-jar-download-url\n\t\t\t:store-path lsp-camel-jar-file))\n\n(defcustom lsp-camel-server-command `(\"java\" \"-jar\" , lsp-camel-jar-file)\n \"Camel server command.\"\n :type '(repeat string)\n :group 'lsp-camel\n :package-version '(lsp-mode . \"8.0.0\"))\n\n(defun lsp-camel--create-connection ()\n (lsp-stdio-connection\n  (lambda () lsp-camel-server-command)\n  (lambda () (f-exists? lsp-camel-jar-file))))\n\n(lsp-register-client\n(make-lsp-client :new-connection (lsp-camel--create-connection)\n\t\t\t\t :activation-fn (lsp-activate-on \"xml\")\n\t\t\t\t :priority 0\n\t\t\t\t :server-id 'camells\n\t\t\t\t :add-on? t\n\t\t\t\t :multi-root t\n\t\t\t\t :initialized-fn (lambda (workspace)\n\t\t\t\t\t\t\t\t   (with-lsp-workspace workspace\n\t\t\t\t\t\t\t\t\t (lsp--set-configuration (lsp-configuration-section \"camel\"))))\n\t\t\t\t :download-server-fn (lambda (_client callback error-callback _update?)\n\t\t\t\t\t\t\t\t   (lsp-package-ensure 'camells callback error-callback))))\n\n(lsp-consistency-check lsp-camel)\n\n(provide 'lsp-camel)\n;;; lsp-camel.el ends here\n```\n\n----------------------------------------\n\nTITLE: Using Properties in Camel Routes with Simple Expression\nDESCRIPTION: Demonstrates how to reference configuration properties in Camel routes using the {{...}} notation within a simple expression.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfrom(...).setBody(simple(\"{{basic}}\"))\n```\n\n----------------------------------------\n\nTITLE: REST Route Before Migration\nDESCRIPTION: Original XML configuration showing the REST route with inline route definition before migration to Camel 4.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<get path=\"/{id}\" outType=\"org.apache.camel.example.rest.User\" description=\"Find user by id\">\n    <param name=\"id\" type=\"path\" description=\"The id of the user to get\" dataType=\"integer\"/>\n    <responseMessage message=\"The user that was found\"/>\n    <responseMessage code=\"404\" message=\"User not found\"/>\n    <route>\n        <to uri=\"bean:userService?method=getUser(${header.id})\"/>\n        <filter>\n            <simple>${body} == null</simple>\n            <setHeader name=\"Exchange.HTTP_RESPONSE_CODE\">\n                <constant>404</constant>\n            </setHeader>\n        </filter>\n    </route>\n</get>\n```\n\n----------------------------------------\n\nTITLE: Creating a Bean for Static Value Injection in LLM Prompts\nDESCRIPTION: A CDI bean definition that provides a static value to be injected into LLM prompts. This demonstrates injecting application-level values into prompts.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/10/langchain4j-camel-annotations/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Named(\"myBean\")\n@ApplicationScoped\npublic class MyBean {\n  String getLevel() {\n    return \"HIGH\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example AWS EventBridge Event Structure\nDESCRIPTION: Sample JSON structure of an AWS EventBridge event notification for EC2 instance state changes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/camel-aws2-eventbridge-intro/index.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0\",\n  \"id\": \"6a7e8feb-b491-4cf7-a9f1-bf3703467718\",\n  \"detail-type\": \"EC2 Instance State-change Notification\",\n  \"source\": \"aws.ec2\",\n  \"account\": \"111122223333\",\n  \"time\": \"2017-12-22T18:43:48Z\",\n  \"region\": \"us-west-1\",\n  \"resources\": [\n    \"arn:aws:ec2:us-west-1:123456789012:instance/ i-1234567890abcdef0\"\n],\n\"detail\": {\n  \"instance-id\": \" i-1234567890abcdef0\",\n  \"state\": \"terminated\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kamelet Bindings\nDESCRIPTION: Lists all Kamelet bindings showing their status, age, and readiness, displaying the newly created 'github-pull-requests' binding.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/10/managing-kamelets-with-kn/index.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkn source kamelet binding list\n\nNAME                   PHASE   AGE   CONDITIONS   READY   REASON\ngithub-pull-requests   Ready   36s   1 OK / 1     True\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Debug Adapter in Sublime\nDESCRIPTION: Python configuration script for setting up the Camel Debug Adapter in Sublime Text. Defines adapter type, documentation links, and startup parameters.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Sublimedap/index.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom ..typecheck import *\n\nfrom .import util\nfrom .. import dap\nfrom .. import core\n\nimport sublime\nimport re\n\nclass Camel(dap.AdapterConfiguration):\n\n    type = 'camel'\n    docs = 'https://github.com/camel-tooling/camel-debug-adapter#debug-adapter-for-apache-camel'\n\n    installer = util.OpenVsxInstaller (\n        type='camel',\n        repo='redhat/vscode-debug-adapter-apache-camel'\n    )\n\n    async def start(self, log: core.Logger, configuration: dap.ConfigurationExpanded):\n        install_path = util.vscode.install_path(self.type)\n        command = [\n            'java',\n            '-jar',\n            f'{install_path}/extension/jars/camel-dap-server.jar'\n        ]\n        return dap.StdioTransport(log, command)\n```\n\n----------------------------------------\n\nTITLE: EventListener Configuration for GitHub Push Events\nDESCRIPTION: YAML configuration for an EventListener that handles GitHub push events and triggers the pipeline template.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: triggers.tekton.dev/v1alpha1\nkind: EventListener\nmetadata:\n  name: github-push\nspec:\n  serviceAccountName: tekton-triggers-cd\n  triggers:\n    - name: github-listener\n      interceptors:\n        - ref:\n            name: \"github\"\n          params:\n            # You may want to include a secure interceptor\n            - name: \"eventTypes\"\n              value: [\"push\"]\n      template:\n        ref: github-push-pipeline-template\n```\n\n----------------------------------------\n\nTITLE: Camel Token Introspection Implementation\nDESCRIPTION: Apache Camel route implementation for token introspection using HTTP4 component to validate access tokens against Keycloak.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/api-management-infra/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfrom(...) //receive the API request from the client application\n    .setHeader(...) //set the headers for requesting the inspection endpoint\n    .setBody(simple(\"client_id=...&amp;client_secret=...&amp;token=...\") //set the client authentication information and the access token\n    .to(\"http4://.../introspect\") //send the inspection request to the inspection endpoint of Keycloak\n    .choice() //check the response of token inspection\n    .when(...) //if access token was active\n        .setHeader(...) //set the headers for requesting the backend\n        .recipientList(...); //request the backend\n    .otherwise() //if access token was inactive\n        .setHeader(...) //set the error status code to 401\n        .setBody(...); //set the error response content\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables in Camel Quarkus Properties\nDESCRIPTION: Shows how to incorporate environment variable values into configuration properties using the ${VARNAME} syntax.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nenvironment-variable = a-value-with-environment-variable-${USERNAME}\n```\n\n----------------------------------------\n\nTITLE: Installing coc-camel Extension with vim-plug\nDESCRIPTION: Configuration snippet for installing the coc.nvim and coc-camel extensions using vim-plug in your vim/nvim configuration file. This enables Apache Camel language server support for code completion and other language features.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/coc-nvim-camel-lsp/index.md#2025-04-08_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n\" Initialize plugin system\n\"\ncall plug#begin()\n\n\" Shorthand notation; fetches https://github.com/neoclide/coc.nvim\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\n\" Shorthand notation; fetches Camel Ls\nPlug 'camel-tooling/coc-camel', {'do': 'yarn install --frozen-lockfile && yarn build'}\n\ncall plug#end()\n```\n\n----------------------------------------\n\nTITLE: Additional Test Scenarios with Mocking\nDESCRIPTION: Extended test cases showing different scenarios including error handling using the mocked bean.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/mocking-beans-with-camel-quarkus/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Test\nvoid augustShouldIssueSecondSemester() {\n  when(monthBean.month()).thenReturn(8);\n  given().get(\"/semester\").then().statusCode(200).body(is(\"SECOND semester\"));\n}\n\n@Test\nvoid exceptionShouldIssueHttp500() {\n  doThrow(new IllegalArgumentException(\"Simulating an exception\")).when(monthBean).month();\n  given().get(\"/semester\").then().statusCode(500);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Quarkus Development Task in VS Code\nDESCRIPTION: This snippet shows how to configure a Quarkus development task in VS Code's tasks.json file. It demonstrates the new completion feature available for guiding users in setting up Camel debugging for Quarkus applications.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/05/release-vscode-debug-adapter-0.3.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"shell\",\n  \"command\": \"./mvnw quarkus:dev\",\n  \"problemMatcher\": [\"$quarkus-dev-problem-matcher\"],\n  \"label\": \"quarkus:dev\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Knative Source Commands\nDESCRIPTION: Displays the help output for the 'kn source' command, showing the default event source types available in Knative client before installing the Kamelet plugin.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/10/managing-kamelets-with-kn/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkn source -h\n\nManage event sources\n\nUsage:\n  kn source SOURCE|COMMAND [options]\n\nAliases:\n  source, sources\n\nAvailable Commands:\n  apiserver   Manage Kubernetes api-server sources\n  binding     Manage sink bindings\n  container   Manage container sources\n  list        List event sources\n  list-types  List event source types\n  ping        Manage ping sources\n\nUse \"kn <command> --help\" for more information about a given command.\nUse \"kn options\" for a list of global command-line options (applies to all commands).\n```\n\n----------------------------------------\n\nTITLE: Java Bean Implementation for Camel Route\nDESCRIPTION: Sample Java bean class implementation with hello and bye methods for testing Camel route debugging.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Emacsdap/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.camel.example;\n\npublic class MyBean {\n\n    private String hi;\n\n    public MyBean(String hi) {\n        this.hi = hi;\n    }\n\n    public String hello() {\n        return hi + \" Begin ? \";\n\n    }\n     public String bye() {\n        return hi + \" End ? \";\n}\n}\n```\n\n----------------------------------------\n\nTITLE: TriggerTemplate for Pipeline Execution\nDESCRIPTION: YAML configuration for a TriggerTemplate that defines the pipeline execution parameters and workspace configuration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: triggers.tekton.dev/v1alpha1\nkind: TriggerTemplate\nmetadata:\n  name: github-push-pipeline-template\nspec:\n  resourcetemplates:\n    - apiVersion: tekton.dev/v1beta1\n      kind: PipelineRun\n      metadata:\n        generateName: github-push-pipeline-run-\n      spec:\n        pipelineRef:\n          name: pipeline-cicd\n        taskRunSpecs:\n          - pipelineTaskName: kamel-run\n            taskServiceAccountName: camel-k-pipeline-sa\n          - pipelineTaskName: kamel-promote\n            taskServiceAccountName: camel-k-pipeline-sa\n        podTemplate:\n          securityContext:\n            fsGroup: 65532\n        workspaces:\n        - name: shared-data\n          volumeClaimTemplate:\n            spec:\n              accessModes:\n              - ReadWriteOnce\n              resources:\n                requests:\n                  storage: 1Gi\n        params:\n        - name: repo-url\n          value: https://github.com/squakez/camel-k-rest-cicd.git\n        - name: repo-branch\n          value: feat/cd\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with LambdaRouteBuilder in Java\nDESCRIPTION: Example of using the new LambdaRouteBuilder to define a Camel route using Java lambda style. This allows for a concise, functional approach to route definition.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/09/Camel35-Whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nrb -> rb.from(\"timer:foo\").log(\"Hello Lambda\");\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Kamelets 3.20.0 Release Metadata in YAML\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel Kamelets 3.20.0 release announcement. It specifies the URL, release date, version, title, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-3.20.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-3.20.0/\"\ndate: 2022-12-24\ntype: release-note\nversion: \"3.20.0\"\ntitle: \"Kamelets 3.20.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Service with PropertyInject in Apache Camel\nDESCRIPTION: Example demonstrating how to use @PropertyInject annotation to create a MinioConfig POJO and configure an AmazonS3 client. This shows the new capability to auto-create POJO beans from external configurations and inject them into your code.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/04/Camel32-Whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@BindToRegistry\npublic static AmazonS3 minioClient(@PropertyInject(\"minio\") MinioConfig config) {\n\n    var endpoint = new AwsClientBuilder.EndpointConfiguration(config.getAddress(), \"US_EAST_1\");\n    var credentials = new BasicAWSCredentials(config.getAccessKey(), config.getSecretKey());\n    var credentialsProvider = new AWSStaticCredentialsProvider(credentials);\n\n    return AmazonS3ClientBuilder\n        .standard()\n        .withEndpointConfiguration(endpoint)\n        .withCredentials(credentialsProvider)\n        .withPathStyleAccessEnabled(true)\n        .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Vimspector Debug Configuration for Camel\nDESCRIPTION: JSON configuration for Vimspector to set up Camel debugging, including adapter settings and source paths.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/vimdap/index.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurations\": {\n    \"Camel Debug Adapter - Attach\": {\n      \"adapter\": \"cust_camel-debug-adapter\",\n      \"configuration\": {\n        \"request\": \"attach\",\n        \"sourcePaths\": [ \"${workspaceRoot}/src/main/java\" ],\n        \"hostName\": \"localhost\",\n        \"port\": \"${JVMDebugPort}\",\n        \"stepFilters\": {\n          \"skipClasses\": [ \"$$JDK\" ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the migrated Spring Boot application\nDESCRIPTION: Maven command to package and run the migrated Spring Boot application.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmvn package spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Running Quarkus in Development Mode\nDESCRIPTION: Command to run a Camel Quarkus application in development mode with Quarkus, enabling features like the Dev Console for an enhanced development experience.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-release-1.6.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ mvn clean compile quarkus:dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel K Task with Multiple Resources in VS Code (JSON)\nDESCRIPTION: Updated configuration for a Camel K task in VS Code, using the new 'resources' attribute to specify multiple file paths as an array.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/07/VSCode-CamelK-0.0.26/index.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"tasks\": [\n\t\t{\n\t\t\t\"type\": \"camel-k\",\n\t\t\t\"resources\": [\"path/to/file.xx\"],\n\t\t\t(...)\n\t\t},\n```\n\n----------------------------------------\n\nTITLE: Defining Client Configuration in CAPI Gateway\nDESCRIPTION: JSON structure for configuring API clients with authentication details, access scopes, authorized grant types, and security roles for API consumption and authorization.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_id\" : \"XXX-XXX-XXX-XXX\",\n    \"clientId\" : \"web-publisher\",\n    \"resourceIds\" : [],\n    \"secretRequired\" : true,\n    \"clientSecret\" : \"$2a$10$oQBqS4ZOEiIGVNiZnB0nMuFw/n/Od57IG/uy4nFuOJxLtHE/Z5jDC\",\n    \"scoped\" : false,\n    \"scope\" : [\n        \"read-foo\"\n    ],\n    \"authorizedGrantTypes\" : [\n        \"refresh_token\",\n        \"client_credentials\",\n    ],\n    \"registeredRedirectUri\" : [],\n    \"authorities\" : [\n        {\n            \"role\" : \"ROLE_USER\",\n            \"_class\" : \"org.springframework.security.core.authority.SimpleGrantedAuthority\"\n        },\n        {\n            \"role\" : \"ROLE_PUBLISHER\",\n            \"_class\" : \"org.springframework.security.core.authority.SimpleGrantedAuthority\"\n        }\n        // All the API's you subscribe will be an authority\n    ],\n    \"accessTokenValiditySeconds\" : 60,\n    \"refreshTokenValiditySeconds\" : 14400,\n    \"autoApprove\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway URL for Published API Endpoints\nDESCRIPTION: Example URL format where API services are published and made available through the CAPI Gateway using the configured context.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttps://localhost:8380/gateway/context-name/\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres for CDC\nDESCRIPTION: Shell commands to configure PostgreSQL for Change Data Capture by enabling transaction log access and setting up replication slots.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/05/CdcWithCamelAndDebezium/index.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# postgresql.conf: configure replication slot\nwal_level = logical\nmax_wal_senders = 1\nmax_replication_slots = 1\n# pg_hba.conf: allow localhost replication to debezium user\nlocal   cdcdb       cdcadmin                                trust\nhost    cdcdb       cdcadmin        127.0.0.1/32            trust\nhost    cdcdb       cdcadmin        ::1/128                 trust\n```\n\n----------------------------------------\n\nTITLE: Unregistering TorchServe Models with Camel Route\nDESCRIPTION: Shows how to unregister a specific model from TorchServe using a Camel route. Uses the management API with model name parameter.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n//DEPS org.apache.camel:camel-bom:4.10.0@pom\n//DEPS org.apache.camel:camel-core\n//DEPS org.apache.camel:camel-torchserve\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class unregister_model extends RouteBuilder {\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:unregister?repeatCount=1\")\n            .to(\"torchserve:management/unregister?modelName=mnist_v2\")\n            .log(\"Status: ${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Camel 2.22.3 Release Notes\nDESCRIPTION: This YAML front matter defines metadata for the Camel 2.22.3 release notes. It includes the release date, end-of-life date, version number, title, and other relevant information for categorizing and describing the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.22.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2019-01-19\neol: 2019-06-30\ndraft: false \ntype: release-note\nversion: 2.22.3\ntitle: \"Release 2.22.3\"\npreview: \"Minor update of the 2.22.x branch\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12344398\ncategory: camel\nkind: legacy\njdk: [8]\n---\n```\n\n----------------------------------------\n\nTITLE: Describing a Specific Kamelet\nDESCRIPTION: Shows detailed information about the 'github-source' Kamelet, including its metadata, description, required properties, and current status.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/10/managing-kamelets-with-kn/index.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkn source kamelet describe github-source\n\nName:           github-source\nNamespace:      openshift-operators\nLabels:         camel.apache.org/kamelet.bundled=true,\n                camel.apache.org/kamelet.readonly=true, camel.apa ...\nAnnotations:    camel.apache.org/catalog.version=0.4.0,\n                camel.apache.org/kamelet.group=GitHub, came ...\nAge:            2d\nDescription:    Github Source - Receive events From Github.\nProvider:       Apache Software Foundation\nSupport Level:  Preview\nPhase:          Ready\n\nProperties:\n  Name       Req  Type     Description\n  oauthToken ✓    string   Oauth token\n  repoName   ✓    string   The Github Repository name\n  repoOwner  ✓    string   The repository owner\n  type       ✓    string   The type of event to consume.\n\nConditions:\n  OK TYPE     AGE REASON\n  ++ Ready     2d\n```\n\n----------------------------------------\n\nTITLE: Defining API Configuration in JSON for CAPI Gateway\nDESCRIPTION: JSON structure that defines an API configuration including endpoint, security settings, throttling policies, and error handling behaviors for deployment to the CAPI Gateway.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_id\" : \"XXX-XXX-XXX-XXX\",\n    \"endpoint\" : \"remote.domain.com:8080\",\n    \"endpointType\" : \"HTTPS\",\n    \"name\" : \"Friendly API Name\",\n    \"secured\" : true,\n    \"context\" : \"context-name\",\n    \"swagger\" : true,\n    \"swaggerEndpoint\" : \"https://remote.domain.com:8080/v2/api-docs\",\n    \"blockIfInError\" : true,\n    \"maxAllowedFailedCalls\" : 10, //after 10 failed calls, the route will be removed\n    \"unblockAfter\" : true,\n    \"unblockAfterMinutes\" : 2, //after 2 minutes of being removed, the route is added\n    //100 calls per minute, above this, the route is suspended.\n    \"throttlingPolicy\" : {\n        \"maxCallsAllowed\" : \"100\",\n        \"periodForMaxCalls\" : \"60000\",\n        \"applyPerPath\" : true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Transformer Properties\nDESCRIPTION: Example of configuring Kafka transformers in Camel Kafka Connector using the transforms.type property.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/VSCode-LanguageSupport-0.0.28/index.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ntransforms.example.type=org.apache.kafka.connect.transforms.ExampleTransformer\n```\n\n----------------------------------------\n\nTITLE: TensorFlow Serving Predict API Endpoint Configuration\nDESCRIPTION: URI configuration for calling TensorFlow Serving Predict API endpoint with MNIST model\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_4\n\nLANGUAGE: uri\nCODE:\n```\ntensorflow-serving:predict?modelName=mnist&modelVersion=1\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Component Properties in Properties File\nDESCRIPTION: Example of configuring Camel component properties in a properties file. This demonstrates how to set up component-specific properties that can now be edited with completion support in the VS Code extension.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2019/12/LanguageSupportTooling-0.0.20/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Example properties file path from the Camel examples\n# application.properties\n```\n\n----------------------------------------\n\nTITLE: Configuring Beans in XML DSL with Camel 4\nDESCRIPTION: Demonstrates how to declare beans and Camel routes in the same XML file using the unified XML DSL approach in Camel 4. This example shows a bean declaration with properties and a simple route that references this bean.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/08/camel4-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<camel>\n\n    <bean name=\"greeter\" type=\"com.foo.Greeter\">\n        <properties>\n            <property key=\"message\" value=\"Hello World\" />\n        </properties>\n    </bean>\n\n    <route id=\"my-route\">\n        <from uri=\"direct:start\"/>\n        <bean ref=\"greeter\"/>\n        <to uri=\"mock:finish\"/>\n    </route>\n\n</camel>\n```\n\n----------------------------------------\n\nTITLE: Requesting an OAuth Access Token in CAPI Gateway\nDESCRIPTION: cURL command to obtain an access token using client credentials grant type for API authentication, demonstrating how to interact with the OAuth endpoint.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST https://localhost:8080/oauth/token -H 'Authorization: Basic d2ViLXB1Ymxpc2hlcjp3ZWItY2xpZW50LXNlY3JldA==' -H 'Content-Type: multipart/form-data;' -F grant_type=client_credentials -F 'response_type=access_token'\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap for Maven Settings\nDESCRIPTION: Bash command to create a ConfigMap containing Maven proxy settings configuration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/06/camel-k-maven-proxy/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create cm my-maven-proxy --from-file settings.xml\n```\n\n----------------------------------------\n\nTITLE: Displaying Camel Service Information with JBang\nDESCRIPTION: Demonstrates the use of 'camel get service' command to show detailed service information, including protocol, service location, and endpoint details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/camel47-whatsnew/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ camel get service\n  PID   NAME            COMPONENT  DIR  ROUTE   PROTOCOL  SERVICE                           TOTAL  ENDPOINT\n 75937  MyRouteBuilder  activemq   in   route1  jms       failover://tcp://localhost:61616      0  activemq://test.MyQueue\n```\n\n----------------------------------------\n\nTITLE: Executing Camel CLI Commands for KServe Operations\nDESCRIPTION: These console commands demonstrate how to run the Java examples for retrieving model metadata and performing inference using the Camel CLI.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ncamel run model_metadata.java\n```\n\nLANGUAGE: console\nCODE:\n```\ncamel run infer_simple.java\n```\n\n----------------------------------------\n\nTITLE: Running Camel Quarkus Command Line Application in Native Mode\nDESCRIPTION: This shell command demonstrates how to run the Camel Quarkus application as a native executable, passing the 'greeted.subject' parameter. The output shows significantly faster startup and processing times compared to JVM mode.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/07/command-line-utility-with-camel-quarkus/index.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ target/*runner -Dgreeted.subject=Joe\n2020-07-15 12:19:22,810 INFO  [org.apa.cam.qua.cor.CamelBootstrapRecorder] (main) bootstrap runtime: org.apache.camel.quarkus.main.CamelMainRuntime\n2020-07-15 12:19:22,811 INFO  [org.apa.cam.mai.BaseMainSupport] (main) Auto-configuration summary:\n2020-07-15 12:19:22,811 INFO  [org.apa.cam.mai.BaseMainSupport] (main)  camel.main.durationMaxMessages=1\n2020-07-15 12:19:22,812 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.4.0 (camel-1) is starting\n2020-07-15 12:19:22,812 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html\n2020-07-15 12:19:22,812 INFO  [org.apa.cam.imp.eng.InternalRouteStartupManager] (main) Route: route1 started and consuming from: timer://hello\n2020-07-15 12:19:22,812 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Total 1 routes, of which 1 are started\n2020-07-15 12:19:22,812 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.4.0 (camel-1) started in 0.000 seconds\n2020-07-15 12:19:22,812 INFO  [io.quarkus] (main) camel-quarkus-integration-test-main-command-mode 1.1.0-SNAPSHOT native (powered by Quarkus 1.6.0.Final) started in 0.007s.\n2020-07-15 12:19:22,813 INFO  [io.quarkus] (main) Profile prod activated.\n2020-07-15 12:19:22,812 INFO  [hello] (Camel (camel-1) thread #0 - timer://hello) Exchange[ExchangePattern: InOnly, BodyType: String, Body: Hello Joe!]\n2020-07-15 12:19:22,813 INFO  [io.quarkus] (main) Installed features: [camel-core, camel-log, camel-main, camel-policy, camel-support-common, camel-timer, cdi]\n2020-07-15 12:19:22,813 INFO  [org.apa.cam.mai.MainSupport] (camel-main) Waiting until: 1 messages has been processed\n2020-07-15 12:19:22,813 INFO  [org.apa.cam.mai.MainLifecycleStrategy] (Camel (camel-1) thread #0 - timer://hello) Duration max messages triggering shutdown of the JVM.\n2020-07-15 12:19:22,813 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) Apache Camel 3.4.0 (camel-1) is shutting down\n2020-07-15 12:19:22,813 INFO  [org.apa.cam.mai.MainLifecycleStrategy] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) CamelContext: camel-1 has been shutdown, triggering shutdown of the JVM.\n2020-07-15 12:19:22,813 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) Apache Camel 3.4.0 (camel-1) uptime 0.001 seconds\n2020-07-15 12:19:22,813 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) Apache Camel 3.4.0 (camel-1) is shutdown in 0.000 seconds\n2020-07-15 12:19:22,813 INFO  [io.quarkus] (main) camel-quarkus-integration-test-main-command-mode stopped in 0.000s\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Camel Components in settings.json\nDESCRIPTION: Configuration example for adding extra Camel components in VS Code settings.json. This allows developers to include support for components not in the Camel core catalog.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2019/12/LanguageSupportTooling-0.0.20/index.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// File -> Preferences -> Settings -> Apache Camel Tooling -> Extra-components -> Edit in settings.json\n```\n\n----------------------------------------\n\nTITLE: JSON Formatted Log Example in Camel K\nDESCRIPTION: Sample of structured logs in JSON format, which is useful for production environments and log processing tools like FluentD or Logstash. The JSON structure includes timestamp, logger information, thread details, and other metadata.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/new-camel-k-logging-features/index.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"timestamp\":\"2021-05-10T11:28:26.99Z\",\"sequence\":99,\"loggerClassName\":\"org.jboss.logging.Logger\",\"loggerName\":\"io.quarkus\",\"level\":\"INFO\",\"message\":\"Installed features: [camel-bean, camel-core, camel-java-joor-dsl, camel-k-core, camel-k-runtime, camel-log, camel-support-common, camel-timer, cdi]\",\"threadName\":\"main\",\"threadId\":1,\"mdc\":{},\"ndc\":\"\",\"hostName\":\"basic-5b57bcf589-kbzvp\",\"processName\":\"io.quarkus.bootstrap.runner.QuarkusEntryPoint\",\"processId\":1}\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Commit Statistics in Bash\nDESCRIPTION: Shell commands to calculate total number of commits and unique committers in 2019. The first command sums up all commits, while the second counts unique committer names.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2019/12/2019-Numbers/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#1 git shortlog -ns --since 2019-01-01 --until 2020-01-01 | cut -c1-7 | awk '{ SUM += $1} END { print SUM }'\n#2 git shortlog --since 2019-01-01 --until 2020-01-01 -ns | wc -l\n```\n\n----------------------------------------\n\nTITLE: Displaying Apache Benchmark Results for Protected Service with SSL\nDESCRIPTION: This code snippet shows the output of an Apache Benchmark test performed on a protected service. It includes server details, test parameters, and performance metrics such as requests per second, response times, and connection statistics.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nResults for 20k calls 1000 concurrency level:\nServer Hostname:        localhost\nServer Port:            8380\nSSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES256-GCM-SHA384,2048,256\nServer Temp Key:        ECDH P-256 256 bits\nTLS Server Name:        localhost\n\nDocument Path:          /gateway/myctx/internal/12345\nDocument Length:        33 bytes\n\nConcurrency Level:      1000\nTime taken for tests:   65.563 seconds\nComplete requests:      20000\nFailed requests:        0\nTotal transferred:      6560000 bytes\nHTML transferred:       660000 bytes\nRequests per second:    305.05 [#/sec] (mean)\nTime per request:       3278.129 [ms] (mean)\nTime per request:       3.278 [ms] (mean, across all concurrent requests)\nTransfer rate:          97.71 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        7 2431 1388.0   2260   18381\nProcessing:     5  798 883.7    684   13862\nWaiting:        3  796 883.3    681   13862\nTotal:         58 3229 1683.6   3091   18639\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Alert Rules\nDESCRIPTION: YAML configuration for creating a PrometheusRule to set up alerts for Camel K integration failures.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/camel-k-monitoring-ops/index.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  labels:\n    prometheus: k8s\n    role: alert-rules\n  name: camel-k-alert\nspec:\n  groups:\n  - name: camel-k.rules\n    rules:\n    - alert: CamelKAlert\n      expr: application_camel_route_exchanges_failed_total > 0\n```\n\n----------------------------------------\n\nTITLE: Java Class with Configurer Annotation for Reflection-Free Configuration\nDESCRIPTION: Example of a class annotated with @Configurer that enables Camel's reflection-free configuration. The class demonstrates typed collection properties that Camel can now configure without reflection.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/09/Camel35-Whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configurer\npublic class Foo\n\n    private Map<String, Country> countries;\n\n    // getter/setter omitted\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unicode Character Escaping in application.properties\nDESCRIPTION: Shows how to include Unicode characters in property values using standard Java properties syntax with \\u notation for character escaping.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nunicode = a-value-with-unicode-character-(\\u221A9=3)\n```\n\n----------------------------------------\n\nTITLE: HTTP Token Introspection Request Example\nDESCRIPTION: Example of an HTTP POST request for token introspection, showing the required headers and form parameters sent to the authorization server.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/api-management-infra/index.md#2025-04-08_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /introspect HTTP/1.1\nHost: server.example.com\nAccept: application/json\nContent-Type: application/x-www-form-urlencoded\n\ntoken=2YotnFZFEjr1zCsicMWpAA\n```\n\n----------------------------------------\n\nTITLE: Adding Camel Quarkus Main Dependency in Maven\nDESCRIPTION: Maven dependency for camel-quarkus-main which provides the configuration options to control application lifecycle.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/07/command-line-utility-with-camel-quarkus/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.camel.quarkus</groupId>\n    <artifactId>camel-quarkus-main</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint in Camel Java Route\nDESCRIPTION: Example showing the file path where to place a breakpoint in a Camel Java route for debugging. The breakpoint should be placed on the log line in the route definition.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/08/camel-springboot-remote-debug-to-openshift-from-vscode/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/acme/myproject/MyRoute.java\n```\n\n----------------------------------------\n\nTITLE: Launching TensorFlow Serving Docker Container\nDESCRIPTION: Docker command to start a TensorFlow Serving container with pre-configured models mounted from local directory.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run --rm -it --name tf-serving \\\n    -p 8500:8500 -p 8501:8501 \\\n    -v ./models:/models \\\n    -v ./models/models.pbtxt:/bitnami/tensorflow-serving/conf/tensorflow-serving.conf \\\n    bitnami/tensorflow-serving\n```\n\n----------------------------------------\n\nTITLE: Defining Log4j Version in Camel Dependencies\nDESCRIPTION: XML configuration showing the Log4j2 version definition in the camel-dependencies BOM file. This version was used for building and testing Apache Camel releases.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/12/log4j2/index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<log4j2-version>2.13.3</log4j2-version>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Platforms in Camel K using kamel CLI\nDESCRIPTION: Example of using the kamel CLI to run a test YAML file with builder.platforms trait configured for both ARM64 and AMD64 architectures. This enables multi-architecture support in Camel K 2.3.0.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/04/camel-k-2-3/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkamel run test.yaml -t builder.platforms=linux/arm64 -t builder.platforms=linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Specifying Data Types in Kamelet YAML Definition\nDESCRIPTION: This YAML snippet shows how to define data types for a Kamelet. It specifies two output data types: 'binary' and 'cloudevents', each with its own format, description, and media type.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel-data-types/index.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1\nkind: Kamelet\nmetadata:\n name: aws-s3-source\nspec:\n properties:\n   # ...\n dataTypes:\n   out:\n     default: binary\n     types:\n       binary:\n         format: \"application-octet-stream\"\n         description: Default binary representation of the source.\n         mediaType: application/octet-stream\n       cloudevents:\n         format: \"aws2-s3:application-cloudevents\"\n         description: Data type sets CloudEvent headers on the message.\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Source Kamelet with ENV Variables\nDESCRIPTION: Example showing how to configure Kamelets with environment variables using a more human-readable format for long parameters. Both styles are supported in Camel 4.9.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/camel49-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nCAMEL_KAMELET_AWS_S3_SOURCE_BUCKETNAMEORARN = myBucket\nCAMEL_KAMELET_AWS_S3_SOURCE_BUCKET_NAME_OR_ARN = myBucket\n```\n\n----------------------------------------\n\nTITLE: Creating a Camel Unit Test with Extended Timeout in Java\nDESCRIPTION: This Java code snippet demonstrates how to create a Camel unit test with an extended timeout. It uses NotifyBuilder to wait for message completion, allowing more time for debugging.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/HowToUseCamelRouteTextualDebuggerWithUnitTest/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass MainTest extends CamelMainTestSupport {\n\t@Test\n\tvoid myTest() throws Exception {\n\t\tNotifyBuilder notify = new NotifyBuilder(context)\n\t\t\t.whenCompleted(1).whenBodiesDone(\"Bye World\").create();\n\t\tassertTrue(\n\t\t\tnotify.matches(90, TimeUnit.SECONDS), \"1 message should be completed\"\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Camel K with JVM and Native Profiles\nDESCRIPTION: Command to run a Camel application with both JVM and Native profiles in Camel K 1.7. This allows the application to start in JVM mode while the native version is being compiled.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/11/camel-k-release-1-7/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kamel run -t quarkus.package-type=fast-jar -t quarkus.package-type=native ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Lightweight Mode in Camel Quarkus Properties\nDESCRIPTION: Configuration to enable lightweight mode in Camel Quarkus. This removes references to the routes model after startup, freeing up memory but preventing new routes from being added after application start.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/12/camel-quarkus-release-1.5.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncamel.main.lightweight=true\n```\n\n----------------------------------------\n\nTITLE: XML Rule for Detecting Removed Camel LinkedIn Component\nDESCRIPTION: Windup XML rule that detects usage of the camel-linkedin artifact which has been removed in Camel 3. The rule provides a hint with an effort estimate and links to the migration guide.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/09/windup/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<rule id=\"xml-removed-components-00000\">\n    <when>\n        <project>\n            <artifact groupId=\"org.apache.camel\" artifactId=\"camel-linkedin\" />\n        </project>\n    </when>\n    <perform>\n        <hint title=\"`org.apache.camel:camel-linkedin` artifact has been removed\" effort=\"7\" category-id=\"mandatory\" >\n            <message>`org.apache.camel:camel-linkedin` artifact has been removed in Apache Camel 3 so it won't be available</message>\n            <link href=\"/manual/camel-3-migration-guide.html#_removed_components\" title=\"Camel 3 - Migration Guide: Removed components\" />\n        </hint>\n    </perform>\n</rule>\n```\n\n----------------------------------------\n\nTITLE: Running Camel 4 Integration with Camel K CLI\nDESCRIPTION: This command runs a Camel 4 integration using the Camel K CLI. It specifies the runtime version 3.2.0 to use Camel 4.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/09/camel-4-on-camel-k/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkamel run test.yaml -t camel.runtime-version=3.2.0\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Camel Dynamic Router EIP\nDESCRIPTION: This code shows how to unsubscribe from the Dynamic Router by sending an unsubscribe control message. Only the subscription ID and channel name are required to remove a routing participant.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/01/dynamic-router-eip-component/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nDynamicRouterControlMessage unsubscribeMessage =\n    new DynamicRouterControlMessage(\"testSubscriptionId\", \"test\");\ntemplate.sendBody(\"dynamic-router:control\", unsubscribeMessage);\n```\n\n----------------------------------------\n\nTITLE: Running Camel K Integration with Prometheus Trait\nDESCRIPTION: Command to run a Camel K REST API example with Prometheus monitoring enabled using the prometheus trait.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/camel-k-monitoring-ops/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkamel run https://raw.githubusercontent.com/apache/camel-k-examples/main/generic-examples/rest/RestDSL.java --dev -t prometheus.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Kamelets 4.1.0 Release Metadata in YAML\nDESCRIPTION: This YAML front matter defines the metadata for Camel Kamelets 4.1.0 release documentation. It specifies the release URL, date (October 30, 2023), version (4.1.0), title, and indicates JDK 17 compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.1.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.1.0/\"\ndate: 2023-10-30\ntype: release-note\nversion: \"4.1.0\"\ntitle: \"Kamelets 4.1.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Maven Build Log Format in Camel K\nDESCRIPTION: Example of the improved Maven build logs format in Camel K. The normalized JSON structure makes it easier to parse and process build messages, particularly for identifying build errors.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/new-camel-k-logging-features/index.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"level\":\"info\",\"ts\":1620393185.321101,\"logger\":\"camel-k.maven.build\",\"msg\":\"Downloading from repository-000: http://my.repository.com:8081/artifactory/fuse-brno/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-bom/2.2.4/shrinkwrap-resolver-bom-2.2.4.pom\"}\n```\n\n----------------------------------------\n\nTITLE: Compiled Simple (CSimple) Expression Example\nDESCRIPTION: Shows the equivalent CSimple language expression that provides better performance through compilation. This version includes explicit null checks and proper method call syntax.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/12/Camel37-Whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<csimple>${exchangeProperty.user} != null &&\n             ${exchangeProperty.user.getName()} != null &&\n             ${exchangeProperty.user.getAge()} > 11</csimple>\n```\n\n----------------------------------------\n\nTITLE: Quarkus Native Configuration Property Example\nDESCRIPTION: Example of a configuration property used for SQL script files in native mode\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/08/camel-quarkus-release-1.0.0/index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nquarkus.camel.sql.script-files\n```\n\n----------------------------------------\n\nTITLE: Implementing Camel Context Property Method Migration Rule in XML\nDESCRIPTION: A Windup rule that detects deprecated getProperties/setProperty method calls on CamelContext. The rule scans for direct method calls but has limitations with inherited imports and method chaining.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/09/windup/index.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<rule id=\"java-generic-information-00032\">\n    <when>\n        <javaclass references=\"org.apache.camel.CamelContext.{get|set}Propert{y|ies}({*})\" >\n            <location>METHOD_CALL</location>\n        </javaclass>\n    </when>\n    <perform>\n        <hint title=\"`org.apache.camel.CamelContext` property methods have been removed.\" effort=\"1\"\n              category-id=\"mandatory\">\n            <message>The `getProperties` and `setProperty` methods have been removed from `org.apache.camel.CamelContext`. Please use `getGlobalOptions` and `setGlobalOptions` instead</message>\n            <link title=\"Camel 3 - Migration Guide: CONFIGURING GLOBAL OPTIONS ON CAMELCONTEXT\"\n                  href=\"/manual/camel-3-migration-guide.html#_configuring_global_options_on_camelcontext\"/>\n        </hint>\n    </perform>\n</rule>\n```\n\n----------------------------------------\n\nTITLE: Ingress Configuration for Webhook\nDESCRIPTION: YAML configuration for an Ingress resource that exposes the webhook endpoint and routes to the EventListener service.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-cd-pipeline\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\nspec:\n  rules:\n    - http:\n        paths:\n          - path: /my-cd-pipeline\n            pathType: Exact\n            backend:\n              service:\n                # Will forward events to an EventListener called github-push\n                name: el-github-push\n                port:\n                  number: 8080\n```\n\n----------------------------------------\n\nTITLE: Java Method Deprecation Example\nDESCRIPTION: Example of deprecated method usage change in Camel 4, showing the transition from getIn() to getMessage()\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/camel4roadmap/index.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmessage.getIn() -> getMessage()\n```\n\n----------------------------------------\n\nTITLE: Adding Component Dependencies for Timer and Log\nDESCRIPTION: Maven dependencies for camel-quarkus-log and camel-quarkus-timer components needed to use the log and timer endpoints in the route.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/07/command-line-utility-with-camel-quarkus/index.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.camel.quarkus</groupId>\n    <artifactId>camel-quarkus-log</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.apache.camel.quarkus</groupId>\n    <artifactId>camel-quarkus-timer</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating a Kamelet Binding to a Knative Channel\nDESCRIPTION: Creates a binding between the 'github-source' Kamelet and a Knative channel named 'github-prs', configuring it to stream GitHub pull request events.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/10/managing-kamelets-with-kn/index.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkn source kamelet binding create github-pull-requests \\\n      --kamelet github-source \\\n      --channel github-prs \\\n      --property oauthToken=xxx \\\n      --property repoName=camel \\\n      --property repoOwner=apache \\\n      --property type=pullRequest\n```\n\n----------------------------------------\n\nTITLE: Defining Kamelets 0.8.0 Release Note Metadata in YAML\nDESCRIPTION: This YAML snippet defines the metadata for the Kamelets 0.8.0 release note. It specifies the URL, release date, version, title, and other relevant information for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.8.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.8.0/\"\ndate: 2022-04-13\ntype: release-note\nversion: \"0.8.0\"\ntitle: \"Kamelets 0.8.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Security Advisory Frontmatter Template in YAML\nDESCRIPTION: YAML frontmatter template for Apache Camel security advisories containing metadata fields including title, URL, date, CVE number, severity, description, mitigation steps, credits, and version information. Uses Go template syntax for variable interpolation.\nSOURCE: https://github.com/apache/camel-website/blob/main/archetypes/security-advisory.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Apache Camel Security Advisory - {{ .Name | title }}\"\nurl: /security/{{ .Name }}.html\ndate: {{ .Date }}\ndraft: true\ntype: security-advisory\ncve: {{ .Name }}\nseverity: \nsummary: \"\"\ndescription: \"\"\nmitigation: \"\"\ncredit: \"\"\naffected: \nfixed: \n---\n```\n\n----------------------------------------\n\nTITLE: Listing YAKS Test Results in Kubernetes\nDESCRIPTION: Command to list the status and results of YAKS tests running on a Kubernetes cluster. This shows the test phases (Passed/Failed), total tests, and breakdown of passed, failed, skipped tests and errors.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/camel-k-yaks/index.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ yaks ls\n```\n\n----------------------------------------\n\nTITLE: Running Database and Artemis Setup Scripts\nDESCRIPTION: Shell commands to initialize the database, query the table, produce a stream of changes, and start the Artemis broker for the CDC pipeline.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/05/CdcWithCamelAndDebezium/index.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./run.sh --database\n./run.sh --query\n./run.sh --stream\n\n./run.sh --artemis\n# status check\nps -ef | grep \"[A]rtemis\" | wc -l\n```\n\n----------------------------------------\n\nTITLE: Successful Migration Log\nDESCRIPTION: Log output showing successful startup of the migrated application in Camel 4.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_13\n\nLANGUAGE: log\nCODE:\n```\n$ camel run pom.xml\n2024-12-04 08:43:40.809  INFO 45721 --- [           main] org.apache.camel.main.MainSupport        : Apache Camel (JBang) 4.9.0 is starting\n2024-12-04 08:43:40.917  INFO 45721 --- [           main] org.apache.camel.main.MainSupport        : Using Java 17.0.11 with PID 45721. Started by davsclaus in /Users/davsclaus/workspace/camel-karaf-examples/examples/camel-example-openapi-osgi\n2024-12-04 08:43:43.599  INFO 45721 --- [           main] .main.download.MavenDependencyDownloader : Resolved: org.apache.camel:camel-spring:4.9.0 (took: 2s678ms)\n2024-12-04 08:43:47.734  INFO 45721 --- [           main] .main.download.MavenDependencyDownloader : Resolved: org.apache.camel:camel-openapi-java:4.9.0 (took: 2s219ms)\n2024-12-04 08:43:47.761  INFO 45721 --- [           main] org.apache.camel.main.BaseMainSupport    : Properties location: file:src/main/resources/log4j2.properties\n2024-12-04 08:43:47.794  INFO 45721 --- [           main] org.apache.camel.main.ProfileConfigurer  : The application is starting with profile: dev\n2024-12-04 08:43:53.110  INFO 45721 --- [           main] .main.download.MavenDependencyDownloader : Resolved: org.apache.camel:camel-xml-io-dsl:4.9.0 (took: 2s79ms)\n2024-12-04 08:43:53.540  INFO 45721 --- [           main] n.xml.blueprint.BlueprintXmlBeansHandler : Discovered 1 OSGi <blueprint> XML beans\n2024-12-04 08:43:53.649  INFO 45721 --- [           main] he.camel.cli.connector.LocalCliConnector : Camel JBang CLI enabled\n2024-12-04 08:43:54.710  INFO 45721 --- [           main] e.camel.impl.engine.AbstractCamelContext : Apache Camel 4.9.0 (myCamel) is starting\n2024-12-04 08:43:54.982  INFO 45721 --- [           main] org.eclipse.jetty.server.Server          : jetty-12.0.15; built: 2024-11-05T19:44:57.623Z; git: 8281ae9740d4b4225e8166cc476bad237c70213a; jvm 17.0.11+9-LTS\n2024-12-04 08:43:55.001  INFO 45721 --- [           main] ipse.jetty.server.handler.ContextHandler : Started oeje10s.ServletContextHandler@10a064bd{ROOT,/,b=null,a=AVAILABLE,h=oeje10s.ServletHandler@2de7fe0e{STARTED}}\n2024-12-04 08:43:55.003  INFO 45721 --- [           main] jetty.ee10.servlet.ServletContextHandler : Started oeje10s.ServletContextHandler@10a064bd{ROOT,/,b=null,a=AVAILABLE,h=oeje10s.ServletHandler@2de7fe0e{STARTED}}\n2024-12-04 08:43:55.010  INFO 45721 --- [           main] g.eclipse.jetty.server.AbstractConnector : Started ServerConnector@26f11b40{HTTP/1.1, (http/1.1)}{0.0.0.0:8080}\n2024-12-04 08:43:55.011  INFO 45721 --- [           main] org.eclipse.jetty.server.Server          : Started oejs.Server@3883b5e9{STARTING}[12.0.15,sto=0] @15508ms\n2024-12-04 08:43:55.092  INFO 45721 --- [           main] e.camel.impl.engine.AbstractCamelContext : Routes startup (total:3 rest-dsl:2)\n2024-12-04 08:43:55.092  INFO 45721 --- [           main] e.camel.impl.engine.AbstractCamelContext :     Started route2 (direct://getUser)\n2024-12-04 08:43:55.092  INFO 45721 --- [           main] e.camel.impl.engine.AbstractCamelContext :     Started route1 (rest-api://api-docs)\n2024-12-04 08:43:55.092  INFO 45721 --- [           main] e.camel.impl.engine.AbstractCamelContext :     Started route3 (rest://get:/echo:/ping)\n2024-12-04 08:43:55.092  INFO 45721 --- [           main] e.camel.impl.engine.AbstractCamelContext : Apache Camel 4.9.0 (myCamel) started in 381ms (build:0ms init:0ms start:381ms boot:13s900ms)\n```\n\n----------------------------------------\n\nTITLE: Checking Camel K Runtime and Camel Versions\nDESCRIPTION: Commands to check the Camel K runtime version and the corresponding Camel version used in the Kubernetes cluster.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/11/camel-k-jbang/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kamel version -a -v | grep Runtime\nRuntime Version: 1.15.2\n\n$ kubectl get camelcatalog camel-catalog-1.15.2 -o yaml | grep camel\\.version\n      camel.version: 3.18.3\n```\n\n----------------------------------------\n\nTITLE: Creating Camel Route with Extraction Service\nDESCRIPTION: Route definition that uses the extraction service through bean binding. It processes incoming messages, extracts structured data, and then formats the output.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/07/data-extraction-first-experiment/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected RouteBuilder createRouteBuilder() {\n...\n  from(\"...\")\n    .bean(extractionService)\n    .bean(prettyPrintCustomPojo);\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Kamelet to Kafka Topic using Camel K CLI\nDESCRIPTION: Shows how to use the 'kamel bind' command to connect a Kamelet (earthquake-source) to a Strimzi KafkaTopic named 'mytopic'.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/04/camel-k-140-Whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkamel bind earthquake-source kafka.strimzi.io/v1beta1:KafkaTopic:mytopic\n```\n\n----------------------------------------\n\nTITLE: Defining Camel 3.0.0-RC2 Release Note YAML Frontmatter\nDESCRIPTION: YAML frontmatter that defines metadata for the Camel 3.0.0-RC2 release note page. It includes information about the release date, version, title, preview description, and compatibility with JDK versions 8 and 11.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.0.0-RC2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2019-10-06\ndraft: false\ntype: release-note\nversion: 3.0.0-RC2\ntitle: \"Release 3.0.0-RC2\"\npreview: \"Second release candidate for 3.0.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12345998\ncategory: camel\nkind: RC\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Kamel Promote Task for Environment Promotion\nDESCRIPTION: This task handles the promotion of a Camel-K integration from one environment to another using the kamel promote command. It requires the integration name, source namespace, and target namespace.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tekton.dev/v1beta1\nkind: Task\nmetadata:\n  name: kamel-promote\n  description: promote an Integration to an higher environment\nspec:\n  params:\n    - name: integration-name\n      description: the integration we want to promote\n    - name: namespace\n      description: the namespace source\n    - name: to\n      description: the namespace destination\n  workspaces:\n  - name: source\n  steps:\n  - name: promote\n    image: docker.io/apache/camel-k:1.10.0\n    script: |\n      kamel promote $(params.integration-name) -n $(params.namespace) --to $(params.to)\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Authentication Deployment in Kubernetes\nDESCRIPTION: Kubernetes deployment configuration for Karavan with public authentication, requiring no authentication setup.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/camel-karavan-3.18.3/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Deployment\n...\n        image: ghcr.io/apache/camel-karavan:3.18.3\n```\n\n----------------------------------------\n\nTITLE: Transforming route directly to target resource directory\nDESCRIPTION: Command sequence to transform OSGi Blueprint XML and output directly to the Spring Boot resources folder.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\ncamel transform route pom.xml --format=xml --output=code/src/main/resources/camel\ncd code\n```\n\n----------------------------------------\n\nTITLE: Testing Migrated REST Service\nDESCRIPTION: This shell command demonstrates how to test the migrated REST service using curl.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://0.0.0.0:8080/rest/user/123\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Boot Web Dependency in Maven POM\nDESCRIPTION: XML snippet showing how to add the Spring Boot web starter dependency to the project POM file for web support.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Camel K Kotlin Route with JBang\nDESCRIPTION: Demonstrates how to run a Camel K route written in Kotlin directly from GitHub using Camel JBang. This allows for local testing of Camel K integrations without requiring a Kubernetes cluster.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/02/camel315-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncamel run https://github.com/apache/camel-k/blob/main/examples/languages/routes.kts\n```\n\n----------------------------------------\n\nTITLE: Configuring REST in Camel XML\nDESCRIPTION: This XML snippet shows how to configure REST in Camel XML, setting up the context path, port, and other REST-related properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<restConfiguration bindingMode=\"json\"\n                   contextPath=\"rest\" port=\"8080\"\n                   apiContextPath=\"api-docs\"\n                   enableCORS=\"true\"\n                   inlineRoutes=\"false\">\n```\n\n----------------------------------------\n\nTITLE: Binding Kamelet to Log Endpoint using Camel K CLI\nDESCRIPTION: Illustrates using the 'kamel bind' command to connect a Kamelet (earthquake-source) to a Camel log endpoint for development purposes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/04/camel-k-140-Whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkamel bind earthquake-source log:info?showHeaders=true\n```\n\n----------------------------------------\n\nTITLE: Camel Kafka URL Property Configuration\nDESCRIPTION: Property notation for configuring Camel Kafka connector using the URL format\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/VSCode-LanguageSupport-0.0.30/index.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncamel.(source|sink).url\n```\n\n----------------------------------------\n\nTITLE: Defining Kamel Run Task for Deploying Camel-K Integrations\nDESCRIPTION: This task runs a Camel-K integration in a specified namespace using the Kamel CLI. It accepts a filename and namespace parameter, then returns the integration name as a result for use in later pipeline steps.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tekton.dev/v1beta1\nkind: Task\nmetadata:\n  name: kamel-run\n  description: Run an integration with Kamel CLI\nspec:\n  params:\n    - name: filename\n      description: the integration source we want to run\n    - name: namespace\n      description: the namespace where to run the integration\n  results:\n    - name: integration-name\n      description: The name of the integration\n  workspaces:\n  - name: source\n  steps:\n  - name: run\n    # The container provides the kamel binary we need\n    image: docker.io/apache/camel-k:1.10.0\n    script: |\n      cd $(workspaces.source.path)\n      # Run the integration and let's use the output to scrape the integration name\n      # We need to use the --wait option in order to wait until the Integration is running\n      kamel_output=$(kamel run $(params.filename) -n $(params.namespace) --wait)\n      echo $kamel_output | grep -oP 'Integration \".*?\" (updated|created)' | awk -F ' ' '{print $2}' | sed \"s/\\\"//g\" | tr -d '\\n' | tee $(results.integration-name.path)\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Route Breakpoint Example\nDESCRIPTION: Example showing where to set a breakpoint in a Camel route Java file. Located in the main source directory under the acme project package.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/08/camel-quarkus-remote-debug-to-openshift-from-vscode/index.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/acme/myproject/MyRoute.java\n```\n\n----------------------------------------\n\nTITLE: Configuring IntegrationPlatform for Maven Proxy\nDESCRIPTION: YAML configuration for setting up Maven proxy settings in IntegrationPlatform specification.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/06/camel-k-maven-proxy/index.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1\nkind: IntegrationPlatform\n...\nspec:\n  build:\n    maven:\n      settings:\n        configMapKeyRef:\n          key: settings.xml\n          name: my-maven-proxy\n```\n\n----------------------------------------\n\nTITLE: Running Migrated Camel Quarkus Project\nDESCRIPTION: This log snippet shows the output of running the migrated Camel Quarkus project, including startup information and route details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_19\n\nLANGUAGE: log\nCODE:\n```\n$ mvn package quarkus:run\n__  ____  __  _____   ___  __ ____  ______\n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n2024-12-04 11:09:03,974 INFO  [org.apa.cam.qua.cor.CamelBootstrapRecorder] (main) Apache Camel Quarkus 3.16.0 is starting\n2024-12-04 11:09:03,979 INFO  [org.apa.cam.mai.MainSupport] (main) Apache Camel (Main) 4.8.1 is starting\n2024-12-04 11:09:04,066 INFO  [org.apa.cam.mai.BaseMainSupport] (main) Auto-configuration summary\n2024-12-04 11:09:04,066 INFO  [org.apa.cam.mai.BaseMainSupport] (main)     [MicroProfilePropertiesSource] camel.main.routesIncludePattern = camel/camel.xml\n2024-12-04 11:09:04,066 INFO  [org.apa.cam.mai.BaseMainSupport] (main)     [MicroProfilePropertiesSource] camel.main.name = camel-example-openapi-osgi\n2024-12-04 11:09:04,158 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 4.8.1 (camel-example-openapi-osgi) is starting\n2024-12-04 11:09:04,463 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Routes startup (total:5 rest-dsl:4)\n2024-12-04 11:09:04,463 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main)     Started route2 (direct://getUser)\n2024-12-04 11:09:04,463 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main)     Started route1 (rest-api://api-docs)\n2024-12-04 11:09:04,464 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main)     Started route3 (rest://get:/user:/%7Bid%7D)\n2024-12-04 11:09:04,464 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main)     Started route4 (rest://put:/user)\n2024-12-04 11:09:04,464 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main)     Started route5 (rest://get:/user:/findAll)\n2024-12-04 11:09:04,465 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 4.8.1 (camel-example-openapi-osgi) started in 305ms (build:0ms init:0ms start:305ms)\n2024-12-04 11:09:04,567 INFO  [io.quarkus] (main) myproject 1.0 on JVM (powered by Quarkus 3.17.2) started in 0.989s. Listening on: http://0.0.0.0:8080\n2024-12-04 11:09:04,567 INFO  [io.quarkus] (main) Profile prod activated.\n2024-12-04 11:09:04,568 INFO  [io.quarkus] (main) Installed features: [camel-attachments, camel-bean, camel-core, camel-direct, camel-jackson, camel-microprofile-health, camel-openapi-java, camel-platform-http, camel-rest, camel-xml-io-dsl, cdi, smallrye-context-propagation, smallrye-health, vertx]\n```\n\n----------------------------------------\n\nTITLE: API Migration Reference - Java Package Change\nDESCRIPTION: Example showing the core API package migration from javax to jakarta namespace that will be required in Camel 4\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/camel4roadmap/index.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\njavax -> jakarta\n```\n\n----------------------------------------\n\nTITLE: Running Camel Examples from GitHub with JBang\nDESCRIPTION: Shows how to run Camel examples directly from GitHub using Camel JBang.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/02/camel315-whatsnew/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncamel run https://github.com/apache/camel-examples/tree/main/examples/jbang\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Page Title in YAML\nDESCRIPTION: This YAML snippet sets the title for the Blog page in the Apache Camel website. It uses the 'title' key to define the page title as 'Blog'.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Blog\"\n---\n```\n\n----------------------------------------\n\nTITLE: Running Camel K Integration from GitHub\nDESCRIPTION: Command to run a Camel K integration directly from a GitHub URL using the kamel CLI.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkamel run https://raw.githubusercontent.com/apache/camel-k/master/examples/Sample.java\n```\n\n----------------------------------------\n\nTITLE: Release Metadata Configuration in YAML\nDESCRIPTION: YAML front matter metadata defining the release note properties including version, date, JDK compatibility, and other release-specific details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.13.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2021-11-12\ndraft: false\ntype: release-note\nversion: 3.13.0\ntitle: \"Release 3.13.0\"\npreview: \"New minor release 3.13.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12350624\ncategory: camel\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Installing NVM and Node.js on Linux/Mac\nDESCRIPTION: Commands to install Node Version Manager (nvm) and Node.js v20 on Linux or Mac OS systems. This sets up the required Node.js environment for building the Camel website.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntouch ~/.bash_profile\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.39.7/install.sh | bash\nsource ~/.nvm/nvm.sh\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Quarkus 1.4.0 Release Notes\nDESCRIPTION: YAML frontmatter metadata block defining properties for the Camel Quarkus 1.4.0 release note page. Includes release version, date, type, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-1.4.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-1.4.0/\"\ndate: 2020-12-01\ntype: release-note\nversion: 1.4.0\ntitle: \"Camel Quarkus release 1.4.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 8\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Deploying with Camel K and Monitoring\nDESCRIPTION: Commands to deploy the containerized application using Camel K, monitor its status, and observe how it scales to zero with Knative when there's no traffic.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/04/sourceless-ck-springboot/index.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ kamel run --image 10.103.186.147/default/csb\n...\n[1] 2024-04-02T11:00:14.950Z  INFO 7 --- [           main] org.acme.mycsb.CamelApplication          : Started CamelApplication in 3.239 seconds (process running for 3.7)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get it -w\nNAME   PHASE     [...] KIT       REPLICAS\ncsb    Running   [...] kit-csb   1\ncsb    Running   [...] kit-csb   0\n```\n\n----------------------------------------\n\nTITLE: Running Camel Tests with Route Dump and Coverage\nDESCRIPTION: Demonstrates how to run Camel tests with route dump and coverage options enabled. This allows for inspection of routes loaded during tests, output as XML or YAML files.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel410-whatsnew/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean test -DCamelTestRouteDump=yaml -DCamelTestRouteCoverage=true\n```\n\n----------------------------------------\n\nTITLE: Running Camel JBang with External Configuration\nDESCRIPTION: Shows how to run Camel JBang with an external application.properties file for configuration. This is the recommended approach, replacing the deprecated modeline method.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel410-whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ camel run foo.camel.yaml application.properties\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel 4.8.2 Release Notes\nDESCRIPTION: YAML configuration block defining metadata for the Camel 4.8.2 release notes page, including version information, release type, JDK compatibility, and EOL date.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.8.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2024-12-05\neol: 2025-09-14\ndraft: false\ntype: release-note\nversion: 4.8.2\ntitle: \"Release 4.8.2\"\npreview: \"New LTS release 4.8.2\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12355182\ncategory: camel\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Exporting project to Quarkus runtime\nDESCRIPTION: Command to export a Camel project to Quarkus format with specified group, artifact, and version coordinates.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncamel export pom.xml --gav=com.mycompany:myproject:1.0 --runtime=quarkus --dir=code\n```\n\n----------------------------------------\n\nTITLE: Running Camel K Integration with Simplified Command\nDESCRIPTION: Example of running a Camel K integration using the simplified command that reads options from the file.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n// simply this, additional args are read from the file\nkamel run Handler.java\n```\n\n----------------------------------------\n\nTITLE: Lambda Test Payload\nDESCRIPTION: Sample JSON payload for testing the deployed Lambda function\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/08/DeployingCamelRouteInAWSLambda/index.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n \"name\": \"Ravishankar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Kafka Connector 0.8.0 Release Note\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel Kafka Connector 0.8.0 release note. It specifies the URL, release date, version, title, and other relevant information for the release announcement.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-0.8.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-0.8.0/\"\ndate: 2021-02-25\ntype: release-note\nversion: \"0.8.0\"\ntitle: \"Camel Kafka Connector release 0.8.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Release Metadata Configuration in YAML\nDESCRIPTION: YAML frontmatter defining the metadata for Apache Camel 3.7.4 release including release date, end-of-life date, version details, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.7.4.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2021-05-03\neol: 2022-01-01\ndraft: false\ntype: release-note\nversion: 3.7.4\ntitle: \"Release 3.7.4\"\npreview: \"New patch release 3.7.4\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12349972\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Deploying Inventory Integration without Tracing in Apache Camel K\nDESCRIPTION: Command to deploy or update the Inventory Service integration without tracing capabilities. This uses the Camel Jackson dependency for JSON processing.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkamel run InventoryService.java --name inventory \\\n   -d camel-jackson\n```\n\n----------------------------------------\n\nTITLE: Running Camel JBang with All Files in Current Directory\nDESCRIPTION: Demonstrates how to run Camel JBang including all files from the current directory using the wildcard (*) notation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel410-whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ camel run *\n```\n\n----------------------------------------\n\nTITLE: Binding Kamelet to Knative Channel using Camel K CLI\nDESCRIPTION: Demonstrates how to use the new 'kamel bind' command to connect a Kamelet (earthquake-source) to a Knative channel named 'earthquakes'.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/04/camel-k-140-Whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkamel bind earthquake-source channel:earthquakes\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Apache Camel 4.4.3 Release Notes\nDESCRIPTION: This YAML frontmatter block defines metadata for the Apache Camel 4.4.3 release notes. It specifies the release date, end-of-life date, version number, title, preview text, and other properties relevant to the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.4.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2024-06-27\neol: 2025-02-17\ndraft: false\ntype: release-note\nversion: 4.4.3\ntitle: \"Release 4.4.3\"\npreview: \"New LTS release 4.4.3\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12354613\ncategory: camel\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing in Camel K\nDESCRIPTION: Command to enable both Prometheus monitoring and OpenTracing with Jaeger in a Camel K integration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkamel run Routes.java -t prometheus.enabled=true -t tracing.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Kafka Connector Properties\nDESCRIPTION: Example showing property configuration format for Camel Kafka Connector with camel.source/sink.endpoint/path notation\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/VSCode-LanguageSupport-0.0.30/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncamel.(source|sink).(endpoint|path).*\n```\n\n----------------------------------------\n\nTITLE: Exporting project to Spring Boot runtime\nDESCRIPTION: Command to export a Camel project to Spring Boot format with specified group, artifact, and version coordinates.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncamel export pom.xml --gav=com.mycompany:myproject:1.0 --runtime=spring-boot --dir=code\n```\n\n----------------------------------------\n\nTITLE: Local Webhook Testing Command\nDESCRIPTION: HTTP command to simulate a GitHub push event for local testing.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nhttp post http://192.168.49.2:32698/my-cd-pipeline X-GitHub-Event:push json=test\n```\n\n----------------------------------------\n\nTITLE: Applying Tekton Triggers Configuration\nDESCRIPTION: Command to apply the combined EventListener and TriggerTemplate configurations.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f cd/cd-triggers.yaml -n development\n```\n\n----------------------------------------\n\nTITLE: Exposing Runtime Info with Camel Micrometer Gauge\nDESCRIPTION: Example of the new Gauge in the camel-micrometer component that exposes information about the runtime running the Camel application, including context name, runtime provider, runtime version, and Camel version.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel411-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# TYPE app_info gauge\napp_info{camel_context=\"camel-1\",camel_runtime_provider=\"Spring-Boot\",camel_runtime_version=\"3.4.3\",camel_version=\"4.10.2\"} 1\n```\n\n----------------------------------------\n\nTITLE: Listening to Knative Events in Groovy\nDESCRIPTION: A Camel K integration written in Groovy that listens for Knative events and forwards them to an HTTP endpoint.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nfrom('knative:event/device-event')\n  .to('http://myhost/webhook/random-id')\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel 4.1.0 Release Notes\nDESCRIPTION: YAML frontmatter metadata block defining key properties of the release notes page including version, date, type, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.1.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-10-11\ndraft: false\ntype: release-note\nversion: 4.1.0\ntitle: \"Release 4.1.0\"\npreview: \"New release 4.1.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12353277\ncategory: camel\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Kustomize Patch\nDESCRIPTION: Command to add the settings file as a patch in Kustomize\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-k-gitops/index.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkustomize edit add patch --path settings.yaml\n```\n\n----------------------------------------\n\nTITLE: Transforming Camel Routes to XML Format\nDESCRIPTION: This command transforms Camel routes to XML format and outputs them to a specified directory.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncamel transform route pom.xml --format=xml --output=code/src/main/resources/camel\n```\n\n----------------------------------------\n\nTITLE: Defining PipelineRun for Triggering the CI/CD Pipeline\nDESCRIPTION: This PipelineRun configuration triggers the execution of the pipeline with specific parameters, service accounts, and workspace configurations. It points to a GitHub repository containing the integration code and tests.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: pipeline-cicd-run\nspec:\n  pipelineRef:\n    name: pipeline-cicd\n  taskRunSpecs:\n    - pipelineTaskName: kamel-run\n      taskServiceAccountName: camel-k-pipeline-sa\n    - pipelineTaskName: kamel-promote\n      taskServiceAccountName: camel-k-pipeline-sa\n  podTemplate:\n    securityContext:\n      fsGroup: 65532\n  workspaces:\n  - name: shared-data\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n        - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n  - name: git-credentials\n    secret:\n      secretName: git-credentials\n  params:\n  - name: repo-url\n    value: https://github.com/squakez/camel-k-rest-cicd.git\n  - name: repo-branch\n    value: main\n```\n\n----------------------------------------\n\nTITLE: Downloading Camel DAP Server JAR\nDESCRIPTION: Shell command to download the Camel Debug Adapter Protocol server JAR file from Maven Central repository.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/vimdap/index.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd /home\ncurl -LO https://repo1.maven.org/maven2/com/github/camel-tooling/camel-dap-server/0.4.0/camel-dap-server-0.4.0.jar\n```\n\n----------------------------------------\n\nTITLE: Stopping a Camel Integration Using CLI\nDESCRIPTION: Shows how to stop a running Camel integration by name or process ID using the Camel CLI.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel319-whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncamel stop dude\n```\n\n----------------------------------------\n\nTITLE: Starting Hawtio v3 with Camel CLI\nDESCRIPTION: Command to launch Hawtio v3 using the Camel CLI with a specific version parameter. This allows users to specify version 3.0.1 instead of the default v2 console.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/01/hawtio-v3/index.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncamel hawtio --version=3.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.22.3 Release Notes\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel 3.22.3 release notes. It specifies the release date, end-of-life date, version number, title, preview text, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.22.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2024-12-20\neol: 2024-12-31\ndraft: false\ntype: release-note\nversion: 3.22.3\ntitle: \"Release 3.22.3\"\npreview: \"New LTS release 3.22.3\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12354741\ncategory: camel\nkind: lts\njdk: [11, 17]\n---\n```\n\n----------------------------------------\n\nTITLE: Creating ArgoCD Application\nDESCRIPTION: ArgoCD CLI command to create a new application pointing to the Git repository and production overlay\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-k-gitops/index.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nargocd app create my-ck-it-prod --repo https://github.com/squakez/camelk-gitops-example.git --path overlays/prod --dest-server https://kubernetes.default.svc --dest-namespace prod\n```\n\n----------------------------------------\n\nTITLE: Running Camel JBang with Spring Boot Runtime\nDESCRIPTION: Demonstrates how to run a Camel YAML file using Camel JBang with Spring Boot runtime.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/05/camel46-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ camel run foo.camel.yaml --runtime=spring-boot\n```\n\n----------------------------------------\n\nTITLE: Installing Vimspector Plugin in Vim\nDESCRIPTION: Add the Vimspector plugin to Vim's configuration file (.vimrc) using vim-plug plugin manager.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/vimdap/index.md#2025-04-08_snippet_0\n\nLANGUAGE: viml\nCODE:\n```\nPlug 'puremourning/vimspector'\n```\n\n----------------------------------------\n\nTITLE: Running Camel in Developer Mode with Live Reloading\nDESCRIPTION: Command to run Camel in developer mode with live reloading enabled, which automatically applies source changes when files are saved.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/05/camel317-whatsnew/index.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncamel run * --dev\n```\n\n----------------------------------------\n\nTITLE: Installing YAKS on a Kubernetes Cluster\nDESCRIPTION: Command to install YAKS on a Kubernetes cluster using the yaks-client binary. This prepares the cluster by installing custom resource definitions, setting up role permissions, and creating the YAKS operator in a global namespace.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/camel-k-yaks/index.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ yaks install\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.19.0 Release Notes\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel 3.19.0 release notes. It specifies the release date, version, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.19.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-10-03\ndraft: false\ntype: release-note\nversion: 3.19.0\ntitle: \"Release 3.19.0\"\npreview: \"New release 3.19.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12351873\ncategory: camel\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: Running Camel JBang with existing Maven project for migration assessment\nDESCRIPTION: Command to run an existing Camel Karaf example project using camel-jbang to assess compatibility with Camel 4.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/camel-example-sql-blueprint\ncamel run pom.xml\n```\n\n----------------------------------------\n\nTITLE: Testing Order Integration with Tracing Trait via HTTP Request\nDESCRIPTION: HTTP POST request using curl to test the Order service integration using the deprecated tracing trait. It places an order with ID 21 by sending JSON data and receives a response from the inventory service.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://order-tracing.local/place -d '{\"orderId\":21, \"itemId\":5, \"quantity\":1, \"orderItemName\":\"strange product\", \"price\":10}' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Building and Running Camel Application\nDESCRIPTION: Commands to build and run the Camel application using Maven and Java.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/03/camel-observability/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd app\nmvn clean package\njava -jar target/PlatformHttpServer-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Camel Route Builder Implementation\nDESCRIPTION: Java implementation of a Camel route builder with timer component and bean method calls.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Emacsdap/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.camel.example;\n\nimport org.apache.camel.builder.RouteBuilder;\n\npublic class MyRouteBuilder extends RouteBuilder {\n\n    @Override\n    public void configure() throws Exception {\n        from(\"timer:foo\").routeId(\"foo\")\n            .bean(\"myBean\", \"hello\")\n            .log(\"${body}\")\n            .bean(\"myBean\", \"bye\")\n            .log(\"${body}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JBang Features via Command Line\nDESCRIPTION: Shows how to enable various Camel JBang features such as Java Flight Recorder, tracing, health checks, and the developer console using command-line options.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/02/camel315-whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--jfr\n--trace\n--health\n--console\n```\n\n----------------------------------------\n\nTITLE: Building a Native Executable with Quarkus Native Profile\nDESCRIPTION: This shell command demonstrates how to build a native executable of the Camel Quarkus application using the native profile. It requires GraalVM with the native-image command installed and the GRAALVM_HOME environment variable set.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/07/command-line-utility-with-camel-quarkus/index.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ export GRAALVM_HOME=...\n$ mvn clean package -Pnative\n...\n$ ls -lh target\n...\n-rwxr-xr-x. 1 ppalaga ppalaga  33M Jul 15 11:48 command-mode-runner\n...\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.9.0 Release Notes\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel 3.9.0 release notes. It specifies the release date, version, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.9.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2021-03-28\ndraft: false\ntype: release-note\nversion: 3.9.0\ntitle: \"Release 3.9.0\"\npreview: \"New minor release 3.9.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12349612\ncategory: camel\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAKS BDD Test Scenario Definition\nDESCRIPTION: Gherkin-based test scenario that verifies the Camel K fruit service by setting up infrastructure, sending requests, and validating AWS S3 storage outcomes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/camel-k-yaks/index.md#2025-04-08_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Camel K Fruit Store\n\n  Background:\n    Given URL: http://localhost:8080\n\n  Scenario: Create infrastructure\n    # Start AWS S3 container\n    Given Enable service S3\n    Given start LocalStack container\n\n    # Create Camel K integration\n    Given Camel K integration property file aws-s3-credentials.properties\n    When load Camel K integration fruit-service.groovy\n    Then Camel K integration fruit-service should print Started route1 (platform-http:///fruits)\n\n  Scenario: Verify fruit service\n    # Invoke Camel K service\n    Given HTTP request body: yaks:readFile('pineapple.json')\n    And HTTP request header Content-Type=\"application/json\"\n    When send POST /fruits\n    Then receive HTTP 200 OK\n\n    # Verify uploaded S3 file\n    Given New global Camel context\n    Given load to Camel registry amazonS3Client.groovy\n    Given Camel exchange message header CamelAwsS3Key=\"fruit.json\"\n    Given receive Camel exchange from(\"aws2-s3://medium-sugar?amazonS3Client=#amazonS3Client&deleteAfterRead=true\") with body: yaks:readFile('pineapple.json')\n```\n\n----------------------------------------\n\nTITLE: Deploying Order Integration with Telemetry Trait in Apache Camel K\nDESCRIPTION: Command to update the Order Service integration using the new telemetry trait. It enables telemetry with 'on' sampling, configures a service name, and sets up ingress with a specific host.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkamel run OrderService.java --name order \\\n   -d camel-jackson \\\n   -t telemetry.enabled=true \\\n   -t telemetry.sampler=on \\\n   -t telemetry.service-name=order-external-telemetry \\\n   -t ingress.enabled=true \\\n   -t ingress.host=order.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Levels in Quarkus Style\nDESCRIPTION: Shows how to configure logging levels for specific packages using Quarkus style in application.properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/05/camel46-whatsnew/index.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nquarkus.log.category.\"org.apache.kafka\".level = DEBUG\nquarkus.log.category.\"com.foo.something\".level = TRACE\n```\n\n----------------------------------------\n\nTITLE: Resource Configuration YAML\nDESCRIPTION: YAML configuration for setting CPU and memory limits and requests for the operator pod.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/Optimizing-Camel-K-Integration-Build-Time/index.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"4\"\n    memory: 3Gi\n  requests:\n    cpu: 500m\n    memory: 512Mi\n```\n\n----------------------------------------\n\nTITLE: Starting Camel Quarkus Application in JVM Mode (1.7.0+)\nDESCRIPTION: Updated command to start a Camel Quarkus application in JVM mode for version 1.7.0 and later. This uses the new Fast JAR packaging format.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/02/camel-quarkus-release-1.7.0/index.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ java -jar target/quarkus-app/quarkus-run.jar\n```\n\n----------------------------------------\n\nTITLE: Checking MicroProfile Metrics Endpoint\nDESCRIPTION: Command to verify the exposed metrics endpoint of a Camel K application.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/camel-k-monitoring-ops/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i http://192.168.49.2:31501/q/metrics\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel 3.7.1 Release Notes\nDESCRIPTION: YAML frontmatter metadata configuration block defining release details including version number, release date, EOL date, and JDK compatibility for Camel 3.7.1 LTS release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.7.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2021-01-21\neol: 2022-01-01\ndraft: false\ntype: release-note\nversion: 3.7.1\ntitle: \"Release 3.7.1\"\npreview: \"New patch release 3.7.1\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12349485\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Hashicorp Vault Environment Variables\nDESCRIPTION: Environment variable configuration settings required for Hashicorp Vault integration in Camel.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/secrets-properties-functions-part-2/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport $CAMEL_VAULT_HASHICORP_TOKEN=token\nexport $CAMEL_VAULT_HASHICORP_ENGINE=engine\nexport $CAMEL_VAULT_HASHICORP_HOST=host\nexport $CAMEL_VAULT_HASHICORP_PORT=port\nexport $CAMEL_VAULT_HASHICORP_SCHEME=http/https\n```\n\n----------------------------------------\n\nTITLE: Verifying Jaeger Operator Installation\nDESCRIPTION: Command to check if the Jaeger operator deployment is available.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/03/camel-k-telemetry/index.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get deployment jaeger-operator -n observability\\n\\nNAME              DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\\njaeger-operator   1         1         1            1           48s\n```\n\n----------------------------------------\n\nTITLE: YAML Release Configuration for Camel 3.22.1\nDESCRIPTION: YAML frontmatter configuration specifying the release details for Apache Camel version 3.22.1, including release date, EOL date, version information, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.22.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2024-01-30\neol: 2024-12-31\ndraft: false\ntype: release-note\nversion: 3.22.1\ntitle: \"Release 3.22.1\"\npreview: \"New LTS release 3.22.1\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12354118\ncategory: camel\nkind: lts\njdk: [11, 17]\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Camel-K with Resource Constraints\nDESCRIPTION: Command to install Camel-K operator with specific CPU and memory resource constraints.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/Optimizing-Camel-K-Integration-Build-Time/index.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkamel install --operator-resources requests.cpu=256m --operator-resources limits.cpu=500m --operator-resources limits.memory=512Mi ...\n```\n\n----------------------------------------\n\nTITLE: Setting up Kafka and KafkaConnect for CDC\nDESCRIPTION: Shell commands to start a Kafka cluster, install required connectors, and start a KafkaConnect cluster in distributed mode for the CDC pipeline.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/05/CdcWithCamelAndDebezium/index.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./run.sh --kafka\n# status check\nps -ef | grep \"[Q]uorumPeerMain\" | wc -l\nps -ef | grep \"[K]afka\" | wc -l\n\n./run.sh --connect\n# status check\nps -ef | grep \"[C]onnectDistributed\" | wc -l\ntail -n100 /tmp/kafka/logs/connect.log\n/tmp/kafka/bin/kafka-topics.sh --zookeeper localhost:2180 --list\ncurl localhost:7070/connector-plugins | jq\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Setup for Monitoring Services\nDESCRIPTION: Commands to set up port forwarding for Prometheus, Grafana, and AlertManager services in a Kubernetes cluster.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/07/camel-k-monitoring-ops/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward svc/prometheus-k8s 9090\nkubectl --namespace monitoring port-forward svc/grafana 3000\nkubectl --namespace monitoring port-forward svc/alertmanager-main 9093\n```\n\n----------------------------------------\n\nTITLE: Release 3.0.1 Metadata Configuration in YAML Frontmatter\nDESCRIPTION: YAML frontmatter that defines the metadata for the Camel 3.0.1 release notes. Includes configuration for date, draft status, release type, version number, title, preview text, and compatibility information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.0.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2020-01-16\ndraft: false \ntype: release-note\nversion: 3.0.1\ntitle: \"Release 3.0.1\"\npreview: \"Minor update of the 3.0.x branch\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12346544\ncategory: camel\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Deleting Minikube Cluster\nDESCRIPTION: Command to delete the minikube cluster and clean up the environment.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/Optimizing-Camel-K-Integration-Build-Time/index.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nminikube delete\n```\n\n----------------------------------------\n\nTITLE: Configuring Startup Summary Level in Camel 3.8\nDESCRIPTION: Configuration options for customizing Camel's startup logging level. Options include 'oneline', 'off', and 'classic' modes to control logging verbosity.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/02/Camel38-Whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nStartupSummaryLevel.oneline  // For minimal one-line logging\nStartupSummaryLevel.off      // To disable startup logging\nStartupSummaryLevel.classic  // For traditional verbose logging\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Kafka Connector Class\nDESCRIPTION: Property configuration for specifying the Kafka connector class using the connector.class property\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/VSCode-LanguageSupport-0.0.30/index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nconnector.class\n```\n\n----------------------------------------\n\nTITLE: Configuring CDC Pipeline with KafkaConnect\nDESCRIPTION: Shell commands to configure the CDC pipeline using KafkaConnect, including setting up the Debezium source task and JMS sink tasks.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/05/CdcWithCamelAndDebezium/index.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# debezium source task (topic name == serverName.schemaName.tableName)\ncurl -sX POST -H \"Content-Type: application/json\" localhost:7070/connectors -d @connect-cdc/src/main/connectors/dbz-source.json\n\n# jms sink tasks (powered by sjms2 component)\ncurl -sX POST -H \"Content-Type: application/json\" localhost:7070/connectors -d @connect-cdc/src/main/connectors/json-jms-sink.json\ncurl -sX POST -H \"Content-Type: application/json\" localhost:7070/connectors -d @connect-cdc/src/main/connectors/xml-jms-sink.json\n\n# status check\ncurl -s localhost:7070/connectors | jq\ncurl -s localhost:7070/connectors/dbz-source/status | jq\ncurl -s localhost:7070/connectors/json-jms-sink/status | jq\ncurl -s localhost:7070/connectors/xml-jms-sink/status | jq\n```\n\n----------------------------------------\n\nTITLE: Building Native Package\nDESCRIPTION: Commands for building the application as a native executable, including options for docker-based builds\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/08/DeployingCamelRouteInAWSLambda/index.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw package -Pnative\n```\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw package -Pnative -Dquarkus.native.container-build=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Note Metadata in YAML\nDESCRIPTION: YAML frontmatter configuration block defining metadata for Camel 2.25.0 release note page. Specifies release details like version, dates, type, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.25.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2020-01-23\neol: 2021-12-31\ndraft: false \ntype: release-note\nversion: 2.25.0\ntitle: \"Release 2.25.0\"\npreview: \"New minor release 2.25.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12345517\ncategory: camel\nkind: legacy\njdk: [8]\n---\n```\n\n----------------------------------------\n\nTITLE: Fruit Model JSON Schema Definition\nDESCRIPTION: Sample JSON structure representing a fruit object with properties like id, name, category, nutrition, status, price and tags.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/camel-k-yaks/index.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1000,\n  \"name\": \"Pineapple\",\n  \"category\":{\n    \"id\": \"1\",\n    \"name\":\"tropical\"\n  },\n  \"nutrition\":{\n    \"calories\": 50,\n    \"sugar\": 9\n  },\n  \"status\": \"AVAILABLE\",\n  \"price\": 1.59,\n  \"tags\": [\"sweet\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Templated Routes in XML DSL - Apache Camel\nDESCRIPTION: Demonstrates creating a route from a template using standard XML DSL. Uses templatedRoutes namespace to define a route with parameters.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/03/camel316-whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<templatedRoutes xmlns=\"http://camel.apache.org/schema/spring\">\n    <templatedRoute routeTemplateRef=\"someTemplate\">\n        <parameter name=\"message\" value=\"Hello Camel templated route!\"/>\n    </templatedRoute>\n</templatedRoutes>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Databases for Development and Production\nDESCRIPTION: Kubectl commands to apply database configuration and secrets for both development and production environments.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f db/conf-dev.yaml -n development\nkubectl create secret generic my-datasource --from-file db/datasource-dev.properties -n development\n\nkubectl apply -f db/conf-prod.yaml -n production\nkubectl create secret generic my-datasource --from-file db/datasource-prod.properties -n production\n```\n\n----------------------------------------\n\nTITLE: Variable-based Camel Route Definition in Java\nDESCRIPTION: Example showing how route URIs can be stored in variables, which prevents pattern-based rules from detecting component usage in static analysis.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/09/windup/index.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nString route_uri = \"twitter-streaming://filter?type=event&twitterStream=#twitterStream&keywords=#cameltest\";\nfrom(route_uri)\n    .transform(body().convertToString())\n    .to(\"direct:result\");\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Blog Post\nDESCRIPTION: YAML frontmatter defining metadata for the blog post about Camel-AWS-S3 streaming upload feature. It includes title, date, authors, categories, preview, and summary.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/04/s3-streaming-upload-3.10.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Camel-AWS-S3 - New Streaming upload feature\"\ndate: 2021-04-20\nauthors: [\"oscerd\"]\ncategories: [\"Features\", \"Camel\"]\npreview: \"AWS S3 Streaming upload\"\nsummary: \"The S3 Streaming upload feature will arrive on Camel 3.10.0\"\n---\n```\n\n----------------------------------------\n\nTITLE: Running Camel KServe Server Liveness Check\nDESCRIPTION: Console command to execute the server liveness check using Camel CLI, with the expected output showing the server's live status.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncamel run server_live.java\n```\n\nLANGUAGE: console\nCODE:\n```\nLive: true\n```\n\n----------------------------------------\n\nTITLE: Defining Kamelets 4.0.0-RC1 Release Note Metadata in YAML\nDESCRIPTION: This YAML frontmatter defines metadata for the Kamelets 4.0.0-RC1 release note. It specifies the URL, release date, version, title, and JDK requirements for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.0.0-RC1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.0.0-RC1/\"\ndate: 2023-07-10\ntype: release-note\nversion: \"4.0.0-RC1\"\ntitle: \"Kamelets 4.0.0-RC1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Camel Route Dumping with Configuration Property\nDESCRIPTION: Configuration property to enable dumping all Camel routes in XML format during startup for diagnostic purposes, which is useful when working with multiple DSLs.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/Camel310-Whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncamel.main.dump-routes = true\n```\n\n----------------------------------------\n\nTITLE: Running Camel KServe Model Readiness Check\nDESCRIPTION: Console command to execute the model readiness check using Camel CLI, with the expected output showing the model's ready status.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ncamel run model_ready.java\n```\n\nLANGUAGE: console\nCODE:\n```\nReady: true\n```\n\n----------------------------------------\n\nTITLE: Downloading Camel Debug Adapter JAR\nDESCRIPTION: Shell commands to download the Camel Debug Adapter server JAR file from Maven Central repository.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/Sublimedap/index.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd /home\ncurl -LO https://repo1.maven.org/maven2/com/github/camel-tooling/camel-dap-server/0.5.0/camel-dap-server-0.5.0.jar\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Code Style Check with Maven\nDESCRIPTION: This shell command runs unit tests and code style checks using Maven.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ mvn clean install -Psourcecheck\n```\n\n----------------------------------------\n\nTITLE: Escaping Property Expressions in Camel Quarkus Properties\nDESCRIPTION: Demonstrates how to escape the ${...} syntax in property values using double dollar signs ($$) to prevent interpretation as environment variables.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\ndate-expression = $${date:now}\n```\n\n----------------------------------------\n\nTITLE: Running the Speech to Text Example with Camel JBang\nDESCRIPTION: Commands to run the speech recognition example using Camel JBang. This snippet shows how to execute the Java code and process sample wave files to demonstrate the speech recognition and sentiment analysis capabilities.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/camel-ai-examples/index.md#2025-04-08_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncamel run --camel-version=4.8.0-SNAPSHOT speech_to_text.java\n```\n\n----------------------------------------\n\nTITLE: Defining Kamelets 3.20.1 Release Page Frontmatter in YAML\nDESCRIPTION: YAML frontmatter that configures the release page for Kamelets version 3.20.1. It specifies the URL path, release date (January 13, 2023), version number, title, category, and JDK compatibility requirements (JDK 11).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-3.20.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-3.20.1/\"\ndate: 2023-01-13\ntype: release-note\nversion: \"3.20.1\"\ntitle: \"Kamelets 3.20.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Kafka Topic using Kafkacat\nDESCRIPTION: Bash command to consume messages from the s3.source.topic using Kafkacat. This command demonstrates how to verify the idempotency by checking the messages in the Kafka topic.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/12/CKC-idempotency-070/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkafkacat -b localhost:9092 -t s3.source.topic\n```\n\n----------------------------------------\n\nTITLE: Setting ArgoCD Namespace\nDESCRIPTION: kubectl command to set the current namespace to ArgoCD\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-k-gitops/index.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config set-context --current --namespace=argocd\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Server with SSL in Camel K\nDESCRIPTION: Command to run a Camel K integration with SSL configuration using certificates from Kubernetes secrets and Quarkus HTTPS properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/07/camel-k-properties-refactoring/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkamel run PlatformHttpsServer.java -p quarkus.http.ssl.certificate.file=/etc/ssl/my-self-signed-ssl/server.crt \\\n                                   -p quarkus.http.ssl.certificate.key-file=/etc/ssl/my-self-signed-ssl/server.key \\\n                                   --resource secret:my-self-signed-ssl@/etc/ssl/my-self-signed-ssl \\\n                                   -t container.port=8443 --dev\n```\n\n----------------------------------------\n\nTITLE: Running Camel KServe Server Metadata Retrieval\nDESCRIPTION: Console command to execute the server metadata retrieval using Camel CLI, with sample output showing the server's capabilities and extensions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/04/camel-kserve/index.md#2025-04-08_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncamel run server_metadata.java\n```\n\nLANGUAGE: console\nCODE:\n```\nMetadata:\nname: \"triton\"\nversion: \"2.55.0\"\nextensions: \"classification\"\nextensions: \"sequence\"\nextensions: \"model_repository\"\nextensions: \"model_repository(unload_dependents)\"\nextensions: \"schedule_policy\"\nextensions: \"model_configuration\"\nextensions: \"system_shared_memory\"\nextensions: \"cuda_shared_memory\"\nextensions: \"binary_tensor_data\"\nextensions: \"parameters\"\nextensions: \"statistics\"\nextensions: \"trace\"\nextensions: \"logging\"\n```\n\n----------------------------------------\n\nTITLE: Combining Property Expressions with Environment Variables\nDESCRIPTION: Shows advanced usage combining environment variables with property expressions, allowing for complex configuration resolution scenarios.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\ndefault-value = a-default-value-resolved-via-a-property-expression\nenvvar-or-default-via-property-expression = ${UNEXISTING_ENV_VAR:${default-value}}\n```\n\n----------------------------------------\n\nTITLE: Running Windup CLI with Camel 2 to 3 Migration Parameters\nDESCRIPTION: Command to run the Windup CLI tool (mta-cli) against a Camel 2 project to generate a migration report targeting Camel 3. The command specifies the input project path and sets appropriate source and target flags.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/09/windup/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/mta-cli --input PATH_TO_CAMEL_PROJET --sourceMode --source camel:2 --target camel:3\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Kamelets 0.4.0 Release Note\nDESCRIPTION: YAML frontmatter metadata block defining properties for the Kamelets 0.4.0 release note page, including URL path, publication date, version number, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.4.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.4.0/\"\ndate: 2021-09-01\ntype: release-note\nversion: \"0.4.0\"\ntitle: \"Kamelets 0.4.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Converter Properties\nDESCRIPTION: Configuration example for Kafka key and value converters in Camel Kafka Connector.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/VSCode-LanguageSupport-0.0.28/index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nkey.converter=org.apache.kafka.connect.converters.KeyConverter\nvalue.converter=org.apache.kafka.connect.converters.ValueConverter\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Maven\nDESCRIPTION: This shell command runs integration tests using Maven with a specific profile.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ mvn clean test -Pint\n```\n\n----------------------------------------\n\nTITLE: Installing Camel CLI via JBang\nDESCRIPTION: Console commands to install and verify the Camel CLI installation using JBang.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\njbang app install camel@apache/camel\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Simple Expression in Camel Route\nDESCRIPTION: Shows how a Camel Simple expression that references a property with syntax similar to environment variables can result in unexpected null values.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nfrom(...).setBody(simple(\"{{date-expression}}\"))\n```\n\n----------------------------------------\n\nTITLE: Calculating Git Commit Statistics for Apache Camel in 2022\nDESCRIPTION: These bash commands calculate the total number of commits and unique committers for the Apache Camel project in 2022. The first command sums up all commit counts, while the second counts unique committer names.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/2022-Numbers/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#1 git shortlog -ns --since 2022-01-01 --until 2023-01-01 | cut -c1-7 | awk '{ SUM += $1} END { print SUM }'\n#2 git shortlog --since 2022-01-01 --until 2023-01-01 -ns | wc -l\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K 2.0.1 Release Metadata in YAML\nDESCRIPTION: This YAML front matter defines metadata for the Camel-K 2.0.1 release note page. It specifies the URL, release date, version, title, and other relevant information for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-2.0.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-2.0.1/\"\ndate: 2023-09-04\ntype: release-note\nversion: \"2.0.1\"\ntitle: \"Camel-K 2.0.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 46\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for GitOps\nDESCRIPTION: Creates the basic directory structure for a GitOps-based Camel K project with base configuration and environment-specific overlays.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/07/camel-k-gitops/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p my-ck-gitops\nmkdir -p my-ck-gitops/base\nmkdir -p my-ck-gitops/overlays/dev\nmkdir -p my-ck-gitops/overlays/prod\ncd my-ck-gitops\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Kafka Connector Properties\nDESCRIPTION: Example of Camel Kafka Connector property configuration syntax, demonstrating connector class specification and property values.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/VSCode-LanguageSupport-0.0.28/index.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnector.class=org.apache.camel.kafkaconnector.ClassName\ncamel.sink.property=value\ncamel.source.property=value\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Camel Kamelets 4.9.0 Release Note\nDESCRIPTION: YAML frontmatter metadata defining the properties of the Camel Kamelets 4.9.0 release note page, including URL path, release date, version number, title and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.9.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.9.0/\"\ndate: 2024-12-06\ntype: release-note\nversion: \"4.9.0\"\ntitle: \"Kamelets 4.9.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Camel CLI via Console Commands\nDESCRIPTION: Commands to install and verify Camel CLI installation using JBang\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\njbang app install camel@apache/camel\n```\n\n----------------------------------------\n\nTITLE: Kamelet Usage Example\nDESCRIPTION: Reference to example implementation of Kamelets in vanilla Camel, demonstrating integration of Kamelet component from Camel K.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/02/Camel38-Whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Example path from documentation\n// github.com/apache/camel-examples/tree/master/examples/kamelet\n```\n\n----------------------------------------\n\nTITLE: Installing Pipeline Definition\nDESCRIPTION: This command applies the pipeline definition to the Kubernetes cluster in the development namespace, which includes all the tasks defined earlier.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ci/pipeline.yaml -n development\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K 2.0.0 Release Note\nDESCRIPTION: YAML frontmatter metadata for the Camel-K version 2.0.0 release note page. It contains information such as URL path, release date, version, title, and JDK compatibility requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-2.0.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-2.0.0/\"\ndate: 2023-07-24\ntype: release-note\nversion: \"2.0.0\"\ntitle: \"Camel-K 2.0.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 13\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel K Task with Single Resource in VS Code (JSON)\nDESCRIPTION: Example of the deprecated configuration for a Camel K task in VS Code, using the 'resource' attribute to specify a single file path.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/07/VSCode-CamelK-0.0.26/index.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"tasks\": [\n\t\t{\n\t\t\t\"type\": \"camel-k\",\n\t\t\t\"resource\": \"path/to/file.xx\",\n\t\t\t(...)\n\t\t},\n```\n\n----------------------------------------\n\nTITLE: Running Camel with JBang Using Wildcards\nDESCRIPTION: Demonstrates how to run Camel with JBang using wildcards to include all files in the current directory.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/02/camel315-whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncamel run *\n```\n\n----------------------------------------\n\nTITLE: Applying Tekton Triggers Service Account\nDESCRIPTION: Command to apply the service account configuration required for Tekton Triggers in the development namespace.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f cd/cd-triggers-sa.yaml -n development\n```\n\n----------------------------------------\n\nTITLE: Calculating Git Commit Statistics for Apache Camel in 2024\nDESCRIPTION: These bash commands calculate the total number of commits and unique committers for the Apache Camel project in 2024. The first command sums up all commit counts, while the second counts unique committer names.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/01/2024-numbers/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#1 git shortlog -ns --since 2024-01-01 --until 2025-01-01 | cut -c1-7 | awk '{ SUM += $1} END { print SUM }'\n#2 git shortlog --since 2024-01-01 --until 2025-01-01 -ns | wc -l\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Path API Configuration in CAPI Gateway\nDESCRIPTION: JSON configuration for an API without Swagger, requiring explicit path definitions with HTTP verbs for each endpoint to be published through the gateway.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n {\n     \"_id\" : \"XXX-XXX-XXX-XXX\",\n     \"endpoint\" : \"remote.domain.com:8080\",\n     \"endpointType\" : \"HTTPS\",\n     \"name\" : \"Friendly API Name\",\n     //this time, the API will be available for everyone\n     \"secured\" : false,\n     \"context\" : \"context-name\",\n     \"blockIfInError\" : false,\n     //no swagger definition present, you need to define the available paths.\n     \"swagger\" : false,\n     \"paths\" : [\n         {\n         \"verb\" : \"GET\",\n         \"path\" : \"/services/path\"\n         },\n         {\n         \"verb\" : \"POST\",\n         \"path\" : \"/services/path\"\n         }\n     ]\n }\n```\n\n----------------------------------------\n\nTITLE: Applying Ingress Configuration\nDESCRIPTION: Command to apply the Ingress configuration for webhook endpoint.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f wh-ingress.yaml -n development\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K Release Metadata in YAML\nDESCRIPTION: YAML frontmatter defining metadata for Camel-K version 1.9.2 release documentation, including version number, release date, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.9.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.9.2/\"\ndate: 2022-05-23\ntype: release-note\nversion: \"1.9.2\"\ntitle: \"Camel-K 1.9.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 33\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Camel XSLT Route Definition in XML\nDESCRIPTION: Example of a vulnerable Camel route that receives HTTP requests, applies an XSLT transformation, and stores the result in a file. This route configuration is susceptible to XXE attacks if an attacker can submit XML with external entities.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/security/CVE-2014-0002.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<route>\n  <from uri=\"servlet:///hello\"/>\n  <to uri=\"xslt:file:/tmp/transform.xsl\" />\n  <to uri=\"file:/tmp/output\" />\n</route>\n```\n\n----------------------------------------\n\nTITLE: Running Post-4.8.0 Version with Camel JBang\nDESCRIPTION: Command for running the speech recognition example using Camel JBang after version 4.8.0 is released. Simpler syntax is used as the DJL component will be included by default.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/camel-ai-examples/index.md#2025-04-08_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncamel run speech_to_text.java\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Metadata for Camel Kafka Connector 0.10.0 Release\nDESCRIPTION: YAML frontmatter defining metadata for the Camel Kafka Connector 0.10.0, including release date, version information, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-0.10.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-0.10.0/\"\ndate: 2021-05-25\ntype: release-note\nversion: \"0.10.0\"\ntitle: \"Camel Kafka Connector release 0.10.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter in Markdown for Camel Release Announcement\nDESCRIPTION: This code snippet defines the frontmatter for a Markdown file announcing the Camel 3.0.0-RC3 release. It includes metadata such as title, date, draft status, authors, categories, and a preview of the content.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2019/10/RELEASE-3.0.0-RC3/index.md#2025-04-08_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: \"RELEASE 3.0.0-RC3\"\ndate: 2019-10-25\ndraft: false\nauthors: [gzurowski]\ncategories: [\"Releases\"]\npreview: \"The Camel community announces the immediate availability of a new release candidate Camel 3.0.0-RC3\"\n---\n```\n\n----------------------------------------\n\nTITLE: Local Testing with Camel JBang\nDESCRIPTION: Command to run the Java application locally using Camel JBang for rapid prototyping and testing, followed by a curl command to test the endpoint.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/04/sourceless-ck-springboot/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncamel run PlatformHttpServer.java\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8080/hello --header 'name: world'\nHello world\n```\n\n----------------------------------------\n\nTITLE: Getting Ingress Information\nDESCRIPTION: Command to retrieve the Ingress configuration and endpoint information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get ingress -n development\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K 1.8.0 Release Metadata in YAML\nDESCRIPTION: This YAML front matter defines metadata for the Camel-K 1.8.0 release notes. It specifies the URL, release date, version, title, and other relevant information for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.8.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.8.0/\"\ndate: 2022-01-18\ntype: release-note\nversion: \"1.8.0\"\ntitle: \"Camel-K 1.8.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 27\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Running TensorFlow Serving Regression Example with Camel CLI\nDESCRIPTION: This console command runs the Java file containing the Camel route for TensorFlow Serving regression using the Camel CLI.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-tensorflow-serving/index.md#2025-04-08_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ncamel run regress.java\n```\n\n----------------------------------------\n\nTITLE: Defining Execute Test Task for Running API Tests\nDESCRIPTION: This Tekton task executes test scripts against deployed services. It's designed to be reusable for both end-to-end tests and smoke tests, taking a script path and hostname as parameters.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tekton.dev/v1beta1\nkind: Task\nmetadata:\n  name: execute-test\n  description: Execute some smoke test\nspec:\n  params:\n    - name: script\n      description: the script to execute\n    - name: hostname\n      description: the hostname we want to test\n  workspaces:\n  - name: source\n  steps:\n  - name: test\n    # use any image containing the tooling required by your test\n    image: alpine/curl\n    script: |\n      cd $(workspaces.source.path)\n      $(params.script) $(params.hostname)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vulnerable XSLT Route in Apache Camel XML\nDESCRIPTION: This code snippet demonstrates a simple Apache Camel route configuration that is vulnerable to CVE-2014-0003. The route receives an HTTP request, applies an XSLT transformation, and stores the result in a file. An attacker could exploit this by submitting a message with malicious XML entities.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/security/CVE-2014-0003.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<route>\n  <from uri=\"servlet:///hello\"/>\n  <to uri=\"xslt:file:/tmp/transform.xsl\" />\n  <to uri=\"file:/tmp/output\" />\n</route>\n```\n\n----------------------------------------\n\nTITLE: Increasing Node.js Memory Allocation\nDESCRIPTION: Command to increase the memory available to Node.js when building the website. This helps avoid 'JavaScript heap out of memory' errors during the build process.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nexport NODE_OPTIONS=\"--max_old_space_size=4096\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Pipeline Runs\nDESCRIPTION: Command to watch for new pipeline runs in the development namespace.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/10/camel-k-cicd/index.md#2025-04-08_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pipelinerun -n development -w\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K 1.11.1 Release Notes\nDESCRIPTION: YAML metadata block defining the properties of the Camel-K 1.11.1 release documentation page, including version information, release date, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.11.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.11.0/\"\ndate: 2023-01-30\ntype: release-note\nversion: \"1.11.1\"\ntitle: \"Camel-K 1.11.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 42\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Running a Camel Integration with JBang\nDESCRIPTION: Command to run a Camel integration file using Camel JBang. The application can be stopped using Ctrl+C.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/05/camel317-whatsnew/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncamel run hello.java\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Authentication Secret in Kubernetes\nDESCRIPTION: Kubernetes secret configuration for OpenID Connect authentication with server URLs and secret.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/09/camel-karavan-3.18.3/index.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Secret\napiVersion: v1\nmetadata:\n    name: karavan\ntype: Opaque\nstringData:\n    oidc-secret: XXXXX\n    oidc-server-url: https://server/auth/realms/karavan\n    oidc-frontend-url: https://server/auth\n....\n```\n\n----------------------------------------\n\nTITLE: Execution Output of Command Line Application\nDESCRIPTION: Console output showing the application starting, processing a single message, and shutting down automatically after the message has been processed.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/07/command-line-utility-with-camel-quarkus/index.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n]$ java -jar target/*-runner.jar\n2020-07-15 11:32:13,577 INFO  [org.apa.cam.qua.cor.CamelBootstrapRecorder] (main) bootstrap runtime: org.apache.camel.quarkus.main.CamelMainRuntime\n2020-07-15 11:32:13,623 INFO  [org.apa.cam.mai.BaseMainSupport] (main) Auto-configuration summary:\n2020-07-15 11:32:13,623 INFO  [org.apa.cam.mai.BaseMainSupport] (main)  camel.main.durationMaxMessages=1\n2020-07-15 11:32:13,700 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.4.0 (camel-1) is starting\n2020-07-15 11:32:13,701 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html\n2020-07-15 11:32:13,709 INFO  [org.apa.cam.imp.eng.InternalRouteStartupManager] (main) Route: route1 started and consuming from: timer://hello\n2020-07-15 11:32:13,714 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Total 1 routes, of which 1 are started\n2020-07-15 11:32:13,715 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 3.4.0 (camel-1) started in 0.014 seconds\n2020-07-15 11:32:13,718 INFO  [org.apa.cam.mai.MainSupport] (camel-main) Waiting until: 1 messages has been processed\n2020-07-15 11:32:13,719 INFO  [io.quarkus] (main) camel-quarkus-integration-test-main-command-mode 1.1.0-SNAPSHOT on JVM (powered by Quarkus 1.6.0.Final) started in 0.592s.\n2020-07-15 11:32:13,720 INFO  [io.quarkus] (main) Profile prod activated.\n2020-07-15 11:32:13,721 INFO  [io.quarkus] (main) Installed features: [camel-core, camel-log, camel-main, camel-policy, camel-support-common, camel-timer, cdi]\n2020-07-15 11:32:13,725 INFO  [hello] (Camel (camel-1) thread #0 - timer://hello) Exchange[ExchangePattern: InOnly, BodyType: String, Body: Hello World!]\n2020-07-15 11:32:13,729 INFO  [org.apa.cam.mai.MainLifecycleStrategy] (Camel (camel-1) thread #0 - timer://hello) Duration max messages triggering shutdown of the JVM.\n2020-07-15 11:32:13,730 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) Apache Camel 3.4.0 (camel-1) is shutting down\n2020-07-15 11:32:13,740 INFO  [org.apa.cam.mai.MainLifecycleStrategy] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) CamelContext: camel-1 has been shutdown, triggering shutdown of the JVM.\n2020-07-15 11:32:13,741 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) Apache Camel 3.4.0 (camel-1) uptime 0.041 seconds\n2020-07-15 11:32:13,741 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (Camel (camel-1) thread #1 - CamelMainShutdownCamelContext) Apache Camel 3.4.0 (camel-1) is shutdown in 0.011 seconds\n2020-07-15 11:32:13,745 INFO  [io.quarkus] (main) camel-quarkus-integration-test-main-command-mode stopped in 0.005s\n```\n\n----------------------------------------\n\nTITLE: Vulnerable File Transfer Route in Apache Camel\nDESCRIPTION: This code snippet demonstrates a simple Camel route that is vulnerable to CVE-2013-4330. The route moves files from one directory to another, but could be exploited if a malicious file with a name containing Simple Language expressions is processed.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/security/CVE-2013-4330.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"file:c:/tmp/in\")\n  .to(\"file:/c:/tmp/out\");\n```\n\n----------------------------------------\n\nTITLE: Installing NVM and Node.js on Windows\nDESCRIPTION: Commands to install Node Version Manager (nvm) and Node.js v20 on Windows using Chocolatey. This must be run on CMD as administrator.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nchoco install nvm\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: Detecting Removed Twitter Streaming Component Usage in XML\nDESCRIPTION: A Windup rule that identifies usage of the deprecated twitter-streaming component in Java files. The rule uses pattern matching on file content but cannot detect cases where the route URI is stored in variables.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/09/windup/index.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<rule id=\"xml-removed-components-00004\">\n    <when>\n        <filecontent pattern=\"from(&quot;twitter-streaming:{*}\" filename=\"{*}.java\"/>\n    </when>\n    <perform>\n        <hint title=\"`twitter-streaming` component has been removed\" effort=\"7\" category-id=\"mandatory\" >\n            <message>`twitter-streaming` component has been deprecated in Apache Camel 2 and removed in Apache Camel 3 because it relied on the deprecated Twitter Streaming API and is no longer functional.</message>\n            <link href=\"/manual/camel-3-migration-guide.html#_removed_components\" title=\"Camel 3 - Migration Guide: Removed components\" />\n        </hint>\n    </perform>\n</rule>\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Camel Kafka Connector Release Note\nDESCRIPTION: YAML frontmatter configuration defining metadata for Camel Kafka Connector version 0.10.1 release documentation. Specifies URL path, release date, version number, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-0.10.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-0.10.1/\"\ndate: 2021-06-19\ntype: release-note\nversion: \"0.10.1\"\ntitle: \"Camel Kafka Connector release 0.10.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Previewing the Website Locally\nDESCRIPTION: Command to start a local web server that serves the generated website for preview. This makes the site available at http://localhost:1313/.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nyarn preview\n```\n\n----------------------------------------\n\nTITLE: Running Camel JBang with Quarkus Runtime\nDESCRIPTION: Shows the command to run a Camel YAML file using Camel JBang with Quarkus runtime.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/05/camel46-whatsnew/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ camel run foo.camel.yaml --runtime=quarkus\n```\n\n----------------------------------------\n\nTITLE: Implementing a Camel Route with MicroProfile Config in Java\nDESCRIPTION: This code shows how to create a simple Camel route that accepts a command line parameter using Quarkus MicroProfile Config. The route uses a timer to trigger a single execution and outputs a greeting message with the configurable subject name.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/07/command-line-utility-with-camel-quarkus/index.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport javax.enterprise.context.ApplicationScoped;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.eclipse.microprofile.config.inject.ConfigProperty;\n\n@ApplicationScoped\npublic class CamelRoute extends RouteBuilder {\n\n    @ConfigProperty(name = \"greeted.subject\", defaultValue = \"World\")\n    String greetedSubject;\n\n    @Override\n    public void configure() {\n        from(\"timer:hello?delay=-1\")\n                .setBody().constant(\"Hello \" + greetedSubject + \"!\")\n                .to(\"log:hello\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sitemap Page Title in YAML for Apache Camel Website\nDESCRIPTION: This YAML snippet defines the title for the sitemap page of the Apache Camel website. It uses front matter syntax, which is commonly used in static site generators to define metadata for pages.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/sitemap/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Sitemap\"\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Apache Camel Contributors\nDESCRIPTION: A markdown-formatted table listing contributors to the Apache Camel project. The table has two columns: Name and Organisation, listing individual contributors alphabetically by first name along with their organizational affiliations where available.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/community/team.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                    | Organisation                   |\n|-------------------------|--------------------------------|\n| Aaron Crickenberger     |                                |\n| Al Maw                  |                                |\n| Aleksi Kallio           |                                |\n[...additional rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Enabling Quarkus Runtime for Camel K\nDESCRIPTION: Command to run a Camel K integration with the Quarkus runtime enabled using the kamel CLI.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkamel run myintegration.groovy -t quarkus.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Generating Camel Quarkus Release Note Front Matter with Hugo Templates\nDESCRIPTION: YAML front matter template using Hugo templating syntax to generate release note pages. Extracts version information from the file path and sets standard metadata fields like URL, date, type, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/archetypes/release-q.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-{{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}/\"\ndate: {{ .Date }}\ndraft: true\ntype: release-note\nversion: \"{{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}\"\ntitle: \"Camel Quarkus release {{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone:\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Building Camel Website from Scratch with Maven\nDESCRIPTION: Command to build the complete Camel website from scratch using Maven. This downloads required dependencies, builds the Antora UI theme, fetches documentation sources, and generates the website content.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn package\n```\n\n----------------------------------------\n\nTITLE: Creating Camel-K Integration Resource in YAML\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes resource for Camel-K integration. It defines an Integration with a simple flow using timer-source and log-sink Kamelets.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/10/camel-karavan-preview-release/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: camel.apache.org/v1\nkind: Integration\nmetadata:\n  name: demo\nspec:\n  flows:\n    - from:\n        uri: 'kamelet:timer-source'\n        steps:\n          - to:\n              uri: 'kamelet:log-sink'\n              parameters:\n                showStreams: true\n        parameters:\n          period: 3000\n          message: hello\n```\n\n----------------------------------------\n\nTITLE: Route Template Usage Examples\nDESCRIPTION: Different ways to instantiate and use route templates in Camel 3.x including Java, XML, and Kamelet approaches.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/camel3x-top10-features/index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nTemplatedRouteBuilder.builder(context, \"myTemplate\")\\n    .parameter(\"name\", \"one\")\\n    .parameter(\"greeting\", \"Hello\")\\n    .add();\n```\n\nLANGUAGE: xml\nCODE:\n```\n<templatedRoutes xmlns=\"http://camel.apache.org/schema/spring\">\\n  <templatedRoute routeTemplateRef=\"myTemplate\">\\n    <parameter name=\"name\" value=\"one\"/>\\n    <parameter name=\"greeting\" value=\"Hello\"/>\\n  </templatedRoute>\\n</templatedRoutes>\n```\n\nLANGUAGE: java\nCODE:\n```\nfrom(\"direct:setMyBody\")\\n    .to(\"kamelet:myTemplate?name=one&greeting=Hello\");\n```\n\n----------------------------------------\n\nTITLE: YAML Release Note Configuration\nDESCRIPTION: YAML frontmatter configuration for Camel 4.3.0 release note page, specifying metadata like version, date, JDK requirements, and categorization.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.3.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-12-18\ndraft: false\ntype: release-note\nversion: 4.3.0\ntitle: \"Release 4.3.0\"\npreview: \"New release 4.3.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12353751\ncategory: camel\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access and Sitemaps in robots.txt\nDESCRIPTION: Defines access rules for web crawlers and lists sitemap locations for the main site, Camel K, components, and manual sections. Uses Hugo template syntax for dynamic base URL insertion.\nSOURCE: https://github.com/apache/camel-website/blob/main/layouts/robots.txt#2025-04-08_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\n\nSitemap: {{.Site.BaseURL}}sitemap.xml\nSitemap: {{.Site.BaseURL}}sitemap-camel-k.xml\nSitemap: {{.Site.BaseURL}}sitemap-components.xml\nSitemap: {{.Site.BaseURL}}sitemap-manual.xml\n```\n\n----------------------------------------\n\nTITLE: Exporting Camel Project to Quarkus Runtime\nDESCRIPTION: This command exports the Camel project to a Quarkus runtime, generating a new pom.xml file in the specified directory.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncamel export pom.xml --gav=com.mycompany:myproject:1.0 --runtime=quarkus --dir=code\n```\n\n----------------------------------------\n\nTITLE: Hugo Front Matter Template for Camel Kafka Connector Release Notes\nDESCRIPTION: A Hugo front matter template that extracts version information from the filename using regular expressions. It sets up URL paths, page metadata, and version information for Camel Kafka Connector release notes.\nSOURCE: https://github.com/apache/camel-website/blob/main/archetypes/release-ckc.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nurl: \"/releases/ckc-{{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}/\"\ndate: {{ .Date }}\ndraft: true\ntype: release-note\nversion: \"{{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}\"\ntitle: \"Camel Kafka Connector release {{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Calculating Git Commit Statistics for Apache Camel in 2023\nDESCRIPTION: These Bash commands calculate the total number of commits and unique committers for the Apache Camel project in 2023. The first command sums up all commit counts, while the second counts unique committer names.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/01/2023-numbers/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#1 git shortlog -ns --since 2023-01-01 --until 2024-01-01 | cut -c1-7 | awk '{ SUM += $1} END { print SUM }'\n#2 git shortlog --since 2023-01-01 --until 2024-01-01 -ns | wc -l\n```\n\n----------------------------------------\n\nTITLE: Problematic Camel Simple Expression in Properties\nDESCRIPTION: Illustrates a tricky situation where a property value resembles an environment variable reference but is intended to be used as a Camel Simple expression.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ndate-expression = ${date:now}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel 4.2.0 Release Notes\nDESCRIPTION: YAML configuration block defining metadata for the Camel 4.2.0 release notes page including version information, date, JDK compatibility, and page settings.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.2.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-11-14\ndraft: false\ntype: release-note\nversion: 4.2.0\ntitle: \"Release 4.2.0\"\npreview: \"New release 4.2.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12353662\ncategory: camel\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Beans with Builder Class in YAML DSL for Apache Camel\nDESCRIPTION: Example showing how to configure a bean using the builderClass property in YAML DSL. This allows separating bean configuration from its construction, where the builder class is responsible for creating the actual bean instance.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/12/camel43-whatsnew/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- beans:\n    - name: myCustomer\n      type: com.mycompany.Customer\n      builderClass: com.mycompany.CustomerBuilder\n      properties:\n         name: \"Acme\"\n         street: \"Somestreet 42\"\n         zip: 90210\n         gold: true\n- from:\n    uri: \"timer:yaml\"\n    parameters:\n      period: \"5000\"\n    steps:\n      - bean:\n          ref: myCustomer\n          method: summary\n      - log: \"${body}\"\n```\n\n----------------------------------------\n\nTITLE: Error Log for Failed Route Start\nDESCRIPTION: This log snippet shows an error that occurs when trying to start a route using the Jetty component, which is not compatible with Quarkus.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_15\n\nLANGUAGE: log\nCODE:\n```\nGenerating fresh run data\nRunning using Quarkus v3.17.2 (preparing and downloading files)\norg.apache.camel.FailedToStartRouteException: Failed to start route route3 because of Component jetty is not a RestConsumerFactory\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Front Matter Template for Blog Posts\nDESCRIPTION: This YAML front matter template defines the metadata structure for Jekyll blog posts. It includes placeholders for title (derived from filename), current date, draft status, author GitHub username, blog post category, and a preview field for post summaries.\nSOURCE: https://github.com/apache/camel-website/blob/main/archetypes/blog.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"{{ .Name | title }}\"\ndate: {{ .Date }}\ndraft: true\nauthors: [\"YOUR GITHUB USERNAME\"]\ncategories: [\"CATEGORY FOR THE BLOG POST\"]\npreview: \"\"\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Available Kamelets\nDESCRIPTION: Lists all available Kamelets from the Kamelet catalog installed on the cluster via the Camel K operator, showing their status, age, and readiness.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/10/managing-kamelets-with-kn/index.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkn source kamelet list\n\nNAME                           PHASE   AGE    CONDITIONS   READY   REASON\naws-ddb-streams-source         Ready   2d7h   1 OK / 1     True\naws-kinesis-source             Ready   2d7h   1 OK / 1     True\naws-s3-source                  Ready   2d7h   1 OK / 1     True\naws-sqs-source                 Ready   2d7h   1 OK / 1     True\nazure-cosmosdb-source          Ready   2d7h   1 OK / 1     True\nazure-eventhubs-source         Ready   2d7h   1 OK / 1     True\nazure-storage-blob-source      Ready   2d7h   1 OK / 1     True\nazure-storage-queue-source     Ready   2d7h   1 OK / 1     True\nbitcoin-source                 Ready   2d7h   1 OK / 1     True\ncassandra-source               Ready   2d7h   1 OK / 1     True\nchuck-norris-source            Ready   2d7h   1 OK / 1     True\ncron-source                    Ready   2d7h   1 OK / 1     True\ndropbox-source                 Ready   2d7h   1 OK / 1     True\nearthquake-source              Ready   2d7h   1 OK / 1     True\nelasticsearch-search-source    Ready   2d7h   1 OK / 1     True\nfhir-source                    Ready   2d7h   1 OK / 1     True\nfile-watch-source              Ready   2d7h   1 OK / 1     True\nftp-source                     Ready   2d7h   1 OK / 1     True\nftps-source                    Ready   2d7h   1 OK / 1     True\ngithub-source                  Ready   2d7h   1 OK / 1     True\ngoogle-calendar-source         Ready   2d7h   1 OK / 1     True\ngoogle-mail-source             Ready   2d7h   1 OK / 1     True\ngoogle-sheets-source           Ready   2d7h   1 OK / 1     True\nhttp-secured-source            Ready   2d7h   1 OK / 1     True\nhttp-source                    Ready   2d7h   1 OK / 1     True\n...\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Schedule Table in Markdown\nDESCRIPTION: A markdown table showing Apache Camel's 2020 release schedule, including version numbers, release dates, LTS status, End of Life dates, and Java version compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/03/LTS-Release-Schedule/index.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Release | Date     | LTS | EOL      | Java  \n|---------|----------|-----|----------|------\n| 2.25.0  | Jan 2020 | Yes | Jan 2022 | 8\n| 3.1.0   | Feb 2020 | No  |          | 8, 11\n| 3.2.0   | Apr 2020 | No  |          | 8, 11\n| 3.3.0   | May 2020 | No  |          | 8, 11\n| 3.4.0   | Jun 2020 | Yes | Jun 2021 | 8, 11\n| 3.5.0   | Aug 2020 | No  |          | 8, 11\n| 3.6.0   | Oct 2020 | No  |          | 8, 11\n| 3.7.0   | Dec 2020 | Yes | Dec 2021 | 8, 11, 14\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Camel Quarkus Route\nDESCRIPTION: Shell commands to clone the Camel Quarkus examples repository, navigate to the data extraction example, compile it, and run the resulting JAR file.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/data-extraction-example/index.md#2025-04-08_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/apache/camel-quarkus-examples.git\ncd camel-quarkus-examples/\ngit checkout camel-quarkus-main\ncd data-extract-langchain4j/\nmvn clean package -DskipTests\njava -jar target/quarkus-app/quarkus-run.jar\n```\n\n----------------------------------------\n\nTITLE: Defining Camel 4.0.0 Release Metadata in YAML\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel 4.0.0 release notes. It specifies the release date, end-of-life date, version number, and other important details about the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.0.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-08-14\neol: 2024-08-14\ndraft: false\ntype: release-note\nversion: 4.0.0\ntitle: \"Release 4.0.0\"\npreview: \"New major LTS release 4.0.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12352239\ncategory: camel\nkind: lts\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel 3.0.0-RC3 Release Notes\nDESCRIPTION: YAML frontmatter metadata configuration for the Camel 3.0.0-RC3 release notes page. Specifies release version, date, type, and other metadata properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.0.0-RC3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2019-10-25\ndraft: false\ntype: release-note\nversion: 3.0.0-RC3\ntitle: \"Release 3.0.0-RC3\"\npreview: \"Third release candidate for 3.0.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12346354\ncategory: camel\nkind: RC\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Bean Component Method Reference Example - Java\nDESCRIPTION: Demonstrates the new syntax for referring to bean methods using double colon notation in the Bean component.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.21.0.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n.to(\"bean:myBean::myMethod\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Apache Camel Source Code via GitHub URL\nDESCRIPTION: The GitHub URL where Apache Camel source code is mirrored. This approach allows non-committers to fork the repository and submit pull requests using standard GitHub workflows.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/docs/sources.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/apache/camel/\n```\n\n----------------------------------------\n\nTITLE: Example Log Output from Multicast Execution in Apache Camel\nDESCRIPTION: Log output demonstrating the execution flow of the multicast pattern with a partial failure. It shows how one path encounters an exception, is handled by the exception handler, while the other path completes successfully.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/multicast-failure-routing/index.md#2025-04-08_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n2021-05-06 12:43:18.565  INFO 13956 --- [qtp916897446-42] route1                                   : received request\n2021-05-06 12:43:18.566  INFO 13956 --- [qtp916897446-42] route1                                   : Entering multicast\n2021-05-06 12:43:18.575  INFO 13956 --- [ #4 - Multicast] route2                                   : Executing PATH_1 - exception path\n2021-05-06 12:43:18.575  INFO 13956 --- [ #4 - Multicast] route2                                   : Starting exception throw\n2021-05-06 12:43:18.578  INFO 13956 --- [ #4 - Multicast] route2                                   : Exception handler invoked\n2021-05-06 12:43:18.579  INFO 13956 --- [ #4 - Multicast] c.e.d.m.SimpleFlowMergeAggregator        : Inside aggregator {\"data\" : \"err\"}\n2021-05-06 12:43:19.575  INFO 13956 --- [ #3 - Multicast] route3                                   : Executing PATH_2 - success path\n2021-05-06 12:43:21.576  INFO 13956 --- [ #3 - Multicast] route3                                   : PATH_2\n2021-05-06 12:43:21.576  INFO 13956 --- [ #3 - Multicast] c.e.d.m.SimpleFlowMergeAggregator        : Inside aggregator DATA_FROM_PATH_2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Karavan Service URL\nDESCRIPTION: Command to get the URL for accessing the Karavan service in Minikube. Returns the service endpoint URL for browser access.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/11/camel-karavan-release-0.0.8/index.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nminikube service camel-karavan --url\n```\n\n----------------------------------------\n\nTITLE: Writing transformed routes to output directory\nDESCRIPTION: Command to transform OSGi Blueprint XML to Camel XML DSL and write the output to a specified directory.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncamel transform route pom.xml --format=xml --output=code\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel 3.20.8 Release Notes\nDESCRIPTION: YAML metadata block defining release information including version, dates, JDK compatibility, and release type for Camel 3.20.8 LTS release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.20.8.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-11-03\neol: 2023-12-21\ndraft: false\ntype: release-note\nversion: 3.20.8\ntitle: \"Release 3.20.8\"\npreview: \"New LTS release 3.20.8\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12353671\ncategory: camel\nkind: lts\njdk: [11, 17]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.3.0 Release Notes\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel 3.3.0 release notes. It specifies the release date, version, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.3.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2020-05-15\ndraft: false \ntype: release-note\nversion: 3.3.0\ntitle: \"Release 3.3.0\"\npreview: \"New minor release\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12347798\ncategory: camel\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot Properties - YAML Example\nDESCRIPTION: Example showing how Camel Components can be configured using Spring Boot application.yaml configuration file\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.18.0.md#2025-04-08_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napplication.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Chocolatey with CMD on Windows\nDESCRIPTION: Command to install Chocolatey package manager using CMD.exe on Windows. This is a prerequisite for easily installing tools like nvm and yarn on Windows systems.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \" [System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Release Metadata Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration containing metadata for Camel 3.21.2 LTS release notes including release date, EOL date, version details, and JDK compatibility requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.21.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-10-30\neol: 2024-06-30\ndraft: false\ntype: release-note\nversion: 3.21.2\ntitle: \"Release 3.21.2\"\npreview: \"New LTS patch release 3.21.2\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12353670\ncategory: camel\nkind: lts\njdk: [11, 17]\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Placeholder for Component Documentation\nDESCRIPTION: This shell command creates a placeholder file for the component documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ cat <<EOF > src/docs/chuck-component.adoc\n\n// component options: START\n// component options: END\n\n// endpoint options: START\n// endpoint options: END\n\nEOF\n```\n\n----------------------------------------\n\nTITLE: Deploying Nexus Repository Manager\nDESCRIPTION: YAML configuration for deploying Nexus as a Maven repository manager in Kubernetes, including Service and Deployment specifications.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/06/camel-k-maven-proxy/index.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: nexus\nspec:\n  selector:\n    app: nexus\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8081\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nexus\nspec:\n  selector:\n    matchLabels:\n      app: nexus\n  template:\n    metadata:\n      labels:\n        app: nexus\n    spec:\n      containers:\n        - name: nexus\n          image: sonatype/nexus3\n          ports:\n            - containerPort: 8081\n              name: 8081-tcp\n          livenessProbe:\n            httpGet:\n              path: /service/rest/v1/status\n              port: 8081\n            initialDelaySeconds: 90\n            periodSeconds: 3\n          readinessProbe:\n            httpGet:\n              path: /service/rest/v1/status\n              port: 8081\n            initialDelaySeconds: 90\n            periodSeconds: 3\n          volumeMounts:\n            - name: nexus-data\n              mountPath: /nexus-data\n      volumes:\n        - name: nexus-data\n          emptyDir: {}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel 3.18.4 Release Notes\nDESCRIPTION: YAML metadata block defining release information for Camel 3.18.4 including version details, release date, EOL date, and JDK compatibility versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.18.4.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-12-01\neol: 2023-07-06\ndraft: false\ntype: release-note\nversion: 3.18.4\ntitle: \"Release 3.18.4\"\npreview: \"New LTS release 3.18.4\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12352409\ncategory: camel\nkind: lts\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 4.6.0 Release Notes\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel 4.6.0 release notes. It specifies the release date, version, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.6.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2024-05-10\ndraft: false\ntype: release-note\nversion: 4.6.0\ntitle: \"Release 4.6.0\"\npreview: \"New release 4.6.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12354410\ncategory: camel\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: System Property Configuration\nDESCRIPTION: JVM system property configuration for controlling zero byte EOL behavior in stream copying operations.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.20.0.md#2025-04-08_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\ncamel.zeroByteEOLEnabled=false\n```\n\n----------------------------------------\n\nTITLE: Cloning the Apache Camel Website Repository\nDESCRIPTION: Git command to clone the Apache Camel Website repository to your local machine. This fetches all the source code needed to build the website.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/camel-website.git\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel 3.16.0 Release Notes\nDESCRIPTION: YAML frontmatter that defines metadata for the Camel 3.16.0 release notes page. It specifies the release date, version, title, and other properties needed for the website generation system.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.16.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-03-28\ndraft: false\ntype: release-note\nversion: 3.16.0\ntitle: \"Release 3.16.0\"\npreview: \"New release 3.16.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12351219\ncategory: camel\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing ChuckEndpoint and ChuckProducer in Java\nDESCRIPTION: Java code snippet showing the implementation of the ChuckEndpoint and ChuckProducer classes. These handle the endpoint configuration, lifecycle, and asynchronous API communication.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@UriEndpoint(firstVersion = \"3.0.0\", scheme = \"chuck\", title = \"Chuck\", syntax = \"chuck:type\", label = \"chuck\", producerOnly = true)\npublic class ChuckEndpoint extends DefaultEndpoint {\n    @UriParam\n    private ChuckConfiguration configuration;\n    //…\n    @Override\n    protected void doStart() throws Exception {\n        //…\n    }\n    @Override\n    protected void doStop() throws Exception {\n        //…\n    }\n    @Override\n    public Producer createProducer() throws Exception {\n        return new ChuckProducer(this);\n    }\n    @Override\n    public Consumer createConsumer(Processor processor) throws Exception {\n        throw new UnsupportedOperationException(\"No support for consumers\");\n    }\n}\n\npublic class ChuckProducer extends DefaultAsyncProducer {\n    @Override\n    public boolean process(Exchange exchange, AsyncCallback callback) {\n        //…\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.17.0 Release Notes\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel 3.17.0 release notes. It specifies the release date, version, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.17.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-05-19\ndraft: false\ntype: release-note\nversion: 3.17.0\ntitle: \"Release 3.17.0\"\npreview: \"New release 3.17.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12351401\ncategory: camel\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: Camel-K 1.10.3 Release Metadata\nDESCRIPTION: YAML frontmatter defining metadata for the Camel-K 1.10.3 release page. Specifies version, release date, JDK requirements, and categorization information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.10.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.10.3/\"\ndate: 2022-11-14\ntype: release-note\nversion: \"1.10.3\"\ntitle: \"Camel-K 1.10.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 39\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Apache Camel GitHub Repository\nDESCRIPTION: GitHub repository URL for Apache Camel project where developers can submit pull requests and contribute to the codebase.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/community/sources.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/apache/camel/\n```\n\n----------------------------------------\n\nTITLE: Building the Apache Camel Website\nDESCRIPTION: Yarn command to build both the Antora theme and the website. The result will be available in the 'public' directory.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn build-all\n```\n\n----------------------------------------\n\nTITLE: Creating directory structure for Camel Chuck component\nDESCRIPTION: Shell command to create the directory structure for the custom Chuck Norris component. This follows Maven conventions with separate directories for source code, tests, and documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir -p camel-chuck/src/main/java/org/apache/camel/component/chuck \\\n    && mkdir -p camel-chuck/src/main/docs/chuck-component.adoc \\\n    && mkdir -p camel-chuck/src/test/java/org/apache/camel/component/chuck \\\n    && mkdir -p camel-chuck/src/test/resources \\\n    && cd camel-chuck\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.18.0 LTS Release Notes\nDESCRIPTION: This YAML frontmatter block defines metadata for the Camel 3.18.0 LTS release notes. It specifies the release date, end-of-life date, version number, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.18.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-07-06\neol: 2023-07-06\ndraft: false\ntype: release-note\nversion: 3.18.0\ntitle: \"Release 3.18.0\"\npreview: \"New LTS release 3.18.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12351640\ncategory: camel\nkind: lts\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration with @ConfigProperty Annotation in Camel Quarkus\nDESCRIPTION: Demonstrates how to inject a configuration property using the @ConfigProperty annotation to access values defined in application.properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/01/camel-quarkus-configuration-tips/index.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ConfigProperty(name = \"basic\")\nString basicPropertyFromAnnotation;\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.14.9 Release Notes\nDESCRIPTION: This YAML frontmatter block defines metadata for the Camel 3.14.9 release notes. It specifies the release date, end-of-life date, version number, title, preview text, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.14.9.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-06-19\neol: 2023-12-16\ndraft: false\ntype: release-note\nversion: 3.14.9\ntitle: \"Release 3.14.9\"\npreview: \"New LTS release 3.14.9\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12353269\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K 1.3.1 Release Notes\nDESCRIPTION: YAML frontmatter metadata defining the properties of the Camel-K 1.3.1 release note page, including URL path, version, date, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.3.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.3.1/\"\ndate: 2021-02-01\ntype: release-note\nversion: \"1.3.1\"\ntitle: \"Camel-K 1.3.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 19\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning Apache Camel Git Repository\nDESCRIPTION: Git clone command for direct access to the Apache Camel repository through Apache GitBox. Only authorized project developers can commit using this method and SSH must be configured.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/community/sources.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/camel.git\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Camel Website with Maven (Skip Theme Building)\nDESCRIPTION: Command to rebuild the Camel website with Maven while skipping the UI theme rendering step. This optimizes the build process when no changes have been made to the theme itself.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn package -Dskip.theme\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Apache Camel 3.20.6 Release Notes\nDESCRIPTION: This YAML frontmatter defines metadata for the Apache Camel 3.20.6 release notes. It specifies the release date, end-of-life date, version number, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.20.6.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-06-20\neol: 2023-12-21\ndraft: false\ntype: release-note\nversion: 3.20.6\ntitle: \"Release 3.20.6\"\npreview: \"New LTS release 3.20.6\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12353270\ncategory: camel\nkind: lts\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Building Camel Project\nDESCRIPTION: These shell commands rebase the project with upstream changes and perform a full build.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/CustomWebApiComponent/index.md#2025-04-08_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n$ git remote add upstream git@github.com:apache/camel.git\n$ git pull --rebase upstream master\n\n$ cd ..//..\n$ mvn clean install -Pfastinstall\n```\n\n----------------------------------------\n\nTITLE: Optional Property Placeholder Example in Camel 3.9.0\nDESCRIPTION: Demonstrates the new optional property placeholder syntax introduced in Camel 3.9.0 for configuring file buffer size.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/03/camel-quarkus-release-1.8.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfile:foo?bufferSize={{?myBufferSize}}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.14.7 Release Notes\nDESCRIPTION: This YAML frontmatter block defines metadata for the Camel 3.14.7 release notes. It specifies the release date, end-of-life date, version number, title, preview text, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.14.7.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-12-17\neol: 2023-12-16\ndraft: false\ntype: release-note\nversion: 3.14.7\ntitle: \"Release 3.14.7\"\npreview: \"New LTS release 3.14.7\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12352567\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K 2.3.0 Release Notes\nDESCRIPTION: YAML metadata block defining properties for the Camel-K 2.3.0 release notes page. Contains URL, date, version, title, milestone number, and JDK compatibility information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-2.3.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-2.3.0/\"\ndate: 2024-04-08\ntype: release-note\nversion: \"2.3.0\"\ntitle: \"Camel-K 2.3.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 48\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Committer Table in Markdown\nDESCRIPTION: This code snippet uses a Hugo shortcode to render a table of Apache Camel project committers. The table includes columns for Name, ID, and Organisation. It's formatted using Markdown table syntax within the Hugo shortcode.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/community/team.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< table >}}\n| Name                   | ID               | Organisation               |\n|------------------------|------------------|----------------------------|\n| Aaron Mulder           | ammulder         | Chariot Solutions          |\n| Akitoshi Yoshida       | ay               | SAP                        |\n| Andrea Cosentino       | acosentino       | Red Hat                    |\n| Antonin Stefanutti     | astefanutti      | Red Hat                    |\n| Babak Vahdat           | bvahdat          | Cyberlogic Consulting GmbH |\n| Ben O'Day              | boday            | Initek Consulting          |\n| Bilgin Ibryam          | bibryam          |                            |\n| Bob Paulin             | bob              |                            |\n| Bruce Snyder           | bsnyder          |                            |\n| Charles Moulliard      | cmoulliard       | Red Hat                    |\n| Christian Mueller      | cmueller         | Amazon Web Services        |\n| Christian Posta        | ceposta          | Solo                       |\n| Christian Schneider    | cschneider       |                            |\n| Claus Ibsen            | davsclaus        | Red Hat                    |\n| Colm O hEigeartaigh    | coheigea         | Talend                     |\n| David Jencks           | djencks          | IBM                        |\n| Daniel Kulp            | dkulp            | Talend                     |\n| Denis Istomin          | distomin         |                            |\n| Dmitry Volodin         | dmvolod          | T-Systems RUS              |\n| Federico Mariani       | croway           | Red Hat                    |\n| Franz Forsthofer       | forsthofer       | SAP                        |\n| Freeman Fang           | ffang            | Red Hat                    |\n| Gary Tully             | gtully           | Red Hat                    |\n| Gert Vanthienen        | gertv            |                            |\n| Gregor Zurowski        | gzurowski        | Independent consultant     |\n| Guillaume Nodet        | gnodet           | Red Hat                    |\n| Hadrian Zbarcea        | hadrian          |                            |\n| Henryk Konsek          | hekonsek         |                            |\n| Hiram Chirino          | chirino          | Red Hat                    |\n| Ioannis Canellos       | iocanel          | Red Hat                    |\n| Jacek Laskowski        | jlaskowski       |                            |\n| James Carman           | jcarman          | Savoir Technologies        |\n| Jan Bednar             | janbednar        | CGI IT Czech Republic      |\n| Jean-Baptiste Onofré   | jbonofre         |                            |\n| Jeff Genender          | jgenender        | Savoir Technologies        |\n| Jeremy Ross            | jeremyross       | Elevation Solutions        |\n| Johan Edstrom          | joed             | Savoir Technologies        |\n| John Poth              |                  | Red Hat                    |\n| Jonathan Anstey        | janstey          | Red Hat                    |\n| James Netherton        |                  | Red Hat                    |\n| James Strachan         | jstrachan        |                            |\n| Karen Lease            | klease           |                            |\n| Luca Burgazzoli        | lburgazzoli      | Red Hat                    |\n| Marat Gubaidullin      | mgubaidullin     | Talisman Cloud             |\n| Martin Krasser         | krasserm         |                            |\n| Nicky Sandhu           | nsandhu          |                            |\n| Nicola Ferraro         | nicolaferraro    | Redpanda                   |\n| Onder Sezgin           | onders           |                            |\n| Omar Al-Safi           | oalsafi          |                            |\n| Otavio Rodolfo Piske   | orpiske          | Red Hat                    |\n| Quinn Stevenson        | quinn            |                            |\n| Raul Kripalani         | raulk            |                            |\n| Pascal Schumacher      | pascalschumacher |                            |\n| Pasquale Congiusti     | pcongiusti       | Red Hat                    |\n| Peter Palaga           | ppalaga          | Red Hat                    |\n| Rhuan Rocha            | rhuanrocha       | Digibee                    |\n| Rich Newcomb           | rnewcomb         |                            |\n| Richard Kettelerij     | rickette         | Avisi BV                   |\n| Rob Davies             | rajdavies        |                            |\n| Roman Kalukiewicz      | romkal           |                            |\n| Scott England-Sullivan | sully6768        | Red Hat                    |\n| Stan Lewis             | slewis           | Red Hat                    |\n| Tadayoshi Sato         | tsato            | Red Hat                    |\n| Thomas Diesler         | tdiesler         | Red Hat                    |\n| Tom Cunningham         | cunningt         | Red Hat                    |\n| Tomohisa Igarashi      | igarashitm       | Red Hat                    |\n| Tracy Snell            | tjsnell          | Juice Labs                 |\n| Willem Jiang           | ningjiang        | Huawei                     |\n| William Tam            | wtam             | Red Hat                    |\n| Zineb Bendhiba         | zbendhiba        | Red Hat                    |\n| Zheng Feng             | zhfeng           | Red Hat                    |\n| Zoran Regvart          | zregvart         |                            |\n{{< /table >}}\n```\n\n----------------------------------------\n\nTITLE: Clean Build of Camel Website with Maven\nDESCRIPTION: Command to perform a clean build of the Camel website with Maven. This removes all previously generated content before building, ensuring a completely fresh build.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean package\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Frontmatter for Camel 4.0.0-M2 Release Notes\nDESCRIPTION: YAML frontmatter configuration for a Hugo page that documents the second milestone release of Apache Camel 4.0.0. It specifies metadata such as the release date, version number, title, and that it requires JDK 17.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.0.0-M2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2023-03-10\ndraft: false\ntype: release-note\nversion: 4.0.0-M2\ntitle: \"Release 4.0.0-M2\"\npreview: \"Second milestone for 4.0.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12352868\ncategory: camel\nkind: RC\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Exit Condition in Properties\nDESCRIPTION: Property configuration that sets the application to exit after processing a single message using camel.main.durationMaxMessages.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/07/command-line-utility-with-camel-quarkus/index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncamel.main.durationMaxMessages = 1\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Apache Camel 3.14.3 Release Notes\nDESCRIPTION: This YAML frontmatter defines metadata for the Apache Camel 3.14.3 release notes. It specifies the release date, end-of-life date, version number, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.14.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-05-06\neol: 2023-12-16\ndraft: false\ntype: release-note\nversion: 3.14.3\ntitle: \"Release 3.14.3\"\npreview: \"New LTS release 3.14.3\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12351400\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K 2.3.1 Release Note\nDESCRIPTION: YAML metadata block defining the properties of the Camel-K 2.3.1 release note page, including URL path, release date, version number, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-2.3.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-2.3.1/\"\ndate: 2024-05-06\ntype: release-note\nversion: \"2.3.1\"\ntitle: \"Camel-K 2.3.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 50\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Publishing an API to the CAPI Gateway\nDESCRIPTION: cURL command to publish a new API to the CAPI Gateway by POSTing the API configuration JSON to the route endpoint, enabling the API to be accessed through the gateway.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST \"http://localhost:8080/route/simple-rest\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"<your-api>\" (see Example of an API definition)\n```\n\n----------------------------------------\n\nTITLE: Using Docker-Pipe for Container-in-Container Operations\nDESCRIPTION: Example workflow for using the docker-pipe.sh utility to enable Docker commands from within a Docker container without Docker-in-Docker. Creates named pipes for communication between host and container.\nSOURCE: https://github.com/apache/camel-website/blob/main/support/README.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ support/docker-pipe.sh tmp &\n$ docker run -v \"$PWD/tmp\":\"$PWD/tmp\" \\\n  -v \"$PWD/tmp/docker\":/usr/bin/docker\" \\\n  ...\nroot@62ace315af17:...# docker run ...\nroot@62ace315af17:...# exit\n$ tmp/teardown.sh\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Camel 4.10.3 Release Notes\nDESCRIPTION: YAML configuration block defining metadata for the Camel 4.10.3 release notes page. Specifies version information, release type, JDK compatibility, and other key metadata.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-4.10.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2025-03-31\neol: 2026-02-10\ndraft: false\ntype: release-note\nversion: 4.10.3\ntitle: \"Release 4.10.3\"\npreview: \"New LTS release 4.10.3\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12355762\ncategory: camel\nkind: lts\njdk: [17, 21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Release Metadata for Apache Camel 3.4.1 in YAML\nDESCRIPTION: This YAML front matter defines metadata for the Apache Camel 3.4.1 release. It includes information such as release date, end-of-life date, version number, and supported Java versions. The metadata is used to generate release notes and documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.4.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2020-07-12\neol: 2021-06-01\ndraft: false\ntype: release-note\nversion: 3.4.1\ntitle: \"Release 3.4.1\"\npreview: \"New patch release 3.4.1\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12348393\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel-K Runtime 1.11.0 Release Notes\nDESCRIPTION: YAML metadata block defining key information about the Camel-K Runtime 1.11.0 release including URL path, release date, version, title and requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-1.11.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-1.11.0/\"\ndate: 2022-01-18\ntype: release-note\nversion: \"1.11.0\"\ntitle: \"Camel-K Runtime release 1.11.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 15\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Monitoring in Camel K\nDESCRIPTION: Command to enable Prometheus monitoring for a Camel K integration.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/06/camel-k-release-1.0.0/index.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkamel run Routes.java -t prometheus.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Release 2.22.4\nDESCRIPTION: This YAML frontmatter block defines metadata for the Camel 2.22.4 release note. It includes information such as release date, end-of-life date, version number, and categorization details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.22.4.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2019-04-07\neol: 2019-06-30\ndraft: false \ntype: release-note\nversion: 2.22.4\ntitle: \"Release 2.22.4\"\npreview: \"Minor update of the 2.22.x branch\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12344887\ncategory: camel\nkind: legacy\njdk: [8]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Release Note Frontmatter in YAML\nDESCRIPTION: YAML frontmatter block defining metadata for Camel Quarkus 3.18.0 release notes. Includes URL path, release date, version info, category, and JDK compatibility details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.18.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.18.0/\"\ndate: 2025-01-29\ntype: release-note\nversion: 3.18.0\ntitle: \"Camel Quarkus release 3.18.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 69\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel-K Runtime Release Note\nDESCRIPTION: YAML metadata block defining the properties of the Camel-K Runtime 1.16.0 release note page, including URL path, release date, version number, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-1.16.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-1.16.0/\"\ndate: 2022-11-28\ntype: release-note\nversion: \"1.16.0\"\ntitle: \"Camel-K Runtime release 1.16.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 22\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Release Metadata in YAML for Camel Quarkus 2.5.0\nDESCRIPTION: YAML frontmatter block containing metadata for the Camel Quarkus 2.5.0 release announcement page. Specifies version, release date, JDK compatibility, and page categorization details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-2.5.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-2.5.0/\"\ndate: 2021-11-26\ntype: release-note\nversion: 2.5.0\ntitle: \"Camel Quarkus release 2.5.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 21\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Camel Route Execution Logs with Exception Handling and Aggregation\nDESCRIPTION: These logs demonstrate the execution flow of the custom aggregation strategy. They show how an exception in the first path is handled, and when a successful exchange is received in the second path, the base is swapped and processing continues.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/05/multicast-failure-routing/index.md#2025-04-08_snippet_6\n\nLANGUAGE: log\nCODE:\n```\n2021-05-06 12:46:19.122  INFO 2576 --- [qtp174245837-45] route1                                   : received request\n2021-05-06 12:46:19.123  INFO 2576 --- [qtp174245837-45] route1                                   : Entering multicast\n2021-05-06 12:46:19.130  INFO 2576 --- [ #3 - Multicast] route2                                   : Executing PATH_1 - exception path\n2021-05-06 12:46:19.130  INFO 2576 --- [ #3 - Multicast] route2                                   : Starting exception throw\n2021-05-06 12:46:19.134  INFO 2576 --- [ #3 - Multicast] route2                                   : Exception handler invoked\n2021-05-06 12:46:19.135  INFO 2576 --- [ #3 - Multicast] c.e.d.m.SimpleFlowMergeAggregator        : Inside aggregator {\"data\" : \"err\"}\n2021-05-06 12:46:20.130  INFO 2576 --- [ #4 - Multicast] route3                                   : Executing PATH_2 - success path\n2021-05-06 12:46:22.132  INFO 2576 --- [ #4 - Multicast] route3                                   : PATH_2\n2021-05-06 12:46:22.132  INFO 2576 --- [ #4 - Multicast] c.e.d.m.SimpleFlowMergeAggregator        : Inside aggregator DATA_FROM_PATH_2\n2021-05-06 12:46:22.132  INFO 2576 --- [ #4 - Multicast] c.e.d.m.SimpleFlowMergeAggregator        : Found new exchange with success. swapping the base exchange\n2021-05-06 12:46:22.133  INFO 2576 --- [ #4 - Multicast] route1                                   : Aggregated results {\"data\" : \"err\"},DATA_FROM_PATH_2\n2021-05-06 12:46:22.133  INFO 2576 --- [ #4 - Multicast] route1                                   : Another log\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel Quarkus Release Notes\nDESCRIPTION: YAML frontmatter block defining metadata for the Camel Quarkus 3.17.0 release documentation page. Includes release version, date, JDK compatibility, and categorization information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.17.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.17.0/\"\ndate: 2024-12-12\ntype: release-note\nversion: 3.17.0\ntitle: \"Camel Quarkus release 3.17.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 66\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K Runtime 1.17.0 Release Metadata in YAML\nDESCRIPTION: This YAML snippet defines metadata for the Camel-K Runtime 1.17.0 release announcement. It specifies the URL, release date, version, title, and other relevant information for the release note.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-1.17.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-1.17.0/\"\ndate: 2023-02-27\ntype: release-note\nversion: \"1.17.0\"\ntitle: \"Camel-K Runtime release 1.17.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 23\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel-K 2.5.1 Release Notes\nDESCRIPTION: YAML frontmatter configuration block defining metadata for the Camel-K 2.5.1 release notes page, including version number, release date, JDK requirements, and page categorization.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-2.5.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-2.5.1/\"\ndate: 2025-02-07\ntype: release-note\nversion: \"2.5.1\"\ntitle: \"Camel-K 2.5.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 56\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Camel-K Operator\nDESCRIPTION: Command to setup the Camel-K environment by installing the Kamel operator.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/06/Optimizing-Camel-K-Integration-Build-Time/index.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkamel install\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Quarkus 2.12.0 Release Note\nDESCRIPTION: YAML frontmatter block containing metadata for the Camel Quarkus 2.12.0 release note page. Specifies properties like URL path, publication date, version number, title and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-2.12.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-2.12.0/\"\ndate: 2022-09-01\ntype: release-note\nversion: 2.12.0\ntitle: \"Camel Quarkus release 2.12.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 31\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Camel-K Runtime Release Note\nDESCRIPTION: YAML front matter block defining metadata for the Camel-K Runtime 3.6.0 release documentation page. Specifies version, release date, JDK requirements, and categorization details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-3.6.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-3.6.0/\"\ndate: 2023-12-15\ntype: release-note\nversion: \"3.6.0\"\ntitle: \"Camel-K Runtime release 3.6.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 25\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.14.5 Release Notes\nDESCRIPTION: This YAML frontmatter block defines metadata for the Camel 3.14.5 release notes. It specifies the release date, end-of-life date, version number, title, preview text, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.14.5.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-08-20\neol: 2023-12-16\ndraft: false\ntype: release-note\nversion: 3.14.5\ntitle: \"Release 3.14.5\"\npreview: \"New LTS release 3.14.5\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12351866\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K 1.10.2 Release Note\nDESCRIPTION: YAML frontmatter block defining metadata for the Camel-K 1.10.2 release note page. It specifies the URL path, publication date, content type, version number, title, and JDK compatibility requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.10.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.10.2/\"\ndate: 2022-10-20\ntype: release-note\nversion: \"1.10.2\"\ntitle: \"Camel-K 1.10.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 38\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel Quarkus Release Note\nDESCRIPTION: YAML metadata header defining the properties of the Camel Quarkus 2.8.0-M1 release note, including version information, release date, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-2.8.0-M1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2022-03-08\ntype: release-note\nversion: 2.8.0-M1\ntitle: \"Camel Quarkus release 2.8.0-M1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 24\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K Runtime 3.8.1 Release Metadata in YAML\nDESCRIPTION: This YAML snippet defines the metadata for the Camel-K Runtime 3.8.1 release. It specifies the release URL, date, version, title, and other relevant information for the release announcement.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-3.8.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-3.8.1/\"\ndate: 2024-04-01\ntype: release-note\nversion: \"3.8.1\"\ntitle: \"Camel-K Runtime release 3.8.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 25\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.7.7 Release Note\nDESCRIPTION: This YAML frontmatter block defines metadata for the Camel 3.7.7 release note. It includes information such as the release date, end-of-life date, version number, and supported JDK versions. This metadata is likely used by a static site generator or content management system to properly categorize and display the release note.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.7.7.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2021-12-23\neol: 2022-01-01\ndraft: false\ntype: release-note\nversion: 3.7.7\ntitle: \"Release 3.7.7\"\npreview: \"New patch release 3.7.7\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12350650\ncategory: camel\nkind: lts\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Compiler Plugin for Parameter Names\nDESCRIPTION: XML configuration for the Maven Compiler Plugin to preserve method parameter names in the compiled bytecode.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/09/data-extraction-example/index.md#2025-04-08_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<plugin>\n <groupId>org.apache.maven.plugins</groupId>\n <artifactId>maven-compiler-plugin</artifactId>\n <configuration>\n  <compilerArgs>\n   <arg>-parameters</arg>\n  </compilerArgs>\n </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel-K Release Notes\nDESCRIPTION: YAML metadata block defining the properties of a Camel-K 1.9.0 release notes page, including URL path, release date, version number, and JDK compatibility requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.9.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.9.0/\"\ndate: 2022-04-26\ntype: release-note\nversion: \"1.9.0\"\ntitle: \"Camel-K 1.9.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 29\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Camel Quarkus 1.8.0 Release Notes in YAML\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel Quarkus 1.8.0 release notes page. It specifies the URL path, release date (March 29, 2021), version number, title, category, milestone number, and JDK compatibility requirement (JDK 11).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-1.8.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-1.8.0/\"\ndate: 2021-03-29\ntype: release-note\nversion: 1.8.0\ntitle: \"Camel Quarkus release 1.8.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 12\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Kamelets Release Note\nDESCRIPTION: YAML frontmatter metadata block defining the properties of the Kamelets 0.7.0 release note page, including URL path, date, version, and category information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.7.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.7.0/\"\ndate: 2022-01-18\ntype: release-note\nversion: \"0.7.0\"\ntitle: \"Kamelets 0.7.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 2.21.3 Release Notes\nDESCRIPTION: YAML frontmatter block containing metadata for the Camel 2.21.3 release notes. It specifies release details, version information, and categorization for the content management system.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.21.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2018-10-21\neol: 2019-02-28\ndraft: false \ntype: release-note\nversion: 2.21.3\ntitle: \"Release 2.21.3\"\npreview: \"Minor update of the 2.21.x branch\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12343751\ncategory: camel\nkind: legacy\njdk: [8]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel-K 1.8.2 Release Notes\nDESCRIPTION: YAML front matter block defining metadata for the Camel-K 1.8.2 release notes page, including version, release date, type, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.8.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.8.2/\"\ndate: 2022-03-07\ntype: release-note\nversion: \"1.8.2\"\ntitle: \"Camel-K 1.8.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 31\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Building JVM Package\nDESCRIPTION: Commands for building the application as a JVM package, including options for regular jar and uber-jar\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2021/08/DeployingCamelRouteInAWSLambda/index.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw clean package\n```\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw package -Dquarkus.package.type=uber-jar\n```\n\n----------------------------------------\n\nTITLE: Front Matter YAML Configuration for Camel Kamelets 4.10.3 Release\nDESCRIPTION: YAML front matter that defines metadata for the Camel Kamelets 4.10.3 release note page. It specifies the URL, release date (April 3, 2025), document type, version number, title, and JDK compatibility (versions 17 and 21).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.10.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.10.3/\"\ndate: 2025-04-03\ntype: release-note\nversion: \"4.10.3\"\ntitle: \"Kamelets 4.10.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Kamelets Release Note\nDESCRIPTION: YAML front matter metadata block defining the properties of the Kamelets 4.0.0-M3 release note page, including URL, date, version, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.0.0-M3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.0.0-M3/\"\ndate: 2023-05-15\ntype: release-note\nversion: \"4.0.0-M3\"\ntitle: \"Kamelets 4.0.0-M3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Kamelets Release Note YAML Frontmatter\nDESCRIPTION: YAML frontmatter metadata for the Kamelets 0.10.0 release note page, including URL path, release date, version number, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.10.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.10.0/\"\ndate: 2022-12-05\ntype: release-note\nversion: \"0.10.0\"\ntitle: \"Kamelets 0.10.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Front Matter Configuration for Camel-K Release Notes\nDESCRIPTION: YAML front matter configuration defining metadata for the Camel-K 1.4.1 release notes page, including URL path, date, version, title and other relevant properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.4.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.4.1/\"\ndate: 2021-07-05\ntype: release-note\nversion: \"1.4.1\"\ntitle: \"Camel-K 1.4.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 22\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Starting the CAPI Gateway with Docker Compose\nDESCRIPTION: Command to launch the CAPI Gateway and its dependencies using Docker Compose, setting up MongoDB, Prometheus, Grafana, and Zipkin services.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/01/capi-gateway/index.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Kamelets 3.20.2 Release Metadata in YAML\nDESCRIPTION: YAML frontmatter defining the metadata for Kamelets version 3.20.2 release, including URL path, release date, version number, and JDK compatibility (11 and 17).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-3.20.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-3.20.2/\"\ndate: 2023-03-07\ntype: release-note\nversion: \"3.20.2\"\ntitle: \"Kamelets 3.20.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Kamelets 4.4.0 Release Notes\nDESCRIPTION: YAML frontmatter that specifies metadata for the Camel Kamelets 4.4.0 release documentation page. It includes the release URL, publication date, content type, version number, title, and JDK compatibility information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.4.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.4.0/\"\ndate: 2024-02-22\ntype: release-note\nversion: \"4.4.0\"\ntitle: \"Kamelets 4.4.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Kamelets 3.20.5 Release Notes\nDESCRIPTION: This YAML frontmatter block defines metadata for the Camel Kamelets 3.20.5 release notes page. It specifies the URL, release date, version, title, and other relevant information for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-3.20.5.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-3.20.5/\"\ndate: 2023-06-05\ntype: release-note\nversion: \"3.20.5\"\ntitle: \"Kamelets 3.20.5\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Kamelets 3.20.4 Release Note\nDESCRIPTION: YAML frontmatter metadata block defining the properties of the Kamelets 3.20.4 release note page, including URL path, publication date, version number, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-3.20.4.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-3.20.4/\"\ndate: 2023-05-19\ntype: release-note\nversion: \"3.20.4\"\ntitle: \"Kamelets 3.20.4\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Kamelets 0.9.2 Release Metadata in YAML\nDESCRIPTION: YAML frontmatter containing release metadata for Kamelets version 0.9.2 including URL path, publication date, version, title and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.9.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.9.2/\"\ndate: 2022-10-28\ntype: release-note\nversion: \"0.9.2\"\ntitle: \"Kamelets 0.9.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Kamelets 4.4.2 Release Metadata in YAML\nDESCRIPTION: This YAML block defines the metadata for the Camel Kamelets 4.4.2 release. It specifies the URL, release date, version, title, and supported JDK versions. This information is likely used for generating release notes or documentation pages.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.4.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.4.2/\"\ndate: 2024-05-06\ntype: release-note\nversion: \"4.4.2\"\ntitle: \"Kamelets 4.4.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Kamelets Release Notes\nDESCRIPTION: YAML frontmatter block defining metadata for the Camel Kamelets 4.10.0 release notes page. Specifies release version, date, type, URL path, JDK compatibility and other publishing metadata.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.10.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.10.0/\"\ndate: 2025-02-17\ntype: release-note\nversion: \"4.10.0\"\ntitle: \"Kamelets 4.10.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Starting TorchServe Docker Container\nDESCRIPTION: Docker command to run TorchServe server with necessary port mappings and configurations\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2025/02/camel-torchserve/index.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run --rm -it --name torchserve \\\n    -p 8080:8080 -p 8081:8081 -p 8082:8082 \\\n    pytorch/torchserve \\\n    torchserve \\\n        --disable-token-auth \\\n        --enable-model-api \\\n        --model-store /home/model-server/model-store\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Kamelets 3.20.1.1 Release\nDESCRIPTION: YAML metadata block defining the properties of the Kamelets 3.20.1.1 release documentation page, including URL path, publication date, version number, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-3.20.1.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-3.20.1.1/\"\ndate: 2023-01-30\ntype: release-note\nversion: \"3.20.1.1\"\ntitle: \"Kamelets 3.20.1.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel Karaf 4.8.1 Release Notes\nDESCRIPTION: YAML metadata defining the properties of the Camel Karaf 4.8.1 release note page. Includes URL path, release date, version number, and supported JDK versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/karaf/release-4.8.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/karaf-4.8.1/\"\ndate: 2024-07-19\ntype: release-note\nversion: \"4.8.1\"\ntitle: \"Camel Karaf release 4.8.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-karaf\"\nmilestone: 2\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel Quarkus Release Note\nDESCRIPTION: YAML front matter metadata block defining properties for the Camel Quarkus 1.7.0 release note page, including version, date, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-1.7.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-1.7.0/\"\ndate: 2021-02-19\ntype: release-note\nversion: 1.7.0\ntitle: \"Camel Quarkus release 1.7.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 11\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Kamelets 4.8.1 Release Note\nDESCRIPTION: YAML frontmatter configuration defining metadata for the Camel Kamelets 4.8.1 release note page. Specifies the URL path, release date, version number, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.8.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.8.1/\"\ndate: 2024-11-12\ntype: release-note\nversion: \"4.8.1\"\ntitle: \"Kamelets 4.8.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Kamelets Release Metadata in YAML\nDESCRIPTION: YAML frontmatter block defining metadata for Camel Kamelets release 3.21.0, including URL path, release date, version, title and JDK compatibility versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-3.21.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-3.21.0/\"\ndate: 2023-07-04\ntype: release-note\nversion: \"3.21.0\"\ntitle: \"Kamelets 3.21.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Camel K with JDK 17 Base Image\nDESCRIPTION: This command installs Camel K using a JDK 17 base image, which is required for running Camel 4 integrations. It skips operator setup and forces the installation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/09/camel-4-on-camel-k/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkamel install --skip-operator-setup --base-image eclipse-temurin:17 --force\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel K 2.4.0 Release Notes\nDESCRIPTION: YAML front matter metadata for the Camel K 2.4.0 release notes page. It defines the URL path, release date, version number, title, and JDK requirements for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-2.4.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-2.4.0/\"\ndate: 2024-08-07\ntype: release-note\nversion: \"2.4.0\"\ntitle: \"Camel-K 2.4.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 49\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Release Note Frontmatter Configuration in YAML\nDESCRIPTION: YAML frontmatter metadata for a Camel Quarkus release note page, specifying version 3.0.0-M2 details including release date, JDK requirements, and categorization information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.0.0-M2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.0.0-M2/\"\ndate: 2023-05-29\ntype: release-note\nversion: 3.0.0-M2\ntitle: \"Camel Quarkus release 3.0.0-M2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 40\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Kamelets 4.8.3 Release\nDESCRIPTION: YAML frontmatter metadata block defining the release information for Camel Kamelets version 4.8.3, including URL path, release date, version number, and supported JDK versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.8.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.8.3/\"\ndate: 2025-01-17\ntype: release-note\nversion: \"4.8.3\"\ntitle: \"Kamelets 4.8.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Kamelets 4.2.0 Release Notes\nDESCRIPTION: YAML frontmatter metadata defining the properties of the Camel Kamelets 4.2.0 release notes page, including URL path, date, version, title and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.2.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.2.0/\"\ndate: 2023-11-20\ntype: release-note\nversion: \"4.2.0\"\ntitle: \"Kamelets 4.2.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Pulling Nightly Camel K Docker Image\nDESCRIPTION: Shows how to pull the nightly build Docker image of Camel K from Docker Hub. The nightly build is an unsupported pre-release version for cutting-edge testing purposes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/04/camel-k-release-1-9/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull testcamelk/camel-k:1.9.0-nightly\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K 2.3.3 Release Metadata in YAML\nDESCRIPTION: This YAML snippet defines the metadata for the Camel-K 2.3.3 release. It specifies the URL, release date, version, title, and other relevant information for the release notes page.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-2.3.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-2.3.3/\"\ndate: 2024-06-10\ntype: release-note\nversion: \"2.3.3\"\ntitle: \"Camel-K 2.3.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 53\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Quarkus 3.8.2 Release Metadata in YAML Frontmatter\nDESCRIPTION: YAML frontmatter that defines metadata for the Camel Quarkus 3.8.2 release documentation page. It includes release date, end-of-life date, version information, and compatibility with JDK 17 and 21.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.8.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.8.2/\"\ndate: 2024-05-03\neol: 2025-02-12\ntype: release-note\nversion: 3.8.2\ntitle: \"Camel Quarkus release 3.8.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 59\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Kafka Connector 0.6.1 Release Note\nDESCRIPTION: YAML frontmatter defining metadata for the Camel Kafka Connector 0.6.1 release note page. It includes the URL path, release date, version number, title, and Java compatibility requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-0.6.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-0.6.1/\"\ndate: 2020-11-30\ntype: release-note\nversion: \"0.6.1\"\ntitle: \"Camel Kafka Connector release 0.6.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Kamelets 0.8.1 Release Note Metadata in YAML\nDESCRIPTION: This YAML snippet defines the metadata for the Kamelets 0.8.1 release note. It specifies the URL, release date, version, title, and other relevant information for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.8.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.8.1/\"\ndate: 2022-05-13\ntype: release-note\nversion: \"0.8.1\"\ntitle: \"Kamelets 0.8.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K 2.2.0 Release Metadata in YAML\nDESCRIPTION: This YAML snippet defines the metadata for the Camel-K 2.2.0 release. It specifies the release URL, date, version, title, and other relevant information for documentation purposes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-2.2.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-2.2.0/\"\ndate: 2024-01-08\ntype: release-note\nversion: \"2.2.0\"\ntitle: \"Camel-K 2.2.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 47\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Camel Quarkus 3.8.3 Release\nDESCRIPTION: YAML frontmatter defining the release metadata for Camel Quarkus 3.8.3. Specifies release date, EOL date, version details, supported JDK versions, and categorization information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.8.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.8.3/\"\ndate: 2024-07-08\neol: 2025-02-12\ntype: release-note\nversion: 3.8.3\ntitle: \"Camel Quarkus release 3.8.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 62\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel Kafka Connector Release 4.4.3\nDESCRIPTION: YAML configuration block defining metadata for the Camel Kafka Connector 4.4.3 release documentation. Specifies version, release date, JDK requirements, and categorization details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-4.4.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-4.4.3/\"\ndate: 2024-09-14\ntype: release-note\nversion: \"4.4.3\"\ntitle: \"Camel Kafka Connector release 4.4.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: GSoC 2020 Mentor Request Email Template for Apache Camel\nDESCRIPTION: Template for existing Camel committers to apply as mentors for Google Summer of Code 2020. The email should be sent to private@camel.apache.org with a copy to mentors@community.apache.org, including the mentor's name and email address where they want to receive the mentor invitation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/02/GSoC-2020-announced/index.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTo: private@camel.apache.org\ncc: mentors@community.apache.org\nsubject: GSoC 2020 mentor request for <mentor name>\n\nCamel PMC,\n\nplease acknowledge my request to become a mentor for Google Summer of\nCode 2020 projects for Apache Camel.\n\nI would like to receive the mentor invite to <mentor email address>\n```\n\n----------------------------------------\n\nTITLE: Defining Release Metadata in YAML Front Matter\nDESCRIPTION: This YAML front matter block defines metadata for the Camel Kafka Connector 3.20.3 release announcement. It specifies the URL, release date, version, title, and other relevant information for the release note.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-3.20.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-3.20.3/\"\ndate: 2023-04-30\ntype: release-note\nversion: \"3.20.3\"\ntitle: \"Camel Kafka Connector release 3.20.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [11,17]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel-K 1.7.0 Release Notes\nDESCRIPTION: YAML metadata block defining properties for the Camel-K 1.7.0 release notes page, including version information, release date, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.7.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.7.0/\"\ndate: 2021-11-15\ntype: release-note\nversion: \"1.7.0\"\ntitle: \"Camel-K 1.7.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 25\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Release Metadata Configuration in YAML\nDESCRIPTION: YAML front matter metadata defining release details for Camel Quarkus version 3.9.0. Specifies the release URL, date, version number, title, category, milestone number, and compatible JDK versions (17 and 21).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.9.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.9.0/\"\ndate: 2024-03-27\ntype: release-note\nversion: 3.9.0\ntitle: \"Camel Quarkus release 3.9.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 55\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Kafka Connector 4.8.3 Release Note\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel Kafka Connector 4.8.3 release note. It specifies the URL, release date, version, title, and other relevant information for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-4.8.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-4.8.3/\"\ndate: 2025-01-31\ntype: release-note\nversion: \"4.8.3\"\ntitle: \"Camel Kafka Connector release 4.8.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Kafka Connector Release Metadata in YAML\nDESCRIPTION: YAML frontmatter defining metadata for Camel Kafka Connector release 1.0.0, including release date, EOL date, version info, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-1.0.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/ckc-1.0.0/\"\ndate: 2022-01-14\neol: 2023-01-14\ntype: release-note\nversion: \"1.0.0\"\ntitle: \"Camel Kafka Connector release 1.0.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Structuring Apache Camel Projects Section with Hugo Shortcodes\nDESCRIPTION: Uses Hugo shortcodes to create a section showcasing various Apache Camel projects with icons and descriptions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/_index.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{< section \"frontpage projects\" >}}\n\n# Apache Camel Projects\n\n{{< div \"project\" >}}\n\n{{< div \"icon\" >}}\n\n{{< icon \"logo-d\" \"Apache Camel logo\" >}}\n\n{{< /div >}}\n\n{{< div \"content\" >}}\n\n## Camel Core\nApache Camel helps you integrate various systems consuming or producing data.\n<p><a class=\"button dark\" href=\"/docs/\">Read More</a></p>\n\n{{< /div >}}\n\n{{< /div >}}\n\n<!-- Additional project entries omitted for brevity -->\n\n{{< /section >}}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Camel-K 1.6.0 Release Notes\nDESCRIPTION: YAML front matter defining metadata for the Camel-K 1.6.0 release page. It specifies the URL path, release date, version number, title, and other configuration parameters including JDK compatibility (version 11).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.6.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.6.0/\"\ndate: 2021-09-07\ntype: release-note\nversion: \"1.6.0\"\ntitle: \"Camel-K 1.6.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 23\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Camel Quarkus Release 3.13.0\nDESCRIPTION: YAML frontmatter defining metadata for the Camel Quarkus 3.13.0 release documentation page. Includes release version, date, JDK requirements, and categorization information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.13.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.13.0/\"\ndate: 2024-07-31\ntype: release-note\nversion: 3.13.0\ntitle: \"Camel Quarkus release 3.13.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 61\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Quarkus 1.5.0 Release Notes\nDESCRIPTION: YAML frontmatter metadata block defining the properties of the Camel Quarkus 1.5.0 release note page. Includes URL path, publication date, version number, title and other metadata fields required for the content management system.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-1.5.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-1.5.0/\"\ndate: 2020-12-01\ntype: release-note\nversion: 1.5.0\ntitle: \"Camel Quarkus release 1.5.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 9\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Karaf 4.8.5 Release Metadata in YAML\nDESCRIPTION: YAML frontmatter configuration that defines the metadata for the Camel Karaf 4.8.5 release documentation. Specifies the URL path, release date, version number, title, and supported JDK versions (17 and 21).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/karaf/release-4.8.5.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/karaf-4.8.5/\"\ndate: 2025-03-16\ntype: release-note\nversion: \"4.8.5\"\ntitle: \"Camel Karaf release 4.8.5\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-karaf\"\nmilestone: 6\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Running Apache HTTP in Docker Container for Testing .htaccess Configuration\nDESCRIPTION: Command to run an Apache HTTP server in a Docker container to test .htaccess configuration. It mounts the built website and support files, then copies the configuration before starting the server.\nSOURCE: https://github.com/apache/camel-website/blob/main/support/README.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -p 80:80 -p 443:443 \\\n  -v \"$PWD/public\":/usr/local/apache2/htdocs/:Z \\\n  -v \"$PWD/support/http\":/support:Z \\\n  httpd:2.4 /bin/bash -c \"cp /support/* /usr/local/apache2/conf/ && httpd-foreground\"\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K Runtime 3.2.0 Release Note\nDESCRIPTION: YAML frontmatter metadata defining the release note page properties including version, date, and JDK requirements for Camel-K Runtime 3.2.0\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-3.2.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-3.2.0/\"\ndate: 2023-09-09\ntype: release-note\nversion: \"3.2.0\"\ntitle: \"Camel-K Runtime release 3.2.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 25\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Karaf 4.8.2 Release Metadata in YAML\nDESCRIPTION: YAML frontmatter that defines metadata for the Camel Karaf 4.8.2 release. It specifies the release URL, date (January 29, 2025), version number, title, category, milestone number, and compatible JDK versions (17 and 21).\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/karaf/release-4.8.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/karaf-4.8.2/\"\ndate: 2025-01-29\ntype: release-note\nversion: \"4.8.2\"\ntitle: \"Camel Karaf release 4.8.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-karaf\"\nmilestone: 5\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Quarkus 2.1.0 Release Notes\nDESCRIPTION: YAML frontmatter metadata defining the release note page properties including version number, release date, JDK requirements and categorization details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-2.1.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-2.1.0/\"\ndate: 2021-07-30\ntype: release-note\nversion: 2.1.0\ntitle: \"Camel Quarkus release 2.1.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 17\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for Camel-K Release Notes\nDESCRIPTION: YAML front matter configuration that defines the structure and metadata for Camel-K release note pages. Uses regex replacements to extract version numbers from file paths and configures page properties like URL, type, JDK requirements and category.\nSOURCE: https://github.com/apache/camel-website/blob/main/archetypes/release-k.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nurl: \"/releases/k-{{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}/\"\ndate: {{ .Date }}\ndraft: true\ntype: release-note\nversion: \"{{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}\"\ntitle: \"Camel-K release {{ replace (replaceRE \".*/release-(.*).md\" \"$1\" .File.Path) \"_\" \".\" }}\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone:\njdk: [11]\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K Runtime 2.16.0 Release Metadata in YAML\nDESCRIPTION: This YAML front matter defines metadata for the Camel-K Runtime 2.16.0 release announcement. It specifies the URL, release date, version, title, and other relevant information for the release note.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-2.16.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-2.16.0/\"\ndate: 2023-07-04\ntype: release-note\nversion: \"2.16.0\"\ntitle: \"Camel-K Runtime release 2.16.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 25\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Camel Kafka Connector 4.4.2 Release in Markdown\nDESCRIPTION: This markdown frontmatter defines metadata for the Camel Kafka Connector 4.4.2 release announcement. It specifies the URL, release date, version, title, category, and supported JDK versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/ckc/release-4.4.2.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nurl: \"/releases/ckc-4.4.2/\"\ndate: 2024-06-03\ntype: release-note\nversion: \"4.4.2\"\ntitle: \"Camel Kafka Connector release 4.4.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kafka-connector\"\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Camel Quarkus 3.15.1 Release\nDESCRIPTION: YAML configuration block defining metadata for the Camel Quarkus 3.15.1 release documentation. Specifies URL path, release date, end-of-life date, version number, title, milestone, and supported JDK versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.15.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.15.1/\"\ndate: 2024-11-02\neol: 2025-09-10\ntype: release-note\nversion: 3.15.1\ntitle: \"Camel Quarkus release 3.15.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 67\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning Apache Camel Repository for Committers\nDESCRIPTION: Git command to clone the Apache Camel repository directly from Apache's Git server. This method is restricted to project developers with commit access and requires SSH to be installed on the client machine.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/docs/sources.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitbox.apache.org/repos/asf/camel.git\n```\n\n----------------------------------------\n\nTITLE: Invalid apiContextListing Error Log\nDESCRIPTION: Error log showing the invalid apiContextListing attribute that needs to be removed in Camel 4.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_10\n\nLANGUAGE: log\nCODE:\n```\norg.apache.camel.xml.io.XmlPullParserLocationException: Unexpected attribute '{}apiContextListing'\nin file:src/main/resources/OSGI-INF/blueprint/camel.xml, line 42, column 42:\n                       enableCORS=\"true\">\n                                        ^\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel-K Runtime 1.5.0 Release Note\nDESCRIPTION: YAML frontmatter that defines metadata for the Camel-K Runtime 1.5.0 release note. It specifies the URL path, publication date, content type, version number, title, category, milestone number, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-1.5.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-1.5.0/\"\ndate: 2020-12-01T13:01:58+01:00\ntype: release-note\nversion: \"1.5.0\"\ntitle: \"Camel-K Runtime release 1.5.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 7\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Blog Post\nDESCRIPTION: YAML configuration block defining metadata for the blog post including title, date, authors, categories, and preview text.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2023/01/ck_2022_results/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Camel K 2022 roadmap - retrospective\"\ndate: 2023-01-09\nauthors: [squakez]\ncategories: [\"Roadmap\", \"Camel K\"]\npreview: Quick review of Camel K development in 2022\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Quarkus 3.15.3 Release Note\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel Quarkus 3.15.3 release note. It specifies the URL, release and EOL dates, version number, title, category, milestone, and supported JDK versions.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.15.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.15.3/\"\ndate: 2025-03-10\neol: 2025-09-10\ntype: release-note\nversion: 3.15.3\ntitle: \"Camel Quarkus release 3.15.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 73\nkind: lts\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Transforming Blueprint XML to XML format with explicit format parameter\nDESCRIPTION: Command to transform OSGi Blueprint XML to Camel XML DSL with explicit XML format option.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/12/migrate-blueprint/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncamel transform route pom.xml --format=xml\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the acknowledgments page defining the title and URL path.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/misc/acknowledgments.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Acknowledgments\nurl: /acknowledgments\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Blog Post\nDESCRIPTION: YAML configuration block defining metadata for the blog post including title, date, authors, categories and preview text.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2022/04/camel-designer-atlasmap/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"VS Code AtlasMap integrated in Camel-Designer\"\ndate: 2022-04-19\nauthors: [brunoNetId]\ncategories: [\"Tooling\"]\npreview: \"VS Code AtlasMap integrated in Camel-Designer\"\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Camel Quarkus 3.7.0 Release Note\nDESCRIPTION: YAML metadata block that defines the properties of the Camel Quarkus 3.7.0 release note page. It includes URL path, release date, version number, title, category, milestone reference, and JDK compatibility information.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-3.7.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-3.7.0/\"\ndate: 2024-01-31\ntype: release-note\nversion: 3.7.0\ntitle: \"Camel Quarkus release 3.7.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 52\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Karavan 4.4.0 Release Notes\nDESCRIPTION: This YAML snippet defines the metadata for the Karavan 4.4.0 release notes blog post, including title, date, authors, categories, and preview text.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2024/03/camel-karavan-4.4.0/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Karavan 4.4.0: Beauty is variable\"\ndate: 2024-03-04\nauthors: [mgubaidullin]\ncategories: [\"Tooling\", \"Karavan\"]\npreview: \"Karavan 4.4.0: Release notes\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Camel-K Runtime 1.15.0 Release\nDESCRIPTION: This YAML frontmatter configuration sets up metadata for the Camel-K Runtime 1.15.0 release announcement. It specifies the URL, release date, version, title, and other relevant information for the release note.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-1.15.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-1.15.0/\"\ndate: 2022-10-13\ntype: release-note\nversion: \"1.15.0\"\ntitle: \"Camel-K Runtime release 1.15.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 19\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Building Camel Website with Yarn in Docker for Unix/Linux\nDESCRIPTION: Shell script command to run yarn commands inside a Docker container for Unix-like systems. This avoids local dependencies installation and propagates environment variables like GITHUB_TOKEN and CAMEL_ENV to the Docker container.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ ./yarn-in-docker.sh build-all\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the blog post specifying metadata like title, date, authors, categories and preview text.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/blog/2020/10/ApacheCon-at-Home-videos/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Recordings from ApacheCon @Home 2020\"\ndate: 2020-10-19T11:27:14+02:00\ndraft: false\nauthors: [\"zregvart\"]\ncategories: [\"Events\"]\npreview: \"If you missed some of the talks on the Camel/Integration or would like to revisit your favorites, video recordings from ApacheCon @Home 2020 are now available on The Apache Software Foundation YouTube channel.\"\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K 1.8.1 Release Metadata in YAML\nDESCRIPTION: This YAML frontmatter defines metadata for the Camel-K 1.8.1 release note page. It specifies the URL, release date, version, title, and other relevant information for the release.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.8.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.8.1/\"\ndate: 2022-02-28\ntype: release-note\nversion: \"1.8.1\"\ntitle: \"Camel-K 1.8.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 30\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Building the Website Content\nDESCRIPTION: Command to build the website content using Yarn. This requires the Antora UI theme to be built first.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K Runtime 1.7.0 Release Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the Camel-K Runtime 1.7.0 release documentation page. Includes URL path, release date, version information, title, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-1.7.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-1.7.0/\"\ndate: 2021-04-20\ntype: release-note\nversion: \"1.7.0\"\ntitle: \"Camel-K Runtime release 1.7.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 10\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel-K Runtime 1.13.0 Release Metadata in YAML\nDESCRIPTION: YAML front matter configuration block specifying the metadata for the Camel-K Runtime 1.13.0 release notes, including version, date, type and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-1.13.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-1.13.0/\"\ndate: 2022-04-19\ntype: release-note\nversion: \"1.13.0\"\ntitle: \"Camel-K Runtime release 1.13.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 17\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Building the Antora Camel UI Theme\nDESCRIPTION: Commands to navigate to the Antora UI directory and build the UI theme bundle. This generates the theme used by the website.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd antora-ui-camel\nyarn build\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K Runtime Release Note\nDESCRIPTION: YAML frontmatter metadata block defining the properties of the Camel-K Runtime 3.15.0 release note page, including URL path, release date, version, title and other metadata.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-3.15.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-3.15.0/\"\ndate: 2024-10-10\ntype: release-note\nversion: \"3.15.0\"\ntitle: \"Camel-K Runtime release 3.15.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 25\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K Runtime 3.2.3 Release Metadata in YAML\nDESCRIPTION: This YAML front matter defines metadata for the Camel-K Runtime 3.2.3 release announcement. It specifies the URL, release date, version, title, and other relevant information for the release note.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-3.2.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-3.2.3/\"\ndate: 2023-12-15\ntype: release-note\nversion: \"3.2.3\"\ntitle: \"Camel-K Runtime release 3.2.3\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 25\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Chocolatey with PowerShell on Windows\nDESCRIPTION: Command to install Chocolatey package manager using PowerShell on Windows. This allows for easy installation of required development tools.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n```\n\n----------------------------------------\n\nTITLE: Release Metadata Configuration for Camel-K Runtime 3.15.2\nDESCRIPTION: YAML front matter defining the release metadata for Camel-K Runtime 3.15.2, specifying the URL path, release date, version, title, category, milestone number and JDK compatibility requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k-runtime/release-3.15.2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-runtime-3.15.2/\"\ndate: 2025-02-01\ntype: release-note\nversion: \"3.15.2\"\ntitle: \"Camel-K Runtime release 3.15.2\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k-runtime\"\nmilestone: 25\njdk: [17]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel-K 1.2.1 Release Notes\nDESCRIPTION: YAML metadata block defining the properties of the Camel-K 1.2.1 release documentation page, including URL path, date, version, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.2.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.2.1/\"\ndate: 2020-11-27\ntype: release-note\nversion: \"1.2.1\"\ntitle: \"Camel-K 1.2.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 18\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K 1.6.1 Release Metadata in YAML\nDESCRIPTION: This YAML snippet defines metadata for the Camel-K 1.6.1 release. It specifies the URL, release date, version, title, and other relevant information for the release notes page.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.6.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.6.1/\"\ndate: 2021-10-27\ntype: release-note\nversion: \"1.6.1\"\ntitle: \"Camel-K 1.6.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 26\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel-K 1.9.1 Release Metadata in YAML\nDESCRIPTION: This YAML snippet defines the metadata for the Camel-K 1.9.1 release. It specifies the release URL, date, version, title, and other relevant information for documentation purposes.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/k/release-1.9.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/k-1.9.1/\"\ndate: 2022-05-13\ntype: release-note\nversion: \"1.9.1\"\ntitle: \"Camel-K 1.9.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-k\"\nmilestone: 32\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Kamelets 0.9.0 Release Notes\nDESCRIPTION: YAML frontmatter block defining metadata for the Kamelets 0.9.0 release note page. Includes URL path, publication date, version number, title and category information, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.9.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.9.0/\"\ndate: 2022-09-05\ntype: release-note\nversion: \"0.9.0\"\ntitle: \"Kamelets 0.9.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Kamelets Release Metadata in YAML\nDESCRIPTION: YAML frontmatter block defining metadata for the Kamelets 0.9.1 release documentation page. Specifies version, date, type and other key metadata properties.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-0.9.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-0.9.1/\"\ndate: 2022-10-13\ntype: release-note\nversion: \"0.9.1\"\ntitle: \"Kamelets 0.9.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Kamelets 4.6.0 Release Notes\nDESCRIPTION: The YAML frontmatter defines metadata for the Camel Kamelets 4.6.0 release notes page, including the URL path, release date, version number, title, and JDK requirements.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.6.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.6.0/\"\ndate: 2024-05-16\ntype: release-note\nversion: \"4.6.0\"\ntitle: \"Kamelets 4.6.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Kamelets 4.7.0 Release Metadata in YAML\nDESCRIPTION: This YAML snippet defines the metadata for the Camel Kamelets 4.7.0 release. It specifies the URL, release date, version, title, and supported JDK versions. This information is likely used for generating release documentation or updating a website.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.7.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.7.0/\"\ndate: 2024-07-18\ntype: release-note\nversion: \"4.7.0\"\ntitle: \"Kamelets 4.7.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel Kamelets 4.8.5 Release Note\nDESCRIPTION: This YAML frontmatter block defines metadata for the Camel Kamelets 4.8.5 release note. It specifies the URL, release date, version, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/kamelets/release-4.8.5.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/kamelets-4.8.5/\"\ndate: 2025-03-10\ntype: release-note\nversion: \"4.8.5\"\ntitle: \"Kamelets 4.8.5\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-kamelets\"\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel Karaf 4.9.0 Release Notes\nDESCRIPTION: YAML frontmatter defining metadata for the Camel Karaf 4.9.0 release documentation page. Includes version information, release date, JDK compatibility, and page categorization.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/karaf/release-4.9.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/karaf-4.9.0/\"\ndate: 2025-01-30\ntype: release-note\nversion: \"4.9.0\"\ntitle: \"Camel Karaf release 4.9.0\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-karaf\"\nmilestone: 4\njdk: [17,21]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Quarkus Release Metadata in YAML\nDESCRIPTION: YAML frontmatter defining metadata for Camel Quarkus release 1.8.1, including version number, release date, Java compatibility, and categorization details.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/q/release-1.8.1.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: \"/releases/q-1.8.1/\"\ndate: 2021-04-07\ntype: release-note\nversion: 1.8.1\ntitle: \"Camel Quarkus release 1.8.1\"\npreview: \"\"\nchangelog: \"\"\ncategory: \"camel-quarkus\"\nmilestone: 14\njdk: [11]\n---\n```\n\n----------------------------------------\n\nTITLE: Java DSL with Lambda Support\nDESCRIPTION: Example demonstrating the new Java 8 functional/lambda support in Camel's Java DSL, as shown in camel-example-java8\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.18.0.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// Refer to camel-example-java8 for implementation details\n```\n\n----------------------------------------\n\nTITLE: XML Context Configuration\nDESCRIPTION: Examples of XSD schema documentation for <camelContext> and related configuration elements\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.18.0.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<camelContext>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Camel 2.25.3 Release Notes\nDESCRIPTION: YAML metadata block defining properties of the Camel 2.25.3 release notes page including version details, dates, and configuration settings.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-2.25.3.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2020-12-24\neol: 2021-12-31\ndraft: false\ntype: release-note\nversion: 2.25.3\ntitle: \"Release 2.25.3\"\npreview: \"New patch release 2.25.3\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12348722\ncategory: camel\nkind: legacy\njdk: [8]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Camel 3.0.0 Release Notes\nDESCRIPTION: This YAML block defines metadata for the Camel 3.0.0 release notes. It specifies the release date, version, title, and other relevant information for the release documentation.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.0.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2019-11-28\ndraft: false \ntype: release-note\nversion: 3.0.0\ntitle: \"Release 3.0.0\"\npreview: \"New major release\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12345672\ncategory: camel\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Camel 3.6.0 Release Note\nDESCRIPTION: YAML configuration block defining metadata for the Camel 3.6.0 release note page, including version information, release date, and JDK compatibility.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/release-3.6.0.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndate: 2020-09-20\ndraft: false\ntype: release-note\nversion: 3.6.0\ntitle: \"Release 3.6.0\"\npreview: \"New patch release 3.6.0\"\napiBreaking: \"\"\nknownIssues: \"\"\njiraVersionId: 12348664\ncategory: camel\njdk: [8,11]\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Releases Page\nDESCRIPTION: Basic frontmatter configuration in YAML format defining the page title for a releases archive page.\nSOURCE: https://github.com/apache/camel-website/blob/main/content/releases/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Releases\"\n---\n\n# Apache Camel releases archive\n```\n\n----------------------------------------\n\nTITLE: Running All Validation Checks for Camel Website\nDESCRIPTION: Command to run all validation checks for the Camel website, including Antora xref validation, HTML link checking, and HTML validation. The CAMEL_ENV=production flag ensures all checks are executed.\nSOURCE: https://github.com/apache/camel-website/blob/main/README.md#2025-04-08_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ CAMEL_ENV=production yarn checks\n```"
  }
]