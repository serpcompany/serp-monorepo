[
  {
    "owner": "bchavez",
    "repo": "bogus",
    "content": "TITLE: Generating Complex Test Data with Bogus in C#\nDESCRIPTION: Comprehensive example demonstrating Bogus's capabilities for generating realistic test data. Shows how to create test orders and users with various data types, custom rules, context-aware property generation, and deterministic IDs.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum Gender\n{\n    Male,\n    Female\n}\n\n//Set the randomizer seed if you wish to generate repeatable data sets.\nRandomizer.Seed = new Random(8675309);\n\nvar fruit = new[] { \"apple\", \"banana\", \"orange\", \"strawberry\", \"kiwi\" };\n\nvar orderIds = 0;\nvar testOrders = new Faker<Order>()\n    //Ensure all properties have rules. By default, StrictMode is false\n    //Set a global policy by using Faker.DefaultStrictMode\n    .StrictMode(true)\n    //OrderId is deterministic\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    //Pick some fruit from a basket\n    .RuleFor(o => o.Item, f => f.PickRandom(fruit))\n    //A random quantity from 1 to 10\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 10))\n    //A nullable int? with 80% probability of being null.\n    //The .OrNull extension is in the Bogus.Extensions namespace.\n    .RuleFor(o => o.LotNumber, f => f.Random.Int(0, 100).OrNull(f, .8f));\n\n\nvar userIds = 0;\nvar testUsers = new Faker<User>()\n    //Optional: Call for objects that have complex initialization\n    .CustomInstantiator(f => new User(userIds++, f.Random.Replace(\"###-##-####\")))\n\n    //Use an enum outside scope.\n    .RuleFor(u => u.Gender, f => f.PickRandom<Gender>())\n\n    //Basic rules using built-in generators\n    .RuleFor(u => u.FirstName, (f, u) => f.Name.FirstName(u.Gender))\n    .RuleFor(u => u.LastName, (f, u) => f.Name.LastName(u.Gender))\n    .RuleFor(u => u.Avatar, f => f.Internet.Avatar())\n    .RuleFor(u => u.UserName, (f, u) => f.Internet.UserName(u.FirstName, u.LastName))\n    .RuleFor(u => u.Email, (f, u) => f.Internet.Email(u.FirstName, u.LastName))\n    .RuleFor(u => u.SomethingUnique, f => $\"Value {f.UniqueIndex}\")\n\n    //Use a method outside scope.\n    .RuleFor(u => u.CartId, f => Guid.NewGuid())\n    //Compound property with context, use the first/last name properties\n    .RuleFor(u => u.FullName, (f, u) => u.FirstName + \" \" + u.LastName)\n    //And composability of a complex collection.\n    .RuleFor(u => u.Orders, f => testOrders.Generate(3).ToList())\n    //Optional: After all rules are applied finish with the following action\n    .FinishWith((f, u) =>\n        {\n            Console.WriteLine(\"User Created! Id={0}\", u.Id);\n        });\n\nvar user = testUsers.Generate();\nConsole.WriteLine(user.DumpAsJson());\n\n/* OUTPUT:\nUser Created! Id=0\n *\n{\n  \"Id\": 0,\n  \"FirstName\": \"Audrey\",\n  \"LastName\": \"Spencer\",\n  \"FullName\": \"Audrey Spencer\",\n  \"UserName\": \"Audrey_Spencer72\",\n  \"Email\": \"Audrey82@gmail.com\",\n  \"Avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg\",\n  \"CartId\": \"863f9462-5b88-471f-b833-991d68db8c93\",\n  \"SSN\": \"923-88-4231\",\n  \"Gender\": 0,\n  \"Orders\": [\n    {\n      \"OrderId\": 0,\n      \"Item\": \"orange\",\n      \"Quantity\": 8\n    },\n    {\n      \"OrderId\": 1,\n      \"Item\": \"banana\",\n      \"Quantity\": 2\n    },\n    {\n      \"OrderId\": 2,\n      \"Item\": \"kiwi\",\n      \"Quantity\": 9\n    }\n  ]\n} */\n```\n\n----------------------------------------\n\nTITLE: Generating a List of Fake Email Addresses using LINQ in C#\nDESCRIPTION: Shows how to combine Bogus with LINQ and Enumerable.Range() to generate a list of fake email addresses. This technique is useful for creating collections of fake data efficiently.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nvar faker = new Faker(\"en\");\n\nvar emailList = Enumerable.Range(1, 5)\n      .Select(_ => faker.Internet.Email())\n      .ToList();\n\n//OUTPUT:\nGustave83@hotmail.com    \nEvie33@gmail.com \nAbby_Wilkinson@yahoo.com \nCecilia.Hahn@yahoo.com   \nJasen.Waelchi85@gmail.com\n```\n\n----------------------------------------\n\nTITLE: Using Bogus DataSets Directly in C#\nDESCRIPTION: Demonstrates how to use Bogus DataSets directly without the fluent syntax. This approach instantiates specific data generators (Randomizer and Lorem) and uses them to populate an Order object.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Using_DataSets_Directly()\n{\n   var random = new Bogus.Randomizer();\n   var lorem = new Bogus.DataSets.Lorem(\"en\");\n   var o = new Order()\n       {\n           OrderId = random.Number(1, 100),\n           Item = lorem.Sentence(),\n           Quantity = random.Number(1, 10)\n       };\n   o.Dump();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Seed Determinism for Fake Order Generation in C#\nDESCRIPTION: Shows how to use local seed determinism in Bogus to generate consistent fake Order data that is less affected by code changes. This approach is recommended for unit testing scenarios.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n    \nOrder SeededOrder(int seed){\n   return orderFaker.UseSeed(seed).Generate();\n}\n\nvar orders = Enumerable.Range(1, 5)\n   .Select(SeededOrder)\n   .ToList();\n\norders.Dump();\n```\n\n----------------------------------------\n\nTITLE: Using Faker<T> Inheritance in Bogus\nDESCRIPTION: Shows how to create a custom Faker class by inheriting from Faker<T>. This approach creates a specialized OrderFaker class that encapsulates the rules for generating Order instances with random data.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderFaker : Faker<Order> {\n   public OrderFaker() {\n      RuleFor(o => o.OrderId, f => f.Random.Number(1, 100));\n      RuleFor(o => o.Item, f => f.Lorem.Sentence());\n      RuleFor(o => o.Quantity, f => f.Random.Number(1, 10));\n   }\n}\n\npublic void Using_FakerT_Inheritance()\n{\n   var orderFaker = new OrderFaker();\n   var o = orderFaker.Generate();\n   o.Dump();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Seed Determinism for Fake Order Generation in C#\nDESCRIPTION: Demonstrates how to use global seed determinism in Bogus to generate consistent fake Order data across multiple program executions. This approach is simple but can be affected by code changes.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nRandomizer.Seed = new Random(1338);\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n\norderFaker.Generate(5).Dump();\n```\n\n----------------------------------------\n\nTITLE: Generating Formatted Strings with Randomizer in C#\nDESCRIPTION: Shows how to use the Replace method of Bogus.Randomizer to generate formatted strings with random numbers, letters, or a combination of both. Examples include creating an SSN, a code, and a serial number.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void Create_an_SSN()\n{\n    var ssn = new Bogus.Randomizer().Replace(\"###-##-####\");\n    ssn.Dump();\n\n    var code = new Randomizer().Replace(\"##? ??? ####\");\n    code.Dump();\n\n    var serial = new Randomizer().Replace(\"**-****\");\n    serial.Dump();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context-Related Person in C#\nDESCRIPTION: Demonstrates how to generate a Person object with context-relevant properties using Bogus. This includes generating an email that appears to belong to the person based on their name.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void Create_Context_Related_Person()\n{\n    var person = new Bogus.Person();\n\n    person.Dump();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Fake Orders with Bulk Rules in C#\nDESCRIPTION: Demonstrates how to use the .Rules() method to specify multiple rules for generating fake Order objects in a concise manner. This approach is useful when StrictMode is set to false.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npublic void create_rules_for_an_object_the_easy_way()\n{\n    var faker = new Faker<Order>()\n        .StrictMode(false)\n        .Rules((f, o) =>\n            {\n                o.Quantity = f.Random.Number(1, 4);\n                o.Item = f.Commerce.Product();\n                o.OrderId = 25;\n            });\n    Order o = faker.Generate();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Constant Values with RuleFor in C#\nDESCRIPTION: Shows how to define a constant value for a property using the RuleFor method. This is a concise way to set fixed values on generated objects.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nRuleFor(x => x.Prop, constantValue)\n```\n\n----------------------------------------\n\nTITLE: Parsing Handlebars Templates with Parameters in C#\nDESCRIPTION: Shows how to use the Parse method of Faker with parameters in handlebars templates. This example demonstrates generating random first names for specific genders.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void HandlebarWithParameters()\n{\n    var faker = new Faker();\n    var randomName = faker.Parse(\"{{name.firstname(Female)}}, {{name.firstname(Male)}}\");\n    randomName.Dump();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bogus with Faker Facade in C#\nDESCRIPTION: Shows how to use Bogus without fluent syntax by using the Faker facade. This approach creates an instance of Faker with a specified locale and directly accesses its properties to populate an Order object.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Using_The_Faker_Facade()\n{\n   var faker = new Faker(\"en\");\n   var o = new Order()\n       {\n           OrderId = faker.Random.Number(1, 100),\n           Item = faker.Lorem.Sentence(),\n           Quantity = faker.Random.Number(1, 10)\n       };\n   o.Dump();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Seeds for Faker and DataSets in C#\nDESCRIPTION: Demonstrates how to set up local seeds for the Faker facade and individual DataSets in Bogus. This approach allows for fine-grained control over deterministic behavior in specific parts of the fake data generation process.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nvar faker = new Faker(\"en\")\n                {\n                   Random = new Randomizer(1338)\n                };\nvar lorem = new Bogus.DataSets.Lorem(\"en\"){\n                   Random = new Randomizer(1338)\n                };\nfaker.Lorem.Word().Dump();\nlorem.Word().Dump();\n\n//OUTPUT:\nminus\nminus\n```\n\n----------------------------------------\n\nTITLE: Setting Simple Rules with Direct Values\nDESCRIPTION: Demonstrates simplified rule creation without lambda expressions for simple values\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n.RuleFor(x.Item, \"foo\")\n```\n\n----------------------------------------\n\nTITLE: Using OrNull Extension in C#\nDESCRIPTION: Example showing how to use the .OrNull extension method to create randomly null values in Bogus rules\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n.RuleFor(x=>x.Prop, f=>f.Random.Word().OrNull(f))\n```\n\n----------------------------------------\n\nTITLE: Parsing Handlebars Templates with Faker in C#\nDESCRIPTION: Demonstrates how to use the Parse method of Faker to generate random data based on handlebars templates. This example shows generating a random name using the name dataset.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void Handlebar()\n{\n    var faker = new Faker();\n    var randomName = faker.Parse(\"{{name.lastName}}, {{name.firstName}} {{name.suffix}}\");\n    randomName.Dump();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deterministic Dates and Times in C#\nDESCRIPTION: Demonstrates how to set up deterministic date and time generation in Bogus by setting a seed value and a time reference. The example shows configuration for both the Faker<T> generic class and the Faker facade.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n// Faker[T]: Set a local seed and a time reference\nvar fakerT = new Faker<Order>()\n                 .UseSeed(1338)\n                 .UseDateTimeReference(DateTime.Parse(\"1/1/1980\"))\n                 .RuleFor(o => o.SoonValue,   f => f.Date.Soon())\n                 .RuleFor(o => o.RecentValue, f => f.Date.Recent());\nfakerT.Generate().Dump();\n//  { \"SoonValue\":   \"1980-01-01T17:33:05\",\n//    \"RecentValue\": \"1979-12-31T14:07:31\" }\n\n// Faker: Set a local seed and a time reference\nvar faker = new Faker\n   {\n      Random = new Randomizer(1338),\n      DateTimeReference = DateTime.Parse(\"1/1/1980\")\n   };\nfaker.Date.Soon();   // \"1980-01-01T17:33:05\"\nfaker.Date.Recent(); // \"1979-12-31T14:07:31\"\n```\n\n----------------------------------------\n\nTITLE: Using Generate with Index Parameter\nDESCRIPTION: Shows how to use the Generate method with an index parameter for creating multiple objects\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nf => f.Generate(n, i => ...)\n```\n\n----------------------------------------\n\nTITLE: Importing Gaussian Distribution Methods in C#\nDESCRIPTION: Shows how to import the Gaussian distribution extension methods for Bogus, which provide functionality for generating random values based on normal distributions for various numeric types (int, float, double, decimal).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Distributions.Gaussian;\n```\n\n----------------------------------------\n\nTITLE: Using Faker<T> with F# Record Types\nDESCRIPTION: Shows how to use the Faker<T> class with immutable F# record types using CustomInstantiator to generate the records. This approach is useful for more complex data generation scenarios.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_32\n\nLANGUAGE: fsharp\nCODE:\n```\ntype Customer = { FirstName : string\n                  LastName : string\n                  Age : int\n                  Title : string }\n\nlet customerFaker =\n    Bogus\n        .Faker<Customer>()\n        .CustomInstantiator(fun f ->\n             { FirstName = f.Name.FirstName()\n               LastName  = f.Name.LastName()\n               Age       = f.Random.Number(18,60)\n               Title     = f.Name.JobTitle() })\n\ncustomerFaker.Generate() |> Dump |> ignore\n\n(* OUTPUT:\n  FirstName = \"Sasha\"\n  LastName = \"Roberts\"\n  Age = 20;\n  Title = \"Internal Security Specialist\"\n*)\n```\n\n----------------------------------------\n\nTITLE: Asserting Configuration Validity in C#\nDESCRIPTION: Method for validating faker configuration in unit testing scenarios. Helps ensure that all rules are properly set up before generating data.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nFaker<T>.AssertConfigurationIsValid\n```\n\n----------------------------------------\n\nTITLE: Generating Random Hashes and Strings in C#\nDESCRIPTION: Adds methods to generate random hashes of specified length and strings with specified character sets.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nRandomizer.Hash()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nRandomizer.String2()\n```\n\n----------------------------------------\n\nTITLE: Using Faker<T> with Mutable F# Classes\nDESCRIPTION: Demonstrates how to use the Faker<T> class with mutable F# classes. This example shows both individual rule definition using RuleFor and bulk rule definition using Rules.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_33\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Bogus\ntype Customer() =\n  member val FirstName = \"\" with get, set\n  member val LastName = \"\" with get, set\n  member val Age = 0 with get, set\n  member val Title = \"\" with get, set\n\nlet faker = \n        Faker<Customer>()\n          //Make a rule for each property\n          .RuleFor( (fun c -> c.FirstName), fun (f:Faker) -> f.Name.FirstName() )\n          .RuleFor( (fun c -> c.LastName), fun (f:Faker) -> f.Name.LastName() )\n\n          //Or, alternatively, in bulk with .Rules()\n          .Rules( fun f c -> \n                    c.Age <- f.Random.Int(18,35) \n                    c.Title <- f.Name.JobTitle() )\n  \nfaker.Generate() |> Dump |> ignore\n\n(* OUTPUT:\n  FirstName: Jarrell\n  LastName: Tremblay\n  Age: 32\n  Title: Senior Web Designer\n*)\n```\n\n----------------------------------------\n\nTITLE: Using Implicit and Explicit Type Conversion with Faker in C#\nDESCRIPTION: Demonstrates how to use implicit and explicit type conversion with Faker<T> to generate test data. This example shows creating Order objects using both conversion methods.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderFaker = new Faker<Order>()\n                     .RuleFor(o => o.OrderId, f => f.IndexVariable++)\n                     .RuleFor(o => o.Item, f => f.Commerce.Product())\n                     .RuleFor(o => o.Quantity, f => f.Random.Number(1,3));\n\nOrder testOrder1 = orderFaker;\nOrder testOrder2 = orderFaker;\ntestOrder1.Dump();\ntestOrder2.Dump();\n\n//Explicit works too!\nvar anotherOrder = (Order)orderFaker;\n```\n\n----------------------------------------\n\nTITLE: Using Hashids Encoding with RuleFor in C#\nDESCRIPTION: Demonstrates integration with Hashids.net for generating encoded hash IDs. This allows for creating unique, non-sequential IDs for database entities.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nRuleFor(x => x.Id, f => f.Hashids.Encode())\n```\n\n----------------------------------------\n\nTITLE: Using Faker Facade with F# Record Types\nDESCRIPTION: Demonstrates how to use the Faker facade to generate data for immutable F# record types. This approach uses the direct API to populate individual fields of the record.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_31\n\nLANGUAGE: fsharp\nCODE:\n```\ntype Customer = { FirstName : string\n                  LastName : string\n                  Age : int\n                  Title : string }\n\n//The faker facade\nlet f = Faker();\n\nlet generator() = \n   { FirstName = f.Name.FirstName()\n     LastName  = f.Name.LastName()\n     Age       = f.Random.Number(18,60)\n     Title     = f.Name.JobTitle() }\n     \ngenerator() |> Dump |> ignore\n\n(* OUTPUT:\n  FirstName = \"Russell\"\n  LastName = \"Nader\"\n  Age = 34\n  Title = \"Senior Web Officer\"\n*)\n```\n\n----------------------------------------\n\nTITLE: Using RuleFor with Type-Based Rules in C#\nDESCRIPTION: Shows how to set default rules for a specific type in a class using RuleForType. This is useful for large classes with many properties of the same type.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nRuleForType(typeof(string))\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example in VB.NET\nDESCRIPTION: Shows a basic example of using Bogus with VB.NET. Demonstrates how to define a customer class and generate fake data for it using both RuleFor and Rules methods.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_34\n\nLANGUAGE: vbnet\nCODE:\n```\nImports Bogus\n\nPublic Class Customer\n    Public Property FirstName() As String\n    Public Property LastName() As String\n    Public Property Age() As Integer\n    Public Property Title() As String\nEnd Class\n\nSub Main\n    Dim faker As New Faker(Of Customer)\n    \n    '-- Make a rule for each property\n    faker.RuleFor( Function(c) c.FirstName, Function(f) f.Name.FirstName) _\n         .RuleFor( Function(c) c.LastName, Function(f) f.Name.LastName) _\n         _\n         .Rules( Sub(f, c)   '-- Or, alternatively, in bulk with .Rules() \n                   c.Age = f.Random.Int(18,35) \n                   c.Title = f.Name.JobTitle()\n                 End Sub )\n            \n    faker.Generate.Dump\nEnd Sub\n\n' OUTPUT:\n' FirstName: Jeremie \n' LastName: Mills \n' Age: 32 \n' Title: Quality Supervisor \n```\n\n----------------------------------------\n\nTITLE: Importing Norway Extension Methods in C#\nDESCRIPTION: Shows how to import the Norway extension methods for Bogus, which provide functionality for generating Norway-specific identification numbers like the Fødselsnummer (Norwegian national identity number).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Norway;\n```\n\n----------------------------------------\n\nTITLE: Installing Bogus via NuGet Package Manager\nDESCRIPTION: Command to install the Bogus package using the NuGet Package Manager in PowerShell. Requires minimum .NET Standard 1.3, .NET Standard 2.0, or .NET Framework 4.0.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Bogus\n```\n\n----------------------------------------\n\nTITLE: Generating Various System Identifiers in C#\nDESCRIPTION: Adds methods to generate various system identifiers including Android IDs, Apple Push Tokens, and BlackBerry PINs.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.AndroidId()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.ApplePushToken()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.BlackBerryPin()\n```\n\n----------------------------------------\n\nTITLE: Importing Romania Extension Methods in C#\nDESCRIPTION: Shows how to import the Romania extension methods for Bogus, which provide functionality for generating Romania-specific identification numbers like CNP (Romanian Personal Identification number).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Romania;\n```\n\n----------------------------------------\n\nTITLE: Using UniqueIndex for Generating Unique Values in C#\nDESCRIPTION: Demonstrates accessing the unique index property, which is useful for composing property values that require uniqueness across generated instances.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nf.UniqueIndex\n```\n\n----------------------------------------\n\nTITLE: Setting Korean Locale in Bogus for Lorem Text Generation\nDESCRIPTION: Demonstrates how to configure Bogus to use the Korean locale (ko) for generating lorem ipsum text. This example creates a Lorem dataset with a specific locale and outputs a randomly generated sentence in Korean.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void With_Korean_Locale()\n{\n    var lorem = new Bogus.DataSets.Lorem(locale: \"ko\");\n    Console.WriteLine(lorem.Sentence(5));\n}\n\n/* 국가는 무상으로 행위로 의무를 구성하지 신체의 처벌받지 예술가의 경우와 */\n```\n\n----------------------------------------\n\nTITLE: Generating IBAN Codes for Specific Countries in C#\nDESCRIPTION: Adds a method to generate IBAN codes for specific countries using an ISO3166 country code parameter. Throws an exception if the country code is not supported.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nFinance.Iban(countryCode)\n```\n\n----------------------------------------\n\nTITLE: Ignoring Properties in StrictMode in C#\nDESCRIPTION: Shows how to exclude specific properties or fields from StrictMode validation. This is useful when certain properties should be initialized outside of Bogus.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nFaker[Order].Ignore(o => o.OrderId)\n```\n\n----------------------------------------\n\nTITLE: Generating Unicode Usernames in C#\nDESCRIPTION: Adds a method to generate usernames that preserve Unicode characters, as opposed to the default ASCII-only usernames.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nInternet.UserNameUnicode()\n```\n\n----------------------------------------\n\nTITLE: Generating GB Registration Plates in C#\nDESCRIPTION: Adds a method to generate GB vehicle registration plates using the Bogus.Extensions.UnitedKingdom extension namespace.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nBogus.DataSets.Vehicle.GbRegistrationPlate()\n```\n\n----------------------------------------\n\nTITLE: Using Generate Helper for Creating Lists in C#\nDESCRIPTION: Demonstrates the fluent helper method for generating lists of fake data. This allows for concise population of List<T> properties with generated values.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nf => f.Generate(count, ()=> f.Phone.PhoneNumber())\n```\n\n----------------------------------------\n\nTITLE: Importing Poland Extension Methods in C#\nDESCRIPTION: Shows how to import the Poland extension methods for Bogus, which provide functionality for generating Poland-specific identification numbers like PESEL, NIP, and REGON.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Poland;\n```\n\n----------------------------------------\n\nTITLE: Generating Valid UTF-16 Strings in C#\nDESCRIPTION: Adds a method to generate technically valid Unicode strings with paired high/low surrogates.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nRandomizer.Utf16String\n```\n\n----------------------------------------\n\nTITLE: Using Rules Method for Quick Rule Creation\nDESCRIPTION: Demonstrates the shorthand syntax for creating rules using the Rules method\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nnew Faker[T].Rules((f, t) => ...)\n```\n\n----------------------------------------\n\nTITLE: Importing Sweden Extension Methods in C#\nDESCRIPTION: Shows how to import the Sweden extension methods for Bogus, which provide functionality for generating Sweden-specific identification numbers like Personnummer (Swedish national identity number) and Samordningsnummer (Swedish coordination number).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Sweden;\n```\n\n----------------------------------------\n\nTITLE: Generating Picsum Image URLs in C#\nDESCRIPTION: Adds a method to generate image URLs from the Picsum Photos service as a faster alternative to Lorem Pixel.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nf.Image.PicsumUrl\n```\n\n----------------------------------------\n\nTITLE: Running Bogus GettingStarted Example using .NET CLI\nDESCRIPTION: Series of dotnet CLI commands to restore dependencies, build and run the GettingStarted example project that demonstrates Bogus fake data generation functionality.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Examples/GettingStarted/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet restore\\ndotnet build\\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Importing Portugal Extension Methods in C#\nDESCRIPTION: Shows how to import the Portugal extension methods for Bogus, which provide functionality for generating Portugal-specific identification numbers like NIF (Número de Identificação Fiscal) and NIPC (Número de Identificação de Pessoa Colectiva).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Portugal;\n```\n\n----------------------------------------\n\nTITLE: Generating Lorem Flickr Image URLs in C#\nDESCRIPTION: Adds a method to generate image URLs from the Lorem Flickr image service.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nf.Images.LoremFlickrUrl()\n```\n\n----------------------------------------\n\nTITLE: Running EF Core Seed Database Example\nDESCRIPTION: A series of dotnet CLI commands to set up, migrate, and run the EF Core seed database example using Bogus.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Examples/EFCoreSeedDb/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet restore\ndotnet build\ndotnet ef migrations add InitialCreate\ndotnet ef database update\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Importing Belgium Extension Methods in C#\nDESCRIPTION: Shows how to import the Belgium extension methods for Bogus, which provides functionality for generating Belgium-specific identification numbers like the Rijksregisternummer/Numéro Nationale.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Belgium;\n```\n\n----------------------------------------\n\nTITLE: Generating EAN-8 and EAN-13 Product Barcodes in C#\nDESCRIPTION: Adds methods to generate EAN-8 and EAN-13 product barcode numbers.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nf.Commerce.Ean8\n```\n\nLANGUAGE: csharp\nCODE:\n```\nf.Commerce.Ean13\n```\n\n----------------------------------------\n\nTITLE: Importing United States Extension Methods in C#\nDESCRIPTION: Shows how to import the United States extension methods for Bogus, which provide functionality for generating US-specific identification numbers like Social Security Number (SSN) and Employer Identification Number (EIN).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.UnitedStates;\n```\n\n----------------------------------------\n\nTITLE: Importing Denmark Extension Methods in C#\nDESCRIPTION: Shows how to import the Denmark extension methods for Bogus, which provide functionality for generating Denmark-specific identification numbers like the CPR (Danish Personal Identification number).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Denmark;\n```\n\n----------------------------------------\n\nTITLE: Importing United Kingdom Extension Methods in C#\nDESCRIPTION: Shows how to import the United Kingdom extension methods for Bogus, which provide functionality for generating UK-specific data like vehicle registration plates, sort codes, National Insurance numbers, VAT numbers, and UK country names.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.UnitedKingdom;\n```\n\n----------------------------------------\n\nTITLE: Importing Finland Extension Methods in C#\nDESCRIPTION: Shows how to import the Finland extension methods for Bogus, which provide functionality for generating Finland-specific identification numbers like the Henkilötunnus (Finnish personal identity code).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Finland;\n```\n\n----------------------------------------\n\nTITLE: Importing Italy Extension Methods in C#\nDESCRIPTION: Shows how to import the Italy extension methods for Bogus, which provide functionality for generating Italy-specific identification numbers like the Codice Fiscale (Italian tax code).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Italy;\n```\n\n----------------------------------------\n\nTITLE: Generating Employer Identification Numbers in C#\nDESCRIPTION: Adds a method to generate employer identification numbers (EIN).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nCompany.Ein()\n```\n\n----------------------------------------\n\nTITLE: Importing Canada Extension Methods in C#\nDESCRIPTION: Shows how to import the Canada extension methods for Bogus, which provide functionality for generating Canada-specific identification numbers like the Social Insurance Number (SIN).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Canada;\n```\n\n----------------------------------------\n\nTITLE: Running Bogus Extension Example with .NET Core\nDESCRIPTION: Command sequence to execute the Bogus extension example project, which demonstrates custom fake data generation.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Examples/ExtendingBogus/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n> dotnet run\n```\n\n----------------------------------------\n\nTITLE: Importing Brazil Extension Methods in C#\nDESCRIPTION: Shows how to import the Brazil extension methods for Bogus, which provide functionality for generating Brazil-specific identification numbers like CPF (Cadastro de Pessoas Físicas) and CNPJ (Cadastro Nacional da Pessoa Jurídica).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/README.md#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing Bogus.Extensions.Brazil;\n```\n\n----------------------------------------\n\nTITLE: Generating UK National Insurance Numbers in C#\nDESCRIPTION: Adds a method to generate UK National Insurance Numbers using the Bogus.Extensions.UnitedKingdom extension namespace.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nf.Finance.Nino()\n```\n\n----------------------------------------\n\nTITLE: Generating Random GUIDs in C#\nDESCRIPTION: Adds a method to generate random GUIDs for better discoverability.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/HISTORY.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nf.Random.Guid()\n```\n\n----------------------------------------\n\nTITLE: Configuring Fake Data Collections in Bogus Library\nDESCRIPTION: This JSON configuration defines all data sources used by the Bogus library to generate fake data. It includes structured collections for addresses, applications, business information, phone formats, commerce data, company details, database terminology, date formats, and financial information including currency codes with their symbols.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 3],\n    city: [Array String; 4],\n    city_prefix: [Array String; 7],\n    city_suffix: [Array String; 19],\n    country: [Array String; 244],\n    country_code: [Array String; 249],\n    country_code_alpha_3: [Array String; 250],\n    county: [Array String; 6],\n    default_country: [Array String; 1],\n    direction: [Array String; 8],\n    direction_abbr: [Array String; 8],\n    postcode: [Array String; 2],\n    secondary_address: [Array String; 2],\n    state: [Array String; 50],\n    state_abbr: [Array String; 50],\n    street_address: [Array String; 1],\n    street_name: [Array String; 2],\n    street_suffix: [Array String; 225],\n    time_zone: [Array String; 143]\n  },\n  app: {\n    author: [Array String; 2],\n    name: [Array String; 62],\n    version: [Array String; 5]\n  },\n  business: {\n    credit_card_expiry_dates: [Array String; 4],\n    credit_card_numbers: [Array String; 4],\n    credit_card_types: [Array String; 4]\n  },\n  cell_phone: {\n    formats: [Array String; 4]\n  },\n  commerce: {\n    color: [Array String; 31],\n    department: [Array String; 22],\n    product_description: [Array String; 12],\n    product_name: {\n      adjective: [Array String; 17],\n      material: [Array String; 11],\n      product: [Array String; 24]\n    }\n  },\n  company: {\n    adjective: [Array String; 100],\n    bs_adjective: [Array String; 65],\n    bs_noun: [Array String; 45],\n    bs_verb: [Array String; 60],\n    descriptor: [Array String; 101],\n    name: [Array String; 3],\n    noun: [Array String; 104],\n    suffix: [Array String; 4]\n  },\n  database: {\n    collation: [Array String; 7],\n    column: [Array String; 14],\n    engine: [Array String; 6],\n    type: [Array String; 24]\n  },\n  date: {\n    month: {\n      abbr: [Array String; 12],\n      abbr_context: [Array String; 12],\n      wide: [Array String; 12],\n      wide_context: [Array String; 12]\n    },\n    weekday: {\n      abbr: [Array String; 7],\n      abbr_context: [Array String; 7],\n      wide: [Array String; 7],\n      wide_context: [Array String; 7]\n    }\n  },\n  finance: {\n    account_type: [Array String; 8],\n    credit_card: {\n      american_express: [Array String; 2],\n      diners_club: [Array String; 3],\n      discover: [Array String; 6],\n      instapayment: [Array String; 1],\n      jcb: [Array String; 3],\n      laser: [Array String; 8],\n      maestro: [Array String; 14],\n      mastercard: [Array String; 2],\n      solo: [Array String; 3],\n      switch: [Array String; 3],\n      visa: [Array String; 2]\n    },\n    currency: [\n      {\n        code: AED,\n        name: UAE Dirham,\n        symbol: \n      },\n      {\n        code: AFN,\n        name: Afghani,\n        symbol: ؋\n      },\n      {\n        code: ALL,\n        name: Lek,\n        symbol: Lek\n      },\n      {\n        code: AMD,\n        name: Armenian Dram,\n        symbol: \n      },\n      {\n        code: ANG,\n        name: Netherlands Antillian Guilder,\n        symbol: ƒ\n      },\n      {\n        code: AOA,\n        name: Kwanza,\n        symbol: \n      },\n      {\n        code: ARS,\n        name: Argentine Peso,\n        symbol: $\n      },\n      {\n        code: AUD,\n        name: Australian Dollar,\n        symbol: $\n      },\n      {\n        code: AWG,\n        name: Aruban Guilder,\n        symbol: ƒ\n      },\n      {\n        code: AZN,\n        name: Azerbaijanian Manat,\n        symbol: ман\n      },\n      {\n        code: BAM,\n        name: Convertible Marks,\n        symbol: KM\n      },\n      {\n        code: BBD,\n        name: Barbados Dollar,\n        symbol: $\n      },\n      {\n        code: BDT,\n        name: Taka,\n        symbol: \n      },\n      {\n        code: BGN,\n        name: Bulgarian Lev,\n        symbol: лв\n      },\n      {\n        code: BHD,\n        name: Bahraini Dinar,\n        symbol: \n      },\n      {\n        code: BIF,\n        name: Burundi Franc,\n        symbol: \n      },\n      {\n        code: BMD,\n        name: Bermudian Dollar (customarily known as Bermuda Dollar),\n        symbol: $\n      },\n      {\n        code: BND,\n        name: Brunei Dollar,\n        symbol: $\n      },\n      {\n        code: BOB,\n        name: Boliviano boliviano,\n        symbol: Bs\n      },\n      {\n        code: BRL,\n        name: Brazilian Real,\n        symbol: R$\n      },\n      {\n        code: BSD,\n        name: Bahamian Dollar,\n        symbol: $\n      },\n      {\n        code: BWP,\n        name: Pula,\n        symbol: P\n      },\n      {\n        code: BYR,\n        name: Belarussian Ruble,\n        symbol: p.\n      },\n      {\n        code: BZD,\n        name: Belize Dollar,\n        symbol: BZ$\n      },\n      {\n        code: CAD,\n        name: Canadian Dollar,\n        symbol: $\n      },\n      {\n        code: CDF,\n        name: Congolese Franc,\n        symbol: \n      },\n      {\n        code: CHF,\n        name: Swiss Franc,\n        symbol: CHF\n      },\n      {\n        code: CLP,\n        name: Chilean Peso,\n        symbol: $\n      },\n      {\n        code: CNY,\n        name: Yuan Renminbi,\n        symbol: ¥\n      },\n      {\n        code: COP,\n        name: Colombian Peso,\n        symbol: $\n      },\n      {\n        code: CRC,\n        name: Costa Rican Colon,\n        symbol: ₡\n      },\n      {\n        code: CUP,\n        name: Cuban Peso,\n        symbol: ₱\n      },\n      {\n        code: CUC,\n        name: Cuban Peso Convertible,\n        symbol: $\n      },\n      {\n        code: CVE,\n        name: Cape Verde Escudo,\n        symbol: \n      },\n      {\n        code: CZK,\n        name: Czech Koruna,\n        symbol: Kč\n      },\n      {\n        code: DJF,\n        name: Djibouti Franc,\n        symbol: \n      },\n      {\n        code: DKK,\n        name: Danish Krone,\n        symbol: kr\n      },\n      {\n        code: DOP,\n        name: Dominican Peso,\n        symbol: RD$\n      },\n      {\n        code: DZD,\n        name: Algerian Dinar,\n        symbol: \n      },\n      {\n        code: EEK,\n        name: Kroon,\n        symbol: \n      },\n      {\n        code: EGP,\n        name: Egyptian Pound,\n        symbol: £\n      },\n      {\n        code: ERN,\n        name: Nakfa,\n        symbol: \n      },\n      {\n        code: ETB,\n        name: Ethiopian Birr,\n        symbol: \n      },\n      {\n        code: EUR,\n        name: Euro,\n        symbol: €\n      },\n      {\n        code: FJD,\n        name: Fiji Dollar,\n        symbol: $\n      },\n      {\n        code: FKP,\n        name: Falkland Islands Pound,\n        symbol: £\n      },\n      {\n        code: GBP,\n        name: Pound Sterling,\n        symbol: £\n      },\n      {\n        code: GEL,\n        name: Lari,\n        symbol: \n      },\n      {\n        code: GHS,\n        name: Cedi,\n        symbol: \n      },\n      {\n        code: GIP,\n        name: Gibraltar Pound,\n        symbol: £\n      },\n      {\n        code: GMD,\n        name: Dalasi,\n        symbol: \n      },\n      {\n        code: GNF,\n        name: Guinea Franc,\n        symbol: \n      },\n      {\n        code: GTQ,\n        name: Quetzal,\n        symbol: Q\n      },\n      {\n        code: GYD,\n        name: Guyana Dollar,\n        symbol: $\n      },\n      {\n        code: HKD,\n        name: Hong Kong Dollar,\n        symbol: $\n      },\n      {\n        code: HNL,\n        name: Lempira,\n        symbol: L\n      },\n      {\n        code: HRK,\n        name: Croatian Kuna,\n        symbol: kn\n      },\n      {\n        code: HTG,\n        name: Gourde,\n        symbol: \n      },\n      {\n        code: HUF,\n        name: Forint,\n        symbol: Ft\n      },\n      {\n        code: IDR,\n        name: Rupiah,\n        symbol: Rp\n      },\n      {\n        code: ILS,\n        name: New Israeli Sheqel,\n        symbol: ₪\n      },\n      {\n        code: INR,\n        name: Indian Rupee,\n        symbol: ₹\n      },\n      {\n        code: BTN,\n        name: Bhutanese Ngultrum,\n        symbol: Nu\n      },\n      {\n        code: IQD,\n        name: Iraqi Dinar,\n        symbol: \n      },\n      {\n        code: IRR,\n        name: Iranian Rial,\n        symbol: ﷼\n      },\n      {\n        code: ISK,\n        name: Iceland Krona,\n        symbol: kr\n      },\n      {\n        code: JMD,\n        name: Jamaican Dollar,\n        symbol: J$\n      },\n      {\n        code: JOD,\n        name: Jordanian Dinar,\n        symbol: \n      },\n      {\n        code: JPY,\n        name: Yen,\n        symbol: ¥\n      },\n      {\n        code: KES,\n        name: Kenyan Shilling,\n        symbol: \n      },\n      {\n        code: KGS,\n        name: Som,\n        symbol: лв\n      },\n      {\n        code: KHR,\n        name: Riel,\n        symbol: ៛\n      },\n      {\n        code: KMF,\n        name: Comoro Franc,\n        symbol: \n      },\n      {\n        code: KPW,\n        name: North Korean Won,\n        symbol: ₩\n      },\n      {\n        code: KRW,\n        name: Won,\n        symbol: ₩\n      },\n      {\n        code: KWD,\n        name: Kuwaiti Dinar,\n        symbol: \n      },\n      {\n        code: KYD,\n        name: Cayman Islands Dollar,\n        symbol: $\n      },\n      {\n        code: KZT,\n        name: Tenge,\n        symbol: лв\n      },\n      {\n        code: LAK,\n        name: Kip,\n        symbol: ₭\n      },\n      {\n        code: LBP,\n        name: Lebanese Pound,\n        symbol: £\n      },\n      {\n        code: LKR,\n        name: Sri Lanka Rupee,\n        symbol: ₨\n      },\n      {\n        code: LRD,\n        name: Liberian Dollar,\n        symbol: $\n      },\n      {\n        code: LTL,\n        name: Lithuanian Litas,\n        symbol: Lt\n      },\n      {\n        code: LVL,\n        name: Latvian Lats,\n        symbol: Ls\n      },\n      {\n        code: LYD,\n        name: Libyan Dinar,\n        symbol: \n      },\n      {\n        code: MAD,\n        name: Moroccan Dirham,\n        symbol: \n      },\n      {\n        code: MDL,\n        name: Moldovan Leu,\n        symbol: \n      },\n      {\n        code: MGA,\n        name: Malagasy Ariary,\n        symbol: \n      },\n      {\n        code: MKD,\n        name: Denar,\n        symbol: ден\n      },\n      {\n        code: MMK,\n        name: Kyat,\n        symbol: \n      },\n      {\n        code: MNT,\n\n```\n\n----------------------------------------\n\nTITLE: Currency Code Data Structure in JSON\nDESCRIPTION: JSON structure containing currency information organized by ISO currency codes. Each entry includes the currency code, full name, and corresponding symbol character when available.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  code: MOP,\n  name: Pataca,\n  symbol: \n},\n{\n  code: MRO,\n  name: Ouguiya,\n  symbol: \n},\n{\n  code: MUR,\n  name: Mauritius Rupee,\n  symbol: ₨\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Fake Data Output Example\nDESCRIPTION: Sample JSON output showing custom fake data generated using Bogus extensions, including favorite drink, candy, and postal code.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Examples/ExtendingBogus/README.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"FaveDrink\": \"Soda\",\n  \"FaveCandy\": \"Jelly bean\",\n  \"PostCode\": \"M4W\"\n}\n```\n\n----------------------------------------\n\nTITLE: Data Category Definitions in Bogus Library\nDESCRIPTION: A structured representation of various data categories used by the Bogus fake data generation library. Includes categories like 'hacker' terminology, 'internet' domains, 'lorem' text generation, 'music' genres, 'name' components, 'phone_number' formats, and 'system' directories.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  hacker: {\n    abbreviation: [Array String; 29],\n    adjective: [Array String; 18],\n    ingverb: [Array String; 16],\n    noun: [Array String; 24],\n    phrase: [Array String; 8],\n    verb: [Array String; 18]\n  },\n  internet: {\n    domain_suffix: [Array String; 6],\n    example_email: [Array String; 3],\n    free_email: [Array String; 3]\n  },\n  lorem: {\n    supplemental: [Array String; 840],\n    words: [Array String; 249]\n  },\n  music: {\n    genre: [Array String; 18]\n  },\n  name: {\n    female_first_name: [Array String; 500],\n    first_name: [Array String; 3007],\n    gender: [Array String; 71],\n    last_name: [Array String; 473],\n    male_first_name: [Array String; 500],\n    name: [Array String; 6],\n    prefix: [Array String; 5],\n    suffix: [Array String; 11],\n    title: {\n      descriptor: [Array String; 22],\n      job: [Array String; 25],\n      level: [Array String; 37]\n    }\n  },\n  phone_number: {\n    formats: [Array String; 20]\n  },\n  rant: {\n    review: [Array String; 316]\n  },\n  separator:  & ,\n  system: {\n    directoryPaths: [Array String; 60]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IBAN Format for Dominican Republic (DO)\nDESCRIPTION: Specifies the IBAN format for the Dominican Republic, including the BBAN structure, country code, and total length.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bban\": [\n    {\n      \"count\": 4,\n      \"type\": \"a\"\n    },\n    {\n      \"count\": 20,\n      \"type\": \"n\"\n    }\n  ],\n  \"country\": \"DO\",\n  \"format\": \"DOkk bbbb cccc cccc cccc cccc cccc\",\n  \"total\": 28\n}\n```\n\n----------------------------------------\n\nTITLE: IBAN Format Specifications in JSON\nDESCRIPTION: JSON structure defining IBAN formats for different countries. Each entry includes the country code, IBAN format pattern, total length, and BBAN (Basic Bank Account Number) structure with character type and count specifications.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  bban: [\n    {\n      count: 8,\n      type: n\n    },\n    {\n      count: 16,\n      type: c\n    }\n  ],\n  country: AL,\n  format: ALkk bbbs sssx cccc cccc cccc cccc,\n  total: 28\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IBAN Format for Timor-Leste (TL)\nDESCRIPTION: Specifies the IBAN format for Timor-Leste, including the BBAN structure, country code, and total length.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bban\": [\n    {\n      \"count\": 3,\n      \"type\": \"n\"\n    },\n    {\n      \"count\": 16,\n      \"type\": \"n\"\n    }\n  ],\n  \"country\": \"TL\",\n  \"format\": \"TLkk bbbc cccc cccc cccc cxx\",\n  \"total\": 23\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vendor-Specific MIME Types in JSON Format\nDESCRIPTION: A structured collection of MIME type definitions following a consistent pattern. Each entry contains properties such as 'mime' (the MIME type string), 'source' (typically 'iana' or 'apache'), and optionally 'extensions' (associated file extensions) and 'compressible' (boolean indicating if the format is compressible).\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\n        mime: application/vnd.novadigm.edx,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.novadigm.ext,\n        source: iana\n      },\n      {\n        mime: application/vnd.ntt-local.content-share,\n        source: iana\n      },\n      {\n        mime: application/vnd.ntt-local.file-transfer,\n        source: iana\n      },\n      {\n        mime: application/vnd.ntt-local.ogw_remote-access,\n        source: iana\n      },\n      {\n        mime: application/vnd.ntt-local.sip-ta_remote,\n        source: iana\n      },\n      {\n        mime: application/vnd.ntt-local.sip-ta_tcp_stream,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.chart,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.chart-template,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.database,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.formula,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.formula-template,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.graphics,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.graphics-template,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.image,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.image-template,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.presentation,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.presentation-template,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.spreadsheet,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.spreadsheet-template,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.text,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.text-master,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.text-template,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oasis.opendocument.text-web,\n        source: iana\n      },\n      {\n        mime: application/vnd.obn,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/vnd.oftn.l10n+json,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.contentaccessdownload+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.contentaccessstreaming+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.cspg-hexbinary,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.dae.svg+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.dae.xhtml+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.mippvcontrolmessage+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.pae.gem,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.spdiscovery+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.spdlist+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.ueprofile+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oipf.userprofile+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.olpc-sugar,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma-scws-config,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma-scws-http-request,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma-scws-http-response,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.associated-procedure-parameter+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.drm-trigger+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.imd+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.ltkm,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.notification+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.provisioningtrigger,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.sgboot,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.sgdd+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.sgdu,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.simple-symbol-container,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.smartcard-trigger+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.sprov+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.bcast.stkm,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.cab-address-book+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.cab-feature-handler+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.cab-pcc+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.cab-subs-invite+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.cab-user-prefs+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.dcd,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.dcdc,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.oma.dd2+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.drm.risd+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.group-usage-list+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.pal+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.poc.detailed-progress-report+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.poc.final-report+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.poc.groups+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.poc.invocation-descriptor+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.poc.optimized-progress-report+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.push,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.scidm.messages+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.oma.xcap-directory+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.omads-email+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.omads-file+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.omads-folder+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.omaloc-supl-init,\n        source: iana\n      },\n      {\n        mime: application/vnd.openblox.game+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openblox.game-binary,\n        source: iana\n      },\n      {\n        mime: application/vnd.openeye.oeb,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.openofficeorg.extension,\n        source: apache\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.custom-properties+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.customxmlproperties+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.drawing+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.drawingml.chart+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.extended-properties+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.presentationml-template,\n        source: iana\n      },\n      {\n        mime: application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml,\n        source: iana\n      }\n```\n\n----------------------------------------\n\nTITLE: MIME Type Definitions in JSON for Application Content Types\nDESCRIPTION: Contains MIME type definitions for various application content types. Each entry includes the MIME type string, source (typically 'iana'), and may include additional properties like 'compressible' and 'extensions' which list the file extensions associated with the MIME type.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  mimeTypes: [\n    {\n      mime: application/1d-interleaved-parityfec,\n      source: iana\n    },\n    {\n      mime: application/3gpdash-qoe-report+xml,\n      source: iana\n    },\n    {\n      mime: application/3gpp-ims+xml,\n      source: iana\n    },\n    {\n      mime: application/a2l,\n      source: iana\n    },\n    {\n      mime: application/activemessage,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-costmap+json,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-costmapfilter+json,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-directory+json,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-endpointcost+json,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-endpointcostparams+json,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-endpointprop+json,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-endpointpropparams+json,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-error+json,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-networkmap+json,\n      source: iana\n    },\n    {\n      compressible: true,\n      mime: application/alto-networkmapfilter+json,\n      source: iana\n    },\n    {\n      mime: application/aml,\n      source: iana\n    },\n    {\n      extensions: [Array String; 1],\n      mime: application/andrew-inset,\n      source: iana\n    },\n    {\n      mime: application/applefile,\n      source: iana\n    },\n    {\n      extensions: [Array String; 1],\n      mime: application/applixware,\n      source: apache\n    },\n    {\n      mime: application/atf,\n      source: iana\n    },\n    {\n      mime: application/atfx,\n      source: iana\n    },\n    {\n      compressible: true,\n      extensions: [Array String; 1],\n      mime: application/atom+xml,\n      source: iana\n    },\n    {\n      extensions: [Array String; 1],\n      mime: application/atomcat+xml,\n      source: iana\n    },\n    {\n      mime: application/atomdeleted+xml,\n      source: iana\n    },\n    {\n      mime: application/atomicmail,\n      source: iana\n    },\n    {\n      extensions: [Array String; 1],\n      mime: application/atomsvc+xml,\n      source: iana\n    },\n    {\n      mime: application/atxml,\n      source: iana\n    },\n    {\n      mime: application/auth-policy+xml,\n      source: iana\n    },\n    {\n      mime: application/bacnet-xdd+zip,\n      source: iana\n    },\n    {\n      mime: application/batch-smtp,\n      source: iana\n    },\n    {\n      compressible: false,\n      extensions: [Array String; 1],\n      mime: application/bdoc\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: IBAN Format Configuration in JSON for Multiple Countries\nDESCRIPTION: Defines IBAN format specifications for various countries including Netherlands (NL), Norway (NO), Pakistan (PK), Palestine (PS), Poland (PL), Portugal (PT), Qatar (QA), Romania (RO), San Marino (SM), Saudi Arabia (SA), Serbia (RS), Slovakia (SK), Slovenia (SI), Spain (ES), Sweden (SE), Switzerland (CH), Tunisia (TN), Turkey (TR), United Arab Emirates (AE), United Kingdom (GB), and British Virgin Islands (VG). Each entry specifies the BBAN structure with field types and lengths.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  bban: [\n    {\n      count: 4,\n      type: a\n    },\n    {\n      count: 10,\n      type: n\n    }\n  ],\n  country: NL,\n  format: NLkk bbbb cccc cccc cc,\n  total: 18\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Type Properties in JSON\nDESCRIPTION: This snippet demonstrates the structure used to define MIME type properties including compressibility, extensions, mime type, and source. It shows multiple entries for different MIME types.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"compressible\": true,\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"image/x-icon\",\n  \"source\": \"apache\"\n},\n{\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"image/x-jng\",\n  \"source\": \"nginx\"\n},\n{\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"image/x-mrsid-image\",\n  \"source\": \"apache\"\n}\n```\n\n----------------------------------------\n\nTITLE: MIME Type Configuration Object\nDESCRIPTION: A structured definition of MIME types with their properties including source (primarily IANA), file extensions, and compressibility flags. Each entry defines attributes for a specific MIME type application.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  mime: \"application/prs.hpub+zip\",\n  source: \"iana\"\n},\n{\n  mime: \"application/prs.nprend\",\n  source: \"iana\"\n},\n// ... additional MIME type entries\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Type Definitions in JSON Format\nDESCRIPTION: A collection of JSON objects that define MIME type configurations. Each object specifies properties like compressibility, the actual MIME type, source of the standard (e.g., IANA, Apache), and associated file extensions where applicable.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n        compressible: true,\n        mime: application/jwk+json,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/jwk-set+json,\n        source: iana\n      },\n      {\n        mime: application/jwt,\n        source: iana\n      },\n      {\n        mime: application/kpml-request+xml,\n        source: iana\n      },\n      {\n        mime: application/kpml-response+xml,\n        source: iana\n      },\n      {\n        compressible: true,\n        extensions: [Array String; 1],\n        mime: application/ld+json,\n        source: iana\n      },\n      {\n        mime: application/link-format,\n        source: iana\n      },\n      {\n        mime: application/load-control+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/lost+xml,\n        source: iana\n      },\n      {\n        mime: application/lostsync+xml,\n        source: iana\n      },\n      {\n        mime: application/lxf,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/mac-binhex40,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/mac-compactpro,\n        source: apache\n      },\n      {\n        mime: application/macwriteii,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/mads+xml,\n        source: iana\n      },\n      {\n        compressible: true,\n        extensions: [Array String; 1],\n        mime: application/manifest+json\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/marc,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/marcxml+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 3],\n        mime: application/mathematica,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/mathml+xml,\n        source: iana\n      },\n      {\n        mime: application/mathml-content+xml,\n        source: iana\n      },\n      {\n        mime: application/mathml-presentation+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-associated-procedure-description+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-deregister+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-envelope+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-msk+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-msk-response+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-protection-description+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-reception-report+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-register+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-register-response+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-schedule+xml,\n        source: iana\n      },\n      {\n        mime: application/mbms-user-service-description+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/mbox,\n        source: iana\n      },\n      {\n        mime: application/media-policy-dataset+xml,\n        source: iana\n      },\n      {\n        mime: application/media_control+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/mediaservercontrol+xml,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/merge-patch+json,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/metalink+xml,\n        source: apache\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/metalink4+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/mets+xml,\n        source: iana\n      },\n      {\n        mime: application/mf4,\n        source: iana\n      },\n      {\n        mime: application/mikey,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/mods+xml,\n        source: iana\n      },\n      {\n        mime: application/moss-keys,\n        source: iana\n      },\n      {\n        mime: application/moss-signature,\n        source: iana\n      },\n      {\n        mime: application/mosskey-data,\n        source: iana\n      },\n      {\n        mime: application/mosskey-request,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/mp21,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/mp4,\n        source: iana\n      },\n      {\n        mime: application/mpeg4-generic,\n        source: iana\n      },\n      {\n        mime: application/mpeg4-iod,\n        source: iana\n      },\n      {\n        mime: application/mpeg4-iod-xmt,\n        source: iana\n      },\n      {\n        mime: application/mrb-consumer+xml,\n        source: iana\n      },\n      {\n        mime: application/mrb-publish+xml,\n        source: iana\n      },\n      {\n        mime: application/msc-ivr+xml,\n        source: iana\n      },\n      {\n        mime: application/msc-mixer+xml,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 2],\n        mime: application/msword,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/mxf,\n        source: iana\n      },\n      {\n        mime: application/nasdata,\n        source: iana\n      },\n      {\n        mime: application/news-checkgroups,\n        source: iana\n      },\n      {\n        mime: application/news-groupinfo,\n        source: iana\n      },\n      {\n        mime: application/news-transmission,\n        source: iana\n      },\n      {\n        mime: application/nlsml+xml,\n        source: iana\n      },\n      {\n        mime: application/nss,\n        source: iana\n      },\n      {\n        mime: application/ocsp-request,\n        source: iana\n      },\n      {\n        mime: application/ocsp-response,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 22],\n        mime: application/octet-stream,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/oda,\n        source: iana\n      },\n      {\n        mime: application/odx,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/oebps-package+xml,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 1],\n        mime: application/ogg,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/omdoc+xml,\n        source: apache\n      },\n      {\n        extensions: [Array String; 4],\n        mime: application/onenote,\n        source: apache\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/oxps,\n        source: iana\n      },\n      {\n        mime: application/p2p-overlay+xml,\n        source: iana\n      },\n      {\n        mime: application/parityfec,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/patch-ops-error+xml,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 1],\n        mime: application/pdf,\n        source: iana\n      },\n      {\n        mime: application/pdx,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 1],\n        mime: application/pgp-encrypted,\n        source: iana\n      },\n      {\n        mime: application/pgp-keys,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/pgp-signature,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pics-rules,\n        source: apache\n      },\n      {\n        mime: application/pidf+xml,\n        source: iana\n      },\n      {\n        mime: application/pidf-diff+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pkcs10,\n        source: iana\n      },\n      {\n        mime: application/pkcs12,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/pkcs7-mime,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pkcs7-signature,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pkcs8,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pkix-attr-cert,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pkix-cert,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pkix-crl,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pkix-pkipath,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pkixcmp,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/pls+xml,\n        source: iana\n      },\n      {\n        mime: application/poc-settings+xml,\n        source: iana\n      },\n      {\n        compressible: true,\n        extensions: [Array String; 3],\n        mime: application/postscript,\n        source: iana\n      },\n      {\n        mime: application/provenance+xml,\n        source: iana\n      },\n      {\n        mime: application/prs.alvestrand.titrax-sheet,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/prs.cww,\n        source: iana\n      },\n```\n\n----------------------------------------\n\nTITLE: MIME Type Definitions in JSON Format\nDESCRIPTION: A comprehensive collection of MIME type definitions, primarily focused on vendor-specific application types (application/vnd.*). Each entry contains metadata such as MIME type, source (mostly from IANA), available extensions, and occasionally compressibility information.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n        mime: application/vnd.3gpp.srvcc-info+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.3gpp.state-and-event-info+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.3gpp.ussd+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.3gpp2.bcmcsinfo+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.3gpp2.sms,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.3gpp2.tcap,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.3m.post-it-notes,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.accpac.simply.aso,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.accpac.simply.imp,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.acucobol,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/vnd.acucorp,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.adobe.air-application-installer-package+zip,\n        source: apache\n      },\n      {\n        mime: application/vnd.adobe.flash.movie,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.adobe.formscentral.fcdt,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/vnd.adobe.fxp,\n        source: iana\n      },\n      {\n        mime: application/vnd.adobe.partial-upload,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.adobe.xdp+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.adobe.xfdf,\n        source: iana\n      },\n      {\n        mime: application/vnd.aether.imp,\n        source: iana\n      },\n      {\n        mime: application/vnd.ah-barcode,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.ahead.space,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.airzip.filesecure.azf,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.airzip.filesecure.azs,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.amazon.ebook,\n        source: apache\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.americandynamics.acc,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.amiga.ami,\n        source: iana\n      },\n      {\n        mime: application/vnd.amundsen.maze+xml,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 1],\n        mime: application/vnd.android.package-archive,\n        source: apache\n      },\n      {\n        mime: application/vnd.anki,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.anser-web-certificate-issue-initiation,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.anser-web-funds-transfer-initiation,\n        source: apache\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.antix.game-component,\n        source: iana\n      },\n      {\n        mime: application/vnd.apache.thrift.binary,\n        source: iana\n      },\n      {\n        mime: application/vnd.apache.thrift.compact,\n        source: iana\n      },\n      {\n        mime: application/vnd.apache.thrift.json,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/vnd.api+json,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.apple.installer+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.apple.mpegurl,\n        source: iana\n      },\n      {\n        compressible: false,\n        extensions: [Array String; 1],\n        mime: application/vnd.apple.pkpass\n      },\n      {\n        mime: application/vnd.arastra.swi,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.aristanetworks.swi,\n        source: iana\n      },\n      {\n        mime: application/vnd.artsquare,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.astraea-software.iota,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.audiograph,\n        source: iana\n      },\n      {\n        mime: application/vnd.autopackage,\n        source: iana\n      },\n      {\n        mime: application/vnd.avistar+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.balsamiq.bmml+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.balsamiq.bmpr,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/vnd.bekitzur-stech+json,\n        source: iana\n      },\n      {\n        mime: application/vnd.biopax.rdf+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.blueice.multipass,\n        source: iana\n      },\n      {\n        mime: application/vnd.bluetooth.ep.oob,\n        source: iana\n      },\n      {\n        mime: application/vnd.bluetooth.le.oob,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.bmi,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.businessobjects,\n        source: iana\n      },\n      {\n        mime: application/vnd.cab-jscript,\n        source: iana\n      },\n      {\n        mime: application/vnd.canon-cpdl,\n        source: iana\n      },\n      {\n        mime: application/vnd.canon-lips,\n        source: iana\n      },\n      {\n        mime: application/vnd.cendio.thinlinc.clientconf,\n        source: iana\n      },\n      {\n        mime: application/vnd.century-systems.tcp_stream,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.chemdraw+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.chipnuts.karaoke-mmd,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.cinderella,\n        source: iana\n      },\n      {\n        mime: application/vnd.cirpack.isdn-ext,\n        source: iana\n      },\n      {\n        mime: application/vnd.citationstyles.style+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.claymore,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.cloanto.rp9,\n        source: iana\n      },\n      {\n        extensions: [Array String; 5],\n        mime: application/vnd.clonk.c4group,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.cluetrust.cartomobile-config,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.cluetrust.cartomobile-config-pkg,\n        source: iana\n      },\n      {\n        mime: application/vnd.coffeescript,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/vnd.collection+json,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/vnd.collection.doc+json,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/vnd.collection.next+json,\n        source: iana\n      },\n      {\n        mime: application/vnd.commerce-battelle,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.commonspace,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.contact.cmsg,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.cosmocaller,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.crick.clicker,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.crick.clicker.keyboard,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.crick.clicker.palette,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.crick.clicker.template,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.crick.clicker.wordbank,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.criticaltools.wbs+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.ctc-posml,\n        source: iana\n      },\n      {\n        mime: application/vnd.ctct.ws+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.cups-pdf,\n        source: iana\n      },\n      {\n        mime: application/vnd.cups-postscript,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.cups-ppd,\n        source: iana\n      },\n      {\n        mime: application/vnd.cups-raster,\n        source: iana\n      },\n      {\n        mime: application/vnd.cups-raw,\n        source: iana\n      },\n      {\n        mime: application/vnd.curl\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Types in JSON Format\nDESCRIPTION: A structured collection of MIME type definitions for various application and audio formats. Each object includes the MIME type, source (typically IANA or Apache), and may contain additional attributes like supported file extensions and compressibility status.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  extensions: [Array String; 4],\n  mime: application/xv+xml,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: application/yang,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: application/yin+xml,\n  source: iana\n},\n{\n  compressible: false,\n  extensions: [Array String; 1],\n  mime: application/zip,\n  source: iana\n},\n{\n  mime: application/zlib,\n  source: iana\n},\n{\n  mime: audio/1d-interleaved-parityfec,\n  source: iana\n},\n{\n  mime: audio/32kadpcm,\n  source: iana\n},\n{\n  mime: audio/3gpp,\n  source: iana\n},\n{\n  mime: audio/3gpp2,\n  source: iana\n},\n{\n  mime: audio/ac3,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: audio/adpcm,\n  source: apache\n},\n{\n  mime: audio/amr,\n  source: iana\n},\n{\n  mime: audio/amr-wb,\n  source: iana\n},\n{\n  mime: audio/amr-wb+,\n  source: iana\n},\n{\n  mime: audio/aptx,\n  source: iana\n},\n{\n  mime: audio/asc,\n  source: iana\n},\n{\n  mime: audio/atrac-advanced-lossless,\n  source: iana\n},\n{\n  mime: audio/atrac-x,\n  source: iana\n},\n{\n  mime: audio/atrac3,\n  source: iana\n},\n{\n  compressible: false,\n  extensions: [Array String; 2],\n  mime: audio/basic,\n  source: iana\n},\n{\n  mime: audio/bv16,\n  source: iana\n},\n{\n  mime: audio/bv32,\n  source: iana\n},\n{\n  mime: audio/clearmode,\n  source: iana\n},\n{\n  mime: audio/cn,\n  source: iana\n},\n{\n  mime: audio/dat12,\n  source: iana\n},\n{\n  mime: audio/dls,\n  source: iana\n},\n{\n  mime: audio/dsr-es201108,\n  source: iana\n},\n{\n  mime: audio/dsr-es202050,\n  source: iana\n},\n{\n  mime: audio/dsr-es202211,\n  source: iana\n},\n{\n  mime: audio/dsr-es202212,\n  source: iana\n},\n{\n  mime: audio/dv,\n  source: iana\n},\n{\n  mime: audio/dvi4,\n  source: iana\n},\n{\n  mime: audio/eac3,\n  source: iana\n},\n{\n  mime: audio/encaprtp,\n  source: iana\n},\n{\n  mime: audio/evrc,\n  source: iana\n},\n{\n  mime: audio/evrc-qcp,\n  source: iana\n},\n{\n  mime: audio/evrc0,\n  source: iana\n},\n{\n  mime: audio/evrc1,\n  source: iana\n},\n{\n  mime: audio/evrcb,\n  source: iana\n},\n{\n  mime: audio/evrcb0,\n  source: iana\n},\n{\n  mime: audio/evrcb1,\n  source: iana\n},\n{\n  mime: audio/evrcnw,\n  source: iana\n},\n{\n  mime: audio/evrcnw0,\n  source: iana\n},\n{\n  mime: audio/evrcnw1,\n  source: iana\n},\n{\n  mime: audio/evrcwb,\n  source: iana\n},\n{\n  mime: audio/evrcwb0,\n  source: iana\n},\n{\n  mime: audio/evrcwb1,\n  source: iana\n},\n{\n  mime: audio/evs,\n  source: iana\n},\n{\n  mime: audio/fwdred,\n  source: iana\n},\n{\n  mime: audio/g711-0,\n  source: iana\n},\n{\n  mime: audio/g719,\n  source: iana\n},\n{\n  mime: audio/g722,\n  source: iana\n},\n{\n  mime: audio/g7221,\n  source: iana\n},\n{\n  mime: audio/g723,\n  source: iana\n},\n{\n  mime: audio/g726-16,\n  source: iana\n},\n{\n  mime: audio/g726-24,\n  source: iana\n},\n{\n  mime: audio/g726-32,\n  source: iana\n},\n{\n  mime: audio/g726-40,\n  source: iana\n},\n{\n  mime: audio/g728,\n  source: iana\n},\n{\n  mime: audio/g729,\n  source: iana\n},\n{\n  mime: audio/g7291,\n  source: iana\n},\n{\n  mime: audio/g729d,\n  source: iana\n},\n{\n  mime: audio/g729e,\n  source: iana\n},\n{\n  mime: audio/gsm,\n  source: iana\n},\n{\n  mime: audio/gsm-efr,\n  source: iana\n},\n{\n  mime: audio/gsm-hr-08,\n  source: iana\n},\n{\n  mime: audio/ilbc,\n  source: iana\n},\n{\n  mime: audio/ip-mr_v2.5,\n  source: iana\n},\n{\n  mime: audio/isac,\n  source: apache\n},\n{\n  mime: audio/l16,\n  source: iana\n},\n{\n  mime: audio/l20,\n  source: iana\n},\n{\n  compressible: false,\n  mime: audio/l24,\n  source: iana\n},\n{\n  mime: audio/l8,\n  source: iana\n},\n{\n  mime: audio/lpc,\n  source: iana\n},\n{\n  extensions: [Array String; 4],\n  mime: audio/midi,\n  source: apache\n},\n{\n  mime: audio/mobile-xmf,\n  source: iana\n},\n{\n  compressible: false,\n  extensions: [Array String; 2],\n  mime: audio/mp4,\n  source: iana\n},\n{\n  mime: audio/mp4a-latm,\n  source: iana\n},\n{\n  mime: audio/mpa,\n  source: iana\n},\n{\n  mime: audio/mpa-robust,\n  source: iana\n},\n{\n  compressible: false,\n  extensions: [Array String; 6],\n  mime: audio/mpeg,\n  source: iana\n},\n{\n  mime: audio/mpeg4-generic,\n  source: iana\n},\n{\n  mime: audio/musepack,\n  source: apache\n},\n{\n  compressible: false,\n  extensions: [Array String; 3],\n  mime: audio/ogg,\n  source: iana\n},\n{\n  mime: audio/opus,\n  source: iana\n},\n{\n  mime: audio/parityfec,\n  source: iana\n},\n{\n  mime: audio/pcma,\n  source: iana\n},\n{\n  mime: audio/pcma-wb,\n  source: iana\n},\n{\n  mime: audio/pcmu,\n  source: iana\n},\n{\n  mime: audio/pcmu-wb,\n  source: iana\n},\n{\n  mime: audio/prs.sid,\n  source: iana\n},\n{\n  mime: audio/qcelp,\n  source: iana\n},\n{\n  mime: audio/raptorfec,\n  source: iana\n},\n{\n  mime: audio/red,\n  source: iana\n},\n{\n  mime: audio/rtp-enc-aescm128,\n  source: iana\n},\n{\n  mime: audio/rtp-midi,\n  source: iana\n},\n{\n  mime: audio/rtploopback,\n  source: iana\n},\n{\n  mime: audio/rtx,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: audio/s3m,\n  source: apache\n},\n{\n  extensions: [Array String; 1],\n  mime: audio/silk,\n  source: apache\n},\n{\n  mime: audio/smv,\n  source: iana\n},\n{\n  mime: audio/smv-qcp,\n  source: iana\n},\n{\n  mime: audio/smv0,\n  source: iana\n},\n{\n  mime: audio/sp-midi,\n  source: iana\n},\n{\n  mime: audio/speex,\n  source: iana\n},\n{\n  mime: audio/t140c,\n  source: iana\n},\n{\n  mime: audio/t38,\n  source: iana\n},\n{\n  mime: audio/telephone-event,\n  source: iana\n},\n{\n  mime: audio/tone,\n  source: iana\n},\n{\n  mime: audio/uemclip,\n  source: iana\n},\n{\n  mime: audio/ulpfec,\n  source: iana\n},\n{\n  mime: audio/vdvi,\n  source: iana\n},\n{\n  mime: audio/vmr-wb,\n  source: iana\n},\n{\n  mime: audio/vnd.3gpp.iufp,\n  source: iana\n},\n{\n  mime: audio/vnd.4sb,\n  source: iana\n},\n{\n  mime: audio/vnd.audiokoz,\n  source: iana\n},\n{\n  mime: audio/vnd.celp,\n  source: iana\n},\n{\n  mime: audio/vnd.cisco.nse,\n  source: iana\n},\n{\n  mime: audio/vnd.cmles.radio-events,\n  source: iana\n},\n{\n  mime: audio/vnd.cns.anp1,\n  source: iana\n},\n{\n  mime: audio/vnd.cns.inf1,\n  source: iana\n},\n{\n  extensions: [Array String; 2],\n  mime: audio/vnd.dece.audio,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: audio/vnd.digital-winds,\n  source: iana\n},\n{\n  mime: audio/vnd.dlna.adts,\n  source: iana\n},\n{\n  mime: audio/vnd.dolby.heaac.1,\n  source: iana\n},\n{\n  mime: audio/vnd.dolby.heaac.2,\n  source: iana\n},\n{\n  mime: audio/vnd.dolby.mlp,\n  source: iana\n},\n{\n  mime: audio/vnd.dolby.mps,\n  source: iana\n},\n{\n  mime: audio/vnd.dolby.pl2,\n  source: iana\n},\n{\n  mime: audio/vnd.dolby.pl2x,\n  source: iana\n},\n{\n  mime: audio/vnd.dolby.pl2z,\n  source: iana\n},\n{\n  mime: audio/vnd.dolby.pulse.1,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: audio/vnd.dra,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: audio/vnd.dts,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: audio/vnd.dts.hd,\n  source: iana\n},\n{\n  mime: audio/vnd.dvb.file,\n\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Type Configuration Entries in JSON\nDESCRIPTION: This code represents a collection of MIME type configuration entries. Each object contains the MIME type, its source (usually IANA or Apache), and often includes supported file extensions and compressibility information.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.curl.car,\n        source: apache\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.curl.pcurl,\n        source: apache\n      },\n      {\n        mime: application/vnd.cyan.dean.root+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.cybank,\n        source: iana\n      },\n      {\n        compressible: true,\n        extensions: [Array String; 1],\n        mime: application/vnd.dart,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.data-vision.rdz,\n        source: iana\n      },\n      {\n        mime: application/vnd.debian.binary-package,\n        source: iana\n      },\n      {\n        extensions: [Array String; 4],\n        mime: application/vnd.dece.data,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/vnd.dece.ttml+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/vnd.dece.unspecified,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/vnd.dece.zip,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.denovo.fcselayout-link,\n        source: iana\n      },\n      {\n        mime: application/vnd.desmume-movie,\n        source: iana\n      },\n      {\n        mime: application/vnd.dir-bi.plate-dl-nosuffix,\n        source: iana\n      },\n      {\n        mime: application/vnd.dm.delegation+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.dna,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/vnd.document+json,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.dolby.mlp,\n        source: apache\n      },\n      {\n        mime: application/vnd.dolby.mobile.1,\n        source: iana\n      },\n      {\n        mime: application/vnd.dolby.mobile.2,\n        source: iana\n      },\n      {\n        mime: application/vnd.doremir.scorecloud-binary-document,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.dpgraph,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.dreamfactory,\n        source: iana\n      },\n      {\n        compressible: true,\n        mime: application/vnd.drive+json,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.ds-keypoint,\n        source: apache\n      },\n      {\n        mime: application/vnd.dtg.local,\n        source: iana\n      },\n      {\n        mime: application/vnd.dtg.local.flash,\n        source: iana\n      },\n      {\n        mime: application/vnd.dtg.local.html,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.dvb.ait,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.dvbj,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.esgcontainer,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.ipdcdftnotifaccess,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.ipdcesgaccess,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.ipdcesgaccess2,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.ipdcesgpdd,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.ipdcroaming,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.iptv.alfec-base,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.iptv.alfec-enhancement,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.notif-aggregate-root+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.notif-container+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.notif-generic+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.notif-ia-msglist+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.notif-ia-registration-request+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.notif-ia-registration-response+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.notif-init+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.dvb.pfr,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.dvb.service,\n        source: iana\n      },\n      {\n        mime: application/vnd.dxr,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.dynageo,\n        source: iana\n      },\n      {\n        mime: application/vnd.dzr,\n        source: iana\n      },\n      {\n        mime: application/vnd.easykaraoke.cdgdownload,\n        source: iana\n      },\n      {\n        mime: application/vnd.ecdis-update,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.ecowin.chart,\n        source: iana\n      },\n      {\n        mime: application/vnd.ecowin.filerequest,\n        source: iana\n      },\n      {\n        mime: application/vnd.ecowin.fileupdate,\n        source: iana\n      },\n      {\n        mime: application/vnd.ecowin.series,\n        source: iana\n      },\n      {\n        mime: application/vnd.ecowin.seriesrequest,\n        source: iana\n      },\n      {\n        mime: application/vnd.ecowin.seriesupdate,\n        source: iana\n      },\n      {\n        mime: application/vnd.emclient.accessrequest+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.enliven,\n        source: iana\n      },\n      {\n        mime: application/vnd.enphase.envoy,\n        source: iana\n      },\n      {\n        mime: application/vnd.eprints.data+xml,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.epson.esf,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.epson.msf,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.epson.quickanime,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.epson.salt,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.epson.ssf,\n        source: iana\n      },\n      {\n        mime: application/vnd.ericsson.quickcall,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/vnd.eszigno3+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.aoc+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.asic-e+zip,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.asic-s+zip,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.cug+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.iptvcommand+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.iptvdiscovery+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.iptvprofile+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.iptvsad-bc+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.iptvsad-cod+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.iptvsad-npvr+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.iptvservice+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.iptvsync+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.iptvueprofile+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.mcid+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.mheg5,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.overload-control-policy-dataset+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.pstn+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.sci+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.simservs+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.timestamp-token,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.tsl+xml,\n        source: iana\n      },\n      {\n        mime: application/vnd.etsi.tsl.der,\n        source: iana\n      },\n      {\n        mime: application/vnd.eudora.data,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.ezpix-album,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.ezpix-package,\n        source: iana\n      },\n      {\n        mime: application/vnd.f-secure.mobile,\n        source: iana\n      },\n      {\n        mime: application/vnd.fastcopy-disk-image,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.fdf,\n        source: iana\n      },\n      {\n        extensions: [Array String; 1],\n        mime: application/vnd.fdsn.mseed,\n        source: iana\n      },\n      {\n        extensions: [Array String; 2],\n        mime: application/vnd.fdsn.seed,\n        source: iana\n      },\n      {\n        mime: application/vnd.ffsns,\n        source: iana\n      },\n      {\n        mime: application/vnd.filmit.zfc,\n        source: iana\n      },\n      {\n        mime: application/vnd.fints,\n        source: iana\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Types in JSON\nDESCRIPTION: This snippet demonstrates the structure used to define MIME types, including properties like compressibility, file extensions, and the source of the MIME type definition. It shows multiple MIME type entries in a JSON-like format.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  mime: \"application/beep+xml\",\n  source: \"iana\"\n},\n{\n  compressible: true,\n  mime: \"application/calendar+json\",\n  source: \"iana\"\n},\n{\n  mime: \"application/calendar+xml\",\n  source: \"iana\"\n},\n{\n  mime: \"application/call-completion\",\n  source: \"iana\"\n},\n{\n  mime: \"application/cals-1840\",\n  source: \"iana\"\n},\n{\n  mime: \"application/cbor\",\n  source: \"iana\"\n},\n{\n  mime: \"application/ccmp+xml\",\n  source: \"iana\"\n},\n{\n  extensions: [Array String; 1],\n  mime: \"application/ccxml+xml\",\n  source: \"iana\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Type Configuration in JSON\nDESCRIPTION: This snippet shows the structure used to define MIME types and their properties. Each entry includes the MIME type, source, and optionally file extensions and other attributes like compressibility.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"application/vnd.pawaafile\",\n  \"source\": \"iana\"\n},\n{\n  \"mime\": \"application/vnd.pcos\",\n  \"source\": \"iana\"\n},\n{\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"application/vnd.pg.format\",\n  \"source\": \"iana\"\n}\n```\n\n----------------------------------------\n\nTITLE: MIME Type Definition Structure in JSON\nDESCRIPTION: This code represents the structure of MIME type definitions in JSON format. Each entry contains properties such as 'extensions', 'mime', 'source', and sometimes 'compressible'. The extensions are stored as arrays of strings, and the source is primarily 'iana'.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  mime: application/vnd.firemonkeys.cloudcell,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: application/vnd.flographit,\n  source: iana\n},\n{\n  extensions: [Array String; 1],\n  mime: application/vnd.fluxtime.clip,\n  source: iana\n}\n```\n\n----------------------------------------\n\nTITLE: German Localization Data Object Definition\nDESCRIPTION: Defines a hierarchical data structure containing German localization data organized by categories like address, company, name, etc. Each category contains arrays of strings used for generating fake data in German context.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/de.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 6],\n    city: [Array String; 4],\n    city_prefix: [Array String; 7],\n    city_suffix: [Array String; 5],\n    country: [Array String; 237],\n    default_country: [Array String; 1],\n    postcode: [Array String; 2],\n    secondary_address: [Array String; 3],\n    state: [Array String; 16],\n    state_abbr: [Array String; 16],\n    street_address: [Array String; 1],\n    street_name: [Array String; 1],\n    street_root: [Array String; 1031]\n  },\n  cell_phone: {\n    formats: [Array String; 2]\n  },\n  company: {\n    legal_form: [Array String; 7],\n    name: [Array String; 3],\n    suffix: [Array String; 7]\n  },\n  date: {\n    month: {\n      abbr: [Array String; 12],\n      abbr_context: [Array String; 12],\n      wide: [Array String; 12],\n      wide_context: [Array String; 12]\n    },\n    weekday: {\n      abbr: [Array String; 7],\n      abbr_context: [Array String; 7],\n      wide: [Array String; 7],\n      wide_context: [Array String; 7]\n    }\n  },\n  internet: {\n    domain_suffix: [Array String; 7],\n    free_email: [Array String; 3]\n  },\n  lorem: {\n    words: [Array String; 249]\n  },\n  name: {\n    female_first_name: [Array String; 583],\n    first_name: [Array String; 1155],\n    last_name: [Array String; 1688],\n    male_first_name: [Array String; 572],\n    name: [Array String; 6],\n    nobility_title_prefix: [Array String; 4],\n    prefix: [Array String; 4]\n  },\n  phone_number: {\n    formats: [Array String; 4]\n  },\n  title: German\n}\n```\n\n----------------------------------------\n\nTITLE: MIME Type Configuration Object Structure\nDESCRIPTION: JSON configuration data defining MIME types with their extensions, source (primarily IANA), and optional compressible flag. Each entry maps a MIME type to its metadata.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  mime: \"application/vnd.ims.lti.v2.toolsettings.simple+json\",\n  source: \"iana\"\n},\n{\n  mime: \"application/vnd.informedcontrol.rms+xml\",\n  source: \"iana\"\n},\n{\n  extensions: [\"Array String\"],\n  mime: \"application/vnd.insors.igm\",\n  source: \"iana\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Spanish Locale Data Structure for Bogus Fake Data Generator\nDESCRIPTION: A comprehensive JSON structure that defines Spanish locale data for the Bogus fake data generation library. The structure includes categories for addresses, phone numbers, names, company information, commerce data, and internet-related information. Each category contains arrays of strings that serve as data sources for generating realistic fake data in Spanish.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/es.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 5],\n    city: [Array String; 1],\n    city_prefix: [Array String; 129],\n    country: [Array String; 180],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    province: [Array String; 50],\n    secondary_address: [Array String; 2],\n    state: [Array String; 17],\n    state_abbr: [Array String; 17],\n    street_address: [Array String; 2],\n    street_name: [Array String; 2],\n    street_suffix: [Array String; 70],\n    time_zone: [Array String; 143]\n  },\n  cell_phone: {\n    formats: [Array String; 4]\n  },\n  commerce: {\n    color: [Array String; 9],\n    department: [Array String; 19],\n    product_name: {\n      adjective: [Array String; 15],\n      material: [Array String; 8],\n      product: [Array String; 24]\n    }\n  },\n  company: {\n    adjective: [Array String; 85],\n    descriptor: [Array String; 81],\n    name: [Array String; 4],\n    noun: [Array String; 93],\n    suffix: [Array String; 4]\n  },\n  internet: {\n    domain_suffix: [Array String; 5],\n    free_email: [Array String; 3]\n  },\n  name: {\n    female_first_name: [Array String; 11],\n    first_name: [Array String; 212],\n    last_name: [Array String; 624],\n    male_first_name: [Array String; 16],\n    name: [Array String; 5],\n    prefix: [Array String; 3],\n    suffix: [Array String; 11],\n    title: {\n      descriptor: [Array String; 21],\n      job: [Array String; 25],\n      level: [Array String; 36]\n    }\n  },\n  phone_number: {\n    formats: [Array String; 4]\n  },\n  title: Spanish\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Types with Extensions and Sources in JSON\nDESCRIPTION: This JSON structure defines various MIME types, their associated file extensions, and the source of the MIME type definition. It includes entries for application-specific formats, vendor-specific types, and standardized formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"application/vnd.stepmania.package\",\n  \"source\": \"iana\"\n},\n{\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"application/vnd.stepmania.stepchart\",\n  \"source\": \"iana\"\n},\n{\n  \"mime\": \"application/vnd.street-stream\",\n  \"source\": \"iana\"\n},\n{\n  \"mime\": \"application/vnd.sun.wadl+xml\",\n  \"source\": \"iana\"\n},\n{\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"application/vnd.sun.xml.calc\",\n  \"source\": \"apache\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining French Locale Data Structure for Bogus Library\nDESCRIPTION: This JSON structure defines French-specific data for various categories used in generating fake data. It includes address components, company information, date formats, internet details, lorem ipsum words, name components, and phone number formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/fr.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [\"Array String; 4\"],\n    \"city\": [\"Array String; 1\"],\n    \"city_name\": [\"Array String; 100\"],\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 1\"],\n    \"secondary_address\": [\"Array String; 2\"],\n    \"state\": [\"Array String; 22\"],\n    \"street_address\": [\"Array String; 1\"],\n    \"street_name\": [\"Array String; 1\"],\n    \"street_prefix\": [\"Array String; 9\"],\n    \"street_suffix\": [\"Array String; 66\"]\n  },\n  \"company\": {\n    \"adjective\": [\"Array String; 100\"],\n    \"bs_adjective\": [\"Array String; 65\"],\n    \"bs_noun\": [\"Array String; 44\"],\n    \"bs_verb\": [\"Array String; 60\"],\n    \"descriptor\": [\"Array String; 101\"],\n    \"name\": [\"Array String; 2\"],\n    \"noun\": [\"Array String; 104\"],\n    \"suffix\": [\"Array String; 8\"]\n  },\n  \"date\": {\n    \"month\": {\n      \"abbr\": [\"Array String; 12\"],\n      \"abbr_context\": [\"Array String; 12\"],\n      \"wide\": [\"Array String; 12\"],\n      \"wide_context\": [\"Array String; 12\"]\n    },\n    \"weekday\": {\n      \"abbr\": [\"Array String; 7\"],\n      \"abbr_context\": [\"Array String; 7\"],\n      \"wide\": [\"Array String; 7\"],\n      \"wide_context\": [\"Array String; 7\"]\n    }\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 7\"],\n    \"free_email\": [\"Array String; 3\"]\n  },\n  \"lorem\": {\n    \"words\": [\"Array String; 249\"]\n  },\n  \"name\": {\n    \"female_first_name\": [\"Array String; 451\"],\n    \"last_name\": [\"Array String; 150\"],\n    \"male_first_name\": [\"Array String; 496\"],\n    \"name\": [\"Array String; 3\"],\n    \"prefix\": [\"Array String; 5\"],\n    \"title\": {\n      \"job\": [\"Array String; 18\"]\n    }\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 14\"]\n  },\n  \"title\": \"French\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Types in JSON Format\nDESCRIPTION: This code snippet represents a portion of a larger JSON object that defines various MIME types. Each MIME type is defined with properties such as extensions, source, and compressibility. The structure is consistent across different media types, including audio, chemical, font, and image formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mime\": \"audio/vnd.everad.plj\",\n  \"source\": \"iana\"\n},\n{\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"audio/vnd.lucent.voice\",\n  \"source\": \"iana\"\n},\n{\n  \"compressible\": false,\n  \"mime\": \"audio/vnd.wave\"\n},\n{\n  \"compressible\": false,\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"audio/webm\",\n  \"source\": \"apache\"\n},\n{\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"chemical/x-cdx\",\n  \"source\": \"apache\"\n},\n{\n  \"compressible\": true,\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"font/opentype\"\n},\n{\n  \"compressible\": false,\n  \"extensions\": [\"Array String; 1\"],\n  \"mime\": \"image/png\",\n  \"source\": \"iana\"\n},\n{\n  \"mime\": \"image/vnd.mozilla.apng\",\n  \"source\": \"iana\"\n}\n```\n\n----------------------------------------\n\nTITLE: Russian Locale Configuration for Bogus Fake Data Generator\nDESCRIPTION: Complete JSON configuration for the Russian locale in the Bogus library. This structure defines various categories of fake data like addresses, names, and dates with Russian content. The file includes arrays of strings for different data types that will be randomly selected during fake data generation.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/ru.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 1],\n    city: [Array String; 1],\n    city_name: [Array String; 47],\n    country: [Array String; 210],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    secondary_address: [Array String; 1],\n    state: [Array String; 86],\n    street_address: [Array String; 1],\n    street_name: [Array String; 2],\n    street_suffix: [Array String; 6],\n    street_title: [Array String; 100]\n  },\n  commerce: {\n    color: [Array String; 31],\n    department: [Array String; 24],\n    product_name: {\n      adjective: [Array String; 12],\n      material: [Array String; 11],\n      product: [Array String; 20]\n    }\n  },\n  company: {\n    name: [Array String; 8],\n    prefix: [Array String; 8],\n    suffix: [Array String; 5]\n  },\n  date: {\n    month: {\n      abbr: [Array String; 12],\n      abbr_context: [Array String; 12],\n      wide: [Array String; 12],\n      wide_context: [Array String; 12]\n    },\n    weekday: {\n      abbr: [Array String; 7],\n      abbr_context: [Array String; 7],\n      wide: [Array String; 7],\n      wide_context: [Array String; 7]\n    }\n  },\n  hacker: {\n    abbreviation: [Array String; 30],\n    adjective: [Array String; 17],\n    ingverb: [Array String; 19],\n    noun: [Array String; 27],\n    phrase: [Array String; 8],\n    verb: [Array String; 22]\n  },\n  internet: {\n    domain_suffix: [Array String; 6],\n    free_email: [Array String; 6]\n  },\n  lorem: {\n    words: [Array String; 189]\n  },\n  name: {\n    female_first_name: [Array String; 56],\n    female_last_name: [Array String; 250],\n    female_middle_name: [Array String; 51],\n    male_first_name: [Array String; 52],\n    male_last_name: [Array String; 250],\n    male_middle_name: [Array String; 52],\n    name: [Array String; 8],\n    title: {\n      descriptor: [Array String; 10],\n      job: [Array String; 16],\n      level: [Array String; 8]\n    }\n  },\n  phone_number: {\n    formats: [Array String; 1]\n  },\n  separator:  и ,\n  title: Russian\n}\n```\n\n----------------------------------------\n\nTITLE: Australian English Locale Data Structure\nDESCRIPTION: Defines structured data arrays for generating Australian-specific fake data including address components, company suffixes, internet domains, names, and phone number formats. The configuration is specifically tailored for Australian English (Ocker) locale.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en_AU_ocker.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [\"Array String; 3\"],\n    \"city\": [\"Array String; 1\"],\n    \"city_prefix\": [\"Array String; 12\"],\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 7\"],\n    \"region\": [\"Array String; 7\"],\n    \"state\": [\"Array String; 8\"],\n    \"state_abbr\": [\"Array String; 8\"],\n    \"street_name\": [\"Array String; 1\"],\n    \"street_root\": [\"Array String; 4\"],\n    \"street_suffix\": [\"Array String; 37\"]\n  },\n  \"company\": {\n    \"suffix\": [\"Array String; 6\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 6\"]\n  },\n  \"name\": {\n    \"first_name\": [\"Array String; 104\"],\n    \"last_name\": [\"Array String; 24\"],\n    \"ocker_first_name\": [\"Array String; 6\"]\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 4\"]\n  },\n  \"title\": \"English (Australia Ocker)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Types in JavaScript Object Format\nDESCRIPTION: This code defines MIME types as JavaScript objects with properties for compressibility, extensions, mime type name, and source. The structure follows a consistent pattern where each object represents a single MIME type with its metadata.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  compressible: true,\n  extensions: [Array String; 1],\n  mime: text/richtext,\n  source: iana\n}\n```\n\n----------------------------------------\n\nTITLE: Ukrainian Locale Data Structure in JSON for Bogus Fake Data Generator\nDESCRIPTION: Complete JSON structure defining the Ukrainian locale data for the Bogus fake data generation library. It contains arrays of strings for addresses, company information, internet domains, personal names, and phone number formats that are specific to Ukraine.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/uk.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 3],\n    city: [Array String; 2],\n    city_name: [Array String; 57],\n    city_prefix: [Array String; 4],\n    city_suffix: [Array String; 1],\n    country: [Array String; 193],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    secondary_address: [Array String; 1],\n    state: [Array String; 27],\n    street_address: [Array String; 1],\n    street_name: [Array String; 2],\n    street_prefix: [Array String; 8],\n    street_suffix: [Array String; 1],\n    street_title: [Array String; 13]\n  },\n  company: {\n    name: [Array String; 8],\n    prefix: [Array String; 8],\n    suffix: [Array String; 5]\n  },\n  internet: {\n    domain_suffix: [Array String; 60],\n    free_email: [Array String; 7]\n  },\n  name: {\n    female_first_name: [Array String; 193],\n    female_last_name: [Array String; 230],\n    female_middle_name: [Array String; 116],\n    male_first_name: [Array String; 195],\n    male_last_name: [Array String; 239],\n    male_middle_name: [Array String; 116],\n    name: [Array String; 8],\n    prefix: [Array String; 2],\n    suffix: [Array String; 18],\n    title: {\n      descriptor: [Array String; 10],\n      job: [Array String; 16],\n      level: [Array String; 6]\n    }\n  },\n  phone_number: {\n    formats: [Array String; 14]\n  },\n  title: Ukrainian\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Configuration for English (India) in Bogus\nDESCRIPTION: A JSON structure that defines locale-specific data for fake data generation in India. It includes address formats, company suffixes, internet domains, name lists, and phone number formats customized for Indian English usage.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en_IND.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    default_country: [Array String; 4],\n    postcode: [Array String; 1],\n    state: [Array String; 36],\n    state_abbr: [Array String; 36]\n  },\n  company: {\n    suffix: [Array String; 7]\n  },\n  internet: {\n    domain_suffix: [Array String; 8],\n    free_email: [Array String; 3]\n  },\n  name: {\n    first_name: [Array String; 762],\n    last_name: [Array String; 89]\n  },\n  phone_number: {\n    formats: [Array String; 12]\n  },\n  title: English (India)\n}\n```\n\n----------------------------------------\n\nTITLE: Video MIME Types and Configuration Data Structure\nDESCRIPTION: Comprehensive configuration object containing video MIME type definitions with their extensions and sources, along with team and vehicle related data arrays. The structure includes detailed video format specifications and associated metadata.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  mime: video/vnd.cctv,\n  source: apache\n},\n{\n  extensions: [Array String; 2],\n  mime: video/vnd.dece.hd,\n  source: apache\n},\n/* ...additional MIME entries... */\n  team: {\n    creature: [Array String; 67],\n    name: [Array String; 1]\n  },\n  title: English,\n  vehicle: {\n    fuel: [Array String; 4],\n    manufacturer: [Array String; 32],\n    model: [Array String; 58],\n    type: [Array String; 11]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slovakian Locale Data Structure for Bogus Library\nDESCRIPTION: This JSON structure defines the Slovakian locale data for the Bogus library. It includes various categories such as address, company, internet, lorem, name, and phone number, each containing arrays of strings or nested objects for generating fake data.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/sk.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [\"Array String; 3\"],\n    \"city\": [\"Array String; 1\"],\n    \"city_name\": [\"Array String; 79\"],\n    \"city_prefix\": [\"Array String; 7\"],\n    \"city_suffix\": [\"Array String; 19\"],\n    \"country\": [\"Array String; 382\"],\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 3\"],\n    \"secondary_address\": [\"Array String; 2\"],\n    \"street\": [\"Array String; 1160\"],\n    \"street_address\": [\"Array String; 1\"],\n    \"street_name\": [\"Array String; 1\"],\n    \"time_zone\": [\"Array String; 143\"]\n  },\n  \"company\": {\n    \"adjective\": [\"Array String; 100\"],\n    \"bs_noun\": [\"Array String; 109\"],\n    \"bs_verb\": [\"Array String; 60\"],\n    \"descriptor\": [\"Array String; 101\"],\n    \"name\": [\"Array String; 3\"],\n    \"noun\": [\"Array String; 104\"],\n    \"suffix\": [\"Array String; 3\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 5\"],\n    \"free_email\": [\"Array String; 3\"]\n  },\n  \"lorem\": {\n    \"words\": [\"Array String; 249\"]\n  },\n  \"name\": {\n    \"female_first_name\": [\"Array String; 200\"],\n    \"female_last_name\": [\"Array String; 251\"],\n    \"male_first_name\": [\"Array String; 192\"],\n    \"male_last_name\": [\"Array String; 257\"],\n    \"name\": [\"Array String; 10\"],\n    \"prefix\": [\"Array String; 4\"],\n    \"suffix\": [\"Array String; 1\"],\n    \"title\": {\n      \"descriptor\": [\"Array String; 22\"],\n      \"job\": [\"Array String; 25\"],\n      \"level\": [\"Array String; 37\"]\n    }\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 4\"]\n  },\n  \"title\": \"Slovakian\"\n}\n```\n\n----------------------------------------\n\nTITLE: Turkish Locale Configuration for Bogus Fake Data Generator\nDESCRIPTION: Complete JSON configuration defining Turkish locale datasets for the Bogus fake data generation library. It includes various categories like addresses, phone numbers, names, and lorem ipsum text with arrays of Turkish-specific strings that will be used to generate realistic fake data.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/tr.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 6],\n    city: [Array String; 81],\n    country: [Array String; 236],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    state: [Array String; 81],\n    street_address: [Array String; 1],\n    street_name: [Array String; 1],\n    street_root: [Array String; 41]\n  },\n  cell_phone: {\n    formats: [Array String; 4]\n  },\n  internet: {\n    domain_suffix: [Array String; 10]\n  },\n  lorem: {\n    words: [Array String; 216]\n  },\n  name: {\n    female_first_name: [Array String; 414],\n    first_name: [Array String; 731],\n    last_name: [Array String; 198],\n    male_first_name: [Array String; 752],\n    name: [Array String; 6],\n    prefix: [Array String; 4]\n  },\n  phone_number: {\n    area_code: [Array String; 97],\n    formats: [Array String; 2]\n  },\n  title: Turkish\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bogus Data Structure for French (Canada) Localization\nDESCRIPTION: This JSON structure defines localized data for generating fake information in French (Canada). It includes address components, internet-related data, phone number formats, and specifies the locale title.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/fr_CA.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": {\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 18\"],\n    \"state\": [\"Array String; 13\"],\n    \"state_abbr\": [\"Array String; 13\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 8\"],\n    \"free_email\": [\"Array String; 3\"]\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 3\"]\n  },\n  \"title\": \"French (Canada)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bogus Configuration for English (Ireland) Locale in JSON\nDESCRIPTION: This JSON configuration specifies data templates for various categories including address, cell phone, internet, and phone number formats. It's tailored for the English (Ireland) locale, providing realistic data generation patterns for Irish addresses and phone numbers.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en_IE.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": {\n    \"county\": [\"Array String; 26\"],\n    \"default_country\": [\"Array String; 1\"]\n  },\n  \"cell_phone\": {\n    \"formats\": [\"Array String; 6\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 5\"]\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 49\"]\n  },\n  \"title\": \"English (Ireland)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Australian Locale Data Structure in JSON\nDESCRIPTION: A structured JSON definition containing Australian locale data for use with the Bogus fake data generator. The file contains address components (building numbers, postcodes, states), company suffixes, internet domain suffixes, first and last names, and phone number formats specific to Australia.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en_AU.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 3],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    state: [Array String; 8],\n    state_abbr: [Array String; 8],\n    street_suffix: [Array String; 37]\n  },\n  company: {\n    suffix: [Array String; 6]\n  },\n  internet: {\n    domain_suffix: [Array String; 6]\n  },\n  name: {\n    first_name: [Array String; 200],\n    last_name: [Array String; 286]\n  },\n  phone_number: {\n    formats: [Array String; 4]\n  },\n  title: English (Australia)\n}\n```\n\n----------------------------------------\n\nTITLE: Vendor MIME Type Definitions\nDESCRIPTION: Configuration data defining various vendor-specific MIME types including Motorola, Microsoft, Nokia and others. Each entry specifies the MIME type, source (typically IANA or Apache), associated file extensions, and compression settings where applicable.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  mime: \"application/vnd.mophun.application\",\n  source: \"iana\"\n},\n{\n  extensions: [Array String; 1],\n  mime: \"application/vnd.mophun.certificate\",\n  source: \"iana\"\n},\n{\n  mime: \"application/vnd.motorola.flexsuite\",\n  source: \"iana\"\n}\n```\n\n----------------------------------------\n\nTITLE: English (Great Britain) Locale Configuration for Bogus\nDESCRIPTION: JSON configuration defining arrays of data for UK-specific fake data generation. Includes county names, country options, postcodes, cell phone and landline formats, and internet domain suffixes for Great Britain locale.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en_GB.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    county: [Array String; 70],\n    default_country: [Array String; 4],\n    postcode: [Array String; 2],\n    uk_country: [Array String; 4]\n  },\n  cell_phone: {\n    formats: [Array String; 6]\n  },\n  internet: {\n    domain_suffix: [Array String; 5]\n  },\n  phone_number: {\n    formats: [Array String; 15]\n  },\n  title: English (Great Britain)\n}\n```\n\n----------------------------------------\n\nTITLE: South African Locale Configuration for Bogus\nDESCRIPTION: JSON structure defining sample data arrays for various categories including addresses, phone numbers, company suffixes, internet domains, and personal names specific to South African English locale.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en_ZA.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": {\n    \"city\": [\"Array String; 1\"],\n    \"city_prefix\": [\"Array String; 14\"],\n    \"default_country\": [\"Array String; 4\"],\n    \"postcode\": [\"Array String; 2\"],\n    \"state\": [\"Array String; 9\"]\n  },\n  \"cell_phone\": {\n    \"formats\": [\"Array String; 18\"]\n  },\n  \"company\": {\n    \"suffix\": [\"Array String; 3\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 5\"]\n  },\n  \"name\": {\n    \"female_first_name\": [\"Array String; 291\"],\n    \"first_name\": [\"Array String; 550\"],\n    \"last_name\": [\"Array String; 241\"],\n    \"male_first_name\": [\"Array String; 251\"],\n    \"name\": [\"Array String; 2\"]\n  },\n  \"phone_number\": {\n    \"area_code\": [\"Array String; 38\"],\n    \"exchange_code\": [\"Array String; 283\"],\n    \"formats\": [\"Array String; 12\"]\n  },\n  \"title\": \"English (South Africa)\"\n}\n```\n\n----------------------------------------\n\nTITLE: OpenXML MIME Type Configuration Array\nDESCRIPTION: Configuration array defining MIME types for OpenXML formats including their source, compressibility, and extensions. Covers various document types including presentations, spreadsheets, and word processing files.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"mime\": \"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\",\n    \"source\": \"iana\"\n  },\n  {\n    \"compressible\": false,\n    \"extensions\": [\"Array String; 1\"],\n    \"mime\": \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n    \"source\": \"iana\"\n  }\n  // Additional MIME type entries...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining English (Canada) Locale Configuration for Bogus\nDESCRIPTION: This JSON object configures the English (Canada) locale for the Bogus library. It includes data for generating addresses, internet-related information, and phone numbers specific to Canada.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en_CA.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": {\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 18\"],\n    \"state\": [\"Array String; 13\"],\n    \"state_abbr\": [\"Array String; 13\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 7\"],\n    \"free_email\": [\"Array String; 3\"]\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 16\"]\n  },\n  \"title\": \"English (Canada)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Indonesian Localization Data Structure for Bogus\nDESCRIPTION: Hierarchical JSON structure containing arrays of strings for generating fake data with Indonesian localization. Includes categories for addresses, company information, date formats, internet data, personal names and phone number formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/id_ID.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [\"Array String; 2\"],\n    \"city\": [\"Array String; 1\"],\n    \"city_name\": [\"Array String; 227\"],\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 1\"],\n    \"state\": [\"Array String; 34\"],\n    \"street_address\": [\"Array String; 1\"],\n    \"street_name\": [\"Array String; 2\"],\n    \"street_prefix\": [\"Array String; 8\"]\n  },\n  \"company\": {\n    \"name\": [\"Array String; 3\"],\n    \"prefix\": [\"Array String; 5\"],\n    \"suffix\": [\"Array String; 2\"]\n  },\n  \"date\": {\n    \"month\": {\n      \"abbr\": [\"Array String; 12\"],\n      \"abbr_context\": [\"Array String; 12\"],\n      \"wide\": [\"Array String; 12\"],\n      \"wide_context\": [\"Array String; 12\"]\n    },\n    \"weekday\": {\n      \"abbr\": [\"Array String; 7\"],\n      \"abbr_context\": [\"Array String; 7\"],\n      \"wide\": [\"Array String; 7\"],\n      \"wide_context\": [\"Array String; 7\"]\n    }\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 20\"],\n    \"free_email\": [\"Array String; 4\"]\n  },\n  \"name\": {\n    \"female_first_name\": [\"Array String; 222\"],\n    \"female_last_name\": [\"Array String; 69\"],\n    \"male_first_name\": [\"Array String; 494\"],\n    \"male_last_name\": [\"Array String; 106\"],\n    \"name\": [\"Array String; 7\"],\n    \"suffix\": [\"Array String; 20\"]\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 38\"]\n  },\n  \"title\": \"Indonesia\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dutch Localization Data Structure in JSON\nDESCRIPTION: This code snippet defines a comprehensive JSON structure for Dutch localization data used in the Bogus library. It includes various categories such as address, commerce, company, date, hacker, internet, lorem, name, and phone number, each containing arrays of relevant Dutch terms or phrases.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/nl.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [\"Array String; 9\"],\n    \"city\": [\"Array String; 2\"],\n    \"city_prefix\": [\"Array String; 2501\"],\n    \"city_suffix\": [\"Array String; 47\"],\n    \"country\": [\"Array String; 254\"],\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 1\"],\n    \"secondary_address\": [\"Array String; 4\"],\n    \"state\": [\"Array String; 12\"],\n    \"street_address\": [\"Array String; 1\"],\n    \"street_name\": [\"Array String; 2\"],\n    \"street_suffix\": [\"Array String; 17\"]\n  },\n  \"commerce\": {\n    \"color\": [\"Array String; 36\"],\n    \"department\": [\"Array String; 22\"],\n    \"product_name\": {\n      \"adjective\": [\"Array String; 20\"],\n      \"material\": [\"Array String; 13\"],\n      \"product\": [\"Array String; 31\"]\n    }\n  },\n  \"company\": {\n    \"suffix\": [\"Array String; 15\"]\n  },\n  \"date\": {\n    \"month\": {\n      \"abbr\": [\"Array String; 12\"],\n      \"abbr_context\": [\"Array String; 12\"],\n      \"wide\": [\"Array String; 12\"],\n      \"wide_context\": [\"Array String; 12\"]\n    },\n    \"weekday\": {\n      \"abbr\": [\"Array String; 7\"],\n      \"abbr_context\": [\"Array String; 7\"],\n      \"wide\": [\"Array String; 7\"],\n      \"wide_context\": [\"Array String; 7\"]\n    }\n  },\n  \"hacker\": {\n    \"adjective\": [\"Array String; 22\"],\n    \"noun\": [\"Array String; 26\"],\n    \"phrase\": [\"Array String; 8\"],\n    \"verb\": [\"Array String; 20\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 5\"],\n    \"free_email\": [\"Array String; 3\"]\n  },\n  \"lorem\": {\n    \"words\": [\"Array String; 249\"]\n  },\n  \"name\": {\n    \"female_first_name\": [\"Array String; 514\"],\n    \"first_name\": [\"Array String; 50\"],\n    \"last_name\": [\"Array String; 50\"],\n    \"male_first_name\": [\"Array String; 587\"],\n    \"name\": [\"Array String; 6\"],\n    \"prefix\": [\"Array String; 5\"],\n    \"suffix\": [\"Array String; 7\"],\n    \"tussenvoegsel\": [\"Array String; 7\"]\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 4\"]\n  },\n  \"title\": \"Dutch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locale-Specific Test Data for Nigeria in JSON\nDESCRIPTION: A JSON configuration that defines locale-specific test data for Nigeria. The configuration includes data for addresses (cities, states, postcodes), company suffixes, internet domain suffixes, person names (first and last names), and phone number formats tailored for the Nigerian context.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en_NG.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    city: [Array String; 1],\n    city_prefix: [Array String; 525],\n    default_country: [Array String; 4],\n    postcode: [Array String; 2],\n    state: [Array String; 37]\n  },\n  company: {\n    suffix: [Array String; 3]\n  },\n  internet: {\n    domain_suffix: [Array String; 5]\n  },\n  name: {\n    female_first_name: [Array String; 31],\n    first_name: [Array String; 99],\n    last_name: [Array String; 166],\n    male_first_name: [Array String; 68],\n    name: [Array String; 2]\n  },\n  phone_number: {\n    formats: [Array String; 5]\n  },\n  title: Nigeria (English)\n}\n```\n\n----------------------------------------\n\nTITLE: Bogus Faker Configuration Structure\nDESCRIPTION: Comprehensive JSON structure defining arrays of strings and nested objects used for generating fake data in different categories including addresses, phone numbers, company information, names, and internet domains. Each category contains predefined lists of values or templates used for random data generation.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/es_MX.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 7],\n    city: [Array String; 1],\n    city_prefix: [Array String; 130],\n    city_suffix: [Array String; 19],\n    country: [Array String; 180],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    secondary_address: [Array String; 3],\n    state: [Array String; 31],\n    state_abbr: [Array String; 32],\n    street: [Array String; 39],\n    street_address: [Array String; 2],\n    street_name: [Array String; 6],\n    street_suffix: [Array String; 70],\n    time_zone: [Array String; 142]\n  },\n  cell_phone: {\n    formats: [Array String; 4]\n  },\n  commerce: {\n    color: [Array String; 31],\n    department: [Array String; 22],\n    product_name: {\n      adjective: [Array String; 17],\n      material: [Array String; 11],\n      product: [Array String; 23]\n    }\n  },\n  company: {\n    adjective: [Array String; 85],\n    bs_adjective: [Array String; 65],\n    bs_noun: [Array String; 44],\n    bs_verb: [Array String; 60],\n    descriptor: [Array String; 81],\n    name: [Array String; 4],\n    noun: [Array String; 93],\n    suffix: [Array String; 4]\n  },\n  internet: {\n    domain_suffix: [Array String; 6],\n    free_email: [Array String; 5]\n  },\n  lorem: {\n    words: [Array String; 268]\n  },\n  name: {\n    first_name: [Array String; 304],\n    last_name: [Array String; 687],\n    name: [Array String; 5],\n    prefix: [Array String; 3],\n    suffix: [Array String; 15],\n    title: {\n      descriptor: [Array String; 22],\n      job: [Array String; 29],\n      level: [Array String; 36]\n    }\n  },\n  phone_number: {\n    formats: [Array String; 4]\n  },\n  separator:  & ,\n  team: {\n    creature: [Array String; 67],\n    name: [Array String; 1]\n  },\n  title: Spanish (Mexico)\n}\n```\n\n----------------------------------------\n\nTITLE: Portuguese (Portugal) Locale Configuration for Bogus Fake Data Generator\nDESCRIPTION: Complete configuration object for generating Portuguese (Portugal) fake data using the Bogus library. The configuration includes various categories such as address formats, names, commerce terms, company information, date formatting, internet domains, and phone number formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/pt_PT.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 4],\n    city: [Array String; 1],\n    city_name: [Array String; 151],\n    city_prefix: [Array String; 6],\n    city_suffix: [Array String; 6],\n    country: [Array String; 238],\n    default_country: [Array String; 1],\n    direction: [Array String; 8],\n    postcode: [Array String; 1],\n    secondary_address: [Array String; 4],\n    state: [Array String; 18],\n    street_address: [Array String; 1],\n    street_name: [Array String; 5],\n    street_prefix: [Array String; 20],\n    street_suffix: [Array String; 8]\n  },\n  cell_phone: {\n    formats: [Array String; 3]\n  },\n  commerce: {\n    color: [Array String; 27],\n    department: [Array String; 22],\n    product_name: {\n      adjective: [Array String; 17],\n      material: [Array String; 11],\n      product: [Array String; 24]\n    }\n  },\n  company: {\n    name: [Array String; 3],\n    suffix: [Array String; 4]\n  },\n  date: {\n    month: {\n      abbr: [Array String; 12],\n      wide: [Array String; 12]\n    },\n    weekday: {\n      abbr: [Array String; 7],\n      wide: [Array String; 7]\n    }\n  },\n  internet: {\n    domain_suffix: [Array String; 11],\n    free_email: [Array String; 9]\n  },\n  name: {\n    female_first_name: [Array String; 93],\n    female_prefix: [Array String; 4],\n    first_name: [Array String; 188],\n    last_name: [Array String; 101],\n    male_first_name: [Array String; 95],\n    male_prefix: [Array String; 4],\n    name: [Array String; 5],\n    prefix: [Array String; 2],\n    suffix: [Array String; 3]\n  },\n  phone_number: {\n    formats: [Array String; 6]\n  },\n  title: Portuguese (Portugal)\n}\n```\n\n----------------------------------------\n\nTITLE: German (Switzerland) Locale Configuration in JSON\nDESCRIPTION: Defines data arrays for generating realistic Swiss German fake data. Includes structures for addresses, company names, internet domains, personal names with prefixes, and phone number formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/de_CH.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    country_code: [Array String; 10],\n    default_country: [Array String; 1],\n    postcode: [Array String; 9]\n  },\n  company: {\n    name: [Array String; 3],\n    suffix: [Array String; 8]\n  },\n  internet: {\n    domain_suffix: [Array String; 9]\n  },\n  name: {\n    first_name: [Array String; 336],\n    last_name: [Array String; 209],\n    name: [Array String; 6],\n    prefix: [Array String; 3]\n  },\n  phone_number: {\n    formats: [Array String; 9]\n  },\n  title: German (Switzerland)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lorem Ipsum Words Array for English (Bork) Locale in Bogus\nDESCRIPTION: JSON configuration that defines the lorem ipsum words array for the English (Bork) locale in the Bogus library. The configuration includes a 'lorem' object with a 'words' property that references an array of 103 strings, and a 'title' property that identifies the locale as 'English (Bork)'.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en_BORK.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  lorem: {\n    words: [Array String; 103]\n  },\n  title: English (Bork)\n}\n```\n\n----------------------------------------\n\nTITLE: Swedish Locale Configuration Object for Bogus\nDESCRIPTION: Comprehensive data structure defining Swedish locale arrays and formats for fake data generation. Includes categories for addresses, phone numbers, commerce, company names, dates, internet domains, personal names, and team names with their respective string arrays.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/sv.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 3],\n    city: [Array String; 1],\n    city_prefix: [Array String; 25],\n    city_suffix: [Array String; 19],\n    common_street_suffix: [Array String; 2],\n    country: [Array String; 205],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    secondary_address: [Array String; 2],\n    state: [Array String; 23],\n    street_address: [Array String; 1],\n    street_name: [Array String; 4],\n    street_prefix: [Array String; 6],\n    street_root: [Array String; 28],\n    street_suffix: [Array String; 5]\n  },\n  cell_phone: {\n    common_cell_prefix: [Array String; 3],\n    formats: [Array String; 1]\n  },\n  commerce: {\n    color: [Array String; 15],\n    department: [Array String; 17],\n    product_name: {\n      adjective: [Array String; 10],\n      material: [Array String; 9],\n      product: [Array String; 9]\n    }\n  },\n  company: {\n    name: [Array String; 3],\n    suffix: [Array String; 7]\n  },\n  date: {\n    month: {\n      abbr: [Array String; 12],\n      wide: [Array String; 12]\n    },\n    weekday: {\n      abbr: [Array String; 7],\n      wide: [Array String; 7]\n    }\n  },\n  internet: {\n    domain_suffix: [Array String; 5]\n  },\n  name: {\n    female_first_name: [Array String; 100],\n    last_name: [Array String; 100],\n    male_first_name: [Array String; 100],\n    name: [Array String; 8],\n    prefix: [Array String; 3],\n    title: {\n      descriptor: [Array String; 22],\n      job: [Array String; 25],\n      level: [Array String; 37]\n    }\n  },\n  phone_number: {\n    formats: [Array String; 2]\n  },\n  team: {\n    name: [Array String; 1],\n    suffix: [Array String; 13]\n  },\n  title: Swedish\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dutch (Belgium) Locale Schema in JSON\nDESCRIPTION: Comprehensive schema definition for generating fake data in Dutch (Belgium) format. Includes structured templates for addresses, company information, internet details, personal names, and phone number formats. Each field contains arrays of predefined values that can be randomly selected during data generation.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/nl_BE.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [Array String; 6],\n    \"city\": [Array String; 2],\n    \"city_prefix\": [Array String; 1126],\n    \"city_suffix\": [Array String; 4],\n    \"default_country\": [Array String; 1],\n    \"postcode\": [Array String; 1],\n    \"secondary_address\": [Array String; 3],\n    \"state\": [Array String; 6],\n    \"state_abbr\": [Array String; 6],\n    \"street_address\": [Array String; 1],\n    \"street_name\": [Array String; 2],\n    \"street_suffix\": [Array String; 6]\n  },\n  \"company\": {\n    \"suffix\": [Array String; 4]\n  },\n  \"internet\": {\n    \"domain_suffix\": [Array String; 6],\n    \"free_email\": [Array String; 4]\n  },\n  \"name\": {\n    \"first_name\": [Array String; 200],\n    \"last_name\": [Array String; 32],\n    \"name\": [Array String; 4],\n    \"prefix\": [Array String; 4],\n    \"suffix\": [Array String; 2]\n  },\n  \"phone_number\": {\n    \"formats\": [Array String; 9]\n  },\n  \"title\": \"Dutch (Belgium)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Benchmark Project in Release Mode\nDESCRIPTION: Command to build the benchmark project in Release configuration using dotnet CLI.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Benchmark/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet build -c Release\n```\n\n----------------------------------------\n\nTITLE: Defining Latvian Locale Configuration for Bogus Fake Data Generator\nDESCRIPTION: A comprehensive JSON configuration defining the Latvian locale for the Bogus fake data generation library. The structure includes various categories such as address components, phone formats, commerce terms, company details, date formats, internet domains, lorem ipsum text, personal names, and other locale-specific data needed for generating realistic Latvian test data.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/lv.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 2],\n    city: [Array String; 1],\n    city_name: [Array String; 76],\n    country: [Array String; 176],\n    default_country: [Array String; 1],\n    postcode: [Array String; 2],\n    secondary_address: [Array String; 2],\n    state: [Array String; 28],\n    street_address: [Array String; 2],\n    street_name: [Array String; 1],\n    street_suffix: [Array String; 6],\n    street_title: [Array String; 347]\n  },\n  cell_phone: {\n    formats: [Array String; 3]\n  },\n  commerce: {\n    color: [Array String; 23],\n    department: [Array String; 21],\n    product_name: {\n      adjective: [Array String; 12],\n      material: [Array String; 7],\n      product: [Array String; 21]\n    }\n  },\n  company: {\n    name: [Array String; 5],\n    prefix: [Array String; 6],\n    suffix: [Array String; 4]\n  },\n  date: {\n    month: {\n      abbr: [Array String; 12],\n      abbr_context: [Array String; 12],\n      wide: [Array String; 12],\n      wide_context: [Array String; 12]\n    },\n    weekday: {\n      abbr: [Array String; 7],\n      abbr_context: [Array String; 7],\n      wide: [Array String; 7],\n      wide_context: [Array String; 7]\n    }\n  },\n  internet: {\n    domain_suffix: [Array String; 5],\n    free_email: [Array String; 8]\n  },\n  lorem: {\n    supplemental: [Array String; 840],\n    words: [Array String; 184]\n  },\n  name: {\n    female_first_name: [Array String; 105],\n    female_last_name: [Array String; 209],\n    male_first_name: [Array String; 91],\n    male_last_name: [Array String; 209],\n    name: [Array String; 11],\n    prefix: [Array String; 3],\n    suffix: [Array String; 2],\n    title: {\n      descriptor: [Array String; 12],\n      job: [Array String; 22],\n      level: [Array String; 30]\n    }\n  },\n  phone_number: {\n    formats: [Array String; 3]\n  },\n  separator:  un ,\n  title: Latvian\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bogus Data Structure - Portuguese (Brazil)\nDESCRIPTION: Comprehensive JSON structure defining arrays and nested objects for generating fake data in Portuguese (Brazil) locale. Includes collections for addresses, commerce, company information, date formats, internet data, lorem ipsum text, name components, and phone number formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/pt_BR.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 3],\n    city: [Array String; 100],\n    country: [Array String; 234],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    secondary_address: [Array String; 5],\n    state: [Array String; 27],\n    state_abbr: [Array String; 27],\n    street_suffix: [Array String; 6]\n  },\n  commerce: {\n    color: [Array String; 45],\n    department: [Array String; 22],\n    product_name: {\n      adjective: [Array String; 16],\n      material: [Array String; 11],\n      product: [Array String; 24]\n    }\n  },\n  company: {\n    name: [Array String; 3],\n    suffix: [Array String; 5]\n  },\n  date: {\n    month: {\n      abbr: [Array String; 12],\n      abbr_context: [Array String; 12],\n      wide: [Array String; 12],\n      wide_context: [Array String; 12]\n    },\n    weekday: {\n      abbr: [Array String; 7],\n      abbr_context: [Array String; 7],\n      wide: [Array String; 7],\n      wide_context: [Array String; 7]\n    }\n  },\n  internet: {\n    domain_suffix: [Array String; 7],\n    free_email: [Array String; 5]\n  },\n  lorem: {\n    words: [Array String; 249]\n  },\n  name: {\n    female_first_name: [Array String; 80],\n    first_name: [Array String; 169],\n    last_name: [Array String; 22],\n    male_first_name: [Array String; 88],\n    prefix: [Array String; 5],\n    suffix: [Array String; 3]\n  },\n  phone_number: {\n    formats: [Array String; 3]\n  },\n  title: Portuguese (Brazil)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vietnamese Locale Configuration in JSON for Bogus Fake Data Generator\nDESCRIPTION: A comprehensive JSON structure that defines Vietnamese locale-specific data for the Bogus fake data generation library. The configuration includes various categories like address components, phone formats, company naming patterns, date formatting, internet domains, lorem ipsum words, and personal name collections.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/vi.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    city: [Array String; 1],\n    city_root: [Array String; 63],\n    country: [Array String; 193],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1]\n  },\n  cell_phone: {\n    formats: [Array String; 5]\n  },\n  company: {\n    name: [Array String; 1],\n    prefix: [Array String; 6]\n  },\n  date: {\n    month: {\n      abbr: [Array String; 12],\n      abbr_context: [Array String; 12],\n      wide: [Array String; 12],\n      wide_context: [Array String; 12]\n    },\n    weekday: {\n      abbr: [Array String; 7],\n      abbr_context: [Array String; 7],\n      wide: [Array String; 7],\n      wide_context: [Array String; 7]\n    }\n  },\n  internet: {\n    domain_suffix: [Array String; 5]\n  },\n  lorem: {\n    words: [Array String; 103]\n  },\n  name: {\n    female_first_name: [Array String; 1310],\n    first_name: [Array String; 2535],\n    last_name: [Array String; 26],\n    male_first_name: [Array String; 1225],\n    name: [Array String; 3]\n  },\n  phone_number: {\n    formats: [Array String; 2]\n  },\n  title: Vietnamese\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chinese Locale Configuration for Bogus Test Data Generator\nDESCRIPTION: A JSON configuration that specifies the structure and sample data for generating fake Chinese addresses, names, and phone numbers. The file includes arrays of strings for various properties like city prefixes, state names, first names, and phone number formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/zh_CN.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 5],\n    city: [Array String; 1],\n    city_prefix: [Array String; 21],\n    city_suffix: [Array String; 19],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    state: [Array String; 34],\n    state_abbr: [Array String; 34],\n    street_address: [Array String; 1],\n    street_name: [Array String; 1],\n    street_suffix: [Array String; 8]\n  },\n  name: {\n    first_name: [Array String; 134],\n    last_name: [Array String; 100],\n    name: [Array String; 1]\n  },\n  phone_number: {\n    formats: [Array String; 3]\n  },\n  title: Chinese\n}\n```\n\n----------------------------------------\n\nTITLE: Norwegian Locale Dataset Configuration for Bogus Library\nDESCRIPTION: Complete JSON configuration file containing Norwegian locale-specific data sets used by the Bogus fake data generation library. The file organizes various data categories including address components, company information, internet domains, name variants, and phone number formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/nb_NO.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 2],\n    city: [Array String; 1],\n    city_root: [Array String; 17],\n    city_suffix: [Array String; 28],\n    common_street_suffix: [Array String; 6],\n    default_country: [Array String; 1],\n    postcode: [Array String; 4],\n    secondary_address: [Array String; 3],\n    state: [Array String; 1],\n    street_address: [Array String; 1],\n    street_name: [Array String; 4],\n    street_prefix: [Array String; 6],\n    street_root: [Array String; 33],\n    street_suffix: [Array String; 46]\n  },\n  company: {\n    name: [Array String; 3],\n    suffix: [Array String; 6]\n  },\n  internet: {\n    domain_suffix: [Array String; 4]\n  },\n  name: {\n    female_first_name: [Array String; 50],\n    first_name: [Array String; 100],\n    last_name: [Array String; 100],\n    male_first_name: [Array String; 50],\n    name: [Array String; 6],\n    prefix: [Array String; 2],\n    suffix: [Array String; 7]\n  },\n  phone_number: {\n    formats: [Array String; 4]\n  },\n  title: Norwegian\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chinese (Taiwan) Localization Data in JSON for Bogus Fake Data Generator\nDESCRIPTION: A comprehensive JSON configuration that defines locale-specific data for Chinese (Taiwan). It includes address components (building numbers, cities, states, etc.), name components (first and last names), and phone number formats for generating realistic fake data in the Taiwanese context.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/zh_TW.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 4],\n    city: [Array String; 1],\n    city_prefix: [Array String; 20],\n    city_suffix: [Array String; 2],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    state: [Array String; 2],\n    state_abbr: [Array String; 21],\n    street_address: [Array String; 1],\n    street_name: [Array String; 1],\n    street_suffix: [Array String; 6]\n  },\n  name: {\n    first_name: [Array String; 123],\n    last_name: [Array String; 100],\n    name: [Array String; 1]\n  },\n  phone_number: {\n    formats: [Array String; 3]\n  },\n  title: Chinese (Taiwan)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Georgian Locale Data Structure for Bogus Library\nDESCRIPTION: This JSON structure defines various categories of fake data for the Georgian locale, including address components, cell phone formats, company details, internet-related information, personal names, and phone number formats. It also specifies the separator and title for the Georgian locale.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/ge.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [\"Array String; 3\"],\n    \"city\": [\"Array String; 6\"],\n    \"city_name\": [\"Array String; 88\"],\n    \"city_prefix\": [\"Array String; 4\"],\n    \"city_suffix\": [\"Array String; 4\"],\n    \"country\": [\"Array String; 313\"],\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 1\"],\n    \"secondary_address\": [\"Array String; 2\"],\n    \"street_address\": [\"Array String; 1\"],\n    \"street_name\": [\"Array String; 1\"],\n    \"street_suffix\": [\"Array String; 6\"],\n    \"street_title\": [\"Array String; 416\"]\n  },\n  \"cell_phone\": {\n    \"formats\": [\"Array String; 9\"]\n  },\n  \"company\": {\n    \"name\": [\"Array String; 5\"],\n    \"prefix\": [\"Array String; 4\"],\n    \"suffix\": [\"Array String; 4\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 6\"],\n    \"free_email\": [\"Array String; 3\"]\n  },\n  \"name\": {\n    \"first_name\": [\"Array String; 499\"],\n    \"last_name\": [\"Array String; 169\"],\n    \"name\": [\"Array String; 6\"],\n    \"prefix\": [\"Array String; 4\"],\n    \"title\": {\n      \"descriptor\": [\"Array String; 6\"],\n      \"job\": [\"Array String; 37\"],\n      \"level\": [\"Array String; 25\"]\n    }\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 20\"]\n  },\n  \"separator\": \" და \",\n  \"title\": \"Georgian\"\n}\n```\n\n----------------------------------------\n\nTITLE: Italian Locale Configuration for Bogus Test Data Generator\nDESCRIPTION: Structured data configuration object containing predefined arrays of strings for generating fake test data in Italian. Includes comprehensive datasets for addresses, company information, internet domains, personal names, and phone number formats.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/it.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 3],\n    city: [Array String; 4],\n    city_prefix: [Array String; 5],\n    city_suffix: [Array String; 12],\n    country: [Array String; 241],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    secondary_address: [Array String; 2],\n    state: [Array String; 110],\n    state_abbr: [Array String; 110],\n    street_address: [Array String; 2],\n    street_name: [Array String; 2],\n    street_suffix: [Array String; 7]\n  },\n  company: {\n    adjective: [Array String; 70],\n    bs_adjective: [Array String; 46],\n    bs_noun: [Array String; 26],\n    bs_verb: [Array String; 28],\n    descriptor: [Array String; 57],\n    name: [Array String; 3],\n    noun: [Array String; 89],\n    suffix: [Array String; 4]\n  },\n  internet: {\n    domain_suffix: [Array String; 8],\n    free_email: [Array String; 6]\n  },\n  name: {\n    female_first_name: [Array String; 617],\n    first_name: [Array String; 1700],\n    last_name: [Array String; 635],\n    male_first_name: [Array String; 1083],\n    name: [Array String; 6],\n    prefix: [Array String; 4]\n  },\n  phone_number: {\n    formats: [Array String; 11]\n  },\n  title: Italian\n}\n```\n\n----------------------------------------\n\nTITLE: Defining German (Austria) Locale Data Structure for Bogus Fake Data Generation Library\nDESCRIPTION: A JSON configuration that defines collections of strings used for generating fake data in the German (Austria) locale. The structure includes various categories like address components, phone number formats, company details, internet domains, and person names specific to the Austrian context.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/de_AT.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 6],\n    city: [Array String; 1],\n    city_name: [Array String; 119],\n    country: [Array String; 237],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    secondary_address: [Array String; 3],\n    state: [Array String; 9],\n    state_abbr: [Array String; 9],\n    street_address: [Array String; 1],\n    street_name: [Array String; 1],\n    street_root: [Array String; 198]\n  },\n  cell_phone: {\n    formats: [Array String; 4]\n  },\n  company: {\n    legal_form: [Array String; 7],\n    name: [Array String; 3],\n    suffix: [Array String; 7]\n  },\n  internet: {\n    domain_suffix: [Array String; 8],\n    free_email: [Array String; 3]\n  },\n  name: {\n    first_name: [Array String; 1155],\n    last_name: [Array String; 1688],\n    name: [Array String; 6],\n    nobility_title_prefix: [Array String; 4],\n    prefix: [Array String; 2]\n  },\n  phone_number: {\n    formats: [Array String; 8]\n  },\n  title: German (Austria)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Romanian Locale Data for Bogus Library\nDESCRIPTION: This JSON structure defines Romanian-specific data for various categories used in fake data generation. It includes information for addresses, cell phones, dates, internet domains, names, and phone numbers.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/ro.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [\"Array String; 1\"],\n    \"city\": [\"Array String; 300\"],\n    \"county\": [\"Array String; 42\"],\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 1\"],\n    \"secondary_address\": [\"Array String; 2\"],\n    \"state\": [\"Array String; 42\"],\n    \"state_abbr\": [\"Array String; 42\"],\n    \"street_address\": [\"Array String; 1\"],\n    \"street_name\": [\"Array String; 1\"],\n    \"street_suffix\": [\"Array String; 3\"],\n    \"streets\": [\"Array String; 100\"]\n  },\n  \"cell_phone\": {\n    \"formats\": [\"Array String; 59\"]\n  },\n  \"date\": {\n    \"month\": {\n      \"abbr\": [\"Array String; 12\"],\n      \"abbr_context\": [\"Array String; 12\"],\n      \"wide\": [\"Array String; 12\"],\n      \"wide_context\": [\"Array String; 12\"]\n    },\n    \"weekday\": {\n      \"abbr\": [\"Array String; 7\"],\n      \"abbr_context\": [\"Array String; 7\"],\n      \"wide\": [\"Array String; 7\"],\n      \"wide_context\": [\"Array String; 7\"]\n    }\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 18\"],\n    \"free_email\": [\"Array String; 3\"]\n  },\n  \"name\": {\n    \"female_first_name\": [\"Array String; 387\"],\n    \"last_name\": [\"Array String; 300\"],\n    \"male_first_name\": [\"Array String; 288\"],\n    \"name\": [\"Array String; 32\"],\n    \"prefix\": [\"Array String; 3\"],\n    \"suffix\": [\"Array String; 2\"]\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 82\"]\n  },\n  \"title\": \"Romanian\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bogus Data Generation for Zulu (South Africa)\nDESCRIPTION: This JSON configuration specifies data generation rules for Zulu (South Africa) in the Bogus library. It includes settings for address formats, cell phone and phone number patterns, company suffixes, and internet domain suffixes.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/zu_ZA.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": {\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 2\"]\n  },\n  \"cell_phone\": {\n    \"formats\": [\"Array String; 6\"]\n  },\n  \"company\": {\n    \"suffix\": [\"Array String; 3\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 5\"]\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 9\"]\n  },\n  \"title\": \"Zulu (South Africa)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bogus Data Structure in JSON\nDESCRIPTION: This JSON object defines the structure for generating fake data across multiple categories. It includes arrays of strings for various data points like city names, company adjectives, and names. Some categories have nested structures for more specific data generation.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/pl.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [\"Array String; 3\"],\n    \"city\": [\"Array String; 1\"],\n    \"city_name\": [\"Array String; 908\"],\n    \"country\": [\"Array String; 198\"],\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 1\"],\n    \"secondary_address\": [\"Array String; 2\"],\n    \"state\": [\"Array String; 16\"],\n    \"state_abbr\": [\"Array String; 16\"],\n    \"street_address\": [\"Array String; 1\"],\n    \"street_name\": [\"Array String; 1\"],\n    \"street_prefix\": [\"Array String; 2\"]\n  },\n  \"cell_phone\": {\n    \"formats\": [\"Array String; 12\"]\n  },\n  \"company\": {\n    \"adjetive\": [\"Array String; 100\"],\n    \"bs_adjective\": [\"Array String; 65\"],\n    \"bs_noun\": [\"Array String; 44\"],\n    \"bs_verb\": [\"Array String; 60\"],\n    \"descriptor\": [\"Array String; 101\"],\n    \"name\": [\"Array String; 3\"],\n    \"noun\": [\"Array String; 104\"],\n    \"suffix\": [\"Array String; 4\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 5\"],\n    \"free_email\": [\"Array String; 3\"]\n  },\n  \"lorem\": {\n    \"words\": [\"Array String; 249\"]\n  },\n  \"name\": {\n    \"first_name\": [\"Array String; 408\"],\n    \"last_name\": [\"Array String; 712\"],\n    \"name\": [\"Array String; 6\"],\n    \"prefix\": [\"Array String; 2\"],\n    \"title\": {\n      \"descriptor\": [\"Array String; 22\"],\n      \"job\": [\"Array String; 25\"],\n      \"level\": [\"Array String; 37\"]\n    }\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 49\"]\n  },\n  \"title\": \"Polish\"\n}\n```\n\n----------------------------------------\n\nTITLE: French (Switzerland) Locale Configuration in JSON for Bogus Library\nDESCRIPTION: This JSON configuration defines locale-specific data for French-speaking Switzerland to be used in the Bogus fake data generation library. It includes city names, country codes, postal codes, states, internet domain suffixes, and phone number formats appropriate for Switzerland.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/fr_CH.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    city: [Array String; 1],\n    city_name: [Array String; 173],\n    country_code: [Array String; 1],\n    default_country: [Array String; 1],\n    postcode: [Array String; 9],\n    state: [Array String; 26]\n  },\n  internet: {\n    domain_suffix: [Array String; 6]\n  },\n  phone_number: {\n    formats: [Array String; 15]\n  },\n  title: French (Switzerland)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arabic Locale Data Structure for Bogus Fake Data Generator\nDESCRIPTION: JSON structure defining collections of Arabic strings for generating fake data with the Bogus library. The configuration includes address components, lorem ipsum text, and name-related data organized in a hierarchical structure.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/ar.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 4],\n    city: [Array String; 1],\n    city_name: [Array String; 604],\n    city_prefix: [Array String; 1],\n    city_suffix: [Array String; 1],\n    default_country: [Array String; 1],\n    direction: [Array String; 8],\n    postcode: [Array String; 1],\n    secondary_address: [Array String; 6],\n    state: [Array String; 22],\n    street_address: [Array String; 2],\n    street_name: [Array String; 1],\n    street_prefix: [Array String; 6],\n    street_suffix: [Array String; 26]\n  },\n  lorem: {\n    supplemental: [Array String; 121],\n    words: [Array String; 117]\n  },\n  name: {\n    female_first_name: [Array String; 17],\n    first_name: [Array String; 34],\n    gender: [Array String; 2],\n    last_name: [Array String; 25],\n    male_first_name: [Array String; 17],\n    name: [Array String; 10],\n    prefix: [Array String; 2],\n    title: {\n      job: [Array String; 7]\n    }\n  },\n  title: Arabic\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Finnish Name Localization Structure in JSON\nDESCRIPTION: Data structure containing Finnish name collections including gender-specific first names, generic first names, last names, and full names. Includes array sizes for each name category.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/fi.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  name: {\n    female_first_name: [Array String; 50],\n    first_name: [Array String; 100],\n    last_name: [Array String; 50],\n    male_first_name: [Array String; 50],\n    name: [Array String; 4]\n  },\n  title: Finnish\n}\n```\n\n----------------------------------------\n\nTITLE: Azerbaijani Locale Definition JSON for Bogus Faker Library\nDESCRIPTION: Comprehensive locale configuration object containing Azerbaijani language specific data arrays for generating fake data across multiple categories including addresses, company information, names, dates and more. The structure defines arrays of strings for various data types that can be used for generating realistic Azerbaijani test data.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/az.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": {\n    \"building_number\": [\"Array String; 1\"],\n    \"city\": [\"Array String; 1\"],\n    \"city_name\": [\"Array String; 78\"],\n    \"country\": [\"Array String; 239\"],\n    \"default_country\": [\"Array String; 1\"],\n    \"postcode\": [\"Array String; 1\"],\n    \"secondary_address\": [\"Array String; 1\"],\n    \"street_address\": [\"Array String; 1\"],\n    \"street_name\": [\"Array String; 2\"],\n    \"street_suffix\": [\"Array String; 6\"],\n    \"street_title\": [\"Array String; 235\"]\n  },\n  \"commerce\": {\n    \"color\": [\"Array String; 18\"],\n    \"department\": [\"Array String; 18\"],\n    \"product_name\": {\n      \"adjective\": [\"Array String; 10\"],\n      \"material\": [\"Array String; 7\"],\n      \"product\": [\"Array String; 8\"]\n    }\n  },\n  \"company\": {\n    \"name\": [\"Array String; 8\"],\n    \"prefix\": [\"Array String; 3\"],\n    \"suffix\": [\"Array String; 2\"]\n  },\n  \"date\": {\n    \"month\": {\n      \"abbr\": [\"Array String; 12\"],\n      \"abbr_context\": [\"Array String; 12\"],\n      \"wide\": [\"Array String; 12\"],\n      \"wide_context\": [\"Array String; 12\"]\n    },\n    \"weekday\": {\n      \"abbr\": [\"Array String; 7\"],\n      \"abbr_context\": [\"Array String; 7\"],\n      \"wide\": [\"Array String; 7\"],\n      \"wide_context\": [\"Array String; 7\"]\n    }\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 6\"],\n    \"free_email\": [\"Array String; 5\"]\n  },\n  \"name\": {\n    \"female_first_name\": [\"Array String; 73\"],\n    \"female_last_name\": [\"Array String; 10\"],\n    \"male_first_name\": [\"Array String; 35\"],\n    \"male_last_name\": [\"Array String; 10\"],\n    \"name\": [\"Array String; 6\"]\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 1\"]\n  },\n  \"separator\": \" və \",\n  \"title\": \"Azerbaijani\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IBAN Format for Czech Republic (CZ)\nDESCRIPTION: Specifies the IBAN format for the Czech Republic, including the BBAN structure, country code, and total length.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bban\": [\n    {\n      \"count\": 10,\n      \"type\": \"n\"\n    },\n    {\n      \"count\": 10,\n      \"type\": \"n\"\n    }\n  ],\n  \"country\": \"CZ\",\n  \"format\": \"CZkk bbbb ssss sscc cccc cccc\",\n  \"total\": 24\n}\n```\n\n----------------------------------------\n\nTITLE: Czech Localization Schema for Bogus\nDESCRIPTION: Complete schema definition for generating localized Czech test data including addresses, company information, dates, names, and other common data types. Each category contains arrays of possible values that can be used to generate random but realistic looking data.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/cz.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    building_number: [Array String; 3],\n    city: [Array String; 1],\n    city_name: [Array String; 602],\n    country: [Array String; 195],\n    default_country: [Array String; 1],\n    postcode: [Array String; 3],\n    secondary_address: [Array String; 2],\n    street: [Array String; 8311],\n    street_address: [Array String; 1],\n    street_name: [Array String; 1],\n    time_zone: [Array String; 143]\n  },\n  company: {\n    adjective: [Array String; 100],\n    bs_noun: [Array String; 109],\n    bs_verb: [Array String; 60],\n    descriptor: [Array String; 101],\n    name: [Array String; 3],\n    noun: [Array String; 104],\n    suffix: [Array String; 3]\n  },\n  date: {\n    month: {\n      abbr: [Array String; 12],\n      abbr_context: [Array String; 12],\n      wide: [Array String; 12],\n      wide_context: [Array String; 12]\n    },\n    weekday: {\n      abbr: [Array String; 7],\n      abbr_context: [Array String; 7],\n      wide: [Array String; 7],\n      wide_context: [Array String; 7]\n    }\n  },\n  internet: {\n    domain_suffix: [Array String; 5],\n    free_email: [Array String; 5]\n  },\n  lorem: {\n    words: [Array String; 249]\n  },\n  name: {\n    female_first_name: [Array String; 786],\n    female_last_name: [Array String; 999],\n    male_first_name: [Array String; 796],\n    male_last_name: [Array String; 999],\n    name: [Array String; 10],\n    prefix: [Array String; 4],\n    suffix: [Array String; 1],\n    title: {\n      descriptor: [Array String; 22],\n      job: [Array String; 25],\n      level: [Array String; 37]\n    }\n  },\n  phone_number: {\n    formats: [Array String; 6]\n  },\n  title: Czech\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IBAN Format for Denmark (DK)\nDESCRIPTION: Specifies the IBAN format for Denmark, including the BBAN structure, country code, and total length.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bban\": [\n    {\n      \"count\": 4,\n      \"type\": \"n\"\n    },\n    {\n      \"count\": 10,\n      \"type\": \"n\"\n    }\n  ],\n  \"country\": \"DK\",\n  \"format\": \"DKkk bbbb cccc cccc cc\",\n  \"total\": 18\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Greek Locale Data Structure for Bogus Library\nDESCRIPTION: This JSON structure defines various categories of data used for generating fake information in Greek. It includes details for addresses, names, companies, finance, and more, specifically tailored for the Greek locale.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/el.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": {\n    \"county\": [\"Array String; 78\"],\n    \"default_country\": [\"Array String; 1\"]\n  },\n  \"app\": {\n    \"author\": [\"Array String; 2\"],\n    \"name\": [\"Array String; 32\"],\n    \"version\": [\"Array String; 5\"]\n  },\n  \"business\": {\n    \"credit_card_expiry_dates\": [\"Array String; 4\"],\n    \"credit_card_numbers\": [\"Array String; 4\"],\n    \"credit_card_types\": [\"Array String; 4\"]\n  },\n  \"cell_phone\": {\n    \"formats\": [\"Array String; 4\"]\n  },\n  \"commerce\": {\n    \"color\": [\"Array String; 17\"],\n    \"department\": [\"Array String; 22\"],\n    \"product_name\": {\n      \"adjective\": [\"Array String; 10\"],\n      \"material\": [\"Array String; 5\"],\n      \"product\": [\"Array String; 22\"]\n    }\n  },\n  \"company\": {\n    \"adjective\": [\"Array String; 62\"],\n    \"bs_adjective\": [\"Array String; 52\"],\n    \"bs_noun\": [\"Array String; 36\"],\n    \"bs_verb\": [\"Array String; 28\"],\n    \"descriptor\": [\"Array String; 27\"],\n    \"name\": [\"Array String; 3\"],\n    \"noun\": [\"Array String; 39\"],\n    \"suffix\": [\"Array String; 4\"]\n  },\n  \"credit_card\": {\n    \"american_express\": [\"Array String; 2\"],\n    \"discover\": [\"Array String; 6\"],\n    \"maestro\": [\"Array String; 3\"],\n    \"mastercard\": [\"Array String; 2\"],\n    \"visa\": [\"Array String; 2\"]\n  },\n  \"finance\": {\n    \"account_type\": [\"Array String; 3\"],\n    \"currency\": [\n      {\n        \"code\": \"EUR\",\n        \"name\": \"Ευρώ\",\n        \"symbol\": \"€\"\n      }\n    ],\n    \"transaction_type\": [\"Array String; 4\"]\n  },\n  \"hacker\": {\n    \"abbreviation\": [\"Array String; 29\"],\n    \"adjective\": [\"Array String; 9\"],\n    \"noun\": [\"Array String; 20\"],\n    \"verb\": [\"Array String; 14\"]\n  },\n  \"internet\": {\n    \"domain_suffix\": [\"Array String; 5\"]\n  },\n  \"lorem\": {\n    \"words\": [\"Array String; 249\"]\n  },\n  \"name\": {\n    \"first_name\": [\"Array String; 36\"],\n    \"last_name\": [\"Array String; 200\"],\n    \"name\": [\"Array String; 6\"],\n    \"prefix\": [\"Array String; 4\"],\n    \"title\": {\n      \"descriptor\": [\"Array String; 6\"],\n      \"job\": [\"Array String; 19\"],\n      \"level\": [\"Array String; 30\"]\n    }\n  },\n  \"phone_number\": {\n    \"formats\": [\"Array String; 52\"]\n  },\n  \"separator\": \" & \",\n  \"team\": {\n    \"creature\": [\"Array String; 64\"],\n    \"name\": [\"Array String; 1\"]\n  },\n  \"title\": \"Greek\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IBAN Format for Estonia (EE)\nDESCRIPTION: Specifies the IBAN format for Estonia, including the BBAN structure, country code, and total length.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/en.locale.schema.verified.txt#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bban\": [\n    {\n      \"count\": 4,\n      \"type\": \"n\"\n    },\n    {\n      \"count\": 12,\n      \"type\": \"n\"\n    }\n  ],\n  \"country\": \"EE\",\n  \"format\": \"EEkk bbss cccc cccc cccx\",\n  \"total\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Japanese Locale Configuration Structure for Bogus Library\nDESCRIPTION: A JSON configuration file that defines Japanese locale data for the Bogus fake data generation library. It contains categorized data arrays for addresses, names, phone numbers, and lorem ipsum text that will be used for generating fake data with Japanese context.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/ja.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    city: [Array String; 4],\n    city_prefix: [Array String; 7],\n    city_suffix: [Array String; 4],\n    postcode: [Array String; 1],\n    state: [Array String; 47],\n    state_abbr: [Array String; 47],\n    street_name: [Array String; 2]\n  },\n  cell_phone: {\n    formats: [Array String; 3]\n  },\n  lorem: {\n    supplemental: [Array String; 506],\n    words: [Array String; 509]\n  },\n  name: {\n    first_name: [Array String; 21],\n    last_name: [Array String; 20],\n    name: [Array String; 1]\n  },\n  phone_number: {\n    formats: [Array String; 4]\n  },\n  title: Japanese\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Korean Locale Configuration for Bogus Fake Data Generator\nDESCRIPTION: A comprehensive JSON structure that defines data generation templates for Korean locale in the Bogus library. The configuration includes address components, company information, internet-related data, lorem ipsum words, name formats, and phone number patterns.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/ko.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    city: [Array String; 1],\n    city_name: [Array String; 28],\n    city_suffix: [Array String; 3],\n    postcode: [Array String; 1],\n    state: [Array String; 17],\n    state_abbr: [Array String; 17],\n    street_name: [Array String; 1],\n    street_root: [Array String; 28],\n    street_suffix: [Array String; 3]\n  },\n  company: {\n    name: [Array String; 2],\n    prefix: [Array String; 2],\n    suffix: [Array String; 6]\n  },\n  internet: {\n    domain_suffix: [Array String; 8],\n    free_email: [Array String; 4]\n  },\n  lorem: {\n    words: [Array String; 128]\n  },\n  name: {\n    first_name: [Array String; 21],\n    last_name: [Array String; 20],\n    name: [Array String; 1]\n  },\n  phone_number: {\n    formats: [Array String; 3]\n  },\n  title: Korean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nepalese Locale Data for Bogus Fake Data Generator\nDESCRIPTION: JSON configuration that defines Nepalese locale-specific data arrays for generating realistic test data. The configuration includes address components (cities, postcodes, states), company suffixes, internet domains, person names, and phone number formats specific to Nepal.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/ne.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  address: {\n    city: [Array String; 16],\n    default_country: [Array String; 1],\n    postcode: [Array String; 1],\n    state: [Array String; 53]\n  },\n  company: {\n    suffix: [Array String; 4]\n  },\n  internet: {\n    domain_suffix: [Array String; 5],\n    free_email: [Array String; 4]\n  },\n  name: {\n    first_name: [Array String; 55],\n    last_name: [Array String; 39]\n  },\n  phone_number: {\n    formats: [Array String; 3]\n  },\n  title: Nepalese\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Afrikaans Locale Configuration for Bogus Fake Data Library\nDESCRIPTION: JSON configuration that defines locale-specific data for the Afrikaans language in the Bogus fake data generation library. It includes arrays for address components, phone number formats, company suffixes, and internet domain suffixes tailored for Afrikaans-speaking regions.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Bogus/data/af_ZA.locale.schema.verified.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  address: {\n    default_country: [Array String; 1],\n    postcode: [Array String; 2]\n  },\n  cell_phone: {\n    formats: [Array String; 6]\n  },\n  company: {\n    suffix: [Array String; 3]\n  },\n  internet: {\n    domain_suffix: [Array String; 5]\n  },\n  phone_number: {\n    formats: [Array String; 9]\n  },\n  title: Afrikaans\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Benchmark Tests\nDESCRIPTION: Command to run the compiled benchmark tests using dotnet CLI. Results will be generated in the BenchmarkDotNet.Artifacts directory.\nSOURCE: https://github.com/bchavez/Bogus/blob/master/Source/Benchmark/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet benchmark bin\\Release\\netstandard2.0\\Benchmark.dll\n```"
  }
]