[
  {
    "owner": "jycouet",
    "repo": "kitql",
    "content": "TITLE: Svelte Route Usage Example\nDESCRIPTION: This example demonstrates how to use the `route` function from `$lib/ROUTES` to create type-checked links in Svelte components, replacing hardcoded strings to prevent errors. It highlights the benefit of automatic updates when route locations change.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { route } from '$lib/ROUTES'\n</script>\n\n<!-- ðŸ¤ž before, hardcoded string, error prone -->\n<a href=\"/terms-and-conditions\">Terms</a>\n\n<!-- âœ… after, typechecked route, no more errors -->\n<a href={route('/terms-and-conditions')}>Terms</a>\n<!--\n   If you change location of `/terms-and-conditions/+page.svelte`:\n     - the key '/terms-and-conditions' will not exist\n     - `route` function will yell!\n-->\n```\n\n----------------------------------------\n\nTITLE: Use route in Svelte Component - HTML/TypeScript\nDESCRIPTION: Demonstrates how to use the generated `route` object within a Svelte component to create a link.  It imports the `route` object from `$lib/ROUTES` and uses it to generate the correct URL for the `/about` route.  The `lang=\"ts\"` attribute specifies TypeScript support.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/vite-plugin-kit-routes/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { route } from '$lib/ROUTES'\n</script>\n\n<a href={route('/about')}>About</a>\n```\n\n----------------------------------------\n\nTITLE: Svelte Dynamic Route Example\nDESCRIPTION: This snippet shows how to use the `route` function with dynamic routes, including passing parameters to generate the correct URL. The example includes passing an `id` parameter.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { route } from '$lib/ROUTES'\n</script>\n\n<!-- ðŸ¤ž before, hardcoded string, error prone -->\n<a href=\"/site/123\">Go to site</a>\n\n<!-- âœ… after, typechecked route, no more errors -->\n<a href={route('/site/[id]', { id: 123 })}>Go to site</a>\n```\n\n----------------------------------------\n\nTITLE: Using handleProxies in hooks.server.ts\nDESCRIPTION: This code snippet demonstrates how to use `handleProxies` within the `hooks.server.ts` file to forward requests to a backend service.  It sets up a proxy for paths starting with `/proxy` to `http://my.super.website/graphql`, preserving subpaths.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/05_handles.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks.server.ts\nimport { sequence } from '@sveltejs/kit/hooks'\n\nimport { handleProxies } from '@kitql/handles'\n\nexport const handle = sequence(\n\t// Forwards all requests to paths beginning with `/proxy` to\n\t// `http://my.super.website/graphql`. Subpaths are preserved, e.g. `/proxy/api/path` is\n\t// forwarded to `http://my.super.website/graphql/api/path`.\n\thandleProxies([['/proxy', { to: 'http://my.super.website/graphql' }]]),\n)\n```\n\n----------------------------------------\n\nTITLE: Svelte Route with Form Actions\nDESCRIPTION: This example demonstrates how to use `route` with Svelte form actions, ensuring the action URL is type-checked and up-to-date. It uses `enhance` from `$app/forms` and `page` from `$app/stores` to get the current page's parameters.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { enhance } from '$app/forms'\n\timport { page } from '$app/stores'\n\n\timport { route } from '$lib/ROUTES'\n\n\tconst id = $page.params.id\n\n\t// ðŸ¤ž before, hardcoded string, error prone\n\tconst action_hope = `/site/${id}?/send`\n\n\t// âœ… after, typechecked route, no more errors\n\tconst action = route('send /site/[id]', { id })\n</script>\n\n<form method=\"POST\" use:enhance {action}>\n\t<button>Check</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Advanced configuration of vite-plugin-stripper (TypeScript)\nDESCRIPTION: This code snippet shows a more advanced configuration of the `vite-plugin-stripper`. It allows stripping code based on decorators and their arguments, for example, removing code associated with `@BackendMethod` and `@Entity` decorators, including functions like `backendPrefilter`, `backendPreprocessFilter`, and `sqlExpression` called within the `@Entity` decorator's arguments.  `strip` array defines the decorators and conditions to be stripped.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/07_vite-plugin-stripper.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstripper({\n\tstrip: [\n\t\t{ decorator: 'BackendMethod' },\n\t\t{\n\t\t\tdecorator: 'Entity',\n\t\t\targs_1: [\n\t\t\t\t{ fn: 'backendPrefilter' },\n\t\t\t\t{ fn: 'backendPreprocessFilter' },\n\t\t\t\t{ fn: 'sqlExpression' },\n\t\t\t\t// {\n\t\t\t\t// \tfn: 'saved',\n\t\t\t\t// \texcludeEntityKeys: ['users']\n\t\t\t\t// }\n\t\t\t],\n\t\t},\n\t],\n})\n```\n\n----------------------------------------\n\nTITLE: Prettier Ignore Configuration\nDESCRIPTION: This snippet provides a sample .prettierignore file, used to exclude specific files and directories from Prettier formatting.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/08_eslint-config.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# .prettierignore\n.DS_Store\nnode_modules\n/build\n/.svelte-kit\n/package\n.env\n.env.*\n!.env.example\n\n# Ignore files for PNPM, NPM and YARN\npackage.json\npnpm-lock.yaml\npackage-lock.json\nyarn.lock\n\n# Ignore files that are project specific\n/db\n/src/lib/ROUTES.ts\n```\n\n----------------------------------------\n\nTITLE: Deep Comparison with @kitql/helpers (TypeScript)\nDESCRIPTION: This example illustrates how to use the stryEq function from @kitql/helpers to perform a deep comparison of two objects. It imports the function and then compares two objects, returning true if they are deeply equal and false otherwise.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/04_helpers.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stryEq } from '@kitql/helpers'\n\nconst obj1 = { value: 7 }\nconst obj2 = { value: 6 }\n\nstryEq(obj1, obj2) // false\n```\n\n----------------------------------------\n\nTITLE: Configure watchAndRun plugin in vite.config.js\nDESCRIPTION: Configures the `watchAndRun` plugin in `vite.config.js` to watch for file changes and trigger a command. It uses glob patterns to watch files and executes `npm run gen` when a change is detected.  The path.resolve is used for constructing absolute paths.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/03_vite-plugin-watch-and-run.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nimport path from 'path'\nimport { watchAndRun } from 'vite-plugin-watch-and-run'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    watchAndRun([\n      {\n        name: 'gen',\n        watch: path.resolve('src/**/*.(gql|svelte)'),\n        run: 'npm run gen'\n        // watchKind: ['add', 'change', 'unlink'], // (default)\n        // delay: 300                              // (default)\n      }\n    ])\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Run ESLint Config Inspector\nDESCRIPTION: This command runs the ESLint config inspector to check your configuration.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/08_eslint-config.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @eslint/config-inspector\n```\n\n----------------------------------------\n\nTITLE: prettier config in .prettierrc.cjs\nDESCRIPTION: Configures Prettier to use the KitQL's formatting rules. This snippet imports the kitql configuration and then extends it with any custom configurations a user needs. It ensure the code is formatted according to kitql's standards.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/eslint-config/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { kitql } from './packages/eslint-config/.prettierrc.cjs'\n\nexport default {\n  ...kitql(),\n  // Some custom things?\n}\n```\n\n----------------------------------------\n\nTITLE: Svelte Route with Query Parameters\nDESCRIPTION: This example illustrates how to use the `route` function with query parameters in a Svelte component, ensuring type safety and correct URL generation.  The snippet passes `id` and `limit` parameters.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { route } from '$lib/ROUTES'\n</script>\n\n<!-- ðŸ¤ž before, hardcoded string, error prone -->\n<a href=\"/site/123?limit=3\">Go to site</a>\n\n<!-- âœ… after, typechecked route, no more errors -->\n<a href={route('/site/[id]', { id: 123, limit: 3 })}>Go to site</a>\n```\n\n----------------------------------------\n\nTITLE: Styled logging with @kitql/helpers (TypeScript)\nDESCRIPTION: This example demonstrates how to use the Log class from @kitql/helpers to create styled logs with a prefix. It imports the necessary modules, creates a Log instance, and then uses its methods to output different types of logs.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/04_helpers.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { green, Log, yellow } from '@kitql/helpers'\n\nconst logSQL = new Log('SQL')\n\nlogSQL.info(`Check out the ${yellow(`yellow`)} information`)\nlogSQL.info(`Or the ${green(`green`)} one!`)\nlogSQL.error(`Hooo no!`)\nlogSQL.info(`Working on something...`, { level: 3 })\nlogSQL.info(`Working on something else...`, { level: 4 })\nlogSQL.success(`Perfect, it's fixed!`)\n```\n\n----------------------------------------\n\nTITLE: Kit Routes Sync Command\nDESCRIPTION: Command to sync routes configuration without running a Vite build, useful for CI/CD pipelines and pre-commit hooks.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec kit-routes sync\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration with @kitql\nDESCRIPTION: This snippet shows how to configure Prettier using the @kitql/eslint-config package. It imports the kitql function from the .prettierrc.js file and exports a configuration object that extends the kitql configuration, allowing for custom overrides.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/08_eslint-config.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// .prettierrc.js\nimport { kitql } from '@kitql/eslint-config/.prettierrc.js'\n\nexport default {\n\t...kitql(),\n\t// Some custom things?\n}\n```\n\n----------------------------------------\n\nTITLE: Svelte Route with Multiple Parameters\nDESCRIPTION: This example shows how to use the `route` function with multiple parameters for an external URL, like a Gravatar image URL.  It passes `str` and `s` parameters.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { route } from '$lib/ROUTES'\n</script>\n\n<!-- ðŸ¤ž before, hardcoded string, error prone -->\n<img src=\"https://www.gravatar.com/avatar/jycouet?s=20&d=identicon\" alt=\"logo\" />\n\n<!-- âœ… after, typechecked route, no more errors -->\n<img src={route('gravatar', { str: 'jycouet', s: 20 })} alt=\"logo\" />\n```\n\n----------------------------------------\n\nTITLE: Sleep function with @kitql/helpers (TypeScript)\nDESCRIPTION: This example shows how to use the sleep function from @kitql/helpers to pause execution for a specified number of milliseconds.  The function takes milliseconds as the parameter.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/04_helpers.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait sleep(5000)\n```\n\n----------------------------------------\n\nTITLE: Configuring vite-plugin-stripper in vite.config.ts (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the `vite-plugin-stripper` in your `vite.config.ts` file. It imports the necessary modules, including `sveltekit` for SvelteKit projects, `defineConfig` from Vite, and `stripper` from `vite-plugin-stripper`. The `stripper` plugin is added to the `plugins` array, configured to remove `@BackendMethod` from the browser bundle.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/07_vite-plugin-stripper.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { sveltekit } from '@sveltejs/kit/vite'\nimport { defineConfig } from 'vite'\nimport { stripper } from 'vite-plugin-stripper'\n\nexport default defineConfig({\n\tplugins: [\n\t\t// To strip `@BackendMethod` from your browser bundle\n\t\tstripper({ strip: ['BackendMethod'] }),\n\t\tsveltekit(),\n\t],\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling SvelteKit CSRF Protection\nDESCRIPTION: This configuration disables SvelteKit's built-in CSRF protection to be replaced by `handleCsrf` from `@kitql/handles`. The `checkOrigin` option is set to `false` to allow `handleCsrf` to manage CSRF protection.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/05_handles.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// svelte.config.js\nconst config = {\n\tkit: {\n\t\t// ... other kit options\n\t\t// disable sveltekit built-in CSRF blocking - this is replaced by `handleCsrf`\n\t\tcsrf: {\n\t\t\tcheckOrigin: false,\n\t\t},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Config with kitRoutes\nDESCRIPTION: This shows how to integrate `kitRoutes` plugin into `vite.config.js`.  It imports the necessary modules and adds `kitRoutes()` to the plugins array.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// vite.config.js\nimport { sveltekit } from '@sveltejs/kit/vite'\nimport { kitRoutes } from 'vite-plugin-kit-routes'\n\n/** @type {import('vite').UserConfig} */\nexport default config = {\n\tplugins: [\n\t\tsveltekit(),\n\t\t// âœ… Add the plugin\n\t\tkitRoutes(),\n\t],\n}\n```\n\n----------------------------------------\n\nTITLE: Watch a specific file using absolute path\nDESCRIPTION: This example shows how to use an absolute path to watch for changes on a specific file, useful in monorepo setups.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/03_vite-plugin-watch-and-run.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\twatch: path.resolve('../../README.md')\n}\n\n```\n\n----------------------------------------\n\nTITLE: Watch all TypeScript files using glob patterns\nDESCRIPTION: This example shows how to use glob patterns to watch all TypeScript files under the root directory.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/03_vite-plugin-watch-and-run.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\twatch: path.resolve('**/*.ts')\n}\n\n```\n\n----------------------------------------\n\nTITLE: Stringify with @kitql/helpers (TypeScript)\nDESCRIPTION: This code snippet demonstrates the stry function from @kitql/helpers, which is similar to JSON.stringify but with default formatting options (null, 2).  It imports the stry function and then uses it to stringify a simple object.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/04_helpers.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stry } from '@kitql/helpers'\n\nconst obj = { value: 7 }\n\nstry(obj) // same as JSON.stringify(obj, null, 2)\n```\n\n----------------------------------------\n\nTITLE: prettier ignore in .prettierignore\nDESCRIPTION: Defines files and directories that Prettier should ignore.  This prevents Prettier from formatting files that don't need formatting, like autogenerated code, node modules or build outputs. The snippet also shows how to ignore specific project files and lock files.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/eslint-config/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.DS_Store\nnode_modules\n/build\n/.svelte-kit\n/package\n.env\n.env.*\n!.env.example\n\n# Ignore files for PNPM, NPM and YARN\npnpm-lock.yaml\npackage-lock.json\nyarn.lock\n\n# Ignore files that are project specific\n/db\n```\n\n----------------------------------------\n\nTITLE: Add Linting Scripts to package.json\nDESCRIPTION: This snippet illustrates how to add linting and formatting scripts to the `package.json` file, utilizing the `kitql-lint` command.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/08_eslint-config.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"// package.json\": \"\",\n  \"scripts\": {\n    \"//// ---- BEST PRACTICES ---- ////\": \"\",\n    \"format\": \"kitql-lint -f\",\n    \"lint\": \"kitql-lint\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Vite CORS Headers\nDESCRIPTION: This configuration disables Vite's automatic addition of CORS headers during development and preview. This allows developers to test their CORS configuration as it would behave in production.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/05_handles.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nexport default defineConfig({\n\t// ... plugins, etc\n\t// disable automatic CORS header addition in dev\n\tserver: {\n\t\tcors: {\n\t\t\torigin: false,\n\t\t},\n\t},\n\t// disable automatic CORS header addition in preview\n\tpreview: {\n\t\tcors: {\n\t\t\torigin: false,\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Kit Routes Config Example\nDESCRIPTION: Example of the structure for the config object that can be used with `kitRoutes`.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { kitRoutes, type Options } from 'vite-plugin-kit-routes'\n\nimport type { KIT_ROUTES } from '$lib/ROUTES'\n\nexport const _kitRoutesConfig: Options<KIT_ROUTES> = {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Svelte External Route Example\nDESCRIPTION: This example demonstrates how to use the `route` function for external URLs, providing a type-safe way to manage external links. It provides an example for a Twitter link.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { route } from '$lib/ROUTES'\n</script>\n\n<!-- ðŸ¤ž before, hardcoded string, error prone -->\n<a href=\"https://twitter.com/jycouet\">Twitter</a>\n\n<!-- âœ… after, typechecked route, no more errors -->\n<a href={route('twitter')}>Twitter</a>\n```\n\n----------------------------------------\n\nTITLE: Add vite-plugin-kit-routes to Vite config - JavaScript\nDESCRIPTION: Configures the Vite build process by importing the sveltekit and kitRoutes modules and adding kitRoutes as a plugin. This enables the plugin to generate route definitions for the SvelteKit application. The sveltekit() plugin is also included for standard SvelteKit support.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/vite-plugin-kit-routes/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sveltekit } from '@sveltejs/kit/vite'\nimport { kitRoutes } from 'vite-plugin-kit-routes'\n\n/** @type {import('vite').UserConfig} */\nexport default config = {\n  plugins: [\n    sveltekit(),\n    // âœ… Add the plugin\n    kitRoutes(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Stripper Configuration Example TypeScript\nDESCRIPTION: This code snippet demonstrates the new `strip` configuration for the `vite-plugin-stripper` package. It shows how to specify decorators and their associated arguments to be stripped from the code.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/vite-plugin-stripper/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstrip: [\n\t{\n\t\tdecorator: 'BackendMethod'\n\t},\n\t{\n\t\tdecorator: 'Entity',\n\t\targs_1: [\n\t\t\t{ fn: 'backendPrefilter' },\n\t\t\t{ fn: 'backendPreprocessFilter' },\n\t\t\t{ fn: 'sqlExpression' },\n\t\t\t// {\n\t\t\t// \tfn: 'saved',\n\t\t\t// \texcludeEntityKeys: ['users']\n\t\t\t// }\n\t\t],\n\t},\n]\n```\n\n----------------------------------------\n\nTITLE: Running kitql-lint\nDESCRIPTION: Demonstrates how to run the kitql-lint command for linting and formatting code.  It showcases the use of the `--format` flag to automatically format the code, and calls the utility via `npm exec`.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/eslint-config/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# lint\nnpm exec kitql-lint\n\n# format\nnpm exec kitql-lint --format\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with @kitql\nDESCRIPTION: This snippet demonstrates how to configure ESLint using the @kitql/eslint-config package. It imports the kitql function and exports a configuration array that includes the kitql configuration along with optional custom rules.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/08_eslint-config.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// eslint.config.js\nimport { kitql } from '@kitql/eslint-config'\n\n/** @type { import(\"eslint\").Linter.Config[] } */\nexport default [\n\t...kitql(),\n\t{\n\t\tname: 'app:rules',\n\t\trules: {\n\t\t\t// Some custom things?\n\t\t},\n\t},\n]\n```\n\n----------------------------------------\n\nTITLE: Stripper Configuration Example TypeScript\nDESCRIPTION: This code snippet demonstrates the new `strip` configuration for the `vite-plugin-stripper` package. It shows how to specify decorators and their associated arguments to be stripped from the code.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/vite-plugin-stripper/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstrip: [\n\t{\n\t\tdecorator: 'BackendMethod'\n\t},\n\t{\n\t\tdecorator: 'Entity',\n\t\targs_1: [\n\t\t\t{ fn: 'backendPrefilter' },\n\t\t\t{ fn: 'backendPreprocessFilter' },\n\t\t\t{ fn: 'sqlExpression' },\n\t\t\t// {\n\t\t\t// \tfn: 'saved',\n\t\t\t// \texcludeEntityKeys: ['users']\n\t\t\t// }\n\t\t],\n\t},\n]\n```\n\n----------------------------------------\n\nTITLE: eslint config in .eslint.config.js\nDESCRIPTION: Configures ESLint to use the @kitql/eslint-config rules. This involves importing the `kitql` function from the package and exporting an array containing the result of calling that function. It ensures linting uses kitql's recommended settings.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/eslint-config/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { kitql } from '@kitql/eslint-config'\n\nexport default [...kitql()]\n```\n\n----------------------------------------\n\nTITLE: Installing @kitql/eslint-config with npm\nDESCRIPTION: Installs the @kitql/eslint-config package as a development dependency using npm. This allows you to use KitQL's linting and formatting rules in your project.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/eslint-config/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @kitql/eslint-config --D\n```\n\n----------------------------------------\n\nTITLE: Install vite-plugin-watch-and-run with npm\nDESCRIPTION: Installs the vite-plugin-watch-and-run package as a development dependency using npm.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/03_vite-plugin-watch-and-run.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D vite-plugin-watch-and-run\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-stripper (Shell)\nDESCRIPTION: This command installs the `vite-plugin-stripper` as a dev dependency using npm.  This plugin is used to remove code (like decorators) from the browser bundle during the build process.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/07_vite-plugin-stripper.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D vite-plugin-stripper\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Headers with tweakResponseHeaders in TypeScript\nDESCRIPTION: This code snippet demonstrates how to modify response headers using the `tweakResponseHeaders` function in TypeScript. It shows how to delete 'content-encoding' and 'content-length' headers from the default response headers.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/handles/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntweakResponseHeaders(defaultResponseHeaders) {\n  defaultResponseHeaders.delete('content-encoding')\n  defaultResponseHeaders.delete('content-length')\n  return defaultResponseHeaders\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @kitql/handles\nDESCRIPTION: This command installs the @kitql/handles package as a development dependency using npm.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/05_handles.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @kitql/handles\n```\n\n----------------------------------------\n\nTITLE: Install @kitql/eslint-config\nDESCRIPTION: This command installs the @kitql/eslint-config package as a development dependency.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/08_eslint-config.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @kitql/eslint-config\n```\n\n----------------------------------------\n\nTITLE: Install vite-plugin-kit-routes - Bash\nDESCRIPTION: Installs the vite-plugin-kit-routes package as a development dependency using npm. This command is executed in the terminal.\nSOURCE: https://github.com/jycouet/kitql/blob/main/packages/vite-plugin-kit-routes/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D vite-plugin-kit-routes\n```\n\n----------------------------------------\n\nTITLE: Installing @kitql/helpers with npm\nDESCRIPTION: This command installs the @kitql/helpers package as a development dependency using npm.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/04_helpers.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @kitql/helpers\n```\n\n----------------------------------------\n\nTITLE: Install vite-plugin-kit-routes\nDESCRIPTION: Command to install vite-plugin-kit-routes as a development dependency using npm.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D vite-plugin-kit-routes\n```\n\n----------------------------------------\n\nTITLE: Adding Contributor using all-contributors bot\nDESCRIPTION: This code snippet demonstrates the command format used to add a contributor to the KitQL project's contributors list using the all-contributors bot. It specifies the bot's call, the 'add' action, the contributor's username, and their contributions. It leverages the allcontributors.org bot for contributor management.\nSOURCE: https://github.com/jycouet/kitql/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n@all-contributors please add @<username> for <contributions>\n```\n\n----------------------------------------\n\nTITLE: Kit Routes Sync with Config\nDESCRIPTION: Command to specify a custom config file for the kit-routes sync command.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec kit-routes sync --config ./path/to/config.ts#named_export\n```\n\n----------------------------------------\n\nTITLE: Create kitql project\nDESCRIPTION: Command to create a new KitQL project with the kit-routes template using npm.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/06_vite-plugin-kit-routes.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm create kitql@latest --template kit-routes\n```\n\n----------------------------------------\n\nTITLE: Add to .npmrc for hoisting\nDESCRIPTION: These lines need to be added to the `.npmrc` file to ensure that eslint, prettier and globals are hoisted.\nSOURCE: https://github.com/jycouet/kitql/blob/main/docs/src/content/docs/docs/tools/08_eslint-config.mdx#_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\npublic-hoist-pattern[]=*eslint*\npublic-hoist-pattern[]=*prettier*\npublic-hoist-pattern[]=*globals*\n```"
  }
]