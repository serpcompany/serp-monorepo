[
  {
    "owner": "quan-tran-niteco",
    "repo": "optimizely",
    "content": "TITLE: Defining Strongly Typed Content Page\nDESCRIPTION: Shows how to define a strongly typed StandardPage with a MainBody property using ContentType attribute.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType]\npublic class StandardPage: SitePageData {\n  public virtual XhtmlString MainBody {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Role-Based PropertyEditRestrictionAttribute in C#\nDESCRIPTION: This code implements a custom attribute for Optimizely CMS that restricts property editing based on user roles. It combines ValidationAttribute for server-side validation and IDisplayMetadataProvider to make properties read-only for unauthorized users in the editorial interface.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/writing-custom-attributes.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Core;\nusing EPiServer.Security;\nusing EPiServer.Shell.ObjectEditing;\nusing Microsoft.AspNetCore.Mvc.ModelBinding.Metadata;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\n\nnamespace EPiServer.Samples {\n  public class PropertyEditRestrictionAttribute: ValidationAttribute, IDisplayMetadataProvider {\n    public PropertyEditRestrictionAttribute(string[] allowedRoles) {\n      AllowedRoles = allowedRoles;\n    }\n\n    public string[] AllowedRoles {\n      get;\n      set;\n    }\n\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext) {\n      if (validationContext.ObjectInstance is IContentData content) {\n        if (!content.Property[validationContext.MemberName].IsModified) {\n          return ValidationResult.Success;\n        }\n\n        return IsInRole ? ValidationResult.Success : new ValidationResult(\"You do not have access\");\n      }\n\n      //This attribute only handles instances of IContentData. return ValidationResult.Success;\n      return ValidationResult.Success;\n    }\n\n    public void CreateDisplayMetadata(DisplayMetadataProviderContext context) {\n      if (IsInRole) {\n        return;\n      }\n\n      var extendedMetadata = context.DisplayMetadata.AdditionalValues[ExtendedMetadata.ExtendedMetadataDisplayKey] as ExtendedMetadata;\n      if (extendedMetadata == null) {\n        return;\n      }\n      extendedMetadata.IsReadOnly = true;\n    }\n\n    private bool IsInRole => AllowedRoles.Any(r => PrincipalInfo.CurrentPrincipal.IsInRole(r));\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Text Page Content Type in C#\nDESCRIPTION: Example of creating a custom page type that inherits from PageData with a MainBody property.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType]\npublic class TextPage: PageData {\n  public virtual string MainBody {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Page Types with Attributes in Optimizely CMS\nDESCRIPTION: Demonstrates creation of a custom page type with various property attributes including validation, UI hints, and content restrictions. Includes a custom selection factory for dropdown values and multiple page type definitions with different availability settings.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-attributes.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer;\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.DataAnnotations;\nusing EPiServer.Shell.ObjectEditing;\nusing EPiServer.Web;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace CodeSamples {\n  [ContentType(\n    DisplayName = \"My Page Type\",\n    Description = \"Description for this page type\",\n    Order = 1024,\n    GUID = \"9CBBF910-CB5A-4C72-83AA-EDCF02E8A2BD\",\n    GroupName = \"My Group\",\n    AvailableInEditMode = true)]\n  [AvailableContentTypes(Include = new Type[] {\n    typeof (MyPageType2), typeof (MyPageType3)\n  })]\n  [Access(Users = \"niis\", Roles = \"CmsEditors\")]\n  public class TypedPageWithAttributeSample: PageData {\n    [Required]\n    [Searchable]\n    [CultureSpecific]\n    [Editable(true)]\n    [Display(\n      Name = \"My Heading\",\n      Description = \"Heading for my page type.\",\n      GroupName = \"My Tab\",\n      Order = 64)]\n    public virtual string Heading {\n      get;\n      set;\n    }\n\n    //An integer between 0 and 130.\n    [Range(0, 130)]\n    public virtual int Age {\n      get;\n      set;\n    }\n\n    //Validating against a given regular expression.\n    [RegularExpression(\"[SomeRegularExpression]\")]\n    public virtual string CustomValidation {\n      get;\n      set;\n    }\n\n    //A string with a maximum length of 20 characters.\n    [StringLength(20)]\n    public virtual string Header {\n      get;\n      set;\n    }\n\n    //Any URL\n    public virtual Url RedirectPage {\n      get;\n      set;\n    }\n\n    //Reference to an image in the EPiServer media system.\n    [UIHint(UIHint.Image)]\n    public virtual ContentReference Logotype {\n      get;\n      set;\n    }\n\n    //URL to image is also supported but mostly for upgrade support or when there is a need to add custom query parameters to the URL.\n    [UIHint(UIHint.Image)]\n    public virtual Url LogotypeAsUrl {\n      get;\n      set;\n    }\n\n    //Creates a selection of predefined values.\n    [SelectOne(SelectionFactoryType = typeof (CustomLanguageSelectionFactory))]\n    public virtual string LanguageSelection {\n      get;\n      set;\n    }\n\n    //Creates a selection of predefined values with the option to select several items.\n    [SelectMany(SelectionFactoryType = typeof (CustomLanguageSelectionFactory))]\n    public virtual string MultipleLanguageSelection {\n      get;\n      set;\n    }\n  }\n\n  public class CustomLanguageSelectionFactory: ISelectionFactory {\n    public IEnumerable < ISelectItem > GetSelections(ExtendedMetadata metadata) {\n      var languages = new List < SelectItem > ();\n\n      languages.Add(new SelectItem() {\n        Text = \"English\", Value = \"en\"\n      });\n      languages.Add(new SelectItem() {\n        Text = \"Swedish\", Value = \"sv\"\n      });\n      languages.Add(new SelectItem() {\n        Text = \"Norwegian\", Value = \"no\"\n      });\n\n      return languages;\n    }\n  }\n\n  [AvailableContentTypes(IncludeOn = new Type[] {\n    typeof (TypedPageWithAttributeSample)\n  })]\n  [ContentType]\n  public class MyPageType1: PageData {}\n\n  [AvailableContentTypes(Exclude = new Type[] {\n    typeof (TypedPageWithAttributeSample)\n  })]\n  [ContentType]\n  public class MyPageType2: PageData {}\n\n  [AvailableContentTypes(ExcludeOn = new Type[] {\n    typeof (MyPageType1)\n  })]\n  [ContentType]\n  public class MyPageType3: PageData {}\n\n  [AvailableContentTypes(Availability = Availability.None)]\n  [ContentType]\n  public class MyPageType4: PageData {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IContent Interface in C#\nDESCRIPTION: Core interface definition for content items in Optimizely CMS. Defines essential properties like ContentGuid, ContentLink, ContentTypeID, and other base content attributes required for content management.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace EPiServer.Core {\n  // Summary:\n  //     Interface that must be implemented by a component that is to be stored in\n  //     the content repository.\n  public interface IContent: IContentData {\n    // Summary:\n    //     Gets or sets the unique identifier of this EPiServer.Core.IContentData instance.\n    //      It is used as identifier of this item when it is transferred outside of\n    //     the current system.\n    Guid ContentGuid {\n      get;\n      set;\n    }\n    //\n    // Summary:\n    //     Gets or sets a reference to this EPiServer.Core.IContentData instance.  It\n    //     is used as a identifier for this item within the EPiServer system.\n    ContentReference ContentLink {\n      get;\n      set;\n    }\n    //\n    // Summary:\n    //     Gets or sets the ID of the content type that describes this EPiServer.Core.IContentData\n    //     instance.\n    int ContentTypeID {\n      get;\n      set;\n    }\n    //\n    // Summary:\n    //     Gets or sets a value indicating whether this instance is deleted.\n    bool IsDeleted {\n      get;\n      set;\n    }\n    //\n    // Summary:\n    //     Gets or sets the name of this EPiServer.Core.IContentData instance.\n    string Name {\n      get;\n      set;\n    }\n    //\n    // Summary:\n    //     Gets or sets a link to the parent content item in the EPiServer system.\n    ContentReference ParentLink {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Property Access Pattern in Optimizely\nDESCRIPTION: Shows the recommended approach for accessing properties multiple times by storing a reference to avoid repeated lookups.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic ActionResult Index(StandardPage currentPage) {\n  PropertyData property = currentPage.Property[\"PropertyName\"];\n  if (property != null && !property.IsNull) {\n    DoSomething();\n  }\n  // do something else and return view\n}\n```\n\n----------------------------------------\n\nTITLE: ContentType Properties\nDESCRIPTION: Core properties of the ContentType attribute in EPiServer.DataAnnotations namespace including AvailableInEditMode, Description, DisplayName, Order, GUID, and GroupName.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/attributes.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nContentType\nEPiServer.DataAnnotations\nAvailableInEditMode\nDescription\nContentType\nDisplayName\nContentType\nOrder\nContentType\nGUID\nContentType\nGroupName\nContentTypes\n```\n\n----------------------------------------\n\nTITLE: Publishing a Page with Override Permissions in Optimizely CMS\nDESCRIPTION: Demonstrates how to save and publish a page even when the current user lacks the necessary permissions, useful for programmatic publishing with anonymous users.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/creating-a-page-programmatically.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\ncontentRepository.Save(myPage, EPiServer.DataAccess.SaveAction.Publish, EPiServer.Security.AccessLevel.NoAccess);\n```\n\n----------------------------------------\n\nTITLE: Creating Content Approval Definitions in Optimizely CMS with C#\nDESCRIPTION: This snippet demonstrates how to create and save a content approval definition with multiple steps and language-specific reviewers. It sets up a two-step approval process with different reviewers for English and Swedish languages.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/approval-definitions.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer.Approvals.ContentApprovals;\n\nContentReference contentLink;\nIApprovalDefinitionRepository definitionRepository;\n\nvar langEN = new CultureInfo[] {\n  CultureInfo.GetCultureInfo(\"en\")\n};\nvar langSV = new CultureInfo[] {\n  CultureInfo.GetCultureInfo(\"sv\")\n};\n\n// Creates a content approval definition\nvar definition = new ContentApprovalDefinition {\n  ContentLink = contentLink,\n    Steps = new List<ApprovalDefinitionStep> {\n      new ApprovalDefinitionStep(\"step1\", new ApprovalDefinitionReviewer[] {\n        new ApprovalDefinitionReviewer(\"user1a\", langEN),\n          new ApprovalDefinitionReviewer(\"user1b\", langSV),\n      }),\n      new ApprovalDefinitionStep(\"step2\", new ApprovalDefinitionReviewer[] {\n        new ApprovalDefinitionReviewer(\"user2a\", langEN.Union(langSV))\n      })\n    }\n};\n\n// Saves the definition\nawait definitionRepository.SaveAsync(definition);\n```\n\n----------------------------------------\n\nTITLE: Accessing Strongly Typed Properties\nDESCRIPTION: Demonstrates accessing strongly typed properties using PageController with generic type parameter.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StandardPageController: PageController<StandardPage> {\n  public ActionResult Index(StandardPage currentPage) {\n    var mainBody = currentPage.MainBody;\n    // do something else and return view\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Content Changes in C#\nDESCRIPTION: Example of creating a writable clone of content, modifying it, and saving changes with publish action.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar writablePage = repository.Get<TextPage>(pageLink).CreateWritableClone() as TextPage;\n  writablePage.MainBody = \"something\";\n  repository.Save(writablePage, SaveAction.Publish);\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Media Type in C#\nDESCRIPTION: Defines a generic media type class that inherits from MediaData to handle files like PDFs and Word documents. Includes content type attributes and a description property.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/media-types-and-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.DataAnnotations;\nusing EPiServer.Framework.DataAnnotations;\n\nnamespace MyOptimizelySite.Models.Media {\n  [ContentType(DisplayName = \"GenericMedia\", GUID = \"89761dbb-bf22-4cee-93c7-9d661d75cad8\", Description = \"Used for generic file types such as Word or PDF documents.\")]\n  [MediaDescriptor(ExtensionString = \"pdf,doc,docx\")]\n  public class GenericMedia: MediaData {\n    [CultureSpecific]\n    [Editable(true)]\n    [Display(\n      Name = \"Description\",\n      Description = \"Add a description of the content.\",\n      GroupName = SystemTabNames.Content,\n      Order = 1)]\n    public virtual String Description {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Immediate Email Notifications for Content Approvals in Optimizely CMS\nDESCRIPTION: This code snippet demonstrates how to configure the ApprovalNotificationOptions to send content approval notification emails immediately rather than in periodic batches. It creates an initialization module that depends on FrameworkInitialization to ensure proper execution order.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/configure-email-notifications-for-content-approvals.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[InitializableModule]\n[ModuleDependency(typeof (FrameworkInitialization))]\npublic class ApprovalNotificationInitialization: IConfigurableModule {\n  public void ConfigureContainer(ServiceConfigurationContext context) {\n    context.Services.Configure<ApprovalNotificationOptions>(options => options.Immediate = true);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Page with Default Values in Optimizely CMS\nDESCRIPTION: Retrieves the ContentRepository service and creates a new page of type StandardPage with default values under the specified parent location.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/creating-a-page-programmatically.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nIContentRepository contentRepository = EPiServer.ServiceLocation.ServiceLocator.Current.GetInstance<IContentRepository>();\nPageData myPage = contentRepository.GetDefault<StandardPage>(parent);\n```\n\n----------------------------------------\n\nTITLE: Starting Content Approval Process in Optimizely\nDESCRIPTION: Example showing how to initiate content approval using SaveAction.RequestApproval with the content repository. Creates and saves a ContentApproval for the specified content item.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-content-approvals.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIContent content;\nIContentRepository contentRepository;\n\nvar approvalContentLink = contentRepository.Save(content, SaveAction.RequestApproval);\n\nIContent content;\nIContentRepository contentRepository;\n    \nvar approvalContentLink = contentRepository.Save(content, SaveAction.RequestApproval);\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Media Type in C#\nDESCRIPTION: Creates an image-specific media type inheriting from ImageData with properties for copyright and description. Includes file extension restrictions for image formats.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/media-types-and-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace MyOptimizelySite.Models.Media {\n  [ContentType(DisplayName = \"ImageFile\", GUID = \"875b3b51-e0a7-412c-8f56-44f59c184440\", Description = \"Used for images of different file formats.\")]\n  [MediaDescriptor(ExtensionString = \"jpg,jpeg,jpe,ico,gif,bmp,png\")]\n  public class ImageFile: ImageData {\n    //// <summary>\n    /// Gets or sets the copyright.\n    /// </summary>\n    public virtual string Copyright {\n      get;\n      set;\n    }\n    public virtual String Description {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TeaserBlock Custom Block Type in C# for Optimizely CMS\nDESCRIPTION: This code defines a TeaserBlock class that inherits from BlockData. It includes two properties: a culture-specific Heading and an optional Image. The class is decorated with attributes for content type configuration and property display settings.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-types.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.DataAnnotations;\nusing EPiServer.Web;\n\nnamespace MyOptimizelySite.Models.Blocks {\n  [ContentType(DisplayName = \"TeaserBlock\",\n    GUID = \"38d57768-e09e-4da9-90df-54c73c61b270\",\n    Description = \"Heading and image.\")]\n  public class TeaserBlock: BlockData {\n    [CultureSpecific]\n    [Display(Name = \"Heading\",\n      Description = \"Add a heading.\",\n      GroupName = SystemTabNames.Content,\n      Order = 1)]\n    public virtual String Heading {\n      get;\n      set;\n    }\n\n    [Display(Name = \"Image\", Description = \"Add an image (optional)\",\n      GroupName = SystemTabNames.Content,\n      Order = 2)]\n    public virtual ContentReference Image {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Content Repository Instance in C#\nDESCRIPTION: Shows how to get an instance of IContentRepository using the ServiceLocator. This is an alternative to dependency injection for accessing the content repository.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar repository = EPiServer.ServiceLocation.ServiceLocator.Current.GetInstance<IContentRepository>();\n```\n\n----------------------------------------\n\nTITLE: Defining an Article Page Content Type in C# for Optimizely CMS\nDESCRIPTION: This snippet demonstrates how to create a simple article page type with a 'Main Body' editor area. It inherits from a custom SitePageData base class and uses various attributes to define content properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-types.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.DataAnnotations;\nusing EPiServer.SpecializedProperties;\n\nnamespace MyOptimizelySite.Models.Pages {\n  [ContentType(DisplayName = \"ArticlePage\", GUID = \"b8fe8485-587d-4880-b485-a52430ea55de\", Description = \"Basic page type for creating articles.\")]\n  public class ArticlePage: SitePageData {\n    [CultureSpecific]\n    [Display(\n      Name = \"Main body\",\n      Description = \"The main body editor area lets you insert text and images into a page.\",\n      GroupName = SystemTabNames.Content,\n      Order = 10)]\n    public virtual XhtmlString MainBody {\n      get;\n      set;\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Content Reference Types in Optimizely CMS\nDESCRIPTION: Property types used for creating links and references to other content items within the CMS.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/built-in-property-types.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLink\nLinkCollection\nContentArea\nContentReference\nContentReferenceList\nURL\nAllowedTypes\n```\n\n----------------------------------------\n\nTITLE: Using Different Collection Interfaces in Optimizely\nDESCRIPTION: Example showing how different collection interfaces (IEnumerable, ICollection, IList) can be used for property lists in Optimizely. All these interfaces are compatible with the Value List descriptor.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual IEnumerable<string> EnumerableStrings {\n  get;\n  set;\n}\npublic virtual ICollection<string> CollectionOfStrings {\n  get;\n  set;\n}\npublic virtual IList<string> ListOfStrings {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting ContentArea Basic Usage\nDESCRIPTION: Demonstrates basic usage of AllowedTypes attribute to restrict content types in a ContentArea property. Shows both array and single type declaration patterns.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/restricting-content-types-in-properties.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[AllowedTypes(new [] {\n  typeof (PageData)\n})]\npublic virtual ContentArea RelatedContentArea {\n  get;\n  set;\n}\n\n[AllowedTypes(typeof (PageData))]\npublic virtual ContentArea OtherRelatedContentArea {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Content References in Optimizely CMS\nDESCRIPTION: Demonstrates the basic implementation of ContentReference properties for different content types including blocks, folders, images, videos, and media files. Each property is decorated with appropriate UIHint attributes to specify content type.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/linking-to-other-content.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[UIHint(UIHint.Block)]\npublic virtual ContentReference BlockReference {\n  get;\n  set;\n}\n\n[UIHint(UIHint.BlockFolder)]\npublic virtual ContentReference Folder {\n  get;\n  set;\n}\n\n[UIHint(UIHint.Image)]\npublic virtual ContentReference Image {\n  get;\n  set;\n}\n\n[UIHint(UIHint.Video)]\npublic virtual ContentReference Video {\n  get;\n  set;\n}\n\n[UIHint(UIHint.MediaFile)]\npublic virtual ContentReference MediaFileOfAnyType {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating File Metadata in Optimizely CMS using C#\nDESCRIPTION: Demonstrates how to update the metadata of an existing file in Optimizely CMS. It retrieves a file by ID, updates its description, and saves the changes.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-media.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void UpdatingMetaData_of_a_file() {\n  var contentRepository = ServiceLocator.Current.GetInstance<IContentRepository>();\n  var blobFactory = ServiceLocator.Current.GetInstance<IBlobFactory>();\n\n  //the file to update, not hardcoded of course\n  var fileID = new ContentReference(444);\n\n  //Get the file\n  var file1 = contentRepository.Get<GenericFile>(fileID).CreateWritableClone() as GenericFile;\n\n  //Update description\n  file1.Description = \"My description\";\n\n  //Publish\n  var file1ID = contentRepository.Save(file1, SaveAction.Publish);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Content Events with CustomModule in C#\nDESCRIPTION: This snippet defines a CustomModule that initializes content event handlers for CreatedContent and CreatingContent. It demonstrates how to use CurrentContentContext to access the current content link during content creation operations.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/resolving-current-content-context.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleDependency(typeof (EPiServer.Shell.UI.InitializationModule))]\npublic class CustomModule: IConfigurableModule {\n  public void Initialize(InitializationEngine context) {\n    context.Locate.ContentEvents().CreatedContent += CreatedContent;\n    context.Locate.ContentEvents().CreatingContent += CreatingContent;\n  }\n\n  private void CreatingContent(object sender, ContentEventArgs e) {\n    var currentContentContext = ServiceLocator.Current.GetInstance<CurrentContentContext>();\n    // we know which content context initiated the CREATE operation        \n    var currentContentLink = currentContentContext.ContentLink;\n\n    var newlyCreatedContentLink = e.ContentLink; // --> null as at this point the ContentReference was not assigned yet\n  }\n\n  private void CreatedContent(object sender, ContentEventArgs e) {\n    var newlyCreatedContentLink = e.ContentLink; // this is the ContentReference of the newly created content item\n    // but we might need the ContentReference of the content that was being viewed when the CREATE operation was run\n    var currentContentContext = ServiceLocator.Current.GetInstance<CurrentContentContext>();\n    // this gives us the content context the editor was in\n    var currentContentLink = currentContentContext.ContentLink;\n  }\n\n  public void Uninitialize(InitializationEngine context) {\n    context.Locate.ContentEvents().CreatedContent -= CreatedContent;\n    context.Locate.ContentEvents().CreatingContent -= CreatingContent;\n  }\n\n  public void ConfigureContainer(ServiceConfigurationContext context) {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing List Item Headers in Optimizely CMS\nDESCRIPTION: Code showing how to use the ListItemHeaderProperty attribute to specify which property should be displayed as the header for list items in the Optimizely editor interface.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ListItemHeaderProperty(nameof(Blocks.ContactBlock.Heading))]\npublic virtual IList<ContactBlock> Contacts { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IValidate<T> Interface for Custom Validators\nDESCRIPTION: To create a custom validator, implement this interface which has a single method for validation. The validation service automatically discovers implementations during initialization.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/validating-object-instances.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIEnumerable<ValidationError> Validate(T instance);\n```\n\n----------------------------------------\n\nTITLE: Implementing Built-in Content Selectors in Optimizely CMS\nDESCRIPTION: Defines various built-in content reference properties for different content types including pages, blocks, images, videos, and media files. Each property uses UIHint attributes to specify the content type and selector behavior.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/selecting-content.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual PageReference PageReference {\n  get;\n  set;\n}\n\n[UIHint(UIHint.Block)]\npublic virtual ContentReference BlockReference {\n  get;\n  set;\n}\n\n[UIHint(UIHint.Image)]\npublic virtual ContentReference ImageReference {\n  get;\n  set;\n}\n\n[UIHint(UIHint.Video)]\npublic virtual ContentReference VideoReference {\n  get;\n  set;\n}\n\n[UIHint(UIHint.MediaFile)]\npublic virtual ContentReference AnyMediaFileReference {\n  get;\n  set;\n}\n\n[UIHint(UIHint.BlockFolder)]\npublic virtual ContentReference BlockFolderReference {\n  get;\n  set;\n}\n\n[UIHint(UIHint.MediaFolder)]\npublic virtual ContentReference MediaFolderReference {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Editor Descriptor with CurrentContentContext in C#\nDESCRIPTION: This snippet shows how to create a custom editor descriptor (CustomXhtmlDescriptor) that uses CurrentContentContext. It demonstrates accessing the current content link within the ModifyMetadata method, which is useful for metadata-aware components.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/resolving-current-content-context.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class FooPageType: PageData {\n  [EditorDescriptor(EditorDescriptorType = typeof (CollectionEditorDescriptor<OfferDetailsItem>))]\n  public virtual IList<OfferDetailsItem> OfferDetailsItems {\n    get;\n    set;\n  }\n}\n\npublic class OfferDetailsItem {\n  [Display(Order = 1)]\n  [UIHint(\"test\")]\n  public string Label {\n    get;\n    set;\n  }\n}\n\n[PropertyDefinitionTypePlugIn]\npublic class OfferDetailsItemPropertyList: PropertyList<OfferDetailsItem>{}\n\n[EditorDescriptorRegistration(TargetType = typeof (string), UIHint = \"test\")]\npublic class CustomXhtmlDescriptor: StringEditorDescriptor {\n  private readonly CurrentContentContext _currentContent;\n\n  public CustomXhtmlDescriptor(CurrentContentContext currentContent) {\n    _currentContent = currentContent;\n  }\n\n  public override void ModifyMetadata(ExtendedMetadata metadata, IEnumerable<Attribute> attributes) {\n    base.ModifyMetadata(metadata, attributes);\n\n    var ownerContent = metadata.FindOwnerContent(); // --> will return null because the object we annotate is not ContentData but simple POCO\n    var currentContent = _currentContent.ContentLink; // --> will return correct page id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EPiServer.Cms.Shell.UI.ObjectEditing Attribute in C#\nDESCRIPTION: This snippet introduces the ReloadOnChange attribute from the EPiServer.Cms.Shell.UI.ObjectEditing namespace. This attribute is used to define whether the editing context should be reloaded on value changes, useful for handling dependent properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-attributes.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nEPiServer.Cms.Shell.UI.ObjectEditing\n```\n\n----------------------------------------\n\nTITLE: Content Provider Registration Interfaces\nDESCRIPTION: Interfaces used for registering and configuring content providers in Optimizely CMS.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-providers.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nEPiServer.Core.IContentProviderManager\nContentOptions.Providers\n```\n\n----------------------------------------\n\nTITLE: Loading Typed Content Instance in C#\nDESCRIPTION: Shows how to load a specific content type using the content loader. This method will throw TypeMismatchException if content cannot be cast to specified type.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTextPage page = loader.Get<TextPage>(pageLink);\n```\n\n----------------------------------------\n\nTITLE: Listing Child Pages in C#\nDESCRIPTION: Demonstrates retrieving child pages of a specific content reference.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nIEnumerable<PageData> pages = loader.GetChildren<PageData>(pageLink);\n```\n\n----------------------------------------\n\nTITLE: Applying Validation to List Items in Optimizely\nDESCRIPTION: Examples of applying different validation attributes to list items in Optimizely, including range validation for integers, regular expression validation for strings, and string length validation.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n[ItemRangeAttribute(1, 10)]\npublic virtual IList<int> ItemsBetween1And10 { \n  get; \n  set; \n}\n    \n[ItemRegularExpression(\"[a-zA-Z]*\")]\npublic virtual IList<string> LettersOnly { \n  get; \n  set; \n}\n    \n[ItemStringLength(3)]\npublic virtual IList<string> ListOfAcronyms { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Groups with Constants in C#\nDESCRIPTION: Shows how to define content groups using constants and applying them to content types and properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/grouping-content-types-and-properties.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType(GroupName = GroupNames.News, Order = 1)]\npublic class ArticlePage: PageData {\n  [Display(GroupName = GroupNames.Contact)]\n  public virtual ContentReference Image {\n    get;\n    set;\n  }\n}\n\npublic static class GroupNames {\n  public const string News = \"News\";\n  public const string Contact = \"Contact\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Preview Template for Documents in C#\nDESCRIPTION: This code snippet demonstrates how to create a custom preview template for Document content type in Optimizely CMS. It uses the TemplateDescriptor attribute and extends ContentController<Document> to implement custom preview functionality.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/custom-editing-preview-for-media.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[TemplateDescriptor(Tags = new [] {\n  RenderingTags.Preview\n})]\npublic partial class DocumentPreview: ContentController<Document> {\n  //Do some custom preview for document\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading a Text File in Optimizely CMS using C#\nDESCRIPTION: Demonstrates how to create and upload a simple text file with the message 'Hello world' using the Optimizely CMS API. It utilizes the IContentRepository and IBlobFactory interfaces.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-media.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Uploading_a_file() {\n  var contentRepository = ServiceLocator.Current.GetInstance<IContentRepository>();\n  var blobFactory = ServiceLocator.Current.GetInstance<IBlobFactory>();\n\n  //Get a new empty file data\n  var file1 = contentRepository.GetDefault<GenericFile>(SiteDefinition.Current.GlobalAssetsRoot);\n  file1.Name = \"Readme.txt\";\n\n  //Create a blob in the binary container\n  var blob = blobFactory.CreateBlob(file1.BinaryDataContainer, \".txt\");\n  using(var s = blob.OpenWrite()) {\n    StreamWriter w = new StreamWriter(s);\n    w.WriteLine(\"Hello world\");\n    w.Flush();\n  }\n\n  //Assign to file and publish changes\n  file1.BinaryData = blob;\n  var file1ID = contentRepository.Save(file1, SaveAction.Publish);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Page with Standard Permissions in Optimizely CMS\nDESCRIPTION: Saves and publishes the newly created page using the ContentRepository, which requires that the current user has proper permissions to publish at the specified location.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/creating-a-page-programmatically.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\ncontentRepository.Save(myPage, EPiServer.DataAccess.SaveAction.Publish);\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Starting Folders in C#\nDESCRIPTION: C# code to configure starting folders for the Optimizely DAM library picker. Allows setting a global root folder GUID and mapping specific folders to different asset types to determine where the picker launches.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noptions.GlobalRootFolderGuid = \"some-guid\";\noptions.RootFolderForTypes = new Dictionary<string, IEnumerable<Type>> {\n  {\n    \"RootFolder1\",\n    new Type[] {\n      typeof (DAMImageAsset), typeof (DAMVideoAsset)\n    }\n  },\n  {\n    \"RootFolder2\",\n    new Type[] {\n      typeof (DAMAsset)\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Content Loading with FallbackWithMaster Option\nDESCRIPTION: Loading content with explicit fallback settings that include master language fallback.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/multilingual-content.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar content = _contentLoader.Get<IContent>(contentLink, new LoaderOptions() {\n  LanguageLoaderOption.FallbackWithMaster()\n});\n```\n\n----------------------------------------\n\nTITLE: Applying AutoSuggestionEditor Attributes to Properties in Optimizely C#\nDESCRIPTION: This code demonstrates how to apply the AutoSuggestSelection attribute to model properties to enable auto-suggestion functionality. It shows examples with both default behavior and with custom values allowed via the AllowCustomValues property.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/built-in-auto-suggestion-editor.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[AutoSuggestSelection(typeof (MySelectionQuery))]\npublic virtual string SelectionEditor1 {\n  get;\n  set;\n}\n\n[AutoSuggestSelection(typeof (MySelectionQuery), AllowCustomValues = true)]\npublic virtual string SelectionEditor2 {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit Hint Controller and Models in C#\nDESCRIPTION: Demonstrates the implementation of an Optimizely page controller with Edit Hints, including view models and content types. The code shows how to set up property connections and full refresh hints for in-context editing.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/edit-hints-in-mvc.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class EditHintSample: PageController<EditSamplePage> {\n  public ActionResult Index(EditSamplePage currentPage) {\n    var model = new EditSampleViewModel {\n      Heading = currentPage.MyText,\n        Body = currentPage.MainBody,\n        SecondaryBody = currentPage.SecondaryBody,\n        BannerUrl = currentPage.BannerUrl.ToString(),\n        ShowBanner = currentPage.ShowBanner,\n        TextBlock = currentPage.TextBlock\n    };\n\n    // Get the edit hint collections\n    var editingHints = ViewData.GetEditHints<EditSampleViewModel,EditSamplePage>();\n\n    // Adds a connection between 'Heading' in view model and 'MyText' in content data.\n    editingHints.AddConnection(m => m.Heading, p => p.MyText);\n\n    // Add the property 'ShowBanner' to the collection of properties which requires full refresh of the page.\n    editingHints.AddFullRefreshFor(p => p.ShowBanner);\n\n    return View(model);\n  }\n}\n\npublic class EditSampleViewModel {\n  public string Heading {\n    get;\n    set;\n  }\n  public string BannerUrl {\n    get;\n    set;\n  }\n  public XhtmlString Body {\n    get;\n    set;\n  }\n  public XhtmlString SecondaryBody {\n    get;\n    set;\n  }\n  public virtual bool ShowBanner {\n    get;\n    set;\n  }\n  public virtual EditSampleBlock TextBlock {\n    get;\n    set;\n  }\n}\n\n[ContentType]\npublic class EditSampleBlock: BlockData {\n  public virtual string Heading {\n    get;\n    set;\n  }\n  public virtual XhtmlString Body {\n    get;\n    set;\n  }\n}\n\n[ContentType]\npublic class EditSamplePage: PageData {\n  public virtual string MyText {\n    get;\n    set;\n  }\n  public virtual XhtmlString MainBody {\n    get;\n    set;\n  }\n  public virtual XhtmlString SecondaryBody {\n    get;\n    set;\n  }\n  public virtual Url BannerUrl {\n    get;\n    set;\n  }\n  public virtual bool ShowBanner {\n    get;\n    set;\n  }\n  public virtual EditSampleBlock TextBlock {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Content Graph Configuration in appsettings.json\nDESCRIPTION: Configuration settings for Optimizely Content Graph including gateway address, authentication keys and transform behavior.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"Optimizely\": {  \n  \"ContentGraph\": {  \n    \"GatewayAddress\": \"https://cg.optimizely.com\",  \n    \"AppKey\": \"APPKEY\",  \n    \"Secret\": \"SECRET\",\n    \"SingleKey\": \"SINGLE_KEY\",\n    \"TransformActionBehaviour\": \"Clone\"\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a List of Block Types in Optimizely\nDESCRIPTION: Example showing how to define a property that stores a list of block types in an Optimizely content model. This allows content editors to add multiple instances of the same block type.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual IList<ContactBlock> Contacts { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Type and Property Renaming in Optimizely CMS\nDESCRIPTION: Example demonstrates how to create a MigrationStep class to rename a content type from 'Velocipede' to 'Bicycle' and rename a property from 'WoodenTire' to 'PneumaticTire'. The migration step is automatically detected by the system and handles the renaming while preserving existing data.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/refactoring-content-type-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.DataAbstraction.Migration;\n\nnamespace CodeSamples {\n  public class MigrationStepExample: MigrationStep {\n    public override void AddChanges() {\n      RenameContentType();\n      RenameProperty();\n    }\n\n    private void RenameContentType() {\n      //The content type formerly known as \"Velocipede\" should hereby be known as \"Bicycle\".\n      ContentType(\"Bicycle\")\n        .UsedToBeNamed(\"Velocipede\");\n    }\n\n    private void RenameProperty() {\n      ContentType(\"Bicycle\") // On the Bicycle content type...\n        .Property(\"PneumaticTire\") // ...PneumaticTire is an existing property...\n        .UsedToBeNamed(\"WoodenTire\"); // ...that was previously called WoodenTire.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Link Indexer for Custom Property in C#\nDESCRIPTION: Implements a soft link indexer that manages references between content items, enabling warning notifications when attempting to delete referenced content. Creates SoftLink objects for each content reference in the property.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/custom-properties.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ServiceConfiguration(typeof (IPropertySoftLinkIndexer))]\npublic class LinkingPropertyIndexer: IPropertySoftLinkIndexer<IEnumerable<ContentReference>> {\n  public IEnumerable<SoftLink> ResolveReferences(IEnumerable<ContentReference> propertyValue, IContent owner) {\n    var softLinks = new List<SoftLink> ();\n    foreach(var link in propertyValue) {\n      var softLink = new SoftLink {\n        OwnerContentLink = owner.ContentLink.ToReferenceWithoutVersion(),\n          OwnerLanguage = (owner as ILocalizable)?.Language,\n          ReferencedContentLink = link,\n          SoftLinkType = ReferenceType.PageLinkReference\n      };\n      softLinks.Add(softLink);\n    }\n    return softLinks;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Contact Blocks for Display in Optimizely\nDESCRIPTION: Example of defining a property that holds a list of ContactBlock items for rendering in an Optimizely template. This would use a display template from ~/Views/Shared/DisplayTemplates.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual IList<ContactBlock> ContactBlocks { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Refresh Properties\nDESCRIPTION: Shows how to use GetEditHints and AddFullRefreshFor to handle properties requiring full page refresh.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/edit-hints-in-mvc.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nViewData[EPiServer.Web.Mvc.ViewDataKeys.FullRefreshProperties] to IList<EditHint>\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Page Type in Optimizely\nDESCRIPTION: Example of creating a standard page type class using Optimizely's content model. Demonstrates how to implement a basic content page with custom properties and content type attributes.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyOptimizelySite.Models.Pages {\n  [ContentType(\n    GroupName = \"Basic pages\",\n    Order = 1,\n    DisplayName = \"StandardPage\",\n    GUID = \"abad391c-5563-4069-b4db-1bd94f7a1eea\",\n    Description = \"To be used for basic content pages.\")]\n  public class StandardPage: SitePageData {\n    [CultureSpecific]\n    [Display(\n      Name = \"Main body\",\n      Description = \"The main body will be shown in the main content area of the page, using the XHTML-editor you can insert for example text, images and tables.\",\n      GroupName = SystemTabNames.Content,\n      Order = 1)]\n    public virtual XhtmlString MainBody {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating File Binary Data in Optimizely CMS using C#\nDESCRIPTION: Illustrates how to update the binary data of an existing file in Optimizely CMS. It retrieves a file, creates a new blob with updated content, and saves the changes.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-media.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void UpdatingBinary_of_a_file() {\n  var contentRepository = ServiceLocator.Current.GetInstance<IContentRepository>();\n  var blobFactory = ServiceLocator.Current.GetInstance<IBlobFactory>();\n\n  //the file to update, not hardcoded of course\n  var fileID = new ContentReference(444);\n\n  //Get the file\n  var file1 = contentRepository.Get<GenericFile>(fileID).CreateWritableClone() as GenericFile;\n\n  //Upload new blob\n  var blob = blobFactory.CreateBlob(file1.BinaryDataContainer, \".txt\");\n  using(var s = blob.OpenWrite()) {\n    StreamWriter w = new StreamWriter(s);\n    w.WriteLine(\"Hello world\");\n    w.Flush();\n  }\n\n  //Assign to file and publish changes\n  file1.BinaryData = blob;\n  var file1ID = contentRepository.Save(file1, SaveAction.Publish);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Approval Definitions with Additional Reviewers in Optimizely CMS\nDESCRIPTION: This snippet shows how to update an existing approval definition by adding a reviewer with invariant culture permissions to the second step. It retrieves the definition, creates a writable clone, adds the reviewer, and saves the updated definition.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/approval-definitions.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer.Approvals.ContentApprovals;\n\nContentReference contentLink;\nIApprovalDefinitionRepository definitionRepository;\n\nvar langInvariant = new CultureInfo[] {\n  CultureInfo.InvariantCulture\n};\n\n// Gets a definition\nApprovalDefinition definition = await definitionRepository.GetAsync(contentLink);\ndefinition = definition.CreateWritableClone();\ndefinition.Steps[1].Reviewers.Add(new ApprovalDefinitionReviewer(\"user2b\", langInvariant));\n\n// Saves a definition\nawait definitionRepository.SaveAsync(definition);\n```\n\n----------------------------------------\n\nTITLE: AvailableContentTypes Properties\nDESCRIPTION: Configuration properties for AvailableContentTypesAttributes including Availability, Include, Exclude, IncludeOn, and ExcludeOn specifications.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/attributes.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nAvailableContentTypesAttributes\nAvailability\nInclude\nExclude\nIncludeOn\nExcludeOn\n```\n\n----------------------------------------\n\nTITLE: Setting MainBody Property with Typed Model in Optimizely CMS\nDESCRIPTION: Sets the MainBody property of the page with HTML content when using a typed model where the property is directly accessible.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/creating-a-page-programmatically.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nmyPage.MainBody = \"<p>This is produced programmatically.</p>\";\n```\n\n----------------------------------------\n\nTITLE: Implementing ISelectionQuery Interface for Optimizely Auto-Suggestion in C#\nDESCRIPTION: This code creates a selection query class that provides suggestion items for an Optimizely editor dropdown. It implements the ISelectionQuery interface with methods to retrieve matching items based on user input and to get text representation for existing values.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/built-in-auto-suggestion-editor.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing EPiServer.ServiceLocation;\nusing EPiServer.Shell.ObjectEditing;\n\nnamespace EPiServer.Samples {\n  [ServiceConfiguration(typeof (ISelectionQuery))]\n  public class MySelectionQuery: ISelectionQuery {\n    SelectItem[] _items;\n    public MySelectionQuery() {\n      _items = new SelectItem[] {\n        new SelectItem() {\n            Text = String.Empty, Value = String.Empty\n          },\n          new SelectItem() {\n            Text = \"Alternative1\", Value = \"1\"\n          },\n          new SelectItem() {\n            Text = \"Alternative 2\", Value = \"2\"\n          }\n      };\n    }\n    //Will be called when the editor types something in the selection editor.\n    public IEnumerable<ISelectItem> GetItems(string query) {\n      return _items.Where(i => i.Text.StartsWith(query, StringComparison.OrdinalIgnoreCase));\n    }\n    //Will be called when initializing an editor with an existing value to get the corresponding text representation.\n    public ISelectItem GetItemByValue(string value) {\n      return _items.FirstOrDefault(i => i.Value.Equals(value));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Custom Content Providers with Specific Provider\nDESCRIPTION: Example demonstrating how to search content in specific custom content providers using PropertyCriteria and IPageCriteriaQueryService.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/configuring-content-providers.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nPropertyCriteriaCollection crits = new PropertyCriteriaCollection();\nPropertyCriteria crit = new PropertyCriteria();\ncrit.Name = \"EPI:MultipleSearch\";\ncrit.Value = \"CustomKey\";\ncrits.Add(crit);\nServiceLocator.Current.GetInstance<IPageCriteriaQueryService>().FindPagesWithCriteria(customPageRef, crits);\n```\n\n----------------------------------------\n\nTITLE: Restricting Content Selection with AllowedTypes\nDESCRIPTION: Example of using the AllowedTypes attribute to restrict content selection to specific types, in this case limiting to TeaserBlock type only.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/linking-to-other-content.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[AllowedTypes(new []{typeof(TeaserBlock)})]\npublic virtual ContentReference TeaserBlockReference { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Validating User Roles for Approval in C#\nDESCRIPTION: Demonstrates the use of SecurityEntityProvider to validate if a user is part of a role for approval purposes. This provider calls the underlying user or role provider configured for the site.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-approvals.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nSecurityEntityProvider\n```\n\n----------------------------------------\n\nTITLE: Defining EPiServer.DataAnnotations Attributes in C#\nDESCRIPTION: This snippet lists the available attributes in the EPiServer.DataAnnotations namespace. These attributes are used to define various aspects of content properties such as backing type, culture specificity, searchability, and allowed content types.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-attributes.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nEPiServer.DataAnnotations\n```\n\n----------------------------------------\n\nTITLE: Customizing Content Selector Root in Optimizely CMS\nDESCRIPTION: Demonstrates how to create a custom content selector for teaser blocks and override the default repository root. Includes an editor descriptor registration that customizes the content selection behavior.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/selecting-content.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[UIHint(\"teaserblock\")]\npublic virtual ContentReference TeaserBlockReference {\n  get;\n  set;\n}\n\n[EditorDescriptorRegistration(TargetType = typeof (ContentReference), UIHint = \"teaserblock\")]\npublic class BlockReferenceEditorDescriptor: ContentReferenceEditorDescriptor<TeaserBlock> {\n  public override IEnumerable<ContentReference> Roots {\n    get {\n      //Sample to override the default root for the repository.\n      //Take the reference from configuration or site initialization and do not hard-code it.\n      return new ContentReference[] {\n        new ContentReference(90)\n      };\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Approval Definitions in Optimizely CMS\nDESCRIPTION: This snippet shows how to delete an approval definition using its ID. Note that definitions cannot be deleted if there are any running approval instances associated with them.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/approval-definitions.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nApprovalDefinition definition;\nIApprovalDefinitionRepository definitionRepository;\n  // Deletes a definition\n  await definitionRepository.DeleteAsync(definition.ID);\n```\n\n----------------------------------------\n\nTITLE: GetPropertyValue Usage Examples\nDESCRIPTION: Shows various ways to use GetPropertyValue extension method for accessing properties with different overloads and type conversions.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic ActionResult Index(StandardPage currentPage) {\n  // 1. Get as string, defaults to null and otherwise calls ToString for the value\n  string mainBody = currentPage.GetPropertyValue(\"MainBody\");\n\n  // 2. Specify a fallback value\n  string mainBodyFallback = currentPage.GetPropertyValue(\"MainBody\", string.Empty);\n\n  // 3. Which is equivalent to\n```\n\n----------------------------------------\n\nTITLE: Creating a Razor Page View for Article Page\nDESCRIPTION: This Razor Page view corresponds to the Article page type. It uses HTML helpers like Html.EditAttributes and Html.PropertyFor to render and enable editing of page properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_4\n\nLANGUAGE: Razor\nCODE:\n```\n@page\n@model AlloyMvcTemplates.Pages.ProductModel\n@{\n  Layout = \"~/Views/Shared/Layouts/_Root.cshtml\";\n}\n<h1 @Html.EditAttributes(x => x.CurrentContent.PageName)>@Model.CurrentContent.PageName</h1>\n<p class=\"introduction\" @Html.EditAttributes(x => x.CurrentContent.MetaDescription)>@Model.CurrentContent.MetaDescription</p>\n<div class=\"row\">\n  <div class=\"span8 clearfix\" @Html.EditAttributes(x => x.CurrentContent.MainBody)>\n     @Html.DisplayFor(m => m.CurrentContent.MainBody)\n  </div>\n</div>\n@Html.PropertyFor(x => x.CurrentContent.MainContentArea, new { CssClass = \"row\", Tag = Global.ContentAreaTags.TwoThirdsWidth })\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Blocks in ContentArea via UIOptions\nDESCRIPTION: C# code that demonstrates how to enable the creation of inline blocks within ContentArea properties using the UIOptions service configuration.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/inline-edit-settings.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<UIOptions>(uiOptions => {  \n  uiOptions.InlineBlocksInContentAreaEnabled = true;\n});\n```\n\n----------------------------------------\n\nTITLE: DAM Asset Metadata Service Implementation\nDESCRIPTION: Example class showing how to implement custom DAM asset metadata retrieval using IDAMAssetIdentityResolver and IDAMAssetMetadataService.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DamAssetInfoExample {\n  private readonly IDAMAssetIdentityResolver _resolver;\n  private readonly IDAMAssetMetadataService _service;\n\n  public DamAssetInfoExample(IDAMAssetIdentityResolver resolver, IDAMAssetMetadataService service) {\n    _resolver = resolver;\n    _service = service;\n  }\n\n  /// <summary>\n  /// Retrieve asset metadata from CMP\n  /// </summary>\n  /// <param name=\"contentReference\">Content Reference to an asset in the DAM content provider</param>\n  /// <returns></returns>\n  public async Task < DamAssetInfo ? > Get(ContentReference contentReference) {\n    var asset = _resolver.Get(contentReference);\n    var guid = GetAssetGuid(asset);\n    if (guid.HasValue) {\n      return await _service.GetAssetMetadata(guid.Value);\n    }\n\n    return null;\n  }\n\n  /// <summary>\n  /// Helper to determine if the guid on the asset is an image or a rendition\n  /// </summary>\n  /// <param name=\"assetIdentity\"></param>\n  /// <returns></returns>\n  private static Guid ? GetAssetGuid(DAMAssetIdentity assetIdentity) {\n    bool TryParseRendition(string id, out Guid ? renditionGuid) {\n      renditionGuid = null;\n      if (string.IsNullOrWhiteSpace(id)) {\n        return false;\n      }\n\n      if (Guid.TryParse(id, out\n          var guid)) {\n        renditionGuid = guid;\n        return true;\n      }\n\n      return false;\n    }\n    bool TryParseImage(string id, out Guid ? imageGuid) {\n      imageGuid = null;\n      if (string.IsNullOrWhiteSpace(id)) {\n        return false;\n      }\n\n      var decodedId = Encoding.UTF8.GetString(Convert.FromBase64String(id)).Split(\"=\")[1];\n\n      if (Guid.TryParse(decodedId, out\n          var guid)) {\n        imageGuid = guid;\n        return true;\n      }\n\n      return false;\n    }\n\n    var assetId = assetIdentity.DAMAssetUri.Segments.Last();\n\n    if (TryParseRendition(assetId, out Guid ? renditionGuid)) {\n      return renditionGuid.Value;\n    }\n\n    if (TryParseImage(assetId, out Guid ? imageGuid)) {\n      return imageGuid.Value;\n    }\n\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Localized Content in C#\nDESCRIPTION: Demonstrates loading content in a specific language (Swedish) using CultureInfo.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npage = Locate.ContentRepository().Get<TextPage>(pageLink, CultureInfo.GetCultureInfo(\"sv\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LinkingProperty in C# for Optimizely CMS\nDESCRIPTION: Creates a custom property that inherits from PropertyLongString to handle an enumerable of ContentReference objects. The property stores references as semicolon-separated strings and provides conversion methods between string and ContentReference formats.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/custom-properties.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[PropertyDefinitionTypePlugIn]\npublic class LinkingProperty: PropertyLongString {\n  public IEnumerable<ContentReference> LinkedReferences {\n    get {\n      if (!String.IsNullOrEmpty(LongString)) {\n        var entries = LongString.Split(';');\n        return entries.Select(e => ContentReference.Parse(e));\n      }\n      return null;\n    }\n    set {\n      LongString = String.Join(\";\", value.Select(r => r.ToString()));\n    }\n  }\n\n  public override object Value {\n    get {\n      return LinkedReferences;\n    }\n    set {\n      IEnumerable<ContentReference> links = value as IEnumerable<ContentReference>;\n      if (links != null) {\n        LinkedReferences = links;\n      } else {\n        base.Value = value;\n      }\n    }\n  }\n\n  public override Type PropertyValueType {\n    get {\n      return typeof (IEnumerable<ContentReference>);\n    }\n  }\n\n  public override object SaveData(PropertyDataCollection properties) {\n    return base.LongString;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UIDescriptor for Document Content Type in C#\nDESCRIPTION: This code snippet shows how to create a UIDescriptor for a document content type in Optimizely CMS. It sets the default edit view to All Properties view and demonstrates how to override default settings for media content.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/custom-editing-preview-for-media.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[UIDescriptorRegistration]\npublic class DocumentUIDescriptor: UIDescriptor<Document> {\n  public DocumentUIDescriptor(): base(\"icon-document\") {\n    DefaultView = CmsViewNames.AllPropertiesView;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Content with Specific Culture and LoaderOptions\nDESCRIPTION: Detailed example of loading content in a specific culture using LoaderOptions without fallback rules.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/multilingual-content.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar content = _contentLoader.Get<IContent>(contentLink, new LoaderOptions() {\n  LanguageLoaderOption.Specific(CultureInfo.GetCultureInfo(\"sv\"))\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Content Provider in Optimizely CMS\nDESCRIPTION: Example of registering an XML content provider with configuration values including entry point, capabilities and custom parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/configuring-content-providers.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<ContentOptions>(o => o.AddProvider<XmlContentProvider>(\"xml\", config => {\n    config[ContentProviderParameter.EntryPoint] = _configuration.GetValue<string>(ContentProviderParameter.EntryPoint);\n    config[ContentProviderParameter.Capabilities] = ContentProviderParameter.FullProviderCapability;\n    config[\"someConfigKey\"] = \"someConfigValue\";\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Approval Event Logger in C#\nDESCRIPTION: Implementation of an initialization module that hooks into approval events using IApprovalEngineEvents. Demonstrates event subscription and logging of approval actions.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-content-approvals.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[InitializableModule]\npublic class ApprovalLogger: IInitializableModule {\n  private IApprovalEngineEvents _approvalEngineEvents;\n\n  public void Initialize(InitializationEngine context) {\n    _approvalEngineEvents = context.Locate.Advanced.GetInstance<IApprovalEngineEvents>();\n    _approvalEngineEvents.Approved += OnApproved;\n  }\n\n  public void Uninitialize(InitializationEngine context) => _approvalEngineEvents.Approved -= OnApproved;\n\n  private void OnApproved(ApprovalEventArgs e) => LogManager.GetLogger(typeof (ApprovalLogger)).Debug(\"Approve\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Base Page Controller in C#\nDESCRIPTION: This example shows a base page controller class that inherits from PageController<T> and implements IModifyLayout. It includes a constructor for dependency injection and a Logout action method.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace AlloyTemplates.Controllers {\n  public abstract class PageControllerBase<T>: PageController<T>, IModifyLayout\n  where T: SitePageData {\n    private readonly UISignInManager _uiSignInManager;\n\n    public PageControllerBase(UISignInManager uiSignInManager) {\n      _uiSignInManager = uiSignInManager;\n    }\n\n    public async Task<IActionResult> Logout() {\n      await _uiSignInManager.SignOutAsync();\n      return RedirectToAction(\"Index\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PageHeading Property with Fallback\nDESCRIPTION: Shows implementation of a PageHeading property with fallback to PageName using GetPropertyValue and SetPropertyValue extension methods.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType]\n    public class StandardPage: SitePageData\n    {\n      public virtual string PageHeading\n      {\n        get\n        {\n          var heading = this.GetPropertyValue(p => p.PageHeading);\n     \n          // If heading is not set, fall back to PageName\n          return String.IsNullOrWhiteSpace(heading) ? PageName : heading;\n        }\n        set { this.SetPropertyValue(p => p.PageHeading, value); }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Rendering PageListBlock in Razor View\nDESCRIPTION: Razor view for rendering the PageListBlock. It displays a list of pages with optional publish date and introduction text, applying theme CSS classes.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_7\n\nLANGUAGE: razor\nCODE:\n```\n@model PageListModel\n@Html.FullRefreshPropertiesMetaData(new[] { \"IncludePublishDate\", \"IncludeIntroduction\", \"Count\", \"SortOrder\", \"Root\", \"PageTypeFilter\", \"CategoryFilter\", \"Recursive\" })\n<h2 @Html.EditAttributes(x => x.Heading)>@Model.Heading</h2>\n<hr />\n    \n@foreach(var page in Model.Pages) {\n  <div class=\"listResult @string.Join(\" \", page.GetThemeCssClassNames())\">\n    <h3>\n      @Html.PageLink(page)\n    </h3>\n   @if(Model.ShowPublishDate && page.StartPublish.HasValue) {\n     <p class=\"date\">@Html.DisplayFor(x => page.StartPublish)</p>\n   }\n   @if(Model.ShowIntroduction && page is SitePageData sitePageData) {\n     <p>@sitePageData.TeaserText</p>\n   }\n <hr />\n </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Block Data Type in Optimizely\nDESCRIPTION: Example showing how to create a custom type that inherits from BlockData for use in Optimizely CMS. This GeoCoordinate block has virtual properties and the ContentType attribute with a GUID.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType(AvailableInEditMode = false, GUID = \"11d57768-e09e-4da9-90df-54c73c61b270\")]\npublic class GeoCoordinate: BlockData {\n  public virtual decimal Latitude {\n    get;\n    set;\n  }\n  public virtual decimal Longtitude {\n    get;\n    set;\n  }\n  public virtual int Zoom {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Culture-Specific Property in C#\nDESCRIPTION: Example of defining a culture-specific property in a content type that implements ILocalizable interface. The Heading property will have different values for each language version.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/multilingual-content.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[CultureSpecific]\npublic virtual string Heading {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Property Types for Assets in Optimizely CMS\nDESCRIPTION: This snippet lists the supported property types for handling assets in Optimizely CMS, including ContentReference and Url types with various UIHints for images, videos, and files.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/assets-and-media.md#2025-04-22_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n- ContentReference property type with UIHint \"image\" is displayed and edited as an image.\n- ContentReference property type with UIHint \"video\" is displayed and edited as a video.\n- ContentReference property type with UIHint \"mediafile\" is displayed and edited as any file.\n- Url property type with UIHint \"image\" is displayed and edited as an image.\n- Url property type with UIHint \"video\" is displayed and edited as a video.\n- Url property type with UIHint \"document\" is displayed and edited as any file.\n```\n\n----------------------------------------\n\nTITLE: Defining a List for Rendering in Optimizely\nDESCRIPTION: Example of defining a property list that will be rendered on the frontend. This defines a list of string values for unique selling points of a product or service.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual IList<string> UniqueSellingPoints { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TestPage with Location List in C#\nDESCRIPTION: Creates a content type page that includes a list of locations. Uses EditorDescriptor for collection editing and implements the IList<Location> property.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/generic-propertylist.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\nusing EPiServer.Core;\nusing EPiServer.DataAnnotations;\nusing EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors;\nusing EPiServer.Shell.ObjectEditing;\nusing System.Collections.Generic;\n\nnamespace Site.Models.Pages {\n  /// <summary>\n  /// Page with PropertyListDefinition\n  /// </summary>\n  [ContentType(GUID = \"2CDDC73C-83AC-4F35-BA9D-50F285723A96\")]\n  public class TestPage: PageData {\n    [Display(Name = \"List of locations\")]\n    [EditorDescriptor(EditorDescriptorType = typeof (CollectionEditorDescriptor<Location>))]\n    public virtual IList<Location> Locations {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DAM Services in Startup.cs\nDESCRIPTION: Adding required service configurations for DAM UI and Graph integration in the application startup.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddDAMUi();\nservices.AddDAMGraphIntegration();\n```\n\n----------------------------------------\n\nTITLE: Displaying Optimizely CMS Asset Management Functionality\nDESCRIPTION: This snippet outlines the key functionality available for all content types in Optimizely CMS, including media. It covers wastebasket support, reference checking, and drag-and-drop capabilities.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/assets-and-media.md#2025-04-22_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n- Wastebasket (trash) support for content types, including moving, viewing, and restoring from trash.\n- Reference check when you delete any content item (image, page, block, and so on); opens a dialog box with links to affected content references.\n- Drag-and-drop support from the media manager in the Assets panel to any overlay or editor that handles files (ContentReferences or URLs with a mediafile, image, or video UIHint).\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Status Types in Optimizely CMS\nDESCRIPTION: Enumeration of possible status values for IVersionable content items in Optimizely CMS, ranging from NotCreated to PreviouslyPublished states.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-versions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIVersionable.Status\n- NotCreated\n- CheckedOut\n- AwaitingApproval\n- Rejected\n- CheckedIn\n- DelayedPublish\n- Published\n- PreviouslyPublished\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Media Type in C#\nDESCRIPTION: Defines a video media type class inheriting from VideoData with properties for copyright and preview image. Includes specific video format extensions.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/media-types-and-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnamespace MyOptimizelySite.Models.Media {\n  [ContentType(DisplayName = \"VideoFile\", GUID = \"f2285e5a-be15-47b6-8952-e3c61deaefd2\", Description = \"Used for specific video file formats.\")]\n  [MediaDescriptor(ExtensionString = \"flv,mp4,webm\")]\n  public class VideoFile: VideoData {\n    /// <summary>\n    /// Gets or sets the copyright.\n    /// </summary>\n    public virtual string Copyright {\n      get;\n      set;\n    }\n\n    /// <summary>\n    /// Gets or sets the URL to the preview image.\n    /// </summary>\n    [UIHint(UIHint.Image)]\n    public virtual ContentReference PreviewImage {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Base Page Class with SEO Properties in C# for Optimizely CMS\nDESCRIPTION: This example shows the implementation of a SitePageData base class that inherits from EPiServer.Core.PageData. It includes an SEO property (MetaKeywords) that will be available on all pages inheriting from this class.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-types.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace MyOptimizelySite.Models.Pages {\n  public abstract class SitePageData: EPiServer.Core.PageData {\n    [Display(GroupName = \"SEO\", Order = 200, Name = \"Search keywords\")]\n    public virtual String MetaKeywords {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StandardPage with TeaserBlock Property in C#\nDESCRIPTION: Defines a StandardPage page type that includes a TeaserBlock property. The page type inherits from SitePageData and includes a MainBody property of type XhtmlString alongside the TeaserBlock property.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/using-a-block-as-a-property.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.DataAnnotations;\nusing EPiServer.SpecializedProperties;\nusing MyOptimizelySite.Models.Blocks;\n\nnamespace MyOptimizelySite.Models.Pages {\n  [ContentType(GroupName = \"Basic pages\", Order = 1, DisplayName = \"StandardPage\", GUID = \"abad391c-5563-4069-b4db-1bd94f7a1eea\",\n    Description = \"To be used for basic content pages.\")]\n  public class StandardPage: SitePageData {\n    [CultureSpecific]\n    [Display(\n      Name = \"Main body\",\n      Description = \"The main body for inserting for example text, images and tables.\",\n      GroupName = SystemTabNames.Content,\n      Order = 1)]\n    public virtual XhtmlString MainBody {\n      get;\n      set;\n    }\n\n    [Display(Order = 5, GroupName = SystemTabNames.Content)]\n    public virtual TeaserBlock Teaser {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Strings in Optimizely\nDESCRIPTION: Example of implementing a property that stores a list of string values in an Optimizely content model. This allows for collecting multiple text entries from content editors.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual IList<string> ListOfStrings { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: IContentData Interface Implementation\nDESCRIPTION: Example of implementing IContentData interface for content restrictions.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/restricting-content-types-in-properties.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ISpecialInterface: IContentData {\n  // properties and methods\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Razor Page Model for Article Page in C#\nDESCRIPTION: This example shows how to create a Razor Page model for the Article page type. It inherits from RazorPageModel<ArticlePage> and implements IPageViewModel<ArticlePage>.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nnamespace AlloyMvcTemplates.Pages {\n  public class ProductModel: RazorPageModel<ArticlePage>, IPageViewModel<ArticlePage> {\n    public ProductPage CurrentPage => CurrentContent;\n\n    public LayoutModel Layout {\n      get;\n      set;\n    }\n    public IContent Section {\n      get;\n      set;\n    }\n\n    public void OnGet() {\n      Layout = HttpContext.RequestServices.GetService<PageViewContextFactory> ()\n        .CreateLayoutModel(CurrentContent.ContentLink, HttpContext);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Content Property Without Typed Model in Optimizely CMS\nDESCRIPTION: Demonstrates how to set a page property when the typed model is not known, using the Property collection with a string key to access the property.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/creating-a-page-programmatically.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nmyPage.Property[\"MainBody\"].Value = \"<p>This is produced programmatically.</p>\";\n```\n\n----------------------------------------\n\nTITLE: Defining a Block Type in Optimizely CMS\nDESCRIPTION: Code example showing how to define a ContentType block class in Optimizely CMS that can be used in lists. The block is marked as not available in edit mode and has a unique GUID identifier.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType(AvailableInEditMode = false, GUID = \"38d57768-e09e-4da9-90df-54c73c61b270\")]  \npublic class ContactBlock : BlockData {  \n   //block properties  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Endpoint Template for PDF Files in Optimizely CMS\nDESCRIPTION: This snippet demonstrates how to create a custom endpoint template for PDF files. It includes necessary attributes and metadata for CMS integration, authorization, and preview policies. The endpoint adds a Content-Disposition header before invoking the blob handler.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/media-types-and-templates.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TemplateDescriptor(Inherited = true, TemplateTypeCategory = TemplateTypeCategories.HttpHandler)]\npublic class PdfEndpoint: Endpoint, IRenderTemplate<PdfFile> {\n  private readonly static ContentActionDescriptor _mediaContentActionDescriptor = new ContentActionDescriptor {\n    Inherited = true, ModelType = typeof (PdfFile)\n  };\n  private static readonly AuthorizeAttribute _authorizeAttribute = new AuthorizeAttribute(CmsPolicyNames.Read);\n  private static readonly AuthorizeAttribute _previewAttribute = new AuthorizeAttribute(CmsPolicyNames.Preview);\n\n  public PdfEndpoint(IBlobHttpHandler blobHttpHandler): base(context => ProcessRequest(blobHttpHandler, context),\n    new EndpointMetadataCollection(_mediaContentActionDescriptor, _authorizeAttribute, _previewAttribute), nameof(PdfEndpoint)) {}\n\n  private static Task ProcessRequest(IBlobHttpHandler blobHttpHandler, HttpContext context) {\n    context.Response.Headers.Add(\"Content-Disposition\", \"attachment\");\n    return blobHttpHandler.Invoke(context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Parent Location for New Page in Optimizely CMS\nDESCRIPTION: Sets the location where the new page will be published by referencing the parent page. In this example, the StartPage is used as the parent reference point.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/creating-a-page-programmatically.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar parent = ContentReference.StartPage;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Selection Attribute in C# for Optimizely CMS\nDESCRIPTION: This snippet shows how to create a custom LanguageSelectionAttribute that inherits from SelectOneAttribute. It overrides the SelectionFactoryType property to set the default selection factory, following the DRY principle for code reuse.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/single-or-multiple-list-options.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]\npublic class LanguageSelectionAttribute: SelectOneAttribute {\n  public override Type SelectionFactoryType {\n    get {\n      return typeof (LanguageSelectionFactory);\n    }\n    set {\n      base.SelectionFactoryType = value;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Type Class in Optimizely\nDESCRIPTION: Example showing how to create a custom class for use in Optimizely CMS. This GeoCoordinate class contains properties for storing geographic coordinates and zoom level.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GeoCoordinate {\n  public decimal Latitude {\n    get;\n    set;\n  }\n  public decimal Longtitude {\n    get;\n    set;\n  }\n  public int Zoom {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Block View Component in C#\nDESCRIPTION: This snippet demonstrates the beginning of a view component for a PageListBlock. It inherits from BlockComponent<PageListBlock> and injects an IContentLoader dependency.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nnamespace AlloyTemplates.Components {\n  public class PageListBlockViewComponent: BlockComponent<PageListBlock> {\n    private readonly IContentLoader _contentLoader;\n    public PageListBlockViewComponent(IContentLoader contentLoader) {\n      _contentLoader = contentLoader;\n    }\n\n    protected override IViewComponentResult InvokeComponent(PageListBlock currentBlock) {\n\n\n```\n\n----------------------------------------\n\nTITLE: Using IValidationService Interface in Optimizely CMS\nDESCRIPTION: The validation service implements this interface to validate object instances. It can be retrieved from the IOC container and provides a method to validate objects.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/validating-object-instances.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIEnumerable<ValidationError> Validate(object instance);\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Content Types in Optimizely CMS\nDESCRIPTION: This snippet defines two content types: CommentUser and Comment. CommentUser inherits from BlockData and represents a user making a comment. Comment implements IContent and represents the actual comment, including properties required by the IContent interface.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/persisting-icontent-instances.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[ContentType]\npublic class CommentUser: BlockData {\n  public virtual string Email {\n    get;\n    set;\n  }\n  public virtual string UserName {\n    get;\n    set;\n  }\n}\n\n[ContentType]\npublic class Comment: IContent {\n  public virtual CommentUser User {\n    get;\n    set;\n  }\n  public virtual string Body {\n    get;\n    set;\n  }\n\n  #region IContent\n  private PropertyDataCollection _properties = new PropertyDataCollection();\n\n  public string Name {\n    get;\n    set;\n  }\n  public ContentReference ContentLink {\n    get;\n    set;\n  }\n  public ContentReference ParentLink {\n    get;\n    set;\n  }\n  public Guid ContentGuid {\n    get;\n    set;\n  }\n  public int ContentTypeID {\n    get;\n    set;\n  }\n  public bool IsDeleted {\n    get;\n    set;\n  }\n  public PropertyDataCollection Property {\n    get {\n      return _properties;\n    }\n  }\n  public bool IsNull {\n    get {\n      return _properties.Count == 0;\n    }\n  }\n  #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Content Loader Instance in C#\nDESCRIPTION: Demonstrates obtaining an IContentLoader instance for read-only content access using the ServiceLocator.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar loader = EPiServer.ServiceLocation.ServiceLocator.Current.GetInstance<IContentLoader>();\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit Hint Razor View\nDESCRIPTION: Shows the Razor view implementation for Edit Hints, including property rendering with edit attributes, conditional banner display, and edit sections for block data.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/edit-hints-in-mvc.md#2025-04-22_snippet_7\n\nLANGUAGE: Razor\nCODE:\n```\n@model AlloyTemplates.Controllers.EditSampleViewModel\n    @{\n       Layout = null;\n    }\n    \n    @Html.FullRefreshPropertiesMetaData()\n    \n    <h1 @Html.EditAttributes(m => m.Heading)>@Model.Heading</h1>\n    \n    @if (Model.ShowBanner)\n    {\n      <div @Html.EditAttributes(m => m.BannerUrl)>\n        <img src=\"@Model.BannerUrl\"/>\n      </div>\n    }\n    \n    @Html.PropertyFor(m => m.Body, new EPiServer.Web.Mvc.EditHint() { ContentDataPropertyName = \"MainBody\" } )\n    @Html.PropertyFor(m => m.SecondaryBody)\n    \n    @Html.BeginEditSection(\"div\", p => p.TextBlock)\n      @Html.Partial(\"TextBlock\", Model.TextBlock )\n    @Html.EndEditSection(\"div\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Article Page View in Razor\nDESCRIPTION: This Razor view corresponds to the Article page type. It uses HTML helpers like Html.DisplayFor and Html.PropertyFor to render the page properties, enabling on-page editing.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: Razor\nCODE:\n```\n@using EPiServer.Core\n@using EPiServer.Web.Mvc.Html\n    \n@model MyOptimizelySite.Models.Pages.ArticlePage\n  <h1>\n    @Html.DisplayFor(m => m.Heading)\n  </h1>\n    \n  <h3>\n    @Html.PropertyFor(m => m.Introduction)\n  </h3>\n    \n  <div>\n    @Html.PropertyFor(m => m.MainBody)\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Using EditAttributes Extension\nDESCRIPTION: The EditAttributes extension method writes connection attributes to link elements with content data object properties in edit view.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/edit-hints-in-mvc.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nEditAttributes\n```\n\n----------------------------------------\n\nTITLE: Adding Role-Based Reviewers to Approval Definitions in Optimizely CMS\nDESCRIPTION: This example demonstrates how to add a role-based reviewer to an existing approval definition for the Swedish language. It requires CMS UI 10.10.0 or later and allows assigning approval permissions to entire roles rather than individual users.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/approval-definitions.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer.Approvals.ContentApprovals;\n\nContentReference contentLink;\nIApprovalDefinitionRepository definitionRepository;\n\nvar langSV = new CultureInfo[] {\n  CultureInfo.GetCultureInfo(\"sv\")\n};\n\n// Gets a definition\nApprovalDefinition definition = await definitionRepository.GetAsync(contentLink);\ndefinition = definition.CreateWritableClone();\ndefinition.Steps[0].Reviewers.Add(new ApprovalDefinitionReviewer(\"managers\", langSV, ApprovalDefinitionReviewerType.Role));\n\n// Saves a definition\nawait definitionRepository.SaveAsync(definition);\n```\n\n----------------------------------------\n\nTITLE: Using GetEditHints Extension for Property Connections\nDESCRIPTION: The GetEditHints extension method located in EPiServer.Web.Mvc namespace establishes connections between view model properties and content data properties using ViewData.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/edit-hints-in-mvc.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nGetEditHints\n```\n\n----------------------------------------\n\nTITLE: Common Property Types in Optimizely CMS\nDESCRIPTION: Basic property types used for storing and presenting data in Optimizely CMS models, including string types, numeric types, and basic content types.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/built-in-property-types.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nStringLength\nString\nXHtmlString\nRange\nInt\nRange\nDateTime\nRange\nDouble\nBoolean\nPageType\n<Url to content>/BlobPropertyName\nBlob\n```\n\n----------------------------------------\n\nTITLE: Updating Page Properties in Optimizely\nDESCRIPTION: Demonstrates how to create a writable clone of a page and update its properties using IContentRepository.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic ActionResult Index(StandardPage currentPage) {\n  PageData writablePage = currentPage.CreateWritableClone();\n  writablePage.SomeProperty = \"somevalue\";\n  writablePage[\"SomeProperty\"] = \"somevalue\";\n  _contentRepository.Save(writablePage, EPiServer.DataAccess.SaveAction.Publish);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Approval List with Filters in Optimizely\nDESCRIPTION: Demonstrates how to query approvals using ContentApprovalQuery with specific filters like username, status, and definition ID.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-content-approvals.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Approvals.ContentApprovals;\n\nContentApprovalDefinition definition;\nIApprovalRepository approvalRepository;\n\nvar approvals = await approvalRepository.ListAsync(new ContentApprovalQuery {\n    Username = \"user\",\n    Status = ApprovalStatus.InReview,\n    DefinitionID = definition.ID\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PropertyFor Helper\nDESCRIPTION: The Html.PropertyFor extension method creates a wrapping element around properties with content data connections. It supports customization of the wrapping element through additionalViewData.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/edit-hints-in-mvc.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nHtml.PropertyFor\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic File Content Type in C#\nDESCRIPTION: Creates a simple content type 'GenericFile' that inherits from MediaData and includes a Description property. This serves as a base for the following examples.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-media.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType]\npublic class GenericFile : MediaData {\n  public string Description { \n    get; \n    set; \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Comments in Optimizely CMS\nDESCRIPTION: This snippet demonstrates how to create, save, and load a Comment instance using IContentRepository. It includes a CommentHandler class with a method to create a comment, save it to the repository, and then reload it to verify the data persistence.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/persisting-icontent-instances.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CommentHandler {\n  private IContentRepository _contentRepository;\n  public CommentHandler(IContentRepository contentRepository) {\n    _contentRepository = contentRepository;\n  }\n\n  public Comment CreateAComment() {\n    var comment = _contentRepository.GetDefault<Comment>(PageReference.RootPage, LanguageSelector.AutoDetect());\n    comment.Name = \"acomment\";\n    comment.User.Email = \"[email protected]\";\n    comment.Body = \"This is a comment\";\n\n    var contentLink = _contentRepository.Save(comment, EPiServer.DataAccess.SaveAction.Publish, EPiServer.Security.AccessLevel.NoAccess);\n    var loadedComment = _contentRepository.Get<Comment>(contentLink);\n\n    System.Diagnostics.Debug.Assert(comment.User.Email == loadedComment.User.Email);\n    System.Diagnostics.Debug.Assert(comment.Body == loadedComment.Body);\n\n    return comment;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Content Approvals Namespace in C#\nDESCRIPTION: Demonstrates how to access the content approvals feature through the EPiServer.Approvals.ContentApprovals namespace. This namespace provides access to content versions of ApprovalDefinition and Approval classes, as well as extension methods for ContentReferences in repository interfaces.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-approvals.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nEPiServer.Approvals.ContentApprovals\n```\n\nLANGUAGE: csharp\nCODE:\n```\nApprovalDefinition\n```\n\nLANGUAGE: csharp\nCODE:\n```\nApproval\n```\n\nLANGUAGE: csharp\nCODE:\n```\nContentReferences\n```\n\nLANGUAGE: csharp\nCODE:\n```\nContentReference\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Element Tags\nDESCRIPTION: Demonstrates how to customize the wrapping element tag using the CustomTag property in additionalViewData.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/edit-hints-in-mvc.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nadditionalViewData (new { CustomTag = \"span\" })\n```\n\n----------------------------------------\n\nTITLE: Uploading Media with Dynamic Content Type Resolution in C#\nDESCRIPTION: Shows how to upload a media file where the content type is resolved at runtime based on the file extension. It uses various Optimizely services including ContentMediaResolver and IContentTypeRepository.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-media.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Uploading_a_media_from_extension() {\n  var contentRepository = ServiceLocator.Current.GetInstance<IContentRepository>();\n  var contentTypeRepository = ServiceLocator.Current.GetInstance<IContentTypeRepository>();\n  var mediaDataResolver = ServiceLocator.Current.GetInstance<ContentMediaResolver>();\n  var blobFactory = ServiceLocator.Current.GetInstance<IBlobFactory>();\n\n  //Get a suitable MediaData type from extension\n  var mediaType = mediaDataResolver.GetFirstMatching(\".txt\");\n  var contentType = contentTypeRepository.Load(mediaType);\n\n  //Get a new empty file data\n  var media = contentRepository.GetDefault<MediaData>(SiteDefinition.Current.GlobalAssetsRoot, contentType.ID);\n  media.Name = \"Readme.txt\";\n\n  //Create a blob in the binary container\n  var blob = blobFactory.CreateBlob(media.BinaryDataContainer, \".txt\");\n  using(var s = blob.OpenWrite()) {\n    StreamWriter w = new StreamWriter(s);\n    w.WriteLine(\"Hello world\");\n    w.Flush();\n  }\n\n  //Assign to file and publish changes\n  media.BinaryData = blob;\n  var file1ID = contentRepository.Save(media, SaveAction.Publish);\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing ContentType Attribute in Optimizely CMS\nDESCRIPTION: A reference to the ContentType attribute that is used to decorate classes that should be detected as content types in Optimizely CMS during synchronization.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/synchronization.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nContentType\n```\n\n----------------------------------------\n\nTITLE: Loading Generic Content Instance in C#\nDESCRIPTION: Demonstrates loading content as IContent when the specific type is unknown.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar content = loader.Get<IContent>(pageLink);\n```\n\n----------------------------------------\n\nTITLE: Using Edit Sections for Nested Properties\nDESCRIPTION: The BeginEditSection and EndEditSection methods handle edit hints for nested properties and blocks.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/edit-hints-in-mvc.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nBeginEditSection\n```\n\n----------------------------------------\n\nTITLE: Retrieving or Creating Asset Folder in Optimizely CMS using C#\nDESCRIPTION: This snippet demonstrates how to get an existing assets folder or create one automatically using the ContentAssetHelper in Optimizely CMS. It uses the ServiceLocator to retrieve an instance of ContentAssetHelper and then calls the GetOrCreateAssetFolder method with a content link.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-assets-and-folders.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncontentAssetHelper = ServiceLocator.Current.GetInstance<ContentAssetHelper>();\nvar contentAssetFolder = contentAssetHelper.GetOrCreateAssetFolder(myContentLink);\n```\n\n----------------------------------------\n\nTITLE: Listing Child Content Items in C#\nDESCRIPTION: Shows how to retrieve child content items from a parent content reference.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nIEnumerable<IContent> children = loader.GetChildren<IContent>(pageLink);\n```\n\n----------------------------------------\n\nTITLE: Defining System.ComponentModel.DataAnnotations Attributes in C#\nDESCRIPTION: This snippet outlines the attributes available in the System.ComponentModel.DataAnnotations namespace. These attributes are used for defining property requirements, visibility, display characteristics, validation rules, and editability in the Optimizely CMS.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-attributes.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.ComponentModel.DataAnnotations\n```\n\n----------------------------------------\n\nTITLE: Grouping Properties Under Tabs in C#\nDESCRIPTION: Demonstrates how to group properties under tabs using the Display attribute with GroupName and Order specifications.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/grouping-content-types-and-properties.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Display(\n  Name = \"Author\",\n  Description = \"Name of article author.\",\n  GroupName = \"Details\", Order = 1)]\npublic virtual String Author {\n  get;\n  set;\n}\n\n[Display(\n  Name = \"Classification\",\n  Description = \"Genre or type of article.\",\n  GroupName = \"Details\", Order = 2)]\npublic virtual String Classification {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Content Interface Definition\nDESCRIPTION: Core interface for handling content in Optimizely CMS content providers.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-providers.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nEPiServer.Core.IContent\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed File Extensions in JSON\nDESCRIPTION: Configuration settings in appSettings.json to specify allowed file extensions for uploads.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/media-types-and-templates.md#2025-04-22_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"EPiServer\": {  \n  \"CmsUI\": {  \n    \"Upload\": {  \n      \"AllowedFileExtensions\": \"jpg,jpeg,jpe,ico,gif,bmp,png,tiff\"  \n    }  \n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grouped Content Types in C#\nDESCRIPTION: Example showing how to create two page types (StandardPage and ArticlePage) with different group names and ordering using ContentType attributes.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/grouping-content-types-and-properties.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType(GroupName = \"Basic pages\",\n  Order = 1,\n  DisplayName = \"StandardPage\",\n  GUID = \"abad391c-5563-4069-b4db-1bd94f7a1eea\",\n  Description = \"To be used for basic content pages.\")]\npublic class StandardPage: PageData {}\n\n[ContentType(GroupName = \"Facts articles\",\n  Order = 2,\n  DisplayName = \"ArticlePage\",\n  GUID = \"b8fe8485-587d-4880-b485-a52430ea55de\",\n  Description = \"Basic page type for creating articles.\")]\npublic class ArticlePage: PageData {}\n```\n\n----------------------------------------\n\nTITLE: Listing Approval Decisions in Optimizely\nDESCRIPTION: Shows how to retrieve the list of decisions made for a specific approval using the approval repository.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-content-approvals.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nApproval approval;\nIApprovalRepository approvalRepository;\n\nvar decisions = await approvalRepository.ListDecisionsAsync(approval.ID);\n```\n\n----------------------------------------\n\nTITLE: Content Resolution Methods\nDESCRIPTION: Methods for resolving content references and implementing content provider functionality, including LoadChildrenReferences and ContentResolveResult methods.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-providers.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nLoadChildrenReferences\nContentResolveResult ResolveContent(ContentReference)\nContentReference\nConstructContentUri(contentTypeId, contentLink, contentGuid)\nPageLink\nPageGUID\nLinkUrl\nPageData\nContentResolveResult ResolveContent(Guid)\nUri\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Methods for IContent in Optimizely CMS\nDESCRIPTION: This snippet demonstrates two extension methods for the IContent interface. The Language method checks if content implements ILocale and returns the appropriate language. The IsModified method checks if content implements IModifiedTrackable and returns its modification status.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-metadata-properties.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static CultureInfo Language(this IContent content) {\n  if (content == null) throw new ArgumentNullException(nameof(content));\n  return (content is ILocale locale) ? locale.Language : CultureInfo.InvariantCulture;\n}\n\npublic static bool IsModified(this IContent content) {\n  if (content == null) throw new ArgumentNullException(nameof(content));\n  var modifiedTrackable = content as IModifiedTrackable;\n  return modifiedTrackable == null || modifiedTrackable.IsModified;\n}\n```\n\n----------------------------------------\n\nTITLE: Access Attribute Properties\nDESCRIPTION: Properties of the Access attribute that defines user access rights for content creation including Users, Roles, and VisitorGroups.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/attributes.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nUsers\nRoles\nVisitorGroups\nContentType\nAccess\nContentTypes\n```\n\n----------------------------------------\n\nTITLE: Creating TeaserBlock Partial View in Razor\nDESCRIPTION: Partial view for rendering a TeaserBlock, which displays a heading and an image. This view is typically placed in the Views/Shared folder of the project.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_8\n\nLANGUAGE: razor\nCODE:\n```\n@model MyOptimizelySite.Models.Blocks.TeaserBlock\n    \n  <div>\n    <h2>@Html.PropertyFor(x => x.Heading)</h2>\n    <img src=\"@Url.ContentUrl(Model.Image)\" />\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Safe Content Type Loading in C#\nDESCRIPTION: Shows how to safely load and cast content to a specific type without throwing exceptions.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nTextPage page = loader.Get<IContent>(pageLink) as TextPage;\n```\n\n----------------------------------------\n\nTITLE: Setting Content Status for Approval in C#\nDESCRIPTION: Illustrates how to initiate a content approval process by setting the status of a content item to AwaitingApproval. This status change triggers the approval workflow.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-approvals.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nAwaitingApproval\n```\n\n----------------------------------------\n\nTITLE: Implementing ContentType with SelectOne and SelectMany Attributes in C#\nDESCRIPTION: This snippet demonstrates how to create a SamplePage class with single and multiple language selection properties using SelectOne and SelectMany attributes. It also includes an implementation of ISelectionFactory to provide the list of language options.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/single-or-multiple-list-options.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[ContentType]\npublic class SamplePage: PageData {\n  [SelectOne(SelectionFactoryType = typeof (LanguageSelectionFactory))]\n  public virtual string SingleLanguage {\n    get;\n    set;\n  }\n\n  [SelectMany(SelectionFactoryType = typeof (LanguageSelectionFactory))]\n  public virtual string MultipleLanguage {\n    get;\n    set;\n  }\n}\n\npublic class LanguageSelectionFactory: ISelectionFactory {\n  public IEnumerable<ISelectItem> GetSelections(ExtendedMetadata metadata) {\n    return new ISelectItem[] {\n      new SelectItem() {\n        Text = \"English\", Value = \"EN\"\n      }, new SelectItem() {\n        Text = \"Swahili\", Value = \"SW\"\n      }, new SelectItem() {\n        Text = \"French Polonesia\", Value = \"PF\"\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Type Restrictions\nDESCRIPTION: Example of allowing multiple content types in ContentArea using AllowedTypes attribute.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/restricting-content-types-in-properties.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[AllowedTypes(new [] {\n  typeof (PageData), typeof (BlockData)\n})]\npublic virtual ContentArea RelatedContentArea {\n  get;\n  set;\n}\n\n[AllowedTypes(typeof (PageData), typeof (BlockData))]\npublic virtual ContentArea OtherRelatedContentArea {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Loading Content Items in C#\nDESCRIPTION: Example of loading multiple content items simultaneously with language fallback options.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/icontentrepository-and-datafactory.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nIEnumerable<ContentReference> references = GetSomeReferences();\nIEnumerable<IContent> items = loader.GetItems(references, new LoaderOptions() {\n  LanguageLoaderOption.FallbackWithMaster()\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Approval Definition Repositories in C#\nDESCRIPTION: Shows the interfaces used for accessing approval definitions and their versions. IApprovalDefinitionRepository is used for current definitions, while IApprovalDefinitionVersionRepository allows access to specific versions.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-approvals.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIApprovalDefinitionRepository\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIApprovalDefinitionVersionRepository\n```\n\n----------------------------------------\n\nTITLE: Defining a List of DateTime Values in Optimizely\nDESCRIPTION: Example of implementing a property that stores a list of DateTime values in an Optimizely content model. This allows for collecting multiple date entries from content editors.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual IList<DateTime> ListOfDates { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Core Content Provider Classes and Interfaces\nDESCRIPTION: Key classes and interfaces used in Optimizely CMS content provider implementation including ContentProvider, IContentProviderManager, and related configuration options.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-providers.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nContentProvider\nContentOptions.Providers\nIContentProviderManager\nDefaultContentProvider\n```\n\n----------------------------------------\n\nTITLE: Registering LocationsProperty in C#\nDESCRIPTION: Creates a custom property class that extends PropertyList<Location> and registers it using the PropertyDefinitionTypePlugIn attribute.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/generic-propertylist.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.PlugIn;\nnamespace Site.Models.Pages {\n  [PropertyDefinitionTypePlugIn]\n  public class LocationsProperty : PropertyList<Location> { }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Null Checking Examples in Optimizely\nDESCRIPTION: Various examples of handling null values in properties, including string concatenation and HTML rendering scenarios.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nstring s = currentPage[\"StringProperty\"] as string ?? string.Empty;\n\nDateTime date = (DateTime)(currentPage[\"DateProperty\"] ?? DateTime.Now);\nint i = (int)(currentPage[\"IntegerProperty\"] ?? 0);\n```\n\n----------------------------------------\n\nTITLE: Creating an Article Page Controller in C#\nDESCRIPTION: This snippet demonstrates how to create a controller for the Article page type in Optimizely CMS. It inherits from PageControllerBase and handles the Index action for the ArticlePage model.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing AlloyTemplates.Controllers;\nusing AlloyTemplates.Models.Pages;\nusing EPiServer.Framework.DataAnnotations;\nusing EPiServer.Shell.Security;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace MyOptimizelySite.Controllers {\n  public class ArticlePageController: PageControllerBase<ArticlePage> {\n    public ArticlePageController(UISignInManager uiSignInManager): base(uiSignInManager) {}\n\n    public ActionResult Index(ArticlePage currentPage) {\n      return View(currentPage);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring InlineBlockNameProperties in Startup.cs\nDESCRIPTION: C# code showing how to programmatically configure which properties should be used as labels for inline blocks in the ContentArea editor.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/inline-edit-settings.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<InlineBlockNamePropertiesOptions>(options => {\n  options.Add(\"Contact\", \"Heading\");\n  options.Add(\"Teaser\", \"Heading\");\n});\n```\n\n----------------------------------------\n\nTITLE: Content Loading Implementation\nDESCRIPTION: Implementation details for loading content in content providers, including the LoadContent method and related interfaces.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-providers.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nLoadContent\nIContent\nPageData\n```\n\n----------------------------------------\n\nTITLE: HTML Property Rendering in Razor Views\nDESCRIPTION: Examples of rendering page properties in Razor views with proper HTML encoding.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<h2>@ViewModel.CurrentPage.Name</h2>\n```\n\n----------------------------------------\n\nTITLE: SaveAction Options for Content State Transitions\nDESCRIPTION: Available SaveAction values for IContentRepository.Save method to control content version state transitions, including publishing, scheduling, and approval workflows.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-versions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nSaveAction\n- Default or None\n- Publish\n- Schedule\n- CheckOut\n- CheckIn\n- RequestApproval\n- Reject\n- Save\n```\n\n----------------------------------------\n\nTITLE: Accessing Global and Site Assets Roots in Optimizely\nDESCRIPTION: Code examples showing how to access the global and site-specific folder roots in Optimizely. These properties are used to determine which folders are available to editors for shared blocks across enterprise or single-site scenarios.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nEPiServer.Web.SiteDefinition.Current.GlobalAssetsRoot\n```\n\nLANGUAGE: csharp\nCODE:\n```\nEPiServer.Web.SiteDefinition.Current.SiteAssetsRoot\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Strongly Typed Properties\nDESCRIPTION: Demonstrates different ways to access non-strongly typed properties including direct access and type casting.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic ActionResult Index(StandardPage currentPage) {\n  object propertyValue = currentPage[\"PropertyName\"];\n  // do something else and return view\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties on Read-Only StandardPage\nDESCRIPTION: Demonstrates how to access a property on a read-only StandardPage in Optimizely CMS using PageControllerBase.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StandardPageController: PageControllerBase<StandardPage> {\n  public ActionResult Index(StandardPage currentPage) {\n    Object propertyValue = currentPage[\"PropertyName\"];\n    // do something else and return view\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Content in Specific Culture\nDESCRIPTION: Example of loading content in a specific culture (Swedish) using CultureInfo.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/multilingual-content.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar content = _contentLoader.Get<IContent>(contentLink, CultureInfo.GetCultureInfo(\"sv\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring DAM UI Services in C#\nDESCRIPTION: Shows how to configure the DAM UI services with client credentials for authentication. This setup is required to enable DAM integration.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n  .AddDAMUi(\n    o => o.Enabled = true,\n    o => {\n      o.ClientId = \"YourApplicationClientId\";\n      o.ClientSecret = \"YourApplicationClientSecret\";\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Property Control using PropertyControlClassFactory\nDESCRIPTION: Demonstrates how to map a custom property control implementation to replace the default control for PropertyNumber using PropertyControlClassFactory.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-controls-legacy.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nEPiServer.Core.PropertyControlClassFactory.Instance.RegisterClass(\n  typeof(EPiServer.Core.PropertyNumber),\n  typeof(MyNamespace.MyPropertyDataControl));\n```\n\n----------------------------------------\n\nTITLE: Adding UIHint for Custom Display Template in Optimizely\nDESCRIPTION: Example showing how to add the UIHint attribute to a list property in Optimizely to specify which display template should be used when rendering the list in the frontend.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[UIHint(\"StringsCollection\")]\npublic virtual IList<string> UniqueSellingPoints { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Basic Content Loading in Optimizely\nDESCRIPTION: Basic example of loading content using IContentLoader with default language handling.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/multilingual-content.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar content = _contentLoader.Get<IContent>(contentLink)\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Static File Pre-Processor in C#\nDESCRIPTION: Defines a custom static file pre-processor that adds a Content-Disposition header to PDF responses. This can be used as an alternative to custom endpoints for media handling.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PdfStaticFilePreProcessor: IStaticFilePreProcessor {\n  //The built-in pre processor that handles MediaOptions has order 0, run after that\n  public int Order => 10;\n\n  public void PrepareResponse(StaticFileResponseContext staticFileResponseContext) {\n    if (staticFileResponseContext.Context.Response.ContentType == \"application/pdf\") {\n      staticFileResponseContext.Context.Response.Headers.Add(\"Content-Disposition\", \"attachment\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Approval Process in Optimizely\nDESCRIPTION: Demonstrates how to abort an existing approval process using the approval engine. The operation triggers an aborted event.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-content-approvals.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nApproval approval;\nIApprovalEngine approvalEngine;\n\n await approvalEngine.AbortAsync(approval.ID, \"user\");\n```\n\n----------------------------------------\n\nTITLE: Defining a List of XHtmlString Values in Optimizely\nDESCRIPTION: Example of implementing a property that stores a list of XHtmlString values in an Optimizely content model. This allows for collecting multiple rich text entries from content editors.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual IList<XHtmlString> ListOfXhtml { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: ContentReference Restrictions\nDESCRIPTION: Demonstrates using AllowedTypes attribute with ContentReference and IList<ContentReference> properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/restricting-content-types-in-properties.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[AllowedTypes(typeof (ProductPage))]\npublic virtual ContentReference SomeLink {\n  get;\n  set;\n}\n\n[AllowedTypes(typeof (ProductPage))]\npublic virtual IList<ContentReference> SomeLinks {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: UIDescriptor Registration\nDESCRIPTION: Shows UIDescriptor registration for interface-based content restrictions.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/restricting-content-types-in-properties.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[UIDescriptorRegistration]\npublic class SpecialInterfaceDescriptor : UIDescriptor<ISpecialInterface> { }\n```\n\n----------------------------------------\n\nTITLE: Interface-Based Restrictions Setup\nDESCRIPTION: Demonstrates setting up interface-based content restrictions including interface definition and UIDescriptor implementation.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/restricting-content-types-in-properties.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ninterface ISpecialInterface { } \npublic class SpecialBlock : BlockData, ISpecialInterface {}\n```\n\n----------------------------------------\n\nTITLE: Creating a List of Images with UIHint in Optimizely\nDESCRIPTION: Example showing how to create a property that holds a list of content references with the UIHint.Image attribute to enable image selection in the Optimizely editor.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[UIHint(UIHint.Image)]\npublic virtual IEnumerable<ContentReference> Images { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Specific Types\nDESCRIPTION: Shows how to allow certain types while restricting others using AllowedTypes and RestrictedTypes parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/restricting-content-types-in-properties.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[AllowedTypes(new [] {\n  typeof (BlockData)\n}, new [] {\n  typeof (EditorialBlock)\n})]\npublic virtual ContentArea RelatedContentArea {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Properties with GetPropertyValue in C#\nDESCRIPTION: Demonstrates different methods of accessing page properties using GetPropertyValue with various fallback and type conversion options.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/properties.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nstring mainBodyFallback2 = currentPage.GetPropertyValue(\"MainBody\") ?? string.Empty;\n\nstring pageHeading = currentPage.GetPropertyValue(\"PageHeading\", currentPage.PageName);\n\nXhtmlString xhtml = currentPage.GetPropertyValue<XhtmlString>(\"MainBody\");\n\nXhtmlString xhtmlWithFallback = currentPage.GetPropertyValue<XhtmlString>(\"MainBody\", new XhtmlString());\n\nstring convertedXhtml = currentPage.GetPropertyValue<XhtmlString,string>(\"MainBody\", x => x.ToString());\n\nstring mainBody2 = currentPage.GetPropertyValue<object, string>(\"MainBody\", x => x.ToString());\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Thumbnail Generation in C#\nDESCRIPTION: Shows implementation of automatic thumbnail generation for images using ImageDescriptor attribute with specified dimensions.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/media-types-and-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Base class for content types which should be handled as images by the system.\n/// </summary>\npublic class ImageData: MediaData {\n  /// <summary>\n  /// Gets or sets the generated thumbnail for this media.\n  /// </summary>\n  [ImageDescriptor(Width = 48, Height = 48)]\n  public override Blob Thumbnail {\n    get {\n      return base.Thumbnail;\n    }\n    set {\n      base.Thumbnail = value;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Group Access Levels in C#\nDESCRIPTION: Example of applying access levels to content groups using GroupDefinitions and RequiredAccess attributes.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/grouping-content-types-and-properties.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[GroupDefinitions]\npublic static class GroupNames {\n  [Display(GroupName = \"MyNews\", Order = 1)]\n  public const string News = \"News\";\n  [RequiredAccess(AccessLevel.Publish)]\n  public const string Contact = \"Contact\";\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EPiServer.CMS.WelcomeIntegration.Graph Package with .NET CLI\nDESCRIPTION: Command to install or update the EPiServer.CMS.WelcomeIntegration.Graph package to version 2.0.0 or later using the .NET CLI.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n$ dotnet add package EPiServer.CMS.WelcomeIntegration.Graph\n```\n\n----------------------------------------\n\nTITLE: Validation Attribute Types in Optimizely CMS\nDESCRIPTION: Built-in .NET validation attributes supported by Optimizely CMS for property validation.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/built-in-property-types.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nValidationAttribute\n```\n\n----------------------------------------\n\nTITLE: Loading Master Language Content\nDESCRIPTION: Example of loading content in the master language version using InvariantCulture, useful for language-neutral properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/multilingual-content.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar master = _contentLoader.Get<IContent>(contentLink, CultureInfo.InvariantCulture);\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Integers in Optimizely\nDESCRIPTION: Example of implementing a property that stores a list of integer values in an Optimizely content model. This allows for collecting multiple number entries from content editors.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual IList<int> ListOfIntegers { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Installing EPiServer CMS Welcome Integration Packages\nDESCRIPTION: Commands to install the required EPiServer CMS Welcome Integration UI and Graph packages version 2.0.0 or later.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n$ dotnet add package EPiServer.CMS.WelcomeIntegration.UI\n$ dotnet add package EPiServer.CMS.WelcomeIntegration.Graph\n```\n\n----------------------------------------\n\nTITLE: Defining TeaserBlock Block Type in C#\nDESCRIPTION: Creates a TeaserBlock block type with Heading and Image properties. The block is decorated with ContentType attribute and properties have Display attributes for the editorial interface.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/using-a-block-as-a-property.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.DataAnnotations;\nusing EPiServer.Web;\n\nnamespace MyOptimizelySite.Models.Blocks {\n  [ContentType(DisplayName = \"TeaserBlock\", GUID = \"38d57768-e09e-4da9-90df-54c73c61b270\", Description = \"Heading and image.\")]\n  public class TeaserBlock: BlockData {\n    [CultureSpecific]\n    [Display(\n      Name = \"Heading\",\n      Description = \"Add a heading.\",\n      GroupName = SystemTabNames.Content,\n      Order = 1)]\n    public virtual String Heading {\n      get;\n      set;\n    }\n\n    [Display(\n      Name = \"Image\", Description = \"Add an image (optional)\",\n      GroupName = SystemTabNames.Content,\n      Order = 2)]\n    public virtual ContentReference Image {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Control Adapter for PropertyLongString\nDESCRIPTION: Shows implementation of a custom control adapter that overrides the default behavior for PropertyLongStringControl. The adapter creates a label control to display the property's string value.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-controls-legacy.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PropertyLongStringControlAdapter: PropertyDataControlAdapter {\n  public override void CreateDefaultControls() {\n    Label l = new Label();\n    l.Text = PropertyData.ToString();\n    Control.Controls.Add(l);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Block Type in C#\nDESCRIPTION: Creates a ContentType block definition for contacts that can be used in lists. The block is marked as not available in edit mode.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/generic-propertylist.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType(AvailableInEditMode = false, GUID = \"38d57768-e09e-4da9-90df-54c73c61b270\")]  \npublic class ContactBlock : BlockData {  \n  //block properties  \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ContentModelOptions for Disabling Model Sync Commit\nDESCRIPTION: Configuration option to disable automatic commit phase during synchronization, allowing for more granular synchronization control through the admin interface.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/synchronization.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nContentModelOptions.EnableModelSyncCommit\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Approvals in Optimizely\nDESCRIPTION: Example of retrieving specific approvals using the IApprovalRepository's GetAsync method with ContentReference.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-content-approvals.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Approvals.ContentApprovals;\n\nContentReference contentLink;\nIApprovalRepository approvalRepository;\n\nvar approval = await approvalRepository.GetAsync(contentLink);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Static File Pre-Processor for PDFs in C#\nDESCRIPTION: This snippet demonstrates how to create a custom IStaticFilePreProcessor implementation that adds a Content-Disposition header for PDF files. It sets the Order property to run after the built-in pre-processor and checks the ContentType before adding the header.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/media-types-and-templates.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PdfStaticFilePreProcessor: IStaticFilePreProcessor {\n  //The built-in pre processor that handles MediaOptions has order 0, run after that\n  public int Order => 10;\n\n  public void PrepareResponse(StaticFileResponseContext staticFileResponseContext) {\n    if (staticFileResponseContext.Context.Response.ContentType == \"application/pdf\") {\n      staticFileResponseContext.Context.Response.Headers.Add(\"Content-Disposition\", \"attachment\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Location Model Class in C#\nDESCRIPTION: Defines a Location model class with virtual properties for address details. Uses DataAnnotations for display names and includes properties for address lines, city, and country.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/generic-propertylist.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Site.Models.Pages {\n  public class Location {\n    [Display(Name = \"Address line 1\")]\n    public virtual string AddressLine1 {\n      get;\n      set;\n    }\n\n    [Display(Name = \"Address line 2\")]\n    public virtual string AddressLine2 {\n      get;\n      set;\n    }\n\n    public virtual string City {\n      get;\n      set;\n    }\n\n    public virtual string Country {\n      get;\n      set;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SaveAction Option Flags for Content Management\nDESCRIPTION: Additional flags that can be combined with SaveAction to control version creation, validation, and publishing behavior during save operations.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-versions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSaveAction\n- ForceNewVersion\n- ForceCurrentVersion\n- SkipValidation\n- SkipSetCommonDraft\n- DelayedPublish\n```\n\n----------------------------------------\n\nTITLE: Implementing PageListBlock View Component in C#\nDESCRIPTION: Defines a view component for rendering a list of pages using the PageListBlock content type. It loads child pages based on specified criteria and returns a view with the model.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace AlloyTemplates.Components {\n  public class PageListBlockViewComponent: BlockComponent<PageListBlock> {\n    private readonly IContentLoader _contentLoader;\n    public PageListBlockViewComponent(IContentLoader contentLoader) {\n      _contentLoader = contentLoader;\n    }\n\n    protected override IViewComponentResult InvokeComponent(PageListBlock currentBlock) {\n      var model = new PageListModel(currentBlock) {\n        Pages = _contentLoader.GetChildren<PageData>(currentBlock.Root, new LoaderOptions(), 0, currentBlock.Count)\n      };\n\n      return View(model);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SaveAction.SkipValidation with Content Repository\nDESCRIPTION: This code shows how to bypass validation when saving content by using the SkipValidation flag. This is useful when validation should be skipped for certain operations.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/validating-object-instances.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncontentRepository.Save(page, SaveAction.Publish | SaveAction.SkipValidation);\n```\n\n----------------------------------------\n\nTITLE: Required Content Provider Implementation Classes\nDESCRIPTION: Core classes required for implementing custom content providers, including the base ContentProvider class from EPiServer assembly.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-providers.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nContentProvider\nEPiServer.dll\n```\n\n----------------------------------------\n\nTITLE: Defining a Block Type in Optimizely CMS\nDESCRIPTION: Example of how to define a TeaserBlock type in Optimizely CMS using C# with a ContentType attribute and a string property.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/inline-edit-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[ContentType(Guid = \"67F617A4-2175-4360-975E-75EDF2B924A7\")]\npublic class TeaserBlock: BlockData {\n  public virtual string Foo {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UI Hints and Content References in Optimizely CMS\nDESCRIPTION: Specialized content reference types with UI hints for selecting different types of media and content in the CMS interface.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/built-in-property-types.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nPageReference\nContentReference\nContentReference\nUIHint.MediaFile\nContentReference\nUIHint.Image\nIContentVideo\nContentReference\nUIHint.Video\nContentReference\nUrl\nUIHint.MediaFile\nUIHint.Image\nUIHint.Video\nContentArea\nUrl\nAllowedTypesAttribute\nLinkItemCollection\nAllowedTypesAttribute\nLinkItem\nAllowedTypesAttribute\nContentReferenceList\n```\n\n----------------------------------------\n\nTITLE: CMP Graph Integration Configuration\nDESCRIPTION: Configuration for CMP and Graph integration with separate SingleKey settings in appsettings.json or Startup.cs.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"EPiServer\": {  \n  \"Cms\": {  \n    \"CMPGraph\": {  \n       \"SingleKey\": \"SINGLE_KEY\"  \n    }  \n  }  \n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<CMPGraphOptions>(options => {  \n  options.SingleKey = \"SINGLE_KEY\";  \n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Static File Pre-Processor in Optimizely CMS\nDESCRIPTION: This snippet shows how to register the custom PdfStaticFilePreProcessor using MediaOptions in the CMS configuration. This step is necessary to integrate the custom pre-processor into the media handling pipeline.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/media-types-and-templates.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<MediaOptions>(o => o.AddPreProcessor<PdfStaticFilePreProcessor>());\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Blocks in ContentArea via appsettings.json\nDESCRIPTION: JSON configuration showing how to enable inline blocks creation capability for ContentArea properties through the application settings file.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/inline-edit-settings.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EPiServer\": {\n    \"CmsUI\": {\n      \"UI\": {\n        \"InlineBlocksInContentAreaEnabled\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering StandardPage with TeaserBlock in Razor View\nDESCRIPTION: Razor view template for StandardPage that renders both the MainBody and Teaser properties. Uses the PropertyFor helper method to automatically render the properties based on their respective view templates.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/using-a-block-as-a-property.md#2025-04-22_snippet_2\n\nLANGUAGE: razor\nCODE:\n```\n@using EPiServer.Core\n@using EPiServer.Web.Mvc.Html\n@model MyOptimizelySite.Models.Pages.StandardPage\n  <div>\n    @Html.PropertyFor(m => m.MainBody)\n    @Html.PropertyFor(m => m.Teaser)\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Hiding Multiple Groups in Block Content Type\nDESCRIPTION: Shows how to hide multiple groups (Advanced and Contact) in an AdvancedBlock content type using the HiddenGroups parameter in InlineBlockEditSettings.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/inline-edit-settings.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[SiteContentType(GUID = \"9E7F6DF5-A963-40C4-8683-211C4FA48AE1\")]\n[SiteImageUrl]\n[InlineBlockEditSettings(HiddenGroups = \"Advanced, Contact\")]\npublic class AdvancedBlock: SiteBlockData {\n  [Display(Order = 1, GroupName = SystemTabNames.Content)]\n  public virtual string Text1 {\n    get;\n    set;\n  }\n\n  [Display(Order = 2, GroupName = SystemTabNames.Content)]\n  public virtual string Text2 {\n    get;\n    set;\n  }\n\n  [Display(Order = 1, GroupName = Global.GroupNames.Products)]\n  public virtual string Text3 {\n    get;\n    set;\n  }\n\n  [Display(Order = 2, GroupName = Global.GroupNames.Contact)]\n  public virtual string Text4 {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: URL-based Content References for CMS 7\nDESCRIPTION: Shows how to implement URL-based references for media files and images in CMS 7. This approach is supported but ContentReference is recommended for better performance.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/linking-to-other-content.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[UIHint(UIHint.MediaFile)]\npublic virtual Url FileAsUrl {\n  get;\n  set;\n}\n\n[UIHint(UIHint.Image)]\npublic virtual Url ImageAsUrl {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Class for Multiple Block Types\nDESCRIPTION: Demonstrates how to configure settings for multiple block content types by implementing them in a base class, showing the Name property for all inheriting blocks.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/inline-edit-settings.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[InlineBlockEditSettings(ShowNameProperty = true)]\npublic abstract class SiteBlockData: EPiServer.Core.BlockData {}\n\n[SiteContentType(GUID = \"9E7F6DF5-A963-40C4-8683-211C4FA48AE1\")]\n[SiteImageUrl]\npublic class AdvancedBlock: SiteBlockData {\n  [Display(Order = 1, GroupName = SystemTabNames.Content)]\n  public virtual string Text1 {\n    get;\n    set;\n  }\n\n  [Display(Order = 2, GroupName = SystemTabNames.Content)]\n  public virtual string Text2 {\n    get;\n    set;\n  }\n\n  [Display(Order = 1, GroupName = Global.GroupNames.Products)]\n  public virtual string Text3 {\n    get;\n    set;\n  }\n\n  [Display(Order = 2, GroupName = Global.GroupNames.Contact)]\n  public virtual string Text4 {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying PropertyEditRestriction Attribute to Content Model Properties\nDESCRIPTION: This example shows how to apply the PropertyEditRestriction attribute to restrict editing of a property to users in specific roles. The example restricts the MainBody property to only be editable by users in the \"administrators2\" role.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/writing-custom-attributes.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[PropertyEditRestriction(new string[] {\n  \"administrators2\"\n})]\npublic virtual XhtmlString MainBody {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Using DAM Asset Helpers in Razor View\nDESCRIPTION: Demonstrates how to use both HtmlHelper and TagHelper approaches for rendering DAM assets in a Razor view with metadata.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_5\n\nLANGUAGE: cshtml\nCODE:\n```\n@using EPiServer.Cms.WelcomeIntegration.UI.Helpers;\n@model PageViewModel<StandardPage>\n  \n  Using HtmlHelper\n  @await Html.RenderTagWithMetadata(x => x.CurrentPage.WelcomePageImage)\n                                    \n  Using TagHelper\n  <dam-asset content-reference=\"@Model.CurrentPage.WelcomePageImage\"/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Built-in Group Sort Order in C#\nDESCRIPTION: Demonstrates how to override the default sort order of built-in system groups.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/grouping-content-types-and-properties.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[GroupDefinitions]\npublic static class GroupNames {\n  [Display(Order = 1000)]\n  public const string Content = SystemTabNames.Content;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Name Property in Optimizely CMS\nDESCRIPTION: Sets the PageName property of the newly created page. This property determines the display name of the page in the CMS.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/creating-a-page-programmatically.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nmyPage.PageName = \"My new page\";\n```\n\n----------------------------------------\n\nTITLE: Configuring DAMUi Settings in application.json\nDESCRIPTION: JSON configuration for customizing the Optimizely DAM integration in the EPiServer\\Cms section of application.json. Includes settings for icon class, available types, store name, endpoint, and path to the DAM library picker.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{  \n\"DAMUi\" : {  \n \"Enabled\"  : true,  \n \"Settings\" : {  \n   \"Welcome\" : {  \n     \"IconClass\"      : \"dijitNoIcon\",  \n     \"AvailableTypes\" : \"episerver.core.imagedata\",  \n     \"StoreName\"      : \"episervercmsdamcontentcreation\",  \n     \"Endpoint\"       : \"https://cmp.optimizely.com\",  \n     \"Path\"           : \"/cloud/library-picker\"  \n   }  \n }  \n}  \n}\n```\n\n----------------------------------------\n\nTITLE: Searching All Custom Content Providers\nDESCRIPTION: Example showing how to search across all custom content providers using a wildcard (*) value in the PropertyCriteria.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/configuring-content-providers.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nPropertyCriteriaCollection crits = new PropertyCriteriaCollection();\nPropertyCriteria crit = new PropertyCriteria();\ncrit.Name = \"EPI:MultipleSearch\";\ncrit.Value = \"*\";\ncrits.Add(crit);\nServiceLocator.Current.GetInstance<IPageCriteriaQueryService>().FindPagesWithCriteria(customPageRef, crits);\n```\n\n----------------------------------------\n\nTITLE: Enabling Name Property for Editorial Block in C#\nDESCRIPTION: Shows how to enable the Name property for a specific EditorialBlock content type using the InlineBlockEditSettings attribute with ShowNameProperty set to true.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/inline-edit-settings.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[SiteContentType(GUID = \"67F617A4-2175-4360-975E-75EDF2B924A7\",\n  GroupName = SystemTabNames.Content)]\n[SiteImageUrl]\n[InlineBlockEditSettings(ShowNameProperty = true)]\npublic class EditorialBlock: SiteBlockData {\n  [Display(GroupName = SystemTabNames.Content)]\n  [CultureSpecific]\n  public virtual XhtmlString MainBody {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ImageUrl Attribute Properties\nDESCRIPTION: Properties for the ImageUrl attribute used to set icons for content types in the user interface.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/attributes.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nImageUrl\nPath\n```\n\n----------------------------------------\n\nTITLE: Creating a Display Template for String Collections in Optimizely\nDESCRIPTION: Example of a Razor view template that renders an IEnumerable<string> as an unordered list. This template would be placed in the ~/Views/Shared/DisplayTemplates folder with the name StringsCollection.cshtml.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n@model IEnumerable<string>\n  @if(Model != null && Model.Any())\n    {\n      <ul>\n        @foreach(var stringValue in Model) {\n          <li>@stringValue</li>\n        }\n      </ul>\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Property Control with PropertyControlBase\nDESCRIPTION: Demonstrates how to create a custom property control that renders an alternative to PageReference using the Testing tag. This example shows a basic implementation inheriting from PropertyControlBase<PageReference>.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-controls-legacy.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[TemplateDescriptor(TagString = \"Testing\")]\npublic partial class PropertyControlBaseSample: PropertyControlBase<PageReference> {\n  protected void Page_Load(object sender, EventArgs e) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Editor Descriptor in Optimizely\nDESCRIPTION: Example of creating a custom editor descriptor for the GeoCoordinate type in Optimizely. This assigns a custom client-side editor (GoogleMapsPicker) for editing this type in the CMS.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[EditorDescriptorRegistration(TargetType = typeof (GeoCoordinate))]\npublic class GeoCoordinateEditorDescriptor: EditorDescriptor {\n  public override void ModifyMetadata(ExtendedMetadata metadata, IEnumerable<Attribute> attributes) {\n    ClientEditingClass = \"alloy/editors/GoogleMapsPicker\";\n\n    base.ModifyMetadata(metadata, attributes);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Approval Definitions in Optimizely CMS\nDESCRIPTION: This snippet demonstrates different methods for retrieving approval definitions: by definition ID, by version ID, by ContentReference, and by resolving a ContentReference (which also indicates if the definition is inherited from an ancestor).\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/approval-definitions.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer.Approvals.ContentApprovals;\n\nContentReference contentLink;\nApprovalDefinition definition;\nApproval approval;\nIApprovalDefinitionRepository definitionRepository;\nIApprovalDefinitionVersionRepository definitionVersionRepository;\n\n// Gets the latest version of a definition using a definition id.\nvar definition1 = await definitionRepository.GetAsync(definition.ID);\n\n// Gets a specific version of a definition using a version id.\nvar definition2 = await definitionVersionRepository.GetAsync(approval.VersionID);\n\n// Gets the latest version of a definition using a ContentReference. \nvar definition3 = await definitionRepository.GetAsync(contentLink);\n\n// Gets the latest version of a definition by resolving a ContentReference.  \nvar definitionResolveResult = await definitionRepository.ResolveAsync(contentLink);\n// The Resolve-method returns a result with a definition and a flag specifying if the definition was found on an ancestor\nvar definition4 = definitionResolveResult.Definition as ContentApprovalDefinition;\nvar isInherited = definitionResolveResult.IsInherited;\n```\n\n----------------------------------------\n\nTITLE: Implementing a List of Custom Types in Optimizely\nDESCRIPTION: Example showing how to define a property that stores a list of custom types (in this case GeoCoordinate) in an Optimizely content model.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual IList<GeoCoordinate> Contacts { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Property List with PropertyFor Helper in Optimizely\nDESCRIPTION: Example of how to render a property list in an Optimizely template using the PropertyFor helper method. This code would be placed in a Razor view.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n@Html.PropertyFor(x => x.CurrentPage.UniqueSellingPoints)\n```\n\n----------------------------------------\n\nTITLE: Registering PDF Static File Pre-Processor in C#\nDESCRIPTION: Shows how to register the custom PDF static file pre-processor using MediaOptions in the service configuration.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<MediaOptions>(o => o.AddPreProcessor<PdfStaticFilePreProcessor>());\n```\n\n----------------------------------------\n\nTITLE: Limiting List Items with ListItems Attribute in Optimizely\nDESCRIPTION: Example showing how to use the ListItems attribute to limit the maximum number of items allowed in an Optimizely property list to 5 items.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/property-value-list.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[ListItems(5)]\npublic virtual IList<int> Max5Items { \n  get; \n  set; \n}\n```\n\n----------------------------------------\n\nTITLE: Alternative AllowedTypes Syntax\nDESCRIPTION: Shows alternative syntax for AllowedTypes attribute using named parameter.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/restricting-content-types-in-properties.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[AllowedTypes(AllowedTypes = new [] {\n  typeof (PageData)\n})]\npublic virtual ContentArea RelatedContentArea {\n  get;\n  set;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Block Properties in C#\nDESCRIPTION: Demonstrates how to display Name, Categories properties and Settings group for an AdvancedBlock content type using InlineBlockEditSettings with multiple configuration options.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/inline-edit-settings.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[SiteContentType(GUID = \"9E7F6DF5-A963-40C4-8683-211C4FA48AE1\")]\n[SiteImageUrl]\n[InlineBlockEditSettings(ShowNameProperty = true, ShowCategoryProperty = true, HiddenGroups = \"\")]\npublic class AdvancedBlock: SiteBlockData {\n  [Display(Order = 1, GroupName = SystemTabNames.Content)]\n  public virtual string Text1 {\n    get;\n    set;\n  }\n\n  [Display(Order = 2, GroupName = SystemTabNames.Content)]\n  public virtual string Text2 {\n    get;\n    set;\n  }\n\n  [Display(Order = 1, GroupName = Global.GroupNames.Products)]\n  public virtual string Text3 {\n    get;\n    set;\n  }\n\n  [Display(Order = 2, GroupName = Global.GroupNames.Products)]\n  public virtual string Text4 {\n    get;\n    set;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Size Limit in JSON\nDESCRIPTION: Configuration settings in appSettings.json to modify the maximum allowed file upload size in bytes.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/media-types-and-templates.md#2025-04-22_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"EPiServer\": {\n  \"CmsUI\": {\n    \"Upload\": {\n      \"FileSizeLimit\": 104857600\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom PDF Endpoint Template in C#\nDESCRIPTION: Defines a custom endpoint template for handling PDF files. It adds a Content-Disposition header to the response and applies necessary authorization attributes.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/content-templates.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TemplateDescriptor(Inherited = true, TemplateTypeCategory = TemplateTypeCategories.HttpHandler)]\npublic class PdfEndpoint: Endpoint, IRenderTemplate<PdfFile> {\n  private readonly static ContentActionDescriptor _mediaContentActionDescriptor = new ContentActionDescriptor {\n    Inherited = true, ModelType = typeof (PdfFile)\n  };\n  private static readonly AuthorizeAttribute _authorizeAttribute = new AuthorizeAttribute(CmsPolicyNames.Read);\n  private static readonly AuthorizeAttribute _previewAttribute = new AuthorizeAttribute(CmsPolicyNames.Preview);\n\n  public PdfEndpoint(IBlobHttpHandler blobHttpHandler): base(context => ProcessRequest(blobHttpHandler, context),\n    new EndpointMetadataCollection(_mediaContentActionDescriptor, _authorizeAttribute, _previewAttribute), nameof(PdfEndpoint)) {}\n\n  private static Task ProcessRequest(IBlobHttpHandler blobHttpHandler, HttpContext context) {\n    context.Response.Headers.Add(\"Content-Disposition\", \"attachment\");\n    return blobHttpHandler.Invoke(context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring InlineBlockNameProperties in appsettings.json\nDESCRIPTION: JSON configuration that specifies which property to use as a label for inline block types in ContentArea views, helping editors identify blocks in the All Properties view.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/inline-edit-settings.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EPiServer\": {\n    \"CmsUI\": {\n      \"InlineBlockNameProperties\": {\n        \"Contact\": \"Heading\",\n        \"Teaser\": \"Heading\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Approval Decisions in Optimizely\nDESCRIPTION: Shows various ways to make approval decisions using the approval engine, including step approval, rejection with comments, and force approval options.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/working-with-content-approvals.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nApproval approval;\nIApprovalEngine approvalEngine;\n\n// Approve a step if user is part of the current definition step\nawait approvalEngine.ApproveAsync(approval.ID, \"user\", 1, ApprovalDecisionScope.Step);\n\n// Reject a step if user is part of the current definition step, adding a comment\nawait approvalEngine.RejectAsync(approval.ID, \"user\", 1, ApprovalDecisionScope.Step, \"This is why I did it\");\n\n// Force approve a step whether the user is part of the current definition step or not\nawait approvalEngine.ApproveAsync(approval.ID, \"user\", 1, ApprovalDecisionScope.ForceStep);\n\n// Force approve the whole approval \nawait approvalEngine.ApproveAsync(approval.ID, \"user\", 1, ApprovalDecisionScope.Force);\n```\n\n----------------------------------------\n\nTITLE: Installing EPiServer.CMS.WelcomeIntegration.UI Package with .NET CLI\nDESCRIPTION: Command to install or update the EPiServer.CMS.WelcomeIntegration.UI package to version 2.0.0 or later using the .NET CLI.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/setup-the-optimizely-dam-asset-picker-in-cms.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n$ dotnet add package EPiServer.CMS.WelcomeIntegration.UI\n```\n\n----------------------------------------\n\nTITLE: Custom Editor Descriptor Implementation\nDESCRIPTION: Demonstrates how to create a custom editor descriptor by inheriting from ContentReferenceEditorDescriptor<T> to customize content selection roots and implement specialized content reference properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizely/blob/main/docs/linking-to-other-content.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StartPage: SitePageData {\n  [UIHint(\"teaserblock\")]\n  public virtual ContentReference TeaserBlockReference {\n    get;\n    set;\n  }\n}\n\n[EditorDescriptorRegistration(TargetType = typeof (ContentReference), UIHint = \"teaserblock\")]\npublic class BlockReferenceEditorDescriptor: ContentReferenceEditorDescriptor<TeaserBlock> {\n  public override IEnumerable<ContentReference> Roots {\n    get {\n      return new ContentReference[] {\n        new ContentReference(52)\n      };\n    }\n  }\n}\n```"
  }
]