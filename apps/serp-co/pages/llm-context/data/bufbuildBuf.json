[
  {
    "owner": "bufbuild",
    "repo": "buf",
    "content": "TITLE: Defining Storage Client Interface in Go\nDESCRIPTION: Defines the StorageClient interface which abstracts storage operations. The interface includes methods for Put, Get, Delete, Delete-All, Stat, and Walk operations with appropriate parameters for handling various storage backends.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/overlap/a/1.txt#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// StorageClient is an abstraction for storage.\ntype StorageClient interface {\n\t// Put puts the data at the key.\n\t//\n\t// If a context is cancelled during a put, it is implementation-defined whether\n\t// or not the data exists at the key.\n\tPut(ctx context.Context, key string, data []byte, options ...PutOption) error\n\t// Get gets the data at the key.\n\t//\n\t// Returns storage.IsNotExist error if the key does not exist.\n\tGet(ctx context.Context, key string, options ...GetOption) (_ []byte, retErr error)\n\t// Delete deletes the key.\n\t//\n\t// Returns storage.IsNotExist error if the key does not exist.\n\tDelete(ctx context.Context, key string, options ...DeleteOption) error\n\t// DeleteAll deletes the key prefix.\n\t//\n\t// This includes just objects \"within the directory\" if the storage client implementation\n\t// has the concept of directories. For example, if this was the local filesystem, and we used\n\t// the key prefix \"a/b\", then this would delete all files under this directory, but not the directory\n\t// itself. If there were files under \"a/bc\", these would not be deleted.\n\t//\n\t// If the key prefix does not exist, this should be a noop and return nil.\n\tDeleteAll(ctx context.Context, keyPrefix string, options ...DeleteAllOption) error\n\t// Stat returns the info for the key if it exists, otherwise returns a storage.IsNotExist error.\n\tStat(ctx context.Context, key string, options ...StatOption) (*ObjectInfo, error)\n\t// Walk walks the key prefix.\n\t//\n\t// This will walk objects that start with the key prefix. For example, if we have objects:\n\t//   a/1\n\t//   a/2\n\t//   a/3\n\t//   a/b/1\n\t//   a/b/2\n\t//   a/b/3\n\t//   a/bc/1\n\t//\n\t// And we walk \"a/\", this will visit the objects a/1, a/2, a/3, a/b/1, a/b/2, a/b/3, a/bc/1.\n\t// If we walk \"a/b\", this will visit the objects a/b/1, a/b/2, a/b/3, a/bc/1.\n\t//\n\t// Note keys should include the prefix.\n\t//\n\t// If a context is cancelled during a walk, the return error is the context error.\n\t// It is implementation-defined if any visitFunc functions are called after context cancellation.\n\tWalk(ctx context.Context, keyPrefix string, visitFunc func(*ObjectInfo) error, options ...WalkOption) error\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Buf via Homebrew\nDESCRIPTION: Command to install the Buf CLI tool using Homebrew package manager on macOS or Linux. This installs the main buf binary along with protoc plugins and shell completion scripts.\nSOURCE: https://github.com/bufbuild/buf/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install bufbuild/buf/buf\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Schema Validation Rules in Go\nDESCRIPTION: This snippet defines a struct 'rule' that represents validation rules for Protocol Buffer fields. It includes various constraints such as required fields, field types, and value ranges.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/overlap/b/1.txt#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype rule struct {\n\trequired   bool\n\trepeated   bool\n\tmap        bool\n\toneofIndex int32\n\tminVal     *int64\n\tmaxVal     *int64\n\tminLen     *int64\n\tmaxLen     *int64\n\tclassifier string\n\tregex      *regexp.Regexp\n\tclass      reflect.Type\n\tvalidator  validator\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protoc Path in buf.gen.yaml\nDESCRIPTION: Demonstrates how to specify the protoc path and additional arguments in the buf.gen.yaml configuration file. This allows for more flexible configuration of protoc when used with buf generate.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"protoc_path: [\\\"path/to/protoc\\\", \\\"--extra-arg1\\\", \\\"--extra-arg2\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Using Editions Syntax in Protobuf\nDESCRIPTION: Illustrates the usage of Protobuf Editions syntax, which is now supported by buf generate. This allows for more advanced features and compatibility with newer Protobuf versions.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n\"edition = 2023;\n\nmessage Example {\n  string name = 1 [(pb.field).json_name = \\\"customName\\\"];\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Provider Enumeration in Go\nDESCRIPTION: Enumerates the available storage providers (Local, S3, Azure, GCS) and implements the String method for the Provider type. This provides a way to identify and represent storage provider types in configuration.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/overlap/a/1.txt#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Provider is a storage provider.\ntype Provider int\n\nconst (\n\t// ProviderLocal is the local provider.\n\tProviderLocal Provider = iota + 1\n\t// ProviderS3 is the s3 provider.\n\tProviderS3\n\t// ProviderAzure is the azure provider.\n\tProviderAzure\n\t// ProviderGCS is the gcs provider.\n\tProviderGCS\n)\n\n// String implements fmt.Stringer.\nfunc (p Provider) String() string {\n\tswitch p {\n\tcase ProviderLocal:\n\t\treturn \"local\"\n\tcase ProviderS3:\n\t\treturn \"s3\"\n\tcase ProviderAzure:\n\t\treturn \"azure\"\n\tcase ProviderGCS:\n\t\treturn \"gcs\"\n\tdefault:\n\t\treturn strconv.Itoa(int(p))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StorageClient from Config in Go\nDESCRIPTION: Implements a function to create StorageClient instances from configuration. This factory function analyzes the provided config and creates appropriate client implementations based on the storage provider type specified in the config.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/overlap/a/1.txt#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// NewStorageClient creates a new storage client from the given config.\nfunc NewStorageClient(\n\tstorageConfig *Config,\n\toptions ...NewStorageClientOption,\n) (StorageClient, error) {\n\tnewStorageClientOptions := newNewStorageClientOptions()\n\tfor _, option := range options {\n\t\toption(newStorageClientOptions)\n\t}\n\tvar storageClient StorageClient\n\tvar err error\n\tswitch storageConfig.Provider() {\n\tcase ProviderLocal:\n\t\tstorageClient, err = NewLocalStorageClient(\n\t\t\tstorageConfig.Local(),\n\t\t\tnewStorageClientOptions.localOptions...,\n\t\t)\n\tcase ProviderS3:\n\t\tstorageClient, err = NewS3StorageClient(\n\t\t\tstorageConfig.S3(),\n\t\t\tnewStorageClientOptions.s3Options...,\n\t\t)\n\tcase ProviderAzure:\n\t\tstorageClient, err = NewAzureStorageClient(\n\t\t\tstorageConfig.Azure(),\n\t\t\tnewStorageClientOptions.azureOptions...,\n\t\t)\n\tcase ProviderGCS:\n\t\tstorageClient, err = NewGCSStorageClient(\n\t\t\tstorageConfig.GCS(),\n\t\t\tnewStorageClientOptions.gcsOptions...,\n\t\t)\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unknown storage provider: %v\", storageConfig.Provider())\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn storageClient, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol Buffer Schema Validation Function in Go\nDESCRIPTION: This function 'validate' performs validation checks on Protocol Buffer messages based on defined rules. It handles different field types and applies corresponding validation logic.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/overlap/b/1.txt#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *rule) validate(v interface{}, fqn string) error {\n\tswitch v := v.(type) {\n\tcase nil:\n\t\tif r.required {\n\t\t\treturn fmt.Errorf(\"%s is required\", fqn)\n\t\t}\n\t\treturn nil\n\tcase *dynamicpb.Message:\n\t\treturn r.validateMessage(v, fqn)\n\tcase []interface{}:\n\t\treturn r.validateRepeated(v, fqn)\n\tcase map[interface{}]interface{}:\n\t\treturn r.validateMap(v, fqn)\n\tdefault:\n\t\treturn r.validateScalar(v, fqn)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Scalar Fields in Protocol Buffer Schema using Go\nDESCRIPTION: This function 'validateScalar' checks scalar field values against defined rules such as minimum/maximum values, length constraints, and regular expressions.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/overlap/b/1.txt#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *rule) validateScalar(v interface{}, fqn string) error {\n\tif r.minVal != nil {\n\t\tif i, ok := v.(int64); !ok || i < *r.minVal {\n\t\t\treturn fmt.Errorf(\"%s must be >= %d\", fqn, *r.minVal)\n\t\t}\n\t}\n\tif r.maxVal != nil {\n\t\tif i, ok := v.(int64); !ok || i > *r.maxVal {\n\t\t\treturn fmt.Errorf(\"%s must be <= %d\", fqn, *r.maxVal)\n\t\t}\n\t}\n\tif r.regex != nil {\n\t\tif s, ok := v.(string); !ok || !r.regex.MatchString(s) {\n\t\t\treturn fmt.Errorf(\"%s must match regex %q\", fqn, r.regex)\n\t\t}\n\t}\n\tif r.minLen != nil || r.maxLen != nil {\n\t\tvar l int64\n\t\tswitch v := v.(type) {\n\t\tcase string:\n\t\t\tl = int64(len(v))\n\t\tcase []byte:\n\t\t\tl = int64(len(v))\n\t\tdefault:\n\t\t\treturn fmt.Errorf(\"%s has unexpected type %T\", fqn, v)\n\t\t}\n\t\tif r.minLen != nil && l < *r.minLen {\n\t\t\treturn fmt.Errorf(\"%s must be at least %d characters long\", fqn, *r.minLen)\n\t\t}\n\t\tif r.maxLen != nil && l > *r.maxLen {\n\t\t\treturn fmt.Errorf(\"%s must be at most %d characters long\", fqn, *r.maxLen)\n\t\t}\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Protocol Buffer Package\nDESCRIPTION: Defines a Protocol Buffer schema file using proto3 syntax and establishes the package namespace as a.b\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/bufpkg/bufcheck/testdata/lint/file_lower_snake_case/aBc.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage a.b;\n```\n\n----------------------------------------\n\nTITLE: Using buf build with various inputs\nDESCRIPTION: Examples of using the 'buf build' command with different input types, including local directories, Git repositories, and specific subdirectories.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# compile the files in the current directory\nbuf build\n# equivalent to the default no-arg invocation\nbuf build .\n# build the repository at https://github.com/foo/bar.git\nbuf build https://github.com/foo/bar.git\n# lint the files in the proto directory\nbuf check lint proto\n# check the files in the current directory against the files on the master branch for breaking changes\nbuf check breaking --against .git#branch=master\n# check the files in the proto directory against the files in the proto directory on the master branch\nbuf check breaking proto --against .git#branch=master,subdir=proto\n```\n\n----------------------------------------\n\nTITLE: Regenerating descriptor.plain.binpb file using Buf convert\nDESCRIPTION: This command converts a JSON input to a binary protocol buffer file of type buf.Foo. It uses the 'buf convert' command with specific input and output parameters.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/convert/testdata/convert/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho \"{\\\"one\\\":\\\"55\\\"}\" | \\\nbuf convert private/buf/cmd/buf/testdata/success \\\n    --type buf.Foo \\\n    --from -#format=json \\\n    --to private/buf/cmd/buf/command/convert/testdata/convert/descriptor.plain.binpb\n```\n\n----------------------------------------\n\nTITLE: Regenerating duration files in multiple formats using Buf convert\nDESCRIPTION: This loop generates duration files in bin, binpb, json, and txtpb formats. It uses 'buf convert' command to convert a JSON input of type google.protobuf.Duration to different output formats.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/convert/testdata/convert/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfor EXT in bin binpb json txtpb\ndo\n    echo \"\\\"3600s\\\"\" | \\\n    buf convert \\\n        --type google.protobuf.Duration \\\n        --from -#format=json \\\n        --to private/buf/cmd/buf/command/convert/testdata/convert/bin_json/duration.$EXT\ndone\n```\n\n----------------------------------------\n\nTITLE: Regenerating image files in multiple formats using Buf build\nDESCRIPTION: This loop generates image files in bin, binpb, json, and txtpb formats. It uses the 'buf build' command to process a .proto file and output in different formats.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/convert/testdata/convert/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfor EXT in bin binpb json txtpb\ndo\n    buf build private/buf/cmd/buf/command/convert/testdata/convert/bin_json/buf.proto \\\n        --output private/buf/cmd/buf/command/convert/testdata/convert/bin_json/image.$EXT\ndone\n```\n\n----------------------------------------\n\nTITLE: Regenerating payload files in multiple formats using Buf convert\nDESCRIPTION: This loop generates payload files in bin, binpb, json, and txtpb formats. It uses 'buf convert' command to convert a JSON input of type buf.Foo to different output formats.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/convert/testdata/convert/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfor EXT in bin binpb json txtpb\ndo\n    echo \"{\\\"one\\\":\\\"55\\\"}\" | \\\n    buf convert private/buf/cmd/buf/command/convert/testdata/convert/bin_json \\\n        --type buf.Foo \\\n        --from -#format=json \\\n        --to private/buf/cmd/buf/command/convert/testdata/convert/bin_json/payload.$EXT\ndone\n```\n\n----------------------------------------\n\nTITLE: Defining StorageClient Options in Go\nDESCRIPTION: Defines option types for StorageClient operations like Put, Get, Delete, etc. These options follow the functional options pattern to provide flexibility when calling the StorageClient methods.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/overlap/a/1.txt#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// PutOption is an option for Put operations.\ntype PutOption func(*putOptions)\n\n// GetOption is an option for Get operations.\ntype GetOption func(*getOptions)\n\n// DeleteOption is an option for Delete operations.\ntype DeleteOption func(*deleteOptions)\n\n// DeleteAllOption is an option for DeleteAll operations.\ntype DeleteAllOption func(*deleteAllOptions)\n\n// StatOption is an option for Stat operations.\ntype StatOption func(*statOptions)\n\n// WalkOption is an option for Walk operations.\ntype WalkOption func(*walkOptions)\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage Client Factory Options in Go\nDESCRIPTION: Defines option structs and functions for creating new storage clients. This pattern provides a flexible way to configure storage client instances for different providers like local, S3, Azure, and GCS.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/overlap/a/1.txt#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// NewStorageClientOption is an option for a new StorageClient.\ntype NewStorageClientOption func(*newStorageClientOptions)\n\ntype newStorageClientOptions struct {\n\tlocalOptions []NewLocalStorageClientOption\n\ts3Options    []NewS3StorageClientOption\n\tazureOptions []NewAzureStorageClientOption\n\tgcsOptions   []NewGCSStorageClientOption\n}\n\nfunc newNewStorageClientOptions() *newStorageClientOptions {\n\treturn &newStorageClientOptions{}\n}\n\n// WithLocalStorageClientOptions adds the given options.\nfunc WithLocalStorageClientOptions(options ...NewLocalStorageClientOption) NewStorageClientOption {\n\treturn func(newStorageClientOptions *newStorageClientOptions) {\n\t\tnewStorageClientOptions.localOptions = append(newStorageClientOptions.localOptions, options...)\n\t}\n}\n\n// WithS3StorageClientOptions adds the given options.\nfunc WithS3StorageClientOptions(options ...NewS3StorageClientOption) NewStorageClientOption {\n\treturn func(newStorageClientOptions *newStorageClientOptions) {\n\t\tnewStorageClientOptions.s3Options = append(newStorageClientOptions.s3Options, options...)\n\t}\n}\n\n// WithAzureStorageClientOptions adds the given options.\nfunc WithAzureStorageClientOptions(options ...NewAzureStorageClientOption) NewStorageClientOption {\n\treturn func(newStorageClientOptions *newStorageClientOptions) {\n\t\tnewStorageClientOptions.azureOptions = append(newStorageClientOptions.azureOptions, options...)\n\t}\n}\n\n// WithGCSStorageClientOptions adds the given options.\nfunc WithGCSStorageClientOptions(options ...NewGCSStorageClientOption) NewStorageClientOption {\n\treturn func(newStorageClientOptions *newStorageClientOptions) {\n\t\tnewStorageClientOptions.gcsOptions = append(newStorageClientOptions.gcsOptions, options...)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage ObjectInfo struct in Go\nDESCRIPTION: Defines the ObjectInfo struct which contains metadata about storage objects. This includes size, last modified time, ETag, and other properties that describe stored objects across different storage providers.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/overlap/a/1.txt#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// ObjectInfo contains information about a storage object.\ntype ObjectInfo struct {\n\t// Path is the path to the object within the container or bucket.\n\tPath string\n\t// Size is the size of the object in bytes.\n\tSize int64\n\t// LastModified is the last modified time of the object.\n\tLastModified time.Time\n\t// ETag is an identifier for a specific version of the object.\n\t// This is usually an MD5 hash of the object content for providers that support it.\n\tETag string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protoc Path in buf.gen.yaml\nDESCRIPTION: Demonstrates how to specify a custom protoc path when using protoc's built-in plugins in the buf.gen.yaml configuration file.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprotoc_path: /path/to/custom/protoc\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Plugin Arguments in buf.gen.yaml\nDESCRIPTION: Shows how to specify arguments for local plugins in the buf.gen.yaml configuration file, allowing for more flexible plugin execution.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npath: [\"go\", \"run\", \"./cmd/protoc-gen-foo\"]\n```\n\n----------------------------------------\n\nTITLE: Setting BUF_TOKEN Environment Variable for Multiple BSR Instances\nDESCRIPTION: Demonstrates the extended format for the BUF_TOKEN environment variable, allowing authentication with multiple BSR instances.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nBUF_TOKEN=\"TOKEN1@BSRHOSTNAME1,TOKEN2@BSRHOSTNAME2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring objc_class_prefix in Managed Mode\nDESCRIPTION: Example of how to configure the objc_class_prefix option in managed mode, including default, except, and override settings.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nobjc_class_prefix:\n  default: \"XYZ\"\n  except:\n    - \"path/to/module1\"\n  override:\n    \"path/to/module2\": \"ABC\"\n```\n\n----------------------------------------\n\nTITLE: Configuring csharp_namespace in Managed Mode\nDESCRIPTION: Demonstrates how to set up csharp_namespace options in managed mode, including except and override configurations.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncsharp_namespace:\n  except:\n    - \"path/to/module1\"\n  override:\n    \"path/to/module2\": \"Com.Example.Namespace\"\n```\n\n----------------------------------------\n\nTITLE: Installing protoc-gen-buf-breaking with Go\nDESCRIPTION: Example of how to install the protoc-gen-buf-breaking plugin using Go, replacing the deprecated protoc-gen-buf-check-breaking.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/bufbuild/buf/cmd/protoc-gen-buf-breaking\n```\n\n----------------------------------------\n\nTITLE: Downloading protoc-gen-buf-breaking Binary\nDESCRIPTION: Example of how to download the protoc-gen-buf-breaking binary for Linux x86_64, replacing the deprecated protoc-gen-buf-check-breaking.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://github.com/bufbuild/buf/releases/download/v0.57.0/protoc-gen-buf-breaking-Linux-x86_64\n```\n\n----------------------------------------\n\nTITLE: Downloading Buf Breaking Check Tool (Bash)\nDESCRIPTION: Shell command to download the Buf breaking changes check tool for Linux x86_64 architecture using curl.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://github.com/bufbuild/buf/releases/download/v0.52.0/protoc-gen-buf-breaking-Linux-x86_64\n```\n\n----------------------------------------\n\nTITLE: Buf Generation Configuration (YAML)\nDESCRIPTION: Example YAML configuration showing two different ways to specify plugin options in buf.gen.yaml files.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1beta1\nplugins:\n  - name: foo\n    out: out\n    opt: foo=bar,baz,bat\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1beta1\nplugins:\n  - name: foo\n    out: out\n    opt:\n      - foo=bar\n      - baz\n      - bat\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Links in Markdown\nDESCRIPTION: Markdown reference-style links for comparing different versions of the Buf project on GitHub. Each link shows the changes between consecutive versions.\nSOURCE: https://github.com/bufbuild/buf/blob/main/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n[v0.20.0]: https://github.com/bufbuild/buf/compare/v0.19.1...v0.20.0\n[v0.19.1]: https://github.com/bufbuild/buf/compare/v0.19.0...v0.19.1\n[v0.19.0]: https://github.com/bufbuild/buf/compare/v0.18.1...v0.19.0\n[v0.18.1]: https://github.com/bufbuild/buf/compare/v0.18.0...v0.18.1\n[v0.18.0]: https://github.com/bufbuild/buf/compare/v0.17.0...v0.18.0\n[v0.17.0]: https://github.com/bufbuild/buf/compare/v0.16.0...v0.17.0\n[v0.16.0]: https://github.com/bufbuild/buf/compare/v0.15.0...v0.16.0\n[v0.15.0]: https://github.com/bufbuild/buf/compare/v0.14.0...v0.15.0\n[v0.14.0]: https://github.com/bufbuild/buf/compare/v0.13.0...v0.14.0\n[v0.13.0]: https://github.com/bufbuild/buf/compare/v0.12.1...v0.13.0\n[v0.12.1]: https://github.com/bufbuild/buf/compare/v0.12.0...v0.12.1\n[v0.12.0]: https://github.com/bufbuild/buf/compare/v0.11.0...v0.12.0\n[v0.11.0]: https://github.com/bufbuild/buf/compare/v0.10.0...v0.11.0\n[v0.10.0]: https://github.com/bufbuild/buf/compare/v0.9.0...v0.10.0\n[v0.9.0]: https://github.com/bufbuild/buf/compare/v0.8.0...v0.9.0\n[v0.8.0]: https://github.com/bufbuild/buf/compare/v0.7.1...v0.8.0\n[v0.7.1]: https://github.com/bufbuild/buf/compare/v0.7.0...v0.7.1\n[v0.7.0]: https://github.com/bufbuild/buf/compare/v0.6.0...v0.7.0\n[v0.6.0]: https://github.com/bufbuild/buf/compare/v0.5.0...v0.6.0\n[v0.5.0]: https://github.com/bufbuild/buf/compare/v0.4.1...v0.5.0\n[v0.4.1]: https://github.com/bufbuild/buf/compare/v0.4.0...v0.4.1\n[v0.4.0]: https://github.com/bufbuild/buf/compare/v0.3.0...v0.4.0\n[v0.3.0]: https://github.com/bufbuild/buf/compare/v0.2.0...v0.3.0\n[v0.2.0]: https://github.com/bufbuild/buf/compare/v0.1.0...v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Text Format Example with Various Data Types\nDESCRIPTION: This code snippet demonstrates a comprehensive example of Protocol Buffer text format. It includes scalar types (integers, floats, booleans, strings), message types, groups, repeated fields, and maps with different key and value types. This format is commonly used for debugging or as a human-readable representation of Protocol Buffer data.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/bufcurl/testdata/testdata.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ni32: -123\ni64: -456\nui32: 123\nui64: 456\nsi32: -123\nsi64: -456\nf32: 123\nf64: 456\nsf32: -123\nsf64: -456\nfl: 1.23\ndbl: 4.56\nb: true\ns: \"abcdef\"\nbs: \"\\x01\\x02\\x03\\x04\"\nen: A\nmsg: {\n\ti32: 1\n\ts: \"foo\"\n}\ngrp: {\n\tname: \"abc\"\n}\nri32: [-123,-123]\nri64: [-456,-456]\nrui32: [123,123]\nrui64: [456,456]\nrsi32: [-123,-123]\nrsi64: [-456,-456]\nrf32: [123,123]\nrf64: [456,456]\nrsf32: [-123,-123]\nrsf64: [-456,-456]\nrfl: [1.23,1.23]\nrdbl: [4.56,4.56]\nrb: [true,true]\nrs: [\"abcdef\",\"ghijkl\"]\nrbs: [\"\\x01\\x02\\x03\\x04\", \"\\x05\\x06\\x07\\x08\"]\nren: [A, B]\nrmsg: [{\n\ti32: 1\n\ts: \"foo\"\n},{\n\ti32: 2\n\ts: \"bar\"\n}]\nrgrp: [{\n\tname: \"abc\"\n},{\n\tname: \"def\"\n}]\nmks: [{\n\tkey: \"a\"\n\tvalue: \"abc\"\n},{\n\tkey: \"b\"\n\tvalue: \"def\"\n}]\nmki32: [{\n\tkey: 123\n\tvalue: \"abc\"\n},{\n\tkey: -123\n\tvalue: \"def\"\n}]\nmki64: [{\n\tkey: 456\n\tvalue: \"abc\"\n},{\n\tkey: -456\n\tvalue: \"def\"\n}]\nmkui32: [{\n\tkey: 123\n\tvalue: \"abc\"\n},{\n\tkey: 234\n\tvalue: \"def\"\n}]\nmkui64: [{\n\tkey: 456\n\tvalue: \"abc\"\n},{\n\tkey: 567\n\tvalue: \"def\"\n}]\nmksi32: [{\n\tkey: 123\n\tvalue: \"abc\"\n},{\n\tkey: -123\n\tvalue: \"def\"\n}]\nmksi64: [{\n\tkey: 456\n\tvalue: \"abc\"\n},{\n\tkey: -456\n\tvalue: \"def\"\n}]\nmkf32: [{\n\tkey: 123\n\tvalue: \"abc\"\n},{\n\tkey: 234\n\tvalue: \"def\"\n}]\nmkf64: [{\n\tkey: 456\n\tvalue: \"abc\"\n},{\n\tkey: 567\n\tvalue: \"def\"\n}]\nmksf32: [{\n\tkey: 123\n\tvalue: \"abc\"\n},{\n\tkey: -123\n\tvalue: \"def\"\n}]\nmksf64: [{\n\tkey: 456\n\tvalue: \"abc\"\n},{\n\tkey: -456\n\tvalue: \"def\"\n}]\nmkb: [{\n\tkey: true\n\tvalue: \"abc\"\n},{\n\tkey: false\n\tvalue: \"def\"\n}]\nmvi32: [{\n\tkey: \"a\"\n\tvalue: -123\n},{\n\tkey: \"b\"\n\tvalue: -123\n}]\nmvi64: [{\n\tkey: \"a\"\n\tvalue: -456\n},{\n\tkey: \"b\"\n\tvalue: -456\n}]\nmvui32: [{\n\tkey: \"a\"\n\tvalue: 123\n},{\n\tkey: \"b\"\n\tvalue: 123\n}]\nmvui64: [{\n\tkey: \"a\"\n\tvalue: 456\n},{\n\tkey: \"b\"\n\tvalue: 456\n}]\nmvsi32: [{\n\tkey: \"a\"\n\tvalue: -123\n},{\n\tkey: \"b\"\n\tvalue: -123\n}]\nmvsi64: [{\n\tkey: \"a\"\n\tvalue: -456\n},{\n\tkey: \"b\"\n\tvalue: -456\n}]\nmvf32: [{\n\tkey: \"a\"\n\tvalue: 123\n},{\n\tkey: \"b\"\n\tvalue: 123\n}]\nmvf64: [{\n\tkey: \"a\"\n\tvalue: 456\n},{\n\tkey: \"b\"\n\tvalue: 456\n}]\nmvsf32: [{\n\tkey: \"a\"\n\tvalue: -123\n},{\n\tkey: \"b\"\n\tvalue: -123\n}]\nmvsf64: [{\n\tkey: \"a\"\n\tvalue: -456\n},{\n\tkey: \"b\"\n\tvalue: -456\n}]\nmvfl: [{\n\tkey: \"a\"\n\tvalue: 1.23\n},{\n\tkey: \"b\"\n\tvalue: 1.23\n}]\nmvdbl: [{\n\tkey: \"a\"\n\tvalue: 4.56\n},{\n\tkey: \"b\"\n\tvalue: 4.56\n}]\nmvb: [{\n\tkey: \"a\"\n\tvalue: true\n},{\n\tkey: \"b\"\n\tvalue: false\n}]\nmvs: [{\n\tkey: \"a\"\n\tvalue: \"abc\"\n},{\n\tkey: \"b\"\n\tvalue: \"def\"\n}]\nmvbs: [{\n\tkey: \"a\"\n\tvalue: \"\\x01\\x02\\x03\\x04\"\n},{\n\tkey: \"b\"\n\tvalue: \"\\x05\\x06\\x07\\x08\"\n}]\nmven: [{\n\tkey: \"a\"\n\tvalue: A\n},{\n\tkey: \"b\"\n\tvalue: B\n}]\nmvmsg: [{\n\tkey: \"a\"\n\tvalue: {\n\t\ti32: 1\n\t\ts: \"foo\"\n\t}\n},{\n\tkey: \"b\"\n\tvalue: {\n\t\ti32: 2\n\t\ts: \"bar\"\n\t}\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Protoc CLI Arguments for Go Code Generation\nDESCRIPTION: Command line arguments for protoc compiler specifying the input directory (proto), error format as text, Go output directory settings, and enabling the Connect plugin for Go code generation. Includes configuration for the protoc-gen-go plugin path.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/1/flags.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-I\nproto\n--error_format\ntext\n--go_out\ngo_out\n--go_opt\nplugins=connect\n--plugin\n/bin/protoc-gen-go\n```\n\n----------------------------------------\n\nTITLE: Configuring Buf Build System Options\nDESCRIPTION: This snippet lists various command-line arguments and configuration options for the Buf build system. It includes protobuf import paths, error formatting, flag files, Go plugin options, and custom plugin paths.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/2/flags1.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-I\nproto\n--error_format\ntext\n@testdata/2/flags2.txt\n--go_opt\nplugins=connect\n--plugin\n/bin/protoc-gen-go\n```\n\n----------------------------------------\n\nTITLE: Specifying Go output directory in Buf CLI\nDESCRIPTION: The '--go_out' flag specifies the output directory for generated Go code when using the Buf CLI. This flag points to the location where protobuf-generated Go files should be written.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/2/flags2.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--go_out\ngo_out\n```\n\n----------------------------------------\n\nTITLE: Configuring Buf Build with Protobuf and Go Options\nDESCRIPTION: This configuration sets up Buf build with various flags and options. It specifies the proto directory, error format, additional flags file, Go plugin options, and the path to the Go protoc plugin.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/3/flags1.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-I\nproto\n--error_format\ntext\n@testdata/3/flags2.txt\n--go_opt\nplugins=connect\n--plugin\n/bin/protoc-gen-go\n```\n\n----------------------------------------\n\nTITLE: Go Output Flags Configuration\nDESCRIPTION: Configuration file containing go output directory flags used for code generation settings\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/alpha/protoc/testdata/3/flags2.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n--go_out\\ngo_out\\n@testdata/3/flags1.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Insertion Points with Preserved Formatting\nDESCRIPTION: This snippet demonstrates the usage of protobuf insertion points, including preserved whitespace and comments. It shows two insertion points: 'example' and 'other', with associated comments that will be included when content is inserted.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/generate/testdata/insertion_point/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// The following line represents an insertion point named 'example'.\n// We include a few indentation to verify the whitespace is preserved\n// in the inserted content.\n//\n\n\t\t\t\t// Include this comment on the 'example' insertion point.\n\t\t\t\t  // This is another example where whitespaces are preserved.\n\t\t\t\t  // And this demonstrates a newline literal (\\n).\n\t\t\t\t// And don't forget the windows newline literal (\\r\\n).\n\t\t\t\n//     @@protoc_insertion_point(example)\n//\n// The 'other' insertion point is also included so that we verify\n// multiple insertion points can be written in a single invocation.\n//\n\n\t\t\t\t// Include this comment on the 'other' insertion point.\n\t\t\t\n//   @@protoc_insertion_point(other)\n//\n// Note that all text should be added above the insertion points.\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Insertion Points with Comments\nDESCRIPTION: Demonstrates the structure of protobuf insertion point comments with preserved whitespace and newline literals. Shows two insertion points named 'example' and 'other' with associated comments.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/command/generate/testdata/nested_insertion_point/gen/proto/insertion/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// The following line represents an insertion point named 'example'.\n// We include a few indentation to verify the whitespace is preserved\n// in the inserted content.\n//\n\n\t\t\t\t// Include this comment on the 'example' insertion point.\n\t\t\t\t  // This is another example where whitespaces are preserved.\n\t\t\t\t  // And this demonstrates a newline literal (\\n).\n\t\t\t\t// And don't forget the windows newline literal (\\r\\n).\n\t\t\t\n//     @@protoc_insertion_point(example)\n//\n// The 'other' insertion point is also included so that we verify\n// multiple insertion points can be written in a single invocation.\n//\n\n\t\t\t\t// Include this comment on the 'other' insertion point.\n\t\t\t\n//   @@protoc_insertion_point(other)\n//\n// Note that all text should be added above the insertion points.\n```\n\n----------------------------------------\n\nTITLE: Regenerating Digests for Import Test Cache\nDESCRIPTION: This command regenerates digests for the school, people, and students modules in the success directory. It uses the buf-digest tool to create exact copies for the imports tests.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/testdata/imports/cache/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuf-digest \\\n  private/buf/cmd/buf/testdata/imports/success/school \\\n  private/buf/cmd/buf/testdata/imports/success/people \\\n  private/buf/cmd/buf/testdata/imports/success/students\n```\n\n----------------------------------------\n\nTITLE: Creating New Commit IDs for Import Test Cache\nDESCRIPTION: This command generates new commit IDs for the imports cache. It uses the buf-new-commit-id tool to create unique identifiers for each cached module.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/cmd/buf/testdata/imports/cache/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbuf-new-commit-id\n```\n\n----------------------------------------\n\nTITLE: Generating Fake Buf Lock Files in Bash\nDESCRIPTION: This bash command runs a script to generate fake buf.lock files. It's noted that this command is automatically executed as part of the 'make generate' process.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/buf/bufworkspace/testdata/basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash scripts/fakebuflock.bash\n```\n\n----------------------------------------\n\nTITLE: Retrieving Associated Source Paths in Go\nDESCRIPTION: This function takes a protoreflect.SourcePath and returns a list of associated paths. Associated paths include parent paths and child paths of the given source path. The function always returns at least one associated path, which is the path itself.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/pkg/protosourcepath/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc GetAssociatedSourcePaths(\n\tsourcePath protoreflect.SourcePath,\n) ([]protoreflect.SourcePath, error)\n```\n\n----------------------------------------\n\nTITLE: Example Protobuf Source Path\nDESCRIPTION: This code snippet demonstrates an example of a Protobuf source path. The path represents .message_type(0).field(0).name, which is the name of the field at index 0 for the message at index 0 in a FileDescriptorProto.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/pkg/protosourcepath/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[4, 0, 2, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header and Terms\nDESCRIPTION: The standard Apache License 2.0 header that defines the licensing terms for the Buf project, including permissions, conditions, and limitations for using the software.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/pkg/storage/storagetesting/testdata/diff/b/prefix/3.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Grant of Copyright and Patent License\nDESCRIPTION: Details of the copyright and patent license grants provided under the Apache License 2.0, specifying what rights are being granted to users of the software.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/pkg/storage/storagetesting/testdata/diff/b/prefix/3.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Redistribution Requirements\nDESCRIPTION: Specifies the conditions for redistribution of the software, including requirements for including notices, license text, and proper attribution.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/pkg/storage/storagetesting/testdata/diff/b/prefix/3.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Conditions and Warranty Disclaimer\nDESCRIPTION: Details the submission of contributions, trademarks usage, warranty disclaimers, limitation of liability, and acceptance of warranty provisions of the Apache License 2.0.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/pkg/storage/storagetesting/testdata/diff/b/prefix/3.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Appendix\nDESCRIPTION: Provides instructions on how to apply the Apache License to a work, including the copyright notice template and boilerplate text to be included in source files.\nSOURCE: https://github.com/bufbuild/buf/blob/main/private/pkg/storage/storagetesting/testdata/diff/b/prefix/3.txt#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Displaying Buf CLI Help\nDESCRIPTION: Command to show the help interface for the Buf CLI, which provides summaries for available commands and flags.\nSOURCE: https://github.com/bufbuild/buf/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbuf --help\n```"
  }
]