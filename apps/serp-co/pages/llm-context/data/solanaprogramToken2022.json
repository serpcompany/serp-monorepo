[
  {
    "owner": "solana-program",
    "repo": "token-2022",
    "content": "TITLE: Configuring External Program Dependencies in Token 2022 Project\nDESCRIPTION: Example of how to specify external program dependencies in the Cargo.toml file for a Token 2022 program. This ensures that required external programs are fetched from mainnet and used in the local validator.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nprogram-dependencies = [\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\",\n  \"noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV\",\n]\n```\n\n----------------------------------------\n\nTITLE: Managing Solana Programs in Token 2022 Project\nDESCRIPTION: A set of commands for building, testing, formatting, and linting Solana programs in the Token 2022 project. These scripts help in managing multiple programs within the repository.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm programs:build\npnpm programs:test\npnpm programs:format\npnpm programs:lint\n```\n\n----------------------------------------\n\nTITLE: Generating IDLs for Token 2022 Programs\nDESCRIPTION: Command to generate Interface Definition Language (IDL) files for the Solana programs in the Token 2022 project. This uses either Shank or Anchor depending on the program's framework.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm generate:idls\n```\n\n----------------------------------------\n\nTITLE: Generating Clients for Token 2022 Programs\nDESCRIPTION: Commands to generate client libraries for the Token 2022 programs. This can be done separately or combined with IDL generation.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm generate:clients\n\n# Alternatively, generate both IDLs and clients\npnpm generate\n```\n\n----------------------------------------\n\nTITLE: Managing Local Validator for Token 2022 Development\nDESCRIPTION: Scripts for starting, restarting, and stopping a local Solana validator for Token 2022 development. Includes a step to build the spl-elgamal-registry program.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm confidential-transfer:elgamal-registry:build # you only need to run this once\npnpm validator:start\n\n# Force restart the validator\npnpm validator:restart\n\n# Stop the validator\npnpm validator:stop\n```\n\n----------------------------------------\n\nTITLE: Building Programs and Restarting Validator in Token 2022 Project\nDESCRIPTION: Commands to build the Token 2022 programs and restart the local validator, ensuring that all external program dependencies are included.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm programs:build\npnpm validator:restart\n```\n\n----------------------------------------\n\nTITLE: Building Individual Dependent Programs for SPL Token CLI\nDESCRIPTION: Manually builds each dependent program (Token, Token-2022, and Associated Token Account) using separate cargo commands. This method provides more control over the build process.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/clients/cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo build-sbf --manifest-path ../program/Cargo.toml\ncargo build-sbf --manifest-path ../program-2022/Cargo.toml\ncargo build-sbf --manifest-path ../../associated-token-account/program/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Building Dependent Programs for Testing SPL Token CLI\nDESCRIPTION: Builds the Token, Token-2022, and Associated Token Account programs required for testing. This command uses a local build script to compile all necessary dependencies.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/clients/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nBUILD_DEPENDENT_PROGRAMS=1 cargo build\n```\n\n----------------------------------------\n\nTITLE: Building and Running SPL Token CLI Locally\nDESCRIPTION: Demonstrates how to build the SPL Token CLI from a specific manifest path and run it with custom commands. This allows for local development and testing of the CLI.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/clients/cli/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --manifest-path token/cli/Cargo.toml\ntarget/debug/spl-token <command>\n```\n\n----------------------------------------\n\nTITLE: Running Rust Client Tests for Token 2022 Program\nDESCRIPTION: Command to build and test the Rust client for the Token 2022 program. This command starts a local Solana validator if one is not already running and executes the test suite.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/clients/rust/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm clients:js:test\n```\n\n----------------------------------------\n\nTITLE: Running Tests with the Combined Command\nDESCRIPTION: This command builds the programs, starts a local validator if needed, and runs the JavaScript client tests in one step.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/clients/js/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm clients:js:test\n```\n\n----------------------------------------\n\nTITLE: Step-by-Step Testing Workflow\nDESCRIPTION: A sequence of commands to build programs, start/restart the validator, and run tests for the JavaScript client manually.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/clients/js/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Build your programs and start the validator.\npnpm programs:build\npnpm validator:restart\n\n# Go into the client directory and run the tests.\ncd clients/js\npnpm install\npnpm build\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Tests for SPL Token CLI\nDESCRIPTION: Executes the test suite for the SPL Token command-line utility using Cargo. This step verifies the functionality of the CLI and its components.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/clients/cli/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Token 2022 Project\nDESCRIPTION: Command to install the necessary NPM dependencies for the Token 2022 project. This allows access to all scripts and tools provided by the template.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building SPL Token CLI in Rust\nDESCRIPTION: Builds the SPL Token command-line interface locally using Cargo. This step compiles the Rust code into an executable.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/clients/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Linting and Formatting Commands\nDESCRIPTION: Commands to check and fix code style issues in the JavaScript client using linting and formatting tools.\nSOURCE: https://github.com/solana-program/token-2022/blob/main/clients/js/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm lint\npnpm lint:fix\npnpm format\npnpm format:fix\n```"
  }
]