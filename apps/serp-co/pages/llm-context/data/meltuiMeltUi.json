[
  {
    "owner": "melt-ui",
    "repo": "melt-ui",
    "content": "TITLE: Creating a Collapsible Component with Melt UI (Svelte)\nDESCRIPTION: This snippet demonstrates how to create a basic collapsible component using Melt UI's `createCollapsible` builder. It imports necessary functions from `@melt-ui/svelte` and utilizes the `melt` action to bind the builder elements to corresponding HTML elements. The component manages its open/close state internally.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/usage.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { createCollapsible, melt } from '@melt-ui/svelte'\n\tconst {\n\t\telements: { root, content, trigger },\n\t\tstates: { open }\n\t} = createCollapsible()\n</script>\n\n<div use:melt={$root}>\n\t<button use:melt={$trigger}>{$open ? 'Close' : 'Open'}</button>\n\t<div use:melt={$content}>Obi-Wan says: Hello there!</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Helper to Combine Multiple Matchers for Validation - Melt UI Svelte\nDESCRIPTION: This advanced snippet defines a utility isDateUnavailable function that takes multiple Matcher functions and returns a composite matcher (using Array.some). Used with createDateField to allow for scalable, reusable matcher-based date validation logic. Input: array of Matcher; Output: single Matcher function. Dependencies: @melt-ui/svelte, Marker type definitions. Useful for DRY validation patterns.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt, type Matcher } from '@melt-ui/svelte'\n\n\tconst isFirstOrFifteenth: Matcher = (date) => {\n\t\treturn date.day === 1 || date.day === 15\n\t}\n\n\tconst isWeekend: Matcher = (date) => {\n\t\treturn date.dayOfWeek === 0 || date.dayOfWeek === 6\n\t}\n\n\tconst matchers = [isFirstOrFifteenth, isWeekend]\n\n\tconst isDateUnavailable: (...matchers: Matcher[]) => Matcher = (...matchers) => {\n\t\treturn (date) => {\n\t\t\treturn matchers.some((matcher) => matcher(date))\n\t\t}\n\t}\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label, validation },\n\t\tstates: { value, segmentContents, isInvalid }\n\t} = createDateField({\n\t\tisDateUnavailable\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Styling a Collapsible Component with Melt UI (Svelte)\nDESCRIPTION: This snippet shows how to style a Melt UI collapsible component using different approaches: Svelte scoped styles, external components, and utility class libraries like Tailwind CSS. It demonstrates passing props from the Melt UI builder to an external component.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/usage.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { createCollapsible, melt } from '@melt-ui/svelte';\n  import Button from '$components/button.svelte';\n\n const {\n  elements: { root, content, trigger },\n  states: { open }\n } = createCollapsible()\n</script>\n\n<!-- Using Svelte Scoped Styles -->\n<div class=\"root\" use:melt={$root}>\n<!-- Using an external component -->\n<Button on:click={() => console.log('clicked')} {...$trigger} action={trigger}>\n  {$open ? 'Close' : 'Open'}\n</Button>\n<!-- Using an utility class library, such as Tailwind -->\n<div class=\"rounded-md p-4 text-orange-500 shadow-sm\" use:melt={$content}>\n  Obi-Wan says: Hello there!\n</div>\n</div>\n\n<style>\n  .root {\n    display: flex;\n    flex-direction: column;\n  }\n</style>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Button.svelte -->\n<script>\n  import type { Action } from 'svelte/action';\n  export let action: Action\n</script>\n\n<button use:action>\n  <slot />\n</button>\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Store to Melt UI Dialog in Svelte\nDESCRIPTION: Shows how to provide a custom Svelte store (`writable`) to the `createDialog` builder via its configuration object. This allows the component's `open` state to be managed externally and shared across different parts of the application. Melt UI uses the provided store instead of creating its own.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/controlled.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDialog } from '@melt-ui/svelte'\n\timport { writable } from 'svelte/store'\n\n\tconst customOpen = writable(false)\n\n\tconst {\n\t\telements: { trigger, overlay, content, title, description, close }\n\t} = createDialog({\n\t\topen: customOpen\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Matcher Function Factory\nDESCRIPTION: Shows how to create a helper function that takes an array of matchers, combining them into a single matcher function. This approach allows for reusable and composable date validation logic throughout an application.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-field.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt, type Matcher } from '@melt-ui/svelte'\n\n\tconst isFirstOrFifteenth: Matcher = (date) => {\n\t\treturn date.day === 1 || date.day === 15\n\t}\n\n\tconst isWeekend: Matcher = (date) => {\n\t\treturn date.dayOfWeek === 0 || date.dayOfWeek === 6\n\t}\n\n\tconst matchers = [isFirstOrFifteenth, isWeekend]\n\n\tconst isDateUnavailable: (...matchers: Matcher[]) => Matcher = (...matchers) => {\n\t\treturn (date) => {\n\t\t\treturn matchers.some((matcher) => matcher(date))\n\t\t}\n\t}\n\n\tconst {\n\t\telements: { field, segment, label, hiddenInput },\n\t\tstates: { value, segmentContents }\n\t} = createDateField({\n\t\tname: 'appointmentDate',\n\t\tisDateUnavailable: isDateUnavailable(matchers)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Selectable Dates in Melt UI Range Calendar (Svelte)\nDESCRIPTION: Illustrates how to specify 'minValue' and 'maxValue' props with CalendarDate objects to constrain the selectable date range, disabling dates outside these bounds. Also shows setting a default placeholder date. Requires '@melt-ui/svelte' and '@internationalized/date' for CalendarDate constructor. Inputs are CalendarDate limits, output disables out-of-range dates.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\\n\\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\\n\\timport { CalendarDate } from '@internationalized/date'\\n\\n\\tconst {\\n\\t\\t/* ... */\\n\\t} = createRangeCalendar({\\n\\t\\tdefaultPlaceholder: new CalendarDate(2023, 1, 25),\\n\\t\\tminValue: new CalendarDate(2023, 1, 15),\\n\\t\\tmaxValue: new CalendarDate(2023, 2, 15)\\n\\t})\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Popover State with Callback (TypeScript)\nDESCRIPTION: Shows how to control the open/close state of a Melt UI Popover by providing an `onOpenChange` callback function. This callback receives the current and next potential states and returns the desired state, allowing for conditional logic.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/popover.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst popover = createPopover({\n  onOpenChange: ({ curr, next }) => {\n    // Do something with the open state\n    if (/* some condition */) {\n      return false\n    }\n    return next\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Default Value Using External Data in Date Range Field - Melt UI Svelte\nDESCRIPTION: This example dynamically sets the date range defaultValue based on user profile data using createDateRangeField. It parses ISO 8601 strings with parseDateTime and falls back to a CalendarDate placeholder if not present. Dependencies: @melt-ui/svelte and @internationalized/date. Expects a data object with 'userAvailabilityStart'/'userAvailabilityEnd'. Ensures the field represents a CalendarDateTime when user-entered, otherwise defaults to placeholder. Handles undefined gracefully.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\timport { CalendarDateTime, CalendarDate, parseDateTime } from '@internationalized/date'\n\n\texport let data\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField({\n\t\tdefaultPlaceholder: new CalendarDate(2023, 10, 11),\n\t\tdefaultValue: {\n\t\t\tstart: data?.userAvailabilityStart ? parseDateTime(data?.userAvailabilityStart) : undefined,\n\t\t\tend: data?.userAvailabilityEnd ? parseDateTime(data?.userAvailabilityEnd) : undefined\n\t\t}\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Paged Navigation in Melt UI Range Calendar with Svelte\nDESCRIPTION: Demonstrates setting the 'pagedNavigation' boolean prop to true along with multiple months displayed to shift calendar navigation by the full number of months instead of one month per navigation click. This changes the navigation behavior to page-sized increments. Requires '@melt-ui/svelte' and Svelte. Inputs include numberOfMonths and pagedNavigation, output is updated navigation logic controlling the calendar paging.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\\n\\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\\n\\n\\tconst {\\n\\t\\t/* ... */\\n\\t} = createRangeCalendar({\\n\\t\\tnumberOfMonths: 2,\\n\\t\\tpagedNavigation: true\\n\\t})\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Prevention\nDESCRIPTION: This snippet showcases how to disable scroll prevention on the body when the dialog is open. By default, Melt UI prevents scrolling to improve the user experience. Setting `preventScroll` to `false` in the `createDialog` options allows the user to scroll the underlying content while the dialog is open.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/dialog.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst dialog = createDialog({\n\tpreventScroll: false\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Dates Using Matcher Function in Date Field - Melt UI Svelte\nDESCRIPTION: This svelte script uses createDateField from @melt-ui/svelte to disable selection of the 1st or 15th of any month using an isDateUnavailable prop. It implements a Matcher that returns true on those days. Dependencies: @melt-ui/svelte; expected field context objects are destructured. Inputs: user-selected date; Outputs: invalid state and data-invalid attribute if a forbidden date is picked. Validation UI elements (label, field, startSegment, endSegment, validation) are provided.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt, type Matcher } from '@melt-ui/svelte'\n\n\tconst isFirstOrFifteenth: Matcher = (date) => {\n\t\treturn date.day === 1 || date.day === 15\n\t}\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label, validation },\n\t\tstates: { value, segmentContents, isInvalid }\n\t} = createDateField({\n\t\tisDateUnavailable: isFirstOrFifteenth\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using Selected Date Range with Melt UI Range Calendar in Svelte\nDESCRIPTION: Demonstrates how to import and create a range calendar using createRangeCalendar from '@melt-ui/svelte', then access the 'value' store containing the selected DateRange object. Shows using reactive $value to display or bind start and end dates in markup. Dependencies include '@melt-ui/svelte' and Svelte's store reactivity. Expected input is user selection on the calendar, output is DateRange with start and end Date objects. Illustrates practical access to selection data for use in forms or display.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\\n\\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\\n\\n\\tconst {\\n\\t\\t/* ... */\\n\\t\\tstates: { value /* ... */ }\\n\\t} = createRangeCalendar()\\n</script>\\n\\n{#if $value.start && $value.end}\\n\\t<span>{$value.start.toString()}</span>\\n\\t<span>{$value.end.toString()}</span>\\n\\t<!-- or -->\\n\\t<input name=\"startDate\" value={$value.start.toString()} />\\n\\t<input name=\"endDate\" value={$value.end.toString()} />\\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Collapsible Component (Svelte)\nDESCRIPTION: This snippet demonstrates creating a controlled collapsible component using Melt UI.  The `open` prop reactively updates the component's internal state. `createSync` is used to keep the `open` prop synchronized with the internal state of the collapsible.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/usage.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Controlled -->\n<script>\n\timport { createCollapsible, melt, createSync } from '@melt-ui/svelte'\n\n\texport let open = false\n\n\tconst {\n\t\telements: { root, content, trigger },\n\t\tstates\n\t} = createCollapsible()\n\n\tconst sync = createSync(states)\n\t// Whenever the open prop changes, update the local state, and vice versa\n\t$: sync.open(open, (value) => (open = value))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using minValue and maxValue Props in Date Range Field - Melt UI Svelte\nDESCRIPTION: Illustrates createDateRangeField usage with minValue and maxValue props to only permit date ranges between October 11, 2023 and October 11, 2024. The code statically sets initial range values and validity bounds using CalendarDate from @internationalized/date. Dependencies: @melt-ui/svelte, @internationalized/date. Inputs: user-selected range; Output: UI validation if out-of-range. Limitation: dates outside range are rejected.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label, validation },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField({\n\t\tdefaultValue: {\n\t\t\tstart: new CalendarDate(2023, 10, 11),\n\t\t\tend: new CalendarDate(2023, 10, 13)\n\t\t},\n\t\tminValue: new CalendarDate(2023, 10, 11),\n\t\tmaxValue: new CalendarDate(2024, 10, 11)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Weeks and Days - Svelte\nDESCRIPTION: This snippet completes the calendar by rendering the weeks and days within each month. It iterates over the `weeks` property of each month and then over the dates within each week. The `cell` element is used to render each date, and the `isDateDisabled` and `isDateUnavailable` helpers are used to determine if a date should be disabled.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCalendar, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { calendar, heading, grid, cell, prevButton, nextButton },\n\t\tstates: { months, headingValue, weekdays },\n\t\thelpers: { isDateDisabled, isDateUnavailable }\n\t} = createCalendar()\n</script>\n\n<div use:melt={$calendar}>\n\t<header>\n\t\t<button use:melt={$prevButton}> Previous Page </button>\n\t\t<div use:melt={$heading}>\n\t\t\t{$headingValue}\n\t\t</div>\n\t\t<button use:melt={$nextButton}> Next Page</button>\n\t</header>\n\t{#each $months as month}\n\t\t<table use:melt={$grid}>\n\t\t\t<thead aria-hidden=\"true\">\n\t\t\t\t<tr>\n\t\t\t\t\t{#each $weekdays as day}\n\t\t\t\t\t\t<th>{day}</th>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{#each month.weeks as weekDates}\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t{#each weekDates as date}\n\t\t\t\t\t\t\t<td role=\"gridcell\" aria-disabled={$isDateDisabled(date) || $isDateUnavailable(date)}>\n\t\t\t\t\t\t\t\t<div use:melt={$cell(date, month.value)}>\n\t\t\t\t\t\t\t\t\t{date.day}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</tr>\n\t\t\t\t{/each}\n\t\t\t</tbody>\n\t\t</table>\n\t{/each}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Manually Syncing Single State in Svelte\nDESCRIPTION: Shows a manual approach to synchronizing a component's internal state (`localOpen`) with an external prop (`open`) using Svelte's reactive statements (`$:`). This pattern enables two-way binding but can become complex.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/controlled.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDialog } from '@melt-ui/svelte'\n\n\texport let open = false\n\n\tconst {\n\t\telements: { trigger, overlay, content, title, description, close },\n\t\tstates: { open: localOpen }\n\t} = createDialog()\n\n\t$: $localOpen = open\n\t$: open = $localOpen\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Range Calendar Date Range Type - TypeScript\nDESCRIPTION: Specifies the TypeScript type for the calendar's selected value. The `DateRange` type is an object containing `start` and `end` properties, each expected to be a `DateValue`. This structure is used to represent the beginning and end dates of the selected range.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype DateRange = {\n\tstart: DateValue\n\tend: DateValue\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Melt UI Project via CLI - Shell\nDESCRIPTION: This snippet demonstrates running Melt UI's official CLI installer using npx to set up a new project or integrate Melt UI into an existing setup. The command leverages npm to fetch and execute the latest version of @melt-ui/cli and run the 'init' initialization routine. No code parameters are required. Ensure Node.js and npm are installed before running.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @melt-ui/cli@latest init\n\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Date Values\nDESCRIPTION: Demonstrates how to set minimum and maximum dates for a Date Field component using minValue and maxValue props. This restricts the user's selection to dates within the specified range.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-field.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\telements: { field, segment, label, hiddenInput },\n\t\tstates: { value, segmentContents }\n\t} = createDateField({\n\t\tname: 'appointmentDate',\n\t\tisDateUnavailable,\n\t\tminValue: new CalendarDate(2023, 10, 11),\n\t\tmaxValue: new CalendarDate(2024, 10, 11)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing @internationalized/date Dependency\nDESCRIPTION: Provides commands to install the '@internationalized/date' package using different package managers (npm, yarn, pnpm). This package is a necessary dependency for using Melt UI's date-related builders.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/dates.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @internationalized/date\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @internationalized/date\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @internationalized/date\n```\n\n----------------------------------------\n\nTITLE: Defining Range Calendar Month Type - TypeScript\nDESCRIPTION: Provides the TypeScript definition for the `Month` object, which represents a single month displayed in the calendar. It includes the month's value (`DateValue`), an array of weeks with their dates (`DateValue[][]`), and a flat array of all dates in the month (`DateValue[]`), including those from adjacent months.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Month = {\n\t/**\n\t * A `DateValue` used to represent the month. Since days\n\t * from the previous and next months are included in the\n\t * calendar grid, we need a source of truth for the value\n\t * the grid is representing.\n\t */\n\tvalue: DateValue\n\n\t/**\n\t * An array of arrays representing the weeks in the calendar.\n\t * Each sub-array represents a week, and contains the dates for each\n\t * day in that week. This structure is useful for rendering the calendar\n\t * grid using a table, where each row represents a week and each cell\n\t * represents a day.\n\t */\n\tweeks: DateValue[][]\n\n\t/**\n\t * An array of all the dates in the current month, including dates from\n\t * the previous and next months that are used to fill out the calendar grid.\n\t * This array is useful for rendering the calendar grid in a customizable way,\n\t * as it provides all the dates that should be displayed in the grid in a flat\n\t * array.\n\t */\n\tdates: DateValue[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Zoned Date & Time Field with Local Timezone\nDESCRIPTION: Shows how to create a Date Range Field with time zone support using ZonedDateTime and the user's local time zone.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\timport { now, getLocalTimeZone } from '@internationalized/date'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField({\n\t\tdefaultPlaceholder: now(getLocalTimeZone())\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Date Values in Melt UI Svelte Date Picker\nDESCRIPTION: This snippet configures 'minValue' and 'maxValue' with 'CalendarDate' objects to restrict selectable dates within a specific range. Dates outside this interval are disabled, preventing user selection. It uses '@melt-ui/svelte' and '@internationalized/date'.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDatePicker, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createDatePicker({\n\t\tminValue: new CalendarDate(2023, 1, 15),\n\t\tmaxValue: new CalendarDate(2023, 2, 15)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Open State for Popover (TypeScript)\nDESCRIPTION: Demonstrates how to initialize a Melt UI Popover to be open by default using the `defaultOpen` property within the `createPopover` configuration object.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/popover.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n\t/** ... */\n} = createPopover({\n\tdefaultOpen: true\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Melt Action to Calendar Root - Svelte\nDESCRIPTION: Demonstrates applying the Svelte `melt` action to the root HTML element of the calendar, binding it to the `$calendar` store provided by the `createRangeCalendar` builder. This connects the DOM element to the builder's logic and state management.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<div use:melt={$calendar}>\n\t<!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Context Menu - Svelte/TS\nDESCRIPTION: Initializes the context menu using the `createContextMenu` function from `@melt-ui/svelte`. This creates the necessary elements for the context menu including menu, item, trigger and arrow.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/context-menu.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createContextMenu, melt } from '@melt-ui/svelte'\n\tconst {\n\t\telements: { menu, item, trigger, arrow }\n\t} = createContextMenu()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using isDateUnavailable Matcher to Mark Unavailable Dates in Range Calendar (Svelte)\nDESCRIPTION: Illustrates passing a Matcher function to the 'isDateUnavailable' prop to mark certain dates as unavailable (visible and focusable but not selectable). Example uses isWeekend from '@internationalized/date' to disable weekends. Dependencies include '@melt-ui/svelte' and '@internationalized/date'. Input is each DateValue tested by the predicate, output is boolean to mark availability. Unavailable dates get a data attribute for styling.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\\n\\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\\n\\timport { isWeekend } from '@internationalized/date'\\n\\n\\tconst {\\n\\t\\t/* ... */\\n\\t} = createRangeCalendar({\\n\\t\\tisDateUnavailable: (date) => {\\n\\t\\t\\treturn isWeekend(date, 'en')\\n\\t\\t}\\n\\t})\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Close on Escape\nDESCRIPTION: This snippet demonstrates how to disable the default behavior of closing the dialog when the escape key is pressed. By setting the `escapeBehavior` property to `'ignore'`, the dialog will remain open when the escape key is pressed, giving full control to the component and user.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/dialog.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst dialog = createDialog({\n\tescapeBehavior: 'ignore'\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Dates in Range Calendar via isDateDisabled Matcher in Svelte\nDESCRIPTION: Demonstrates use of the 'isDateDisabled' prop with a Matcher function to disable certain dates entirely (not selectable or focusable, skipped in keyboard navigation). The example disables the first 10 days of each month by checking the day property. Requires '@melt-ui/svelte'. Input is each DateValue, output is boolean disabling those dates.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\\n\\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\\n\\n\\tconst {\\n\\t\\t/* ... */\\n\\t} = createRangeCalendar({\\n\\t\\tisDateDisabled: (date) => {\\n\\t\\t\\treturn date.day <= 10\\n\\t\\t}\\n\\t})\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Restricting Date Selection with minValue and maxValue in Svelte Melt-UI\nDESCRIPTION: This snippet illustrates setting minimum and maximum selectable dates using 'minValue' and 'maxValue' properties with '@internationalized/date' CalendarDate objects. Dates outside this range are disabled, enforcing selection boundaries.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n```svelte showLineNumbers {8-9}\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createDateRangePicker({\n\t\tminValue: new CalendarDate(2023, 1, 15),\n\t\tmaxValue: new CalendarDate(2023, 2, 15)\n\t})\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: ARIA-Compliant Accessibility Pattern for Accordion with Heading Element\nDESCRIPTION: Provides guidance for ensuring accordion items are accessible by wrapping trigger elements in semantic heading tags or using the 'heading' builder to apply appropriate ARIA attributes. Helps maintain accessibility standards even without semantic heading elements.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/accordion.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<h2>\n  <button use:melt={$trigger(id)}>\n    {title}\n  </button>\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Basic Melt UI Preprocessor Example in Svelte\nDESCRIPTION: Demonstrates the simplified syntax using the 'melt' action with a collapsible component builder before preprocessing. The preprocessor allows developers to use a cleaner, more concise syntax when working with Melt UI components.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/preprocessor.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { createCollapsible, melt } from '@melt-ui/svelte'\n\tconst { open, root, content, trigger } = createCollapsible()\n</script>\n\n<div use:melt={$root}>\n\t<button use:melt={$trigger}>{$open ? 'Close' : 'Open'}</button>\n\t<div use:melt={$content}>Obi-Wan says: Hello there!</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value (Svelte/TS)\nDESCRIPTION: Sets a default value for the Date Range Picker. Uses `defaultValue` prop which expects a `DateRange` object with `start` and `end` properties. Each date value is a `CalendarDate` object. Requires `@internationalized/date` and `@melt-ui/svelte` dependencies.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createDateRangePicker({\n\t\tdefaultValue: {\n\t\t\tstart: new CalendarDate(2024, 1, 11),\n\t\t\tend: new CalendarDate(2024, 1, 15)\n\t\t}\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value and Placeholder in Date Field\nDESCRIPTION: Demonstrates how to set a default value and placeholder in a Date Field component. This example shows how the field represents a CalendarDate object even when the defaultPlaceholder is a CalendarDateTime object.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-field.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt } from '@melt-ui/svelte'\n\timport { CalendarDateTime, CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\telements: { field, segment, label, hiddenInput },\n\t\tstates: { segmentContents, value }\n\t} = createDateField({\n\t\tname: 'appointmentDate',\n\t\tdefaultPlaceholder: new CalendarDateTime(2023, 10, 11, 12, 30),\n\t\tdefaultValue: new CalendarDate(2023, 10, 11)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar Weeks and Day Cells - Svelte\nDESCRIPTION: Completes the calendar table by iterating over the `weeks` array within each `month` object and then over the `weekDates` within each week. This renders `<tr>` for weeks and `<td>` elements with `role=\"gridcell\"` for days, applying the `melt` action with the `$cell` store to each day cell and displaying the day number. It also uses `$isDateDisabled` and `$isDateUnavailable` helpers to set the `aria-disabled` attribute.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<div use:melt={$calendar}>\n\t<header>\n\t\t<button use:melt={$prevButton}> Previous Page </button>\n\t\t<div use:melt={$heading}>\n\t\t\t{$headingValue}\n\t\t</div>\n\t\t<button use:melt={$nextButton}> Next Page</button>\n\t</header>\n\t{#each $months as month}\n\t\t<table use:melt={$grid}>\n\t\t\t<thead aria-hidden=\"true\">\n\t\t\t\t<tr>\n\t\t\t\t\t{#each $weekdays as day}\n\t\t\t\t\t\t<th>{day}</th>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{#each month.weeks as weekDates}\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t{#each weekDates as date}\n\t\t\t\t\t\t\t<td role=\"gridcell\" aria-disabled={$isDateDisabled(date) || $isDateUnavailable(date)}>\n\t\t\t\t\t\t\t\t<div use:melt={$cell(date, month.value)}>\n\t\t\t\t\t\t\t\t\t{date.day}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</tr>\n\t\t\t\t{/each}\n\t\t\t</tbody>\n\t\t</table>\n\t{/each}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Range Slider Implementation in Svelte\nDESCRIPTION: Creates a range slider with multiple thumbs by passing an array of values to the slider component. This example demonstrates how to implement a slider with two thumbs to display a value range.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/slider.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Code not visible in the provided content, but referenced as snippets.range -->\n```\n\n----------------------------------------\n\nTITLE: Setting up Calendar within Popover (Svelte)\nDESCRIPTION: Configures the calendar component inside the popover, including navigation buttons, headings, and date cells. Uses the `melt` action to bind elements. Depends on `months`, `headingValue`, `weekdays`, `isDateDisabled`, and `isDateUnavailable` stores from the initialized `createDateRangePicker`.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<span use:melt={$label}>Hotel Nights</span>\n<div use:melt={$field}>\n\t{#each $segmentContents.start as seg}\n\t\t<div use:melt={$startSegment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n\t<div aria-hidden=\"true\">-</div>\n\t{#each $segmentContents.end as seg}\n\t\t<div use:melt={$endSegment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n\t<div>\n\t\t<button use:melt={$trigger}>\n\t\t\t<span>Open Calendar</span>\n\t\t</button>\n\t</div>\n</div>\n<div use:melt={$content}>\n\t<div use:melt={$calendar}>\n\t\t<header>\n\t\t\t<button use:melt={$prevButton}>\n\t\t\t\t<span>Previous Month</span>\n\t\t\t</button>\n\t\t\t<div use:melt={$heading}>\n\t\t\t\t{$headingValue}\n\t\t\t</div>\n\t\t\t<button use:melt={$nextButton}>\n\t\t\t\t<span>Next Month</span>\n\t\t\t</button>\n\t\t</header>\n\t\t{#each $months as month}\n\t\t\t<table use:melt={$grid}>\n\t\t\t\t<thead aria-hidden=\"true\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t{#each $weekdays as day}\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t{$day}\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{#each month.weeks as days}\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t{#each days as date}\n\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\trole=\"gridcell\"\n\t\t\t\t\t\t\t\t\taria-disabled={$isDateDisabled(date) || $isDateUnavailable(date)}>\n\t\t\t\t\t\t\t\t\t<div use:melt={$cell(date, month.value)}>\n\t\t\t\t\t\t\t\t\t\t{date.day}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t{/each}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t{/each}\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Matcher Functions for Date Validation - Melt UI Svelte\nDESCRIPTION: This code defines isFirstOrFifteenth and isWeekend matchers and combines them into isDateUnavailable, passed to createDateField. It prevents date selection on weekends or the 1st/15th. Dependencies: @melt-ui/svelte, type Matcher. Shows how to join multiple predicates using logical OR for richer field validation. Inputs: user-selected date; Outputs: field validity status. Reusable for different matcher sets.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt, type Matcher } from '@melt-ui/svelte'\n\n\tconst isFirstOrFifteenth: Matcher = (date) => {\n\t\treturn date.day === 1 || date.day === 15\n\t}\n\n\tconst isWeekend: Matcher = (date) => {\n\t\treturn date.dayOfWeek === 0 || date.dayOfWeek === 6\n\t}\n\n\tconst isDateUnavailable: Matcher = (date) => {\n\t\treturn isFirstOrFifteenth(date) || isWeekend(date)\n\t}\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label, validation },\n\t\tstates: { value, segmentContents, isInvalid }\n\t} = createDateField({\n\t\tisDateUnavailable\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Melt UI Preprocessor in svelte.config.js with JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import and configure the Melt UI preprocessor within the Svelte build configuration (svelte.config.js). It imports the preprocessMeltUI and sequence helpers from @melt-ui/pp and adds preprocessMeltUI to the Svelte preprocess pipeline (preferably at the end). This enables Melt UI’s custom transformations during Svelte compilation. Required dependencies: @melt-ui/pp and any other Svelte preprocessors needed by the project. The config exports the modified configuration object for Svelte.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/installation.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// svelte.config.js\n\nimport { preprocessMeltUI, sequence } from '@melt-ui/pp'\n\nconst config = {\n\t// ... other svelte config options\n\tpreprocess: sequence([\n\t\t// ... other preprocessors\n\t\tpreprocessMeltUI() // add to the end!\n\t])\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Installing Melt UI Preprocessor with pnpm in Bash\nDESCRIPTION: This command adds @melt-ui/pp as a dev dependency using pnpm. It is essential for integrating Melt UI's preprocessor with Svelte. No arguments or prior configuration are required aside from having pnpm installed.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @melt-ui/pp\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar Months and Weekday Headers - Svelte\nDESCRIPTION: Iterates over the `$months` store, rendering a `<table>` element for each month displayed. Inside each table, it creates a `<thead>` with `aria-hidden=\"true\"` and a row populated with table headers (`<th>`) using the `$weekdays` store to display the formatted names of the days of the week.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<div use:melt={$calendar}>\n\t<header>\n\t\t<button use:melt={$prevButton}> Previous Page </button>\n\t\t<div use:melt={$heading}>\n\t\t\t{$headingValue}\n\t\t</div>\n\t\t<button use:melt={$nextButton}> Next Page</button>\n\t</header>\n\t{#each $months as month}\n\t\t<table use:melt={$grid}>\n\t\t\t<thead aria-hidden=\"true\">\n\t\t\t\t<tr>\n\t\t\t\t\t{#each $weekdays as day}\n\t\t\t\t\t\t<th>{day}</th>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t</table>\n\t{/each}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling Fixed Weeks Rendering in Melt UI Date Picker Using Svelte\nDESCRIPTION: Configures the date picker to always render a fixed number of 6 weeks for each month calendar view to avoid UI jumps when switching between months of different lengths. This is achieved by setting the fixedWeeks prop to true in createDatePicker. The snippet requires '@melt-ui/svelte' and otherwise keeps the standard initialization with destructuring of states and elements.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatePicker, melt } from '@melt-ui/svelte'\n\nconst {\n\t/* ... */\n} = createDatePicker({\n\tfixedWeeks: true\n})\n```\n\n----------------------------------------\n\nTITLE: Context Menu Items with Click Handlers - Svelte\nDESCRIPTION: Shows how to add functionality to context menu items by attaching `m-click` event listeners.  Clicking these items will execute the provided JavaScript code. Also shows an example of an item using an `<a>` tag.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/context-menu.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<a href=\"/1\" use:melt={$item}>Item 1</a>\n<div use:melt={$item} on:m-click={(e) => console.log('Item 2!')}>Item 2</div>\n<div use:melt={$item} on:m-click={(e) => console.log('Item 3!')}>Item 3</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Builder Elements as Props to Components (Svelte/TS)\nDESCRIPTION: This snippet illustrates how to pass builder elements as props to other components. It shows how to define a generic `Button` component that accepts a Melt UI element as a prop and then uses that element within the button.  Typescript is used for type hinting of the element prop.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/usage.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Button.svelte -->\n<script lang=\"ts\">\n import { type AnyMeltElement, emptyMeltElement } from '@melt-ui/svelte'\n\n export let element: AnyMeltElement = emptyMeltElement\n</script>\n\n<button use:melt={$element}>\n <slot />\n</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Later, in +page.svelte -->\n<script>\n import { createCollapsible, melt } from '@melt-ui/svelte'\n import Button from './Button.svelte'\n\n const {\n  elements: { trigger }\n } = createCollapsible()\n</script>\n\n<Button element={trigger}>Toggle</Button>\n```\n\n----------------------------------------\n\nTITLE: Installing Melt UI Preprocessor with npm in Bash\nDESCRIPTION: This command installs the @melt-ui/pp preprocessor as a dev dependency using npm. It is required for enhanced developer experience with Melt UI in Svelte projects. The '-D' flag ensures the preprocessor is added as a development dependency. No further parameters are necessary.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @melt-ui/pp\n```\n\n----------------------------------------\n\nTITLE: Creating an Indeterminate Checkbox - Svelte/TS\nDESCRIPTION: This snippet demonstrates how to create an indeterminate checkbox using the `createCheckbox` builder function from `@melt-ui/svelte`. The `checked` argument is set to `'indeterminate'` during creation. Alternatively, the `checked` store can be set to `'indeterminate'` after creation using the `.set()` method. This indicates that the checkbox is neither checked nor unchecked.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/checkbox.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCheckbox } from '@melt-ui/svelte'\n\n\tconst { root, input, isChecked, isIndeterminate, checked } = createCheckbox({\n\t\tchecked: 'indeterminate'\n\t})\n\t// or\n\tchecked.set('indeterminate')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Date Picker Field with Segments and Popover Trigger in Svelte\nDESCRIPTION: Defines the date picker field markup binding each date segment using the segment builder and adds a trigger button that opens/closes the calendar popover. It iterates over segment contents to render individual date parts (day, month, year) and introduces accessibility by associating the label element. This snippet relies on reactive stores returned by createDatePicker and Melt UI's use:melt directive for binding behavior.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<span use:melt={$label}>Appointment Date</span>\n<div use:melt={$field}>\n\t{#each $segmentContents as seg}\n\t\t<div use:melt={$segment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n\t<div>\n\t\t<button use:melt={$trigger}>\n\t\t\t<span>Open Calendar</span>\n\t\t</button>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Link Preview Structure with createLinkPreview in Svelte\nDESCRIPTION: This snippet demonstrates how to initialize the link preview elements (`trigger`, `content`, `arrow`) using the `createLinkPreview` function from '@melt-ui/svelte'. It is used as the basis for constructing a customizable link preview component that responds to hover and focus events.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/link-preview.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createLinkPreview, melt } from '@melt-ui/svelte'\nconst {\n  elements: { trigger, content, arrow }\n} = createLinkPreview()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Date Range Field in Svelte\nDESCRIPTION: Sets up the basic structure for a Date Range Field by importing the necessary functions and destructuring the elements and states needed to construct the field.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Dates with isDateDisabled Matcher in Svelte Melt-UI\nDESCRIPTION: This snippet shows how to disable the first ten days of each month by providing an 'isDateDisabled' function that checks if a date's day component is less than or equal to 10. Disabled dates are not selectable or focusable.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n```svelte showLineNumbers {8-10}\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDateRangePicker({\n\t\tisDateDisabled: (date) => {\n\t\t\treturn date.day <= 10\n\t\t}\n\t})\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Melt Event Structure in TypeScript\nDESCRIPTION: Shows the TypeScript structure of a custom Melt event (e.g., `m-click`). These events wrap the original browser event (`originalEvent`) within the `detail` property and are `cancelable`, allowing `preventDefault()` to stop Melt UI's default event handling.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/controlled.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst customMeltEvent: MeltEvent<typeof originalEvent> = new CustomEvent(\n\t`m-${originalEvent.type}`,\n\t{\n\t\tdetail: {\n\t\t\toriginalEvent\n\t\t},\n\t\tcancelable: true\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Paged Navigation for Multi-Month Calendars in Svelte Melt-UI\nDESCRIPTION: This snippet shows how to activate paged navigation by setting 'pagedNavigation' to true, shifting the calendar by the number of months being displayed when navigation buttons are used. This creates a seamless browsing experience for multi-month views.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n```svelte showLineNumbers {8}\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDateRangePicker({\n\t\tnumberOfMonths: 2,\n\t\tpagedNavigation: true\n\t})\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Popover Behavior (Svelte)\nDESCRIPTION: Provides a Svelte component example demonstrating how to create a modal Popover using Melt UI. It configures `preventScroll: true` and utilizes the `overlay`, `trigger`, `content`, `arrow`, and `close` elements provided by the `createPopover` builder, applying them with the `melt` action.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/popover.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createPopover, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { content, trigger, overlay, close, arrow }\n\t} = createPopover({\n\t\tpreventScroll: true\n\t})\n</script>\n\n<button type=\"button\" use:melt={$trigger}> Open </button>\n<div use:melt={$overlay} />\n<div use:melt={$content}>\n\t<div use:melt={$arrow} />\n\t<div>\n\t\t<!-- ... -->\n\t</div>\n\t<button use:melt={$close}> Close </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Date Formatting in Melt UI Svelte Date Picker\nDESCRIPTION: This snippet demonstrates configuring the date picker with a 'locale' prop set to 'es' for Spanish, which automatically formats the calendar and input content accordingly. It utilizes '@melt-ui/svelte' and the 'createDatePicker' function to enable localization support.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDatePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDatePicker({\n\t\tlocale: 'es'\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Calendar Container - Svelte\nDESCRIPTION: This code snippet creates the root container for the calendar using a `div` element. The `use:melt={$calendar}` action binds the calendar element from the `createCalendar` builder to the `div`, making it the main container for the calendar components.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCalendar, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { calendar, heading, grid, cell, prevButton, nextButton },\n\t\tstates: { months, headingValue, weekdays },\n\t\thelpers: { isDateDisabled, isDateUnavailable }\n\t} = createCalendar()\n</script>\n\n<div use:melt={$calendar}>\n\t<!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Placeholder Month - Svelte\nDESCRIPTION: Configures the range calendar to display a specific month initially when no date is selected. This is achieved by passing a `CalendarDate` object from `@internationalized/date` representing the desired month to the `defaultPlaceholder` prop during the `createRangeCalendar` initialization.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createRangeCalendar({\n\t\tdefaultPlaceholder: new CalendarDate(2021, 2, 1)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Date Field with Validation Message\nDESCRIPTION: Example of a Date Field component with validation error messaging. The validation element displays an error message when the user selects an invalid date, and is automatically hidden when the field is valid.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-field.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<form method=\"POST\">\n\t<span use:melt={$label}>Appointment Date</span>\n\t<div use:melt={$field}>\n\t\t{#each $segmentContents as seg, i (i)}\n\t\t\t<div use:melt={$segment(seg.part)}>\n\t\t\t\t{seg.value}\n\t\t\t</div>\n\t\t{/each}\n\t\t<input use:melt={$hiddenInput} />\n\t</div>\n\t<small use:melt={$validation}> Date cannot be on the 1st or 15th of the month. </small>\n\t{#if !$isInvalid}\n\t\t<p>\n\t\t\tYou selected:\n\t\t\t{#if $value}\n\t\t\t\t{$value}\n\t\t\t{/if}\n\t\t</p>\n\t{/if}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Hidden Inputs for Form Submission with Svelte and Melt-UI\nDESCRIPTION: This snippet demonstrates how to utilize the createDateRangePicker function to generate hidden input elements that sync with date values for form submissions. It emphasizes setting 'startName' and 'endName' properties for proper input naming and shows how to use these inputs within Svelte using the 'melt' action.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n```svelte showLineNumbers {6,8-9,13-14}\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t\telements: { startHiddenInput, endHiddenInput /* ... */ }\n\t} = createDateRangePicker({\n\t\tstartName: 'checkIn',\n\t\tendName: 'checkOut'\n\t})\n</script>\n\n<input use:melt={$startHiddenInput} />\n<input use:melt={$endHiddenInput} />\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up Date Range Field (Svelte)\nDESCRIPTION: Sets up the date range field, including start and end date segments and a trigger button for the popover. It uses the `melt` action to bind the elements to their respective stores. The popover trigger is integrated directly within the field. Requires the `segmentContents`, `startSegment`, `endSegment` and `trigger` stores from the initialized `createDateRangePicker`.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<span use:melt={$label}>Hotel Nights</span>\n<div use:melt={$field}>\n\t{#each $segmentContents.start as seg}\n\t\t<div use:melt={$startSegment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n\t<div aria-hidden=\"true\">-</div>\n\t{#each $segmentContents.end as seg}\n\t\t<div use:melt={$endSegment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n\t<div>\n\t\t<button use:melt={$trigger}>\n\t\t\t<span>Open Calendar</span>\n\t\t</button>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Selectable Dates in Melt UI Calendar - Svelte TypeScript\nDESCRIPTION: This code snippet illustrates how to constrain the range of dates selectable in the calendar by using the `minValue` and `maxValue` props. Dates outside this range are automatically disabled. The snippet imports `CalendarDate` from '@internationalized/date' to create concrete date bounds and sets them to January 15, 2023, and February 15, 2023, respectively. A default placeholder date is also configured for usability. The snippet depends on the `createCalendar` function from '@melt-ui/svelte' and the date utility library for proper date handling.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCalendar, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createCalendar({\n\t\tdefaultPlaceholder: new CalendarDate(2023, 1, 25),\n\t\tminValue: new CalendarDate(2023, 1, 15),\n\t\tmaxValue: new CalendarDate(2023, 2, 15)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Date Validation with isDateUnavailable Matcher\nDESCRIPTION: Demonstrates how to implement date validation using a matcher function that checks if a date is the 1st or 15th of any month. The matcher function returns a boolean to indicate if the date is unavailable.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-field.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt, type Matcher } from '@melt-ui/svelte'\n\n\tconst isFirstOrFifteenth: Matcher = (date) => {\n\t\treturn date.day === 1 || date.day === 15\n\t}\n\n\tconst {\n\t\telements: { field, segment, label, hiddenInput, validation },\n\t\tstates: { value, segmentContents, isInvalid }\n\t} = createDateField({\n\t\tname: 'appointmentDate',\n\t\tisDateUnavailable: isFirstOrFifteenth\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Calendar Header with Navigation - Svelte\nDESCRIPTION: This snippet adds a header to the calendar containing the previous and next page navigation buttons, as well as the heading displaying the current month and year. It utilizes the `prevButton`, `heading`, `headingValue`, and `nextButton` elements from the `createCalendar` builder to compose the header.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCalendar, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { calendar, heading, grid, cell, prevButton, nextButton },\n\t\tstates: { months, headingValue, weekdays },\n\t\thelpers: { isDateDisabled, isDateUnavailable }\n\t} = createCalendar()\n</script>\n\n<div use:melt={$calendar}>\n\t<header>\n\t\t<button use:melt={$prevButton}> Previous Page </button>\n\t\t<div use:melt={$heading}>\n\t\t\t{$headingValue}\n\t\t</div>\n\t\t<button use:melt={$nextButton}> Next Page</button>\n\t</header>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Calendar Header and Navigation - Svelte\nDESCRIPTION: Adds a header section to the calendar UI. It includes buttons for navigating to the previous and next month/page, bound using the `melt` action with the `$prevButton` and `$nextButton` stores, and a visual heading displaying the current month/year from the `$headingValue` store.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<div use:melt={$calendar}>\n\t<header>\n\t\t<button use:melt={$prevButton}> Previous Page </button>\n\t\t<div use:melt={$heading}>\n\t\t\t{$headingValue}\n\t\t</div>\n\t\t<button use:melt={$nextButton}> Next Page</button>\n\t</header>\n\t<!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Default Value with Conditional User Data\nDESCRIPTION: Shows how to set a default value based on conditional user data. This pattern ensures the field always represents a specific type of date (CalendarDate), even when the user data might be undefined.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-field.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt } from '@melt-ui/svelte'\n\timport { CalendarDate, parseDate } from '@internationalized/date'\n\n\texport let data\n\n\tconst {\n\t\telements: { field, segment, label, hiddenInput },\n\t\tstates: { value, segmentContents }\n\t} = createDateField({\n\t\tname: 'birthday',\n\t\tdefaultPlaceholder: new CalendarDate(2023, 10, 11),\n\t\tdefaultValue: data?.userBirthday ? parseDate(data?.userBirthday) : undefined\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Popover State with External Store (TypeScript)\nDESCRIPTION: Illustrates controlling a Melt UI Popover's open state using an external Svelte `writable` store. The store is passed to the `open` property of the `createPopover` configuration.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/popover.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writable } from 'svelte/store';\n\nconst open = writable(false)\n\nconst popover = createPopover({\n\topen\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Preview with Hover Interaction in Svelte\nDESCRIPTION: This code shows how to assign the `trigger`, `content`, and `arrow` elements to DOM nodes using the `use:melt` action. The setup enables showing the preview content on hover, with the trigger being a button and the content containing nested elements, including an arrow. The use of `use:melt` binds the internal behavior of the link preview to the DOM elements.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/link-preview.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<button use:melt={$trigger}>Hover Me</button>\n\n<div use:melt={$content}>\n  <div>I am content inside the link preview</div>\n  <div use:melt={$arrow} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using isDateUnavailable to Mark Unavailable Dates in Melt UI Svelte Date Picker\nDESCRIPTION: This snippet assigns a matcher function to 'isDateUnavailable' that marks weekend dates as unavailable using '@internationalized/date' utility. It results in unavailable dates having a 'data-unavailable' attribute, useful for styling or interactions. It depends on '@melt-ui/svelte' and '@internationalized/date'.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDatePicker, melt } from '@melt-ui/svelte'\n\timport { isWeekend } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createDatePicker({\n\t\tisDateUnavailable: (date) => {\n\t\t\treturn isWeekend(date, 'en')\n\t\t}\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Melt UI Range Calendar Builder - Svelte\nDESCRIPTION: Initializes the `createRangeCalendar` builder function from `@melt-ui/svelte` and destructures its return value into `elements`, `states`, and `helpers`. These properties provide the necessary stores and functions to build a range calendar component.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { calendar, heading, grid, cell, prevButton, nextButton },\n\t\tstates: { months, headingValue, weekdays },\n\t\thelpers: { isDateDisabled, isDateUnavailable }\n\t} = createRangeCalendar()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using CalendarDateTime as defaultPlaceholder\nDESCRIPTION: Shows how to convert the Date Range Field to handle date and time by using a CalendarDateTime object as the defaultPlaceholder, adding time segments to the field.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\timport { CalendarDateTime } from '@internationalized/date'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField({\n\t\tdefaultPlaceholder: new CalendarDateTime(2023, 10, 11, 12, 30)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Item Behavior - Svelte\nDESCRIPTION: Demonstrates how to prevent the default behavior of a context menu item when it's clicked by calling `e.preventDefault()` within the `m-click` event handler.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/context-menu.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<div\n\tuse:melt={$item}\n\ton:m-click={(e) => {\n\t\te.preventDefault()\n\t}}>\n\tItem 2\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering and Validating a Melt UI Date Field in Svelte Markup\nDESCRIPTION: Demonstrates the use of Melt UI's melt Svelte action with labeled field, segments, and validation messaging UI. Inputs the relevant elements stores, loops through segmentContents for both start and end, and conditionally renders validation feedback. Dependencies: melt from @melt-ui/svelte, reactive stores. Handles required accessibility via aria attributes and supports styling using data-invalid attribute. Output: interactive, accessible field layout.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<span use:melt={$label}>Availability</span>\n<div use:melt={$field}>\n\t{#each $segmentContents.start as seg, i (i)}\n\t\t<div use:melt={$startSegment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n\t<div aria-hidden=\"true\">-</div>\n\t{#each $segmentContents.end as seg, i (i)}\n\t\t<div use:melt={$endSegment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n</div>\n<small use:melt={$validation}> Date cannot be on the 1st or 15th of the month. </small>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Navigation for Select Component in Svelte\nDESCRIPTION: Example demonstrating how to customize keyboard navigation for a Select component in Melt-UI. This implementation uses custom event listeners to change the selected option with arrow keys instead of opening the menu.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/select.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Preview code={snippets.keyboard}>\n    <svelte:component this={previews.keyboard} />\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Month Type Definition - Typescript\nDESCRIPTION: This TypeScript code defines the structure of a `Month` object used by the calendar. It includes properties for the month's `DateValue`, an array of weeks represented as `DateValue[][]`, and a flat array of all `DateValue` instances within the grid. This structure is critical for rendering the calendar grid.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Month = {\n\t/**\n\t * A `DateValue` used to represent the month. Since days\n\t * from the previous and next months are included in the\n\t * calendar grid, we need a source of truth for the value\n\t * the grid is representing.\n\t */\n\tvalue: DateValue\n\n\t/**\n\t * An array of arrays representing the weeks in the calendar.\n\t * Each sub-array represents a week, and contains the dates for each\n\t * day in that week. This structure is useful for rendering the calendar\n\t * grid using a table, where each row represents a week and each cell\n\t * represents a day.\n\t */\n\tweeks: DateValue[][]\n\n\t/**\n\t * An array of all the dates in the current month, including dates from\n\t * the previous and next months that are used to fill out the calendar grid.\n\t * This array is useful for rendering the calendar grid in a customizable way,\n\t * as it provides all the dates that should be displayed in the grid in a flat\n\t * array.\n\t */\n\tdates: DateValue[]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Toggle Component in Svelte with MeltUI\nDESCRIPTION: This snippet demonstrates three different methods to disable a Toggle component in Svelte using MeltUI. It shows setting the disabled state during initialization, using the set method, or using the update method to toggle the disabled state.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/toggle.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createToggle } from '@melt-ui/svelte'\n\n\tconst {\n\t\toptions: { disabled }\n\t} = createToggle({\n\t\tdisabled: true\n\t})\n\t// or\n\tdisabled.set(true)\n\t// or\n\tdisabled.update((d) => !d)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Integrating Hidden Input Element with Date Picker for HTML Form Usage in Svelte\nDESCRIPTION: Illustrates usage of the hiddenInput element from createDatePicker to include a hidden form input containing the ISO 8601 string of the selected date. The name prop is set to 'appointmentDate' so the input can submit the selected date with a form. The snippet binds label, field, segment, trigger, and hiddenInput elements to compose the accessible date picker form field. Requires '@melt-ui/svelte'.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\nimport { createDatePicker, melt } from '@melt-ui/svelte'\n\nconst {\n\t/* ... */\n\telements: { hiddenInput /* ... */ }\n} = createDatePicker({\n\tname: 'appointmentDate'\n})\n</script>\n\n<span use:melt={$label}>Appointment Date</span>\n<div use:melt={$field}>\n\t{#each $segmentContents as seg}\n\t\t<div use:melt={$segment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n\t<div>\n\t\t<button use:melt={$trigger}>\n\t\t\t<span>Open Calendar</span>\n\t\t</button>\n\t</div>\n\t<input use:melt={$hiddenInput} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Dates with isDateDisabled in Melt UI Svelte Date Picker\nDESCRIPTION: This code uses 'isDateDisabled' with a matcher function to disable dates where the day is less than or equal to 10. Disabled dates are not focusable or selectable, aiding in custom date restrictions. It utilizes '@melt-ui/svelte' and expects 'DateValue' objects.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDatePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDatePicker({\n\t\tisDateDisabled: (date) => {\n\t\t\treturn date.day <= 10\n\t\t}\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Locale-aware Date Formatting in Date Range Field - Melt UI Svelte\nDESCRIPTION: Shows how to enable locale-specific formatting in date range fields using the 'locale' prop with createDateRangeField. Here, the locale is set to German ('de'), affecting input segment rendering and placeholder format. Dependencies: @melt-ui/svelte. Input: locale string ('de'); Output: localized field UI. Extensible for any supported locale code.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label, validation },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField({\n\t\tlocale: 'de'\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Integration with Hidden Inputs\nDESCRIPTION: Extends the Date Range Field to work within forms by adding hidden inputs with ISO 8601 formatted date strings and displaying the selected value for feedback.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label, startHiddenInput, endHiddenInput },\n\t\tstates: { segmentContents, value }\n\t} = createDateField({\n\t\tstartName: 'tripStart',\n\t\tendName: 'tripEnd'\n\t})\n</script>\n\n<form method=\"POST\">\n\t<span use:melt={$label}>Trip Dates</span>\n\t<div use:melt={$field}>\n\t\t{#each $segmentContents.start as seg, i (i)}\n\t\t\t<div use:melt={$startSegment(seg.part)}>\n\t\t\t\t{seg.value}\n\t\t\t</div>\n\t\t{/each}\n\t\t<div aria-hidden=\"true\">-</div>\n\t\t{#each $segmentContents.end as seg, i (i)}\n\t\t\t<div use:melt={$endSegment(seg.part)}>\n\t\t\t\t{seg.value}\n\t\t\t</div>\n\t\t{/each}\n\t\t<input use:melt={$startHiddenInput} />\n\t\t<input use:melt={$endHiddenInput} />\n\t</div>\n\t<p>\n\t\tYou selected:\n\t\t{#if $value}\n\t\t\t{$value}\n\t\t{/if}\n\t</p>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating an Accordion with Multiple Items Open in Svelte\nDESCRIPTION: Shows how to enable multiple accordion items to be open simultaneously by passing the 'multiple' property as true to 'createAccordion'. This allows users to expand several sections at once.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/accordion.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst { /* ... */ } = createAccordion({\n  multiple: true\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Menu within a Menubar in Svelte\nDESCRIPTION: Demonstrates creating a single menu using the `createMenu` builder function obtained from `createMenubar`. It shows how to destructure menu elements (`menu`, `item`, `trigger`) and apply them to HTML elements using the `melt` action directive provided by Melt UI. This sets up a basic menubar structure with one trigger button and its associated menu.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/menubar.md#_snippet_1\n\nLANGUAGE: Svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createMenubar, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { menubar },\n\t\tbuilders: { createMenu }\n\t} = createMenubar()\n\tconst {\n\t\telements: { menu, item, trigger }\n\t} = createMenu()\n</script>\n\n<div use:melt={$menubar}>\n\t<button use:melt={$trigger}>Open Menu</button>\n\t<div use:melt={$menu}>\n\t\t<div {...$item} use:item>...</div>\n\t\t<div {...$item} use:item>...</div>\n\t\t<div {...$item} use:item>...</div>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Slider with Ticks Implementation in Svelte\nDESCRIPTION: Shows how to add ticks to a slider using the ticks state and the tick element provided by createSlider. Ticks provide visual markers along the slider track.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/slider.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Code not visible in the provided content, but referenced as snippets.ticks -->\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value and Placeholder in Date Range Field - Melt UI Svelte\nDESCRIPTION: This snippet shows how to use createDateRangeField from @melt-ui/svelte to set a 'defaultPlaceholder' and 'defaultValue' for a date range input in Svelte. It demonstrates precedence rules (value/defaultValue over placeholder) and how field segments are generated using CalendarDateTime and CalendarDate instances from @internationalized/date. Prerequisites: install @melt-ui/svelte and @internationalized/date. The field's segments display properly formatted start/end values, defaulting to CalendarDateTime if provided. Inputs: static dates; Output: interactive field; Limitation: placeholder and value types should match.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\timport { CalendarDateTime, CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField({\n\t\tdefaultPlaceholder: new CalendarDate(2023, 10, 11),\n\t\tdefaultValue: {\n\t\t\tstart: new CalendarDateTime(2023, 10, 11, 12, 30),\n\t\t\tend: new CalendarDateTime(2023, 10, 15, 12, 30)\n\t\t}\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: ARIA-Compliant Accessibility Pattern for Accordion with Custom Heading Level\nDESCRIPTION: Shows how to use the 'heading' builder with a specified level (e.g., level 4) to add ARIA attributes to non-heading elements, ensuring accessibility compliance when semantic heading tags are not used.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/accordion.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<span use:melt={$heading(4)}>\n  <button use:melt={$trigger(id)}>\n    {title}\n  </button>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Disabling Dates in Melt UI Calendar - Svelte TypeScript\nDESCRIPTION: This snippet shows how to use the `isDateDisabled` prop on the calendar builder by passing a matcher function that disables dates dynamically. The matcher function receives a `DateValue` object and returns a boolean indicating whether the date should be disabled and skipped by keyboard navigation. Here, the first 10 days of every month are disabled. Key dependencies include the `createCalendar` function from '@melt-ui/svelte'. The input is the current date object and the output is a boolean that controls disabled state.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCalendar, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createCalendar({\n\t\tisDateDisabled: (date) => {\n\t\t\treturn date.day <= 10\n\t\t}\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Field Container and Label to Date Range Field\nDESCRIPTION: Extends the basic setup by adding a label and container for the date field. The label is not an actual <label> element but is still accessible to screen readers.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField()\n</script>\n\n<span use:melt={$label}>Trip Dates</span>\n<div use:melt={$field}>\n\t<!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Menubar Builder in Svelte\nDESCRIPTION: Imports the `createMenubar` function from '@melt-ui/svelte' and calls it to initialize the menubar builder. It destructures the returned object to get the `elements.menubar` attributes object and the `builders.createMenu` function, which is used to create individual menus within the menubar.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/menubar.md#_snippet_0\n\nLANGUAGE: Svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createMenubar } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { menubar },\n\t\tbuilders: { createMenu }\n\t} = createMenubar()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Picker Placeholder Date Using CalendarDateTime in Svelte\nDESCRIPTION: Demonstrates setting the default placeholder date in the date picker to a specific date and time (February 1, 2021) by passing a CalendarDateTime object to the defaultPlaceholder option in createDatePicker. This controls how date segments render and the initial display in the calendar when no date is selected. Dependencies include '@melt-ui/svelte' and '@internationalized/date'.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatePicker, melt } from '@melt-ui/svelte'\nimport { CalendarDateTime } from '@internationalized/date'\n\nconst {\n\t/* ... */\n} = createDatePicker({\n\tdefaultPlaceholder: new CalendarDateTime(2021, 2, 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Readonly Segments in Date Field\nDESCRIPTION: Demonstrates how to make specific segments of a Date Field readonly while keeping others editable. This example makes only the year segment readonly, allowing users to change month and day.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-field.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt } from '$lib'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\telements: { field, segment, label },\n\t\tstates: { segmentContents }\n\t} = createDateField({\n\t\tdefaultValue: new CalendarDate(2023, 10, 11),\n\t\treadonlySegments: ['year']\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using onChange Function with Dialog - TypeScript\nDESCRIPTION: Demonstrates how to use the `onOpenChange` function to control the value of a store before it is set. This allows you to conditionally update the store based on a condition. The function receives the current and next values of the store.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/RELEASE_NOTES/the-big-bad.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDialog, type CreateDialogProps } from '@melt-ui/svelte'\n\nconst someCondition = false\n\nconst handleOpen: CreateDialogProps['onOpenChange'] = ({ curr, next }) => {\n\tif (!someCondition) {\n\t\treturn curr\n\t}\n\treturn next\n}\n\nconst {\n\telements: { trigger, overlay, content, title, description, close }\n} = createDialog({\n\tonOpenChange: handleOpen\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Melt UI Preprocessor Example with Call Expressions in Svelte\nDESCRIPTION: Demonstrates using the 'melt' preprocessor with builder functions that accept arguments. This example shows how the preprocessor can handle more complex scenarios including function calls with dependencies in an iterative context.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/preprocessor.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { createBuilder, melt } from '@melt-ui/svelte'\n\tconst { builder } = createBuilder()\n</script>\n\n{#each Array(100) as _, i}\n\t<!-- Just a normal call expression -->\n\t<div use:melt={$builder({ arg: i })} />\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider Implementation in Svelte\nDESCRIPTION: Demonstrates how to create a vertical slider by setting the orientation prop to 'vertical'. This changes the slider's direction from horizontal to vertical.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/slider.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Code not visible in the provided content, but referenced as snippets.vertical -->\n```\n\n----------------------------------------\n\nTITLE: Disabling an Accordion Item in Svelte\nDESCRIPTION: Demonstrates how to disable a specific accordion item by passing an object with 'disabled' set to true. Utilizes Svelte's 'use:melt' action for item configuration.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/accordion.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"accordion-item\" use:melt={$item({ value: 'item-3', disabled: true })}>Item 3</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Collapsible Builder with Melt UI in Svelte\nDESCRIPTION: This Svelte snippet demonstrates the use of the createCollapsible builder from @melt-ui/svelte. It initializes a collapsible component's root, content, and trigger elements, along with reactive open state tracking. The melt action is used to apply all necessary accessibility attributes and event handlers automatically to each element. The code requires the @melt-ui/svelte package as a dependency and operates within Svelte's reactive framework. Inputs include the DOM elements assigned the builder props, and outputs provide controlled collapsible open/close states handled seamlessly. This example highlights Melt UI's builder approach allowing high flexibility without predefined styles while ensuring accessibility compliance.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/introduction.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { createCollapsible, melt } from '@melt-ui/svelte'\n\tconst {\n\t\telements: { root, content, trigger },\n\t\tstates: { open }\n\t} = createCollapsible()\n</script>\n\n<div use:melt={$root}>\n\t<button use:melt={$trigger}>{$open ? 'Close' : 'Open'}</button>\n\t<div use:melt={$content}>Obi-Wan says: Hello there!</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Date Validation Matchers\nDESCRIPTION: Illustrates how to combine multiple matcher functions to validate dates. This example checks if a date is either a weekend or the 1st/15th of the month, making those dates unavailable.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-field.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt, type Matcher } from '@melt-ui/svelte'\n\n\tconst isFirstOrFifteenth: Matcher = (date) => {\n\t\treturn date.day === 1 || date.day === 15\n\t}\n\n\tconst isWeekend: Matcher = (date) => {\n\t\treturn date.dayOfWeek === 0 || date.dayOfWeek === 6\n\t}\n\n\tconst isDateUnavailable: Matcher = (date) => {\n\t\treturn isFirstOrFifteenth(date) || isWeekend(date)\n\t}\n\n\tconst {\n\t\telements: { field, segment, label, hiddenInput, validation },\n\t\tstates: { value, segmentContents, isInvalid }\n\t} = createDateField({\n\t\tname: 'appointmentDate',\n\t\tisDateUnavailable\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Modal Context Menu with Overlay - Svelte/TS\nDESCRIPTION: Implements modal behavior for the context menu by using the `overlay` element. The overlay prevents interaction with elements outside the context menu when it's open.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/context-menu.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createContextMenu, melt } from '@melt-ui/svelte'\n\tconst {\n\t\telements: { trigger, menu, item, separator, arrow, overlay }\n\t} = createContextMenu()\n</script>\n\n<div use:melt={$trigger}>Right click to open</div>\n<div use:melt={$overlay} />\n<div use:melt={$menu}>\n\t<div use:melt={$arrow} />\n\t<div use:melt={$item} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: RTL Horizontal Slider Implementation in Svelte\nDESCRIPTION: Shows how to enable Right-to-Left (RTL) support for a horizontal slider by setting the rtl prop to true. This reverses the direction of the slider for RTL languages.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/slider.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Code not visible in the provided content, but referenced as snippets.rtl_horizontal -->\n```\n\n----------------------------------------\n\nTITLE: Setting Default Selected Date Range - Svelte\nDESCRIPTION: Sets a pre-selected date range when the calendar component initializes. This is done by providing a `DateRange` object (containing `start` and `end` `CalendarDate` values from `@internationalized/date`) to the `defaultValue` prop of the `createRangeCalendar` builder.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createRangeCalendar({\n\t\tdefaultValue: {\n\t\t\tstart: new CalendarDate(2024, 1, 11),\n\t\t\tend: new CalendarDate(2024, 1, 15)\n\t\t}\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: RTL Vertical Slider Implementation in Svelte\nDESCRIPTION: Demonstrates a vertical slider with RTL enabled, which changes the functionality from bottom-to-top to top-to-bottom. This example shows how vertical orientation works with RTL settings.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/slider.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Code not visible in the provided content, but referenced as snippets.rtl_vertical -->\n```\n\n----------------------------------------\n\nTITLE: Installing Melt UI Preprocessor with yarn in Bash\nDESCRIPTION: This snippet uses yarn to add the @melt-ui/pp package as a dev dependency in your Svelte project. The command should be executed at the root level. The library will be available for use in your build configuration after installation.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @melt-ui/pp\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Date Field\nDESCRIPTION: Shows how to set the locale for a Date Field component, which automatically formats the segments and placeholder based on the specified locale. This example uses German locale.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-field.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateField, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { field, segment, label, hiddenInput },\n\t\tstates: { value, segmentContents }\n\t} = createDateField({\n\t\tname: 'appointmentDate',\n\t\tlocale: 'de'\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Calendar Grid with Months and Weekdays - Svelte\nDESCRIPTION: This snippet iterates over the months in the calendar and renders each month as a table. It also renders the weekdays as column headers in the table. The `months` store and `weekdays` state are used to generate the table structure.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCalendar, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { calendar, heading, grid, cell, prevButton, nextButton },\n\t\tstates: { months, headingValue, weekdays },\n\t\thelpers: { isDateDisabled, isDateUnavailable }\n\t} = createCalendar()\n</script>\n\n<div use:melt={$calendar}>\n\t<header>\n\t\t<button use:melt={$prevButton}> Previous Page </button>\n\t\t<div use:melt={$heading}>\n\t\t\t{$headingValue}\n\t\t</div>\n\t\t<button use:melt={$nextButton}> Next Page</button>\n\t</header>\n\t{#each $months as month}\n\t\t<table use:melt={$grid}>\n\t\t\t<thead aria-hidden=\"true\">\n\t\t\t\t<tr>\n\t\t\t\t\t{#each $weekdays as day}\n\t\t\t\t\t\t<th>{day}</th>\n\t\t\t\t\t{/each}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t</table>\n\t{/each}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Months in Svelte Melt-UI Date Picker\nDESCRIPTION: This snippet demonstrates how to show multiple months by setting the 'numberOfMonths' property. It allows users to view and select dates across more than one calendar month simultaneously.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n```svelte showLineNumbers {7}\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDateRangePicker({\n\t\tnumberOfMonths: 2\n\t})\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Paged Navigation in Melt UI Svelte Date Picker\nDESCRIPTION: This code sets the 'pagedNavigation' prop to true while specifying 'numberOfMonths' as 2, allowing the calendar to shift forward or backward by the number of visible months using the navigation buttons. It relies on '@melt-ui/svelte' and is intended to improve navigation experience when viewing multiple months.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDatePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDatePicker({\n\t\tnumberOfMonths: 2,\n\t\tpagedNavigation: true\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Grouping Options in Svelte Combobox\nDESCRIPTION: Shows how to group combobox options using `group` and `groupLabel` elements within the dropdown menu, enhancing the organization and usability of large option sets. This feature supports logical categorization of selectable options which helps users to navigate and find desired items faster. Dependencies include proper markup within the component to define group containers and group labels, allowing the component to render visual groupings inside the popup menu.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/combobox.md#_snippet_2\n\nLANGUAGE: Svelte\nCODE:\n```\n<Preview code={snippets.group}>\n  <svelte:component this={previews.group} />\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Date (Svelte/TS)\nDESCRIPTION: Sets the default placeholder date for the Date Range Picker. It utilizes the `defaultPlaceholder` prop and the `CalendarDateTime` object from `@internationalized/date`. This determines what date is initially displayed when no date is selected. Requires `@internationalized/date` and `@melt-ui/svelte` dependencies.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\timport { CalendarDateTime } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createDateRangePicker({\n\t\tdefaultPlaceholder: new CalendarDateTime(2021, 2, 1)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling a Switch Component in Svelte with Melt UI\nDESCRIPTION: This snippet demonstrates how to create and disable a switch component using the createSwitch builder function from Melt UI. It shows two methods for disabling: setting the disabled property during initialization or updating the options after creation.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/switch.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createSwitch } from '@melt-ui/svelte'\n\n\tconst { root, input, checked, isChecked, options } = createSwitch({\n\t\tdisabled: true\n\t})\n\t// or\n\toptions.update((prev) => ({ ...prev, disabled: true }))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar Popover Content for Date Picker in Svelte\nDESCRIPTION: Creates the calendar UI inside the popover content using the calendar and popover builders. It includes navigation buttons for previous and next months, a heading displaying the current month, and a grid representing weeks and days. Each date cell conditionally disables interaction if the date is disabled or unavailable. This snippet dynamically renders month data and uses ARIA attributes to improve accessibility of the date grid.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<span use:melt={$label}>Appointment Date</span>\n<div use:melt={$field}>\n\t{#each $segmentContents as seg}\n\t\t<div use:melt={$segment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n\t<div>\n\t\t<button use:melt={$trigger}>\n\t\t\t<span>Open Calendar</span>\n\t\t</button>\n\t</div>\n</div>\n<div use:melt={$content}>\n\t<div use:melt={$calendar}>\n\t\t<header>\n\t\t\t<button use:melt={$prevButton}>\n\t\t\t\t<span>Previous Month</span>\n\t\t\t</button>\n\t\t\t<div use:melt={$heading}>\n\t\t\t\t{$headingValue}\n\t\t\t</div>\n\t\t\t<button use:melt={$nextButton}>\n\t\t\t\t<span>Next Month</span>\n\t\t\t</button>\n\t\t</header>\n\t\t{#each $months as month}\n\t\t\t<table use:melt={$grid}>\n\t\t\t\t<thead aria-hidden=\"true\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t{#each $weekdays as day}\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t{day}\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{#each month.weeks as days}\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t{#each days as date}\n\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\trole=\"gridcell\"\n\t\t\t\t\t\t\t\t\taria-disabled={$isDateDisabled(date) || $isDateUnavailable(date)}>\n\t\t\t\t\t\t\t\t\t<div use:melt={$cell(date, month.value)}>\n\t\t\t\t\t\t\t\t\t\t{date.day}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t{/each}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t{/each}\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Marking Unavailable Dates Using isDateUnavailable Matcher in Svelte Melt-UI\nDESCRIPTION: This snippet demonstrates defining a function that marks weekend dates as unavailable, using the 'isDateUnavailable' prop. It leverages '@internationalized/date' to identify weekends and applies a 'data-unavailable' attribute for styling.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n```svelte showLineNumbers {8-10}\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\timport { isWeekend } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createDateRangePicker({\n\t\tisDateUnavailable: (date) => {\n\t\t\treturn isWeekend(date, 'en')\n\t\t}\n\t})\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Label with Melt UI in Svelte (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the createLabel builder from the @melt-ui/svelte package to initialize a label element and apply it to an input using the melt action. It requires Melt UI to be installed as a dependency, and the Svelte compiler with TypeScript enabled. Key variables include root, which references the root label element, and the $root action, which binds accessibility behavior. The label is applied to an input for improved accessibility. The for attribute on the label and id on the input must match.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/label.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createLabel, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { root }\n\t} = createLabel()\n</script>\n\n<label for=\"name\" use:melt={$root}>Name</label>\n<input type=\"text\" id=\"name\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering a Pagination Component in Svelte\nDESCRIPTION: This Svelte code snippet demonstrates how to use the `createPagination` builder from `@melt-ui/svelte`. It initializes the pagination state with parameters like `count`, `perPage`, `defaultPage`, and `siblingCount`. The returned elements (`root`, `pageTrigger`, `prevButton`, `nextButton`) and states (`pages`, `range`) are then used with the `melt` action to create the interactive pagination UI, including conditionally rendering ellipsis elements based on the `page.type`.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/pagination.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createPagination, melt } from '@melt-ui/svelte'\n\tconst {\n\t\telements: { root, pageTrigger, prevButton, nextButton },\n\t\tstates: { pages, range }\n\t} = createPagination({\n\t\tcount: 100,\n\t\tperPage: 10,\n\t\tdefaultPage: 1,\n\t\tsiblingCount: 1\n\t})\n</script>\n\n<nav use:melt={$root}>\n\t<p>Showing items {$range.start} - {$range.end}</p>\n\t<div>\n\t\t<button use:melt={$prevButton}>Prev</button>\n\t\t{#each $pages as page (page.key)}\n\t\t\t{#if page.type === 'ellipsis'}\n\t\t\t\t<span>...</span>\n\t\t\t{:else}\n\t\t\t\t<button use:melt={$pageTrigger(page)}>{page.value}</button>\n\t\t\t{/if}\n\t\t{/each}\n\t\t<button use:melt={$nextButton}>Next</button>\n\t</div>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Setting Localization Locale in Melt UI Range Calendar (Svelte)\nDESCRIPTION: Shows usage of the 'locale' prop during creation of the range calendar to change the displayed calendar format according to a specified locale string recognized by Intl.DateTimeFormat. Defaults to 'en-US' but can be changed to other locales like 'es'. Requires '@melt-ui/svelte' and Intl support. Input is locale string, output is locale-specific formatted calendar UI.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\\n\\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\\n\\n\\tconst {\\n\\t\\t/* ... */\\n\\t} = createRangeCalendar({\\n\\t\\tlocale: 'es'\\n\\t})\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feature/Bugfix Branch using Git (Shell)\nDESCRIPTION: Explains how to create and switch to a new local Git branch, typically named according to the feature or bug being addressed (e.g., 'fix/bug-being-fixed'). This isolates changes for a specific pull request. Requires Git and a cloned repository.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b fix/bug-being-fixed\n```\n\n----------------------------------------\n\nTITLE: Creating a Zoned Date & Time Field with Specific Timezone\nDESCRIPTION: Shows how to create a Date Range Field with a specific time zone by hardcoding it in the now function.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\timport { now } from '@internationalized/date'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField({\n\t\tdefaultPlaceholder: now('America/Los_Angeles')\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Date Picker with Melt UI in Svelte\nDESCRIPTION: Initializes the Date Picker using the createDatePicker function from '@melt-ui/svelte'. It destructures elements (calendar parts, buttons, field segments), states (months, heading, weekdays, segment contents), and helpers (functions to check date availability) needed to construct the date picker UI. This snippet sets up the core reactive components required for the date picker’s interactivity and accessibility.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatePicker } from '@melt-ui/svelte'\n\nconst {\n\telements: {\n\t\tcalendar,\n\t\tcell,\n\t\tcontent,\n\t\tfield,\n\t\tgrid,\n\t\theading,\n\t\tlabel,\n\t\tnextButton,\n\t\tprevButton,\n\t\tsegment,\n\t\ttrigger\n\t},\n\tstates: { months, headingValue, weekdays, segmentContents },\n\thelpers: { isDateDisabled, isDateUnavailable }\n} = createDatePicker()\n```\n\n----------------------------------------\n\nTITLE: Rendering Date Segments Using segmentContents\nDESCRIPTION: Demonstrates the recommended approach for rendering date segments by using the segmentContents state, which provides locale-aware formatting and adapts to different date types.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField()\n</script>\n\n<span use:melt={$label}>Trip Dates</span>\n<div use:melt={$field}>\n\t{#each $segmentContents.start as seg, i (i)}\n\t\t<div use:melt={$startSegment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n\t<div aria-hidden=\"true\">-</div>\n\t{#each $segmentContents.end as seg, i (i)}\n\t\t<div use:melt={$endSegment(seg.part)}>\n\t\t\t{seg.value}\n\t\t</div>\n\t{/each}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the Value Store (Svelte/TS)\nDESCRIPTION: Demonstrates how to access and display the selected date range using the `value` store. Displays the `start` and `end` values. Depends on initializing the date range picker and passing a `defaultValue`. Requires `@internationalized/date` and `@melt-ui/svelte` dependencies.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t\tstates: { value /* ... */ }\n\t} = createDateRangePicker({\n\t\tdefaultValue: {\n\t\t\tstart: new CalendarDate(2024, 1, 11),\n\t\t\tend: new CalendarDate(2024, 1, 15)\n\t\t}\n\t})\n</script>\n\n<span>You Selected: {$value.start} - {$value.end}</span>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Matcher Type for Date Validation - TypeScript\nDESCRIPTION: This TypeScript code defines a Matcher type used for date validation within date fields. Dependencies: none; the type is meant for consumption by Melt UI date fields, describing a function that receives a DateValue and returns true if invalid/unavailable. Inputs: DateValue; Outputs: boolean. Used to configure validation logic in UI components.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype Matcher = (date: DateValue) => boolean\n```\n\n----------------------------------------\n\nTITLE: Initializing Date Range Picker (Svelte/TS)\nDESCRIPTION: Initializes the Date Range Picker using the `createDateRangePicker` function from `@melt-ui/svelte`.  It destructures the returned elements, states, and helpers for use in the component. Requires `@melt-ui/svelte` dependency. This snippet sets up the basic building blocks for creating a functional date range picker.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangePicker } from '@melt-ui/svelte'\n\tconst {\n\t\telements: {\n\t\t\tcalendar,\n\t\t\tcell,\n\t\t\tcontent,\n\t\t\tfield,\n\t\t\tgrid,\n\t\t\theading,\n\t\t\tlabel,\n\t\t\tnextButton,\n\t\t\tprevButton,\n\t\t\tstartSegment,\n\t\t\tendSegment,\n\t\t\ttrigger\n\t\t},\n\t\tstates: { months, headingValue, weekdays, segmentContents },\n\t\thelpers: { isDateDisabled, isDateUnavailable }\n\t} = createDateRangePicker()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Context Menu Structure - Svelte\nDESCRIPTION: Demonstrates the basic structure of a context menu using the `menu`, `item`, and `trigger` elements created by `createContextMenu`. The trigger is a button outside the menu. The items are placed within the menu.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/context-menu.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createContextMenu, melt } from '@melt-ui/svelte'\n\tconst {\n\t\telements: { menu, item, trigger, arrow }\n\t} = createContextMenu()\n</script>\n\n<button use:melt={$trigger}>Click me</button>\n<div use:melt={$menu}>\n\t<div use:melt={$item}>...</div>\n\t<div use:melt={$item}>...</div>\n\t<div use:melt={$item}>...</div>\n\t<div use:melt={$arrow} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Exporting Props in Svelte\nDESCRIPTION: This Svelte script block handles component imports and prop exports. It imports helper components `APIReference` and `KbdTable` from a documentation-specific path. It also exports the `schemas` and `keyboard` properties, which are expected inputs used to render documentation sections.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/table-of-contents.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\nimport { APIReference, KbdTable } from '$docs/components'\nexport let schemas\nexport let keyboard\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with createCalendar - Svelte\nDESCRIPTION: This snippet initializes a calendar using the `createCalendar` builder from `@melt-ui/svelte`. It destructures elements, states, and helpers for composing the calendar. The elements include calendar parts like heading, grid, cell, and navigation buttons, while the states manage the months, heading value, and weekdays.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCalendar, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { calendar, heading, grid, cell, prevButton, nextButton },\n\t\tstates: { months, headingValue, weekdays },\n\t\thelpers: { isDateDisabled, isDateUnavailable }\n\t} = createCalendar()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Constructing Dropdown Menu Structure in Svelte\nDESCRIPTION: This code block shows how to assemble a dropdown menu using the elements provided by createDropdownMenu. The trigger button toggles the menu, with menu items rendered inside the menu container and an optional arrow indicator. The melt action binds the elements to DOM nodes.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/dropdown-menu.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createDropdownMenu, melt } from '@melt-ui/svelte'\nconst {\n  elements: { menu, item, trigger, arrow }\n} = createDropdownMenu()\n\n<button use:melt={$trigger}>Click me</button>\n<div use:melt={$menu}>\n  <div use:melt={$item}>...</div>\n  <div use:melt={$item}>...</div>\n  <div use:melt={$item}>...</div>\n  <div use:melt={$arrow} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menu Elements with createDropdownMenu in Svelte\nDESCRIPTION: This snippet demonstrates how to initialize the dropdown menu components using the createDropdownMenu function from '@melt-ui/svelte'. It extracts the menu, item, trigger, and arrow elements for constructing a dropdown menu structure in Svelte components.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/dropdown-menu.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { createDropdownMenu, melt } from '@melt-ui/svelte'\nconst {\n  elements: { menu, item, trigger, arrow }\n} = createDropdownMenu()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Selected Value - Svelte\nDESCRIPTION: This snippet demonstrates setting a default selected date for the calendar using the `defaultValue` prop in the `createCalendar` function. This sets an initial date as selected on calendar initialization. Requires `@internationalized/date` for `CalendarDate`.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCalendar, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createCalendar({\n\t\tdefaultValue: new CalendarDate(2024, 1, 11)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounced Input in Svelte Combobox\nDESCRIPTION: Illustrates how to debounce user input in the combobox's input field to reduce frequent calls to external resources, such as server requests, thereby improving performance. The example applies a debounce pattern that delays handling user input until a pause in typing occurs, typically using a timeout technique. This snippet depends on JavaScript functions for debouncing and integrates with Svelte's reactive component rendering to update the dropdown list accordingly.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/combobox.md#_snippet_1\n\nLANGUAGE: Svelte\nCODE:\n```\n<Preview code={snippets.debounce}>\n  <svelte:component this={previews.debounce} />\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Selection Prop in Svelte Combobox\nDESCRIPTION: Demonstrates the usage of a `multiple` boolean property in the combobox component allowing users to select more than one option from the dropdown list. This snippet is useful when an application requires multiple-value inputs and it leverages Svelte's component API to manage array of selected values. It expects the `multiple` prop to toggle between single and multiple selection modes and outputs the current selected items accordingly.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/combobox.md#_snippet_0\n\nLANGUAGE: Svelte\nCODE:\n```\n<Preview code={snippets.multi}>\n  <svelte:component this={previews.multi} />\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Controlling Accordion State Programmatically with Svelte Store\nDESCRIPTION: Illustrates how to manage accordion open states programmatically using Svelte's writable store. Includes an example of changing the active item via a button, demonstrating reactive control over the accordion's behavior.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/accordion.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n<script lang=\"ts\">\nimport { createAccordion, melt } from '@melt-ui/svelte'\nimport { writable } from 'svelte/store'\n\nconst customValue = writable('item-1')\n\nconst {\n  elements: { content, item, trigger, root },\n  options: { disabled },\n  states: { value }\n} = createAccordion({\n  value: customValue\n})\n</script>\n\n<button\n  on:click={() => {\n    const randPick = Math.floor(Math.random() * 3) + 1\n    customValue.set(`item-${randPick}`)\n  }}>\n  Trigger randomly\n</button>\n\n<p>Value: {$value}</p>\n\n<div use:melt={$root}>\n  <div use:melt={$item('item-1')}>\n    <button use:melt={$trigger('item-1')}>Is it accessible?</button>\n    <div use:melt={$content('item-1')}>\n      <div>Yes. It adheres to the WAI-ARIA design pattern.</div>\n    </div>\n  </div>\n  <!-- Additional items omitted for brevity -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Menus in a Menubar in Svelte\nDESCRIPTION: Illustrates how to create a menubar containing multiple distinct menus ('File', 'Edit', 'Help'). It involves calling the `createMenu` builder function multiple times, once for each menu, and renaming the destructured variables (e.g., `menuA`, `itemA`, `triggerA`) to avoid naming collisions within the same script scope. The corresponding trigger buttons and menu divs are then structured within the main menubar container.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/menubar.md#_snippet_2\n\nLANGUAGE: Svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createMenubar, melt } from '@melt-ui/svelte'\n\n\tconst { menubar, createMenu } = createMenubar()\n\tconst { menu, item, trigger } = createMenu()\n\tconst { menu: menuA, item: itemA, trigger: triggerA } = createMenu()\n\tconst { menu: menuB, item: itemB, trigger: triggerB } = createMenu()\n</script>\n\n<div use:melt={$menubar}>\n\t<button use:melt={$trigger}>File</button>\n\t<div use:melt={$menu}>\n\t\t<div {...$item} use:item>...</div>\n\t\t<div {...$item} use:item>...</div>\n\t\t<div {...$item} use:item>...</div>\n\t</div>\n\n\t<button use:melt={$triggerA}>Edit</button>\n\t<div use:melt={$menuA}>\n\t\t<div {...$itemA} use:itemA>...</div>\n\t\t<div {...$itemA} use:itemA>...</div>\n\t\t<div {...$itemA} use:itemA>...</div>\n\t</div>\n\n\t<button use:melt={$triggerB}>Help</button>\n\t<div use:melt={$menuB}>\n\t\t<div {...$itemB} use:itemB>...</div>\n\t\t<div {...$itemB} use:itemB>...</div>\n\t\t<div {...$itemB} use:itemB>...</div>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Weeks for Consistent Calendar Height in Svelte Melt-UI\nDESCRIPTION: This snippet illustrates enabling the fixedWeeks feature by setting the 'fixedWeeks' prop to true when creating the date range picker. It ensures the calendar always displays six weeks, providing UI consistency across different months.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n```svelte showLineNumbers {7}\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDateRangePicker({\n\t\tfixedWeeks: true\n\t})\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Using Change Function (onOpenChange) in Melt UI Dialog (Svelte)\nDESCRIPTION: Illustrates the use of a change function (`onOpenChange`) passed to the `createDialog` builder. This function intercepts potential state changes, receiving the current (`curr`) and next (`next`) proposed values. It allows custom logic to decide the final state value, enabling fine-grained control over state transitions, such as preventing opening based on a condition.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/controlled.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDialog, type CreateDialogProps } from '@melt-ui/svelte'\n\n\tconst someCondition = false\n\n\tconst handleOpen: CreateDialogProps['onOpenChange'] = ({ curr, next }) => {\n\t\tif (!someCondition) {\n\t\t\treturn curr // Prevent opening if condition is false\n\t\t}\n\t\treturn next // Allow opening otherwise\n\t}\n\n\tconst {\n\t\telements: { trigger, overlay, content, title, description, close }\n\t} = createDialog({\n\t\tonOpenChange: handleOpen\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Shadow DOM Implementation for Slider in Svelte\nDESCRIPTION: Shows how to use the rootElement property to override the default document querying behavior, which is useful when implementing the slider inside a shadow DOM.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/slider.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Code not visible in the provided content, but referenced as snippets.shadow -->\n```\n\n----------------------------------------\n\nTITLE: Enabling Fixed Weeks Layout in Melt UI Range Calendar with Svelte\nDESCRIPTION: Shows how to configure the createRangeCalendar function with the 'fixedWeeks' boolean prop set to true. This ensures the calendar displays a constant number of weeks regardless of the month, preventing UI height jumps during navigation. Depends on '@melt-ui/svelte' and Svelte framework. Input includes user navigation; output is a visually stable calendar UI. Useful for consistent layout in calendar components.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\\n\\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\\n\\n\\tconst {\\n\\t\\t/* ... */\\n\\t} = createRangeCalendar({\\n\\t\\tfixedWeeks: true\\n\\t})\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Events in Link Preview Trigger in Svelte\nDESCRIPTION: This snippet demonstrates how to disable the default focus (keyboard) handling for the link preview trigger by preventing `m-focus` and `m-blur` events. It is useful for customizing interaction behavior, especially to prevent showing the preview on keyboard focus, maintaining accessibility control.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/link-preview.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<button\n  use:melt={$trigger}\n  on:m-focus={(e) => {\n    e.preventDefault()\n  }}\n  on:m-blur={(e) => {\n    e.preventDefault()\n  }}>\n  Hover Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Months in Melt UI Range Calendar using Svelte\nDESCRIPTION: Illustrates creating a range calendar configured with the 'numberOfMonths' prop to display more than one month in the calendar view. This enhances user experience by showing multiple months simultaneously. Requires '@melt-ui/svelte' and basic Svelte setup. Inputs are number of months desired, output is calendar rendering multiple months side-by-side.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/range-calendar.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\\n\\timport { createRangeCalendar, melt } from '@melt-ui/svelte'\\n\\n\\tconst {\\n\\t\\t/* ... */\\n\\t} = createRangeCalendar({\\n\\t\\tnumberOfMonths: 2\\n\\t})\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Months Display in Melt UI Svelte Date Picker\nDESCRIPTION: This snippet initializes the date picker with the 'numberOfMonths' prop set to 2, enabling the calendar to display two months simultaneously. It depends on '@melt-ui/svelte' and uses the 'createDatePicker' function. The purpose is to enhance user visibility of dates across multiple months.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDatePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDatePicker({\n\t\tnumberOfMonths: 2\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Dialog Component\nDESCRIPTION: This code snippet initializes a basic dialog component using `createDialog` from `@melt-ui/svelte`. It defines the elements and states required for a functional dialog, including trigger, portalled container, overlay, content, title, description, and close button. The code then demonstrates how to integrate these elements into a Svelte component using `use:melt` directives.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/dialog.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDialog, melt } from '@melt-ui/svelte'\n\tconst {\n\t\telements: { trigger, portalled, overlay, content, title, description, close },\n\t\tstates: { open }\n\t} = createDialog()\n</script>\n\n<button use:melt={$trigger}> Open Dialog </button>\n\n{#if $open}\n\t<div use:melt={$portalled}>\n\t\t<div use:melt={$overlay} />\n\t\t<div use:melt={$content}>\n\t\t\t<h2 use:melt={$title}>Dialog Title</h2>\n\t\t\t<p use:melt={$description}>Dialog description</p>\n\t\t\t<button use:melt={$close}> Close Dialog </button>\n\t\t</div>\n\t</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Disabling Close on Outside Click\nDESCRIPTION: This snippet demonstrates how to disable the default behavior of closing the dialog when clicking outside of it. Setting the `closeOnOutsideClick` property to `false` ensures that the dialog remains open until explicitly closed by the user. This is useful when you need to ensure the user interacts directly with the dialog's content.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/dialog.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst {\n\t/* ... */\n} = createDialog({\n\tcloseOnOutsideClick: false\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Thumbs with Auto-Sorting Disabled in Svelte\nDESCRIPTION: Demonstrates how to disable the auto-sorting behavior by setting autoSort to false, allowing thumbs to be moved past each other without reordering the values array.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/slider.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Code not visible in the provided content, but referenced as snippets.multiple -->\n```\n\n----------------------------------------\n\nTITLE: Using the Writable Value Store from createDatePicker to Display Selected Date in Svelte\nDESCRIPTION: Shows how to destructure the value store from createDatePicker's states to reactively display the currently selected date in markup. The store contains a DateValue object which updates as the user selects dates. This enables dynamic UI updates or side effects based on date selection. This snippet requires '@melt-ui/svelte' and '@internationalized/date'.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatePicker, melt } from '@melt-ui/svelte'\nimport { CalendarDate } from '@internationalized/date'\n\nconst {\n\t/* ... */\n\tstates: { value /* ... */ }\n} = createDatePicker({\n\tdefaultValue: new CalendarDate(2024, 1, 11)\n})\n\n</script>\n\n<span>You Selected: {$value}</span>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components (JavaScript/Svelte)\nDESCRIPTION: This script block imports the `APIReference` component from the project's documentation utilities (`$docs/components`) and declares an exported reactive variable `schemas`. This pattern is used within a Svelte component to receive data (like API schemas) as a prop and potentially pass it to child components like `APIReference`.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/separator.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    import { APIReference } from '$docs/components'\n    export let schemas\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling a Checkbox - Svelte/TS\nDESCRIPTION: This snippet demonstrates how to disable a checkbox using the `createCheckbox` builder function from `@melt-ui/svelte`. The `disabled` argument is set to `true` during creation, making the checkbox non-interactive. Alternatively, the `options` store can be updated to include `{ disabled: true }` after creation using the `.update()` method. This prevents the user from toggling the checkbox state.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/checkbox.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCheckbox } from '@melt-ui/svelte'\n\n\tconst { root, input, isChecked, isIndeterminate, checked, options } = createCheckbox({\n\t\tdisabled: true\n\t})\n\t// or\n\toptions.update((prev) => ({ ...prev, disabled: true }))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Melt UI via CLI in Bash\nDESCRIPTION: This snippet demonstrates how to initialize a Melt UI project using the Melt UI CLI tool in the terminal. It runs the npx command to execute the @melt-ui/cli package, which automates the setup process and installs @melt-ui/svelte as a dependency. Required dependencies: Node.js environment and npx installed. No parameters are needed, and the command outputs the fully initialized Melt UI setup within your project directory.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @melt-ui/cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Initializing Date Range Field with Readonly Segments - Melt UI - Svelte\nDESCRIPTION: This Svelte snippet demonstrates initializing a Melt UI Date Range Field with a default value and specifying which segments should be readonly for the start and end dates. It uses the `readonlySegments` option within the `createDateRangeField` function to disable editing for specific segments like 'month' and 'year'. Requires `@internationalized/date` and Melt UI library imports.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDateRangeField, melt } from '$lib'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\telements: { field, startSegment, endSegment, label },\n\t\tstates: { segmentContents }\n\t} = createDateRangeField({\n\t\tdefaultValue: {\n\t\t\tstart: new CalendarDate(2023, 10, 11),\n\t\t\tend: new CalendarDate(2023, 10, 12)\n\t\t},\n\t\treadonlySegments: {\n\t\t\tstart: ['month', 'year'],\n\t\t\tend: ['year']\n\t\t}\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Syncing Local Develop Branch with Upstream using Git (Shell)\nDESCRIPTION: Details the Git commands to switch to the local 'develop' branch and pull the latest changes from the upstream repository's 'develop' branch, ensuring the local branch is up-to-date. Requires Git, a cloned repository, and an 'upstream' remote configured.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout develop\ngit pull upstream develop\n```\n\n----------------------------------------\n\nTITLE: Multi-select Implementation in Svelte with Melt-UI\nDESCRIPTION: Example code for creating a multi-select component in Svelte using the Melt-UI library. The multi-select allows users to select multiple options by setting the 'multiple' prop to true in the createSelect builder.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/select.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Preview code={snippets.multi}>\n    <svelte:component this={previews.multi} />\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Installing Melt UI Dependency with pnpm in Bash\nDESCRIPTION: This snippet adds @melt-ui/svelte to your project as a dev dependency using pnpm. Run the command from your project root. The '-D' flag designates the dependency as development only. After execution, the Melt UI package appears in your devDependencies section.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @melt-ui/svelte\n```\n\n----------------------------------------\n\nTITLE: Preventing Date Deselect in Melt UI Svelte Date Picker\nDESCRIPTION: This code sets the 'preventDeselect' prop to true, preventing users from deselecting a date without choosing another. It depends on '@melt-ui/svelte' and helps control date selection behavior, ensuring a date remains selected until explicitly changed.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDatePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDatePicker({\n\t\tpreventDeselect: true\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Local Development Environment using pnpm (Bash)\nDESCRIPTION: Provides the commands to first install project dependencies using pnpm (if not already done), and then start the development server (likely for the documentation site) to view examples and test changes locally in a browser. Requires pnpm installed.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\npnpm i\n\n# start docs page and see examples in the browser\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow DOM Compatibility in Svelte Combobox\nDESCRIPTION: Demonstrates overriding the default root element used by the combobox for querying internal components by using the `rootElement` property. This is essential when deploying the combobox inside a Shadow DOM environment where default document-based querying fails. The snippet shows static positioning and usage of `rootElement` to properly scope the internal element queries, ensuring functional behavior within encapsulated Shadow DOM contexts.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/combobox.md#_snippet_3\n\nLANGUAGE: Svelte\nCODE:\n```\n<Preview code={snippets.shadow} position=\"static\">\n    <svelte:component this={previews.shadow} />\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Forked Repository using Git (Shell)\nDESCRIPTION: Demonstrates the Git command to push the current local branch and its commits to the user's forked repository ('origin'), setting the upstream tracking reference. This makes the changes available on GitHub for creating a pull request. Requires Git, committed changes on a local branch, and a configured 'origin' remote pointing to the fork.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit push -u origin HEAD\n```\n\n----------------------------------------\n\nTITLE: Installing Melt UI Dependency with npm in Bash\nDESCRIPTION: This snippet installs the @melt-ui/svelte library as a development dependency using npm. It should be run in the root of your Svelte project. The '-D' flag adds it as a dev dependency. No additional setup is required before running the command, and the effect is to add @melt-ui/svelte to your project's package.json.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @melt-ui/svelte\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Event Handling with Custom Melt Event (Svelte)\nDESCRIPTION: Demonstrates how to listen for a custom Melt event (`on:m-click`) on an element using a Melt UI action (`use:melt={$trigger}`). Calling `event.preventDefault()` within the handler prevents the default behavior associated with that event (e.g., opening the dialog on trigger click), allowing for custom implementations.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/controlled.md#_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<button\n\tuse:melt={$trigger}\n\ton:m-click={(e) => {\n\t\te.preventDefault() // Stop Melt's default click handling\n\t\t// do something else\n\t}}>\n\tTrigger\n</button>\n```\n\n----------------------------------------\n\nTITLE: Handling Item Click Events in Dropdown Menu in Svelte\nDESCRIPTION: This snippet illustrates how to attach click event handlers to menu items using on:m-click. It demonstrates logging actions when items are selected and shows how to prevent default behavior by calling e.preventDefault() within the click handler.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/dropdown-menu.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<a href=\"/1\" use:melt={$item}>Item 1</a>\n<div use:melt={$item} on:m-click={(e) => console.log('Item 2!')}>Item 2</div>\n<div use:melt={$item} on:m-click={(e) => console.log('Item 3!')}>Item 3</div>\n```\n\n----------------------------------------\n\nTITLE: Importing components in Svelte for Tree View Documentation\nDESCRIPTION: This code imports specific components from the '$docs/components' module into a Svelte file, facilitating the assembly of the Tree View documentation page. It imports KbdTable, APIReference, and Preview components for use within the documentation.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/tree.md#_snippet_0\n\nLANGUAGE: Svelte\nCODE:\n```\n<script>\n    import { KbdTable, APIReference, Preview } from '$docs/components'\n    export let schemas;\n    export let keyboard;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Store Value - TypeScript\nDESCRIPTION: Illustrates how to access the value of a store using the `StoreValue` type from `@melt-ui/svelte`. This example shows how to get the value of the trigger store for the accordion component.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/RELEASE_NOTES/the-big-bad.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AccordionElements, StoreValue } from '@melt-ui/svelte'\n\ntype AccordionTriggerValue = StoreValue<AccordionElements['trigger']>\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Dropdown with Overlay in Svelte\nDESCRIPTION: This code shows how to create a modal-style dropdown menu with an overlay that prevents interaction with the background. The overlay element is added to cover the page while the menu is open, ensuring focus remains on the dropdown.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/dropdown-menu.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createDropdownMenu, melt } from '@melt-ui/svelte'\nconst {\n  elements: { trigger, menu, item, separator, arrow, overlay }\n} = createDropdownMenu()\n\n<button type=\"button\" use:melt={$trigger}> Open </button>\n<div use:melt={$overlay} />\n<div use:melt={$menu}>\n  <div use:melt={$arrow} />\n  <div use:melt={$item} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Transformed Output After Melt UI Preprocessing in Svelte\nDESCRIPTION: Shows how the preprocessor transforms the simplified 'melt' syntax into standard Svelte code with proper action and attribute spreading. This illustrates what happens behind the scenes when the preprocessor runs.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/preprocessor.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { createCollapsible } from '@melt-ui/svelte'\n\tconst { open, root, content, trigger } = createCollapsible()\n</script>\n\n<div {...$root} use:$root.action>\n\t<button {...$trigger} use:$trigger.action>{$open ? 'Close' : 'Open'}</button>\n\t<div {...$content} use:$content.action>Obi-Wan says: Hello there!</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cloning Fork and Adding Upstream Remote using Git (Shell)\nDESCRIPTION: Describes the Git commands to clone a personal fork of the Melt UI repository, change the directory to the cloned project, and add the official Melt UI repository as the 'upstream' remote for syncing later. Assumes Git is installed and the user has already forked the repository.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<your username>/melt-ui.git\ncd melt-ui\ngit remote add upstream https://github.com/melt-ui/melt-ui.git\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Selected Date in Date Picker with Melt UI in Svelte\nDESCRIPTION: Sets the default selected date of the date picker to January 11, 2024 by passing a CalendarDate object to the defaultValue option in createDatePicker. This initializes the field with a selected date and highlights it in the calendar popover. Requires imports from '@melt-ui/svelte' and '@internationalized/date'.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-picker.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatePicker, melt } from '@melt-ui/svelte'\nimport { CalendarDate } from '@internationalized/date'\n\nconst {\n\t/* ... */\n} = createDatePicker({\n\tdefaultValue: new CalendarDate(2024, 1, 11)\n})\n```\n\n----------------------------------------\n\nTITLE: Syncing Multiple States with createSync in Svelte\nDESCRIPTION: Demonstrates using the `createSync` utility function from Melt UI to simplify the synchronization of multiple states (`a` through `e`) between component props and internal builder states. `createSync` takes the builder's `states` object and returns functions to manage two-way binding more concisely and efficiently.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/controlled.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDialog, createSync } from '@melt-ui/svelte'\n\n\texport let a\n\texport let b\n\texport let c\n\texport let d\n\texport let e\n\n\tconst { states } = createDialog()\n\n\tconst sync = createSync(states)\n\t$: sync.a(a, (v) => (a = v))\n\t$: sync.b(b, (v) => (b = v))\n\t$: sync.c(c, (v) => (c = v))\n\t$: sync.d(d, (v) => (d = v))\n\t$: sync.e(e, (v) => (e = v))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Melt UI Dependency with yarn in Bash\nDESCRIPTION: This code installs @melt-ui/svelte as a dev dependency using the yarn package manager. Execute this in your project's root folder. The '-D' flag ensures the library is added as a dev dependency. The installed package will be listed under devDependencies in your yarn-controlled project.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @melt-ui/svelte\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert Dialog\nDESCRIPTION: This snippet demonstrates how to create an alert dialog by setting the `role` property to `'alertdialog'` within the `createDialog` function. Alert dialogs are used to display content that is critical to the user's workflow. This configuration ensures that the dialog behaves as an alert dialog, conveying its importance to assistive technologies.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/dialog.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst dialog = createDialog({\n\trole: 'alertdialog'\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Syncing Multiple States (Verbose) in Svelte\nDESCRIPTION: Highlights the verbosity and potential complexity of manually synchronizing multiple state properties (`a` through `e`) between component props and internal Melt UI states using reactive statements. This approach is error-prone for numerous states.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/controlled.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDialog } from '@melt-ui/svelte'\n\n\texport let a\n\texport let b\n\texport let c\n\texport let d\n\texport let e\n\n\tconst {\n\t\tstates: { a: localA, b: localB, c: localC, d: localD, e: localE }\n\t} = createDialog()\n\n\t$: $localA = a\n\t$: a = $localA\n\t$: $localB = b\n\t$: b = $localB\n\t$: $localC = c\n\t$: c = $localC\n\t$: $localD = d\n\t$: d = $localD\n\t$: $localE = e\n\t$: e = $localE\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Different Date Constructors and Parsers\nDESCRIPTION: Demonstrates different ways to create date objects using constructors and parsers from the @internationalized/date library.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CalendarDateTime, parseDateTime } from '@internationalized/date'\n\n// Constructor with a time\nconst date = new CalendarDateTime(2023, 10, 11, 12, 30)\n\n// Constructor without a time (defaults to 00:00:00)\nconst date = new CalendarDateTime(2023, 10, 11)\n\n// Parser function to convert an ISO 8601 formatted string\nconst date = parseDateTime('2023-10-11T12:30:00')\n```\n\n----------------------------------------\n\nTITLE: Rendering Individual Date Segments (Not Recommended Approach)\nDESCRIPTION: Shows how to manually render each date segment individually, though this approach is not recommended as it doesn't adapt to locales and different date types.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-field.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<span use:melt={$label}>Trip Date</span>\n<div use:melt={$field}>\n\t<div use:melt={$startSegment('day')}>\n\t\t<!-- ... -->\n\t</div>\n\t<div use:melt={$startSegment('month')}>\n\t\t<!-- ... -->\n\t</div>\n\t<div use:melt={$startSegment('year')}>\n\t\t<!-- ... -->\n\t</div>\n\t<div use:melt={$endSegment('day')}>\n\t\t<!-- ... -->\n\t</div>\n\t<!-- ...rest -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Localization Support in Svelte Melt-UI Date Range Picker\nDESCRIPTION: This snippet depicts setting the 'locale' prop to change the language and regional formats of the calendar and input fields, utilizing Intl.DateTimeFormat capabilities. Supports multiple locales for internationalization.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/date-range-picker.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n```svelte showLineNumbers {7}\n<script lang=\"ts\">\n\timport { createDateRangePicker, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\t/* ... */\n\t} = createDateRangePicker({\n\t\tlocale: 'es'\n\t})\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Uncontrolled Dialog in Svelte\nDESCRIPTION: Demonstrates the default uncontrolled usage of `createDialog` from Melt UI. The component manages its own state (`open`) internally, which is exposed as a readable store. This is the standard and simplest way to use Melt UI builders.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/controlled.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDialog } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { trigger, overlay, content, title, description, close },\n\t\tstates: { open }\n\t} = createDialog()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Placeholder Month - Svelte\nDESCRIPTION: This snippet demonstrates setting a default placeholder month for the calendar using the `defaultPlaceholder` prop in the `createCalendar` function. This configures the calendar to display the specified month initially when no date is selected. Requires `@internationalized/date` for `CalendarDate`.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/calendar.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCalendar, melt } from '@melt-ui/svelte'\n\timport { CalendarDate } from '@internationalized/date'\n\n\tconst {\n\t\t/* ... */\n\t} = createCalendar({\n\t\tdefaultPlaceholder: new CalendarDate(2021, 2, 1)\n\t})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Animating a Collapsible Component with Melt UI (Svelte)\nDESCRIPTION: This snippet demonstrates how to add animations to a Melt UI collapsible component using CSS transitions based on the `data-state` attribute. It shows how to style the content element based on its open or closed state.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/usage.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { createCollapsible, melt } from '@melt-ui/svelte'\n\tconst {\n\t\telements: { root, content, trigger }\n\t} = createCollapsible()\n</script>\n\n<div use:melt={$root}>\n\t<button use:melt={$trigger}> Toggle </button>\n\t<div class=\"content\" use:melt={$content}>\n\t\t<p>sveltejs/svelte</p>\n\t\t<p>sveltejs/kit</p>\n\t</div>\n</div>\n\n<style>\n\t.content {\n\t\tdisplay: block !important; /* Ignore the hidden attribute */\n\t\ttransition: opacity 200ms ease;\n\t}\n\t.content[data-state='closed'] {\n\t\topacity: 0;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating an Uncontrolled Collapsible Component (Svelte)\nDESCRIPTION: This snippet demonstrates creating an uncontrolled collapsible component using Melt UI. The `defaultOpen` prop only affects the initial state of the component and does not reactively update the component's internal state.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/usage.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Uncontrolled -->\n<script>\n\timport { createCollapsible, melt } from '@melt-ui/svelte'\n\n\t// This prop only affects the initial state of the component\n\texport let defaultOpen = false\n\n\tconst {\n\t\telements: { root, content, trigger }\n\t} = createCollapsible({ defaultOpen })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Components - Svelte\nDESCRIPTION: This code snippet imports necessary components from the '$docs/components' directory. It imports 'APIReference', 'KbdTable', and 'Callout' components used for documentation purposes. It also imports properties from Svelte to be used.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/tooltip.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\nimport { APIReference, KbdTable, Callout } from '$docs/components'\n    export let schemas\n    export let keyboard\n```\n\n----------------------------------------\n\nTITLE: Using Melt Collapsible with forceVisible Prop and Svelte slide Transition in TypeScript\nDESCRIPTION: Demonstrates usage of Melt UI's createCollapsible builder in Svelte with the forceVisible option enabled to disable internal visibility toggling. The snippet imports the slide transition from Svelte, extracts elements and open state from createCollapsible, and uses the open store in a Svelte if block to conditionally render content with a slide animation. This pattern allows applying custom transitions while managing visibility manually. Dependencies include '@melt-ui/svelte' for createCollapsible and 'svelte/transition' for slide. Key parameters are forceVisible (boolean) to disable automatic visibility control, open (readable store) controlling visibility state, and melt (action) to apply Melt behaviors to elements. The expected input is user interaction toggling open state, and output is smooth animated visibility changes. This approach avoids flickering and allows full control over animations.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/transitions.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createCollapsible, melt } from '@melt-ui/svelte'\n\timport { slide } from 'svelte/transition'\n\n\tconst {\n\t\telements: { root, content, trigger },\n\t\tstates: { open }\n\t} = createCollapsible({\n\t\tforceVisible: true\n\t})\n</script>\n\n<div use:melt={$root}>\n\t<button use:melt={$trigger} aria-label=\"Toggle\"> Open </button>\n\t{#if $open}\n\t\t<div use:melt={$content} transition:slide>Collapsible content</div>\n\t{/if}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Modifying Writable State of Melt UI Dialog in Svelte\nDESCRIPTION: Illustrates how to directly modify the writable `open` store returned by `createDialog`. This allows programmatic control over the component's state outside of standard user interactions.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/controlled.md#_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { createDialog } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { trigger, overlay, content, title, description, close },\n\t\tstates: { open }\n\t} = createDialog()\n\n\topen.set(true)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Melt Preprocessor Action - Svelte\nDESCRIPTION: Demonstrates the new syntax for the Melt UI preprocessor using the `melt` action. The action is imported and used with the `use:` directive on HTML elements. This replaces the old `melt` attribute-based approach.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/RELEASE_NOTES/the-big-bad.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<button use:melt={$trigger}>Toggle</button>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Melt UI Collapsible Builder in Svelte - HTML/Typescript\nDESCRIPTION: This Svelte code snippet demonstrates how to import the createCollapsible builder and the melt helper from @melt-ui/svelte, initialize a collapsible component, and bind its reactive states and element refs to markup. Required dependencies: Svelte, @melt-ui/svelte, and Typescript support. The snippet defines a collapsible section with dynamic open/close state, using melt for attribute/directive binding. Inputs: none directly; Outputs: interactive UI elements controlled by open state. No special configuration beyond standard Svelte usage is required.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n\timport { createCollapsible, melt } from '@melt-ui/svelte'\n\n\tconst {\n\t\telements: { root, content, trigger },\n\t\tstates: { open }\n\t} = createCollapsible()\n</script>\n\n<div use:melt=\"{$root}\">\n\t<button use:melt=\"{$trigger}\">{$open ? 'Close' : 'Open'}</button>\n\t<div use:melt=\"{$content}\">Obi-Wan says: Hello there!</div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Cancelling Custom Events - Svelte\nDESCRIPTION: Illustrates how to cancel custom events dispatched by Melt UI builders. This allows you to prevent default behaviors and implement custom logic for events like clicks. The `cancel()` method is called on the `detail` property of the event.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/RELEASE_NOTES/the-big-bad.md#_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<button\n\tuse:melt={$trigger}\n\ton:m-click={(e) => {\n\t\te.detail.cancel()\n\t\t// do something else\n\t}}>\n\tTrigger\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm (Shell)\nDESCRIPTION: Shows the command to install all necessary project dependencies using the pnpm package manager. This is a required step before starting development or building the project. Requires pnpm to be installed globally or accessible in the environment.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value with defaultOpen - TypeScript\nDESCRIPTION: Shows how to set the default value for a dialog's `open` state using the `defaultOpen` option. This is an alternative to passing a custom store or using the `onOpenChange` function.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/RELEASE_NOTES/the-big-bad.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { elements } = createDialog({ defaultOpen: true })\n```\n\n----------------------------------------\n\nTITLE: Using Custom Store with Dialog - TypeScript\nDESCRIPTION: Shows how to use a custom Svelte store with the `createDialog` builder.  Instead of wrestling with the builder's returned store, you can pass your own store for properties like `open`.  The `createDialog` function will react to changes in the custom store.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/RELEASE_NOTES/the-big-bad.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDialog } from '@melt-ui/svelte'\nimport { writable } from 'svelte/store'\n\nconst customOpen = writable(false)\n\nconst {\n\telements: { trigger, overlay, content, title, description, close }\n} = createDialog({\n\topen: customOpen\n})\n```\n\n----------------------------------------\n\nTITLE: Collapsible Builder Return Structure - TypeScript\nDESCRIPTION: Demonstrates the change in the return structure of the collapsible builder.  Before, element stores, helpers, actions, and options were all returned in the same object.  Now, the return structure is organized to clearly separate elements and states.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/RELEASE_NOTES/the-big-bad.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nconst { open, root, content, trigger } = createCollapsible()\n\n// After\nconst {\n\telements: { root, content, trigger },\n\tstates: { open }\n} = createCollapsible()\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in Svelte\nDESCRIPTION: Imports APIReference and KbdTable components from a documentation library to render API schemas and keyboard interaction tables within the Toggle Group documentation. It defines `schemas` and `keyboard` as exported props to be passed into the imported components. This snippet depends on Svelte framework and a documentation components library.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/toggle-group.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n    import { APIReference, KbdTable } from '$docs/components'\\n    export let schemas\\n    export let keyboard\\n</script>\n```\n\n----------------------------------------\n\nTITLE: ImportingComponentsInJavaScript\nDESCRIPTION: This snippet demonstrates importing specific components from a documentation library for use in the PIN Input page. It ensures that API references and keyboard accessibility tables are available within the page context.\nSOURCE: https://github.com/melt-ui/melt-ui/blob/develop/src/docs/content/builders/pin-input.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    import { APIReference, KbdTable } from '$docs/components'\n    export let schemas\n    export let keyboard\n```"
  }
]