[
  {
    "owner": "gamesensical",
    "repo": "docs",
    "content": "TITLE: Retrieving Player Bounding Box via entity.get_bounding_box (Lua)\nDESCRIPTION: Computes the 2D bounding box for a given player entity index, returning coordinates and an alpha multiplier. Requires an entity index representing a player; returns x1, y1, x2, y2, and alpha_multiplier. If alpha_multiplier is zero, the bounding box is invalid. Designed for use in ESP overlays or visualization scripts that need player boundary coordinates.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_bounding_box(player: number)\n```\n\n----------------------------------------\n\nTITLE: Creating Input System Interface Bindings with FFI in Lua\nDESCRIPTION: This Lua snippet demonstrates using LuaJIT's FFI to bind to a game interface, specifically the input system from 'inputsystem.dll' via 'InputSystemVersion001'. It sets up type definitions, retrieves the vtable, and casts function pointers to callable types, enabling direct invocation of game-native functions like 'IsButtonDown'. The example checks if the 'Z' key is pressed during the 'run_command' event (registered via client.set_event_callback) and prints a message if true. Dependencies include the availability of LuaJIT's FFI, access to the specified DLL and interface, and the client namespace providing 'create_interface' and 'set_event_callback'. Inputs include the name of the DLL, interface version, and key code; the output is printing to console if the key is pressed. Limitations: relies on the correct vtable index, valid interface version, and correct function signatures.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/examples/create_interface.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ffi = require 'ffi'\n\nffi.cdef[[\n    typedef unsigned char wchar_t;\n\n    typedef bool (__thiscall *IsButtonDown_t)(void*, int);\n]]\nlocal interface_ptr = ffi.typeof('void***')\n\nlocal raw_inputsystem = client.create_interface('inputsystem.dll', 'InputSystemVersion001')\n\n-- cast the lightuserdata to a type that we can dereference\nlocal inputsystem = ffi.cast(interface_ptr, raw_inputsystem) -- void***\n\n-- dereference the interface pointer to get its vtable\nlocal inputsystem_vtbl = inputsystem[0] -- void**\n\n-- vtable is an array of functions, the 15th is IsButtonDown\nlocal raw_IsButtonDown = inputsystem_vtbl[15] -- void*\n\n-- cast the function pointer to a callable type\nlocal is_button_pressed = ffi.cast('IsButtonDown_t', raw_IsButtonDown)\n\nlocal function run_command(cmd)\n    if is_button_pressed(inputsystem, 36) then -- ButtonCode_t for Z\n        print('Z is pressed')\n    end\n    return false\nend\n\nclient.set_event_callback('run_command', run_command)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving UI Element Value\nDESCRIPTION: Gets the value of a UI menu item. Returns different types based on the control type - boolean for checkboxes, integer for sliders, string for comboboxes, etc.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nui.get(item: number)\n```\n\n----------------------------------------\n\nTITLE: Registering Value Change Callbacks - Gamesensical UI API - Lua\nDESCRIPTION: This snippet demonstrates how to register a callback function with ui.set_callback so that a Lua function is invoked whenever a custom menu item changes value. The item parameter must be a reference returned by ui.new_* functions (using references to built-in items is not supported). The callback should be a Lua function that accepts at least the reference to the menu item as a parameter. This facilitates dynamic reactions to user interaction with the menu. Attempting to use this with built-in items or invalid references raises an error.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_18\n\nLANGUAGE: Lua\nCODE:\n```\nui.set_callback(item: number, callback: function)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Entities Matching a Classname - Lua\nDESCRIPTION: Retrieves an array of entity indices with an optional classname filter. Useful for enumerating all existing entities in a game session or filtering entities by type (e.g., 'CCSPlayer'). No dependencies beyond the entity API; key parameter is 'classname', which restricts collected entities to those with a matching class. Input is an optional string, output is a table of indices. Returns an empty table if none match.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_all([classname: string]): table (entindex)\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Access and Button State Querying with Lua FFI - Lua\nDESCRIPTION: This Lua code demonstrates accessing a game DLL interface using client.create_interface, casting the resulting pointer for dereferencing, and calling a virtual function (IsButtonDown) via LuaJIT's FFI. Dependencies include the 'ffi' library and the game client environment with client.create_interface available. The script identifies when a specific button ('Z') is pressed and prints a message during the 'run_command' event, relying on correct vtable indexing and type definitions.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/gitbook/development/examples/create_interface.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ffi = require 'ffi'\n\nffi.cdef[[\n    typedef unsigned char wchar_t;\n\n    typedef bool (__thiscall *IsButtonDown_t)(void*, int);\n]]\nlocal interface_ptr = ffi.typeof('void***')\n\nlocal raw_inputsystem = client.create_interface('inputsystem.dll', 'InputSystemVersion001')\n\n-- cast the lightuserdata to a type that we can dereference\nlocal inputsystem = ffi.cast(interface_ptr, raw_inputsystem) -- void***\n\n-- dereference the interface pointer to get its vtable\nlocal inputsystem_vtbl = inputsystem[0] -- void**\n\n-- vtable is an array of functions, the 15th is IsButtonDown\nlocal raw_IsButtonDown = inputsystem_vtbl[15] -- void*\n\n-- cast the function pointer to a callable type\nlocal is_button_pressed = ffi.cast('IsButtonDown_t', raw_IsButtonDown)\n\nlocal function run_command(cmd)\n    if is_button_pressed(inputsystem, 36) then -- ButtonCode_t for Z\n        print('Z is pressed')\n    end\n    return false\nend\n\nclient.set_event_callback('run_command', run_command)\n```\n\n----------------------------------------\n\nTITLE: Get Menu Item Value\nDESCRIPTION: Retrieves the value of a menu item. Returns different types based on the control type - boolean for checkboxes, integer for sliders, string for comboboxes, string array for multiselect, and RGBA values for color pickers.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nui.get(item: number)\n```\n\n----------------------------------------\n\nTITLE: Getting a Property Value from an Entity - Lua\nDESCRIPTION: Fetches the value of a named networked property (netprop) for a given entity. The input includes entity index, property name, and optional array index. Returns the property value or nil; for vectors/angles, returns three separate numbers. Prerequisite: the property must exist.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_prop(ent: number, propname: string[, array_index: number]): any\n```\n\n----------------------------------------\n\nTITLE: Getting List of Players via entity.get_players (Lua)\nDESCRIPTION: Returns a table of player entity indices, optionally filtered to enemies only based on a boolean argument. Omits dead and dormant players. Useful for team-aware scripts, ESP overlays, or target selection features.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_players([enemies_only: boolean])\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Depth for JSON Encoding (Lua)\nDESCRIPTION: Function to set the maximum depth for JSON encoding. It takes a number argument representing the depth and returns the current setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/json.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_max_depth([depth: number]): number\n```\n\n----------------------------------------\n\nTITLE: Obtaining Local Player Index with entity.get_local_player (Lua)\nDESCRIPTION: Fetches the entity index of the local player, returning nil if unavailable. No arguments required. Essential for scripts tailored to the player's own client context, such as personal overlays or bots.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_local_player()\n```\n\n----------------------------------------\n\nTITLE: Implementing Aim Miss Event Logging in Lua\nDESCRIPTION: Example of handling the aim_miss event to log information when the rage aimbot misses a shot. Reports the player name, intended hitgroup, and the reason for missing (spread, prediction error, death, or resolver).\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/events.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal hitgroup_names = {'generic', 'head', 'chest', 'stomach', 'left arm', 'right arm', 'left leg', 'right leg', 'neck', '?', 'gear'}\n\nlocal function aim_miss(e)\n\tlocal group = hitgroup_names[e.hitgroup + 1] or '?'\n\tprint(string.format('Missed %s (%s) due to %s', entity.get_player_name(e.target), group, e.reason))\nend\nclient.set_event_callback('aim_miss', aim_miss)\n```\n\n----------------------------------------\n\nTITLE: Setting a Property Value for an Entity - Lua\nDESCRIPTION: Sets the value of a networked property for a specified entity, with input parameters for entity index, property name, new value, and optional array index. Needed for state mutation or dynamic gameplay changes. For vector/angle properties, pass three values.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\nentity.set_prop(ent: number, propname: string, value: any[, array_index: number])\n```\n\n----------------------------------------\n\nTITLE: Drawing ESP Head Dots in Lua\nDESCRIPTION: This Lua snippet creates an ESP overlay by drawing colored circles on enemy head positions. It leverages localized variable binding for performance and uses game-side APIs for retrieving player locations, ray casting for visibility checks, and rendering circles via 'renderer.circle'. Required dependencies include the client eye position API, entity manipulation functions, and rendering utilities. It expects access to in-game player data; output is visual modification in the game, showing red or white dots based on head visibility. The code presumes Lua environment with specific game APIs and should handle only non-dormant, alive enemies.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/examples/head_dot.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- localize often used API variables to improve performance. It's usually fine to not do this, but lua then has to look them up as globals every time.\nlocal client_eye_position, client_trace_line, entity_get_local_player, entity_get_players, entity_hitbox_position, renderer_circle, renderer_world_to_screen = client.eye_position, client.trace_line, entity.get_local_player, entity.get_players, entity.hitbox_position, renderer.circle, renderer.world_to_screen\n\nlocal function on_paint()\n\tlocal local_player = entity_get_local_player()\n\tlocal eye_x, eye_y, eye_z = client_eye_position()\n\n\t-- get all alive, non-dormant enemy players\n\tlocal enemies = entity_get_players(true)\n\n\tfor i=1, #enemies do\n\t\tlocal entindex = enemies[i]\n\n\t\t-- get the world coordinates of the head hitbox of the enemy\n\t\tlocal head_x, head_y, head_z = entity_hitbox_position(entindex, 0)\n\n\t\t-- transform world coordinates to screen coordinates\n\t\tlocal wx, wy = renderer_world_to_screen(head_x, head_y, head_z)\n\n\t\t-- make sure to always check if the screen coordinates are valid. it's enough to only check wx\n\t\tif wx ~= nil then\n\t\t\tlocal r, g, b, a = 255, 255, 255, 100\n\n\t\t\t-- ray trace from your eye position to the enemy head, ignoring our local player, to determine if it's visible\n\t\t\tlocal fraction, entindex_hit = client_trace_line(local_player, eye_x, eye_y, eye_z, head_x, head_y, head_z)\n\n\t\t\tif entindex_hit == entindex or fraction == 1 then\n\t\t\t\t-- the trace either hit the enemy or hit nothing, meaning the head is visible, so we change the color\n\t\t\t\tr, g, b, a = 255, 16, 16, 255\n\t\t\tend\n\n\t\t\t-- draw circle with radius 4, so we offset the x and y by -2\n\t\t\trenderer_circle(wx-2, wy-2, r, g, b, a, 4, 0, 1)\n\t\tend\n\tend\nend\nclient.set_event_callback(\"paint\", on_paint)\n```\n\n----------------------------------------\n\nTITLE: Setting Entity Property Value with entity.set_prop (Lua)\nDESCRIPTION: Sets the value of a networked property for an entity, given entity index, property name, and the new value, with optional array index. For vectors/angles, expects multiple components comma-separated. Depends on 'entity' API and proper property names; errors if types or arguments are invalid.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nentity.set_prop(ent: number, propname: string, value: any[, array_index: number])\n```\n\n----------------------------------------\n\nTITLE: Determining if Entity is Alive with entity.is_alive (Lua)\nDESCRIPTION: Checks if a given entity index corresponds to a living player, returning true if not dead. Used in filtering and logic for bots, ESP, or scripting that targets only valid/active players. Accepts entity index as argument.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nentity.is_alive(ent: number)\n```\n\n----------------------------------------\n\nTITLE: Tracking Script Loads and Player Kills Using Database Persistence in Lua\nDESCRIPTION: This example demonstrates how to use the database module to persist data between script reloads. It tracks how many times the script has been loaded and how many kills the player has achieved. The data is read on initialization and saved back to the database when the script shuts down.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/database.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal data = database.read(\"example-1\") or {}\ndata.load_count = (data.load_count or 0) + 1\n\nclient.log(\"this is the \", data.load_count, \". time you've loaded this script!\")\n\nclient.set_event_callback(\"player_death\", function(e)\n\tif client.userid_to_entindex(e.attacker) == entity.get_local_player() then\n\t\tdata.kill_count = (data.kill_count or 0) + 1\n\t\tclient.log(\"this is your \", data.kill_count, \". kill!\")\n\tend\nend)\n\nclient.set_event_callback(\"shutdown\", function()\n\tdatabase.write(\"example-1\", data)\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Head Dot ESP in Lua for Game Cheats\nDESCRIPTION: This Lua script draws dots on enemy heads, white for invisible and red for visible. It uses ray tracing to determine visibility and world-to-screen coordinate conversion for rendering. The script is optimized for performance with localized API calls.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/examples/head_dot.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- localize often used API variables to improve performance. It's usually fine to not do this, but lua then has to look them up as globals every time.\nlocal client_eye_position, client_trace_line, entity_get_local_player, entity_get_players, entity_hitbox_position, renderer_circle, renderer_world_to_screen = client.eye_position, client.trace_line, entity.get_local_player, entity.get_players, entity.hitbox_position, renderer.circle, renderer.world_to_screen\n\nlocal function on_paint()\n\tlocal local_player = entity_get_local_player()\n\tlocal eye_x, eye_y, eye_z = client_eye_position()\n\n\t-- get all alive, non-dormant enemy players\n\tlocal enemies = entity_get_players(true)\n\n\tfor i=1, #enemies do\n\t\tlocal entindex = enemies[i]\n\n\t\t-- get the world coordinates of the head hitbox of the enemy\n\t\tlocal head_x, head_y, head_z = entity_hitbox_position(entindex, 0)\n\n\t\t-- transform world coordinates to screen coordinates\n\t\tlocal wx, wy = renderer_world_to_screen(head_x, head_y, head_z)\n\n\t\t-- make sure to always check if the screen coordinates are valid. it's enough to only check wx\n\t\tif wx ~= nil then\n\t\t\tlocal r, g, b, a = 255, 255, 255, 100\n\n\t\t\t-- ray trace from your eye position to the enemy head, ignoring our local player, to determine if it's visible\n\t\t\tlocal fraction, entindex_hit = client_trace_line(local_player, eye_x, eye_y, eye_z, head_x, head_y, head_z)\n\n\t\t\tif entindex_hit == entindex or fraction == 1 then\n\t\t\t\t-- the trace either hit the enemy or hit nothing, meaning the head is visible, so we change the color\n\t\t\t\tr, g, b, a = 255, 16, 16, 255\n\t\t\tend\n\n\t\t\t-- draw circle with radius 4, so we offset the x and y by -2\n\t\t\trenderer_circle(wx-2, wy-2, r, g, b, a, 4, 0, 1)\n\t\tend\n\tend\nend\nclient.set_event_callback(\"paint\", on_paint)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Game Rules Entity - Lua\nDESCRIPTION: Fetches the entity index corresponding to the game rules proxy object, crucial for inspecting or mutating global game properties. No input needed; returns the index for 'CCSGameRulesProxy' or nil if not present.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_game_rules(): number (entindex)\n```\n\n----------------------------------------\n\nTITLE: Retrieving World Position of a Player Hitbox - Lua\nDESCRIPTION: Returns 3D world coordinates of a specific hitbox for a player. Inputs are player entity index and hitbox identifier (string or integer). Outputs x, y, z coordinates or nil on failure, useful for targeting or overlays.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nentity.hitbox_position(player: number, hitbox: number): number, number, number\n```\n\n----------------------------------------\n\nTITLE: Checking if Entity is Alive - Lua\nDESCRIPTION: Returns true if the given entity (typically a player) is not dead, false otherwise. Input is entity index, output is boolean. Useful for filtering active entities in gameplay logic.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_14\n\nLANGUAGE: Lua\nCODE:\n```\nentity.is_alive(ent: number): boolean\n```\n\n----------------------------------------\n\nTITLE: Adding Auto Buy AWP Checkbox via Gamesensical UI API in Lua\nDESCRIPTION: This snippet creates a new checkbox in the client\\'s miscellaneous tab labeled \\\"Auto buy AWP\\\" using Gamesensical\\'s Lua UI API. When enabled, it automatically issues the client command \\\"buy awp;\\\" whenever a 'round_prestart' event occurs, ensuring timely AWP purchase. Dependencies include Gamesensical\\'s scripting API, specifically ui, client, and event handling modules. The main parameter is the checkbox state, which, if active, triggers an AWP buy at round start. Input is the round_prestart event; output is the execution of the console buy command.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/examples/auto_buy.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ui_get, console_cmd = ui.get, client.exec\n\nlocal auto_buy_awp = ui.new_checkbox(\"MISC\", \"Miscellaneous\", \"Auto buy AWP\")\n\nlocal function on_round_prestart(e)\n\tif ui_get(auto_buy_awp) then\n\t\tconsole_cmd(\"buy awp;\")\n\tend\nend\nclient.set_event_callback(\"round_prestart\", on_round_prestart)\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Item Visibility with UI API in Lua\nDESCRIPTION: Documents the `ui.set_visible` function, which shows or hides menu controls by setting their visibility status. Called with a menu item reference and a boolean flag; when set to false, the menu item is hidden from the user interface. Usable with any control that supports visibility toggling. Parameters include a reference number and a boolean indicating the desired visible state.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\n\"ui.set_visible(item: number, visible: boolean)\"\n```\n\n----------------------------------------\n\nTITLE: Executing Console Commands Programmatically (Lua)\nDESCRIPTION: Runs console commands provided as a string, optionally concatenating additional arguments. Allows for multiple commands at once using semicolons. Caution is advised when involving user-supplied input to avoid injection.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nclient.exec(cmd: string[, ...])\n```\n\n----------------------------------------\n\nTITLE: Getting All Entities by Class Name Using entity.get_all (Lua)\nDESCRIPTION: Retrieves a table of entity indices filtered by an optional class name using the entity.get_all function. Dependencies include the 'entity' module present and a valid game/script environment. When called without arguments, returns indices for all entities; passing a classname string filters the results. Returns an array (table) of entity indices; intended for entity enumeration. Errors or nil values are not explicitly handled.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_all([classname: string])\n```\n\n----------------------------------------\n\nTITLE: Performing Line Traces with Entity Skipping (Lua)\nDESCRIPTION: Performs a line trace from one 3D point to another, skipping a specified entity index. Returns the fraction of trace completed before hitting anything, and the entity index hit or -1 if missed. Useful for collision or visibility checks.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_26\n\nLANGUAGE: Lua\nCODE:\n```\nclient.trace_line(skip_entindex: number, from_x: number, from_y: number, from_z: number, to_x: number, to_y: number, to_z: number)\n```\n\n----------------------------------------\n\nTITLE: Tracing Lines in World Space (GameSense Lua)\nDESCRIPTION: Calculates a straight-line trace in the world, ignoring a given entity index. Returns the fraction (percentage of completion before hit) and the entindex hit, or -1 if nothing is hit. Arguments specify start/end world coordinates and the entity to skip.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nclient.trace_line(skip_entindex: number, from_x: number, from_y: number, from_z: number, to_x: number, to_y: number, to_z: number)\n```\n\n----------------------------------------\n\nTITLE: Create Multiselect\nDESCRIPTION: Creates a new multiselect combobox allowing multiple selections from the provided options.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nui.new_multiselect(tab: string, container: string, name: string, ...)\n```\n\n----------------------------------------\n\nTITLE: Creating UI String\nDESCRIPTION: Creates a string storage element that can be saved in configs but has no visual representation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nui.new_string(name: string[, default_value: string])\n```\n\n----------------------------------------\n\nTITLE: Linear interpolation between vectors in Lua\nDESCRIPTION: Interpolates by the specified percentage between the current vector and a target vector.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:lerp(to: vector, percentage: number): vector\n```\n\n----------------------------------------\n\nTITLE: Creating UI Textbox\nDESCRIPTION: Creates a textbox for text input.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nui.new_textbox(tab: string, container: string, name: string)\n```\n\n----------------------------------------\n\nTITLE: Getting Player Active Weapon via entity.get_player_weapon (Lua)\nDESCRIPTION: Returns the entity index of the currently active weapon for a specified player entity index, or nil if the player is not alive or dormant. Used in weapon tracking, HUD overlays, or bot behavior scripts.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_player_weapon(ent: number)\n```\n\n----------------------------------------\n\nTITLE: Getting Player's Active Weapon Entity Index - Lua\nDESCRIPTION: Obtains the entity index of the player's current weapon, or nil if unavailable (dead, dormant, etc.). Requires the player entity index as input, returns an entity index or nil.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_player_weapon(ent: number): number (entindex)\n```\n\n----------------------------------------\n\nTITLE: Determining if Entity is Enemy - Lua\nDESCRIPTION: Checks if a given entity is on the opposite team, returning true for enemies. Takes entity index as input; outputs boolean. Use for targeting logic or enemy-only overlays.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\nentity.is_enemy(ent: number): boolean\n```\n\n----------------------------------------\n\nTITLE: Registering Game Event Callbacks (Lua)\nDESCRIPTION: Associates a Lua callback function with a named game event; fires when the event occurs. Prints a message and raises an error if registration fails. Requires event name string and callback function.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_22\n\nLANGUAGE: Lua\nCODE:\n```\nclient.set_event_callback(event_name: string, callback: function)\n```\n\n----------------------------------------\n\nTITLE: Drawing Enemy Head ESP Dots with Lua\nDESCRIPTION: This Lua script sets up an event callback for the game engine's 'paint' event to draw colored circles over detected enemy heads, using in-game API functions for player iteration, ray tracing, hitbox position, and rendering. Key dependencies are the client, entity, and renderer APIs provided by the scripting environment. Inputs include the player's own position and enemy indices; outputs are rendered colored dots on screen at the respective positions (red for visible, white for not). The code assumes a working scripting environment with the referenced APIs and should be placed in a compatible scripts folder. It is limited to enemies that are alive and not dormant, and only checks the head hitbox (index 0).\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/gitbook/development/examples/head_dot.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- localize often used API variables to improve performance. It's usually fine to not do this, but lua then has to look them up as globals every time.\\nlocal client_eye_position, client_trace_line, entity_get_local_player, entity_get_players, entity_hitbox_position, renderer_circle, renderer_world_to_screen = client.eye_position, client.trace_line, entity.get_local_player, entity.get_players, entity.hitbox_position, renderer.circle, renderer.world_to_screen\\n\\nlocal function on_paint()\\n\\tlocal local_player = entity_get_local_player()\\n\\tlocal eye_x, eye_y, eye_z = client_eye_position()\\n\\t\\n\\t-- get all alive, non-dormant enemy players\\n\\tlocal enemies = entity_get_players(true)\\n\\n\\tfor i=1, #enemies do\\n\\t\\tlocal entindex = enemies[i]\\n\\n\\t\\t-- get the world coordinates of the head hitbox of the enemy\\n\\t\\tlocal head_x, head_y, head_z = entity_hitbox_position(entindex, 0)\\n\\n\\t\\t-- transform world coordinates to screen coordinates\\n\\t\\tlocal wx, wy = renderer_world_to_screen(head_x, head_y, head_z)\\n\\n\\t\\t-- make sure to always check if the screen coordinates are valid. it's enough to only check wx\\n\\t\\tif wx ~= nil then\\n\\t\\t\\tlocal r, g, b, a = 255, 255, 255, 100\\n\\n\\t\\t\\t-- ray trace from your eye position to the enemy head, ignoring our local player, to determine if it's visible\\n\\t\\t\\tlocal fraction, entindex_hit = client_trace_line(local_player, eye_x, eye_y, eye_z, head_x, head_y, head_z)\\n\\n\\t\\t\\tif entindex_hit == entindex or fraction == 1 then\\n\\t\\t\\t\\t-- the trace either hit the enemy or hit nothing, meaning the head is visible, so we change the color\\n\\t\\t\\t\\tr, g, b, a = 255, 16, 16, 255\\n\\t\\t\\tend\\n\\n\\t\\t\\t-- draw circle with radius 4, so we offset the x and y by -2\\n\\t\\t\\trenderer_circle(wx-2, wy-2, r, g, b, a, 4, 0, 1)\\n\\t\\tend\\n\\tend\\nend\\nclient.set_event_callback(\"paint\", on_paint)\n```\n\n----------------------------------------\n\nTITLE: Converting World to Screen Coordinates - renderer API - JavaScript\nDESCRIPTION: Projects 3D world coordinates to 2D screen coordinates for use with screen drawing primitives. Returns x and y position if visible, or nil if offscreen. Utilized by ESP overlays, game UI, or any script mapping game positions to HUD visualizations. Must be used during the paint event.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.world_to_screen(x, y, z);\n```\n\n----------------------------------------\n\nTITLE: Calculating Vector Magnitude with Lua Vector Library\nDESCRIPTION: This snippet explains the :length method, which computes the magnitude (length) of a vector in 3D space. It takes no input parameters and returns a single number. Useful for normalization and distance calculations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:length(): number\n```\n\n----------------------------------------\n\nTITLE: Create Slider\nDESCRIPTION: Creates a new slider control with specified range, optional initial value, tooltips and display formatting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nui.new_slider(tab: string, container: string, name: string, min: number, max: number[, init_value: number] [, show_tooltip: boolean] [, unit: string] [, scale: number] [, tooltips: table])\n```\n\n----------------------------------------\n\nTITLE: Drawing Circle in Lua Game Scripting\nDESCRIPTION: Function to draw a circle or partial circle on the screen. Parameters include position, color, radius, start angle, and percentage of circle to draw. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.circle(x: number, y: number, r: number, g: number, b: number, a: number, radius: number, start_degrees: number, percentage: number)\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Dimensions in Lua Game Scripting\nDESCRIPTION: Function to measure the dimensions of text. Returns width and height of the text. Parameters include text flags and the text to be measured. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.measure_text(flags: string, ...): number, number\n```\n\n----------------------------------------\n\nTITLE: Getting Player Name via entity.get_player_name (Lua)\nDESCRIPTION: Fetches the name of a player entity given its index, returning the string 'unknown' on failure. Takes a player entity index as input and returns the associated player name string. Useful for display or logging scripts where user identification is required.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_player_name(ent: number)\n```\n\n----------------------------------------\n\nTITLE: Fetching ESP Data for an Entity - Lua\nDESCRIPTION: Retrieves a table of ESP (extra-sensory perception) data for a player entity, returning alpha, health, and weapon_id, or nil on failure. This facilitates overlay or visualization scripts. Input is a player entity index; the response is a table or nil.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_esp_data(player: number): table\n```\n\n----------------------------------------\n\nTITLE: Calculating dot product of a vector in Lua\nDESCRIPTION: Returns the dot product of the vector.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:dot(): number\n```\n\n----------------------------------------\n\nTITLE: Drawing Triangle in Lua Game Scripting\nDESCRIPTION: Function to draw a filled triangle on the screen. Parameters include coordinates for three points and color. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.triangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, r: number, g: number, b: number, a: number)\n```\n\n----------------------------------------\n\nTITLE: Drawing Texture in Lua Game Scripting\nDESCRIPTION: Function to draw a texture on the screen. Parameters include texture ID, position, dimensions, color, and drawing mode. Uses texture IDs created from load_rgba, load_png, load_jpg, or load_svg functions.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.texture(id: number, x: number, y: number, w: number, h: number, r: number, g: number, b: number, a: number[, mode: string])\n```\n\n----------------------------------------\n\nTITLE: Getting/Setting Camera Angles with GameSense (Lua)\nDESCRIPTION: Provides a function to either get or set the in-game camera's pitch and yaw using Lua for GameSense scripts. Requires appropriate context where camera manipulation is allowed. Accepts optional pitch and yaw values (numbers) for setting, or returns current angles when called with none.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nclient.camera_angles([pitch: number, yaw: number])\n```\n\n----------------------------------------\n\nTITLE: Normalizing a Vector In-place Using Lua Vector Library\nDESCRIPTION: This snippet shows use of the :normalize method, which modifies a vector so its magnitude becomes 1 (unit vector), changing the object itself. No arguments or return value. The vector is divided by its original magnitude.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:normalize()\n```\n\n----------------------------------------\n\nTITLE: Checking If Entity is Dormant with entity.is_dormant (Lua)\nDESCRIPTION: Returns true if the given entity index represents a dormant entity, otherwise false. Dormant status typically indicates the entity is not currently active, visible, or relevant to the simulation; used for ESP or optimization.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nentity.is_dormant(ent: number)\n```\n\n----------------------------------------\n\nTITLE: Setting Menu Item Values - Gamesensical UI API - Lua\nDESCRIPTION: This snippet shows the use of ui.set to assign a value to a referenced menu item, which can be a built-in or custom item. It requires a numeric reference (item) typically obtained via ui.new_* functions or ui.reference, and a value corresponding to the type of the control (boolean for checkbox, number for slider, string(s) for comboboxes, or color components for pickers). The API allows for multi-value arguments where applicable (e.g., multi-select combos). Attempting to set an inappropriate value may cause errors or unexpected behavior. No value is required for button controls.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\nui.set(item: number, value: any[, ...])\n\n```\n\n----------------------------------------\n\nTITLE: Loading PNG Texture from Buffer - renderer API - JavaScript\nDESCRIPTION: Loads a PNG file buffer as a texture, returning an ID for use in subsequent renderer.texture calls. The content must include the PNG file header, and size arguments set the image dimensions. If parsing fails, returns nil. Utilized for integrating arbitrarily supplied PNG images into overlays.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.load_png(contents, width, height);\n```\n\n----------------------------------------\n\nTITLE: Creating a vector object in Lua\nDESCRIPTION: Creates a new vector object with specified X, Y, and Z coordinates. The vector library must be loaded with require \"vector\" before use.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nvector(x: number, y: number, z: number): vector\n```\n\n----------------------------------------\n\nTITLE: Drawing Circle Outline - renderer API - JavaScript\nDESCRIPTION: Renders the outline of a circle at specified screen coordinates, allowing users to control the arc, thickness, and color. Like the filled circle, it must be called from the paint callback and supports partial circle drawing via percentage and angular (start_degrees) parameters. Designed for highlighting or framing visuals using adjustable thickness and alpha blending.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.circle_outline(x, y, r, g, b, a, radius, start_degrees, percentage, thickness);\n```\n\n----------------------------------------\n\nTITLE: Producing Random Float Values within Bounds (Lua)\nDESCRIPTION: Returns a floating-point number randomly selected between a specified minimum and maximum, both inclusive. Used in randomized behaviors or testing within scripts.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_15\n\nLANGUAGE: Lua\nCODE:\n```\nclient.random_float(minimum: number, maximum: number)\n```\n\n----------------------------------------\n\nTITLE: Getting/Setting Camera Angles with GameSense (Lua)\nDESCRIPTION: Provides a function for getting or setting the camera's pitch and yaw angles. Optional arguments allow setting angles; when called without arguments, returns the current pitch and yaw. Inputs are validated within their respective ranges (pitch: -90 to 90, yaw: -180 to 180). Returns current or assigned angles as numbers.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nclient.camera_angles([pitch: number, yaw: number])\n```\n\n----------------------------------------\n\nTITLE: Drawing Indicator Text with Vertical Offset - renderer API - JavaScript\nDESCRIPTION: Draws colored text on-screen, intended as status or indicator overlays, with automatic Y offset. Accepts multiple strings/values as input, and returns the Y screen coordinate used or nil upon failure. This must be used within the paint callback and is suited for real-time feedback or dynamic HUD readouts.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.indicator(r, g, b, a, ...);\n```\n\n----------------------------------------\n\nTITLE: Drawing Text with Styling and Clipping - renderer API - JavaScript\nDESCRIPTION: Draws styled text at a specific screen position with RGBA coloring. Supports various text flags (size, boldness, alignment) and clipping via max_width. Designed for titles, labels, and interactive overlays, this must be invoked during the paint event and provides flexible formatting options.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.text(x, y, r, g, b, a, flags, max_width, ...);\n```\n\n----------------------------------------\n\nTITLE: Determining If Entity is an Enemy with entity.is_enemy (Lua)\nDESCRIPTION: Checks whether the entity index provided belongs to an opposing team, returning boolean true if enemy. Useful for target prioritization, ESP coloring, or gameplay logic that distinguishes teams.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nentity.is_enemy(ent: number)\n```\n\n----------------------------------------\n\nTITLE: Querying Camera Position via Client Module (Lua)\nDESCRIPTION: This API call returns the x, y, and z world coordinates of the camera's current in-game position. Designed for use in GameSense Lua scripts, it outputs three numbers or nil on failure, and does not take any parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nclient.camera_position()\n```\n\n----------------------------------------\n\nTITLE: Tracing Bullets in World Space (GameSense Lua)\nDESCRIPTION: Simulates a bullet trace from a player's weapon between two 3D world points, optionally skipping players for hitbox checks. Returns the entindex of the hit player and the damage dealt, or nil if nothing is hit/skipped.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nclient.trace_bullet(from_player: number, from_x: number, from_y: number, from_z: number, to_x: number, to_y: number, to_z: number, skip_players: boolean)\n```\n\n----------------------------------------\n\nTITLE: Implementing Paint Event Callback in Lua\nDESCRIPTION: Example of using the paint event to render text on screen every frame while connected to a server. Uses the renderer.text function to display \"hello world\" at coordinates (15, 15) with white color.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/events.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nclient.set_event_callback(\"paint\", function()\n\trenderer.text(15, 15, 255, 255, 255, 255, nil, 0, \"hello world\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Executing Console Commands from Lua in GameSense\nDESCRIPTION: Allows execution of one or multiple console commands via string input. Arguments can be concatenated, and multiple commands separated by semicolons. Use caution to avoid injection risk when handling user inputs.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nclient.exec(cmd: string[, ...])\n```\n\n----------------------------------------\n\nTITLE: Getting World Coordinates of Hitbox with entity.hitbox_position (Lua)\nDESCRIPTION: Returns world-space x, y, z coordinates for a specified player's hitbox, accepting either a hitbox name string or integer id. Returns nil on failure. Used for advanced aim, ESP, or collision scripts that require anatomical precision.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nentity.hitbox_position(player: number, hitbox: number)\n```\n\n----------------------------------------\n\nTITLE: Generating Bounded Random Integers (Lua)\nDESCRIPTION: Returns a randomly chosen integer within the specified minimum and maximum (inclusive), useful for simulation, randomization, or game events. Accepts two numeric parameters as bounds.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\nclient.random_int(minimum: number, maximum: number)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integer in Range (GameSense Lua)\nDESCRIPTION: Generates a random integer between minimum and maximum (inclusive). Often used for randomizing choices, respawn points, and non-deterministic effects within Lua scripts.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nclient.random_int(minimum: number, maximum: number)\n```\n\n----------------------------------------\n\nTITLE: Implementing Console Input Event Handler in Lua\nDESCRIPTION: Example of intercepting console input using the console_input event. This callback logs all user input to the console by capturing the text parameter and outputting it with client.log.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/events.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nclient.set_event_callback(\"console_input\", function(text)\n\tclient.log(\"entered: '\", text, \"'\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unix Time with Client API in Lua\nDESCRIPTION: This snippet shows how to use the 'client.unix_time()' function to obtain the current Unix time (number of seconds since January 1, 1970) within the Lua environment. It returns a number and does not require any parameters or dependencies other than access to the 'client' object. The output is suitable for timekeeping, logging, or event synchronization within game scripts.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_27\n\nLANGUAGE: Lua\nCODE:\n```\nclient.unix_time()\n```\n\n----------------------------------------\n\nTITLE: Retrieving ESP Data with entity.get_esp_data (Lua)\nDESCRIPTION: Returns a table containing ESP (Extra Sensory Perception) data for a player, such as alpha, health, and weapon_id. Requires a player entity index and outputs a data table or nil on failure. Commonly used in overlays or cheats for visualizing key player attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_esp_data(player: number)\n```\n\n----------------------------------------\n\nTITLE: Querying Key State (GameSense Lua)\nDESCRIPTION: Checks if a given virtual key code (Windows VK integer) is pressed. Returns a boolean indicating state or nil if the key code is invalid. Reference to Microsoft VK codes may be needed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nclient.key_state(key: number)\n```\n\n----------------------------------------\n\nTITLE: Logging Colored Console Messages via Client (Lua)\nDESCRIPTION: Logs a colored message to the console in GameSense Lua scripts using specified RGB values. Accepts additional arguments to concatenate with the message string, and appending '\\0' prevents a newline. Useful for visually differentiating log output.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nclient.color_log(r: number, g: number, b: number, msg: string[, ...])\n```\n\n----------------------------------------\n\nTITLE: Updating or Storing UI Values - Gamesensical UI API - Lua\nDESCRIPTION: This snippet illustrates the ui.update function, which sets a value for a UI element or persists it for configuration purposes. It works with references obtained via creation or referencing functions. The value parameter and subsequent arguments behave similarly to ui.set, supporting multiple values for multiselect controls. This can be used for string data, and does not directly create a visible menu element but allows the value to be accessed and persisted like proper items. Misuse of references or mismatched value types may cause errors.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\nui.update(item: number, value: any, ...)\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Pre-Existing Menu Items with UI API in Lua\nDESCRIPTION: Provides the `ui.reference` function, allowing scripts to obtain a reference handle to an existing menu item by specifying its tab, container, and name. The reference can then be used with other functions such as ui.get and ui.set. Must not be called from within another function and throws an error if the reference fails. Prerequisite: the UI system must already have the item defined; for certain item types, multiple values may be returned. Parameters include the 'tab', 'container', and 'name' strings; returns a reference number.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\n\"ui.reference(tab: string, container: string, name: string): number (menu item)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector Instance Using Built-in Vector Library in Lua\nDESCRIPTION: This snippet demonstrates the creation of a new 3D vector object using the built-in vector library in Lua, after requiring it via require \\\"vector\\\". It requires three numeric parameters: x, y, and z representing Cartesian coordinates. The function returns a new vector instance initialized with the supplied values, and is intended as the standard constructor for vectors throughout the library.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nvector(x: number, y: number, z: number): vector\n```\n\n----------------------------------------\n\nTITLE: Calculating 3D distance between vectors in Lua\nDESCRIPTION: Returns the 3D distance to another vector.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:dist(other: vector): number\n```\n\n----------------------------------------\n\nTITLE: Getting High-Precision Timestamp (GameSense Lua)\nDESCRIPTION: Returns a millisecond-precision timestamp. Typically used for profiling, benchmarks, or high-resolution timing of events in custom logic. Returns a single number.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nclient.timestamp()\n```\n\n----------------------------------------\n\nTITLE: Toggling Developer ConVar and Invoking ConCommand Callback in Lua\nDESCRIPTION: This code demonstrates how to invoke a command callback and toggle a developer console variable using the cvar object interface. It imports required cvars, uses bitwise XOR to flip the developer mode state, and directly invokes a command callback. Prerequisites include access to the 'bit' and 'cvar' modules, and the existence of the specified cvars in the environment. Inputs involve the cvar objects; outputs include updated developer mode and triggered callbacks.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/cvar.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal bxor = bit.bxor\\nlocal cl_fullupdate = cvar.cl_fullupdate\\nlocal developer = cvar.developer\\n\\n-- invoking callback of ConCommand\\ncl_fullupdate:invoke_callback()\\n\\n-- toggle ConVar\\nlocal oldval = developer.get_int()\\ndeveloper:set_raw_int(bxor(oldval, 1))\n```\n\n----------------------------------------\n\nTITLE: Linearly Interpolating Between Vectors in Lua\nDESCRIPTION: This snippet describes the :lerp method for vectors, which produces a new vector at a point between the current vector and another, using a 0-1 percentage value. Takes as arguments the target vector and interpolation percentage. Returns the interpolated vector and is key for smooth transitions in movement or animation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:lerp(to: vector, percentage: number): vector\n```\n\n----------------------------------------\n\nTITLE: Converting a Vector to Angles with Lua Vector Library\nDESCRIPTION: This snippet demonstrates how to use the :angles method on a vector object in Lua to convert its 3D components into pitch, yaw, and roll angles. The function takes no arguments and returns three numbers, representing the vector's orientation in angular terms. There are no dependencies besides the vector object itself.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:angles(): number, number, number\n```\n\n----------------------------------------\n\nTITLE: Scaling Damage for Specific Hitgroups (Lua)\nDESCRIPTION: Given entity index, hitgroup, and damage, this function returns the adjusted (scaled) damage for that location. Useful for damage calculation logic in client scripts involving hit detection.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_19\n\nLANGUAGE: Lua\nCODE:\n```\nclient.scale_damage(entindex: number, hitgroup: number, damage: number)\n```\n\n----------------------------------------\n\nTITLE: Invoking and Toggling Cvars with Lua\nDESCRIPTION: Demonstrates how to invoke a callback for a ConCommand and toggle a developer cvar in Lua. Requires access to the `cvar` object and the `bit` library (for XOR operations). Uses `invoke_callback` to call console command actions and `set_raw_int` to change cvar values directly without affecting string/float representations. Takes no arguments for command invocation, and the developer toggle expects an integer cvar value.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/cvar.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal bxor = bit.bxor\nlocal cl_fullupdate = cvar.cl_fullupdate\nlocal developer = cvar.developer\n\n-- invoking callback of ConCommand\ncl_fullupdate:invoke_callback()\n\n-- toggle ConVar\nlocal oldval = developer.get_int()\ndeveloper:set_raw_int(bxor(oldval, 1))\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Resource Entity - Lua\nDESCRIPTION: Fetches the entity index for the player resource object, typically used to access shared player info. No arguments required; returns index or nil if not found.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_player_resource(): number (entindex)\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility of World Coordinates in Lua\nDESCRIPTION: Determines if a given position in world space is visible. This function takes x, y, and z coordinates as arguments and returns a boolean indicating visibility. It can be used with player origins to check player visibility.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nclient.visible(x: number, y: number, z: number)\n```\n\n----------------------------------------\n\nTITLE: Referencing a Built-in Menu Item - Gamesensical UI API - Lua\nDESCRIPTION: This snippet demonstrates how to obtain a reference to an existing (built-in) menu item using the ui.reference function in Lua. Dependencies include the Gamesensical scripting environment with the UI API. Required parameters are tab (the tab name), container (the container's name), and name (the menu item name); all are strings. The function returns a number or multiple values when the referenced item is followed by unnamed items, such as a color picker. Typical usage is to subsequently use this reference with ui.get or ui.set. If the referenced item is invalid or cannot be accessed, the function throws an error.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\nui.reference(tab: string, container: string, name: string): number (menu item)\n\n```\n\n----------------------------------------\n\nTITLE: Reloading Active Scripts (GameSense Lua)\nDESCRIPTION: Reloads all active Lua scripts on the following frame. Useful for development, hot-reloading changes, or recovering from certain script errors. No arguments required.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nclient.reload_active_scripts()\n```\n\n----------------------------------------\n\nTITLE: Model Name Lookup by Index (Lua)\nDESCRIPTION: Retrieves the model name (string) for a given model index, or nil if not found. Useful in scripts that interact with game assets or need to reference visual models programmatically.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nclient.get_model_name(model_index: number)\n```\n\n----------------------------------------\n\nTITLE: Assigning Change Callbacks to Custom Menu Items with UI API in Lua\nDESCRIPTION: Defines the `ui.set_callback` function, enabling assignment of a Lua callback function that triggers whenever a custom menu item's value changes. The menu item must be custom-created (typically via ui.new_*), and the callback receives the item reference. Meant for dynamic behavior when user interactions update item state. Inputs are a custom menu item reference (number) and a Lua function as callback; should not be used with references to built-in menu items.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_19\n\nLANGUAGE: Lua\nCODE:\n```\n\"ui.set_callback(item: number, callback: function)\"\n```\n\n----------------------------------------\n\nTITLE: Computing Forward Vector to Another Vector in Lua\nDESCRIPTION: This snippet presents the :to method, returning the normalized forward vector from the current object to another vector. Takes another vector as its parameter and returns a new vector. Used for direction calculations between points.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:to(other: vector): vector\n```\n\n----------------------------------------\n\nTITLE: Listing CWeaponMP7 Entity Properties\nDESCRIPTION: This snippet provides a detailed list of properties for the CWeaponMP7 entity, including data types and array sizes where applicable. It covers a wide range of attributes from basic entity properties to weapon-specific characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponMP7.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unix Time in Lua\nDESCRIPTION: Returns the current Windows time as Unix time (seconds since January 1, 1970 00:00:00). This function is useful for timestamp-related operations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nclient.unix_time()\n```\n\n----------------------------------------\n\nTITLE: Updating Player List UI with Client API in Lua\nDESCRIPTION: This snippet illustrates calling 'client.update_player_list()' to refresh the game's player list tab. The function requires no parameters and triggers a UI update, ensuring the information displayed is current. It is useful when scripts programmatically change player-related data that may not automatically appear in the player list.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_29\n\nLANGUAGE: Lua\nCODE:\n```\nclient.update_player_list()\n```\n\n----------------------------------------\n\nTITLE: Creating UI Checkbox\nDESCRIPTION: Creates a checkbox control in the specified menu tab and container.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nui.new_checkbox(tab: string, container: string, name: string)\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Property Value with entity.get_prop (Lua)\nDESCRIPTION: Fetches the value of a property (netprop) from an entity by entity index and property name, with optional array indexing for properties that are arrays. Returns any type, and multiple values for vectors or angles. Key for generic property reads in configuration or debugging tools.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_prop(ent: number, propname: string[, array_index: number])\n```\n\n----------------------------------------\n\nTITLE: Querying Global Game State - Lua\nDESCRIPTION: Each documented snippet displays the interface for a global state query function within the 'globals' module, accessible from Lua scripts. No explicit dependencies beyond the scripting environment are required. Functions typically take no parameters and provide instantaneous values such as timing, frame, command, or server information, with documented return types and clearly defined behavior for each accessor.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/globals.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nglobals.absoluteframetime()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.chokedcommands()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.commandack()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.curtime()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.framecount()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.frametime()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.lastoutgoingcommand()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.mapname()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.maxplayers()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.oldcommandack()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.realtime()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.tickcount()\n```\n\nLANGUAGE: lua\nCODE:\n```\nglobals.tickinterval()\n```\n\n----------------------------------------\n\nTITLE: Registering Event Callbacks (GameSense Lua)\nDESCRIPTION: Associates a Lua function (callback) with specified game events by name, executing the function whenever the event occurs. Raises an error and prints to console if it fails. Requires event name (string) and function reference.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nclient.set_event_callback(event_name: string, callback: function)\n```\n\n----------------------------------------\n\nTITLE: Listing CWeaponHKP2000 Class Properties\nDESCRIPTION: This snippet provides a detailed list of properties for the CWeaponHKP2000 class, including their names and data types. These properties cover various aspects of the weapon's behavior and rendering in a game engine.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponHKP2000.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing DT_WeaponNOVA Networked Properties - Markdown\nDESCRIPTION: This Markdown snippet lists all the network-replicated member variables for the CWeaponNOVA entity, denoting their names, data types, and in a few cases, dimensions for arrays. It is intended as a technical reference for developers needing to understand or interact with these game engine networking structures. The only prerequisites are Markdown support and familiarity with the engine-specific class context; there are no special parsing dependencies.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponNOVA.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponNOVA\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_reloadState` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CWeaponTMP Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CWeaponTMP class, including their names, types, and array sizes where applicable. It covers a wide range of attributes from basic entity properties to weapon-specific characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponTMP.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Create Listbox\nDESCRIPTION: Creates a new listbox with specified items. Returns zero-based index of selected item when queried.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nui.new_listbox(tab: string, container: string, name: string[, items: table])\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Acknowledged Command in Lua\nDESCRIPTION: Returns the command number of the previous server-acknowledged command.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nglobals.oldcommandack(): number\n```\n\n----------------------------------------\n\nTITLE: Defining CWeaponSG550 Entity Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CWeaponSG550 entity, including their names and data types. It covers a wide range of attributes from basic entity properties to weapon-specific characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponSG550.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: CWeaponGalil Property Documentation\nDESCRIPTION: Complete listing of properties for the CWeaponGalil class, including vectors, integers, floats, and strings that define the weapon's behavior, appearance, and functionality in the game engine.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponGalil.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Create Checkbox\nDESCRIPTION: Creates a new checkbox control in the specified tab and container.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nui.new_checkbox(tab: string, container: string, name: string)\n```\n\n----------------------------------------\n\nTITLE: Unsetting Event Callbacks via Client API in Lua\nDESCRIPTION: This snippet demonstrates the use of 'client.unset_event_callback' to remove a previously registered callback for an event. It requires the event name (string) and the function reference (callback) that was initially passed to 'set_event_callback'. This function is essential for dynamic event handling and proper resource management within long-running scripts. Ensure that the callback matches one previously set; otherwise, the function has no effect.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_28\n\nLANGUAGE: Lua\nCODE:\n```\nclient.unset_event_callback(event_name, callback)\n```\n\n----------------------------------------\n\nTITLE: Aim Fire Event Handler with Detailed Logging in Gamesensical Lua\nDESCRIPTION: Implements a Lua handler for the 'aim_fire' event using client.set_event_callback to log detailed shot statistics. Declares auxiliary functions (time_to_ticks) and tables (hitgroup_names) to map event properties to readable log lines. The handler accesses event parameters (teleported, interpolated, extrapolated, boosted, high_priority, hitgroup, target, damage, hit_chance, backtrack) and prints formatted messages using the Gamesensical Lua 'entity', 'globals', and 'client' APIs. Dependencies: 'client', 'entity', 'globals' objects. Outputs summary of every fired aimbot shot; expects to be registered once.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/events.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function time_to_ticks(t)\\n\\treturn floor(0.5 + (t / globals.tickinterval()))\\nend\\n\\nlocal hitgroup_names = {'generic', 'head', 'chest', 'stomach', 'left arm', 'right arm', 'left leg', 'right leg', 'neck', '?', 'gear'}\\n\\nlocal function aim_fire(e)\\n\\tlocal flags = {\\n\\t\\te.teleported and 'T' or '',\\n\\t\\te.interpolated and 'I' or '',\\n\\t\\te.extrapolated and 'E' or '',\\n\\t\\te.boosted and 'B' or '',\\n\\t\\te.high_priority and 'H' or ''\\n\\t}\\n\\tlocal group = hitgroup_names[e.hitgroup + 1] or '?'\\n\\tprint(string.format('Fired at %s (%s) for %d dmg (chance=%d%%, bt=%2d, flags=%s)', entity.get_player_name(e.target), group, e.damage, math.floor(e.hit_chance + 0.5), time_to_ticks(e.backtrack), table.concat(flags)))\\nend\\nclient.set_event_callback('aim_fire', aim_fire)\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Acknowledged Command in Lua\nDESCRIPTION: Returns the command number of the most recent server-acknowledged command.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nglobals.commandack(): number\n```\n\n----------------------------------------\n\nTITLE: Drawing Line in Lua Game Scripting\nDESCRIPTION: Function to draw a line between two points on the screen. Parameters include start and end coordinates and line color. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.line(xa: number, ya: number, xb: number, yb: number, r: number, g: number, b: number, a: number)\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Properties for CWeaponM249 - Markdown\nDESCRIPTION: This Markdown snippet enumerates all key data fields (members) of the CWeaponM249 entity, supplying each property name alongside its type (integer, float, vector, or string). No external dependencies are required, but familiarity with Source engine entity modeling or similar systems will aid understanding. This structured reference is used for documenting game entities, reverse-engineering memory layouts, or generating derived tooling; the snippet expects users to interpret field meanings relevant to their application but does not provide implementation or usage logic.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponM249.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponM249\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Weapon Entity Properties Using Markdown\nDESCRIPTION: This snippet uses Markdown language to provide a detailed breakdown of the CWeaponAWP entity class attributes. It enumerates all relevant fields, including physical, rendering, and gameplay-specific properties, each with its data type or dimensions noted. This static documentation can be used as a blueprint for developers implementing or interfacing with the weapon entity in code, but does not itself contain executable logic or require dependencies. Expected input is for human readers; no output or interfacing constraints exist other than accuracy and clarity of documentation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponAWP.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponAWP\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Updating Menu Item State with UI API in Lua\nDESCRIPTION: Covers the `ui.update` function, which marks a menu item as updated and optionally changes its value. Accepts a menu item reference (from creation or ui.reference), a value, and variadic arguments for multi-select controls. Can store arbitrary strings for configuration purposes, but does not create visible menu items. Inputs include a menu item reference, any value, and possible extra parameters; returns a special reference or throws on failure.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_21\n\nLANGUAGE: Lua\nCODE:\n```\n\"ui.update(item: number, value: any, ...)\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling Delayed Function Calls via Client (Lua)\nDESCRIPTION: Executes a given Lua callback after a specified delay (seconds), optionally passing any additional arguments. Useful for timed operations or deferred logic in scripts. Callback is called asynchronously after the delay.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nclient.delay_call(delay: number, callback: function[, ...])\n```\n\n----------------------------------------\n\nTITLE: Enumerating CMelee Networked Properties - Markdown\nDESCRIPTION: This snippet enumerates all network-synchronized properties of the CMelee class, formatted in Markdown for documentation purposes. It details property names, types (such as integer, float, string, and vector), and specifies array bounds where applicable. This enables readers and tools to understand how CMelee entities are serialized over the network, serving as a schema or authoritative field list for the class definition. No external dependencies are required, and the expected output is a comprehensive, human-readable property listing. Limitations include lack of behavioral details and the specification is static, requiring updates if the underlying code changes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CMelee.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CMelee\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_flThrowAt` (float)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Data Table Properties for DT_WeaponKnifeGG - Markdown\nDESCRIPTION: This markdown snippet lists and categorizes the member fields for the DT_WeaponKnifeGG (CKnifeGG) entity, presumably from a Source engine game. Each bullet item denotes a class member, with the type (e.g., integer, float, string, vector or array) for clarity. The documentation does not require dependencies except for an understanding of Source entity field types, and is intended for developers/analysts needing explicit detail for all possible attributes within this data structure. The expected input is a reference to the CKnifeGG entity, and the output is a readable list of all relevant fields, without actual executable code. Limitations: Pure documentation, not executable.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CKnifeGG.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CKnifeGG\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Network Latency (GameSense Lua)\nDESCRIPTION: Returns the current network latency in seconds between the client and server. No arguments required; useful for ESP, display, or auto-adjust scripts. Returns a numeric value.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nclient.latency()\n```\n\n----------------------------------------\n\nTITLE: Creating UI Button\nDESCRIPTION: Creates a clickable button in the menu that executes a callback function when pressed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nui.new_button(tab: string, container: string, name: string, callback: function)\n```\n\n----------------------------------------\n\nTITLE: Setting Paint Render Callback with Renderer in Lua\nDESCRIPTION: Registers a Lua callback function for the 'paint' event using client.set_event_callback, which fires every frame during server connection. The sample draws 'hello world' in white at screen coordinates (15, 15) using renderer.text. Requires the Gamesensical Lua API, 'client' and 'renderer' objects, and expects to run inside the supported mod. No parameters are passed to the callback; all drawing logic should be self-contained. Output: text drawn to screen each frame.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/events.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nclient.set_event_callback(\"paint\", function()\\n\\trenderer.text(15, 15, 255, 255, 255, 255, nil, 0, \"hello world\")\\nend)\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Item Visibility - Gamesensical UI API - Lua\nDESCRIPTION: This snippet covers the use of ui.set_visible to show or hide a menu item in the UI. It accepts a menu item reference (item) and a boolean (visible); passing false hides the control. It assumes the reference was obtained via ui.new_*, ui.reference, or similar API methods. The function does not throw if the item is already in the target visibility state and has no effect on non-existent references.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_19\n\nLANGUAGE: Lua\nCODE:\n```\nui.set_visible(item: number, visible: boolean)\n\n```\n\n----------------------------------------\n\nTITLE: Converting User ID to Entity Index in Lua\nDESCRIPTION: Converts a user ID to an entity index. This function is particularly useful when working with game events that provide user IDs. Returns 0 if the conversion fails.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nclient.userid_to_entindex(userid: number)\n```\n\n----------------------------------------\n\nTITLE: Creating UI Color Picker\nDESCRIPTION: Creates a color picker control with optional initial RGBA values.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nui.new_color_picker(tab: string, container: string, name: string[, r: number] [, g: number] [, b: number] [, a: number])\n```\n\n----------------------------------------\n\nTITLE: Persistent Data Storage Example in Lua\nDESCRIPTION: Demonstrates how to use the database module to track script load count and player kills across sessions. Shows initialization, event handling, and proper data persistence through the shutdown event.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/database.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal data = database.read(\"example-1\") or {}\ndata.load_count = (data.load_count or 0) + 1\n\nclient.log(\"this is the \", data.load_count, \". time you've loaded this script!\")\n\nclient.set_event_callback(\"player_death\", function(e)\n\tif client.userid_to_entindex(e.attacker) == entity.get_local_player() then\n\t\tdata.kill_count = (data.kill_count or 0) + 1\n\t\tclient.log(\"this is your \", data.kill_count, \". kill!\")\n\tend\nend)\n\nclient.set_event_callback(\"shutdown\", function()\n\tdatabase.write(\"example-1\", data)\nend)\n```\n\n----------------------------------------\n\nTITLE: Getting Entity Class Name via entity.get_classname (Lua)\nDESCRIPTION: Fetches the class name of the specified entity by its index using entity.get_classname. Requires an integer entity index and returns a string if successful, or nil on failure. Useful for scripts that need to distinguish between entity types during processing.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_classname(ent: number)\n```\n\n----------------------------------------\n\nTITLE: Documenting CItemDogtags Entity Schema - Markdown\nDESCRIPTION: This Markdown snippet outlines the structure and attributes of the CItemDogtags entity in a game. It provides each property's name, type, and, where applicable, array indices, facilitating clear schema definition and in-code documentation. There are no dependencies, and the snippet is intended for reference and documentation rather than code execution.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CItemDogtags.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CItemDogtags\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Create Button\nDESCRIPTION: Creates a new button in the specified tab and container, with a callback function that executes when clicked.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nui.new_button(tab: string, container: string, name: string, callback: function)\n```\n\n----------------------------------------\n\nTITLE: Delaying Function Calls with GameSense (Lua)\nDESCRIPTION: Schedules a Lua callback to execute after a specified duration (in seconds), with optional arguments passed to the callback. Used for timing events or deferred execution in scripts. Arguments must include a numeric delay and a function reference.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nclient.delay_call(delay: number, callback: function[, ...])\n```\n\n----------------------------------------\n\nTITLE: Create Textbox\nDESCRIPTION: Creates a new text input box in the specified tab and container.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nui.new_textbox(tab: string, container: string, name: string)\n```\n\n----------------------------------------\n\nTITLE: Getting Player SteamID64 with entity.get_steam64 (Lua)\nDESCRIPTION: Fetches the SteamID3 string of a player given by entity index, or nil on failure. Used for cross-referencing users with Steam, persistent tracking, or stats logging. Depends on valid entity index and Steam integration in the environment.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_steam64(player: number)\n```\n\n----------------------------------------\n\nTITLE: Documenting CInferno Data Table Fields - Markdown\nDESCRIPTION: This snippet documents the entire set of data fields (networked properties) for the CInferno entity in the Source Engine, formatted in markdown. No programming code is present, but field names, types, and array annotations are provided for each property. Intended for developers or modders referencing entity structures; expected input is the markdown list, and output is knowledge transfer for further use—limitations are that this format does not enforce or validate the property types in any executable way.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CInferno.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CInferno\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_fireXDelta` (integer[0-63])\n* `m_fireYDelta` (integer[0-63])\n* `m_fireZDelta` (integer[0-63])\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_bFireIsBurning` (integer[0-63])\n* `m_fireCount` (integer)\n* `m_nFireEffectTickBegin` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity State Structure - Markdown\nDESCRIPTION: This snippet provides a full list of fields for the CDecoyGrenade entity using markdown bullet points, with associated data types or descriptions. Intended as a reference, it does not define code logic but instead serves as structured documentation for how the decoy grenade's state is represented within the engine or data files. There are no explicit dependencies or executable behavior; rather, it's a reverse-engineered or extracted mapping of data members, with expected values like integers, floats, strings, or typed arrays, and field purposes ranging from position and animation to weapons and custom visual attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CDecoyGrenade.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n\n```\n\n----------------------------------------\n\nTITLE: Drawing Indicator Text in Lua Game Scripting\nDESCRIPTION: Function to draw indicator text on the screen. Parameters include text color and the text to be drawn. Returns the Y coordinate of the drawn text or nil on failure. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.indicator(r: number, g: number, b: number, a: number, ...): number\n```\n\n----------------------------------------\n\nTITLE: Displaying Watermark Overlay with Renderer Functions in Lua\nDESCRIPTION: This Lua snippet defines an in-game watermark overlay for CS:GO that shows the current ping in ms, server tickrate, and the system time at the top right of the game screen. The script relies on CS:GO-specific API functions (client.latency, client.screen_size, etc.) and renderer drawing routines to display text and a background rectangle. Configurable variables (margin, padding, flags) affect the layout, and API variables are localized for efficiency. The paint event callback must be set for the overlay to update every frame. Inputs are fetched from provided APIs during runtime; outputs are visual overlays on the game UI.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/examples/watermark.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- localize often used API variables to improve performance. It's usually fine to not do this, but lua then has to look them up as globals every time.\\nlocal client_latency, client_screen_size, client_system_time, globals_tickinterval, math_floor, renderer_measure_text, renderer_rectangle, renderer_text, string_format = client.latency, client.screen_size, client.system_time, globals.tickinterval, math.floor, renderer.measure_text, renderer.rectangle, renderer.text, string.format\\n\\n-- this function will be executed every time CS:GO renders a frame and lets you draw on top of the game scene.\\nlocal function on_paint()\\n\\t-- fetch dynamic info. latency is in seconds so we convert it to ms and round it. tickrate is calculated with 1 / tickinterval\\n\\tlocal screen_width, screen_height = client_screen_size()\\n\\tlocal latency = math_floor(client_latency()*1000+0.5)\\n\\tlocal tickrate = 1/globals_tickinterval()\\n\\tlocal hours, minutes, seconds = client_system_time()\\n\\n\\t-- create text\\n\\tlocal text = string_format(\"%dms\", latency) .. \" | \" .. string_format(\"%dtick\", tickrate) .. \" | \" .. string_format(\"%02d:%02d:%02d\", hours, minutes, seconds)\\n\\n\\t-- modify these to change how the text appears. margin is the distance from the top right corner, padding is the size the background rectangle is larger than the text\\n\\tlocal margin, padding, flags = 18, 4, nil\\n\\n\\t-- uncomment this for a \\\"small and capital\\\" style\\n\\t-- flags, text = \\\"-\\\", (text:upper():gsub(\" \", \"   \"))\\n\\n\\t-- measure text size to properly offset the text from the top right corner\\n\\tlocal text_width, text_height = renderer_measure_text(flags, text)\\n\\n\\t-- draw background and text\\n\\trenderer_rectangle(screen_width-text_width-margin-padding, margin-padding, text_width+padding*2, text_height+padding*2, 32, 32, 32, 200)\\n\\trenderer_text(screen_width-text_width-margin, margin, 235, 235, 235, 255, flags, 0, text)\\nend\\nclient.set_event_callback(\"paint\", on_paint)\n```\n\n----------------------------------------\n\nTITLE: Handling Aim Hit Event and Logging in Gamesensical Lua\nDESCRIPTION: Provides a Lua callback registration for the 'aim_hit' event, which occurs when a rage aimbot records a hit. It maps event parameters such as hitgroup, target, damage, and remaining health to readable output using both the 'entity' API and hitgroup_names table. Dependencies include Gamesensical Lua's 'client' and 'entity' objects. For every aimbot hit, logs a summary message including player name, hitgroup, damage dealt, and remaining health.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/events.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal hitgroup_names = {'generic', 'head', 'chest', 'stomach', 'left arm', 'right arm', 'left leg', 'right leg', 'neck', '?', 'gear'}\\n\\nlocal function aim_hit(e)\\n\\tlocal group = hitgroup_names[e.hitgroup + 1] or '?'\\n\\tprint(string.format('Hit %s in the %s for %d damage (%d health remaining)', entity.get_player_name(e.target), group, e.damage, entity.get_prop(e.target, 'm_iHealth')))\\nend\\nclient.set_event_callback('aim_hit', aim_hit)\n```\n\n----------------------------------------\n\nTITLE: Handling Player Kill Events for Automated Chat Messaging - Lua\nDESCRIPTION: This Lua script hooks into the game event system to monitor 'player_death' events. When the local player kills an enemy, it automatically types 'one tap' for headshots or 'effortless' otherwise in the in-game chat. Dependencies include game-provided APIs: client (for event callbacks and command execution) and entity (for player identification and relationships). Expects event objects with 'userid', 'attacker', and 'headshot' fields. It should be run within an environment where these APIs are available, such as a game modding framework.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/mkdocs/docs/development/examples/talk_shit.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal userid_to_entindex, get_local_player, is_enemy, console_cmd = client.userid_to_entindex, entity.get_local_player, entity.is_enemy, client.exec\n\nlocal function on_player_death(e)\n\tlocal victim_userid, attacker_userid = e.userid, e.attacker\n\tif victim_userid == nil or attacker_userid == nil then\n\t\treturn\n\tend\n\n\tlocal victim_entindex = userid_to_entindex(victim_userid)\n\tlocal attacker_entindex = userid_to_entindex(attacker_userid)\n\n\tif attacker_entindex == get_local_player() and is_enemy(victim_entindex) then\n\t\tconsole_cmd(\"say \", e.headshot and \"one tap\" or \"effortless\")\n\tend\nend\nclient.set_event_callback(\"player_death\", on_player_death)\n```\n\n----------------------------------------\n\nTITLE: Documenting CCSTeam Properties in CS:GO\nDESCRIPTION: Comprehensive list of properties that define a team entity in Counter-Strike: Global Offensive. Includes scoring information, team identifiers, visual assets, and player data.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CCSTeam.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_iTeamNum` (integer)\n* `m_bSurrendered` (integer)\n* `m_scoreTotal` (integer)\n* `m_scoreFirstHalf` (integer)\n* `m_scoreSecondHalf` (integer)\n* `m_scoreOvertime` (integer)\n* `m_iClanID` (integer)\n* `m_szTeamname` (string)\n* `m_szClanTeamname` (string)\n* `m_szTeamFlagImage` (string)\n* `m_szTeamLogoImage` (string)\n* `m_szTeamMatchStat` (string)\n* `m_nGGLeaderEntIndex_CT` (integer)\n* `m_nGGLeaderEntIndex_T` (integer)\n* `m_numMapVictories` (integer)\n* `player_array_element` (integer)\n* `&quot;player_array&quot;` (array)\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Size - renderer API - JavaScript\nDESCRIPTION: Calculates and returns the pixel width and height of rendered text given styling flags and provided text values. Useful for layout, clipping, or alignment tasks, this must be called from the paint callback and supports flags for font size. Accepts variable argument text input.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.measure_text(flags, ...);\n```\n\n----------------------------------------\n\nTITLE: Drawing Hitbox Overlays in GameSense (Lua)\nDESCRIPTION: Renders hitbox overlays for a given entity index and color for a certain duration. Supports specifying hitboxes (single index, array, or 19 for all), alpha transparency, and tick for context. Avoid use during paint event to prevent lag.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nclient.draw_hitboxes(entindex: number, duration: number, hitboxes: number, r: number, g: number, b: number, a: number[, tick: number])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Player Eye Position (GameSense Lua)\nDESCRIPTION: Returns real-time x, y, z coordinates of the local player's eye, allowing accurate placement for vision- or aim-related scripts. Returns nil on failure. Used for accuracy in overlays or custom bot logic.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nclient.eye_position()\n```\n\n----------------------------------------\n\nTITLE: Accessing Game Rules Entity with entity.get_game_rules (Lua)\nDESCRIPTION: Provides the entity index for the current game rules proxy (CCSGameRulesProxy) or nil if it does not exist. No arguments are required. Used for manipulating or querying global game state in custom scripts.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_game_rules()\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Data Fields - Markdown\nDESCRIPTION: This Markdown snippet provides a comprehensive, structured list of all data fields for the CEnvDOFController entity, specifying each variable's type and name. It serves as reference documentation and does not have dependencies beyond basic Markdown rendering. The main input is the field definitions themselves, while the output is a readable, formatted field summary; there is no execution and no code logic included. This is best used in developer documentation or technical references, but does not support dynamic/further rendering beyond Markdown limitations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CEnvDOFController.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CEnvDOFController\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_bDOFEnabled` (integer)\n* `m_flNearBlurDepth` (float)\n* `m_flNearFocusDepth` (float)\n* `m_flFarFocusDepth` (float)\n* `m_flFarBlurDepth` (float)\n* `m_flNearBlurRadius` (float)\n* `m_flFarBlurRadius` (float)\n```\n\n----------------------------------------\n\nTITLE: Generating High-Precision Timestamps (Lua)\nDESCRIPTION: Returns a high precision timestamp in milliseconds using the system clock. No parameters required. Supports profiling, time-based logic, or timestamping events.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_24\n\nLANGUAGE: Lua\nCODE:\n```\nclient.timestamp()\n```\n\n----------------------------------------\n\nTITLE: Create Color Picker\nDESCRIPTION: Creates a new color picker with optional initial RGBA values. The picker appears to the right of the previous menu item.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nui.new_color_picker(tab: string, container: string, name: string[, r: number] [, g: number] [, b: number] [, a: number])\n```\n\n----------------------------------------\n\nTITLE: Accessing Native Game Interfaces with FFI and client.create_interface in Lua\nDESCRIPTION: This Lua script uses LuaJIT's FFI library to access a game's native input system interface through the client.create_interface function. It loads the interface from 'inputsystem.dll', casts it to a pointer, dereferences the virtual table, and invokes the 15th method (IsButtonDown) to check for keypress states (e.g., whether 'Z' is pressed), reacting during the 'run_command' event. Dependencies: LuaJIT with FFI, the presence of client.create_interface, and access to game binaries. Requires knowledge of the interface versions and method indices. Inputs are event callbacks; outputs are print statements and event handling. Limitations: Direct pointer manipulation assumes ABI stability and may break on updates.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/mkdocs/docs/development/examples/create_interface.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ffi = require 'ffi'\\n\\nffi.cdef[[\\n    typedef unsigned char wchar_t;\\n\\n    typedef bool (__thiscall *IsButtonDown_t)(void*, int);\\n]]\\nlocal interface_ptr = ffi.typeof('void***')\\n\\nlocal raw_inputsystem = client.create_interface('inputsystem.dll', 'InputSystemVersion001')\\n\\n-- cast the lightuserdata to a type that we can dereference\\nlocal inputsystem = ffi.cast(interface_ptr, raw_inputsystem) -- void***\\n\\n-- dereference the interface pointer to get its vtable\\nlocal inputsystem_vtbl = inputsystem[0] -- void**\\n\\n-- vtable is an array of functions, the 15th is IsButtonDown\\nlocal raw_IsButtonDown = inputsystem_vtbl[15] -- void*\\n\\n-- cast the function pointer to a callable type\\nlocal is_button_pressed = ffi.cast('IsButtonDown_t', raw_IsButtonDown)\\n\\nlocal function run_command(cmd)\\n    if is_button_pressed(inputsystem, 36) then -- ButtonCode_t for Z\\n        print('Z is pressed')\\n    end\\n    return false\\nend\\n\\nclient.set_event_callback('run_command', run_command)\n```\n\n----------------------------------------\n\nTITLE: Removing Event Callback in Lua\nDESCRIPTION: Removes a previously set event callback. This function takes the event name and the callback function as arguments, allowing for dynamic event handling management.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nclient.unset_event_callback(event_name: string, callback: function)\n```\n\n----------------------------------------\n\nTITLE: Documenting CEnvAmbientLight Properties - Markdown\nDESCRIPTION: This markdown snippet documents the CEnvAmbientLight class/entity by listing its main member variables and their data types. It requires no dependencies and takes the form of a simple enumerated list for use in documentation. Each field is briefly described by name and type, but no further semantic context is provided beyond their declaration.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEnvAmbientLight.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_MinFalloff` (float)\n* `m_MaxFalloff` (float)\n* `m_flCurWeight` (float)\n* `m_bEnabled` (integer)\n* `m_vecColor` (vector)\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle in Lua Game Scripting\nDESCRIPTION: Function to draw a filled rectangle on the screen. Parameters include position, dimensions, and color. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.rectangle(x: number, y: number, w: number, h: number, r: number, g: number, b: number, a: number)\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle - renderer API - JavaScript\nDESCRIPTION: Draws a filled rectangle at the specified screen coordinates with sharp edges, colored using RGBA channels. Intended for general UI backgrounds, bars, or region highlights, and callable only during the paint event. All parameters must specify pixel or color values within valid ranges.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.rectangle(x, y, w, h, r, g, b, a);\n```\n\n----------------------------------------\n\nTITLE: Getting Frame Time in Lua\nDESCRIPTION: Returns the number of seconds elapsed during the last game frame.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nglobals.frametime(): number\n```\n\n----------------------------------------\n\nTITLE: Setting Clan Tag Display (Lua)\nDESCRIPTION: Updates the player's clan tag using provided arguments, concatenating all as text. Leaving arguments empty or passing an empty string removes the clan tag. Used for cosmetic or informational purposes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_21\n\nLANGUAGE: Lua\nCODE:\n```\nclient.set_clan_tag(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Pointer with FFI for GameSense (Lua)\nDESCRIPTION: Returns a userdata FFI pointer to a specified interface by module and interface name. Useful for advanced GameSense Lua scripts requiring direct access to engine or module interfaces. Returns nil on failure and depends on correct module/interface names.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nclient.create_interface(module_name: string, interface_name: string)\n```\n\n----------------------------------------\n\nTITLE: Listing CWorld Entity Property Offsets - Markdown\nDESCRIPTION: This markdown snippet enumerates the CWorld entity's data table properties, including field names and type annotations. No external dependencies are required. Each field lists its name and type (such as integer, float, vector, or string), providing a flat layout intended for use in documentation, reference, or as input for property parsing scripts. Inputs and outputs are not applicable; this is for documentation purposes only. The snippet does not enforce typing or validation constraints in software, but serves as a detailed property reference.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWorld.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flWaveHeight` (float)\n* `m_WorldMins` (vector)\n* `m_WorldMaxs` (vector)\n* `m_bStartDark` (integer)\n* `m_flMaxOccludeeArea` (float)\n* `m_flMinOccluderArea` (float)\n* `m_flMaxPropScreenSpaceWidth` (float)\n* `m_flMinPropScreenSpaceWidth` (float)\n* `m_iszDetailSpriteMaterial` (string)\n* `m_bColdWorld` (integer)\n```\n\n----------------------------------------\n\nTITLE: Drawing Text in Lua Game Scripting\nDESCRIPTION: Function to draw text on the screen. Parameters include position, color, text flags, maximum width, and the text to be drawn. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.text(x: number, y: number, r: number, g: number, b: number, a: number, flags: string, max_width: number, ...)\n```\n\n----------------------------------------\n\nTITLE: Muting Ambient Audio with CVar Callback Invocation in Lua\nDESCRIPTION: This snippet utilizes the cvar object system to mute ambient audio by invoking the snd_setmixer callback for the \"Ambient\" mixer, setting its volume to zero. It requires the presence of a cvar object for 'snd_setmixer' and assumes knowledge of mixer parameters. The input is a string sequence representing the mixer and volume arguments; the effect is immediate audio change through the callback, making the operation seamless and scriptable.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/cvar.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal snd_setmixer = cvar.snd_setmixer\\n\\n-- Mutes ambient volume by setting the mixer \\\"vol\\\" option to 0\\nsnd_setmixer:invoke_callback(\\\"Ambient\\\", \\\"vol\\\", \\\"0\\\")\n```\n\n----------------------------------------\n\nTITLE: Defining CWorldVguiText Entity Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the CWorldVguiText entity using a markdown list. It includes various attributes related to positioning, rendering, collision, and text display. Each property is listed with its name and data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWorldVguiText.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_bEnabled` (integer)\n* `m_szDisplayText` (string)\n* `m_szDisplayTextOption` (string)\n* `m_szFont` (string)\n* `m_iTextPanelWidth` (integer)\n* `m_clrText` (integer)\n```\n\n----------------------------------------\n\nTITLE: CWorldVguiText Class Properties\nDESCRIPTION: Detailed property listing for CWorldVguiText class showing variable names and their corresponding data types. Properties cover entity positioning, rendering, physics, team assignments, text display configuration and other core attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWorldVguiText.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_bEnabled` (integer)\n* `m_szDisplayText` (string)\n* `m_szDisplayTextOption` (string)\n* `m_szFont` (string)\n* `m_iTextPanelWidth` (integer)\n* `m_clrText` (integer)\n```\n\n----------------------------------------\n\nTITLE: Create Combobox\nDESCRIPTION: Creates a new dropdown combobox with specified options in the given tab and container.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nui.new_combobox(tab: string, container: string, name: string, ...)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Text (Lua)\nDESCRIPTION: Function to parse JSON text into Lua values or tables. It takes a JSON string as input and returns the corresponding Lua representation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/json.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\njson.parse(json_text: string): any\n```\n\n----------------------------------------\n\nTITLE: Getting Current Game Time in Lua\nDESCRIPTION: Returns the game time in seconds, synchronized with the server.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nglobals.curtime(): number\n```\n\n----------------------------------------\n\nTITLE: Accessing InputSystem Interface Using FFI in Lua\nDESCRIPTION: This code demonstrates how to access the game's InputSystem interface to detect button presses. It uses FFI to define C types, creates an interface to inputsystem.dll, navigates the vtable to access the IsButtonDown function, and hooks into run_command to check if the Z key is pressed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/examples/create_interface.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ffi = require 'ffi'\n\nffi.cdef[[\n    typedef unsigned char wchar_t;\n\n    typedef bool (__thiscall *IsButtonDown_t)(void*, int);\n]]\nlocal interface_ptr = ffi.typeof('void***')\n\nlocal raw_inputsystem = client.create_interface('inputsystem.dll', 'InputSystemVersion001')\n\n-- cast the lightuserdata to a type that we can dereference\nlocal inputsystem = ffi.cast(interface_ptr, raw_inputsystem) -- void***\n\n-- dereference the interface pointer to get its vtable\nlocal inputsystem_vtbl = inputsystem[0] -- void**\n\n-- vtable is an array of functions, the 15th is IsButtonDown\nlocal raw_IsButtonDown = inputsystem_vtbl[15] -- void*\n\n-- cast the function pointer to a callable type\nlocal is_button_pressed = ffi.cast('IsButtonDown_t', raw_IsButtonDown)\n\nlocal function run_command(cmd)\n    if is_button_pressed(inputsystem, 36) then -- ButtonCode_t for Z\n        print('Z is pressed')\n    end\n    return false\nend\n\nclient.set_event_callback('run_command', run_command)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Player List Field Values (Lua)\nDESCRIPTION: Function to get a value from a specific field in the player list for a given player index. Takes an entity index and field name as parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/plist.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nplist.get(entindex: number, field: string)\n```\n\n----------------------------------------\n\nTITLE: CTEPlayerDecal Structure Properties\nDESCRIPTION: Defines the properties of the CTEPlayerDecal structure used for handling player decals in the game engine. Contains vectors for position and orientation, entity identifiers, and hitbox information.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEPlayerDecal.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_vecStart` (vector)\n* `m_vecRight` (vector)\n* `m_nEntity` (integer)\n* `m_nPlayer` (integer)\n* `m_nHitbox` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CTEPlayerDecal Properties\nDESCRIPTION: Lists the properties of the CTEPlayerDecal structure including vector positions for origin, start and right directions, along with entity, player and hitbox identifiers.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEPlayerDecal.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_vecStart` (vector)\n* `m_vecRight` (vector)\n* `m_nEntity` (integer)\n* `m_nPlayer` (integer)\n* `m_nHitbox` (integer)\n```\n\n----------------------------------------\n\nTITLE: Getting Model Name from Index (GameSense Lua)\nDESCRIPTION: Fetches model name by its index, returning a string or nil on failure. Useful for skin, model manipulation, or advanced ESP scripts. Requires model indices, accessible from the entity or game data.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nclient.get_model_name(model_index: number)\n```\n\n----------------------------------------\n\nTITLE: Logging Error Messages to Console in GameSense (Lua)\nDESCRIPTION: Logs an error message to the console, primarily for debugging or signalling script failures. Requires a string message and is typically used in exception handling or fatal error states.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nclient.error_log(msg: string)\n```\n\n----------------------------------------\n\nTITLE: Defining CTEEnergySplash Data Table Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the CTEEnergySplash data table, including its position vector, direction vector, and explosive flag properties. It's likely used for representing energy splash effects in a game engine or simulation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEEnergySplash.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CTEEnergySplash\n\n* `m_vecPos` (vector)\n* `m_vecDir` (vector)\n* `m_bExplosive` (integer)\n```\n\n----------------------------------------\n\nTITLE: Logging Formatted Console Messages (GameSense Lua)\nDESCRIPTION: Logs a formatted message with [gamesense] prefix to console. Accepts a string and variadic arguments for concatenation. Useful for script debugging, status display, or progress reporting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nclient.log(msg: string[, ...])\n```\n\n----------------------------------------\n\nTITLE: Drawing Linear Gradient - renderer API - JavaScript\nDESCRIPTION: Draws a rectangular gradient at the designated screen region, interpolating between two RGBA colors either horizontally or vertically depending on the ltr boolean. It requires explicit coordinates, dimensions (w, h), and color stops. Only callable during paint, this function enables effects like fades or backgrounds in HUD/UI overlays.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.gradient(x, y, w, h, r1, g1, b1, a1, r2, g2, b2, a2, ltr);\n```\n\n----------------------------------------\n\nTITLE: Defining CTEFizz Data Structure Properties in Markdown\nDESCRIPTION: Lists the properties of the CTEFizz data structure, including their names and types. This structure is likely used for representing fizz effects in a game engine, with properties for entity reference, model index, density, and current state.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEFizz.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_nEntity` (integer)\n* `m_nModelIndex` (integer)\n* `m_nDensity` (integer)\n* `m_nCurrent` (integer)\n```\n\n----------------------------------------\n\nTITLE: Get Menu Size\nDESCRIPTION: Returns the width and height dimensions of the menu, regardless of whether it is open or closed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nui.menu_size()\n```\n\n----------------------------------------\n\nTITLE: Updating Player List in Lua\nDESCRIPTION: Updates the player list tab without requiring it to be opened. This function is useful for refreshing player information programmatically.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nclient.update_player_list()\n```\n\n----------------------------------------\n\nTITLE: Returning a Normalized Copy of a Vector in Lua\nDESCRIPTION: This snippet covers :normalized, which returns a new vector instance representing the unit vector in the same direction as the source. No arguments; returns a normalized vector. Does not modify the original object.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:normalized(): vector\n```\n\n----------------------------------------\n\nTITLE: Listing CTriggerPlayerMovement Properties in Markdown\nDESCRIPTION: This snippet provides a detailed list of properties for the CTriggerPlayerMovement class, including their names and data types. It covers various aspects of entity behavior such as positioning, rendering, collision, and movement characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTriggerPlayerMovement.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_vecFinalDest` (vector)\n* `m_movementType` (integer)\n* `m_flMoveTargetTime` (float)\n* `m_bClientSidePredicted` (integer)\n* `m_spawnflags` (integer)\n```\n\n----------------------------------------\n\nTITLE: Create String Element\nDESCRIPTION: Creates a string UI element for storing arbitrary strings in configs, without creating a visible menu item.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nui.new_string(name: string[, default_value: string])\n```\n\n----------------------------------------\n\nTITLE: Getting 2D vector length in Lua\nDESCRIPTION: Returns the 2D length of the vector using only X and Y components.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:length2d(): number\n```\n\n----------------------------------------\n\nTITLE: Converting World to Screen Coordinates in Lua Game Scripting\nDESCRIPTION: Function to convert world coordinates to screen coordinates. Returns screen X and Y coordinates, or nil if the world position is not visible. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.world_to_screen(x: number, y: number, z: number): number, number, number\n```\n\n----------------------------------------\n\nTITLE: Unpacking vector components in Lua\nDESCRIPTION: Returns the X, Y and Z coordinates of the vector object as separate values. Components can also be accessed directly via vec.x, vec.y, etc.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:unpack(): number, number, number\n```\n\n----------------------------------------\n\nTITLE: Calculating 3D Distance Between Vectors with Lua Vector Library\nDESCRIPTION: This snippet documents the :dist method for computing the Euclidean (3D) distance between two vectors. The method accepts another vector as a parameter and returns a number representing the distance. No additional dependencies are required beyond the vector library.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:dist(other: vector): number\n```\n\n----------------------------------------\n\nTITLE: Creating a scaled vector in Lua\nDESCRIPTION: Returns a new vector scaled by the specified scalar value. The original vector remains unchanged.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:scaled(scalar: number): vector\n```\n\n----------------------------------------\n\nTITLE: Loading SVG Texture - renderer API - JavaScript\nDESCRIPTION: Builds a renderable texture from SVG source text and requested image dimensions, returning a texture ID or nil on parse failure. This function enables vector images in UI overlays, supporting scalable and resolution-independent artwork. Intended for dynamic or user-supplied SVG resources.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.load_svg(contents, width, height);\n```\n\n----------------------------------------\n\nTITLE: Getting Player SteamID - Lua\nDESCRIPTION: Retrieves the steamID3 string for a specified player entity index. Returns a string on success or nil on failure. Input is the player's entity index.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_steam64(player: number): string\n```\n\n----------------------------------------\n\nTITLE: Getting the Local Player's Entity Index - Lua\nDESCRIPTION: Returns the entity index of the local (controlling) player, or nil on failure. Allows scripts to reference actions from the player's perspective. No parameters required.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_local_player(): number (entindex)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Depth for JSON Decoding (Lua)\nDESCRIPTION: Function to set the maximum depth for JSON decoding. It takes a number argument representing the depth and returns the current setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/json.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\njson.decode_max_depth([setting: number]): number\n```\n\n----------------------------------------\n\nTITLE: Performing World Visibility Checks using Client API in Lua\nDESCRIPTION: This snippet demonstrates the 'client.visible(x, y, z)' function to check if a position in world space is visible. It accepts three numbers representing the world coordinates (x, y, z) and returns a boolean indicating visibility, commonly used to determine if players or objects at a given location can be seen. Input coordinates must be valid world positions; false is returned if occluded or invalid.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_31\n\nLANGUAGE: Lua\nCODE:\n```\nclient.visible(x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Getting Choked Commands Count in Lua\nDESCRIPTION: Returns the number of commands that haven't yet been sent to the server.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nglobals.chokedcommands(): number\n```\n\n----------------------------------------\n\nTITLE: Loading SVG Texture in Lua Game Scripting\nDESCRIPTION: Function to load a texture from SVG file contents. Returns a texture ID for use with renderer.texture, or nil on failure. Parameters include SVG data, width, and height.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.load_svg(contents: string, width: number, height: number): number (texture id)\n```\n\n----------------------------------------\n\nTITLE: Initializing vector coordinates in Lua\nDESCRIPTION: Overwrites the X, Y and Z coordinates of an existing vector object and returns itself.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:init(x: number, y: number, z: number): vector\n```\n\n----------------------------------------\n\nTITLE: Checking if Entity is Dormant - Lua\nDESCRIPTION: Returns true if the specified entity is dormant, false otherwise. Dormant entities may be hidden or not updated in memory. Input is entity index; output is boolean.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_15\n\nLANGUAGE: Lua\nCODE:\n```\nentity.is_dormant(ent: number): boolean\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript Code in CS:GO Panorama UI - JavaScript\nDESCRIPTION: The panorama.loadstring API enables the injection and execution of JavaScript code within CS:GO's Panorama UI. It accepts 'js_code' as the code to execute, and an optional 'panel' parameter to specify the target UI panel. This functionality allows for dynamic extension or modification of the UI at runtime. Dependencies include access to the CS:GO Panorama API. Inputs are a JavaScript code string and optionally a panel name; the output is the execution of the code on the specified UI panel. Ensure proper code validation, as arbitrary code execution may be a security concern.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/panorama.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npanorama.loadstring(js_code: string[, panel: string])\n```\n\n----------------------------------------\n\nTITLE: Scaling Damage Based on Hitgroup (GameSense Lua)\nDESCRIPTION: Returns the effective damage for a given player entity, hitgroup id, and raw damage value. Useful for custom hit registration, loggers, or cheat features. Arguments are entindex, hitgroup index, and initial damage.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nclient.scale_damage(entindex: number, hitgroup: number, damage: number)\n```\n\n----------------------------------------\n\nTITLE: Scaling a vector in place in Lua\nDESCRIPTION: Scales the vector by multiplying it by the specified scalar value. Modifies the vector in place.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:scale(scalar: number)\n```\n\n----------------------------------------\n\nTITLE: Loading PNG Texture in Lua Game Scripting\nDESCRIPTION: Function to load a texture from raw PNG file contents. Returns a texture ID for use with renderer.texture, or nil on failure. Parameters include PNG data, width, and height.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.load_png(contents: string, width: number, height: number): number (texture id)\n```\n\n----------------------------------------\n\nTITLE: Returning a Scaled Copy of a Vector in Lua\nDESCRIPTION: This snippet highlights :scaled, which produces a new vector with all components multiplied by the given scalar value. Takes a number (scalar) argument and returns a freshly scaled vector. Leaves the original vector unchanged.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:scaled(scalar: number): vector\n```\n\n----------------------------------------\n\nTITLE: Getting right and up vectors in Lua\nDESCRIPTION: Returns the right and up vectors corresponding to the forward vector.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:vectors(): vector, vector\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector from Angles in Lua\nDESCRIPTION: This snippet shows the :init_from_angles method, which converts supplied pitch, yaw, and optional roll into a normalized forward vector. It overwrites the calling vector's x, y, and z fields and returns itself. This is commonly used in game or simulation scripting for direction computation based on angles.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:init_from_angles(pitch: number, yaw: number[, roll: number]): vector\n```\n\n----------------------------------------\n\nTITLE: Using bit.bxor for Bitwise XOR Operation in Lua\nDESCRIPTION: Performs a bitwise XOR (exclusive OR) operation on two or more numeric arguments, returning the result where bits are set if they are set in an odd number of arguments.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nbit.bxor(x1: number, [x2...]: number)\n```\n\n----------------------------------------\n\nTITLE: Using bit.rshift for Logical Right Shift in Lua\nDESCRIPTION: Performs a bitwise logical right-shift operation, treating the input as an unsigned number and shifting in 0-bits. Only the lower 5 bits of the shift count are used.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nbit.rshift(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Resource Entity Index with entity.get_player_resource (Lua)\nDESCRIPTION: Retrieves the entity index associated with CCSPlayerResource or nil if no instance is available. Used for scripts that require aggregate player data or cross-referencing player resources. No arguments needed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_player_resource()\n```\n\n----------------------------------------\n\nTITLE: Using bit.tohex for Hex String Conversion in Lua\nDESCRIPTION: Converts a number to a hexadecimal string representation with specified number of digits. Positive values for n generate lowercase hex digits, negative values generate uppercase hex digits.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nbit.tohex(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Stringifying Lua Values to JSON (Lua)\nDESCRIPTION: Function to convert Lua values into JSON strings. It takes a Lua value (boolean, number, string, table, or nil) and returns the JSON representation as a string.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/json.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\njson.stringify(value: any): string\n```\n\n----------------------------------------\n\nTITLE: Calculating 2D Length of a Vector in Lua\nDESCRIPTION: This snippet uses the :length2d method to compute the magnitude of a vector considering only its x and y components. Takes no arguments and returns a number. Often used in game programming for movement on a plane.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:length2d(): number\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration by Name, Tab, or Container via Lua\nDESCRIPTION: The function config.load(name, tab, container) loads configuration data at different levels of specificity. The 'name' parameter is required and identifies the configuration set, while 'tab' and 'container' parameters are optional and allow targeting a specific tab or container, respectively. Sample usage: config.load('Config name here'), config.load('Config name here', 'Tab name here'), or config.load('Config name here', 'Tab name here', 'Container name here'). The function is designed for granular configuration loading and expects string inputs for all parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/config.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nconfig.load(name: string, tab: string, container: string)\n```\n\nLANGUAGE: lua\nCODE:\n```\nconfig.load('Config name here')\n```\n\nLANGUAGE: lua\nCODE:\n```\nconfig.load('Config name here', 'Tab name here')\n```\n\nLANGUAGE: lua\nCODE:\n```\nconfig.load('Config name here', 'Tab name here', 'Container name here')\n```\n\n----------------------------------------\n\nTITLE: Calculating Squared 2D Length of a Vector in Lua\nDESCRIPTION: This snippet documents the :length2dsqr method, which returns the squared magnitude of a vector's x and y components to save computation. Takes no arguments and returns a number, allowing optimizations when only relative magnitudes are important.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:length2dsqr(): number\n```\n\n----------------------------------------\n\nTITLE: Creating UI Hotkey\nDESCRIPTION: Creates a hotkey control that can be bound to a specific key.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nui.new_hotkey(tab: string, container: string, name: string[, inline: boolean] [, default_hotkey: number])\n```\n\n----------------------------------------\n\nTITLE: Scaling a Vector In-place with Lua Vector Library\nDESCRIPTION: This snippet demonstrates the :scale method, which multiplies a vector’s x, y, and z by a supplied scalar value, modifying the original vector. Expects a number (scalar) as its only parameter. No return value; primarily used for transformations in-place.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:scale(scalar: number)\n```\n\n----------------------------------------\n\nTITLE: Rendering Texture by ID - renderer API - JavaScript\nDESCRIPTION: Draws an existing texture (previously loaded by load_rgba, load_png, load_jpg, or load_svg) onto screen at given coordinates and dimensions. Supports RGBA color override and drawing mode ('f' for fill or 'r' for repeat). Essential for custom icons, images, or sprites in overlays.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.texture(id, x, y, w, h, r, g, b, a[, mode]);\n```\n\n----------------------------------------\n\nTITLE: Translating User ID to Entity Index using Client API in Lua\nDESCRIPTION: This snippet describes how to use 'client.userid_to_entindex(userid)' to convert a user ID into its corresponding entity index. The function takes a numeric 'userid', often provided by game events, and returns the entity index as a number (or 0 on failure). This operation is important for resolving player-related identifiers to their runtime game entity representations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_30\n\nLANGUAGE: Lua\nCODE:\n```\nclient.userid_to_entindex(userid)\n```\n\n----------------------------------------\n\nTITLE: Creating UI Slider\nDESCRIPTION: Creates a slider control with customizable range, tooltips and display format.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nui.new_slider(tab: string, container: string, name: string, min: number, max: number[, init_value: number] [, show_tooltip: boolean] [, unit: string] [, scale: number] [, tooltips: table])\n```\n\n----------------------------------------\n\nTITLE: Using bit.arshift for Arithmetic Right Shift in Lua\nDESCRIPTION: Performs a bitwise arithmetic right-shift where the most-significant bit is treated as a sign bit and replicated. Only the lower 5 bits of the shift count are used.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nbit.arshift(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Encoding Invalid Numbers in JSON (Lua)\nDESCRIPTION: Function to control whether invalid numbers are allowed during JSON encoding. It takes a boolean argument and returns the current setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/json.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_invalid_numbers([setting: boolean]): boolean\n```\n\n----------------------------------------\n\nTITLE: Obtaining an Entity's World Origin - Lua\nDESCRIPTION: Fetches the 3D world coordinates (x, y, z) of a specified entity. Input is entity index; output is three numbers representing coordinates. Works for non-dormant entities and returns dormant ESP origin for players.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_origin(ent: number): number, number, number\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Entity's Classname - Lua\nDESCRIPTION: Returns the classname string associated with a given entity index or nil on failure. Useful for entity type disambiguation within game logic. Input is the entity index, output is a string identifying the class or nil if not found.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_classname(ent: number): string\n```\n\n----------------------------------------\n\nTITLE: Referencing Documentation Pages with Liquid in Markdown\nDESCRIPTION: This snippet demonstrates the use of the Liquid templating language's page-ref tag within Markdown to link to documentation pages for individual game items. Each line invokes {% page-ref page=\"FileName.md\" %}, where the parameter specifies the markdown file for a specific item. These tags depend on the documentation rendering platform (such as GitBook) that supports Liquid syntax to generate links or embeds. The input requires the correct filename and ensures consistent reference formatting for easy navigation to related documentation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/items.md#_snippet_0\n\nLANGUAGE: Markdown+Liquid\nCODE:\n```\n{% page-ref page=\"CAK47.md\" %}\n{% page-ref page=\"CBaseCSGrenade.md\" %}\n{% page-ref page=\"CBaseGrenade.md\" %}\n{% page-ref page=\"CBreachCharge.md\" %}\n{% page-ref page=\"CBumpMine.md\" %}\n{% page-ref page=\"CC4.md\" %}\n{% page-ref page=\"CDEagle.md\" %}\n{% page-ref page=\"CDecoyGrenade.md\" %}\n{% page-ref page=\"CEconEntity.md\" %}\n{% page-ref page=\"CFists.md\" %}\n{% page-ref page=\"CFlashbang.md\" %}\n{% page-ref page=\"CHEGrenade.md\" %}\n{% page-ref page=\"CIncendiaryGrenade.md\" %}\n{% page-ref page=\"CItem_Healthshot.md\" %}\n{% page-ref page=\"CItemCash.md\" %}\n{% page-ref page=\"CItemDogtags.md\" %}\n{% page-ref page=\"CKnife.md\" %}\n{% page-ref page=\"CKnifeGG.md\" %}\n{% page-ref page=\"CMelee.md\" %}\n{% page-ref page=\"CMolotovGrenade.md\" %}\n{% page-ref page=\"CSCAR17.md\" %}\n{% page-ref page=\"CSensorGrenade.md\" %}\n{% page-ref page=\"CSmokeGrenade.md\" %}\n{% page-ref page=\"CSnowball.md\" %}\n{% page-ref page=\"CTablet.md\" %}\n{% page-ref page=\"CWeaponAug.md\" %}\n{% page-ref page=\"CWeaponAWP.md\" %}\n{% page-ref page=\"CWeaponBaseItem.md\" %}\n{% page-ref page=\"CWeaponBizon.md\" %}\n{% page-ref page=\"CWeaponCSBase.md\" %}\n{% page-ref page=\"CWeaponCSBaseGun.md\" %}\n{% page-ref page=\"CWeaponCycler.md\" %}\n{% page-ref page=\"CWeaponElite.md\" %}\n{% page-ref page=\"CWeaponFamas.md\" %}\n{% page-ref page=\"CWeaponFiveSeven.md\" %}\n{% page-ref page=\"CWeaponG3SG1.md\" %}\n{% page-ref page=\"CWeaponGalil.md\" %}\n{% page-ref page=\"CWeaponGalilAR.md\" %}\n{% page-ref page=\"CWeaponGlock.md\" %}\n{% page-ref page=\"CWeaponHKP2000.md\" %}\n{% page-ref page=\"CWeaponM249.md\" %}\n{% page-ref page=\"CWeaponM3.md\" %}\n{% page-ref page=\"CWeaponM4A1.md\" %}\n{% page-ref page=\"CWeaponMAC10.md\" %}\n{% page-ref page=\"CWeaponMag7.md\" %}\n{% page-ref page=\"CWeaponMP5Navy.md\" %}\n{% page-ref page=\"CWeaponMP7.md\" %}\n{% page-ref page=\"CWeaponMP9.md\" %}\n{% page-ref page=\"CWeaponNegev.md\" %}\n{% page-ref page=\"CWeaponNOVA.md\" %}\n{% page-ref page=\"CWeaponP228.md\" %}\n{% page-ref page=\"CWeaponP250.md\" %}\n{% page-ref page=\"CWeaponP90.md\" %}\n{% page-ref page=\"CWeaponSawedoff.md\" %}\n{% page-ref page=\"CWeaponSCAR20.md\" %}\n{% page-ref page=\"CWeaponScout.md\" %}\n{% page-ref page=\"CWeaponSG550.md\" %}\n{% page-ref page=\"CWeaponSG552.md\" %}\n{% page-ref page=\"CWeaponSG556.md\" %}\n{% page-ref page=\"CWeaponShield.md\" %}\n{% page-ref page=\"CWeaponSSG08.md\" %}\n{% page-ref page=\"CWeaponTaser.md\" %}\n{% page-ref page=\"CWeaponTec9.md\" %}\n{% page-ref page=\"CWeaponTMP.md\" %}\n{% page-ref page=\"CWeaponUMP45.md\" %}\n{% page-ref page=\"CWeaponUSP.md\" %}\n{% page-ref page=\"CWeaponXM1014.md\" %}\n{% page-ref page=\"CWeaponZoneRepulsor.md\" %}\n{% page-ref page=\"ParticleSmokeGrenade.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Compiling Lua Script to Bytecode using LuaJIT\nDESCRIPTION: Command to compile a Lua script (.lua) into LuaJIT bytecode (.ljbc) format. The command takes a source Lua file as input and produces a compiled bytecode file as output.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/gitbook/development/compiling.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nluajit.exe -b script.lua compiled.ljbc\n```\n\n----------------------------------------\n\nTITLE: Using bit.lshift for Logical Left Shift in Lua\nDESCRIPTION: Performs a bitwise logical left-shift operation, treating the input as an unsigned number and shifting in 0-bits. Only the lower 5 bits of the shift count are used.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nbit.lshift(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Controlling JSON Encoding Buffer Reuse (Lua)\nDESCRIPTION: Function to control whether the JSON encoding buffer is kept for reuse. It takes an optional boolean argument and returns the current setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/json.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_keep_buffer([setting: boolean]): boolean\n```\n\n----------------------------------------\n\nTITLE: Loading RGBA Texture from Hex Buffer - renderer API - JavaScript\nDESCRIPTION: Creates a new texture from a raw, hex-encoded RGBA pixel buffer, sized by supplied width and height. Used for dynamically generated data or pixel manipulation. On failure, returns nil, and the result can be rendered with renderer.texture.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.load_rgba(contents, width, height);\n```\n\n----------------------------------------\n\nTITLE: Creating UI Multiselect\nDESCRIPTION: Creates a dropdown that allows selecting multiple options.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nui.new_multiselect(tab: string, container: string, name: string, ...)\n```\n\n----------------------------------------\n\nTITLE: Standard Console Logging in Gamesense Format (Lua)\nDESCRIPTION: Logs a plain string or arguments to the console formatted as '[gamesense]'. Used for informational or debug output in scripts. Accepts additional arguments for concatenation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_14\n\nLANGUAGE: Lua\nCODE:\n```\nclient.log(msg: string[, ...])\n```\n\n----------------------------------------\n\nTITLE: Querying Player List Field with JavaScript\nDESCRIPTION: Demonstrates the use of the \\`plist.get\\` function to retrieve a specific field for a player at a given index. Depends on a \\`plist\\` object or module defined elsewhere in the application. Key parameters include \\`entindex\\` (the numeric player index) and \\`field\\` (the field name or menu item to retrieve). The function is expected to return the value of the specified field for the player, or possibly undefined if the field/index is invalid; no constraints beyond those implied are documented.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/plist.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nplist.get(entindex: number, field: string)\n```\n\n----------------------------------------\n\nTITLE: Creating UI Listbox\nDESCRIPTION: Creates a scrollable list of selectable items.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nui.new_listbox(tab: string, container: string, name: string[, items: table])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Player Count in Lua\nDESCRIPTION: Returns the maximum number of players allowed in the server.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nglobals.maxplayers(): number\n```\n\n----------------------------------------\n\nTITLE: Documenting CBaseCombatWeapon Entity Properties - Markdown\nDESCRIPTION: This snippet consists of a markdown bullet-point list enumerating all properties of the CBaseCombatWeapon entity for DT_BaseCombatWeapon. It provides the name, type, and shape (where applicable) of each field, serving as a reference schema. No dependencies are required to use this documentation, but it is expected to be consumed by developers who understand entity definitions within the Source engine networking layer. Input is not expected; output is a human-readable catalog of fields and their data types.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBaseCombatWeapon.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBaseCombatWeapon\n\n\n* `m_hMyWearables` (integer[0])\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Squared 3D Length of a Vector in Lua\nDESCRIPTION: This snippet explains the :lengthsqr method, which computes the squared length of the vector (x, y, z), avoiding a square root for performance. Useful for fast distance comparisons. No arguments required.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:lengthsqr(): number\n```\n\n----------------------------------------\n\nTITLE: Updating Player List Field with JavaScript\nDESCRIPTION: Illustrates the use of the \\`plist.set\\` function to assign a value to a specific field for a player at a given index. This operation requires the \\`plist\\` object/module and allows assigning any value (type \\`any\\`) to a named field. Parameters include \\`entindex\\` (numeric player index), \\`field\\` (menu item or field name), and \\`value\\` (the value to set). The function likely returns void and performs a side effect; input types are minimally constrained, potentially requiring validation in actual use.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/plist.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nplist.set(entindex: number, field: string, value: any)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Map Name in Lua\nDESCRIPTION: Returns the name of the loaded map, or nil if not in game.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nglobals.mapname(): string\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Players or Enemies Only - Lua\nDESCRIPTION: Returns a list of all player entity indices or, if specified, enemies only. Supports filtering with a boolean parameter; returns a table of indices for in-game players meeting selection criteria. Excludes dormant and dead players.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_players([enemies_only: boolean]): table (entindex)\n```\n\n----------------------------------------\n\nTITLE: Console Input Callback Logging in Gamesensical Lua\nDESCRIPTION: Defines an event callback for the 'console_input' event to log user-entered text to the client log. Uses client.set_event_callback and client.log within the handler, accepting a single text parameter (user's console input). This snippet requires the 'client' object/namespace from the Gamesensical Lua environment. When the user enters text into the console, the message is logged in the format 'entered: '<input>'', and no further processing or return value is shown.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/events.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nclient.set_event_callback(\"console_input\", function(text)\\n\\tclient.log(\"entered: '\", text, \"'\")\\nend)\n```\n\n----------------------------------------\n\nTITLE: Getting Mouse Position\nDESCRIPTION: Returns the current x and y coordinates of the mouse cursor.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nui.mouse_position()\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Outgoing Command in Lua\nDESCRIPTION: Returns the command number of the last outgoing command.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nglobals.lastoutgoingcommand(): number\n```\n\n----------------------------------------\n\nTITLE: Querying Screen Resolution (Lua)\nDESCRIPTION: Returns the game's screen dimensions as two numbers (width, height). Used for positioning UI overlays or custom rendering tasks in GameSense Lua scripts.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\nclient.screen_size()\n```\n\n----------------------------------------\n\nTITLE: Drawing Enemy Head Dots Using Game API in Lua\nDESCRIPTION: This Lua script highlights enemy player head positions in a game by rendering colored circles—red for visible, white for invisible (based on line-of-sight checks). It makes use of core API calls (such as client.eye_position, entity.get_players, and renderer.circle), optimizing performance by localizing frequently used functions. The key parameters include enemy indices, eye position, head coordinates, and the output location of the rendered circle. This requires a runtime that provides the game API described, and is invoked on the paint event. The drawing only occurs if screen-space coordinates are valid. Output is visual—screen overlays—with limited impact on performance.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/mkdocs/docs/development/examples/head_dot.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- localize often used API variables to improve performance. It's usually fine to not do this, but lua then has to look them up as globals every time.\\nlocal client_eye_position, client_trace_line, entity_get_local_player, entity_get_players, entity_hitbox_position, renderer_circle, renderer_world_to_screen = client.eye_position, client.trace_line, entity.get_local_player, entity.get_players, entity.hitbox_position, renderer.circle, renderer.world_to_screen\\n\\nlocal function on_paint()\\n\\tlocal local_player = entity_get_local_player()\\n\\tlocal eye_x, eye_y, eye_z = client_eye_position()\\n\\n\\t-- get all alive, non-dormant enemy players\\n\\tlocal enemies = entity_get_players(true)\\n\\n\\tfor i=1, #enemies do\\n\\t\\tlocal entindex = enemies[i]\\n\\n\\t\\t-- get the world coordinates of the head hitbox of the enemy\\n\\t\\tlocal head_x, head_y, head_z = entity_hitbox_position(entindex, 0)\\n\\n\\t\\t-- transform world coordinates to screen coordinates\\n\\t\\tlocal wx, wy = renderer_world_to_screen(head_x, head_y, head_z)\\n\\n\\t\\t-- make sure to always check if the screen coordinates are valid. it's enough to only check wx\\n\\t\\tif wx ~= nil then\\n\\t\\t\\tlocal r, g, b, a = 255, 255, 255, 100\\n\\n\\t\\t\\t-- ray trace from your eye position to the enemy head, ignoring our local player, to determine if it's visible\\n\\t\\t\\tlocal fraction, entindex_hit = client_trace_line(local_player, eye_x, eye_y, eye_z, head_x, head_y, head_z)\\n\\n\\t\\t\\tif entindex_hit == entindex or fraction == 1 then\\n\\t\\t\\t\\t-- the trace either hit the enemy or hit nothing, meaning the head is visible, so we change the color\\n\\t\\t\\t\\tr, g, b, a = 255, 16, 16, 255\\n\\t\\t\\tend\\n\\n\\t\\t\\t-- draw circle with radius 4, so we offset the x and y by -2\\n\\t\\t\\trenderer_circle(wx-2, wy-2, r, g, b, a, 4, 0, 1)\\n\\t\\tend\\n\\tend\\nend\\nclient.set_event_callback(\"paint\", on_paint)\n```\n\n----------------------------------------\n\nTITLE: Drawing Gradient Rectangle in Lua Game Scripting\nDESCRIPTION: Function to draw a gradient-filled rectangle on the screen. Parameters include position, dimensions, start and end colors, and gradient direction. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.gradient(x: number, y: number, w: number, h: number, r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number, ltr: boolean)\n```\n\n----------------------------------------\n\nTITLE: Using bit.rol for Bitwise Left Rotation in Lua\nDESCRIPTION: Performs a bitwise left rotation where bits shifted out on one side are shifted back in on the other side. Only the lower 5 bits of the rotate count are used.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nbit.rol(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Checking Menu Open State\nDESCRIPTION: Returns whether the GameSense menu is currently open or closed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nui.is_menu_open()\n```\n\n----------------------------------------\n\nTITLE: Automating Chat Messages on Kill Event with Lua\nDESCRIPTION: This Lua snippet listens for the 'player_death' event and sends an automated chat message when the local player kills an enemy. If the kill is a headshot, the message 'one tap' is sent; otherwise, 'effortless' is sent. The script relies on exposed functions and event APIs from the host environment (such as 'client.userid_to_entindex', 'entity.get_local_player', 'entity.is_enemy', and 'client.exec'), and assumes the existence of proper game modding interfaces. Expected input is an event table with 'userid', 'attacker', and 'headshot' fields. Outputs are chat messages sent with console commands. Integration requires a compatible Lua environment within the host game.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/gitbook/development/examples/talk_shit.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal userid_to_entindex, get_local_player, is_enemy, console_cmd = client.userid_to_entindex, entity.get_local_player, entity.is_enemy, client.exec\n\nlocal function on_player_death(e)\n\tlocal victim_userid, attacker_userid = e.userid, e.attacker\n\tif victim_userid == nil or attacker_userid == nil then\n\t\treturn\n\tend\n\n\tlocal victim_entindex = userid_to_entindex(victim_userid)\n\tlocal attacker_entindex = userid_to_entindex(attacker_userid)\n\n\tif attacker_entindex == get_local_player() and is_enemy(victim_entindex) then\n\t\tconsole_cmd(\"say \", e.headshot and \"one tap\" or \"effortless\")\n\tend\nend\nclient.set_event_callback(\"player_death\", on_player_death)\n```\n\n----------------------------------------\n\nTITLE: Using bit.rshift for Logical Right Shift in Lua\nDESCRIPTION: Performs a bitwise logical right-shift operation, treating the number as unsigned and shifting in 0-bits from the left. Only the lower 5 bits of the shift count are used.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nbit.rshift(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Using bit.bxor for Bitwise XOR in Lua\nDESCRIPTION: Performs a bitwise XOR (exclusive OR) operation on two or more numbers, returning the result where bits are set if they are set in an odd number of arguments.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nbit.bxor(x1: number, [x2...]: number)\n```\n\n----------------------------------------\n\nTITLE: Adding Auto-buy AWP Checkbox with Lua in Gamesensical Script\nDESCRIPTION: This Lua snippet adds a checkbox labeled 'Auto buy AWP' to the 'MISC' user interface tab using custom ui and client APIs provided by the Gamesensical scripting environment. When the checkbox is enabled, the script hooks into the 'round_prestart' game event and automatically executes the 'buy awp' command to purchase the AWP at the start of each round. Dependencies include the Gamesensical Lua API with access to 'ui', 'client', and game event callbacks. The key parameter is the state of the auto_buy_awp checkbox; no user input besides toggling the UI is required. The script operates under game conditions where server or script constraints permit automatic purchases via Lua.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/gitbook/development/examples/auto_buy.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ui_get, console_cmd = ui.get, client.exec\n\nlocal auto_buy_awp = ui.new_checkbox(\"MISC\", \"Miscellaneous\", \"Auto buy AWP\")\n\nlocal function on_round_prestart(e)\n\tif ui_get(auto_buy_awp) then\n\t\tconsole_cmd(\"buy awp;\")\n\tend\nend\nclient.set_event_callback(\"round_prestart\", on_round_prestart)\n```\n\n----------------------------------------\n\nTITLE: Getting Screen Size (GameSense Lua)\nDESCRIPTION: Returns current screen width and height as two numbers. Used for drawing overlays, positioning HUD elements, or centering UI. No input arguments. Returns width and height.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nclient.screen_size()\n```\n\n----------------------------------------\n\nTITLE: Defining CBaseTeamObjectiveResource Properties in Plaintext\nDESCRIPTION: This snippet lists the properties of the CBaseTeamObjectiveResource class, including their names, types, and array sizes where applicable. These properties likely represent game state for team objectives, control points, and related gameplay elements.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBaseTeamObjectiveResource.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `m_iTimerToShowInHUD` (integer)\n* `m_iStopWatchTimer` (integer)\n* `m_iNumControlPoints` (integer)\n* `m_bPlayingMiniRounds` (integer)\n* `m_bControlPointsReset` (integer)\n* `m_iUpdateCapHudParity` (integer)\n* `m_vCPPositions` (vector)\n* `m_bCPIsVisible` (integer[0-7])\n* `m_flLazyCapPerc` (float[0-7])\n* `m_iTeamIcons` (integer[0-63])\n* `m_iTeamOverlays` (integer[0-63])\n* `m_iTeamReqCappers` (integer[0-63])\n* `m_flTeamCapTime` (float[0-63])\n* `m_iPreviousPoints` (integer[0-191])\n* `m_bTeamCanCap` (integer[0-63])\n* `m_iTeamBaseIcons` (integer[0-31])\n* `m_iBaseControlPoints` (integer[0-31])\n* `m_bInMiniRound` (integer[0-7])\n* `m_vCPPositions` (array)\n* `m_iWarnOnCap` (integer[0-7])\n* `m_iszWarnSound` (string)\n* `m_flPathDistance` (float[0-7])\n* `m_iNumTeamMembers` (integer[0-63])\n* `m_iCappingTeam` (integer[0-7])\n* `m_iTeamInZone` (integer[0-7])\n* `m_bBlocked` (integer[0-7])\n* `m_iszWarnSound` (array)\n* `m_iOwner` (integer[0-7])\n* `m_pszCapLayoutInHUD` (string)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom ESP Flags (GameSense Lua)\nDESCRIPTION: Registers a new ESP flag with custom text, color, and a callback determining visibility. Flags show when the callback returns true for an entity. Requires 'Flags' to be enabled in Player ESP for rendering. Arguments include text, RGB, and function.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nclient.register_esp_flag(flag: string, r: number, g: number, b: number, callback: function)\n```\n\n----------------------------------------\n\nTITLE: Unpacking Vector Components with Lua Vector Library\nDESCRIPTION: This snippet documents the :unpack method, which returns the x, y, and z components of a vector as three separate numbers. This is useful for cases where you need individual coordinates for further calculations or API inputs.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:unpack(): number, number, number\n```\n\n----------------------------------------\n\nTITLE: Getting Local Real Time in Lua\nDESCRIPTION: Returns the local time in seconds.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nglobals.realtime(): number\n```\n\n----------------------------------------\n\nTITLE: Getting Menu Size\nDESCRIPTION: Returns the width and height dimensions of the menu, regardless of whether it's open or closed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nui.menu_size()\n```\n\n----------------------------------------\n\nTITLE: CWeaponShield Property List\nDESCRIPTION: Complete property listing for CWeaponShield class showing property names and their data types. Includes properties for physics, rendering, animation, weapon mechanics, and general entity attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponShield.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Basic Material System Functions in Lua\nDESCRIPTION: Example placeholder for material system functions. The actual code example was empty in the source.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/materialsystem.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- materialsystem example here\n```\n\n----------------------------------------\n\nTITLE: Documenting CSGO Player Entity Properties in Plaintext\nDESCRIPTION: This snippet lists various player entity properties used in Counter-Strike: Global Offensive. It includes match statistics, player state indicators, and attributes related to specific game mechanics and modes. These properties are crucial for tracking player performance and controlling game behavior.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CCSPlayer.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `m_iMatchStats_Objective` (integer[0-29])\n* `m_iMatchStats_CashEarned` (integer[0-29])\n* `m_iMatchStats_UtilityDamage` (integer[0-29])\n* `m_unTotalRoundDamageDealt` (integer)\n* `m_iMatchStats_EnemiesFlashed` (integer[0-29])\n* `m_flLowerBodyYawTarget` (float)\n* `m_bStrafing` (integer)\n* `m_flThirdpersonRecoil` (float)\n* `m_bHideTargetID` (integer)\n* `m_bIsSpawnRappelling` (integer)\n* `m_vecSpawnRappellingRopeOrigin` (vector)\n* `m_nSurvivalTeam` (integer)\n* `m_hSurvivalAssassinationTarget` (integer)\n* `m_vecAutomoveTargetEnd` (vector)\n* `m_flAutoMoveStartTime` (float)\n* `m_flAutoMoveTargetTime` (float)\n* `m_flHealthShotBoostExpirationTime` (float)\n* `m_flLastExoJumpTime` (float)\n```\n\n----------------------------------------\n\nTITLE: Check Menu Open State\nDESCRIPTION: Returns a boolean indicating whether the menu is currently open.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nui.is_menu_open()\n```\n\n----------------------------------------\n\nTITLE: Getting Entity Origin Coordinates via entity.get_origin (Lua)\nDESCRIPTION: Retrieves the world position (x, y, z) of a specified entity, accepting an entity index as input. Returns three numbers if successful; for non-dormant entities, except for players where dormant ESP origin is returned. Used to track or visualize entity positions in 3D space.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/entity.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nentity.get_origin(ent: number)\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Variables in Lua\nDESCRIPTION: This snippet demonstrates the importance of using the 'local' keyword when declaring variables in Lua scripts to prevent conflicts between different scripts sharing the same environment.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/README.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal myVariable = \"value\"\n```\n\n----------------------------------------\n\nTITLE: Using bit.ror for Bitwise Right Rotation in Lua\nDESCRIPTION: Performs a bitwise right rotation where bits shifted out on one side are shifted back in on the other side. Only the lower 5 bits of the rotate count are used.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nbit.ror(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Getting Menu Position\nDESCRIPTION: Returns the x and y coordinates of the menu's position, regardless of whether it's open or closed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nui.menu_position()\n```\n\n----------------------------------------\n\nTITLE: Implementing CS:GO Watermark Overlay in Lua\nDESCRIPTION: Creates a dynamic watermark overlay showing ping, tickrate and system time. The script uses the CS:GO client API to fetch real-time data and render text with a semi-transparent background. Features configurable margin, padding, and text style options.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/gitbook/development/examples/watermark.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- localize often used API variables to improve performance. It's usually fine to not do this, but lua then has to look them up as globals every time.\nlocal client_latency, client_screen_size, client_system_time, globals_tickinterval, math_floor, renderer_measure_text, renderer_rectangle, renderer_text, string_format = client.latency, client.screen_size, client.system_time, globals.tickinterval, math.floor, renderer.measure_text, renderer.rectangle, renderer.text, string.format\n\n-- this function will be executed every time CS:GO renders a frame and lets you draw on top of the game scene.\nlocal function on_paint()\n\t-- fetch dynamic info. latency is in seconds so we convert it to ms and round it. tickrate is calculated with 1 / tickinterval\n\tlocal screen_width, screen_height = client_screen_size()\n\tlocal latency = math_floor(client_latency()*1000+0.5)\n\tlocal tickrate = 1/globals_tickinterval()\n\tlocal hours, minutes, seconds = client_system_time()\n\n\t-- create text\n\tlocal text = string_format(\"%dms\", latency) .. \" | \" .. string_format(\"%dtick\", tickrate) .. \" | \" .. string_format(\"%02d:%02d:%02d\", hours, minutes, seconds)\n\n\t-- modify these to change how the text appears. margin is the distance from the top right corner, padding is the size the background rectangle is larger than the text\n\tlocal margin, padding, flags = 18, 4, nil\n\n\t-- uncomment this for a \"small and capital\" style\n\t-- flags, text = \"-\", (text:upper():gsub(\" \", \"   \"))\n\n\t-- measure text size to properly offset the text from the top right corner\n\tlocal text_width, text_height = renderer_measure_text(flags, text)\n\n\t-- draw background and text\n\trenderer_rectangle(screen_width-text_width-margin-padding, margin-padding, text_width+padding*2, text_height+padding*2, 32, 32, 32, 200)\n\trenderer_text(screen_width-text_width-margin, margin, 235, 235, 235, 255, flags, 0, text)\nend\nclient.set_event_callback(\"paint\", on_paint)\n```\n\n----------------------------------------\n\nTITLE: Documenting CDangerZoneController Properties in Markdown\nDESCRIPTION: This code snippet lists all the properties of the CDangerZoneController class, including their names, types, and array sizes where applicable. It covers a wide range of functionality from basic entity properties to Danger Zone specific controls.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CDangerZoneController.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CDangerZoneController\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_bDangerZoneControllerEnabled` (integer)\n* `m_bMissionControlledExplosions` (integer)\n* `m_flStartTime` (float)\n* `m_flFinalExpansionTime` (float)\n* `m_vecEndGameCircleStart` (vector)\n* `m_DangerZones` (integer[0-41])\n* `m_vecEndGameCircleEnd` (vector)\n* `m_flWaveEndTimes` (float[0-4])\n* `m_hTheFinalZone` (integer)\n```\n\n----------------------------------------\n\nTITLE: Property Definitions for CPhysicsPropMultiplayer\nDESCRIPTION: Complete list of class member variables for CPhysicsPropMultiplayer entity, including physics properties, rendering attributes, animation states, and networked variables. Each property is defined with its name and data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CPhysicsPropMultiplayer.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_qPreferredPlayerCarryAngles` (vector)\n* `m_bClientPhysics` (integer)\n* `m_flPoseParameter` (integer)\n* `m_flPlaybackRate` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `overlay_vars` (integer)\n* `m_flexWeight` (integer)\n* `m_blinktoggle` (integer)\n* `m_bAwake` (integer)\n* `m_iPhysicsMode` (integer)\n* `m_fMass` (float)\n* `m_collisionMins` (vector)\n* `m_collisionMaxs` (vector)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Manipulating Materials in CS:GO (Lua)\nDESCRIPTION: This code snippet demonstrates various operations on materials in CS:GO, including retrieving arms and chams materials, finding materials by path, and manipulating material properties such as color and alpha.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/materialsystem.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- Get arms material\nlocal arms_material = materialsystem.arms_material()\n\n-- Get chams material\nlocal chams_material = materialsystem.chams_material()\n\n-- Find a specific material\nlocal my_material = materialsystem.find_material(\"models/player/ct_fbi/ct_fbi_glass\", true)\n\n-- Find materials with partial path\nlocal materials = materialsystem.find_materials(\"models/player\", true)\n\n-- Modify material color\nmy_material:color_modulate(255, 0, 0)  -- Set to red\n\n-- Modify material alpha\nmy_material:alpha_modulate(128)  -- Set to 50% opacity\n\n-- Get material name\nlocal material_name = my_material:get_name()\n\n-- Set shader parameter\nmy_material:set_shader_param(\"$envmaptint\", {1, 0, 0})  -- Red tint\n\n-- Get shader parameter\nlocal param_value = my_material:get_shader_param(\"$envmaptint\")\n\n-- Set material var flag\nmy_material:set_material_var_flag(4, true)  -- Enable ignorez\n\n-- Get material var flag\nlocal flag_value = my_material:get_material_var_flag(4)\n\n-- Reload material to original state\nmy_material:reload()\n```\n\n----------------------------------------\n\nTITLE: Rendering Watermark Overlay with Client API in Lua\nDESCRIPTION: This Lua code snippet listens for the CS:GO \"paint\" event and draws a text-based watermark at the top-right of the screen. It utilizes client APIs to obtain latency, tickrate, and system time, formats them into a display string, measures the required text area, and renders a styled rectangle background with overlaying text. Required dependencies include the client API (for latency, rendering, and event callbacks), the renderer (for drawing primitives), and Lua's math and string libraries. Users can modify the appearance by adjusting the margin, padding, colors, and optionally change text styling via the 'flags' variable; expected output is a visually distinct, real-time watermark while the game is running. The snippet is meant for platforms and scripts that have access to the described CS:GO Lua API functions.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/mkdocs/docs/development/examples/watermark.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- localize often used API variables to improve performance. It's usually fine to not do this, but lua then has to look them up as globals every time.\\nlocal client_latency, client_screen_size, client_system_time, globals_tickinterval, math_floor, renderer_measure_text, renderer_rectangle, renderer_text, string_format = client.latency, client.screen_size, client.system_time, globals.tickinterval, math.floor, renderer.measure_text, renderer.rectangle, renderer.text, string.format\\n\\n-- this function will be executed every time CS:GO renders a frame and lets you draw on top of the game scene.\\nlocal function on_paint()\\n\\t-- fetch dynamic info. latency is in seconds so we convert it to ms and round it. tickrate is calculated with 1 / tickinterval\\n\\tlocal screen_width, screen_height = client_screen_size()\\n\\tlocal latency = math_floor(client_latency()*1000+0.5)\\n\\tlocal tickrate = 1/globals_tickinterval()\\n\\tlocal hours, minutes, seconds = client_system_time()\\n\\n\\t-- create text\\n\\tlocal text = string_format(\"%dms\", latency) .. \" | \" .. string_format(\"%dtick\", tickrate) .. \" | \" .. string_format(\"%02d:%02d:%02d\", hours, minutes, seconds)\\n\\n\\t-- modify these to change how the text appears. margin is the distance from the top right corner, padding is the size the background rectangle is larger than the text\\n\\tlocal margin, padding, flags = 18, 4, nil\\n\\n\\t-- uncomment this for a \\\"small and capital\\\" style\\n\\t-- flags, text = \\\"-\\\", (text:upper():gsub(\" \", \"   \"))\\n\\n\\t-- measure text size to properly offset the text from the top right corner\\n\\tlocal text_width, text_height = renderer_measure_text(flags, text)\\n\\n\\t-- draw background and text\\n\\trenderer_rectangle(screen_width-text_width-margin-padding, margin-padding, text_width+padding*2, text_height+padding*2, 32, 32, 32, 200)\\n\\trenderer_text(screen_width-text_width-margin, margin, 235, 235, 235, 255, flags, 0, text)\\nend\\nclient.set_event_callback(\"paint\", on_paint)\n```\n\n----------------------------------------\n\nTITLE: Get Mouse Position\nDESCRIPTION: Returns the current x,y coordinates of the mouse cursor.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nui.mouse_position()\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto AWP Purchase in Lua\nDESCRIPTION: Creates a checkbox control in the miscellaneous tab and sets up an event handler to automatically purchase an AWP at the start of each round when enabled. Uses UI controls and client event callbacks to implement the functionality.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/examples/auto_buy.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ui_get, console_cmd = ui.get, client.exec\n\nlocal auto_buy_awp = ui.new_checkbox(\"MISC\", \"Miscellaneous\", \"Auto buy AWP\")\n\nlocal function on_round_prestart(e)\n\tif ui_get(auto_buy_awp) then\n\t\tconsole_cmd(\"buy awp;\")\n\tend\nend\nclient.set_event_callback(\"round_prestart\", on_round_prestart)\n```\n\n----------------------------------------\n\nTITLE: Using bit.bswap for Byte Swapping in Lua\nDESCRIPTION: Swaps the byte order of a 32-bit number, which can be used to convert between little-endian and big-endian representations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nbit.bswap(x: number)\n```\n\n----------------------------------------\n\nTITLE: Initializing vector from angles in Lua\nDESCRIPTION: Converts pitch, yaw and roll angles to a forward vector and overwrites the vector's coordinates with that. Returns itself.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:init_from_angles(pitch: number, yaw: number[, roll: number]): vector\n```\n\n----------------------------------------\n\nTITLE: Defining CWeaponFamas Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CWeaponFamas class, including their names and data types. It covers a wide range of attributes from basic entity properties to weapon-specific characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponFamas.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: CWeaponAug Property List\nDESCRIPTION: Complete list of properties for the CWeaponAug class, including base entity properties, weapon-specific attributes, and animation variables. Contains data types and array information for each property.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponAug.md#_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Implementing Aim Hit Event Logging in Lua\nDESCRIPTION: Example of handling the aim_hit event to log information when the rage aimbot successfully hits a player. Reports the player name, hitgroup, damage dealt, and remaining health of the target.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/events.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal hitgroup_names = {'generic', 'head', 'chest', 'stomach', 'left arm', 'right arm', 'left leg', 'right leg', 'neck', '?', 'gear'}\n\nlocal function aim_hit(e)\n\tlocal group = hitgroup_names[e.hitgroup + 1] or '?'\n\tprint(string.format('Hit %s in the %s for %d damage (%d health remaining)', entity.get_player_name(e.target), group, e.damage, entity.get_prop(e.target, 'm_iHealth')))\nend\nclient.set_event_callback('aim_hit', aim_hit)\n```\n\n----------------------------------------\n\nTITLE: Using bit.band for Bitwise AND Operation in Lua\nDESCRIPTION: Performs a bitwise AND operation on two or more numeric arguments, returning the result where bits are set only if they are set in all arguments.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nbit.band(x1: number, x2: number[, ...])\n```\n\n----------------------------------------\n\nTITLE: Getting Current Latency (Lua)\nDESCRIPTION: Returns the current latency in seconds as a number, enabling scripts to account for network lag or provide statistics. The function does not require parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nclient.latency()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Float in Range (GameSense Lua)\nDESCRIPTION: Returns a random floating-point number in the inclusive range specified by minimum and maximum parameters. Used for randomization and simulation in scripts such as recoil, color, and physics effects.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nclient.random_float(minimum: number, maximum: number)\n```\n\n----------------------------------------\n\nTITLE: CWeaponBizon Property List\nDESCRIPTION: Complete list of properties and their types for the CWeaponBizon class, including base entity properties, weapon-specific attributes, animation variables, and networking data.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponBizon.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Normalizing a vector in place in Lua\nDESCRIPTION: Normalizes the vector by dividing it by its own length, resulting in a unit vector with length = 1. Modifies the vector in place.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:normalize()\n```\n\n----------------------------------------\n\nTITLE: Encoding Invalid Numbers in JSON (Lua)\nDESCRIPTION: Function to control whether invalid numbers are allowed during JSON encoding. It takes an optional boolean argument and returns the current setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/json.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_invalid_numbers([setting: boolean]): boolean\n```\n\n----------------------------------------\n\nTITLE: CSensorGrenade Class Properties\nDESCRIPTION: Complete list of properties for the CSensorGrenade class including base entity properties, physics parameters, rendering attributes, animation variables, and weapon-specific fields. Each property includes its name and data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CSensorGrenade.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `lengthproxy` (integer[0-15])\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n```\n\n----------------------------------------\n\nTITLE: Using bit.bnot for Bitwise NOT Operation in Lua\nDESCRIPTION: Performs a bitwise NOT operation, inverting all the bits of the input number and returning the result.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nbit.bnot(x: number)\n```\n\n----------------------------------------\n\nTITLE: Decoding Invalid Numbers in JSON (Lua)\nDESCRIPTION: Function to control whether invalid numbers are accepted during JSON decoding. It takes a boolean argument and returns the current setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/json.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\njson.decode_invalid_numbers([setting: boolean]): boolean\n```\n\n----------------------------------------\n\nTITLE: Listing Networked Weapon Properties - Markdown\nDESCRIPTION: Documents the networked data fields related to the CWeaponCSBase game entity in a markdown format. The snippet enumerates property names, data types (such as integer, float, vector, or string), and, where applicable, array index ranges directly inline. No executable code or external dependencies are required. Intended as a reference for those implementing or reverse engineering the network synchronization of weapon data, it does not require any specific software to parse or interpret, but presumes familiarity with game data structures.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponCSBase.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponCSBase\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Defining CIncendiaryGrenade Properties in Markdown\nDESCRIPTION: This code snippet lists all the properties of the CIncendiaryGrenade class, including their names, types, and array sizes where applicable. It covers a wide range of attributes from basic entity properties to specific weapon and grenade functionalities.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CIncendiaryGrenade.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n```\n\n----------------------------------------\n\nTITLE: Referencing Child Pages with Markdown Front Matter\nDESCRIPTION: This snippet uses Markdown and templating syntax to include a summary, date, and page references for different projectile documentation entries. Dependencies include a Markdown engine that supports {% page-ref %} templating, such as some static site generators. Each {% page-ref %} tag takes a relative path to a specific projectile's Markdown file. This approach enables dynamic page navigation but relies on the rendering engine's support for custom tags.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/projectiles.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Projectiles\n---\nsummary: Last updated at 16.01.2021\ndate: 16.01.2021\n---\n\n\n{% page-ref page=\"CBaseCSGrenadeProjectile.md\" %}\n{% page-ref page=\"CBreachChargeProjectile.md\" %}\n{% page-ref page=\"CBumpMineProjectile.md\" %}\n{% page-ref page=\"CDecoyProjectile.md\" %}\n{% page-ref page=\"CMolotovProjectile.md\" %}\n{% page-ref page=\"CSensorGrenadeProjectile.md\" %}\n{% page-ref page=\"CSmokeGrenadeProjectile.md\" %}\n{% page-ref page=\"CSnowballProjectile.md\" %}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a normalized vector in Lua\nDESCRIPTION: Returns a new unit vector by dividing the original vector by its own length. The original vector remains unchanged.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:normalized(): vector\n```\n\n----------------------------------------\n\nTITLE: Documenting Data Properties for Bump Mine Projectile Entity - Markdown\nDESCRIPTION: This Markdown snippet lists all properties and their types for the CBumpMineProjectile entity in a Source-like engine. No runtime dependencies are required, but conceptual understanding is necessary for interpreting property significance and types. Each bullet specifies a property (e.g., m_flAnimTime) with type annotation, providing clarity for engine or mod developers, data serialization, or entity introspection tools. The schema acts as a contract for fields to be synced or accessed within the game engine context.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBumpMineProjectile.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBumpMineProjectile\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_flDamage` (float)\n* `m_DmgRadius` (float)\n* `m_bIsLive` (integer)\n* `m_hThrower` (integer)\n* `m_flAnimTime` (integer)\n* `m_vecVelocity` (vector)\n* `m_fFlags` (integer)\n* `m_nParentBoneIndex` (integer)\n* `m_vecParentBonePos` (vector)\n* `m_bArmed` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: CSurvivalSpawnChopper Property Definitions\nDESCRIPTION: Defines the complete set of properties for the CSurvivalSpawnChopper class, including vectors, integers, floats, and arrays. Properties cover entity positioning, rendering attributes, physics parameters, animation states, and gameplay mechanics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CSurvivalSpawnChopper.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nm_flAnimTime (integer)\nm_flSimulationTime (integer)\nm_cellbits (integer)\nm_cellX (integer)\nm_cellY (integer)\nm_cellZ (integer)\nm_vecOrigin (vector)\nm_nModelIndex (integer)\nm_vecMins (vector)\nm_vecMaxs (vector)\nm_nSolidType (integer)\nm_usSolidFlags (integer)\nm_nSurroundType (integer)\nm_triggerBloat (integer)\nm_vecSpecifiedSurroundingMins (vector)\nm_vecSpecifiedSurroundingMaxs (vector)\nm_nRenderFX (integer)\nm_nRenderMode (integer)\nm_fEffects (integer)\nm_clrRender (integer)\nm_iTeamNum (integer)\nm_iPendingTeamNum (integer)\nm_CollisionGroup (integer)\nm_flElasticity (float)\nm_flShadowCastDistance (float)\nm_hOwnerEntity (integer)\nm_hEffectEntity (integer)\nmoveparent (integer)\nm_iParentAttachment (integer)\nm_iName (string)\nmovetype (integer)\nmovecollide (integer)\nm_angRotation (vector)\nm_iTextureFrameIndex (integer)\nm_bSimulatedEveryTick (integer)\nm_bAnimatedEveryTick (integer)\nm_bAlternateSorting (integer)\nm_bSpotted (integer)\nm_bSpottedByMask (integer[0-1])\nm_bIsAutoaimTarget (integer)\nm_fadeMinDist (float)\nm_fadeMaxDist (float)\nm_flFadeScale (float)\nm_nMinCPULevel (integer)\nm_nMaxCPULevel (integer)\nm_nMinGPULevel (integer)\nm_nMaxGPULevel (integer)\nm_flUseLookAtAngle (float)\nm_flLastMadeNoiseTime (float)\nm_flMaxFallVelocity (float)\nm_bEligibleForScreenHighlight (integer)\nm_nForceBone (integer)\nm_vecForce (vector)\nm_nSkin (integer)\nm_nBody (integer)\nm_nHitboxSet (integer)\nm_flModelScale (float)\nm_flPoseParameter (float[0-23])\nm_nSequence (integer)\nm_flPlaybackRate (float)\nm_flEncodedController (float[0-3])\nm_bClientSideAnimation (integer)\nm_bClientSideFrameReset (integer)\nm_bClientSideRagdoll (integer)\nm_nNewSequenceParity (integer)\nm_nResetEventsParity (integer)\nm_nMuzzleFlashParity (integer)\nm_hLightingOrigin (integer)\nm_flCycle (float)\nm_flFrozen (float)\nm_ScaleType (integer)\nm_bSuppressAnimSounds (integer)\nm_nHighlightColorR (integer)\nm_nHighlightColorG (integer)\nm_nHighlightColorB (integer)\nm_vecOrigin (integer)\nm_cellbits (integer)\nm_cellX (integer)\nm_cellY (integer)\nm_cellZ (integer)\nm_vecOrigin (3)\nm_vecOrigin[2] (float)\n```\n\n----------------------------------------\n\nTITLE: Using bit.bor for Bitwise OR Operation in Lua\nDESCRIPTION: Performs a bitwise OR operation on two or more numeric arguments, returning the result where bits are set if they are set in any of the arguments.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nbit.bor(x1: number, x2: number[, ...])\n```\n\n----------------------------------------\n\nTITLE: Using bit.tobit for Normalizing Numbers in Lua\nDESCRIPTION: Normalizes a number to the numeric range for bit operations. This function is usually not needed since all bit operations already normalize their input arguments.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nbit.tobit(x: number)\n```\n\n----------------------------------------\n\nTITLE: Documenting CPhysBox Properties in Markdown\nDESCRIPTION: Complete property listing for CPhysBox entity including various integer, float, vector, and string parameters used for physics simulation, rendering, collision detection, and gameplay mechanics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CPhysBox.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_iControlPointParents` (integer[0-62])\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n```\n\n----------------------------------------\n\nTITLE: Logging Errors to the Console Using Client Module (Lua)\nDESCRIPTION: Outputs a specified string message to console as an error using GameSense Lua scripts. Useful for error reporting and debugging routine failures or exceptional cases.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nclient.error_log(msg: string)\n```\n\n----------------------------------------\n\nTITLE: Adding Auto Buy AWP Checkbox in Lua Script\nDESCRIPTION: This snippet creates a UI checkbox that, if checked, will automatically send a console command to purchase an AWP at the start of each round. It uses ui.get to check the state of the checkbox and client.exec to run the purchase command. Key dependencies are the ui and client modules, and the main parameter is the checkbox state. Expected input is toggling the checkbox, and the output is an automatic AWP purchase if enabled during each round prestart event.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/mkdocs/docs/development/examples/auto_buy.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal ui_get, console_cmd = ui.get, client.exec\n\nlocal auto_buy_awp = ui.new_checkbox(\"MISC\", \"Miscellaneous\", \"Auto buy AWP\")\n\nlocal function on_round_prestart(e)\n\tif ui_get(auto_buy_awp) then\n\t\tconsole_cmd(\"buy awp;\")\n\tend\nend\nclient.set_event_callback(\"round_prestart\", on_round_prestart)\n```\n\n----------------------------------------\n\nTITLE: Documenting CFish Data Members in Markdown\nDESCRIPTION: This Markdown snippet lists and describes the individual properties of the CFish structure, including data types such as vector, float, and integer. It provides a readable format for developers, outlining key CFish fields (e.g., position vector, angle, indices) for reference in implementation or database mapping. No code execution is involved, and it is suitable as in-project documentation for team members.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFish.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CFish\\n\\n\\n* `m_poolOrigin` (vector)\\n* `m_angle` (float)\\n* `m_x` (float)\\n* `m_y` (float)\\n* `m_z` (float)\\n* `m_nModelIndex` (integer)\\n* `m_lifeState` (integer)\\n* `m_waterLevel` (float)\n```\n\n----------------------------------------\n\nTITLE: Calculating 2D distance between vectors in Lua\nDESCRIPTION: Returns the cross product / vector product of itself and another vector.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:dist2d(other: vector): number\n```\n\n----------------------------------------\n\nTITLE: Defining CTEExplosion Data Table Properties in Markdown\nDESCRIPTION: This snippet lists the properties of the CTEExplosion data table, including their names, types, and likely purposes. It covers spatial information, visual parameters, and explosion characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEExplosion.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin[0]` (float)\n* `m_vecOrigin[1]` (float)\n* `m_vecOrigin[2]` (float)\n* `m_nModelIndex` (integer)\n* `m_fScale` (float)\n* `m_nFrameRate` (integer)\n* `m_nFlags` (integer)\n* `m_vecNormal` (vector)\n* `m_chMaterialType` (integer)\n* `m_nRadius` (integer)\n* `m_nMagnitude` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CSnowball Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CSnowball class, including their names and data types. It covers a wide range of attributes from basic entity properties to specific weapon characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSnowball.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n```\n\n----------------------------------------\n\nTITLE: Listing CFuncAreaPortalWindow Properties in Markdown\nDESCRIPTION: This snippet provides a detailed list of properties for the CFuncAreaPortalWindow class. It includes various data types such as integers, floats, vectors, and strings, covering aspects like positioning, rendering, collision, and game-specific attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFuncAreaPortalWindow.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flFadeDist` (float)\n* `m_flFadeStartDist` (float)\n* `m_flTranslucencyLimit` (float)\n* `m_iBackgroundModelIndex` (integer)\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript Code in Panorama UI\nDESCRIPTION: Function to execute JavaScript code within CS:GO's Panorama UI context. Takes JavaScript code as a string and optionally specifies a target panel.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/panorama.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npanorama.loadstring(js_code: string[, panel: string])\n```\n\n----------------------------------------\n\nTITLE: CS:GO Grenade Projectile Property Definitions\nDESCRIPTION: Detailed list of properties for the CBaseCSGrenadeProjectile class, including data types and purposes. Properties cover positioning, physics, rendering, animation states, and gameplay mechanics for grenade projectiles.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBaseCSGrenadeProjectile.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_flDamage` (float)\n* `m_DmgRadius` (float)\n* `m_bIsLive` (integer)\n* `m_hThrower` (integer)\n* `m_flAnimTime` (integer)\n* `m_vecVelocity` (vector)\n* `m_fFlags` (integer)\n* `m_vInitialVelocity` (vector)\n* `m_nBounces` (integer)\n* `m_nExplodeEffectIndex` (integer)\n* `m_nExplodeEffectTickBegin` (integer)\n* `m_vecExplodeEffectOrigin` (vector)\n```\n\n----------------------------------------\n\nTITLE: Creating a direction vector in Lua\nDESCRIPTION: Returns the forward vector from the current vector to another vector.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:to(other: vector): vector\n```\n\n----------------------------------------\n\nTITLE: Exporting Current Configuration in Lua\nDESCRIPTION: Returns the current configuration as a string. This function takes no parameters and can be used to retrieve the entire current configuration for saving or sharing purposes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/config.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nconfig.export()\n```\n\n----------------------------------------\n\nTITLE: Getting Right and Up Vectors from a Forward Vector in Lua\nDESCRIPTION: This snippet explains :vectors, which returns the right and up vectors based on the current (forward) vector. The function takes no arguments and returns two vector objects, letting users derive perpendicular axes for orientation and basis calculations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:vectors(): vector, vector\n```\n\n----------------------------------------\n\nTITLE: Documenting CGrassBurn Class Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CGrassBurn class, including their names and data types. It covers various aspects of the object's behavior, rendering, and game mechanics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CGrassBurn.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flGrassBurnClearTime` (float)\n```\n\n----------------------------------------\n\nTITLE: Getting squared 2D vector length in Lua\nDESCRIPTION: Returns the squared 2D length of the vector using X and Y components. This is faster than :length2d as it avoids the square root operation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:length2dsqr(): number\n```\n\n----------------------------------------\n\nTITLE: CWorld Class Properties Definition\nDESCRIPTION: Defines the complete set of properties for the CWorld class including physics parameters, rendering settings, positioning vectors, and world boundaries. Each property is listed with its corresponding data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWorld.md#_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flWaveHeight` (float)\n* `m_WorldMins` (vector)\n* `m_WorldMaxs` (vector)\n* `m_bStartDark` (integer)\n* `m_flMaxOccludeeArea` (float)\n* `m_flMinOccluderArea` (float)\n* `m_flMaxPropScreenSpaceWidth` (float)\n* `m_flMinPropScreenSpaceWidth` (float)\n* `m_iszDetailSpriteMaterial` (string)\n* `m_bColdWorld` (integer)\n```\n\n----------------------------------------\n\nTITLE: Drawing Filled Circle - renderer API - JavaScript\nDESCRIPTION: Draws a filled circle primitive at specified screen coordinates with given color and alpha parameters, supporting angle control (start_degrees) and partial arcs using percentage. Requires invocation from the paint event and uses color channels (r, g, b, a) in 0-255 range. Accepts parameters for position, size, arc span, and must be called during the rendering phase.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.circle(x, y, r, g, b, a, radius, start_degrees, percentage);\n```\n\n----------------------------------------\n\nTITLE: Compiling Lua Scripts with LuaJIT - Text\nDESCRIPTION: This command demonstrates how to compile a Lua script (script.lua) into LuaJIT bytecode (compiled.ljbc) using the luajit.exe executable with the -b option. Dependencies include LuaJIT, which must be downloaded and extracted as described in preceding instructions. The inputs are the source .lua script and the desired output filename, both provided as command-line arguments. Requires Windows command prompt and assumes the user is positioned in the correct folder.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/compiling.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nluajit.exe -b script.lua compiled.ljbc\n```\n\n----------------------------------------\n\nTITLE: Drawing Line between Screen Points - renderer API - JavaScript\nDESCRIPTION: Draws a single line segment on the screen between two specified points (A and B), with RGBA color parameters controlling appearance. Useful for graphs, connections, or annotation overlays, this function must be called from the paint event and works with absolute screen coordinates.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.line(xa, ya, xb, yb, r, g, b, a);\n```\n\n----------------------------------------\n\nTITLE: CHostageCarriableProp Properties Documentation\nDESCRIPTION: Detailed property listing for CHostageCarriableProp class, including physics properties, rendering attributes, animation parameters, and gameplay-related variables. Each property is defined with its name and data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CHostageCarriableProp.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n```\n\n----------------------------------------\n\nTITLE: Using bit.band for Bitwise AND in Lua\nDESCRIPTION: Performs a bitwise AND operation on two or more numbers, returning the result where bits are set only if they are set in all arguments.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nbit.band(x1: number, x2: number[, ...])\n```\n\n----------------------------------------\n\nTITLE: Drawing Triangle Primitive - renderer API - JavaScript\nDESCRIPTION: Draws a solid triangle using three points specified in screen coordinates, along with RGBA color settings. Often used in graphics for pointers, markers, or composite shapes. Accessible only in the paint callback context.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.triangle(x0, y0, x1, y1, x2, y2, r, g, b, a);\n```\n\n----------------------------------------\n\nTITLE: Listing Fields for DT_PoseController in Markdown\nDESCRIPTION: This snippet provides a Markdown-formatted list of all member variables for the DT_PoseController (CPoseController) data structure. Each field is listed with its name and data type, serving as reference documentation for developers working with pose controllers in supported game engines or APIs. The list covers primitive types, arrays, and vectors, but lacks descriptions of each field's individual purpose or default values.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CPoseController.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CPoseController\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_hProps` (integer[0-3])\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_chPoseIndex` (integer[0-3])\n* `m_bPoseValueParity` (integer)\n* `m_fPoseValue` (float)\n* `m_fInterpolationTime` (float)\n* `m_bInterpolationWrap` (integer)\n* `m_fCycleFrequency` (float)\n* `m_nFModType` (integer)\n* `m_fFModTimeOffset` (float)\n* `m_fFModRate` (float)\n* `m_fFModAmplitude` (float)\n```\n\n----------------------------------------\n\nTITLE: Loading JPG Texture in Lua Game Scripting\nDESCRIPTION: Function to load a texture from raw JPG file contents. Returns a texture ID for use with renderer.texture, or nil on failure. Parameters include JPG data, width, and height.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.load_jpg(contents: string, width: number, height: number): number (texture id)\n```\n\n----------------------------------------\n\nTITLE: Handling 'aim_miss' Event in Lua\nDESCRIPTION: This snippet demonstrates how to respond to the 'aim_miss' event in a Lua-based game scripting environment. It maps the hitgroup index to a human-readable string, retrieves the target player name, and prints a formatted message explaining which shot was missed and why. Dependencies include access to entity, client, and string modules from the scripting API. Inputs are the 'aim_miss' event parameters, and the output is a console message; there are no external prerequisites beyond the scripting environment.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/events.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal hitgroup_names = {'generic', 'head', 'chest', 'stomach', 'left arm', 'right arm', 'left leg', 'right leg', 'neck', '?', 'gear'}\n\nlocal function aim_miss(e)\n\tlocal group = hitgroup_names[e.hitgroup + 1] or '?'\n\tprint(string.format('Missed %s (%s) due to %s', entity.get_player_name(e.target), group, e.reason))\nend\nclient.set_event_callback('aim_miss', aim_miss)\n```\n\n----------------------------------------\n\nTITLE: Getting vector length in Lua\nDESCRIPTION: Returns the length (magnitude) of the vector.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:length(): number\n```\n\n----------------------------------------\n\nTITLE: Compiling Lua Scripts with LuaJIT via Windows Batch - Text\nDESCRIPTION: This snippet demonstrates how to compile a Lua script (script.lua) into LuaJIT bytecode (compiled.ljbc) using the luajit.exe binary on Windows. To run this command, download and extract the LuaJIT compiler archive, place your script in the same directory, and execute the command from a command prompt. Dependency: luajit.exe must be present in the directory; replace script.lua and compiled.ljbc with your desired input and output file names. The command takes the source script and produces an optimized bytecode file as output.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/compiling.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nluajit.exe -b script.lua compiled.ljbc\n```\n\n----------------------------------------\n\nTITLE: CS:GO CPlantedC4 Network Variables\nDESCRIPTION: Complete list of networked variables for the planted C4 bomb entity, including base entity properties, rendering attributes, physics parameters, animation variables, and bomb-specific gameplay values.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CPlantedC4.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_bBombTicking` (integer)\n* `m_nBombSite` (integer)\n* `m_flC4Blow` (float)\n* `m_flTimerLength` (float)\n* `m_flDefuseLength` (float)\n* `m_flDefuseCountDown` (float)\n* `m_bBombDefused` (integer)\n* `m_hBombDefuser` (integer)\n```\n\n----------------------------------------\n\nTITLE: Using bit.bnot for Bitwise NOT in Lua\nDESCRIPTION: Performs a bitwise NOT operation, inverting all bits of the input number and returning the result.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nbit.bnot(x: number)\n```\n\n----------------------------------------\n\nTITLE: Defining CParticleFire Vector Properties\nDESCRIPTION: Documents the vector properties used in the CParticleFire class for particle system positioning and direction. Contains m_vOrigin for particle origin coordinates and m_vDirection for particle movement direction.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CParticleFire.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vOrigin` (vector)\n* `m_vDirection` (vector)\n```\n\n----------------------------------------\n\nTITLE: Using bit.ror for Bitwise Right Rotation in Lua\nDESCRIPTION: Performs a bitwise right rotation where bits shifted out on the right are shifted back in on the left. Only the lower 5 bits of the rotation count are used.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nbit.ror(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Documenting CSprite Data Members - Markdown\nDESCRIPTION: This Markdown snippet enumerates all the data members of the CSprite entity within the Source Engine. Each bullet describes a networked property, specifying its name and data type such as integer, float, vector, or string. This reference requires familiarity with Source Engine conventions and serves as technical documentation for modders or developers viewing or manipulating sprite fields; it does not include code for instantiating or using the fields, but strictly lists their existence, types, and expected uses.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSprite.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CSprite\\n\\n\\n* `m_flAnimTime` (integer)\\n* `m_flSimulationTime` (integer)\\n* `m_cellbits` (integer)\\n* `m_cellX` (integer)\\n* `m_cellY` (integer)\\n* `m_cellZ` (integer)\\n* `m_vecOrigin` (vector)\\n* `m_nModelIndex` (integer)\\n* `m_vecMins` (vector)\\n* `m_vecMaxs` (vector)\\n* `m_nSolidType` (integer)\\n* `m_usSolidFlags` (integer)\\n* `m_nSurroundType` (integer)\\n* `m_triggerBloat` (integer)\\n* `m_vecSpecifiedSurroundingMins` (vector)\\n* `m_vecSpecifiedSurroundingMaxs` (vector)\\n* `m_nRenderFX` (integer)\\n* `m_nRenderMode` (integer)\\n* `m_fEffects` (integer)\\n* `m_clrRender` (integer)\\n* `m_iTeamNum` (integer)\\n* `m_iPendingTeamNum` (integer)\\n* `m_CollisionGroup` (integer)\\n* `m_flElasticity` (float)\\n* `m_flShadowCastDistance` (float)\\n* `m_hOwnerEntity` (integer)\\n* `m_hEffectEntity` (integer)\\n* `moveparent` (integer)\\n* `m_iParentAttachment` (integer)\\n* `m_iName` (string)\\n* `movetype` (integer)\\n* `movecollide` (integer)\\n* `m_angRotation` (vector)\\n* `m_iTextureFrameIndex` (integer)\\n* `m_bSimulatedEveryTick` (integer)\\n* `m_bAnimatedEveryTick` (integer)\\n* `m_bAlternateSorting` (integer)\\n* `m_bSpotted` (integer)\\n* `m_bSpottedByMask` (integer[0-1])\\n* `m_bIsAutoaimTarget` (integer)\\n* `m_fadeMinDist` (float)\\n* `m_fadeMaxDist` (float)\\n* `m_flFadeScale` (float)\\n* `m_nMinCPULevel` (integer)\\n* `m_nMaxCPULevel` (integer)\\n* `m_nMinGPULevel` (integer)\\n* `m_nMaxGPULevel` (integer)\\n* `m_flUseLookAtAngle` (float)\\n* `m_flLastMadeNoiseTime` (float)\\n* `m_flMaxFallVelocity` (float)\\n* `m_bEligibleForScreenHighlight` (integer)\\n* `m_hAttachedToEntity` (integer)\\n* `m_nAttachment` (integer)\\n* `m_flScaleTime` (float)\\n* `m_flSpriteScale` (float)\\n* `m_flGlowProxySize` (float)\\n* `m_flHDRColorScale` (float)\\n* `m_flSpriteFramerate` (float)\\n* `m_flFrame` (float)\\n* `m_flBrightnessTime` (float)\\n* `m_nBrightness` (integer)\\n* `m_bWorldSpaceScale` (integer)\\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Fields - Markdown\nDESCRIPTION: This snippet presents a Markdown-formatted bullet list enumerating the fields of the CCSRagdoll entity, including their names, types, and value constraints when available. It is intended as reference documentation. No coding dependencies are required, but this format presumes the reader has context for entity field conventions; all fields are listed for quick lookup.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CCSRagdoll.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_iMatchStats_EnemiesFlashed_Total` (integer[0-64])\n* `m_vecRagdollOrigin` (vector)\n* `m_hPlayer` (integer)\n* `m_nModelIndex` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_vecRagdollVelocity` (vector)\n* `m_iDeathPose` (integer)\n* `m_iDeathFrame` (integer)\n* `m_iTeamNum` (integer)\n* `m_bClientSideAnimation` (integer)\n* `m_flDeathYaw` (float)\n* `m_flAbsYaw` (float)\n```\n\n----------------------------------------\n\nTITLE: Documenting CWeaponSG556 Class Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CWeaponSG556 class, including their names and data types. It covers a wide range of attributes from basic entity properties to weapon-specific characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponSG556.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Getting Tick Interval in Lua\nDESCRIPTION: Returns the time elapsed in one game tick in seconds.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nglobals.tickinterval(): number\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Fields and Types - Markdown\nDESCRIPTION: This markdown snippet enumerates all relevant data fields and types belonging to the CItem_Healthshot class, acting as static, human-readable reference documentation for developers. There are no code dependencies or executable sections, just descriptive listings. Inputs are the property names, their types, and optional ranges or notes, while the output is a formatted list for quick lookup. It is intended for documentation purposes only and does not include sample usage or implementation details.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CItem_Healthshot.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CItem_Healthshot\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Listing CEntityFlame Networked Properties - Markdown\nDESCRIPTION: This snippet documents the full set of networked properties exposed on the CEntityFlame entity, including their types (such as integer, float, vector, and string). The list enables developers to identify key fields for entity state tracking, serialization, or scripting extensions. No external dependencies are required; the file uses Markdown formatting and is meant for human-readable documentation, not code execution.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CEntityFlame.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CEntityFlame\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_hEntAttached` (integer)\n* `m_bCheapEffect` (integer)\n```\n\n----------------------------------------\n\nTITLE: Loading RGBA Texture in Lua Game Scripting\nDESCRIPTION: Function to load a texture from an RGBA buffer. Returns a texture ID for use with renderer.texture, or nil on failure. Parameters include RGBA data, width, and height.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.load_rgba(contents: string, width: number, height: number): number (texture id)\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Codes and Descriptions in Markdown\nDESCRIPTION: A markdown table showing various error codes and their brief descriptions. This table serves as a quick reference for users to identify common issues based on the error codes they encounter.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/gitbook/usage/common_issues.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCodes | Description\n----- | -----------\n  D0001409 | [Out of memory](#out-of-memory)\n  C000009A |\n  D0001600 | [Antivirus](#antivirus)\n  D0002001 |\n  C0000022 |\n  C00000F1 |\n  C0000043 |\n  C0000077 | [Unsupported version of Windows](#unsupported-version-of-windows)\n  D0002103 |\n  D0001418 | [Anti-cheat](#anti-cheat)\n  D000210A |\n  D0002201 | Connection problem\n  D0001434 | Game is taking too long to load, use -novid or wait until the main menu to inject\n  C0000225 |\n  D0001442 | Game crashed while loading\n  D0001012 | [\"Virtual machine not supported\"](#virtual-machine-not-supported)\n```\n\n----------------------------------------\n\nTITLE: Documenting DT_TEPhysicsProp Structure with Markdown\nDESCRIPTION: This snippet presents a Markdown-formatted list that outlines the fields and data types of the DT_TEPhysicsProp entity, particularly for CTEPhysicsProp. There are no code dependencies, as this is a documentation fragment rather than executable code. Each list item specifies a property and its type for use by developers referencing or implementing related structures. No code is run; instead, this provides technical context for further implementation or integration.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEPhysicsProp.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CTEPhysicsProp\\n\\n\\n* `m_vecOrigin` (vector)\\n* `m_angRotation[0]` (float)\\n* `m_angRotation[1]` (float)\\n* `m_angRotation[2]` (float)\\n* `m_vecVelocity` (vector)\\n* `m_nModelIndex` (integer)\\n* `m_nSkin` (integer)\\n* `m_nFlags` (integer)\\n* `m_nEffects` (integer)\\n* `m_clrRender` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining World Decal Entity Data Structure - Markdown\nDESCRIPTION: Documents the CTEWorldDecal entity and its associated fields as used within the Source Engine context. This snippet, formatted in Markdown, outlines the structure, types, and names of its member variables for use in engine documentation. Inputs are not code but reference items (field names and types), and there are no executable outputs.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEWorldDecal.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CTEWorldDecal\n\n\n* `m_vecOrigin` (vector)\n* `m_nIndex` (integer)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Networked Entity Fields - Source Engine - Markdown\nDESCRIPTION: This snippet documents the complete set of member variables for the CFuncAreaPortalWindow entity class, including property names, data types, and corresponding roles. It assumes readers are familiar with Source Engine entities and networked field synchronization. The input parameters are member variables such as m_flAnimTime (integer) and m_vecOrigin (vector), defining runtime characteristics; no executable output is produced, since this is a documentation file intended for static reference by developers. Limitations include lack of runtime code or examples, focusing solely on data structure.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFuncAreaPortalWindow.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flFadeDist` (float)\n* `m_flFadeStartDist` (float)\n* `m_flTranslucencyLimit` (float)\n* `m_iBackgroundModelIndex` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining DT_TEArmorRicochet Structure Properties\nDESCRIPTION: Defines the properties of the DT_TEArmorRicochet structure, which includes a position vector and a direction vector. These are likely used to represent the location and trajectory of an armor ricochet effect in a game engine.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEArmorRicochet.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecPos` (vector)\n* `m_vecDir` (vector)\n```\n\n----------------------------------------\n\nTITLE: Finding Memory Signatures in Modules (GameSense Lua)\nDESCRIPTION: Searches for a specific memory signature in a module, returning an FFI pointer if found. The pattern argument uses '\\x' escape and wildcards with '\\xCC'. Returns nil if not found. Requires knowledge of binary signatures and relevant modules.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nclient.find_signature(module_name: string, pattern: string)\n```\n\n----------------------------------------\n\nTITLE: Listing CBaseCombatCharacter Properties in Markdown\nDESCRIPTION: This code snippet provides a detailed list of properties for the CBaseCombatCharacter class. It includes various data types such as integers, floats, vectors, and arrays, covering aspects like animation, positioning, rendering, and combat attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBaseCombatCharacter.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_flNextAttack` (float)\n* `m_LastHitGroup` (integer)\n* `m_hActiveWeapon` (integer)\n* `m_flTimeOfLastInjury` (float)\n* `m_hMyWeapons` (integer[0-63])\n* `m_nRelativeDirectionOfLastInjury` (integer)\n```\n\n----------------------------------------\n\nTITLE: Page References in Markdown\nDESCRIPTION: A collection of page references using GitBook-style markdown syntax to link to individual weapon and item documentation pages. Last updated January 16, 2021.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/items.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% page-ref page=\"CAK47.md\" %}\n{% page-ref page=\"CBaseCSGrenade.md\" %}\n{% page-ref page=\"CBaseGrenade.md\" %}\n{% page-ref page=\"CBreachCharge.md\" %}\n{% page-ref page=\"CBumpMine.md\" %}\n{% page-ref page=\"CC4.md\" %}\n{% page-ref page=\"CDEagle.md\" %}\n{% page-ref page=\"CDecoyGrenade.md\" %}\n{% page-ref page=\"CEconEntity.md\" %}\n{% page-ref page=\"CFists.md\" %}\n{% page-ref page=\"CFlashbang.md\" %}\n{% page-ref page=\"CHEGrenade.md\" %}\n{% page-ref page=\"CIncendiaryGrenade.md\" %}\n{% page-ref page=\"CItem_Healthshot.md\" %}\n{% page-ref page=\"CItemCash.md\" %}\n{% page-ref page=\"CItemDogtags.md\" %}\n{% page-ref page=\"CKnife.md\" %}\n{% page-ref page=\"CKnifeGG.md\" %}\n{% page-ref page=\"CMelee.md\" %}\n{% page-ref page=\"CMolotovGrenade.md\" %}\n{% page-ref page=\"CSCAR17.md\" %}\n{% page-ref page=\"CSensorGrenade.md\" %}\n{% page-ref page=\"CSmokeGrenade.md\" %}\n{% page-ref page=\"CSnowball.md\" %}\n{% page-ref page=\"CTablet.md\" %}\n{% page-ref page=\"CWeaponAug.md\" %}\n{% page-ref page=\"CWeaponAWP.md\" %}\n{% page-ref page=\"CWeaponBaseItem.md\" %}\n{% page-ref page=\"CWeaponBizon.md\" %}\n{% page-ref page=\"CWeaponCSBase.md\" %}\n{% page-ref page=\"CWeaponCSBaseGun.md\" %}\n{% page-ref page=\"CWeaponCycler.md\" %}\n{% page-ref page=\"CWeaponElite.md\" %}\n{% page-ref page=\"CWeaponFamas.md\" %}\n{% page-ref page=\"CWeaponFiveSeven.md\" %}\n{% page-ref page=\"CWeaponG3SG1.md\" %}\n{% page-ref page=\"CWeaponGalil.md\" %}\n{% page-ref page=\"CWeaponGalilAR.md\" %}\n{% page-ref page=\"CWeaponGlock.md\" %}\n{% page-ref page=\"CWeaponHKP2000.md\" %}\n{% page-ref page=\"CWeaponM249.md\" %}\n{% page-ref page=\"CWeaponM3.md\" %}\n{% page-ref page=\"CWeaponM4A1.md\" %}\n{% page-ref page=\"CWeaponMAC10.md\" %}\n{% page-ref page=\"CWeaponMag7.md\" %}\n{% page-ref page=\"CWeaponMP5Navy.md\" %}\n{% page-ref page=\"CWeaponMP7.md\" %}\n{% page-ref page=\"CWeaponMP9.md\" %}\n{% page-ref page=\"CWeaponNegev.md\" %}\n{% page-ref page=\"CWeaponNOVA.md\" %}\n{% page-ref page=\"CWeaponP228.md\" %}\n{% page-ref page=\"CWeaponP250.md\" %}\n{% page-ref page=\"CWeaponP90.md\" %}\n{% page-ref page=\"CWeaponSawedoff.md\" %}\n{% page-ref page=\"CWeaponSCAR20.md\" %}\n{% page-ref page=\"CWeaponScout.md\" %}\n{% page-ref page=\"CWeaponSG550.md\" %}\n{% page-ref page=\"CWeaponSG552.md\" %}\n{% page-ref page=\"CWeaponSG556.md\" %}\n{% page-ref page=\"CWeaponShield.md\" %}\n{% page-ref page=\"CWeaponSSG08.md\" %}\n{% page-ref page=\"CWeaponTaser.md\" %}\n{% page-ref page=\"CWeaponTec9.md\" %}\n{% page-ref page=\"CWeaponTMP.md\" %}\n{% page-ref page=\"CWeaponUMP45.md\" %}\n{% page-ref page=\"CWeaponUSP.md\" %}\n{% page-ref page=\"CWeaponXM1014.md\" %}\n{% page-ref page=\"CWeaponZoneRepulsor.md\" %}\n{% page-ref page=\"ParticleSmokeGrenade.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating Interfaces from Modules with GameSense (Lua)\nDESCRIPTION: Returns an FFI pointer to a game interface by module and interface name. Used by advanced scripts to access underlying game structures. Returns a pointer or nil. Requires knowledge of the relevant module and interface naming schema.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nclient.create_interface(module_name: string, interface_name: string)\n```\n\n----------------------------------------\n\nTITLE: Setting Clan Tag in GameSense (Lua)\nDESCRIPTION: Sets the in-game clan tag to a provided string, or removes it if no string is provided. Accepts variadic arguments for dynamic assembly of tag. Uses concatenation pattern similar to logging.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nclient.set_clan_tag(...)\n```\n\n----------------------------------------\n\nTITLE: Get Menu Position\nDESCRIPTION: Returns the x,y coordinates of the menu's position, regardless of whether it is open or closed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nui.menu_position()\n```\n\n----------------------------------------\n\nTITLE: Listing DT_BaseCombatCharacter Netvars in Source Engine (Markdown)\nDESCRIPTION: This snippet enumerates all networked variables for the CBaseCombatCharacter class from the Source engine, specifying type and array dimensions where relevant. It is strictly documentation with no required dependencies, formatted using Markdown for clarity in static documentation sites or reference notes. The table aids in tracking available properties when interfacing with or extending the game's entity logic but is not executable code and expects no dynamic input or output.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBaseCombatCharacter.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBaseCombatCharacter\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_flNextAttack` (float)\n* `m_LastHitGroup` (integer)\n* `m_hActiveWeapon` (integer)\n* `m_flTimeOfLastInjury` (float)\n* `m_hMyWeapons` (integer[0-63])\n* `m_nRelativeDirectionOfLastInjury` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CTEBeamEnts Structure Properties in Markdown\nDESCRIPTION: This snippet lists the properties of the CTEBeamEnts structure, including their names and data types. It covers visual parameters, entity references, and rendering options for beam entities.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEBeamEnts.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_nModelIndex` (integer)\n* `m_nHaloIndex` (integer)\n* `m_nStartFrame` (integer)\n* `m_nFrameRate` (integer)\n* `m_fLife` (float)\n* `m_fWidth` (float)\n* `m_fEndWidth` (float)\n* `m_nFadeLength` (integer)\n* `m_fAmplitude` (float)\n* `m_nSpeed` (integer)\n* `r` (integer)\n* `g` (integer)\n* `b` (integer)\n* `a` (integer)\n* `m_nFlags` (integer)\n* `m_nStartEntity` (integer)\n* `m_nEndEntity` (integer)\n```\n\n----------------------------------------\n\nTITLE: Structuring Table of Contents in Markdown\nDESCRIPTION: This snippet demonstrates how to create a table of contents using Markdown syntax. It includes links to various sections of the documentation, organized under different headings.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/SUMMARY.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Table of contents\n\n* [Overview](README.md)\n\n## Using the cheat\n\n* [Using lua scripts](usage/using_lua_scripts.md)\n* [Unlisted features](usage/unlisted_features.md)\n* [Common issues](usage/common_issues.md)\n```\n\n----------------------------------------\n\nTITLE: Defining CTEBloodStream Properties in Plaintext\nDESCRIPTION: Lists the properties of the CTEBloodStream class, including position, direction, color components, and amount. These properties likely control the appearance and behavior of blood stream effects in a game or simulation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEBloodStream.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `m_vecOrigin[0]` (float)\n* `m_vecOrigin[1]` (float)\n* `m_vecOrigin[2]` (float)\n* `m_vecDirection` (vector)\n* `r` (integer)\n* `g` (integer)\n* `b` (integer)\n* `a` (integer)\n* `m_nAmount` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CTEMetalSparks Entity Properties - Markdown - English\nDESCRIPTION: This markdown snippet documents the CTEMetalSparks entity by listing its vector properties, m_vecPos and m_vecDir. It uses markdown syntax for headers and bullet lists to clarify which attributes are available for this entity. There are no external dependencies, and the snippet serves informational and documentation purposes with no inputs or outputs.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEMetalSparks.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CTEMetalSparks\n\n\n* `m_vecPos` (vector)\n* `m_vecDir` (vector)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Tick Count in Lua\nDESCRIPTION: Returns the number of ticks elapsed in the server.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nglobals.tickcount(): number\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Data Table Properties - Markdown\nDESCRIPTION: This Markdown snippet enumerates all networked or serializable fields for the CPhysPropRadarJammer class. It documents field names, types, and occasionally array size, providing a quick reference for developers to understand and implement entity serialization or introspection. There are no dependencies beyond standard Markdown rendering and no programmatic outputs, as the input and output are intended for human readability within documentation systems.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CPhysPropRadarJammer.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CPhysPropRadarJammer\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_qPreferredPlayerCarryAngles` (vector)\n* `m_bClientPhysics` (integer)\n* `m_flPoseParameter` (integer)\n* `m_flPlaybackRate` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `overlay_vars` (integer)\n* `m_flexWeight` (integer)\n* `m_blinktoggle` (integer)\n* `m_bAwake` (integer)\n* `m_iPhysicsMode` (integer)\n* `m_fMass` (float)\n* `m_collisionMins` (vector)\n* `m_collisionMaxs` (vector)\n\n```\n\n----------------------------------------\n\nTITLE: Opening Panorama UI Panels\nDESCRIPTION: Function to open a specified panel in CS:GO's Panorama UI. Takes an optional panel name parameter to determine which UI panel to open.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/panorama.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npanorama.open([panel: string])\n```\n\n----------------------------------------\n\nTITLE: Listing Entity NetProp Documentation Files - Markdown\nDESCRIPTION: This Markdown snippet organizes a comprehensive list of Source Engine entity netprop documentation files by linking each entity class, such as CBaseTeamObjectiveResource, CBaseTempEntity, and others, to individual Markdown documentation files. There are no programming or runtime dependencies, but correct file structure and Markdown rendering support are expected. The list enables users to access property documentation for each entity; inputs and outputs are not applicable, and each item follows the markdown link and bullet list formatting constraints.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/SUMMARY.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* [CBaseTeamObjectiveResource](netprops/CBaseTeamObjectiveResource.md)\\n    * [CBaseTempEntity](netprops/CBaseTempEntity.md)\\n    * [CBaseToggle](netprops/CBaseToggle.md)\\n    * [CBaseTrigger](netprops/CBaseTrigger.md)\\n    * [CBaseViewModel](netprops/CBaseViewModel.md)\\n    * [CBaseVPhysicsTrigger](netprops/CBaseVPhysicsTrigger.md)\\n    * [CBaseWeaponWorldModel](netprops/CBaseWeaponWorldModel.md)\\n  * [Other](netprops/other.md)\\n    * [CAI_BaseNPC](netprops/CAI_BaseNPC.md)\\n    * [CBeam](netprops/CBeam.md)\\n    * [CBeamSpotlight](netprops/CBeamSpotlight.md)\\n    * [CBoneFollower](netprops/CBoneFollower.md)\\n    * [CBRC4Target](netprops/CBRC4Target.md)\\n    * [CBreakableProp](netprops/CBreakableProp.md)\\n    * [CBreakableSurface](netprops/CBreakableSurface.md)\\n    * [CCascadeLight](netprops/CCascadeLight.md)\\n    * [CChicken](netprops/CChicken.md)\\n    * [CCSRagdoll](netprops/CCSRagdoll.md)\\n    * [CCSTeam](netprops/CCSTeam.md)\\n    * [CDangerZone](netprops/CDangerZone.md)\\n    * [CDrone](netprops/CDrone.md)\\n    * [CDronegun](netprops/CDronegun.md)\\n    * [CDynamicLight](netprops/CDynamicLight.md)\\n    * [CDynamicProp](netprops/CDynamicProp.md)\\n    * [CEconWearable](netprops/CEconWearable.md)\\n    * [CEmbers](netprops/CEmbers.md)\\n    * [CEntityDissolve](netprops/CEntityDissolve.md)\\n    * [CEntityFlame](netprops/CEntityFlame.md)\\n    * [CEntityFreezing](netprops/CEntityFreezing.md)\\n    * [CEntityParticleTrail](netprops/CEntityParticleTrail.md)\\n    * [CFEPlayerDecal](netprops/CFEPlayerDecal.md)\\n    * [CFireCrackerBlast](netprops/CFireCrackerBlast.md)\\n    * [CFireSmoke](netprops/CFireSmoke.md)\\n    * [CFireTrail](netprops/CFireTrail.md)\\n    * [CFish](netprops/CFish.md)\\n    * [CFunc_Dust](netprops/CFunc_Dust.md)\\n    * [CFunc_LOD](netprops/CFunc_LOD.md)\\n    * [CFuncAreaPortalWindow](netprops/CFuncAreaPortalWindow.md)\\n    * [CFuncBrush](netprops/CFuncBrush.md)\\n    * [CFuncConveyor](netprops/CFuncConveyor.md)\\n    * [CFuncLadder](netprops/CFuncLadder.md)\\n    * [CFuncMonitor](netprops/CFuncMonitor.md)\\n    * [CFuncMoveLinear](netprops/CFuncMoveLinear.md)\\n    * [CFuncOccluder](netprops/CFuncOccluder.md)\\n    * [CFuncReflectiveGlass](netprops/CFuncReflectiveGlass.md)\\n    * [CFuncRotating](netprops/CFuncRotating.md)\\n    * [CFuncSmokeVolume](netprops/CFuncSmokeVolume.md)\\n    * [CFuncTrackTrain](netprops/CFuncTrackTrain.md)\\n    * [CGameRulesProxy](netprops/CGameRulesProxy.md)\\n    * [CGrassBurn](netprops/CGrassBurn.md)\\n    * [CHandleTest](netprops/CHandleTest.md)\\n    * [CHostage](netprops/CHostage.md)\\n    * [CHostageCarriableProp](netprops/CHostageCarriableProp.md)\\n    * [CInferno](netprops/CInferno.md)\\n    * [CInfoLadderDismount](netprops/CInfoLadderDismount.md)\\n    * [CInfoMapRegion](netprops/CInfoMapRegion.md)\\n    * [CInfoOverlayAccessor](netprops/CInfoOverlayAccessor.md)\\n    * [CLightGlow](netprops/CLightGlow.md)\\n    * [CMovieDisplay](netprops/CMovieDisplay.md)\\n    * [CParadropChopper](netprops/CParadropChopper.md)\\n    * [CParticleFire](netprops/CParticleFire.md)\\n    * [CParticlePerformanceMonitor](netprops/CParticlePerformanceMonitor.md)\\n    * [CParticleSystem](netprops/CParticleSystem.md)\\n    * [CPhysBox](netprops/CPhysBox.md)\\n    * [CPhysBoxMultiplayer](netprops/CPhysBoxMultiplayer.md)\\n    * [CPhysicsProp](netprops/CPhysicsProp.md)\\n    * [CPhysicsPropMultiplayer](netprops/CPhysicsPropMultiplayer.md)\\n    * [CPhysMagnet](netprops/CPhysMagnet.md)\\n    * [CPhysPropAmmoBox](netprops/CPhysPropAmmoBox.md)\\n    * [CPhysPropLootCrate](netprops/CPhysPropLootCrate.md)\\n    * [CPhysPropRadarJammer](netprops/CPhysPropRadarJammer.md)\\n    * [CPhysPropWeaponUpgrade](netprops/CPhysPropWeaponUpgrade.md)\\n    * [CPlantedC4](netprops/CPlantedC4.md)\\n    * [CPlasma](netprops/CPlasma.md)\\n    * [CPlayerPing](netprops/CPlayerPing.md)\\n    * [CPlayerResource](netprops/CPlayerResource.md)\\n    * [CPointCamera](netprops/CPointCamera.md)\\n    * [CPointCommentaryNode](netprops/CPointCommentaryNode.md)\\n    * [CPointWorldText](netprops/CPointWorldText.md)\\n    * [CPrecipitation](netprops/CPrecipitation.md)\\n    * [CPrecipitationBlocker](netprops/CPrecipitationBlocker.md)\\n    * [CPredictedViewModel](netprops/CPredictedViewModel.md)\\n    * [CProp_Hallucination](netprops/CProp_Hallucination.md)\\n    * [CPropCounter](netprops/CPropCounter.md)\\n    * [CPropDoorRotating](netprops/CPropDoorRotating.md)\\n    * [CPropJeep](netprops/CPropJeep.md)\\n    * [CPropVehicleDriveable](netprops/CPropVehicleDriveable.md)\\n    * [CRagdollManager](netprops/CRagdollManager.md)\\n    * [CRagdollProp](netprops/CRagdollProp.md)\\n    * [CRagdollPropAttached](netprops/CRagdollPropAttached.md)\\n    * [CRopeKeyframe](netprops/CRopeKeyframe.md)\\n    * [CSceneEntity](netprops/CSceneEntity.md)\\n    * [CSlideshowDisplay](netprops/CSlideshowDisplay.md)\\n    * [CSmokeStack](netprops/CSmokeStack.md)\\n    * [CSnowballPile](netprops/CSnowballPile.md)\\n    * [CSpatialEntity](netprops/CSpatialEntity.md)\\n    * [CSpotlightEnd](netprops/CSpotlightEnd.md)\\n    * [CSprite](netprops/CSprite.md)\\n    * [CSpriteOriented](netprops/CSpriteOriented.md)\\n    * [CSpriteTrail](netprops/CSpriteTrail.md)\\n    * [CStatueProp](netprops/CStatueProp.md)\\n    * [CSteamJet](netprops/CSteamJet.md)\\n    * [CSurvivalSpawnChopper](netprops/CSurvivalSpawnChopper.md)\\n    * [CTesla](netprops/CTesla.md)\\n    * [CTest_ProxyToggle_Networkable](netprops/CTest_ProxyToggle_Networkable.md)\\n    * [CTestTraceline](netprops/CTestTraceline.md)\\n    * [CTriggerPlayerMovement](netprops/CTriggerPlayerMovement.md)\\n    * [CTriggerSoundOperator](netprops/CTriggerSoundOperator.md)\\n    * [CVGuiScreen](netprops/CVGuiScreen.md)\\n    * [CWaterBullet](netprops/CWaterBullet.md)\\n    * [CWorld](netprops/CWorld.md)\\n    * [CWorldVguiText](netprops/CWorldVguiText.md)\\n    * [DustTrail](netprops/DustTrail.md)\\n    * [MovieExplosion](netprops/MovieExplosion.md)\\n    * [RocketTrail](netprops/RocketTrail.md)\\n    * [SmokeTrail](netprops/SmokeTrail.md)\\n    * [SporeExplosion](netprops/SporeExplosion.md)\\n    * [SporeTrail](netprops/SporeTrail.md)\n```\n\n----------------------------------------\n\nTITLE: Documenting CTEShowLine Data Structure - Markdown\nDESCRIPTION: This Markdown snippet lists the fields provided by CTEShowLine, including three origin float components and a vector endpoint. There are no executable dependencies as this is purely documentation, but it assumes familiarity with data structures and vector math. Each parameter (m_vecOrigin[0], m_vecOrigin[1], m_vecOrigin[2], m_vecEnd) is described with its data type, serving as a reference for implementation or mapping in associated code.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEShowLine.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CTEShowLine\\n\\n\\n* `m_vecOrigin[0]` (float)\\n* `m_vecOrigin[1]` (float)\\n* `m_vecOrigin[2]` (float)\\n* `m_vecEnd` (vector)\\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Dot Product of a Vector in Lua\nDESCRIPTION: This snippet demonstrates how to use the :dot method on a vector object to compute its dot product, returning a single number. No parameters are required. This is a fundamental vector operation for projections and measuring similarity in direction.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:dot(): number\n```\n\n----------------------------------------\n\nTITLE: Reinitializing a Vector with New Coordinates in Lua\nDESCRIPTION: This snippet shows the use of :init to overwrite the x, y, and z components of an existing vector instance, returning the updated vector. It requires three number arguments corresponding to the new coordinates. No dependencies except a valid vector object.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:init(x: number, y: number, z: number): vector\n```\n\n----------------------------------------\n\nTITLE: Defining CEnvDetailController Properties in Markdown\nDESCRIPTION: Lists two float properties of the CEnvDetailController class: m_flFadeStartDist and m_flFadeEndDist. These properties likely control the start and end distances for fading environmental details.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEnvDetailController.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flFadeStartDist` (float)\n* `m_flFadeEndDist` (float)\n```\n\n----------------------------------------\n\nTITLE: Documenting DT_TEFootprintDecal Properties - Markdown\nDESCRIPTION: This Markdown snippet enumerates the core properties of the DT_TEFootprintDecal object, including their names and data types. It serves as a quick reference for developers, with no external dependencies or executable code, simply listing parameter names and their respective types using bullet points. Inputs and outputs are not applicable; the list exists solely for documentation, and all formatting is preserved to maintain clarity.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEFootprintDecal.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_vecDirection` (vector)\n* `m_nEntity` (integer)\n* `m_nIndex` (integer)\n* `m_chMaterialType` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting Item Dogtags Data Fields - Markdown - English\nDESCRIPTION: This snippet defines a Markdown document that lists and briefly describes the fields of the CItemDogtags entity, including their names and data types. It is intended to provide a structured overview for reference, typically used during development or integration, and does not require external software dependencies. Inputs and outputs are not applicable beyond documentation use, and the snippet is limited to static property listing without code logic.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CItemDogtags.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CItemDogtags\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing CBaseAnimatingOverlay Properties in Markdown\nDESCRIPTION: This snippet provides a detailed list of properties for the CBaseAnimatingOverlay class. It includes various data types such as integers, floats, vectors, and arrays, covering aspects like position, rendering, animation, and physics simulation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBaseAnimatingOverlay.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting ItemCash Entity Fields - Markdown\nDESCRIPTION: This markdown snippet enumerates the networked fields present in the CItemCash entity for a gaming context. It provides a bullet-point list of each field name, type, and sometimes array dimensions, serving as structured reference documentation for engine or mod developers. Inputs are the field names, and the output is comprehensive inline documentation; no runtime behavior or code execution is involved.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CItemCash.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CItemCash\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Beam Spotlight Entity Network Properties - Source Engine - Markdown\nDESCRIPTION: This snippet lists all networked properties for the CBeamSpotlight class, specifying the data type (e.g., integer, float, vector) of each field. These properties determine the behavior and rendering of beam spotlights within the engine, covering animation timing, spatial parameters, rendering settings, team assignment, parenting, and spotlight-specific characteristics. The list is intended for engine developers and modders adding or modifying gameplay mechanics that interact with beam spotlights, and requires familiarity with Source Engine conventions and the underlying entity/component system.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBeamSpotlight.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nHaloIndex` (integer)\n* `m_bSpotlightOn` (integer)\n* `m_bHasDynamicLight` (integer)\n* `m_flSpotlightMaxLength` (float)\n* `m_flSpotlightGoalWidth` (float)\n* `m_flHDRColorScale` (float)\n* `m_flRotationSpeed` (float)\n* `m_nRotationAxis` (integer)\n```\n\n----------------------------------------\n\nTITLE: Using bit.bor for Bitwise OR in Lua\nDESCRIPTION: Performs a bitwise OR operation on two or more numbers, returning the result where bits are set if they are set in any of the arguments.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nbit.bor(x1: number, x2: number[, ...])\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Text (Lua)\nDESCRIPTION: Function to parse JSON text into Lua values or tables. It takes a string argument containing UTF-8 JSON text and returns the parsed Lua value.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/json.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\njson.parse(json_text: string): any\n```\n\n----------------------------------------\n\nTITLE: Exporting Current Configuration via Lua\nDESCRIPTION: The function config.export() returns the current configuration as a serialized string. This function does not take any parameters and is intended for obtaining a stringified version of the entire configuration, which may be used for saving, backup, or transmission purposes. The output is always a string representing the current internal state.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/config.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nconfig.export()\n```\n\n----------------------------------------\n\nTITLE: Setting Player List Field Values (Lua)\nDESCRIPTION: Function to set a value for a specific field in the player list for a given player index. Takes an entity index, field name, and the value to set as parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/plist.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nplist.set(entindex: number, field: string, value: any)\n```\n\n----------------------------------------\n\nTITLE: Listing Field Definitions for CHEGrenade Entity - Markdown - English\nDESCRIPTION: This snippet lists all known fields for the CHEGrenade entity, each annotated with its data type (e.g., integer, float, vector, string, or fixed-size array). It serves as a data structure reference for developers interacting with DT_HEGrenade records. There are no explicit dependencies, but understanding field types and their purpose is essential for correctly reading or writing grenade entity data. Inputs are entity records and desired field access; outputs are accurate references for implementation or tooling. Limitations include the absence of semantic documentation or usage examples—fields are listed with types only.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CHEGrenade.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHEGrenade\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Netprops - Markdown\nDESCRIPTION: Enumerates the full list of networked member fields (netprops) of the CPropCounter class in a structured markdown list. The snippet describes the property names, types (integer, float, vector, string), array details, and relevant semantics, serving for engine reference and code generation use. There are no functional dependencies; intended for developers familiar with Source Engine entity property conventions. Inputs/outputs: static textual schema (no runtime processing); limitation: text-only, not for automated parsing.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CPropCounter.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CPropCounter\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_flDisplayValue` (float)\n```\n\n----------------------------------------\n\nTITLE: CWeaponCSBase Properties Documentation\nDESCRIPTION: Detailed documentation of all properties available in the CWeaponCSBase class, including physics properties, rendering attributes, animation variables, and weapon-specific data members. Properties are organized with their respective data types.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponCSBase.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n```\n\n----------------------------------------\n\nTITLE: CTEPhysicsProp Property Definitions\nDESCRIPTION: Defines the properties of the CTEPhysicsProp structure including position vectors, rotation angles, velocity, model parameters, and rendering properties. Each property is listed with its corresponding data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEPhysicsProp.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_angRotation[0]` (float)\n* `m_angRotation[1]` (float)\n* `m_angRotation[2]` (float)\n* `m_vecVelocity` (vector)\n* `m_nModelIndex` (integer)\n* `m_nSkin` (integer)\n* `m_nFlags` (integer)\n* `m_nEffects` (integer)\n* `m_clrRender` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Data Table Properties - Source Engine - Markdown\nDESCRIPTION: The snippet lists the full set of networked fields for the CEnvScreenEffect entity in Source Engine, along with their types, as a markdown bulleted list. No dependencies are required, though understanding these fields typically assumes familiarity with the Source Engine's entity and networking architecture. Each entry details the property name and its data type, covering integer, float, string, and vector fields. This list is essential for modders or developers needing to reference or modify entity state within the engine, but does not define behavioral logic or implementation constraints.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CEnvScreenEffect.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flDuration` (float)\n* `m_nType` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing DT_PropDoorRotating Entity Attributes - Markdown\nDESCRIPTION: This snippet uses Markdown to enumerate all networked and runtime properties of the DT_PropDoorRotating entity, providing both name and type information for each. The properties are structured as a bulleted list, enabling use as a schema reference in documentation or tooling. Inputs are not required, and the output is a human-readable property list; no code execution dependencies are necessary, but familiarity with the entity's usage context (such as in Source engine games or related modding frameworks) is assumed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CPropDoorRotating.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CPropDoorRotating\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_qPreferredPlayerCarryAngles` (vector)\n* `m_bClientPhysics` (integer)\n* `m_bUseHitboxesForRenderBox` (integer)\n* `m_flGlowMaxDist` (float)\n* `m_bShouldGlow` (integer)\n* `m_clrGlow` (integer)\n* `m_nGlowStyle` (integer)\n* `m_flPoseParameter` (integer)\n* `m_flPlaybackRate` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `overlay_vars` (integer)\n* `m_flexWeight` (integer)\n* `m_blinktoggle` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Listing CDronegun Class Properties in Markdown\nDESCRIPTION: This code snippet enumerates the properties of the CDronegun class, including their names and data types. It covers various aspects such as positioning, rendering, collision, animation, and game-specific attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CDronegun.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_vecAttentionTarget` (vector)\n* `m_vecTargetOffset` (vector)\n* `m_iHealth` (integer)\n* `m_bHasTarget` (integer)\n```\n\n----------------------------------------\n\nTITLE: Getting squared vector length in Lua\nDESCRIPTION: Returns the squared length of the vector. This is faster than :length as it avoids the square root operation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:lengthsqr(): number\n```\n\n----------------------------------------\n\nTITLE: Invoking Mixer Callback to Mute Volume with Lua\nDESCRIPTION: Shows how to mute the ambient volume by invoking the `snd_setmixer` cvar callback directly with string arguments. Requires the `cvar` object and a properly registered mixer. The example calls `invoke_callback` with the mixer name, parameter, and mute value, which results in immediately setting the mixer channel's volume to zero. Arguments should match the callback's expected types and order.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/cvar.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal snd_setmixer = cvar.snd_setmixer\n\n-- Mutes ambient volume by setting the mixer \"vol\" option to 0\nsnd_setmixer:invoke_callback(\"Ambient\", \"vol\", \"0\")\n```\n\n----------------------------------------\n\nTITLE: Using bit.lshift for Logical Left Shift in Lua\nDESCRIPTION: Performs a bitwise logical left-shift operation, shifting in 0-bits from the right. Only the lower 5 bits of the shift count are used (range [0..31]).\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nbit.lshift(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading for Editor Configuration Guide\nDESCRIPTION: A Markdown heading introducing the section about editor configuration for Gamesense Lua scripting. It emphasizes the importance of proper editor setup for productivity and avoiding common issues.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/editors/README.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Editors\n```\n\n----------------------------------------\n\nTITLE: Listing Networked Properties for CPrecipitation - Source Engine - Markdown\nDESCRIPTION: This Markdown snippet enumerates the networked properties of the CPrecipitation class, typically used in Source Engine game development. Each list entry documents a field, its variable name, and the expected data type (e.g., integer, float, vector, string, array). This format assumes familiarity with entity serialization in Source Engine and is intended for documentation or reference purposes only. No code execution is involved; the snippet serves as a data schema reference.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CPrecipitation.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nPrecipType` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing CSpriteOriented Entity Properties in Markdown\nDESCRIPTION: This snippet provides a detailed list of properties for the CSpriteOriented entity, including their names and data types. It covers a wide range of attributes used for positioning, rendering, physics simulation, and gameplay mechanics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSpriteOriented.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_hAttachedToEntity` (integer)\n* `m_nAttachment` (integer)\n* `m_flScaleTime` (float)\n* `m_flSpriteScale` (float)\n* `m_flGlowProxySize` (float)\n* `m_flHDRColorScale` (float)\n* `m_flSpriteFramerate` (float)\n* `m_flFrame` (float)\n* `m_flBrightnessTime` (float)\n* `m_nBrightness` (integer)\n* `m_bWorldSpaceScale` (integer)\n```\n\n----------------------------------------\n\nTITLE: Obtaining System Time as Components (Lua)\nDESCRIPTION: Returns the current Windows time broken into hours, minutes, seconds, and milliseconds. No arguments are needed and is useful for logging or timing operations in scripts.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_23\n\nLANGUAGE: Lua\nCODE:\n```\nclient.system_time()\n```\n\n----------------------------------------\n\nTITLE: Defining CSmokeGrenadeProjectile Properties in Markdown\nDESCRIPTION: This code snippet lists all the properties of the CSmokeGrenadeProjectile class, including their names, types, and array sizes where applicable. It covers a wide range of attributes from basic entity properties to specific smoke grenade characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSmokeGrenadeProjectile.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_flDamage` (float)\n* `m_DmgRadius` (float)\n* `m_bIsLive` (integer)\n* `m_hThrower` (integer)\n* `m_flAnimTime` (integer)\n* `m_vecVelocity` (vector)\n* `m_fFlags` (integer)\n* `m_vInitialVelocity` (vector)\n* `m_nBounces` (integer)\n* `m_nExplodeEffectIndex` (integer)\n* `m_nExplodeEffectTickBegin` (integer)\n* `m_vecExplodeEffectOrigin` (vector)\n* `m_bDidSmokeEffect` (integer)\n* `m_nSmokeEffectTickBegin` (integer)\n```\n\n----------------------------------------\n\nTITLE: Using bit.tohex for Converting Numbers to Hexadecimal in Lua\nDESCRIPTION: Converts a number to a hexadecimal string. The second argument controls the number of digits and case (positive for lowercase, negative for uppercase). Default is 8 lowercase digits.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/bit.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nbit.tohex(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Calculating 2D Distance Between Vectors in Lua\nDESCRIPTION: This snippet showcases usage of the :dist2d method to calculate the 2D cross/vector product (possibly an error, as this usually returns distance) between the calling vector and another. It requires another vector object as input and returns a number. Intended for planar computations where only x and y components matter.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/vector.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:dist2d(other: vector): number\n```\n\n----------------------------------------\n\nTITLE: Defining CTEBubbleTrail Properties\nDESCRIPTION: Lists the properties of the CTEBubbleTrail class that define a bubble trail effect. Properties include spatial bounds, model reference, water level, bubble count, and movement speed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEBubbleTrail.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nm_vecMins (vector)\nm_vecMaxs (vector)\nm_nModelIndex (integer)\nm_flWaterZ (float)\nm_nCount (integer)\nm_fSpeed (float)\n```\n\n----------------------------------------\n\nTITLE: Defining CCSGameRulesProxy Properties in Markdown\nDESCRIPTION: This code block lists all the properties of the CCSGameRulesProxy class, including their names, types, and any array dimensions. It covers game state variables, timers, player statistics, and mode-specific information for Counter-Strike: Global Offensive.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CCSGameRulesProxy.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_bFreezePeriod` (integer)\n* `m_bMatchWaitingForResume` (integer)\n* `m_bWarmupPeriod` (integer)\n* `m_fWarmupPeriodEnd` (float)\n* `m_fWarmupPeriodStart` (float)\n* `m_bTerroristTimeOutActive` (integer)\n* `m_bCTTimeOutActive` (integer)\n* `m_flTerroristTimeOutRemaining` (float)\n* `m_flCTTimeOutRemaining` (float)\n* `m_nTerroristTimeOuts` (integer)\n* `m_nCTTimeOuts` (integer)\n* `m_iRoundTime` (integer)\n* `m_gamePhase` (integer)\n* `m_totalRoundsPlayed` (integer)\n* `m_nOvertimePlaying` (integer)\n* `m_timeUntilNextPhaseStarts` (float)\n* `m_flCMMItemDropRevealStartTime` (float)\n* `m_flCMMItemDropRevealEndTime` (float)\n* `m_fRoundStartTime` (float)\n* `m_flRestartRoundTime` (float)\n* `m_bGameRestart` (integer)\n* `m_flGameStartTime` (float)\n* `m_iHostagesRemaining` (integer)\n* `m_bAnyHostageReached` (integer)\n* `m_bMapHasBombTarget` (integer)\n* `m_bMapHasRescueZone` (integer)\n* `m_bMapHasBuyZone` (integer)\n* `m_bIsQueuedMatchmaking` (integer)\n* `m_nQueuedMatchmakingMode` (integer)\n* `m_bIsValveDS` (integer)\n* `m_bIsQuestEligible` (integer)\n* `m_bLogoMap` (integer)\n* `m_bPlayAllStepSoundsOnServer` (integer)\n* `m_iNumGunGameProgressiveWeaponsCT` (integer)\n* `m_iNumGunGameProgressiveWeaponsT` (integer)\n* `m_iSpectatorSlotCount` (integer)\n* `m_bBombDropped` (integer)\n* `m_bBombPlanted` (integer)\n* `m_iRoundWinStatus` (integer)\n* `m_eRoundWinReason` (integer)\n* `m_flDMBonusStartTime` (float)\n* `m_flDMBonusTimeLength` (float)\n* `m_unDMBonusWeaponLoadoutSlot` (integer)\n* `m_bDMBonusActive` (integer)\n* `m_bTCantBuy` (integer)\n* `m_bCTCantBuy` (integer)\n* `m_iMatchStats_RoundResults` (integer[0-29])\n* `m_iMatchStats_PlayersAlive_T` (integer[0-29])\n* `m_iMatchStats_PlayersAlive_CT` (integer[0-29])\n* `m_GGProgressiveWeaponOrderCT` (integer[0-59])\n* `m_GGProgressiveWeaponOrderT` (integer[0-59])\n* `m_GGProgressiveWeaponKillUpgradeOrderCT` (integer[0-59])\n* `m_flGuardianBuyUntilTime` (float)\n* `m_GGProgressiveWeaponKillUpgradeOrderT` (integer[0-59])\n* `m_MatchDevice` (integer)\n* `m_TeamRespawnWaveTimes` (float[0-31])\n* `m_bHasMatchStarted` (integer)\n* `m_flNextRespawnWave` (float[0-31])\n* `m_nEndMatchMapGroupVoteTypes` (integer[0-9])\n* `m_nNextMapInMapgroup` (integer)\n* `m_nEndMatchMapGroupVoteOptions` (integer[0-9])\n* `m_nEndMatchMapVoteWinner` (integer)\n* `m_bIsDroppingItems` (integer)\n* `m_iActiveAssassinationTargetMissionID` (integer)\n* `m_fMatchStartTime` (float)\n* `m_szTournamentEventName` (string)\n* `m_szTournamentEventStage` (string)\n* `m_szTournamentPredictionsTxt` (string)\n* `m_nTournamentPredictionsPct` (integer)\n* `m_szMatchStatTxt` (string)\n* `m_nGuardianModeWaveNumber` (integer)\n* `m_nGuardianModeSpecialKillsRemaining` (integer)\n* `m_nGuardianModeSpecialWeaponNeeded` (integer)\n* `m_nHalloweenMaskListSeed` (integer)\n* `m_numGlobalGiftsGiven` (integer)\n* `m_numGlobalGifters` (integer)\n* `m_arrFeaturedGiftersAccounts` (integer[0-3])\n* `m_arrFeaturedGiftersGifts` (integer[0-3])\n* `m_numGlobalGiftsPeriodSeconds` (integer)\n* `m_arrProhibitedItemIndices` (integer[0-99])\n* `m_numBestOfMaps` (integer)\n* `m_arrTournamentActiveCasterAccounts` (integer[0-3])\n* `m_iNumConsecutiveCTLoses` (integer)\n* `m_iNumConsecutiveTerroristLoses` (integer)\n* `m_vecPlayAreaMins` (vector)\n* `m_iPlayerSpawnHexIndices` (integer[0-63])\n* `m_vecPlayAreaMaxs` (vector)\n* `m_SpawnTileState` (integer[0-223])\n* `m_flSpawnSelectionTimeStart` (float)\n* `m_flSpawnSelectionTimeEnd` (float)\n* `m_flSpawnSelectionTimeLoadout` (float)\n* `m_spawnStage` (integer)\n* `m_flTabletHexOriginX` (float)\n* `m_flTabletHexOriginY` (float)\n* `m_roundData_playerXuids` (int64[0-64])\n* `m_roundData_playerPositions` (integer[0-64])\n* `m_roundData_playerTeams` (integer[0-64])\n* `m_SurvivalGameRuleDecisionTypes` (integer[0-15])\n* `m_flTabletHexSize` (float)\n* `m_SurvivalGameRuleDecisionValues` (integer[0-15])\n* `m_flSurvivalStartTime` (float)\n* `m_bBlockersPresent` (integer)\n* `m_bRoundInProgress` (integer)\n* `m_iFirstSecondHalfRound` (integer)\n* `m_iBombSite` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CBreachChargeProjectile Properties\nDESCRIPTION: Complete property listing for the CBreachChargeProjectile class showing member variables with their corresponding data types. Includes vectors, integers, floats and arrays for handling positioning, physics, rendering, animation and gameplay mechanics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBreachChargeProjectile.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_flDamage` (float)\n* `m_DmgRadius` (float)\n* `m_bIsLive` (integer)\n* `m_hThrower` (integer)\n* `m_flAnimTime` (integer)\n* `m_vecVelocity` (vector)\n* `m_fFlags` (integer)\n* `m_bShouldExplode` (integer)\n* `m_weaponThatThrewMe` (integer)\n* `m_nParentBoneIndex` (integer)\n* `m_vecParentBonePos` (vector)\n```\n\n----------------------------------------\n\nTITLE: Documenting CBumpMine Data Structure - Markdown\nDESCRIPTION: This snippet, written in Markdown, defines the documentation for the CBumpMine entity's properties, listing each property name, its data type, and size where applicable (such as arrays or vectors). There are no dependencies required as this is a purely textual documentation for reference in static analysis, entity setup, or data mapping tasks. The content includes the property name, its type (integer, float, vector, string), and possible array sizes for certain fields; no direct input/output occurs, and no integration constraints are present.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBumpMine.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBumpMine\n\n\n* `m_RawPanelBitVec` (integer[0-255])\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Fog Parameters for Source Engine Entities - Markdown\nDESCRIPTION: This snippet is a Markdown-formatted list that enumerates and briefly typifies each fog-related property associated with the CFogController entity in the Source Engine. It serves as technical documentation, requiring familiarity with entity-based game configuration and the Source modding context. Each property is annotated with its type (e.g., integer, float, vector), but it does not specify value ranges or example usage. Its primary inputs are the entity's field names; its output is a human-readable reference. There are no external dependencies, and the snippet assumes a game development background.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFogController.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CFogController\n\n\n* `m_fog.enable` (integer)\n* `m_fog.blend` (integer)\n* `m_fog.dirPrimary` (vector)\n* `m_fog.colorPrimary` (integer)\n* `m_fog.colorSecondary` (integer)\n* `m_fog.start` (float)\n* `m_fog.end` (float)\n* `m_fog.maxdensity` (float)\n* `m_fog.farz` (float)\n* `m_fog.colorPrimaryLerpTo` (integer)\n* `m_fog.colorSecondaryLerpTo` (integer)\n* `m_fog.startLerpTo` (float)\n* `m_fog.endLerpTo` (float)\n* `m_fog.maxdensityLerpTo` (float)\n* `m_fog.lerptime` (float)\n* `m_fog.duration` (float)\n* `m_fog.HDRColorScale` (float)\n* `m_fog.ZoomFogScale` (float)\n```\n\n----------------------------------------\n\nTITLE: Opening a Panorama UI Panel in CS:GO - JavaScript\nDESCRIPTION: The panorama.open API is used to open or activate a specific panel within CS:GO's Panorama UI. It takes an optional 'panel' parameter indicating which root panel to open. This function enables programmatic navigation or interface manipulation, and can be used in conjunction with other UI modification scripts. Dependencies include the CS:GO Panorama API. The input is an optional panel name string with the output being the targeted panel brought into view. The function is most effective when integrated into workflows requiring UI automation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/panorama.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npanorama.open([panel: string])\n```\n\n----------------------------------------\n\nTITLE: Enumerating CDynamicProp Networked Properties - Markdown\nDESCRIPTION: This snippet provides a Markdown-formatted list of all network-synchronized variables (netvars) belonging to the CDynamicProp class from the Source engine. It requires no dependencies and serves purely as static documentation or reference. The list includes each property's name and its corresponding type, with some arrays and vectors detailed, but does not include implementation logic. Expected use is for engine developers, modders, or tool creators seeking clarity on available properties and their types.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CDynamicProp.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_qPreferredPlayerCarryAngles` (vector)\n* `m_bClientPhysics` (integer)\n* `m_bUseHitboxesForRenderBox` (integer)\n* `m_flGlowMaxDist` (float)\n* `m_bShouldGlow` (integer)\n* `m_clrGlow` (integer)\n* `m_nGlowStyle` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CEnvTonemapController Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CEnvTonemapController class, including their names and data types. It covers a wide range of attributes from basic entity properties to specific tonemapping controls.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEnvTonemapController.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CEnvTonemapController\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_bUseCustomAutoExposureMin` (integer)\n* `m_bUseCustomAutoExposureMax` (integer)\n* `m_bUseCustomBloomScale` (integer)\n* `m_flCustomAutoExposureMin` (float)\n* `m_flCustomAutoExposureMax` (float)\n* `m_flCustomBloomScale` (float)\n* `m_flCustomBloomScaleMinimum` (float)\n* `m_flBloomExponent` (float)\n* `m_flBloomSaturation` (float)\n* `m_flTonemapPercentTarget` (float)\n* `m_flTonemapPercentBrightPixels` (float)\n* `m_flTonemapMinAvgLum` (float)\n* `m_flTonemapRate` (float)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Survival Spawn Chopper Networked Variables - Markdown\nDESCRIPTION: This Markdown snippet documents the complete list of network-replicated member variables for the CSurvivalSpawnChopper entity, serving as reference for developers integrating or extending entity networking. Each property entry includes the variable name and its data type (e.g., integer, float, string, vector), and some entries also Note array size or indexed structure. Inputs: N/A (pure documentation). Outputs: Human-readable reference for engine or mod code—no runtime functionality. Limitations: Non-executable, solely informative for design, debugging, or reverse engineering.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSurvivalSpawnChopper.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_vecOrigin` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (3)\n* `m_vecOrigin[2]` (float)\n```\n\n----------------------------------------\n\nTITLE: Documenting DT_EnvProjectedTexture Network Properties - Markdown\nDESCRIPTION: This snippet provides a structured Markdown documentation of all networked variables related to the CEnvProjectedTexture entity, including property names, data types, and brief value formats. It serves as a technical reference for Source Engine developers, mapping out fields relevant for rendering, physics, lighting, and game logic. Inputs are not required; the document is informational and outputs a comprehensive cheat sheet for this class's variable layout.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEnvProjectedTexture.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CEnvProjectedTexture\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_hTargetEntity` (integer)\n* `m_bState` (integer)\n* `m_bAlwaysUpdate` (integer)\n* `m_flLightFOV` (float)\n* `m_bEnableShadows` (integer)\n* `m_bSimpleProjection` (integer)\n* `m_bLightOnlyTarget` (integer)\n* `m_bLightWorld` (integer)\n* `m_bCameraSpace` (integer)\n* `m_flBrightnessScale` (float)\n* `m_LightColor` (integer)\n* `m_flColorTransitionTime` (float)\n* `m_flAmbient` (float)\n* `m_SpotlightTextureName` (string)\n* `m_nSpotlightTextureFrame` (integer)\n* `m_flNearZ` (float)\n* `m_flFarZ` (float)\n* `m_nShadowQuality` (integer)\n* `m_flProjectionSize` (float)\n* `m_flRotation` (float)\n* `m_iStyle` (integer)\n```\n\n----------------------------------------\n\nTITLE: Automating Kill-Based Chat Responses with Lua for Game Client\nDESCRIPTION: This Lua script hooks into the game event system to trigger automated chat messages whenever the local player eliminates an enemy. It uses functions provided by the game client API: \"client.userid_to_entindex\", \"entity.get_local_player\", \"entity.is_enemy\", and \"client.exec\" (aliased as \"console_cmd\"). The \"on_player_death\" function checks if the local player was the killer and whether the victim is an enemy, sending either \"one tap\" for headshots or \"effortless\" for regular kills via the in-game chat. The script is compatible with game environments supporting Lua event callbacks (such as CS:GO cheats/modules) and must be registered with \"client.set_event_callback\" for the \"player_death\" event.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/development/examples/talk_shit.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal userid_to_entindex, get_local_player, is_enemy, console_cmd = client.userid_to_entindex, entity.get_local_player, entity.is_enemy, client.exec\n\nlocal function on_player_death(e)\n\tlocal victim_userid, attacker_userid = e.userid, e.attacker\n\tif victim_userid == nil or attacker_userid == nil then\n\t\treturn\n\tend\n\n\tlocal victim_entindex = userid_to_entindex(victim_userid)\n\tlocal attacker_entindex = userid_to_entindex(attacker_userid)\n\n\tif attacker_entindex == get_local_player() and is_enemy(victim_entindex) then\n\t\tconsole_cmd(\"say \", e.headshot and \"one tap\" or \"effortless\")\n\tend\nend\nclient.set_event_callback(\"player_death\", on_player_death)\n```\n\n----------------------------------------\n\nTITLE: Drawing Debug Text in 3D World (GameSense Lua)\nDESCRIPTION: Draws debug text at a specified world coordinate (x, y, z) for a certain duration and RGBA color. Supports line offset for stacking, and variadic message arguments. Not recommended during paint event due to performance concerns.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nclient.draw_debug_text(x: number, y: number, z: number, line_offset: number, duration: number, r: number, g: number, b: number, a: number, ...)\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Properties with Markdown\nDESCRIPTION: This Markdown snippet enumerates all property names and their respective types for the CMolotovGrenade entity as part of the DT_MolotovGrenade structure. Intended as internal documentation rather than executable code, it provides a granular data mapping for reference during development, modding, or analysis. The snippet does not require any external dependencies and is designed to be read alongside documentation tools or within collaborative wikis; inputs and outputs are not programmatically handled, as the content targets human readers.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CMolotovGrenade.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CMolotovGrenade\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n\n```\n\n----------------------------------------\n\nTITLE: CEnvQuadraticBeam Entity Properties List\nDESCRIPTION: Complete property list for the CEnvQuadraticBeam entity, including data types and descriptions. Properties cover entity basics, rendering settings, physics parameters, team management, positioning, and beam-specific controls.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CEnvQuadraticBeam.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_targetPosition` (vector)\n* `m_controlPosition` (vector)\n* `m_scrollRate` (float)\n* `m_flWidth` (float)\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Freezing Data Table Fields - Entity Framework - Markdown\nDESCRIPTION: This snippet provides a detailed, itemized reference list of each member variable belonging to the DT_EntityFreezing data table through markdown formatting. It is intended to document the data layout for the CEntityFreezing entity, which may be used for code generation, API design, or as an internal reference for serialization schemas. Each field is annotated with type information, and array bounds are included where applicable; no dependencies or code execution are required, and the input/output is simply the reference table as shown.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEntityFreezing.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CEntityFreezing\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_vFreezingOrigin` (vector)\n* `m_flFrozenPerHitbox` (float[0-49])\n* `m_flFrozen` (float)\n* `m_bFinishFreezing` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Listing CBaseTrigger Class Properties in Markdown\nDESCRIPTION: This snippet provides a detailed list of properties for the CBaseTrigger class, including their names and data types. It covers various aspects of the object such as position, rendering, collision, and movement characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBaseTrigger.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_vecFinalDest` (vector)\n* `m_movementType` (integer)\n* `m_flMoveTargetTime` (float)\n* `m_bClientSidePredicted` (integer)\n* `m_spawnflags` (integer)\n```\n\n----------------------------------------\n\nTITLE: DT_TEBeamFollow Properties List\nDESCRIPTION: Lists all the properties of DT_TEBeamFollow data structure including model indices, visual parameters, color components, and entity references.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEBeamFollow.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_nModelIndex` (integer)\n* `m_nHaloIndex` (integer)\n* `m_nStartFrame` (integer)\n* `m_nFrameRate` (integer)\n* `m_fLife` (float)\n* `m_fWidth` (float)\n* `m_fEndWidth` (float)\n* `m_nFadeLength` (integer)\n* `m_fAmplitude` (float)\n* `m_nSpeed` (integer)\n* `r` (integer)\n* `g` (integer)\n* `b` (integer)\n* `a` (integer)\n* `m_nFlags` (integer)\n* `m_iEntIndex` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting GameRulesProxy Data Structure in Markdown - Markdown\nDESCRIPTION: This Markdown snippet lists all the properties belonging to the CCSGameRulesProxy entity, including field names, types, and array sizes where relevant. It offers a clear, enumerated reference for each property expected in CS:GO rules, aiding developers and data analysts in understanding the structure and accessibility of match rules data within game logic or external tooling. There are no dependencies, as this is non-executable documentation intended for human audiences.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CCSGameRulesProxy.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CCSGameRulesProxy\n\n\n* `m_bFreezePeriod` (integer)\n* `m_bMatchWaitingForResume` (integer)\n* `m_bWarmupPeriod` (integer)\n* `m_fWarmupPeriodEnd` (float)\n* `m_fWarmupPeriodStart` (float)\n* `m_bTerroristTimeOutActive` (integer)\n* `m_bCTTimeOutActive` (integer)\n* `m_flTerroristTimeOutRemaining` (float)\n* `m_flCTTimeOutRemaining` (float)\n* `m_nTerroristTimeOuts` (integer)\n* `m_nCTTimeOuts` (integer)\n* `m_iRoundTime` (integer)\n* `m_gamePhase` (integer)\n* `m_totalRoundsPlayed` (integer)\n* `m_nOvertimePlaying` (integer)\n* `m_timeUntilNextPhaseStarts` (float)\n* `m_flCMMItemDropRevealStartTime` (float)\n* `m_flCMMItemDropRevealEndTime` (float)\n* `m_fRoundStartTime` (float)\n* `m_flRestartRoundTime` (float)\n* `m_bGameRestart` (integer)\n* `m_flGameStartTime` (float)\n* `m_iHostagesRemaining` (integer)\n* `m_bAnyHostageReached` (integer)\n* `m_bMapHasBombTarget` (integer)\n* `m_bMapHasRescueZone` (integer)\n* `m_bMapHasBuyZone` (integer)\n* `m_bIsQueuedMatchmaking` (integer)\n* `m_nQueuedMatchmakingMode` (integer)\n* `m_bIsValveDS` (integer)\n* `m_bIsQuestEligible` (integer)\n* `m_bLogoMap` (integer)\n* `m_bPlayAllStepSoundsOnServer` (integer)\n* `m_iNumGunGameProgressiveWeaponsCT` (integer)\n* `m_iNumGunGameProgressiveWeaponsT` (integer)\n* `m_iSpectatorSlotCount` (integer)\n* `m_bBombDropped` (integer)\n* `m_bBombPlanted` (integer)\n* `m_iRoundWinStatus` (integer)\n* `m_eRoundWinReason` (integer)\n* `m_flDMBonusStartTime` (float)\n* `m_flDMBonusTimeLength` (float)\n* `m_unDMBonusWeaponLoadoutSlot` (integer)\n* `m_bDMBonusActive` (integer)\n* `m_bTCantBuy` (integer)\n* `m_bCTCantBuy` (integer)\n* `m_iMatchStats_RoundResults` (integer[0-29])\n* `m_iMatchStats_PlayersAlive_T` (integer[0-29])\n* `m_iMatchStats_PlayersAlive_CT` (integer[0-29])\n* `m_GGProgressiveWeaponOrderCT` (integer[0-59])\n* `m_GGProgressiveWeaponOrderT` (integer[0-59])\n* `m_GGProgressiveWeaponKillUpgradeOrderCT` (integer[0-59])\n* `m_flGuardianBuyUntilTime` (float)\n* `m_GGProgressiveWeaponKillUpgradeOrderT` (integer[0-59])\n* `m_MatchDevice` (integer)\n* `m_TeamRespawnWaveTimes` (float[0-31])\n* `m_bHasMatchStarted` (integer)\n* `m_flNextRespawnWave` (float[0-31])\n* `m_nEndMatchMapGroupVoteTypes` (integer[0-9])\n* `m_nNextMapInMapgroup` (integer)\n* `m_nEndMatchMapGroupVoteOptions` (integer[0-9])\n* `m_nEndMatchMapVoteWinner` (integer)\n* `m_bIsDroppingItems` (integer)\n* `m_iActiveAssassinationTargetMissionID` (integer)\n* `m_fMatchStartTime` (float)\n* `m_szTournamentEventName` (string)\n* `m_szTournamentEventStage` (string)\n* `m_szTournamentPredictionsTxt` (string)\n* `m_nTournamentPredictionsPct` (integer)\n* `m_szMatchStatTxt` (string)\n* `m_nGuardianModeWaveNumber` (integer)\n* `m_nGuardianModeSpecialKillsRemaining` (integer)\n* `m_nGuardianModeSpecialWeaponNeeded` (integer)\n* `m_nHalloweenMaskListSeed` (integer)\n* `m_numGlobalGiftsGiven` (integer)\n* `m_numGlobalGifters` (integer)\n* `m_arrFeaturedGiftersAccounts` (integer[0-3])\n* `m_arrFeaturedGiftersGifts` (integer[0-3])\n* `m_numGlobalGiftsPeriodSeconds` (integer)\n* `m_arrProhibitedItemIndices` (integer[0-99])\n* `m_numBestOfMaps` (integer)\n* `m_arrTournamentActiveCasterAccounts` (integer[0-3])\n* `m_iNumConsecutiveCTLoses` (integer)\n* `m_iNumConsecutiveTerroristLoses` (integer)\n* `m_vecPlayAreaMins` (vector)\n* `m_iPlayerSpawnHexIndices` (integer[0-63])\n* `m_vecPlayAreaMaxs` (vector)\n* `m_SpawnTileState` (integer[0-223])\n* `m_flSpawnSelectionTimeStart` (float)\n* `m_flSpawnSelectionTimeEnd` (float)\n* `m_flSpawnSelectionTimeLoadout` (float)\n* `m_spawnStage` (integer)\n* `m_flTabletHexOriginX` (float)\n* `m_flTabletHexOriginY` (float)\n* `m_roundData_playerXuids` (int64[0-64])\n* `m_roundData_playerPositions` (integer[0-64])\n* `m_roundData_playerTeams` (integer[0-64])\n* `m_SurvivalGameRuleDecisionTypes` (integer[0-15])\n* `m_flTabletHexSize` (float)\n* `m_SurvivalGameRuleDecisionValues` (integer[0-15])\n* `m_flSurvivalStartTime` (float)\n* `m_bBlockersPresent` (integer)\n* `m_bRoundInProgress` (integer)\n* `m_iFirstSecondHalfRound` (integer)\n* `m_iBombSite` (integer)\n```\n\n----------------------------------------\n\nTITLE: Physics Properties Structure Documentation\nDESCRIPTION: Detailed listing of all available properties for the CPhysicsProp class, including physics simulation, rendering, animation, and gameplay parameters. Each property is defined with its name and data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CPhysicsProp.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_qPreferredPlayerCarryAngles` (vector)\n* `m_bClientPhysics` (integer)\n* `m_flPoseParameter` (integer)\n* `m_flPlaybackRate` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `overlay_vars` (integer)\n* `m_flexWeight` (integer)\n* `m_blinktoggle` (integer)\n* `m_bAwake` (integer)\n```\n\n----------------------------------------\n\nTITLE: CBaseTrigger Property Definitions\nDESCRIPTION: Complete list of properties available in the CBaseTrigger class, including their data types. Properties cover entity positioning, rendering, physics, team information, and various game logic parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBaseTrigger.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_vecFinalDest` (vector)\n* `m_movementType` (integer)\n* `m_flMoveTargetTime` (float)\n* `m_bClientSidePredicted` (integer)\n* `m_spawnflags` (integer)\n```\n\n----------------------------------------\n\nTITLE: Implementing Aim Fire Event Logging in Lua\nDESCRIPTION: Example of handling the aim_fire event to log detailed information when the rage aimbot shoots at a player. Logs target name, hitgroup, damage, hit chance, backtrack amount, and various flags like teleported, interpolated, extrapolated, etc.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/events.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal function time_to_ticks(t)\n\treturn floor(0.5 + (t / globals.tickinterval()))\nend\n\nlocal hitgroup_names = {'generic', 'head', 'chest', 'stomach', 'left arm', 'right arm', 'left leg', 'right leg', 'neck', '?', 'gear'}\n\nlocal function aim_fire(e)\n\tlocal flags = {\n\t\te.teleported and 'T' or '',\n\t\te.interpolated and 'I' or '',\n\t\te.extrapolated and 'E' or '',\n\t\te.boosted and 'B' or '',\n\t\te.high_priority and 'H' or ''\n\t}\n\tlocal group = hitgroup_names[e.hitgroup + 1] or '?'\n\tprint(string.format('Fired at %s (%s) for %d dmg (chance=%d%%, bt=%2d, flags=%s)', entity.get_player_name(e.target), group, e.damage, math.floor(e.hit_chance + 0.5), time_to_ticks(e.backtrack), table.concat(flags)))\nend\nclient.set_event_callback('aim_fire', aim_fire)\n```\n\n----------------------------------------\n\nTITLE: CFireCrackerBlast Class Member Variables Structure\nDESCRIPTION: Comprehensive listing of member variables for the CFireCrackerBlast class, including basic entity properties, rendering attributes, team information, physics parameters, and fire-specific data. Contains arrays for fire propagation tracking and various game engine related parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFireCrackerBlast.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nm_ubSignature (integer[0-127])\nm_flAnimTime (integer)\nm_flSimulationTime (integer)\nm_cellbits (integer)\nm_cellX (integer)\nm_cellY (integer)\nm_cellZ (integer)\nm_vecOrigin (vector)\nm_nModelIndex (integer)\nm_vecMins (vector)\nm_vecMaxs (vector)\nm_nSolidType (integer)\nm_usSolidFlags (integer)\nm_nSurroundType (integer)\nm_triggerBloat (integer)\nm_vecSpecifiedSurroundingMins (vector)\nm_vecSpecifiedSurroundingMaxs (vector)\nm_nRenderFX (integer)\nm_nRenderMode (integer)\nm_fEffects (integer)\nm_clrRender (integer)\nm_iTeamNum (integer)\nm_iPendingTeamNum (integer)\nm_CollisionGroup (integer)\nm_flElasticity (float)\nm_flShadowCastDistance (float)\nm_hOwnerEntity (integer)\nm_hEffectEntity (integer)\nmoveparent (integer)\nm_iParentAttachment (integer)\nm_iName (string)\nmovetype (integer)\nmovecollide (integer)\nm_angRotation (vector)\nm_iTextureFrameIndex (integer)\nm_bSimulatedEveryTick (integer)\nm_bAnimatedEveryTick (integer)\nm_bAlternateSorting (integer)\nm_bSpotted (integer)\nm_bSpottedByMask (integer[0-1])\nm_bIsAutoaimTarget (integer)\nm_fadeMinDist (float)\nm_fadeMaxDist (float)\nm_flFadeScale (float)\nm_nMinCPULevel (integer)\nm_nMaxCPULevel (integer)\nm_nMinGPULevel (integer)\nm_nMaxGPULevel (integer)\nm_flUseLookAtAngle (float)\nm_flLastMadeNoiseTime (float)\nm_flMaxFallVelocity (float)\nm_fireXDelta (integer[0-63])\nm_fireYDelta (integer[0-63])\nm_fireZDelta (integer[0-63])\nm_bEligibleForScreenHighlight (integer)\nm_bFireIsBurning (integer[0-63])\nm_fireCount (integer)\nm_nFireEffectTickBegin (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CFlashbang Entity Properties - YAML\nDESCRIPTION: This snippet lists all properties of the CFlashbang entity, including their names, types, and in some cases ranges or array sizes. Intended for documentation or entity reference, it allows developers to understand and interact with the entity’s data structure. No dependencies are required as this is a static property listing, and inputs/outputs pertain to manual or automated interpretation by other processing tools.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFlashbang.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# CFlashbang\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting CFists Class Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CFists class, including their names, types, and any additional information. It covers a wide range of attributes from basic entity properties to weapon-specific details.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFists.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CFists\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bPlayingUninterruptableAct` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CColorCorrection DataTable Structure with Type Annotations in Markdown\nDESCRIPTION: This snippet lists and describes the member variables comprising the CColorCorrection DataTable, as used in Source Engine modding. It specifies each field and its data type, including parameters like spatial origin, affected falloff boundaries, blend weights, fade controls, net file lookup, and boolean flags. The format follows a Markdown bullet point list for ease of reference, with type hints provided in parentheses after each variable name.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CColorCorrection.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_MinFalloff` (float)\n* `m_MaxFalloff` (float)\n* `m_flCurWeight` (float)\n* `m_flMaxWeight` (float)\n* `m_flFadeInDuration` (float)\n* `m_flFadeOutDuration` (float)\n* `m_netlookupFilename` (string)\n* `m_bEnabled` (integer)\n* `m_bMaster` (integer)\n* `m_bClientSide` (integer)\n* `m_bExclusive` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CFireSmoke Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CFireSmoke structure, including their names and data types. It covers attributes related to positioning, rendering, collision, team information, and smoke/fire specific properties.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFireSmoke.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flStartScale` (float)\n* `m_flScale` (float)\n* `m_flScaleTime` (float)\n* `m_nFlags` (integer)\n* `m_nFlameModelIndex` (integer)\n* `m_nFlameFromAboveModelIndex` (integer)\n```\n\n----------------------------------------\n\nTITLE: Decoding Invalid Numbers in JSON (Lua)\nDESCRIPTION: Function to control whether invalid numbers are accepted during JSON decoding. It takes an optional boolean argument and returns the current setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/json.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\njson.decode_invalid_numbers([setting: boolean]): boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring Sparse Array Encoding in JSON (Lua)\nDESCRIPTION: Function to configure how sparse arrays are encoded in JSON. It takes boolean and number arguments for conversion, ratio, and safety, and returns the current settings.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/json.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_sparse_array([convert: boolean] [, ratio: number] [, safe: number]): boolean, number, number\n```\n\n----------------------------------------\n\nTITLE: Documenting CFists Entity Properties - Markdown\nDESCRIPTION: Documents the full set of properties and their types for the CFists entity, intended for Source Engine modding or game data reference. Requires no specific dependencies; it is a markdown document using lists to enumerate entity field names, types, and array ranges. Inputs are the entity property names and details, output is human-readable documentation with no logic or computation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFists.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CFists\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bPlayingUninterruptableAct` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting CBaseAttributableItem Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CBaseAttributableItem class, including their names, types, and any additional information. It covers a wide range of attributes used for game object representation, including position, rendering, physics, animation, and game-specific data.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBaseAttributableItem.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CPhysPropRadarJammer Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CPhysPropRadarJammer class, including their names and data types. It covers a wide range of attributes such as position, collision, rendering, physics, and animation parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CPhysPropRadarJammer.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CPhysPropRadarJammer\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_qPreferredPlayerCarryAngles` (vector)\n* `m_bClientPhysics` (integer)\n* `m_flPoseParameter` (integer)\n* `m_flPlaybackRate` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `overlay_vars` (integer)\n* `m_flexWeight` (integer)\n* `m_blinktoggle` (integer)\n* `m_bAwake` (integer)\n* `m_iPhysicsMode` (integer)\n* `m_fMass` (float)\n* `m_collisionMins` (vector)\n* `m_collisionMaxs` (vector)\n```\n\n----------------------------------------\n\nTITLE: Navigating Documentation Pages with Page References - Markdown\nDESCRIPTION: This Markdown snippet organizes a documentation index using page-ref directives. Each entry creates a navigable reference to a respective controller's documentation file, allowing users to quickly access detailed pages for each controller. Prerequisites include the documentation website or static site generator supporting page-ref syntax; each referenced page should exist and be properly named. The snippet outputs a set of links, grouped under a section heading and description, for modular and maintainable documentation navigation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/controllers.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Controllers\n---\ndescription: Last updated at 16.01.2021\n---\n\n\n{% page-ref page=\"CDangerZoneController.md\" %}\n{% page-ref page=\"CFogController.md\" %}\n{% page-ref page=\"CFootstepControl.md\" %}\n{% page-ref page=\"CMapVetoPickController.md\" %}\n{% page-ref page=\"CMaterialModifyControl.md\" %}\n{% page-ref page=\"CPoseController.md\" %}\n{% page-ref page=\"CPostProcessController.md\" %}\n{% page-ref page=\"CShadowControl.md\" %}\n{% page-ref page=\"CTeam.md\" %}\n{% page-ref page=\"CTeamplayRoundBasedRulesProxy.md\" %}\n{% page-ref page=\"CVoteController.md\" %}\n{% page-ref page=\"CWaterLODControl.md\" %}\n\n```\n\n----------------------------------------\n\nTITLE: Error Codes Table in Markdown\nDESCRIPTION: A markdown table mapping error codes to their corresponding issues and troubleshooting references\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/usage/common_issues.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCodes | Description\n----- | -----------\n  D0001409 | [Out of memory](#out-of-memory)\n  C000009A |\n  D0001600 | [Antivirus](#antivirus)\n  D0002001 |\n  C0000022 |\n  C00000F1 |\n  C0000043 |\n  C0000077 | [Unsupported version of Windows](#unsupported-version-of-windows)\n  D0002103 |\n  D0001418 | [Anti-cheat](#anti-cheat)\n  D000210A |\n  D0002201 | Connection problem\n  D0001434 | Game is taking too long to load, use -novid or wait until the main menu to inject\n  C0000225 |\n  D0001442 | Game crashed while loading\n  D0001012 | [\"Virtual machine not supported\"](#virtual-machine-not-supported)\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Properties with Markdown - Markdown\nDESCRIPTION: This snippet lists entity data members for CWeaponFamas, specifying the name and type of each property, using Markdown formatting for clarity. The fields cover everything from positional vectors to animation states and game logic integers. It is intended for use by developers referencing or modeling the internal state of this weapon's entity and may be used for code generation, serialization, or documentation. There are no strict input or output requirements; it is reference-only and not executable.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponFamas.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CItemCash Entity Properties - Markdown\nDESCRIPTION: This snippet enumerates all member variables of the CItemCash class using Markdown with type annotations. It provides technical information for developers needing to reference, extend, or serialize CItemCash properties, such as during game scripting or engine integration. Inputs and outputs are not explicitly present, as this is documentation; the expected usage is as a field reference during implementation or data analysis, and dependencies may include familiarity with Source SDK concepts or entity property conventions.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CItemCash.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CItemCash\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Properties - Markdown\nDESCRIPTION: This snippet lists all data members for the CPlantedC4 entity as bullet points with their corresponding types in Markdown. It does not require any dependencies and is primarily for documentation and human reference purposes. Each field (e.g., integers, floats, vectors) is presented with a clear naming convention, and array size or type is specified in brackets where appropriate.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CPlantedC4.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_bBombTicking` (integer)\n* `m_nBombSite` (integer)\n* `m_flC4Blow` (float)\n* `m_flTimerLength` (float)\n* `m_flDefuseLength` (float)\n* `m_flDefuseCountDown` (float)\n* `m_bBombDefused` (integer)\n* `m_hBombDefuser` (integer)\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic Watermark Overlay using CS:GO Render API in Lua\nDESCRIPTION: This Lua script adds a dynamic watermark to the top right of the CS:GO game window, displaying ping (in ms), tickrate, and system time. It leverages the game client\\'s rendering APIs and event callbacks to retrieve real-time metrics and draw both the watermark background and formatted text overlay. The appearance (margin, padding, text flags) can be adjusted via the provided variables, and the two renderer calls hardcode the color values. Requires access to CS:GO\\'s Lua API, specifically the 'client', 'globals', 'math', 'renderer', and 'string' libraries. Inputs come from game state and system time, and the output is a visual overlay updated each frame.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/examples/watermark.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n-- localize often used API variables to improve performance. It\\'s usually fine to not do this, but lua then has to look them up as globals every time.\\nlocal client_latency, client_screen_size, client_system_time, globals_tickinterval, math_floor, renderer_measure_text, renderer_rectangle, renderer_text, string_format = client.latency, client.screen_size, client.system_time, globals.tickinterval, math.floor, renderer.measure_text, renderer.rectangle, renderer.text, string.format\\n\\n-- this function will be executed every time CS:GO renders a frame and lets you draw on top of the game scene.\\nlocal function on_paint()\\n\\t-- fetch dynamic info. latency is in seconds so we convert it to ms and round it. tickrate is calculated with 1 / tickinterval\\n\\tlocal screen_width, screen_height = client_screen_size()\\n\\tlocal latency = math_floor(client_latency()*1000+0.5)\\n\\tlocal tickrate = 1/globals_tickinterval()\\n\\tlocal hours, minutes, seconds = client_system_time()\\n\\n\\t-- create text\\n\\tlocal text = string_format(\"%dms\", latency) .. \" | \" .. string_format(\"%dtick\", tickrate) .. \" | \" .. string_format(\"%02d:%02d:%02d\", hours, minutes, seconds)\\n\\n\\t-- modify these to change how the text appears. margin is the distance from the top right corner, padding is the size the background rectangle is larger than the text\\n\\tlocal margin, padding, flags = 18, 4, nil\\n\\n\\t-- uncomment this for a \\\"small and capital\\\" style\\n\\t-- flags, text = \\\"-\\\", (text:upper():gsub(\" \", \"   \"))\\n\\n\\t-- measure text size to properly offset the text from the top right corner\\n\\tlocal text_width, text_height = renderer_measure_text(flags, text)\\n\\n\\t-- draw background and text\\n\\trenderer_rectangle(screen_width-text_width-margin-padding, margin-padding, text_width+padding*2, text_height+padding*2, 32, 32, 32, 200)\\n\\trenderer_text(screen_width-text_width-margin, margin, 235, 235, 235, 255, flags, 0, text)\\nend\\nclient.set_event_callback(\"paint\", on_paint)\n```\n\n----------------------------------------\n\nTITLE: CWeaponTaser Property Definitions\nDESCRIPTION: Complete listing of properties for the CWeaponTaser class, including base entity properties, weapon attributes, and gameplay-specific variables. Properties cover rendering, physics, animation, and weapon functionality.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponTaser.md#_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n* `m_fFireTime` (float)\n```\n\n----------------------------------------\n\nTITLE: CEnvQuadraticBeam Entity Properties Definition\nDESCRIPTION: Defines the complete set of properties for the CEnvQuadraticBeam entity, including core entity properties, physics parameters, rendering attributes, and gameplay-specific values. Each property is listed with its corresponding data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEnvQuadraticBeam.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nm_flAnimTime (integer)\nm_flSimulationTime (integer)\nm_cellbits (integer)\nm_cellX (integer)\nm_cellY (integer)\nm_cellZ (integer)\nm_vecOrigin (vector)\nm_nModelIndex (integer)\nm_vecMins (vector)\nm_vecMaxs (vector)\nm_nSolidType (integer)\nm_usSolidFlags (integer)\nm_nSurroundType (integer)\nm_triggerBloat (integer)\nm_vecSpecifiedSurroundingMins (vector)\nm_vecSpecifiedSurroundingMaxs (vector)\nm_nRenderFX (integer)\nm_nRenderMode (integer)\nm_fEffects (integer)\nm_clrRender (integer)\nm_iTeamNum (integer)\nm_iPendingTeamNum (integer)\nm_CollisionGroup (integer)\nm_flElasticity (float)\nm_flShadowCastDistance (float)\nm_hOwnerEntity (integer)\nm_hEffectEntity (integer)\nmoveparent (integer)\nm_iParentAttachment (integer)\nm_iName (string)\nmovetype (integer)\nmovecollide (integer)\nm_angRotation (vector)\nm_iTextureFrameIndex (integer)\nm_bSimulatedEveryTick (integer)\nm_bAnimatedEveryTick (integer)\nm_bAlternateSorting (integer)\nm_bSpotted (integer)\nm_bSpottedByMask (integer[0-1])\nm_bIsAutoaimTarget (integer)\nm_fadeMinDist (float)\nm_fadeMaxDist (float)\nm_flFadeScale (float)\nm_nMinCPULevel (integer)\nm_nMaxCPULevel (integer)\nm_nMinGPULevel (integer)\nm_nMaxGPULevel (integer)\nm_flUseLookAtAngle (float)\nm_flLastMadeNoiseTime (float)\nm_flMaxFallVelocity (float)\nm_bEligibleForScreenHighlight (integer)\nm_targetPosition (vector)\nm_controlPosition (vector)\nm_scrollRate (float)\nm_flWidth (float)\n```\n\n----------------------------------------\n\nTITLE: Listing CWeaponM3 Properties in Markdown\nDESCRIPTION: A comprehensive listing of all properties available in the CWeaponM3 class, organized as a markdown bullet list. Properties include entity basics, physics attributes, rendering parameters, animation states, and weapon-specific values.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponM3.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_reloadState` (integer)\n```\n\n----------------------------------------\n\nTITLE: CFuncBrush Entity Properties List\nDESCRIPTION: Detailed listing of all available properties for the CFuncBrush entity including physics properties, rendering attributes, team settings, and gameplay parameters. Each property is defined with its corresponding data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFuncBrush.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n```\n\n----------------------------------------\n\nTITLE: Querying Camera Position with GameSense (Lua)\nDESCRIPTION: Returns the current camera position in 3D space as x, y, and z coordinates. If unable to retrieve the position, returns nil. Useful for debugging, drawing overlays, or external calculations requiring camera context.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nclient.camera_position()\n```\n\n----------------------------------------\n\nTITLE: CMovieDisplay Properties Definition\nDESCRIPTION: Detailed listing of all properties in the CMovieDisplay class with their respective data types. Includes properties for entity positioning, rendering, physics, team management, and movie playback configuration.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CMovieDisplay.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_bEnabled` (integer)\n* `m_bLooping` (integer)\n* `m_szMovieFilename` (string)\n* `m_szGroupName` (string)\n* `m_bStretchToFill` (integer)\n* `m_bForcedSlave` (integer)\n* `m_bUseCustomUVs` (integer)\n* `m_flUMin` (float)\n* `m_flUMax` (float)\n* `m_flVMin` (float)\n* `m_flVMax` (float)\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Property Types with Markdown - Markdown\nDESCRIPTION: This Markdown snippet lists the public properties of the DT_FuncMoveLinear/CFuncMoveLinear entity, specifying the associated data type (integer, float, string, or vector) for each. No external dependencies are required, but prior knowledge of entity modeling within the relevant game engine/framework is assumed. The list is static and intended for reference/documentation; no runtime functionality is provided.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFuncMoveLinear.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CFuncMoveLinear\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_vecFinalDest` (vector)\n* `m_movementType` (integer)\n* `m_flMoveTargetTime` (float)\n* `m_vecVelocity` (vector)\n* `m_fFlags` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Listing CBasePlayer Properties\nDESCRIPTION: This snippet provides an extensive list of properties for the CBasePlayer class. These properties cover various aspects of player functionality in a game engine, including position, physics, rendering, animation, health, weapons, and environmental interactions.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBasePlayer.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_flNextAttack` (float)\n* `m_LastHitGroup` (integer)\n* `m_hActiveWeapon` (integer)\n* `m_flTimeOfLastInjury` (float)\n* `m_hMyWeapons` (integer[0-63])\n* `m_hMyWearables` (integer[0])\n* `m_nRelativeDirectionOfLastInjury` (integer)\n* `deadflag` (integer)\n* `m_afPhysicsFlags` (integer)\n* `m_hVehicle` (integer)\n* `m_hUseEntity` (integer)\n* `m_hGroundEntity` (integer)\n* `m_iHealth` (integer)\n* `m_lifeState` (integer)\n* `m_iAmmo` (integer[0-31])\n* `m_iBonusProgress` (integer)\n* `m_iBonusChallenge` (integer)\n* `m_flMaxspeed` (float)\n* `m_fFlags` (integer)\n* `m_iObserverMode` (integer)\n* `m_bActiveCameraMan` (integer)\n* `m_bCameraManXRay` (integer)\n* `m_bCameraManOverview` (integer)\n* `m_bCameraManScoreBoard` (integer)\n* `m_uCameraManGraphs` (integer)\n* `m_iCoachingTeam` (integer)\n* `m_hObserverTarget` (integer)\n* `m_iFOV` (integer)\n* `m_iFOVStart` (integer)\n* `m_flFOVTime` (float)\n* `m_iDefaultFOV` (integer)\n* `m_hZoomOwner` (integer)\n* `m_hViewModel` (integer)\n* `m_hViewModel` (array)\n* `m_szLastPlaceName` (string)\n* `m_vecLadderNormal` (vector)\n* `m_ladderSurfaceProps` (integer)\n* `m_ubEFNoInterpParity` (integer)\n* `m_iDeathPostEffect` (integer)\n* `m_hPostProcessCtrl` (integer)\n* `m_hColorCorrectionCtrl` (integer)\n* `m_PlayerFog.m_hCtrl` (integer)\n* `m_vphysicsCollisionState` (integer)\n* `m_hViewEntity` (integer)\n* `m_bShouldDrawPlayerWhileUsingViewEntity` (integer)\n* `m_flDuckAmount` (float)\n* `m_flDuckSpeed` (float)\n* `m_chAreaBits` (integer[0-31])\n* `m_nWaterLevel` (integer)\n* `m_chAreaPortalBits` (integer[0-23])\n* `m_iHideHUD` (integer)\n* `m_flFOVRate` (float)\n* `m_bDucked` (integer)\n* `m_bDucking` (integer)\n* `m_flLastDuckTime` (float)\n* `m_bInDuckJump` (integer)\n* `m_nDuckTimeMsecs` (integer)\n* `m_nDuckJumpTimeMsecs` (integer)\n* `m_nJumpTimeMsecs` (integer)\n* `m_flFallVelocity` (float)\n* `m_viewPunchAngle` (vector)\n* `m_aimPunchAngle` (vector)\n* `m_aimPunchAngleVel` (vector)\n* `m_bDrawViewmodel` (integer)\n* `m_bWearingSuit` (integer)\n* `m_bPoisoned` (integer)\n* `m_flStepSize` (float)\n* `m_bAllowAutoMovement` (integer)\n* `m_skybox3d.scale` (integer)\n* `m_skybox3d.origin` (vector)\n* `m_skybox3d.area` (integer)\n* `m_skybox3d.fog.enable` (integer)\n* `m_skybox3d.fog.blend` (integer)\n* `m_skybox3d.fog.dirPrimary` (vector)\n* `m_skybox3d.fog.colorPrimary` (integer)\n* `m_skybox3d.fog.colorSecondary` (integer)\n* `m_skybox3d.fog.start` (float)\n* `m_skybox3d.fog.end` (float)\n* `m_skybox3d.fog.maxdensity` (float)\n* `m_skybox3d.fog.HDRColorScale` (float)\n* `m_audio.localSound[0]` (vector)\n* `m_audio.localSound[1]` (vector)\n* `m_audio.localSound[2]` (vector)\n* `m_audio.localSound[3]` (vector)\n* `m_audio.localSound[4]` (vector)\n* `m_audio.localSound[5]` (vector)\n* `m_audio.localSound[6]` (vector)\n* `m_audio.localSound[7]` (vector)\n* `m_audio.soundscapeIndex` (integer)\n* `m_audio.localBits` (integer)\n* `m_audio.entIndex` (integer)\n* `m_vecViewOffset[0]` (float)\n* `m_vecViewOffset[1]` (float)\n* `m_vecViewOffset[2]` (float)\n* `m_flFriction` (float)\n* `m_fOnTarget` (integer)\n* `m_nTickBase` (integer)\n* `m_nNextThinkTick` (integer)\n* `m_hLastWeapon` (integer)\n* `m_vecVelocity[0]` (float)\n* `m_vecVelocity[1]` (float)\n* `m_vecVelocity[2]` (float)\n* `m_vecBaseVelocity` (vector)\n* `m_hConstraintEntity` (integer)\n* `m_vecConstraintCenter` (vector)\n* `m_flConstraintRadius` (float)\n* `m_flConstraintWidth` (float)\n* `m_flConstraintSpeedFactor` (float)\n* `m_bConstraintPastRadius` (integer)\n* `m_flDeathTime` (float)\n* `m_flNextDecalTime` (float)\n* `m_fForceTeam` (float)\n* `m_flLaggedMovementValue` (float)\n* `m_hTonemapController` (integer)\n```\n\n----------------------------------------\n\nTITLE: CInfoLadderDismount Properties Definition\nDESCRIPTION: Detailed property listing for the CInfoLadderDismount class showing member variables with their corresponding data types. Includes properties for positioning, physics, rendering, team management, and gameplay functionality.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CInfoLadderDismount.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation Index with Markdown - Markdown\nDESCRIPTION: This Markdown code snippet defines a hierarchical index for the Gamesensical documentation, including development guides, code examples, tooling guides, API overviews, and detailed entity/item references. The navigation uses ordered and unordered lists with nested link items to provide a tree structure for users. Inputs are not required as this is static content, and the output is a navigable document outline; dependencies include a Markdown file viewer that supports nested lists and links. There are no dynamic parameters, and all context relies on the structure provided.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/mkdocs/docs/SUMMARY.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Developers\n\n* [Writing lua scripts](development/README.md)\n  * [Getting started](development/getting_started.md)\n  * [Examples](development/examples/README.md)\n    * [Simple watermark](development/examples/watermark.md)\n    * [Head Dot ESP](development/examples/head_dot.md)\n    * [Talk shit](development/examples/talk_shit.md)\n    * [Auto buy on round start](development/examples/auto_buy.md)\n    * [Create Interface](development/examples/create_interface.md)\n  * [Editors](development/editors/README.md)\n    * [VS Code](development/editors/vscode.md)\n    * [Sublime Text](development/editors/sublime.md)\n    * [Atom](development/editors/atom.md)\n  * [Events](development/events.md)\n  * [Snippets](development/snippets/README.md)\n  * [Compiling lua scripts](development/compiling.md)\n* [API Documentation](globals/README.md)\n  * [bit](globals/bit.md)\n  * [client](globals/client.md)\n  * [config](globals/config.md)\n  * [cvar](globals/cvar.md)\n  * [database](globals/database.md)\n  * [entity](globals/entity.md)\n  * [globals](globals/globals.md)\n  * [materialsystem](globals/materialsystem.md)\n  * [renderer](globals/renderer.md)\n  * [ui](globals/ui.md)\n* [Netprops](netprops/README.md)\n  * [Important](netprops/important.md)\n    * [CCSGameRulesProxy](netprops/CCSGameRulesProxy.md)\n    * [CCSPlayer](netprops/CCSPlayer.md)\n    * [CCSPlayerResource](netprops/CCSPlayerResource.md)\n  * [Items](netprops/items.md)\n    * [CAK47](netprops/CAK47.md)\n    * [CBaseCSGrenade](netprops/CBaseCSGrenade.md)\n    * [CBaseGrenade](netprops/CBaseGrenade.md)\n    * [CBreachCharge](netprops/CBreachCharge.md)\n    * [CBumpMine](netprops/CBumpMine.md)\n    * [CC4](netprops/CC4.md)\n    * [CDEagle](netprops/CDEagle.md)\n    * [CDecoyGrenade](netprops/CDecoyGrenade.md)\n    * [CEconEntity](netprops/CEconEntity.md)\n    * [CFists](netprops/CFists.md)\n    * [CFlashbang](netprops/CFlashbang.md)\n    * [CHEGrenade](netprops/CHEGrenade.md)\n    * [CIncendiaryGrenade](netprops/CIncendiaryGrenade.md)\n    * [CItem_Healthshot](netprops/CItem_Healthshot.md)\n    * [CItemCash](netprops/CItemCash.md)\n    * [CItemDogtags](netprops/CItemDogtags.md)\n    * [CKnife](netprops/CKnife.md)\n    * [CKnifeGG](netprops/CKnifeGG.md)\n    * [CMelee](netprops/CMelee.md)\n    * [CMolotovGrenade](netprops/CMolotovGrenade.md)\n    * [CSCAR17](netprops/CSCAR17.md)\n    * [CSensorGrenade](netprops/CSensorGrenade.md)\n    * [CSmokeGrenade](netprops/CSmokeGrenade.md)\n    * [CSnowball](netprops/CSnowball.md)\n    * [CTablet](netprops/CTablet.md)\n    * [CWeaponAug](netprops/CWeaponAug.md)\n    * [CWeaponAWP](netprops/CWeaponAWP.md)\n    * [CWeaponBaseItem](netprops/CWeaponBaseItem.md)\n    * [CWeaponBizon](netprops/CWeaponBizon.md)\n    * [CWeaponCSBase](netprops/CWeaponCSBase.md)\n    * [CWeaponCSBaseGun](netprops/CWeaponCSBaseGun.md)\n    * [CWeaponCycler](netprops/CWeaponCycler.md)\n    * [CWeaponElite](netprops/CWeaponElite.md)\n    * [CWeaponFamas](netprops/CWeaponFamas.md)\n    * [CWeaponFiveSeven](netprops/CWeaponFiveSeven.md)\n    * [CWeaponG3SG1](netprops/CWeaponG3SG1.md)\n    * [CWeaponGalil](netprops/CWeaponGalil.md)\n    * [CWeaponGalilAR](netprops/CWeaponGalilAR.md)\n    * [CWeaponGlock](netprops/CWeaponGlock.md)\n    * [CWeaponHKP2000](netprops/CWeaponHKP2000.md)\n    * [CWeaponM249](netprops/CWeaponM249.md)\n    * [CWeaponM3](netprops/CWeaponM3.md)\n    * [CWeaponM4A1](netprops/CWeaponM4A1.md)\n    * [CWeaponMAC10](netprops/CWeaponMAC10.md)\n    * [CWeaponMag7](netprops/CWeaponMag7.md)\n    * [CWeaponMP5Navy](netprops/CWeaponMP5Navy.md)\n    * [CWeaponMP7](netprops/CWeaponMP7.md)\n    * [CWeaponMP9](netprops/CWeaponMP9.md)\n    * [CWeaponNegev](netprops/CWeaponNegev.md)\n    * [CWeaponNOVA](netprops/CWeaponNOVA.md)\n    * [CWeaponP228](netprops/CWeaponP228.md)\n    * [CWeaponP250](netprops/CWeaponP250.md)\n    * [CWeaponP90](netprops/CWeaponP90.md)\n    * [CWeaponSawedoff](netprops/CWeaponSawedoff.md)\n    * [CWeaponSCAR20](netprops/CWeaponSCAR20.md)\n    * [CWeaponScout](netprops/CWeaponScout.md)\n    * [CWeaponSG550](netprops/CWeaponSG550.md)\n    * [CWeaponSG552](netprops/CWeaponSG552.md)\n    * [CWeaponSG556](netprops/CWeaponSG556.md)\n    * [CWeaponShield](netprops/CWeaponShield.md)\n    * [CWeaponSSG08](netprops/CWeaponSSG08.md)\n    * [CWeaponTaser](netprops/CWeaponTaser.md)\n    * [CWeaponTec9](netprops/CWeaponTec9.md)\n    * [CWeaponTMP](netprops/CWeaponTMP.md)\n    * [CWeaponUMP45](netprops/CWeaponUMP45.md)\n    * [CWeaponUSP](netprops/CWeaponUSP.md)\n    * [CWeaponXM1014](netprops/CWeaponXM1014.md)\n    * [ParticleSmokeGrenade](netprops/ParticleSmokeGrenade.md)\n  * [Projectiles](netprops/projectiles.md)\n    * [CBaseCSGrenadeProjectile](netprops/CBaseCSGrenadeProjectile.md)\n    * [CBreachChargeProjectile](netprops/CBreachChargeProjectile.md)\n    * [CBumpMineProjectile](netprops/CBumpMineProjectile.md)\n    * [CDecoyProjectile](netprops/CDecoyProjectile.md)\n    * [CMolotovProjectile](netprops/CMolotovProjectile.md)\n    * [CSensorGrenadeProjectile](netprops/CSensorGrenadeProjectile.md)\n    * [CSmokeGrenadeProjectile](netprops/CSmokeGrenadeProjectile.md)\n    * [CSnowballProjectile](netprops/CSnowballProjectile.md)\n  * [Environment](netprops/environment.md)\n    * [CColorCorrection](netprops/CColorCorrection.md)\n    * [CColorCorrectionVolume](netprops/CColorCorrectionVolume.md)\n    * [CEnvAmbientLight](netprops/CEnvAmbientLight.md)\n    * [CEnvDetailController](netprops/CEnvDetailController.md)\n    * [CEnvDOFController](netprops/CEnvDOFController.md)\n    * [CEnvGasCanister](netprops/CEnvGasCanister.md)\n    * [CEnvParticleScript](netprops/CEnvParticleScript.md)\n    * [CEnvProjectedTexture](netprops/CEnvProjectedTexture.md)\n    * [CEnvQuadraticBeam](netprops/CEnvQuadraticBeam.md)\n    * [CEnvScreenEffect](netprops/CEnvScreenEffect.md)\n    * [CEnvScreenOverlay](netprops/CEnvScreenOverlay.md)\n    * [CEnvTonemapController](netprops/CEnvTonemapController.md)\n    * [CEnvWind](netprops/CEnvWind.md)\n    * [CSun](netprops/CSun.md)\n    * [CSunlightShadowControl](netprops/CSunlightShadowControl.md)\n  * [Controllers](netprops/controllers.md)\n    * [CDangerZoneController](netprops/CDangerZoneController.md)\n    * [CFogController](netprops/CFogController.md)\n    * [CFootstepControl](netprops/CFootstepControl.md)\n    * [CMaterialModifyControl](netprops/CMaterialModifyControl.md)\n    * [CPoseController](netprops/CPoseController.md)\n    * [CPostProcessController](netprops/CPostProcessController.md)\n    * [CShadowControl](netprops/CShadowControl.md)\n    * [CTeam](netprops/CTeam.md)\n    * [CTeamplayRoundBasedRulesProxy](netprops/CTeamplayRoundBasedRulesProxy.md)\n    * [CVoteController](netprops/CVoteController.md)\n    * [CWaterLODControl](netprops/CWaterLODControl.md)\n  * [Temp Entities](netprops/tempentities.md)\n    * [CTEArmorRicochet](netprops/CTEArmorRicochet.md)\n    * [CTEBaseBeam](netprops/CTEBaseBeam.md)\n    * [CTEBeamEntPoint](netprops/CTEBeamEntPoint.md)\n    * [CTEBeamEnts](netprops/CTEBeamEnts.md)\n    * [CTEBeamFollow](netprops/CTEBeamFollow.md)\n    * [CTEBeamLaser](netprops/CTEBeamLaser.md)\n    * [CTEBeamPoints](netprops/CTEBeamPoints.md)\n    * [CTEBeamRing](netprops/CTEBeamRing.md)\n    * [CTEBeamRingPoint](netprops/CTEBeamRingPoint.md)\n    * [CTEBeamSpline](netprops/CTEBeamSpline.md)\n    * [CTEBloodSprite](netprops/CTEBloodSprite.md)\n    * [CTEBloodStream](netprops/CTEBloodStream.md)\n    * [CTEBreakModel](netprops/CTEBreakModel.md)\n    * [CTEBSPDecal](netprops/CTEBSPDecal.md)\n    * [CTEBubbles](netprops/CTEBubbles.md)\n    * [CTEBubbleTrail](netprops/CTEBubbleTrail.md)\n    * [CTEClientProjectile](netprops/CTEClientProjectile.md)\n    * [CTEDecal](netprops/CTEDecal.md)\n    * [CTEDust](netprops/CTEDust.md)\n    * [CTEDynamicLight](netprops/CTEDynamicLight.md)\n    * [CTEEffectDispatch](netprops/CTEEffectDispatch.md)\n    * [CTEEnergySplash](netprops/CTEEnergySplash.md)\n    * [CTEExplosion](netprops/CTEExplosion.md)\n    * [CTEFireBullets](netprops/CTEFireBullets.md)\n    * [CTEFizz](netprops/CTEFizz.md)\n    * [CTEFootprintDecal](netprops/CTEFootprintDecal.md)\n    * [CTEFoundryHelpers](netprops/CTEFoundryHelpers.md)\n    * [CTEGaussExplosion](netprops/CTEGaussExplosion.md)\n    * [CTEGlowSprite](netprops/CTEGlowSprite.md)\n    * [CTEImpact](netprops/CTEImpact.md)\n    * [CTEKillPlayerAttachments](netprops/CTEKillPlayerAttachments.md)\n    * [CTELargeFunnel](netprops/CTELargeFunnel.md)\n    * [CTEMetalSparks](netprops/CTEMetalSparks.md)\n    * [CTEMuzzleFlash](netprops/CTEMuzzleFlash.md)\n    * [CTEParticleSystem](netprops/CTEParticleSystem.md)\n    * [CTEPhysicsProp](netprops/CTEPhysicsProp.md)\n    * [CTEPlantBomb](netprops/CTEPlantBomb.md)\n    * [CTEPlayerAnimEvent](netprops/CTEPlayerAnimEvent.md)\n    * [CTEPlayerDecal](netprops/CTEPlayerDecal.md)\n    * [CTEProjectedDecal](netprops/CTEProjectedDecal.md)\n    * [CTERadioIcon](netprops/CTERadioIcon.md)\n    * [CTEShatterSurface](netprops/CTEShatterSurface.md)\n    * [CTEShowLine](netprops/CTEShowLine.md)\n    * [CTESmoke](netprops/CTESmoke.md)\n    * [CTESparks](netprops/CTESparks.md)\n    * [CTESprite](netprops/CTESprite.md)\n    * [CTESpriteSpray](netprops/CTESpriteSpray.md)\n    * [CTEWorldDecal](netprops/CTEWorldDecal.md)\n  * [Base Entities](netprops/baseentities.md)\n    * [CBaseAnimating](netprops/CBaseAnimating.md)\n    * [CBaseAnimatingOverlay](netprops/CBaseAnimatingOverlay.md)\n    * [CBaseAttributableItem](netprops/CBaseAttributableItem.md)\n    * [CBaseButton](netprops/CBaseButton.md)\n    * [CBaseCombatCharacter](netprops/CBaseCombatCharacter.md)\n    * [CBaseCombatWeapon](netprops/CBaseCombatWeapon.md)\n    * [CBaseDoor](netprops/CBaseDoor.md)\n    * [CBaseEntity](netprops/CBaseEntity.md)\n    * [CBaseFlex](netprops/CBaseFlex.md)\n    * [CBaseParticleEntity](netprops/CBaseParticleEntity.md)\n    * [CBasePlayer](netprops/CBasePlayer.md)\n    * [CBasePropDoor](netprops/CBasePropDoor.md)\n    * [CBaseTeamObjectiveResource](netprops/CBaseTeamObjectiveResource.md)\n    * [CBaseTempEntity](netprops/CBaseTempEntity.md)\n    * [CBaseToggle](netprops/CBaseToggle.md)\n    * [CBaseTrigger](netprops/CBaseTrigger.md)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Network Properties with Markdown\nDESCRIPTION: This Markdown snippet lists properties of the CFuncMonitor entity from the DT_FuncMonitor network data table. It uses Markdown conventions for bullet points and inline code blocks to itemize property names alongside their data types. The snippet serves as entity field documentation and requires no dependencies, intended to guide developers referencing or editing entity state synchronization fields in Source engine mods or tools. Inputs and outputs are limited to the presentation of documentation; parameters (property names, types, and array bounds) are explicitly listed, and the main limitation is that it is reference-only without executable logic.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFuncMonitor.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CFuncMonitor\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n```\n\n----------------------------------------\n\nTITLE: CEmbers Entity Properties Definition\nDESCRIPTION: Complete property list for the CEmbers entity including physics properties, render settings, team information, and ember-specific attributes like density, lifetime, and speed\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CEmbers.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nDensity` (integer)\n* `m_nLifetime` (integer)\n* `m_nSpeed` (integer)\n* `m_bEmit` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CTEImpact Structure Properties in Markdown\nDESCRIPTION: Lists the properties of the CTEImpact structure, including their names and data types. This structure is likely used for representing impact effects in a game engine.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEImpact.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_vecNormal` (vector)\n* `m_iType` (integer)\n```\n\n----------------------------------------\n\nTITLE: CTESmoke Properties Structure\nDESCRIPTION: Lists the properties and their data types that make up the CTESmoke structure. Includes position vector, model index, scale factor, and frame rate settings for smoke effects.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTESmoke.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_fScale` (float)\n* `m_nFrameRate` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Properties for Slideshow Display Entities - Markdown\nDESCRIPTION: This Markdown snippet lists all the networked properties of the CSlideshowDisplay entity within the DT_SlideshowDisplay data table. Each bullet outlines a field name and its type (with array indices where applicable), facilitating engine or modding documentation. There are no explicit dependencies, but the context assumes familiarity with the documented game's entity reflection system. Inputs are for reference only, describing the structure, and the content is not executable code.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSlideshowDisplay.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CSlideshowDisplay\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_bEnabled` (integer)\n* `m_szDisplayText` (string)\n* `m_szSlideshowDirectory` (string)\n* `m_chCurrentSlideLists` (integer[0-15])\n* `m_fMinSlideTime` (float)\n* `m_fMaxSlideTime` (float)\n* `m_iCycleType` (integer)\n* `m_bNoListRepeats` (integer)\n```\n\n----------------------------------------\n\nTITLE: Loading JPG Texture from Buffer - renderer API - JavaScript\nDESCRIPTION: Converts a raw JPG file buffer (with headers) into a texture, accessible by a returned texture ID for later rendering. Requires buffer contents and pixel dimensions. Used for dynamic image loading, this is essential for scripts that accommodate custom or user-supplied images.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/renderer.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderer.load_jpg(contents, width, height);\n```\n\n----------------------------------------\n\nTITLE: Documenting CFish Entity Properties - Markdown\nDESCRIPTION: This code snippet defines a summary table of properties for the CFish entity in Markdown format, aiding clear documentation of its internal state and field types. It lists parameters such as position vector, orientation, model index, life state, and water level. The snippet should be referenced by developers needing insight into the CFish fields; input consists of field names and data types, output is a readable checklist of entity attributes. No dependencies; intended for documentation purposes only.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFish.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_poolOrigin` (vector)\n* `m_angle` (float)\n* `m_x` (float)\n* `m_y` (float)\n* `m_z` (float)\n* `m_nModelIndex` (integer)\n* `m_lifeState` (integer)\n* `m_waterLevel` (float)\n```\n\n----------------------------------------\n\nTITLE: Defining CTEKillPlayerAttachments Structure in Markdown\nDESCRIPTION: This snippet defines the CTEKillPlayerAttachments structure with a single integer property 'm_nPlayer'. It likely represents a player identifier or index associated with killing player attachments in a game engine or networking context.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEKillPlayerAttachments.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CTEKillPlayerAttachments\n\n* `m_nPlayer` (integer)\n```\n\n----------------------------------------\n\nTITLE: CSpatialEntity Properties Definition\nDESCRIPTION: Lists the member variables of CSpatialEntity including position vector, minimum and maximum falloff values, current weight, and enabled state flag.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CSpatialEntity.md#_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nm_vecOrigin (vector)\nm_MinFalloff (float)\nm_MaxFalloff (float)\nm_flCurWeight (float)\nm_bEnabled (integer)\n```\n\n----------------------------------------\n\nTITLE: CSpatialEntity Properties Documentation\nDESCRIPTION: Lists the properties and their data types for the CSpatialEntity structure. Properties include position vector, minimum and maximum falloff values, current weight, and enabled state.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSpatialEntity.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nm_vecOrigin (vector)\nm_MinFalloff (float)\nm_MaxFalloff (float)\nm_flCurWeight (float)\nm_bEnabled (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing CWeaponP250 Class Properties in Markdown\nDESCRIPTION: This code snippet presents a structured list of properties for the CWeaponP250 class. It includes various attributes related to entity positioning, rendering, physics, weapon characteristics, and game-specific features. The properties are organized in a markdown list format with their respective data types.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponP250.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Absolute Frame Time in Lua\nDESCRIPTION: Returns the number of seconds elapsed during the last game frame.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nglobals.absoluteframetime(): number\n```\n\n----------------------------------------\n\nTITLE: Listing CTeam Entity Properties in Markdown\nDESCRIPTION: This code snippet lists the properties of the CTeam entity in Counter-Strike. It includes various integer and string properties related to team scores, names, logos, and player information.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTeam.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_iTeamNum` (integer)\n* `m_bSurrendered` (integer)\n* `m_scoreTotal` (integer)\n* `m_scoreFirstHalf` (integer)\n* `m_scoreSecondHalf` (integer)\n* `m_scoreOvertime` (integer)\n* `m_iClanID` (integer)\n* `m_szTeamname` (string)\n* `m_szClanTeamname` (string)\n* `m_szTeamFlagImage` (string)\n* `m_szTeamLogoImage` (string)\n* `m_szTeamMatchStat` (string)\n* `m_nGGLeaderEntIndex_CT` (integer)\n* `m_nGGLeaderEntIndex_T` (integer)\n* `m_numMapVictories` (integer)\n* `player_array_element` (integer)\n* `&quot;player_array&quot;` (array)\n```\n\n----------------------------------------\n\nTITLE: Defining CWeaponP228 Class Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CWeaponP228 class, including their names and data types. It covers a wide range of attributes from basic entity properties to weapon-specific characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponP228.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting Particle Entity Attributes - Markdown\nDESCRIPTION: Lists and describes each member variable of the DT_BaseParticleEntity (CBaseParticleEntity) class using Markdown formatting. Intended as reference documentation for developers, it documents variable names, types, and states without implementation or logic. Expected input is the class structure and variable list, and the output is a formatted Markdown section, with no dependencies beyond a markdown parser/viewer.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBaseParticleEntity.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBaseParticleEntity\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CWeaponXM1014 Data Table - Markdown\nDESCRIPTION: This Markdown snippet defines the full property breakdown for the CWeaponXM1014 class, listing its member variables, data types, and any associated array bounds. It acts as reference documentation for developers, assuming no programming dependencies but requiring familiarity with C++-style member notation and typical game engine data types. The list covers various types—integers, floats, strings, vectors, and arrays—providing a comprehensive mapping of the entity's fields for reading or serialization.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponXM1014.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CWeaponXM1014\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_reloadState` (integer)\n```\n\n----------------------------------------\n\nTITLE: CWeaponSCAR20 Class Properties\nDESCRIPTION: Complete property listing for the SCAR-20 weapon class including basic entity properties, weapon-specific attributes, animation states, networking variables and game logic parameters\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponSCAR20.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CBaseCSGrenade Properties in Markdown\nDESCRIPTION: This code snippet lists all the properties of the CBaseCSGrenade class, including their names, types, and any additional information. It covers a wide range of attributes from basic positioning to complex gameplay mechanics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBaseCSGrenade.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n```\n\n----------------------------------------\n\nTITLE: Document Page References in Markdown\nDESCRIPTION: A collection of page reference links to various game entity class documentation files using GitBook-style page references.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/other.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% page-ref page=\"CAI_BaseNPC.md\" %}\n{% page-ref page=\"CBeam.md\" %}\n{% page-ref page=\"CBeamSpotlight.md\" %}\n[...additional page references...]\n```\n\n----------------------------------------\n\nTITLE: Listing CWaterBullet Entity Properties in Markdown\nDESCRIPTION: This code snippet provides a detailed list of properties for the CWaterBullet entity. It includes various attributes such as position, rendering, physics, and gameplay-related properties. Each property is listed with its name and data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWaterBullet.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting Weapon Entity Properties - Markdown\nDESCRIPTION: This Markdown snippet enumerates every field present in the CWeaponMP5Navy data table, specifying each property name, data type (e.g., integer, float, vector, string), and array bounds when applicable. The list is comprehensive and useful as a static reference or for documentation generation, supporting developers or tool authors who need precise knowledge of this entity's memory layout and networked fields. There are no dependencies, and the output is purely informational; the format is meant for human readers and carries no executable code.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponMP5Navy.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponMP5Navy\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Frame Count in Lua\nDESCRIPTION: Returns the number of frames since the game started.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/globals.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nglobals.framecount(): number\n```\n\n----------------------------------------\n\nTITLE: Documenting CWeaponP90 Class Properties\nDESCRIPTION: Complete property listing for the CWeaponP90 class, including base entity properties, animation states, weapon statistics, and game-specific attributes. Each property is defined with its name and data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponP90.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CMapVetoPickController Properties in Plaintext\nDESCRIPTION: This snippet lists all the properties of the CMapVetoPickController class, including their names and data types. It covers various aspects such as rendering, physics, team management, and map selection for a game system.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CMapVetoPickController.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nDraftType` (integer)\n* `m_nTeamWithFirstChoice` (integer[0-63])\n* `m_nVoteMapIdsList` (integer[0-6])\n* `m_nAccountIDs` (integer[0-63])\n* `m_nMapId0` (integer[0-63])\n* `m_nMapId1` (integer[0-63])\n* `m_nMapId2` (integer[0-63])\n* `m_nMapId3` (integer[0-63])\n* `m_nMapId4` (integer[0-63])\n* `m_nMapId5` (integer[0-63])\n* `m_nTeamWinningCoinToss` (integer)\n* `m_nStartingSide0` (integer[0-63])\n* `m_nCurrentPhase` (integer)\n* `m_nPhaseStartTick` (integer)\n* `m_nPhaseDurationTicks` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CProp_Hallucination Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CProp_Hallucination class, including their names, types, and array sizes where applicable. It covers a wide range of attributes from basic positioning to complex animation and rendering parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CProp_Hallucination.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_bEnabled` (integer)\n* `m_fVisibleTime` (float)\n* `m_fRechargeTime` (float)\n```\n\n----------------------------------------\n\nTITLE: Defining CWeaponAug Properties in Markdown\nDESCRIPTION: This code snippet lists all the properties of the CWeaponAug class, including their names and data types. It covers a wide range of attributes from basic entity properties to weapon-specific characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponAug.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: CWeaponBaseItem Properties Definition\nDESCRIPTION: Complete property listing for CWeaponBaseItem class showing all available properties and their data types. Includes movement, rendering, animation, weapon stats, and game state properties.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponBaseItem.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n```\n\n----------------------------------------\n\nTITLE: MAC10 Weapon Properties List\nDESCRIPTION: Detailed listing of all properties available for the MAC10 weapon class, including basic entity properties, animation states, weapon stats, and combat variables\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponMAC10.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: CFuncConveyor Properties Structure\nDESCRIPTION: Detailed property list for the CFuncConveyor entity showing all available attributes with their corresponding data types. Includes properties for positioning, rendering, physics, networking, and gameplay functionality.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFuncConveyor.md#_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flConveyorSpeed` (float)\n```\n\n----------------------------------------\n\nTITLE: Keeping Encoding Buffer in JSON (Lua)\nDESCRIPTION: Function to control whether the JSON encoding buffer is kept for reuse. It takes a boolean argument and returns the current setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/json.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_keep_buffer([setting: boolean]): boolean\n```\n\n----------------------------------------\n\nTITLE: CFuncConveyor Properties List\nDESCRIPTION: A markdown list of all properties available in the CFuncConveyor entity, including their names and data types. Properties cover various aspects like positioning, rendering, collision, team settings, and conveyor mechanics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFuncConveyor.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flConveyorSpeed` (float)\n```\n\n----------------------------------------\n\nTITLE: CPhysMagnet Property Definitions in Markdown\nDESCRIPTION: Detailed listing of all properties in the CPhysMagnet class with their respective data types. Includes properties for positioning, physics simulation, rendering, animation states, and gameplay mechanics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CPhysMagnet.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n```\n\n----------------------------------------\n\nTITLE: CFuncMonitor Property Definitions in Markdown\nDESCRIPTION: Detailed listing of all properties available in the CFuncMonitor class, including simulation, positioning, rendering, physics, and gameplay attributes. Each property is defined with its name and data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFuncMonitor.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CWeaponGlock Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CWeaponGlock class, including their names and data types. It covers a wide range of attributes from basic entity properties to weapon-specific characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponGlock.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting Data Table Fields for CWeaponSG552 - Markdown\nDESCRIPTION: This documentation snippet lists all property names and their types for the DT_WeaponSG552 networked class, likely used by the Source Engine for game synchronization. There are no executable code blocks, but the list acts as a reference for accurately mapping entity data fields when interacting with the engine, customizing behaviors, or building related tools. Readers should have a basic understanding of entity property data types (integer, float, vector, string) to interpret field usage, and the context assumes familiarity with Source Engine networking and weapon class extension.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponSG552.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: CTablet Class Properties Documentation\nDESCRIPTION: Complete property listing for the CTablet class, including data types and array specifications. Properties cover entity basics, physics parameters, rendering attributes, animation controls, and tablet-specific functionality.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTablet.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_flUpgradeExpirationTime` (float)\n* `m_flUpgradeExpirationTime` (array)\n* `m_vecLocalHexFlags` (integer)\n* `m_vecLocalHexFlags` (array)\n* `m_nContractKillGridIndex` (integer)\n* `m_nContractKillGridHighResIndex` (integer)\n* `m_bTabletReceptionIsBlocked` (integer)\n* `m_flScanProgress` (float)\n* `m_flBootTime` (float)\n* `m_flShowMapTime` (float)\n* `m_vecNotificationIds` (integer)\n* `m_vecNotificationIds` (array)\n* `m_vecNotificationTimestamps` (float)\n* `m_vecNotificationTimestamps` (array)\n* `m_vecPlayerPositionHistory` (vector)\n* `m_vecPlayerPositionHistory` (array)\n* `m_nLastPurchaseIndex` (integer)\n* `m_vecNearestMetalCratePos` (vector)\n```\n\n----------------------------------------\n\nTITLE: Defining CFunc_Dust Properties in Markdown\nDESCRIPTION: This snippet lists the properties of the CFunc_Dust class, including their names and data types. These properties control various aspects of dust particle simulation such as color, spawn rate, size, lifetime, and physics interactions.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CFunc_Dust.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_Color` (integer)\n* `m_SpawnRate` (integer)\n* `m_SpeedMax` (integer)\n* `m_flSizeMin` (float)\n* `m_flSizeMax` (float)\n* `m_DistMax` (integer)\n* `m_LifetimeMin` (integer)\n* `m_LifetimeMax` (integer)\n* `m_DustFlags` (integer)\n* `m_nModelIndex` (integer)\n* `m_FallSpeed` (float)\n* `m_bAffectedByWind` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n```\n\n----------------------------------------\n\nTITLE: Using bit.tobit for Number Normalization in Lua\nDESCRIPTION: Normalizes a number to the numeric range for bit operations. This function is usually not needed as all bit operations automatically normalize their inputs.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nbit.tobit(x: number)\n```\n\n----------------------------------------\n\nTITLE: CDynamicLight Properties Structure\nDESCRIPTION: Complete property listing for CDynamicLight class showing member variables and their data types. Properties cover aspects like positioning, rendering, physics, team information, and lighting-specific parameters such as radius, angles, and style.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CDynamicLight.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_Flags` (integer)\n* `m_LightStyle` (integer)\n* `m_Radius` (float)\n* `m_Exponent` (integer)\n* `m_InnerAngle` (float)\n* `m_OuterAngle` (float)\n* `m_SpotRadius` (float)\n```\n\n----------------------------------------\n\nTITLE: Documenting CSun Class Properties in Markdown\nDESCRIPTION: Lists the properties of the CSun class, including render colors, direction vector, on/off state, size parameters, material indices, and HDR-related scales. Each property is specified with its name and data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSun.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_clrRender` (integer)\n* `m_clrOverlay` (integer)\n* `m_vDirection` (vector)\n* `m_bOn` (integer)\n* `m_nSize` (integer)\n* `m_nOverlaySize` (integer)\n* `m_nMaterial` (integer)\n* `m_nOverlayMaterial` (integer)\n* `HDRColorScale` (float)\n* `glowDistanceScale` (float)\n```\n\n----------------------------------------\n\nTITLE: Using bit.rol for Bitwise Left Rotation in Lua\nDESCRIPTION: Performs a bitwise left rotation where bits shifted out on the left are shifted back in on the right. Only the lower 5 bits of the rotation count are used.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nbit.rol(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: Enumerating WeaponHKP2000 Networked Fields - Markdown\nDESCRIPTION: This markdown snippet enumerates all networked properties of the CWeaponHKP2000 entity for use in documentation or reference. Each field is listed with its variable name, data type, and array dimensions where relevant. This information is typically essential for Source Engine modding or debugging, assisting developers in understanding entity state synchronization. There are no code execution requirements or dependencies, as the snippet is intended purely for documentation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponHKP2000.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponHKP2000\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: CEntityDissolve Properties Definition\nDESCRIPTION: Complete property listing for CEntityDissolve class, including data types and members for entity management, physics simulation, rendering, team handling, and dissolve effect parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEntityDissolve.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flStartTime` (float)\n* `m_flFadeInStart` (float)\n* `m_flFadeInLength` (float)\n* `m_flFadeOutModelStart` (float)\n* `m_flFadeOutModelLength` (float)\n* `m_flFadeOutStart` (float)\n* `m_flFadeOutLength` (float)\n* `m_nDissolveType` (integer)\n* `m_vDissolverOrigin` (vector)\n* `m_nMagnitude` (integer)\n```\n\n----------------------------------------\n\nTITLE: CPoseController Properties Definition\nDESCRIPTION: Complete list of properties and their data types for the CPoseController class, including animation timing, spatial positioning, rendering attributes, team information, physics properties, and pose control parameters\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CPoseController.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_hProps` (integer[0-3])\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_chPoseIndex` (integer[0-3])\n* `m_bPoseValueParity` (integer)\n* `m_fPoseValue` (float)\n* `m_fInterpolationTime` (float)\n* `m_bInterpolationWrap` (integer)\n* `m_fCycleFrequency` (float)\n* `m_nFModType` (integer)\n* `m_fFModTimeOffset` (float)\n* `m_fFModRate` (float)\n* `m_fFModAmplitude` (float)\n```\n\n----------------------------------------\n\nTITLE: Defining CPostProcessController Properties in Markdown\nDESCRIPTION: This snippet lists the properties of the CPostProcessController class, including their names and data types. It covers a wide range of attributes such as animation timings, position, rendering properties, team information, and post-processing parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CPostProcessController.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flPostProcessParameters` (float[0-10])\n* `m_bMaster` (integer)\n```\n\n----------------------------------------\n\nTITLE: Using bit.arshift for Arithmetic Right Shift in Lua\nDESCRIPTION: Performs a bitwise arithmetic right-shift operation, treating the most-significant bit as a sign bit and replicating it. Only the lower 5 bits of the shift count are used.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nbit.arshift(x: number, n: number)\n```\n\n----------------------------------------\n\nTITLE: CWeaponCSBaseGun Properties Reference\nDESCRIPTION: A detailed list of properties and attributes that define a base weapon class in Counter-Strike. Includes variables for animation, rendering, physics, networking, weapon mechanics and gameplay functionality.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponCSBaseGun.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing CBaseDoor Entity Properties in Markdown\nDESCRIPTION: A markdown-formatted list of properties for the CBaseDoor entity, including their names and data types. This list covers various aspects of the entity such as position, rendering, physics, and game-specific attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBaseDoor.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_vecFinalDest` (vector)\n* `m_movementType` (integer)\n* `m_flMoveTargetTime` (float)\n* `m_flWaveHeight` (float)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Depth for JSON Decoding (Lua)\nDESCRIPTION: Function to set or get the maximum depth for JSON decoding. It takes an optional number argument and returns the current depth setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/json.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\njson.decode_max_depth([setting: number]): number\n```\n\n----------------------------------------\n\nTITLE: Defining CTEBaseBeam Structure Properties in Markdown\nDESCRIPTION: This snippet lists the properties of the CTEBaseBeam structure, including their names and data types. It covers visual aspects like model and halo indices, animation parameters, color components, and various dimensional and behavioral attributes of the beam.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTEBaseBeam.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_nModelIndex` (integer)\n* `m_nHaloIndex` (integer)\n* `m_nStartFrame` (integer)\n* `m_nFrameRate` (integer)\n* `m_fLife` (float)\n* `m_fWidth` (float)\n* `m_fEndWidth` (float)\n* `m_nFadeLength` (integer)\n* `m_fAmplitude` (float)\n* `m_nSpeed` (integer)\n* `r` (integer)\n* `g` (integer)\n* `b` (integer)\n* `a` (integer)\n* `m_nFlags` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing CCSRagdoll Properties - Markdown\nDESCRIPTION: Presents a structured markdown-formatted list of properties for the DT_CSRagdoll type. This snippet serves as documentation with each item showing the property name and its corresponding type. It does not require external dependencies and is intended for use in documentation, not program execution. Inputs: none; Outputs: human-readable list. There are no runtime constraints as this is static documentation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CCSRagdoll.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\\n* `m_iMatchStats_EnemiesFlashed_Total` (integer[0-64])\\n* `m_vecRagdollOrigin` (vector)\\n* `m_hPlayer` (integer)\\n* `m_nModelIndex` (integer)\\n* `m_nForceBone` (integer)\\n* `m_vecForce` (vector)\\n* `m_vecRagdollVelocity` (vector)\\n* `m_iDeathPose` (integer)\\n* `m_iDeathFrame` (integer)\\n* `m_iTeamNum` (integer)\\n* `m_bClientSideAnimation` (integer)\\n* `m_flDeathYaw` (float)\\n* `m_flAbsYaw` (float)\n```\n\n----------------------------------------\n\nTITLE: Defining CTEGlowSprite Structure Properties in Markdown\nDESCRIPTION: Lists the properties of the CTEGlowSprite structure, including their names and data types. This structure is used to represent a glowing sprite entity, containing information about its position, model, scale, lifetime, and brightness.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEGlowSprite.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_fScale` (float)\n* `m_fLife` (float)\n* `m_nBrightness` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing CDronegun Entity Properties in Markdown\nDESCRIPTION: This code snippet enumerates all the properties of the CDronegun entity, including their names and data types. It covers various aspects such as position, rendering, collision, animation, and game-specific attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CDronegun.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_vecAttentionTarget` (vector)\n* `m_vecTargetOffset` (vector)\n* `m_iHealth` (integer)\n* `m_bHasTarget` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CSensorGrenade Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the CSensorGrenade class using a markdown list. It includes various types of properties such as integers, floats, vectors, and strings, covering aspects like position, rendering, animation, and weapon-specific attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSensorGrenade.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `lengthproxy` (integer[0-15])\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n```\n\n----------------------------------------\n\nTITLE: Documenting DT_TestTraceline Properties in Markdown\nDESCRIPTION: This snippet lists the properties of DT_TestTraceline, including their names and data types. It covers rendering color, position, rotation angles, and parent relationship.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CTestTraceline.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_clrRender` (integer)\n* `m_vecOrigin` (vector)\n* `m_angRotation[0]` (float)\n* `m_angRotation[1]` (float)\n* `m_angRotation[2]` (float)\n* `moveparent` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CEntityFreezing Network Table Fields - Markdown\nDESCRIPTION: This snippet lists all properties of the CEntityFreezing entity in a Markdown bullet list, including type annotations and array ranges where applicable. No external dependencies are required; it functions as rich documentation for reference and potentially for automated or manual translation into struct definitions elsewhere. No code execution occurs since all content is documentation—the snippet expects users to understand data types relevant to the game's engine (e.g., float, vector, integer).\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CEntityFreezing.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_vFreezingOrigin` (vector)\n* `m_flFrozenPerHitbox` (float[0-49])\n* `m_flFrozen` (float)\n* `m_bFinishFreezing` (integer)\n```\n\n----------------------------------------\n\nTITLE: CSun Entity Properties List\nDESCRIPTION: Comprehensive list of properties for the CSun entity class, including render colors, directional vector, size parameters, material indices, and visual effect scaling values.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CSun.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_clrRender` (integer)\n* `m_clrOverlay` (integer)\n* `m_vDirection` (vector)\n* `m_bOn` (integer)\n* `m_nSize` (integer)\n* `m_nOverlaySize` (integer)\n* `m_nMaterial` (integer)\n* `m_nOverlayMaterial` (integer)\n* `HDRColorScale` (float)\n* `glowDistanceScale` (float)\n```\n\n----------------------------------------\n\nTITLE: Defining CWaterBullet Class Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CWaterBullet class, including their names, types, and any additional information. It covers a wide range of attributes such as position, rendering, physics, and game-specific data.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWaterBullet.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting Networked Entity Properties - Source Engine - Markdown\nDESCRIPTION: This Markdown snippet lists all networked fields of the CBasePropDoor class from the Source Engine. No external dependencies are required, as the content is for documentation purposes only. Each property has its data type shown in parentheses, and the file is intended as a specification for developers referencing or working with the CBasePropDoor class's networked state variables. Inputs are not expected; output is the formatted information for human or tool consumption.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBasePropDoor.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBasePropDoor\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_qPreferredPlayerCarryAngles` (vector)\n* `m_bClientPhysics` (integer)\n* `m_bUseHitboxesForRenderBox` (integer)\n* `m_flGlowMaxDist` (float)\n* `m_bShouldGlow` (integer)\n* `m_clrGlow` (integer)\n* `m_nGlowStyle` (integer)\n* `m_flPoseParameter` (integer)\n* `m_flPlaybackRate` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `overlay_vars` (integer)\n* `m_flexWeight` (integer)\n* `m_blinktoggle` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Fields for SmokeTrail in Markdown\nDESCRIPTION: This snippet presents a markdown-formatted enumeration of all fields of the DT_SmokeTrail entity, specifying each property name and its type (e.g., integer, vector, float, string). It serves as technical documentation for the data structure, with no dependencies or executable aspects. Inputs are not required, as it is a static listing, and outputs are the documentation itself; it lists all available fields for the entity for developer reference.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/SmokeTrail.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# SmokeTrail\\n\\n\\n* `m_flAnimTime` (integer)\\n* `m_flSimulationTime` (integer)\\n* `m_cellbits` (integer)\\n* `m_cellX` (integer)\\n* `m_cellY` (integer)\\n* `m_cellZ` (integer)\\n* `m_vecOrigin` (vector)\\n* `m_nModelIndex` (integer)\\n* `m_vecMins` (vector)\\n* `m_vecMaxs` (vector)\\n* `m_nSolidType` (integer)\\n* `m_usSolidFlags` (integer)\\n* `m_nSurroundType` (integer)\\n* `m_triggerBloat` (integer)\\n* `m_vecSpecifiedSurroundingMins` (vector)\\n* `m_vecSpecifiedSurroundingMaxs` (vector)\\n* `m_nRenderFX` (integer)\\n* `m_nRenderMode` (integer)\\n* `m_fEffects` (integer)\\n* `m_clrRender` (integer)\\n* `m_iTeamNum` (integer)\\n* `m_iPendingTeamNum` (integer)\\n* `m_CollisionGroup` (integer)\\n* `m_flElasticity` (float)\\n* `m_flShadowCastDistance` (float)\\n* `m_hOwnerEntity` (integer)\\n* `m_hEffectEntity` (integer)\\n* `moveparent` (integer)\\n* `m_iParentAttachment` (integer)\\n* `m_iName` (string)\\n* `movetype` (integer)\\n* `movecollide` (integer)\\n* `m_angRotation` (vector)\\n* `m_iTextureFrameIndex` (integer)\\n* `m_bSimulatedEveryTick` (integer)\\n* `m_bAnimatedEveryTick` (integer)\\n* `m_bAlternateSorting` (integer)\\n* `m_bSpotted` (integer)\\n* `m_bSpottedByMask` (integer[0-1])\\n* `m_bIsAutoaimTarget` (integer)\\n* `m_fadeMinDist` (float)\\n* `m_fadeMaxDist` (float)\\n* `m_flFadeScale` (float)\\n* `m_nMinCPULevel` (integer)\\n* `m_nMaxCPULevel` (integer)\\n* `m_nMinGPULevel` (integer)\\n* `m_nMaxGPULevel` (integer)\\n* `m_flUseLookAtAngle` (float)\\n* `m_flLastMadeNoiseTime` (float)\\n* `m_flMaxFallVelocity` (float)\\n* `m_bEligibleForScreenHighlight` (integer)\\n* `m_SpawnRate` (float)\\n* `m_StartColor` (vector)\\n* `m_EndColor` (vector)\\n* `m_ParticleLifetime` (float)\\n* `m_StopEmitTime` (float)\\n* `m_MinSpeed` (float)\\n* `m_MaxSpeed` (float)\\n* `m_MinDirectedSpeed` (float)\\n* `m_MaxDirectedSpeed` (float)\\n* `m_StartSize` (float)\\n* `m_EndSize` (float)\\n* `m_SpawnRadius` (float)\\n* `m_bEmit` (integer)\\n* `m_nAttachment` (integer)\\n* `m_Opacity` (float)\n```\n\n----------------------------------------\n\nTITLE: Defining CSmokeGrenadeProjectile Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CSmokeGrenadeProjectile class, including their names, types, and array sizes where applicable. It covers various aspects such as position, rendering, collision, team affiliation, and smoke grenade-specific attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CSmokeGrenadeProjectile.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_flDamage` (float)\n* `m_DmgRadius` (float)\n* `m_bIsLive` (integer)\n* `m_hThrower` (integer)\n* `m_flAnimTime` (integer)\n* `m_vecVelocity` (vector)\n* `m_fFlags` (integer)\n* `m_vInitialVelocity` (vector)\n* `m_nBounces` (integer)\n* `m_nExplodeEffectIndex` (integer)\n* `m_nExplodeEffectTickBegin` (integer)\n* `m_vecExplodeEffectOrigin` (vector)\n* `m_bDidSmokeEffect` (integer)\n* `m_nSmokeEffectTickBegin` (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Properties - Markdown\nDESCRIPTION: This Markdown code snippet enumerates the member properties of the DT_TEBreakModel entity, displaying each with a name and type annotation. There are no external dependencies or executable logic; this is purely documentation for developers needing to understand the model structure. The key limitation is that it does not specify value ranges or provide detailed property descriptions—just names and types.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEBreakModel.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_angRotation[0]` (float)\n* `m_angRotation[1]` (float)\n* `m_angRotation[2]` (float)\n* `m_vecSize` (vector)\n* `m_vecVelocity` (vector)\n* `m_nModelIndex` (integer)\n* `m_nRandomization` (integer)\n* `m_nCount` (integer)\n* `m_fTime` (float)\n* `m_nFlags` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CBeamSpotlight Entity Data Fields - Markdown\nDESCRIPTION: This Markdown snippet serves as a structured field reference for the CBeamSpotlight entity's data table (DT_BeamSpotlight). It enumerates all serialized fields relevant to entity state, such as position, rendering options, physics parameters, and spotlight controls. Developers can use this as a quick lookup for data mapping or entity extension, noting field names, types, and logical groupings. Inputs and outputs are typically handled by the entity system—no direct invocation, but accuracy in these fields is critical for correct entity behavior.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBeamSpotlight.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBeamSpotlight\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nHaloIndex` (integer)\n* `m_bSpotlightOn` (integer)\n* `m_bHasDynamicLight` (integer)\n* `m_flSpotlightMaxLength` (float)\n* `m_flSpotlightGoalWidth` (float)\n* `m_flHDRColorScale` (float)\n* `m_flRotationSpeed` (float)\n* `m_nRotationAxis` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Entity Data Fields - Markdown\nDESCRIPTION: Lists and describes all configurable data fields for the CFunc_Dust entity related to dust effect simulation within a game engine. This Markdown snippet serves as technical documentation and does not have direct code execution dependencies. Fields such as color, spawn rate, speed, size, and wind effects are outlined to inform editors or developers about available control parameters; inputs or outputs are descriptive references only.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFunc_Dust.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CFunc_Dust\n\n\n* `m_Color` (integer)\n* `m_SpawnRate` (integer)\n* `m_SpeedMax` (integer)\n* `m_flSizeMin` (float)\n* `m_flSizeMax` (float)\n* `m_DistMax` (integer)\n* `m_LifetimeMin` (integer)\n* `m_LifetimeMax` (integer)\n* `m_DustFlags` (integer)\n* `m_nModelIndex` (integer)\n* `m_FallSpeed` (float)\n* `m_bAffectedByWind` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n```\n\n----------------------------------------\n\nTITLE: Documenting Member Fields of DT_VGuiScreen Entity - Markdown\nDESCRIPTION: This snippet provides a comprehensive, Markdown-formatted enumerated list of data table member fields for the DT_VGuiScreen (CVGuiScreen) entity. Each field is labeled with its variable name and data type, intended for easy reference by developers familiar with the underlying engine architecture. It allows consumers to quickly locate available properties, understand their intended types, and implement or wrap these fields in code using the documented structure. No additional dependencies are required, and the primary input is the existing entity definition.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CVGuiScreen.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flWidth` (float)\n* `m_flHeight` (float)\n* `m_nAttachmentIndex` (integer)\n* `m_nPanelName` (integer)\n* `m_fScreenFlags` (integer)\n* `m_nOverlayMaterial` (integer)\n* `m_hPlayerOwner` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting CBaseToggle Class Properties in Markdown\nDESCRIPTION: This code snippet lists all the properties of the CBaseToggle class, including their names and data types. It covers a wide range of attributes related to entity positioning, rendering, collision, team affiliation, and movement in a game engine context.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBaseToggle.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBaseToggle\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_vecFinalDest` (vector)\n* `m_movementType` (integer)\n* `m_flMoveTargetTime` (float)\n```\n\n----------------------------------------\n\nTITLE: Documenting CVGuiScreen Networked Properties - Markdown\nDESCRIPTION: This snippet documents, in Markdown format, the full list of CVGuiScreen network-synchronized properties, specifying each field and its type. No code execution is present; instead, it serves as a static and authoritative reference for class members, enabling quick inspection of entity layout for modding, tool creation, or debugging. Inputs (noted fields) detail names and data types; there are no outputs or logic encoded here. Dependencies are limited to Markdown rendering. There are no constraints apart from the accuracy of names/types in the data set.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CVGuiScreen.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CVGuiScreen\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flWidth` (float)\n* `m_flHeight` (float)\n* `m_nAttachmentIndex` (integer)\n* `m_nPanelName` (integer)\n* `m_fScreenFlags` (integer)\n* `m_nOverlayMaterial` (integer)\n* `m_hPlayerOwner` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Menu Item Values with UI API in Lua\nDESCRIPTION: Describes the `ui.set` function, which updates the value of a specified menu item using a reference. Accepts different value types depending on the item: booleans for checkboxes, numbers for sliders, strings or lists of strings for comboboxes, and color channel values for color pickers. Handles both single-value and multi-value scenarios. Takes at least a reference and a value, supports variadic arguments for multiselect comboboxes; value's expected type depends on the UI control.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_18\n\nLANGUAGE: Lua\nCODE:\n```\n\"ui.set(item: number, value: any[, ...])\"\n```\n\n----------------------------------------\n\nTITLE: Creating UI Label\nDESCRIPTION: Creates a text label in the menu that can be updated dynamically.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nui.new_label(tab: string, container: string, name: string)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Data Table Properties for CItem_Healthshot - Plaintext - Markdown\nDESCRIPTION: This snippet lists all member fields of the CItem_Healthshot network entity in plaintext via Markdown bullet points along with their data types and any array ranges. It serves as a schema or reference to understand what data is transmitted or replicated for this entity in engine internals or networking, suitable for reverse engineering, tool development, or modding. The prerequisite is a basic knowledge of Source Engine entity data tables, and key parameters such as position, animation states, owner references, ammo counts, and appearance customization are detailed. The output is a readable field-by-field enumeration with no code logic or execution, and no dependencies required beyond Markdown readability. Limitations: The snippet is documentation only, not direct code, and relies on the user's familiarity with entity modeling.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CItem_Healthshot.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting WeaponKnife Entity Properties in Markdown\nDESCRIPTION: This Markdown code lists the properties and data fields of the DT_WeaponKnife entity class (CKnife) as defined in the Source Engine. Each property is expressed with its name, data type, and if applicable, array length, aiding in reverse engineering or modification of game entity data. Inputs are the listed fields and their types, and the output is a formatted descriptive reference, with the constraint that no code execution is involved.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CKnife.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CKnife\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Documenting CMolotovGrenade Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CMolotovGrenade class, including their names, types, and array sizes where applicable. It covers various aspects such as physics simulation, rendering, animation, weapon characteristics, and grenade-specific behaviors.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CMolotovGrenade.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CMolotovGrenade\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n```\n\n----------------------------------------\n\nTITLE: Enumerating CEnvProjectedTexture Properties - Markdown - English\nDESCRIPTION: This snippet enumerates all member variables of the CEnvProjectedTexture entity in Markdown format, specifying their names and types. The list is comprehensive, covering simulation, rendering, physics, and spotlight projection fields. It is designed to serve as technical documentation targetting reverse engineering, modding, or development tools that need to reference internal property names and types of this entity.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CEnvProjectedTexture.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CEnvProjectedTexture\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_hTargetEntity` (integer)\n* `m_bState` (integer)\n* `m_bAlwaysUpdate` (integer)\n* `m_flLightFOV` (float)\n* `m_bEnableShadows` (integer)\n* `m_bSimpleProjection` (integer)\n* `m_bLightOnlyTarget` (integer)\n* `m_bLightWorld` (integer)\n* `m_bCameraSpace` (integer)\n* `m_flBrightnessScale` (float)\n* `m_LightColor` (integer)\n* `m_flColorTransitionTime` (float)\n* `m_flAmbient` (float)\n* `m_SpotlightTextureName` (string)\n* `m_nSpotlightTextureFrame` (integer)\n* `m_flNearZ` (float)\n* `m_flFarZ` (float)\n* `m_nShadowQuality` (integer)\n* `m_flProjectionSize` (float)\n* `m_flRotation` (float)\n* `m_iStyle` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CCSTeam Properties in Markdown\nDESCRIPTION: This code snippet lists the properties of the CCSTeam data structure. It includes team-related information such as team number, scores, clan details, team names, images, and player data.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CCSTeam.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_iTeamNum` (integer)\n* `m_bSurrendered` (integer)\n* `m_scoreTotal` (integer)\n* `m_scoreFirstHalf` (integer)\n* `m_scoreSecondHalf` (integer)\n* `m_scoreOvertime` (integer)\n* `m_iClanID` (integer)\n* `m_szTeamname` (string)\n* `m_szClanTeamname` (string)\n* `m_szTeamFlagImage` (string)\n* `m_szTeamLogoImage` (string)\n* `m_szTeamMatchStat` (string)\n* `m_nGGLeaderEntIndex_CT` (integer)\n* `m_nGGLeaderEntIndex_T` (integer)\n* `m_numMapVictories` (integer)\n* `player_array_element` (integer)\n* `&quot;player_array&quot;` (array)\n```\n\n----------------------------------------\n\nTITLE: Tracing Bullets from a Player's Perspective (Lua)\nDESCRIPTION: Simulates a bullet trace from a player's weapon from one position to another, optionally skipping player hitbox checks. Returns the hit entity index and damage, or nil if nothing is hit. Used for line-of-sight or damage calculations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_25\n\nLANGUAGE: Lua\nCODE:\n```\nclient.trace_bullet(from_player: number, from_x: number, from_y: number, from_z: number, to_x: number, to_y: number, to_z: number, skip_players: boolean)\n```\n\n----------------------------------------\n\nTITLE: CSmokeStack Property Definitions - Source Engine\nDESCRIPTION: Defines the complete set of networked properties for the CSmokeStack entity, including basic entity properties, physics parameters, rendering attributes, and smoke-specific effect controls.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CSmokeStack.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_SpreadSpeed` (float)\n* `m_Speed` (float)\n* `m_StartSize` (float)\n* `m_EndSize` (float)\n* `m_Rate` (float)\n* `m_JetLength` (float)\n* `m_bEmit` (integer)\n* `m_flBaseSpread` (float)\n* `m_flRollSpeed` (float)\n* `m_DirLight.m_vPos` (vector)\n* `m_DirLight.m_vColor` (vector)\n* `m_DirLight.m_flIntensity` (float)\n* `m_AmbientLight.m_vPos` (vector)\n* `m_AmbientLight.m_vColor` (vector)\n* `m_AmbientLight.m_flIntensity` (float)\n* `m_vWind` (vector)\n* `m_flTwist` (float)\n* `m_iMaterialModel` (integer)\n```\n\n----------------------------------------\n\nTITLE: Implementing Automated Chat Messages on Player Kill in Lua\nDESCRIPTION: This script listens for player death events and sends automated chat messages when the local player kills an enemy. It uses different messages for headshots ('one tap') and regular kills ('effortless'). The script requires access to client and entity functions from the game's API.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/development/examples/talk_shit.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal userid_to_entindex, get_local_player, is_enemy, console_cmd = client.userid_to_entindex, entity.get_local_player, entity.is_enemy, client.exec\n\nlocal function on_player_death(e)\n\tlocal victim_userid, attacker_userid = e.userid, e.attacker\n\tif victim_userid == nil or attacker_userid == nil then\n\t\treturn\n\tend\n\n\tlocal victim_entindex = userid_to_entindex(victim_userid)\n\tlocal attacker_entindex = userid_to_entindex(attacker_userid)\n\n\tif attacker_entindex == get_local_player() and is_enemy(victim_entindex) then\n\t\tconsole_cmd(\"say \", e.headshot and \"one tap\" or \"effortless\")\n\tend\nend\nclient.set_event_callback(\"player_death\", on_player_death)\n```\n\n----------------------------------------\n\nTITLE: CBaseCSGrenade Properties Documentation\nDESCRIPTION: Detailed listing of all properties and their data types for the CBaseCSGrenade class. Includes spatial properties, rendering attributes, animation variables, weapon stats, and grenade-specific functionality.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBaseCSGrenade.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_bRedraw` (integer)\n* `m_bIsHeldByPlayer` (integer)\n* `m_bPinPulled` (integer)\n* `m_fThrowTime` (float)\n* `m_bLoopingSoundPlaying` (integer)\n* `m_flThrowStrength` (float)\n```\n\n----------------------------------------\n\nTITLE: Listing CProp_Hallucination Data Table Fields - Markdown\nDESCRIPTION: Lists all networked and local fields for the CProp_Hallucination entity in Markdown format. Each entry documents the property name, data type, and shape, providing a quick technical reference. The snippet does not have code dependencies but assumes knowledge of the game engine's property syncing conventions, and it will be referenced by developers for structuring entity state or debugging game features concerning hallucinations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CProp_Hallucination.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CProp_Hallucination\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_bEnabled` (integer)\n* `m_fVisibleTime` (float)\n* `m_fRechargeTime` (float)\n```\n\n----------------------------------------\n\nTITLE: Documenting Weapon Entity Data Table Structure - Markdown\nDESCRIPTION: This Markdown snippet provides a list of all fields present in the DT_WeaponSSG08 entity (CWeaponSSG08), specifying the field names, types (such as integer, float, string, or vector), and array lengths when applicable. It is intended to serve as technical documentation for developers integrating, using, or inspecting the data structure of this weapon entity within relevant tools or codebases. Its dependencies include familiarity with the game's entity structure conventions, and its inputs and outputs are managed externally by the consuming game engine or editor; no direct processing occurs within this documentation snippet.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponSSG08.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponSSG08\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: CWeaponBizon Class Properties Structure\nDESCRIPTION: Detailed listing of all properties for the CWeaponBizon class, including their data types and array specifications. Properties cover various aspects like physics, rendering, animation, weapon mechanics and game logic.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponBizon.md#_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Pattern Signature Searching with FFI Pointer Result (Lua)\nDESCRIPTION: Finds a byte pattern in a named module and returns a FFI pointer if found, else nil. Requires understanding of module layout and expected signature format. Common in reverse engineering and cheat development workflows.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nclient.find_signature(module_name: string, pattern: string)\n```\n\n----------------------------------------\n\nTITLE: Documenting Weapon Entity Data Table - Markdown\nDESCRIPTION: This snippet offers a Markdown-formatted listing of every property in the weapon entity data table for `CWeaponM249` as used in a Source-style game engine. It details fields required for serialization, networking, and logic, specifying field name, type, and possible dimensions or ranges. There are no code dependencies, but it is intended to be consumed by developers documenting or generating code for engine or modding tooling. Inputs are the field name/type pairs, and the output is this structured reference list. Limitations: listing only, no direct code for (de)serialization implementation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponM249.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponM249\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Networked Properties - Markdown\nDESCRIPTION: This snippet details the set of properties for the CPhysMagnet entity, organized in a bullet-point list format for clarity. Each field specifies its data type and variable name, serving both as an implementation reference and a form of schema documentation. Inputs are not provided as it is reference material, and it is intended for use within Markdown-based documentation systems.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CPhysMagnet.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CPhysMagnet\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n```\n\n----------------------------------------\n\nTITLE: Checking Virtual Key State by Code (Lua)\nDESCRIPTION: Determine if a virtual key is currently pressed according to its integer key code. Returns true if pressed or nil otherwise. Leverages Windows virtual key codes, so external lookup may be needed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nclient.key_state(key: number)\n```\n\n----------------------------------------\n\nTITLE: Documenting CColorCorrectionVolume Fields - Markdown\nDESCRIPTION: This Markdown snippet lists the fields of the CColorCorrectionVolume data structure, providing their names and types for reference. It is designed for documentation purposes and depends on no specific technology. The snippet serves to inform developers or readers about the available member variables, although it does not provide full structure definitions, code, or usage examples.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CColorCorrectionVolume.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CColorCorrectionVolume\n\n\n* `m_Weight` (float)\n* `m_lookupFilename` (string)\n```\n\n----------------------------------------\n\nTITLE: Defining CCascadeLight Properties in Markdown\nDESCRIPTION: Lists the properties of the CCascadeLight class, including vector properties for shadow direction, boolean flags for enabling features, and numeric properties for light color and shadow distance.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CCascadeLight.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_shadowDirection` (vector)\n* `m_envLightShadowDirection` (vector)\n* `m_bEnabled` (integer)\n* `m_bUseLightEnvAngles` (integer)\n* `m_LightColor` (integer)\n* `m_LightColorScale` (integer)\n* `m_flMaxShadowDist` (float)\n```\n\n----------------------------------------\n\nTITLE: Documenting CFireSmoke Entity Properties in Markdown\nDESCRIPTION: This code snippet lists all the properties of the CFireSmoke entity, including their names and data types. It covers various aspects of the entity such as position, rendering, physics, and smoke/fire simulation parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFireSmoke.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CFireSmoke\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flStartScale` (float)\n* `m_flScale` (float)\n* `m_flScaleTime` (float)\n* `m_nFlags` (integer)\n* `m_nFlameModelIndex` (integer)\n* `m_nFlameFromAboveModelIndex` (integer)\n```\n\n----------------------------------------\n\nTITLE: Drawing Entity Hitboxes Overlay via Client (Lua)\nDESCRIPTION: Displays hitbox overlays for a given entity index, supporting durations, color, alpha, and optionally a specific tick. Primarily for debugging or ESP features, must avoid paint event to work correctly. Hitboxes can be specified by index, array, or all-at-once by passing 19.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nclient.draw_hitboxes(entindex: number, duration: number, hitboxes: number, r: number, g: number, b: number, a: number[, tick: number])\n```\n\n----------------------------------------\n\nTITLE: Defining CEntityFlame Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CEntityFlame class, including their names and data types. It covers various aspects such as animation times, spatial information, rendering properties, team information, and physics-related attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEntityFlame.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_hEntAttached` (integer)\n* `m_bCheapEffect` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining CWeaponElite Class Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the CWeaponElite class, including their names, types, and array sizes where applicable. It covers a wide range of attributes from basic entity properties to weapon-specific details.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponElite.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Drawing Debug Text in World Space (Lua)\nDESCRIPTION: Draws debugging text at a specific 3D position with color and alpha in the game world for a specified duration. Not intended for use during the paint event to avoid conflicts. Requires parameters for position, color, timing, and the text itself.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nclient.draw_debug_text(x: number, y: number, z: number, line_offset: number, duration: number, r: number, g: number, b: number, a: number, ...)\n```\n\n----------------------------------------\n\nTITLE: CBaseViewModel Properties List\nDESCRIPTION: A comprehensive list of properties for the CBaseViewModel class, including model indices, weapon references, animation parameters, and rendering effects. Each property is listed with its corresponding data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBaseViewModel.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_nModelIndex` (integer)\n* `m_hWeapon` (integer)\n* `m_nBody` (integer)\n* `m_nSkin` (integer)\n* `m_nSequence` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_flPlaybackRate` (float)\n* `m_fEffects` (integer)\n* `m_nAnimationParity` (integer)\n* `m_hOwner` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_bShouldIgnoreOffsetAndAccuracy` (integer)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP Flags with Color Callbacks (Lua)\nDESCRIPTION: Adds a new ESP (Extra Sensory Perception) flag drawn when the provided callback returns true for an entity. Allows for colored customization and requires the Player ESP Flags option to be enabled. The callback is invoked per entity during ESP rendering.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\nclient.register_esp_flag(flag: string, r: number, g: number, b: number, callback: function)\n```\n\n----------------------------------------\n\nTITLE: Listing CEnvWind Data Members - Markdown\nDESCRIPTION: This snippet lists the member variables of the CEnvWind data structure, specifying their types and likely use cases in environmental wind systems. Developers can reference this to understand the expected fields and prepare compatible interfaces or inputs. The code is pure documentation written in Markdown with type annotations in parentheses. It does not require external dependencies and is intended for explanatory use only.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEnvWind.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_iMinWind` (integer)\n* `m_iMaxWind` (integer)\n* `m_iMinGust` (integer)\n* `m_iMaxGust` (integer)\n* `m_flMinGustDelay` (float)\n* `m_flMaxGustDelay` (float)\n* `m_iGustDirChange` (integer)\n* `m_iWindSeed` (integer)\n* `m_iInitialWindDir` (integer)\n* `m_flInitialWindSpeed` (float)\n* `m_flStartTime` (float)\n* `m_flGustDuration` (float)\n```\n\n----------------------------------------\n\nTITLE: CParticleSystem Properties Documentation\nDESCRIPTION: Comprehensive list of CParticleSystem properties including vectors, integers, floats and strings used for controlling particle systems. Properties cover positioning, effects, parent relationships, control points, and configuration.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CParticleSystem.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_vecOrigin` (vector)\n* `m_fEffects` (integer)\n* `m_hOwnerEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_angRotation` (vector)\n* `m_iEffectIndex` (integer)\n* `m_bActive` (integer)\n* `m_nStopType` (integer)\n* `m_flStartTime` (float)\n* `m_vServerControlPoints` (vector[0-3])\n* `m_iServerControlPointAssignments` (integer[0-3])\n* `m_hControlPointEnts` (integer[0-62])\n* `m_szSnapshotFileName` (string)\n```\n\n----------------------------------------\n\nTITLE: Acquiring Player Bounding Box - Lua\nDESCRIPTION: Returns the bounding box coordinates and validity for a specified player entity index, allowing for efficient on-screen rendering or hitbox calculations. Requires the player entity index as input; outputs x1, y1, x2, y2, and alpha_multiplier. Coordinates are only valid if alpha_multiplier is non-zero.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_bounding_box(player: number): number, number, number, number, number\n```\n\n----------------------------------------\n\nTITLE: Defining CTEDust Entity Properties\nDESCRIPTION: Lists the properties of the CTEDust entity, including its 3D position (m_vecOrigin), size (m_flSize), speed (m_flSpeed), and direction vector (m_vecDirection). These properties are likely used to control the behavior and appearance of dust particles or effects in a game or simulation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEDust.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `m_vecOrigin[0]` (float)\n* `m_vecOrigin[1]` (float)\n* `m_vecOrigin[2]` (float)\n* `m_flSize` (float)\n* `m_flSpeed` (float)\n* `m_vecDirection` (vector)\n```\n\n----------------------------------------\n\nTITLE: Defining CTEBSPDecal Structure in C++\nDESCRIPTION: This code snippet defines the CTEBSPDecal structure with three members: m_vecOrigin for position, m_nEntity for entity reference, and m_nIndex for indexing. These properties are crucial for placing and tracking decals in a 3D game environment.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEBSPDecal.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstruct CTEBSPDecal {\n    vector m_vecOrigin;\n    int m_nEntity;\n    int m_nIndex;\n};\n```\n\n----------------------------------------\n\nTITLE: Logging Colored Console Messages with GameSense (Lua)\nDESCRIPTION: Logs messages to the console with specified RGB color. Supports variadic arguments for concatenated output and allows suppressing newline. Inputs are RGB components (0-255) and a message string, with optional trailing arguments for dynamic content.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nclient.color_log(r: number, g: number, b: number, msg: string[, ...])\n```\n\n----------------------------------------\n\nTITLE: Defining CDynamicLight Properties in Markdown\nDESCRIPTION: This code snippet lists all the properties of the CDynamicLight class, including their names and data types. It covers a wide range of attributes related to entity positioning, rendering, collision, and light-specific properties.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CDynamicLight.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_Flags` (integer)\n* `m_LightStyle` (integer)\n* `m_Radius` (float)\n* `m_Exponent` (integer)\n* `m_InnerAngle` (float)\n* `m_OuterAngle` (float)\n* `m_SpotRadius` (float)\n```\n\n----------------------------------------\n\nTITLE: Drawing Circle Outline in Lua Game Scripting\nDESCRIPTION: Function to draw a circle outline or partial circle outline on the screen. Parameters include position, color, radius, start angle, percentage of circle to draw, and outline thickness. Can only be called from the paint callback.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/renderer.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nrenderer.circle_outline(x: number, y: number, r: number, g: number, b: number, a: number, radius: number, start_degrees: number, percentage: number, thickness: number)\n```\n\n----------------------------------------\n\nTITLE: DT_TELargeFunnel Data Table Properties\nDESCRIPTION: Lists the properties of the DT_TELargeFunnel data table, including position coordinates, model reference, and orientation flag.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTELargeFunnel.md#_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n* `m_vecOrigin[0]` (float)\n* `m_vecOrigin[1]` (float)\n* `m_vecOrigin[2]` (float)\n* `m_nModelIndex` (integer)\n* `m_nReversed` (integer)\n```\n\n----------------------------------------\n\nTITLE: Documenting Grenade Projectile Properties - Markdown - English\nDESCRIPTION: This Markdown snippet provides a comprehensive list of all networked fields provided by the CBaseCSGrenadeProjectile class, including data types and array sizes where applicable. The snippet is intended for documentation purposes, serving as a reference for developers implementing or interacting with grenade projectile entities. No dependencies or parameters are required, and the content is structured as bullet lists that detail each property individually, clarifying their type for use within tools or analysis scripts.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CBaseCSGrenadeProjectile.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBaseCSGrenadeProjectile\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `m_flDamage` (float)\n* `m_DmgRadius` (float)\n* `m_bIsLive` (integer)\n* `m_hThrower` (integer)\n* `m_flAnimTime` (integer)\n* `m_vecVelocity` (vector)\n* `m_fFlags` (integer)\n* `m_vInitialVelocity` (vector)\n* `m_nBounces` (integer)\n* `m_nExplodeEffectIndex` (integer)\n* `m_nExplodeEffectTickBegin` (integer)\n* `m_vecExplodeEffectOrigin` (vector)\n\n```\n\n----------------------------------------\n\nTITLE: Defining SporeTrail Properties in Markdown\nDESCRIPTION: This code snippet lists all the properties of the SporeTrail structure, including their names and data types. It covers various aspects such as animation timing, spatial positioning, rendering attributes, team affiliation, collision properties, and particle emission characteristics.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/SporeTrail.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_flSpawnRate` (float)\n* `m_vecEndColor` (vector)\n* `m_flParticleLifetime` (float)\n* `m_flStartSize` (float)\n* `m_flEndSize` (float)\n* `m_flSpawnRadius` (float)\n* `m_bEmit` (integer)\n```\n\n----------------------------------------\n\nTITLE: CWeaponSawedoff Class Properties Definition\nDESCRIPTION: Detailed listing of all properties and their data types for the CWeaponSawedoff class, including base entity properties, weapon-specific attributes, and animation states\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponSawedoff.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_reloadState` (integer)\n```\n\n----------------------------------------\n\nTITLE: Querying System Time (GameSense Lua)\nDESCRIPTION: Returns the system time as hours, minutes, seconds, and milliseconds from Windows. Useful for time-based logic, logging, or scheduled actions. Returned as four numeric values.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/client.md#_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nclient.system_time()\n```\n\n----------------------------------------\n\nTITLE: DustTrail Entity Properties List\nDESCRIPTION: Complete property listing for DustTrail entity including animation timing, spatial positioning, rendering attributes, team information, physics properties, and particle emission parameters. Each property is defined with its corresponding data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/DustTrail.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_SpawnRate` (float)\n* `m_Color` (vector)\n* `m_ParticleLifetime` (float)\n* `m_StopEmitTime` (float)\n* `m_MinSpeed` (float)\n* `m_MaxSpeed` (float)\n* `m_MinDirectedSpeed` (float)\n* `m_MaxDirectedSpeed` (float)\n* `m_StartSize` (float)\n* `m_EndSize` (float)\n* `m_SpawnRadius` (float)\n* `m_bEmit` (integer)\n* `m_Opacity` (float)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Eye Position of Local Player (Lua)\nDESCRIPTION: Returns the current x, y, z position of the local player's eye in world coordinates, or nil if unavailable. Used in scripts needing positional awareness relative to the player for visuals or calculations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nclient.eye_position()\n```\n\n----------------------------------------\n\nTITLE: Querying a Player's Name - Lua\nDESCRIPTION: Returns a string representing the player's in-game name for a given entity index, or 'unknown' on failure. Useful for UI overlays or logging purposes. Requires player entity index as input.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/entity.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nentity.get_player_name(ent: number): string\n```\n\n----------------------------------------\n\nTITLE: Reloading All Active Scripts (Lua)\nDESCRIPTION: Triggers a reload of all currently active Lua scripts in the following game frame. Does not require arguments and should be used when scripts or configurations change.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/client.md#_snippet_18\n\nLANGUAGE: Lua\nCODE:\n```\nclient.reload_active_scripts()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sparse Array Encoding in JSON (Lua)\nDESCRIPTION: Function to configure how sparse arrays are encoded in JSON. It takes optional boolean and number arguments and returns the current settings.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/json.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_sparse_array([convert: boolean] [, ratio: number] [, safe: number]): boolean, number, number\n```\n\n----------------------------------------\n\nTITLE: Listing Networked Properties of CBaseDoor Entities - Markdown\nDESCRIPTION: This snippet provides a formatted Markdown summary enumerating all serialized network properties relevant to the DT_BaseDoor/CBaseDoor entity in the Source Engine. It details property names, types (integer, float, vector, or string), and arrays, serving as a static reference for developers. Inputs/outputs are not directly involved; rather, the snippet acts as documentation, with expected use cases in lookups, modding, or reference material for tooling.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBaseDoor.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CBaseDoor\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_vecFinalDest` (vector)\n* `m_movementType` (integer)\n* `m_flMoveTargetTime` (float)\n* `m_flWaveHeight` (float)\n\n```\n\n----------------------------------------\n\nTITLE: DT_TESmoke Properties Definition\nDESCRIPTION: Defines the key properties of the DT_TESmoke structure including origin position, model index, scale factor and frame rate settings for smoke effects in Source engine games.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTESmoke.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nm_vecOrigin (vector)\nm_nModelIndex (integer)\nm_fScale (float)\nm_nFrameRate (integer)\n```\n\n----------------------------------------\n\nTITLE: Stringifying Lua Values to JSON (Lua)\nDESCRIPTION: Function to convert Lua values into JSON strings. It takes any Lua value (boolean, number, string, table, or nil) and returns the JSON representation as a string.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/json.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\njson.stringify(value: any): string\n```\n\n----------------------------------------\n\nTITLE: Using bit.bswap for Byte Swapping in Lua\nDESCRIPTION: Swaps the bytes of a 32-bit number, useful for converting between little-endian and big-endian number representations.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/bit.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nbit.bswap(x: number)\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration in Lua\nDESCRIPTION: Loads configuration settings with optional specificity for tab and container levels. This function allows loading an entire config, a specific tab within a config, or a specific container within a tab.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/config.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nconfig.load(name: string, tab: string, container: string)\n```\n\n----------------------------------------\n\nTITLE: CEnvScreenOverlay Properties Documentation\nDESCRIPTION: Structured list of class properties for CEnvScreenOverlay including position, physics, rendering, and overlay-specific attributes. Each property is listed with its corresponding data type.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CEnvScreenOverlay.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_iszOverlayNames` (string)\n* `m_iszOverlayNames` (array)\n* `m_flOverlayTimes` (float)\n* `m_flOverlayTimes` (array)\n* `m_flStartTime` (float)\n* `m_iDesiredOverlay` (integer)\n* `m_bIsActive` (integer)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Depth for JSON Encoding (Lua)\nDESCRIPTION: Function to set or get the maximum depth for JSON encoding. It takes an optional number argument and returns the current depth setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/json.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_max_depth([depth: number]): number\n```\n\n----------------------------------------\n\nTITLE: Setting Number Precision for JSON Encoding (Lua)\nDESCRIPTION: Function to set the precision of numbers during JSON encoding. It takes a number argument representing the precision and returns the current setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/json.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_number_precision([precision: number]): number\n```\n\n----------------------------------------\n\nTITLE: Documenting Data Structure Using Markdown - English\nDESCRIPTION: This snippet documents the DT_RagdollManager class and its m_iCurrentMaxRagdollCount property in Markdown format. No programming language dependencies are required, but readers should be familiar with Markdown syntax. The snippet lists the integer property as a bullet point and provides a header for the class, serving as technical documentation for reference. There are no code inputs or outputs; this serves a descriptive purpose only.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CRagdollManager.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CRagdollManager\n\n\n* `m_iCurrentMaxRagdollCount` (integer)\n```\n\n----------------------------------------\n\nTITLE: CSmokeStack Entity Properties List\nDESCRIPTION: Complete listing of entity properties for the CSmokeStack class, including base entity properties and smoke-specific attributes. Properties cover rendering, physics, networking, gameplay states and smoke effect parameters.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CSmokeStack.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_SpreadSpeed` (float)\n* `m_Speed` (float)\n* `m_StartSize` (float)\n* `m_EndSize` (float)\n* `m_Rate` (float)\n* `m_JetLength` (float)\n* `m_bEmit` (integer)\n* `m_flBaseSpread` (float)\n* `m_flRollSpeed` (float)\n* `m_DirLight.m_vPos` (vector)\n* `m_DirLight.m_vColor` (vector)\n* `m_DirLight.m_flIntensity` (float)\n* `m_AmbientLight.m_vPos` (vector)\n* `m_AmbientLight.m_vColor` (vector)\n* `m_AmbientLight.m_flIntensity` (float)\n* `m_vWind` (vector)\n* `m_flTwist` (float)\n* `m_iMaterialModel` (integer)\n```\n\n----------------------------------------\n\nTITLE: Create Hotkey\nDESCRIPTION: Creates a new hotkey control with optional inline positioning and default key value.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nui.new_hotkey(tab: string, container: string, name: string[, inline: boolean] [, default_hotkey: number])\n```\n\n----------------------------------------\n\nTITLE: Creating File Reference Links with Liquid in Markdown\nDESCRIPTION: Each code snippet uses the Liquid template syntax within a Markdown file to reference another documentation file (likely containing details about a specific Temp Entity class). These snippets rely on the {% page-ref %} Liquid directive, which creates navigable links in compatible documentation generators (e.g., GitBook). The 'page' parameter points to the target Markdown file. No additional parameters or configurations are present. This structure assumes that a rendering engine supporting this syntax is used; if not, the links will not be interpretable.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/tempentities.md#_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEArmorRicochet.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBaseBeam.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBeamEntPoint.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBeamEnts.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBeamFollow.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBeamLaser.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBeamPoints.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBeamRing.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBeamRingPoint.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBeamSpline.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBloodSprite.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBloodStream.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBreakModel.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBSPDecal.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBubbles.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEBubbleTrail.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEClientProjectile.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEDecal.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEDust.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEDynamicLight.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEEffectDispatch.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEEnergySplash.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEExplosion.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEFireBullets.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEFizz.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEFootprintDecal.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEFoundryHelpers.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEGaussExplosion.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEGlowSprite.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEImpact.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEKillPlayerAttachments.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTELargeFunnel.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEMetalSparks.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEMuzzleFlash.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEParticleSystem.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEPhysicsProp.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEPlantBomb.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEPlayerAnimEvent.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEPlayerDecal.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEProjectedDecal.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTERadioIcon.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEShatterSurface.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEShowLine.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTESmoke.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTESparks.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTESprite.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTESpriteSpray.md\" %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\n{% page-ref page=\"CTEWorldDecal.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Create Label\nDESCRIPTION: Creates a new text label that can be updated dynamically using ui.set.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nui.new_label(tab: string, container: string, name: string)\n```\n\n----------------------------------------\n\nTITLE: Converting vector to angles in Lua\nDESCRIPTION: Converts a vector to an angle and returns the pitch, yaw and roll components.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/vector.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nvector_object:angles(): number, number, number\n```\n\n----------------------------------------\n\nTITLE: Get Menu Item Name\nDESCRIPTION: Returns the display name of a menu item referenced by its menu reference number.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/globals/ui.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nui.name(item: number)\n```\n\n----------------------------------------\n\nTITLE: Creating UI Combobox\nDESCRIPTION: Creates a dropdown selection box with specified options.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/ui.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nui.new_combobox(tab: string, container: string, name: string, ...)\n```\n\n----------------------------------------\n\nTITLE: Listing CWeaponGalilAR Entity Data Table Properties - Markdown\nDESCRIPTION: This Markdown snippet enumerates all the structural properties for the CWeaponGalilAR entity class. It acts as an at-a-glance data dictionary for fields used in the weapon's data table, specifying each field's name, type, and any indexing specifics (such as array length or vector status). No code functionality is provided; dependencies are limited to Markdown compatibility, and its sole purpose is descriptive documentation.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CWeaponGalilAR.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponGalilAR\n\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Global Variables Section Header in Markdown\nDESCRIPTION: Markdown header that labels a section for documenting global variables and constants\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Globals\n```\n\n----------------------------------------\n\nTITLE: Enumerating Networked Properties for CWeaponSG556 - Markdown\nDESCRIPTION: This markdown-formatted snippet lists all properties, fields, and variables associated with the CWeaponSG556 entity, including their types and array bounds where applicable. It does not require any external dependencies, but assumes context within a Source Engine entity documentation system. Each property is labeled with its type (e.g., integer, float, vector, string) and, where present, its array range (e.g., float[0-23]), providing metadata essential for understanding serialization and manipulation. The snippet serves as detailed reference documentation; no code execution is implied. Inputs and outputs are not applicable due to the schema's declarative documentation nature.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CWeaponSG556.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CWeaponSG556\n\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n\n```\n\n----------------------------------------\n\nTITLE: Compiling Lua Scripts with LuaJIT in Command Prompt - Text\nDESCRIPTION: This snippet provides the command line instruction to compile a Lua script (script.lua) into LuaJIT bytecode (compiled.ljbc) using the luajit.exe binary. Dependencies include luajit.exe and access to the script you want to compile. Key parameters are the input Lua script filename and the output bytecode filename. The input is the Lua script's path, and the output is a .ljbc bytecode file. This process assumes a Windows environment and requires that LuaJIT is correctly extracted and accessible in the working directory.\nSOURCE: https://github.com/gamesensical/docs/blob/master/src/mkdocs/docs/development/compiling.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nluajit.exe -b script.lua compiled.ljbc\n```\n\n----------------------------------------\n\nTITLE: Property Definitions for CBaseTeamObjectiveResource\nDESCRIPTION: List of properties and their data types for managing team objectives, control points, and game states. Includes arrays for team-specific data, control point positions, and various game state indicators.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CBaseTeamObjectiveResource.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_iTimerToShowInHUD` (integer)\n* `m_iStopWatchTimer` (integer)\n* `m_iNumControlPoints` (integer)\n* `m_bPlayingMiniRounds` (integer)\n* `m_bControlPointsReset` (integer)\n* `m_iUpdateCapHudParity` (integer)\n* `m_vCPPositions` (vector)\n* `m_bCPIsVisible` (integer[0-7])\n* `m_flLazyCapPerc` (float[0-7])\n* `m_iTeamIcons` (integer[0-63])\n* `m_iTeamOverlays` (integer[0-63])\n* `m_iTeamReqCappers` (integer[0-63])\n* `m_flTeamCapTime` (float[0-63])\n* `m_iPreviousPoints` (integer[0-191])\n* `m_bTeamCanCap` (integer[0-63])\n* `m_iTeamBaseIcons` (integer[0-31])\n* `m_iBaseControlPoints` (integer[0-31])\n* `m_bInMiniRound` (integer[0-7])\n* `m_vCPPositions` (array)\n* `m_iWarnOnCap` (integer[0-7])\n* `m_iszWarnSound` (string)\n* `m_flPathDistance` (float[0-7])\n* `m_iNumTeamMembers` (integer[0-63])\n* `m_iCappingTeam` (integer[0-7])\n* `m_iTeamInZone` (integer[0-7])\n* `m_bBlocked` (integer[0-7])\n* `m_iszWarnSound` (array)\n* `m_iOwner` (integer[0-7])\n* `m_pszCapLayoutInHUD` (string)\n```\n\n----------------------------------------\n\nTITLE: CFuncSmokeVolume Property Definitions in Markdown\nDESCRIPTION: Detailed listing of all properties for the CFuncSmokeVolume class, including animation timing, position vectors, rendering attributes, collision settings, and smoke volume specific parameters like density and movement speed.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CFuncSmokeVolume.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_Color1` (integer)\n* `m_Color2` (integer)\n* `m_MaterialName` (string)\n* `m_ParticleDrawWidth` (float)\n* `m_ParticleSpacingDistance` (float)\n* `m_DensityRampSpeed` (float)\n* `m_RotationSpeed` (float)\n* `m_MovementSpeed` (float)\n* `m_Density` (float)\n* `m_maxDrawDistance` (float)\n* `m_spawnflags` (integer)\n```\n\n----------------------------------------\n\nTITLE: Defining DT_TEFoundryHelpers Data Table Structure\nDESCRIPTION: Defines the data table structure for CTEFoundryHelpers containing an integer field m_iEntity which likely references an entity index or ID.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/mkdocs/docs/netprops/CTEFoundryHelpers.md#_snippet_0\n\nLANGUAGE: sourcescript\nCODE:\n```\nm_iEntity (integer)\n```\n\n----------------------------------------\n\nTITLE: Listing CDEagle Class Properties in Markdown\nDESCRIPTION: This snippet provides a detailed list of properties for the CDEagle class, including data types and array sizes where applicable. It covers various aspects such as position, rendering, physics, animations, and weapon-specific attributes.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/netprops/CDEagle.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `m_flAnimTime` (integer)\n* `m_flSimulationTime` (integer)\n* `m_cellbits` (integer)\n* `m_cellX` (integer)\n* `m_cellY` (integer)\n* `m_cellZ` (integer)\n* `m_vecOrigin` (vector)\n* `m_nModelIndex` (integer)\n* `m_vecMins` (vector)\n* `m_vecMaxs` (vector)\n* `m_nSolidType` (integer)\n* `m_usSolidFlags` (integer)\n* `m_nSurroundType` (integer)\n* `m_triggerBloat` (integer)\n* `m_vecSpecifiedSurroundingMins` (vector)\n* `m_vecSpecifiedSurroundingMaxs` (vector)\n* `m_nRenderFX` (integer)\n* `m_nRenderMode` (integer)\n* `m_fEffects` (integer)\n* `m_clrRender` (integer)\n* `m_iTeamNum` (integer)\n* `m_iPendingTeamNum` (integer)\n* `m_CollisionGroup` (integer)\n* `m_flElasticity` (float)\n* `m_flShadowCastDistance` (float)\n* `m_hOwnerEntity` (integer)\n* `m_hEffectEntity` (integer)\n* `moveparent` (integer)\n* `m_iParentAttachment` (integer)\n* `m_iName` (string)\n* `movetype` (integer)\n* `movecollide` (integer)\n* `m_angRotation` (vector)\n* `m_iTextureFrameIndex` (integer)\n* `m_bSimulatedEveryTick` (integer)\n* `m_bAnimatedEveryTick` (integer)\n* `m_bAlternateSorting` (integer)\n* `m_bSpotted` (integer)\n* `m_bSpottedByMask` (integer[0-1])\n* `m_bIsAutoaimTarget` (integer)\n* `m_fadeMinDist` (float)\n* `m_fadeMaxDist` (float)\n* `m_flFadeScale` (float)\n* `m_nMinCPULevel` (integer)\n* `m_nMaxCPULevel` (integer)\n* `m_nMinGPULevel` (integer)\n* `m_nMaxGPULevel` (integer)\n* `m_flUseLookAtAngle` (float)\n* `m_flLastMadeNoiseTime` (float)\n* `m_flMaxFallVelocity` (float)\n* `m_bEligibleForScreenHighlight` (integer)\n* `m_nForceBone` (integer)\n* `m_vecForce` (vector)\n* `m_nSkin` (integer)\n* `m_nBody` (integer)\n* `m_nHitboxSet` (integer)\n* `m_flModelScale` (float)\n* `m_flPoseParameter` (float[0-23])\n* `m_nSequence` (integer)\n* `m_flPlaybackRate` (float)\n* `m_flEncodedController` (float[0-3])\n* `m_bClientSideAnimation` (integer)\n* `m_bClientSideFrameReset` (integer)\n* `m_bClientSideRagdoll` (integer)\n* `m_nNewSequenceParity` (integer)\n* `m_nResetEventsParity` (integer)\n* `m_nMuzzleFlashParity` (integer)\n* `m_hLightingOrigin` (integer)\n* `m_flCycle` (float)\n* `m_flFrozen` (float)\n* `m_ScaleType` (integer)\n* `m_bSuppressAnimSounds` (integer)\n* `m_nHighlightColorR` (integer)\n* `m_nHighlightColorG` (integer)\n* `m_nHighlightColorB` (integer)\n* `lengthprop15` (integer)\n* `m_flexWeight` (float[0-95])\n* `m_blinktoggle` (integer)\n* `m_viewtarget` (vector)\n* `m_hOuter` (integer)\n* `m_ProviderType` (integer)\n* `m_iReapplyProvisionParity` (integer)\n* `m_iItemDefinitionIndex` (integer)\n* `m_iEntityLevel` (integer)\n* `m_iItemIDHigh` (integer)\n* `m_iItemIDLow` (integer)\n* `m_iAccountID` (integer)\n* `m_iEntityQuality` (integer)\n* `m_bInitialized` (integer)\n* `m_szCustomName` (string)\n* `lengthprop32` (integer)\n* `m_iPrimaryAmmoType` (integer)\n* `m_iSecondaryAmmoType` (integer)\n* `m_nViewModelIndex` (integer)\n* `m_bFlipViewModel` (integer)\n* `m_iWeaponOrigin` (integer)\n* `m_iWeaponModule` (integer)\n* `m_flNextPrimaryAttack` (float)\n* `m_flNextSecondaryAttack` (float)\n* `m_nNextThinkTick` (integer)\n* `m_flTimeWeaponIdle` (float)\n* `m_iViewModelIndex` (integer)\n* `m_iWorldModelIndex` (integer)\n* `m_iWorldDroppedModelIndex` (integer)\n* `m_iState` (integer)\n* `m_hOwner` (integer)\n* `m_iClip1` (integer)\n* `m_iClip2` (integer)\n* `m_iPrimaryReserveAmmoCount` (integer)\n* `m_iSecondaryReserveAmmoCount` (integer)\n* `m_hWeaponWorldModel` (integer)\n* `m_iNumEmptyAttacks` (integer)\n* `m_weaponMode` (integer)\n* `m_fAccuracyPenalty` (float)\n* `m_fLastShotTime` (float)\n* `m_flRecoilIndex` (float)\n* `m_flAnimTime` (integer)\n* `m_nSequence` (integer)\n* `m_hPrevOwner` (integer)\n* `m_bBurstMode` (integer)\n* `m_flPostponeFireReadyTime` (float)\n* `m_bReloadVisuallyComplete` (integer)\n* `m_bSilencerOn` (integer)\n* `m_flDoneSwitchingSilencer` (float)\n* `m_iOriginalTeamNumber` (integer)\n* `m_iIronSightMode` (integer)\n* `m_zoomLevel` (integer)\n* `m_iBurstShotsRemaining` (integer)\n```\n\n----------------------------------------\n\nTITLE: Setting Number Precision for JSON Encoding (Lua)\nDESCRIPTION: Function to set or get the number of significant digits used when encoding numbers in JSON. It takes an optional number argument and returns the current precision setting.\nSOURCE: https://github.com/gamesensical/docs/blob/master/build/gitbook/globals/json.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\njson.encode_number_precision([precision: number]): number\n```"
  }
]