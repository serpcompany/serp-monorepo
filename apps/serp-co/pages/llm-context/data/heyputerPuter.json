[
  {
    "owner": "heyputer",
    "repo": "puter",
    "content": "TITLE: Writing JSDoc Comments for JavaScript Functions\nDESCRIPTION: This snippet demonstrates how to write JSDoc comments for functions in the Puter project. It includes examples for documenting classes, methods, parameters, return values, and potential exceptions.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/coding-style.md#2025-04-06_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @class UserService\n * @description Service for managing user operations\n */\n\n/**\n * Get a user by their ID\n * @param {string} id - The user ID\n * @returns {Promise<Object>} The user object\n * @throws {Error} If user not found\n */\nasync function getUserById(id) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Document with AWS Textract (JavaScript)\nDESCRIPTION: This method analyzes a document using AWS Textract to extract text and layout information. It's part of the AWSTextractService class which provides OCR functionality.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/README.md#2025-04-06_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nanalyze_document(file_facade) {\n    // Analyzes a document using AWS Textract to extract text and layout information\n\n    // Parameters:\n    // - file_facade: Interface to access the document file\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Puter.js SDK and Using AI Chat in HTML\nDESCRIPTION: This snippet demonstrates how to include the Puter.js SDK in an HTML file and use it to interact with the GPT-3.5 Turbo AI model. It shows the loading of the SDK, displaying a loading message, and making an AI chat request.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/puter-js/README.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n    <script src=\"http://puter.localhost:4100/sdk/puter.dev.js\"></script>\n    <script>\n        // Loading ...\n        puter.print(`Loading...`);\n\n        // Chat with GPT-3.5 Turbo\n        puter.ai.chat(`What color was Napoleon's white horse?`).then((response) => {\n            puter.print(response);\n        });\n    </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Completing Chat Conversation with OpenAI (JavaScript)\nDESCRIPTION: This method completes a chat conversation using OpenAI's API. It handles streaming, moderation, and model selection options.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/README.md#2025-04-06_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ncomplete(messages, options) {\n    // Completes a chat conversation using OpenAI's API\n\n    // Parameters:\n    // - messages: Array of message objects or strings representing the conversation\n    // - options: Configuration options\n    // - options.stream: Whether to stream the response\n    // - options.moderation: Whether to perform content moderation\n    // - options.model: The model to use for completion\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Fallback Model for Chat Completion (JavaScript)\nDESCRIPTION: This method finds an appropriate fallback model by sorting the list of models by the Euclidean distance of input/output prices and selecting the first one not in the tried list.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/README.md#2025-04-06_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nget_fallback_model(param0) {\n    // Find an appropriate fallback model by sorting the list of models\n    // by the euclidean distance of the input/output prices and selecting\n    // the first one that is not in the tried list.\n\n    // Parameters:\n    // - param0: null\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Content Moderation with OpenAI (JavaScript)\nDESCRIPTION: This method checks text content against OpenAI's moderation API for inappropriate content. It's part of the OpenAICompletionService class.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/README.md#2025-04-06_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncheck_moderation(text) {\n    // Checks text content against OpenAI's moderation API for inappropriate content\n\n    // Parameters:\n    // - text: The text content to check for moderation\n}\n```\n\n----------------------------------------\n\nTITLE: Describing AWS Polly Voices (JavaScript)\nDESCRIPTION: This method describes available AWS Polly voices and caches the results. It's part of the AWSPollyService class which provides text-to-speech functionality using Amazon Polly.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/README.md#2025-04-06_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe_voices() {\n    // Describes available AWS Polly voices and caches the results\n}\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Speech with AWS Polly (JavaScript)\nDESCRIPTION: This method synthesizes speech from text using AWS Polly. It takes the text to synthesize and options including output format as parameters.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/README.md#2025-04-06_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsynthesize_speech(text, options) {\n    // Synthesizes speech from text using AWS Polly\n\n    // Parameters:\n    // - text: The text to synthesize\n    // - options: Synthesis options\n    // - options.format: Output audio format (e.g. 'mp3')\n}\n```\n\n----------------------------------------\n\nTITLE: Moderating Chat Messages with OpenAI (JavaScript)\nDESCRIPTION: This method moderates chat messages for inappropriate content using OpenAI's moderation service. It takes an array of chat messages as input and returns the moderation result.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/README.md#2025-04-06_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmoderate(params) {\n    // Moderates chat messages for inappropriate content using OpenAI's moderation service\n\n    // Parameters:\n    // - params: The parameters object\n    // - params.messages: Array of chat messages to moderate\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tool Functions with AI in Puter\nDESCRIPTION: Example of using tool functions with AI, specifically a weather retrieval function. It defines a 'get_weather' function that accepts a location parameter.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/doc/api_examples.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait puter.ai.chat('What\\'s the weather like in Vancouver?', {\n    tools: [\n        {\n            type: 'function',\n            'function': {\n                name: 'get_weather',\n                description: 'A string describing the weather',\n                parameters: {\n                    type: 'object',\n                    properties: {\n                        location: {\n                            type: 'string',\n                            description: 'city',\n                        },\n                    },\n                    required: ['location'],\n                    additionalProperties: false,\n                },\n                strict: true\n            },\n        }\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Claude AI with Streaming in Puter\nDESCRIPTION: Example of using Claude AI model with streaming enabled. It sets up a weather tool function and processes the streamed response using an async generator.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/doc/api_examples.md#2025-04-06_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngen = await puter.ai.chat('What\\'s the weather like in Vancouver?', {\n    model: 'claude',\n    stream: true,\n    tools: [\n        {\n            type: 'function',\n            'function': {\n                name: 'get_weather',\n                description: 'A string describing the weather',\n                parameters: {\n                    type: 'object',\n                    properties: {\n                        location: {\n                            type: 'string',\n                            description: 'city',\n                        },\n                    },\n                    required: ['location'],\n                    additionalProperties: false,\n                },\n                strict: true\n            },\n        }\n    ]\n})\nfor await ( const thing of gen ) { console.log('thing', thing) }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Puter Service in JavaScript\nDESCRIPTION: Template for implementing a custom Puter service by extending BaseService. This example shows the lifecycle methods (_construct and _init), event handlers for the service bus, and how to interact with other services through dependency injection.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/modules.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyService extends BaseService {\n    static MODULES = {\n        // Use node's `require` function to populate this object;\n        // this makes these available to `this.require` and offers\n        // dependency-injection for unit testing.\n        ['some-module']: require('some-module')\n    }\n\n    // Do not override the constructor of BaseService - use this instead!\n    async _construct () {\n        this.my_list = [];\n    }\n\n    // This method is called after _construct has been called on all\n    // other services.\n    async _init () {\n        const services = this.services;\n\n        // We can get the instances of other services here\n        const svc_otherService = services.get('other-service');\n    }\n\n    // The service container can listen on the \"service event bus\"\n    async ['__on_boot.consolidation'] () {}\n    async ['__on_boot.activation'] () {}\n    async ['__on_start.webserver'] () {}\n    async ['__on_install.routes'] () {}\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Tool Responses in Puter AI Chat\nDESCRIPTION: Example showing a complete conversation flow with tool responses. It includes the assistant's tool call request for weather information and the tool's response providing weather data for Vancouver.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/doc/api_examples.md#2025-04-06_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait puter.ai.chat([\n    { content: `What's the weather like in Vancouver?` },\n    {\n            \"role\": \"assistant\",\n            \"content\": null,\n            \"tool_calls\": [\n                {\n                    \"id\": \"call_vcfEOmDczXq7KGMirPGGiNEe\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_weather\",\n                        \"arguments\": \"{\\\"location\\\":\\\"Vancouver\\\"}\"\n                    }\n                }\n            ],\n            \"refusal\": null\n    },\n    {\n        role: 'tool',\n        tool_call_id: 'call_vcfEOmDczXq7KGMirPGGiNEe',\n        content: 'Sunny with a chance of rain'\n    },\n], {\n    tools: [\n        {\n            type: 'function',\n            'function': {\n                name: 'get_weather',\n                description: 'A string describing the weather',\n                parameters: {\n                    type: 'object',\n                    properties: {\n                        location: {\n                            type: 'string',\n                            description: 'city',\n                        },\n                    },\n                    required: ['location'],\n                    additionalProperties: false,\n                },\n                strict: true\n            },\n        }\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Puter Module in JavaScript\nDESCRIPTION: Example showing how to create a custom Puter module by extending AdvancedBase and implementing the install method. The module registers a custom service with the service container, providing options for configuration.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/modules.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPuterModule extends AdvancedBase {\n    async install (context) {\n        const services = context.get('services');\n\n        const MyService = require('./path/to/MyService.js');\n        services.registerService('my-service', MyService, {\n            some_options: 'for-my-service',\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Tool Use with Claude AI in Streaming Mode\nDESCRIPTION: Complete example of responding to a tool use request with Claude AI in streaming mode. Shows the full conversation flow including tool result handling and response processing with an async generator.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/doc/api_examples.md#2025-04-06_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngen = await puter.ai.chat([\n    { role: 'user', content: `What's the weather like in Vancouver?` },\n    {\n            \"role\": \"assistant\",\n            \"content\": [\n                { type: 'text', text: \"I'll check the weather in Vancouver for you.\" },\n                { type: 'tool_use', name: 'get_weather', id: 'toolu_01Y4naZhXygjUVRjGBvrL9z8', input: { location: 'Vancouver' } },\n            ]\n    },\n    {\n        role: 'user',\n        content: [\n            {\n                type: 'tool_result',\n                tool_use_id: 'toolu_01Y4naZhXygjUVRjGBvrL9z8',\n                content: 'Sunny with a chance of rain'\n            }\n        ]\n    },\n], {\n    model: 'claude',\n    stream: true,\n    tools: [\n        {\n            type: 'function',\n            'function': {\n                name: 'get_weather',\n                description: 'A string describing the weather',\n                parameters: {\n                    type: 'object',\n                    properties: {\n                        location: {\n                            type: 'string',\n                            description: 'city',\n                        },\n                    },\n                    required: ['location'],\n                    additionalProperties: false,\n                },\n                strict: true\n            },\n        }\n    ]\n})\nfor await ( const item of gen ) { console.log(item) }\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Puter Extension in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a simple Puter extension that responds to a GET request. It shows how to handle different actor types and customize the response based on the user or app making the request.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { UserActorType, AppUnderUserActorType } = use.core;\n\nextension.get('/hello-puter', (req, res) => {\n    const actor = req.actor;\n    let who = 'unknown';\n    if ( actor.type instanceof UserActorType ) {\n        who = actor.type.user.username;\n    }\n    if ( actor.type instanceof AppUnderUserActorType ) {\n        who = actor.type.app.name + ' on behalf of ' + actor.type.user.username;\n    }\n    res.send(`Hello, ${who}!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI for Image Generation in Puter\nDESCRIPTION: API request to OpenAI for generating an image. It creates an image based on the prompt 'photorealistic teapot made of swiss cheese' and converts the response to a blob URL.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/doc/api_examples.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nURL.createObjectURL(await (await fetch(\"http://api.puter.localhost:4100/drivers/call\", {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      interface: 'puter-image-generation',\n      driver: 'openai-image-generation',\n      method: 'generate',\n      args: {\n        prompt: 'photorealistic teapot made of swiss cheese',\n      }\n  }),\n  \"method\": \"POST\",\n})).blob());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Naming Conventions in JavaScript\nDESCRIPTION: This snippet illustrates the naming conventions for variables in the Puter project. It shows the use of camelCase and prefixes for specific types of variables, such as service references.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/coding-style.md#2025-04-06_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst svc_systemData = this.services.get('system-data');\nconst svc_su = this.services.get('su');\neffective_policy = await svc_su.sudo(async () => {\n    return await svc_systemData.interpret(effective_policy.data);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Initialization in JavaScript\nDESCRIPTION: This code adds an _init method to the PrankGreetService class. It demonstrates how to use logging and asynchronous operations in a service initialization.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/howto_make_driver.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass PrankGreetService extends BaseService {\n    async _init () {\n        // Wait for 5 seconds\n        await new Promise(rslv => setTimeout(rslv), 5000);\n\n        // Display a log message\n        this.log.noticeme('Hello from PrankGreetService!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Copyright Notice in JavaScript Files\nDESCRIPTION: This snippet shows the standard copyright notice that should be included at the beginning of all files in the Puter project. It includes licensing information and copyright details.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/coding-style.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n * Copyright (C) 2025-present Puter Technologies Inc.\n *\n * This file is part of Puter.\n *\n * Puter is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Hello World Driver Interface in JavaScript\nDESCRIPTION: This snippet shows the structure of the 'hello-world' driver interface definition. It specifies the interface description, methods, parameters, and result type.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/howto_make_driver.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'hello-world': {\n    description: 'A simple driver that returns a greeting.',\n    methods: {\n        greet: {\n            description: 'Returns a greeting.',\n            parameters: {\n                subject: {\n                    type: 'string',\n                    optional: true,\n                },\n            },\n            result: { type: 'string' },\n        }\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Sharing Files and Apps API Request in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to make a POST request to the '/share' endpoint using fetch. It includes setting the proper Authorization header with a bearer token and sending the share request payload in JSON format.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(\"http://puter.localhost:4100/share\", {\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  body: JSON.stringify({\n    recipients: [\n        \"user_that_gets_shared_to\",\n        \"another@example.com\"\n    ],\n    shares: [\n        {\n            $: \"app-share\",\n            name: \"some-app-name\"\n        },\n        {\n            $: \"app-share\",\n            uid: \"app-SOME-APP-UID\"\n        },\n        {\n            $: \"fs-share\",\n            path: \"/some/file/or/directory\"\n        },\n        {\n            $: \"fs-share\",\n            path: \"SOME-FILE-UUID\"\n        }\n    ]\n  }),\n  method: \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Wisp Packet Processing with v86 in JavaScript\nDESCRIPTION: A comprehensive example demonstrating how to use the Wisp utilities with the v86 emulator. It sets up byte streams, Virtio frame streams, and Wisp packet streams, and processes packets asynchronously.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/puter-wisp/README.md#2025-04-06_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst emulator = new V86(...);\n\n// Get a byte stream for /dev/hvc0\nconst byteStream = NewCallbackByteStream();\nemulator.add_listener('virtio-console0-output-bytes',\n    byteStream.listener);\n\n// Get a stream of frames with prepended byte lengths\n// (for example, `twisp` uses this format)\nconst virtioStream = NewVirtioFrameStream(byteStream);\n\n// Get a stream of WispPacket objects\nconst wispStream = NewWispPacketStream(virtioStream);\n\n// Async iterator\n(async () => {\n    for ( const packet of wispStream ) {\n        console.log('Wisp packet!', packet.describe());\n        \n        // Let's send back a reflected packet for INFO!\n        if ( packet.type === WispPacket.INFO ) {\n            emulator.bus.send(\n                'virtio-console0-input-bytes',\n                packet.toVirtioFrame(),\n            );\n        }\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Adding Users to a Group in JavaScript\nDESCRIPTION: This code demonstrates how to add users to an existing group using a POST request to the '/group/add-users' endpoint. It requires the group's UID and an array of usernames to be added.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/group.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(`${window.api_origin}/group/add-users`, {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      uid: '9c644a1c-3e43-4df4-ab67-de5b68b235b6',\n      users: ['first_user', 'second_user'],\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Group with Metadata in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a group using a POST request to the '/group/create' endpoint. It includes setting metadata for the group and handles authentication using a bearer token.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/group.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(`${window.api_origin}/group/create`, {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n    metadata: { title: 'Some Title' }\n  }),\n  \"method\": \"POST\",\n});\n\n// { uid: '9c644a1c-3e43-4df4-ab67-de5b68b235b6' }\n```\n\n----------------------------------------\n\nTITLE: Client-Side Integration with Captcha Middleware\nDESCRIPTION: Provides an example of client-side JavaScript code to integrate with the captcha middleware. It checks if captcha is required, fetches and displays the captcha, and submits the form with captcha data if necessary.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/captcha/middleware/README.md#2025-04-06_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function submitWithCaptcha(formData) {\n  // Check if captcha is required\n  const envInfo = await fetch('/api/whoarewe').then(r => r.json());\n  \n  if (envInfo.captchaRequired?.login) {\n    // Get and display captcha to user\n    const captcha = await getCaptchaFromServer();\n    showCaptchaToUser(captcha);\n    \n    // Add captcha token and answer to the form data\n    formData.captchaToken = captcha.token;\n    formData.captchaAnswer = await getUserCaptchaAnswer();\n  }\n  \n  // Submit the form\n  const response = await fetch('/api/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formData)\n  });\n  \n  // Handle response\n  const data = await response.json();\n  if (response.status === 400 && data.error === 'captcha_required') {\n    // Show captcha to the user if not already shown\n    showCaptcha();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Group Permission in JavaScript\nDESCRIPTION: This snippet shows how to revoke a previously granted permission from a group using a POST request to the '/auth/grant-user-group' endpoint. It requires the group's UID and the permission string to be revoked.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/group.md#2025-04-06_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(\"http://puter.localhost:4100/auth/grant-user-group\", {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      group_uid: '9c644a1c-3e43-4df4-ab67-de5b68b235b6',\n      permission: 'fs:/someuser/somedir/somefile:read'\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Captcha Service in JavaScript\nDESCRIPTION: Examples of generating and verifying captchas using the CaptchaService methods. Shows how to generate a captcha which returns a token and image, and how to verify a captcha by checking a user's answer against a token.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/captcha/README.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Generate a captcha\nconst captcha = captchaService.generateCaptcha();\n// captcha.token - The token to verify later\n// captcha.image - SVG image data to display to the user\n\n// Verify a captcha\nconst isValid = captchaService.verifyCaptcha(token, userAnswer);\n```\n\n----------------------------------------\n\nTITLE: Checking Sharelink Token in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to verify a share link token by making a POST request to the '/sharelink/check' endpoint. It requires the token from a query string parameter and returns information about the share if valid.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(`${config.api_origin}/sharelink/check`, {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      token: '...',\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Operations in Puter Filesystem API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the '/batch' endpoint to perform multiple filesystem operations in a single request. It includes creating a directory and writing a file. The code uses FormData to construct the request body, including file metadata and content.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/features/batch-and-symlinks.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait (async () => {\n    const endpoint = 'http://api.puter.localhost:4100/batch';\n\n    const ops = [ \n      {\n        op: 'mkdir',\n        path: '/default_user/Desktop/some-dir',\n      },\n      {\n        op: 'write',\n        path: '/default_user/Desktop/some-file.txt',\n      }\n    ];\n\n    const blob = new Blob([\"12345678\"], { type: 'text/plain' });\n    const formData = new FormData();\n    for ( const op of ops ) {\n      formData.append('operation', JSON.stringify(op));\n    }\n    formData.append('fileinfo', JSON.stringify({\n        name: 'file.txt',\n        size: 8,\n        mime: 'text/plain',\n    }));\n    formData.append('file', blob, 'hello.txt');\n\n    const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: { 'Authorization': `Bearer ${puter.authToken}` },\n        body: formData\n    });\n    return await response.json();\n})();\n```\n\n----------------------------------------\n\nTITLE: Requesting Sharelink Permissions in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to request permissions associated with a share link by making a POST request to the '/sharelink/request' endpoint. This is used when a logged-in user's email doesn't match the share's target email.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(`${config.api_origin}/sharelink/request`, {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      uid: '836671d4-ac5d-4bd3-bc0a-ec357e0d8f02',\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Processing Images with Puter API Using FormData\nDESCRIPTION: This code demonstrates a more structured approach to handling image operations with Puter's API. It fetches an image, creates a FormData object to handle the binary data properly, and sends it back to the API for echoing. The snippet also contains utility functions for appending different types of data to FormData.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/test-drivers/doc/requests.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait(async () => {\n\n    blob = await (await fetch(\"http://api.puter.localhost:4100/drivers/call\", {\n        \"headers\": {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${puter.authToken}`,\n        },\n        \"body\": JSON.stringify({\n            interface: 'test-image',\n            method: 'get_image',\n            args: {\n                source_type: 'string:url:web'\n            }\n        }),\n        \"method\": \"POST\",\n    })).blob();\n\n    const endpoint = 'http://api.puter.localhost:4100/drivers/call';\n\n    const body = {\n        object: {\n            interface: 'test-image',\n            method: 'echo_image',\n            ['args.source']: {\n                $: 'file',\n                size: blob.size,\n                type: blob.type,\n            },\n        },\n        file: [\n            blob,\n        ]\n    };\n\n    const formData = new FormData();\n    for ( const k in body ) {\n        console.log('k', k);\n        const append = v => {\n            if ( v instanceof Blob ) {\n                formData.append(k, v, 'filename');\n            } else {\n                formData.append(k, JSON.stringify(v));\n            }\n        };\n        if ( Array.isArray(body[k]) ) {\n            for ( const v of body[k] ) append(v);\n        } else {\n            append(body[k]);\n        }\n    }\n    const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: { 'Authorization': `Bearer ${puter.authToken}` },\n        body: formData\n    });\n    const echo_blob = await response.blob();\n    const echo_url = URL.createObjectURL(echo_blob);\n    return echo_url;\n})();\n```\n\n----------------------------------------\n\nTITLE: Fetching and Processing Images with Puter API Using Data URL Conversion\nDESCRIPTION: This code fetches an image from Puter's API, converts it to a data URL using FileReader, and then sends it back to the API for echoing. It uses direct JSON payload for the API requests and handles the blob conversions.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/test-drivers/doc/requests.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nblob = await (await fetch(\"http://api.puter.localhost:4100/drivers/call\", {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      interface: 'test-image',\n      method: 'get_image',\n      args: {\n          source_type: 'string:url:web'\n      }\n  }),\n  \"method\": \"POST\",\n})).blob();\ndataurl = await new Promise((y, n) => {\n    a = new FileReader();\n    a.onload = _ => y(a.result);\n    a.onerror = _ => n(a.error);\n    a.readAsDataURL(blob)\n});\nURL.createObjectURL(await (await fetch(\"http://api.puter.localhost:4100/drivers/call\", {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      interface: 'test-image',\n      method: 'echo_image',\n      args: {\n          source: dataurl,\n      }\n  }),\n  \"method\": \"POST\",\n})).blob());\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks Using Batch Operations in Puter Filesystem API (JavaScript)\nDESCRIPTION: This snippet shows how to create symlinks using the '/batch' endpoint in Puter's filesystem API. It demonstrates constructing a symlink operation and sending it as part of a batch request using FormData.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/features/batch-and-symlinks.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait (async () => {\n    const endpoint = 'http://api.puter.localhost:4100/batch';\n\n    const ops = [ \n      {\n        op: 'symlink',\n        path: '~/Desktop',\n        name: 'link',\n        target: '/bb/Desktop/some'\n      },\n    ];\n\n    const formData = new FormData();\n    for ( const op of ops ) {\n      formData.append('operation', JSON.stringify(op));\n    }\n\n    const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: { 'Authorization': `Bearer ${puter.authToken}` },\n        body: formData\n    });\n    return await response.json();\n})();\n```\n\n----------------------------------------\n\nTITLE: App UID Permission Format\nDESCRIPTION: UUID-based permission format for protected app access and metadata visibility.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/lists-of-things/list-of-permissions.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\napp:uid#<UUID-OF-APP>:access\n```\n\n----------------------------------------\n\nTITLE: Finding Git Repository Root in JavaScript\nDESCRIPTION: This code snippet shows how to locate the git repository root directory using a custom function. It returns both the working directory and the git directory, which can be used with isomorphic-git methods.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/git/README.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dir, gitdir } = await find_repo_root(fs, env.PWD);\n```\n\n----------------------------------------\n\nTITLE: Testing MailHog with Nodemailer\nDESCRIPTION: JavaScript example showing how to configure and use Nodemailer to send test emails through MailHog SMTP server.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/email_testing.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport nodemailer from \"nodemailer\";\n\n// Configure transporter to use MailHog\nconst transporter = nodemailer.createTransport({\n    host: \"localhost\", // MailHog SMTP server address\n    port: 1025,        // Default MailHog SMTP port\n    secure: false      // No SSL/TLS required for MailHog\n});\n\n// Define a test email\nconst mailOptions = {\n    from: \"no-reply@example.com\",\n    to: \"test@example.com\",\n    subject: \"Hello from Nodemailer!\",\n    text: \"This is a test email sent using Nodemailer.\"\n};\n\n// Send the test email\ntransporter.sendMail(mailOptions)\n    .then(info => console.log(\"Email sent:\", info.response))\n    .catch(error => console.error(\"Error:\", error));\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Context Objects in JavaScript\nDESCRIPTION: Demonstrates how to create and use Context objects, including creating sub-contexts and accessing values across contexts. This is useful for maintaining contextual data in both Node.js and browser environments.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/putility/README.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctx = new Context({\n  some_key: 'some value',\n});\n\nctx.some_key; // works just like a regular object\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = new Context({\n  some_key: 'some value'\n});\nconst b = a.sub({\n  another_key: 'another value'\n});\n\nb.another_key; // \"another value\"\nb.some_key; // \"some value\"\n\na.some_key = 'changed';\nb.some_key; // \"changed\"\n```\n\n----------------------------------------\n\nTITLE: Creating a div element using DOM API in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a div element with a class and text content using the standard DOM API. It serves as a comparison point for the el() function.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/gui/doc/el().md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst my_div = document.createElement('div');\nmy_div.classList.add('my-class');\nmy_div.innerText = 'some text';\n```\n\n----------------------------------------\n\nTITLE: Using el() with a parent element in JavaScript\nDESCRIPTION: This snippet shows how to use el() with a parent element. When a DOM element is passed as the first argument, el() will append the new element to it.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/gui/doc/el().md#2025-04-06_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nel(some_parent_el, 'h1', 'Hello!');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code Formatting in JavaScript\nDESCRIPTION: This snippet illustrates the proper indentation, spacing, and formatting rules for JavaScript code in the Puter project. It covers function declarations, loops, control structures, and function calls.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/coding-style.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fn = async () => {\n    const a = 5; // Spaces between operators\n\n    // Note: \"=\" in for loop initializer does not require space around\n    // Note: operators in condition part have space around\n    for ( let i=0; i < 10; i++ ) {\n        console.log('hello');\n    }\n    \n    // Control structures have space inside parenthesis\n    for ( const thing of stuff ) {\n        // NOOP\n    }\n    \n    // Function calls do not have space inside parenthesis\n    await something(1, 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Service Script Structure\nDESCRIPTION: This snippet shows the basic structure of a service script. It demonstrates how to use the service_script function to access the API and register a callback for when the GUI is ready.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/features/service-scripts.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport SomeModule from \"./SomeModule.js\";\n\nservice_script(api => {\n    api.on_ready(() => {\n        // This callback is invoked when the GUI is ready\n\n        // We can use api.get() to import anything exposed to\n        // service scripts by Puter's GUI; for example:\n        const Button = api.use('ui.components.Button');\n        // ^ Here we get Puter's Button component, which is made\n        // available to service scripts.\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Default Configuration for Puter Server in JSON\nDESCRIPTION: This snippet shows a sample of the default configuration generated by Puter. It includes various settings such as environment, server ID, domain, and service configurations for database, thumbnails, and file cache.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/config.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config_name\": \"generated default config\",\n    \"mod_directories\": [\n        \"{source}/../extensions\"\n    ],\n    \"env\": \"dev\",\n    \"nginx_mode\": true,\n    \"server_id\": \"localhost\",\n    \"http_port\": \"auto\",\n    \"domain\": \"puter.localhost\",\n    \"protocol\": \"http\",\n    \"contact_email\": \"hey@example.com\",\n    \"services\": {\n        \"database\": {\n            \"engine\": \"sqlite\",\n            \"path\": \"puter-database.sqlite\"\n        },\n        \"thumbnails\": {\n            \"engine\": \"http\"\n        },\n        \"file-cache\": {\n            \"disk_limit\": 5368709120,\n            \"disk_max_size\": 204800,\n            \"precache_size\": 209715200,\n            \"path\": \"./file-cache\"\n        }\n    },\n    \"cookie_name\": \"...\",\n    \"jwt_secret\": \"...\",\n    \"url_signature_secret\": \"...\",\n    \"private_uid_secret\": \"...\",\n    \"private_uid_namespace\": \"...\",\n    \"\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Settings Tab\nDESCRIPTION: This snippet demonstrates how to add a custom settings tab using a service script. It shows the process of registering the tab with the settings service and importing necessary components.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/features/service-scripts.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport MySettingsTab from \"./MySettingsTab.js\";\n\nglobalThis.service_script(api => {\n    api.on_ready(() => {\n        const svc_settings = globalThis.services.get('settings');\n        svc_settings.register_tab(MySettingsTab(api));\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Keyboard Modifiers to XTerm Encodings in JavaScript\nDESCRIPTION: Script that generates a mapping between xterm modifier encodings and bitwise flags. Creates constants for shift, ctrl, alt, and meta keys, then builds a comprehensive mapping table for all possible combinations. Includes debugging output to verify mappings.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/phoenix/doc/graveyard/keyboard_modifiers.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst modifier_keys = ['shift', 'ctrl', 'alt', 'meta'];\nconst MODIFIER = {};\nfor ( let i=0 ; i < modifier_keys.length ; i++ ) {\n    MODIFIER[modifier_keys[i].toUpperCase()] = 1 << i;\n}\n\nconst pc_modifier_list = [\n    MODIFIER.SHIFT,\n    MODIFIER.ALT,\n    MODIFIER.CTRL,\n    MODIFIER.META\n];\n\nconst PC_STYLE_MODIFIER_MAP = {};\n\n(() => {\n    let i = 2;\n    for ( const mod of pc_modifier_list ) {\n        const new_entries = { [i++]: mod };\n        for ( const key in PC_STYLE_MODIFIER_MAP ) {\n            new_entries[i++] = mod | PC_STYLE_MODIFIER_MAP[key];\n        }\n        for ( const key in new_entries ) {\n            PC_STYLE_MODIFIER_MAP[key] = new_entries[key];\n        }\n    }\n})();\n\nfor ( const k in PC_STYLE_MODIFIER_MAP ) {\n    console.log(`${k} :: ${print(PC_STYLE_MODIFIER_MAP[k])}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Settings Tab Component\nDESCRIPTION: This snippet shows the implementation of a custom settings tab component. It demonstrates how to structure the tab object, import necessary UI components, and create a layout for the settings tab.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/features/service-scripts.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyWindow from \"./MyWindow.js\";\n\nexport default api => ({\n    id: 'my-settings-tab',\n    title_i18n_key: 'My Settings Tab',\n    icon: 'shield.svg',\n    factory: () => {\n        const NotifCard = api.use('ui.component.NotifCard');\n        const ActionCard = api.use('ui.component.ActionCard');\n        const JustHTML = api.use('ui.component.JustHTML');\n        const Flexer = api.use('ui.component.Flexer');\n        const UIAlert = api.use('ui.window.UIAlert');\n\n        // The root component for our settings tab will be a \"flexer\",\n        // which by default displays its child components in a vertical\n        // layout.\n        const component = new Flexer({\n            children: [\n                // We can insert raw HTML as a component\n                new JustHTML({\n                    no_shadow: true, // use CSS for settings window\n                    html: '<h1>Some Heading</h1>',\n                }),\n                new NotifCard({\n                    text: 'I am a card with some text',\n                    style: 'settings-card-success',\n                }),\n                new ActionCard({\n                    title: 'Open an Alert',\n                    button_text: 'Click Me',\n                    on_click: async () => {\n                        // Here we open an example window\n                        await UIAlert({\n                            message: 'Hello, Puter!',\n                        });\n                    }\n                })\n            ]\n        });\n\n        return component;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Extension and Use Scope in JavaScript\nDESCRIPTION: This snippet explains how to properly scope the 'extension' and 'use' globals within callbacks. It demonstrates binding 'extension' to a variable to access it within event listeners.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/README.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ext = extension;\nextension.on('some-event', () => {\n    // This would throw an error\n    // extension.something();\n\n    // This works\n    ext.example();\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Readline Method in JavaScript\nDESCRIPTION: An asynchronous readline implementation that reads input until encountering a line feed character. The method handles input in chunks, supports optional stream output, and uses TypedArrays for efficient byte manipulation. It's optimized for scenarios like password input and benchmarking where character-by-character processing isn't required.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/phoenix/doc/graveyard/readline.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    async readLine (options) {\n        options = options ?? {};\n\n        let stringSoFar = '';\n\n        let lineFeedFound = false;\n        while ( ! lineFeedFound ) {\n            let chunk = await this.getChunk_();\n\n            const iLF = chunk.indexOf(CHAR_LF);\n\n            // do we have a line feed character?\n            if ( iLF >= 0 ) {\n                lineFeedFound = true;\n\n                // defer the rest of the chunk until next read\n                if ( iLF !== chunk.length - 1 ) {\n                    this.chunks_.push(chunk.subarray(iLF + 1))\n                }\n\n                // (note): LF is not included in return value or next read\n                chunk = chunk.subarray(0, iLF);\n            }\n\n            if ( options.stream ) {\n                options.stream.write(chunk);\n                if ( lineFeedFound ) {\n                    options.stream.write(new Uint8Array([CHAR_LF]));\n                }\n            }\n\n            const text = new TextDecoder().decode(chunk);\n            stringSoFar += text;\n        }\n\n        return stringSoFar;\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Database in Puter Extensions with JavaScript\nDESCRIPTION: This snippet shows how to use the database access object provided by the extension. It demonstrates reading from the database using a prepared statement and explains the available database access methods.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/README.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ext = extension;\n\nextension.get('/user-count', { noauth: true }, (req, res) => {\n    const [count] = await ext.db.read(\n        'SELECT COUNT(*) as c FROM `user`'\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Experimenting with Webpack Plugin Hooks for Icon Injection in JavaScript\nDESCRIPTION: This code snippet showcases various commented-out attempts to inject icons into a Webpack bundle using different Webpack plugin hooks and techniques. It includes methods like processing assets, adding virtual modules, and modifying entry points. None of these attempts were successful, and the developer opted for a different approach.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/gui/doc/webpack_attempts.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    // compilation.hooks.processAssets.tap(\n    //     {\n    //         name: 'AddImportPlugin',\n    //         stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS,\n    //     },\n    //     (assets) => {\n    //         for (const assetName of Object.keys(assets)) {\n    //             if (assetName.endsWith('.js')) {\n    //                 const source = assets[assetName].source();\n    //                 const newSource = `${icons}\\n${source}`;\n    //                 compilation.updateAsset(assetName, new compiler.webpack.sources.RawSource(newSource));\n    //             }\n    //         }\n    //     }\n    // );\n\n    // Inject into bundle\n    // console.log('adding this:' + icons);\n    // compilation.assets['icons-thing'] = {\n    //     source: () => icons,\n    //     size: () => icons.length,\n    // };\n\n    // compilation.addModule({\n    //   identifier() {\n    //     return 'icons-thing';\n    //   },\n    //   build() {\n    //     this._source = {\n    //       source() {\n    //         return content;\n    //       },\n    //       size() {\n    //         return content.length;\n    //       }\n    //     };\n    //   }\n    // });\n\n\n    // Add the generated module to Webpack's internal modules\n    // compilation.hooks.optimizeModules.tap('IconsPlugin', (modules) => {\n    //     const virtualModule = {\n    //     identifier: () => 'icons.js',\n    //     readableIdentifier: () => 'icons.js',\n    //     build: () => {},\n    //     source: () => icons,\n    //     size: () => icons.length,\n    //     chunks: [],\n    //     assets: [],\n    //     hash: () => 'icons',\n    //     };\n\n    //     modules.push(virtualModule);\n    // });\n\n});\n// this.hooks.entryOption.tap('IconsPlugin', (context, entry) => {\n//     entry.main.import.push('icons-thing');\n// });\n// this.hooks.make.tapAsync('InjectTextEntryPlugin', (compilation, callback) => {\n//     // Create a new asset (fake module) from the generated content\n//     const content = `console.log('${this.options.text}');`;\n\n//     callback();\n// });\n// this.hooks.entryOption.tap('IconsPlugin', (context, entry) => {\n// });\n// this.hooks.entryOption.tap('InjectTextEntryPlugin', (context, entry) => {\n//     // Add this as an additional entry point\n//     this.options.entry = {\n//       ...this.options.entry,\n//       'generated-entry': '// FINDME\\n'\n//     };\n// });\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring a Puter Extension in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic Puter extension. It shows how to import definitions, register endpoints, handle different actor types, and listen to events for manipulating Puter's behavior.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/README.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// You can get definitions exposed by Puter via `use`\nconst { UserActorType, AppUnderUserActorType } = use.core;\n\n// Endpoints can be registered directly on an extension\nextension.get('/hello-puter', (req, res) => {\n    const actor = req.actor;\n    \n\n    // Make a string \"who\" which says:\n    //   \"<username>\", or:\n    //   \"<app> acting on behalf of <username>\"\n    let who = 'unknown';\n    if ( actor.type instanceof UserActorType ) {\n        who = actor.type.user.username;\n    }\n    if ( actor.type instanceof AppUnderUserActorType ) {\n        who = actor.type.app.name\n            + ' on behalf of '\n            + actor.type.user.username;\n    }\n\n    res.send(`Hello, ${who}!`);\n});\n\n// Extensions can listen to events and manipulate Puter's behavior\nextension.on('core.email.validate', event => {\n    if ( event.email.includes('evil') ) {\n        event.allow = false;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting elements with el() function in JavaScript\nDESCRIPTION: These snippets demonstrate how to nest elements using el(). The function accepts an array of elements as an argument, allowing for the construction of complex DOM structures.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/gui/doc/el().md#2025-04-06_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nel([ el(), el() ])\n// <div><div></div><div></div></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nel([\n  el(),\n  el()\n])\n```\n\n----------------------------------------\n\nTITLE: Using TeePromise for External Promise Resolution in JavaScript\nDESCRIPTION: Illustrates the use of TeePromise, a utility for working with promises that allows external resolution and rejection. This is particularly useful when using async/await syntax to avoid unnecessary callback handling.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/putility/README.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tp = new TeePromise();\n\nnew bb = Busboy({ /* ... */ });\n\n// imagine you have lots of code here, that you don't want to\n// indent in a `new Promise((resolve, reject) => { ...` block\n\nbb.on('error', err => {\n  tp.reject(err);\n});\nbb.on('close', () => {\n  tp.resolve();\n})\n\nreturn {\n  // Imagine you have other values here that don't require waiting\n  // for the promise to resolve; handling this when a large portion\n  // of the code is wrapped in a Promise constructor is error-prone.\n  promise: tp,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Callback Byte Stream in JavaScript\nDESCRIPTION: Demonstrates how to create a new callback byte stream using the NewCallbackByteStream function. This stream can be used with event listeners that pass data as a single argument.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/puter-wisp/README.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst byteStream = NewCallbackByteStream();\nemulator.add_listener('virtio-console0-output-bytes',\n    byteStream.listener);\n```\n\n----------------------------------------\n\nTITLE: Simplified el() usage for div elements in JavaScript\nDESCRIPTION: These snippets demonstrate various shorthand notations for creating div elements with el(). They show how the function can be used with minimal syntax for common use cases.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/gui/doc/el().md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nel('div.myclass', { text: 'hello wolrd' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nel('.myclass', { text: 'hello world' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nel('.myclass', 'hello world');\n```\n\n----------------------------------------\n\nTITLE: Creating a WispPacket Instance in JavaScript\nDESCRIPTION: Demonstrates how to create a new WispPacket instance, which wraps a Uint8Array containing a Wisp packet. The packet direction and optional extra data can be specified.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/puter-wisp/README.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst packet = new WispPacket({\n    data: new Uint8Array(...),\n    direction: WispPacket.SEND, // or RECV\n\n    // `extra` is optional, for debugging\n    extra: { some: 'value', },\n});\n\npacket.type; // ex: WispPacket.CONTINUE\n```\n\n----------------------------------------\n\nTITLE: Creating a div element using el() function in JavaScript\nDESCRIPTION: This snippet shows how to create the same div element as the previous example, but using the el() function. It demonstrates the concise syntax for creating elements with classes and text content.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/gui/doc/el().md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst my_div = el('div.my-class', {\n  text: 'hello world'\n});\n```\n\n----------------------------------------\n\nTITLE: Using WispPacket Methods in JavaScript\nDESCRIPTION: Shows how to use various methods of the WispPacket class, including describe() for summarizing the packet, toVirtioFrame() for prepending the frame size, and log() for console output.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/puter-wisp/README.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npacket.describe();\n// ex: \"INFO v2.0 f000000000\"\n```\n\n----------------------------------------\n\nTITLE: Applying Sharelink in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to apply a share to the current user by making a POST request to the '/sharelink/apply' endpoint. It requires the unique identifier of the share obtained from a previous check operation.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(`${config.api_origin}/sharelink/apply`, {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      uid: '836671d4-ac5d-4bd3-bc0a-ec357e0d8f02',\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Captcha Middleware in Express.js Routes\nDESCRIPTION: Demonstrates the usage of only the requireCaptcha middleware for backward compatibility, showing how to always require captcha for a sensitive route and conditionally require it for a normal route.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/captcha/middleware/README.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst requireCaptcha = context.get('require-captcha-middleware');\n\n// Always require captcha for this route\nrouter.post('/sensitive-route', requireCaptcha({ always: true }), (req, res) => {\n  // Route handler\n});\n\n// Conditionally require captcha based on extensions\nrouter.post('/normal-route', requireCaptcha(), (req, res) => {\n  // Route handler\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Captcha Middlewares in Express.js\nDESCRIPTION: Shows how to access checkCaptcha and requireCaptcha middlewares separately from the context in an Express.js application.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/captcha/middleware/README.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst checkCaptcha = context.get('check-captcha-middleware');\nconst requireCaptcha = context.get('require-captcha-middleware');\n```\n\n----------------------------------------\n\nTITLE: Sharing Files and Apps JSON Request Structure\nDESCRIPTION: This JSON structure shows how to format a request for sharing files and apps with recipients. The 'shares' array can contain both 'app-share' objects (identified by name or UID) and 'fs-share' objects (identified by path or UUID).\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"recipients\": [\n        \"user_that_gets_shared_to\",\n        \"another@example.com\"\n    ],\n    \"shares\": [\n        {\n            \"$\": \"app-share\",\n            \"name\": \"some-app-name\"\n        },\n        {\n            \"$\": \"app-share\",\n            \"uid\": \"app-SOME-APP-UID\"\n        },\n        {\n            \"$\": \"fs-share\",\n            \"path\": \"/some/file/or/directory\"\n        },\n        {\n            \"$\": \"fs-share\",\n            \"path\": \"SOME-FILE-UUID\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Captcha Requirement in API Responses\nDESCRIPTION: Shows how to include the captcha requirement in API responses using the checkCaptcha middleware result, allowing frontend applications to know if captcha is needed for specific actions.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/captcha/middleware/README.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/whoarewe', checkCaptcha({ eventType: 'login' }), (req, res) => {\n  res.json({\n    // Other environment information\n    captchaRequired: {\n      login: req.captchaRequired\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Share Error Response - Missing File\nDESCRIPTION: This JSON structure shows an error response from the '/share' endpoint when a file specified in the share request does not exist. The status is 'mixed' indicating that some operations succeeded while others failed.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"api:share\",\n    \"$version\": \"v0.0.0\",\n    \"status\": \"mixed\",\n    \"recipients\": [\n        {\n            \"$\": \"api:status-report\",\n            \"status\": \"success\"\n        }\n    ],\n    \"paths\": [\n        {\n            \"$\": \"heyputer:api/APIError\",\n            \"code\": \"subject_does_not_exist\",\n            \"message\": \"File or directory not found.\",\n            \"status\": 404\n        }\n    ],\n    \"dry_run\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Puter GUI Initialization\nDESCRIPTION: JavaScript code to initialize Puter GUI with configuration options including GUI origin, API origin, hosting domain and other settings\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/prod.md#2025-04-06_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"./dist/gui.js\"></script>\n<script type=\"text/javascript\">\n    window.addEventListener('load', function() {\n        // Initialize the GUI. All options are optional!\n        gui({\n            // The origin of the app. This is the base URL of the GUI. \n            gui_origin: \"https://puter.com\",\n\n            // The origin of the API. This is the base URL of the API endpoints that the GUI will call for all its operations.\n            api_origin: \"https://api.puter.com\",\n\n            // The domain under which user websites are hosted.\n            hosting_domain: \"puter.site\",\n\n            // The maximum length of file/directory names.\n            max_item_name_length: 500,\n\n            // If GUI has to enforce email verification before allowing user to publish a website.\n            require_email_verification_to_publish_website: true,\n        })\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Successful Sharelink Check Response\nDESCRIPTION: This JSON structure shows a successful response from the '/sharelink/check' endpoint. It includes the share's unique identifier and the email address associated with the share.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"api:share\",\n    \"uid\": \"836671d4-ac5d-4bd3-bc0a-ec357e0d8f02\",\n    \"email\": \"asdf@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Production HTML Template\nDESCRIPTION: Full HTML template for Puter production deployment including meta tags, favicons, and GUI initialization\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/prod.md#2025-04-06_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <title>Puter</title>\n    <meta name=\"author\" content=\"Puter Technologies Inc.\">\n    <meta name=\"description\" content=\"Puter is a privacy-first personal cloud to keep all your files, apps, and games in one private and secure place, accessible from anywhere at any time.\">\n    <meta name=\"facebook-domain-verification\" content=\"e29w3hjbnnnypf4kzk2cewcdaxym1y\" />\n    <link rel=\"canonical\" href=\"https://puter.com\">\n\n    <!-- Meta meta tags -->\n    <meta property=\"og:url\" content=\"https://puter.com\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"Puter\">\n    <meta property=\"og:description\" content=\"Puter is a privacy-first personal cloud to keep all your files, apps, and games in one private and secure place, accessible from anywhere at any time.\">\n    <meta property=\"og:image\" content=\"./dist/images/screenshot.png\">\n\n    <!-- Twitter meta tags -->\n    <meta name=\"twitter:card\" content=\"summary_large_image\">\n    <meta property=\"twitter:domain\" content=\"puter.com\">\n    <meta property=\"twitter:url\" content=\"https://puter.com\">\n    <meta name=\"twitter:title\" content=\"Puter\">\n    <meta name=\"twitter:description\" content=\"Puter is a privacy-first personal cloud to keep all your files, apps, and games in one private and secure place, accessible from anywhere at any time.\">\n    <meta name=\"twitter:image\" content=\"./dist/images/screenshot.png\">\n\n    <!-- favicons -->\n    <link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"./dist/favicons/apple-icon-57x57.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"./dist/favicons/apple-icon-60x60.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"./dist/favicons/apple-icon-72x72.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"./dist/favicons/apple-icon-76x76.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"./dist/favicons/apple-icon-114x114.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"./dist/favicons/apple-icon-120x120.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"./dist/favicons/apple-icon-144x144.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./dist/favicons/apple-icon-152x152.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./dist/favicons/apple-icon-180x180.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\"  href=\"./dist/favicons/android-icon-192x192.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"./dist/favicons/favicon-32x32.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"./dist/favicons/favicon-96x96.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"./dist/favicons/favicon-16x16.png\">\n    <link rel=\"manifest\" href=\"./dist/manifest.json\">\n    <meta name=\"msapplication-TileColor\" content=\"#ffffff\">\n    <meta name=\"msapplication-TileImage\" content=\"./dist/favicons/ms-icon-144x144.png\">\n    <meta name=\"theme-color\" content=\"#ffffff\">\n\n    <!-- Preload images when applicable -->\n    <link rel=\"preload\" as=\"image\" href=\"./dist/images/wallpaper.webp\">\n</head>\n\n<body>\n    <!-- Load the GUI script -->\n    <script type=\"text/javascript\" src=\"./dist/gui.js\"></script>    \n    <!-- Initialize GUI when document is loaded -->\n    <script type=\"text/javascript\">\n    window.addEventListener('load', function() {\n        gui()\n    });\n    </script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Deploying Puter with Docker Compose on Linux/macOS\nDESCRIPTION: Steps to set up and run Puter using Docker Compose on Linux or macOS. This creates necessary directories, sets permissions, downloads the docker-compose.yml file, and starts the containers.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/README.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p puter/config puter/data\nsudo chown -R 1000:1000 puter\nwget https://raw.githubusercontent.com/HeyPuter/puter/main/docker-compose.yml\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Successful Sharelink Apply Response\nDESCRIPTION: This JSON structure shows a successful response from the '/sharelink/apply' endpoint, indicating that the share was successfully applied to the current user.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"$\":\"api:status-report\",\"status\":\"success\"}\n```\n\n----------------------------------------\n\nTITLE: Setting up Puter for Local Development\nDESCRIPTION: Instructions for cloning the Puter repository, installing dependencies, and starting the application locally. This will launch Puter at http://puter.localhost:4100 or the next available port.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/HeyPuter/puter\ncd puter\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Successful Sharelink Request Response\nDESCRIPTION: This JSON structure shows a successful response from the '/sharelink/request' endpoint, indicating that the permission request was successfully sent to the share issuer.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\"$\":\"api:status-report\",\"status\":\"success\"}\n```\n\n----------------------------------------\n\nTITLE: Deploying Puter with Docker Compose on Linux/macOS\nDESCRIPTION: This snippet demonstrates how to set up and run Puter using Docker Compose on Linux or macOS systems, including directory creation and permissions setting.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/i18n/README.en.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p puter/config puter/data\nsudo chown -R 1000:1000 puter\nwget https://raw.githubusercontent.com/HeyPuter/puter/main/docker-compose.yml\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Sharelink Request Error Response\nDESCRIPTION: This JSON structure shows an error response from the '/sharelink/request' endpoint when the request is unnecessary because the share is already valid for the current user. In this case, the user should use the '/apply' endpoint instead.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"This share is already valid for this user; POST to /apply for access\",\n    \"code\": \"no_need_to_request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Puter with Docker Compose on Windows\nDESCRIPTION: This PowerShell script sets up the necessary directories, downloads the Docker Compose configuration, and runs Puter on Windows systems.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/i18n/README.en.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nmkdir -p puter\ncd puter\nNew-Item -Path \"puter\\config\" -ItemType Directory -Force\nNew-Item -Path \"puter\\data\" -ItemType Directory -Force\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/HeyPuter/puter/main/docker-compose.yml\" -OutFile \"docker-compose.yml\"\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Configuration for Puter in JSON\nDESCRIPTION: This snippet demonstrates how to create a custom configuration file that references the default config.json. It includes the necessary header and an example of overriding the domain setting.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/config.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Always include this header\n    \"$version\": \"v1.1.0\",\n    \"$requires\": [\n        \"config.json\"\n    ],\n    \"config_name\": \"local\",\n    \n    // Your custom configuration\n    \"domain\": \"my-puter.example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Unread Notifications Query\nDESCRIPTION: API request to fetch unread notifications using the puter-notifications driver. Returns filtered results for unread notifications only.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/notifications.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(\"http://api.puter.localhost:4100/drivers/call\", {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n    interface: 'puter-notifications',\n    method: 'select',\n    args: { predicate: ['unread'] }\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring nip.io Domain Support in Puter\nDESCRIPTION: Configuration setting to enable nip.io wildcard DNS support for IP addresses in Puter's configuration file.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/domains.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"allow_nipio_domains\": true\n```\n\n----------------------------------------\n\nTITLE: Fetching First 200 Notifications\nDESCRIPTION: API request to fetch the first page of notifications (200 items) using the puter-notifications driver without any filtering.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/notifications.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(\"http://api.puter.localhost:4100/drivers/call\", {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n    interface: 'puter-notifications',\n    method: 'select',\n    args: {}\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Base Development Tools on Arch Linux\nDESCRIPTION: Command to install base-devel package group on Arch Linux systems.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/first-run-issues.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S base-devel\n```\n\n----------------------------------------\n\nTITLE: Fetching Next 200 Notifications\nDESCRIPTION: API request to fetch the next page of notifications (200 items) using pagination offset with the puter-notifications driver.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/notifications.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(\"http://api.puter.localhost:4100/drivers/call\", {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n    interface: 'puter-notifications',\n    method: 'select',\n    args: { offset: 200 }\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Build Essentials on Debian-based Systems\nDESCRIPTION: Commands to install build-essential package on Debian-based Linux distributions.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/first-run-issues.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install build-essential\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools on RHEL-family Systems\nDESCRIPTION: Command to install development tools group package on Red Hat Enterprise Linux family distributions including Fedora and Rocky Linux.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/first-run-issues.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf groupinstall \"Development Tools\"\n```\n\n----------------------------------------\n\nTITLE: Removing Users from a Group in JavaScript\nDESCRIPTION: This snippet shows how to remove users from an existing group using a POST request to the '/group/remove-users' endpoint. It requires the group's UID and an array of usernames to be removed.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/group.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(`${window.api_origin}/group/add-users`, {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      uid: '9c644a1c-3e43-4df4-ab67-de5b68b235b6',\n      users: ['first_user', 'second_user'],\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Build Base on Alpine Linux\nDESCRIPTION: Command to install build-base package on Alpine Linux systems, noting it's pre-installed in Puter's Alpine image.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/first-run-issues.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apk add build-base\n```\n\n----------------------------------------\n\nTITLE: Granting Group Permission in JavaScript\nDESCRIPTION: This code demonstrates how to grant permission from the current user to a group using a POST request to the '/auth/grant-user-group' endpoint. It requires the group's UID and the permission string to be granted.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/group.md#2025-04-06_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(\"http://puter.localhost:4100/auth/grant-user-group\", {\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  \"body\": JSON.stringify({\n      group_uid: '9c644a1c-3e43-4df4-ab67-de5b68b235b6',\n      permission: 'fs:/someuser/somedir/somefile:read'\n  }),\n  \"method\": \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Service in Puter's config.json\nDESCRIPTION: This snippet shows how to configure the email service in Puter's config.json file to direct outgoing emails to a local MailHog instance. The configuration specifies localhost as the host and port 1025 for SMTP communication.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/testing_with_email.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    \"services\": {\n        \n        // ... there are probably other service configs\n        \n        \"email\": {\n            \"host\": \"localhost\",\n            \"port\": 1025\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Group Creation Response in JSON\nDESCRIPTION: This snippet shows the expected JSON response format when creating a group. It includes the unique identifier (UID) of the newly created group.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/group.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uid\": \"9c644a1c-3e43-4df4-ab67-de5b68b235b6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Settings in Puter\nDESCRIPTION: JSON configuration settings to be added to the volatile/config/config.json file for connecting to MailHog local email server.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/email_testing.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"email\": {\n  \"host\": \"localhost\",\n  \"port\": 1025\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nodemailer Package\nDESCRIPTION: NPM command to install the Nodemailer package for sending test emails.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/email_testing.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nodemailer\n```\n\n----------------------------------------\n\nTITLE: Listing User's Groups Response in JSON\nDESCRIPTION: This JSON snippet illustrates the response format when listing groups associated with the current user. It includes both owned groups and groups the user is a member of, along with their metadata and member lists.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/group.md#2025-04-06_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"owned_groups\": [\n        {\n            \"uid\": \"c3bd4047-fc65-4da8-9363-e52195890de4\",\n            \"metadata\": {},\n            \"members\": [\n                \"default_user\"\n            ]\n        }\n    ],\n    \"in_groups\": [\n        {\n            \"uid\": \"c3bd4047-fc65-4da8-9363-e52195890de4\",\n            \"metadata\": {},\n            \"members\": [\n                \"default_user\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies in Markdown\nDESCRIPTION: Enumerates the dependencies of certain types used in Puter drivers, specifically for File and URL types.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend-core-0/README.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSome types depend on utilities in Puter's backend:\n- **File**\n  - filesystem/validation\n  - `is_valid_uuidv4` from helpers.js\n- **URL**\n  - `is_valid_url` from helpers.js\n```\n\n----------------------------------------\n\nTITLE: Standard Type-Tagged Object Format in JavaScript\nDESCRIPTION: Demonstrates the standard format for Type-Tagged Objects with the required '$' type key and optional meta-keys prefixed with '$'.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/type-tagged.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"$\": \"some-type\",\n    \"$version\": \"0.0.0\",\n    \n    \"some_property\": \"some value\",\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Terminal Commands in Puter\nDESCRIPTION: This code snippet showcases various command examples that can be executed in the Puter Terminal Emulator. It demonstrates AI interactions, image generation, system information display, command substitution, text processing, and JSON parsing.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/terminal/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nai \"write me a story\"\ntxt2img \"a blue computer on a cloud\" > puter.png\nneofetch\necho $(echo \"command substitution\")\ncat example.txt | grep \"find me\"\ncat example.json | jq \"name\"\n```\n\n----------------------------------------\n\nTITLE: Array Type-Tagged Object Representation\nDESCRIPTION: Demonstrates the array representation format where type comes first, followed by content and meta values.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/type-tagged.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\"some-type\",\n    { \"some_property\": \"some value\" },\n    { \"version\": \"0.0.0\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Stratum Interface Implementation\nDESCRIPTION: Each stratum must implement a 'next' method that receives an API object and returns an iterator-like object with done and value properties. The API object allows interaction between strata through the delegate method.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/phoenix/doc/parser.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ done: true/false, value: ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Git Subcommand Structure in JavaScript\nDESCRIPTION: This snippet demonstrates the structure for defining a git subcommand in JavaScript. It includes properties for the command name, usage, description, arguments, and an execute function that handles the command's logic.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/git/README.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    name: 'help',\n    usage: [\n        'git help [-a|--all]',\n        'git help <command>',\n    ],\n    description: `Display help information for git itself, or a subcommand.`,\n    args: {\n        allowPositionals: true,\n        options: {\n            all: {\n                description: 'List all available subcommands.',\n                type: 'boolean',\n            }\n        },\n    },\n    execute: async (ctx) => {\n        ctx = {\n            io: {\n                stdout,\n                stderr,\n            },\n            fs,\n            args,\n            env,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Array Type-Tagged Object Examples\nDESCRIPTION: Shows equivalent simplified array representations where single values are automatically wrapped in a 'value' property.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/type-tagged.md#2025-04-06_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\"some-type\", \"hello\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n[\"some-type\", { \"value\": \"hello\" }]\n```\n\n----------------------------------------\n\nTITLE: Defining hello_world Function in JavaScript\nDESCRIPTION: This function is a simple example that returns a 'Hello, World!' string. It's part of the hello_world library in the TemplateModule.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/template/README.md#2025-04-06_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction hello_world() {\n    return 'Hello, World!';\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Request Measurement Event in JavaScript\nDESCRIPTION: Example showing how to handle the core.request.measured event to track incoming and outgoing bytes of requests. The handler receives measurement data and actor information.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/events.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nextension.on('core.request.measured', data => {\n    const measurements = data.measurements;\n    //    measurements = { sz_incoming: integer, sz_outgoing: integer }\n\n    const actor = data.actor; // instance of Actor\n\n    console.log('\\x1B[36;1m === MEASUREMENT ===\\x1B[0m\\n', {\n        actor: data.actor.uid,\n        measurements: data.measurements\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Entity Storage Request Flow Diagram\nDESCRIPTION: A plaintext diagram showing the flow of a request through various components when 'create' is called on an OM/ES driver. The request flows from the call router through several services to the final storage implementation.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/om/docs/DESIGN.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/call -> DriverService\n    -> EntityStoreImplementation -> EntityStoreService -> BaseES\n        -> ...(storage decorators) -> SQLES\n```\n\n----------------------------------------\n\nTITLE: Documenting Policy Retrieval Event\nDESCRIPTION: Properties documentation for core.wisp.get-policy event including allow flag and policy object.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/events.md#2025-04-06_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### `core.wisp.get-policy`\n\nThis event is emitted for wisp get policy operations.\n\n#### Property `allow`\n\nwhether the operation is allowed\n- **Type**: boolean\n- **Mutability**: mutable\n- **Notes**:\n\n#### Property `policy`\n\npolicy information for the operation\n- **Type**: Policy\n- **Mutability**: mutable\n- **Notes**:\n```\n\n----------------------------------------\n\nTITLE: Registering a Puter Service in JavaScript\nDESCRIPTION: This snippet shows how to register a newly created Puter service. It imports the service class and registers it with a specific name using the services.registerService method.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/howto_make_driver.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PrankGreetServie } = require('./path/to/PrankGreetServie.js');\nservices.registerService('prank-greet', PrankGreetServie);\n```\n\n----------------------------------------\n\nTITLE: Implementing Driver Interface in Puter Service\nDESCRIPTION: This snippet shows how to implement the 'hello-world' driver interface in the PrankGreetService. It defines the greet method as specified in the interface.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/howto_make_driver.md#2025-04-06_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass PrankGreetService extends BaseService {\n    async _init () {\n        // ... same as before\n    }\n\n    // Now we add this:\n    static IMPLEMENTS = {\n        ['hello-world']: {\n            async greet ({ subject }) {\n                if ( subject ) {\n                    return `Hello ${subject}, tell me about updog!`;\n                }\n                return `Hello, tell me about updog!`;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Head/Body Structure for JSON Metadata Separation\nDESCRIPTION: A solution using a 'head' property for metadata and a 'body' property for the actual response data. This approach clearly separates metadata from response data but may be verbose.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/planning/alternatives-to-$.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"head\": {\n    \"type\": \"api:thing\",\n    \"version\": \"v1.0.0\"\n  },\n  \"body\": {\n    \"some\": \"info\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Puter Kernel with Modules in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the Puter kernel with various modules including Core, Database, Storage, and SelfHosted modules. It shows the basic setup required for a self-hosted Puter instance.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/modules.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n    Kernel,\n    CoreModule,\n    DatabaseModule,\n    LocalDiskStorageModule,\n    SelfHostedModule\n} = (await import('@heyputer/backend')).default;\n\nconst k = new Kernel();\nk.add_module(new CoreModule());\nk.add_module(new DatabaseModule());\nk.add_module(new LocalDiskStorageModule());\nk.add_module(new SelfHostedModule());\nk.boot();\n```\n\n----------------------------------------\n\nTITLE: Nested Value Object for JSON Response Data\nDESCRIPTION: A simplified nesting convention where metadata fields are at the top level, and response data is nested under a 'value' key. This approach clearly separates metadata from response data.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/planning/alternatives-to-$.md#2025-04-06_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api:thing\",\n  \"version\": \"v1.0.0\",\n  \"value\": {\n      \"some\": \"info\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing App by Name using JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to share an app using its name. The configuration uses the '$' key to specify the action type as 'app-share' and includes the 'name' field to identify the app to be shared.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/types/app-share.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"app-share\",\n    \"name\": \"some-app-name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Underscore Convention for JSON Metadata\nDESCRIPTION: A variation of the underscore convention where all metadata is grouped under a single '_' key. This approach uses only one reserved key and is backwards-compatible with most existing JSON responses.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/planning/alternatives-to-$.md#2025-04-06_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_\": {\n      \"type\": \"api:thing\",\n      \"version\": \"v1.0.0\"\n  },\n\n  \"some\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Read Access File Share\nDESCRIPTION: Example of sharing a file or directory with default read access permissions\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/types/file-share.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"file-share\",\n    \"path\": \"/some/path\"\n}\n```\n\n----------------------------------------\n\nTITLE: Write Access File Share\nDESCRIPTION: Example of sharing a file or directory with write access permissions\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/types/file-share.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"file-share\",\n    \"path\": \"/some/path\",\n    \"access\": \"write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Puter with Docker\nDESCRIPTION: Command to run Puter using Docker. This creates necessary directories, sets permissions, and launches the Puter container, making it available at http://puter.localhost:4100 or the next available port.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/README.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir puter && cd puter && mkdir -p puter/config puter/data && sudo chown -R 1000:1000 puter && docker run --rm -p 4100:4100 -v `pwd`/puter/config:/etc/puter -v `pwd`/puter/data:/var/puter  ghcr.io/heyputer/puter\n```\n\n----------------------------------------\n\nTITLE: UUID-based File Share\nDESCRIPTION: Example of sharing a file or directory using its UUID instead of path\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/types/file-share.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"file-share\",\n    \"path\": \"b912c381-0c0b-466c-95a6-f9a4fc680a7d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Puter with Docker Compose on Windows\nDESCRIPTION: PowerShell commands to set up and run Puter using Docker Compose on Windows. This creates necessary directories, downloads the docker-compose.yml file, and starts the containers.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/README.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nmkdir -p puter\ncd puter\nNew-Item -Path \"puter\\config\" -ItemType Directory -Force\nNew-Item -Path \"puter\\data\" -ItemType Directory -Force\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/HeyPuter/puter/main/docker-compose.yml\" -OutFile \"docker-compose.yml\"\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Successful Share Response\nDESCRIPTION: This JSON structure shows a successful response from the '/share' endpoint with 'dry_run' enabled. It includes status reports for both recipients and paths, indicating that all operations were successful.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"api:share\",\n    \"$version\": \"v0.0.0\",\n    \"status\": \"success\",\n    \"recipients\": [\n        {\n            \"$\": \"api:status-report\",\n            \"status\": \"success\"\n        }\n    ],\n    \"paths\": [\n        {\n            \"$\": \"api:status-report\",\n            \"status\": \"success\"\n        }\n    ],\n    \"dry_run\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Puter Locally with npm\nDESCRIPTION: This snippet shows how to clone the Puter repository, install dependencies, and start the application for local development using npm.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/i18n/README.en.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/HeyPuter/puter\ncd puter\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Share Error Response - Missing User\nDESCRIPTION: This JSON structure shows an error response from the '/share' endpoint when a recipient specified in the share request does not exist. The status is 'mixed' with a 422 status code for the non-existing user.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"api:share\",\n    \"$version\": \"v0.0.0\",\n    \"status\": \"mixed\",\n    \"recipients\": [\n        {\n            \"$\": \"heyputer:api/APIError\",\n            \"code\": \"user_does_not_exist\",\n            \"message\": \"The user `non_existing_user` does not exist.\",\n            \"username\": \"non_existing_user\",\n            \"status\": 422\n        }\n    ],\n    \"paths\": [\n        {\n            \"$\": \"api:status-report\",\n            \"status\": \"success\"\n        }\n    ],\n    \"dry_run\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sharelink Check Error Response\nDESCRIPTION: This JSON structure shows an error response from the '/sharelink/check' endpoint when the token field is missing from the request. It includes an error code and message explaining the issue.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"api:error\",\n    \"message\":\"Field `token` is required.\",\n    \"key\":\"token\",\n    \"code\":\"field_missing\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Puter with Docker\nDESCRIPTION: This command sets up the necessary directories and runs Puter using Docker, mapping ports and volumes for configuration and data storage.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/i18n/README.en.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir puter && cd puter && mkdir -p puter/config puter/data && sudo chown -R 1000:1000 puter && docker run --rm -p 4100:4100 -v `pwd`/puter/config:/etc/puter -v `pwd`/puter/data:/var/puter  ghcr.io/heyputer/puter\n```\n\n----------------------------------------\n\nTITLE: Sharelink Apply Error Response\nDESCRIPTION: This JSON structure shows an error response from the '/sharelink/apply' endpoint when the share cannot be applied to the current user, typically because the user's email doesn't match the share's target email.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/share.md#2025-04-06_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"This share can not be applied to this user.\",\n    \"code\": \"can_not_apply_to_this_user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing External Documentation in Markdown\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in Markdown, specifically referencing the puter.js documentation. It shows the syntax for inline links in Markdown.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/README.md#2025-04-06_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[puter.js docs](https://docs.puter.com)\n```\n\n----------------------------------------\n\nTITLE: Marking Notification as Read Example\nDESCRIPTION: Example request to mark a notification as read using the /notif/mark-read endpoint. Requires authentication token and notification UUID.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/notifications.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(\"https://api.puter.local/notif/mark-read\", {\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${puter.authToken}`,\n  },\n  body: JSON.stringify({\n    uid: 'a14ea3d5-828b-42f9-9613-35f43b0a3cb8',\n  }),\n  method: \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Emphasizing Text in Markdown\nDESCRIPTION: This snippet shows how to apply bold formatting to text in Markdown using double asterisks. It's used here to emphasize the word 'puter.js' in the context of describing API endpoints.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/README.md#2025-04-06_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n**puter.js**\n```\n\n----------------------------------------\n\nTITLE: Structured Type-Tagged Object Representation\nDESCRIPTION: Shows an alternative structured representation format that separates meta information and body content for better client-side organization.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/type-tagged.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"$meta-body\",\n    \"type\": \"some-type\",\n    \"meta\": { \"version\": \"0.0.0\" },\n    \"body\": { \"some_property\": \"some value\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining share-intent Type-Tagged Object Structure in Puter\nDESCRIPTION: Defines the structure of a share-intent object used in the /share endpoint. This object is used to apply permissions to existing users and can be transformed into a token:share for email sharing purposes, which is then stored in the share database table.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/lists-of-things/list-of-tto-types.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `{ $: 'share-intent' }`\n\n- Used in the `/share` endpoint\n- Permissions get applied to existing users\n- For email shares, is trasnformed into a `token:share`\n  which is stored in the `share` database table.\n\n- **variants:**\n  - `share-intent:file`\n  - `share-intent:app`\n- **properties:**\n  - `permissions` - a list of permissions to grant\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install project dependencies using Node Package Manager (NPM).\nSOURCE: https://github.com/HeyPuter/puter/blob/main/tools/api-tester/README.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Filesystem Permission Format\nDESCRIPTION: Format for filesystem permissions that specifies access levels (write, read, list, see) for files and directories identified by path or UUID.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/lists-of-things/list-of-permissions.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfs:<PATH-OR-UUID>:<ACCESS-LEVEL>\n```\n\n----------------------------------------\n\nTITLE: Running API Tests with Configuration\nDESCRIPTION: Command to execute API tests using Node.js with a specified configuration file.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/tools/api-tester/README.md#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode apitest.js --config=your_config_file.yml\n```\n\n----------------------------------------\n\nTITLE: Site Access Permission Format\nDESCRIPTION: Format for site/subdomain access permissions that gets automatically rewritten by the backend.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/lists-of-things/list-of-permissions.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nsite:<NAME-OF-SITE>:access\n```\n\n----------------------------------------\n\nTITLE: Installing MailHog Server\nDESCRIPTION: Bash commands for downloading, setting permissions, and running the MailHog email testing server on Linux.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/email_testing.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install MailHog\nwget https://github.com/mailhog/MailHog/releases/download/v1.0.1/MailHog_linux_amd64\nchmod +x MailHog_linux_amd64\n./MailHog_linux_amd64\n```\n\n----------------------------------------\n\nTITLE: App Access Permission Format\nDESCRIPTION: Format for app access permissions that gets automatically rewritten by the backend.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/lists-of-things/list-of-permissions.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\napp:<NAME-OF-APP>:access\n```\n\n----------------------------------------\n\nTITLE: Documenting Email Confirmation Event\nDESCRIPTION: Properties documentation for core.user.email-confirmed event including user_uid and email fields.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/events.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `core.user.email-confirmed`\n\nThis event is emitted for user email confirmed operations.\n\n#### Property `user_uid`\n\nuser uid\n- **Type**: string\n- **Mutability**: no-effect\n- **Notes**:\n\n#### Property `email`\n\nemail\n- **Type**: any\n- **Mutability**: no-effect\n- **Notes**:\n```\n\n----------------------------------------\n\nTITLE: Checking MailHog Process Status\nDESCRIPTION: Bash command to verify if MailHog process is running on the system.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/email_testing.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nps aux | grep MailHog\n```\n\n----------------------------------------\n\nTITLE: Documenting WebSocket Connection Event\nDESCRIPTION: Properties documentation for core.web.socket.connected event including socket and user objects.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/events.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### `core.web.socket.connected`\n\nThis event is emitted for web socket connected operations.\n\n#### Property `socket`\n\nsocket\n- **Type**: any\n- **Mutability**: mutable\n- **Notes**:\n\n#### Property `user`\n\nuser associated with the operation\n- **Type**: User\n- **Mutability**: mutable\n- **Notes**:\n```\n\n----------------------------------------\n\nTITLE: Windows Hosts File Configuration\nDESCRIPTION: Example entries for mapping Puter domains to local IP addresses in Windows hosts file.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/domains.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n192.168.1.10 puter.local\n192.168.1.10 api.puter.local\n```\n\n----------------------------------------\n\nTITLE: Documenting User WebSocket Connection Event\nDESCRIPTION: Properties documentation for core.web.socket.user-connected event including socket and user objects.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/events.md#2025-04-06_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### `core.web.socket.user-connected`\n\nThis event is emitted for web socket user connected operations.\n\n#### Property `socket`\n\nsocket\n- **Type**: any\n- **Mutability**: mutable\n- **Notes**:\n\n#### Property `user`\n\nuser associated with the operation\n- **Type**: User\n- **Mutability**: mutable\n- **Notes**:\n```\n\n----------------------------------------\n\nTITLE: Linux/MacOS Hosts File Configuration\nDESCRIPTION: Example entries for mapping Puter domains to local IP addresses in Unix-like systems' hosts file.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/domains.md#2025-04-06_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n192.168.1.10 puter.local\n192.168.1.10 api.puter.local\n```\n\n----------------------------------------\n\nTITLE: Documenting User Email Change Properties\nDESCRIPTION: Properties documentation for user email change operation including user_id and new_email fields.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/events.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### Property `user_id`\n\nuser id\n- **Type**: string\n- **Mutability**: no-effect\n- **Notes**:\n\n#### Property `new_email`\n\nnew email\n- **Type**: any\n- **Mutability**: no-effect\n- **Notes**:\n```\n\n----------------------------------------\n\nTITLE: Documenting Save Account Event\nDESCRIPTION: Properties documentation for core.user.save_account event including user object.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions/events.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `core.user.save_account`\n\nThis event is emitted for user save_account operations.\n\n#### Property `user`\n\nuser associated with the operation\n- **Type**: User\n- **Mutability**: no-effect\n- **Notes**:\n```\n\n----------------------------------------\n\nTITLE: Domain Configuration in JSON\nDESCRIPTION: Specifies the domain name setting for a Puter instance. Used for URL generation and host header validation when allow_all_host_values is false.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/config_values.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"domain\": \"example.com\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"domain\": \"subdomain.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Allow NIP.IO Domains in JSON\nDESCRIPTION: Enables the use of NIP.IO domains for accessing Puter from another device on LAN. This configuration is set in the JSON configuration file.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/instructions.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"allow_nipio_domains\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Static Hosting Domain Example in JSON\nDESCRIPTION: Example of configuring a domain for public site URLs, particularly useful in LAN configurations using services like nip.io.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/config_values.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"site.192.168.555.12.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Protocol Configuration in JSON\nDESCRIPTION: Defines the protocol (http or https) to be used for URLs in the application.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/config_values.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"protocol\": \"http\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"protocol\": \"https\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Puter Mods Directory in JSON\nDESCRIPTION: JSON configuration example showing how to specify mod directories in config.json. The configuration allows defining paths where Puter will look for mods, typically located in volatile/config.json or /var/puter/config.json.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/uncategorized/puter-mods.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config_name\": \"example config\",\n\n    \"mod_directories\": [\n        \"{source}/mods/mods_enabled\"\n    ]\n\n    // ... other config options\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple AI Service API Keys in JSON\nDESCRIPTION: Example configuration showing how to set up multiple AI services with their respective API keys in the services configuration block. Demonstrates the structure for OpenAI, Deepseek, and other AI service configurations.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/doc/ai-services-config.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"services\": {\n    \"openai\": {\n      \"apiKey\": \"sk-abcdefg...\"\n    },\n    \"deepseek\": {\n      \"apiKey\": \"sk-xyz123...\"\n    },\n    \"other-ai-service\": {\n      \"apiKey\": \"sk-hijklmn...\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: External Module Dependencies List\nDESCRIPTION: A comprehensive list of external relative imports required by the module, showing dependencies on API errors, authentication services, base services, database constants, driver metadata, and utility functions.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/modules/puterai/README.md#2025-04-06_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Outside Imports\\n\\nThis module has external relative imports. When these are\\nremoved it may become possible to move this module to an\\nextension.\\n\\n**Imports:**\\n- `../../api/APIError`\\n- `../../services/auth/PermissionService`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/database/consts`\\n- `../../services/drivers/meta/Construct`\\n- `../../services/drivers/meta/Runtime`\\n- `../../util/context`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/drivers/meta/Runtime`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../api/APIError`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../util/langutil`\\n- `../../services/drivers/meta/Runtime`\\n- `../../api/APIError`\\n- `../../util/promise`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/drivers/meta/Runtime`\\n- `../../util/langutil`\\n- `../../util/promise`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/drivers/meta/Runtime`\\n- `../../util/langutil`\\n- `../../util/promise`\\n- `../../api/APIError`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/drivers/meta/Runtime`\\n- `../../util/context`\\n- `../../util/smolutil`\\n- `../../util/langutil`\\n- `../../util/promise`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/drivers/meta/Runtime`\\n- `../../util/context`\\n- `../../config`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../services/drivers/meta/Runtime`\\n- `../../util/langutil`\\n- `../../util/promise`\\n- `../../services/BaseService` (use.BaseService)\\n- `../../util/langutil`\\n- `../../services/drivers/meta/Runtime`\\n- `../../util/promise`\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Puter Mod\nDESCRIPTION: Shell command demonstrating how to create a symbolic link for enabling a Puter mod (KDMOD). The command creates a symlink in mods_enabled directory pointing to the corresponding mod in mods_available.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/uncategorized/puter-mods.md#2025-04-06_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nln -rs ./mods/mods_available/kdmod ./mods/mods_enabled/\n```\n\n----------------------------------------\n\nTITLE: Dollar-Sign Convention for JSON Metadata\nDESCRIPTION: A solution using '$' prefix for metadata keys. This approach is backwards-compatible with existing JSON responses but restricts the use of '$' in response data keys.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/planning/alternatives-to-$.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$\": \"api:thing\",\n  \"$version\": \"v1.0.0\",\n\n  \"some\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Production Directory Structure\nDESCRIPTION: Example directory structure for Puter in production environment\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/prod.md#2025-04-06_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── dist/\n│   ├── favicons/\n│   ├── images/\n│   ├── bundle.min.css\n│   ├── bundle.min.js\n│   ├── gui.js\n│   └── ...\n└── index.html\n```\n\n----------------------------------------\n\nTITLE: Underscore Convention for JSON Metadata\nDESCRIPTION: Similar to the dollar-sign convention, but using '_' prefix for metadata keys. This approach might be more familiar due to the conventional use of underscores for private properties.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/planning/alternatives-to-$.md#2025-04-06_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_\": \"api:thing\",\n  \"_version\": \"v1.0.0\",\n\n  \"some\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Internal Directory in Markdown\nDESCRIPTION: A markdown link to an internal directory within the repository, demonstrating how internal references are structured in the documentation.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/structure.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`/src/backend`](/src/backend)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Object with Potential Collision\nDESCRIPTION: An example JSON object demonstrating the potential collision between metadata properties and response data properties.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/planning/alternatives-to-$.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"api:thing\",\n    \"version\": \"v1.0.0\",\n    \"some\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Navigation Links Structure\nDESCRIPTION: HTML markup for creating centered navigation links to various platform resources including demo, documentation, and social media.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/dev-center/README.md#2025-04-06_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://puter.com/app/dev-center\"><strong>« LIVE DEMO »</strong></a>\n    <br />\n    <br />\n    <a href=\"https://puter.com\">Puter.com</a>\n    ·\n    <a href=\"https://docs.puter.com\" target=\"_blank\">SDK</a>\n    ·\n    <a href=\"https://discord.com/invite/PQcx7Teh8u\">Discord</a>\n    ·\n    <a href=\"https://reddit.com/r/puter\">Reddit</a>\n    ·\n    <a href=\"https://twitter.com/HeyPuter\">X (Twitter)</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Referencing Internal Documentation File in Markdown\nDESCRIPTION: A markdown link to an internal documentation file, showing how specific documentation references are structured within the project.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/structure.md#2025-04-06_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[key locations in backend documentation](/src/backend/doc/contributors/structure.md)\n```\n\n----------------------------------------\n\nTITLE: Creating a div element in HTML\nDESCRIPTION: This snippet shows the HTML equivalent of the previous JavaScript examples. It's included to compare the syntax of el() with HTML.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/gui/doc/el().md#2025-04-06_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"my-class\">some text</div>\n```\n\n----------------------------------------\n\nTITLE: Organizing Imports in JavaScript Files\nDESCRIPTION: This snippet demonstrates the recommended order for importing dependencies in JavaScript files. It shows the preferred sequence: third-party dependencies, internal module files, and standard library imports.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/coding-style.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst passport = require('passport');\n\nconst { get_user } = require(\"../../helpers\");\nconst BaseService = require(\"../../services/BaseService\");\nconst config = require(\"../../config\");\n\nconst path = require('path');\nconst fs = require('fs');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ES6 Class Method Definition Limitations\nDESCRIPTION: This example illustrates the contrast between intuitive method definitions and less intuitive expression assignments in ES6 classes. It shows why method expression assignments can be unclear without additional context.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/uncategorized/es6-note.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass ExampleClass extends SomeBase {\n    intuitive_method_definition () {}\n    \n    constructor () {\n        this.less_intuitive = some_expr();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Trailing Commas in JavaScript Objects and Arrays\nDESCRIPTION: This snippet shows the correct usage of trailing commas in JavaScript objects and arrays. It demonstrates how trailing commas improve readability and ease of reordering elements.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/coding-style.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// This is great\n{\n    \"apple\",\n    \"banana\",\n    \"cactus\", // <-- Good!\n}\n\n// This is also fine\n[\n    1, 2, 3,\n    4, 5, 6,\n    7, 8, 9,\n]\n\n[\n    something(),\n    another_thing(),\n    the_last_thing() // <-- Nope, please add trailing comma!\n]\n```\n\n----------------------------------------\n\nTITLE: Building Puter Application\nDESCRIPTION: Command to build the Puter application using npm\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/prod.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Referencing Monorepo Link in Markdown\nDESCRIPTION: A markdown link to the Wikipedia page for monorepo, demonstrating how external references are included in the documentation.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/structure.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[monorepo](https://en.wikipedia.org/wiki/Monorepo)\n```\n\n----------------------------------------\n\nTITLE: Using Inline Comments in JavaScript Code\nDESCRIPTION: This snippet shows how to use inline comments effectively in JavaScript code. It demonstrates the use of prefixed comments to indicate specific purposes or tracking information.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/contributors/coding-style.md#2025-04-06_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// track: slice a prefix\nconst uid = uid_part.slice('uid#'.length);\n```\n\n----------------------------------------\n\nTITLE: Referencing External Repository Link in Markdown\nDESCRIPTION: A markdown link to the puter-cli GitHub repository, showing how external project references are included in the documentation.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/structure.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[puter-cli](https://github.com/HeyPuter/puter-cli)\n```\n\n----------------------------------------\n\nTITLE: AST Node Structure\nDESCRIPTION: Basic structure of AST nodes used throughout the parser. Nodes use the $ key to identify their type and can contain additional properties.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/phoenix/doc/parser.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ $: 'op.pipe' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Mod Directory in JSON\nDESCRIPTION: This snippet shows how to configure the mod directory in the project's configuration file. It adds the 'mods/mods_available' directory to the list of mod directories.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/extensions.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"mod_directories\": [\n    \"{source}/../mods/mods_available\"\n]\n```\n\n----------------------------------------\n\nTITLE: Pipeline Node Structure\nDESCRIPTION: Higher-level AST node structure for representing shell pipelines. Contains a components array with tokens between pipe operators.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/phoenix/doc/parser.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ $: 'pipeline', components: [...] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Comment Writer Path Example\nDESCRIPTION: Example command for running the comment-writer tool against a specific directory in the project.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/tools/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js ../../src/backend/services\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm for Phoenix Shell\nDESCRIPTION: This command runs the test suite for the Phoenix shell project using npm and mocha. Tests are located in the test/ directory.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/phoenix/README.md#2025-04-06_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Listing Track Comment Types in Markdown\nDESCRIPTION: Enumerates various types of track comments used in the project, including their purposes and common use cases.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/devmeta/track-comments.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Track Comment Registry\n\n- `track: type check`:\n  A condition that's used to check the type of an imput.\n- `track: adapt`\n  A value can by adapted from another type at this line.\n- `track: bounds check`:\n  A condition that's used to check the bounds of an array\n  or other list-like entity.\n- `track: ruleset`\n  A series of conditions that early-return or `continue`\n- `track: object description in comment`\n  A comment above the creation of some object which\n  could potentially have a `description` property.\n  This is especially relevant if the object is stored\n  in some kind of registry where multiple objects\n  could be listed in the console.\n- `track: slice a prefix`\n  A common pattern where a prefix string is \"sliced off\"\n  of another string to obtain a significant value, such\n  as an indentifier.\n- `track: actor type`\n  The sub-type of an Actor object is checked.\n- `track: scoping iife`\n  An immediately-invoked function expression specifically\n  used to reduce scope clutter.\n- `track: good candidate for sequence`\n  Some code involves a series of similar steps,\n  or there's a common behavior that should happen\n  in between. The Sequence class is good for this so\n  it might be a worthy migration.\n- `track: opposite condition of sibling`\n  A sibling class, function, method, or other construct of\n  source code has a boolean expression which always evaluates\n  to the opposite of the one below this track comment.\n- `track: null check before processing`\n  An object could be undefined or null, additional processing\n  occurs after a null check, and the unprocessed object is not\n  relevant to the rest of the code. If the code for obtaining\n  the object and processing it is moved to a function outside,\n  then the null check should result in a early return of null;\n  this code with the track comment may have additional logic\n  for the null/undefined case.\n- `track: manual safe object`\n  This code manually creates a new \"client-safe\" version of\n  some object that's in scope. This could be either to pass\n  onto the browser or to pass to something like the\n  notification service.\n- `track: common operations on multiple items`\n  A patterm which emerges when multiple variables have\n  common operations done upon them in sequence.\n  It may be applicable to write an iterator in the\n  future, or something will come up that require\n  these to be handled with a modular approach instead.\n- `track: checkpoint`\n  A location where some statement about the state of the\n  software must hold true.\n```\n\n----------------------------------------\n\nTITLE: HTML Center Alignment for Logo\nDESCRIPTION: HTML markup for centering and displaying the Dev Center logo with specific dimensions.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/dev-center/README.md#2025-04-06_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n<img src=\"https://github.com/HeyPuter/dev-center/assets/1715019/37ef2e5d-a685-4381-92da-8a4e18378b09\"  align=\"center\" width=\"80\" height=\"80\">\n</p>\n```\n\n----------------------------------------\n\nTITLE: Adding Missing File Extension in SQL Migration\nDESCRIPTION: Adds the missing .sql file extension to the 0009_app-prefix-fix migration file during database initialization.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/CHANGELOG.md#2025-04-06_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n0009_app-prefix-fix.sql\n```\n\n----------------------------------------\n\nTITLE: Applying GNU AGPL License Template for Source Files\nDESCRIPTION: Standard license notice template to be included at the beginning of source files when applying the GNU AGPL license. This template includes placeholders for program name, copyright year, and author name, with explanations of rights and disclaimers.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/dev-center/LICENSE.txt#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Applying GNU AGPL License Notice to Source Files\nDESCRIPTION: This snippet provides a template for the license notice that should be attached to the start of each source file when applying the GNU Affero General Public License to a program. It includes placeholders for the program name, copyright year, and author name.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/LICENSE.txt#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Package Not Found Error Message Display\nDESCRIPTION: Example error output when the '@heyputer/backend' package cannot be found, typically due to missing npm installation.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/self-hosters/first-run-issues.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃  Cannot find package '@heyputer/backend'              ┃\n┃  📝 this usually happens if you forget `npm install`  ┃\n┃  Suggestions:                                         ┃\n┃  - try running `npm install`                          ┃\n┃  Technical Notes:                                     ┃\n┃  - @heyputer/backend is in an npm workspace           ┃\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n```\n\n----------------------------------------\n\nTITLE: Defining PDIM in Markdown\nDESCRIPTION: Introduces the term 'PDIM' (Puter Driver Interface Mechanism) to describe the mechanism and format for driver interfaces in the Puter system.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend-core-0/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nI'll call it the \"PDIM\" (Puter Driver Interface Mechanism) in this log.\n```\n\n----------------------------------------\n\nTITLE: Referencing Sequence Module Path in Markdown\nDESCRIPTION: A markdown reference to the Sequence.js module path, indicating that sequence directories export instances of this class.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/src/structured/README.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Sequence](../codex/Sequence.js)\n```\n\n----------------------------------------\n\nTITLE: Email Verification Code Implementation References\nDESCRIPTION: Code path references showing where email verification checks occur. Includes signup.js line numbers where email duplication is checked (149) and confirmation emails are sent (290).\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/notes/2024-10-03_email_in_use_checks.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// signup.js:149 -> email duplicate check\n// signup.js:290 -> confirmation email sending\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definitions for Email Management\nDESCRIPTION: Backend endpoint definitions for handling email change processes, including the initial change request and confirmation endpoints.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/notes/2024-10-03_email_in_use_checks.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"/user-protected/change-email\" // UserProtectedEndpointsService\n\"/change_email/confirm\"     // PuterAPIService\n```\n\n----------------------------------------\n\nTITLE: Defining internal:share Type-Tagged Object Structure in Puter\nDESCRIPTION: Defines the structure of an internal:share object which is stored in the share database table. This object includes a permissions property that lists the permissions to be granted.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/lists-of-things/list-of-tto-types.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `{ $: 'internal:share' }`\n- Stored in the `share` database table\n- **properties:**\n  - `permissions` - a list of permissions to grant\n```\n\n----------------------------------------\n\nTITLE: Defining token:share Type-Tagged Object Structure in Puter\nDESCRIPTION: Defines the structure of a token:share object which is stored in a JWT called the \"share token\". This object contains only the share UUID in its uid property.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/lists-of-things/list-of-tto-types.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `{ $: 'token:share }`\n\n- Stored in a JWT called the \"share token\"\n- Contains only the share UUID\n\n- **properties:**\n  - `uid` - UUID of a share\n```\n\n----------------------------------------\n\nTITLE: Site UID Permission Format\nDESCRIPTION: UUID-based permission format for protected site access through Puter app iframe.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/src/backend/doc/lists-of-things/list-of-permissions.md#2025-04-06_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nsite:uid#<UUID-OF-SITE>:access\n```\n\n----------------------------------------\n\nTITLE: Markdown Code Formatting Rule for Is/Is Not Statements\nDESCRIPTION: Defines the markdown formatting rules for emphasizing 'is' and 'not' in documentation statements using bold syntax.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/docmeta.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nA **is** B\n```\n\nLANGUAGE: markdown\nCODE:\n```\nA is **not** B\n```\n\n----------------------------------------\n\nTITLE: Defining Track Comment Syntax in Markdown\nDESCRIPTION: Specifies the syntax for track comments and refers to a related document for more information on comment prefixes.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/devmeta/track-comments.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Track Comments\n\nComments beginning with `// track:`. See\n[comment_prefixes.md](../contributors/comment_prefixes.md)\n```\n\n----------------------------------------\n\nTITLE: Comment Prefix Regular Expression Pattern in Markdown\nDESCRIPTION: A regular expression pattern that defines the format for optional prefixes in comment lines. The pattern matches lowercase letters and hyphens for both the prefix and optional scope.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/contributors/comment_prefixes.md#2025-04-06_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n/[a-z-]+\\([a-z-]a+\\):/\n```\n\n----------------------------------------\n\nTITLE: Sharing App by UID using JSON Configuration\nDESCRIPTION: This JSON snippet shows how to share an app using its unique identifier (UID). The configuration uses the '$' key to specify the action type as 'app-share' and includes the 'uid' field to identify the app to be shared.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/doc/api/types/app-share.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$\": \"app-share\",\n    \"uid\": \"app-0a7337f7-0f8a-49ca-b71a-38d39304fe04\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CoverageModel for Write API Testing in JavaScript\nDESCRIPTION: Defines a coverage model for testing the /write API method. The model specifies possible values for path format, name options, destination conditions, and overwrite settings. Empty arrays default to [false, true].\nSOURCE: https://github.com/HeyPuter/puter/blob/main/tools/api-tester/doc/cartesian.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = new CoverageModel({\n    path: {\n        format: ['path', 'uid'],\n    },\n    name: ['default', 'specified'],\n    conditions: {\n        destinationIsFile: []\n    },\n    overwrite: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Example Test State in JSON\nDESCRIPTION: Shows a single state generated from the coverage model. This represents one combination of test parameters where path format is 'path', name is 'specified', destination is a file, and overwrite is false.\nSOURCE: https://github.com/HeyPuter/puter/blob/main/tools/api-tester/doc/cartesian.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"path.format\": \"path\",\n    \"name\": \"specified\",\n    \"conditions.destinationIsFile\": true,\n    \"overwrite\": false\n}\n```"
  }
]