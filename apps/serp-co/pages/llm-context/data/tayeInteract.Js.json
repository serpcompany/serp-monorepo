[
  {
    "owner": "taye",
    "repo": "interact.js",
    "content": "TITLE: Implementing a Simple Slider with interact.js\nDESCRIPTION: This code snippet demonstrates how to create a basic slider input using interact.js. It covers creating an Interactable target, configuring draggable options with modifiers and inertia, and adding an event listener to update the slider's visual state.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Step 1\nconst slider = interact('.slider')    // target elements with the \"slider\" class\n\nslider\n  // Step 2\n  .draggable({                        // make the element fire drag events\n    origin: 'self',                   // (0, 0) will be the element's top-left\n    inertia: true,                    // start inertial movement if thrown\n    modifiers: [\n      interact.modifiers.restrict({\n        restriction: 'self',           // keep the drag coords within the element\n      }),\n    ],\n  })\n  // Step 3\n  .on('dragmove', function (event) {  // call this listener on every dragmove\n    const sliderWidth = interact.getElementRect(event.target.parentNode).width\n    const value = event.pageX / sliderWidth\n\n    event.target.style.paddingLeft = (value * 100) + '%'\n    event.target.setAttribute('data-value', value.toFixed(2))\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Canvas Drawing with interact.js\nDESCRIPTION: This example demonstrates how to create an interactive canvas that allows users to draw colored pixels by dragging. It implements grid snapping, color changes based on drag angle and speed, and clearing functionality on double-tap. The canvas is also made responsive to window size changes.\nSOURCE: https://github.com/taye/interact.js/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixelSize = 16;\n\ninteract('.rainbow-pixel-canvas')\n  .origin('self')\n  .draggable({\n    modifiers: [\n      interact.modifiers.snap({\n        // snap to the corners of a grid\n        targets: [\n          interact.snappers.grid({ x: pixelSize, y: pixelSize }),\n        ],\n      })\n    ],\n    listeners: {\n      // draw colored squares on move\n      move: function (event) {\n        var context = event.target.getContext('2d'),\n            // calculate the angle of the drag direction\n            dragAngle = 180 * Math.atan2(event.dx, event.dy) / Math.PI;\n\n        // set color based on drag angle and speed\n        context.fillStyle = 'hsl(' + dragAngle + ', 86%, '\n                            + (30 + Math.min(event.speed / 1000, 1) * 50) + '%)';\n\n        // draw squares\n        context.fillRect(event.pageX - pixelSize / 2, event.pageY - pixelSize / 2,\n                         pixelSize, pixelSize);\n      }\n    }\n  })\n  // clear the canvas on doubletap\n  .on('doubletap', function (event) {\n    var context = event.target.getContext('2d');\n\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n  });\n\n  function resizeCanvases () {\n    [].forEach.call(document.querySelectorAll('.rainbow-pixel-canvas'), function (canvas) {\n      canvas.width = document.body.clientWidth;\n      canvas.height = window.innerHeight * 0.7;\n    });\n  }\n\n  // interact.js can also add DOM event listeners\n  interact(document).on('DOMContentLoaded', resizeCanvases);\n  interact(window).on('resize', resizeCanvases);\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Canvas Drawing with Interact.js\nDESCRIPTION: This snippet demonstrates how to use Interact.js to create an interactive canvas where users can drag to draw colored squares. It includes snap-to-grid functionality, color changes based on drag angle and speed, and a double-tap to clear the canvas.\nSOURCE: https://github.com/taye/interact.js/blob/main/packages/interactjs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar pixelSize = 16;\n\ninteract('.rainbow-pixel-canvas')\n  .origin('self')\n  .draggable({\n    modifiers: [\n      interact.modifiers.snap({\n        // snap to the corners of a grid\n        targets: [\n          interact.snappers.grid({ x: pixelSize, y: pixelSize }),\n        ],\n      })\n    ],\n    listeners: {\n      // draw colored squares on move\n      move: function (event) {\n        var context = event.target.getContext('2d'),\n            // calculate the angle of the drag direction\n            dragAngle = 180 * Math.atan2(event.dx, event.dy) / Math.PI;\n\n        // set color based on drag angle and speed\n        context.fillStyle = 'hsl(' + dragAngle + ', 86%, '\n                            + (30 + Math.min(event.speed / 1000, 1) * 50) + '%)';\n\n        // draw squares\n        context.fillRect(event.pageX - pixelSize / 2, event.pageY - pixelSize / 2,\n                         pixelSize, pixelSize);\n      }\n    }\n  })\n  // clear the canvas on doubletap\n  .on('doubletap', function (event) {\n    var context = event.target.getContext('2d');\n\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n  });\n\n  function resizeCanvases () {\n    [].forEach.call(document.querySelectorAll('.rainbow-pixel-canvas'), function (canvas) {\n      canvas.width = document.body.clientWidth;\n      canvas.height = window.innerHeight * 0.7;\n    });\n  }\n\n  // interact.js can also add DOM event listeners\n  interact(document).on('DOMContentLoaded', resizeCanvases);\n  interact(window).on('resize', resizeCanvases);\n```\n\n----------------------------------------\n\nTITLE: Using Reflow Method with Promises in Interact.js\nDESCRIPTION: Demonstrates how to use the reflow method to programmatically trigger drag and resize interactions. The example shows how to await the completion of interactions with inertia, endOnly modifiers, and smoothEndDuration using async/await or Promise chaining.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/reflow.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst interactable = interact(target).draggable({}).resizable({})\n\nasync function onWindowResize () {\n  // start a resize action and wait for inertia to finish\n  await interactable.reflow({ name: drag, axis: 'x' })\n\n  // start a drag action\n  await interactable.reflow({\n    name: 'resize',\n    edges: { left: true, bottom: true },\n  })\n}\n\nwindow.addEventListener(onWindowResize, 'resize')\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Functionality with interact.js\nDESCRIPTION: Uses interact.js to make an element draggable, handling start and move events to update the element's position.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/draggable.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst position = { x: 0, y: 0 }\n\ninteract('.draggable').draggable({\n  listeners: {\n    start (event) {\n      console.log(event.type, event.target)\n    },\n    move (event) {\n      position.x += event.dx\n      position.y += event.dy\n\n      event.target.style.transform = `translate(${position.x}px, ${position.y}px)`\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Resize Event Handling in interact.js\nDESCRIPTION: Sets up a resizable element with event listeners that update the element's dimensions and position. Demonstrates handling of resize events by updating element style based on deltaRect and rect properties.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/resizable.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ninteract('.resizable').resizable({\n  edges: { top: true, left: true, bottom: true, right: true },\n  listeners: {\n    move (event) {\n      let { x, y } = event.target.dataset\n\n      x = (parseFloat(x) || 0) + event.deltaRect.left\n      y = (parseFloat(y) || 0) + event.deltaRect.top\n\n      Object.assign(event.target.style, {\n        width: `${event.rect.width}px`,\n        height: `${event.rect.height}px`,\n        transform: `translate(${x}px, ${y}px)`,\n      })\n\n      Object.assign(event.target.dataset, { x, y })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Snap Modifier with RelativePoints in JavaScript\nDESCRIPTION: Configures a draggable element with a snap modifier that uses relativePoints to specify points on the element to which snapping should be relative. This example shows snapping relative to the element's top-left, center, and bottom-right.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/snapping.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(element).draggable({\n  modifiers: [\n    interact.modifiers.snap({\n      targets: [ { x: 300, y: 300 } ],\n      relativePoints: [\n        { x: 0  , y: 0   },   // snap relative to the element's top-left,\n        { x: 0.5, y: 0.5 },   // to the center\n        { x: 1  , y: 1   }    // and to the bottom-right\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and applying restrict and snap modifiers in interact.js\nDESCRIPTION: This example demonstrates how to create restriction and snapping modifiers and apply them to a draggable element. The restrict modifier prevents dragging beyond the parent element, while the snap modifier aligns movement to a 100x100 grid.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/modifiers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// create a restrict modifier to prevent dragging an element out of its parent\nconst restrictToParent = interact.modifiers.restrict({\n  restriction: 'parent',\n  elementRect: { left: 0, right: 0, top: 1, bottom: 1 },\n})\n\n// create a snap modifier which changes the event coordinates to the closest\n// corner of a grid\nconst snap100x100 = interact.modifiers.snap({\n  targets: [interact.snappers.grid({ x: 100, y: 100 })],\n  relativePoints: [{ x: 0.5, y: 0.5 }],\n})\n\ninteract(target)\n  .draggable({\n    // apply the restrict and then the snap modifiers to drag events\n    modifiers: [restrictToParent, snap100x100],\n  })\n  .on('dragmove', event => console.log(event.pageX, event.pageY))\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotation Gestures with interact.js\nDESCRIPTION: JavaScript code that uses interact.js to enable rotation gestures on an element. The onmove event handler updates the rotation angle of an SVG arrow based on the change in angle (da) from the gesture event, and displays the current angle in degrees.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/gesturable.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar angle = 0\n\ninteract('#rotate-area').gesturable({\n  onmove: function (event) {\n    var arrow = document.getElementById('arrow')\n\n    angle += event.da\n\n    arrow.style.webkitTransform =\n    arrow.style.transform =\n      'rotate(' + angle + 'deg)'\n\n    document.getElementById('angle-info').textContent =\n      angle.toFixed(2) + '\\u00b0'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Inertia for Drag and Resize in interact.js\nDESCRIPTION: This snippet demonstrates how to enable and configure inertia for both draggable and resizable interactions using interact.js. It shows basic inertia activation for dragging and more detailed configuration for resizing.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/inertia.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target)\n  .draggable({\n    inertia: true\n  })\n  .resizable({\n    inertia: {\n      resistance: 30,\n      minSpeed: 200,\n      endSpeed: 100\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic Dropzone Event Configuration in Interact.js\nDESCRIPTION: Demonstrates basic dropzone setup with drop and dropactivate event handlers. Shows how to detect when elements are dropped and how to add visual feedback for active dropzones.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/dropzone.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(dropTarget)\n  .dropzone({\n    ondrop: function (event) {\n      alert(event.relatedTarget.id\n            + ' was dropped into '\n            + event.target.id)\n    }\n  })\n  .on('dropactivate', function (event) {\n    event.target.classList.add('drop-activated')\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating an endOnly snap modifier in interact.js\nDESCRIPTION: This snippet shows how to create a snap modifier with the endOnly option set to true. This makes the modifier apply only to the last move event in an interaction, enabling smooth transition to the snapped position when inertia is enabled.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/modifiers.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst snapAtEnd = interact.modifiers.snap({\n  endOnly: true,\n  targets: [/* ... */],\n})\n```\n\n----------------------------------------\n\nTITLE: Using the restrictEdges modifier in interact.js for resizable elements\nDESCRIPTION: This snippet shows how to use the restrictEdges modifier to set precise constraints on where each edge of a resizable element can be positioned, defining both inner boundaries (minimum size) and outer boundaries (maximum size).\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/restriction.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).resizable({\n  modifiers: [\n    interact.modifiers.restrictEdges({\n      inner: {\n        left: 100,  // the left edge must be <= 100\n        right: 200  // the right edge must be >= 200\n      }\n      outer: {\n        left: 0,    // the left edge must be >= 0\n        right: 300  // the right edge must be <= 300\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing interact.js via npm\nDESCRIPTION: Command to install the pre-bundled interact.js package with all features using npm.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# install pre-bundled package with all features\n$ npm install --save interactjs\n```\n\n----------------------------------------\n\nTITLE: Using Function-Based Snap Targets in JavaScript\nDESCRIPTION: Demonstrates using a function as a snap target to create dynamic snapping behavior. The function calculates a sine wave pattern for the y-coordinate based on the x-coordinate, creating a wavy snap path.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/snapping.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ninteract.modifiers.snap({\n  targets: [\n    function (\n      // the x and y page coordinates,\n      x,\n      y,\n      // the current interaction\n      interaction,\n      // the offset information with relativePoint if set\n      { x: offsetX, y: offsetY, relativePoint, index: relativePointIndex },\n      // the index of this function in the options.targets array\n      index,\n    ) {\n      return {\n        x: x,\n        y: 75 + 50 * Math.sin(x * 0.04),\n        range: 40,\n      }\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Cloneable Draggable Elements with interact.js\nDESCRIPTION: Implements a draggable element that creates and drags a clone of itself when the user interacts with it. Uses manualStart and the move event to detect when to create the clone and initiate the drag interaction.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"item\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninteract('.item')\n  .draggable({ manualStart: true })\n  .on('move', function (event) {\n    var interaction = event.interaction\n\n    // if the pointer was moved while being held down\n    // and an interaction hasn't started yet\n    if (interaction.pointerIsDown && !interaction.interacting()) {\n      var original = event.currentTarget,\n        // create a clone of the currentTarget element\n        clone = event.currentTarget.cloneNode(true)\n\n      // insert the clone to the page\n      // TODO: position the clone appropriately\n      document.body.appendChild(clone)\n\n      // start a drag interaction targeting the clone\n      interaction.start({ name: 'drag' }, event.interactable, clone)\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Handling Action End Events in interact.js\nDESCRIPTION: Shows how to correctly calculate the total displacement in action end events (dragend, resizeend, gestureend) using the new event properties. The dx and dy fields are now always 0 at the end of an action.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/migrating.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).draggable({\n  onend: function (event) {\n    console.log(event.pageX - event.X0, event.pageY - event.Y0)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Resize with Snap and Restrict Modifiers in interact.js\nDESCRIPTION: Shows how to use new snap and restrict modifiers specifically for resize actions. It includes examples of snapSize for grid-based resizing, restrictSize for minimum size, and restrictEdges to keep edges within a parent element.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/migrating.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).resize({\n  edges: { bottom: true, right: true },\n\n  // sizes at fixed grid points\n  snapSize: {\n    targets: [\n      interact.snappers.grid({ x: 25, y: 25, range: Infinity }),\n    ],\n  },\n\n  // minimum size\n  restrictSize: {\n    min: { width: 100, height: 50 },\n  },\n\n  // keep the edges inside the parent\n  restrictEdges: {\n    outer: 'parent',\n    endOnly: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Aspect Ratio Modifier for Resize in interact.js\nDESCRIPTION: Demonstrates how to use the new aspectRatio modifier to maintain or force a specific aspect ratio during resize operations. It includes examples for preserving the starting ratio and forcing a square resize.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/migrating.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).resizable({\n  edges: { left: true, bottom: true },\n  modifiers: [\n    interact.modifiers.aspectRatio({\n      // ratio may be the string 'preserve' to maintain the starting aspect ratio,\n      // or any number to force a width/height ratio\n      ratio: 'preserve',\n      // To add other modifiers that respect the aspect ratio,\n      // put them in the aspectRatio.modifiers array\n      modifiers: [interact.modifiers.restrictSize({ max: 'parent' })],\n    }),\n  ],\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).resizable({\n  modifiers: [\n    interact.modifiers.aspectRatio({\n      // The equalDelta option replaces the old resize.square option\n      equalDelta: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using the restrict modifier in interact.js for draggable elements\nDESCRIPTION: This snippet demonstrates how to apply the restrict modifier to limit a draggable element's movement to within its parent element. The endOnly option means the restriction is only applied at the end of the drag operation.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/restriction.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).draggable({\n  modifiers: [\n    interact.modifiers.restrict({\n      restriction: 'parent',\n      endOnly: true\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Resizable Configuration in interact.js\nDESCRIPTION: Sets up a resizable element with customizable edge options. Demonstrates how to configure which edges respond to resize actions using boolean values, CSS selectors, or element references.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/resizable.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target)\n  .resizable({\n    edges: {\n      top   : true,       // Use pointer coords to check for resize.\n      left  : false,      // Disable resizing from left edge.\n      bottom: '.resize-s',// Resize if pointer target matches selector\n      right : handleEl    // Resize if pointer target is the given Element\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: InteractJS Event Listeners Implementation\nDESCRIPTION: Demonstrates multiple ways to attach event listeners for drag, resize, and gesture events using InteractJS.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/events.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction listener(event) {\n  event.target.textContent = `${event.type} at ${event.pageX}, ${event.pageY}`\n}\n\ninteract(target)\n  .on('dragstart', listener)\n  .on('dragmove dragend', listener)\n  .on(['resizemove', 'resizeend'], listener)\n  .on({\n    gesturestart: listener,\n    gestureend: listener,\n  })\n\ninteract(target).draggable({\n  onstart: listener,\n  onmove: listener,\n  onend: listener,\n})\n\ninteract(target).resizable({\n  listeners: [\n    {\n      start: function (event) {\n        console.log(event.type, event.pageX, event.pageY)\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Snap Information in Event Handlers in JavaScript\nDESCRIPTION: Demonstrates how to access snap information in event handlers through the event.modifiers array. This example logs the source of the snap target that was used during a drag movement.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/snapping.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).draggable({\n  modifiers: [\n    interact.modifiers.snap({ targets: [(x, y) => ({ x: x + 20 })] }),\n  ],\n  listeners: {\n    move (event) {\n      console.log(event.modifiers[0].target.source)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Interaction Start in interact.js\nDESCRIPTION: This snippet demonstrates how to disable automatic interaction starts by setting manualStart: true, and then manually triggering a drag interaction on a doubletap event. The interaction.start() method requires the action name, interactable object, and target element to begin the interaction.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/auto-start.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target)\n  .draggable({\n    manualStart: true,\n  })\n  .on('doubletap', function (event) {\n    var interaction = event.interaction\n\n    if (!interaction.interacting()) {\n      interaction.start(\n        { name: 'drag' },\n        event.interactable,\n        event.currentTarget,\n      )\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring autoScroll in interact.js\nDESCRIPTION: Shows how to enable and configure the autoScroll feature for draggable and resizable elements. The example demonstrates both simple enabling and detailed configuration with container, margin, distance, interval, and speed options.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/action-options.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(element)\n  .draggable({\n    autoScroll: true,\n  })\n  .resizable({\n    autoScroll: {\n      container: document.body,\n      margin: 50,\n      distance: 5,\n      interval: 10,\n      speed: 300,\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Handles in interact.js\nDESCRIPTION: Configures a draggable element with a specific handle, allowing the drag action to start only when the user interacts with the handle element. Uses the allowFrom option to restrict drag initiation.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/faq.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"item\">\n  A draggable item\n  <div class=\"handle\">Handle</div>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninteract('.item').draggable({\n  allowFrom: '.handle',\n})\n```\n\n----------------------------------------\n\nTITLE: Maintaining Aspect Ratio During Resize with interact.js\nDESCRIPTION: Implements aspect ratio constraints for resizable elements using the aspectRatio modifier. This example forces the width to always be double the height and nests a restrictSize modifier to limit maximum size.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/resizable.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ninteract(target).resizable({\n  modifiers: [\n    interact.modifiers.aspectRatio({\n      // make sure the width is always double the height\n      ratio: 2,\n      // also restrict the size by nesting another modifier\n      modifiers: [\n        interact.modifiers.restrictSize({ max: 'parent' }),\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Rotatable Element with HTML\nDESCRIPTION: HTML structure for creating a rotatable arrow element with an angle display. The rotation area contains both a text element to show the current angle and an SVG arrow that will be rotated.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/gesturable.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"rotate-area\">\n  <div id=\"angle-info\">0&deg;</div>\n  <svg id=\"arrow\" viewbox=\"0 0 100 100\">\n    <polygon points=\"50,0 75,25 62.5,25 62.5,100 37.5,100 37.5,25 25,25\" fill=\"#29e\"></polygon>\n  </svg>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid-Based Snap Target in JavaScript\nDESCRIPTION: Uses the interact.snappers.grid() method to create a grid-based snap target with 50px spacing, 10px range, an offset, and defined limits. This demonstrates how to create and use grid snapping with a draggable element.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/snapping.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar gridTarget = interact.snappers.grid({\n  // can be a pair of x and y, left and top,\n  // right and bottom, or width, and height\n  x: 50,\n  y: 50,\n\n  // optional\n  range: 10,\n\n  // optional\n  offset: { x: 5, y: 10 },\n\n  // optional\n  limits: {\n    top: 0,\n    left: 0,\n    bottom: 500,\n    height: 500\n  }\n})\n\ninteract(element).draggable({\n  modifiers: [\n    interact.modifiers.snap({ targets: [gridTarget] })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Resizable HTML Structure with Resize Handles\nDESCRIPTION: Defines the HTML structure for a resizable element with resize handles in the top-left and bottom-right corners. The data-x and data-y attributes store the element's position.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/resizable.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-x=\"0\" data-y=\"0\" class=\"resizable\">\n  <!-- top-left resize handle -->\n  <div class=\"resize-top resize-left\"></div>\n\n  <!-- bottom-right resize handle -->\n  <div class=\"resize-bottom resize-right\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Draggable Elements in interact.js\nDESCRIPTION: Example configuration to allow multiple elements with the class '.drag-element' to be dragged simultaneously. The 'max' and 'maxPerElement' parameters control how many elements and interactions can be active at the same time.\nSOURCE: https://github.com/taye/interact.js/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninteract('.drag-element').draggable({\n  enabled: true,\n  // max          : Infinity,  // default\n  // maxPerElement: 1,         // default\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Snap Range for Multiple Targets in JavaScript\nDESCRIPTION: Shows how to configure snap ranges at both the target level and modifier level. One target has a specific range of 50, while another uses the default range of 300 defined at the modifier level.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/snapping.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(element).draggable({\n  modifiers: [\n    interact.modifiers.snap({\n      targets: [\n        { x: 20, y: 450, range: 50 }\n        { x: 10, y: 0 /* use default range below */ }\n      ],\n      range: 300 // for targets that don't specify a range\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Dropzone Detection in interact.js\nDESCRIPTION: Sets up dynamic dropzone detection to handle cases where dropzone elements are added, removed, or resized during a drag operation. When enabled, dropzone rects are recalculated after every dragmove event.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/faq.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninteract.dynamicDrop(true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Locking for Draggable Elements\nDESCRIPTION: Demonstrates how to use 'startAxis' and 'lockAxis' options to control the direction of dragging, including locking to the starting direction or a specific axis.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/draggable.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// lock the drag to the starting direction\ninteract(singleAxisTarget).draggable({\n  startAxis: 'xy'\n  lockAxis: 'start'\n});\n\n// only drag if the drag was started horizontally\ninteract(horizontalTarget).draggable({\n  startAxis: 'x'\n  lockAxis: 'x'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SnapEdges Modifier for Resizable Elements in JavaScript\nDESCRIPTION: Creates a resizable element with a snapEdges modifier that targets specific edge positions. This example demonstrates snapping the top and left edges to a grid with 100px spacing.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/snapping.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).resizable({\n  edges: { top: true, left: true },\n  modifiers: [\n    interact.modifiers.snapEdges({\n      targets: [\n        interact.snappers.grid({ top: 100, left: 100 }),\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using allowFrom (handles) in interact.js\nDESCRIPTION: Demonstrates how to restrict interaction to specific handle elements using the allowFrom option. The example shows configuring different handles for drag, resize, and pointer events within a container element.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/action-options.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"movable-box\">\n  <div class=\"drag-handle\" />\n  Content\n  <div class=\"resize-handle\" />\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninteract('.movable-box')\n  .draggable({\n    allowFrom: '.drag-handle',\n  })\n  .resizable({\n    allowFrom: '.resize-handle',\n  })\n  .pointerEvents({\n    allowFrom: '*',\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for InteractJS Demo\nDESCRIPTION: Simple HTML div element that will respond to drag, resize, and multi-touch gestures.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/events.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>Drag, resize, or perform a multi-touch gesture</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring custom cursor behavior in interact.js\nDESCRIPTION: Demonstrates how to use the cursorChecker function to customize cursor appearance for different interaction types and directions. The example shows direction-specific cursors for resizable edges and disabling cursors for drag actions.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/action-options.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target)\n  .resizable({\n    edges: { left: true, right: true },\n    cursorChecker (action, interactable, element, interacting) {\n      // the library uses biderectional arrows <-> by default,\n      // but we want specific arrows (<- or ->) for each diriection\n      if (action.edges.left) { return 'w-resize' }\n      if (action.edges.right) { return 'e-resize' }\n    },\n  })\n  .draggable({\n    cursorChecker () {\n      // don't set a cursor for drag actions\n      return null\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Element with HTML and CSS\nDESCRIPTION: Sets up the HTML structure for a draggable element and applies necessary CSS styles for touch and user selection.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/draggable.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"draggable\">Draggable Element</div>\n```\n\nLANGUAGE: css\nCODE:\n```\n.draggable {\n  touch-action: none;\n  user-select: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the restrictSize modifier in interact.js for resizable elements\nDESCRIPTION: This example demonstrates how to set minimum and maximum size constraints on a resizable element using the restrictSize modifier. It ensures the element maintains a width and height between specified values.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/restriction.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).resizable({\n  modifiers: [\n    interact.modifiers.restrictSize({\n      min: { width: 100, height: 100 },\n      max: { width: 500, height: 500 }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: InteractJS Dropzone Event Handling\nDESCRIPTION: Implementation of dropzone functionality with event handlers for drop and dropactivate events.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/events.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(dropTarget)\n  .dropzone({\n    ondrop: function (event) {\n      alert(event.relatedTarget.id + ' was dropped into ' + event.target.id)\n    },\n  })\n  .on('dropactivate', function (event) {\n    event.target.classList.add('drop-activated')\n  })\n```\n\n----------------------------------------\n\nTITLE: Using Snap Modifier with Offset in JavaScript\nDESCRIPTION: Demonstrates how to use the offset option with snap modifiers. Two examples are shown: one with a specific coordinate offset for a draggable element, and another using 'startCoords' for a resizable element to offset based on initial coordinates.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/snapping.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(element1).draggable({\n  modifiers: [\n    interact.modifiers.snap({\n      targets: [ { x: 300, y: 300 } ],\n      offset: { x: 20, y: 20 }\n    })\n  ]\n})\n\ninteract(element2).resizable({\n  modifiers: [\n    interact.modifiers.snap({\n      targets: [ { x: 300, y: 300 } ],\n      offset: 'startCoords'\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Dropzone Checker Implementation\nDESCRIPTION: Shows how to implement a custom checker function for advanced drop validation. This example only allows drops into empty dropzone elements.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/dropzone.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).dropzone({\n  checker: function (\n    dragEvent,         // related dragmove or dragend\n    event,             // Touch, Pointer or Mouse Event\n    dropped,           // bool default checker result\n    dropzone,          // dropzone Interactable\n    dropzoneElement,   // dropzone element\n    draggable,         // draggable Interactable\n    draggableElement   // draggable element\n  ) {\n\n    // only allow drops into empty dropzone elements\n    return dropped && !dropElement.hasChildNodes();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Snap Targets with relativePoints and origin in interact.js\nDESCRIPTION: Example showing how to configure snap targets with relativePoints to create multiple reference points on an element (top-left and bottom-right corners). Includes offset parameter to adjust the snap target coordinates.\nSOURCE: https://github.com/taye/interact.js/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).draggable({\n  snap: {\n    targets: [{ x: 300, y: 300 }],\n    relativePoints: [\n      { x: 0, y: 0 }, // snap relative to the top left of the element\n      { x: 1, y: 1 }, // and also to the bottom right\n    ],\n\n    // offset the snap target coordinates\n    // can be an object with x/y or 'startCoords'\n    offset: { x: 50, y: 50 },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Invert Option for Resizable Elements\nDESCRIPTION: Demonstrates how to use the invert option to control behavior when resizing would result in negative dimensions. This example uses 'reposition' which keeps width/height positive by swapping edges.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/resizable.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).resizable({\n  edges: { bottom: true, right: true },\n  invert: 'reposition'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hold Delay for Drag Actions in interact.js\nDESCRIPTION: Configures a draggable element to start dragging only after the pointer is held down for a specified duration (1000ms). This is useful for preventing accidental drag actions.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target)\n  .draggable({\n    // start dragging after the pointer is held down for 1 second\n    hold: 1000\n  })\n```\n\n----------------------------------------\n\nTITLE: Using the restrictRect modifier in interact.js for draggable elements\nDESCRIPTION: This snippet shows how to use the restrictRect modifier to confine a draggable element's edges within its parent element's boundaries, rather than just constraining the pointer position.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/restriction.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).draggable({\n  modifiers: [\n    interact.modifiers.restrictRect({\n      restriction: 'parent'\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring InteractJS with Selected Features\nDESCRIPTION: Demonstrates how to import and configure specific InteractJS features and set up basic drag functionality with event handling.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/tooling.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@interactjs/auto-start'\nimport '@interactjs/actions/drag'\nimport '@interactjs/actions/resize'\nimport '@interactjs/modifiers'\nimport '@interactjs/dev-tools'\nimport interact from '@interactjs/interact'\n\ninteract('.item').draggable({\n  listeners: {\n    move (event) {\n      console.log(event.pageX, event.pageY)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SnapSize Modifier for Resizable Elements in JavaScript\nDESCRIPTION: Creates a resizable element with a snapSize modifier that targets specific dimensions. This example shows snapping to a fixed width of 100px and to a grid with both width and height of 100px.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/snapping.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).resizable({\n  edges: { top: true, left: true },\n  modifiers: [\n    interact.modifiers.snapSize({\n      targets: [\n        { width: 100 },\n        interact.snappers.grid({ width: 100, height: 100 }),\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-action Modifiers in interact.js\nDESCRIPTION: Demonstrates how to create and apply per-action modifiers using the new API. It shows creating a restrict modifier to limit dragging within a parent element and a snap modifier for grid-based snapping.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/migrating.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// create a restrict modifier to prevent dragging an element out of its parent\nconst restrictToParent = interact.modifiers.restrict({\n  restriction: 'parent',\n  elementRect: { left: 0, right: 0, top: 1, bottom: 1 },\n})\n\n// create a snap modifier which changes the event coordinates to the closest\n// corner of a grid\nconst snap100x100 = interact.modifiers.snap({\n  targets: [interact.snappers.grid({ x: 100, y: 100 })],\n  relativePoints: [{ x: 0.5, y: 0.5 }],\n})\n\ninteract(target)\n  .draggable({\n    // apply the restrict and then the snap modifiers to drag events\n    modifiers: [restrictToParent, snap100x100],\n  })\n  .on('dragmove', event => console.log(event.pageX, event.pageY))\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Snap Modifier with Coordinate Targets in JavaScript\nDESCRIPTION: Creates a snap modifier that changes pointer coordinates to specified target positions when they are within range. This example defines two specific coordinate points as snap targets.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/snapping.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySnap = interact.modifiers.snap({\n  targets: [\n    { x: 200, y: 200 },\n    { x: 250, y: 350 },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Binding Methods in interact.js\nDESCRIPTION: Three examples of different ways to bind event listeners in interact.js: using space-separated strings, arrays of event names, or an object mapping event types to handler functions.\nSOURCE: https://github.com/taye/interact.js/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logEventType(event) {\n  console.log(event.type, event.target)\n}\n\ninteract(target).on('down tap dragstart gestureend', logEventType)\n\ninteract(target).on(['move', 'resizestart'], logEventType)\n\ninteract(target).on({\n  dragmove: logEvent,\n  keydown: logEvent,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Snap Functions with Interaction Parameter in interact.js\nDESCRIPTION: Example demonstrating how to use a custom snap function that receives the current Interaction as its third parameter. This allows for conditional snapping behavior based on the interaction state.\nSOURCE: https://github.com/taye/interact.js/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ninteract(target).draggable({\n  snap: {\n    targets: [\n      function (x, y, interaction) {\n        if (!interaction.dropTarget) {\n          return { x: 0, y: 0 }\n        }\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS for Touch-Enabled Draggable Elements\nDESCRIPTION: CSS that enables elements to be touch-draggable by disabling browser defaults. The touch-action property prevents browser panning gestures, while user-select prevents text selection during dragging.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/gesturable.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.draggable {\n  touch-action: none;\n  user-select: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ignoreFrom in interact.js\nDESCRIPTION: Shows how to prevent interactions from starting on specific child elements using the ignoreFrom option. The example demonstrates ignoring content elements during drag actions and preventing pointer events on elements with a specific attribute.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/action-options.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"movable-box\">\n  <p class=\"content\">Selectable text</p>\n  <div no-pointer-event>Should not fire tap, hold, etc. events</div>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar movable = document.querySelector('#movable-box')\n\ninteract(movable)\n  .draggable({\n    ignoreFrom: '.content',\n    onmove: function (event) {\n      /* ... */\n    }\n  })\n  .pointerEvents({\n    ignoreFrom: '[no-pointer-event]',\n  })\n  .on('tap', function (event) {\n  })\n```\n\n----------------------------------------\n\nTITLE: Preventing Browser Scrolling During Touch Interactions with CSS\nDESCRIPTION: CSS rules to prevent browser scrolling, zooming, and text selection during drag, resize, and gesture interactions. Uses touch-action and user-select properties for better touch device compatibility.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/faq.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.draggable, .resizable, .gesturable {\n  -ms-touch-action: none;\n  touch-action: none;\n  user-select: none;\n}\n```\n\n----------------------------------------\n\nTITLE: InteractJS Pointer Event Handling\nDESCRIPTION: Basic pointer event handling implementation with hold event listener.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/events.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).on('hold', function (event) {\n  console.log(event.type, event.target)\n})\n```\n\n----------------------------------------\n\nTITLE: InteractJS Fast Click Implementation\nDESCRIPTION: Implementation of fast click functionality using tap events for improved mobile responsiveness.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/events.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ninteract('a[href]').on('tap', function (event) {\n  window.location.href = event.currentTarget.href\n  event.preventDefault()\n})\n```\n\n----------------------------------------\n\nTITLE: InteractJS Pointer Events Configuration\nDESCRIPTION: Configuration options for pointer events including hold duration and event filtering.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/events.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).pointerEvents({\n  holdDuration: 1000,\n  ignoreFrom: '[no-pointer]',\n  allowFrom: '.handle',\n  origin: 'self',\n})\n```\n\n----------------------------------------\n\nTITLE: Preventing Actions on Child Elements in interact.js\nDESCRIPTION: Configures an interactable to ignore interactions that start on specific child elements. This example prevents dragging when the user interacts with a textarea element inside the draggable container.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/faq.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"resizable\">\n  A resizable item\n  <textarea></textarea>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninteract('.item')\n  .draggable({\n    // don't drag from textarea elments\n    ignoreFrom: 'textarea',\n  });\n```\n\n----------------------------------------\n\nTITLE: Dropzone Overlap Settings Configuration\nDESCRIPTION: Demonstrates how to set the overlap threshold for drop detection. The value 0.25 means the drop will trigger when 25% of the draggable overlaps the dropzone.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/dropzone.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).dropzone({\n  overlap: 0.25\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action Checker in interact.js\nDESCRIPTION: Example showing how to implement a custom actionChecker function that returns an object with a name and axis property. This example configures a resizable element to only resize horizontally along the x-axis.\nSOURCE: https://github.com/taye/interact.js/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target)\n  .resizeable(true)\n  .actionChecker(function (pointer, defaultAction, interactable, element) {\n    return {\n      name: 'resize',\n      axis: 'x',\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Removing interact.js Interactable Instances\nDESCRIPTION: Demonstrates how to remove an Interactable instance using unset() method. This removes all event listeners and makes interact.js forget about the target, useful for cleanup and preventing memory leaks.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).draggable(true).resizable(true)\n\ninteract.isSet(target) // true\n\ninteract(target).unset()\n\ninteract.isSet(target) // false\ninteract(target).draggable() // false\ninteract(target).resizable() // false\n```\n\n----------------------------------------\n\nTITLE: Requiring interact.js in Ruby on Rails\nDESCRIPTION: Shows how to require the interact.js library in a Ruby on Rails application after installing it with yarn.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/installation.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n//= require interactjs/interact\n```\n\n----------------------------------------\n\nTITLE: Disabling cursor styling for interact.js actions\nDESCRIPTION: Shows how to disable the automatic cursor styling feature for all actions on an interactable element by setting the styleCursor option to false.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/action-options.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).styleCursor(false)\n```\n\n----------------------------------------\n\nTITLE: Manual InteractJS Production Configuration\nDESCRIPTION: Demonstrates how to manually configure production imports without using build tools by directly importing production versions.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/tooling.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@interactjs/actions/drag/index.prod'\nimport interact from '@interactjs/interact/index.prod'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dropzone Checker Function\nDESCRIPTION: Example demonstrating how to provide a custom checker function for a dropzone using the options object.\nSOURCE: https://github.com/taye/interact.js/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).dropzone({ checker: function () {} })\n```\n\n----------------------------------------\n\nTITLE: Setting Preservable Aspect Ratio in Resizable Interaction\nDESCRIPTION: Code snippet showing how to enable preserveAspectRatio option when making an element resizable with Interact.js.\nSOURCE: https://github.com/taye/interact.js/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).resizable({ preserveAspectRatio: true })\n```\n\n----------------------------------------\n\nTITLE: Dropzone Element Acceptance Configuration\nDESCRIPTION: Shows how to configure which elements a dropzone will accept using CSS selectors.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/dropzone.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninteract('.dropzone').dropzone({\n  accept: '.drag0, .drag1',\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Message for Internal Package in HTML\nDESCRIPTION: This HTML snippet renders a warning message informing users that the package is an internal part of interact.js and should not be used independently. It includes a link to the main interact.js package on npm.\nSOURCE: https://github.com/taye/interact.js/blob/main/packages/@interactjs/reflow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h2>\nThis package is an internal part of <a\nhref=\"https://www.npmjs.com/package/interactjs\">interactjs</a> and is not meant\nto be used independently as each update may introduce breaking changes\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Setting Dropzone Accept Parameter\nDESCRIPTION: Example showing how to define acceptance criteria for a dropzone using the options object instead of the deprecated accept method.\nSOURCE: https://github.com/taye/interact.js/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninteract(target).dropzone({ accept: stringOrElement })\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Message for Internal InteractJS Package in HTML\nDESCRIPTION: This HTML snippet renders a warning message as a level 2 heading, informing users that the package is an internal component of InteractJS. It emphasizes that the package is not intended for independent use and may introduce breaking changes with updates.\nSOURCE: https://github.com/taye/interact.js/blob/main/packages/@interactjs/auto-start/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h2>\nThis package is an internal part of <a\nhref=\"https://www.npmjs.com/package/interactjs\">interactjs</a> and is not meant\nto be used independently as each update may introduce breaking changes\n</h2>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Interactive Target\nDESCRIPTION: Styles for the interactive target element with visual feedback.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/events.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.target {\n  display: inline-block;\n  min-height: 3rem;\n  background-color: #29e;\n  color: white;\n  padding: 1rem;\n  border-radius: 0.75rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Using interact.js modules via CDN with ES6 imports\nDESCRIPTION: Demonstrates how to use specific interact.js modules directly from CDN using ES6 import syntax in a script tag.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/installation.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import 'https://cdn.interactjs.io/v1.9.20/auto-start/index.js'\n  import 'https://cdn.interactjs.io/v1.9.20/actions/drag/index.js'\n  import 'https://cdn.interactjs.io/v1.9.20/actions/resize/index.js'\n  import 'https://cdn.interactjs.io/v1.9.20/modifiers/index.js'\n  import 'https://cdn.interactjs.io/v1.9.20/dev-tools/index.js'\n  import interact from 'https://cdn.interactjs.io/v1.9.20/interactjs/index.js'\n\n  interact('.item').draggable({\n    onmove(event) {\n      console.log(event.pageX, event.pageY)\n    },\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing specific interact.js modules and creating a draggable element\nDESCRIPTION: Example showing how to import specific interact.js modules and create a basic draggable element with a move event listener.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@interactjs/auto-start'\nimport '@interactjs/actions/drag'\nimport '@interactjs/actions/resize'\nimport '@interactjs/modifiers'\nimport '@interactjs/dev-tools'\nimport interact from '@interactjs/interact'\n\ninteract('.item').draggable({\n  listeners: {\n    move (event) {\n      console.log(event.pageX, event.pageY)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Including interact.js via CDN\nDESCRIPTION: Shows how to include the interact.js library in HTML using popular CDN providers (jsDelivr and unpkg).\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/interactjs/dist/interact.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing interact.js using ES6 syntax\nDESCRIPTION: Demonstrates how to import the interact.js library using ES6 import syntax after installing via npm.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// es6 import\nimport interact from 'interactjs'\n```\n\n----------------------------------------\n\nTITLE: Importing interact.js using CommonJS or AMD\nDESCRIPTION: Shows how to require the interact.js package using CommonJS or AMD module systems.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// or if using commonjs or AMD\nconst interact = require('interactjs')\n```\n\n----------------------------------------\n\nTITLE: InteractJS Production Import Example\nDESCRIPTION: Shows the transformed production imports after Babel plugin processing, with optimized production versions.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/tooling.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@interactjs/actions/drag/index.prod'\nimport interact from '@interactjs/interact/index.prod'\n```\n\n----------------------------------------\n\nTITLE: InteractJS Source Import Example\nDESCRIPTION: Example of standard development imports that will be transformed by the Babel production plugin.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/tooling.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@interactjs/actions/drag'\nimport interact from '@interactjs/interact'\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for InteractJS Production Optimization\nDESCRIPTION: Shows Babel configuration for optimizing InteractJS in production builds by automatically transforming imports to production versions.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/tooling.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\n        \"@interactjs/dev-tools/babel-plugin-prod\",\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Selective InteractJS Features with NPM\nDESCRIPTION: Shows how to install specific InteractJS features using NPM package manager to optimize bundle size by including only needed functionality.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/tooling.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# install only the features you need\n$ npm install --save @interactjs/interact \\\n  @interactjs/auto-start \\\n  @interactjs/actions \\\n  @interactjs/modifiers \\\n  @interactjs/dev-tools\n```\n\n----------------------------------------\n\nTITLE: Installing specific interact.js modules\nDESCRIPTION: Command to install only specific interact.js modules for a streamlined approach, reducing bundle size by including only needed features.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# install only the features you need\n$ npm install --save @interactjs/interact \\\n  @interactjs/auto-start \\\n  @interactjs/actions \\\n  @interactjs/modifiers \\\n  @interactjs/dev-tools\n```\n\n----------------------------------------\n\nTITLE: Installing just the TypeScript type definitions\nDESCRIPTION: Command to install only the TypeScript type definitions for interact.js when using the library through a CDN.\nSOURCE: https://github.com/taye/interact.js/blob/main/docs/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# install just the type definitions\n$ npm install --save-dev @interactjs/types\n```"
  }
]