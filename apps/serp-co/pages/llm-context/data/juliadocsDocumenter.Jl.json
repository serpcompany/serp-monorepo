[
  {
    "owner": "juliadocs",
    "repo": "documenter.jl",
    "content": "TITLE: Running Interactive Code with @example Block in Julia\nDESCRIPTION: Demonstrates how to use the @example block to run interactive code snippets and include their output in the documentation. It shows examples of basic calculations, rendering images, and handling standard output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```@example\n2 + 3\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```@example\nusing Main: DocumenterShowcase\nDocumenterShowcase.SVGCircle(\"000\", \"aaa\")\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```@example\nusing Markdown\nMarkdown.parse(\"\"\"\n`Markdown.MD` objects can be constructed dynamically on the fly and still get rendered \"natively\".\n\"\"\")\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```@example\nprintln(\"Hello World\")\n```\n```\n\n----------------------------------------\n\nTITLE: Creating @autodocs Block in Markdown\nDESCRIPTION: Shows how to create an @autodocs block to automatically splice all docstrings from specified modules.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```@autodocs\nModules = [Foo, Bar, Bar.Baz]\nOrder   = [:function, :type]\n```\n```\n\n----------------------------------------\n\nTITLE: Basic make.jl for Documenter\nDESCRIPTION: A minimal make.jl script that uses Documenter to build documentation for an Example package.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\nusing Documenter, Example\n\nmakedocs(sitename=\"My Documentation\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Sidebar Structure\nDESCRIPTION: Shows how to organize documentation pages in the sidebar using the makedocs function's pages argument.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_23\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    ...,\n    pages = [\n        \"page.md\",\n        \"Page title\" => \"page2.md\",\n        \"Subsection\" => [\n            ...\n        ]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Content Blocks in Documentation\nDESCRIPTION: Demonstrates how to customize @contents blocks with specific page inclusion and depth settings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n```@contents\nPages = [\"foo.md\", \"bar.md\"]\nDepth = 3\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation-Specific Project Environment\nDESCRIPTION: Commands to set up a documentation-specific project environment in the docs/ subdirectory of a package.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\npkg> activate docs/\n\n(docs) pkg> add Documenter\n```\n\n----------------------------------------\n\nTITLE: Installing Documenter with Julia Package Manager\nDESCRIPTION: Commands to install Documenter using Julia's package manager. Shows both global installation and project-specific installation in a docs/ subdirectory.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npkg> add Documenter\n```\n\n----------------------------------------\n\nTITLE: Documentation Directory Structure\nDESCRIPTION: Shows the recommended structure inside the docs/ directory, including the source folder for markdown files and the make.jl script.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\ndocs/\n├── src/\n└── make.jl\n```\n\n----------------------------------------\n\nTITLE: Creating @docs Block in Markdown\nDESCRIPTION: Demonstrates how to create a @docs block in Markdown to splice one or more docstrings into a document.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs\nDocumenter\nmakedocs\ndeploydocs\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Structure with Contents and Index\nDESCRIPTION: Shows how to create an auto-generated table of contents and function index in documentation using special markdown blocks.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n# Example.jl Documentation\n\n```@contents\n```\n\n## Functions\n\n```@docs\nfunc(x)\n```\n\n## Index\n\n```@index\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering for @autodocs in Markdown\nDESCRIPTION: Shows how to use a custom filter function with @autodocs to selectively include docstrings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```@autodocs\nModules = [Foo]\nFilter = t -> typeof(t) === DataType && t <: Foo.C\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Public Interface Functions\nDESCRIPTION: Documentation block listing all public interface functions and types that should be documented, including core Documenter functions and utilities.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/public.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs\nDocumenter\nmakedocs\nDocumenter.except\nhide\nDocumenter.MissingRemoteError\nasset\ndeploydocs\ndoctest\nDocMeta\nDocMeta.getdocmeta\nDocMeta.setdocmeta!\n```\n```\n\n----------------------------------------\n\nTITLE: Including Docstrings with @docs Block in Julia\nDESCRIPTION: Demonstrates how to include docstrings in documentation using the @docs block. It shows examples of including single and multiple docstrings, as well as docstrings for specific function signatures.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs\nDocumenterShowcase\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs\nDocumenterShowcase.foo(::Integer)\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs\nDocumenterShowcase.bar\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs; canonical=false\nDocumenterShowcase.bar\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata with @meta Block in Markdown\nDESCRIPTION: This snippet demonstrates how to use the @meta block to define metadata key/value pairs. It includes examples of setting CurrentModule, DocTestSetup, DocTestFilters, and EditURL.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```@meta\nCurrentModule = FooBar\nDocTestSetup  = quote\n    using MyPackage\nend\nDocTestFilters = [r\"Stacktrace:[\\s\\S]+\"]\nEditURL = \"link/to/source/file\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Julia Documentation\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to build and deploy Julia package documentation on pushes to the main branch and pull requests. It installs Julia, checks out the repository, caches dependencies, and runs the documentation build process.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Documentation\n\non:\n  push:\n    branches:\n      - master # update to match your development branch (master, main, dev, trunk, ...)\n    tags: '*'\n  pull_request:\n\njobs:\n  build:\n    # These permissions are needed to:\n    # - Deploy the documentation: https://documenter.juliadocs.org/stable/man/hosting/#Permissions\n    # - Delete old caches: https://github.com/julia-actions/cache#usage\n    permissions:\n      actions: write\n      contents: write\n      pull-requests: read\n      statuses: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: julia-actions/setup-julia@v2\n        with:\n          version: '1'\n      - uses: julia-actions/cache@v2\n      - name: Install dependencies\n        shell: julia --color=yes --project=docs {0}\n        run: |\n          using Pkg\n          Pkg.develop(PackageSpec(path=pwd()))\n          Pkg.instantiate()\n      - name: Build and deploy\n        run: julia --color=yes --project=docs docs/make.jl\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # If authenticating with GitHub Actions token\n          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }} # If authenticating with SSH deploy key\n```\n\n----------------------------------------\n\nTITLE: Defining a Script Doctest in Markdown\nDESCRIPTION: Demonstrates how to create a script-style doctest in Markdown. The code block must use the 'jldoctest' language identifier and include a '# output' line to separate the input from the expected output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/doctests.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```jldoctest\na = 1\nb = 2\na + b\n\n# output\n\n3\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up DocTestSetup and DocTestTeardown in @meta Blocks\nDESCRIPTION: Demonstrates how to use @meta blocks to define setup and teardown code for doctests in Markdown files. This code is evaluated before and after each doctest block but not displayed in the final documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/doctests.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```@meta\nDocTestSetup = quote\n    function foo(x)\n        return x^2\n    end\nend\n\nDocTestTeardown = quote\n    # restore settings, release resources, ...\nend\n```\n\n```jldoctest\njulia> foo(2)\n4\n```\n\n```@meta\nDocTestSetup = nothing\nDocTestTeardown = nothing\n```\n```\n\n----------------------------------------\n\nTITLE: Package Structure with Documentation Directory\nDESCRIPTION: Shows the recommended directory structure for a Julia package with a docs/ folder for documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nExample/\n├── docs/\n│   └── ...\n├── src/\n│   └── Example.jl\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring External Cross-References in Julia Documenter\nDESCRIPTION: Shows how to set up external documentation cross-references using DocumenterInterLinks plugin. This enables linking to other projects' documentation through their inventory files.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_19\n\nLANGUAGE: julia\nCODE:\n```\nusing DocumenterInterLinks\n\nlinks = InterLinks(\n    \"Documenter\" => \"https://documenter.juliadocs.org/stable/objects.inv\"\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown with @meta Block for Module Context\nDESCRIPTION: Example of a markdown file that uses @meta to set the current module context for docstring evaluation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n# Example.jl Documentation\n\n```@meta\nCurrentModule = Example\n```\n\n```@docs\nfunc(x)\n```\n```\n\n----------------------------------------\n\nTITLE: Preserving Definitions Between Doctest Blocks\nDESCRIPTION: Shows how to use labels to preserve definitions across multiple doctest blocks. Blocks with the same label share the same module scope.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/doctests.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```jldoctest mylabel\njulia> foo = 42\n42\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```jldoctest mylabel\njulia> println(foo)\n42\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Module-level Metadata for Doctests in Julia\nDESCRIPTION: Shows how to set up module-level metadata for doctests in docstrings using the DocMeta module. This should be done before calling makedocs or doctest.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/doctests.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\nusing MyPackage, Documenter\nDocMeta.setdocmeta!(MyPackage, :DocTestSetup, :(using MyPackage); recursive=true)\nmakedocs(modules=[MyPackage], ...)\n```\n\n----------------------------------------\n\nTITLE: Building Documentation from Command Line\nDESCRIPTION: Command to run the make.jl script to build the documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ julia --project make.jl\n```\n\n----------------------------------------\n\nTITLE: Basic @example Block Usage in Julia\nDESCRIPTION: Demonstrates a simple @example block that evaluates basic arithmetic operations and shows both code and output in the final document.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_14\n\nLANGUAGE: julia\nCODE:\n```\na = 1\nb = 2\na + b\n```\n\n----------------------------------------\n\nTITLE: Markdown with Cross-References\nDESCRIPTION: Example of a markdown file that includes cross-references to both a section header and a docstring using the @ref syntax.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n# Example.jl Documentation\n\n```@docs\nfunc(x)\n```\n\n- link to [Example.jl Documentation](@ref)\n- link to [`func(x)`](@ref)\n```\n\n----------------------------------------\n\nTITLE: Setting DocTestSetup for Module Docstrings in Julia\nDESCRIPTION: Example of using DocMeta.setdocmeta! to set up DocTestSetup for all docstrings in a particular module in the make.jl script.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: julia\nCODE:\n```\nDocMeta.setdocmeta!(ModuleName, :DocTestSetup, setup_expr; recursive=true)\n```\n\n----------------------------------------\n\nTITLE: Documenting Functions and Macros in Julia\nDESCRIPTION: This snippet documents several Julia functions and macros, including custom functions, built-in functions, and special forms.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\nfunc(x)\nT\nccall\nfor\nwhile\n@time\n@assert\n```\n```\n\n----------------------------------------\n\nTITLE: Example Module with Documented Function\nDESCRIPTION: Example of a Julia module with a documented function that will be included in the documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_12\n\nLANGUAGE: julia\nCODE:\n```\nmodule Example\n\nexport func\n\n\"\"\"\n    func(x)\n\nReturn double the number `x` plus `1`.\n\"\"\"\nfunc(x) = 2x + 1\n\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Method Extension with Docstring\nDESCRIPTION: Shows how to add a docstring to a method that extends a function from a different module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_15\n\nLANGUAGE: julia\nCODE:\n```\nstruct T\n    # ...\nend\n\n\"\"\"\nCustom `length` docs for `T`.\n\"\"\"\nBase.length(::T) = 1\n```\n\n----------------------------------------\n\nTITLE: Julia Styling Guidelines\nDESCRIPTION: Lists of formatting and style conventions for Julia code in Documenter.jl, including function definitions, method arrangements, naming conventions, and code organization rules.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* use `function ... end` when a method definition contains more than one toplevel expression;\n* related short-form method definitions don't need a new line between them;\n* unrelated or long-form method definitions must have a blank line separating each one;\n* files containing a single `module ... end` must be named after the module;\n* method arguments should be ordered based on the amount of usage within the method body;\n* methods extended from other modules must follow their inherited argument order, not the above rule;\n* avoid dense expressions where possible e.g. prefer nested `if`s over complex nested `?`s;\n* do not use multiline comments (`#=` and `=#`);\n* wrap long lines as near to 92 characters as possible, this includes docstrings;\n* follow the standard naming conventions used in `Base`.\n```\n\n----------------------------------------\n\nTITLE: Using deploydocs Function in Julia Documentation Build\nDESCRIPTION: This Julia code snippet shows how to use the deploydocs function from Documenter.jl to specify the repository where the documentation should be deployed. It should be added to the docs/make.jl file after the makedocs call.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_8\n\nLANGUAGE: julia\nCODE:\n```\ndeploydocs(\n    repo = \"github.com/USER_NAME/PACKAGE_NAME.jl.git\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a REPL Doctest in Markdown\nDESCRIPTION: Illustrates how to create a REPL-style doctest in Markdown. The code block must use the 'jldoctest' language identifier and include 'julia> ' prompts to simulate REPL input.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/doctests.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```jldoctest\njulia> a = 1\n1\n\njulia> b = 2;\n\njulia> c = 3;  # comment\n\njulia> a + b + c\n6\n```\n```\n\n----------------------------------------\n\nTITLE: Example Package File Structure\nDESCRIPTION: Shows the recommended directory structure for a Julia package with documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nExample/\n├── src/\n│   └── Example.jl\n...\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for Julia Modules\nDESCRIPTION: This code block uses the @autodocs macro to automatically generate documentation for specified modules and files in the Documenter.jl project. It filters out the 'asset' type and includes specific source files.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/writers.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [\n    Documenter,\n    Documenter.HTMLWriter,\n    Documenter.HTMLWriter.RD,\n    Documenter.LaTeXWriter,\n]\nFilter = t -> t !== asset\nPages = [\"writers.jl\", \"html/HTMLWriter.jl\", \"html/RD.jl\", \"html/write_inventory.jl\", \"latex/LaTeXWriter.jl\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Including Specific Method Docstring\nDESCRIPTION: Shows how to reference a specific method docstring in a @docs block by including the type signature.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs\nlength(::T)\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Styling Guidelines\nDESCRIPTION: Formatting and style conventions for Markdown documentation in Documenter.jl, including header formatting, list styling, and code block usage.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Use unbalanced `#` headers, i.e. no `#` on the right hand side of the header text;\n* include a single blank line between toplevel blocks;\n* unordered lists must use `*` bullets with two preceding spaces;\n* do *not* hard wrap lines;\n* use emphasis (`*`) and bold (`**`) sparingly;\n* always use fenced code blocks instead of indented blocks;\n* follow the conventions outlined in the Julia documentation page on documentation.\n```\n\n----------------------------------------\n\nTITLE: Documenting Julia Functions with Docstrings in Documenter.jl\nDESCRIPTION: Demonstrates how to include Julia docstrings in documentation using the @docs block. This example references the DocumenterShowcase.baz function.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\n@docs\nDocumenterShowcase.baz\n```\n\n----------------------------------------\n\nTITLE: Installing Documenter.jl using Julia Package Manager\nDESCRIPTION: This snippet demonstrates how to install Documenter.jl using Julia's package manager in REPL mode. It requires entering the Pkg REPL mode by typing ']'.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npkg> add Documenter\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents with @contents Block in Markdown\nDESCRIPTION: This snippet shows how to use the @contents block to generate a nested list of links to document sections. It includes examples of specifying Pages and Depth settings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n```@contents\nPages = [\"foo.md\"]\nDepth = 5\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for Documenter Module\nDESCRIPTION: Configures automatic documentation generation for the Documenter module, specifically targeting contents from documents.jl file.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/documents.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n@autodocs\nModules = [Documenter]\nPages = [\"documents.jl\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-based LaTeX Compilation in Julia for Documenter\nDESCRIPTION: This snippet shows how to configure Documenter to use a Docker image for LaTeX compilation. It specifies the 'docker' platform in the LaTeX format option.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/other-formats.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nusing Documenter\nmakeocs(\n    format = Documenter.LaTeX(platform = \"docker\"),\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Complex @index Block with Julia Code in Markdown\nDESCRIPTION: This snippet demonstrates a more complex use of the @index block, where the Pages setting is dynamically generated using Julia code.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n```@index\nPages = map(file -> joinpath(\"man\", file), readdir(\"man\"))\n```\n```\n\n----------------------------------------\n\nTITLE: Named @example Blocks with Shared State\nDESCRIPTION: Demonstrates how to use named @example blocks to share variables between multiple code blocks in the same module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_16\n\nLANGUAGE: julia\nCODE:\n```\na = 1\n```\n\nLANGUAGE: julia\nCODE:\n```\nprintln(a)\n```\n\n----------------------------------------\n\nTITLE: Filtering Public Names in @autodocs\nDESCRIPTION: Demonstrates how to show only public names in @autodocs using the Private keyword.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```@autodocs\nModules = [Foo]\nPrivate = false\nOrder = [:function]\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Autodocs for Documenter.Selectors Module in Julia\nDESCRIPTION: This code snippet uses the @autodocs macro to automatically generate documentation for the Documenter.Selectors module. It will include all docstrings and other documentable elements from this module in the final documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/selectors.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [Documenter.Selectors]\n```\n```\n\n----------------------------------------\n\nTITLE: Using Block-level Setup in Markdown Doctest\nDESCRIPTION: Demonstrates how to use the 'setup' keyword argument for block-level setup in a markdown doctest. This is useful for short definitions or setups needed in inline docstrings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/doctests.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```jldoctest; setup = :(foo(x) = x^2)\njulia> foo(2)\n4\n```\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Private Key from File Path in Julia\nDESCRIPTION: Julia code to read a private key from a specified file path, encode it in Base64, and print the result. This encoded key is used for CI environment variables.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting/walkthrough.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\nusing Base64\n\nread(\"path/to/private/key\", String) |> base64encode |> println\n```\n\n----------------------------------------\n\nTITLE: Basic Cross-References in Julia Documentation\nDESCRIPTION: Demonstrates basic cross-reference syntax using @ref macro to link to other sections of documentation\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/xrefs.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [X-ref target](@ref)\n* [`Mod.func`](@ref)\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for DocTests Module\nDESCRIPTION: This directive uses Documenter.jl's @autodocs functionality to automatically generate documentation for the doctests.jl file within the Documenter module, which likely contains functionality for parsing and running doctests.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/doctests.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```@autodocs\nModules = [Documenter]\nPages = [\"doctests.jl\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Using External References in Markdown Documentation\nDESCRIPTION: Demonstrates the syntax for creating external references in markdown documentation using the @extref directive.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\nSee the [`Documenter.makedocs`](@extref) function.\n```\n\n----------------------------------------\n\nTITLE: Generating Docstring Links with @index Block in Markdown\nDESCRIPTION: This snippet shows how to use the @index block to generate a list of links to docstrings. It includes examples of specifying Pages, Modules, and Order settings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```@index\nPages   = [\"foo.md\"]\nModules = [Foo, Bar]\nOrder   = [:function, :type]\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Autodocs for Anchors in Documenter.jl\nDESCRIPTION: This code snippet uses the @autodocs macro to automatically generate documentation for the anchors.jl file in the Documenter module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/anchors.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [Documenter]\nPages = [\"anchors.jl\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Docstrings in Julia\nDESCRIPTION: Shows how to reference and display docstrings for specific functions and types using the @docs block.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/docstrings.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@docs\nMod.func\nMod.T\n```\n\n----------------------------------------\n\nTITLE: Configuring makedocs in Julia\nDESCRIPTION: Shows how to configure makedocs function to include all docstrings from a specific module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    modules = [Documenter],\n)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Output in Script Doctest\nDESCRIPTION: Shows how to suppress the output of a script doctest by setting the 'output' keyword argument to false. The expected output is still compared but not displayed in the rendered documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/doctests.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```jldoctest; output = false\na = 1\nb = 2\na + b\n\n# output\n\n3\n```\n```\n\n----------------------------------------\n\nTITLE: Writing Doctests in Julia Documentation\nDESCRIPTION: Explains how to write doctests in Julia documentation using the jldoctest code block. It includes examples of both REPL-style and script-style doctests, as well as setup and teardown code for tests.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_7\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\njulia> f(x) = x^2\nf (generic function with 1 method)\n\njulia> f(3)\n9\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\n2 + 2\n# output\n4\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest; setup=:(using Documenter)\njulia> Documenter.splitexpr(:(Foo.Bar.baz))\n(:(Foo.Bar), :(:baz))\n```\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```@meta\nDocTestSetup = quote\n  f(x) = x^2\nend\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest; setup=:(oldprec=precision(BigFloat);setprecision(BigFloat,20)), teardown=:(setprecision(BigFloat,oldprec))\njulia> sqrt(big(2.0))\n1.4142132\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Automated Documentation for DocSystem Module\nDESCRIPTION: Uses the @autodocs macro to automatically generate documentation for all exported symbols in the Documenter.DocSystem module. This creates comprehensive API documentation from docstrings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/docsystem.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n@autodocs\nModules = [Documenter.DocSystem]\n```\n\n----------------------------------------\n\nTITLE: @setup Block with DataFrame Example\nDESCRIPTION: Demonstrates use of @setup blocks for hidden initialization code that supports subsequent visible examples.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_20\n\nLANGUAGE: julia\nCODE:\n```\nusing RDatasets\nusing DataFrames\niris = dataset(\"datasets\", \"iris\")\n```\n\nLANGUAGE: julia\nCODE:\n```\nprintln(iris)\n```\n\n----------------------------------------\n\nTITLE: Setting up Docstring Sharing in Documenter.jl\nDESCRIPTION: Example of using ShareDefaultModule metadata setting to share sandbox modules across code blocks\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nShareDefaultModule = true\n```\n\n----------------------------------------\n\nTITLE: Automatic Documentation Generation in Julia\nDESCRIPTION: Uses @autodocs block to automatically generate documentation for all items in specified modules.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/docstrings.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\n@autodocs\nModules = [Main.AutoDocs]\n```\n\n----------------------------------------\n\nTITLE: Simulating REPL Evaluation with @repl Block in Julia\nDESCRIPTION: Shows how to use the @repl block to simulate REPL-style code evaluation in documentation. This is useful for demonstrating interactive code sessions with input and output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```@repl\nusing Statistics\nxs = collect(1:10)\nmedian(xs)\nsum(xs)\n```\n```\n\n----------------------------------------\n\nTITLE: SVG Generation and Display\nDESCRIPTION: Defines an SVG struct and display method for rendering SVG graphics in documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/man/tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nstruct SVG\n    code :: String\nend\nBase.show(io, ::MIME\"image/svg+xml\", svg::SVG) = write(io, svg.code)\n```\n\n----------------------------------------\n\nTITLE: Escaping Characters in Julia Docstrings for LaTeX\nDESCRIPTION: Example showing how to escape special LaTeX characters like $ and \\ in Julia docstrings. Characters need to be escaped with a backslash when used in documentation strings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/latex.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n\"\"\"\\nHere's some inline maths: ``\\\\sqrt[n]{1 + x + x^2 + \\\\ldots}``.\\n\\nHere's an equation:\\n\\n``\\\\frac{n!}{k!(n - k)!} = \\\\binom{n}{k}``\\n\\nThis is the binomial coefficient.\\n\"\"\"\nfunc(x) = # ...\n```\n\n----------------------------------------\n\nTITLE: Display LaTeX Equations in Markdown\nDESCRIPTION: Examples of display-style LaTeX equations in Markdown. Shows how to create standalone equations and systems of equations using LaTeX syntax and the math code block.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/latex.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nHere's an equation:\\n\\n```math\\n\\frac{n!}{k!(n - k)!} = \\binom{n}{k}\\n```\\n\\nThis is the binomial coefficient.\\n\\n---\\n\\nTo write a system of equations, use the `aligned` environment:\\n\\n```math\\n\\begin{aligned}\\n\\nabla\\cdot\\mathbf{E}  &= 4 \\pi \\rho \\\\\\n\\nabla\\cdot\\mathbf{B}  &= 0 \\\\\\n\\nabla\\times\\mathbf{E} &= - \\frac{1}{c} \\frac{\\partial\\mathbf{B}}{\\partial t} \\\\\\n\\nabla\\times\\mathbf{B} &= - \\frac{1}{c} \\left(4 \\pi \\mathbf{J} + \\frac{\\partial\\mathbf{E}}{\\partial t} \\right)\\n\\end{aligned}\\n```\\n\\nThese are Maxwell's equations.\n```\n\n----------------------------------------\n\nTITLE: Generating Autodocs for Julia Modules\nDESCRIPTION: These snippets demonstrate various ways to generate autodocs for Julia modules, including filtering by type and specifying pages.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_19\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [AutoDocs]\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [AutoDocs.A, AutoDocs.B]\nOrder   = [:function, :module, :macro]\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [AutoDocs.A, AutoDocs.B]\nOrder   = [:constant, :type]\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [AutoDocs.Pages]\nPages = [\"a.jl\", \"b.jl\"]\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [AutoDocs.Pages]\nPages = [\"c.jl\", \"d.jl\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling Docstring Collapse State\nDESCRIPTION: Setting metadata to control initial collapse state of docstrings on a page\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nCollapsedDocStrings = true\n```\n\n----------------------------------------\n\nTITLE: Configuring makedocs with Specific Modules\nDESCRIPTION: Shows how to configure makedocs to include docstrings only from specific modules.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_17\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    # options\n    modules = [MyModule]\n)\n```\n\n----------------------------------------\n\nTITLE: Updating HTML Arguments in makedocs for Julia\nDESCRIPTION: Demonstrates how to update HTML-related arguments in makedocs from using separate keyword arguments to using the Documenter.HTML format plugin. This change was part of deprecating individual HTML-related arguments.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    html_prettyurls = ..., html_canonical = ...,\n    ...\n)\n```\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    format = Documenter.HTML(prettyurls = ..., canonical = ...),\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Docstring Index in Julia Documentation\nDESCRIPTION: Creates an index of all docstrings on the specified pages using the @index block.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/docstrings.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n@index\nPages = [\"docstrings.md\"]\n```\n\n----------------------------------------\n\nTITLE: Basic @repl Block Example\nDESCRIPTION: Shows basic usage of @repl blocks which simulate REPL interaction with julia> prompts and output formatting.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_19\n\nLANGUAGE: julia\nCODE:\n```\na = 1\nb = 2\na + b\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for Expander Pipeline in Julia\nDESCRIPTION: Autodocs directive that automatically generates documentation for the expander_pipeline.jl file from the Documenter and Documenter.Expanders modules. This pulls in all docstrings and creates structured documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/expanders.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```@autodocs\nModules = [Documenter, Documenter.Expanders]\nPages = [\"expander_pipeline.jl\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Documentation Deployment in Julia\nDESCRIPTION: Code snippet showing how to enable preview documentation deployment from pull requests by passing the push_preview parameter to the deploydocs function.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: julia\nCODE:\n```\ndeploydocs(push_preview=true)\n```\n\n----------------------------------------\n\nTITLE: DocTestSetup in Julia Doctests\nDESCRIPTION: An example of using DocTestSetup to define helper functions for use in doctests, specifically for mocking the 'methods' function output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/working.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nDocTestSetup = quote\n    methods(args...) = Text(\"\"\"\n    # 1 method for generic function \"f\":\n    [1] f() in Main at none:1\n    \"\"\")\nend\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\njulia> f()=0\nf (generic function with 1 method)\n\njulia> methods(f)\n# 1 method for generic function \"f\":\n[1] f() in Main at none:1\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nDocTestSetup = nothing\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Admonition Styles in Documenter.jl\nDESCRIPTION: This snippet demonstrates how to add custom CSS styles to admonitions in Documenter.jl. It shows the configuration for including a custom CSS file in the makedocs function.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/man/style.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    # ...\n    format=Documenter.HTML(;\n        #...\n        assets=[\"assets/custom.css\"]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Generating a Table of Contents in Documenter.jl\nDESCRIPTION: Demonstrates how to create a table of contents using the @contents block. This specific example generates a table of contents for just the current page (showcase.md).\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@contents\nPages = [\"showcase.md\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF/LaTeX Output in Julia using Documenter\nDESCRIPTION: This snippet demonstrates how to configure Documenter to use the PDF/LaTeX backend for output generation. It uses the Documenter.LaTeX() object as the format option in the makedocs function.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/other-formats.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nusing Documenter\nmakeocs(format = Documenter.LaTeX(), ...)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Doc Preview Cleanup Workflow\nDESCRIPTION: GitHub Actions workflow configuration for cleaning up documentation preview builds. Handles force pushing to gh-pages branch and manages concurrent executions.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nconcurrency:\n  group: doc-preview-cleanup\n  cancel-in-progress: false\n\njobs:\n  doc-preview-cleanup:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Checkout gh-pages branch\n        uses: actions/checkout@v4\n        with:\n          ref: gh-pages\n      - name: Delete preview and history + push changes\n        run: |\n          if [ -d \"${preview_dir}\" ]; then\n              git config user.name \"Documenter.jl\"\n              git config user.email \"documenter@juliadocs.github.io\"\n              git rm -rf \"${preview_dir}\"\n              git commit -m \"delete preview\"\n              git branch gh-pages-new \"$(echo \"delete history\" | git commit-tree \"HEAD^{tree}\")\"\n              git push --force origin gh-pages-new:gh-pages\n          fi\n        env:\n          preview_dir: previews/PR${{ github.event.number }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Docstring Index with @index Block in Julia\nDESCRIPTION: Shows how to generate an index of all docstrings on a page using the @index block. This is useful for creating a summary of all documented items.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```@index\nPages = [\"showcase.md\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Output in Documenter\nDESCRIPTION: Example of how to pass configuration options to the HTML output format in Documenter, including asset and analytics settings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    format = Documenter.HTML(assets = ..., analytics = ...),\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering @autodocs by Source Files in Markdown\nDESCRIPTION: Demonstrates how to filter @autodocs content based on source file paths.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```@autodocs\nModules = [Foo]\nPages   = [\"a.jl\", \"b.jl\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Public Functions with @autodocs\nDESCRIPTION: Uses @autodocs to document only public functions from AutoDocs.Pages.E module, ordering them by function type.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/autodocs.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [AutoDocs.Pages.E]\nPrivate = false\nOrder = [:function]\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Error Messages in Julia Doctests\nDESCRIPTION: This example shows how to test error conditions in doctests. It triggers an error with a specific message and verifies the expected error output and stacktrace pattern.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/broken.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\njulia> error(\"0123456789\")\nERROR: ABCDEFGHIJ\nStacktrace:\n [...]\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for Cross-References in Julia\nDESCRIPTION: This code snippet uses the @autodocs macro to automatically generate documentation for cross-reference functionality. It specifically targets the Documenter and Documenter.XRefResolvers modules, focusing on the cross_references.jl file.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/crossref.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [Documenter, Documenter.XRefResolvers]\nPages = [\"cross_references.jl\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Index\nDESCRIPTION: Configuration block for generating an index of documentation entries from public.md page.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/public.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```@index\nPages = [\"public.md\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Updating makedocs Format Argument in Julia\nDESCRIPTION: Shows how to update the format argument of makedocs from using a symbol to using a struct instance, specifically for Markdown output. This change was introduced as part of deprecating symbol values for the format argument.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    format = :markdown\n)\n```\n\nLANGUAGE: julia\nCODE:\n```\nusing DocumenterMarkdown\nmakedocs(\n    format = Markdown()\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for Julia Module\nDESCRIPTION: This code snippet uses the @autodocs macro from Documenter.jl to automatically generate documentation for the FooWorking module within the DocTestsTests package. It extracts and formats documentation strings and other metadata from the source code.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/fooworking.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [DocTestsTests.FooWorking]\n```\n```\n\n----------------------------------------\n\nTITLE: Generating PNG Output with @example in Julia\nDESCRIPTION: These snippets demonstrate how to use the @example macro to generate PNG output files in different sizes. The AT_EXAMPLE_FILES dictionary is accessed with tuples specifying the file format and size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/outputs.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"png\", :big)]\n```\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"png\", :tiny)]\n```\n\n----------------------------------------\n\nTITLE: Filtering Floating-Point Output with Regex in Julia Doctests\nDESCRIPTION: This doctest demonstrates how to use regex filtering to handle floating-point precision in test outputs. The filter replaces digits after the first 8 decimal places with asterisks to avoid precision-related test failures.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/broken.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\njulia> sqrt(2)\n1.4142999999999\n```\n\n----------------------------------------\n\nTITLE: Documenter Remotes API Documentation Strings\nDESCRIPTION: Documentation blocks for the main Documenter.Remotes API types, classes and functions. Includes documentation for GitHub and GitLab remote types as well as core Remote functionality for custom implementations.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/remote-links.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@docs\nDocumenter.Remotes\nDocumenter.Remotes.GitHub\nDocumenter.Remotes.GitLab\n```\n\nLANGUAGE: julia\nCODE:\n```\n@docs\nDocumenter.Remotes.Remote\nDocumenter.Remotes.repourl\nDocumenter.Remotes.fileurl\nDocumenter.Remotes.issueurl\n```\n\n----------------------------------------\n\nTITLE: Configuring KaTeX Math Engine in Documenter HTML Output\nDESCRIPTION: Example of how to configure the math rendering engine for Documenter's HTML output, specifically switching back to MathJax instead of the default KaTeX.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: julia\nCODE:\n```\nHTML(mathengine = Documenter.MathJax())\n```\n\n----------------------------------------\n\nTITLE: Generating Autodocs for Documenter.jl Builder Module in Julia\nDESCRIPTION: This code snippet uses the @autodocs macro to automatically generate documentation for the Documenter and Documenter.Builder modules, specifically for the 'builder_pipeline.jl' file.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/builder.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [Documenter, Documenter.Builder]\nPages = [\"builder_pipeline.jl\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Output with Syntax Highlighting in Julia\nDESCRIPTION: Example configuration for enabling colored output and prerendered syntax highlighting in Documenter's HTML output. Requires Julia >= 1.6 and passing specific options to Documenter.HTML.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\nusing Documenter, NodeJS_16_jll\n\nmakedocs(;\n    format = Documenter.HTML(\n        prerender = true,            # enable prerendering\n        node = NodeJS_16_jll.node(), # specify node executable (required if not available in PATH)\n        # ...\n    )\n    # ...\n)\n```\n\n----------------------------------------\n\nTITLE: Using Raw String Macro for LaTeX in Docstrings\nDESCRIPTION: Demonstrates how to use the raw string macro with @doc to avoid needing to escape special LaTeX characters in docstrings. This provides a cleaner syntax for writing mathematical expressions.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/latex.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n@doc raw\"\"\"\\nHere's some inline maths: ``\\sqrt[n]{1 + x + x^2 + \\ldots}``.\\n\\nHere's an equation:\\n\\n``\\frac{n!}{k!(n - k)!} = \\binom{n}{k}``\\n\\nThis is the binomial coefficient.\\n\"\"\"\nfunc(x) = # ...\n```\n\n----------------------------------------\n\nTITLE: Running Doctests Only in Documenter\nDESCRIPTION: Shows how to run only the doctests in Documenter without performing other build steps by setting the doctest parameter in makedocs.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(doctest = :only)\n```\n\n----------------------------------------\n\nTITLE: Generating WebP Output with @example in Julia\nDESCRIPTION: These examples show how to use the @example macro to create WebP output files in different sizes. The AT_EXAMPLE_FILES dictionary is accessed with tuples specifying the WebP format and size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/outputs.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"webp\", :big)]\n```\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"webp\", :tiny)]\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for MDFlatten Module in Julia\nDESCRIPTION: Uses the @autodocs macro to automatically include documentation for all components (functions, types, etc.) defined in the Documenter.MDFlatten module. This extracts and formats docstrings from the source code.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/mdflatten.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n@autodocs\nModules = [Documenter.MDFlatten]\n```\n\n----------------------------------------\n\nTITLE: Cross-Reference Headers with ID Tags\nDESCRIPTION: Examples of creating section headers with cross-reference IDs for linking\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/xrefs.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [X-ref target with id](@id xreftarget)\n\n## [x-ref with `@code` block](@id xrefcodeblock)\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax in Julia Documenter HTML Output\nDESCRIPTION: Example showing how to update MathJax configuration from deprecated MathJax to MathJax2 in makedocs settings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    format = Documenter.HTML(mathengine = Documenter.MathJax(...), ...),\n    ...\n)\n```\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    format = Documenter.HTML(mathengine = Documenter.MathJax2(...), ...),\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Using Labeled REPL Sessions in Julia Documentation\nDESCRIPTION: These snippets demonstrate the use of labeled REPL sessions, allowing for continuation of context across multiple code blocks.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_16\n\nLANGUAGE: julia\nCODE:\n```\n```@repl 1\nd = 1\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@repl 1\nprintln(d)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining and Instantiating a Struct in Julia Documentation\nDESCRIPTION: This snippet defines a struct and creates an instance of it, showcasing object-oriented programming in Julia.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_8\n\nLANGUAGE: julia\nCODE:\n```\n```@example 3\nstruct T end\nt = T()\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring docs/Project.toml for Documenter Dependency\nDESCRIPTION: This TOML configuration specifies Documenter as a dependency for the documentation build environment and sets a compatibility bound to ensure stable builds.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[deps]\nDocumenter = \"e30172f5-a6a5-5a46-863b-614d45cd2de4\"\n\n[compat]\nDocumenter = \"1.3\"\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for DocChecks Module in Julia\nDESCRIPTION: This code snippet uses the @autodocs macro to automatically generate documentation for the DocChecks module. It specifically targets the 'docchecks.jl' file within the Documenter module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/docchecks.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [Documenter]\nPages = [\"docchecks.jl\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Installing DocumenterTools Package\nDESCRIPTION: Julia package manager command to install the DocumenterTools package required for generating deployment keys.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\npkg> add DocumenterTools\n```\n\n----------------------------------------\n\nTITLE: Generating Deploy Keys with DocumenterTools\nDESCRIPTION: Examples of using DocumenterTools.genkeys() to generate SSH deploy keys for documentation deployment, showing both manual specification and package-based methods.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\njulia> using DocumenterTools\njulia> DocumenterTools.genkeys(user=\"MyUser\", repo=\"MyPackage.jl\")\n```\n\nLANGUAGE: julia\nCODE:\n```\njulia> using MyPackage\njulia> DocumenterTools.genkeys(MyPackage)\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax for LaTeX in Documenter\nDESCRIPTION: Examples of configuring the MathJax math engine for Documenter with custom LaTeX macros and settings. Shows how to define global LaTeX commands and enable equation numbering with MathJax v2.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/latex.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\nmathengine = Documenter.MathJax(Dict(:TeX => Dict(\n    :equationNumbers => Dict(:autoNumber => \"AMS\"),\n    :Macros => Dict(\n        :ket => [\"|#1\\\\rangle\", 1],\n        :bra => [\"\\\\langle#1|\", 1],\n    ),\n)))\n```\n\n----------------------------------------\n\nTITLE: Documenting DocumenterTools Functions\nDESCRIPTION: Documentation block for DocumenterTools-specific functions including generation and key management utilities.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/public.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs\nDocumenterTools.generate\nDocumenterTools.genkeys\nDocumenterTools.OutdatedWarning.generate\n```\n```\n\n----------------------------------------\n\nTITLE: Using Assertions and Previous Results in Julia Documentation\nDESCRIPTION: This snippet demonstrates the use of assertions and accessing previous results in Julia documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_14\n\nLANGUAGE: julia\nCODE:\n```\n```@example\na = 1\nb = ans\n@assert a === b\n```\n```\n\n----------------------------------------\n\nTITLE: Printing LaTeX Equations from Julia\nDESCRIPTION: These examples demonstrate how to pretty-print LaTeX equations from Julia by overloading Base.show for the MIME\"text/latex\" type.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_simple/index.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\nstruct LaTeXEquation\n    content::String\nend\n\nfunction Base.show(io::IO, ::MIME\"text/latex\", x::LaTeXEquation)\n    # Wrap in $$ for display math printing\n    return print(io, \"\\$\\$ \" * x.content * \" \\$\\$\")\nend\n\nLaTeXEquation(raw\"\"\"\n    \\left[\\begin{array}{c}\n        x \\\\\n        y\n    \\end{array}\\right]\n\"\"\")\n```\n\nLANGUAGE: julia\nCODE:\n```\nstruct LaTeXEquation2\n    content::String\nend\n\nfunction Base.show(io::IO, ::MIME\"text/latex\", x::LaTeXEquation2)\n    # Wrap in \\[...\\] for display math printing\n    return print(io, \"\\\\[ \" * x.content * \" \\\\]\")\nend\n\nLaTeXEquation2(raw\"\"\"\n    \\left[\\begin{array}{c}\n        x \\\\\n        y\n    \\end{array}\\right]\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Auto-generating Documentation for the JSDependencies Module\nDESCRIPTION: This snippet uses the @autodocs directive to automatically generate documentation for all items in the Documenter.jl's JSDependencies module. It extracts and formats documentation strings from the specified module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/jsdependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```@autodocs\nModules = [Documenter.JSDependencies]\n```\n```\n\n----------------------------------------\n\nTITLE: Documenter Build Output Structure\nDESCRIPTION: Shows the directory structure created by Documenter in the build/ directory.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nbuild/\n├── assets\n│   ├── documenter.js\n│   ├── themes\n│   │   ├── documenter-dark.css\n│   │   └── documenter-light.css\n│   ├── themeswap.js\n│   └── warner.js\n├── index.html\n├── search\n│   └── index.html\n└── search_index.js\n```\n\n----------------------------------------\n\nTITLE: Configuring MathJax v3 with Physics Package\nDESCRIPTION: Example of setting up MathJax v3 with the physics package for LaTeX rendering in Documenter. Shows how to load additional LaTeX packages and configure math delimiters.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/latex.md#2025-04-22_snippet_7\n\nLANGUAGE: julia\nCODE:\n```\nmathengine = MathJax3(Dict(\n    :loader => Dict(\"load\" => [\"[tex]/physics\"]),\n    :tex => Dict(\n        \"inlineMath\" => [[\"\\$\",\"\\$\"], [\"\\\\(\",\"\\\\)\"]],\n        \"tags\" => \"ams\",\n        \"packages\" => [\"base\", \"ams\", \"autoload\", \"physics\"],\n    ),\n))\n```\n\n----------------------------------------\n\nTITLE: Filtering Types by Subtype with @autodocs\nDESCRIPTION: Uses @autodocs with a filter function to document only types that are subtypes of AutoDocs.Filter.Major from the AutoDocs.Filter module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/autodocs.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [AutoDocs.Filter]\nOrder = [:type]\nFilter =  t -> t <: AutoDocs.Filter.Major\n```\n```\n\n----------------------------------------\n\nTITLE: Executing File System Operations in Julia REPL\nDESCRIPTION: This code snippet demonstrates basic file system operations in Julia. It shows how to get the current working directory and create a new file using the touch function.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/symlinks/src/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npwd()\n\ntouch(\"root_index.txt\")\n```\n\n----------------------------------------\n\nTITLE: Testing Method Error Display in Julia\nDESCRIPTION: This doctest demonstrates a method error when attempting to divide two symbols. It shows how Julia's error messages are displayed and truncated with [...] in doctests.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_11\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\njulia> :a / :b\nERROR: MethodError: no method matching /(::Symbol, ::Symbol)\n[...]\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for DOM Module\nDESCRIPTION: Uses the @autodocs macro to automatically generate documentation for all exported symbols in the Documenter.DOM module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/dom.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n@autodocs\nModules = [Documenter.DOM]\n```\n\n----------------------------------------\n\nTITLE: Documenting Private Functions with @autodocs\nDESCRIPTION: Uses @autodocs to document only private functions from AutoDocs.Pages.E module, ordering them by function type.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/autodocs.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [AutoDocs.Pages.E]\nPublic = false\nOrder = [:function]\n```\n```\n\n----------------------------------------\n\nTITLE: Doctest with Meta Setup Block in Julia\nDESCRIPTION: Shows how to use @meta blocks to set up and tear down doctest environment with a custom function definition.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_17\n\nLANGUAGE: julia\nCODE:\n```\njulia> f(2)\n4\n```\n\n----------------------------------------\n\nTITLE: Configuring KaTeX Engine in Documenter\nDESCRIPTION: Example of configuring the KaTeX math engine for Documenter with custom delimiters and LaTeX macros. Shows how to set up display and inline math delimiters and define shorthand macros for commonly used expressions.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/latex.md#2025-04-22_snippet_8\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(\n    format = Documenter.HTML(; mathengine=\n        Documenter.KaTeX(\n            Dict(:delimiters => [\n                Dict(:left => raw\"$\",   :right => raw\"$\",   display => false),\n                Dict(:left => raw\"$$\",  :right => raw\"$$\",  display => true),\n                Dict(:left => raw\"\\[\",  :right => raw\"\\]\",  display => true),\n                ],\n                :macros => Dict(\"\\\\RR\" => \"\\\\mathbb{R}\",\n                    raw\"\\Xi\" => raw\"X_{i}\",\n                    raw\"\\Ru\" => raw\"R_{\\mathrm{univ.}}\",\n                    raw\"\\Pstd\" => raw\"P_{\\mathrm{std}}\",\n                    raw\"\\Tstd\" => raw\"T_{\\mathrm{std}}\",\n                ),\n            )\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Julia Doctests\nDESCRIPTION: Examples of how errors are caught and displayed in Julia doctests, including a case with output filtering.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/working.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\njulia> error(\"0123456789\")\nERROR: 0123456789\nStacktrace:\n[...]\n```\n\nLANGUAGE: julia\nCODE:\n```\njulia> error(\"0123456789\")\nERROR: 9876543210\nStacktrace:\n[...]\n```\n\n----------------------------------------\n\nTITLE: Specifying Documenter Version Compatibility in TOML\nDESCRIPTION: This TOML snippet demonstrates how to specify a compatibility requirement for Documenter in a Project.toml file, using a tilde specifier to fix Documenter to a specific minor version.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/semver.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nDocumenter = \"~1.X\"\n```\n\n----------------------------------------\n\nTITLE: Vector Operations with Error Handling\nDESCRIPTION: Demonstrates vector operations including error cases and variable assignments\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/fixed.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\n# Leading comment\njulia> a\nERROR: UndefVarError: `a` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\n\njulia> a = Int64[1,2]\n2-element Vector{Int64}:\n 1\n 2\n\njulia> b\nERROR: UndefVarError: `b` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\n\njulia> a\n2-element Vector{Int64}:\n 1\n 2\n\njulia> a;\n\njulia> b;\nERROR: UndefVarError: `b` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\n\njulia> a = Int64[3,4];\n\njulia> a\n2-element Vector{Int64}:\n 3\n 4\n```\n\n----------------------------------------\n\nTITLE: Configuring deploydocs for Package B\nDESCRIPTION: Example configuration for deploying documentation of a subpackage in a monorepo using deploydocs function with package-specific settings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_12\n\nLANGUAGE: julia\nCODE:\n```\ndeploydocs(; repo = \"github.com/USER_NAME/PACKAGE_NAME.jl.git\",\n             dirname=\"PackageB\",\n             tag_prefix=\"PackageB-\",\n             # ...any additional kwargs\n             )\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents in Documenter.jl\nDESCRIPTION: Demonstrates how to generate a table of contents using the @contents block in Documenter.jl. The block specifies which pages to include in the table of contents.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@contents\nPages = [\"showcase.md\"]\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions in Doctests\nDESCRIPTION: Demonstrates how to test for exceptions in doctests. The expected error message should match the start of the actual error message. Truncated stacktraces can be indicated with '[...]'.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/doctests.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```jldoctest\njulia> div(1, 0)\nERROR: DivideError: integer division error\n in div(::Int64, ::Int64) at ./int.jl:115\n\njulia> div(1, 0)\nERROR: DivideError: integer division error\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TagBot Workflow for Julia Package Releases\nDESCRIPTION: This YAML configuration sets up the Julia TagBot to create releases and tags for the package. It uses the DOCUMENTER_KEY for authentication to trigger documentation builds for tagged versions.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Generating Autodocs for Utilities Module\nDESCRIPTION: Automatically generates documentation for all documented elements in the utilities.jl file within the Documenter module\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/utilities.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n@autodocs\nModules = [Documenter]\nPages = [\"utilities/utilities.jl\"]\n```\n\n----------------------------------------\n\nTITLE: Inline Example of Ambiguous Assignment in Julia REPL Softscope\nDESCRIPTION: This snippet directly demonstrates the ambiguous assignment scenario in Julia's softscope without using include_string. It shows the warning message and the resulting error when trying to access an undefined variable.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/softscope.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\ns = 0 # global\nfor i = 1:10\n    t = s + i # new local `t`\n    s = t # new local `s` with warning\nend\ns, # global\n@isdefined(t) # global\n\n# output\n\n┌ Warning: Assignment to `s` in soft scope is ambiguous because a global variable by the same name exists: `s` will be treated as a new local. Disambiguate by using `local s` to suppress this warning or `global s` to assign to the existing global variable.\n└ @ doctests.jl:3\nERROR: UndefVarError: s not defined\nStacktrace:\n [1] doctests.jl:3 [inlined]\n[...]\n```\n\n----------------------------------------\n\nTITLE: Documenting Deployment Functions in Julia\nDESCRIPTION: This code block uses the @docs macro to generate documentation for three functions from the Documenter module: gitrm_copy, git_push, and user_host_upstream. These functions are likely related to Git operations and repository management during documentation deployment.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/deploydocs.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\nDocumenter.gitrm_copy\nDocumenter.git_push\nDocumenter.user_host_upstream\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Documenter Internal Types with @docs Macro\nDESCRIPTION: This snippet shows how to include documentation for Documenter's internal components, specifically the AbstractSelector type from the Selectors submodule and the hide function.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/docsxref/src/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs\nDocumenter.Selectors.AbstractSelector\nDocumenter.hide\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Tables from CSV in @eval Block (Julia)\nDESCRIPTION: This example shows how to use CSV and Latexify packages within an @eval block to read a CSV file and generate a markdown table.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n```@eval\nusing CSV\nusing Latexify\ndf = CSV.read(\"table.csv\")\nmdtable(df, latex=false)\n```\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding a Private Key in Julia\nDESCRIPTION: Julia code to read a private key file and encode it in Base64 format, which is required for adding the key to CI systems like Travis. The result is printed to the console for copying.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting/walkthrough.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nusing Base64\n\nread(\"privatekey\", String) |> base64encode |>  println\n```\n\n----------------------------------------\n\nTITLE: Woodpecker CI 1.0+ Documentation Build Pipeline\nDESCRIPTION: Woodpecker CI pipeline configuration (version 1.0.x and later) for building and deploying documentation using Julia.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    docs:\n    when:\n        branch: main  # update to match your development branch\n    image: julia\n    commands:\n        - julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'\n        - julia --project=docs/ docs/make.jl\n    secrets: [ project_access_token ]  # access token is a secret\n```\n\n----------------------------------------\n\nTITLE: Generating Automated Documentation for TextDiff Module in Julia\nDESCRIPTION: This code snippet uses Julia's @autodocs macro to automatically include all documentation strings from the TextDiff module within Documenter.jl. This generates comprehensive API documentation for the module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/textdiff.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [Documenter.TextDiff]\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing DocMeta Documentation in Julia\nDESCRIPTION: A documentation directive that references and includes the documentation for DocMeta module components including the initdocmeta! function and several constants (META, METAMODULES, METATYPE, VALIDMETA) in the generated documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/docmeta.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\nDocMeta.initdocmeta!\nDocMeta.META\nDocMeta.METAMODULES\nDocMeta.METATYPE\nDocMeta.VALIDMETA\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Julia Doctest Example\nDESCRIPTION: A simple doctest demonstrating basic arithmetic in Julia.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/working.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\njulia> 2 + 2\n4\n```\n\n----------------------------------------\n\nTITLE: REPL Block Variable Access\nDESCRIPTION: Demonstrates accessing variables x and y in a REPL block context\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_15\n\nLANGUAGE: julia\nCODE:\n```\nx\ny\n```\n\n----------------------------------------\n\nTITLE: CI Configuration for Multiple Package Documentation\nDESCRIPTION: Example CI configuration commands for building documentation across multiple packages in a monorepo project.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# In the configuration file that builds docs for the top level package\nrun: julia --project=docs/ docs/make.jl\n\n# In the configuration file that builds docs for PackageA.jl\nrun: julia --project=PackageA.jl/docs/ PackageA.jl/docs/make.jl\n\n# In the configuration file that builds docs for PackageB.jl\nrun: julia --project=PackageB.jl/docs/ PackageB.jl/docs/make.jl\n```\n\n----------------------------------------\n\nTITLE: Generating LaTeX-only Output in Julia using Documenter\nDESCRIPTION: This snippet demonstrates how to configure Documenter to generate only the LaTeX (.tex) file without compiling to PDF. It uses the 'none' platform option in the LaTeX format.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/other-formats.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\nusing Documenter\nmakeocs(\n    format = Documenter.LaTeX(platform = \"none\"),\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Regex Filtering in Julia Doctests\nDESCRIPTION: Demonstration of using regex substitutions to filter doctest output, specifically for limiting decimal places in floating-point numbers.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/working.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\njulia> sqrt(2)\n1.41421356000\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI Documentation Build Stage\nDESCRIPTION: Travis CI configuration for setting up a documentation build stage that runs after tests. Specifies the build environment, installs dependencies, and runs the documentation build script.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  include:\n    - stage: \"Documentation\"\n      julia: 1\n      os: linux\n      script:\n        - julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd()));\n                                               Pkg.instantiate()'\n        - julia --project=docs/ docs/make.jl\n      after_success: skip\n```\n\n----------------------------------------\n\nTITLE: Julia Script-Style Doctest\nDESCRIPTION: Shows script-style doctest format with output section.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/man/tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\na = 1\nb = 2\na + b\n\n# output\n\n3\n```\n\n----------------------------------------\n\nTITLE: Continued Block Assignment\nDESCRIPTION: Assigns a value to variable y using a continued block that delays evaluation\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_14\n\nLANGUAGE: julia\nCODE:\n```\ny = 99\n```\n\n----------------------------------------\n\nTITLE: Plotting Example with PyPlot\nDESCRIPTION: Shows how to create and save plots using PyPlot within named @example blocks, including handling of file paths and image references.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_17\n\nLANGUAGE: julia\nCODE:\n```\nusing PyPlot # hide\nf(x) = sin(2x) + 1\ng(x) = cos(x) - x\n```\n\nLANGUAGE: julia\nCODE:\n```\nx = range(-π, π; length=50)\nplot(x, f.(x), color = \"red\")\nsavefig(\"f-plot.svg\"); nothing # hide\n```\n\nLANGUAGE: julia\nCODE:\n```\nplot(x, g.(x), color = \"blue\")\nsavefig(\"g-plot.svg\"); nothing # hide\n```\n\n----------------------------------------\n\nTITLE: Woodpecker CI Pre-1.0 Documentation Build Pipeline\nDESCRIPTION: Woodpecker CI pipeline configuration (version 0.15.x and pre-1.0.0) for building and deploying documentation using Julia.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npipeline:\n    docs:\n    when:\n        branch: main  # update to match your development branch\n    image: julia\n    commands:\n        - julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'\n        - julia --project=docs/ docs/make.jl\n    secrets: [ project_access_token ]  # access token is a secret\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Documentation\nDESCRIPTION: Configuration block for generating a table of contents specifically for the public.md page, limiting depth to levels 2-2.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/public.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```@contents\nPages = [\"public.md\"]\nDepth = 2:2\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Complex Variable Operations and Error Handling in Julia\nDESCRIPTION: This doctest demonstrates error handling, variable assignment, and the effect of semicolons for suppressing output. It shows how doctests can verify both successful operations and expected errors.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_9\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\n# Leading comment\njulia> a\nERROR: UndefVarError: `a` not defined\n\njulia> a = Int64[1,2]\n2-element Vector{Int64}:\n 1\n 2\n\njulia> b\n\njulia> a\n2-element Vector{Int64}:\n 2\n\njulia> a;\n1\n\njulia> b;\n\njulia> a = Int64[3,4];\n\njulia> a\n 3\n 4\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Tectonic LaTeX Engine in Julia for Documenter\nDESCRIPTION: These snippets show how to use the Tectonic LaTeX engine with Documenter. The first example assumes 'tectonic' is in the PATH, while the second uses the tectonic_jll package to provide the path.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/other-formats.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nusing Documenter\n\n# Executable `tectonic` is present in `PATH`\nmakeocs(\n    format = Documenter.LaTeX(platform=\"tectonic\"),\n    ...)\n```\n\nLANGUAGE: julia\nCODE:\n```\n# The path to `tectonic` is provided by the tectonic_jll package\nusing tectonic_jll: tectonic\nmakeocs(\n    format = Documenter.LaTeX(platform=\"tectonic\", tectonic=tectonic()),\n    ...)\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Documentation for DocTestsTests.FooBroken Module in Julia\nDESCRIPTION: This code snippet uses Documenter.jl's @autodocs directive to automatically generate documentation for the DocTestsTests.FooBroken module. The directive extracts docstrings and function signatures from the specified module and formats them as part of the documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/foobroken.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [DocTestsTests.FooBroken]\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Page Evaluation Order in Documenter\nDESCRIPTION: Demonstrates how to specify a set of pages that should be evaluated before others in Documenter using the expandfirst parameter.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(expandfirst = [\"page1.md\", \"page2.md\"])\n```\n\n----------------------------------------\n\nTITLE: Syntax-Highlighted Julia Code Block in Documenter.jl\nDESCRIPTION: Demonstrates a Julia code block with syntax highlighting. The highlighting is applied when the language is specified after the opening triple backticks.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nfunction foo(x::Integer)\n    @show x + 1\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variable for Sidebar Pages in Julia\nDESCRIPTION: This snippet shows how to define a global variable in make.jl that can be used to specify pages for both makedocs and @contents blocks.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_13\n\nLANGUAGE: julia\nCODE:\n```\nSUBSECTION_PAGES = [\"subsection/a.md\", \"subsection/b.md\"]\nmakedocs(\n    pages = [\n        \"index.md\",\n        \"Subsection\" => SUBSECTION_PAGES,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Expressions Without All Outputs in Julia\nDESCRIPTION: This doctest shows multiple expressions run in sequence without capturing all the outputs. It demonstrates that doctests can contain multiple inputs without requiring output for each one.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_7\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\njulia> 1 + 2\n\njulia> 3 + 4\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Code Coverage to Documentation Build in GitHub Actions\nDESCRIPTION: This YAML snippet shows how to modify the GitHub Actions workflow to include code coverage reporting for code run during the documentation build process. It uses Julia's code coverage flags and uploads the results to Codecov.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n      - run: julia --project=docs --code-coverage=user docs/make.jl\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}\n      - uses: julia-actions/julia-processcoverage@v1\n      - uses: codecov/codecov-action@v5\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for MissingDocs Functions in Julia\nDESCRIPTION: This code snippet uses the @docs macro from Documenter.jl to generate documentation for two functions, f and g, from the MissingDocs module in the Main namespace. The macro will automatically include the docstrings of these functions in the generated documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/missingdocs/src/all/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\nMain.MissingDocs.f\nMain.MissingDocs.g\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for MissingDocs.f Function in Julia\nDESCRIPTION: This code snippet uses Documenter.jl's @docs macro to automatically generate documentation for the function 'f' from the MissingDocs module. It assumes that the function is defined in the Main.MissingDocs namespace.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/missingdocs/src/public/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\nMain.MissingDocs.f\n```\n```\n\n----------------------------------------\n\nTITLE: String Interpolation Example in Julia\nDESCRIPTION: This code snippet shows an example of string interpolation in Julia. It demonstrates how to embed expressions inside string literals.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/man/style.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nfoo = \"Example of string $(interpolation).\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Mathematical Equations in Documenter.jl\nDESCRIPTION: Shows how to render display-style mathematical equations using LaTeX syntax. The equation shown is the quadratic formula solution wrapped in a math code block.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nx_{1,2} = \\frac{-B \\pm \\sqrt{B^2 - 4 A C}}{2A}\n```\n\n----------------------------------------\n\nTITLE: Testing Error Messages with Number Filtering in Julia Doctests\nDESCRIPTION: This doctest demonstrates error testing with regex filtering that matches and filters any whole numbers in the output. This is useful when error messages contain values that might change between test runs.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/broken.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\njulia> error(\"0123456789\")\nERROR: ABCDEFGHIJ\nStacktrace:\n [...]\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom LaTeX with Julia\nDESCRIPTION: This example shows how to render custom LaTeX using Julia's MIME types. It defines a Table struct and implements a show method for LaTeX output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_simple/index.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\nstruct Table end\n\nBase.show(io, ::MIME\"text/latex\", ::Table) = write(io, raw\"\"\"\n\\begin{tabular}{r|ccc}\n        & i & y & z\\\\\n        \\hline\n        & Int64 & Char & Int64\\\\\n        \\hline\n        1 & 1 & 'A' & 5 \\\\\n        2 & 2 & 'B' & 6 \\\\\n        3 & 3 & 'C' & 7 \\\\\n        4 & 4 & 'D' & 8 \\\\\n\\end{tabular}\n\"\"\")\n\nTable()\n```\n\n----------------------------------------\n\nTITLE: Generating GIF Output with @example in Julia\nDESCRIPTION: This snippet illustrates how to use the @example macro to produce a GIF output file. The AT_EXAMPLE_FILES dictionary is accessed with a tuple specifying the GIF format and large size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/outputs.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"gif\", :big)]\n```\n\n----------------------------------------\n\nTITLE: Including DocStrings with @docs Macro in Markdown\nDESCRIPTION: This snippet demonstrates how to include documentation strings from the DocsReferencingMain module using Documenter.jl's @docs macro. It specifically includes the f and g functions from that module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/docsxref/src/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs\nDocsReferencingMain.f\nDocsReferencingMain.g\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for MissingDocs.f Function in Julia\nDESCRIPTION: This code snippet uses Julia's documentation syntax to generate documentation for the function 'f' from the MissingDocs module. It demonstrates how to document exported functions in Julia projects.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/missingdocs/src/exports/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\nMain.MissingDocs.f\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Remote URL Handling\nDESCRIPTION: Includes documentation for URL handling and repository file access functionality from the Remotes module\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/utilities.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\n@docs\nRemotes.URL\nRemotes.repofile\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Global and Local Variable Interaction in Julia REPL Softscope\nDESCRIPTION: This snippet shows how global and local variables interact in Julia 1.5's REPL softscope. It demonstrates the creation of a global variable 's', its modification within a loop, and the scoping of a local variable 't'.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/softscope.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\ns = 0 # global\n0\n\nfor i = 1:10\n    t = s + i # new local `t`\n    s = t # assign global `s`\nend\n\ns # global\n55\n\n@isdefined(t) # global\nfalse\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Colored Output\nDESCRIPTION: Command to run the make.jl script with colored output for better readability.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ julia --color=yes --project make.jl\n```\n\n----------------------------------------\n\nTITLE: Accessing JPEG File (Tiny Size) in Documenter.jl\nDESCRIPTION: Retrieves a tiny JPEG file from the Main.AT_EXAMPLE_FILES dictionary using a tuple key with format type and size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/index.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"jpeg\", :tiny)]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating REPL Sessions in Julia Documentation\nDESCRIPTION: This snippet shows how to include REPL-like sessions in documentation, demonstrating various Julia operations and outputs.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_15\n\nLANGUAGE: julia\nCODE:\n```\n```@repl\nusing Random    # hide\nRandom.seed!(1) # hide\nnothing\nrand()\na = 1\nprintln(a)\nb = 2\na + b\nstruct T\n    x :: Int\n    y :: Vector\nend\nx = T(1, [1])\nx.y\nx.x\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Broken Doctest in Julia\nDESCRIPTION: This example shows a deliberately incorrect doctest where the expected output doesn't match the actual result of the expression. The test expects 2 + 2 to equal -6, which is mathematically incorrect.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/broken.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\njulia> 2 + 2\n-6\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown with @docs Block\nDESCRIPTION: Example of a markdown file with a @docs block that will include the documentation for func(x).\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n# Example.jl Documentation\n\n```@docs\nfunc(x)\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Documenter.Plugin in Julia\nDESCRIPTION: This snippet uses the @docs macro to specifically document the Documenter.Plugin module or function.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/writers.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\nDocumenter.Plugin\n```\n```\n\n----------------------------------------\n\nTITLE: Generating JPEG Output with @example in Julia\nDESCRIPTION: This example demonstrates how to use the @example macro to create a JPEG output file. The AT_EXAMPLE_FILES dictionary is accessed with a tuple specifying the JPEG format and small size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/outputs.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"jpeg\", :tiny)]\n```\n\n----------------------------------------\n\nTITLE: Generating Large Markdown Table in Julia\nDESCRIPTION: Shows how to create a large Markdown table using Julia's Markdown module within an @example block.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\nusing Markdown\nnrows, ncols = 10, 50\ntable = Markdown.Table(\n    [[[string(i, \"-\", j)] for j = 1:ncols] for i = 1:nrows],\n    [:c for _ in 1:ncols],\n)\nMarkdown.MD([table])\n```\n\n----------------------------------------\n\nTITLE: Colored REPL Output Example in Julia\nDESCRIPTION: Demonstrates colored output in @repl blocks using printstyled function with various formatting options.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_13\n\nLANGUAGE: julia\nCODE:\n```\nprintstyled(\"This should be in bold cyan.\", color=:cyan, bold=true)\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Configuration in Julia Docs\nDESCRIPTION: Configures metadata for documentation generation by setting ShareDefaultModule to true, which affects module sharing behavior across code blocks.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/sharedefaultmodule.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@meta\nShareDefaultModule = true\n```\n\n----------------------------------------\n\nTITLE: Setting CollapsedDocStrings Meta Property in Julia\nDESCRIPTION: Sets the CollapsedDocStrings meta property to true, which controls how docstrings are displayed in the generated documentation. When set to true, docstrings will be collapsed by default in the rendered output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/docmeta.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory to LOAD_PATH\nDESCRIPTION: Code to add the source directory to Julia's LOAD_PATH when it's not accessible through the default paths.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\npush!(LOAD_PATH,\"../src/\")\n```\n\n----------------------------------------\n\nTITLE: Rendering LaTeX Equations in Documenter.jl\nDESCRIPTION: Shows how to include LaTeX equations in Documenter.jl using a math code block. This example displays a quadratic formula.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nx_{1,2} = \\frac{-B \\pm \\sqrt{B^2 - 4 A C}}{2A}\n```\n\n----------------------------------------\n\nTITLE: Creating Small Markdown Table in Julia\nDESCRIPTION: Demonstrates creating a small Markdown table using Julia's Markdown module within an @example block.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\nusing Markdown\nnrows, ncols = 5, 5\ntable = Markdown.Table(\n    [[[string(i, \"-\", j)] for j = 1:ncols] for i = 1:nrows],\n    [:c for _ in 1:ncols],\n)\nMarkdown.MD([table])\n```\n\n----------------------------------------\n\nTITLE: Using Setup Blocks in Documenter.jl\nDESCRIPTION: Demonstrates the use of @setup blocks to define variables for use in subsequent @example blocks in Documenter.jl.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_12\n\nLANGUAGE: julia\nCODE:\n```\nx = 5\n```\n\nLANGUAGE: julia\nCODE:\n```\nx + 1\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoDocs in Documenter.jl\nDESCRIPTION: This code snippet configures the @autodocs macro in Documenter.jl. It specifies the modules to be documented (BadDocmetaModule) and sets the order of documentation elements to functions followed by types.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/errors/src.docmeta/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [BadDocmetaModule]\nOrder   = [:function, :type]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring CollapsedDocStrings in Julia Documentation\nDESCRIPTION: This code snippet sets a meta option for the documentation. It configures the CollapsedDocStrings option to be true, which likely affects how docstrings are displayed in the generated documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/selectors.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Julia Code in Documentation\nDESCRIPTION: This snippet demonstrates how to execute Julia code within the documentation, showing the current working directory and variable assignment.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\n```@example\n@show pwd()\na = 1\n```\n```\n\n----------------------------------------\n\nTITLE: Adding External Format Dependencies in Julia\nDESCRIPTION: Code example showing how to include the required external packages for Markdown/MkDocs and PDF/LaTeX output formats in Documenter.jl's make.jl file.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: julia\nCODE:\n```\nusing DocumenterMarkdown\n```\n\nLANGUAGE: julia\nCODE:\n```\nusing DocumenterLaTeX\n```\n\n----------------------------------------\n\nTITLE: HTML Interactive Display\nDESCRIPTION: Defines HTML struct and display method for interactive HTML content in documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/man/tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\nstruct HTML\n    code::String\nend\nBase.show(io, ::MIME\"text/html\", html::HTML) = write(io, read(html.code))\n```\n\n----------------------------------------\n\nTITLE: Setting Default TOC Depth in LaTeX for Documenter.jl\nDESCRIPTION: This LaTeX code snippet sets the default TOC depth to show parts, chapters, and sections. It uses the \\settocdepth command to control which levels are displayed in the Table of Contents.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.toc_style/index.md#2025-04-22_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n%% TOC settings\n% -- TOC depth\n%   value: [part, chapter, section, subsection,\n%           subsubsection, paragraph, subparagraph]\n\\settocdepth{section}  % show \"part+chapter+section\" in TOC\n```\n\n----------------------------------------\n\nTITLE: Hidden Setup Block\nDESCRIPTION: Sets up a variable x with value 42 in a hidden @setup block that shares the same namespace\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_12\n\nLANGUAGE: julia\nCODE:\n```\nx = 42\n```\n\n----------------------------------------\n\nTITLE: Generating Plots with PyPlot in @eval Block (Julia)\nDESCRIPTION: This snippet demonstrates how to use PyPlot within an @eval block to create a plot and save it as an SVG file. The plot is then referenced in the markdown.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n```@eval\nusing PyPlot\n\nx = range(-π, π; length=50)\ny = sin.(x)\n\nplot(x, y, color = \"red\")\nsavefig(\"plot.svg\")\n\nnothing\n```\n\n![](plot.svg)\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Properties for Julia Documentation\nDESCRIPTION: Sets meta configuration to collapse docstrings in the generated documentation output. This affects how docstrings are displayed in the final documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/docsystem.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@meta\nCollapsedDocStrings = true\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Documentation in Julia\nDESCRIPTION: This code snippet sets metadata for the documentation. It collapses doc strings in the generated documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/docchecks.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Julia REPL Operations\nDESCRIPTION: Demonstrates basic Julia REPL operations including variable assignment and arithmetic operations.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/man/tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\njulia> using Base.Meta # `nothing` shouldn't be displayed.\n\njulia> Meta\nBase.Meta\n\njulia> a = 1\n1\n\njulia> b = 2;\n\njulia> a + b\n3\n```\n\n----------------------------------------\n\nTITLE: Customizing TOC Depth to Show Only Parts and Chapters in LaTeX\nDESCRIPTION: This LaTeX code snippet demonstrates how to modify the TOC depth to display only parts and chapters. It uses the \\settocdepth command to limit the TOC content to higher-level sections.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.toc_style/index.md#2025-04-22_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\n\\settocdepth{part}  % show \"part+chapter\" in TOC\n```\n\n----------------------------------------\n\nTITLE: Documenting Types with @autodocs\nDESCRIPTION: Uses @autodocs to document all types (both public and private) from AutoDocs.Pages.E module, ordering them by type.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/autodocs.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\n```@autodocs\nModules = [AutoDocs.Pages.E]\nOrder = [:type]\n```\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Web Server with LiveServer\nDESCRIPTION: Command to start a local web server using LiveServer.jl to view documentation locally.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_10\n\nLANGUAGE: julia\nCODE:\n```\njulia -e 'using LiveServer; serve(dir=\"docs/build\")'\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Julia Documentation\nDESCRIPTION: This snippet sets metadata for the documentation, specifically collapsing doc strings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/writers.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Highlighting Julia Code in Documenter.jl\nDESCRIPTION: Demonstrates syntax highlighting for Julia code in Documenter.jl using a code block with language specification.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nfunction foo(x::Integer)\n    @show x + 1\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Configuration for Collapsed DocStrings in Markdown Documentation\nDESCRIPTION: Meta directive to configure DocStrings to appear in a collapsed state in the generated documentation. This improves readability by minimizing the initial visible content.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/expanders.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Documentation in Julia\nDESCRIPTION: This snippet sets metadata for the documentation, including the current module and collapsed docstrings option.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCurrentModule = Main.Mod\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Arithmetic in Julia Documentation Test\nDESCRIPTION: A simple jldoctest example that adds two variables and shows the expected output. This demonstrates the syntax for Julia documentation tests with explicit output sections.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/crlf.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\na = 1\nb = 2\na + b\n\n# output\n\n3\n```\n\n----------------------------------------\n\nTITLE: Defining Custom LaTeX Rendering in Julia\nDESCRIPTION: Defines a custom struct and show method for rendering LaTeX output in Documenter.jl.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_7\n\nLANGUAGE: julia\nCODE:\n```\nstruct LaTeXRender\n    s :: String\nend\nfunction Base.show(io, ::MIME\"text/latex\", r::LaTeXRender)\n    write(io, \"\"\"\n    Rendering \\\\texttt{LaTeXRender}: $(r.s)\n    \"\"\")\nend\nnothing # hide\n```\n\n----------------------------------------\n\nTITLE: File Operations Example\nDESCRIPTION: Demonstrates writing SVG content to an external file.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/man/tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\nopen(\"julia.svg\", \"w\") do io\n    write(io, \"\"\"\n    <svg width=\"82\" height=\"76\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g style=\"stroke-width: 3\">\n        <circle cx=\"20\" cy=\"56\" r=\"16\" style=\"stroke: #cb3c33; fill: #d5635c\" />\n        <circle cx=\"41\" cy=\"20\" r=\"16\" style=\"stroke: #389826; fill: #60ad51\" />\n        <circle cx=\"62\" cy=\"56\" r=\"16\" style=\"stroke: #9558b2; fill: #aa79c1\" />\n      </g>\n    </svg>\n    \"\"\")\nend\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Functions in Julia Documentation\nDESCRIPTION: This snippet defines two functions and assigns them to a specific example block for later use.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\n```@example 1\nf(x) = 2x\ng(x) = 3x\nnothing # hide\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Configuration for Julia Documentation\nDESCRIPTION: Sets the CollapsedDocStrings meta option to true to enable collapsible documentation strings in the generated documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/dom.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@meta\nCollapsedDocStrings = true\n```\n\n----------------------------------------\n\nTITLE: Generating Function Index in Julia Documentation\nDESCRIPTION: This snippet generates an index of functions from a specific page in the documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@index\nPages = [\"lib/functions.md\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Pre-release and Release Checklist for Documenter.jl\nDESCRIPTION: This markdown snippet provides a comprehensive checklist for preparing and executing a release of Documenter.jl. It includes steps for updating version numbers, modifying the changelog, running regression tests, and registering the new version.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/checklists.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Pre-release\n\n - [ ] Change the version number in `Project.toml`\n   * If the release is breaking, increment MAJOR\n   * If the release adds a new user-visible feature, increment MINOR\n   * Otherwise (bug-fixes, documentation improvements), increment PATCH\n - [ ] Update `CHANGELOG.md`, following the existing style (in particular, make sure that the change log for this version has the correct version number and date).\n - [ ] Run `make changelog`, to make sure that all the issue references in `CHANGELOG.md` are up to date.\n - [ ] Check that the commit messages in this PR do not contain `[ci skip]`\n - [ ] Run [regression-tests workflow](https://github.com/JuliaDocs/Documenter.jl/actions/workflows/regression-tests.yml) using a `workflow_dispatch` trigger to check for any changes that broke extensions: <link-to-workflow-run-here>\n\n## The release\n\n - [ ] After merging the pull request, tag the release. There are two options for this:\n\n   1. [Comment `[at]JuliaRegistrator register` on the GitHub commit.](https://github.com/JuliaRegistries/Registrator.jl#via-the-github-app)\n   2. Use [JuliaHub's package registration feature](https://help.juliahub.com/juliahub/stable/contribute/#registrator) to trigger the registration.\n\n   Either of those should automatically publish a new version to the Julia registry.\n - Once registered, the `TagBot.yml` workflow should create a tag, and rebuild the documentation for this tag.\n - These steps can take quite a bit of time (1 hour or more), so don't be surprised if the new documentation takes a while to appear.\n```\n\n----------------------------------------\n\nTITLE: ANSI Color Output Example\nDESCRIPTION: Demonstrates colored text output in @example blocks using ANSI escape codes mapped to HTML.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_18\n\nLANGUAGE: julia\nCODE:\n```\nprintstyled(\"Here are some colors:\\n\"; color=:red, bold=true)\nfor color in 0:15\n    print(\"\\e[38;5;$(color);48;5;$(color)m  \")\n    print(\"\\e[49m\", lpad(color, 3), \" \")\n    color % 8 == 7 && println()\nend\nprint(\"\\e[m\")\n```\n\n----------------------------------------\n\nTITLE: ANSI Color Code Demonstration in Julia\nDESCRIPTION: Generates a color palette by printing ANSI escape codes directly, showing 16 different colors with background highlighting.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_14\n\nLANGUAGE: julia\nCODE:\n```\nfor color in 0:15\n    print(\"\\e[38;5;$color;48;5;$(color)m  \")\n    print(\"\\e[49m\", lpad(color, 3), \" \")\n    color % 8 == 7 && println()\nend\nprint(\"\\e[m\")\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Log Density with Gradient in Julia\nDESCRIPTION: This code snippet demonstrates how to benchmark a log density with gradient using BenchmarkTools and LogDensityProblems packages in Julia. It shows the setup and execution of the benchmark.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/man/style.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nusing BenchmarkTools, LogDensityProblems\nx = randn(LogDensityProblems.dimension(∇P))\n@benchmark LogDensityProblems.logdensity_and_gradient($∇P, $x)\n```\n\n----------------------------------------\n\nTITLE: Filtering Private Types in @autodocs\nDESCRIPTION: Shows how to display only private types in @autodocs using the Public keyword.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```@autodocs\nModules = [Foo]\nPublic = false\nOrder = [:type]\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Documenter Meta Options in Julia\nDESCRIPTION: Sets the CollapsedDocStrings option to true, which configures Documenter.jl to display docstrings in a collapsed state by default. This is a configuration option that affects the rendering of the generated documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/mdflatten.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@meta\nCollapsedDocStrings = true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment in Julia Documentation\nDESCRIPTION: These snippets show how to set up and use a test environment in Julia documentation, including variable assignment and assertions.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_17\n\nLANGUAGE: julia\nCODE:\n```\n```@setup testsetup\nw = 5\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@example testsetup\n@assert w === 5\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@repl testsetup\n@assert w === 5\n```\n```\n\n----------------------------------------\n\nTITLE: Access Named Block Variable\nDESCRIPTION: Accesses and increments the previously defined variable x from the named block\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_11\n\nLANGUAGE: julia\nCODE:\n```\nx + 1\n```\n\n----------------------------------------\n\nTITLE: Empty Output in Julia Doctests\nDESCRIPTION: An example showing how empty output is handled in Julia doctests.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/working.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\nnothing\n# output\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Tables in Julia\nDESCRIPTION: Uses Julia code to generate a large Markdown table programmatically using the Markdown module.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\nusing Markdown\nnrows, ncols = 10, 50\ntable = Markdown.Table(\n    [[[string(i, \"-\", j)] for j = 1:ncols] for i = 1:nrows],\n    [:c for _ in 1:ncols],\n)\nMarkdown.MD([table])\n```\n\n----------------------------------------\n\nTITLE: Implementing Map-Filter-Reduce Pattern in Julia\nDESCRIPTION: This Julia function demonstrates a complex implementation of the map-filter-reduce pattern using iterators. It includes goto statements and labels for flow control, showcasing advanced Julia programming techniques.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/unicode.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\nfunction map_filter_iterators(xs, init)\n    ret = iterate(xs)\n    ret === nothing && return\n    acc = init\n    @goto filter\n    local state, x\n    while true\n        while true                                    # input\n            ret = iterate(xs, state)                  #\n            ret === nothing && return acc             #\n            @label filter                             #\n            x, state = ret                            #\n            iseven(x) && break             # filter   :\n        end                                #          :\n        y = 2x              # imap         :          :\n        acc += y    # +     :              :          :\n    end             # :     :              :          :\n    #                 + <-- imap <-------- filter <-- input\n    return acc\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Collapsed DocStrings Meta Configuration in Julia\nDESCRIPTION: This code snippet configures the documentation page to display documentation strings in a collapsed state by default. This is a meta configuration directive for the Julia documentation system.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/textdiff.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced Doctest with Setup in Julia\nDESCRIPTION: Demonstrates doctest with custom setup using Documenter package and splitexpr function.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_16\n\nLANGUAGE: julia\nCODE:\n```\njulia> Documenter.splitexpr(:(Foo.Bar.baz))\n(:(Foo.Bar), :(:baz))\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Configuration in Julia Docs\nDESCRIPTION: Configures documentation metadata to collapse doc strings by default\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/utilities.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@meta\nCollapsedDocStrings = true\n```\n\n----------------------------------------\n\nTITLE: Conditional Pretty URLs Configuration (Not Recommended)\nDESCRIPTION: Example of a configuration pattern that's not recommended, which conditionally enables pretty URLs based on environment.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/guide.md#2025-04-22_snippet_11\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(...,\n    format = Documenter.HTML(\n        prettyurls = get(ENV, \"CI\", nothing) == \"true\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Executing File Operations in Julia REPL\nDESCRIPTION: This code snippet demonstrates basic file operations in Julia. It shows how to get the current working directory and create a new file.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/workdir/src/file.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npwd()\n\ntouch(\"root_file.txt\")\n```\n\n----------------------------------------\n\nTITLE: Testing Tuple Assignment and Display in Julia\nDESCRIPTION: This doctest shows assigning a tuple to a variable and displaying it. It demonstrates how variable assignment works in doctests and that the output for the final expression is implicit.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_8\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\njulia> a = (1,2)\n\njulia> a\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Docstrings in Julia\nDESCRIPTION: Demonstrates behavior when referencing non-existent docstrings or docstrings with special content.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/docstrings.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\n@docs\nthis_docstring_does_not_exist\nMod.long_equations_in_docstrings\n```\n\n----------------------------------------\n\nTITLE: Generating Contents with Depth Control in Julia Documentation\nDESCRIPTION: This code snippet demonstrates how to create a table of contents for a specific page with a custom depth setting in Julia documentation. It uses the @contents macro to generate a contents node for the 'latex.md' file with a maximum depth of 9000 levels.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/latex.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@contents\nPages = [\"latex.md\"]\nDepth = 9000\n```\n```\n\n----------------------------------------\n\nTITLE: Using Custom LaTeX Rendering in Documenter.jl\nDESCRIPTION: Demonstrates the use of a custom LaTeX rendering struct within an @example block in Documenter.jl.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_8\n\nLANGUAGE: julia\nCODE:\n```\nLaTeXRender(\"render this\")\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Documentation in Julia\nDESCRIPTION: This code snippet sets metadata for the documentation generation process. It collapses docstrings in the generated documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/builder.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Repeated Array Access in Julia\nDESCRIPTION: This doctest shows the same array being accessed twice in succession, demonstrating that repeated access to the same variable produces consistent results.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\njulia> Main.DocTestFixArray_2468\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\njulia> Main.DocTestFixArray_2468\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bitwise Operations in Julia\nDESCRIPTION: This code snippet shows examples of modulo, XOR, and OR operations in Julia, addressing Issue 1119.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_simple/index.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n1 % 2\n1 ⊻ 2\n1 | 2\n```\n\n----------------------------------------\n\nTITLE: Testing Block Expressions in Julia Doctests\nDESCRIPTION: This doctest demonstrates using a begin...end block to access an array. It shows how multi-line expressions are handled in doctests.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\njulia> begin\n          Main.DocTestFixArray_2468\n       end\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n```\n```\n\n----------------------------------------\n\nTITLE: Escaping Dollar Signs in Docstrings\nDESCRIPTION: Example showing how to include dollar signs in docstrings, which need to be double-escaped to display correctly in the documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/latex.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\n\"\"\"\\nThe cost was \\\\\\$1.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Comments in Julia Doctests\nDESCRIPTION: Demonstrations of how comments and comment-like lines are handled in Julia doctests, including function definitions and multi-line code blocks.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/working.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\njulia> f(x) = println(\"# output from f\\n$x\");\n\njulia> f(42)\n# output from f\n42\n\njulia> f(42)\n       # comment line\n# output from f\n42\n```\n\nLANGUAGE: julia\nCODE:\n```\njulia> let x = 1\n           println(\"$x\")\n           # comment\n           println(\"$x\")\n       end\n1\n1\n\njulia> println(\"xyz\")\n       # comment\nxyz\n```\n\n----------------------------------------\n\nTITLE: Printing to Standard Output in Documenter.jl\nDESCRIPTION: Shows how to print to standard output within an @example block in Documenter.jl.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_9\n\nLANGUAGE: julia\nCODE:\n```\nprintln(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Displaying SSH Public Key in Julia\nDESCRIPTION: Julia code to read and display the content of the public key file. This output is needed when adding the deploy key to GitHub or Gitea repositories.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting/walkthrough.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nread(\"privatekey.pub\", String) |> println\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Modulo Operation in Julia REPL\nDESCRIPTION: This snippet shows the result of a modulo operation using Int8 in Julia REPL.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_simple/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia-repl\nCODE:\n```\njulia> 127 % Int8\n127\n```\n\n----------------------------------------\n\nTITLE: Executing File Operations in Julia REPL\nDESCRIPTION: This code snippet demonstrates how to use Julia's REPL to perform basic file operations. It shows the current working directory and creates a new file named 'root_index.txt'.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/workdir/src/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npwd()\n\ntouch(\"root_index.txt\")\n```\n\n----------------------------------------\n\nTITLE: Setting EditURL Meta Property in Julia Documentation\nDESCRIPTION: This code snippet demonstrates how to set the EditURL meta property in Julia documentation using Documenter.jl. It uses a relative path pointing to the CHANGELOG.md file as an example of a good EditURL configuration.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/editurl/good.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nEditURL = \"../../../../CHANGELOG.md\"\n```\n```\n\n----------------------------------------\n\nTITLE: Inline LaTeX Equations in Markdown\nDESCRIPTION: Example of inline LaTeX math syntax in Markdown documentation files. Demonstrates how to write inline mathematical expressions within text.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/latex.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nHere's some inline maths: ``\\sqrt[n]{1 + x + x^2 + \\ldots}``.\n```\n\n----------------------------------------\n\nTITLE: Setting up Test Environment with Finalizers in Julia\nDESCRIPTION: This snippet sets up a test environment by creating a mutable struct with a finalizer and initializing a global counter. It demonstrates how to use finalizers and track object destruction.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/clear_module/src/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@eval Main finalizer_count = [0]\n\nmutable struct MyMutableStruct\n  bar\n  function MyMutableStruct(bar)\n      x = new(bar)\n      finalizer(x) do y\n        Main.finalizer_count[1] += 1\n      end\n  end\nend\n\na = MyMutableStruct(1)\n```\n\n----------------------------------------\n\nTITLE: Using REPL Blocks in Documenter.jl\nDESCRIPTION: Shows the usage of @repl blocks to simulate Julia REPL interactions in Documenter.jl documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_11\n\nLANGUAGE: julia\nCODE:\n```\n(1 // 2)^2\n```\n\nLANGUAGE: julia\nCODE:\n```\nx = 1\n\nx // 2\n\nans^2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ambiguous Assignment in Julia REPL Softscope\nDESCRIPTION: This snippet shows an example of ambiguous assignment in Julia's softscope, where assigning to a global variable inside a loop creates a new local variable instead, resulting in a warning and an error.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/softscope.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\ncode = \"\"\"\ns = 0 # global\nfor i = 1:10\n    t = s + i # new local `t`\n    s = t # new local `s` with warning\nend\ns, # global\n@isdefined(t) # global\n\"\"\";\n\ninclude_string(Main, code)\n┌ Warning: Assignment to `s` in soft scope is ambiguous because a global variable by the same name exists: `s` will be treated as a new local. Disambiguate by using `local s` to suppress this warning or `global s` to assign to the existing global variable.\n└ @ string:4\nERROR: LoadError: UndefVarError: s not defined\nStacktrace:\n [1] top-level scope at ./string:3\n[...]\n```\n\n----------------------------------------\n\nTITLE: Example Block in Julia Docs\nDESCRIPTION: Shows addition operation using the previously defined variable 'a'. Example blocks are executed and their output is shown in documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/sharedefaultmodule.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\na + 5\n```\n\n----------------------------------------\n\nTITLE: Julia REPL File Operations\nDESCRIPTION: Demonstrates basic file system operations in Julia's REPL, including getting current directory and creating a file.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/workdir/src/subdir/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npwd()\n\ntouch(\"subdir_index.txt\")\n```\n\n----------------------------------------\n\nTITLE: Overloading Base.show for LaTeX Display in Julia\nDESCRIPTION: Example showing how to overload Base.show for the MIME \"text/latex\" type to enable pretty-printing of LaTeX content from Julia. Demonstrates creating a custom type that renders as LaTeX in documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/latex.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\nstruct LaTeXEquation\n    content::String\nend\n\nfunction Base.show(io::IO, ::MIME\"text/latex\", x::LaTeXEquation)\n    # Wrap in $$ for display math printing\n    return print(io, \"\\$\\$ \" * x.content * \" \\$\\$\")\nend\n\nLaTeXEquation(raw\"\"\"\n    \\left[\\begin{array}{c}\n        x \\\\\n        y\n    \\end{array}\\right]\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Using ssh-keygen in Terminal\nDESCRIPTION: Command to generate an SSH key pair with an empty passphrase and save it to a file named 'privatekey'. This creates both the private key and a public key file with .pub extension.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting/walkthrough.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -N \"\" -f privatekey\n```\n\n----------------------------------------\n\nTITLE: Markdown Issue References for Documenter.jl\nDESCRIPTION: Markdown formatted reference-style links to GitHub issues in the JuliaDocs/Documenter.jl repository. Each link maps an issue number to its full GitHub issue URL.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n[#946]: https://github.com/JuliaDocs/Documenter.jl/issues/946\n[#948]: https://github.com/JuliaDocs/Documenter.jl/issues/948\n[#953]: https://github.com/JuliaDocs/Documenter.jl/issues/953\n```\n\n----------------------------------------\n\nTITLE: Setting DocTestFilters for Julia REPL Output Formatting\nDESCRIPTION: This snippet sets DocTestFilters to remove stacktraces, file paths from at-block URLs, and account for printing changes of UndefVarError in Julia documentation tests.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/softscope.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nDocTestFilters = [\n    # remove stacktraces\n    r\"Stacktrace:(\\n \\[[0-9]+\\].*)*\",\n    # remove file paths from at-block URLs\n    r\"└ @ .+:[0-9]+\",\n    # Account for the printing change of UndefVarError\n    r\"UndefVarError: `?s`? not defined\",\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Initial Comments in Julia Doctests\nDESCRIPTION: Demonstration of how comments before the first Julia prompt are ignored in doctests.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/working.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\n# Initial comments before the first julia> prompt..\n# .. should be ignored.\njulia> 2 + 2\n4\n```\n\n----------------------------------------\n\nTITLE: Accessing WEBP File (Tiny Size) in Documenter.jl\nDESCRIPTION: Retrieves a tiny WEBP file from the Main.AT_EXAMPLE_FILES dictionary using a tuple key with format type and size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/index.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"webp\", :tiny)]\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Canonical @docs Block in Markdown\nDESCRIPTION: Demonstrates how to create a non-canonical @docs block using the canonical keyword argument.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```@docs; canonical=false\nmakedocs\n```\n```\n\n----------------------------------------\n\nTITLE: Setup Block in Julia Docs\nDESCRIPTION: Initializes a variable 'a' with value 1 in a setup block. Setup blocks are executed but not shown in the final documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/sharedefaultmodule.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\na = 1\n```\n\n----------------------------------------\n\nTITLE: Accessing PNG File (Big Size) in Documenter.jl\nDESCRIPTION: Retrieves a big PNG file from the Main.AT_EXAMPLE_FILES dictionary using a tuple key with format type and size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"png\", :big)]\n```\n\n----------------------------------------\n\nTITLE: Including Documentation for DocTestFixTest.Foo.foo in Julia\nDESCRIPTION: This directive includes documentation for the foo function from the DocTestFixTest.Foo module. The @docs macro is used to pull in external documentation into the current document.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\nDocTestFixTest.Foo.foo\n```\n```\n\n----------------------------------------\n\nTITLE: Type Annotation for Variables in Julia 1.8+\nDESCRIPTION: This example shows how to use type annotations for variables in Julia versions 1.8 and above. It uses the @static macro to conditionally execute the code based on the Julia version.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/clear_module/src/index.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\n@static if VERSION >= v\"1.8\"\ntyped::String = \"string\" # it is possible to use `::` to specify the type of a variable\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing GIF File (Big Size) in Documenter.jl\nDESCRIPTION: Retrieves a big GIF file from the Main.AT_EXAMPLE_FILES dictionary using a tuple key with format type and size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/index.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"gif\", :big)]\n```\n\n----------------------------------------\n\nTITLE: Creating File in Julia for Expansion Order Test\nDESCRIPTION: This code snippet uses the Julia 'touch' function to create an empty file named '00.txt'. This is likely used to test the order in which Documenter.jl processes and expands documentation files.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/expandorder/00.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\ntouch(\"00.txt\")\n```\n\n----------------------------------------\n\nTITLE: ASCII Art Diagram of HTTP Request Flow in Julia\nDESCRIPTION: This code block contains an ASCII art diagram illustrating the flow of an HTTP request through various layers in Julia, including RedirectLayer, BasicAuthLayer, CookieLayer, and others.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/unicode.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n┌────────────────────────────────────────────────────────────────────────────┐\n│                                             ┌───────────────┐              │\n│ HTTP.request(method, uri, headers, body) -> │ HTTP.Response ├──────────────┼┐\n│   │                                         └───────────────┘              ││\n│   │                                                                        ││\n│   │    ┌──────────────────────────────────────┐       ┌──────────────────┐ ││\n│   └───▶│ request(RedirectLayer, ...)          │       │ HTTP.StatusError │ ││\n│        └─┬────────────────────────────────────┴─┐     └─────────▲────────┘ ││\n│          │ request(BasicAuthLayer, ...)         │               │          ││\n│          └─┬────────────────────────────────────┴─┐             │          ││\n│            │ request(CookieLayer, ...)            │             │          ││\n│            └─┬────────────────────────────────────┴─┐           │          ││\n│              │ request(CanonicalizeLayer, ...)      │           │          ││\n│              └─┬────────────────────────────────────┴─┐         │          ││\n│                │ request(MessageLayer, ...)           ├─────────┼──────┐   ││\n\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence - 00.txt\nDESCRIPTION: Verifies that the file '00.txt' exists in the current directory. Throws an error if the file is missing.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/expandorder/01.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nisfile(\"00.txt\") || error(\"00.txt missing\")\n```\n\n----------------------------------------\n\nTITLE: Basic Julia Function Definition\nDESCRIPTION: Defines a simple Julia function that prints 'hello, world' to standard output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/prerender/src/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nfunction f()\n    print(\"hello, world\")\nend\n```\n\n----------------------------------------\n\nTITLE: Julia REPL Function Definition\nDESCRIPTION: Shows how the same hello world function appears when defined in the Julia REPL interface.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/prerender/src/index.md#2025-04-22_snippet_1\n\nLANGUAGE: julia-repl\nCODE:\n```\njulia> function f()\n           print(\"hello, world\")\n       end\n```\n\n----------------------------------------\n\nTITLE: Named Example Block in Julia Docs\nDESCRIPTION: Named example block 'somename' that checks if variable 'a' is defined in the current module using isdefined.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/sharedefaultmodule.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\nisdefined(@__MODULE__, :a)\n```\n\n----------------------------------------\n\nTITLE: Basic Doctest Example in Julia\nDESCRIPTION: Simple doctest showing basic arithmetic operation in Julia REPL format.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_15\n\nLANGUAGE: julia\nCODE:\n```\njulia> 2 + 2\n4\n```\n\n----------------------------------------\n\nTITLE: Performing Arithmetic Operations in Julia Documentation\nDESCRIPTION: These snippets demonstrate arithmetic operations and function calls using previously defined variables and functions.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_11\n\nLANGUAGE: julia\nCODE:\n```\n```@example 2\nx + y\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@example 1\nf(2), g(2)\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@example 2\nx - y\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@example 1\nf(1), g(1)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Information for Julia Documentation\nDESCRIPTION: This code snippet sets meta information for the documentation, specifically collapsing doc strings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/anchors.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Non-highlighted Code Block in Markdown\nDESCRIPTION: Shows how to create a basic non-highlighted code block in Markdown using triple backticks.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThis is an non-highlighted code block.\n... Rendered in monospace.\n```\n\n----------------------------------------\n\nTITLE: LLVM IR Addition Implementation\nDESCRIPTION: Shows the LLVM intermediate representation (IR) for Julia's addition operation. The code implements integer addition of two 64-bit numbers.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/prerender/src/index.md#2025-04-22_snippet_2\n\nLANGUAGE: llvm\nCODE:\n```\n;  @ int.jl:87 within `+'\ndefine i64 @\"julia_+_212\"(i64 signext %0, i64 signext %1) {\ntop:\n  %2 = add i64 %1, %0\n  ret i64 %2\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Large Random String Output in Julia\nDESCRIPTION: Generates a large random string (2^20 bytes) and prints it in 80-character chunks. Includes special handling for string partitioning differences between Julia versions via join() to ensure consistent behavior with SubString vs Vector{Char} outputs.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.megapage/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nusing Random\nfor s in Base.Iterators.partition(randstring(2^20), 80)\n    # Note: the join() is necessary to get strings (as opposed to Vector{Char} objects)\n    # on older Julia versions, since there was a breaking-ish bugfix that changed how\n    # Iterators.partition works with strings. join(::SubString) appears to basically be\n    # a no-op, so it has no real effect on newer Julia versions.\n    #\n    # https://github.com/JuliaLang/julia/issues/45768\n    # https://github.com/JuliaLang/julia/pull/46234\n    #\n    # Note: we _could_ also just print the vectors, but then the HTML files end up being\n    # ~14 MiB.\n    println(join(s))\nend\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Arithmetic in Julia REPL\nDESCRIPTION: This snippet demonstrates a simple addition operation in the Julia REPL environment. It shows how doctests can be used to verify that basic arithmetic operations produce the correct result.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/plugins/src/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\njulia> 1 + 1\n2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Continued Code Blocks in Julia Documentation\nDESCRIPTION: These snippets show how to use continued code blocks in documentation, allowing for multi-part code examples.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_13\n\nLANGUAGE: julia\nCODE:\n```\n```@example continued-code\nA = 1\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@example continued-code; continued = true\nfor i in 1:3\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@example\nA = 2\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@example continued-code; continued = true\n    println(A + i)\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@example continued-code\nend\n```\n```\n\nLANGUAGE: julia\nCODE:\n```\n```@example continued-code\nA + 1\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for Code Evaluation in Documenter\nDESCRIPTION: Experimental feature to set a fixed working directory for evaluating @repl and @example blocks in Documenter.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: julia\nCODE:\n```\nmakedocs(workdir = \"path/to/directory\")\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Function in Julia REPL\nDESCRIPTION: This snippet demonstrates defining an empty function in Julia REPL, addressing Issue 1392.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_simple/index.md#2025-04-22_snippet_2\n\nLANGUAGE: julia-repl\nCODE:\n```\njulia> function foo end;\n```\n\n----------------------------------------\n\nTITLE: Generating and Partitioning Large Random String in Julia\nDESCRIPTION: Creates a 1MB random string and prints it in 80-character chunks. Includes version compatibility handling for string iteration differences between Julia versions using join() to ensure consistent string output across versions.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.megapage/subdir/subpage.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nusing Random\nfor s in Base.Iterators.partition(randstring(2^20), 80)\n    # Note: the join() is necessary to get strings (as opposed to Vector{Char} objects)\n    # on older Julia versions, since there was a breaking-ish bugfix that changed how\n    # Iterators.partition works with strings. join(::SubString) appears to basically be\n    # a no-op, so it has no real effect on newer Julia versions.\n    #\n    # https://github.com/JuliaLang/julia/issues/45768\n    # https://github.com/JuliaLang/julia/pull/46234\n    #\n    # Note: we _could_ also just print the vectors, but then the HTML files end up being\n    # ~14 MiB.\n    println(join(s))\nend\n```\n\n----------------------------------------\n\nTITLE: Using 'nothing' as a Function Name in Julia\nDESCRIPTION: This example demonstrates that 'nothing' can be used as a function name in Julia. It defines a function 'nothing()' that returns 3 and assigns its result to 'a'.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/clear_module/src/index.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\nnothing() = 3 # it is possible to use `nothing` as a function name\na = nothing()\n```\n\n----------------------------------------\n\nTITLE: Named Cross-References in Julia Documentation\nDESCRIPTION: Shows how to create named cross-references using specific IDs, module functions, and string targets\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/xrefs.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* [X-ref target with an ID](@ref xreftarget)\n* [docstring target](@ref Mod.func)\n* [string target](@ref \"X-ref target\")\n```\n\n----------------------------------------\n\nTITLE: Hiding Code Output in Julia Documentation\nDESCRIPTION: This snippet demonstrates how to hide code output in documentation using the #hide comment.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_9\n\nLANGUAGE: julia\nCODE:\n```\n```@example hide-all-the-things\na = 1#hide\nb = 2# hide\nc = 3#  hide\nd = 4 #hide\ne = 5 # hide\nf = 6 #  hide\na + b + c + d + e + f\n```\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Examples\nDESCRIPTION: Demonstrates various Unicode character rendering scenarios including mathematical symbols and error messages.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/fonts.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n'∀'  : Unicode U+2200 (category Sm: Symbol, math)\nERROR: StringIndexError(\"∀ x ∃ y\", 2)\n1 ⊻ 3:\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module in Meta Block\nDESCRIPTION: Sets the current module context to Main for the documentation generation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/autodocs.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCurrentModule = Main\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Definition in Julia Documentation\nDESCRIPTION: This snippet checks if a variable is defined in the current scope of the documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\n```@example\n@isdefined a\n```\n```\n\n----------------------------------------\n\nTITLE: Discarding Standard Output in Documenter.jl\nDESCRIPTION: Demonstrates how standard output is discarded when a non-nothing value is returned in an @example block.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_showcase/showcase.md#2025-04-22_snippet_10\n\nLANGUAGE: julia\nCODE:\n```\nprintln(\"Hello World\")\n42\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Contents Node in Julia Documentation\nDESCRIPTION: This code snippet shows how to create an empty contents node in Julia documentation. It uses the @contents macro with a non-existent page, resulting in an empty contents section.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/latex.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```@contents\nPages = [\"does-not-exist.md\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Functions with Non-Canonical Names in Julia\nDESCRIPTION: This snippet documents functions and macros without using their canonical names, which can be useful for alternative representations.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\n```@docs; canonical=false\nfunc(x)\nT\nccall\nfor\nwhile\n@time\n@assert\n```\n```\n\n----------------------------------------\n\nTITLE: ASCII Art Graph Plot\nDESCRIPTION: Shows an ASCII art representation of a graph plot using box-drawing characters and block elements.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/fonts.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n  ┌──────────────────────────────────────────────────────────────────────┐\n1 │                             ▗▄▞▀▀▀▀▀▀▀▄▄                             │\n  │                           ▄▞▘           ▀▄▖                          │\n  │                         ▄▀                ▝▚▖                        │\n  │                       ▗▞                    ▝▄                       │\n  │                      ▞▘                      ▝▚▖                     │\n  │                    ▗▀                          ▝▚                    │\n  │                   ▞▘                             ▀▖                  │\n  │                 ▗▞                                ▝▄                 │\n  │                ▄▘                                   ▚▖               │\n  │              ▗▞                                      ▝▄              │\n  │             ▄▘                                         ▚▖            │\n  │           ▗▀                                            ▝▚           │\n  │         ▗▞▘                                               ▀▄         │\n  │       ▄▀▘                                                   ▀▚▖      │\n0 │ ▄▄▄▄▀▀                                                        ▝▀▚▄▄▄▖│\n  └──────────────────────────────────────────────────────────────────────┘\n  0                                                                     70\n```\n\n----------------------------------------\n\nTITLE: Displaying a Non-Highlighted Code Block in Documenter.jl\nDESCRIPTION: Shows a plain code block without syntax highlighting, rendered in monospace font. This is created using triple backticks without specifying a language.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis is an non-highlighted code block.\n... Rendered in monospace.\n```\n\n----------------------------------------\n\nTITLE: Setting CollapsedDocStrings in Julia Documentation\nDESCRIPTION: This code snippet sets the CollapsedDocStrings metadata option to true, which affects how docstrings are displayed in the generated documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/deploydocs.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Document Structure with Markdown Headings\nDESCRIPTION: This snippet demonstrates the use of Markdown syntax to structure a document. It includes a hidden section and two visible headings.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/hidden/x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hidden 1\n\n## First heading\n## Second heading\n```\n\n----------------------------------------\n\nTITLE: Generating Empty Index Node in Julia Documentation\nDESCRIPTION: This code snippet demonstrates how to create an empty index node in Julia documentation. It uses the @index macro with a non-existent page, resulting in an empty index section.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/latex.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\n```@index\nPages = [\"does-not-exist.md\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module for Autodocs in Julia\nDESCRIPTION: This snippet sets the current module for autodocs generation in Julia documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_18\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCurrentModule = Main\n```\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment and Printing in Julia Documentation\nDESCRIPTION: This snippet assigns values to variables and prints them, demonstrating basic Julia syntax in documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_7\n\nLANGUAGE: julia\nCODE:\n```\n```@example 2\nx, y = 1, 2\nprintln(x, y)\n```\n```\n\n----------------------------------------\n\nTITLE: Simple Variable Assignment in Julia\nDESCRIPTION: This example demonstrates a basic variable assignment in Julia. It assigns the value 1 to the variable 'a'.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/clear_module/src/index.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\na = 1 # simple assignment\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference Test\nDESCRIPTION: References documentation for DocTestFixTest.Foo.foo function\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/fixed.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@docs\nDocTestFixTest.Foo.foo\n```\n\n----------------------------------------\n\nTITLE: Setting Collapsed Doc Strings Meta Option in Julia Documenter\nDESCRIPTION: This snippet sets a meta option that collapses documentation strings in the generated documentation. When CollapsedDocStrings is set to true, documentation strings will be initially collapsed in the HTML output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/jsdependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Example Page Depth Range\nDESCRIPTION: Example showing UnitRange syntax for specifying content depth in @contents blocks\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\nDepth = 2:3\n```\n\n----------------------------------------\n\nTITLE: Tuple Assignment and Display\nDESCRIPTION: Shows tuple assignment and retrieval operations\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/fixed.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\njulia> a = (1,2)\n(1, 2)\n\njulia> a\n(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Using InteractiveUtils in Julia Documentation\nDESCRIPTION: This snippet demonstrates the use of InteractiveUtils to show which method is called for a specific type.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_12\n\nLANGUAGE: julia\nCODE:\n```\n```@example 3\nusing InteractiveUtils\n@which T()\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Julia\nDESCRIPTION: This example demonstrates how to define a constant in Julia using the 'const' keyword. It defines a constant 'a' with the value 5.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/clear_module/src/index.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\nconst a = 5 # it is possible to use `const` to define a constant\n```\n\n----------------------------------------\n\nTITLE: Using 'nothing' as a Variable Name in Julia\nDESCRIPTION: This example shows that 'nothing' can be used as a variable name in Julia. It assigns 1 to 'nothing' and 2 to 'a'.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/clear_module/src/index.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nnothing = 1 # it is possible to use `nothing` as a variable name\na = 2\n```\n\n----------------------------------------\n\nTITLE: Disabling Site Name Display in Documenter HTML Sidebar\nDESCRIPTION: Code snippet demonstrating how to disable the display of the site name at the top of the sidebar in Documenter's HTML output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: julia\nCODE:\n```\nHTML(sidebar_sitename = false)\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Documentation in Julia\nDESCRIPTION: This code snippet sets metadata for the documentation generation process. It collapses doc strings in the generated documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/crossref.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: Inserting Empty Documentation Block in Julia\nDESCRIPTION: This code snippet uses the @docs macro to create an empty documentation block. It's typically used as a placeholder for future documentation of Julia functions or types.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/missingdocs/src/none/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\n```\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Private Key with OpenSSL in Bash\nDESCRIPTION: Bash commands to encode a private key in Base64 format using openssl and remove newlines with tr. This is an alternative to the Julia method for Unix-like systems.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting/walkthrough.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl enc -base64 -in path/to/your/private/key -out path/to/your/base/64/encoded/key\n# We need to truncate the newlines\ncat path/to/your/base/64/encoded/key | tr -d \"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Replicating Sidebar with @contents Block in Markdown\nDESCRIPTION: This snippet demonstrates how to replicate a subsection of the sidebar in an @contents block by using a global variable defined in make.jl.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n```@contents\nPages = Main.SUBSECTION_PAGES\n```\n```\n\n----------------------------------------\n\nTITLE: Array Comparison Test\nDESCRIPTION: Tests comparing two 3D arrays with different values\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/fixed.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\njulia> Main.DocTestFixArray_2468\n4×1×1 Array{Int64,3}:\n[:, :, 1] =\n 2\n 4\n 6\n 8\n\njulia> Main.DocTestFixArray_1234\n4×1×1 Array{Int64,3}:\n[:, :, 1] =\n 1\n 2\n 3\n 4\n```\n\n----------------------------------------\n\nTITLE: SCSS File Structure for HTMLWriter Themes\nDESCRIPTION: Directory structure containing SCSS and Sass files for styling HTML documentation. Includes Bulma framework (v0.9.4), Darkly Bulmaswatch theme (v0.8.1), and Documenter-specific style components.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/assets/html/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nscss/\n  bulma/       # Bulma CSS framework v0.9.4\n  darkly/      # Darkly Bulmaswatch theme v0.8.1\n  documenter/  # Documenter-specific styles\n  documenter.scss\n  darkly.scss\nthemes/       # Compiled CSS files\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module Context in Julia Documenter\nDESCRIPTION: This code block sets the current module context to Documenter.Selectors for the documentation page, which affects how references are resolved.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/docsxref/src/page.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@meta\nCurrentModule = Documenter.Selectors\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Docstring Reference in Julia Documentation\nDESCRIPTION: A documentation block attempting to reference a docstring from the Main.OnlineLinkcheckTests.DocstringLinkTests.InvalidLinks module. Used for testing how documentation generators handle invalid docstring references.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/online/docstring_links/src/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@docs\nMain.OnlineLinkcheckTests.DocstringLinkTests.InvalidLinks.f\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence - AA.txt\nDESCRIPTION: Verifies that the file 'AA.txt' exists in the current directory. Throws an error if the file is missing.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/expandorder/01.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nisfile(\"AA.txt\") || error(\"AA.txt missing\")\n```\n\n----------------------------------------\n\nTITLE: Access Setup Variable\nDESCRIPTION: Displays the value of x that was set in the previous @setup block\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_13\n\nLANGUAGE: julia\nCODE:\n```\nx\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operations\nDESCRIPTION: Demonstrates simple addition operations in Julia\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/fixed.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\njulia> 1 + 2\n3\n\njulia> 3 + 4\n7\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Demo Function in Julia\nDESCRIPTION: Creates a function that generates HTML/DOM elements to demonstrate font variations. The function takes weight and style parameters to customize the font appearance of code blocks.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/fonts.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nusing Documenter.DOM\nfunction font_demo_snippet(weight, style)\n    @tags pre code div\n    codeblock = pre(code[\".language-julia-repl\"](\"\"\"\\n    julia> for n in 0x2700:0x27bf\n                Base.isidentifier(string(Char(n))) && print(Char(n))\n        end\n    ✀✁✂✃✄✅✆✇✈✉✊✋✌✍✎✏✐✑✒✓✔✕✖✗✘✙✚✛✜✝✞✟✠✡✢✣✤✥✦✧✨✩✪✫✬✭✮✯✰✱✲✳✴✵✶✷✸✹✺\n    ✻✼✽✾✿❀❁❂❃❄❅❆❇❈❉❊❋❌❍❎❏❐❑❒❓❔❕❖❗❘❙❚❛❜❝❞❟❠❡❢❣❤❥❦❧➔➕➖➗➘➙➚➛➜➝➞➟➠➡\n    ➢➣➤➥➦➧➨➩➪➫➬➭➮➯➰➱➲➳➴➵➶➷➸➹➺➻➼➽➾➿\n\n    julia> ❤(s) = println(\\\"I ❤ \\$(s)\\\")\n    ❤ (generic function with 1 method)\n\n    julia> ❤(\\\"Julia\\\")\n    I ❤ Julia\n    \"\"\"))\n\n    wrapping_div = if isnothing(weight) && isnothing(style)\n        div\n    else\n        css_style = isnothing(weight) ? \"\" : \"font-weight: $(weight);\"\n        css_style *= isnothing(style) ? \"\" : \"font-style: $(style);\"\n        div[:style => css_style]\n    end\n\n    return wrapping_div(codeblock)\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Output Filtering in Julia Doctests\nDESCRIPTION: This doctest uses a filter parameter to match output against a regular expression. It demonstrates how to create tests that check for partial output matches rather than exact output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest; filter = r\"foo\"\njulia> println(\"  foobar\")\n  foobaz\n```\n```\n\n----------------------------------------\n\nTITLE: Testing String Tuple Assignment in Julia\nDESCRIPTION: This doctest shows creating a tuple of strings with suppressed output using a semicolon, then displaying it. It demonstrates how string tuples are handled in the REPL.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_10\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\njulia> a = (\"a\", \"b\", \"c\");\n\njulia> a\n```\n```\n\n----------------------------------------\n\nTITLE: Example Code Block Style Reference\nDESCRIPTION: Code block style reference showing r\"...\" => s\"...\" pattern for doctest filters\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\nr\"...\" => s\"...\"\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-dimensional and One-dimensional Arrays in Julia\nDESCRIPTION: This doctest demonstrates accessing two array fixtures: a 3D array and a 1D array. It shows how Julia displays the different array formats in the REPL output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\njulia> Main.DocTestFixArray_2468\n4×1×1 Array{Int64,3}:\n[:, :, 1] =\n 1\n 2\n 3\n 4\n\njulia> Main.DocTestFixArray_1234\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n```\n```\n\n----------------------------------------\n\nTITLE: Julia Type Declaration Example\nDESCRIPTION: Code example showing typed variable declaration syntax in Julia\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\na::SomeType = somevalue\n```\n\n----------------------------------------\n\nTITLE: Alternative Doctest Syntax for Array Access in Julia\nDESCRIPTION: This doctest uses an alternative syntax without the julia> prompt, showing the input followed by an output section. It demonstrates different ways to write doctests.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\nMain.DocTestFixArray_2468\n\n# output\n\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Documenter.jl using Pkg API in Julia\nDESCRIPTION: This snippet shows how to install Documenter.jl using the Pkg API directly in Julia. It imports the Pkg module and uses the add function to install Documenter.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\njulia> import Pkg; Pkg.add(\"Documenter\")\n```\n\n----------------------------------------\n\nTITLE: Symbol Division Error\nDESCRIPTION: Demonstrates an error case when attempting to divide symbols\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/fixed.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\njulia> :a / :b\nERROR: MethodError: no method matching /(::Symbol, ::Symbol)\n[...]\n```\n\n----------------------------------------\n\nTITLE: Documentation URL Structure\nDESCRIPTION: Example URL patterns for accessing different versions of documentation for multiple packages in a monorepo.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/vX.Y.Z\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/dev\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/stable  # Links to most recent top level version\n\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageA/vX.Y.Z\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageA/dev\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageA/stable  # Links to most recent PackageA version\n\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageB/vX.Y.Z\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageB/dev\nhttps://USER_NAME.github.io/PACKAGE_NAME.jl/PackageB/stable  # Links to most recent PackageB version\n```\n\n----------------------------------------\n\nTITLE: Comparing Two One-dimensional Arrays in Julia\nDESCRIPTION: This doctest shows two 1D arrays with different names but identical content. It demonstrates how arrays are displayed in the REPL output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/broken.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\n```jldoctest\njulia> Main.DocTestFixArray_1234\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\njulia> Main.DocTestFixArray_2468\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Configuration for Julia Documentation\nDESCRIPTION: Sets the CollapsedDocStrings meta option to true to collapse documentation strings by default.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/documents.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@meta\nCollapsedDocStrings = true\n```\n\n----------------------------------------\n\nTITLE: Resetting DocTestFilters in Julia\nDESCRIPTION: This snippet resets the DocTestFilters to their default value (nothing) after they were previously set for specific formatting requirements.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/src/softscope.md#2025-04-22_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\nDocTestFilters = nothing\n```\n\n----------------------------------------\n\nTITLE: Initialize Variable in Named Block\nDESCRIPTION: Creates a variable x with value 40 in a named block 'block-name'\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_10\n\nLANGUAGE: julia\nCODE:\n```\nx = 40\n```\n\n----------------------------------------\n\nTITLE: Pretty Table Output Example\nDESCRIPTION: Demonstrates the output of a pretty-printed table with truncated columns and rows using Unicode box-drawing characters.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/fonts.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\njulia> pretty_table(data, display_size = (11,30))\n┌────────┬────────┬────────┬──\n│ Col. 1 │ Col. 2 │ Col. 3 │ ⋯\n├────────┼────────┼────────┼──\n│      1 │  false │    1.0 │ ⋯\n│      2 │   true │    2.0 │ ⋯\n│      3 │  false │    3.0 │ ⋯\n│   ⋮    │   ⋮    │   ⋮    │ ⋱\n└────────┴────────┴────────┴──\n   1 column and 3 rows omitted\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Documentation Display in Documenter.jl\nDESCRIPTION: This directive sets metadata for the documentation page, specifically configuring docstrings to be displayed in a collapsed state by default.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/lib/internals/doctests.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```@meta\nCollapsedDocStrings = true\n```\n```\n\n----------------------------------------\n\nTITLE: ASCII Art DataFrame Representation in Julia\nDESCRIPTION: This code block shows an ASCII representation of a DataFrame in Julia, demonstrating how tabular data can be displayed in a text-based format.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/unicode.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n2×4 DataFrames.DataFrame\n│ Row │ a     │ b       │ c     │ d      │\n│     │ Int64 │ Float64 │ Int64 │ String │\n├─────┼───────┼─────────┼───────┼────────┤\n│ 1   │ 2     │ 2.0     │ 2     │ John   │\n│ 2   │ 2     │ 2.0     │ 2     │ Sally  │\n```\n\n----------------------------------------\n\nTITLE: ASCII Art Graph in Julia Code Block\nDESCRIPTION: This Julia code block contains an ASCII art graph showing a curve plotted on a coordinate system. It demonstrates the ability to render complex ASCII drawings within code blocks.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/unicode.md#2025-04-22_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\n  ┌──────────────────────────────────────────────────────────────────────┐\n1 │                             ▗▄▞▀▀▀▀▀▀▀▄▄                             │\n  │                           ▄▞▘           ▀▄▖                          │\n  │                         ▄▀                ▝▚▖                        │\n  │                       ▗▞                    ▝▄                       │\n  │                      ▞▘                      ▝▚▖                     │\n  │                    ▗▀                          ▝▚                    │\n  │                   ▞▘                             ▀▖                  │\n  │                 ▗▞                                ▝▄                 │\n  │                ▄▘                                   ▚▖               │\n  │              ▗▞                                      ▝▄              │\n  │             ▄▘                                         ▚▖            │\n  │           ▗▀                                            ▝▚           │\n  │         ▗▞▘                                               ▀▄         │\n  │       ▄▀▘                                                   ▀▚▖      │\n0 │ ▄▄▄▄▀▀                                                        ▝▀▚▄▄▄▖│\n  └──────────────────────────────────────────────────────────────────────┘\n  0                                                                     70\n```\n\n----------------------------------------\n\nTITLE: ASCII Art HTTP Request Flow Diagram\nDESCRIPTION: Displays an ASCII art diagram showing the HTTP request flow and layer structure using box-drawing characters.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/fonts.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n┌────────────────────────────────────────────────────────────────────────────┐\n│                                             ┌───────────────┐              │\n│ HTTP.request(method, uri, headers, body) -> │ HTTP.Response ├──────────────┼┐\n│   │                                         └───────────────┘              ││\n│   │                                                                        ││\n│   │    ┌──────────────────────────────────────┐       ┌──────────────────┐ ││\n│   └───▶│ request(RedirectLayer, ...)          │       │ HTTP.StatusError │ ││\n│        └─┬────────────────────────────────────┴─┐     └─────────▲────────┘ ││\n│          │ request(BasicAuthLayer, ...)         │               │          ││\n│          └─┬────────────────────────────────────┴─┐             │          ││\n│            │ request(CookieLayer, ...)            │             │          ││\n│            └─┬────────────────────────────────────┴─┐           │          ││\n│              │ request(CanonicalizeLayer, ...)      │           │          ││\n│              └─┬────────────────────────────────────┴─┐         │          ││\n│                │ request(MessageLayer, ...)           ├─────────┼──────┐   ││\n```\n\n----------------------------------------\n\nTITLE: Displaying Unicode Characters in Highlighted Julia Code Block\nDESCRIPTION: This Julia code block shows the same Unicode characters as the previous example, but with syntax highlighting enabled.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/unicode.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nxor:    ⊻\nforall: ∀\nexists: ∃\ncheck:  ✓\noplus:  ⊕\n```\n\n----------------------------------------\n\nTITLE: Inserting Custom SVG with @raw HTML Block (HTML)\nDESCRIPTION: This snippet demonstrates how to use a @raw html block to insert custom SVG code directly into the HTML output of the documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n```@raw html\n<svg style=\"display: block; margin: 0 auto;\" width=\"5em\" height=\"5em\">\n\t<circle cx=\"2.5em\" cy=\"2.5em\" r=\"2em\" stroke=\"black\" stroke-width=\".1em\" fill=\"red\" />\n</svg>\n```\n```\n\n----------------------------------------\n\nTITLE: Final Named Block Tuple\nDESCRIPTION: Creates a tuple containing both x and y variables from the shared namespace\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/showcase.md#2025-04-22_snippet_16\n\nLANGUAGE: julia\nCODE:\n```\n(x, y)\n```\n\n----------------------------------------\n\nTITLE: Executing File System Operations in Julia REPL\nDESCRIPTION: This code snippet demonstrates basic file system operations in Julia using the REPL. It shows how to get the current working directory and create a new file.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/workdir/src/subdir/file.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npwd()\n\ntouch(\"subdir_file.txt\")\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands in Julia REPL\nDESCRIPTION: This code snippet demonstrates the use of Julia's REPL to execute shell commands. It shows how to get the current working directory and create a new file.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/symlinks/extra/other_real.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npwd()\n\ntouch(\"root_index.txt\")\n```\n\n----------------------------------------\n\nTITLE: Executing Basic File Operations in Julia REPL\nDESCRIPTION: Demonstrates basic file system operations using Julia's REPL, including getting current directory with pwd() and creating a new file with touch(). Shows interaction with the file system in a documentation context.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/symlinks/src/other.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npwd()\n\ntouch(\"root_index.txt\")\n```\n\n----------------------------------------\n\nTITLE: Checking Type Information in Julia Documentation\nDESCRIPTION: This snippet checks if a type is defined and shows its type information, demonstrating metaprogramming capabilities.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/lib/functions.md#2025-04-22_snippet_10\n\nLANGUAGE: julia\nCODE:\n```\n```@example 3\n@isdefined T\n@show @isdefined t # hide\n@show typeof(T)\ntypeof(t) # hide\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Unicode Characters in Non-Highlighted Code Block\nDESCRIPTION: This code block demonstrates the rendering of various Unicode characters including XOR, forall, exists, checkmark, and circled plus symbols. It also includes examples of escaping backslashes and percent signs.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/unicode.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nxor:    ⊻\nforall: ∀\nexists: ∃\ncheck:  ✓\noplus:  ⊕\n\nWhat about the other edge cases: \\ % \\% %\\ %% %\\%%\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid EditURL Configuration in Documenter.jl\nDESCRIPTION: A meta block demonstrating a commented-out invalid EditURL configuration. The comment suggests that currently, a bad EditURL causes makedocs() to error, but this behavior should be changed to an optional warning instead.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/editurl/bad.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```@meta\n# TODO: a bad EditURL currently makes makedocs() error\n# This should optionally be a warning.\n#EditURL = \"/foo/bar/baz/I/Should/Not/Exist\"\n```\n```\n\n----------------------------------------\n\nTITLE: String Tuple Operations\nDESCRIPTION: Shows creation and display of a tuple containing strings\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/doctests/fix/fixed.md#2025-04-22_snippet_5\n\nLANGUAGE: julia\nCODE:\n```\njulia> a = (\"a\", \"b\", \"c\");\n\njulia> a\n(\"a\", \"b\", \"c\")\n```\n\n----------------------------------------\n\nTITLE: Loading DocumenterTools Module\nDESCRIPTION: Julia REPL command to import the DocumenterTools module for use.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/hosting.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\njulia> using DocumenterTools\n```\n\n----------------------------------------\n\nTITLE: Hidden Code Example with Random Numbers\nDESCRIPTION: Shows how to hide specific lines in @example blocks using # hide comments while still showing relevant code and output.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/docs/src/man/syntax.md#2025-04-22_snippet_15\n\nLANGUAGE: julia\nCODE:\n```\nimport Random # hide\nRandom.seed!(1) # hide\nA = rand(3, 3)\nb = [1, 2, 3]\nA \\ b\n```\n\n----------------------------------------\n\nTITLE: Accessing PNG File (Tiny Size) in Documenter.jl\nDESCRIPTION: Retrieves a tiny PNG file from the Main.AT_EXAMPLE_FILES dictionary using a tuple key with format type and size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"png\", :tiny)]\n```\n\n----------------------------------------\n\nTITLE: Accessing WEBP File (Big Size) in Documenter.jl\nDESCRIPTION: Retrieves a big WEBP file from the Main.AT_EXAMPLE_FILES dictionary using a tuple key with format type and size.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/outputs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nMain.AT_EXAMPLE_FILES[(\"webp\", :big)]\n```\n\n----------------------------------------\n\nTITLE: REPL Example in Julia Docs\nDESCRIPTION: Demonstrates REPL interaction by printing the value of variable 'a'. The @repl block simulates Julia REPL behavior in documentation.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/sharedefaultmodule.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nprintln(a)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hidden Code in Julia REPL\nDESCRIPTION: This snippet shows how to use hidden code in a Julia REPL block, addressing PR 2056.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.latex_simple/index.md#2025-04-22_snippet_5\n\nLANGUAGE: julia-repl\nCODE:\n```\nx = 1 # hide\nx = 2 # hide\nprintln(x)\nx\n```\n\n----------------------------------------\n\nTITLE: Documenting hide Function Reference - Julia\nDESCRIPTION: Documentation block for the hide function using the @docs macro in Julia's documentation system.\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src/hidden/index.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n```@docs\nhide\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Reference for Cover Page\nDESCRIPTION: Markdown syntax for including a cover page image from the assets directory\nSOURCE: https://github.com/juliadocs/documenter.jl/blob/master/test/examples/src.cover_page/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![cover](./assets/cover.png)\n```"
  }
]