[
  {
    "owner": "camel-ai",
    "repo": "owl",
    "content": "TITLE: Define and Run Custom Task with OWL Society (Python)\nDESCRIPTION: This Python code snippet defines a custom task, constructs an OWL society agent using a provided question, and executes it to obtain an answer along with chat history and token count. It then prints a highlighted answer in the console. Assumes function definitions for construct_society and run_society, and a properly configured Python environment. Inputs: task description string. Outputs: answer and related debug info to stdout.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# Define your own task\ntask = \"Task description here.\"\n\nsociety = construct_society(question)\nanswer, chat_history, token_count = run_society(society)\n\nprint(f\"\\033[94mAnswer: {answer}\\033[0m\")\n```\n\n----------------------------------------\n\nTITLE: Using OWL to Process Local DOCX Files Task in Python\nDESCRIPTION: A Python snippet illustrating how to define a task querying the contents of a DOCX file from a local path. It shows the use of 'construct_society' to create an agent society based on the question, runs the society to get the answer, chat history, and token count, and prints the answer with colored terminal output. Dependencies include the OWL framework functions 'construct_society' and 'run_society'. The input is a string representing a task query including the file path, and the output is the model-derived answer printed to the console.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# ローカルファイルを使用したタスク（例：ファイルパス：`tmp/example.docx`）\ntask = \"What is in the given DOCX file? Here is the file path: tmp/example.docx\"\n\nsociety = construct_society(question)\nanswer, chat_history, token_count = run_society(society)\nprint(f\"\\033[94mAnswer: {answer}\\033[0m\")\n```\n\n----------------------------------------\n\nTITLE: Configure Available Toolkits for OWL (Python)\nDESCRIPTION: Lists and enables various toolkits in the OWL tool chain by expanding and combining the get_tools() outputs from toolkit classes. Supports browser automation, video analysis, audio analysis, code execution, information retrieval, and document/file operations. Prerequisite: correct module imports and model dictionary. Inputs: customizable via class parameters (e.g., headless mode, model spec). Outputs: list of enabled tool objects.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# Configure toolkits\ntools = [\n    *BrowserToolkit(headless=False).get_tools(),  # Browser automation\n    *VideoAnalysisToolkit(model=models[\"video\"]).get_tools(),\n    *AudioAnalysisToolkit().get_tools(),  # Requires OpenAI Key\n    *CodeExecutionToolkit(sandbox=\"subprocess\").get_tools(),\n    *ImageAnalysisToolkit(model=models[\"image\"]).get_tools(),\n    SearchToolkit().search_duckduckgo,\n    SearchToolkit().search_google,  # Comment out if unavailable\n    SearchToolkit().search_wiki,\n    SearchToolkit().search_bocha,\n    SearchToolkit().search_baidu,\n    *ExcelToolkit().get_tools(),\n    *DocumentProcessingToolkit(model=models[\"document\"]).get_tools(),\n    *FileWriteToolkit(output_dir=\"./\").get_tools(),\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Selected OWL Toolkits in Python\nDESCRIPTION: This Python snippet illustrates how to import specific toolkits and configure a customized tools list for OWL, limiting to selected toolkits such as BrowserToolkit with headless mode enabled, SearchToolkit's Wikipedia search, and CodeExecutionToolkit with subprocess sandboxing. The configured tools list is then passed as arguments to an assistant agent setup. This allows optimization of performance and resource usage by loading only necessary toolkits.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# 1. ツールキットをインポート\nfrom camel.toolkits import BrowserToolkit, SearchToolkit, CodeExecutionToolkit\n\n# 2. ツールリストを設定\ntools = [\n    *BrowserToolkit(headless=True).get_tools(),\n    SearchToolkit().search_wiki,\n    *CodeExecutionToolkit(sandbox=\"subprocess\").get_tools(),\n]\n\n# 3. アシスタントエージェントに渡す\nassistant_agent_kwargs = {\"model\": models[\"assistant\"], \"tools\": tools}\n```\n\n----------------------------------------\n\nTITLE: Selecting LLM Client Based on Model Name - Python\nDESCRIPTION: This Python function returns an instance of the appropriate large language model client based on a string parameter specifying the desired model. It supports Gemini, OpenAI, and Qwen models. If an unsupported model name is provided, the function raises a ValueError. This design enables the system to flexibly switch AI backends using a unified interface.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef get_llm_client(model_name: str):\n    \"\"\"获取指定的LLM客户端\"\"\"\n    if model_name.lower() == 'gemini':\n        return GeminiClient()\n    elif model_name.lower() == 'openai':\n        return OpenAIClient()\n    elif model_name.lower() == 'qwen':\n        return QwenClient()\n    else:\n        raise ValueError(f\"不支持的模型: {model_name}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Model Support for Large Language Models in Python\nDESCRIPTION: This function provides a flexible interface to select and instantiate different LLM clients such as Gemini, OpenAI, or Qwen based on the model name. It enables dynamic switching between models to facilitate multiple analysis modalities within the investment system, enhancing adaptability and scalability.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndef get_llm_client(model_name: str):\n    \"\"\"Get the specified LLM client\"\"\"\n    if model_name.lower() == 'gemini':\n        return GeminiClient()\n    elif model_name.lower() == 'openai':\n        return OpenAIClient()\n    elif model_name.lower() == 'qwen':\n        return QwenClient()\n    else:\n        raise ValueError(f\"Unsupported model: {model_name}\")\n```\n\n----------------------------------------\n\nTITLE: Run Minimal OWL Example with LLM Only (Bash)\nDESCRIPTION: Executes a simplified OWL Python example requiring only one LLM API key (e.g., OpenAI). Targets users needing a fast, minimal setup. Environment must provide the API key. Expected output: task result/answer.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\npython examples/run_mini.py\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Up - Bash\nDESCRIPTION: This snippet uses Docker Compose to start the OWL container in detached mode (-d).  Docker Compose simplifies the process of running multi-container applications.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running OWL using Docker with pre-built image\nDESCRIPTION: Docker Hubから事前構築されたイメージを使用してOWLを実行する手順です。このオプションは最速で、ほとんどのユーザーに推奨されます。これには、コンテナの起動、コンテナ内でのOWLの実行、およびPlaywrightの依存関係のインストールが含まれています。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# このオプションはDocker Hubから即使用可能なイメージをダウンロードします\n# 最速であり、ほとんどのユーザーに推奨されます\ndocker compose up -d\n\n# コンテナ内でOWLを実行\ndocker compose exec owl bash\ncd .. && source .venv/bin/activate\nplaywright install-deps\nxvfb-python examples/run.py\n```\n\n----------------------------------------\n\nTITLE: Run OWL Task with Local File Input (Python)\nDESCRIPTION: This snippet demonstrates how to formulate a task for OWL that involves referencing a file (e.g., a DOCX document). By specifying the file path in the task string and running the OWL agent as before, document tools are automatically triggered to process and answer the file content. Dependencies: proper file location, context-supporting toolkits. Outputs: processed answer from document inspection.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# Task with a local file (e.g., file path: `tmp/example.docx`)\ntask = \"What is in the given DOCX file? Here is the file path: tmp/example.docx\"\n\nsociety = construct_society(question)\nanswer, chat_history, token_count = run_society(society)\nprint(f\"\\033[94mAnswer: {answer}\\033[0m\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Specialized Agents for Investment Analysis - Python\nDESCRIPTION: This Python snippet initializes ten specialized agents representing different roles in the system, each instantiated with parameters controlling reasoning display and model selection. These agents collaborate via inter-agent messaging to perform data collection, technical, fundamental, sentiment and valuation analyses, debate, risk assessment, and portfolio management, forming a comprehensive multi-agent AI-driven investment decision pipeline.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# 创建代理\nmarket_data_agent = MarketDataAgent(show_reasoning=show_reasoning, model_name=model_name)\ntechnical_analyst = TechnicalAnalystAgent(show_reasoning=show_reasoning, model_name=model_name)\nfundamentals_analyst = FundamentalsAnalystAgent(show_reasoning=show_reasoning, model_name=model_name)\nsentiment_analyst = SentimentAnalystAgent(show_reasoning=show_reasoning, model_name=model_name)\nvaluation_analyst = ValuationAnalystAgent(show_reasoning=show_reasoning, model_name=model_name)\nresearcher_bull = ResearcherBullAgent(show_reasoning=show_reasoning, model_name=model_name)\nresearcher_bear = ResearcherBearAgent(show_reasoning=show_reasoning, model_name=model_name)\ndebate_room = DebateRoomAgent(show_reasoning=show_reasoning, model_name=model_name)\nrisk_manager = RiskManagerAgent(show_reasoning=show_reasoning, model_name=model_name)\nportfolio_manager = PortfolioManagerAgent(show_reasoning=show_reasoning, model_name=model_name)\n```\n\n----------------------------------------\n\nTITLE: OWL Convenience Scripts for Docker Management and Execution (Bash)\nDESCRIPTION: Shows common Bash operations in the .container directory to make build and run scripts executable, build the Docker image, and execute a question through OWL using a prebuilt runner script. Prerequisites: executable permissions, Bash shell, Docker daemon. Inputs: optional question string. Outputs: script-driven build and inference result.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd .container\nchmod +x build_docker.sh\n./build_docker.sh\n./run_in_docker.sh \"your question\"\n```\n\n----------------------------------------\n\nTITLE: Customizing OWL Toolkits and Passing to Assistant Agent in Python\nDESCRIPTION: This snippet illustrates importing specific toolkits from the OWL 'camel.toolkits' package, defining a custom list of tools with configuration options such as headless mode for the browser and subprocess sandboxing for code execution. These tools are then passed to the assistant agent via keyword arguments, specifying the model and the tool list. This modular setup allows users to optimize resource usage by selecting only necessary toolkits and facilitates integration with assistant agents in OWL's multi-agent system.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# 1. 导入工具包\nfrom camel.toolkits import BrowserToolkit, SearchToolkit, CodeExecutionToolkit\n\n# 2. 配置工具列表\ntools = [\n    *BrowserToolkit(headless=True).get_tools(),\n    SearchToolkit().search_wiki,\n    *CodeExecutionToolkit(sandbox=\"subprocess\").get_tools(),\n]\n\n# 3. 传递给助手代理\nassistant_agent_kwargs = {\"model\": models[\"assistant\"], \"tools\": tools}\n```\n\n----------------------------------------\n\nTITLE: Configuring OWL Toolkits for Multi-Modal and Text-Based Tasks in Python\nDESCRIPTION: Python code snippet that demonstrates how to configure OWL's various toolkits by combining their tools into a single 'tools' list. This setup includes browser automation, video, audio, code execution, image analysis, multiple search engines, Excel, document processing, and file writing. Some toolkits require API keys (e.g., AudioAnalysisToolkit requires OpenAI key). The snippet is intended to be used where models dictionary and toolkit imports are available. The tools enhance OWL's capability to automate diverse real-world tasks involving multimodal inputs.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# ツールキットの設定\ntools = [\n    *BrowserToolkit(headless=False).get_tools(),  # ブラウザ自動化\n    *VideoAnalysisToolkit(model=models[\"video\"]).get_tools(),\n    *AudioAnalysisToolkit().get_tools(),  # OpenAIキーが必要\n    *CodeExecutionToolkit(sandbox=\"subprocess\").get_tools(),\n    *ImageAnalysisToolkit(model=models[\"image\"]).get_tools(),\n    SearchToolkit().search_duckduckgo,\n    SearchToolkit().search_google,  # 利用できない場合はコメントアウト\n    SearchToolkit().search_wiki,\n    SearchToolkit().search_bocha,\n    SearchToolkit().search_baidu,\n    *ExcelToolkit().get_tools(),\n    *DocumentProcessingToolkit(model=models[\"document\"]).get_tools(),\n    *FileWriteToolkit(output_dir=\"./\").get_tools(),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring OWL Toolkits in Python\nDESCRIPTION: This Python snippet demonstrates how to configure a comprehensive list of OWL toolkits by concatenating tool lists retrieved from various toolkit classes. Dependencies include the OWL framework and pre-defined model objects that provide multimodal capabilities. The 'tools' list includes instances for browser automation, video/audio/image analysis, code execution, multiple web search APIs, Excel and document processing, and file writing. Inputs are the toolkit classes and model objects, while output is a consolidated list of tool functions for passing to an assistant agent. Headless browser mode and sandboxing options can be customized.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntools = [\n    *BrowserToolkit(headless=False).get_tools(),  # 浏览器自动化\n    *VideoAnalysisToolkit(model=models[\"video\"]).get_tools(),\n    *AudioAnalysisToolkit().get_tools(),  # 需要OpenAI API密钥\n    *CodeExecutionToolkit(sandbox=\"subprocess\").get_tools(),\n    *ImageAnalysisToolkit(model=models[\"image\"]).get_tools(),\n    SearchToolkit().search_duckduckgo,\n    SearchToolkit().search_google,  # 如果不可用请注释\n    SearchToolkit().search_wiki,\n    SearchToolkit().search_bocha,\n    SearchToolkit().search_baidu,\n    *ExcelToolkit().get_tools(),\n    *DocumentProcessingToolkit(model=models[\"document\"]).get_tools(),\n    *FileWriteToolkit(output_dir=\"./\").get_tools(),\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning OWL GitHub Repository - Bash\nDESCRIPTION: This snippet clones the OWL project's GitHub repository to the local machine. This is the first step in most of the installation options.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/camel-ai/owl.git\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Multiple LLM APIs - Shell Syntax\nDESCRIPTION: This snippet outlines the environment variables that must be configured for authentication and model selection for Gemini, OpenAI, and Qwen language models. Properly setting these variables in a .env file is essential for API connectivity and model usage, enabling the system to flexibly switch between different AI providers.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Gemini配置\nGEMINI_API_KEY=your_gemini_api_key\nGEMINI_MODEL=gemini-1.5-flash\n\n# OpenAI配置\nOPENAI_API_KEY=your_openai_api_key\nOPENAI_MODEL=gpt-4o\n\n# Qwen配置\nQWEN_API_KEY=your_qwen_api_key\nQWEN_MODEL=qwen-max\nQWEN_API_URL=https://your-qwen-api-endpoint\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Scraper for Market Data Collection (Python)\nDESCRIPTION: This code snippet initializes a web scraper component responsible for collecting and preprocessing market data from online sources. Dependencies include libraries for web requests and data parsing, such as requests and BeautifulSoup. The script sets up the data extraction process, defining parameters like target URLs and data cleaning steps, enabling continuous or scheduled data collection for analysis layers.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_market_data(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # Parse and extract relevant market data\n    data = extract_data(soup)\n    clean_data = preprocess_data(data)\n    return clean_data\n\n# Define target URLs and data extraction logic\n\n```\n\n----------------------------------------\n\nTITLE: Import and Selective Inclusion of Toolkits for OWL (Python)\nDESCRIPTION: Shows explicit modular import of key toolkits and the construction of a minimal tools list for use with an assistant agent. Demonstrates reduction of capabilities to optimize resource use or for sandboxed operation. Prerequisite: camel.toolkits module importable; 'models' dictionary available. Input: user task handled by the enabled tools. Output: agent supports only selected operations.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# 1. Import toolkits\nfrom camel.toolkits import BrowserToolkit, SearchToolkit, CodeExecutionToolkit\n\n# 2. Configure tools list\ntools = [\n    *BrowserToolkit(headless=True).get_tools(),\n    SearchToolkit().search_wiki,\n    *CodeExecutionToolkit(sandbox=\"subprocess\").get_tools(),\n]\n\n# 3. Pass to assistant agent\nassistant_agent_kwargs = {\"model\": models[\"assistant\"], \"tools\": tools}\n```\n\n----------------------------------------\n\nTITLE: Executing Main Analysis Workflow via Command Line in Python\nDESCRIPTION: This script runs the main investment analysis process, specifying target stock, model, and optional parameters like date range and reasoning display. It requires command-line arguments and depends on argument parsing libraries. The program outputs investment insights, decision recommendations, and analysis explanations based on configured agents and models.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--ticker', type=str, help='Stock code')\nparser.add_argument('--start-date', type=str, help='Start date')\nparser.add_argument('--end-date', type=str, help='End date')\nparser.add_argument('--show-reasoning', action='store_true', help='Display analysis reasoning')\nparser.add_argument('--model', type=str, choices=['gemini', 'openai', 'qwen'], help='Model to use')\nparser.add_argument('--test', action='store_true', help='Run in test mode')\nargs = parser.parse_args()\n\n# Run analysis with parsed arguments\n\n```\n\n----------------------------------------\n\nTITLE: Run OWL Python Example Script (Bash)\nDESCRIPTION: Invokes the main OWL Python script to launch the agent using the current environment and configuration. Expects all dependencies installed and environment variables set. Input/output per example’s logic (interactive or task-based run).\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npython examples/run.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment and Installing Dependencies\nDESCRIPTION: Creates a virtual environment with Python 3.10 and installs the OWL framework and related dependencies using uv and pip. Ensures an isolated environment for development and running the stock analysis agent.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README-zh.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv venv .venv --python=3.10\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Initializing MCP Toolkit and Connecting to MCP Servers in Python\nDESCRIPTION: This snippet demonstrates how to load the MCP configuration, initialize the MCP toolkit client, and establish an asynchronous connection to the MCP servers to facilitate communication between OWL agents and external data sources or tools.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Whatsapp-MCP/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path\nfrom mcp_toolkit import MCPToolkit\n\n# Load configuration path\nconfig_path = Path(__file__).parent / \"mcp_servers_config.json\"\n\n# Initialize MCP Toolkit with configuration\nmcp_toolkit = MCPToolkit(str(config_path))\n\n# Connect asynchronously to MCP servers\nauditorial(async def connect):\n    await mcp_toolkit.connect()\n\n# Example question input for OWL agents\nquestion = (\n    \"I'd like an academic report about Andrew Ng, including his research direction, \"\n    \"published papers, and affiliated institutions. Organize the report in Markdown format and save it to my desktop.\"\n)\n\n# Retrieve available tools from MCP\ntools = list(mcp_toolkit.get_tools())\n\n# Construct societal environment with question and tools\n# (Requires an async context)\nsociety = await construct_society(question, tools)\n\n# Run society to generate and send response\nanswer, chat_history, token_count = await run_society(society)\nprint(f\"Answer: {answer}\")\n```\n\n----------------------------------------\n\nTITLE: Running OWL with convenient scripts\nDESCRIPTION: OWLを実行するための便利なスクリプトを使用する方法です。コンテナディレクトリに移動し、スクリプトを実行可能にしてDockerイメージを構築し、質問を使用してOWLを実行します。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# コンテナディレクトリに移動\ncd .container\n\n# スクリプトを実行可能にし、Dockerイメージを構築\nchmod +x build_docker.sh\n./build_docker.sh\n\n# 質問を使用してOWLを実行\n./run_in_docker.sh \"your question\"\n```\n\n----------------------------------------\n\nTITLE: Command-Line Usage Example for Investment Analysis in Python\nDESCRIPTION: This code demonstrates how to execute the main analysis script with specific parameters via command-line, specifying stock ticker, date range, model selection, and reasoning display. It enables users to perform targeted analyses or run tests with default configurations, facilitating flexible deployment and experimentation.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npython src/main.py --ticker 000001 --model qwen\n# For test mode with default parameters\npython src/main.py --test\n# For testing specific stock\npython src/main.py --test --ticker 600036\n\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variables for API Keys in Unix Shell (Bash)\nDESCRIPTION: This code snippet sets required environment variables for OWL by exporting API keys (such as OPENAI_API_KEY) directly in a Bash or Zsh session. These variables configure access to external services needed by OWL. Inputs: valid API key string(s). Outputs: environment variable(s) available to child processes. Limitation: persists only for the session.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"your-openai-api-key-here\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment in Bash\nDESCRIPTION: Commands for setting up a virtual environment using either Conda or venv. This isolates the project dependencies and prevents conflicts with other Python projects.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/OWL Interview Preparation Assistant/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a conda environment (recommended)\nconda create -n interview_assistant python=3.10\nconda activate interview_assistant\n\n# OR using venv\npython -m venv interview_env\nsource interview_env/bin/activate  # On Windows: interview_env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Customizing the Airbnb Search Task in Python\nDESCRIPTION: Python code showing how to customize the default task in the Airbnb_MCP.py script to specify search parameters like location, dates, and guest count.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Airbnb-MCP/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Replace this line:\ndefault_task = (\n    \"here you need to add the task\"\n)\n\n# Example:\ndefault_task = (\n    \"Find me the best Airbnb in Gurugram with a check-in date of 2025-06-01 \"\n    \"and a check-out date of 2025-06-07 for 2 adults. Return the top 5 listings with their names, \"\n    \"prices, and locations.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Launching OWL Web UI in Bash\nDESCRIPTION: Bash commands to launch OWL's web user interface in different supported languages: Chinese, English, and Japanese. Each command runs the respective Python script ('webapp_zh.py', 'webapp.py', or 'webapp_jp.py') to start the localized UI server on the local machine. This UI is based on Gradio and allows interactive tasks with OWL agents without sending data to external servers besides required API calls.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# 中国語版を起動\npython owl/webapp_zh.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 英語版を起動\npython owl/webapp.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 日本語版を起動\npython owl/webapp_jp.py\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables with .env file\nDESCRIPTION: Instructions for configuring API keys and other environment variables using a .env file, which is the recommended approach for setting up OWL.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd owl\ncp .env_template .env\n```\n\n----------------------------------------\n\nTITLE: Customizing OWL tasks in Python\nDESCRIPTION: OWLエージェントを独自のタスクで実行するためのPythonコードの例です。examples/run.pyスクリプトを変更し、カスタムタスク説明を提供して、社会を構築し実行します。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# 独自のタスクを定義\ntask = \"Task description here.\"\n\nsociety = construct_society(question)\nanswer, chat_history, token_count = run_society(society)\n\nprint(f\"\\033[94mAnswer: {answer}\\033[0m\")\n```\n\n----------------------------------------\n\nTITLE: Running OWL with basic usage and different models\nDESCRIPTION: OWLフレームワークを基本的に使用する方法と、さまざまなLLMバックエンドで実行する方法の例です。インストールと環境変数の設定が完了した後、さまざまなスクリプトを実行してOWLを使用できます。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# 基本的な使用法\npython examples/run.py\n\n# Qwenモデルで実行\npython examples/run_qwen_zh.py\n\n# Deepseekモデルで実行\npython examples/run_deepseek_zh.py\n\n# 他のOpenAI互換モデルで実行\npython examples/run_openai_compatible_model.py\n\n# Azure OpenAIで実行\npython examples/run_azure_openai.py\n\n# Ollamaで実行\npython examples/run_ollama.py\n\n# 最小限の例（LLM APIキーのみが必要）\npython examples/run_mini.py\n```\n\n----------------------------------------\n\nTITLE: Docker Image Build and Environment Setup (Shell)\nDESCRIPTION: This snippet provides commands to build a Docker image for deploying the investment agent system, simplifying environment setup and dependency management. The process involves creating a Dockerfile, building the image, and setting up environment variables in a .env file to securely store API keys, facilitating containerized deployment.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker build -t a-share-investment-agent .\n# Create and edit .env file\ntouch .env\n# Add your API keys and configurations inside .env\n\n```\n\n----------------------------------------\n\nTITLE: Installing OWL and Dependencies in Bash\nDESCRIPTION: Commands for installing the OWL framework and additional dependencies required for the Interview Preparation Assistant. This includes Streamlit for the web interface and other necessary libraries.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/OWL Interview Preparation Assistant/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install OWL\npip install -e .\n\n# Install additional dependencies\npip install streamlit numpy pandas opencv-python\n```\n\n----------------------------------------\n\nTITLE: Install Core OWL Framework\nDESCRIPTION: This set of Bash commands guides the user through cloning the OWL GitHub repository, navigating into the project directory, installing the `uv` package manager (if not present), creating and activating a Python virtual environment, installing the core CAMEL framework and its dependencies, and finally navigating into the specific stock-analysis use case directory.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the GitHub repository\ngit clone https://github.com/camel-ai/owl.git\n\n# Navigate to the project directory\ncd owl\n\n# If you haven't installed uv yet, install it first\npip install uv\n\n# Create a virtual environment and install dependencies\n# We support Python 3.10, 3.11, 3.12\nuv venv .venv --python=3.10\n\n# Activate the virtual environment\n# For macOS/Linux\nsource .venv/bin/activate\n# For Windows\n.venv\\Scripts\\activate\n\n# Install CAMEL and all its dependencies\nuv pip install -e .\n\n# Navigate to the Stock Analysis Agent directory\ncd community_usecase/stock-analysis\n```\n\n----------------------------------------\n\nTITLE: Launching OWL Multilingual Web Interface via Bash\nDESCRIPTION: This snippet provides bash commands to start OWL's web interface in different language versions: Chinese, English, and Japanese. It requires a local environment setup with dependencies including Python and Gradio. Running these scripts launches a user-friendly web app supporting model selection, environment variable management, interactive chat, and task history. The implementation ensures local data privacy by not sending any user data to external servers except for model API calls configured by the user.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# 中文版本\npython owl/webapp_zh.py\n\n# 英文版本\npython owl/webapp.py\n\n# 日文版本\npython owl/webapp_jp.py\n```\n\n----------------------------------------\n\nTITLE: Creating custom OWL tasks\nDESCRIPTION: Example code showing how to define custom tasks and run the OWL society to process them, including handling local files.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Define your own task\ntask = \"Task description here.\"\n\nsociety = construct_society(question)\nanswer, chat_history, token_count = run_society(society)\n\nprint(f\"\\033[94mAnswer: {answer}\\033[0m\")\n\n# 处理本地文件（例如，文件路径为 `tmp/example.docx`）\ntask = \"给定的 DOCX 文件中有什么内容？文件路径如下：tmp/example.docx\"\n\nsociety = construct_society(question)\nanswer, chat_history, token_count = run_society(society)\n\nprint(f\"答案：{answer}\")\n```\n\n----------------------------------------\n\nTITLE: Custom Docker Image Build and Service Launch with Docker Compose (Bash)\nDESCRIPTION: This snippet demonstrates how to modify the docker-compose.yml file to build and launch a custom OWL Docker image locally using Docker Compose. It provides steps to comment/uncomment specific configuration lines, execute a build in detached mode, and then run OWL in an interactive container shell. It assumes Docker Compose is installed and the proper YAML configuration is available. Inputs: none. Outputs: containerized service and shell access.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d --build\ndocker compose exec owl bash\ncd .. && source .venv/bin/activate\nplaywright install-deps\nxvfb-python examples/run.py\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment - Bash\nDESCRIPTION: This snippet creates a conda environment named `owl` with Python version 3.10. Conda environments provide isolation for project dependencies.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n owl python=3.10\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for the Investment Agent System - Bash\nDESCRIPTION: This snippet illustrates the Docker build command used to create a container image named 'a-share-investment-agent'. Utilizing Docker simplifies deployment by packaging the entire system environment, dependencies, and code into a portable, reproducible image. Users must prepare appropriate .env files within the container context to inject necessary API keys for operation.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t a-share-investment-agent .\n```\n\n----------------------------------------\n\nTITLE: Configure Environment Variables (.env)\nDESCRIPTION: This snippet shows the required structure and placeholder values for the `.env` file. It includes fields for DeepSeek API key, DeepSeek API base URL, Zhipu AI API key, Zhipu AI API base URL, SEC-API API key, and AgentOps API key. Users must replace the placeholder values with their actual API keys.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README.md#_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\n# DeepSeek API (https://platform.deepseek.com/api_keys)\nDEEPSEEK_API_KEY='Your_Key'\nDEEPSEEK_API_BASE_URL=\"https://api.deepseek.com/v1\"\n\n# ZHIPU API (https://bigmodel.cn/usercenter/proj-mgmt/apikeys)\nZHIPUAI_API_KEY='Your_Key'\nZHIPUAI_API_BASE_URL=\"https://open.bigmodel.cn/api/paas/v4/\"\n\n# SEC-API (https://sec-api.io/profile)\nSEC_API_API_KEY='Your_Key'\n\n# AgentOps API (https://app.agentops.ai/settings/billing)\nAGENTOPS_API_KEY= 'Your_Key'\n```\n\n----------------------------------------\n\nTITLE: Switch OWL Model Backends with Various Example Scripts (Bash)\nDESCRIPTION: Demonstrates how to run OWL with different LLM backends by executing various predefined Python scripts. Each command launches OWL with a specific model or platform (Qwen, Deepseek, Gemini, Azure OpenAI, Ollama). Requires proper environment setup and model dependencies. Outputs: agent answers using the selected backend.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npython examples/run_qwen_zh.py\npython examples/run_deepseek_zh.py\npython examples/run_openai_compatible_model.py\npython examples/run_gemini.py\npython examples/run_azure_openai.py\npython examples/run_ollama.py\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables directly in terminal\nDESCRIPTION: 環境変数を直接ターミナルで設定する方法です。macOS/Linux（Bash/Zsh）、Windows（コマンドプロンプト）、Windows（PowerShell）の3つの異なるプラットフォーム向けの構文が含まれています。これらの変数は現在のセッションでのみ有効です。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# macOS/Linux (Bash/Zsh)：\nexport OPENAI_API_KEY=\"your-openai-api-key-here\"\n```\n\nLANGUAGE: batch\nCODE:\n```\n# Windows (コマンドプロンプト)：\nset OPENAI_API_KEY=\"your-openai-api-key-here\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# Windows (PowerShell)：\n$env:OPENAI_API_KEY = \"your-openai-api-key-here\"\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables using .env file\nDESCRIPTION: OWLフレームワークで必要なAPIキーを設定するための手順です。.env_templateファイルをコピーして.envファイルを作成し、必要なAPIキーを設定します。最小限の例を実行する場合はLLM APIキーのみが必要です。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd owl\ncp .env_template .env\n```\n\n----------------------------------------\n\nTITLE: Running OWL with Docker using pre-built image\nDESCRIPTION: Instructions for deploying OWL using Docker with a pre-built image, which is the recommended approach for most users.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# 克隆仓库\ngit clone https://github.com/camel-ai/owl.git\ncd owl\n\n# 配置环境变量\ncp owl/.env_template owl/.env\n\n# 此选项从Docker Hub下载一个即用型镜像\n# 最快速且推荐给大多数用户\ndocker compose up -d\n\n# 在容器中运行OWL\ndocker compose exec owl bash\ncd .. && source .venv/bin/activate\nplaywright install-deps\nxvfb-python examples/run.py\n```\n\n----------------------------------------\n\nTITLE: Running the Streamlit app\nDESCRIPTION: Runs the Streamlit application using the `streamlit run` command. This starts the web server and makes the application accessible in a web browser.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/PHI_Sanitization_Summarization_and_Article_Writing/readme.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env\nDESCRIPTION: Template for the .env file containing API key configuration. This shows how to set up OpenAI API, OpenRouter API, and optional Google Search API for enhanced research capabilities.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/OWL Interview Preparation Assistant/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# OpenAI API (recommended for best results)\nOPENAI_API_KEY=your_openai_api_key_here\n\n# OR OpenRouter API (for access to Gemini models)\nOPENROUTER_API_KEY=your_openrouter_api_key_here\n\n# Optional: Google Search API for enhanced research (optional)\nGOOGLE_API_KEY=your_google_api_key_here\nSEARCH_ENGINE_ID=your_google_search_engine_id_here\n```\n\n----------------------------------------\n\nTITLE: Installing OWL using uv package manager\nDESCRIPTION: OWLフレームワークをuvパッケージマネージャーを使用してインストールする手順です。GitHubリポジトリのクローン、仮想環境の作成、依存関係のインストールを行います。Python 3.10、3.11、3.12がサポートされています。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# GitHubリポジトリをクローン\ngit clone https://github.com/camel-ai/owl.git\n\n# プロジェクトディレクトリに移動\ncd owl\n\n# uvがインストールされていない場合はインストール\npip install uv\n\n# 仮想環境を作成し、依存関係をインストール\n# Python 3.10、3.11、3.12の使用をサポート\nuv venv .venv --python=3.10\n\n# 仮想環境をアクティブ化\n# macOS/Linuxの場合\nsource .venv/bin/activate\n# Windowsの場合\n.venv\\Scripts\\activate\n\n# すべての依存関係を含むCAMELをインストール\nuv pip install -e .\n\n# 完了したら仮想環境を終了\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Running the Notion management script in Python\nDESCRIPTION: This Python snippet executes the `notion_manager.py` script which performs key Notion operations such as searching pages, updating properties, and adding comments. It assumes prior configuration of environment variables and connection setup, and is used to automate content management workflows.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Notion-MCP/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npython notion_manager.py\n\nThis script interacts with Notion via the API to perform predefined tasks including content search, updates, and comment addition for target pages.\n```\n\n----------------------------------------\n\nTITLE: Copy .env Template Using Terminal in Unix & Windows (Bash/Batch)\nDESCRIPTION: Shows how to copy the OWL environment variable template file (.env_template) to .env inside the project directory. Includes commands for both Unix-like shells (cp) and Windows Command Prompt (copy). Ensures correct configuration for environment-dependent services. Requires existing .env_template file.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncd owl\ncp .env_template .env\n```\n\n----------------------------------------\n\nTITLE: Activating venv Virtual Environment - Bash\nDESCRIPTION: These snippets activate the virtual environment created using `venv`. The activation command differs based on the operating system.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\nLANGUAGE: bash\nCODE:\n```\n.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Activating the virtual environment (macOS/Linux)\nDESCRIPTION: Activates the virtual environment on macOS/Linux. This ensures that subsequent commands are executed within the environment.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/PHI_Sanitization_Summarization_and_Article_Writing/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Run Stock Analysis Script (run.py)\nDESCRIPTION: This command executes the main Python script `run.py` with the `--company` argument followed by a company name (e.g., 'Apple'). This initiates the stock analysis process for the specified company using the configured agents and tools.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --company Apple\n```\n\n----------------------------------------\n\nTITLE: Running the Python Script - Bash\nDESCRIPTION: This snippet details how to execute the python script. It assumes the user has the python script placed in the appropriate directory and has configured their environment.  The python runtime environment should be set up correctly prior to running this command.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/learning-assistant/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython run_gpt4o.py\n```\n\n----------------------------------------\n\nTITLE: Running the Main Program with Command Line Arguments - Bash\nDESCRIPTION: This snippet shows how to execute the main Python script with parameters for stock ticker and model selection. These parameters control which stock is analyzed and which AI language model is used for the analysis. It is the primary interface for users to start investment analysis tasks.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython src/main.py --ticker 000001 --model qwen\n```\n\n----------------------------------------\n\nTITLE: Running the Airbnb MCP Example Script\nDESCRIPTION: Command to execute the Airbnb MCP example script from the community use cases directory.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Airbnb-MCP/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython community_usecase/Airbnb_MCP\n```\n\n----------------------------------------\n\nTITLE: Installing OWL with uv package manager\nDESCRIPTION: Instructions for cloning the OWL repository and installing dependencies using the uv package manager, which is the recommended installation method.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 克隆 GitHub 仓库\ngit clone https://github.com/camel-ai/owl.git\n\n# 进入项目目录\ncd owl\n\n# 如果你还没有安装 uv，请先安装\npip install uv\n\n# 创建虚拟环境并安装依赖\n# 我们支持使用 Python 3.10、3.11、3.12\nuv venv .venv --python=3.10\n\n# 激活虚拟环境\n# 对于 macOS/Linux\nsource .venv/bin/activate\n# 对于 Windows\n.venv\\Scripts\\activate\n\n# 安装 CAMEL 及其所有依赖\nuv pip install -e .\n\n# 完成后退出虚拟环境\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Building and running OWL Docker image locally\nDESCRIPTION: OWLのDockerイメージをローカルで構築して実行する手順です。これは、Dockerイメージをカスタマイズする必要があるユーザーやDocker Hubにアクセスできないユーザー向けです。docker-compose.ymlファイルの編集、イメージのビルド、コンテナ内でのOWLの実行が含まれています。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Dockerイメージをカスタマイズする必要があるユーザーやDocker Hubにアクセスできないユーザー向け：\n# 1. docker-compose.ymlを開く\n# 2. \"image: mugglejinx/owl:latest\"行をコメントアウト\n# 3. \"build:\"セクションとそのネストされたプロパティをコメント解除\n# 4. 次に実行：\ndocker compose up -d --build\n\n# コンテナ内でOWLを実行\ndocker compose exec owl bash\ncd .. && source .venv/bin/activate\nplaywright install-deps\nxvfb-python examples/run.py\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version - Bash\nDESCRIPTION: This snippet checks if Python is installed and displays its version. It is a prerequisite check before installing the OWL framework.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\n```\n\n----------------------------------------\n\nTITLE: Installing OWL with conda\nDESCRIPTION: Instructions for cloning the OWL repository and installing dependencies using conda, an alternative package manager.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 克隆 GitHub 仓库\ngit clone https://github.com/camel-ai/owl.git\n\n# 进入项目目录\ncd owl\n\n# 创建 conda 环境\nconda create -n owl python=3.10\n\n# 激活 conda 环境\nconda activate owl\n\n# 选项1：作为包安装（推荐）\npip install -e .\n\n# 选项2：从 requirements.txt 安装\npip install -r requirements.txt --use-pep517\n\n# 完成后退出 conda 环境\nconda deactivate\n```\n\n----------------------------------------\n\nTITLE: Running OWL with different model backends\nDESCRIPTION: Instructions for running OWL with various language model backends, including Qwen, Deepseek, Gemini, and others.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# 使用 Qwen 模型运行\npython examples/run_qwen_zh.py\n\n# 使用 Deepseek 模型运行\npython examples/run_deepseek_zh.py\n\n# 使用 Gemini 模型运行\npython examples/run_gemini.py\n\n# 使用其他 OpenAI 兼容模型运行\npython examples/run_openai_compatible_model.py\n\n# 使用 Azure OpenAI模型运行\npython examples/run_azure_openai.py\n\n# 使用 Ollama 运行\npython examples/run_ollama.py\n```\n\n----------------------------------------\n\nTITLE: Installing OWL with uv - Bash\nDESCRIPTION: This snippet installs the OWL package in editable mode using `uv pip`. The `-e .` option installs the package from the current directory, allowing for modifications without reinstallation.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies using Bash\nDESCRIPTION: This snippet demonstrates the installation steps for setting up the project environment by cloning the OWL repository from GitHub and installing necessary Python dependencies from the requirements.txt file. It is a prerequisite for running the multi-agent investment system and ensures the environment is prepared for Python 3.9+ with all required packages.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/camel-ai/owl.git\ncd owl/community_usecase/a_share_investment_agent_camel\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating uv Virtual Environment - Bash\nDESCRIPTION: This snippet creates a virtual environment using `uv` within the OWL project directory, specifying Python 3.10.  The virtual environment isolates project dependencies.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuv venv .venv --python=3.10\n```\n\n----------------------------------------\n\nTITLE: Installing OWL using venv and pip\nDESCRIPTION: 標準的なPythonのvenv環境とpipを使用してOWLフレームワークをインストールするための手順です。GitHubリポジトリのクローン、仮想環境の作成、requirements.txtからの依存関係のインストールを行います。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# GitHubリポジトリをクローン\ngit clone https://github.com/camel-ai/owl.git\n\n# プロジェクトディレクトリに移動\ncd owl\n\n# 仮想環境を作成\n# Python 3.10の場合（3.11、3.12でも動作）\npython3.10 -m venv .venv\n\n# 仮想環境をアクティブ化\n# macOS/Linuxの場合\nsource .venv/bin/activate\n# Windowsの場合\n.venv\\Scripts\\activate\n\n# requirements.txtからインストール\npip install -r requirements.txt --use-pep517\n```\n\n----------------------------------------\n\nTITLE: Install Playwright MCP Server and Dependencies Globally (Bash/Node.js)\nDESCRIPTION: Installs the Playwright MCP server globally with npm and ensures all necessary dependencies are set up using npx for playwright. Required for browser automation and MCP-based tools. Prerequisite: Node.js and npm installed. Outputs: Playwright MCP server ready.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @executeautomation/playwright-mcp-server\nnpx playwright install-deps\n```\n\n----------------------------------------\n\nTITLE: Installing OWL with venv and pip\nDESCRIPTION: Instructions for cloning the OWL repository and installing dependencies using Python's venv module and pip package manager.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 克隆 GitHub 仓库\ngit clone https://github.com/camel-ai/owl.git\n\n# 进入项目目录\ncd owl\n\n# 创建虚拟环境\n# 对于 Python 3.10（也适用于 3.11、3.12）\npython3.10 -m venv .venv\n\n# 激活虚拟环境\n# 对于 macOS/Linux\nsource .venv/bin/activate\n# 对于 Windows\n.venv\\Scripts\\activate\n\n# 从 requirements.txt 安装\npip install -r requirements.txt --use-pep517\n```\n\n----------------------------------------\n\nTITLE: Creating venv Virtual Environment - Bash\nDESCRIPTION: This snippet creates a virtual environment using Python's built-in `venv` module. It creates a directory named `.venv` to store the virtual environment's files.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython3.10 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Install Node.js on Linux and Mac (Bash/Homebrew)\nDESCRIPTION: Provides direct CLI commands to install Node.js and npm on both Linux (via apt) and Mac (via Homebrew). Node.js is required for MCP integration and Playwright-based toolkits. Prerequisite: root/admin access as appropriate. Output: Node.js and npm installed.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install nodejs npm -y\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install node\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for API Keys\nDESCRIPTION: Creates a .env file to store API keys for DeepSeek, ZHIPUAI, SEC-API, and AgentOps, which are used by different components of the stock analysis system for data retrieval and AI model access.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README-zh.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntouch .env\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Add relevant API keys to the .env file\n```\n\n----------------------------------------\n\nTITLE: Running the Excel Analyzer (Bash)\nDESCRIPTION: Bash commands to navigate into the project directory and execute the Python scripts for both the Chinese (using deepseek-v3) and English (using gpt-4o) versions of the Excel analyzer. Assumes the Owl environment is set up according to official instructions.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/excel_analyzer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd community_usecase/excel_analyzer\n\n# Chinese version, using deepseek-v3\npython excel_analyzer_zh.py\n\n# English version, using gpt-4o\npython excel_analyzer_zh.py\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment\nDESCRIPTION: Creates a virtual environment for the project. This helps to isolate the project's dependencies.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/PHI_Sanitization_Summarization_and_Article_Writing/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Activating Conda Environment - Bash\nDESCRIPTION: This snippet activates the conda environment named `owl`.  Activating the environment ensures that the correct Python interpreter and dependencies are used.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nconda activate owl\n```\n\n----------------------------------------\n\nTITLE: Activating the virtual environment (Windows)\nDESCRIPTION: Activates the virtual environment on Windows. This ensures that subsequent commands are executed within the environment.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/PHI_Sanitization_Summarization_and_Article_Writing/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvenv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies\nDESCRIPTION: Installs the project's dependencies from the `requirements.txt` file using pip.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/PHI_Sanitization_Summarization_and_Article_Writing/readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Cloning CAMEL Repository Using Git in Bash\nDESCRIPTION: This bash snippet shows the process for cloning the CAMEL AI framework repository and entering its directory. It assumes git is installed and configured. This is a prerequisite step for exploring CAMEL source code to understand OWL's foundations and extend its capabilities.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# 克隆 CAMEL 仓库\ngit clone https://github.com/camel-ai/camel.git\ncd camel\n```\n\n----------------------------------------\n\nTITLE: Activating uv Virtual Environment - Bash\nDESCRIPTION: These snippets activate the virtual environment created using `uv`.  The activation commands differ based on the operating system.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\nLANGUAGE: bash\nCODE:\n```\n.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Running the Stock Analysis Script with Company Name\nDESCRIPTION: Executes the main run.py script with specified company name parameter to initiate the stock analysis process, leveraging the configured environment and dependencies.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README-zh.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --company Apple\n```\n\n----------------------------------------\n\nTITLE: Building and running OWL Docker image locally\nDESCRIPTION: Instructions for building a custom Docker image locally and running OWL within it, useful for those who need customization or can't access Docker Hub.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# 适用于需要自定义Docker镜像或无法访问Docker Hub的用户：\n# 1. 打开docker-compose.yml\n# 2. 注释掉\"image: mugglejinx/owl:latest\"行\n# 3. 取消注释\"build:\"部分及其嵌套属性\n# 4. 然后运行：\ndocker compose up -d --build\n\n# 在容器中运行OWL\ndocker compose exec owl bash\ncd .. && source .venv/bin/activate\nplaywright install-deps\nxvfb-python examples/run.py\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variables in Windows PowerShell (PowerShell)\nDESCRIPTION: Sets the OPENAI_API_KEY variable within a PowerShell environment session to provide OWL with necessary API credentials. Key must be valid. Affects only the current PowerShell session.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\n$env:OPENAI_API_KEY = \"your-openai-api-key-here\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pip\nDESCRIPTION: This snippet lists the necessary Python packages and their versions using pip, the Python package installer. The project depends on various packages for core functionality, UI/visualization, data handling, utilities, and document processing.  Dependencies are specified using the `package==version` format. It's important to note that the user is expected to execute this snippet via the command line.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/OWL Interview Preparation Assistant/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncamel-ai[all]==0.2.35\nchunkr-ai>=0.0.41\ndocx2markdown>=0.1.1\nstreamlit>=1.24.0\nopencv-python>=4.7.0\nmatplotlib>=3.7.1\nnumpy>=1.24.3\npandas>=2.0.2\npython-dotenv>=1.0.0\nrequests>=2.31.0\ntqdm>=4.65.0\nPyPDF2>=3.0.0\nspacy>=3.5.3\n```\n\n----------------------------------------\n\nTITLE: Installing MCP service\nDESCRIPTION: Instructions for installing the Model Context Protocol (MCP) server components needed for advanced tool interactions.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @executeautomation/playwright-mcp-server\nnpx playwright install-deps\n```\n\n----------------------------------------\n\nTITLE: View Script Execution Parameters (run.py)\nDESCRIPTION: This command executes the main Python script `run.py` with the `-h` or `--help` flag to display its command-line arguments, options, and usage information. It shows how to get help on running the script.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --h\n```\n\n----------------------------------------\n\nTITLE: Installing uv - Bash\nDESCRIPTION: This snippet installs the `uv` package installer using `pip`. `uv` is used for creating virtual environments and installing dependencies. It assumes pip is already installed.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install uv\n```\n\n----------------------------------------\n\nTITLE: Installing Python on Ubuntu/Debian - Bash\nDESCRIPTION: This snippet installs Python 3.10, its virtual environment module, and pip on Ubuntu or Debian-based systems.  It's an alternative for users who don't have Python installed.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install python3.10 python3.10-venv python3-pip\n```\n\n----------------------------------------\n\nTITLE: Installing OWL using conda\nDESCRIPTION: Anacondaまたはminiconda環境を使用してOWLをインストールする手順です。GitHubリポジトリのクローン、conda環境の作成、およびパッケージとしてのインストールまたはrequirements.txtからのインストールの2つのオプションが含まれています。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# GitHubリポジトリをクローン\ngit clone https://github.com/camel-ai/owl.git\n\n# プロジェクトディレクトリに移動\ncd owl\n\n# conda環境を作成\nconda create -n owl python=3.10\n\n# conda環境をアクティブ化\nconda activate owl\n\n# オプション1：パッケージとしてインストール（推奨）\npip install -e .\n\n# オプション2：requirements.txtからインストール\npip install -r requirements.txt --use-pep517\n\n# 完了したらconda環境を終了\nconda deactivate\n```\n\n----------------------------------------\n\nTITLE: Start OWL Web Interface for Multiple Languages (Bash/Python)\nDESCRIPTION: Commands to run the OWL Web UI in various languages (Chinese, English, Japanese) using respective Python entrypoint scripts. The interface is built on Gradio and allows web-based interaction, model selection, and configuration. Prerequisite: required Python dependencies and scripts installed. Inputs: none. Outputs: local web interface at a configured port.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\npython owl/webapp_zh.py\npython owl/webapp.py\npython owl/webapp_jp.py\n```\n\n----------------------------------------\n\nTITLE: Install MCP Desktop Commander with NPX (Bash/Node.js)\nDESCRIPTION: Installs or sets up the MCP Desktop Commander tool inside a Docker environment using npx on the CLI. The --force-file-protocol flag is used for strict file protocol usage. Requires Node.js and npx to be installed. Inputs: none. Outputs: desktop-commander setup.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @wonderwhy-er/desktop-commander setup --force-file-protocol\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Notion API keys\nDESCRIPTION: This snippet details how to create a .env file to securely store Notion API tokens and configuration parameters necessary for authentication with Notion API. It ensures that secret keys are managed separately from codebase and loaded during script execution.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Notion-MCP/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n.env file creation:\n\nCreate a `.env` file in the root directory with your API keys:\n\nN znac\nNOTION_API_KEY=your_integration_token\n\nThis file is then read by environment handlers in the Python scripts for authentication.\n```\n\n----------------------------------------\n\nTITLE: Viewing Log and Output Files\nDESCRIPTION: Provides the paths to the JSON log file capturing the chat history and the Markdown report output generated by the stock analysis process.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README-zh.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Log file with chat history and tool calls\n./log/Apple_chat_history.json\n\n# Generated analysis report\n./output/Apple_analysis_report.md\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright MCP Service via npm in Bash\nDESCRIPTION: Commands to globally install the Playwright MCP server package and install necessary dependencies using 'npx playwright install-deps'. These steps set up the MCP service used by OWL to enable model-context protocol integrations. Requires Node.js and npm to be installed beforehand.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @executeautomation/playwright-mcp-server\nnpx playwright install-deps\n```\n\n----------------------------------------\n\nTITLE: Setting up MCP Desktop Commander in Docker\nDESCRIPTION: Docker環境内でModel Context Protocol (MCP) Desktop Commanderをセットアップする手順です。このコマンドはMCPを使用するために必要なファイルプロトコルを強制的に設定します。\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @wonderwhy-er/desktop-commander setup --force-file-protocol\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js on Various Platforms Using Bash\nDESCRIPTION: Bash commands for installing Node.js and npm on Linux and Mac platforms. On Linux, it updates the package list and installs 'nodejs' and 'npm' via apt. On Mac, it installs Node.js using the Homebrew package manager. These commands are prerequisites for using the MCP (Model Context Protocol) integration in OWL.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install nodejs npm -y\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install node\n```\n\n----------------------------------------\n\nTITLE: Cloning the OWL Framework Repository\nDESCRIPTION: Clones the CAMEL-AI OWL framework repository from GitHub to the local machine, providing the core codebase for the stock analysis agent implementation.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README-zh.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/camel-ai/owl.git\n```\n\n----------------------------------------\n\nTITLE: Risk Manager Analysis\nDESCRIPTION: This snippet represents the analysis from the Risk Manager. It defines parameters such as 'max_position_size', 'volatility', 'risk_score', 'max_drawdown', and 'suggested_position_size'. The 'reasoning' explains the cautious approach due to the stock's high volatility and fundamental risks and recommends controlling position size and diversifying investments.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_position_size\": 0.2,\n  \"volatility\": 0.15,\n  \"risk_score\": 0.7,\n  \"max_drawdown\": 0.25,\n  \"suggested_position_size\": 0.15,\n  \"reasoning\": \"Given stock 688256's high volatility and fundamental risks, a cautious approach is recommended. Although there is potential for technical breakthrough in the short term, the company faces issues such as poor profitability in the long term. Therefore, it is recommended to control position ratio not exceeding 20% and set appropriate stop-loss points to protect capital. At the same time, diversify investments to spread risk.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning CAMEL Repository and Accessing Source Code Using Bash\nDESCRIPTION: Commands to clone the CAMEL GitHub repository from the camel-ai organization and change directory to the cloned repo. This enables browsing and exploring the CAMEL source code, upon which OWL is built, facilitating understanding of their integration and development.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# CAMELリポジトリをクローン\ngit clone https://github.com/camel-ai/camel.git\ncd camel\n```\n\n----------------------------------------\n\nTITLE: Researcher Bull Analysis\nDESCRIPTION: This JSON snippet represents the analysis of a 'Researcher Bull'. It includes 'key_points' supporting a bullish outlook, a 'confidence' level, and the 'reasoning' behind the positive assessment. The analysis considers market sentiment and potential catalysts despite some weaknesses in technical and fundamental aspects.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_points\": [\n    \"Market sentiment is positive, news and social media discussions lean optimistic\",\n    \"Cambricon-U included in FTSE China A50 Index, indicating market's optimistic outlook for its long-term prospects\",\n    \"Positive news of technological breakthroughs and stock price increases\",\n    \"Despite weakness in technical and fundamental aspects, market sentiment and potential catalysts may drive stock price rebound\"\n  ],\n  \"confidence\": 0.6,\n  \"reasoning\": \"Despite technical and fundamental analysis showing Cambricon-U is currently in a weak state, market sentiment and potential catalysts may drive stock price rebound. Cambricon-U being included in the FTSE China A50 Index indicates the market's optimistic outlook for its long-term prospects. Additionally, recent positive news about technological breakthroughs and stock price increases also support the bullish view. Although current financial conditions and valuations are high, market sentiment and potential positive factors may provide support for the stock price. Therefore, we recommend maintaining caution in the short term, but in the long term, Cambricon-U still has investment potential.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Virtual Fitting Room Example with GPT-4o\nDESCRIPTION: Command to execute the virtual fitting room example script that utilizes GPT-4o. This assumes the current directory is 'owl' and the script has been copied to the examples directory.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/virtual_fitting_room/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython examples/run_gpt4o.py\n```\n\n----------------------------------------\n\nTITLE: Executing Command Line Functions in Python\nDESCRIPTION: Examples of how to run specific interview preparation functions directly from the command line. These commands demonstrate programmatic access to company research, question generation, and preparation plan creation.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/OWL Interview Preparation Assistant/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run company research\npython -c \"from main import research_company; result = research_company('Google', detailed=True); print(result['answer'])\"\n\n# Generate interview questions\npython -c \"from main import generate_interview_questions; result = generate_interview_questions('Machine Learning Engineer', 'Google'); print(result['answer'])\"\n\n# Create preparation plan\npython -c \"from main import create_interview_prep_plan; result = create_interview_prep_plan('Machine Learning Engineer', 'Google'); print(result['answer'])\"\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI API key in .env file\nDESCRIPTION: Instructions for configuring the OpenAI API key in the environment file, which is required for the recipe search functionality to work properly.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/cooking-assistant/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY = 'xxx'\n```\n\n----------------------------------------\n\nTITLE: Checking Out GAIA Benchmark Branch and Running Evaluation with Python and Bash\nDESCRIPTION: Commands to switch to the 'gaia58.18' Git branch using git checkout and then run a Python evaluation script ('run_gaia_roleplaying.py') that reproduces OWL's GAIA benchmark score of 58.18. This allows users to validate the benchmark performance on their local system with the specified code base.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_ja.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout gaia58.18\n```\n\nLANGUAGE: bash\nCODE:\n```\npython run_gaia_roleplaying.py\n```\n\n----------------------------------------\n\nTITLE: Running GAIA Benchmark Evaluation Script in Bash\nDESCRIPTION: This snippet illustrates steps to reproduce GAIA benchmark results with OWL by checking out a specific git branch and executing a Python evaluation script. These commands must be run in an environment where OWL and dependencies are installed. This process enables reproducibility of performance metrics mentioned in the documentation.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout gaia58.18\n\npython examples/run_gaia_roleplaying.py\n```\n\n----------------------------------------\n\nTITLE: Installing Notion MCP server globally via npm\nDESCRIPTION: This snippet installs the Notion MCP server using npm to enable communication between local scripts and Notion workspaces. It requires Node.js installed and ensures that the server is available globally for setting up connections with Notion pages.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Notion-MCP/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g @notionhq/notion-mcp-server@latest\n\nThis command installs the latest version of the Notion MCP server globally, necessary for managing page connections and interactions programmatically.\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies\nDESCRIPTION: This command installs the necessary Python dependencies for the project using pip and the requirements.txt file.  It ensures that all required libraries are available.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Mcp_use_case/Readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Downloading SpaCy Model\nDESCRIPTION: This command downloads the English language model `en_core_web_sm` using spaCy's command-line interface.  It should be run after the project dependencies are installed to provide the necessary resources for natural language processing. It requires spaCy to be installed.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/OWL Interview Preparation Assistant/requirements.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npython -m spacy download en_core_web_sm\n```\n\n----------------------------------------\n\nTITLE: Running the content curator script\nDESCRIPTION: This command executes the `Content_curator.py` script using the Python interpreter. The script scrapes websites and generates a digest report without requiring further input from the user.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Mcp_use_case/Readme.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython Content_curator.py\n```\n\n----------------------------------------\n\nTITLE: Connecting Notion pages to the integration\nDESCRIPTION: This snippet describes the process of linking individual Notion pages to the created integration by using the 'Add connections' feature within Notion UI. It is necessary for enabling API-based access to specific pages and databases.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Notion-MCP/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nOpen each target Notion page > click '...' in the top right > select 'Add connections' > choose your integration.\n\nThis process grants external scripts API access to the pages by linking them to the integration token.\n```\n\n----------------------------------------\n\nTITLE: Listing Project Dependencies (Python)\nDESCRIPTION: This snippet outlines the dependencies for the project. It specifies the required Python packages and their corresponding versions. The core dependencies include camel-ai, chunkr-ai, docx2markdown, and streamlit, and dependencies from the SEC such as sec-api.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/requirements.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Core dependencies\ncamel-ai[all]==0.2.35\nchunkr-ai>=0.0.41\ndocx2markdown>=0.1.1\nstreamlit>=1.24.0\n\n# SEC\nsec-api>=1.0.31\n```\n\n----------------------------------------\n\nTITLE: Navigating to the MCP use case directory\nDESCRIPTION: This command navigates to the community use case directory. This directory contains the `Content_curator.py` script.  The `cd` command changes the current working directory.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Mcp_use_case/Readme.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd community_usecase/Mcp_use_Case\n```\n\n----------------------------------------\n\nTITLE: Running OWL with convenience scripts\nDESCRIPTION: Instructions for using the provided convenience scripts to build and run OWL in Docker with minimal commands.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# 导航到容器目录\ncd .container\n\n# 使脚本可执行并构建Docker镜像\nchmod +x build_docker.sh\n./build_docker.sh\n\n# 使用您的问题运行OWL\n./run_in_docker.sh \"您的问题\"\n```\n\n----------------------------------------\n\nTITLE: Model Initialization and Configuration in Python\nDESCRIPTION: This code initializes large language model configurations for the investment analysis agents, specifying model types and API keys. Dependencies include environment variables or configuration files. It sets up the models (Gemini, OpenAI, Qwen) with required parameters, enabling dynamic switching and integration within the multi-agent system.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport os\n\nGEMINI_API_KEY = os.getenv('GEMINI_API_KEY')\nOPENAI_API_KEY = os.getenv('OPENAI_API_KEY')\nQWEN_API_KEY = os.getenv('QWEN_API_KEY')\n\nGEMINI_MODEL = 'gemini-1.5-flash'\nOPENAI_MODEL = 'gpt-4o'\nQWEN_MODEL = 'qwen-max'\nQWEN_API_URL = 'https://your-qwen-api-endpoint'\n\n# Initialize API clients or model wrappers here\n\n```\n\n----------------------------------------\n\nTITLE: Specify camel-ai[owl] Package Version (requirements.txt)\nDESCRIPTION: Sets the exact required version for the `camel-ai` package with the `owl` extra to `0.2.45`. This ensures a specific version of the core AI library is used for consistency across environments.\nSOURCE: https://github.com/camel-ai/owl/blob/main/requirements.txt#_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\ncamel-ai[owl]==0.2.45\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Agent Collaboration Architecture in Python for Investment Analysis\nDESCRIPTION: This code initializes various specialized agents such as market data, technical analysis, fundamental analysis, sentiment evaluation, valuation, and debate agents within the system. Agents communicate via message passing to form a comprehensive decision-making pipeline for stock analysis, enabling modular and scalable analysis workflows.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nmarket_data_agent = MarketDataAgent(show_reasoning=show_reasoning, model_name=model_name)\ntechnical_analyst = TechnicalAnalystAgent(show_reasoning=show_reasoning, model_name=model_name)\nfundamentals_analyst = FundamentalsAnalystAgent(show_reasoning=show_reasoning, model_name=model_name)\nsentiment_analyst = SentimentAnalystAgent(show_reasoning=show_reasoning, model_name=model_name)\nvaluation_analyst = ValuationAnalystAgent(show_reasoning=show_reasoning, model_name=model_name)\nresearcher_bull = ResearcherBullAgent(show_reasoning=show_reasoning, model_name=model_name)\nresearcher_bear = ResearcherBearAgent(show_reasoning=show_reasoning, model_name=model_name)\ndebate_room = DebateRoomAgent(show_reasoning=show_reasoning, model_name=model_name)\nrisk_manager = RiskManagerAgent(show_reasoning=show_reasoning, model_name=model_name)\nportfolio_manager = PortfolioManagerAgent(show_reasoning=show_reasoning, model_name=model_name)\n```\n\n----------------------------------------\n\nTITLE: Install Additional SEC Tools\nDESCRIPTION: This Bash command uses the `uv` package manager to install the `sec-api` Python library, which is required for the Stock Analysis Agent to interact with SEC filing data.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install SEC tools\nuv pip install sec-api\n```\n\n----------------------------------------\n\nTITLE: Data Preprocessing Module for Market Data in Python\nDESCRIPTION: This snippet processes raw market data fetched from web sources, transforming it into a structured format suitable for analysis. Dependencies may include pandas or numpy for data manipulation. It performs cleaning, normalization, and feature extraction tasks, ensuring data quality and relevance for subsequent analysis agents.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\n\ndef preprocess_data(raw_data):\n    df = pd.DataFrame(raw_data)\n    # Remove duplicates, handle missing values\n    df = df.drop_duplicates().fillna(method='ffill')\n    # Normalize features\n    df['normalized_indicator'] = (df['indicator'] - df['indicator'].mean()) / df['indicator'].std()\n    return df\n\n```\n\n----------------------------------------\n\nTITLE: Specify gradio Minimum Package Version (requirements.txt)\nDESCRIPTION: Requires the `gradio` package to be version `3.50.2` or higher. Gradio is typically used to create user-friendly web interfaces for machine learning models or demos, suggesting a UI component in the project.\nSOURCE: https://github.com/camel-ai/owl/blob/main/requirements.txt#_snippet_3\n\nLANGUAGE: requirements.txt\nCODE:\n```\ngradio>=3.50.2\n```\n\n----------------------------------------\n\nTITLE: Technical Analyst Analysis\nDESCRIPTION: This JSON snippet represents the analysis performed by a Technical Analyst agent. It provides a 'signal' (bearish), 'confidence' level, and detailed 'reasoning' based on various technical indicators such as moving averages, MACD, RSI, and Bollinger Bands. The reasoning explains how these indicators contribute to the bearish outlook.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"bearish\",\n  \"confidence\": 0.8,\n  \"reasoning\": \"From technical indicators, the stock is currently in a relatively weak state. First, the 5-day moving average (718.856) has crossed below the 10-day (743.927) and 20-day (747.574) moving averages, indicating the short-term trend is weakening. The MACD indicator also shows a similar trend, with the MACD line (8.994) below the signal line (20.004), and the MACD histogram (-11.009) negative, indicating market momentum is weakening. The RSI indicator (48.676) is in neutral territory but approaching oversold territory, which may indicate a short-term rebound, but the overall trend remains weak. On the Bollinger Bands, the current price (685.05) is close to the lower band (670.657), which may provide some support, but considering the weakness shown by other indicators, the support may be limited. Overall, the current market environment and technical indicators point toward a bearish trend.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key - Bash\nDESCRIPTION: This snippet shows how to set the OpenAI API key in the .env file.  The API key is required for authenticating requests to the OpenAI API. The user needs to replace 'xxx' with their actual API key obtained from OpenAI.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/learning-assistant/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY = 'xxx'\n```\n\n----------------------------------------\n\nTITLE: Installing SEC Tools Dependency\nDESCRIPTION: Installs the SEC API Python package, enabling the stock analysis agent to retrieve financial statements and company data from the SEC database.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README-zh.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install sec-api\n```\n\n----------------------------------------\n\nTITLE: Valuation Analyst Analysis\nDESCRIPTION: This snippet comes from a Valuation Analyst. It suggests a 'bearish' signal with a 'confidence' level. The 'reasoning' is based on the company's financial condition, business performance, and valuation metrics, stating that the company is overvalued. It also provides a 'fair_value' estimate and lists 'key_metrics' used in the analysis.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"bearish\",\n  \"confidence\": 0.85,\n  \"reasoning\": \"Cambricon-U's financial condition and business performance show clear negative trends. First, the company's net profit continues to be negative, and the loss amount has increased in recent quarters, indicating serious problems with profitability. Second, although the company's operating revenue increased in the fourth quarter of 2023, it experienced a significant decline in subsequent quarters, which may indicate a decrease in market demand or company market share. Additionally, the company's P/E ratio is negative, and its P/B ratio is as high as 52.58, indicating overvaluation in the market with significant bubble risk. From a financial health perspective, although the company has a low debt-to-asset ratio, its operating cash flow continues to be negative, indicating the company faces significant financial pressure in operations. Considering these factors, we believe Cambricon-U's stock is currently bearish. Furthermore, calculated through DCF model and relative valuation methods, the company's intrinsic value is significantly lower than the current market price, further supporting the bearish view.\",\n  \"fair_value\": 200.0,\n  \"key_metrics\": [\n    \"P/E Ratio\",\n    \"P/B Ratio\",\n    \"Operating Revenue\",\n    \"Net Profit\",\n    \"Operating Cash Flow\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Portfolio Manager Final Decision\nDESCRIPTION: This JSON snippet represents the final decision made by the Portfolio Manager. The 'action' is to 'hold' the stock, with a 'quantity' of 0, and a confidence level of 0.8. This represents the conclusion based on the analysis provided by the various agents.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"hold\",\n  \"quantity\": 0,\n  \"confidence\": 0.8\n}\n```\n\n----------------------------------------\n\nTITLE: Running basic OWL examples\nDESCRIPTION: Instructions for running the provided example scripts to test OWL functionality after installation.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython examples/run.py\n\n# Minimal example that only requires LLM API key configuration\npython examples/run_mini.py\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Exec and Activate - Bash\nDESCRIPTION: This snippet executes a command inside the running OWL Docker container and activates a virtual environment. It also installs Playwright dependencies and runs an example script.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec owl bash\ncd .. && source .venv/bin/activate\nplaywright install-deps\nxvfb-python examples/run.py\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: This snippet illustrates the directory structure of the stock-analysis project. It shows the organization of files and subdirectories, including the agent implementation, example output directories, log directory, prompt templates, the main execution script, and the tools implementation.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nstock-analysis\n├── agent\n│   └── sec_agent.py    # SEC Agent\n├── example\n├── log                 # log directory\n├── output              # Report output directory\n├── prompts.py          # Prompt templates\n├── run.py              # Main file\n└── tools\n    └── sec_tools.py    # SEC Tool\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Airbnb Searches\nDESCRIPTION: JSON configuration for the MCP server that connects to the Airbnb search API using the @openbnb/mcp-server-airbnb package.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Airbnb-MCP/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"airbnb\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@openbnb/mcp-server-airbnb\",\n        \"--ignore-robots-txt\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Streamlit Web Application in Bash\nDESCRIPTION: Commands for navigating to the project directory and launching the Streamlit web interface. This provides the graphical user interface for interacting with the Interview Preparation Assistant.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/OWL Interview Preparation Assistant/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Navigate to the project directory\ncd community_usecase/new\\ int/\n\n# Start the web application\nstreamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Running the System in Test Mode with Default and Custom Stock Tickers - Bash\nDESCRIPTION: This snippet provides commands to run the investment agent system in test mode using preset parameters. The first command runs with default parameters, while the second specifies a custom stock ticker. This mode helps users quickly verify system functionality without extensive setup.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# 使用默认参数（Qwen模型和000001股票）进行测试\npython src/main.py --test\n\n# 指定股票进行测试\npython src/main.py --test --ticker 600036\n```\n\n----------------------------------------\n\nTITLE: Running the GPT-4o script for recipe search\nDESCRIPTION: Command to execute the Python script that powers the personal dietician tool, which will search for recipes and generate shopping lists based on available ingredients.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/cooking-assistant/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython run_gpt4o.py\n```\n\n----------------------------------------\n\nTITLE: Cloning the OWL repository\nDESCRIPTION: This command clones the OWL repository from GitHub and navigates into the owl directory. It is a prerequisite step for setting up the project.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Mcp_use_case/Readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/camel-ai/owl.git\ncd owl\n```\n\n----------------------------------------\n\nTITLE: Cloning the repository\nDESCRIPTION: Clones the project repository from GitHub. This is the first step in setting up the project.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/PHI_Sanitization_Summarization_and_Article_Writing/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Bipul70701/Multi-Agent-System-OWL.git\ncd Multi-Agent-System-OWL\n```\n\n----------------------------------------\n\nTITLE: Cloning the OWL Repository in Bash\nDESCRIPTION: Instructions for cloning the OWL repository which is a dependency for the Interview Preparation Assistant. This establishes the foundation for the project installation.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/OWL Interview Preparation Assistant/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/camel-ai/owl.git\ncd owl\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project - Bash\nDESCRIPTION: This snippet changes the current working directory to the cloned OWL project directory. This is a common step in the installation process.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd owl\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys in Bash\nDESCRIPTION: Instructions for creating and navigating to the .env file that will store API keys needed for the application. This setup is necessary for accessing AI models and search functionality.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/OWL Interview Preparation Assistant/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Navigate to the Interview Preparation Assistant directory\ncd community_usecase/new\\ int/\n\n# Create .env file\ntouch .env\n```\n\n----------------------------------------\n\nTITLE: Copy .env Template Using Terminal in Windows (Batch)\nDESCRIPTION: Copies the .env_template file to .env in the current directory on Windows via the Command Prompt. Ensures OWL reads required API keys from an .env file. Prerequisite: .env_template file available.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_22\n\nLANGUAGE: batch\nCODE:\n```\ncd owl\ncopy .env_template .env\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variables in Windows Command Prompt (Batch)\nDESCRIPTION: Demonstrates how to set an environment variable (OPENAI_API_KEY) in a Windows Command Prompt session for OWL. The assigned key enables authenticated access to required APIs. Only persists for the current session.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_19\n\nLANGUAGE: batch\nCODE:\n```\nset OPENAI_API_KEY=your-openai-api-key-here\n```\n\n----------------------------------------\n\nTITLE: Debate Room Analysis\nDESCRIPTION: This JSON snippet represents the analysis from the 'Debate Room'. It provides a 'neutral' signal with associated 'confidence', along with 'reasoning' that considers both bullish and bearish perspectives. The analysis discusses market sentiment, fundamental issues, and recommends a cautious approach. The 'final_verdict' advises investors to remain cautious and pay attention to specific factors.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"neutral\",\n  \"confidence\": 0.7,\n  \"reasoning\": \"Both bull and bear researchers' views have rationality and basis. The bull researcher emphasizes positive market sentiment, Cambricon-U's inclusion in the FTSE China A50 Index, and positive news about technological breakthroughs and stock price increases, which may provide support for the stock price in the short term. However, the bear researcher points out technical indicators show short-term trend weakening, fundamental analysis shows poor profitability, decreased market demand, overvaluation, and significant financial pressure. Although market sentiment leans positive, these positive sentiments mainly focus on short-term events and cannot mask long-term fundamental issues. Overall, in the short term, market sentiment and technological breakthroughs may drive stock price rebound, but long-term fundamental issues still exist, so maintaining a neutral attitude and waiting for more clear signals is recommended.\",\n  \"final_verdict\": \"Investors are advised to remain cautious in the short term and pay attention to the continuity of market sentiment and technological breakthroughs. In the long term, close attention should be paid to the company's fundamental improvements, especially in areas such as profitability, market demand, and financial pressure. Before more clear signals emerge, maintaining a neutral attitude and avoiding excessive optimism or pessimism is recommended.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python on macOS - Bash\nDESCRIPTION: This snippet installs Python 3.10 using Homebrew package manager on macOS.  It's an alternative for users who don't have Python installed.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install python@3.10\n```\n\n----------------------------------------\n\nTITLE: Installing from requirements.txt - Bash\nDESCRIPTION: This snippet installs the dependencies listed in the `requirements.txt` file using `pip`. The `--use-pep517` flag is included to handle build isolation during the installation process.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt --use-pep517\n```\n\n----------------------------------------\n\nTITLE: Market Data Agent Analysis\nDESCRIPTION: This snippet represents the analysis from the Market Data Agent. It includes assessments of short and long-term market trends, along with a judgment based on technical indicators like Bollinger Bands, RSI, and MACD. It suggests paying attention to support and resistance levels.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\"trend\": \"Short-term trend is downward, but long-term trend still needs observation\",\n\"judgment\": \"Current price is below the middle Bollinger band, RSI is close to neutral level, MACD line is below the signal line, indicating short-term adjustment may continue. However, considering the previous significant rise, the long-term trend still needs further observation. Recommend paying attention to support level 670.66 and resistance level 747.57.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fundamentals Analyst Analysis\nDESCRIPTION: This snippet outlines the analysis by a Fundamentals Analyst, giving a 'bearish' signal with a confidence level. The 'reasoning' details negative trends in the company's financial condition and business performance, including negative net profit, declining operating revenue, high P/B ratio, and negative operating cash flow.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"bearish\",\n  \"confidence\": 0.8,\n  \"reasoning\": \"Cambricon-U's financial condition and business performance show clear negative trends. First, the company's net profit continues to be negative, and the loss amount has increased in recent quarters, indicating serious problems with profitability. Second, although the company's operating revenue increased in the fourth quarter of 2023, it experienced a significant decline in subsequent quarters, which may indicate a decrease in market demand or company market share. Additionally, the company's P/E ratio is negative, and its P/B ratio is as high as 52.58, indicating overvaluation in the market with significant bubble risk. From a financial health perspective, although the company has a low debt-to-asset ratio, its operating cash flow continues to be negative, indicating the company faces significant financial pressure in operations. Considering these factors, we believe Cambricon-U's stock is currently bearish.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sentiment Analyst Analysis\nDESCRIPTION: This JSON data represents the analysis from a Sentiment Analyst. It provides a 'bullish' signal with a specified 'confidence' level, justified by the 'reasoning' that positive news outweighs negative news. It also lists 'key_events' contributing to the positive market sentiment. This analysis relies on news and social media data.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"bullish\",\n  \"confidence\": 0.8,\n  \"reasoning\": \"From the news data, the overall market sentiment is positive, with positive news far outnumbering negative news. Although one news item mentions the decline of chip ETFs and Cambricon-U, most news emphasizes the positive performance of Cambricon-U and its sector, including stock price increases and technological breakthroughs. Additionally, the news of Cambricon-U being included in the FTSE China A50 Index indicates the market's optimistic outlook for its long-term prospects. Social media discussions also mainly focus on the company's positive developments, further supporting the bullish view.\",\n  \"key_events\": [\n    \"Cambricon-U included in FTSE China A50 Index\",\n    \"Cambricon-U stock price rises multiple times\",\n    \"AI AIETF holding stock Cambricon-U surges\",\n    \"ZhiYuan QiYuan large model released\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables directly in terminal\nDESCRIPTION: Instructions for setting API keys and other environment variables directly in the terminal for different operating systems.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# macOS/Linux (Bash/Zsh)：\nexport OPENAI_API_KEY=\"你的-openai-api-密钥\"\n\n# Windows (命令提示符)：\nset OPENAI_API_KEY=\"你的-openai-api-密钥\"\n\n# Windows (PowerShell)：\n$env:OPENAI_API_KEY = \"你的-openai-api-密钥\"\n```\n\n----------------------------------------\n\nTITLE: Create Environment Variable File\nDESCRIPTION: This Bash command creates an empty file named `.env` in the current directory. This file will be used to store API keys and configuration variables required by the application.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/stock-analysis/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create .env file\ntouch .env\n```\n\n----------------------------------------\n\nTITLE: Installing Modified Camel Repository for Virtual Try-On\nDESCRIPTION: Command to clone a specific branch of the Camel repository that contains modifications for the virtual try-on functionality. This is a prerequisite for setting up the virtual fitting room.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/virtual_fitting_room/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone -b feature/virtual-try-on-toolkit-and-partial-screenshot --single-branch https://github.com/camel-ai/camel.git\n```\n\n----------------------------------------\n\nTITLE: Researcher Bear Analysis\nDESCRIPTION: This JSON snippet shows the analysis from a 'Researcher Bear'. It lists 'key_points' that support a bearish view, a 'confidence' level, and 'reasoning' based on technical analysis, fundamental analysis, market sentiment analysis, and valuation analysis. It suggests selling the stock due to various negative factors.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README_EN.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_points\": [\n    \"Technical indicators show short-term trend weakening\",\n    \"Net profit continues to be negative and losses increase\",\n    \"Declining operating revenue indicates decreased market demand\",\n    \"P/B ratio as high as 52.58, overvalued\",\n    \"Operating cash flow continues to be negative, significant financial pressure\",\n    \"DCF model and relative valuation methods show intrinsic value lower than market price\"\n  ],\n  \"confidence\": 0.8,\n  \"reasoning\": \"Combining technical analysis, fundamental analysis, market sentiment analysis, and valuation analysis, Cambricon-U's stock is currently bearish. Technical indicators show short-term trend weakening, fundamental analysis shows poor profitability, decreased market demand, overvaluation, and significant financial pressure. Although market sentiment leans positive, these positive sentiments mainly focus on short-term events and cannot mask long-term fundamental issues. Valuation analysis further supports the bearish view, with intrinsic value significantly lower than current market price. Therefore, selling Cambricon-U stock is recommended.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing CAMEL-AI OWL Framework\nDESCRIPTION: Commands to clone the CAMEL-AI OWL repository and install the required dependencies.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/Airbnb-MCP/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/camel-ai/owl\ncd owl\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting up MCP Desktop Commander in Docker\nDESCRIPTION: Instructions for setting up the MCP Desktop Commander tool when running OWL in Docker environment.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @wonderwhy-er/desktop-commander setup --force-file-protocol\n```\n\n----------------------------------------\n\nTITLE: Example Output Logs from Various Investment Analysis Agents - JSON\nDESCRIPTION: These JSON snippets represent sample output logs generated by different specialized agents (market data, technical analysis, fundamentals, sentiment, valuation, bullish and bearish researchers, debate room, risk management, portfolio manager). Each entry contains signals, confidence scores, reasoning, and relevant metrics illustrating individual agent assessments contributing to the final investment decision-making process.\nSOURCE: https://github.com/camel-ai/owl/blob/main/community_usecase/a_share_investment_agent_camel/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"trend\": \"短期趋势向下，但长期趋势仍需观察\",\n\"judgment\": \"当前价格处于布林带中轨下方，RSI接近中性水平，MACD线在信号线下方，表明短期可能继续调整。但考虑到之前的大幅上涨，长期趋势仍需进一步观察。建议关注支撑位670.66和阻力位747.57。\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"bearish\",\n  \"confidence\": 0.8,\n  \"reasoning\": \"从技术指标来看，该股票目前处于一个相对弱势的状态。首先，5日均线（718.856）已经下穿10日均线（743.927）和20日均线（747.574），这表明短期趋势正在走弱。MACD指标也显示了类似的趋势，MACD线（8.994）低于信号线（20.004），并且MACD柱状图（-11.009）为负值，表明市场动能正在减弱。RSI指标（48.676）处于中性区域，但接近超卖区域，这可能预示着短期内可能会有反弹，但整体趋势仍然偏弱。布林带方面，当前价格（685.05）接近布林带下轨（670.657），这可能提供一定的支撑，但考虑到其他指标的弱势表现，支撑力度可能有限。综合来看，当前的市场环境和技术指标均指向一个偏空的趋势。\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"bearish\",\n  \"confidence\": 0.8,\n  \"reasoning\": \"寒武纪-U的财务状况和业务表现显示出明显的负面趋势。首先，公司的净利润持续为负，且亏损额在最近几个季度有所增加，这表明公司在盈利能力方面存在严重问题。其次，公司的营业收入虽然在2023年第四季度有所增长，但随后几个季度出现了显著下降，这可能意味着市场需求或公司市场份额的减少。此外，公司的市盈率为负，市净率高达52.58，表明市场对其估值过高，存在较大的泡沫风险。从财务健康状况来看，尽管公司的资产负债率较低，但其经营现金流持续为负，表明公司在运营过程中面临较大的资金压力。综合以上因素，我们认为寒武纪-U的股票目前处于看跌状态。\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"bullish\",\n  \"confidence\": 0.8,\n  \"reasoning\": \"从新闻数据来看，整体市场情绪偏向积极，积极新闻数量远多于消极新闻。尽管有一条新闻提到芯片ETF和寒武纪-U的下跌，但大多数新闻都强调了寒武纪-U及其所在板块的积极表现，包括股价上涨和技术突破等。此外，寒武纪-U被纳入富时中国A50指数的消息也表明市场对其长期前景持乐观态度。社交媒体讨论也主要集中在公司的积极发展上，进一步支持了看涨的观点。\",\n  \"key_events\": [\n    \"寒武纪-U被纳入富时中国A50指数\",\n    \"寒武纪-U股价多次上涨\",\n    \"人工智能AIETF持仓股寒武纪-U大涨\",\n    \"智元启元大模型发布\"\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"bearish\",\n  \"confidence\": 0.85,\n  \"reasoning\": \"寒武纪-U的财务状况和业务表现显示出明显的负面趋势。首先，公司的净利润持续为负，且亏损额在最近几个季度有所增加，这表明公司在盈利能力方面存在严重问题。其次，公司的营业收入虽然在2023年第四季度有所增长，但随后几个季度出现了显著下降，这可能意味着市场需求或公司市场份额的减少。此外，公司的市盈率为负，市净率高达52.58，表明市场对其估值过高，存在较大的泡沫风险。从财务健康状况来看，尽管公司的资产负债率较低，但其经营现金流持续为负，表明公司在运营过程中面临较大的资金压力。综合以上因素，我们认为寒武纪-U的股票目前处于看跌状态。此外，通过DCF模型和相对估值法计算，公司的内在价值显著低于当前市场价格，进一步支持了看跌的观点。\",\n  \"fair_value\": 200.0,\n  \"key_metrics\": [\n    \"市盈率\",\n    \"市净率\",\n    \"营业收入\",\n    \"净利润\",\n    \"经营现金流\"\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_points\": [\n    \"市场情绪积极，新闻和社交媒体讨论偏向乐观\",\n    \"寒武纪-U被纳入富时中国A50指数，表明市场对其长期前景持乐观态度\",\n    \"技术突破和股价上涨的积极新闻\",\n    \"尽管技术面和基本面显示弱势，但市场情绪和潜在催化剂可能推动股价反弹\"\n  ],\n  \"confidence\": 0.6,\n  \"reasoning\": \"尽管技术面和基本面分析显示寒武纪-U目前处于弱势状态，但市场情绪和潜在催化剂可能推动股价反弹。寒武纪-U被纳入富时中国A50指数，表明市场对其长期前景持乐观态度。此外，公司近期的技术突破和股价上涨的积极新闻也支持了看涨的观点。虽然当前的财务状况和估值较高，但市场情绪和潜在的积极因素可能为股价提供支撑。因此，我们建议在短期内保持谨慎，但长期来看，寒武纪-U仍具有投资潜力。\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_points\": [\n    \"技术指标显示短期趋势走弱\",\n    \"净利润持续为负且亏损增加\",\n    \"营业收入下降表明市场需求减少\",\n    \"市净率高达52.58，估值过高\",\n    \"经营现金流持续为负，资金压力大\",\n    \"DCF模型和相对估值法显示内在价值低于市场价格\"\n  ],\n  \"confidence\": 0.8,\n  \"reasoning\": \"综合技术分析、基本面分析、市场情绪分析和估值分析，寒武纪-U的股票目前处于看跌状态。技术指标显示短期趋势走弱，基本面分析显示公司盈利能力差、市场需求减少、估值过高且资金压力大。尽管市场情绪偏向积极，但这些积极情绪主要集中在短期事件上，无法掩盖长期基本面问题。估值分析进一步支持了看跌的观点，内在价值显著低于当前市场价格。因此，建议卖出寒武纪-U的股票。\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signal\": \"neutral\",\n  \"confidence\": 0.7,\n  \"reasoning\": \"多头和空头研究员的观点都有其合理性和依据。多头研究员强调市场情绪积极、寒武纪-U被纳入富时中国A50指数以及技术突破和股价上涨的积极新闻，这些因素可能在短期内为股价提供支撑。然而，空头研究员指出技术指标显示短期趋势走弱，基本面分析显示公司盈利能力差、市场需求减少、估值过高且资金压力大。尽管市场情绪偏向积极，但这些积极情绪主要集中在短期事件上，无法掩盖长期基本面问题。综合来看，短期内市场情绪和技术突破可能推动股价反弹，但长期基本面问题仍然存在，因此建议保持中立态度，等待更多明确信号。\",\n  \"final_verdict\": \"建议投资者在短期内保持谨慎，关注市场情绪和技术突破的持续性。长期来看，需要密切关注公司的基本面改善情况，特别是盈利能力、市场需求和资金压力等方面。在没有更多明确信号之前，建议保持中立态度，避免过度乐观或悲观。\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_position_size\": 0.2,\n  \"volatility\": 0.15,\n  \"risk_score\": 0.7,\n  \"max_drawdown\": 0.25,\n  \"suggested_position_size\": 0.15,\n  \"reasoning\": \"鉴于股票688256较高的波动性和基本面风险，建议采取谨慎态度。虽然短期内存在技术突破的可能性，但长期来看公司面临盈利能力差等问题。因此，建议控制持仓比例不超过20%，并设置适当的止损点以保护资本。同时，通过多样化投资来分散风险。\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"hold\",\n  \"quantity\": 0,\n  \"confidence\": 0.8,\n  \"reasoning\": \"综合考虑各类分析师的交易信号、辩论结果、风险分析、当前投资组合状况以及最新市场价格，我们决定对股票688256采取持有策略。技术分析和基本面分析均显示该股票处于弱势状态，技术指标显示短期趋势走弱，基本面显示公司盈利能力差、市场需求减少、估值过高且资金压力大。尽管情绪分析显示市场情绪偏向积极，但这些积极情绪主要集中在短期事件上，无法掩盖长期基本面问题。辩论结果也建议在短期内保持谨慎，关注市场情绪和技术突破的持续性。长期来看，需要密切关注公司的基本面改善情况。风险分析建议控制持仓比例不超过20%，并设置适当的止损点以保护资本。因此，我们决定暂时持有该股票，等待更多明确信号。\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js for MCP integration\nDESCRIPTION: Instructions for installing Node.js on different operating systems, which is required for using the Model Context Protocol (MCP) features.\nSOURCE: https://github.com/camel-ai/owl/blob/main/README_zh.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Linux\nsudo apt update\nsudo apt install nodejs npm -y\n\n# Mac\nbrew install node\n```\n\n----------------------------------------\n\nTITLE: Specify docx2markdown Minimum Package Version (requirements.txt)\nDESCRIPTION: Sets the minimum required version for the `docx2markdown` package to `0.1.1`. This package is used to convert Microsoft Word `.docx` files into markdown format for processing.\nSOURCE: https://github.com/camel-ai/owl/blob/main/requirements.txt#_snippet_2\n\nLANGUAGE: requirements.txt\nCODE:\n```\ndocx2markdown>=0.1.1\n```\n\n----------------------------------------\n\nTITLE: Specify chunkr-ai Minimum Package Version (requirements.txt)\nDESCRIPTION: Requires the `chunkr-ai` package to be version `0.0.41` or higher. This dependency likely provides AI-related text processing or chunking capabilities used within the project.\nSOURCE: https://github.com/camel-ai/owl/blob/main/requirements.txt#_snippet_1\n\nLANGUAGE: requirements.txt\nCODE:\n```\nchunkr-ai>=0.0.41\n```\n\n----------------------------------------\n\nTITLE: Specify mcp-simple-arxiv Package Version (requirements.txt)\nDESCRIPTION: Sets the exact required version for the `mcp-simple-arxiv` package to `0.2.2`. This package likely provides functionality for fetching or processing data specifically from the Arxiv repository.\nSOURCE: https://github.com/camel-ai/owl/blob/main/requirements.txt#_snippet_4\n\nLANGUAGE: requirements.txt\nCODE:\n```\nmcp-simple-arxiv==0.2.2\n```\n\n----------------------------------------\n\nTITLE: Specify mcp-server-fetch Package Version (requirements.txt)\nDESCRIPTION: Sets the exact required version for the `mcp-server-fetch` package to `2025.1.17`. This package likely handles fetching data from a dedicated server component or source.\nSOURCE: https://github.com/camel-ai/owl/blob/main/requirements.txt#_snippet_5\n\nLANGUAGE: requirements.txt\nCODE:\n```\nmcp-server-fetch==2025.1.17\n```"
  }
]