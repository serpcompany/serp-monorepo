[
  {
    "owner": "zhiburt",
    "repo": "tabled",
    "content": "TITLE: Creating a table from a struct with derive macro in Rust\nDESCRIPTION: This example demonstrates how to automatically implement the `Tabled` trait for a struct using the `#[derive(Tabled)]` macro. It then shows how to create a table from a vector of these structs and use `assert_table` to verify the output. This showcases the most straightforward way to generate a table using `tabled`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/README.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse tabled::{Table, Tabled};\nuse tabled::assert::assert_table;\n\n#[derive(Tabled)]\nstruct Language<'a> {\n    name: &'a str,\n    designed_by: &'a str,\n    invented_year: usize,\n}\n\nlet languages = vec![\n    Language { name: \"C\",    designed_by: \"Dennis Ritchie\", invented_year: 1972 },\n    Language { name: \"Go\",   designed_by: \"Rob Pike\",       invented_year: 2009 },\n    Language { name: \"Rust\", designed_by: \"Graydon Hoare\",  invented_year: 2010 },\n];\n\nlet table = Table::new(languages);\n\nassert_table!(\n    table,\n    \"+------+----------------+---------------+\" \\\n    \"| name | designed_by    | invented_year |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"| C    | Dennis Ritchie | 1972          |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"| Go   | Rob Pike       | 2009          |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"| Rust | Graydon Hoare  | 2010          |\" \\\n    \"+------+----------------+---------------+\"\n);\n```\n\n----------------------------------------\n\nTITLE: Building a table step by step with Builder in Rust\nDESCRIPTION: This example illustrates how to construct a table programmatically using the `Builder` struct.  It shows how to add records to the builder and then build the table.  The `Style::ascii_rounded()` setting is applied to customize the table's appearance. Finally, `assert_table` is used to validate the generated table. This approach provides more control over the table's construction.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/README.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nuse tabled::{builder::Builder, settings::Style};\nuse tabled::assert::assert_table;\n\nlet mut builder = Builder::new();\nbuilder.push_record([\"C\", \"Dennis Ritchie\", \"1972\"]);\nbuilder.push_record([\"Go\", \"Rob Pike\", \"2009\"]);\nbuilder.push_record([\"Rust\", \"Graydon Hoare\", \"2010\"]);\n\nlet mut table = builder.build();\ntable.with(Style::ascii_rounded());\n\nassert_table!(\n    table,\n    \".------------------------------.\" \\\n    \"| C    | Dennis Ritchie | 1972 |\" \\\n    \"| Go   | Rob Pike       | 2009 |\" \\\n    \"| Rust | Graydon Hoare  | 2010 |\" \\\n    \"'------------------------------'\"\n);\n```\n\n----------------------------------------\n\nTITLE: Tabled Struct Example in Rust\nDESCRIPTION: This code snippet demonstrates how to use the `Tabled` derive macro to automatically generate a table from a Rust struct. It defines a `Language` struct and uses `Table::new` to create a table from a vector of `Language` instances. The example includes an assertion to verify the table's output.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse tabled::{Tabled, Table};\nuse tabled::assert::assert_table;\n\n#[derive(Tabled)]\nstruct Language {\n    name: &'static str,\n    designed_by: &'static str,\n    invented_year: usize,\n}\n\nlet languages = vec![\n    Language { name: \"C\",    designed_by: \"Dennis Ritchie\",  invented_year: 1972 },\n    Language { name: \"Go\",   designed_by: \"Rob Pike\",        invented_year: 2009 },\n    Language { name: \"Rust\", designed_by: \"Graydon Hoare\",   invented_year: 2010 },\n];\n\nlet table = Table::new(languages);\n\nassert_table!(\n    table,\n    \"+------+----------------+---------------+\"\\\n    \"| name | designed_by    | invented_year |\"\\\n    \"+------+----------------+---------------+\"\\\n    \"| C    | Dennis Ritchie | 1972          |\"\\\n    \"+------+----------------+---------------+\"\\\n    \"| Go   | Rob Pike       | 2009          |\"\\\n    \"+------+----------------+---------------+\"\\\n    \"| Rust | Graydon Hoare  | 2010          |\"\\\n    \"+------+----------------+---------------+\"\n);\n```\n\n----------------------------------------\n\nTITLE: CSV to Table Conversion (In-Memory Approach) - Rust\nDESCRIPTION: This Rust code demonstrates converting CSV data to a table using an in-memory approach. It reads a CSV string, converts it into a `tabled` table using `csv_to_table::from_reader`, and prints the table to the console. This approach loads the entire CSV data into memory.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/csv_to_table/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let syscalls = \"\\\n        0,INDIR,\\\",\\\"int sys_syscall(int number, ...)\\\"\\n\\\n        1,STD,\\\",\\\"void sys_exit(int rval)\\\"\\n\\\n        2,STD,\\\",\\\"int sys_fork(void)\\\"\\n\\\n        3,STD,NOLOCK,\\\"ssize_t sys_read(int fd, void *buf, size_t nbyte)\\\"\\n\\\n        4,STD,NOLOCK,\\\"ssize_t sys_write(int fd, const void *buf, size_t nbyte)\\\"\\\"; \n\n    let table = csv_to_table::from_reader(syscalls.as_bytes()).unwrap();\n\n    println!(\"{table}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Cell Border with Border in Rust\nDESCRIPTION: This code snippet demonstrates how to modify the border of a specific cell using the `Border` struct. It applies custom top border styles to the first row of the table. Requires `tabled`, `tabled::settings`, `tabled::assert`\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    settings::{object::Rows, Border, Style},\n    assert::assert_table,\n    Table,\n};\n\nlet data = [[\"123\", \"456\"], [\"789\", \"000\"]];\n\nlet mut table = Table::new(data);\ntable.modify(\n    Rows::first(),\n    Border::inherit(Style::ascii())\n        .top('=')\n        .corner_top_left('=')\n        .corner_top_right('='),\n);\n```\n\n----------------------------------------\n\nTITLE: Modify Table Alignment by Column Name - Rust\nDESCRIPTION: Illustrates how to modify the alignment of a table column by its name using `ByColumnName`.  Requires `Alignment` and `ByColumnName` from `tabled::settings::location` and `tabled::settings`. The code modifies the alignment of the 'name' column to the right and asserts that the table matches the expected output. Requires the `assert_table` macro from `tabled::assert`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_77\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{location::ByColumnName, Alignment};\nuse tabled::assert::assert_table;\n\ntable.modify(ByColumnName::new(\"name\"), Alignment::right());\n\nassert_table!(\n    table,\n    \"+------+----------------+---------------+\" \\\n    \"| name | designed_by    | invented_year |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"|    C | Dennis Ritchie | 1972          |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"|   Go | Rob Pike       | 2009          |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"| Rust | Graydon Hoare  | 2010          |\" \\\n    \"+------+----------------+---------------+\" \\\n);\n```\n\n----------------------------------------\n\nTITLE: Format Headers - tabled Rust\nDESCRIPTION: This example shows how to change the format of a column name using `#[tabled(rename_all = \"\")]`. It supports formats like camelCase, kebab-case, PascalCase, SCREAMING_SNAKE_CASE, snake_case, lowercase, UPPERCASE, lower title case, Upper Title Case, and verbatim.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_50\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\n#[tabled(rename_all = \"CamelCase\")]\nstruct Person {\n    id: u8,\n    number: &'static str,\n    name: &'static str,\n    #[tabled(rename_all = \"UPPERCASE\")]\n    middle_name: &'static str,\n}\n```\n\n----------------------------------------\n\nTITLE: Object Selection with 'and' and 'not' - Rust\nDESCRIPTION: Demonstrates how to select specific cells or subgroups of cells within a table using the `and` and `not` methods on `Object` types. This allows for targeted modification of table elements. Requires importing `Segment`, `Cell`, `Rows`, and `Columns` from `tabled::settings::object`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_76\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::object::{Object, Segment, Cell, Rows, Columns};\nSegment::all().not(Rows::first()); // select all cells except header.\nColumns::first().and(Columns::last()); // select cells from first and last columns.\nRows::first().and(Columns::single(0)).not(Cell(0, 0)); // select the header and first column except the (0, 0) cell.\n```\n\n----------------------------------------\n\nTITLE: Table Creation with 'col!' and 'row!' Macros - Rust\nDESCRIPTION: Illustrates the use of `col!` and `row!` macros to create table visualizations. `col!` creates a single-column table, while `row!` creates a single-row table. These can be combined to create flexible table layouts. Requires `col!` and `row!` from `tabled`, and `Style` from `tabled::settings`. Requires the `assert_table` macro from `tabled::assert`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_81\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{col, row, assert::assert_table, settings::Style};\n\nlet mut table = row![\n    col![\"table 0\", \"0\", \"1\", \"2\"],\n    col![\"table 1\", \"world\"],\n    col![\"table 2\"],\n];\ntable.with(Style::modern_rounded());\n\nassert_table!(\n    table,\n    \"╭─────────────┬─────────────┬─────────────╮\" \\\n    \"│ +---------+ │ +---------+ │ +---------+ │\" \\\n    \"│ | table 0 | │ | table 1 | │ | table 2 | │\" \\\n    \"│ +---------+ │ +---------+ │ +---------+ │\" \\\n    \"│ | 0       | │ | world   | │             │\" \\\n    \"│ +---------+ │ +---------+ │             │\" \\\n    \"│ | 1       | │             │             │\" \\\n    \"│ +---------+ │             │             │\" \\\n    \"│ | 2       | │             │             │\" \\\n    \"│ +---------+ │             │             │\" \\\n    \"╰─────────────┴─────────────┴─────────────╯\" \\\n);\n```\n\n----------------------------------------\n\nTITLE: CSV to Table Conversion (Sniffing Approach) - Rust\nDESCRIPTION: This Rust code demonstrates converting CSV data to a table using a sniffing approach. It reads a CSV string and uses `csv_to_table::iter::from_reader` to create an iterator-based table. The `sniff(3)` method attempts to determine the CSV structure based on the first 3 rows, limiting memory usage. The resulting table is then built and written to standard output using `table.build(std::io::stdout())`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/csv_to_table/README.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let syscalls = \"\\\n        0,INDIR,\\\",\\\"int sys_syscall(int number, ...)\\\"\\n\\\n        1,STD,\\\",\\\"void sys_exit(int rval)\\\"\\n\\\n        2,STD,\\\",\\\"int sys_fork(void)\\\"\\n\\\n        3,STD,NOLOCK,\\\"ssize_t sys_read(int fd, void *buf, size_t nbyte)\\\"\\n\\\n        4,STD,NOLOCK,\\\"ssize_t sys_write(int fd, const void *buf, size_t nbyte)\\\"\\\";\n\n    let table = csv_to_table::iter::from_reader(syscalls.as_bytes()).sniff(3);\n\n    table.build(std::io::stdout()).unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Table Builder Example in Rust\nDESCRIPTION: This code snippet demonstrates how to use the `Builder` struct to construct a table dynamically. It initializes a `Builder` with a specified capacity, pushes records and columns, and then builds the table. The example applies the `modern` style and uses an assertion to verify the output.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nuse tabled::{builder::Builder, settings::Style};\nuse tabled::assert::assert_table;\n\nlet mut b = Builder::with_capacity(3, 0);\nb.push_record([\"row=0 col=0\", \"row=0 col=1\"]);\nb.push_column([\"row=0 col=2\", \"row=1 col=2\"]);\n\nlet mut table = b.build();\ntable.with(Style::modern());\n\nassert_table!(\n    table,\n    \"┌─────────────┬─────────────┬─────────────┐\"\\\n    \"│ row=0 col=0 │ row=0 col=1 │ row=0 col=2 │\"\\\n    \"├─────────────┼─────────────┼─────────────┤\"\\\n    \"│             │             │ row=1 col=2 │\"\\\n    \"└─────────────┴─────────────┴─────────────┘\"\n);\n```\n\n----------------------------------------\n\nTITLE: Colorizing Borders with BorderColor in Rust\nDESCRIPTION: This code snippet demonstrates how to set the colors of borders using the `BorderColor` struct. It sets the frame to green, the first column to black, and the last column to red. Requires: `tabled::settings`\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{style::BorderColor, Color};\nuse tabled::settings::object::Columns;\n\n// Set a frame of the table to green color.\ntable.with(BorderColor::filled(Color::FG_GREEN));\n// Set all borders of 1st column column to black color.\ntable.modify(Columns::first(), BorderColor::filled(Color::FG_BLACK));\n// Set all borders of last column column to red color.\ntable.modify(Columns::last(), BorderColor::filled(Color::FG_RED));\n```\n\n----------------------------------------\n\nTITLE: Table with Col/Row Macros\nDESCRIPTION: This snippet demonstrates a table created using column and row macros.  It displays person data and nested tables, showcasing how macros can be used to create complex table structures.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n+-------------------------------------------+---------------------------------------------+\n| .---------------------------------------. | ┌────────────────────┬─────┬──────────────┐ |\n| | name             | age | is_validated | | │ name               │ age │ is_validated │ |\n| | Jon Doe          | 255 | false        | | ├────────────────────┼─────┼──────────────┤ |\n| | Mark Nelson      | 13  | true         | | │ Jack Black         │ 51  │ false        │ |\n| | Terminal Monitor | 0   | false        | | ├────────────────────┼─────┼──────────────┤ |\n| | Adam Blend       | 17  | true         | | │ Michelle Goldstein │ 44  │ true         │ |\n| '---------------------------------------' | └────────────────────┴─────┴──────────────┘ |\n+-------------------------------------------+---------------------------------------------+\n+-------------------------------------------+\n| .---------------------------------------. |\n| | name             | age | is_validated | |\n| | Jon Doe          | 255 | false        | |\n| | Mark Nelson      | 13  | true         | |\n| | Terminal Monitor | 0   | false        | |\n| | Adam Blend       | 17  | true         | |\n| '---------------------------------------' |\n+-------------------------------------------+\n| .---------------------------------------. |\n| | name             | age | is_validated | |\n| | Jon Doe          | 255 | false        | |\n| | Mark Nelson      | 13  | true         | |\n| | Terminal Monitor | 0   | false        | |\n| | Adam Blend       | 17  | true         | |\n| '---------------------------------------' |\n+-------------------------------------------+\n| .---------------------------------------. |\n| | name             | age | is_validated | |\n| | Jon Doe          | 255 | false        | |\n| | Mark Nelson      | 13  | true         | |\n| | Terminal Monitor | 0   | false        | |\n| | Adam Blend       | 17  | true         | |\n| '---------------------------------------' |\n+-------------------------------------------+\n+-------------------------------------------------------------------------------+\n|  +-------+-----+--------------+  ┌────────────────────┬─────┬──────────────┐  |\n|  | name  | age | is_validated |  │ name               │ age │ is_validated │  |\n|  +-------+-----+--------------+  ├────────────────────┼─────┼──────────────┤  |\n|  | Sam   | 31  | true         |  │ Jack Black         │ 51  │ false        │  |\n|  +-------+-----+--------------+  ├────────────────────┼─────┼──────────────┤  |\n|  | Sarah | 26  | true         |  │ Michelle Goldstein │ 44  │ true         │  |\n|  +-------+-----+--------------+  └────────────────────┴─────┴──────────────┘  |\n+-------------------------------------------------------------------------------+\n|                   .---------------------------------------.                   |\n|                   | name             | age | is_validated |                   |\n|                   | Jon Doe          | 255 | false        |                   |\n|                   | Mark Nelson      | 13  | true         |                   |\n|                   | Terminal Monitor | 0   | false        |                   |\n|                   | Adam Blend       | 17  | true         |                   |\n|                   '---------------------------------------'                   |\n+-------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Convert JSON to Table (Basic)\nDESCRIPTION: This Rust code demonstrates how to convert a JSON value to a formatted table using the `json_to_table` function. It uses `serde_json` to create a JSON value, then converts it to a table string and prints the result. This example showcases the default table rendering.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/json_to_table/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse json_to_table::json_to_table;\nuse serde_json::json;\n\nfn main() {\n    let value = json!(\n        [\n            {\n                \"name\": \"Aleix Melon\",\n                \"id\": \"E00245\",\n                \"role\": [\"Dev\", \"DBA\"],\n                \"age\": 23,\n                \"doj\": \"11-12-2019\",\n                \"married\": false,\n                \"address\": {\n                    \"street\": \"32, Laham St.\",\n                    \"city\": \"Innsbruck\",\n                    \"country\": \"Austria\"\n                    },\n                \"referred-by\": \"E0012\"\n            },\n        ]\n    );\n\n    let table = json_to_table(&value).to_string();\n\n    println!(\"{}\", table)\n}\n```\n\n----------------------------------------\n\nTITLE: Format Fields with Format String - tabled Rust\nDESCRIPTION: This example showcases how to format a field using a format string with the `#[tabled(format = \"{}\")]` attribute. The curly braces are replaced with the field's value.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_56\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\npub struct Motorcycle {\n    weight: usize,\n    #[tabled(format = \"{} cc\")]\n    cc: usize,\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Enum - tabled Rust\nDESCRIPTION: This example shows how to inline an enum and a struct using `#[tabled(inline)]`. You can also set a prefix for inlined fields using `#[tabled(inline(\"prefix>>\"))]`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_59\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\nenum Vehicle {\n    #[tabled(inline(\"Auto::\"))]\n    Auto {\n        model: &'static str,\n        engine: &'static str,\n    },\n    #[tabled(inline)]\n    Bikecycle(\n        &'static str,\n        #[tabled(inline)] Bike,\n    ),\n}\n\n#[derive(Tabled)]\nstruct Bike {\n    brand: &'static str,\n    price: f32,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Table with Index Column - Rust\nDESCRIPTION: Demonstrates using the `Builder` pattern to create a table with a specific column set as an index. The code initializes a `Builder`, adds records, designates the first column as the index, and then builds the table with a rounded style. Requires `Builder` from `tabled::builder` and `Style` from `tabled::settings`. Requires the `assert_table` macro from `tabled::assert`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_78\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{builder::Builder, settings::Style};\nuse tabled::assert::assert_table;\n\nlet mut builder = Builder::default();\nbuilder.push_record([\"Index\", \"Language\", \"Status\"]);\nbuilder.push_record([\"1\", \"English\", \"In progress\"]);\nbuilder.push_record([\"2\", \"Deutsch\", \"Not ready\"]);\n\nlet builder = builder.index().column(1).name(None);\n\nlet mut table = builder.build();\ntable.with(Style::rounded());\n\nassert_table!(\n    table,\n    \"╭─────────┬───────┬─────────────╮\" \\\n    \"│         │ Index │ Status      │\" \\\n    \"├─────────┼───────┼─────────────┤\" \\\n    \"│ English │ 1     │ In progress │\" \\\n    \"│ Deutsch │ 2     │ Not ready   │\" \\\n    \"╰─────────┴───────┴─────────────╯\" \\\n);\n```\n\n----------------------------------------\n\nTITLE: Table with Builder Index\nDESCRIPTION: This example showcases a table constructed using a builder pattern, displaying information about operating systems and their properties such as base, active status and coolness. The index row is displayed at the top\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n┌───────────┬─────────┬──────┬────────┐\n│           │ Manjaro │ Arch │ Debian │\n├───────────┼─────────┼──────┼────────┤\n│ based_on  │ Arch    │ None │ None   │\n├───────────┼─────────┼──────┼────────┤\n│ is_active │ true    │ true │ true   │\n├───────────┼─────────┼──────┼────────┤\n│ is_cool   │ true    │ true │ true   │\n└───────────┴─────────┴──────┴────────┘\n```\n\n----------------------------------------\n\nTITLE: ExtendedTable Example in Rust\nDESCRIPTION: This example demonstrates the usage of `ExtendedTable`, suitable for data structures with many fields. The example uses a `Distribution` struct with fields like `name`, `is_active`, and `is_cool`, and creates an extended table from a slice of these structs.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_66\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{tables::ExtendedTable, Tabled};\n\n#[derive(Tabled)]\nstruct Distribution<'a> {\n    name: &'a str,\n    is_active: bool,\n    is_cool: bool,\n}\n\nlet data = [\n    Distribution { name: \"Manjaro\", is_cool: true, is_active: true },\n    Distribution { name: \"Debian\", is_cool: true, is_active: true },\n    Distribution { name: \"Debian\", is_cool: true, is_active: true },\n];\n\nlet table = ExtendedTable::new(&data);\n\nprintln!(\"{}\", table);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Tables Horizontally in Tabled\nDESCRIPTION: This example demonstrates how to concatenate two tables horizontally using the `Concat::horizontal` modifier in the `tabled` crate. It clones the original table and concatenates it to itself horizontally.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Concat;\n\ntable.with(Concat::horizontal(table.clone()));\n```\n\n----------------------------------------\n\nTITLE: Width Percentages with tabled in Rust\nDESCRIPTION: This example demonstrates the usage of `tabled::width::Percent` with `Width` to wrap cell contents based on a percentage of available space.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Width, measurement::Percent};\n\ntable.with(Width::wrap(Percent(75)));\n```\n\n----------------------------------------\n\nTITLE: Displaying a Table with Expanded Display\nDESCRIPTION: This snippet displays data in an expanded format, similar to how records are displayed in a database. It presents details of Linux distributions in a vertical format, making it easier to read individual records with multiple fields.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n-[ RECORD 0 ]------\nname      | Manjaro\nbased_on  | Arch\nis_active | true\nis_cool   | true\n-[ RECORD 1 ]------\nname      | Arch\nbased_on  | \nis_active | true\nis_cool   | true\n-[ RECORD 2 ]------\nname      | Debian\nbased_on  | \nis_active | true\nis_cool   | true\n```\n\n----------------------------------------\n\nTITLE: Format Fields with Function - tabled Rust\nDESCRIPTION: This example shows how to format fields using a custom display function specified with the `#[tabled(display = \"func\")]` attribute. This is useful when a field's type doesn't implement the `Display` trait directly, such as with `Option` types.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_53\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\npub struct Record {\n    pub id: i64,\n    #[tabled(display = \"display_option\")]\n    pub valid: Option<bool>\n}\n\nfn display_option(o: &Option<bool>) -> String {\n    match o {\n        Some(s) => format!(\"is valid thing = {}\", s),\n        None => format!(\"is not valid\"),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Style Application in Rust\nDESCRIPTION: This code snippet demonstrates how to apply a predefined style to a `Table` instance. It initializes a table and applies the `psql` style using `table.with(Style::psql())`. The example requires the `tabled` crate.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nuse tabled::{Table, Style};\n\nlet mut table = Table::new(&data);\ntable.with(Style::psql());\n```\n\n----------------------------------------\n\nTITLE: TOML to Table Conversion (Collapsed)\nDESCRIPTION: This example demonstrates how to convert TOML data to a table using the collapsed mode with customized styling.  It uses `TomlTable::new` to create a table, collapses it using `.collapse()`, applies the `Style::extended()` style from the `tabled` crate, and then converts the table to a string.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/toml_to_table/README.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse toml_to_table::TomlTable;\nuse tabled::settings::Style;\n\nlet data = r#\"\n[materials]\nmetal = { reflectivity = 1.0 }\nplastic = { reflectivity = 0.5 }\n\n[[entities]]\nname = \"hero\"\nmaterial = \"metal\"\n\n[[entities]]\nname = \"monster\"\nmaterial = \"plastic\"\n\"#;\n\nlet scene = toml::from_str(data).unwrap();\nlet table = TomlTable::new(&scene)\n    .collapse()\n    .with(Style::extended())\n    .to_string();\n\nprintln!(\"{table}\");\n```\n\n----------------------------------------\n\nTITLE: CompactTable Example in Rust\nDESCRIPTION: This example demonstrates the usage of `CompactTable`, which doesn't use any buffer, thus avoids allocations. It requires manual estimation of column widths. It is suited for resource-constrained environments and supports `no-std`. The example creates a table with manually set widths.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_62\n\nLANGUAGE: rust\nCODE:\n```\nuse std::borrow::Cow;\nuse tabled::settings::Style;\nuse tabled::tables::CompactTable;\n    \nstruct Language<'a> {\n    name: &'a str,\n    designed_by: &'a str,\n    year: usize,\n}\n    \nlet languages = vec![\n    Language { name: \"C\", designed_by: \"Dennis Ritchie\", year: 1972 },\n    Language { name: \"Go\", designed_by: \"Rob Pike\", year: 2009 },\n    Language { name: \"Rust\", designed_by: \"Graydon Hoare\", year: 2010 },\n];\n    \nlet iter = languages.iter().rev().map(|l| {\n    [\n        Cow::Borrowed(l.name),\n        Cow::Borrowed(l.designed_by),\n        Cow::Owned(l.year.to_string()),\n    ]\n});\n\nlet head = [\n    Cow::Borrowed(\"lang\"),\n    Cow::Borrowed(\"inventor\"),\n    Cow::Borrowed(\"published year\"),\n];\nlet iter = std::iter::once(head).chain(iter);\n\nlet table = CompactTable::new(iter)\n    .rows(languages.len())\n    .columns(3)\n    .width([10, 20, 20])\n    .with(Style::modern().remove_horizontal());\n\nlet output = table.to_string();\n    \nprintln!(\"{output}\");\n```\n\n----------------------------------------\n\nTITLE: Merging Cells in a Tabled Table\nDESCRIPTION: This example demonstrates how to merge duplicate cells horizontally and vertically in a table using the `Merge` modifier in the `tabled` crate.  It creates a sample table and applies both `Merge::horizontal()` and `Merge::vertical()` to combine adjacent identical cell values.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{settings::merge::Merge, Table};\n\nlet data = [['A', 'B', 'B'], ['A', 'W', 'E'], ['Z', 'Z', 'Z']];\n\nlet mut table = Table::new(data);\ntable.with(Merge::horizontal()).with(Merge::vertical());\n\nprintln!(\"{}\", table);\n```\n\n----------------------------------------\n\nTITLE: Justify Column Width with tabled in Rust\nDESCRIPTION: This example demonstrates how to set a constant width for all columns in a table using `Width::justify`. In this case, it sets the width of each column to 10.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Width;\n\ntable.with(Width::justify(10));\n```\n\n----------------------------------------\n\nTITLE: Increase Minimum Table Width with tabled in Rust\nDESCRIPTION: This example demonstrates how to increase minimum width of a table using `Width::increase`. It sets the width of a table to be at least 10.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Width;\n\n// increase width of a table in case it was lower than 10.\ntable.with(Width::increase(10));\n```\n\n----------------------------------------\n\nTITLE: Format Fields with Function and Args - tabled Rust\nDESCRIPTION: This example demonstrates how to format fields using a custom display function with arguments passed to it using the `#[tabled(display(\"func\", arg1, arg2, ...))]` attribute. The first argument can also be `self` or `&self`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_54\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\npub struct Record {\n    pub id: i64,\n    #[tabled(display(\"Self::display_valid\", self, 1))]\n    pub valid: Option<bool>\n}\n\nimpl Record {\n    fn display_valid(&self, arg: usize) -> String {\n        match self.valid {\n            Some(s) => format!(\"is valid thing = {} {}\", s, arg),\n            None => format!(\"is not valid {}\", arg),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Convert RON to Embedded Table in Rust\nDESCRIPTION: Converts a RON data string representing a `Scene` into an embedded table format. It utilizes `ron::from_str` to parse the RON string, then uses `ron_to_table::to_string` to generate the table as a string, which is then printed to the console.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/ron_to_table/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet data = r#\"Scene(\n    materials: {\n        \"metal\": (reflectivity: 1.0),\n        \"plastic\": (reflectivity: 0.5),\n    },\n    entities: [\n        (name: \"hero\", material: \"metal\"),\n        (name: \"monster\", material: \"plastic\"),\n    ],\n)\"#;\n\nlet scene = ron::from_str(data).unwrap();\nlet table = ron_to_table::to_string(&scene);\n\nprintln!(\"{}\", table);\n```\n\n----------------------------------------\n\nTITLE: Convert JSON to Table with Orientation\nDESCRIPTION: This Rust code demonstrates how to convert a JSON value to a table with a specified object orientation.  It uses `serde_json` to create a JSON value, then converts it to a table string with the `Orientation::Row` configuration.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/json_to_table/README.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse json_to_table::{json_to_table, Orientation};\nuse serde_json::json;\n\nfn main() {\n    let value = json!(\n        [\n            {\n                \"name\": \"Aleix Melon\",\n                \"role\": [\"Dev\", \"DBA\"],\n                \"age\": 23,\n                \"referred-by\": \"E0012\"\n            },\n            {\n                \"name\": \"Aleix Melon\",\n                \"role\": [\"DBA\"],\n                \"age\": 24,\n                \"referred-by\": \"E0012\"\n            },\n        ]\n    );\n\n    let table = json_to_table(&value)\n        .object_orientation(Orientation::Row)\n        .to_string();\n\n    println!(\"{}\", table)\n}\n```\n\n----------------------------------------\n\nTITLE: Tabled Merge Duplicates Example\nDESCRIPTION: This example demonstrates how to merge duplicate values in adjacent cells of a table, enhancing readability when the same value repeats across multiple rows.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n┌────────────┬─────────┬────────┐\n│ db         │ table   │ total  │\n├────────────┼─────────┼────────┤\n│ database_1 │ table_1 │ 10712  │\n│            ├─────────┼────────┤\n│            │ table_2 │ 57     │\n│            ├─────────┤        │\n│            │ table_3 │        │\n├────────────┼─────────┼────────┤\n│ database_2 │ table_1 │ 72     │\n│            ├─────────┼────────┤\n│            │ table_2 │ 75     │\n├────────────┼─────────┼────────┤\n│ database_3 │ table_1 │ 20     │\n│            ├─────────┼────────┤\n│            │ table_2 │ 21339  │\n│            ├─────────┼────────┤\n│            │ table_3 │ 141723 │\n└────────────┴─────────┴────────┘\n```\n\n----------------------------------------\n\nTITLE: Applying Theme with Custom Borders in Rust\nDESCRIPTION: This code snippet showcases how to use the `Theme` struct to modify table styles at runtime. It inserts a horizontal line and sets a filled frame for the table using `Border` and `HorizontalLine` from the `tabled::grid::config` and `tabled::settings` modules.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::grid::config::{Border, HorizontalLine};\nuse tabled::settings::Theme;\n\nlet mut style = Theme::default();\nstyle.insert_horizontal_line(1, HorizontalLine::full('-', '-', '+', '+'));\nstyle.set_frame(Border::filled('+'));\n```\n\n----------------------------------------\n\nTITLE: Terminal Size Adjustment - Rust\nDESCRIPTION: Demonstrates how to adjust a table's width and height to fit within the terminal size using the `Width` and `Height` settings, along with the `Priority` option for column/row truncation/widening strategies.  Requires `Builder` from `tabled::builder`, `Priority`, `Height`, and `Width` from `tabled::settings`, and `Table` from `tabled`. Requires the `terminal_size` crate.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_88\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    builder::Builder,\n    settings::{peaker::Priority, Height, Settings, Width},\n    Table,\n};\nuse terminal_size::{terminal_size, Height as TerminalHeight, Width as TerminalWidth};\n\nfn get_terminal_size() -> (usize, usize) {\n    let (TerminalWidth(width), TerminalHeight(height)) =\n        terminal_size().expect(\"failed to obtain a terminal size\");\n\n    (width as usize, height as usize)\n}\n\nlet (width, height) = get_terminal_size();\n\nlet data = [\n    [\"0.2.1\", \"2021-06-23\", \"true\", \"#[header(inline)] attribute\"],\n    [\"0.2.0\", \"2021-06-19\", \"false\", \"API changes\"],\n    [\"0.1.4\", \"2021-06-07\", \"false\", \"display_with attribute\"],\n];\n\nlet settings = Settings::default()\n    .with(Width::wrap(width).priority(Priority::max(true)))\n    .with(Width::increase(width))\n    .with(Height::limit(height))\n    .with(Height::increase(height));\n\nlet mut table = Table::from_iter(data);\ntable.with(settings);\n\nprintln!(\"{table}\");\n```\n\n----------------------------------------\n\nTITLE: Nested Table Example 2\nDESCRIPTION: This example shows nested tables used to display operating system information for different cloud providers. It demonstrates how to display structured data within a table format.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n┌───────┬─────────────────────────────────────────────────┬──────────────────────────────────────────────┐\n│ name  │ main_os                                         │ switch_os                                    │\n├───────┼─────────────────────────────────────────────────┼──────────────────────────────────────────────┤\n│ Azure │ ╔═════════╦═════════════╦═══════════╦═════════╗ │ ╔═════════╦══════════╦═══════════╦═════════╗ │\n│       │ ║ name    ║ based_on    ║ is_active ║ is_cool ║ │ ║ name    ║ based_on ║ is_active ║ is_cool ║ │\n│       │ ╠═════════╬═════════════╬═══════════╬═════════╣ │ ╠═════════╬══════════╬═══════════╬═════════╣ │\n│       │ ║ Windows ║ Independent ║ true      ║ true    ║ │ ║ Manjaro ║ Arch     ║ true      ║ true    ║ │\n│       │ ╚═════════╩═════════════╩═══════════╩═════════╝ │ ╚═════════╩══════════╩═══════════╩═════════╝ │\n├───────┼─────────────────────────────────────────────────┼──────────────────────────────────────────────┤\n│ AWS   │ ╔════════╦═════════════╦═══════════╦═════════╗  │ ╔══════╦═════════════╦═══════════╦═════════╗ │\n│       │ ║ name   ║ based_on    ║ is_active ║ is_cool ║  │ ║ name ║ based_on    ║ is_active ║ is_cool ║ │\n│       │ ╠════════╬═════════════╬═══════════╬═════════╣  │ ╠══════╬═════════════╬═══════════╬═════════╣ │\n│       │ ║ Debian ║ Independent ║ true      ║ true    ║  │ ║ Arch ║ Independent ║ true      ║ true    ║ │\n│       │ ╚════════╩═════════════╩═══════════╩═════════╝  │ ╚══════╩═════════════╩═══════════╩═════════╝ │\n├───────┼─────────────────────────────────────────────────┼──────────────────────────────────────────────┤\n│ GCP   │ ╔════════╦═════════════╦═══════════╦═════════╗  │ ╔══════╦═════════════╦═══════════╦═════════╗ │\n│       │ ║ name   ║ based_on    ║ is_active ║ is_cool ║  │ ║ name ║ based_on    ║ is_active ║ is_cool ║ │\n│       │ ╠════════╬═════════════╬═══════════╬═════════╣  │ ╠══════╬═════════════╬═══════════╬═════════╣ │\n│       │ ║ Debian ║ Independent ║ true      ║ true    ║  │ ║ Arch ║ Independent ║ true      ║ true    ║ │\n│       │ ╚════════╩═════════════╩═══════════╩═════════╝  │ ╚══════╩═════════════╩═══════════╩═════════╝ │\n└───────┴─────────────────────────────────────────────────┴──────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Add csv_to_table dependency using TOML\nDESCRIPTION: This snippet shows how to add the `csv_to_table` library as a dependency to your Rust project using Cargo's TOML configuration file. It specifies the dependency and its version.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/csv_to_table/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncsv_to_table = \"0.3\"\n```\n\n----------------------------------------\n\nTITLE: Table Width Adjustment with tabled Rust\nDESCRIPTION: This snippet demonstrates how to adjust the width of the table based on content size using `Width`. It uses a function to generate tables of different sizes and applies wrapping and increasing width strategies to control the overall table width.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    settings::{peaker::Priority, Width},\n    Table,\n};\n\nfn gen_table(size: usize, width: usize) -> String {\n    let data = vec![(size.to_string(), \"x\".repeat(size))];\n\n    let mut table = Table::new(data);\n    table.with((\n        Width::wrap(width).priority(Priority::max(true)),\n        Width::increase(width).priority(Priority::min(true)),\n    ));\n\n    table.to_string()\n}\n\nlet table = gen_table(50, 40);\nprintln!(\"{table}\");\n\nlet table = gen_table(20, 40);\nprintln!(\"{table}\");\n```\n\n----------------------------------------\n\nTITLE: Displaying a Table with Builder\nDESCRIPTION: This snippet displays a table of oceans and a link to wikipedia about the ocean. It utilizes a builder pattern to define the table's structure and content.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n| https://en.wikipedia.org/wiki/Ocean |\n|---------------+---------------------|\n| The terms \"the ocean\" or \"the sea\"  |\n| used without specification refer to |\n|  the interconnected body of salt wa |\n| ter covering the majority of the Ea |\n| rth's surface                       |\n| =================================== |\n| #             | Ocean               |\n| 0             | Atlantic            |\n| 1             | Pacific             |\n| 2             | Indian              |\n| 3             | Southern            |\n| 4             | Arctic              |\n```\n\n----------------------------------------\n\nTITLE: Add toml_to_table dependency\nDESCRIPTION: This snippet shows how to add the toml_to_table library as a dependency to your Rust project using Cargo.  Add this to your `Cargo.toml` file.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/toml_to_table/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntoml_to_table = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Adding ron-to-table dependency\nDESCRIPTION: Adds `ron_to_table` as a dependency to a Rust project using Cargo. This enables the use of the library's functionalities for converting RON data to tables.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/ron_to_table/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nron_to_table = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Cell Formatting with tabled in Rust\nDESCRIPTION: This example demonstrates how to use the `Format` function to modify cell values based on their position within the table.  It initializes a 3x4 table with zeros and then updates each cell with the product of its row and column indices.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    settings::{format::Format, object::Rows},\n    assert::assert_table,\n    Table,\n};\n\nlet mut table = Table::new([[0; 4]; 3]);\ntable.modify(\n    Rows::new(..),\n    Format::positioned(|_, p| ((p.row) * (p.col)).to_string()),\n);\n\nassert_table!(\n    table,\n    \"+---+---+---+---+----+----+----+----+----+----+\" \\\n    \"| 0 | 0 | 0 | 0 | 0  | 0  | 0  | 0  | 0  | 0  |\" \\\n    \"+---+---+---+---+----+----+----+----+----+----+\" \\\n    \"| 0 | 1 | 2 | 3 | 4  | 5  | 6  | 7  | 8  | 9  |\" \\\n    \"+---+---+---+---+----+----+----+----+----+----+\" \\\n    \"| 0 | 2 | 4 | 6 | 8  | 10 | 12 | 14 | 16 | 18 |\" \\\n    \"+---+---+---+---+----+----+----+----+----+----+\" \\\n    \"| 0 | 3 | 6 | 9 | 12 | 15 | 18 | 21 | 24 | 27 |\" \\\n    \"+---+---+---+---+----+----+----+----+----+----+\" \\\n);\n```\n\n----------------------------------------\n\nTITLE: Tabled Extended Display Example\nDESCRIPTION: This example demonstrates an extended display format for showing records with named fields, similar to database query results, using the Tabled crate.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n-[ RECORD 0 ]------\nname      | Manjaro\nbased_on  | Arch\nis_active | true\nis_cool   | true\n-[ RECORD 1 ]------\nname      | Arch\nbased_on  | \nis_active | true\nis_cool   | true\n-[ RECORD 2 ]------\nname      | Debian\nbased_on  | \nis_active | true\nis_cool   | true\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Cargo\nDESCRIPTION: This command is used to run the benchmarks for the tabled crate. It executes the benchmark suite defined in the project using cargo's built-in benchmarking tool.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/benches/lib_comp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: Table Testing Macros Usage in Rust\nDESCRIPTION: This code demonstrates the usage of `test_table!`, `assert_table!`, and `static_table!` macros from the `testing_table` crate. It showcases how to define tables and assert their structure within Rust tests. The `tabled` crate is a dependency providing the Table struct.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/testing_table/README.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse testing_table::{test_table, assert_table, static_table};\n\ntest_table!(\n    test_tabled,\n    tabled::Table::new([[1, 2, 3]]),\n    \"+---+---+---+\"\n    \"| 0 | 1 | 2 |\"\n    \"+---+---+---+\"\n    \"| 1 | 2 | 3 |\"\n    \"+---+---+---+\"\n);\n\nassert_table!(\n    tabled::Table::new([[1, 2, 3]]),\n    \"+---+---+---+\"\n    \"| 0 | 1 | 2 |\"\n    \"+---+---+---+\"\n    \"| 1 | 2 | 3 |\"\n    \"+---+---+---+\"\n);\n\nstatic_table!(\n    \"+---+---+---+\"\n    \"| 0 | 1 | 2 |\"\n    \"+---+---+---+\"\n    \"| 1 | 2 | 3 |\"\n    \"+---+---+---+\"\n);\n```\n\n----------------------------------------\n\nTITLE: Cell Padding with tabled in Rust\nDESCRIPTION: This example demonstrates how to use the `Padding` structure to add padding to table cells. It sets different padding for the last column and the first row, including custom fill characters and background color.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{\n    object::{Columns, Object, Rows},\n    Color, Padding, PaddingColor,\n};\n\n// Set a padding for a last column (except first row)\ntable.modify(\n    Columns::last().not(Rows::first()),\n    Padding::new(1, 1, 0, 0).fill('[', ']', ' ', ' '),\n);\n\n// Set a padding and its color for a first row\ntable.modify(Rows::first(), Padding::new(2, 2, 0, 2));\ntable.modify(Rows::first(), PaddingColor::filled(Color::BG_BLUE));\n```\n\n----------------------------------------\n\nTITLE: Transposing Table with Builder - Rust\nDESCRIPTION: Shows how to transpose a table created using the `Builder` pattern.  This example uses the `Builder` from the previous snippet, and then applies `transpose()` to rearrange the row and column layout of the table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_79\n\nLANGUAGE: rust\nCODE:\n```\n// ...\n// Use previous example\n\nlet builder = builder.index()\n    .column(1)\n    .name(None)\n    .transpose();\n```\n\n----------------------------------------\n\nTITLE: Static Table in Documentation - Rust\nDESCRIPTION: Illustrates embedding a static table within documentation using the `static_table` macro. This allows for displaying pre-formatted tables directly within the function's documentation.  Requires the `static_table` crate.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_84\n\nLANGUAGE: rust\nCODE:\n```\n/// Multiply 2 integers together.\n///\n#[doc = static_table::static_table!([\n    [\"x\", \"y\", \"result\"],\n    [\"1\", '0', '0'],\n    [\"1\", '2', '2'],\n    [\"2\", '2', '4']\n])]pub fn mul(left: usize, right: usize) -> usize {\n    left + right\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Rows and Columns from a Tabled Table\nDESCRIPTION: This example demonstrates how to remove rows and columns from a table using the `Remove` modifier in the `tabled` crate.  It removes the first row using `Remove::row(Rows::first())` and the third column using `Remove::column(Columns::single(2))`. Note that column indices are zero-based.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{object::{Columns, Rows}, Remove};\n\ntable.with(Remove::row(Rows::first()));\ntable.with(Remove::column(Columns::single(2)));\n```\n\n----------------------------------------\n\nTITLE: IterTable Example in Rust\nDESCRIPTION: This example demonstrates the usage of `IterTable`, which is similar to the main `Table` but does not buffer data. It requires a buffer for only one row at a time and might be useful when data cannot fit entirely in memory. The example creates a table from a vector of `Language` structs.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_60\n\nLANGUAGE: rust\nCODE:\n```\nuse std::borrow::Cow;\nuse tabled::{settings::Style, tables::IterTable};\n    \nstruct Language<'a> {\n    name: &'a str,\n    designed_by: &'a str,\n    year: usize,\n}\n    \nlet languages = vec![\n    Language { name: \"C\", designed_by: \"Dennis Ritchie\", year: 1972 },\n    Language { name: \"Go\", designed_by: \"Rob Pike\", year: 2009 },\n    Language { name: \"Rust\", designed_by: \"Graydon Hoare\", year: 2010 },\n];\n    \nlet iter = languages.iter().rev().map(|l| {\n    [\n        Cow::Borrowed(l.name),\n        Cow::Borrowed(l.designed_by),\n        Cow::Owned(l.year.to_string()),\n    ]\n});\n\nlet head = [\n    Cow::Borrowed(\"lang\"),\n    Cow::Borrowed(\"inventor\"),\n    Cow::Borrowed(\"published year\"),\n];\nlet iter = std::iter::once(head).chain(iter);\n\nlet table = IterTable::new(iter)\n    .sniff(2)\n    .with(Style::modern().remove_horizontal());\n    \nlet output = table.to_string();\n    \nprintln!(\"{output}\");\n```\n\n----------------------------------------\n\nTITLE: Tuple Options Example in Rust\nDESCRIPTION: This example demonstrates how to concat together options, just like `Settings` does, but in a more ideomatic way. It combines `Alignment::right()` and `Style::modern()` to style a table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_75\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    settings::{Alignment, Style},\n    assert::assert_table,\n    Table,\n};\n\nlet movies = vec![\n    (\"The Fall Guy\", 2024, 6.9),\n    (\"Barbie\", 2023, 6.8),\n    (\"The Chase for Carrera\", 2023, 7.5),\n];\n\nlet mut table = Table::new(movies);\ntable.with((Alignment::right(), Style::modern()));\n\nassert_table!(\n    table,\n    \"┌───────────────────────┬──────┬─────┐\"\n    \"│                  &str │  i32 │ f64 │\"\n    \"├───────────────────────┼──────┼─────┤\"\n    \"│          The Fall Guy │ 2024 │ 6.9 │\"\n    \"├───────────────────────┼──────┼─────┤\"\n    \"│                Barbie │ 2023 │ 6.8 │\"\n    \"├───────────────────────┼──────┼─────┤\"\n    \"│ The Chase for Carrera │ 2023 │ 7.5 │\"\n    \"└───────────────────────┴──────┴─────┘\"\n);\n```\n\n----------------------------------------\n\nTITLE: Horizontal Span - tabled Rust\nDESCRIPTION: This example demonstrates how to create a table and apply a horizontal span to specific cells using the `Span::column()` method. The code uses the `tabled` crate to generate a table with specified data and alignment.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_41\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    settings::{Alignment, Span},\n    Table,\n};\n\nlet data = vec![[\"A\", \"B\", \"C\"], [\"D\", \"E\", \"F\"]];\n\nlet mut table = Table::new(data);\ntable\n    .modify((0, 0), Span::column(0))\n    .modify((1, 0), Span::column(2))\n    .with(Alignment::center());\n\nprintln!(\"{}\", table);\n```\n\n----------------------------------------\n\nTITLE: Format All Fields of Type with Function - tabled Rust\nDESCRIPTION: This example shows how to set a `display` function against the whole type to reduce boilerplate code for multiple fields with similar types. It utilizes `#[tabled(display(Type, \"module::function\", \"arg\"))]` attribute.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_55\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\n#[tabled(display(Option, \"tabled::derive::display::option\", \"undefined\"))]\npub struct Record {\n    pub id: i64,\n    pub name: Option<String>,\n    pub birthdate: Option<usize>,\n    pub valid: Option<bool>,\n}\n```\n\n----------------------------------------\n\nTITLE: TOML to Table Conversion (Embedded)\nDESCRIPTION: This example demonstrates how to convert TOML data to a table using the embedded mode. It first defines a TOML string, parses it using the `toml` crate, and then converts it to a string table using `toml_to_table::to_string`. The resulting table is then printed to the console.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/toml_to_table/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet data = r#\"\n[materials]\nmetal = { reflectivity = 1.0 }\nplastic = { reflectivity = 0.5 }\n\n[[entities]]\nname = \"hero\"\nmaterial = \"metal\"\n\n[[entities]]\nname = \"monster\"\nmaterial = \"plastic\"\n\"#;\n\nlet scene = toml::from_str(data).unwrap();\n\nlet table = toml_to_table::to_string(&scene);\n\nprintln!(\"{}\", table);\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Table with table_to_html in Rust\nDESCRIPTION: This code demonstrates how to use the `table_to_html` crate to create an HTML table. It initializes an `HtmlTable` with sample data, sets the border thickness, and then prints the HTML representation of the table to the console. The code requires the `table_to_html` crate as a dependency.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/table_to_html/README.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse table_to_html::HtmlTable;\n\nfn main() {\n    #[rustfmt::skip]\n    let data = vec![\n        [\"0\",  \"INDIR\", \"\",       \"int sys_syscall(int number, ...)\"],\n        [\"1\",  \"STD\",   \"\",       \"void sys_exit(int rval)\"],\n        [\"2\",  \"STD\",   \"\",       \"int sys_fork(void)\"],\n        [\"3\",  \"STD\",   \"NOLOCK\", \"ssize_t sys_read(int fd, void *buf, size_t nbyte)\"],\n        [\"4\",  \"STD\",   \"NOLOCK\", \"ssize_t sys_write(int fd, const void *buf, size_t nbyte)\"],\n    ];\n\n    let mut table = HtmlTable::new(data);\n    table.set_border(3);\n\n    println!(\"{table}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered Table Output (Basic)\nDESCRIPTION: This text represents the rendered table output from the basic JSON to table conversion example. It shows the table structure, with rows and columns representing the fields and values from the JSON data.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/json_to_table/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------------------------------+\n| +-------------+-------------------------------+ |\n| | address     | +---------+-----------------+ | |\n| |             | | city    |  Innsbruck      | | |\n| |             | +---------+-----------------+ | |\n| |             | | country |  Austria        | | |\n| |             | +---------+-----------------+ | |\n| |             | | street  |  32, Laham St.  | | |\n| |             | +---------+-----------------+ | |\n| +-------------+-------------------------------+ |\n| | age         |  23                           | |\n| +-------------+-------------------------------+ |\n| | doj         |  11-12-2019                   | |\n| +-------------+-------------------------------+ |\n| | id          |  E00245                       | |\n| +-------------+-------------------------------+ |\n| | married     |  false                        | |\n| +-------------+-------------------------------+ |\n| | name        |  Aleix Melon                  | |\n| +-------------+-------------------------------+ |\n| | referred-by |  E0012                        | |\n| +-------------+-------------------------------+ |\n| | role        | +-------+                     | |\n| |             | |  Dev  |                     | |\n| |             | +-------+                     | |\n| |             | |  DBA  |                     | |\n| |             | +-------+                     | |\n| +-------------+-------------------------------+ |\n+-------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Convert RON to Collapsed Table in Rust\nDESCRIPTION: Converts a RON data string into a collapsed table format using `RonTable`. The code parses the RON string into a `Scene` struct, then uses the `RonTable` builder to create a collapsed table with an extended style. The resulting table is printed to the console.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/ron_to_table/README.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse ron_to_table::RonTable;\nuse tabled::settings::Style;\n\nlet data = r#\"Scene(\n    materials: {\n        \"metal\": (reflectivity: 1.0),\n        \"plastic\": (reflectivity: 0.5),\n    },\n    entities: [\n        (name: \"hero\", material: \"metal\"),\n        (name: \"monster\", material: \"plastic\"),\n    ],\n)\"#;\n\nlet scene = ron::from_str(data).unwrap();\nlet table = RonTable::default()\n    .collapse()\n    .with(Style::extended())\n    .build(&scene);\n\nprintln!(\"{table}\");\n```\n\n----------------------------------------\n\nTITLE: Margin Example\nDESCRIPTION: This example demonstrates how margins can be added to a table's cells. It displays a 3x3 table with characters surrounding the cell values, effectively creating visual spacing.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nvvvvvvvvvvvvvvvvvv\nvvvvvvvvvvvvvvvvvv\n<<<<=== === ===>>>\n<<<< 0   1   2 >>>\n<<<<=== === ===>>>\n<<<< A   B   C >>>\n<<<< D   E   F >>>\n<<<< G   H   I >>>\n<<<<=== === ===>>>\n^^^^^^^^^^^^^^^^^^\n\n```\n\n----------------------------------------\n\nTITLE: Applying Theme from Style in Rust\nDESCRIPTION: This code snippet demonstrates how to use a `Theme` and create it `from_style`. Requires: `tabled::settings`\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Style, Theme};\n\nlet mut theme = Theme::from_style(Style::ascii_rounded());\ntheme.remove_borders_horizontal();\ntheme.remove_borders_vertical();\n\ntable.with(theme);\n```\n\n----------------------------------------\n\nTITLE: Set Column Order - tabled Rust\nDESCRIPTION: This example demonstrates how to set the order in which columns are displayed using the `#[tabled(order = ...)]` attribute.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_52\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\nstruct Person {\n   id: u8,\n   #[tabled(order = 0)]\n   number: &'static str,\n   #[tabled(order = 1)]\n   name: &'static str,\n}\n```\n\n----------------------------------------\n\nTITLE: ANSI Coloring Example in Rust\nDESCRIPTION: This example demonstrates how to use ANSI color codes with the tabled library.  It modifies the table to color different columns in red, blue and green.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_73\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{format::Format, object::Columns, Style, Table};\n\nlet mut table = Table::new(&data);\ntable\n    .with(Style::psql())\n    .modify(Columns::single(0), Color::FG_RED)\n    .modify(Columns::single(1), Color::FG_BLUE)\n    .modify(Columns::new(2..), Color::FG_GREEN);\n```\n\n----------------------------------------\n\nTITLE: Enabling ANSI Feature - TOML\nDESCRIPTION: Shows how to enable the `ansi` feature for the `tabled` crate in `Cargo.toml`. This enables support for ANSI escape codes, allowing for colored output and other terminal formatting options.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_85\n\nLANGUAGE: toml\nCODE:\n```\ntabled = { version = \"*\", features = [\"ansi\"] }\n```\n\n----------------------------------------\n\nTITLE: Generating Table via Cargo Run\nDESCRIPTION: This command is used to generate the table data by running a specific cargo project, which is used for readme generation and relies on `critcmp`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/benches/lib_comp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --manifest-path=readme/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Setting Table Height and Width with Tabled\nDESCRIPTION: This example demonstrates how to use the `Height` modifier in the `tabled` crate to set a minimum height for a table. It shows how to limit and increase the table height using `Height::limit` and `Height::increase` respectively, along with `Priority::max` to control which setting takes precedence.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\nuse std::iter::FromIterator;\nuse tabled::Table;\nuse tabled::settings::{peaker::Priority, Height};\n\nfn gen_data(width: usize, height: usize) -> Vec<Vec<String>> {\n    let dims = format!(\"{}x{}\", width, height);\n    let string = vec![\"x\".repeat(width); height].join(\"\\n\");\n\n    vec![\n        vec![String::from(\"N\"), String::from(\"string\")],\n        vec![dims, string],\n    ]\n}\n\nfn gen_table(data: Vec<Vec<String>>, height: usize) -> String {\n    let mut table = Table::from_iter(data);\n    table.with((\n        Height::limit(height).priority(Priority::max(true)),\n        Height::increase(height),\n    ));\n\n    table.to_string()\n}\n\nprintln!(\"{}\", gen_table(gen_data(40, 10), 6));\nprintln!(\"{}\", gen_table(gen_data(40, 4), 10));\n```\n\n----------------------------------------\n\nTITLE: Displaying a Table with Disabled Elements\nDESCRIPTION: This snippet demonstrates how to disable specific elements within a table. It shows a table of Linux distributions with certain elements (like borders or columns) disabled to achieve a specific visual effect.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n###########                     \n# name    # based_on | is_cool |\n###########----------|---------|\n# Debian  #          | true    |\n###########                     \n# Arch    #          | true    |\n###########                     \n# Manjaro # Arch     | true    |\n###########                     \n```\n\n----------------------------------------\n\nTITLE: Result of sniffing CSV conversion - text\nDESCRIPTION: This shows the resulting table printed to console from running the sniffing example. Note that the last two rows are truncated because the sniffing method may not fully determine the size of the columns.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/csv_to_table/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n+---+-------+--+----------------------------------+\n| 0 | INDIR |  | int sys_syscall(int number, ...) |\n+---+-------+--+----------------------------------+\n| 1 | STD   |  | void sys_exit(int rval)          |\n+---+-------+--+----------------------------------+\n| 2 | STD   |  | int sys_fork(void)               |\n+---+-------+--+----------------------------------+\n| 3 | STD   |  | ssize_t sys_read(int fd, void *b |\n+---+-------+--+----------------------------------+\n| 4 | STD   |  | ssize_t sys_write(int fd, const  |\n+---+-------+--+----------------------------------+\n```\n\n----------------------------------------\n\nTITLE: PoolTable Example in Rust\nDESCRIPTION: This example demonstrates the usage of `PoolTable`, which does not necessarily require columns to be aligned. It provides capabilities for diverse table layouts. The example creates a table from chunks of character names and applies styling and alignment.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_64\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    settings::{Alignment, Style},\n    tables::PoolTable,\n};\n\nlet characters = [\n    \"Naruto Uzumaki\",\n    \"Kakashi Hatake\",\n    \"Minato Namikaze\",\n    \"Jiraiya\",\n    \"Orochimaru\",\n    \"Itachi Uchiha\",\n];\n\nlet data = characters.chunks(2);\n\nlet table = PoolTable::new(data)\n    .with(Style::dots())\n    .with(Alignment::center())\n    .to_string();\n\nprintln!(\"{table}\");\n```\n\n----------------------------------------\n\nTITLE: Column names modification Rust\nDESCRIPTION: This code snippet demonstrates how to move the header right to the borders of `Table` after it being created using `ColumnNames` and `Alignment`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{themes::ColumnNames, Alignment};\n\ntable.with(ColumnNames::head().alignment(Alignment::center()));\n```\n\n----------------------------------------\n\nTITLE: Derive Error Example - tabled Rust\nDESCRIPTION: This example shows what happens when you are using `Tabled` derive macro but the inner struct doesn't implement `Display` trait.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_48\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n#[derive(Tabled)]\nstruct SomeType {\n    field1: SomeOtherType,\n}\n\nstruct SomeOtherType;\n```\n\n----------------------------------------\n\nTITLE: Rendered Table Output (Collapsed)\nDESCRIPTION: This text represents the rendered collapsed table output.  The 'address' field is displayed in a more compact, nested format.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/json_to_table/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n+-------------+---------+---------------+\n| address     | city    | Innsbruck     |\n|             +---------+---------------+\n|             | country | Austria       |\n|             +---------+---------------+\n|             | street  | 32, Laham St. |\n+-------------+---------+---------------+\n| age         | 23                      |\n+-------------+-------------------------+\n| doj         | 11-12-2019              |\n+-------------+-------------------------+\n| id          | E00245                  |\n+-------------+-------------------------+\n| married     | false                   |\n+-------------+-------------------------+\n| name        | Aleix Melon             |\n+-------------+-------------------------+\n| referred-by | E0012                   |\n+-------------+-------------------------+\n| role        | Dev                     |\n|             +-------------------------+\n|             | DBA                     |\n+-------------+-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Extracting Segments from a Tabled Table\nDESCRIPTION: This example demonstrates how to extract a specific segment of data from a table using the `Extract` modifier in the `tabled` crate. It extracts rows from index 1 (inclusive) up to but not including index 3, and columns from index 1 (inclusive) to the end.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Extract;\n\ntable.with(Extract::segment(1..3, 1..));\n\nassert_table!(\n    table,\n    \"+----------------+------+\"\\\n    \"| Dennis Ritchie | 1972 |\"\\\n    \"+----------------+------+\"\\\n    \"| Rob Pike       | 2009 |\"\\\n    \"+----------------+------+\"\n)\n```\n\n----------------------------------------\n\nTITLE: Format Fields with Format String and Args - tabled Rust\nDESCRIPTION: This example showcases how to format a field using a format string and arguments from the struct with the `#[tabled(format = \"{}/{} cc/kg\", self.cc, self.weight)]` attribute.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_57\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\npub struct Motorcycle {\n    weight: usize,\n    #[tabled(format = \"{}/{} cc/kg\", self.cc, self.weight)]\n    cc: usize,\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Span - Output Text\nDESCRIPTION: The code outputs a formatted table to the console.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_44\n\nLANGUAGE: text\nCODE:\n```\n+---+---+---+\n| 0 |   | 2 |\n+---+   +---+\n| A | 1 | C |\n+---+   +---+\n| D |   | F |\n+---+---+---+\n```\n\n----------------------------------------\n\nTITLE: Table Split - Output Text\nDESCRIPTION: This example displays the output of the split table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_46\n\nLANGUAGE: text\nCODE:\n```\n┌───────────────┬────────────────┐\n│ name          │ designed_by    │\n├───────────────┼────────────────┤\n│ C             │ Dennis Ritchie │\n├───────────────┼────────────────┤\n│ Go            │ Rob Pike       │\n├───────────────┼────────────────┤\n│ Rust          │ Graydon Hoare  │\n├───────────────┼────────────────┤\n│ invented_year │                │\n├───────────────┼────────────────┤\n│ 1972          │                │\n├───────────────┼────────────────┤\n│ 2009          │                │\n├───────────────┼────────────────┤\n│ 2010          │                │\n└───────────────┴────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Convert JSON to Table (Collapsed)\nDESCRIPTION: This Rust code converts a JSON value to a collapsed table.  Collapsing combines nested fields for a more compact view. It uses `serde_json` to create a JSON value, then converts it to a collapsed table string using `.collapse()` and prints the result.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/json_to_table/README.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse json_to_table::json_to_table;\nuse serde_json::json;\n\nfn main() {\n    let value = json!(\n        [\n            {\n                \"name\": \"Aleix Melon\",\n                \"id\": \"E00245\",\n                \"role\": [\"Dev\", \"DBA\"],\n                \"age\": 23,\n                \"doj\": \"11-12-2019\",\n                \"married\": false,\n                \"address\": {\n                    \"street\": \"32, Laham St.\",\n                    \"city\": \"Innsbruck\",\n                    \"country\": \"Austria\"\n                    },\n                \"referred-by\": \"E0012\"\n            },\n        ]\n    );\n\n    let table = json_to_table(&value).collapse().to_string();\n\n    println!(\"{}\", table)\n}\n```\n\n----------------------------------------\n\nTITLE: Tabled Shadow Example\nDESCRIPTION: This example illustrates how to add shadows to a table built with ASCII characters, including box drawing characters.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n┌──┬┐ ╔══╦╗ ╓──┬╖ ╒═╤╕\n│  ││ ║  ║║ ║  │║ │ ││\n├──┼┤ ╠══╬╣ ╟──┼╢ ╞═╪╡\n└──┴┘ ╚══╩╝ ╙──┴╜ ╘═╧╛\n┌──────────────────┐  \n│  ╔═══╗ Some text │▒▒\n│  ╚═╦═╝ In the box│▒▒\n╞═╤══╩══╤══════════╡▒▒\n│ ├──┬──┤          │▒▒\n│ └──┴──┘          │▒▒\n└──────────────────┘▒▒\n ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n```\n\n----------------------------------------\n\nTITLE: Tabled Alphabet Example\nDESCRIPTION: This is a simple example that displays the alphabet in a table format using ASCII characters, creating a visual representation of the alphabet.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n| a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |\n+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n```\n\n----------------------------------------\n\nTITLE: Vertical Span - tabled Rust\nDESCRIPTION: This example demonstrates how to create a table and apply a vertical span to a specific cell using the `Span::row()` method. The code uses the `tabled` crate to generate a table with specified data and vertical alignment.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_43\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    settings::{Alignment, Span},\n    Table,\n};\n\nlet data = vec![[\"A\", \"B\", \"C\"], [\"D\", \"E\", \"F\"]];\n\nlet mut table = Table::new(data);\ntable\n    .modify((0, 1), Span::row(3))\n    .with(Alignment::center_vertical());\n\nprintln!(\"{}\", table);\n```\n\n----------------------------------------\n\nTITLE: Truncate Content Width with tabled in Rust\nDESCRIPTION: This example shows how to truncate the content of cells to a specified width using `Width::truncate`. It truncates the first row's content to 10 characters and adds a suffix to the content of subsequent rows.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Width, object::Rows};\n\n// Truncating content to 10 chars in case it's bigger than that\n// in a first row.\ntable.modify(Rows::first(), Width::truncate(10));\n\n// Truncating content to 7 chars and puts a suffix '...' after it\n// in all rows except a first.\ntable.modify(Rows::new(1..), Width::truncate(10).suffix(\"...\"));\n```\n\n----------------------------------------\n\nTITLE: Tabled Rotate Example\nDESCRIPTION: This example demonstrates how to display data in a rotated table format using ASCII characters, showing links and distribution names.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n+--------------+------------------------+---------------------------+--------------------------+\n| link         | https://getfedora.org/ | https://www.opensuse.org/ | https://endeavouros.com/ |\n+--------------+------------------------+---------------------------+--------------------------+\n| distribution | Fedora                 | OpenSUSE                  | Endeavouros              |\n+--------------+------------------------+---------------------------+--------------------------+\n| id           | 0                      | 2                         | 3                        |\n+--------------+------------------------+---------------------------+--------------------------+\n```\n\n----------------------------------------\n\nTITLE: Emoji Table Example - Text\nDESCRIPTION: Example of a table with emojis.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_87\n\nLANGUAGE: text\nCODE:\n```\n+---------+----------------+---------------+\n| name    | designed_by    | invented_year |\n+---------+----------------+---------------+\n| C 💕    | Dennis Ritchie | 1972          |\n+---------+----------------+---------------+\n| Rust 👍 | Graydon Hoare  | 2010          |\n+---------+----------------+---------------+\n| Go 🧋   | Rob Pike       | 2009          |\n+---------+----------------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Wrap Table Width with tabled in Rust\nDESCRIPTION: This example demonstrates how to limit table's width using `Width::wrap`. It sets a table width of 22 and the content will be wrapped within each cell.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Width;\n\n// Tries to set table width to 22, in case it's bigger than that.\ntable.with(Width::wrap(22));\n```\n\n----------------------------------------\n\nTITLE: Override Column Name - tabled Rust\nDESCRIPTION: This example demonstrates how to override the column name for a field using the `#[tabled(rename = \"\")]` attribute. The code defines a `Person` struct with overridden column names for `first_name` and `last_name` fields.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_49\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\nstruct Person {\n    #[tabled(rename = \"Name\")]\n    first_name: &'static str,\n    #[tabled(rename = \"Surname\")]\n    last_name: &'static str,\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Table in Rust\nDESCRIPTION: This example demonstrates how to build a table by iterating over the lines of a file in Rust.  It reads the file line by line, adding the line number and status to each row, and then builds a table using the `IterTable` struct from the `tabled` crate. It showcases the use of `Style::ascii_rounded` for styling the table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\n.----------------------------------------------------------------------------------------.\n| 0  | ok | //! The example can be run by this command                                   |\n| 1  | ok | //! `cargo run --example iter_table`                                         |\n| 2  | ok |                                                                              |\n| 3  | ok | use std::io::BufRead;                                                        |\n| 4  | ok |                                                                              |\n| 5  | ok | use tabled::{settings::Style, tables::IterTable};               |\n| 6  | ok |                                                                              |\n| 7  | ok | fn main() {                                                                  |\n| 8  | ok |     let path = file!();                                                      |\n| 9  | ok |     let file = std::fs::File::open(path).unwrap();                           |\n| 10 | ok |     let reader = std::io::BufReader::new(file);                              |\n| 11 | ok |     let iterator = reader.lines().enumerate().map(|(i, line)| match line {   |\n| 12 | ok |         Ok(line) => [i.to_string(), String::from(\"ok\"), line],               |\n| 13 | ok |         Err(err) => [i.to_string(), String::from(\"error\"), err.to_string()], |\n| 14 | ok |     });                                                                      |\n| 15 | ok |                                                                              |\n| 16 | ok |     let table = IterTable::new(iterator).with(Style::ascii_rounded());       |\n| 17 | ok |                                                                              |\n| 18 | ok |     table.build(std::io::stdout()).unwrap();                                 |\n| 19 | ok |     println!()                                                               |\n| 20 | ok | }                                                                            |\n'----------------------------------------------------------------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Customizing Style with Horizontal & Vertical Lines in Rust\nDESCRIPTION: This code snippet demonstrates how to customize a table's style by removing vertical and horizontal lines while adding a single horizontal line. It uses the `Style`, `HorizontalLine`, and `VerticalLine` structures from the `tabled::settings` module. The modifications are done at compile time.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Style, HorizontalLine, VerticalLine;\n\nlet style = Style::modern()\n    .horizontals([(1, HorizontalLine::inherit(Style::modern()).horizontal('═'))])\n    .verticals([(1, VerticalLine::inherit(Style::modern()))])\n    .remove_horizontal()\n    .remove_vertical();\n```\n\n----------------------------------------\n\nTITLE: Colorize content Rust\nDESCRIPTION: This code snippet demonstrates how to colorize content of `Table` after it being created using `Colorization`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{\n    formatting::Justification, object::Rows, style::Style, themes::Colorization, Color,\n};\n\ntable.with(Style::empty());\ntable.with(Colorization::rows([\n    Color::BG_WHITE | Color::FG_BLACK,\n    Color::BG_BLACK | Color::FG_WHITE,\n]));\ntable.modify(Rows::first(), Color::BG_BLUE);\ntable.modify(Rows::first(), Justification::colored(' ', Color::BG_BLUE));\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Table with Papergrid in Rust\nDESCRIPTION: This snippet shows how to use the papergrid library to create a table with custom borders, cell spanning, alignment, and padding. It demonstrates the use of `SpannedConfig`, `VecRecords`, and `PeekableGrid` to build and render the table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/papergrid/README.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse papergrid::{    colors::NoColors,\n    config::{\n        spanned::SpannedConfig, AlignmentHorizontal, AlignmentVertical, Borders, Entity, Indent,\n        Sides,\n    },\n    dimension::{spanned::SpannedGridDimension, Estimate},\n    grid::peekable::PeekableGrid,\n    records::vec_records::{CellInfo, VecRecords},\n};\n\nfn main() {\n    let mut cfg = SpannedConfig::default();\n    cfg.set_borders(Borders {\n        top: Some('-'),\n        top_left: Some('+'),\n        top_right: Some('+'),\n        top_intersection: Some('+'),\n        bottom: Some('-'),\n        bottom_left: Some('+'),\n        bottom_right: Some('+'),\n        bottom_intersection: Some('+'),\n        horizontal: Some('-'),\n        left_intersection: Some('+'),\n        right_intersection: Some('+'),\n        vertical: Some('|'),\n        left: Some('|'),\n        right: Some('|'),\n        intersection: Some('+'),\n    });\n    cfg.set_column_span((1, 1), 3);\n    cfg.set_row_span((0, 0), 2);\n    cfg.set_alignment_horizontal((1, 0).into(), AlignmentHorizontal::Center);\n    cfg.set_alignment_vertical(Entity::Global, AlignmentVertical::Center);\n    cfg.set_padding(\n        (0, 0).into(),\n        Sides::new(\n            Indent::spaced(4),\n            Indent::spaced(4),\n            Indent::spaced(1),\n            Indent::spaced(1),\n        ),\n    );\n\n    let data = [\n        [\"Papergrid\", \"is a library\", \"for print tables\", \"!\"],\n        [\"\", \"Just like this\", \"\", \"\"],\n    ];\n\n    let data = data\n        .iter()\n        .map(|row| row.iter().map(CellInfo::new).collect())\n        .collect();\n\n    let records = VecRecords::new(data);\n\n    let mut dims = SpannedGridDimension::default();\n    dims.estimate(&records, &cfg);\n\n    let grid = PeekableGrid::new(&records, &cfg, &dims, NoColors).to_string();\n\n    println!(\"{grid}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Concatenated Table\nDESCRIPTION: This snippet displays a table with concatenated data. It presents weather-related information such as temperature, wind speed, latitude, and longitude, showing how data can be combined or transformed before being displayed in a table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n temperature_c  wind_ms  latitude  longitude \n 16             3000     111.111   333.333   \n -20            300      5.111     7282.1    \n 40             100      0         0         \n                         0         0         \n```\n\n----------------------------------------\n\nTITLE: Displaying a Table with Custom Style\nDESCRIPTION: This snippet displays a table with a custom style applied. It showcases different text editors and their details, demonstrating how to customize the table's appearance to match a specific design.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n┌────────────────────┬─────────────────────────────────┐\n│ name               │ first_release  developer        │\n├────────────────────┼─────────────────────────────────┤\n│ Sublime Text 3     │ 2008           Sublime HQ       │\n│ Visual Studio Code │ 2015           Microsoft        │\n│ Notepad++          │ 2003           Don Ho           │\n│ GNU Emacs          │ 1984           Richard Stallman │\n│ Neovim             │ 2015           Vim community    │\n└────────────────────┴─────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Nested Table Example\nDESCRIPTION: This example demonstrates creating a nested table structure. It represents an 'Animal' type with an inner structure for 'Duck', showcasing inheritance and composition in table format.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n+-----------------------------------------------+\n|            +---------------------+            |\n|            |       Animal        |            |\n|            +---------------------+            |\n|            | +-----------------+ |            |\n|            | | +age: Int       | |            |\n|            | | +gender: String | |            |\n|            | +-----------------+ |            |\n|            | +-----------------+ |            |\n|            | | +isMammal()     | |            |\n|            | | +mate()         | |            |\n|            | +-----------------+ |            |\n|            +---------------------+            |\n|                       ▲                       |\n|                       |                       |\n|                       |                       |\n|     +-----------------------------------+     |\n|     |               Duck                |     |\n|     +-----------------------------------+     |\n|     | +-------------------------------+ |     |\n|     | | +beakColor: String = \"yellow\" | |     |\n|     | +-------------------------------+ |     |\n|     | +-------------------------------+ |     |\n|     | | +swim()                       | |     |\n|     | | +quack()                      | |     |\n|     | +-------------------------------+ |     |\n|     +-----------------------------------+     |\n+-----------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Panel Example\nDESCRIPTION: This example showcases a table rendered as a panel with a custom border and header. It represents Tabled releases with information about version, published date, activity status, and major features.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n┌───┬────────────────────────────────────────────────────────────────────┬───┐\n│ S │                          Tabled Releases                           │ S │\n│ o │                                                                    │ o │\n│ m │                                                                    │ m │\n│ e │                                                                    │ e │\n│   ├─────────┬────────────────┬───────────┬─────────────────────────────┤   │\n│ t │ version │ published_date │ is_active │        major_feature        │ t │\n│ e │         │                │           │                             │ e │\n│ x ├─────────┼────────────────┼───────────┼─────────────────────────────┤ x │\n│ t │  0.2.1  │   2021-06-23   │   true    │ #[header(inline)] attribute │ t │\n│   │         │                │           │                             │   │\n│ g ├─────────┼────────────────┼───────────┼─────────────────────────────┤ g │\n│ o │  0.2.0  │   2021-06-19   │   false   │         API changes         │ o │\n│ e │         │                │           │                             │ e │\n│ s ├─────────┼────────────────┼───────────┼─────────────────────────────┤ s │\n│   │  0.1.4  │   2021-06-07   │   false   │   display_with attribute    │   │\n│ h │         │                │           │                             │ h │\n│ e ├─────────┴────────────────┴───────────┴─────────────────────────────┤ e │\n│ r │                               N - 3                                │ r │\n│ e │                                                                    │ e │\n└───┴────────────────────────────────────────────────────────────────────┴───┘\n```\n\n----------------------------------------\n\nTITLE: Shadow Effect with tabled in Rust\nDESCRIPTION: This example demonstrates how to add a shadow effect to the table using the `Shadow` structure.  It creates a table with a modern style and adds a shadow with a size of 1.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{settings::{Style, Shadow}, Table};\nuse tabled::assert::assert_table;\n\nlet table = Table::new(vec![[\"A\", \"B\", \"C\"]])\n    .with(Style::modern())\n    .with(Shadow::new(1))\n    .to_string();\n\nassert_table!(\n    table,\n    \"┌───┬───┬───┐ ▒\" \\\n    \"│ 0 │ 1 │ 2 │▒\" \\\n    \"├───┼───┼───┤▒\" \\\n    \"│ A │ B │ C │▒\" \\\n    \"└───┴───┴───┘▒\" \\\n    \" ▒▒▒▒▒▒▒▒▒▒▒▒▒\"\n);\n```\n\n----------------------------------------\n\nTITLE: Formatting Options Example in Rust\nDESCRIPTION: This example demonstrates how to use formatting options (`std::fmt::*`) to apply certain settings to the table. The example uses centered alignment and padding of 30 characters.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_70\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Table;\n\nlet numbers = [(1, 2, 3), (1, 2, 3)];\nlet table = Table::new(numbers);\n\nprintln!(\"{:.^30}\", table);\n```\n\n----------------------------------------\n\nTITLE: Border Span Correction with tabled Rust\nDESCRIPTION: This example demonstrates how to use `BorderCorrection::span()` to fix style issues when using the `Span` feature in the `tabled` crate. It adds a header panel and applies border correction to maintain consistent styling across spanned cells.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Panel, themes::BorderCorrection};\n\ntable.with(Panel::header(\"LISTING\"));\ntable.with(BorderCorrection::span());\n\nassert_table!(\n    table,\n    \"+---------------------------------------+\" \\\n    \"| LISTING                               |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"| name | designed_by    | invented_year |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"| C    | Dennis Ritchie | 1972          |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"| Go   | Rob Pike       | 2009          |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"| Rust | Graydon Hoare  | 2010          |\" \\\n    \"+------+----------------+---------------+\" \\\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Header, Footer, and Panel to a Tabled Table\nDESCRIPTION: This example demonstrates how to add a header, a footer, and a vertical panel to a table using the `Panel` modifier in the `tabled` crate. It sets the header text, calculates the number of rows for the footer text, and adds a vertical panel with a fixed width.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Panel;\n\nlet count_elements = table.count_rows();\n\ntable\n    .with(Panel::vertical(0, \"A vertical panel\").width(1))\n    .with(Panel::header(\"Tabled Name\"))\n    .with(Panel::footer(format!(\"{} elements\", count_elements)));\n```\n\n----------------------------------------\n\nTITLE: Tabled Span Example\nDESCRIPTION: This example demonstrates how to span table columns, creating various layouts with cells that occupy different numbers of columns.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n┌───────────────────────────────────────────────────────────────────────────────┐\n│ span all 5 columns                                                            │\n├───────────────────────────────────────────────────────────────┬───────────────┤\n│ span 4 columns                                                │ just 1 column │\n├───────────────────────────────┬───────────────┬───────────────┼───────────────┤\n│ span 2 columns                │ just 1 column │               │               │\n├───────────────┬───────────────┴───────────────┤ just 1 column │               │\n│ just 1 column │ span 2 columns                │ span          │ just 1 column │\n│               │ span                          │ 3             │ span          │\n├───────────────┤ 2                             │ columns       │ 4             │\n│ just 1 column │ columns                       │               │ columns       │\n├───────────────┼───────────────┬───────────────┼───────────────┤               │\n│ just 1 column │ just 1 column │ just 1 column │ just 1 column │               │\n└───────────────┴───────────────┴───────────────┴───────────────┴───────────────┘\n```\n\n----------------------------------------\n\nTITLE: Rotating a Tabled Table\nDESCRIPTION: This example shows how to rotate a table to the left using the `Rotate::Left` modifier in the `tabled` crate. The rotated table is then asserted against a predefined string representation using `assert_table!`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Rotate;\n\ntable.with(Rotate::Left);\n\nassert_table!(\n    table,\n    \"+---------------+----------------+----------+---------------+\"\\\n    \"| invented_year | 1972           | 2009     | 2010          |\"\\\n    \"+---------------+----------------+----------+---------------+\"\\\n    \"| designed_by   | Dennis Ritchie | Rob Pike | Graydon Hoare |\"\\\n    \"+---------------+----------------+----------+---------------+\"\\\n    \"| name          | C              | Go       | Rust          |\"\\\n    \"+---------------+----------------+----------+---------------+\"\n);\n```\n\n----------------------------------------\n\nTITLE: Alignment using tabled in Rust\nDESCRIPTION: This snippet shows how to use `Alignment` to adjust the horizontal and vertical alignment of cells within a table. It modifies the first column to be right-aligned and the last column to be center-aligned.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{object::Columns, Alignment};\n\ntable.modify(Columns::first(), Alignment::right());\ntable.modify(Columns::last(), Alignment::center());\n\nassert_table!(\n    table,\n    \"+------+----------------+---------------+\" \\\n    \"| name | designed_by    | invented_year |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"|    C | Dennis Ritchie |     1972      |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"|   Go | Rob Pike       |     2009      |\" \\\n    \"+------+----------------+---------------+\" \\\n    \"| Rust | Graydon Hoare  |     2010      |\" \\\n    \"+------+----------------+---------------+\" \\\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying a Simple Table\nDESCRIPTION: This snippet shows a basic table with data about Linux distributions. It includes columns for name, base distribution, active status, and coolness factor. The table is rendered with default styling.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n| name    | based_on | is_active | is_cool |\n|---------|----------|-----------|---------|\n| Manjaro | Arch     | true      | true    |\n| Arch    |          | true      | true    |\n| Debian  |          | true      | true    |\n```\n\n----------------------------------------\n\nTITLE: Tabled Table Width Example\nDESCRIPTION: This example shows how to control the width of the table and handle long content by truncating or wrapping it. It demonstrates how the library handles different text lengths and encodings, including unicode characters.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n| 0                | 1         |\n|------------------|-----------|\n| Hello World!!!   | 3.3.22.2  |\n| Guten Morgen     | 1.1.1.1   |\n| Добры вечар      | 127.0.0.1 |\n| Bonjour le monde |           |\n| Ciao mondo       |           |\n\n| 0          | 1   |\n|------------|-----|\n| Hello W... | ... |\n| Guten M... | ... |\n| Добры в... | ... |\n| Bonjour... |     |\n| Ciao mondo |     |\n\n| 0     | 1   |\n|-------|-----|\n| Hello | ... |\n|  W... |     |\n| Guten | ... |\n|  M... |     |\n| Добры | ... |\n|  в... |     |\n| Bonjo |     |\n| ur... |     |\n| Ciao  |     |\n| mondo |     |\n\n| 0             | 1          |\n|---------------|------------|\n| Hello         | ...        |\n|  W...         |            |\n| Guten         | ...        |\n|  M...         |            |\n| Добры         | ...        |\n|  в...         |            |\n| Bonjo         |            |\n| ur...         |            |\n| Ciao          |            |\n| mondo         |            |\n```\n\n----------------------------------------\n\nTITLE: Formatting Settings Example\nDESCRIPTION: This example displays how formatting settings, particularly spacing, affect the table's appearance when rendering string slices containing complex data structures like JSON.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n╭───────────────────╮\n│       &str        │\n├───────────────────┤\n│                   │\n│ [                 │\n│     \"foo\",        │\n│     {             │\n│         \"bar\": 1, │\n│         \"baz\": [  │\n│             2,    │\n│             3     │\n│         ]         │\n│     }             │\n│ ]                 │\n╰───────────────────╯\n\n╭───────────────────╮\n│       &str        │\n├───────────────────┤\n│                   │\n│         [         │\n│        \"foo\",     │\n│           {       │\n│         \"bar\": 1, │\n│         \"baz\": [  │\n│              2,   │\n│               3   │\n│             ]     │\n│           }       │\n│         ]         │\n╰───────────────────╯\n\n╭───────────────────╮\n│       &str        │\n├───────────────────┤\n│     [             │\n│     \"foo\",        │\n│     {             │\n│     \"bar\": 1,     │\n│     \"baz\": [      │\n│     2,            │\n│     3             │\n│     ]             │\n│     }             │\n│     ]             │\n│                   │\n╰───────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Increase Minimum Width with tabled in Rust\nDESCRIPTION: This example demonstrates how to set a minimum width for table cells using `Width::increase`. It sets the minimum width for all rows except the header row to 10 characters.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Width, object::Rows};\n\n// increase the space used by cells in all rows except the header to be at least 10\ntable.modify(Rows::new(1..), Width::increase(10));\n```\n\n----------------------------------------\n\nTITLE: Inline Struct - tabled Rust\nDESCRIPTION: This example demonstrates how to inline an internal struct that implements `Tabled` using the `#[tabled(inline)]` attribute.  Fields from the inlined struct will be added as columns in the main table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_58\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\nstruct Person {\n    id: u8,\n    name: &'static str,\n    #[tabled(inline)]\n    ed: Education,\n}\n\n#[derive(Tabled)]\nstruct Education {\n    uni: &'static str,\n    graduated: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Table with Extracted Columns\nDESCRIPTION: This snippet demonstrates extracting specific columns from a larger table to create a smaller table. It shows a table of albums, extracts columns like name and released date to create a smaller table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n┌───────────────┬───────────────────────────┬──────────────────┬────────────────────┐\n│    artist     │           name            │     released     │ level_of_greatness │\n├───────────────┼───────────────────────────┼──────────────────┼────────────────────┤\n│ Pink Floyd    │ The Dark Side of the Moon │ 01 March 1973    │ Unparalleled       │\n├───────────────┼───────────────────────────┼──────────────────┼────────────────────┤\n│ Fleetwood Mac │ Rumours                   │ 04 February 1977 │ Outstanding        │\n├───────────────┼───────────────────────────┼──────────────────┼────────────────────┤\n│ Led Zeppelin  │ Led Zeppelin IV           │ 08 November 1971 │ Supreme            │\n└───────────────┴───────────────────────────┴──────────────────┴────────────────────┘\n\n┼───────────────────────────┼──────────────────┼──────────────┤\n│ The Dark Side of the Moon │ 01 March 1973    │ Unparalleled │\n┼───────────────────────────┼──────────────────┼──────────────┤\n│ Rumours                   │ 04 February 1977 │ Outstanding  │\n┼───────────────────────────┼──────────────────┼──────────────┤\n\n┌───────────────────────────┬──────────────────┬───────────────┐\n│ The Dark Side of the Moon │ 01 March 1973    │ Unparalleled  │\n├───────────────────────────┼──────────────────┼───────────────┤\n│ Rumours                   │ 04 February 1977 │ +Outstanding+ │\n└───────────────────────────┴──────────────────┴───────────────┘\n```\n\n----------------------------------------\n\nTITLE: Matrix Printing Example\nDESCRIPTION: This example creates a table representing a multiplication table from 0 to 10. It displays the results in a grid-like format using the 'tabled' crate's formatting capabilities.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n┌────┬────┬────┬────┬────┬────┬────┬────┬────┬─────┐\n│ 0  │ 1  │ 2  │ 3  │ 4  │ 5  │ 6  │ 7  │ 8  │  9  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 1  │ 2  │ 3  │ 4  │ 5  │ 6  │ 7  │ 8  │ 9  │ 10  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 2  │ 4  │ 6  │ 8  │ 10 │ 12 │ 14 │ 16 │ 18 │ 20  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 3  │ 6  │ 9  │ 12 │ 15 │ 18 │ 21 │ 24 │ 27 │ 30  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 4  │ 8  │ 12 │ 16 │ 20 │ 24 │ 28 │ 32 │ 36 │ 40  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 5  │ 10 │ 15 │ 20 │ 25 │ 30 │ 35 │ 40 │ 45 │ 50  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 6  │ 12 │ 18 │ 24 │ 30 │ 36 │ 42 │ 48 │ 54 │ 60  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 7  │ 14 │ 21 │ 28 │ 35 │ 42 │ 49 │ 56 │ 63 │ 70  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 8  │ 16 │ 24 │ 32 │ 40 │ 48 │ 56 │ 64 │ 72 │ 80  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 9  │ 18 │ 27 │ 36 │ 45 │ 54 │ 63 │ 72 │ 81 │ 90  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 10 │ 20 │ 30 │ 40 │ 50 │ 60 │ 70 │ 80 │ 90 │ 100 │\n└────┴────┴────┴────┴────┴────┴────┴────┴────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Adding Text to Borders using LineText in Rust\nDESCRIPTION: This code snippet demonstrates how to add text to the borders of a table using the `LineText` struct. It adds text to the first horizontal line and the first vertical line. Requires: `tabled::settings`\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{\n    object::{Columns, Rows},\n    style::LineText, Alignment,\n};\n\ntable.with(LineText::new(\"Languages\", Rows::first()).offset(2));\ntable.with(LineText::new(\"name\", Columns::first()).align(Alignment::center_vertical()));\n```\n\n----------------------------------------\n\nTITLE: Concatenating Tables Vertically in Tabled\nDESCRIPTION: This example demonstrates how to concatenate two tables vertically using the `Concat::vertical` modifier in the `tabled` crate. It clones the original table and concatenates it to itself vertically.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_39\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Concat;\n\ntable.with(Concat::vertical(table.clone()));\n```\n\n----------------------------------------\n\nTITLE: Table::kv Output Example in Text\nDESCRIPTION: This is the expected output of the Table::kv example, showcasing the table's appearance with key-value pairs.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_69\n\nLANGUAGE: text\nCODE:\n```\n┌─────────────┬────────────────┐\n│ name        │ C              │\n│ designed_by │ Dennis Ritchie │\n│ year        │ 1972           │\n│ name        │ Go             │\n│ designed_by │ Rob Pike       │\n│ year        │ 2009           │\n│ name        │ Rust           │\n│ designed_by │ Graydon Hoare  │\n│ year        │ 2010           │\n└─────────────┴────────────────┘\n```\n\n----------------------------------------\n\nTITLE: CompactTable Output Example in Text\nDESCRIPTION: This is the expected output of the CompactTable example. It showcases the table's appearance with manually defined column widths.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_63\n\nLANGUAGE: text\nCODE:\n```\n┌──────────┬────────────────────┬────────────────────┐\n│ lang     │ inventor           │ published year     │\n│ Rust     │ Graydon Hoare      │ 2010               │\n│ Go       │ Rob Pike           │ 2009               │\n└──────────┴────────────────────┴────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Truncate Table Width with tabled in Rust\nDESCRIPTION: This example shows how to truncate the entire table width to a specific size using `Width::truncate`. It sets the table width to 22 characters, truncating any content that exceeds this limit.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Width;\n\n// Tries to set table width to 22, in case it's bigger than that.\ntable.with(Width::truncate(22));\n```\n\n----------------------------------------\n\nTITLE: Tabled Height Limit Modifier\nDESCRIPTION: This code snippet demonstrates how to limit the height of a table or specific rows within the table using the `Height::limit` modifier in the `tabled` crate. The code shows how to apply it to the entire table and how to target specific rows, such as the last row, using `Rows::last()`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_32\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Height, object::Rows};\n\n// decrease height of a table to 10 in case it was bigger than that.\ntable.with(Height::limit(10));\n\n// decrease height of cells in the last row on a table to 10 in case if some of them has it bigger than that.\ntable.modify(Rows::last(), Height::limit(10));\n```\n\n----------------------------------------\n\nTITLE: Static Table Generation with 'static_table' - TOML\nDESCRIPTION: Shows how to include the `static_table` crate for generating tables at compile time. This snippet demonstrates the crate declaration in `Cargo.toml`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_82\n\nLANGUAGE: toml\nCODE:\n```\nstatic_table = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Nested Table Example 3\nDESCRIPTION: This example illustrates a nested table used to display contributors and issuers of a project, including links to their profiles.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n*************************************************\n*                   Thank You                   *\n*************************************************\n| +------------+------------------------------+ |\n| |               Contributors                | |\n| +------------+------------------------------+ |\n| |   author   |           profile            | |\n| +------------+------------------------------+ |\n| |   kozmod   |   https:/github.com/kozmod   | |\n| +------------+------------------------------+ |\n| | IsaacCloos | https:/github.com/IsaacCloos | |\n| +------------+------------------------------+ |\n|  +-----------+-----------------------------+  |\n|  |                 Issuers                 |  |\n|  +-----------+-----------------------------+  |\n|  |  author   |           profile           |  |\n|  +-----------+-----------------------------+  |\n|  | aharpervc | https:/github.com/aharpervc |  |\n|  +-----------+-----------------------------+  |\n+-----------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Tabled Height Increase Modifier\nDESCRIPTION: This code snippet demonstrates how to increase the height of a table or specific rows within the table using the `Height::increase` modifier in the `tabled` crate. The code shows how to apply it to the entire table and how to target specific rows, such as the last row, using `Rows::last()`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Height, object::Rows};\n\n// increase height of a table in case it was lower than 10.\ntable.with(Height::increase(10));\n\n// increase height of cells in the last row on a table in case if some of them has it lower than 10.\ntable.modify(Rows::last(), Height::increase(10));\n```\n\n----------------------------------------\n\nTITLE: Hide Column - tabled Rust\nDESCRIPTION: This example demonstrates how to hide a column using the `#[tabled(skip)]` attribute. Hidden fields will not be present in the generated table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_51\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::Tabled;\n\n#[derive(Tabled)]\nstruct Person {\n   id: u8,\n   #[tabled(skip)]\n   number: &'static str,\n   name: &'static str,\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Character for Borders with LineChar in Rust\nDESCRIPTION: This code snippet demonstrates how to use a custom character for borders using the `LineChar` struct. It customizes the horizontal and vertical lines of the table. Requires: `tabled::settings`\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{\n    object::{Columns, Object, Rows},\n    style::LineChar,\n    Style,\n};\n\ntable.with(Style::modern());\ntable.modify(\n    Rows::first(),\n    (LineChar::horizontal('┴', 1), LineChar::horizontal('┴', -1)),\n);\ntable.modify(\n    Columns::new(..).not(Columns::first()),\n    LineChar::vertical('┼', 0),\n);\n```\n\n----------------------------------------\n\nTITLE: Tabled Compact Table Example\nDESCRIPTION: This example demonstrates the creation of a compact table, showcasing a minimal table structure with data related to Linux distributions.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n| Debian |     | true |\n|-------|-----|-----|\n| Arch  |     | true |\n| Manjaro | Arch | true |\n```\n\n----------------------------------------\n\nTITLE: Layout modification Rust\nDESCRIPTION: This code snippet demonstrates how to change layout of `Table` after it being created using `Layout`.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{\n    formatting::Justification, object::Rows, style::Style, themes::Colorization, Color,\n};\n\ntable.with(Style::empty());\ntable.with(Colorization::rows([\n    Color::BG_WHITE | Color::FG_BLACK,\n    Color::BG_BLACK | Color::FG_WHITE,\n]));\ntable.modify(Rows::first(), Color::BG_BLUE);\ntable.modify(Rows::first(), Justification::colored(' ', Color::BG_BLUE));\n```\n\n----------------------------------------\n\nTITLE: Tabled Compact Table 2 Example\nDESCRIPTION: This example demonstrates the creation of another compact table format, showing data about Linux distributions along with IP addresses and boolean values.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n Debian  | 1.1.1.1   | true \n---------+-----------+------\n Arch    | 127.1.1.1 | true \n Manjaro | Arch      | true \n```\n\n----------------------------------------\n\nTITLE: Highlighting Regions in a Tabled Table\nDESCRIPTION: This example demonstrates how to highlight a specific region of a table by changing its borders using the `Highlight` modifier in the `tabled` crate. It applies a filled border to the intersection of the first row and the third column and a specific cell at (1,1).\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_40\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    settings::{\n        object::{Columns, Object, Rows},\n        Border, Highlight, Style,\n    },\n    Table,\n};\n\nlet data = vec![[\"A\", \"B\", \"C\"], [\"D\", \"E\", \"F\"]];\n\nlet mut table = Table::new(data);\ntable.with(Style::modern());\ntable.with(\n    Highlight::new(Rows::first().and(Columns::single(2).and((1, 1))))\n        .border(Border::filled('*')),\n);\n\nprintln!(\"{}\", table);\n```\n\n----------------------------------------\n\nTITLE: Add json_to_table dependency in Cargo.toml\nDESCRIPTION: This snippet demonstrates how to add the `json_to_table` library as a dependency in your `Cargo.toml` file. This is a necessary step to use the library in your Rust project.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/json_to_table/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\njson_to_table = \"0.6\"\n```\n\n----------------------------------------\n\nTITLE: Table Margin with tabled in Rust\nDESCRIPTION: This example shows how to add margins around the table using the `Margin` structure. It defines different indent sizes and fill characters for the top, bottom, left, and right margins.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::Margin;\n\ntable.with(Margin::new(3, 4, 1, 2).fill('>', '<', 'v', '^'));\n```\n\n----------------------------------------\n\nTITLE: Tabled Margin Example\nDESCRIPTION: This example visualizes table margins, demonstrating the spacing around the content within a table rendered using ASCII characters. It uses symbols such as <, >, ^, and v to represent different margin areas.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nvvvvvvvvvvvvvvvvvv\nvvvvvvvvvvvvvvvvvv\n<<<<=== === ===>>>\n<<<< 0   1   2 >>>\n<<<<=== === ===>>>\n<<<< A   B   C >>>\n<<<< D   E   F >>>\n<<<< G   H   I >>>\n<<<<=== === ===>>>\n^^^^^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Margin Color with tabled in Rust\nDESCRIPTION: This example shows how to set colors for the margin around the table using `MarginColor`. It defines different background colors for the top, bottom, left, and right margins.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Margin, Color, MarginColor};\n\ntable.with(Margin::new(3, 4, 1, 2).fill('>', '<', 'v', '^'));\ntable.with(MarginColor::new(\n    Color::BG_BRIGHT_BLUE,\n    Color::BG_BRIGHT_CYAN,\n    Color::BG_BLUE,\n    Color::BG_RED,\n));\n```\n\n----------------------------------------\n\nTITLE: Result of in-memory CSV conversion - text\nDESCRIPTION: This shows the resulting table printed to console from running the in-memory example.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/csv_to_table/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n+---+-------+--------+----------------------------------------------------------+\n| 0 | INDIR |        | int sys_syscall(int number, ...)                         |\n+---+-------+--------+----------------------------------------------------------+\n| 1 | STD   |        | void sys_exit(int rval)                                  |\n+---+-------+--------+----------------------------------------------------------+\n| 2 | STD   |        | int sys_fork(void)                                       |\n+---+-------+--------+----------------------------------------------------------+\n| 3 | STD   | NOLOCK | ssize_t sys_read(int fd, void *buf, size_t nbyte)        |\n+---+-------+--------+----------------------------------------------------------+\n| 4 | STD   | NOLOCK | ssize_t sys_write(int fd, const void *buf, size_t nbyte) |\n+---+-------+--------+----------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Table Split - tabled Rust\nDESCRIPTION: This example shows how to split a table into a new shape by redistributing cells from a specific column using `Split::column()`. The code utilizes the `tabled` crate to modify and style the table.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_45\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Style, split::Split};\n\ntable.with(Style::modern());\ntable.with(Split::column(2).concat());\n```\n\n----------------------------------------\n\nTITLE: Collapsed Table Output\nDESCRIPTION: This is the output of the previous collapsed table code snippet.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/ron_to_table/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n╔═══════════╦══════════╦═══════════════════╗\n║ entities  ║ material ║ metal             ║\n║           ╠══════════╬═══════════════════╣\n║           ║ name     ║ hero              ║\n║           ╠══════════╬═══════════════════╣\n║           ║ material ║ plastic           ║\n║           ╠══════════╬═══════════════════╣\n║           ║ name     ║ monster           ║\n╠═══════════╬═════════╦╩═════════════╦═════╣\n║ materials ║ metal   ║ reflectivity ║ 1   ║\n║           ╠═════════╬══════════════╬═════╣\n║           ║ plastic ║ reflectivity ║ 0.5 ║\n╚═══════════╩═════════╩══════════════╩═════╝\n```\n\n----------------------------------------\n\nTITLE: Table Formatting Example\nDESCRIPTION: This example demonstrates basic table formatting with string values. It shows a table with three columns containing identifiers and descriptions.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n 0                                           | 1                              | 2                       \n---------------------------------------------+--------------------------------+-------------------------\n 8ae4e8957caeaa467acbce963701e227af00a1c7... | bypass open-source transmitter | index neural panel      \n 48c76de71bd685486d97dc8f4f05aa6fcc0c3f86... | program online alarm           | copy bluetooth card     \n 6ffc2a2796229fc7bf59471ad907f58b897005d0... | CSV                            | reboot mobile capacitor \n```\n\n----------------------------------------\n\nTITLE: Resulting Collapsed Table\nDESCRIPTION: This is the table that is produced by running the rust program in the first code snippet, showing the collapsed style.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/toml_to_table/README.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n╔═══════════╦══════════╦═══════════════════╗\n║ entities  ║ material ║ metal             ║\n║           ╠══════════╬═══════════════════╣\n║           ║ name     ║ hero              ║\n║           ╠══════════╬═══════════════════╣\n║           ║ material ║ plastic           ║\n║           ╠══════════╬═══════════════════╣\n║           ║ name     ║ monster           ║\n╠═══════════╬═════════╦╩═════════════╦═════╣\n║ materials ║ metal   ║ reflectivity ║ 1   ║\n║           ╠═════════╬══════════════╬═════╣\n║           ║ plastic ║ reflectivity ║ 0.5 ║\n╚═══════════╩═════════╩══════════════╩═════╝\n```\n\n----------------------------------------\n\nTITLE: Highlighting Example\nDESCRIPTION: This example demonstrates highlighting specific cells within a table. It shows a 3x3 table where certain cells are emphasized using asterisks.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n*************\n* 0 │ 1 │ 2 *\n*****───*****\n│ A * B * C │\n├───*───*───┤\n│ D * E * F │\n├───*───*───┤\n│ G * H * I │\n└───*****───┘\n```\n\n----------------------------------------\n\nTITLE: Embedded Table Output\nDESCRIPTION: This is the output of the previous embedded table code snippet.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/ron_to_table/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n+-------------+--------------------------------------------+\n|  entities   | +----------------------------+             |\n|             | | +------------+---------+   |             |\n|             | | |  material  |  metal  |   |             |\n|             | | +------------+---------+   |             |\n|             | | |  name      |  hero   |   |             |\n|             | | +------------+---------+   |             |\n|             | +----------------------------+             |\n|             | | +------------+-----------+ |             |\n|             | | |  material  |  plastic  | |             |\n|             | | +------------+-----------+ |             |\n|             | | |  name      |  monster  | |             |\n|             | | +------------+-----------+ |             |\n|             | +----------------------------+             |\n+-------------+--------------------------------------------+\n|  materials  | +-----------+----------------------------+ |\n|             | |  metal    | +----------------+-----+   | |\n|             | |           | |  reflectivity  |  1  |   | |\n|             | |           | +----------------+-----+   | |\n|             | +-----------+----------------------------+ |\n|             | |  plastic  | +----------------+-------+ | |\n|             | |           | |  reflectivity  |  0.5  | | |\n|             | |           | +----------------+-------+ | |\n|             | +-----------+----------------------------+ |\n+-------------+--------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Tabled Height Example\nDESCRIPTION: This example demonstrates how to control the height of a table by increasing and decreasing it, showcasing the impact on table layout and content display.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nTable\n\n| &str        | i32 |\n|-------------|-----|\n| Multi       | 123 |\n| line        |     |\n| string      |     |\n| Single line | 234 |\n\nTable increase height to 10\n\n| &str        | i32 |\n|             |     |\n|             |     |\n|-------------|-----|\n| Multi       | 123 |\n| line        |     |\n| string      |     |\n|             |     |\n| Single line | 234 |\n|             |\n\nTable decrease height to 4\n\n| &str        | i32 |\n|-------------|-----|\n| Multi       | 123 |\n| Single line | 234 |\nTable decrease height to 0\n\n|--|--|\n```\n\n----------------------------------------\n\nTITLE: Resulting Embedded Table\nDESCRIPTION: This is the table that is produced by running the rust program in the first code snippet, showing the embedded style.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/toml_to_table/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n+-----------+----------------------------------------+\n| entities  | +--------------------------+           |\n|           | | +----------+---------+   |           |\n|           | | | material |  metal  |   |           |\n|           | | +----------+---------+   |           |\n|           | | | name     |  hero   |   |           |\n|           | | +----------+---------+   |           |\n|           | +--------------------------+           |\n|           | | +----------+-----------+ |           |\n|           | | | material |  plastic  | |           |\n|           | | +----------+-----------+ |           |\n|           | | | name     |  monster  | |           |\n|           | | +----------+-----------+ |           |\n|           | +--------------------------+           |\n+-----------+----------------------------------------+\n| materials | +---------+--------------------------+ |\n|           | | metal   | +--------------+-----+   | |\n|           | |         | | reflectivity |  1  |   | |\n|           | |         | +--------------+-----+   | |\n|           | +---------+--------------------------+ |\n|           | | plastic | +--------------+-------+ | |\n|           | |         | | reflectivity |  0.5  | | |\n|           | |         | +--------------+-------+ | |\n|           | +---------+--------------------------+ |\n+-----------+----------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Static Table Generation with 'static_table' - Rust\nDESCRIPTION: Demonstrates the use of the `static_table` crate to define a table at compile time.  Requires the `static_table` crate. The code defines a constant string `TABLE` containing the table generated with the `static_table!` macro, then asserts that its value matches the expected output.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_83\n\nLANGUAGE: rust\nCODE:\n```\nconst TABLE: &str = static_table::static_table!(\n    [\n        [\"x\", \"y\", \"op\", \"result\"],\n        [\"1\", '2', '*', '2'],\n        [\"2\", '2', '*', '4']\n    ],\n    THEME = \"ROUNDED\",\n);\n\nassert_eq!(\n    TABLE,\n    \"╭───┬───┬────┬────────╮\\n\\\n     │ x │ y │ op │ result │\\n\\\n     ├───┼───┼────┼────────┤\\n\\\n     │ 1 │ 2 │ *  │ 2      │\\n\\\n     │ 2 │ 2 │ *  │ 4      │\\n\\\n     ╰───┴───┴────┴────────╯\",\n);\n```\n\n----------------------------------------\n\nTITLE: Rendered Table Output (Orientation)\nDESCRIPTION: This text represents the rendered table output with `Orientation::Row` setting. It shows the table structure when the objects are laid out in rows.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/json_to_table/README.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n+----------------------------------------------------+\n| +------+---------------+-------------+-----------+ |\n| | age  | name          | referred-by | role      | |\n| +------+---------------+-------------+-----------+ |\n| |  23  |  Aleix Melon  |  E0012      | +-------+ | |\n| |      |               |             | |  Dev  | | |\n| |      |               |             | +-------+ | |\n| |      |               |             | |  DBA  | | |\n| |      |               |             | +-------+ | |\n| +------+---------------+-------------+-----------+ |\n+----------------------------------------------------+\n| +------+---------------+-------------+-----------+ |\n| | age  | name          | referred-by | role      | |\n| +------+---------------+-------------+-----------+ |\n| |  24  |  Aleix Melon  |  E0012      | +-------+ | |\n| |      |               |             | |  DBA  | | |\n| |      |               |             | +-------+ | |\n| +------+---------------+-------------+-----------+ |\n+----------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: ANSI Feature in Cargo.toml\nDESCRIPTION: This shows how to add the `ansi` feature to your `Cargo.toml` file to enable correct handling of colored input (with ANSI sequences) in the tabled library.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_72\n\nLANGUAGE: toml\nCODE:\n```\ntabled = { version = \"*\", features = [\"ansi\"] }\n```\n\n----------------------------------------\n\nTITLE: Table Transpose Example - Text\nDESCRIPTION: Example of a transposed table created using the code shown above.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_80\n\nLANGUAGE: text\nCODE:\n```\n╭────────┬─────────────┬───────────╮\n│        │ English     │ Deutsch   │\n├────────┼─────────────┼───────────┤\n│ Index  │ 1           │ 2         │\n│ Status │ In progress │ Not ready │\n╰────────┴─────────────┴───────────╯\n```\n\n----------------------------------------\n\nTITLE: ExtendedTable Output Example in Text\nDESCRIPTION: This is the expected output of the ExtendedTable example, showcasing the table's appearance with records and field names.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_67\n\nLANGUAGE: text\nCODE:\n```\n-[ RECORD 0 ]------\nname      | Manjaro\nis_active | true\nis_cool   | true\n-[ RECORD 1 ]------\nname      | Debian\nis_active | true\nis_cool   | true\n-[ RECORD 2 ]------\nname      | Debian\nis_active | true\nis_cool   | true\n```\n\n----------------------------------------\n\nTITLE: PoolTable Output Example in Text\nDESCRIPTION: This is the expected output of the PoolTable example. It shows the table's appearance with dots as borders and centered alignment.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_65\n\nLANGUAGE: text\nCODE:\n```\n...................................\n: Naruto Uzumaki : Kakashi Hatake :\n:................:................:\n:  Minato Namikaze   :  Jiraiya   :\n:....................:............:\n:  Orochimaru   :  Itachi Uchiha  :\n:...............:.................:\n```\n\n----------------------------------------\n\nTITLE: Displaying a Table with Border Text\nDESCRIPTION: This snippet displays a table with custom text around the borders. The table contains numbers, and custom border text is used to label the beginning and end of the rows and columns.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n Numbers ─┬────┬────┬────┐\n│ 0  │ 1  │ 2  │ 3  │ 4  │\n More numbers ─┼────┼────┤\n│ 5  │ 6  │ 7  │ 8  │ 9  │\n│ 10 │ 11 │ 12 │ 13 │ 14 │\n end. ────┴────┴────┴────┘\n```\n\n----------------------------------------\n\nTITLE: IterTable Output Example in Text\nDESCRIPTION: This is the expected output of the IterTable example. It shows the structure of the table with column headers and data rows.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_61\n\nLANGUAGE: text\nCODE:\n```\n┌──────┬───────────────┬────────────────┐\n│ lang │ inventor      │ published year │\n│ Rust │ Graydon Hoare │ 2010           │\n│ Go   │ Rob Pike      │ 2009           │\n│ C    │ Dennis Ritchi │ 1972           │\n└──────┴───────────────┴────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Tabled Table Width 2 Example\nDESCRIPTION: This example shows how to use Tabled crate to display data with headers and content. The column width is adjusted based on the content length. It focuses on a changelog-like structured data.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n.----------------------------------------.\n| usize | &str                           |\n| 0     | # Changelog                    |\n| 1     | All notable changes to this    |\n|       | projectwill be documented in   |\n|       | thisfile.                      |\n| 2     | The format is based on [Keep a |\n|       | Changelog](https://keepachange |\n|       | log.com/en/1.0.0/),            |\n| 3     | and this project adheres to    |\n|       | [SemanticVersioning](https://s |\n|       | emver.org/spec/v2.0.0.html).   |\n| 4     | ## Unreleased                  |\n'-------+--------------------------------'\n```\n\n----------------------------------------\n\nTITLE: Horizontal Span - Output text\nDESCRIPTION: The code outputs a formatted table to the console.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_42\n\nLANGUAGE: text\nCODE:\n```\n+---+---+---+\n|     0     |\n+---+---+---+\n|   A   | C |\n+---+---+---+\n| D | E | F |\n+---+---+---+\n```\n\n----------------------------------------\n\nTITLE: Table Duplicate - tabled Rust\nDESCRIPTION: This example shows how to duplicate a given set of cells. The code duplicates the last row and inserts it at the first row.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_47\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Dup, object::Rows};\n\ntable.with(Dup::new(Rows::last(), Rows::first()));\n\n```\n\n----------------------------------------\n\nTITLE: Table::kv Example in Rust\nDESCRIPTION: This example demonstrates the usage of `Table::kv`, which creates a Key-Value pair layout for a type.  The example uses a `Language` struct and creates a table representing key-value pairs of the struct's fields and values.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_68\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{Table, Tabled, settings::Style};\n    \n#[derive(Tabled)]\nstruct Language<'a> {\n    name: &'a str,\n    designed_by: &'a str,\n    year: usize,\n}\n\nlet languages = vec![\n    Language { name: \"C\", designed_by: \"Dennis Ritchie\", year: 1972 },\n    Language { name: \"Go\", designed_by: \"Rob Pike\", year: 2009 },\n    Language { name: \"Rust\", designed_by: \"Graydon Hoare\", year: 2010 },\n];\n    \nlet mut table = Table::kv(languages);\ntable.with(Style::modern().remove_horizontal());\n\nprintln!(\"{table}\");\n```\n\n----------------------------------------\n\nTITLE: Formatting Options Output Example in Text\nDESCRIPTION: This is the expected output of the formatting options example, showcasing the table's appearance with the specified formatting.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_71\n\nLANGUAGE: text\nCODE:\n```\n.....+-----+-----+-----+......\n.....| i32 | i32 | i32 |......\n.....+-----+-----+-----+......\n.....|  1  |  2  |  3  |......\n.....+-----+-----+-----+......\n.....|  1  |  2  |  3  |......\n.....+-----+-----+-----+......\n```\n\n----------------------------------------\n\nTITLE: Emoji Usage in Table - Rust\nDESCRIPTION: Shows an example of using emojis in a tabled structure.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_86\n\nLANGUAGE: rust\nCODE:\n```\nlet languages = vec![\n    Language {\n        name: \"C 💕\",\n        designed_by: \"Dennis Ritchie\",\n        invented_year: 1972,\n    },\n    Language {\n        name: \"Rust 👍\",\n        designed_by: \"Graydon Hoare\",\n        invented_year: 2010,\n    },\n    Language {\n        name: \"Go 🧋\",\n        designed_by: \"Rob Pike\",\n        invented_year: 2009,\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Set Width Priority with tabled in Rust\nDESCRIPTION: This example shows how to set priority while adjusting width of the table by setting `Priority::min()` on the width config.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_28\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Width, peaker::Priority};\n\ntable.with(Width::truncate(10).priority(Priority::min()));\n```\n\n----------------------------------------\n\nTITLE: Tabled Matrix Example\nDESCRIPTION: This example creates a multiplication table as a matrix using ASCII characters, showing the results of multiplying numbers from 0 to 10.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/tabled/examples/README.md#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n┌────┬────┬────┬────┬────┬────┬────┬────┬────┬─────┐\n│ 0  │ 1  │ 2  │ 3  │ 4  │ 5  │ 6  │ 7  │ 8  │ 9   │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 1  │ 2  │ 3  │ 4  │ 5  │ 6  │ 7  │ 8  │ 9  │ 10  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 2  │ 4  │ 6  │ 8  │ 10 │ 12 │ 14 │ 16 │ 18 │ 20  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 3  │ 6  │ 9  │ 12 │ 15 │ 18 │ 21 │ 24 │ 27 │ 30  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 4  │ 8  │ 12 │ 16 │ 20 │ 24 │ 28 │ 32 │ 36 │ 40  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 5  │ 10 │ 15 │ 20 │ 25 │ 30 │ 35 │ 40 │ 45 │ 50  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 6  │ 12 │ 18 │ 24 │ 30 │ 36 │ 42 │ 48 │ 54 │ 60  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 7  │ 14 │ 21 │ 28 │ 35 │ 42 │ 49 │ 56 │ 63 │ 70  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 8  │ 16 │ 24 │ 32 │ 40 │ 48 │ 56 │ 64 │ 72 │ 80  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 9  │ 18 │ 27 │ 36 │ 45 │ 54 │ 63 │ 72 │ 81 │ 90  │\n├────┼────┼────┼────┼────┼────┼────┼────┼────┼─────┤\n│ 10 │ 20 │ 30 │ 40 │ 50 │ 60 │ 70 │ 80 │ 90 │ 100 │\n└────┴────┴────┴────┴────┴────┴────┴────┴────┴─────┘\n```\n\n----------------------------------------\n\nTITLE: Wrap Content Width with tabled in Rust\nDESCRIPTION: This example shows how to wrap the content of cells to a specified width using `Width::wrap`. It wraps the first row's content to 10 characters and applies word-keeping to subsequent rows.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::settings::{Width, object::Rows};\n\n// Wrap content to 10 chars in case it's bigger than that\n// in a first row.\ntable.modify(Rows::first().with(Width::wrap(10)));\n\n// Use a strategy where we try not to keep words split (where possible).\ntable.modify(Rows::new(1..).with(Width::wrap(10).keep_words()));\n```\n\n----------------------------------------\n\nTITLE: Tuple Combination Example in Rust\nDESCRIPTION: This example demonstrates how to combine objects which implement `Tabled` by means of tuples, resulting in combined columns. It showcases the table with combined data from a `Developer` struct and a `Domain` enum.\nSOURCE: https://github.com/zhiburt/tabled/blob/master/README.md#_snippet_74\n\nLANGUAGE: rust\nCODE:\n```\nuse tabled::{\n    settings::{Alignment, Style},\n    assert::assert_table,\n    Table, Tabled,\n};\n\n#[derive(Tabled)]\nstruct Developer(#[tabled(rename = \"name\")] &'static str);\n\n#[derive(Tabled)]\nenum Domain {\n    Security,\n    Embedded,\n    Frontend,\n    Unknown,\n}\n\nlet data = vec![\n    (Developer(\"Terri Kshlerin\"), Domain::Embedded),\n    (Developer(\"Catalina Dicki\"), Domain::Security),\n    (Developer(\"Jennie Schmeler\"), Domain::Frontend),\n    (Developer(\"Maxim Zhiburt\"), Domain::Unknown),\n];\n\nlet table = Table::new(data)\n    .with(Style::psql())\n    .with(Alignment::center())\n    .to_string();\n\nassert_table!(\n    table,\n    \"      name       | Security | Embedded | Frontend | Unknown \"\n    \"-----------------+----------+----------+----------+---------\"\n    \" Terri Kshlerin  |          |    +     |          |         \"\n    \" Catalina Dicki  |    +     |          |          |         \"\n    \" Jennie Schmeler |          |          |    +     |         \"\n    \"  Maxim Zhiburt  |          |          |          |    +    \"\n);\n```"
  }
]