[
  {
    "owner": "brunolevy",
    "repo": "graphitethree",
    "content": "TITLE: ExprTK Scalar Function Wrapper Implementation in C++\nDESCRIPTION: Implementation of the ScalarFunction wrapper class for ExprTK. It handles compiling mathematical expressions with variables x, y, z and evaluating them at specific 3D points. The implementation includes error handling for invalid expressions.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n// Implementation: algo/functions.cpp\n#include \"OGF/femb/algo/functions.h\"\n\nnamespace femb {\n    ScalarFunction::ScalarFunction(const std::string& expr){\n        symbol_table_.add_variable(\"x\", pt_[0]);\n        symbol_table_.add_variable(\"y\", pt_[1]);\n        symbol_table_.add_variable(\"z\", pt_[2]);\n        symbol_table_.add_constants();\n        expr_.register_symbol_table(symbol_table_);\n\n        if(!parser_.compile(expr,expr_) ) {\n            std::cout << \"[exprtk parsing] Wrong expression: \\n \"\n                << parser_.error() << std::endl;;\n            return;\n        }\n    }\n\n    double ScalarFunction::operator()(const double point[3]){\n        pt_[0] = point[0];\n        pt_[1] = point[1];\n        pt_[2] = point[2];\n        return expr_.value();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ExprTK Scalar Function Wrapper Header Definition in C++\nDESCRIPTION: Header definition for a wrapper class around ExprTK library to evaluate scalar mathematical expressions. The class allows defining functions of three variables (x,y,z) specified as strings and evaluating them at 3D points.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n// Header: algo/functions.h\n#pragma once\n#include \"OGF/femb/third_party/exprtk.hpp\"\n#include <string>\n\nnamespace femb {\n    class ScalarFunction {\n        public:\n            ScalarFunction(const std::string& expr);\n            double operator()(const double point[3]);\n\n        protected:\n            exprtk::expression<double>      expr_;\n            exprtk::parser<double>          parser_;\n            exprtk::symbol_table<double>    symbol_table_;\n            double                          pt_[3];\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Gompy Python Module\nDESCRIPTION: Complete CMake configuration that sets up the build environment for the Gompy Python module. It includes Python dependency checking, path configuration for Geogram and Graphite, and library linking setup. The build creates a shared library that integrates with both Python and the Graphite framework.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/gompy/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.30)\n\ngraphite_find_python()\n\nif(${GRAPHITE_FOUND_PYTHON})\n\n   message(STATUS \"Found Python headers and libs, building gompy\")\n   message(STATUS \"   PYTHON_INCLUDE_DIRS=${PYTHON_INCLUDE_DIRS}\")\n   message(STATUS \"   PYTHON_LIBRARIES   =${PYTHON_LIBRARIES}\")\n\n   project(gompy)\n\n   if(\"${GEOGRAM_SOURCE_DIR}\" STREQUAL \"\")\n      if(EXISTS ${CMAKE_SOURCE_DIR}/../../../../Vorpaline/trunk/)\n         set(\n            GEOGRAM_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/../../../../Vorpaline/trunk\"\n            CACHE PATH \"full path to the Geogram (or Vorpaline) installation\"\n         )\n       else()\n         set(\n            GEOGRAM_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/../../../geogram/\"\n            CACHE PATH \"full path to the Geogram (or Vorpaline) installation\"\n         )\n       endif()\n   endif()\n\n   if(\"${GRAPHITE_SOURCE_DIR}\" STREQUAL \"\")\n     set(\n       GRAPHITE_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/../../../GraphiteThree/\"\n       CACHE PATH \"full path to the Graphite installation\"\n     )\n   endif()\n\n   include(${GRAPHITE_SOURCE_DIR}/cmake/graphite.cmake)\n\n   if(EXISTS ${CMAKE_SOURCE_DIR}/CMakeOptions.txt)\n     message(STATUS \"Using options file: ${CMAKE_SOURCE_DIR}/CMakeOptions.txt\")\n     include(${CMAKE_SOURCE_DIR}/CMakeOptions.txt)\n   endif()\n\n   include_directories(${CMAKE_SOURCE_DIR}/../../)\n   include_directories(\"${PYTHON_INCLUDE_DIRS}\")\n\n   set(\n      CMAKE_RUNTIME_OUTPUT_DIRECTORY\n      ${GRAPHITE_SOURCE_DIR}/${RELATIVE_BIN_OUTPUT_DIR}\n   )\n\n   set(\n      CMAKE_LIBRARY_OUTPUT_DIRECTORY\n      ${GRAPHITE_SOURCE_DIR}/${RELATIVE_LIB_OUTPUT_DIR}\n   )\n\n   aux_source_directories(SOURCES \"Source Files\\\\common\" common)\n   aux_source_directories(SOURCES \"Source Files\\\\interpreter\" interpreter)\n   gomgen(gompy)\n\n   add_library(gompy ${SOURCES})\n\n   target_link_libraries(gompy scene_graph gom_gom gom)\n   target_link_libraries(gompy renderer basic)\n   target_link_libraries(gompy geogram_gfx geogram)\n   target_link_libraries(gompy ${PYTHON_LIBRARIES})\n\n   set_target_properties(\n      gompy PROPERTIES\n      FOLDER \"GRAPHITE/Plugins\"\n   )\n\nelse()\n   message(STATUS \"Did not find Python headers or libs, not building gompy\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Scene Graph Library in CMake\nDESCRIPTION: This CMake script configures the scene_graph library by including OpenGL dependencies, collecting source files from multiple directories, generating necessary code with gomgen, building the library, and setting target properties. It organizes source files into logical categories and links against the gom_gom dependency.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/scene_graph/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#include(${GEOGRAM_SOURCE_DIR}/cmake/opengl.cmake)\n\naux_source_directories(SOURCES \"Source Files\"                      .)\naux_source_directories(SOURCES \"Source Files\\\\common\"              common)\naux_source_directories(SOURCES \"Source Files\\\\types\"               types)\naux_source_directories(SOURCES \"Source Files\\\\skin\"                skin)\naux_source_directories(SOURCES \"Source Files\\\\grob\"                grob)\naux_source_directories(SOURCES \"Source Files\\\\commands\"            commands)\naux_source_directories(SOURCES \"Source Files\\\\NL\"                  NL)\n\ngomgen(scene_graph)\nadd_library(scene_graph ${SOURCES})\ntarget_link_libraries(scene_graph gom_gom)\n\nset_target_properties(\n    scene_graph PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directories and Building the Devel Library in CMake\nDESCRIPTION: This CMake script organizes source files from multiple directories, generates additional code with a custom 'gomgen' command, builds a library named 'devel', links against the 'scene_graph' library, and sets project organization properties.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/devel/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"                      .)\naux_source_directories(SOURCES \"Source Files\\\\common\"              common)\naux_source_directories(SOURCES \"Source Files\\\\types\"               types)\naux_source_directories(SOURCES \"Source Files\\\\commands\"            commands)\n\ngomgen(devel)\nadd_library(devel ${SOURCES})\n\ntarget_link_libraries(devel scene_graph)\n\nset_target_properties(\n    devel PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building scene_graph_gfx Library in CMake\nDESCRIPTION: This CMake script builds the scene_graph_gfx library by including OpenGL configuration, collecting source files from multiple directories, generating code with gomgen, and linking with dependencies. It organizes the library within the GRAPHITE folder structure.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/scene_graph_gfx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#include(${GEOGRAM_SOURCE_DIR}/cmake/opengl.cmake)\n\naux_source_directories(SOURCES \"Source Files\"                      .)\naux_source_directories(SOURCES \"Source Files\\\\common\"              common)\naux_source_directories(SOURCES \"Source Files\\\\shaders\"             shaders)\naux_source_directories(SOURCES \"Source Files\\\\tools\"               tools)\naux_source_directories(SOURCES \"Source Files\\\\full_screen_effects\" full_screen_effects)\naux_source_directories(SOURCES \"Source Files\\\\transforms\"          transforms)\naux_source_directories(SOURCES \"Source Files\\\\symbols\"             symbols)\n\ngomgen(scene_graph_gfx)\nadd_library(scene_graph_gfx ${SOURCES})\ntarget_link_libraries(scene_graph_gfx scene_graph renderer)\n\nset_target_properties(\n    scene_graph_gfx PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Mesh Library with Dependencies in CMake\nDESCRIPTION: Creates the mesh library target, generates code using gomgen, links dependencies including scene_graph and conditionally vorpalib if GEOGRAM_WITH_VORPALINE is enabled, and sets properties to organize the target in the GRAPHITE folder.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/mesh/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ngomgen(mesh)\nadd_library(mesh ${SOURCES})\ntarget_link_libraries(mesh scene_graph)\n\nif(GEOGRAM_WITH_VORPALINE)\n  target_link_libraries(mesh vorpalib)\nendif()\n\nset_target_properties(\n    mesh PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Tetrahedral Meshes for FEM Simulation in C++\nDESCRIPTION: This code handles mesh preprocessing for FEM simulation, converting point clouds to closed surfaces, tetrahedralizing triangulated surfaces using TetGen, and ensuring mesh validity with proper connectivity. It performs cleaning operations to guarantee mesh consistency for finite element calculations.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n/* ------ MESH PREPROCESSING ------ */\n/* Closed surface from point cloud if no cells/facets */\nif (M.cells.nb() == 0 && M.facets.nb() == 0 && M.vertices.nb() > 0) {\n    Logger::out(\"fem\") << \"building a closed surface from point cloud\" << std::endl;\n    double radius = 5.;    /* reconstruction parameter */\n    double R = bbox_diagonal(M);\n    mesh_repair(M, GEO::MESH_REPAIR_COLOCATE, 1e-6*R);\n    radius *= 0.01 * R;\n    Co3Ne_reconstruct(M, radius);\n\n    /* Smooth remeshing of the reconstructed surface */\n    unsigned int nb_points = M.vertices.nb() * 2;\n    unsigned int Lloyd_iter = 5;\n    unsigned int Newton_iter = 30;\n    unsigned int Newton_m = 7;\n    Mesh M_tmp(3); /* because output of remeshing is a different mesh*/\n    remesh_smooth(M, M_tmp, nb_points, 0, Lloyd_iter, Newton_iter, Newton_m);\n    M.copy(M_tmp); /* result of remeshing is copied in initial mesh */\n}\n\n/* Try to mesh the volume with TetGen */\nif (M.cells.nb() == 0 && M.facets.nb() > 0) {\n    /* Triangulate surface mesh (useful if input is quad or polygonal mesh) */\n    if (!M.facets.are_simplices()) {\n        M.facets.triangulate();\n    }\n\n    /* Colocate vertices (useful if input is STL mesh) */\n    Logger::out(\"fem\") << \"colocating vertices of triangulated mesh\" << std::endl;\n    double R = bbox_diagonal(M);\n    mesh_repair(M, GEO::MESH_REPAIR_COLOCATE, 1e-6*R);\n\n    /* TetGen call */\n    Logger::out(\"fem\") << \"tetrahedralize interior of triangulated mesh\" << std::endl;\n    mesh_tetrahedralize(M, false, true, 0.7);\n}\n\n/* Verify input */\nif (!(M.cells.nb() > 0 && M.cells.are_simplices())) {\n    Logger::out(\"fem\") << \"invalid input mesh\" << std::endl;\n    return false;\n}\n\n/* Ensure right adjacencies and matching between volume (cells) \n * and boundary (facets).\n * Useful if input is tet mesh without or with bad boundaries */\nM.cells.connect();\nM.facets.clear();\nM.cells.compute_borders(); /* add facets to M on the boundary */\nM.vertices.remove_isolated(); /* avoid hanging vertices in the mesh */\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the Renderer Library Target\nDESCRIPTION: Defines the renderer library using the collected source files and links it with the required dependencies including 'basic', 'geogram_gfx', and OpenGL libraries.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/renderer/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(renderer ${SOURCES})\ntarget_link_libraries(renderer basic geogram_gfx ${OPENGL_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Basic Library in CMake\nDESCRIPTION: Creates the 'basic' library using the collected source files and links it with the 'geogram' library. Also handles platform-specific library linking for Unix and Windows.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/basic/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(basic ${SOURCES})\ntarget_link_libraries(basic geogram)\n\nif(UNIX)\n  target_link_libraries(basic pthread dl m)\nelseif(WIN32)\n  target_link_libraries(basic psapi)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Computing 3D Delaunay Triangulation\nDESCRIPTION: Basic usage of compute_delaunay to generate a 3D Delaunay triangulation of a point set, producing a tetrahedral mesh with boundary corresponding to the convex hull.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncompute_delaunay pointsfile <outputfile>\n```\n\n----------------------------------------\n\nTITLE: Computing Optimal Transport Maps in 3D\nDESCRIPTION: Command for using compute_OTM to calculate a semi-discrete optimal transport map between two tetrahedral meshes, generating a morphing that can be visualized.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncompute_OTM meshfile1 meshfile2\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring GOM Library in CMake\nDESCRIPTION: Creates the GOM library from collected source files, links it with the 'basic' library dependency, and sets project properties to organize it within the GRAPHITE solution folder structure.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/gom/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(gom ${SOURCES})\ntarget_link_libraries(gom basic)\n\nset_target_properties(\n    gom PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building GOM Library in CMake\nDESCRIPTION: Defines the build process for the GOM (Graphite Object Model) component. It collects source files from the main and common directories, generates GOM-specific code, creates a library target, links dependencies, and sets organizational properties for IDE integration.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/gom_gom/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"              .)\naux_source_directories(SOURCES \"Source Files\\\\common\"      common)\n\ngomgen(gom)\nadd_library(gom_gom ${SOURCES})\ntarget_link_libraries(gom_gom gom)\n\nset_target_properties(\n    gom_gom PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: FEM Command Implementation in C++\nDESCRIPTION: Implementation of the FEM command that creates a new mesh and executes the finite element simulation with the specified parameters.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvoid MeshGrobFemCommands::fem(\n        const std::string& dirichlet_region,\n        const std::string& dirichlet_value,\n        const std::string& neumann_region,\n        const std::string& neumann_value,\n        const std::string& sourceterm_value,\n        const std::string& diffusion_value,\n        const std::string& solution_name) {\n\n    /* Copy current mesh to a new one for the FEM simulation */\n    std::string Mo_name = mesh_grob()->name() + \"_fem\";\n    MeshGrob* Mo = MeshGrob::find_or_create(scene_graph(), Mo_name);\n    Mo->copy(*mesh_grob());\n\n    femb::fem_simulation(*Mo, dirichlet_region, dirichlet_value,\n            neumann_region, neumann_value, sourceterm_value,\n            diffusion_value, solution_name);\n\n    Mo->update();\n}\n```\n\n----------------------------------------\n\nTITLE: Building Voxel Library with Dependencies in CMake\nDESCRIPTION: Creates the voxel library by running a code generator (gomgen), creating the library from collected source files, and linking it with the mesh and scene_graph libraries. This establishes the build sequence and dependency chain for the voxel library.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/voxel/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ngomgen(voxel)\nadd_library(voxel ${SOURCES})\ntarget_link_libraries(voxel mesh scene_graph)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the mesh_gfx Library with CMake\nDESCRIPTION: This CMake script collects source files from various directories, generates additional files with gomgen, builds the mesh_gfx library, and sets up its dependencies and organization properties. The library sources are organized into folders for common functionality, shaders, tools, and commands.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/mesh_gfx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"              .)\naux_source_directories(SOURCES \"Source Files\\\\common\"      common)\naux_source_directories(SOURCES \"Source Files\\\\shaders\"     shaders)\naux_source_directories(SOURCES \"Source Files\\\\tools\"       tools)\naux_source_directories(SOURCES \"Source Files\\\\commands\"    commands)\n\ngomgen(mesh_gfx)\nadd_library(mesh_gfx ${SOURCES})\ntarget_link_libraries(mesh_gfx mesh scene_graph_gfx)\n\nset_target_properties(\n    mesh_gfx PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining FEM Command Class in C++\nDESCRIPTION: C++ class definition for the FEM commands in Graphite, including parameter specifications for boundary conditions, source terms, and diffusion values.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ngom_class femb_API MeshGrobFemCommands : public MeshGrobCommands {\npublic:\n    MeshGrobFemCommands() ;\n    virtual ~MeshGrobFemCommands() ;\n\ngom_slots:\n    /**\n     * \\menu /FEM\n     */\n    bool fem(\n            const std::string& dirichlet_region = \"1\",\n            const std::string& dirichlet_value  = \"0\",\n            const std::string& neumann_region   = \"0\",\n            const std::string& neumann_value    = \"0\",\n            const std::string& sourceterm_value = \"1\",\n            const std::string& diffusion_value  = \"1\",\n            const std::string& solution_name    = \"u\"\n            );\n} ;\n```\n\n----------------------------------------\n\nTITLE: Generating library and linking dependencies\nDESCRIPTION: Creates the WarpDrive library, links it with required dependencies, and sets folder properties.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/WarpDrive/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ngomgen(WarpDrive)\n\nadd_library(WarpDrive ${SOURCES})\n\ntarget_link_libraries(WarpDrive mesh_gfx)\n\nif(GEOGRAM_WITH_VORPALINE)\n  target_link_libraries(WarpDrive vorpalib)\nendif()\n\ntarget_link_libraries(WarpDrive exploragram geogram_gfx geogram)\n\nset_target_properties(\n   WarpDrive PROPERTIES\n   FOLDER \"GRAPHITE/Plugins\"\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Basic Library in CMake\nDESCRIPTION: Uses aux_source_directories to recursively add source files from multiple directories to the SOURCES variable. This collects all the necessary source files for the 'basic' library.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/basic/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"                .)\naux_source_directories(SOURCES \"Source Files\\\\common\"   common)\naux_source_directories(SOURCES \"Source Files\\\\os\"       os)\naux_source_directories(SOURCES \"Source Files\\\\modules\"  modules)\naux_source_directories(SOURCES \"Source Files\\\\math\"     math)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directories for GOM Library in CMake\nDESCRIPTION: Collects source files from multiple directories into a SOURCES variable using aux_source_directories. This organizes source code by functionality areas including common, types, services, reflection, codegen, interpreter, and lua modules.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/gom/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"              .)\naux_source_directories(SOURCES \"Source Files\\\\common\"      common)\naux_source_directories(SOURCES \"Source Files\\\\types\"       types)\naux_source_directories(SOURCES \"Source Files\\\\services\"    services)\naux_source_directories(SOURCES \"Source Files\\\\reflection\"  reflection)\naux_source_directories(SOURCES \"Source Files\\\\codegen\"     codegen)\naux_source_directories(SOURCES \"Source Files\\\\interpreter\" interpreter)\naux_source_directories(SOURCES \"Source Files\\\\lua\"         lua)\n```\n\n----------------------------------------\n\nTITLE: Building and Linking the Luagrob Library in CMake\nDESCRIPTION: Generates necessary code using gomgen utility, creates the luagrob library from the collected source files, and links it against scene_graph and scene_graph_gfx libraries.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/luagrob/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ngomgen(luagrob)\nadd_library(luagrob ${SOURCES})\ntarget_link_libraries(luagrob scene_graph scene_graph_gfx)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration\nDESCRIPTION: Sets up basic CMake project configuration including minimum version requirement and project name. Includes a custom cmake configuration file.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.30)\n\nproject(Graphite)\ninclude(${CMAKE_SOURCE_DIR}/cmake/graphite.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directories for the Luagrob Library in CMake\nDESCRIPTION: Collects source files from various directories including the root directory, common, grob, commands, shaders, and tools folders into the SOURCES variable. The paths are structured for a Windows environment using backslashes.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/luagrob/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"              .)\naux_source_directories(SOURCES \"Source Files\\\\common\"      common)\naux_source_directories(SOURCES \"Source Files\\\\grob\"        grob)\naux_source_directories(SOURCES \"Source Files\\\\commands\"    commands)\naux_source_directories(SOURCES \"Source Files\\\\shaders\"     shaders)\naux_source_directories(SOURCES \"Source Files\\\\tools\"       tools)\n```\n\n----------------------------------------\n\nTITLE: Building Skin ImGui Library with CMake\nDESCRIPTION: Creates the skin_imgui library using the collected source files. It first runs gomgen to generate required resources, then creates the library and links it with scene_graph_gfx and glfw dependencies.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/skin_imgui/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ngomgen(skin_imgui)\nadd_library(skin_imgui ${SOURCES})\ntarget_link_libraries(skin_imgui scene_graph_gfx glfw)\n```\n\n----------------------------------------\n\nTITLE: Installing Geogram on Linux/MacOS\nDESCRIPTION: Commands to install Geogram libraries, header files, and binaries in /usr/local/Geogram on Linux or MacOS systems.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Skin ImGui Library in CMake\nDESCRIPTION: Uses aux_source_directories to gather source files from multiple directories including the root, common, types, and widgets folders. These files will be used to build the skin_imgui library.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/skin_imgui/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"              .)\naux_source_directories(SOURCES \"Source Files\\\\common\"      common)\naux_source_directories(SOURCES \"Source Files\\\\types\"       types)\naux_source_directories(SOURCES \"Source Files\\\\widgets\"     widgets)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Graphite Executable in CMake\nDESCRIPTION: Configures and builds the Graphite executable. This snippet defines the application name, collects source files, creates the executable target, links required libraries, and sets target properties.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/bin/graphite/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(APP_NAME graphite)\n\nset(MODMGR_APPEND_LIBPATH \"\")\n\n# [...Python path configuration...]\n\nadd_definitions(-DMODMGR_APPEND_LIBPATH=\"${MODMGR_APPEND_LIBPATH}\")\n\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} scene_graph)\n\nset_target_properties(\n   ${APP_NAME} PROPERTIES\n   FOLDER \"GRAPHITE/Programs\"\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files from Various Directories for Renderer Library\nDESCRIPTION: Uses aux_source_directories to gather source files from the main directory and subdirectories 'common' and 'context', storing them in the SOURCES variable for later use in the library definition.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/renderer/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"                      .)\naux_source_directories(SOURCES \"Source Files\\\\common\"              common)\naux_source_directories(SOURCES \"Source Files\\\\context\"             context)\n```\n\n----------------------------------------\n\nTITLE: Isotropic Remeshing with vorpalite\nDESCRIPTION: Command for isotropic remeshing of a surface mesh using vorpalite, disabling anisotropy by setting the aniso parameter to 0.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nvorpalite profile=remesh input_surface.meshb output_surface.meshb pts=30000 aniso=0\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Path for Windows in Graphite CMake\nDESCRIPTION: Sets up Python library paths on Windows systems to avoid DLL loading issues. It finds Python, extracts the library path, and formats it for use in the MODMGR_APPEND_LIBPATH variable.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/bin/graphite/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  graphite_find_python()\n  if(${GRAPHITE_FOUND_PYTHON})\n      set(MODMGR_APPEND_LIBPATH ${PYTHON_LIBRARIES})\n  endif()\n  # Flip slashes\n  string(REPLACE \"\\\\\" \"/\" MODMGR_APPEND_LIBPATH \"${MODMGR_APPEND_LIBPATH}\")\n  # Strip name of lib\n  string(REGEX REPLACE \"/[^/]+$\" \"\" MODMGR_APPEND_LIBPATH \"${MODMGR_APPEND_LIBPATH}\")\n  # Go one subdirectory upper\n  set(MODMGR_APPEND_LIBPATH \"${MODMGR_APPEND_LIBPATH}/..\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Anisotropic Remeshing with vorpalite\nDESCRIPTION: Command for anisotropic remeshing of a surface mesh using vorpalite, specifying the desired number of points in the output mesh.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvorpalite profile=remesh input_surface.meshb output_surface.meshb pts=30000\n```\n\n----------------------------------------\n\nTITLE: Manual Compilation in Linux\nDESCRIPTION: Step-by-step commands for manually configuring and compiling Graphite in Linux. This approach gives more control over the build process.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_graphite.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncd graphite3-vvv-rrr/GraphiteThree/\n./configure.sh\ncd build/Linux64-gcc-dynamic-Release\nmake -j8\n```\n\n----------------------------------------\n\nTITLE: Configuring Executable Build in CMake\nDESCRIPTION: Sets up the executable build configuration. Gathers source files, specifies the executable name, links required libraries, and sets target properties for the 'gomgen' application.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/bin/gomgen/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"\" .)\nadd_executable(${APP_NAME} ${SOURCES})\ntarget_link_libraries(${APP_NAME} gom basic geogram swig)\nset_target_properties(\n   ${APP_NAME} PROPERTIES\n   FOLDER \"GRAPHITE/Programs\"\n)\n```\n\n----------------------------------------\n\nTITLE: Surface Mesh Repair with vorpalite\nDESCRIPTION: Command for repairing a potentially damaged surface mesh using vorpalite's repair profile.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nvorpalite profile=repair input_surface.meshb output_surface.meshb\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geogram on Linux/MacOS\nDESCRIPTION: Commands to configure and build Geogram on Linux or MacOS systems using the default options. This creates dynamic libraries and dynamically linked executables.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsh -f configure.sh\ncd build/Linux64-gcc-dynamic-Release # (Linux) or build/Darwin-clang-dynamic-Release (MacOS/X)\nmake\n```\n\n----------------------------------------\n\nTITLE: Noisy Point Cloud Reconstruction with vorpalite\nDESCRIPTION: Command for reconstructing a noisy point cloud into a surface mesh using vorpalite with smoothing iterations to handle noise.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvorpalite profile=reconstruct co3ne:Psmooth_iter=2 my_points.xyz my_surface.meshb\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation in Linux\nDESCRIPTION: Commands to configure the project and generate documentation using Doxygen in Linux.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_graphite.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nsh -f configure.sh\ncd build/Linux64-gcc-Release\nmake doc\n```\n\n----------------------------------------\n\nTITLE: Building RayTracing Library\nDESCRIPTION: Configures the RayTracing library build, including source directories, dependencies, and build properties.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/RayTracing/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\\\\common\" common)\naux_source_directories(SOURCES \"Source Files\\\\shaders\" shaders)\ngomgen(RayTracing)\n\nadd_library(RayTracing ${SOURCES})\n\ntarget_link_libraries(RayTracing mesh_gfx)\n\nset_target_properties(\n   RayTracing PROPERTIES\n   FOLDER \"GRAPHITE/Plugins\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Project Components and Libraries\nDESCRIPTION: Adds various project components and libraries as subdirectories for compilation, including core libraries, plugins, and executables.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(src/lib/third_party)\n\nadd_subdirectory(src/lib/OGF/basic)\nadd_subdirectory(src/lib/OGF/renderer)\nadd_subdirectory(src/lib/OGF/gom)\nadd_subdirectory(src/lib/OGF/gom_gom)\nadd_subdirectory(src/lib/OGF/scene_graph)\nadd_subdirectory(src/lib/OGF/scene_graph_gfx)\nadd_subdirectory(src/lib/OGF/mesh)\nadd_subdirectory(src/lib/OGF/mesh_gfx)\nadd_subdirectory(src/lib/OGF/voxel)\nadd_subdirectory(src/lib/OGF/voxel_gfx)\nadd_subdirectory(src/lib/OGF/luagrob)\nadd_subdirectory(src/lib/OGF/devel)\nadd_subdirectory(src/lib/OGF/skin_imgui)\nadd_subdirectory(src/bin/graphite)\nadd_subdirectory(src/bin/gomgen)\nadd_subdirectory(doc)\n\nadd_subdirectory(plugins/OGF)\n```\n\n----------------------------------------\n\nTITLE: Creating Emscripten Webpage for Geogram Program\nDESCRIPTION: Commands to generate an HTML webpage for a Geogram program compiled with Emscripten, including options for embedding data files.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd build/Emscripten-clang-Release/bin\n<geogram_root>/tools/gen_emscripten_html.sh test_glup.js\n\n# With embedded datafiles:\n<geogram_root>/tools/gen_emscripten_html.sh vorpaview.js morph.tet6\n```\n\n----------------------------------------\n\nTITLE: Compiling Geogram Examples\nDESCRIPTION: Commands to compile and run Geogram examples after installation, including setting the GEOGRAM_INSTALL_ROOT environment variable if needed.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd src/tutorial/hello_geogram\ncmake .\nmake\n./hello_geogram\n```\n\n----------------------------------------\n\nTITLE: Using vorpaview for Mesh Viewing\nDESCRIPTION: Command line usage for vorpaview, a simple mesh viewer that can open various mesh file formats. Includes an option to disable GLSL for compatibility with older graphics cards.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvorpaview meshfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Geogram for Specific Platforms\nDESCRIPTION: Command to configure Geogram for a specific platform, such as generating statically linked executables on Linux.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsh -f configure.sh Linux64-gcc\n```\n\n----------------------------------------\n\nTITLE: Clean Point Cloud Reconstruction with vorpalite\nDESCRIPTION: Command for reconstructing a clean point cloud into a surface mesh using vorpalite with the reconstruct profile.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvorpalite profile=reconstruct my_points.xyz my_surface.meshb\n```\n\n----------------------------------------\n\nTITLE: Running Linux Build Script\nDESCRIPTION: Command sequence for building Graphite in Linux using the all-in-one generation script. This automates the configuration and compilation process for both Geogram and Graphite.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_graphite.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncd graphite3-vvv-rrr/\n./make_it.sh\n```\n\n----------------------------------------\n\nTITLE: Graded Remeshing with vorpalite\nDESCRIPTION: Command for graded remeshing of a surface mesh using vorpalite, with isotropic setting and gradation enabled.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nvorpalite profile=remesh input_surface.meshb output_surface.meshb pts=30000 aniso=0 gradation=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directories for Voxel Library in CMake\nDESCRIPTION: Collects source files from multiple directories into a SOURCES variable using aux_source_directories. This organizes the voxel library's source code into logical groups including common, grob, commands, shaders, interfaces, and tools directories.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/voxel/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"              .)\naux_source_directories(SOURCES \"Source Files\\\\common\"      common)\naux_source_directories(SOURCES \"Source Files\\\\grob\"        grob)\naux_source_directories(SOURCES \"Source Files\\\\commands\"    commands)\naux_source_directories(SOURCES \"Source Files\\\\shaders\"     shaders)\naux_source_directories(SOURCES \"Source Files\\\\interfaces\"  interfaces)\naux_source_directories(SOURCES \"Source Files\\\\tools\"       tools)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directories for Mesh Library in CMake\nDESCRIPTION: Defines source directories for the mesh library by collecting source files from various subdirectories including common, grob, algo, commands, interfaces, shaders, and tools.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/mesh/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"              .)\naux_source_directories(SOURCES \"Source Files\\\\common\"      common)\naux_source_directories(SOURCES \"Source Files\\\\grob\"        grob)\naux_source_directories(SOURCES \"Source Files\\\\algo\"        algo)\naux_source_directories(SOURCES \"Source Files\\\\commands\"    commands)\naux_source_directories(SOURCES \"Source Files\\\\interfaces\"  interfaces)\naux_source_directories(SOURCES \"Source Files\\\\shaders\"     shaders)\naux_source_directories(SOURCES \"Source Files\\\\tools\"       tools)\n```\n\n----------------------------------------\n\nTITLE: Tetrahedral Meshing with vorpalite\nDESCRIPTION: Command for generating a tetrahedral mesh from a surface mesh using the bundled TetGen integration in vorpalite.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nvorpalite profile=tet input_surface.meshb output_tetrahedral_mesh.meshb\n```\n\n----------------------------------------\n\nTITLE: FEM Simulation Function Declaration\nDESCRIPTION: Declaration of the main FEM simulation function that handles the Poisson equation solving with specified boundary conditions and parameters.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nbool fem_simulation(GEO::Mesh& M,\n        const std::string& dirichlet_region,\n        const std::string& dirichlet_value,\n        const std::string& neumann_region,\n        const std::string& neumann_value,\n        const std::string& sourceterm_value,\n        const std::string& diffusion_value,\n        const std::string& solution_name\n        );\n```\n\n----------------------------------------\n\nTITLE: MkDocs Preview and Build Commands\nDESCRIPTION: Commands for live preview of the website with auto-reload and building static HTML output for deployment\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs build -d path/to/output/directory\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs -h\n```\n\n----------------------------------------\n\nTITLE: Lua FEM Command Execution\nDESCRIPTION: Script to execute the FEM command on the current mesh in Graphite, setting various parameters like source term, boundary conditions, and solution name.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nscene_graph.current().query_interface(\"OGF::MeshGrobFemCommands\").fem({sourceterm_value=\"1\", dirichlet_region=\"1\", neumann_value=\"0\", solution_name=\"u\", diffusion_value=\"1\", dirichlet_value=\"0\", neumann_region=\"0\"})\n```\n\n----------------------------------------\n\nTITLE: Starting Graphite in Linux\nDESCRIPTION: Command to execute the compiled Graphite application in Linux after a successful build.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_graphite.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nbin/graphite\n```\n\n----------------------------------------\n\nTITLE: Collecting source files by category\nDESCRIPTION: Uses aux_source_directories to collect source files from different directories and categorize them.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/WarpDrive/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\\\\common\" common)\naux_source_directories(SOURCES \"Source Files\\\\algo\" algo)\naux_source_directories(SOURCES \"Source Files\\\\commands\" commands)\naux_source_directories(SOURCES \"Source Files\\\\shaders\" shaders)\naux_source_directories(SOURCES \"Source Files\\\\IO\" IO)\naux_source_directories(SOURCES \"Source Files\\\\interfaces\" interfaces)\naux_source_directories(SOURCES \"Source Files\\\\third_party\\\\muparser\" third_party/muparser)\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Geogram Integration\nDESCRIPTION: Conditionally adds Geogram library directory to the build if it exists in the project directory.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(IS_DIRECTORY ${CMAKE_SOURCE_DIR}/geogram)\n   add_subdirectory(geogram)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copying Geogram DLLs for Windows in CMake\nDESCRIPTION: Copies Geogram DLLs into the binaries directory on Windows platforms. This is done for the 'basic' target, specifically for use with 'gomgen'.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/basic/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncopy_geogram_DLLs_for(basic)\n```\n\n----------------------------------------\n\nTITLE: Building and Linking the Voxel Graphics Library\nDESCRIPTION: Generates custom files with gomgen, creates the voxel_gfx library from the collected sources, and links it with dependencies voxel and scene_graph_gfx.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/voxel_gfx/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ngomgen(voxel_gfx)\nadd_library(voxel_gfx ${SOURCES})\ntarget_link_libraries(voxel_gfx voxel scene_graph_gfx)\n```\n\n----------------------------------------\n\nTITLE: Setting Geogram source directory path\nDESCRIPTION: Determines the Geogram source directory path either from environment variables or using a default path.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/WarpDrive/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"$ENV{GEOGRAM_SOURCE_DIR}\" STREQUAL \"\")\n  set(\n     GEOGRAM_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../../../geogram/\"\n     CACHE PATH \"full path to the Geogram (or Vorpaline) installation\"\n  )\nelse()\n  set(\n    GEOGRAM_SOURCE_DIR \"$ENV{GEOGRAM_SOURCE_DIR}\"\n    CACHE PATH \"full path to the Geogram (or Vorpaline) installation\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files from Multiple Directories in CMake\nDESCRIPTION: Uses aux_source_directories to gather source files from the main directory, common subdirectory, and shaders subdirectory into a SOURCES variable.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/voxel_gfx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"              .)\naux_source_directories(SOURCES \"Source Files\\\\common\"      common)\naux_source_directories(SOURCES \"Source Files\\\\shaders\"     shaders)\n```\n\n----------------------------------------\n\nTITLE: Setting Graphite source directory path\nDESCRIPTION: Determines the Graphite source directory path either from environment variables or using a default path, and includes necessary directories.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/WarpDrive/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT \"$ENV{GRAPHITE_SOURCE_DIR}\" STREQUAL \"\")\n  set(\n     GRAPHITE_SOURCE_DIR \"$ENV{GRAPHITE_SOURCE_DIR}\"\n     CACHE PATH \"full path to the Graphite installation\"\n  )\n  include_directories(${CMAKE_SOURCE_DIR}/../../)\nelse()\n   set(\n     GRAPHITE_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../../../\"\n     CACHE PATH \"full path to the Graphite installation\"\n   )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting include and output directories\nDESCRIPTION: Configures include directories and sets output directories for binaries and libraries.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/WarpDrive/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_SOURCE_DIR}/../../)\n\n# DLLs/shared objects are generated in Graphite binary directory\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${GRAPHITE_SOURCE_DIR}/${RELATIVE_BIN_OUTPUT_DIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${GRAPHITE_SOURCE_DIR}/${RELATIVE_LIB_OUTPUT_DIR})\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling Geogram for Android\nDESCRIPTION: Commands to cross-compile Geogram for Android using the prepared NDK toolchain.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd geogram\n./configure.sh Android-armv7-gcc\ncd build/Android-armv7-gcc-Release/\nmake\n```\n\n----------------------------------------\n\nTITLE: Checking for optional CMake settings\nDESCRIPTION: Checks for and includes custom CMake options if present in the source directory.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/WarpDrive/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXISTS ${CMAKE_SOURCE_DIR}/CMakeOptions.txt)\n   message(STATUS \"Using options file: ${CMAKE_SOURCE_DIR}/CMakeOptions.txt\")\n   include(${CMAKE_SOURCE_DIR}/CMakeOptions.txt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling Geogram for Emscripten\nDESCRIPTION: Commands to compile Geogram using Emscripten for web deployment.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsh -f configure.sh Emscripten-clang\ncd build/Emscripten-clang-Release\nmake\n```\n\n----------------------------------------\n\nTITLE: Configuring Graphite Path and Options\nDESCRIPTION: Establishes the path to GraphiteThree installation and includes necessary CMake configuration files.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/RayTracing/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(\n   GRAPHITE_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/../../../GraphiteThree/\"\n   CACHE PATH \"full path to the Graphite installation\"\n)\n\ninclude(${GRAPHITE_SOURCE_DIR}/cmake/graphite.cmake)\n\nif(EXISTS ${CMAKE_SOURCE_DIR}/CMakeOptions.txt)\n   message(STATUS \"Using options file: ${CMAKE_SOURCE_DIR}/CMakeOptions.txt\")\n   include(${CMAKE_SOURCE_DIR}/CMakeOptions.txt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling Delaunay PSM Example (Bash)\nDESCRIPTION: Command to compile the Delaunay PSM example with optimizations and OpenMP support.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngcc -O3 -fopenmp -frounding-math -ffp-contract=off Delaunay_example.cpp Delaunay_psm.cpp -o Delaunay_example -lm\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories\nDESCRIPTION: Configures the output directories for runtime and library files within the Graphite binary directory structure.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/RayTracing/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_SOURCE_DIR}/../../)\n\nset(\n   CMAKE_RUNTIME_OUTPUT_DIRECTORY\n   ${GRAPHITE_SOURCE_DIR}/${RELATIVE_BIN_OUTPUT_DIR}\n)\n\nset(\n   CMAKE_LIBRARY_OUTPUT_DIRECTORY\n   ${GRAPHITE_SOURCE_DIR}/${RELATIVE_LIB_OUTPUT_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling OpenNL with OpenMP Support (Bash)\nDESCRIPTION: Command to compile OpenNL with OpenMP parallel mode enabled.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcc -fopenmp OpenNL_example.c OpenNL_psm.c -o OpenNL_example -lm\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Voxel Library in CMake\nDESCRIPTION: Configures properties for the voxel library target, specifically placing it in the \"GRAPHITE\" folder in IDEs that support solution folders. This helps with organization in development environments that use the CMake generator.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/voxel/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(\n    voxel PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Organization Properties for Renderer Library\nDESCRIPTION: Sets properties for the renderer target, specifically placing it in the \"GRAPHITE\" folder in the IDE project structure for better organization.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/renderer/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(\n    renderer PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling OpenNL PSM Example (Bash)\nDESCRIPTION: Command to compile the OpenNL PSM example, linking with the math library.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcc OpenNL_example.c OpenNL_psm.c -o OpenNL_example -lm\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Skin ImGui Library\nDESCRIPTION: Configures additional properties for the skin_imgui library target. Specifically, it sets the FOLDER property to \"GRAPHITE\" which affects how the target appears in IDEs that support project organization.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/skin_imgui/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(\n    skin_imgui PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling MultiPrecision PSM Example (Bash)\nDESCRIPTION: Command to compile the MultiPrecision PSM example.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ng++ MultiPrecision_example.cpp MultiPrecision_psm.cpp -o MultiPrecision_example\n```\n\n----------------------------------------\n\nTITLE: Setting Project Organization Properties for CMake Target\nDESCRIPTION: Configures the voxel_gfx target with additional properties, specifically placing it in the \"GRAPHITE\" folder for IDE organization.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/voxel_gfx/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(\n    voxel_gfx PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project and Dependencies\nDESCRIPTION: Sets up the CMake project with minimum version requirements and configures paths to Geogram/Vorpaline dependencies.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/RayTracing/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.30)\n\nproject(RayTracing)\n\nif(EXISTS ${CMAKE_SOURCE_DIR}/../../../../Vorpaline/trunk/)\n   set(\n      GEOGRAM_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/../../../../Vorpaline/trunk\"\n      CACHE PATH \"full path to the Geogram (or Vorpaline) installation\"\n   )\nelse()\n   set(\n      GEOGRAM_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/../../../geogram/\"\n      CACHE PATH \"full path to the Geogram (or Vorpaline) installation\"\n   )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using vorpastat for Mesh Comparison\nDESCRIPTION: Basic usage of vorpastat for measuring Hausdorff distance between two meshes. The tool tests both mesh topology and distance, returning non-zero result when differences exceed thresholds.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvorpastat meshfile1 meshfile2\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for the Luagrob Library in CMake\nDESCRIPTION: Configures additional properties for the luagrob target, specifically placing it in the \"GRAPHITE\" folder. This helps with project organization in IDEs that support CMake's folder structure.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/luagrob/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(\n    luagrob PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring vorpastat Sampling Step\nDESCRIPTION: Command to specify the sampling step parameter for vorpastat's Hausdorff distance calculation, which controls the density of sampling points for comparison.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvorpastat stat:sampling_step=nnn meshfile1 meshfile2\n```\n\n----------------------------------------\n\nTITLE: Including OpenGL CMake Configuration in Renderer Build\nDESCRIPTION: Includes the OpenGL CMake configuration from the GEOGRAM_SOURCE_DIR directory, which likely defines the necessary OpenGL dependencies and compiler flags.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/renderer/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${GEOGRAM_SOURCE_DIR}/cmake/opengl.cmake)\n```\n\n----------------------------------------\n\nTITLE: Preparing Android NDK for Geogram\nDESCRIPTION: Commands to prepare the Android NDK for cross-compiling Geogram, including creating a standalone toolchain and setting up the environment.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nchmod 755 android-ndk-rxxy-linux-x86_64.bin\n./android-ndk-rxxy-linux-x86_64.bin\n\nmkdir toolchain\n\n./android-ndk-rxxy/build/tools/make-standalone-toolchain.sh \\\n--platform=android-zz --toolchain=arm-linux-androideabi-4.9 \\\n--system=linux-x86_64 --install-dir=`pwd`/toolchain \\\n--stl=libc++\n\nexport PATH=`pwd`/toolchain/bin/:$PATH\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Documentation Target\nDESCRIPTION: Checks if Doxygen is available on the system and conditionally adds a documentation target named 'doc' only if Doxygen is found.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(DOXYGEN_FOUND)\n   add_doc_target(doc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Extracting PSM from Geogram Sourcetree (Bash)\nDESCRIPTION: Command to extract a Pluggable Software Module (PSM) from the Geogram sourcetree on Linux or Cygwin.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntools/extract_psm.sh filename.psm\n```\n\n----------------------------------------\n\nTITLE: Including Doxygen Configuration in CMake\nDESCRIPTION: Includes the Doxygen CMake configuration from the GEOGRAM source directory to set up documentation generation capabilities.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${GEOGRAM_SOURCE_DIR}/cmake/doxygen.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake version and project for WarpDrive\nDESCRIPTION: Configures minimum required CMake version and defines the WarpDrive project.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/WarpDrive/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.30)\n\nproject(WarpDrive)\n```\n\n----------------------------------------\n\nTITLE: Compiling Generic PSM Example (Bash)\nDESCRIPTION: Generic command to compile a PSM example, where 'MultiPrecision' can be replaced with the specific PSM name.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ng++ MultiPrecision_example.cpp MultiPrecision_psm.cpp -o MultiPrecision_example\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Libraries and Compiler Warnings in CMake for Graphite Project\nDESCRIPTION: Sets up third-party libraries as static libraries and configures compiler-specific warning flags. For non-Windows builds, it disables several warnings including unused variables, sign comparisons, and strict aliasing. For Clang compilers, it additionally suppresses warnings related to SWIG-generated code.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/third_party/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nvor_reset_warning_level()\n\n# third-party libraries are generated as static libraries,\n# and linked to the Graphite library that uses them.\nset(BUILD_SHARED_LIBS FALSE)\n\nif(WIN32)\n#  Insert flags here if there are some MSVC warnings to deactivate.\nelse()\n   add_definitions(-Wno-unused -Wno-sign-compare -Wno-strict-aliasing)\n   if(\n       \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR\n       \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\"\n   )\n      add_definitions(-Wno-deprecated-declarations)     # swig uses sprintf\n      add_definitions(-Wno-suggest-override)            # swig\n      add_definitions(-Wno-suggest-destructor-override) # swig\n   endif()\nendif()\n\nadd_subdirectory(swig)\n```\n\n----------------------------------------\n\nTITLE: Compiling Predicates PSM (Bash)\nDESCRIPTION: Command to compile the Predicates PSM (no example program available).\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ng++ -c Predicates_psm.cpp\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags in CMake\nDESCRIPTION: Sets compiler flags based on the platform (Windows or non-Windows) and compiler type (Clang or AppleClang). Disables specific warnings for non-Windows builds.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/bin/gomgen/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n#  Insert flags here if there are some MSVC warnings to deactivate.\nelse()\n   add_definitions(-Wno-unused -Wno-sign-compare -Wno-strict-aliasing)\n   if(\n       \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR\n       \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\"\n   )\n      add_definitions(-Wno-suggest-override)            # swig\n      add_definitions(-Wno-suggest-destructor-override) # swig\n   endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Collecting source files from multiple directories for SWIG library\nDESCRIPTION: Uses aux_source_directories to recursively add source files from multiple subdirectories to the SOURCES variable. This organizes the SWIG library components including CParse, DOH, Modules, Preprocessor, and Swig core files.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/third_party/swig/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directories(SOURCES \"Source Files\"               .)\naux_source_directories(SOURCES \"Source Files\\\\CParse\"       CParse)\naux_source_directories(SOURCES \"Source Files\\\\DOH\"          DOH)\naux_source_directories(SOURCES \"Source Files\\\\Modules\"      Modules)\naux_source_directories(SOURCES \"Source Files\\\\Preprocessor\" Preprocessor)\naux_source_directories(SOURCES \"Source Files\\\\Swig\"         Swig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-specific definitions for SWIG library in CMake\nDESCRIPTION: Adds the _LIB preprocessor definition when building on Windows platforms. This likely ensures proper symbol visibility and library configuration for Windows builds.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/third_party/swig/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-D_LIB)\nendif(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Installation Directory for Geogram\nDESCRIPTION: Example of setting a custom installation directory for Geogram using CMakeOptions.txt file.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n(CMAKE_INSTALL_PREFIX /home/myself/installroot/Geogram)\n```\n\n----------------------------------------\n\nTITLE: Creating the SWIG static library target\nDESCRIPTION: Defines the SWIG library target using the collected source files. This creates a static library named 'swig' that will be compiled from all the source files gathered in the previous step.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/third_party/swig/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(swig ${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Full Documentation\nDESCRIPTION: Initial setup and generation of complete documentation in doc/devkit-full/html directory using configure script and make\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsh -f configure.sh\ncd build/Linux64-gcc-dynamic-Release\nmake doc-devkit-full\n```\n\n----------------------------------------\n\nTITLE: Setting SWIG library target properties for organization\nDESCRIPTION: Sets the FOLDER property for the SWIG library, placing it in the \"GRAPHITE\" folder in IDEs that support solution folders (like Visual Studio). This helps organize the project structure in the IDE.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/third_party/swig/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(\n    swig PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Alternative Documentation Build Commands\nDESCRIPTION: Additional make targets for generating internal documentation with private classes and collaboration graphs\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/install_geogram.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmake doc-devkit-internal\nmake doc-devkit-internal-light\n```\n\n----------------------------------------\n\nTITLE: Including Optional Plugin Configuration in CMake\nDESCRIPTION: Checks for the existence of a Plugins.txt file in the current source directory and includes it if found. This allows for flexible plugin configuration management in the build system.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/Plugins.txt)\n   include(${CMAKE_CURRENT_SOURCE_DIR}/Plugins.txt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: PSM File Syntax for Headers (Bash)\nDESCRIPTION: Syntax for specifying header files in a PSM file. File paths are relative to the PSM file location.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nHEADERS=\"header_1.h header_2.h ... header_n.h\"\n```\n\n----------------------------------------\n\nTITLE: Adding Default Plugins for Windows Distribution in CMake\nDESCRIPTION: This CMake snippet includes the WarpDrive and RayTracing plugins in the build process for the Windows distribution of GraphiteThree. It uses the add_subdirectory command to include each plugin's directory in the build.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/binary_win_dist/Plugins.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(WarpDrive)\nadd_subdirectory(RayTracing)\n```\n\n----------------------------------------\n\nTITLE: PSM File Syntax for Sources (Bash)\nDESCRIPTION: Syntax for specifying source files in a PSM file. Can include C++ or C files.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSOURCES=\"source_1.cpp source_2.cpp ... source_n.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Setting Application Name in CMake\nDESCRIPTION: Defines the application name as 'gomgen' for use throughout the CMake script.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/bin/gomgen/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(APP_NAME gomgen)\n```\n\n----------------------------------------\n\nTITLE: PSM File Syntax for Documentation Link (Bash)\nDESCRIPTION: Syntax for specifying a documentation link in a PSM file, which is inserted into the generated header.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nDOC=\"http://alice.loria.fr/software/geogram/doc/html/link to the doc.html\"\n```\n\n----------------------------------------\n\nTITLE: Compiling OpenNL with SuperLU Support (Bash)\nDESCRIPTION: Command to compile OpenNL with SuperLU dynamic linking support on Linux.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcc -DGEO_DYNAMIC_LIBS OpenNL_example.c OpenNL_psm.c -o OpenNL_example -lm -ldl\n```\n\n----------------------------------------\n\nTITLE: Forcing vorpaview to Deactivate GLSL Mode\nDESCRIPTION: Command to force vorpaview to run in compatibility mode without GLSL shaders, useful for older graphics hardware or driver compatibility issues.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/examples.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvorpaview gfx:GLSL=false meshfile\n```\n\n----------------------------------------\n\nTITLE: PSM File Syntax for Example (Bash)\nDESCRIPTION: Syntax for specifying an optional example file in a PSM file. The path is relative to the PSM file location.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/psm.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nEXAMPLE=\"path to example.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Setting Visual Studio Startup Project\nDESCRIPTION: Windows-specific configuration to set Graphite as the startup project in Visual Studio.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  set_property(\n    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY\n    VS_STARTUP_PROJECT graphite\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Default Plugin Subdirectories in CMake\nDESCRIPTION: Adds three plugin subdirectories (gompy, WarpDrive, and RayTracing) to the CMake build system for compilation as part of the Graphite distribution.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/cmake/default_plugins.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(gompy)\nadd_subdirectory(WarpDrive)\nadd_subdirectory(RayTracing)\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs and Theme Dependencies\nDESCRIPTION: Commands for installing MkDocs static site generator and the bootswatch theme from GitHub\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mkdocs\npip install git+https://github.com/mkdocs/mkdocs-bootswatch.git\n```\n\n----------------------------------------\n\nTITLE: Customizing Table of Contents Display Template\nDESCRIPTION: Template code for conditionally showing/hiding the table of contents based on page title. Implements different layouts for Home/Gallery pages versus other content pages\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% if page.title in ('Home','Gallery') %}\n    <div class=\"col-md-12\" role=\"main\">{% include \"content.html\" %}</div>\n{% else %}\n    <div class=\"col-md-3\">{% include \"toc.html\" %}</div>\n    <div class=\"col-md-9\" role=\"main\">{% include \"content.html\" %}</div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Links for Geogram and Graphite Documentation\nDESCRIPTION: This snippet shows how to create markdown links to the Doxygen documentation for Geogram and Graphite libraries.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/website/docs/doxygen.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Geogram documentation](http://alice.loria.fr/software/geogram/doc/html/index.html)\n\n[Graphite documentation](http://alice.loria.fr/software/graphite/doc/html/index.html)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Basic Library in CMake\nDESCRIPTION: Sets the FOLDER property for the 'basic' target to \"GRAPHITE\". This organizes the target within the project structure in IDEs that support folder organization.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/src/lib/OGF/basic/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(\n    basic PROPERTIES\n    FOLDER \"GRAPHITE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Graphite CMake configuration\nDESCRIPTION: Includes the main Graphite CMake configuration file to inherit build settings.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/plugins/OGF/WarpDrive/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${GRAPHITE_SOURCE_DIR}/cmake/graphite.cmake)\n```\n\n----------------------------------------\n\nTITLE: Converting Source Directory Path to Absolute Path for Doxygen\nDESCRIPTION: Converts the GEOGRAM_SOURCE_DIR to an absolute path using get_filename_component with REALPATH option to ensure Doxygen can correctly strip path components in documentation.\nSOURCE: https://github.com/brunolevy/graphitethree/blob/main/doc/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_filename_component(GEOGRAM_SOURCE_DIR ${GEOGRAM_SOURCE_DIR} REALPATH)\n```"
  }
]