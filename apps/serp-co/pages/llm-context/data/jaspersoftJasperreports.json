[
  {
    "owner": "jaspersoft",
    "repo": "jasperreports",
    "content": "TITLE: Creating JasperPrint Object Programmatically in Java\nDESCRIPTION: This method generates a JasperPrint document from scratch by setting page properties, defining styles, and adding various print elements (lines, images, text) to create a complete document. It demonstrates how to create a report without using JRXML templates or the report filling process.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/noreport/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static JasperPrint getJasperPrint() throws JRException\n{\n  //JasperPrint\n  JasperPrint jasperPrint = new JasperPrint();\n  jasperPrint.setName(\"NoReport\");\n  jasperPrint.setPageWidth(595);\n  jasperPrint.setPageHeight(842);\n\n  //Fonts\n  JRDesignStyle normalStyle = new JRDesignStyle();\n  normalStyle.setName(\"Sans_Normal\");\n  normalStyle.setDefault(true);\n  normalStyle.setFontName(\"DejaVu Sans\");\n  normalStyle.setFontSize(8f);\n  normalStyle.setPdfFontName(\"Helvetica\");\n  normalStyle.setPdfEncoding(\"Cp1252\");\n  normalStyle.setPdfEmbedded(Boolean.FALSE);\n  jasperPrint.addStyle(normalStyle);\n\n  JRDesignStyle boldStyle = new JRDesignStyle();\n  boldStyle.setName(\"Sans_Bold\");\n  boldStyle.setFontName(\"DejaVu Sans\");\n  boldStyle.setFontSize(8f);\n  boldStyle.setBold(Boolean.TRUE);\n  boldStyle.setPdfFontName(\"Helvetica-Bold\");\n  boldStyle.setPdfEncoding(\"Cp1252\");\n  boldStyle.setPdfEmbedded(Boolean.FALSE);\n  jasperPrint.addStyle(boldStyle);\n\n  JRDesignStyle italicStyle = new JRDesignStyle();\n  italicStyle.setName(\"Sans_Italic\");\n  italicStyle.setFontName(\"DejaVu Sans\");\n  italicStyle.setFontSize(8f);\n  italicStyle.setItalic(Boolean.TRUE);\n  italicStyle.setPdfFontName(\"Helvetica-Oblique\");\n  italicStyle.setPdfEncoding(\"Cp1252\");\n  italicStyle.setPdfEmbedded(Boolean.FALSE);\n  jasperPrint.addStyle(italicStyle);\n\n  JRPrintPage page = new JRBasePrintPage();\n\n  JRPrintLine line = new JRBasePrintLine(jasperPrint.getDefaultStyleProvider());\n  line.setX(40);\n  line.setY(50);\n  line.setWidth(515);\n  line.setHeight(0);\n  page.addElement(line);\n\n  JRPrintImage image = new JRBasePrintImage(jasperPrint.getDefaultStyleProvider());\n  image.setX(45);\n  image.setY(55);\n  image.setWidth(165);\n  image.setHeight(40);\n  image.setScaleImage(ScaleImageEnum.CLIP);\n  image.setRenderer(\n    ResourceRenderer.getInstance(\"jasperreports.png\", false)\n    );\n  page.addElement(image);\n\n  JRPrintText text = new JRBasePrintText(jasperPrint.getDefaultStyleProvider());\n  text.setX(210);\n  text.setY(55);\n  text.setWidth(345);\n  text.setHeight(30);\n  text.setTextHeight(text.getHeight());\n  text.sethTextAlign(hTextAlignEnum.RIGHT);\n  text.setLineSpacingFactor(1.3133681f);\n  text.setLeadingOffset(-4.955078f);\n  text.setStyle(boldStyle);\n  text.setFontSize(18f);\n  text.setText(\"JasperReports Project Description\");\n  page.addElement(text);\n\n  text = new JRBasePrintText(jasperPrint.getDefaultStyleProvider());\n  text.setX(210);\n  text.setY(85);\n  text.setWidth(325);\n  text.setHeight(15);\n  text.setTextHeight(text.getHeight());\n  text.sethTextAlign(hTextAlignEnum.RIGHT);\n  text.setLineSpacingFactor(1.329241f);\n  text.setLeadingOffset(-4.076172f);\n  text.setStyle(italicStyle);\n  text.setFontSize(12f);\n  text.setText((new SimpleDateFormat(\"EEE, MMM d, yyyy\")).format(new Date()));\n  page.addElement(text);\n\n  text = new JRBasePrintText(jasperPrint.getDefaultStyleProvider());\n  text.setX(40);\n  text.setY(150);\n  text.setWidth(515);\n  text.setHeight(200);\n  text.setTextHeight(text.getHeight());\n  text.sethTextAlign(hTextAlignEnum.JUSTIFIED);\n  text.setLineSpacingFactor(1.329241f);\n  text.setLeadingOffset(-4.076172f);\n  text.setStyle(normalStyle);\n  text.setFontSize(14f);\n  text.setText(\n    \"JasperReports is a powerful report-generating tool that has the ability to deliver rich content onto the screen, to the printer or into PDF, HTML, XLS, CSV or XML files.\\n\\n\" +\n    \"It is entirely written in Java and can be used in a variety of Java enabled applications, including J2EE or Web applications, to generate dynamic content.\\n\\n\" +\n    \"Its main purpose is to help creating page oriented, ready to print documents in a simple and flexible manner.\"\n    );\n  page.addElement(text);\n\n  jasperPrint.addPage(page);\n\n  return jasperPrint;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom TableModel in Java for JasperReports\nDESCRIPTION: A CustomTableModel class that extends AbstractTableModel to provide tabular data for a JasperReport. It contains sample data with city, id, name, and street fields and implements all required methods from the AbstractTableModel interface.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomTableModel extends AbstractTableModel\n{\n private String[] columnNames = {\"the_city\", \"id\", \"name\", \"street\"};\n\n private Object[][] data =\n {\n  {\"Berne\", 22, \"Bill Ott\", \"250 - 20th Ave.\"},\n  {\"Berne\", 9, \"James Schneider\", \"277 Seventh Av.\"},\n  {\"Boston\", 32, \"Michael Ott\", \"339 College Av.\"},\n  {\"Boston\", 23, \"Julia Heiniger\", \"358 College Av.\"},\n  {\"Chicago\", 39, \"Mary Karsen\", \"202 College Av.\"},\n  {\"Chicago\", 35, \"George Karsen\", \"412 College Av.\"},\n  {\"Chicago\", 11, \"Julia White\", \"412 Upland Pl.\"},\n  {\"Dallas\", 47, \"Janet Fuller\", \"445 Upland Pl.\"},\n  {\"Dallas\", 43, \"Susanne Smith\", \"2 Upland Pl.\"},\n  {\"Dallas\", 40, \"Susanne Miller\", \"440 - 20th Ave.\"},\n  {\"Dallas\", 36, \"John Steel\", \"276 Upland Pl.\"},\n  {\"Dallas\", 37, \"Michael Clancy\", \"19 Seventh Av.\"},\n  {\"Dallas\", 19, \"Susanne Heiniger\", \"86 - 20th Ave.\"},\n  {\"Dallas\", 10, \"Anne Fuller\", \"135 Upland Pl.\"},\n  {\"Dallas\", 4, \"Sylvia Ringer\", \"365 College Av.\"},\n  {\"Dallas\", 0, \"Laura Steel\", \"429 Seventh Av.\"},\n  {\"Lyon\", 38, \"Andrew Heiniger\", \"347 College Av.\"},\n  {\"Lyon\", 28, \"Susanne White\", \"74 - 20th Ave.\"},\n  {\"Lyon\", 17, \"Laura Ott\", \"443 Seventh Av.\"},\n  {\"Lyon\", 2, \"Anne Miller\", \"20 Upland Pl.\"},\n  {\"New York\", 46, \"Andrew May\", \"172 Seventh Av.\"},\n  {\"New York\", 44, \"Sylvia Ott\", \"361 College Av.\"},\n  {\"New York\", 41, \"Bill King\", \"546 College Av.\"},\n  {\"Oslo\", 45, \"Janet May\", \"396 Seventh Av.\"},\n  {\"Oslo\", 42, \"Robert Ott\", \"503 Seventh Av.\"},\n  {\"Paris\", 25, \"Sylvia Steel\", \"269 College Av.\"},\n  {\"Paris\", 18, \"Sylvia Fuller\", \"158 - 20th Ave.\"},\n  {\"Paris\", 5, \"Laura Miller\", \"294 Seventh Av.\"},\n  {\"San Francisco\", 48, \"Robert White\", \"549 Seventh Av.\"},\n  {\"San Francisco\", 7, \"James Peterson\", \"231 Upland Pl.\"}\n };\n\n public CustomTableModel()\n {\n }\n\n public int getColumnCount()\n {\n  return this.columnNames.length;\n }\n\n public String getColumnName(int columnIndex)\n {\n  return this.columnNames[columnIndex];\n }\n\n public int getRowCount()\n {\n  return this.data.length;\n }\n\n public Object getValueAt(int rowIndex, int columnIndex)\n {\n  return this.data[rowIndex][columnIndex];\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Filling Reports with Hibernate Data in Java - Java\nDESCRIPTION: Java method for executing the report filling process using Hibernate; creates session, begins transaction, prepares parameters, fills multiple reports, rolls back transaction, and closes the session factory. Assumes JasperReports and Hibernate are correctly set up and that all compiled reports exist in the specified locations. Handles bulk report generation, performance measurement, and resource cleanup.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic void fill() throws JRException\\n{\\n  SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();\\n  Session session = sessionFactory.openSession();\\n  Transaction transaction = session.beginTransaction();\\n\\n  Map<String, Object> params = getParameters(session);\\n\\n  File[] files =\\n    new File[]{\\n    new File(\\\"target/reports/AddressesReport.jasper\\\"),\\n      new File(\\\"target/reports/HibernateQueryReport.jasper\\\")\\n    };\\n  for(int i = 0; i < files.length; i++)\\n  {\\n    File reportFile = files[i];\\n    long start = System.currentTimeMillis();\\n    JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(), new HashMap<String, Object>(params));\\n    System.err.println(\\\"Report : \\\" + reportFile + \\\". Filling time : \\\" + (System.currentTimeMillis() - start));\\n  }\\n\\n  transaction.rollback();\\n  sessionFactory.close();\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring JasperReports Parameters and SQL Query (XML, SQL)\nDESCRIPTION: This snippet showcases how to define collection and string parameters for a JasperReports report and embed an SQL query that utilizes parameter-based clauses. Dependencies include JasperReports 6.20.0+ and a valid .jrxml report definition. The ExcludedCities parameter filters rows using a dynamic NOT IN clause, while OrderClause parameterizes the ordering. Inputs are dynamic values provided for ExcludedCities and OrderClause; outputs are matching query results. This requires a JDBC-compatible data source, and proper escaping for use of CDATA and JasperReports syntax.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n  <parameter name=\\\"ExcludedCities\\\" class=\\\"java.util.Collection\\\"/>\n  <parameter name=\\\"OrderClause\\\" class=\\\"java.lang.String\\\"/>\n  <query>\n    <![CDATA[SELECT Id, FirstName, LastName, Street, City, (Id < 30) as ConditionalField\n      FROM Address\n      WHERE $X{NOTIN, City, ExcludedCities}\n      ORDER BY $P!{OrderClause}]] >\n  </query>\n```\n\n----------------------------------------\n\nTITLE: Defining JasperReports Ant Compilation Task\nDESCRIPTION: Defines a custom Ant task named 'jrc' that uses JRAntCompileTask class for compiling report templates. The task definition includes the required classpath configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antcompile/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<taskdef name=\"jrc\" classname=\"net.sf.jasperreports.ant.JRAntCompileTask\"> \n  <classpath refid=\"classpath\"/>\n</taskdef>\n```\n\n----------------------------------------\n\nTITLE: Implementing JRDataSource Interface in Java\nDESCRIPTION: Shows the two key methods that must be implemented when creating a custom JRDataSource: next() for iterating through records and getFieldValue() for retrieving field values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic boolean next() throws JRException;\npublic Object getFieldValue(JRField jrField) throws JRException;\n```\n\n----------------------------------------\n\nTITLE: Building Complex WHERE Clauses with $X{} Syntax (JasperReports/XML)\nDESCRIPTION: This snippet presents the $X{} syntax within a JRXML <query> tag to construct advanced SQL clauses such as NOT IN lists based on collection parameters. JasperReports expands these expressions safely, handling correct SQL formation even with nulls or collections. Dependencies include properly configured collection parameters and a matching data source. Inputs are runtime lists or conditions; outputs are well-formed parameterized SQL statements.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <query>\\n    <![CDATA[SELECT Id, FirstName, LastName, Street, City, (Id < 30) as ConditionalField\\n      FROM Address\\n      WHERE $X{NOTIN, City, ExcludedCities}\\n      ORDER BY $P!{OrderClause}]] >\\n  </query>\n```\n\n----------------------------------------\n\nTITLE: Adding Report Bands Programmatically to JasperDesign in Java\nDESCRIPTION: This Java code snippet continues the process of building a JasperDesign object programmatically. It adds a detail band to the detail section, and then creates and sets new JRDesignBand instances for the column footer, page footer, and summary sections of the report design.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/noxmldesign/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    ((JRDesignSection)jasperDesign.getDetailSection()).addBand(band);\n\n    //Column footer\n    band = new JRDesignBand();\n    jasperDesign.setColumnFooter(band);\n\n    //Page footer\n    band = new JRDesignBand();\n    jasperDesign.setPageFooter(band);\n\n    //Summary\n    band = new JRDesignBand();\n    jasperDesign.setSummary(band);\n\n    return jasperDesign;\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Querying XML Data with XPath in JasperReports - XML\nDESCRIPTION: This XML snippet demonstrates how to set a report query using an XPath expression within a JasperReports .jrxml report definition. The query in this example filters Nodes named Orders, where CustomerID equals 'ALFKI', using the xPath query language. It requires JasperReports, a valid .jrxml file, and an XML data document as input. The XPath is wrapped in a CDATA section to ensure special characters are properly parsed. The input is a loaded XML document, and the output is the filtered node set for reporting; the only constraint is that the input XML must match the XPath's structure.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<query language=\"xPath\"><![CDATA[/Northwind/Orders[CustomerID='ALFKI']]]></query>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structure for CustomDataSource in Java\nDESCRIPTION: Initializes a two-dimensional array containing sample data to be used in a custom data source implementation. The data represents records with city, id, name, and street fields, along with an index for tracking the current position.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n private Object[][] data =\n  {\n   {\"Berne\", 22, \"Bill Ott\", \"250 - 20th Ave.\"},\n   {\"Berne\", 9, \"James Schneider\", \"277 Seventh Av.\"},\n   {\"Boston\", 32, \"Michael Ott\", \"339 College Av.\"},\n   {\"Boston\", 23, \"Julia Heiniger\", \"358 College Av.\"},\n   {\"Chicago\", 39, \"Mary Karsen\", \"202 College Av.\"},\n   {\"Chicago\", 35, \"George Karsen\", \"412 College Av.\"},\n   {\"Chicago\", 11, \"Julia White\", \"412 Upland Pl.\"},\n   {\"Dallas\", 47, \"Janet Fuller\", \"445 Upland Pl.\"},\n   {\"Dallas\", 43, \"Susanne Smith\", \"2 Upland Pl.\"},\n   {\"Dallas\", 40, \"Susanne Miller\", \"440 - 20th Ave.\"},\n   {\"Dallas\", 36, \"John Steel\", \"276 Upland Pl.\"},\n   {\"Dallas\", 37, \"Michael Clancy\", \"19 Seventh Av.\"},\n   {\"Dallas\", 19, \"Susanne Heiniger\", \"86 - 20th Ave.\"},\n   {\"Dallas\", 10, \"Anne Fuller\", \"135 Upland Pl.\"},\n   {\"Dallas\", 4, \"Sylvia Ringer\", \"365 College Av.\"},\n   {\"Dallas\", 0, \"Laura Steel\", \"429 Seventh Av.\"},\n   {\"Lyon\", 38, \"Andrew Heiniger\", \"347 College Av.\"},\n   {\"Lyon\", 28, \"Susanne White\", \"74 - 20th Ave.\"},\n   {\"Lyon\", 17, \"Laura Ott\", \"443 Seventh Av.\"},\n   {\"Lyon\", 2, \"Anne Miller\", \"20 Upland Pl.\"},\n   {\"New York\", 46, \"Andrew May\", \"172 Seventh Av.\"},\n   {\"New York\", 44, \"Sylvia Ott\", \"361 College Av.\"},\n   {\"New York\", 41, \"Bill King\", \"546 College Av.\"},\n   {\"Oslo\", 45, \"Janet May\", \"396 Seventh Av.\"},\n   {\"Oslo\", 42, \"Robert Ott\", \"503 Seventh Av.\"},\n   {\"Paris\", 25, \"Sylvia Steel\", \"269 College Av.\"},\n   {\"Paris\", 18, \"Sylvia Fuller\", \"158 - 20th Ave.\"},\n   {\"Paris\", 5, \"Laura Miller\", \"294 Seventh Av.\"},\n   {\"San Francisco\", 48, \"Robert White\", \"549 Seventh Av.\"},\n   {\"San Francisco\", 7, \"James Peterson\", \"231 Upland Pl.\"}\n  };\n\n  private int index = -1;\n```\n\n----------------------------------------\n\nTITLE: Defining Excel Data Adapter Interface - JasperReports Java\nDESCRIPTION: This Java interface, ExcelDataAdapter, extends from XlsDataAdapter and provides methods to get and set the Excel file format using the ExcelFormatEnum type. It enables configurable handling of Excel workbook input formats (e.g., xls, xlsx, autodetect) as part of the JasperReports data sourcing infrastructure. Dependency: ExcelFormatEnum; usable as part of a data source adapter registration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldataadapter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface ExcelDataAdapter extends XlsDataAdapter\n{\n  public ExcelFormatEnum getFormat();\n  public void setFormat(ExcelFormatEnum format);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Reports from Single Source Directory\nDESCRIPTION: Ant target that compiles JRXML files from a single source directory. It creates output directories, defines the compilation task, and specifies compilation parameters including validation and Java file retention.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antcompile/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"compile1\" description=\"Compiles report designs specified using the &quot;srcdir&quot; in the &lt;jrc&gt; tag.\" depends=\"prepare-sample-classpath\"> \n  <mkdir dir=\"./build/reports\"/> \n  <taskdef name=\"jrc\" classname=\"net.sf.jasperreports.ant.JRAntCompileTask\"> \n    <classpath refid=\"sample-classpath\"/>\n  </taskdef>\n  <jrc \n    srcdir=\"./reports\"\n    destdir=\"./build/reports\"\n    tempdir=\"./build/reports\"\n    keepjava=\"true\"\n    xmlvalidation=\"true\">\n  <classpath refid=\"sample-classpath\"/>\n  <include name=\"**/*.jrxml\"/>\n  </jrc>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Compiling Reports from Multiple Source Directories\nDESCRIPTION: Ant target that compiles JRXML files from multiple source locations using nested fileset definitions. It provides similar functionality to compile1 but with more flexible source file selection.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antcompile/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"compile2\" description=\"Compiles report designs specified using a &lt;fileset&gt; in the &lt;src&gt; tag.\" depends=\"prepare-sample-classpath\">\n  <mkdir dir=\"./build/reports\"/> \n  <taskdef name=\"jrc\" classname=\"net.sf.jasperreports.ant.JRAntCompileTask\"> \n    <classpath refid=\"sample-classpath\"/>\n  </taskdef>\n  <jrc \n      destdir=\"./build/reports\"\n      tempdir=\"./build/reports\"\n      keepjava=\"true\"\n      xmlvalidation=\"true\">\n    <src>\n      <fileset dir=\"./reports\">\n        <include name=\"**/*.jrxml\"/>\n      </fileset>\n    </src>\n    <classpath refid=\"sample-classpath\"/>\n  </jrc> \n</target>\n```\n\n----------------------------------------\n\nTITLE: Mapping Address Subreport Fields for JSON Export - JasperReports XML\nDESCRIPTION: This XML snippet configures the AddressReport.jrxml to map customer name and street fields to the correct place in the JSON structure using the 'customers.Name' and 'customers.Street' paths. Each text field uses the 'net.sf.jasperreports.export.json.path' property to indicate its destination node, following the JSON schema. This is necessary for JSON output to reflect the correct nested customer array.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport ...>\n  ...\n  <detail>\n    <band height=\\\"14\\\">\n      ...\n      <element kind=\\\"textField\\\" positionType=\\\"Float\\\" x=\\\"20\\\" y=\\\"2\\\" width=\\\"80\\\" height=\\\"10\\\" textAdjust=\\\"StretchHeight\\\">\n        <expression><![CDATA[$F{FirstName} + \\\" \\\" + $F{LastName}]] ></expression>\n        <property name=\\\"net.sf.jasperreports.export.json.path\\\" value=\\\"customers.Name\\\"/>\n      </element>\n      <element kind=\\\"textField\\\" positionType=\\\"Float\\\" x=\\\"105\\\" y=\\\"2\\\" width=\\\"70\\\" height=\\\"10\\\" textAdjust=\\\"StretchHeight\\\">\n        <expression><![CDATA[$F{Street}]] ></expression>\n        <property name=\\\"net.sf.jasperreports.export.json.path\\\" value=\\\"customers.Street\\\"/>\n      </element>\n    </band>\n  </detail>\n  ...\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Filling and Generating JasperReports Print File - JasperReports Java\nDESCRIPTION: This code snippet defines the 'fill()' and 'getJasperPrint()' methods for generating a JasperReport entirely at runtime using JasperReports APIs. No JRXML file is used; the report layout is defined programmatically, including styling and page elements such as lines, images, and various text fields. The report object is saved as a .jrprint file to a target directory using the JRSaver utility. Requires JasperReports, Java standard libraries, and properly referenced image resources. Inputs include styling and text parameters; output is a .jrprint file suitable for further export or printing.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/printservice/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n  public void fill() throws JRException\n  {\n    long start = System.currentTimeMillis();\n    JasperPrint jasperPrint = getJasperPrint();\n    File file = new File(\"target/reports/PrintServiceReport.jrprint\");\n    file.getParentFile().mkdirs();\n    JRSaver.saveObject(jasperPrint, file);\n    System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n  }\n  ...\n  private static JasperPrint getJasperPrint() throws JRException\n  {\n    //JasperPrint\n    JasperPrint jasperPrint = new JasperPrint();\n    jasperPrint.setName(\"NoReport\");\n    jasperPrint.setPageWidth(595);\n    jasperPrint.setPageHeight(842);\n\n    //Fonts\n    JRDesignStyle normalStyle = new JRDesignStyle();\n    normalStyle.setName(\"Sans_Normal\");\n    normalStyle.setDefault(true);\n    normalStyle.setFontName(\"DejaVu Sans\");\n    normalStyle.setFontSize(8f);\n    normalStyle.setPdfFontName(\"Helvetica\");\n    normalStyle.setPdfEncoding(\"Cp1252\");\n    normalStyle.setPdfEmbedded(Boolean.FALSE);\n    jasperPrint.addStyle(normalStyle);\n\n    JRDesignStyle boldStyle = new JRDesignStyle();\n    boldStyle.setName(\"Sans_Bold\");\n    boldStyle.setFontName(\"DejaVu Sans\");\n    boldStyle.setFontSize(8f);\n    boldStyle.setBold(Boolean.TRUE);\n    boldStyle.setPdfFontName(\"Helvetica-Bold\");\n    boldStyle.setPdfEncoding(\"Cp1252\");\n    boldStyle.setPdfEmbedded(Boolean.FALSE);\n    jasperPrint.addStyle(boldStyle);\n\n    JRDesignStyle italicStyle = new JRDesignStyle();\n    italicStyle.setName(\"Sans_Italic\");\n    italicStyle.setFontName(\"DejaVu Sans\");\n    italicStyle.setFontSize(8f);\n    italicStyle.setItalic(Boolean.TRUE);\n    italicStyle.setPdfFontName(\"Helvetica-Oblique\");\n    italicStyle.setPdfEncoding(\"Cp1252\");\n    italicStyle.setPdfEmbedded(Boolean.FALSE);\n    jasperPrint.addStyle(italicStyle);\n\n    JRPrintPage page = new JRBasePrintPage();\n\n    JRPrintLine line = new JRBasePrintLine(jasperPrint.getDefaultStyleProvider());\n    line.setX(40);\n    line.setY(50);\n    line.setWidth(515);\n    line.setHeight(0);\n    page.addElement(line);\n\n    JRPrintImage image = new JRBasePrintImage(jasperPrint.getDefaultStyleProvider());\n    image.setX(45);\n    image.setY(55);\n    image.setWidth(165);\n    image.setHeight(40);\n    image.setScaleImage(ScaleImageEnum.CLIP);\n    image.setRenderer(\n      ResourceRenderer.getInstance(\"jasperreports.png\", false)\n      );\n    page.addElement(image);\n\n    JRPrintText text = new JRBasePrintText(jasperPrint.getDefaultStyleProvider());\n    text.setX(210);\n    text.setY(55);\n    text.setWidth(345);\n    text.setHeight(30);\n    text.setTextHeight(text.getHeight());\n    text.sethTextAlign(hTextAlignEnum.RIGHT);\n    text.setLineSpacingFactor(1.3133681f);\n    text.setLeadingOffset(-4.955078f);\n    text.setStyle(boldStyle);\n    text.setFontSize(18f);\n    text.setText(\"JasperReports Project Description\");\n    page.addElement(text);\n\n    text = new JRBasePrintText(jasperPrint.getDefaultStyleProvider());\n    text.setX(210);\n    text.setY(85);\n    text.setWidth(325);\n    text.setHeight(15);\n    text.setTextHeight(text.getHeight());\n    text.sethTextAlign(hTextAlignEnum.RIGHT);\n    text.setLineSpacingFactor(1.329241f);\n    text.setLeadingOffset(-4.076172f);\n    text.setStyle(italicStyle);\n    text.setFontSize(12f);\n    text.setText((new SimpleDateFormat(\"EEE, MMM d, yyyy\")).format(new Date()));\n    page.addElement(text);\n\n    text = new JRBasePrintText(jasperPrint.getDefaultStyleProvider());\n    text.setX(40);\n    text.setY(150);\n    text.setWidth(515);\n    text.setHeight(200);\n    text.setTextHeight(text.getHeight());\n    text.sethTextAlign(hTextAlignEnum.JUSTIFIED);\n    text.setLineSpacingFactor(1.329241f);\n    text.setLeadingOffset(-4.076172f);\n    text.setStyle(normalStyle);\n    text.setFontSize(14f);\n    text.setText(\n      \"JasperReports is a powerful report-generating tool that has the ability to deliver rich content onto the screen, \" +\n      \"to the printer or into PDF, HTML, XLS, CSV or XML files.\\n\\n\" +\n      \"It is entirely written in Java and can be used in a variety of Java enabled applications, including J2EE or Web applications, \" +\n      \"to generate dynamic content.\\n\\n\" +\n      \"Its main purpose is to help creating page oriented, ready to print documents in a simple and flexible manner.\"\n      );\n    page.addElement(text);\n\n    jasperPrint.addPage(page);\n\n    return jasperPrint;\n  }\n```\n\n----------------------------------------\n\nTITLE: Using JRXmlWriter to Write JRXML from JasperReport Object in Java\nDESCRIPTION: This Java code snippet demonstrates the core logic for decompiling a single report. It first loads a compiled JasperReport object from a `.jasper` file (`srcFileName`) using `JRLoader.loadObjectFromFile()`. Then, it instantiates a `JRXmlWriter` and calls its `write()` method to generate the corresponding JRXML content into a destination file (`destFileName`) using UTF-8 encoding.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antcompile/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n...\nJasperReport jasperReport = (JasperReport)JRLoader.loadObjectFromFile(srcFileName);\n        \nnew JRXmlWriter(jasperReportsContext).write(jasperReport, destFileName, \"UTF-8\");\n...\n```\n\n----------------------------------------\n\nTITLE: Filling JasperReport with CustomDataSource in Java\nDESCRIPTION: Method that demonstrates how to fill a JasperReport with data from a CustomDataSource. It sets up report parameters including the report title and data file name, then uses JasperFillManager to fill the report with the custom data source.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n public void fill1() throws JRException\n {\n  long start = System.currentTimeMillis();\n  //Preparing parameters\n  Map parameters = new HashMap();\n  parameters.put(\"ReportTitle\", \"Address Report\");\n  parameters.put(\"DataFile\", \"CustomDataSource.java\");\n\n  JasperFillManager.fillReportToFile(\"build/reports/DataSourceReport.jasper\",\n    parameters, new CustomDataSource());\n  System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n }\n```\n\n----------------------------------------\n\nTITLE: Specifying XLS Data Adapter Interface - JasperReports Java\nDESCRIPTION: This interface, XlsDataAdapter, describes the contract for adapters that source data from Excel-formatted files. It includes multiple getter and setter methods to configure file name, patterns for dates and numbers, column names and indexes, sheet selection, and control flags like useFirstRowAsHeader and queryExecuterMode. It provides the foundational properties for controlling Excel data ingestion. Dependencies: requires DataAdapter, assumes Excel document access via string paths or Java List collections.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldataadapter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface XlsDataAdapter extends DataAdapter\n{\n  public String getDatePattern();\n  public String getNumberPattern();\n  public String getFileName();\n  public void setFileName(String filename);\n  public boolean isUseFirstRowAsHeader();\n  public List<String> getColumnNames();\n  public List<Integer> getColumnIndexes();\n  public void setColumnNames(List<String> columnNames);\n  public void setColumnIndexes(List<Integer> columnIndexes);\n  public void setUseFirstRowAsHeader(boolean useFirstRowAsHeader);\n  public void setDatePattern(String datePattern);\n  public void setNumberPattern(String numberPattern);\n  public boolean isQueryExecuterMode();\n  public void setQueryExecuterMode(boolean queryExecuterMode);\n  public String getSheetSelection();\n  public void setSheetSelection(String sheetSelection);\n}\n```\n\n----------------------------------------\n\nTITLE: Filling the JasperReport with XChart Component Using CSV DataSource (Java)\nDESCRIPTION: Demonstrates how to programmatically fill a JasperReports report using the custom XChart component and a CSV data source in Java. This snippet depends on JasperReports core classes and a properly configured CSV data file; parameters configured here are consumed by JRXML. The fill() method loads data, sets up report parameters, and calls the fillReportToFile method, then prints timing information, returning no output except for the generated files and log; exceptions are propagated as JRException. Ensure the data source path and encoding are correct.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xchartcomponent/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void fill() throws JRException\\n{\\n  long start = System.currentTimeMillis();\\n  Map<String, Object> parameters = new HashMap<String, Object>();\\n  try\\n  {\\n    JRCsvDataSource xyds = new JRCsvDataSource(\\n        JRLoader.getLocationInputStream(\\\"data/xyDatasource.csv\\\"),\\n        \\\"UTF-8\\\");\\n    xyds.setRecordDelimiter(\\\"\\r\\n\\\");\\n    xyds.setUseFirstRowAsHeader(true);\\n    parameters.put(\\\"xyDatasource\\\", xyds);\\n  }\\n  catch (Exception e)\\n  {\\n    throw new JRException(e);\\n  }\\n  JasperFillManager.fillReportToFile(\\n      \\\"build/reports/XYChart.jasper\\\",\\n      new HashMap<String, Object>(parameters),\\n      new JREmptyDataSource());\\n  System.err.println(\\\"Filling time : \\\" + (System.currentTimeMillis() - start));\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JR List Component with Runtime Parameters - JasperReports XML\nDESCRIPTION: This example shows the JRXML configuration for a list component that fetches paginated results using the MoviesDataset subdataset. Runtime parameters ('title' and 'page') are dynamically passed to control list data and paging, linking dataset fields to top-level report expressions. Requires fields and report parameters appropriately defined and attached to the MoviesDataset.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<jr:list printOrder=\\\"Vertical\\\">\\n  <datasetRun subDataset=\\\"MoviesDataset\\\">\\n    <datasetParameter name=\\\"title\\\">\\n      <datasetParameterExpression><![CDATA[$P{title}]] ></datasetParameterExpression>\\n    </datasetParameter>\\n    <datasetParameter name=\\\"page\\\">\\n      <datasetParameterExpression><![CDATA[$V{REPORT_COUNT}]] ></datasetParameterExpression>\\n    </datasetParameter>\\n  </datasetRun>\\n  <jr:listContents height=\\\"65\\\" width=\\\"170\\\">\\n    ...\\n  </jr:listContents>\\n</jr:list>\n```\n\n----------------------------------------\n\nTITLE: XML Rectangle Elements Definition in JasperReports\nDESCRIPTION: XML definition of three rectangle elements in the report template, each with a unique key attribute for later identification and modification.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/alterdesign/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"rectangle\" key=\"first.rectangle\" y=\"100\" width=\"555\" height=\"90\">\n  <pen lineWidth=\"4.0\"/>\n</element>\n<element kind=\"rectangle\" key=\"second.rectangle\" y=\"200\" width=\"555\" height=\"90\">\n  <pen lineWidth=\"4.0\"/>\n</element>\n<element kind=\"rectangle\" key=\"third.rectangle\" y=\"300\" width=\"555\" height=\"90\">\n  <pen lineWidth=\"4.0\"/>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Configuring JasperReports Extension and Spring Beans for XChart Component (XML)\nDESCRIPTION: Shows how to declare JasperReports extension properties for registering the custom XChart component with the JasperReports runtime, leveraging Spring for bean configuration and component management. Dependencies include the JasperReports engine and Spring Framework. This code sets up property entries for extension loading, and defines beans and wiring for the component's parser, manager, compiler, and fill factory—integration crucial for runtime discovery and chart rendering.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xchartcomponent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nnet.sf.jasperreports.extension.registry.factory.xchart=net.sf.jasperreports.extensions.SpringExtensionsRegistryFactory\\nnet.sf.jasperreports.extension.xchart.spring.beans.resource=xchart/xchart_beans.xml\n```\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\\\"componentsBundle\\\" class=\\\"net.sf.jasperreports.engine.component.DefaultComponentsBundle\\\">\\n  <property name=\\\"xmlParser\\\">\\n    <ref bean=\\\"xmlParser\\\"/>\\n  </property>\\n  <property name=\\\"componentManagers\\\">\\n    <map>\\n      <entry key=\\\"XYChart\\\">\\n        <ref bean=\\\"XYChartManager\\\"/>\\n      </entry>\\n    </map>\\n  </property>\\n</bean>\\n\\n<bean id=\\\"xmlParser\\\" class=\\\"net.sf.jasperreports.engine.component.DefaultComponentXmlParser\\\">\\n  <property name=\\\"namespace\\\">\\n    <value>http://jasperreports.sourceforge.net/jasperreports/xchart</value>\\n  </property>\\n  <property name=\\\"publicSchemaLocation\\\">\\n    <value>http://jasperreports.sourceforge.net/dtds/xchart.xsd</value>\\n  </property>\\n  <property name=\\\"internalSchemaResource\\\">\\n    <value>xchart/xchart.xsd</value>\\n  </property>\\n  <property name=\\\"digesterConfigurer\\\">\\n    <bean class=\\\"xchart.XChartDigester\\\"/>\\n</property>\\n</bean>\\n\\n<bean id=\\\"XYChartManager\\\" class=\\\"net.sf.jasperreports.engine.component.DefaultComponentManager\\\">\\n  <property name=\\\"componentCompiler\\\">\\n    <bean class=\\\"xchart.XYChartCompiler\\\"/>\\n  </property>\\n  <property name=\\\"componentXmlWriter\\\">\\n    <bean class=\\\"xchart.XYChartXmlWriter\\\"/>\\n  </property>\\n  <property name=\\\"componentFillFactory\\\">\\n    <bean class=\\\"xchart.XYChartFillFactory\\\"/>\\n  </property>\\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Report with ToC and Content Parts in JRXML\nDESCRIPTION: Defines the main JasperReport (`TableOfContentsReport.jrxml`) configured for Table of Contents generation using `sectionType=\"Part\"` and enabling bookmark creation via the `net.sf.jasperreports.print.create.bookmarks` property. It includes two report parts: the first part (`TocPart.jasper`) for the ToC with `evaluationTime=\"Report\"` and the second part (`TablePart.jasper`) for the report content.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tableofcontents/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport name=\"TableOfContentsReport\" sectionType=\"Part\" ...>\n  <property name=\"net.sf.jasperreports.print.create.bookmarks\" value=\"true\"/>\n  ...\n  <group name=\"dummy\">\n    <expression><![CDATA[1]] ></expression>\n    <groupHeader>\n      <part evaluationTime=\"Report\">\n        <property name=\"net.sf.jasperreports.bookmarks.data.source.parameter\" value=\"REPORT_DATA_SOURCE\"/>\n        <partNameExpression><![CDATA[\"Table of Contents\"]] ></partNameExpression>\n        <component kind=\"subreportPart\" usingCache=\"true\">\n          <expression><![CDATA[\"TocPart.jasper\"]] ></expression>\n          <parameter name=\"ReportTitle\">\n            <expression><![CDATA[$P{ReportTitle}]] ></expression>\n          </parameter>\n        </component>\n      </part>\n      <part>\n        <partNameExpression><![CDATA[\"Countries\"]] ></partNameExpression>\n        <component kind=\"subreportPart\" usingCache=\"true\">\n          <expression><![CDATA[\"TablePart.jasper\"]] ></expression>\n          <parameter name=\"REPORT_CONNECTION\">\n            <expression><![CDATA[$P{REPORT_CONNECTION}]] ></expression>\n          </parameter>\n          <parameter name=\"ReportTitle\">\n            <expression><![CDATA[$P{ReportTitle}]] ></expression>\n          </parameter>\n        </component>\n      </part>\n    </groupHeader>\n  </group>\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Configuring JasperReports Virtualizer Parameter in Java\nDESCRIPTION: This Java snippet, found in the `fillReport(JRFileVirtualizer virtualizer)` method, illustrates how to configure the JasperReports engine to use a previously instantiated virtualizer (`virtualizer` object). It involves creating a parameter `Map` and adding the virtualizer instance to it using the `JRParameter.REPORT_VIRTUALIZER` key. This map is then passed to the report filling process, enabling virtualization. Requires the JasperReports library (`net.sf.jasperreports.engine.JRParameter`) and a `JRVirtualizer` instance.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/virtualizer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//Preparing parameters\nMap parameters = new HashMap();\nparameters.put(JRParameter.REPORT_VIRTUALIZER, virtualizer);\n```\n\n----------------------------------------\n\nTITLE: Loading Compiled JasperReport Template\nDESCRIPTION: Java code to load a compiled JasperReport template from a .jasper file using JRLoader.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/alterdesign/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nFile sourceFile = new File(\"target/reports/AlterDesignReport.jasper\");\n...\nJasperReport jasperReport = (JasperReport)JRLoader.loadObject(sourceFile);\n```\n\n----------------------------------------\n\nTITLE: Filling the Report with XML Data in Java - Java\nDESCRIPTION: Java method that prepares parameters, loads and parses Northwind XML data, configures data formatting patterns and locales, and fills a Jasper report using JasperFillManager. Prerequisites: JasperReports library, 'data/northwind.xml', compiled report templates. Input: None (other than files). Output: Populated report file in the output directory. Limitations: Handles exceptions via JRException, hardcoded path names, assumes environment is pre-configured as described.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n  public void fill() throws JRException\\n  {\\n  \\tlong start = System.currentTimeMillis();\\n  \\tMap<String, Object> params = new HashMap<String, Object>();\\n  \\tDocument document = JRXmlUtils.parse(JRLoader.getLocationInputStream(\\\"data/northwind.xml\\\"));\\n  \\tparams.put(JRXPathQueryExecuterFactory.PARAMETER_XML_DATA_DOCUMENT, document);\\n  \\tparams.put(JRXPathQueryExecuterFactory.XML_DATE_PATTERN, \\\"yyyy-MM-dd\\\");\\n  \\tparams.put(JRXPathQueryExecuterFactory.XML_NUMBER_PATTERN, \\\"#,##0.##\\\");\\n  \\tparams.put(JRXPathQueryExecuterFactory.XML_LOCALE, Locale.ENGLISH);\\n  \\tparams.put(JRParameter.REPORT_LOCALE, Locale.US);\\n\\n  \\tJasperFillManager.fillReportToFile(\\\"target/reports/CustomersReport.jasper\\\", params);\\n  \\tSystem.err.println(\\\"Filling time : \\\" + (System.currentTimeMillis() - start));\\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Spider Chart Component in JasperReports (JRXML)\nDESCRIPTION: This JRXML snippet defines a spider chart component within a JasperReports element. It configures chart settings like legend visibility, colors, fonts, title/subtitle expressions, and a customizer class. It also defines the dataset structure using series, category, and value expressions, and sets various plot properties including rotation, colors, angles, fonts, and a maximum value expression.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/spiderchartcomponent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"component\" mode=\"Opaque\" x=\"50\" y=\"90\" width=\"400\" height=\"400\">\n  <component kind=\"spiderChart\">\n    <chartSettings showLegend=\"true\" backcolor=\"#00FF00\" subtitleColor=\"#0000FF\" legendBackgroundColor=\"#EEFFEE\"\n      titlePosition=\"Top\" customizerClass=\"SpiderChartCustomizer\">\n      <titleFont italic=\"true\" fontSize=\"12.0\"/>\n      <subtitleFont bold=\"true\" fontSize=\"6.0\"/>\n      <legendFont fontSize=\"6.0\"/>\n      <titleExpression><![CDATA[\"Spider Chart\"]] ></titleExpression>\n      <subtitleExpression><![CDATA[\"Chart Displaying Spider Web Contours\"]] ></subtitleExpression>\n      <hyperlinkTooltipExpression><![CDATA[\"Spider Chart\"]] ></hyperlinkTooltipExpression>\n    </chartSettings>\n    <dataset incrementType=\"Group\" incrementGroup=\"category\">\n      <series>\n        <seriesExpression><![CDATA[$F{series}]] ></seriesExpression>\n        <categoryExpression><![CDATA[$F{category}]] ></categoryExpression>\n        <valueExpression><![CDATA[$F{value}]] ></valueExpression>\n        <itemHyperlink linkType=\"Reference\" linkTarget=\"Blank\">\n          <hyperlinkReferenceExpression>\n            <![CDATA[\"http://www.jfree.org/jfreechart/api/javadoc/org/jfree/chart/plot/SpiderWebPlot.html\"]] >\n          </hyperlinkReferenceExpression>\n        </itemHyperlink>\n      </series>\n    </dataset>\n    <plot rotation=\"Anticlockwise\" tableOrder=\"Row\" startAngle=\"39.0\" headPercent=\"0.01\" interiorGap=\"0.2\"\n      axisLineColor=\"#FF0000\" axisLineWidth=\"2.0\" labelGap=\"0.05\" backcolor=\"#FFFF00\">\n      <labelFont bold=\"true\" italic=\"true\" fontSize=\"6.0\"/>\n      <maxValueExpression><![CDATA[10d]] ></maxValueExpression>\n    </plot>\n  </component>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Creating JasperDesign Object Programmatically in Java\nDESCRIPTION: Demonstrates how to create a complete JasperDesign object programmatically by setting page properties, defining styles, parameters, fields, variables, groups and layout elements. The code creates a report design with title, page header, detail sections and grouping functionality.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/noxmldesign/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  private static JasperDesign getJasperDesign() throws JRException\n  {\n    //JasperDesign\n    JasperDesign jasperDesign = new JasperDesign();\n    jasperDesign.setName(\"NoXmlDesignReport\");\n    jasperDesign.setPageWidth(595);\n    jasperDesign.setPageHeight(842);\n    jasperDesign.setColumnWidth(515);\n    jasperDesign.setColumnSpacing(0);\n    jasperDesign.setLeftMargin(40);\n    jasperDesign.setRightMargin(40);\n    jasperDesign.setTopMargin(50);\n    jasperDesign.setBottomMargin(50);\n\n    //Fonts\n    JRDesignStyle normalStyle = new JRDesignStyle();\n    normalStyle.setName(\"Sans_Normal\");\n    normalStyle.setDefault(true);\n    normalStyle.setFontName(\"DejaVu Sans\");\n    normalStyle.setFontSize(12f);\n    normalStyle.setPdfFontName(\"Helvetica\");\n    normalStyle.setPdfEncoding(\"Cp1252\");\n    normalStyle.setPdfEmbedded(Boolean.FALSE);\n    jasperDesign.addStyle(normalStyle);\n\n    JRDesignStyle boldStyle = new JRDesignStyle();\n    boldStyle.setName(\"Sans_Bold\");\n    boldStyle.setFontName(\"DejaVu Sans\");\n    boldStyle.setFontSize(12f);\n    boldStyle.setBold(Boolean.TRUE);\n    boldStyle.setPdfFontName(\"Helvetica-Bold\");\n    boldStyle.setPdfEncoding(\"Cp1252\");\n    boldStyle.setPdfEmbedded(Boolean.FALSE);\n    jasperDesign.addStyle(boldStyle);\n\n    JRDesignStyle italicStyle = new JRDesignStyle();\n    italicStyle.setName(\"Sans_Italic\");\n    italicStyle.setFontName(\"DejaVu Sans\");\n    italicStyle.setFontSize(12f);\n    italicStyle.setItalic(Boolean.TRUE);\n    italicStyle.setPdfFontName(\"Helvetica-Oblique\");\n    italicStyle.setPdfEncoding(\"Cp1252\");\n    italicStyle.setPdfEmbedded(Boolean.FALSE);\n    jasperDesign.addStyle(italicStyle);\n\n    //Parameters\n    JRDesignParameter parameter = new JRDesignParameter();\n    parameter.setName(\"ReportTitle\");\n    parameter.setValueClass(java.lang.String.class);\n    jasperDesign.addParameter(parameter);\n\n    parameter = new JRDesignParameter();\n    parameter.setName(\"OrderByClause\");\n    parameter.setValueClass(java.lang.String.class);\n    jasperDesign.addParameter(parameter);\n\n    //Query\n    JRDesignQuery query = new JRDesignQuery();\n    query.setText(\"SELECT * FROM Address $P!{OrderByClause}\");\n    jasperDesign.setQuery(query);\n\n    //Fields\n    JRDesignField field = new JRDesignField();\n    field.setName(\"Id\");\n    field.setValueClass(java.lang.Integer.class);\n    jasperDesign.addField(field);\n\n    field = new JRDesignField();\n    field.setName(\"FirstName\");\n    field.setValueClass(java.lang.String.class);\n    jasperDesign.addField(field);\n\n    field = new JRDesignField();\n    field.setName(\"LastName\");\n    field.setValueClass(java.lang.String.class);\n    jasperDesign.addField(field);\n\n    field = new JRDesignField();\n    field.setName(\"Street\");\n    field.setValueClass(java.lang.String.class);\n    jasperDesign.addField(field);\n\n    field = new JRDesignField();\n    field.setName(\"City\");\n    field.setValueClass(java.lang.String.class);\n    jasperDesign.addField(field);\n\n    //Variables\n    JRDesignVariable variable = new JRDesignVariable();\n    variable.setName(\"CityNumber\");\n    variable.setValueClass(java.lang.Integer.class);\n    variable.setResetType(ResetTypeEnum.GROUP);\n    JRDesignGroup group = new JRDesignGroup();\n    group.setName(\"CityGroup\");\n    variable.setResetGroup(group.getName());\n    variable.setCalculation(CalculationEnum.SYSTEM);\n    variable.setInitialValueExpression(new JRDesignExpression(\"$V{CityNumber} == null ? 1 : ($V{CityNumber} + 1)\"));\n    jasperDesign.addVariable(variable);\n\n    variable = new JRDesignVariable();\n    variable.setName(\"AllCities\");\n    variable.setValueClass(java.lang.String.class);\n    variable.setResetType(ResetTypeEnum.REPORT);\n    variable.setCalculation(CalculationEnum.SYSTEM);\n    jasperDesign.addVariable(variable);\n\n    //Groups\n    group.setMinHeightToStartNewPage(60);\n    group.setExpression(new JRDesignExpression(\"$F{City}\"));\n\n    JRDesignBand band = new JRDesignBand();\n    band.setHeight(20);\n    JRDesignTextField textField = new JRDesignTextField();\n    textField.setX(0);\n    textField.setY(4);\n    textField.setWidth(515);\n    textField.setHeight(15);\n    textField.setBackcolor(new Color(0xC0, 0xC0, 0xC0));\n    textField.setMode(ModeEnum.OPAQUE);\n    textField.sethTextAlign(hTextAlignEnum.LEFT);\n    textField.setStyle(boldStyle);\n    textField.setExpression(new JRDesignExpression(\"\\\"  \\\" + String.valueOf($V{CityNumber}) + \\\". \\\" + String.valueOf($F{City})\"));\n    band.addElement(textField);\n    JRDesignLine line = new JRDesignLine();\n    line.setX(0);\n    line.setY(19);\n    line.setWidth(515);\n    line.setHeight(0);\n    band.addElement(line);\n    ((JRDesignSection)group.getGroupHeaderSection()).addBand(band);\n\n    band = new JRDesignBand();\n    band.setHeight(20);\n    line = new JRDesignLine();\n    line.setX(0);\n    line.setY(-1);\n    line.setWidth(515);\n    line.setHeight(0);\n    band.addElement(line);\n    JRDesignStaticText staticText = new JRDesignStaticText();\n    staticText.setX(400);\n    staticText.setY(0);\n    staticText.setWidth(60);\n    staticText.setHeight(15);\n    staticText.sethTextAlign(hTextAlignEnum.RIGHT);\n    staticText.setStyle(boldStyle);\n    staticText.setText(\"Count : \");\n    band.addElement(staticText);\n    textField = new JRDesignTextField();\n    textField.setX(460);\n    textField.setY(0);\n    textField.setWidth(30);\n    textField.setHeight(15);\n    textField.sethTextAlign(hTextAlignEnum.RIGHT);\n    textField.setStyle(boldStyle);\n    textField.setExpression(new JRDesignExpression(\"$V{CityGroup_COUNT}\"));\n    band.addElement(textField);\n    ((JRDesignSection)group.getGroupFooterSection()).addBand(band);\n\n    jasperDesign.addGroup(group);\n\n    //Title\n    band = new JRDesignBand();\n    band.setHeight(50);\n    line = new JRDesignLine();\n    line.setX(0);\n    line.setY(0);\n    line.setWidth(515);\n    line.setHeight(0);\n    band.addElement(line);\n    textField = new JRDesignTextField();\n    textField.setBlankWhenNull(true);\n    textField.setX(0);\n    textField.setY(10);\n    textField.setWidth(515);\n    textField.setHeight(30);\n    textField.sethTextAlign(hTextAlignEnum.CENTER);\n    textField.setStyle(normalStyle);\n    textField.setFontSize(22f);\n    textField.setExpression(new JRDesignExpression(\"$P{ReportTitle}\"));\n    band.addElement(textField);\n    jasperDesign.setTitle(band);\n\n    //Page header\n    band = new JRDesignBand();\n    band.setHeight(20);\n    JRDesignFrame frame = new JRDesignFrame();\n    frame.setX(0);\n    frame.setY(5);\n    frame.setWidth(515);\n    frame.setHeight(15);\n    frame.setForecolor(new Color(0x33, 0x33, 0x33));\n    frame.setBackcolor(new Color(0x33, 0x33, 0x33));\n    frame.setMode(ModeEnum.OPAQUE);\n    band.addElement(frame);\n    staticText = new JRDesignStaticText();\n    staticText.setX(0);\n    staticText.setY(0);\n    staticText.setWidth(55);\n    staticText.setHeight(15);\n    staticText.setForecolor(Color.white);\n    staticText.setBackcolor(new Color(0x33, 0x33, 0x33));\n    staticText.setMode(ModeEnum.OPAQUE);\n    staticText.sethTextAlign(hTextAlignEnum.CENTER);\n    staticText.setStyle(boldStyle);\n    staticText.setText(\"ID\");\n    frame.addElement(staticText);\n    staticText = new JRDesignStaticText();\n    staticText.setX(55);\n    staticText.setY(0);\n    staticText.setWidth(205);\n    staticText.setHeight(15);\n    staticText.setForecolor(Color.white);\n    staticText.setBackcolor(new Color(0x33, 0x33, 0x33));\n    staticText.setMode(ModeEnum.OPAQUE);\n    staticText.setStyle(boldStyle);\n    staticText.setText(\"Name\");\n    frame.addElement(staticText);\n    staticText = new JRDesignStaticText();\n    staticText.setX(260);\n    staticText.setY(0);\n    staticText.setWidth(255);\n    staticText.setHeight(15);\n    staticText.setForecolor(Color.white);\n    staticText.setBackcolor(new Color(0x33, 0x33, 0x33));\n    staticText.setMode(ModeEnum.OPAQUE);\n    staticText.setStyle(boldStyle);\n    staticText.setText(\"Street\");\n    frame.addElement(staticText);\n    jasperDesign.setPageHeader(band);\n\n    //Column header\n    band = new JRDesignBand();\n    jasperDesign.setColumnHeader(band);\n\n    //Detail\n    band = new JRDesignBand();\n    band.setHeight(20);\n    textField = new JRDesignTextField();\n    textField.setX(0);\n    textField.setY(4);\n    textField.setWidth(50);\n    textField.setHeight(15);\n    textField.sethTextAlign(hTextAlignEnum.RIGHT);\n    textField.setStyle(normalStyle);\n    textField.setExpression(new JRDesignExpression(\"$F{Id}\"));\n    band.addElement(textField);\n    textField = new JRDesignTextField();\n    textField.setTextAdjust(TextAdjustEnum.STRETCH_HEIGHT);\n    textField.setX(55);\n    textField.setY(4);\n    textField.setWidth(200);\n    textField.setHeight(15);\n    textField.setPositionType(PositionTypeEnum.FLOAT);\n    textField.setStyle(normalStyle);\n    textField.setExpression(new JRDesignExpression(\"$F{FirstName} + \\\" \\\" + $F{LastName}\"));\n    band.addElement(textField);\n    textField = new JRDesignTextField();\n    textField.setTextAdjust(TextAdjustEnum.STRETCH_HEIGHT);\n    textField.setX(260);\n    textField.setY(4);\n    textField.setWidth(255);\n    textField.setHeight(15);\n    textField.setPositionType(PositionTypeEnum.FLOAT);\n    textField.setStyle(normalStyle);\n    textField.setExpression(new JRDesignExpression(\"$F{Street}\"));\n    band.addElement(textField);\n    line = new JRDesignLine();\n    line.setX(0);\n    line.setY(19);\n    line.setWidth(515);\n    line.setHeight(0);\n    line.setForecolor(new Color(0x80, 0x80, 0x80));\n    line.setPositionType(PositionTypeEnum.FLOAT);\n    band.addElement(line);\n```\n\n----------------------------------------\n\nTITLE: Building and Running JasperReports Sample with Maven (Shell)\nDESCRIPTION: This shell command uses Apache Maven to build and run the JasperReports spider chart component sample. It executes the `clean`, `compile`, and `exec:exec@all` goals. The `exec:exec@all` goal likely runs a configured execution to generate the sample report in various formats into the `target/reports` directory. Requires Maven 3.6+.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/spiderchartcomponent/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining JasperReports JSON HTTP Data Adapter in XML\nDESCRIPTION: This XML configuration, typically found in a `.jrdax` file, defines a JasperReports data adapter named 'JSON Http Data Adapter' using the 'net.sf.jasperreports.data.json.JsonDataAdapterImpl' class. It specifies an HTTP GET request to 'https://www.omdbapi.com/?r=json' to fetch JSON data, identified by the 'httpDataLocation' type for the 'dataFile' element. It includes settings for connection usage (`useConnection`), time zone (Europe/Bucharest), and locale (ro_RO). The 'selectExpression' is left empty, indicating it should be provided within the report definition.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<jsonDataAdapter class=\"net.sf.jasperreports.data.json.JsonDataAdapterImpl\">\n  <name>JSON Http Data Adapter</name>\n  <dataFile xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:type=\"httpDataLocation\">\n    <method>GET</method>\n    <url><![CDATA[https://www.omdbapi.com/?r=json]] ></url>\n  </dataFile>\n  <useConnection>true</useConnection>\n  <timeZone xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:java=\"http://java.sun.com\" xsi:type=\"java:java.lang.String\">Europe/Bucharest</timeZone>\n  <locale xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:java=\"http://java.sun.com\" xsi:type=\"java:java.lang.String\">ro_RO</locale>\n  <selectExpression></selectExpression>\n</jsonDataAdapter>\n```\n\n----------------------------------------\n\nTITLE: Injecting Parameters into JRXML Queries (JasperReports/XML)\nDESCRIPTION: This code snippet shows how to use the $P{} syntax within a JRXML <query> element to inject a template parameter (e.g., CityParam) into a SQL statement. The JasperReports engine automatically places the correct value and applies proper quoting when filling the report. Requires a defined report parameter and a valid JDBC data source. The main input is a parameter passed at runtime; the output is a parameterized SQL query executed through JDBC.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <query>\\n    <![CDATA[SELECT Id, FirstName, LastName, Street, City\\n      FROM Address WHERE City = $P{CityParam}]] >\\n  </query>\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Encryption Settings in JasperReports\nDESCRIPTION: Demonstrates how to configure PDF encryption settings including 128-bit encryption, user/owner passwords, and specific document permissions using SimplePdfExporterConfiguration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/pdfencrypt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  SimplePdfExporterConfiguration configuration = new SimplePdfExporterConfiguration();\n  configuration.setEncrypted(true);\n  configuration.set128BitKey(true);\n  configuration.setUserPassword(\"jasper\");\n  configuration.setOwnerPassword(\"reports\");\n  configuration.setPermissions(PdfWriter.ALLOW_COPY | PdfWriter.ALLOW_PRINTING);\n  exporter.setConfiguration(configuration);\n```\n\n----------------------------------------\n\nTITLE: Creating a Factory for JavaBean Data Sources (Java)\nDESCRIPTION: Defines the `CustomBeanFactory` class which provides static methods to supply data for JasperReports. It contains a predefined static array of `CustomBean` objects. The `getBeanArray()` method returns this data as an `Object[]`, suitable for `JRBeanArrayDataSource`, while `getBeanCollection()` returns it as a `java.util.Collection` (specifically a `List`), suitable for `JRBeanCollectionDataSource`.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomBeanFactory\n{\n private static CustomBean[] data =\n  {\n   new CustomBean(\"Berne\", 9, \"James Schneider\", \"277 Seventh Av.\"),\n   new CustomBean(\"Berne\", 22, \"Bill Ott\", \"250 - 20th Ave.\"),\n   new CustomBean(\"Boston\", 23, \"Julia Heiniger\", \"358 College Av.\"),\n   new CustomBean(\"Boston\", 32, \"Michael Ott\", \"339 College Av.\"),\n   new CustomBean(\"Chicago\", 39, \"Mary Karsen\", \"202 College Av.\"),\n   new CustomBean(\"Chicago\", 35, \"George Karsen\", \"412 College Av.\"),\n   new CustomBean(\"Chicago\", 11, \"Julia White\", \"412 Upland Pl.\"),\n   new CustomBean(\"Dallas\", 47, \"Janet Fuller\", \"445 Upland Pl.\"),\n   new CustomBean(\"Dallas\", 43, \"Susanne Smith\", \"2 Upland Pl.\"),\n   new CustomBean(\"Dallas\", 40, \"Susanne Miller\", \"440 - 20th Ave.\"),\n   new CustomBean(\"Dallas\", 36, \"John Steel\", \"276 Upland Pl.\"),\n   new CustomBean(\"Dallas\", 37, \"Michael Clancy\", \"19 Seventh Av.\"),\n   new CustomBean(\"Dallas\", 19, \"Susanne Heiniger\", \"86 - 20th Ave.\"),\n   new CustomBean(\"Dallas\", 10, \"Anne Fuller\", \"135 Upland Pl.\"),\n   new CustomBean(\"Dallas\", 4, \"Sylvia Ringer\", \"365 College Av.\"),\n   new CustomBean(\"Dallas\", 0, \"Laura Steel\", \"429 Seventh Av.\"),\n   new CustomBean(\"Lyon\", 38, \"Andrew Heiniger\", \"347 College Av.\"),\n   new CustomBean(\"Lyon\", 28, \"Susanne White\", \"74 - 20th Ave.\"),\n   new CustomBean(\"Lyon\", 17, \"Laura Ott\", \"443 Seventh Av.\"),\n   new CustomBean(\"Lyon\", 2, \"Anne Miller\", \"20 Upland Pl.\"),\n   new CustomBean(\"New York\", 46, \"Andrew May\", \"172 Seventh Av.\"),\n   new CustomBean(\"New York\", 44, \"Sylvia Ott\", \"361 College Av.\"),\n   new CustomBean(\"New York\", 41, \"Bill King\", \"546 College Av.\"),\n   new CustomBean(\"Oslo\", 45, \"Janet May\", \"396 Seventh Av.\"),\n   new CustomBean(\"Oslo\", 42, \"Robert Ott\", \"503 Seventh Av.\"),\n   new CustomBean(\"Paris\", 25, \"Sylvia Steel\", \"269 College Av.\"),\n   new CustomBean(\"Paris\", 18, \"Sylvia Fuller\", \"158 - 20th Ave.\"),\n   new CustomBean(\"Paris\", 5, \"Laura Miller\", \"294 Seventh Av.\"),\n   new CustomBean(\"San Francisco\", 48, \"Robert White\", \"549 Seventh Av.\"),\n   new CustomBean(\"San Francisco\", 7, \"James Peterson\", \"231 Upland Pl.\")\n  };  \n\n public static Object[] getBeanArray()\n {\n  return data;\n }\n\n public static Collection getBeanCollection()\n {\n  return Arrays.asList(data);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Excel Data Adapter, Query, and Fields in Query Executer Mode JRXML - JasperReports XML\nDESCRIPTION: This JRXML snippet configures a report to use an Excel data adapter in query executer mode, specifying a property for the adapter file, an empty 'excel' language query block, field declarations, sorting, and a filter expression. It's designed for scenarios where the Excel data adapter is set with '<queryExecuterMode>true</queryExecuterMode>'; both field mapping and filtering are demonstrated.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldataadapter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\\\"net.sf.jasperreports.data.adapter\\\" value=\\\"/data/ExcelXlsQeDataAdapter.jrdax\\\"/>\\n...\\n<query language=\\\"excel\\\">\\n  <![CDATA[]] >\\n</query>\\n<field name=\\\"id\\\" class=\\\"java.lang.Integer\\\"/>\\n<field name=\\\"name\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"address\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"city\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"state\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"date\\\" class=\\\"java.util.Date\\\"/>\\n\\n<sortField name=\\\"city\\\" order=\\\"Descending\\\"/>\\n<sortField name=\\\"name\\\"/>\\n...\\n<filterExpression><![CDATA[$P{IncludedStates}.contains($F{state})]] ></filterExpression>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Bar Chart Customizer in Java\nDESCRIPTION: This Java class `BarChartCustomizer` implements the `JRChartCustomizer` interface to modify a generated bar chart. The `customize` method accesses the chart's `CategoryPlot` and its `BarRenderer` to change the paint (color) for the first two series (index 0 and 1) to green and orange respectively, demonstrating how to alter chart appearance using the JFreeChart API.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class BarChartCustomizer implements JRChartCustomizer\n{\n  @Override\n  public void customize(JFreeChart chart, JRChart jasperChart)\n  {\n    BarRenderer renderer = (BarRenderer) chart.getCategoryPlot().getRenderer();\n    renderer.setSeriesPaint(0, Color.green);\n    renderer.setSeriesPaint(1, Color.orange);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Subreport and Parameter Passing - JRXML/XML\nDESCRIPTION: Defines a JRXML subreport element for OrdersReport.jrxml within the main report. Includes mappings for passing XML data, date/number formatting patterns, and filtering via CustomerID. Dependencies: Main report is expected to invoke subreport; parameters must match those expected in OrdersReport.jrxml. Inputs: XML document and formatting parameters. Output: Range of orders matching the provided customer.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"subreport\\\" printRepeatedValues=\\\"false\\\" removeLineWhenBlank=\\\"true\\\" ...>\\n  <expression><![CDATA[\\\"OrdersReport.jasper\\\"]] ></expression>\\n  <parameter name=\\\"XML_DATA_DOCUMENT\\\">\\n    <expression><![CDATA[$P{XML_DATA_DOCUMENT}]] ></expression>\\n  </parameter>\\n  <parameter name=\\\"XML_DATE_PATTERN\\\">\\n    <expression><![CDATA[$P{XML_DATE_PATTERN}]] ></expression>\\n  </parameter>\\n  <parameter name=\\\"XML_NUMBER_PATTERN\\\">\\n    <expression><![CDATA[$P{XML_NUMBER_PATTERN}]] ></expression>\\n  </parameter>\\n  <parameter name=\\\"XML_LOCALE\\\">\\n    <expression><![CDATA[$P{XML_LOCALE}]] ></expression>\\n  </parameter>\\n  <parameter name=\\\"XML_TIME_ZONE\\\">\\n    <expression><![CDATA[$P{XML_TIME_ZONE}]] ></expression>\\n  </parameter>\\n  <parameter name=\\\"CustomerID\\\">\\n    <expression><![CDATA[$F{CustomerID}]] ></expression>\\n  </parameter>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Exporter Configuration in JRAbstractExporter (Java)\nDESCRIPTION: This method, part of the JRAbstractExporter class, sets global configuration settings that apply to the entire export process, not specific to individual reports. It accepts an object implementing the ExporterConfiguration interface. An example is setting a custom color palette for Excel output. Dependencies include JRAbstractExporter and ExporterConfiguration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void setConfiguration(C configuration)\n```\n\n----------------------------------------\n\nTITLE: Filling Report with Modified Template\nDESCRIPTION: Java code to generate the final report using the modified template.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/alterdesign/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nJasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, (JRDataSource)null);\n```\n\n----------------------------------------\n\nTITLE: Generating SQL IN Clause with $X{IN} in JasperReports SQL\nDESCRIPTION: Dynamically generates a SQL IN clause based on a report parameter containing a list of values. Takes the column name, the parameter name (must be an array, java.util.Collection, or null), and an optional boolean result for null/empty lists. Handles collections with nulls by generating `(<column_name> IS NULL OR <column_name> IN (?, ?, ..))`, collections with only nulls (`<column_name> IS NULL`), and non-null collections (`<column_name> IN (?, ?, ..)`). If the parameter is null or empty, it generates `0=0` or `1=0` based on the optional token or configuration property `net.sf.jasperreports.sql.clause.in.novalues.result`.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n$X{IN, <column_name>, <parameter_name>, [no_values_result]}\n```\n\n----------------------------------------\n\nTITLE: XYZ Dataset Configuration in JasperReports\nDESCRIPTION: Configuration for XYZ chart datasets with series expression and x,y,z value triplets. Supports Comparable objects for series names and Number objects for coordinate values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<seriesExpression />\n<xValueExpression />\n<yValueExpression />\n<zValueExpression />\n<labelExpression />\n<itemHyperlink />\n```\n\n----------------------------------------\n\nTITLE: Configuring Hibernate Session Factory in XML - XML\nDESCRIPTION: Defines Hibernate configuration for database connection, including driver, credentials, dialect, and mapping resources for Address and Document entities. Must reside in src/hibernate.cfg.xml and should match the available database schema and mapping files. Required for initializing Hibernate sessions in applications that leverage this configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<hibernate-configuration>\\n\\n  <session-factory>\\n    <property name=\\\"connection.driver_class\\\">org.hsqldb.jdbcDriver</property>\\n    <property name=\\\"connection.url\\\">jdbc:hsqldb:hsql://localhost</property>\\n    <property name=\\\"connection.username\\\">sa</property>\\n    <property name=\\\"connection.password\\\"></property>\\n    <property name=\\\"dialect\\\">org.hibernate.dialect.HSQLDialect</property>\\n    <property name=\\\"connection.pool_size\\\">1</property>\\n    <mapping resource=\\\"Address.hbm.xml\\\"/>\\n    <mapping resource=\\\"Document.hbm.xml\\\"/>\\n  </session-factory>\\n\\n</hibernate-configuration>\n```\n\n----------------------------------------\n\nTITLE: Implementing Date/Time Functions - JasperReports Java\nDESCRIPTION: Implements various static function methods within the DateTimeFunctions class, using JasperReports annotations for function registration and parameters. Methods include 'TODAY', which returns the current date, and 'DAY' and 'WEEKDAY', which extract specific calendar fields from a provided date object. Dependencies include standard Java Date/Calendar classes and logging, with annotations (@Function, @FunctionParameters, @FunctionParameter) used to expose and document each function. Inputs are generally date objects or their representations, and outputs are dates or integers. Overloading and logging are demonstrated for extensibility and debugging.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/functions/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage net.sf.jasperreports.functions.standard;\n\n// import declarations here\n// ...\n\n/**\n * This class should maintain all function methods that belongs to the category {@link #DATE_TIME}.\n */\n@FunctionCategories({DateTimeCategory.class})\npublic final class DateTimeFunctions\n{\n  private static final Log log = LogFactory.getLog(DateTimeFunctions.class);\n\n  // ===================== TODAY function ===================== //\n  /**\n   * Returns the current date as date object.\n   */\n  @Function(\"TODAY\")\n  public static Date TODAY(){\n    return new Date();\n  }\n\n  // other methods declared here\n  // ...\n\n  // ===================== DAY function ===================== //\n  /**\n   *\n   * Returns the day of a given date. Date object can be a String, long value (milliseconds) or Date instance itself.\n   */\n  @Function(\"DAY\")\n  @FunctionParameters({\n    @FunctionParameter(\"dateObject\")})\n  public static Integer DAY(Object dateObject){\n    return getCalendarFieldFromDate(dateObject,Calendar.DAY_OF_MONTH);\n  }\n\n  // ===================== WEEKDAY function ===================== //\n  /**\n   * Returns the day of the week for a given date. Date object can be a String, long value (milliseconds) or Date instance itself.\n   */\n  @Function(\"WEEKDAY\")\n  @FunctionParameters({\n    @FunctionParameter(\"dateObject\"),\n    @FunctionParameter(\"isSundayFirstDay\")})\n  public static Integer WEEKDAY(Object dateObject){\n    return WEEKDAY(dateObject, false);\n  }\n\n  public static Integer WEEKDAY(Object dateObject, Boolean isSundayFirstDay){\n    Integer dayOfWeek = getCalendarFieldFromDate(dateObject,Calendar.DAY_OF_WEEK);\n    if(dayOfWeek==null) {\n      if(log.isDebugEnabled()){\n        log.debug(\"Unable to get the correct day of the week.\");\n      }\n      return null;\n    }\n    if(isSundayFirstDay){\n      // By default Sunday is considered first day in Java\n      // Calendar.SUNDAY should be a constant with value 1.\n      // See the Calendar.DAY_OF_WEEK javadoc    \n      return dayOfWeek;\n    }\n    else{\n      // shift the days\n      if(dayOfWeek==Calendar.SUNDAY){\n        return 7;\n      }\n      else{\n        return dayOfWeek-1;\n      }\n    }\n  }\n\n  // other public methods declared here\n  // ...\n\n  // private methods declared here\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing JFreeChart Plot in JasperReports Component (Java)\nDESCRIPTION: This Java snippet demonstrates how to implement the `customize` method from the `ChartCustomizer` interface (likely extending `AbstractChartCustomizer`) to modify a JFreeChart object within a JasperReports chart component. It accesses the chart's plot to set the outline visibility, paint color (blue), and stroke width.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/spiderchartcomponent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void customize(JFreeChart chart, ChartComponent chartComponent)\n{\n  chart.getPlot().setOutlineVisible(true);\n  chart.getPlot().setOutlinePaint(new Color(0,0,255));\n  chart.getPlot().setOutlineStroke(new BasicStroke(1f));\n}\n```\n\n----------------------------------------\n\nTITLE: High Low Dataset Configuration in JasperReports\nDESCRIPTION: Configuration for high-low datasets with date, high, low, open, close, and volume expressions. Supports single series with Date and Number objects.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<seriesExpression />\n<dateExpression />\n<highExpression />\n<lowExpression />\n<openExpression />\n<closeExpression />\n<volumeExpression />\n<itemHyperlink />\n```\n\n----------------------------------------\n\nTITLE: Configuring Excel Outline Row Levels in JasperReports XML\nDESCRIPTION: Demonstrates how to implement outline row grouping in Excel exports using outline level properties. This example shows group configurations with outline levels 1 and 2, including how to mark the end of an outline group.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<group name=\"cityGroup\">\n  <expression><![CDATA[$F{city}]] ></expression>\n<groupHeader>\n  ...\n  <groupFooter>\n    <band height=\"20\">\n      <element kind=\"textField\"...>\n        <expression><![CDATA[$F{city} + \" ID count: \" + $V{cityGroup_COUNT}]] ></expression>\n         <property name=\"net.sf.jasperreports.export.xls.row.outline.level.1\" value=\"End\"/>\n        ...\n      </element>\n    </band>\n  </groupFooter>\n</group>\n<group name=\"initialNameGroup\">\n  <expression><![CDATA[$F{name}.substring(0,1)]] ></expression>\n  <groupHeader>\n    <band height=\"10\">\n      <element kind=\"textField\" ...>\n        <expression><![CDATA[\"Names starting with letter \" + $F{name}.substring(0,1)+\":\"]] ></expression>\n        <property name=\"net.sf.jasperreports.export.xls.row.outline.level.1\" value=\"Body\"/>\n        ...\n      </element>\n    </band>\n  </groupHeader>\n  <groupFooter>\n    <band height=\"10\">\n      <element kind=\"textField\" ...>\n        <expression><![CDATA[$F{name}.substring(0,1)+ \"-names ID count: \" + $V{initialNameGroup_COUNT}]] ></expression>\n        <property name=\"net.sf.jasperreports.export.xls.row.outline.level.2\" value=\"End\"/>\n        ...\n      </element>\n    </band>\n  </groupFooter>\n</group>..\n<detail>\n  <band height=\"15\">\n    <element kind=\"textField\" width=\"104\" height=\"15\">\n      <expression><![CDATA[$F{state}]] ></expression>\n      <property name=\"net.sf.jasperreports.export.xls.row.outline.level.2\" value=\"Body\"/>\n      ...\n    </element>\n    ...\n  </band>\n</detail>\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Table Tags for Accessibility in JasperReports XML\nDESCRIPTION: This XML snippet showcases various `<property>` elements used within a JasperReports template (.jrxml) to configure tagged PDF export for Section 508 compliance. It demonstrates enabling tagged PDF output (`net.sf.jasperreports.export.pdf.tagged`), setting the document language, and defining structural tags (`h1`, `table`, `tr`, `th`, `td`) along with attributes (`rowspan`, `colspan`) to ensure proper structure and reading order in the generated accessible PDF document.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tabular/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.export.pdf.tagged\" value=\"true\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.language\" value=\"EN-US\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.h1\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.table\" value=\"start\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"start\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.th\" value=\"full\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.rowspan\" value=\"2\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.th\" value=\"full\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.rowspan\" value=\"2\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.th\" value=\"full\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.rowspan\" value=\"2\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.th\" value=\"full\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.colspan\" value=\"2\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"end\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"start\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.th\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.th\" value=\"full\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"end\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"start\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n...\n<property name=\"net.sf.jasperreports.export.pdf.tag.td\" value=\"full\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"end\"/>\n<property name=\"net.sf.jasperreports.export.pdf.tag.table\" value=\"end\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining an HQL Query in JasperReports XML Template - XML\nDESCRIPTION: This XML snippet demonstrates how to declare a report query using the HQL language within a JasperReports report template. The <query> element specifies the query language and embeds the actual HQL statement, which can include both positional and statement substitution parameters such as $P{CityFilter} and $P!{OrderClause}. Inputs include report parameters referenced in the query, and the output is used to drive data population at report fill time. The snippet relies on Java/JasperReports infrastructure and assumes parameter injection is properly configured in the report definition.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<query language=\\\"hql\\\">\\n  <![CDATA[from Address address where city not in ($P{CityFilter}) order by $P!{OrderClause}]] >\\n</query>\n```\n\n----------------------------------------\n\nTITLE: Printing JasperReports Using Java Print Service Exporter - JasperReports Java\nDESCRIPTION: This snippet illustrates how to print a previously generated JasperReports .jrprint file using the Java Print Service Exporter. It sets up print request and print service attribute sets, configures print/exporter dialogs, and executes the print job, popping up the standard print dialog for user interaction. Dependencies include JasperReports library, a compatible printer, and a generated .jrprint file as input. Outputs the report to the selected printer, timing the operation, with potential limitations in print service compatibility or system permissions.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/printservice/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n  public void print() throws JRException\n  {\n    long start = System.currentTimeMillis();\n    PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet();\n    printRequestAttributeSet.add(MediaSizeName.ISO_A4);\n\n    PrintServiceAttributeSet printServiceAttributeSet = new HashPrintServiceAttributeSet();\n    //printServiceAttributeSet.add(new PrinterName(\"Epson Stylus 820 ESC/P 2\", null));\n    //printServiceAttributeSet.add(new PrinterName(\"hp LaserJet 1320 PCL 6\", null));\n    //printServiceAttributeSet.add(new PrinterName(\"PDFCreator\", null));\n\n    JRPrintServiceExporter exporter = new JRPrintServiceExporter();\n\n    exporter.setExporterInput(new SimpleExporterInput(\"target/reports/PrintServiceReport.jrprint\"));\n    SimplePrintServiceExporterConfiguration configuration = new SimplePrintServiceExporterConfiguration();\n    configuration.setPrintRequestAttributeSet(printRequestAttributeSet);\n    configuration.setPrintServiceAttributeSet(printServiceAttributeSet);\n    configuration.setDisplayPageDialog(false);\n    configuration.setDisplayPrintDialog(true);\n    exporter.setConfiguration(configuration);\n    exporter.exportReport();\n\n    System.err.println(\"Printing time : \" + (System.currentTimeMillis() - start));\n  }\n```\n\n----------------------------------------\n\nTITLE: Mapping Product Subreport Fields for JSON Export - JasperReports XML\nDESCRIPTION: This JRXML fragment shows how groupings and fields are mapped to JSON paths in a product subreport for embedding into the master report's JSON structure. Each text field maps to a path under 'products.{Field}', using the 'net.sf.jasperreports.export.json.path' property. Group evaluation and patterns ensure correct aggregation and formatting prior to export. This aligns with the schema's expectations and requires the ProductReport.jrxml to be included as a subreport.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport ...>\n  ...\n  <group name=\\\"ProductGroup\\\">\n    <expression><![CDATA[$F{Id}]] ></expression>\n    <groupHeader>\n      <band height=\\\"14\\\">\n        <element kind=\\\"textField\\\" y=\\\"2\\\" width=\\\"15\\\" height=\\\"10\\\" hTextAlign=\\\"Right\\\">\n          <expression><![CDATA[$F{Id}]] ></expression>\n          <property name=\\\"net.sf.jasperreports.export.json.path\\\" value=\\\"products.Id\\\"/>\n        </element>\n        <element kind=\\\"textField\\\" positionType=\\\"Float\\\" x=\\\"20\\\" y=\\\"2\\\" width=\\\"80\\\" height=\\\"10\\\" textAdjust=\\\"StretchHeight\\\">\n          <expression><![CDATA[$F{Name}]] ></expression>\n          <property name=\\\"net.sf.jasperreports.export.json.path\\\" value=\\\"products.Name\\\"/>\n        </element>\n        <element kind=\\\"textField\\\" ... hTextAlign=\\\"Right\\\" textAdjust=\\\"StretchHeight\\\" evaluationTime=\\\"Group\\\" pattern=\\\"#0\\\" evaluationGroup=\\\"ProductGroup\\\">\n          <expression><![CDATA[$V{QuantityProductSum}]] ></expression>\n          <property name=\\\"net.sf.jasperreports.export.json.path\\\" value=\\\"products.Quantity\\\"/>\n        </element>\n        <element kind=\\\"textField\\\" ... hTextAlign=\\\"Right\\\" textAdjust=\\\"StretchHeight\\\" evaluationTime=\\\"Group\\\" pattern=\\\"#0.00\\\" evaluationGroup=\\\"ProductGroup\\\">\n          <expression><![CDATA[$V{PriceProductSum}]] ></expression>\n          <property name=\\\"net.sf.jasperreports.export.json.path\\\" value=\\\"products.Price\\\"/>\n        </element>\n      </band>\n    </groupHeader>\n    <groupFooter>\n      <band/>\n    </groupFooter>\n  </group>\n  ...\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistence Unit for Hibernate with JPA - XML\nDESCRIPTION: Defines a JPA persistence unit named 'pu1' for Hibernate, listing all entity classes involved (Person, Movie, Cast, Varia). Hibernate-specific connection properties for the embedded HSQLDB database are explicitly set, including JDBC driver, URL, credentials, and dialect. This configuration is stored in 'persistence.xml' and is essential for enabling JPA entity management and queries during report generation; the provider must be available at runtime and all entity class names should be correct.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql-j2ee/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<persistence-unit name=\\\"pu1\\\">\\n  <!-- Provider class name is required in Java SE -->\\n  <provider>org.hibernate.ejb.HibernatePersistence</provider>\\n  <!-- All persistence classes must be listed -->\\n  <class>Person</class>\\n  <class>Movie</class>\\n  <class>Cast</class>\\n  <class>Varia</class>    \\n  <properties>\\n    <!-- Provider-specific connection properties -->\\n    <property name=\\\"hibernate.connection.driver_class\\\" value=\\\"org.hsqldb.jdbcDriver\\\"/>\\n    <property name=\\\"hibernate.connection.url\\\" value=\\\"jdbc:hsqldb:file:build/db\\\"/>\\n    <property name=\\\"hibernate.connection.username\\\" value=\\\"sa\\\"/>\\n    <property name=\\\"hibernate.connection.password\\\" value=\\\"\\\"/>\\n    <!-- Provider-specific settings -->\\n    <property name=\\\"hibernate.dialect\\\" value=\\\"org.hibernate.dialect.HSQLDialect\\\"/>\\n  </properties>    \\n</persistence-unit>\n```\n\n----------------------------------------\n\nTITLE: Initializing JCommonDrawableRenderer with a JFreeChart Drawable - Java\nDESCRIPTION: This snippet shows the constructor and rendering method for a class that implements chart rendering using the Graphics2D context. It receives a JFreeChart object (Drawable) and delegates drawing to its draw() method. Dependencies: org.jfree.chart.ui.Drawable, JasperReportsContext, Java AWT. Input is a Drawable chart object and a Graphics2D context; output is the chart being drawn in the given rectangle. This abstraction enables flexible image rendering for various chart types within JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jfreechart/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic JCommonDrawableRenderer(Drawable drawable)\\n{\\n  this.drawable = drawable;\\n}\\n\\npublic void render(JasperReportsContext jasperReportsContext, Graphics2D grx, Rectangle2D rectangle)\\n{\\n  if (drawable != null)\\n  {\\n    drawable.draw(grx, rectangle);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Query Examples in JasperReports\nDESCRIPTION: Examples of JSON query syntax for accessing data in JasperReports, including basic object access and filtered queries with parameters.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsondatasource/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNorthwind.Orders\n```\n\nLANGUAGE: text\nCODE:\n```\nNorthwind.Orders[0].OrderID\n```\n\nLANGUAGE: xml\nCODE:\n```\n<query language=\"json\"><![CDATA[Northwind.Customers]] ></query>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<query language=\"json\">\n  <![CDATA[Northwind.Customers(Country == USA)]] >\n</query>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<parameter name=\"Country\" class=\"java.lang.String\"/>\n...\n<query language=\"json\"><![CDATA[Northwind.Orders(CustomerID == $P{CustomerID})]] ></query>\n```\n\n----------------------------------------\n\nTITLE: Compiling a JasperDesign Object to a .jasper File in Java\nDESCRIPTION: This Java method `compile()` demonstrates compiling a programmatically created `JasperDesign` object into a binary `.jasper` file. It retrieves the design using `getJasperDesign()`, specifies the output file path, ensures the target directory exists, and uses `JasperCompileManager.compileReportToFile()` for compilation. It also measures and prints the compilation duration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/noxmldesign/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  public void compile() throws JRException\n  {\n    long start = System.currentTimeMillis();\n    JasperDesign jasperDesign = getJasperDesign();\n    File file = new File(\"target/reports/NoXmlDesignReport.jasper\");\n    file.getParentFile().mkdirs();\n    JasperCompileManager.compileReportToFile(jasperDesign, file.getPath());\n    System.err.println(\"Compile time : \" + (System.currentTimeMillis() - start));\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple JasperPrints to XLSX in Batch - JasperReports - Java\nDESCRIPTION: Implements batch export of multiple JasperPrints as a single Excel (XLSX) file using JRXlsxExporter. Loads .jrprint files to a list, configures exporter input and output, applies a global SimpleXlsxReportConfiguration with onePagePerSheet set to false, and triggers export. Requires JasperReports and previously generated .jrprint files. Output is a single .xlsx file, and sheet configuration is uniform across all batches.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\npublic void xlsx() throws JRException\n{\n  long start = System.currentTimeMillis();\n  List<JasperPrint> jasperPrintList = new ArrayList<JasperPrint>();\n  jasperPrintList.add((JasperPrint)JRLoader.loadObjectFromFile(\"target/reports/Report1.jrprint\"));\n  jasperPrintList.add((JasperPrint)JRLoader.loadObjectFromFile(\"target/reports/Report2.jrprint\"));\n  jasperPrintList.add((JasperPrint)JRLoader.loadObjectFromFile(\"target/reports/Report3.jrprint\"));\n  \n  JRXlsxExporter exporter = new JRXlsxExporter();\n  \n  exporter.setExporterInput(SimpleExporterInput.getInstance(jasperPrintList));\n  exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(\"target/reports/BatchExportReport.xlsx\"));\n  SimpleXlsxReportConfiguration configuration = new SimpleXlsxReportConfiguration();\n  configuration.setOnePagePerSheet(false);\n  exporter.setConfiguration(configuration);\n  \n  exporter.exportReport();\n\n  System.err.println(\"XLSX creation time : \" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SQL NOT IN Clause with $X{NOTIN} in JasperReports SQL\nDESCRIPTION: Dynamically generates a SQL NOT IN clause based on a report parameter containing a list of values. Accepts column name, parameter name (array, java.util.Collection, or null), and an optional boolean result for null/empty lists. Generates `<column_name> NOT IN (?, ?, ..)` for non-null collections, `(<column_name> IS NOT NULL AND <column_name> NOT IN (?, ?, ..))` for collections with nulls, and `<column_name> IS NOT NULL` for collections with only nulls. Handles null/empty parameters by generating `0=0` or `1=0` based on the optional token or `net.sf.jasperreports.sql.clause.notin.novalues.result` property.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n$X{NOTIN, <column_name>, <parameter_name>, [no_values_result]}\n```\n\n----------------------------------------\n\nTITLE: Mapping Report Field to JavaBean Property via Custom Property (XML)\nDESCRIPTION: This JRXML snippet demonstrates how to map a report field named `the_city` to the `city` property of a `CustomBean` object. It uses the `net.sf.jasperreports.javabean.field.property` custom property with the value `me.city`, indicating that the `city` property should be accessed via an object referenced as `me` (likely obtained through the `getMe()` method of the `CustomBean`).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n  <field name=\"the_city\" class=\"java.lang.String\">\n    <property name=\"net.sf.jasperreports.javabean.field.property\" value=\"me.city\"/>\n  </field>\n```\n\n----------------------------------------\n\nTITLE: Defining a Table Component in JRXML\nDESCRIPTION: This JRXML snippet demonstrates the definition of a JasperReports table component (`<component kind=\"table\">`) within a report element. It shows how to link a subdataset (`TableData`) using `<datasetRun>` and providing the data source via a parameter (`$P{TableDataSource}`). The snippet focuses on defining the first single column (`<column kind=\"single\">`) including its header, footer, and detail cell elements, along with styling (`style`, `box`, `pen`) and layout attributes (`width`, `height`, `rowSpan`).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/table/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"component\" y=\"50\" width=\"555\" height=\"100\" style=\"Table\">\n  <component kind=\"table\">\n    <datasetRun subDataset=\"TableData\">\n      <dataSourceExpression><![CDATA[$P{TableDataSource}]] ></dataSourceExpression>\n    </datasetRun>\n    <column kind=\"single\" width=\"100\">\n      <columnHeader height=\"30\" rowSpan=\"2\" style=\"TableHeader\">\n        <element kind=\"staticText\" width=\"100\" height=\"30\" vTextAlign=\"Middle\" bold=\"true\" fontSize=\"12.0\">\n          <text><![CDATA[Header 1]] ></text>\n          <box leftPadding=\"10\">\n            <pen lineColor=\"#000000\"/>\n            <bottomPen lineWidth=\"0.5\"/>\n          </box>\n        </element>\n      </columnHeader>\n      <columnFooter height=\"15\" style=\"TableFooter\">\n        <element kind=\"staticText\" width=\"100\" height=\"15\" vTextAlign=\"Middle\" bold=\"true\" fontSize=\"12.0\">\n          <text><![CDATA[Total 1]] ></text>\n          <box leftPadding=\"10\">\n            <pen lineColor=\"#000000\"/>\n          </box>\n        </element>\n      </columnFooter>\n      <detailCell height=\"15\">\n        <element kind=\"textField\" width=\"100\" height=\"15\" textAdjust=\"StretchHeight\">\n          <expression><![CDATA[$V{Column1}]] ></expression>\n          <box leftPadding=\"10\">\n            <bottomPen lineWidth=\"0.5\"/>\n          </box>\n        </element>\n      </detailCell>\n    </column>\n    ...\n  </component>\n  <property name=\"net.sf.jasperreports.export.pptx.frame.as.table\" value=\"true\"/>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Generating and Embedding an XChart Chart Image in JasperReports Scriptlet - Java\nDESCRIPTION: This Java snippet is part of a report scriptlet that generates a multi-series area chart using the XChart library after report initialization. It initializes the chart, adds data series, customizes styling, renders the chart as a BufferedImage, and assigns the generated image to the ChartImage variable within the report context. Dependencies include the XChart library and JasperReports' JRScriptletException handling, with all actions encapsulated in the afterReportInit() lifecycle method. Inputs are hard-coded series data; output is a rendered chart image available to the report. All operations occur in the context of a report scriptlet.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xchart/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void afterReportInit() throws JRScriptletException\\n{\\n  try\\n  {\\n    XYChart xyChart = new XYChartBuilder()\\n                          .width(400)\\n                          .height(400)\\n                          .title(\\\"Fruits Order\\\")\\n                          .xAxisTitle(\\\"Day of Week\\\")\\n                          .yAxisTitle(\\\"Quantity (t)\\\")\\n                          .build();\\n\\n    xyChart.addSeries(\\\"Apples\\\", new double[] { 1, 3, 5}, new double[] { 4, 10, 7});\\n    xyChart.addSeries(\\\"Bananas\\\", new double[] { 1, 2, 3, 4, 5}, new double[] { 6, 8, 4, 4, 6});\\n    xyChart.addSeries(\\\"Cherries\\\", new double[] { 1, 3, 4, 5}, new double[] { 2, 6, 1, 9});\\n    XYStyler styler = xyChart.getStyler();\\n    styler.setLegendPosition(Styler.LegendPosition.InsideNW);\\n    styler.setAxisTitlesVisible(true);\\n    styler.setDefaultSeriesRenderStyle(XYSeries.XYSeriesRenderStyle.Area);\\n\\n    BufferedImage bufferedImage = BitmapEncoder.getBufferedImage(xyChart);\\n    super.setVariableValue(\\\"ChartImage\\\", bufferedImage);\\n  }\\n  catch(Exception e)\\n  {\\n    throw new JRScriptletException(e);\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JPA Persistence Unit in XML\nDESCRIPTION: Shows the configuration of a JPA persistence unit in persistence.xml, including provider, entity classes, and database connection properties.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql/README.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<persistence-unit name=\"pu1\">\n  <!-- Provider class name is required in Java SE -->\n  <provider>org.hibernate.ejb.HibernatePersistence</provider>\n  <!-- All persistence classes must be listed -->\n  <class>Person</class>\n  <class>Movie</class>\n  <class>Cast</class>\n  <class>Varia</class>    \n  <properties>\n    <!-- Provider-specific connection properties -->\n    <property name=\"hibernate.connection.driver_class\" value=\"org.hsqldb.jdbcDriver\"/>\n    <property name=\"hibernate.connection.url\" value=\"jdbc:hsqldb:file:build/db\"/>\n    <property name=\"hibernate.connection.username\" value=\"sa\"/>\n    <property name=\"hibernate.connection.password\" value=\"\"/>\n    <!-- Provider-specific settings -->\n    <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.HSQLDialect\"/>\n  </properties>    \n</persistence-unit>\n```\n\n----------------------------------------\n\nTITLE: Defining XYChart XSD Schema for JasperReports Component (XML)\nDESCRIPTION: Defines the XSD structure for the custom XYChart JasperReports component using XML, including XYDataset and XYSeries elements, mandatory expressions for chart data, and optional series color configuration. Dependencies include proper namespace and schema location setup within the JasperReports environment. Inputs consist of dataset and expressions for chart metadata, while outputs are structured chart elements recognized by JasperReports; the schema must be included in the component registration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xchartcomponent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<element name=\\\"XYChart\\\" substitutionGroup=\\\"jr:component\\\">\\n  <complexType>\\n    <complexContent>\\n      <extension base=\\\"jr:componentType\\\">\\n        <sequence>\\n          <element ref=\\\"xc:XYDataset\\\"/>\\n          <element name=\\\"chartTitleExpression\\\">\\n            <complexType mixed=\\\"true\\\"/>\\n          </element>\\n          <element name=\\\"xAxisTitleExpression\\\">\\n            <complexType mixed=\\\"true\\\"/>\\n          </element>\\n          <element name=\\\"yAxisTitleExpression\\\">\\n            <complexType mixed=\\\"true\\\"/>\\n          </element>\\n        </sequence>\\n        <attribute name=\\\"evaluationTime\\\" type=\\\"jr:basicEvaluationTime\\\" use=\\\"optional\\\" default=\\\"Now\\\"/>\\n        <attribute name=\\\"evaluationGroup\\\" type=\\\"string\\\" use=\\\"optional\\\"/>\\n      </extension>\\n    </complexContent>\\n  </complexType>\\n</element>\\n\\n<element name=\\\"XYDataset\\\">\\n  <complexType>\\n    <sequence>\\n      <element ref=\\\"jr:dataset\\\" minOccurs=\\\"0\\\" maxOccurs=\\\"1\\\"/>\\n      <element ref=\\\"xc:XYSeries\\\" minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\"/>\\n    </sequence>\\n  </complexType>\\n</element>\\n\\n<element name=\\\"XYSeries\\\">\\n  <annotation>\\n    <documentation>Defines a series used in an <elem>XYDataset</elem></documentation>\\n  </annotation>\\n  <complexType>\\n    <sequence>\\n      <element ref=\\\"jr:seriesExpression\\\" minOccurs=\\\"1\\\" maxOccurs=\\\"1\\\"/>\\n      <element ref=\\\"jr:xValueExpression\\\" minOccurs=\\\"1\\\" maxOccurs=\\\"1\\\"/>\\n      <element ref=\\\"jr:yValueExpression\\\" minOccurs=\\\"1\\\" maxOccurs=\\\"1\\\"/>\\n      <element name=\\\"colorExpression\\\" minOccurs=\\\"0\\\" maxOccurs=\\\"1\\\">\\n        <complexType mixed=\\\"true\\\"/>\\n      </element>\\n    </sequence>\\n  </complexType>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Read-Only Checkbox Field in JasperReports JRXML\nDESCRIPTION: This JRXML snippet defines an element, visually represented as an ellipse but functionally acting as a PDF checkbox. It uses specific properties prefixed with 'net.sf.jasperreports.export.pdf.field.' to configure it as a 'Check' type field with a 'Square' appearance and a 'Beveled' border style. The 'read.only' property is set to true, making the checkbox non-interactive in the PDF, and 'checked' is set to true, meaning it will appear checked by default.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/forms/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"ellipse\" positionType=\"Float\" mode=\"Opaque\" width=\"25\" height=\"25\">\n  <pen lineWidth=\"1.0\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.type\" value=\"Check\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.check.type\" value=\"Square\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.border.style\" value=\"Beveled\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.read.only\" value=\"true\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.checked\" value=\"true\"/>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Assigning Renderable Chart Instance to Report Variable - Java\nDESCRIPTION: This single-line Java code assigns a new instance of the renderer wrapping the chart to a JasperReports report variable named 'Chart'. Dependency: net.sf.jasperreports.renderers.Renderable and impl class JCommonDrawableRendererImpl. The variable can be referenced in the report template to render images. Input is a chart object; output is a renderer object stored as a report variable. The approach supports modular construction of report visuals.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jfreechart/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  this.setVariableValue(\"Chart\", new JCommonDrawableRendererImpl(chart));\n```\n\n----------------------------------------\n\nTITLE: JSONQL Query with Inline Multi-Line Comment\nDESCRIPTION: This snippet illustrates using a multi-line comment (`/* ... */`) within a single-line JSONQL expression. The comment `/*&& OrderDate *= \"1997\"*/` selectively disables only the second part of the filtering condition, leaving the `Freight > 200` condition active.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_12\n\nLANGUAGE: jsonql\nCODE:\n```\nNorthwind.Customers.Orders.*(Freight > 200 /*&& OrderDate *= \"1997\"*/)\n```\n\n----------------------------------------\n\nTITLE: Configuring EJBQL Query and Fields in JasperReports XML\nDESCRIPTION: Demonstrates the configuration of an EJBQL query in a JasperReport, including query hints, field declarations, and subreport setup.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql/README.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<property name=\"net.sf.jasperreports.ejbql.query.hint.fetchSize\" value=\"50\"/>\n<property name=\"net.sf.jasperreports.ejbql.query.page.size\" value=\"100\"/>\n<import>net.sf.jasperreports.engine.data.JRBeanCollectionDataSource</import>\n...\n<query language=\"ejbql\">\n  <![CDATA[SELECT   m\n    FROM     Movie m\n    WHERE    m.releaseDate BETWEEN $P{DateFrom} AND $P{DateTo}\n    ORDER BY $P!{OrderClause}]] >\n</query>\n<field name=\"id\" class=\"java.lang.Integer\"/>\n<field name=\"director.name\" class=\"java.lang.String\"/>\n<field name=\"title\" class=\"java.lang.String\"/>\n<field name=\"genre\" class=\"java.lang.String\"/>\n<field name=\"releaseDate\" class=\"java.sql.Date\"/>\n<field name=\"cast\" class=\"java.util.Collection\"/>\n...\n<detail>\n  <band height=\"45\">\n    ...\n  <element kind=\"subreport\" positionType=\"Float\" x=\"15\" y=\"25\" width=\"245\" height=\"20\" backcolor=\"#99CCFF\" removeLineWhenBlank=\"true\">\n    <dataSourceExpression><![CDATA[new JRBeanCollectionDataSource($F{cast})]] ></dataSourceExpression>\n    <expression><![CDATA[\"JRMDbCastSubreport.jasper\"]] ></expression>\n  </element>\n  <element kind=\"subreport\" positionType=\"Float\" x=\"270\" y=\"25\" width=\"245\" height=\"20\" backcolor=\"#99CCFF\" removeLineWhenBlank=\"true\">\n    <expression><![CDATA[\"JRMDbVariaSubreport.jasper\"]] ></expression>\n    <parameter name=\"MovieId\">\n      <expression><![CDATA[$F{id}]] ></expression>\n    </parameter>\n    <parameter name=\"JPA_ENTITY_MANAGER\">\n      <expression><![CDATA[$P{JPA_ENTITY_MANAGER}]] ></expression>\n    </parameter>\n  </element>\n  </band>\n</detail>\n```\n\n----------------------------------------\n\nTITLE: Passing an Empty Data Source to a JasperReports Subreport - XML/Java\nDESCRIPTION: This XML/Java snippet provides an example of passing an empty data source to a subreport using a <dataSourceExpression> with new net.sf.jasperreports.engine.JREmptyDataSource(). This is useful when the subreport is purely static or for layout/content-only subreports. Dependencies: JasperReports engine; access to the JREmptyDataSource class. Output: static or layout-only subreport contents. Must be used when no external data is required for the subreport.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dataSourceExpression><![ CDATA[new net.sf.jasperreports.engine.JREmptyDataSource()]] ></dataSourceExpression>\n```\n\n----------------------------------------\n\nTITLE: Declaring Hyperlink Expressions in JasperReports JRXML - XML\nDESCRIPTION: Demonstrates the XML tags for declaring hyperlink reference, anchor, and page expressions in JasperReports report templates. These expressions define the destination or reference for hyperlink elements in reports. The <hyperlinkReferenceExpression> and <hyperlinkAnchorExpression> are expected to return strings, while <hyperlinkPageExpression> should return an integer. These tags are placed within element declarations such as text fields, images, or charts in a JRXML file.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<hyperlinkReferenceExpression>\n<hyperlinkAnchorExpression>\n<hyperlinkPageExpression>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized EJB QL Query and Column Field Mapping in Varia Subreport - XML\nDESCRIPTION: Demonstrates a JasperReports subreport configuration that defines a parameter MovieId, an EJB QL query selecting fields by position for varia records related to a movie, and report fields whose values are mapped to column positions using custom properties. The query is parameterized for filtering and ordering by importance. This approach is useful for cases where multiple fields are selected and mapped to columns, rather than simple entity field names. It requires a suitable JPA entity manager and correctly typed MovieId as input.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql-j2ee/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n...\\n<parameter name=\\\"MovieId\\\" class=\\\"java.lang.Integer\\\"/>\\n<query language=\\\"ejbql\\\">\\n  <![CDATA[SELECT   v.type, v.description\\n    FROM     Varia v\\n    WHERE    v.movie.id = $P{MovieId}\\n    ORDER BY v.importance]] >\\n</query>\\n<field name=\\\"type\\\" class=\\\"java.lang.String\\\">\\n  <property name=\\\"net.sf.jasperreports.javabean.field.property\\\" value=\\\"COLUMN_1\\\"/>\\n</field>\\n<field name=\\\"description\\\" class=\\\"java.lang.String\\\">\\n  <property name=\\\"net.sf.jasperreports.javabean.field.property\\\" value=\\\"COLUMN_2\\\"/>\\n</field>\\n...\n```\n\n----------------------------------------\n\nTITLE: Generating and Compiling Sample JasperReports Documents via Maven - Shell\nDESCRIPTION: Provides the Maven command to clean, compile, and execute all report templates for the JasperReports sample in the 'demo/samples/ejbql-j2ee' directory. This compiles Java code, prepares report templates, and outputs reports in multiple formats. Requires Maven (v3.6+), a previously started HSQLDB server, and proper dependencies specified in project POM files.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql-j2ee/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Addresses with Parameterized HQL - XML\nDESCRIPTION: Embeds an HQL query in a JasperReports file to retrieve Address entities, filtered by excluded cities and ordered by a parametric clause. Dependencies are a Hibernate connection and parameterized CityFilter and OrderClause values. Output is a list of addresses, grouped and ordered as specified.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n  <query language=\\\"hql\\\">\\n    <![CDATA[from Address address where city not in ($P{CityFilter}) order by $P!{OrderClause}]] >\\n  </query>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Function Extensions - JasperReports Properties\nDESCRIPTION: Lists property settings in jasperreports_extension.properties that register custom function classes with the JasperReports extension system. These properties map registry keys to factory implementations and specify which function classes (for date/time, math, logical, and text) should be loaded. Required for JasperReports to discover and use the defined and implemented custom functions at runtime.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/functions/README.md#2025-04-22_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.extension.registry.factory.functions=net.sf.jasperreports.functions.FunctionsRegistryFactory\nnet.sf.jasperreports.extension.functions.datetime=net.sf.jasperreports.functions.standard.DateTimeFunctions\nnet.sf.jasperreports.extension.functions.math=net.sf.jasperreports.functions.standard.MathFunctions, net.sf.jasperreports.functions.standard.LogicalFunctions\nnet.sf.jasperreports.extension.functions.text=net.sf.jasperreports.functions.standard.TextFunctions\n```\n\n----------------------------------------\n\nTITLE: Instantiating JRFileVirtualizer in Java\nDESCRIPTION: This Java code snippet demonstrates the creation of a `JRFileVirtualizer` object within the `fillReport()` method of the sample `VirtualizerApp.java`. It initializes the virtualizer to store report data on disk in a directory named \"tmp\" after 2 pages (`maxSize`) have been generated in memory. This instance helps manage memory consumption during the report filling process for large reports. Dependencies include the JasperReports library, specifically the `net.sf.jasperreports.engine.fill.JRFileVirtualizer` class.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/virtualizer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// creating the virtualizer\nJRFileVirtualizer virtualizer = new JRFileVirtualizer(2, \"tmp\");\n```\n\n----------------------------------------\n\nTITLE: Absolute JSONQL Path Expression using Dot Notation\nDESCRIPTION: This snippet illustrates an absolute JSONQL expression, identified by the starting '$' symbol. It uses dot notation for object properties (`Northwind`, `Customers`) and bracket notation for array indexing (`[0]`) and property names containing spaces (`[\"Company Name\"]`). This specific expression aims to retrieve the value of the \"Company Name\" property from the first element of the 'Customers' array within the 'Northwind' object, starting from the root of the JSON document.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonql\nCODE:\n```\n$.Northwind.Customers[0][\"Company Name\"]\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple JasperPrints to PDF in Batch with Bookmarks - JasperReports - Java\nDESCRIPTION: Implements batch export of a list of JasperPrint objects into a single PDF file using JRPdfExporter. Loads .jrprint files into a list, sets exporter input via SimpleExporterInput, configures global SimplePdfExporterConfiguration with bookmarks enabled, and sets output path. Requires JasperReports, previously generated .jrprint files, and outputs a PDF with document bookmarks. Timing output is logged. All configuration is global and applies equally to all JasperPrints in the batch.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic void pdf() throws JRException\n{\n  long start = System.currentTimeMillis();\n  List<JasperPrint> jasperPrintList = new ArrayList<JasperPrint>();\n  jasperPrintList.add((JasperPrint)JRLoader.loadObjectFromFile(\"target/reports/Report1.jrprint\"));\n  jasperPrintList.add((JasperPrint)JRLoader.loadObjectFromFile(\"target/reports/Report2.jrprint\"));\n  jasperPrintList.add((JasperPrint)JRLoader.loadObjectFromFile(\"target/reports/Report3.jrprint\"));\n  \n  JRPdfExporter exporter = new JRPdfExporter();\n  \n  exporter.setExporterInput(SimpleExporterInput.getInstance(jasperPrintList));\n  exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(\"target/reports/BatchExportReport.pdf\"));\n  SimplePdfExporterConfiguration configuration = new SimplePdfExporterConfiguration();\n  configuration.setCreatingBatchModeBookmarks(true);\n  exporter.setConfiguration(configuration);\n  \n  exporter.exportReport();\n  \n  System.err.println(\"PDF creation time : \" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Building Core and Extension JARs with Maven - Shell\nDESCRIPTION: Executes Maven to build both the core and optional extension artifacts for JasperReports Library from the project root. Requires Maven as a prerequisite and assumes Java project structure. This command produces the core and extension JAR artifacts, their source JARs, and Javadoc JARs as outputs. It should be run in an environment with Maven installed and configured for the project workspace.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install source:jar javadoc:jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Subreport Embedding in JasperReports - XML\nDESCRIPTION: This XML snippet illustrates how to embed a subreport within a master JasperReports template using the <element> tag. It demonstrates passing a JDBC connection, determining subreport design via an <expression>, mapping master report fields to subreport parameters, and accumulating the sum of a variable from subreport executions. Dependencies: JasperReports engine, valid master report structure, JDBC connection parameter. Inputs include master report fields and connection; outputs are rendered subreport contents for each master record. Parameters and connections must match between master and subreport.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"subreport\\\" x=\\\"5\\\" y=\\\"25\\\" width=\\\"325\\\" height=\\\"20\\\" backcolor=\\\"#FFCC99\\\" printRepeatedValues=\\\"false\\\" removeLineWhenBlank=\\\"true\\\">\\n  <connectionExpression><![CDATA[$P{REPORT_CONNECTION}]] ></connectionExpression>\\n  <expression><![CDATA[$P{ProductsSubreport}]] ></expression>\\n  <returnValue toVariable=\\\"ProductTotalPrice\\\" calculation=\\\"Sum\\\" subreportVariable=\\\"PriceSum\\\"/>\\n  <parameter name=\\\"City\\\">\\n    <expression><![CDATA[$F{City}]] ></expression>\\n  </parameter>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Declaring XPath Query for Orders Subreport - JRXML/XML\nDESCRIPTION: Specifies the JRXML query for the Orders report, which filters orders by CustomerID. Uses an XPath expression containing a JRXML parameter. Dependency: Value of CustomerID is supplied via parameter at runtime. Inputs: XML data and report parameters. Output: Selected Orders nodes matching CustomerID.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n  <query language=\\\"xPath\\\"><![CDATA[/Northwind/Orders[CustomerID='$P{CustomerID}']]]></query>\n```\n\n----------------------------------------\n\nTITLE: Configuring Master Report Query and Subreports in JasperReports - XML\nDESCRIPTION: This snippet exemplifies configuration for master-detail reporting in a JasperReports 'jrxml' file: it sets EJB QL query properties, imports a bean data source, defines an EJB QL query with parameterized clauses, and declares report fields and subreports. Subreports are configured for cast (passing a Java bean collection as data source) and varia (passing parameters for database access and filtering). Key parameters include DateFrom, DateTo, and OrderClause for the main query, and MovieId and JPA_ENTITY_MANAGER for subreports. The template utilizes field referencing for joins, collection fields for subreport data, and expects properly structured entity objects provided from the earlier JPA/Hibernate configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql-j2ee/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n...\\n<property name=\\\"net.sf.jasperreports.ejbql.query.hint.fetchSize\\\" value=\\\"50\\\"/>\\n<property name=\\\"net.sf.jasperreports.ejbql.query.page.size\\\" value=\\\"100\\\"/>\\n<import>net.sf.jasperreports.engine.data.JRBeanCollectionDataSource</import>\\n...\\n<query language=\\\"ejbql\\\">\\n  <![CDATA[SELECT   m\\n    FROM     Movie m\\n    WHERE    m.releaseDate BETWEEN $P{DateFrom} AND $P{DateTo}\\n    ORDER BY $P!{OrderClause}]] >\\n</query>\\n<field name=\\\"id\\\" class=\\\"java.lang.Integer\\\"/>\\n<field name=\\\"director.name\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"title\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"genre\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"releaseDate\\\" class=\\\"java.sql.Date\\\"/>\\n<field name=\\\"cast\\\" class=\\\"java.util.Collection\\\"/>\\n...\\n<detail>\\n  <band height=\\\"45\\\">\\n    ...\\n  <element kind=\\\"subreport\\\" positionType=\\\"Float\\\" x=\\\"15\\\" y=\\\"25\\\" width=\\\"245\\\" height=\\\"20\\\" backcolor=\\\"#99CCFF\\\" removeLineWhenBlank=\\\"true\\\">\\n    <dataSourceExpression><![CDATA[new JRBeanCollectionDataSource($F{cast})]] ></dataSourceExpression>\\n    <expression><![CDATA[\\\"JRMDbCastSubreport.jasper\\\"]] ></expression>\\n  </element>\\n  <element kind=\\\"subreport\\\" positionType=\\\"Float\\\" x=\\\"270\\\" y=\\\"25\\\" width=\\\"245\\\" height=\\\"20\\\" backcolor=\\\"#99CCFF\\\" removeLineWhenBlank=\\\"true\\\">\\n    <expression><![CDATA[\\\"JRMDbVariaSubreport.jasper\\\"]] ></expression>\\n    <parameter name=\\\"MovieId\\\">\\n      <expression><![CDATA[$F{id}]] ></expression>\\n    </parameter>\\n    <parameter name=\\\"JPA_ENTITY_MANAGER\\\">\\n      <expression><![CDATA[$P{JPA_ENTITY_MANAGER}]] ></expression>\\n    </parameter>\\n  </element>\\n  </band>\\n</detail>\\n...\n```\n\n----------------------------------------\n\nTITLE: Field Mapping for Orders Report - JRXML/XML\nDESCRIPTION: Details field declarations for Orders subreport, mapping XPath expressions to report fields of specific Java types. Used by JasperReports to bind Order node fields to subreport outputs via property-based XPath mapping. Inputs: Filtered Orders XML nodes. Output: Report fields for order ID, date, city, and freight.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n  <field name=\\\"Id\\\" class=\\\"java.lang.String\\\">\\n\\t<property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"OrderID\\\"/>\\n  </field>\\n  <field name=\\\"OrderDate\\\" class=\\\"java.util.Date\\\">\\n\\t<property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"OrderDate\\\"/>\\n  </field>\\n  <field name=\\\"ShipCity\\\" class=\\\"java.lang.String\\\">\\n\\t<property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"ShipCity\\\"/>\\n  </field>\\n  <field name=\\\"Freight\\\" class=\\\"java.lang.Float\\\">\\n\\t<property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"Freight\\\"/>\\n  </field>\n```\n\n----------------------------------------\n\nTITLE: EAN128 Template Expression Example\nDESCRIPTION: Specific configuration for EAN128 barcodes showing template expression usage introduced in JasperReports 5.1.2. The template allows custom formatting of the human readable part of the barcode.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/barcode4j/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<EAN128>\n  <templateExpression>[AI](n+an+d+cd)</templateExpression>\n  <!-- Format: AI number in brackets followed by field description\n       Data types: n (numeric), an (alpha-numeric), \n       d (date), cd (check digit)\n       Multiple fields can be separated by + -->\n</EAN128>\n```\n\n----------------------------------------\n\nTITLE: Setting CSV Column Names and Source in JasperReports (XML)\nDESCRIPTION: These XML property elements configure the JasperReports engine with a list of CSV column names and the path to the CSV source file. They must be placed within the report definition file (JRXML). The column names define the expected fields in the data, and the source supplies the CSV input. No special dependencies are required beyond JasperReports, but the file path must be correct relative to the report execution context.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/csvdatasource/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\\\"net.sf.jasperreports.csv.column.names\\\" value=\\\"city, id, name, address, state\\\"/>\n<property name=\\\"net.sf.jasperreports.csv.source\\\" value=\\\"data/CsvDataSource.txt\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating SQL BETWEEN (Left Inclusive) Clause with $X{[BETWEEN} in JasperReports SQL\nDESCRIPTION: Generates a SQL clause comparing a column value against a range defined by two parameters, including the left endpoint and excluding the right. Takes column name, left parameter name, and right parameter name. Generates `(<column_name> >= ? AND <column_name> < ?)` if both parameters are non-null. If left is null, generates `<column_name> < ?` (using right parameter). If right is null, generates `<column_name> >= ?` (using left parameter). If both are null, generates a clause evaluating to true (e.g., `0 = 0`).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n$X{[BETWEEN, <column_name>, <left_parameter_name>, <right_parameter_name>}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Style for a Text Element in JasperReports (XML)\nDESCRIPTION: This snippet demonstrates how to reference a style (TitleStyle) for a text element in a JasperReports .jrxml template. Upon evaluation, the style may be conditionally altered according to associated Boolean parameters or variables. The attributes specify layout and formatting properties. Inputs are report data values; output is a formatted text field at runtime.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" y=\\\"10\\\" width=\\\"515\\\" height=\\\"35\\\" hTextAlign=\\\"Center\\\" blankWhenNull=\\\"true\\\" style=\\\"TitleStyle\\\">\\n\\t<paragraph lineSpacing=\\\"Single\\\"/>\\n\\t<expression><![CDATA[$P{ReportTitle}]] ></expression>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Time Period Dataset Configuration in JasperReports\nDESCRIPTION: Configuration for time period datasets with start/end date ranges and value expressions. Supports Date objects for intervals and Number objects for values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<seriesExpression />\n<startDateExpression />\n<endDateExpression />\n<valueExpression />\n<labelExpression />\n<itemHyperlink />\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum using Java Expression in JRXML\nDESCRIPTION: Demonstrates calculating the sum of two `Double` report parameters (`$P{A}`, `$P{B}`) using a Java expression within an `<expression>` tag in JRXML. It requires explicit calls to `doubleValue()` for the calculation and `Double.valueOf()` to wrap the result, ensuring compatibility with older JDK versions.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<expression><![CDATA[Double.valueOf($P{A}.doubleValue() + $P{B}.doubleValue())]]></expression>\n```\n\n----------------------------------------\n\nTITLE: Filling JasperReport with CSV Query Executer in Java\nDESCRIPTION: This Java code demonstrates the preparation and invocation of JasperReports' fill process when using a CSV query executer. It constructs a parameters map with values for report-level fields, creates Java Set objects for custom states, and invokes 'JasperFillManager.fillReportToFile', which does not require an explicit data source since the CSV query executer provides it using the earlier configuration. Output and timing for the process are printed to stderr. It assumes JasperReports, the compiled Jasper file, and the CSV file exist at the specified locations.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/csvdatasource/README.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// query executer filling\n{\n  start = System.currentTimeMillis();\n  Map parameters = new HashMap();\n  parameters.put(\"ReportTitle\", \"Address Report\");\n  parameters.put(\"DataFile\", \"CsvDataSource.txt - CSV query executer\");\n  Set states = new HashSet();\n  states.add(\"Active\");\n  states.add(\"Trial\");\n  parameters.put(\"IncludedStates\", states);\n\n  JasperFillManager.fillReportToFile(\"build/reports/CsvQueryExecuterReport.jasper\", parameters);\n  System.err.println(\"Report : CsvQueryExecuterReport.jasper. Filling time : \" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing JDK 1.8 Compatibility in Maven Build - Shell\nDESCRIPTION: Invokes Maven with the enforcer plugin enabled to check for Java 1.8 compatibility during the build, excluding certain extension modules. This command is dependent on Maven and project's POM configuration supporting module selection and enforcer plugin. Excludes the 'ejbql', 'hibernate', and 'servlets' extensions from the build, verifying that other artifacts remain compatible with Java 8.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Denforcer.skip=false -pl '!ext/ejbql, !ext/hibernate, !ext/servlets'\n```\n\n----------------------------------------\n\nTITLE: Providing Hibernate and Report Parameters in Java - Java\nDESCRIPTION: A static Java method that prepares and returns report parameters including a Hibernate session, report title, city filter list, and order clause. Suitable for use in report filling routines, this method is part of HibernateApp.java and expects a live Session object as input. Returns a Map with all necessary parameters for running JasperReports with Hibernate.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate static Map<String, Object> getParameters(Session session)\\n{\\n  Map<String, Object> parameters = new HashMap<String, Object>();\\n  parameters.put(HibernateConstants.PARAMETER_HIBERNATE_SESSION, session);\\n  parameters.put(\\\"ReportTitle\\\", \\\"Address Report\\\");\\n  List<String> cityFilter = new ArrayList<String>(3);\\n  cityFilter.add(\\\"Boston\\\");\\n  cityFilter.add(\\\"Chicago\\\");\\n  cityFilter.add(\\\"Oslo\\\");\\n  parameters.put(\\\"CityFilter\\\", cityFilter);\\n  parameters.put(\\\"OrderClause\\\", \\\"city\\\");\\n  return parameters;\\n}\n```\n\n----------------------------------------\n\nTITLE: Filling JasperReport with CSV Data Source in Java\nDESCRIPTION: Demonstrates how to fill a JasperReport using a CSV data source. It sets up parameters, including a set for filtering data, and then calls JasperFillManager to generate the report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/csvdatasource/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic void fill() throws JRException\n{\n  long start = System.currentTimeMillis();\n  //Preparing parameters\n  Map parameters = new HashMap();\n  parameters.put(\"ReportTitle\", \"Address Report\");\n  parameters.put(\"DataFile\", \"CsvDataSource.txt - CSV data source\");\n  Set states = new HashSet();\n  states.add(\"Active\");\n  states.add(\"Trial\");\n  parameters.put(\"IncludedStates\", states);\n\n  JasperFillManager.fillReportToFile(\"build/reports/CsvDataSourceReport.jasper\", parameters, getDataSource());\n  System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Boolean Parameter with Default Value in JasperReports (XML)\nDESCRIPTION: This snippet shows how to declare a Boolean parameter named ConditionalParam in a JasperReports .jrxml report. The defaultValueExpression tag sets the initial value for the parameter, which can then be referenced by conditional styles or report logic. Required dependencies are JasperReports and a valid parameter reference in the report or template. The expected input is an optional override at runtime; output is its Boolean value for style expressions.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<parameter name=\\\"ConditionalParam\\\" class=\\\"java.lang.Boolean\\\">\\n  <defaultValueExpression><![CDATA[true]] ></defaultValueExpression>\\n</parameter>\n```\n\n----------------------------------------\n\nTITLE: Subreport Configuration for Orders\nDESCRIPTION: Configures a subreport element for displaying order details, including parameter passing and data source configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsondatasource/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"subreport\" ... backcolor=\"#FFCC99\" printRepeatedValues=\"false\" removeLineWhenBlank=\"true\">\n  <expression><![CDATA[\"JsonOrdersReport.jasper\"]] ></expression>\n  <parameter name=\"net.sf.jasperreports.json.date.pattern\">\n    <expression><![CDATA[$P{net.sf.jasperreports.json.date.pattern}]] ></expression>\n  </parameter>\n  <parameter name=\"net.sf.jasperreports.json.number.pattern\">\n    <expression><![CDATA[$P{net.sf.jasperreports.json.number.pattern}]] ></expression>\n  </parameter>\n  <parameter name=\"JSON_LOCALE\">\n    <expression><![CDATA[$P{JSON_LOCALE}]] ></expression>\n  </parameter>\n  <parameter name=\"CustomerID\">\n    <expression><![CDATA[$F{CustomerID}]] ></expression>\n  </parameter>\n  <parameter name=\"net.sf.jasperreports.json.source\">\n    <expression><![CDATA[\"data/northwind.json\"]] ></expression>\n  </parameter>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Defining an XLS Formula with Cell References using <property> in JasperReports JRXML\nDESCRIPTION: This JRXML snippet shows how to define an Excel formula that uses cell references (`SUM(A2,A3)`) within a text field element for XLS export. It utilizes the `<property>` tag with the `net.sf.jasperreports.export.xls.formula` name. A fallback value (0) is specified in the `<expression>` tag for exports to formats other than XLS/XLSX.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsformula/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" ...>\n  <expression><![CDATA[0]] ></expression>\n  <property name=\"net.sf.jasperreports.export.xls.formula\" value=\"SUM(A2,A3)\"/>\n  ...\n</element>\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders by DateRange in JasperReports SQL Query (SQL)\nDESCRIPTION: Provides a sample SQL query for use in a JasperReports report, demonstrating parameterized filtering with a DateRange. It uses the $X{} syntax to dynamically inject greater-than filtering based on a DateRange parameter. Required: JasperReports SQL parameter syntax, defined report parameters (\"MaxOrderID\" and \"StartDate\") and correct database connection. The query returns orders newer than a specified start date, ordered as requested.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/daterange/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n<query>\\nSELECT * FROM Orders WHERE \\n    OrderID <= $P{MaxOrderID}  \\n    AND $X{[GREATER, OrderDate, StartDate} \\n    ORDER BY ShipCountry, ShipCity, OrderDate\\n</query>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Table Headers in JasperReports JRXML\nDESCRIPTION: This JRXML snippet demonstrates how to create a complex table header structure within the `<pageHeader>` band using multiple `<element kind=\"staticText\">` elements. It achieves a nested header effect (Header 4 spanning Header 4.1 and Header 4.2) by carefully setting the `x`, `y`, `width`, and `height` attributes for precise alignment. The `<box>` element within each static text defines cell borders, and specific `<property>` tags (e.g., `net.sf.jasperreports.export.pdf.tag.th`, `net.sf.jasperreports.export.pdf.tag.tr`, `net.sf.jasperreports.export.pdf.tag.colspan`) are used to add PDF accessibility tags for creating structured tables in the exported PDF.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tabular/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<pageHeader height=\"30\">\n  ...\n  <element kind=\"staticText\" mode=\"Opaque\" x=\"300\" width=\"255\" height=\"15\" backcolor=\"#808080\" hTextAlign=\"Center\" bold=\"true\" fontSize=\"12.0\">\n    <text><![CDATA[Header 4]] ></text>\n    <property name=\"net.sf.jasperreports.export.pdf.tag.th\" value=\"full\"/>\n    <property name=\"net.sf.jasperreports.export.pdf.tag.colspan\" value=\"2\"/>\n    <property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"end\"/>\n    <box>\n      <pen lineWidth=\"0.5\" lineColor=\"#000000\"/>\n      <topPen lineWidth=\"1.0\" lineColor=\"#FF0000\"/>\n      <rightPen lineWidth=\"1.0\" lineColor=\"#FF0000\"/>\n    </box>\n  </element>\n  <element kind=\"staticText\" mode=\"Opaque\" x=\"300\" y=\"15\" width=\"155\" height=\"15\" backcolor=\"#808080\" bold=\"true\">\n    <text><![CDATA[Header 4.1]] ></text>\n    <property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"start\"/>\n    <property name=\"net.sf.jasperreports.export.pdf.tag.th\" value=\"full\"/>\n    <box leftPadding=\"10\">\n      <pen lineColor=\"#000000\"/>\n      <topPen lineWidth=\"0.5\"/>\n      <leftPen lineWidth=\"0.5\"/>\n      <bottomPen lineWidth=\"0.5\"/>\n    </box>\n  </element>\n  <element kind=\"staticText\" mode=\"Opaque\" x=\"455\" y=\"15\" width=\"100\" height=\"15\" backcolor=\"#808080\" hTextAlign=\"Right\" bold=\"true\">\n    <text><![CDATA[Header 4.2]] ></text>\n    <property name=\"net.sf.jasperreports.export.pdf.tag.th\" value=\"full\"/>\n    <property name=\"net.sf.jasperreports.export.pdf.tag.tr\" value=\"end\"/>\n    <box rightPadding=\"10\">\n      <pen lineColor=\"#000000\"/>\n      <topPen lineWidth=\"0.5\"/>\n      <leftPen lineWidth=\"0.5\"/>\n      <bottomPen lineWidth=\"0.5\"/>\n      <rightPen lineWidth=\"1.0\" lineColor=\"#FF0000\"/>\n    </box>\n  </element>\n</pageHeader>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reference Hyperlink TextField Element - JasperReports XML\nDESCRIPTION: Defines a textField using the <hyperlinkReferenceExpression> tag with linkType=Reference to create an external URL link (e.g., to a website). Optionally specifies linkTarget to control browser behavior (such as opening in a new tab). Outputs an external clickable link in generated reports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" x=\\\"5\\\" y=\\\"95\\\" width=\\\"300\\\" height=\\\"15\\\" linkType=\\\"Reference\\\" linkTarget=\\\"Blank\\\">\\n  <expression><![CDATA[\\\"  >> Click here to go to www.google.com\\\"]] ></expression>\\n  <hyperlinkReferenceExpression><![CDATA[\\\"http://www.google.com\\\"]] ></hyperlinkReferenceExpression>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Defining Java Entity with JPA Annotations for Movie Cast Table - Java\nDESCRIPTION: Shows how to define a Java class 'Cast' mapped to the 'movie_cast' database table using JPA annotations. The @Entity annotation designates the class as an entity and @Table specifies the exact table name in the database schema. The code sample is used as a template for annotated ORM mapping and expects matching fields and appropriate getters/setters in the actual class implementation. This requires javax.persistence API dependencies and runtime support from the configured JPA provider.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql-j2ee/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Entity\\n@Table(name=\\\"movie_cast\\\")\\npublic class Cast {\\n...\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Editable Combobox Field in JasperReports JRXML\nDESCRIPTION: This JRXML snippet demonstrates how to create an editable combobox field within a PDF using a text field element. It sets the field type to 'Combo' using 'net.sf.jasperreports.export.pdf.field.type'. The available choices ('One', 'Two', etc.) are specified in 'net.sf.jasperreports.export.pdf.field.choices', using the default '|' separator as 'choice.separators' is not defined. Crucially, 'net.sf.jasperreports.export.pdf.field.combo.edit' is set to 'true', allowing users to type custom values into the combobox in addition to selecting from the list. The expression text is ignored.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/forms/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" ... forecolor=\"#0000FF\" backcolor=\"#FFFF00\" hTextAlign=\"Center\" fontName=\"DejaVu Serif\" bold=\"true\" fontSize=\"24.0\">\n  <expression><![CDATA[\"This text does not matter in PDF export.\"]] ></expression>\n  <property name=\"net.sf.jasperreports.export.pdf.field.type\" value=\"Combo\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.choices\" value=\"One|Two|Three|Four|Five\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.combo.edit\" value=\"true\"/>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Declaring Excel Data Adapter and Fields in JRXML - JasperReports XML\nDESCRIPTION: This JRXML snippet demonstrates how to assign a JasperReports report-level property referencing an Excel data adapter file and declare report fields corresponding to columns in the Excel data source. It also configures sorting by the 'city' (descending) and 'name' fields and applies a filter expression on the 'state' field. All fields are mapped with Java type bindings and are meant to be filled during the report generation phase.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldataadapter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\\\"net.sf.jasperreports.data.adapter\\\" value=\\\"/data/ExcelXlsDataAdapter.jrdax\\\"/>\\n...\\n<field name=\\\"id\\\" class=\\\"java.lang.Integer\\\"/>\\n<field name=\\\"name\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"address\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"city\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"state\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"date\\\" class=\\\"java.util.Date\\\"/>\\n\\n<sortField name=\\\"city\\\" order=\\\"Descending\\\"/>\\n<sortField name=\\\"name\\\"/>\\n...\\n<filterExpression><![CDATA[$P{IncludedStates}.contains($F{state})]] ></filterExpression>\n```\n\n----------------------------------------\n\nTITLE: Defining JRXML Data Adapter and Datasets - JasperReports XML\nDESCRIPTION: This JRXML example shows how to configure a main dataset and subdatasets, bind them to an external JSON HTTP data adapter (JsonHttpDataAdapter.jrdax), and set up query languages and fields for extracting total result counts. It requires JasperReports and access to the OmdbAPI, using jsonql queries and fields. The fields and properties enable retrieval and mapping from web service responses to report output for dynamic, paginated data.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport name=\\\"JsonHttpDataAdapterReport\\\" language=\\\"java\\\" columnCount=\\\"3\\\" pageWidth=\\\"595\\\" pageHeight=\\\"842\\\"\\n  columnWidth=\\\"171\\\" leftMargin=\\\"40\\\" rightMargin=\\\"40\\\" topMargin=\\\"50\\\" bottomMargin=\\\"50\\\">\\n  <property name=\\\"net.sf.jasperreports.data.adapter\\\" value=\\\"data/JsonHttpDataAdapter.jrdax\\\"/>\\n  <dataset name=\\\"FetchDataset\\\"/>\\n  <dataset name=\\\"MoviesDataset\\\">\\n    <property name=\\\"net.sf.jasperreports.data.adapter\\\" value=\\\"data/JsonHttpDataAdapter.jrdax\\\"/>\\n    <parameter name=\\\"page\\\" class=\\\"java.lang.Integer\\\">\\n      <property name=\\\"net.sf.jasperreports.http.data.url.parameter\\\"/>\\n    </parameter>\\n    <query language=\\\"jsonql\\\"><![CDATA[animals]] ></query>\\n    <field name=\\\"name\\\" class=\\\"java.lang.String\\\">\\n      <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"name\\\"/>\\n    </field>\\n    <field name=\\\"size\\\" class=\\\"java.lang.Integer\\\">\\n      <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"size\\\"/>\\n    </field>\\n    <field name=\\\"type\\\" class=\\\"java.lang.String\\\">\\n      <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"type\\\"/>\\n    </field>\\n    <field name=\\\"image\\\" class=\\\"java.lang.String\\\">\\n      <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"image\\\"/>\\n    </field>\\n  </dataset>\\n  <query language=\\\"jsonql\\\"/>\\n  <field name=\\\"totalResults\\\" class=\\\"java.lang.Integer\\\">\\n    <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"totalResults\\\"/>\\n  </field>\\n  ...\\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Running Test Artifacts with Maven - Shell\nDESCRIPTION: Runs all project tests using Maven from the '/tests' directory. Assumes a Maven-based Java test structure with test classes properly organized. Outputs test results and coverage reports as supported by the Maven configuration. No additional arguments are required.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean test\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Pie Chart Using JFreeChart - Java\nDESCRIPTION: This Java code snippet demonstrates how to set up a dataset, create a pie chart using the JFreeChart API, and customize the chart's appearance (e.g., start angle, direction, alpha, and no-data message). Dependencies: JFreeChart and JasperReports Java libraries. The expected input involves predefined category labels and associated values; the output is a JFreeChart object representing the chart, ready for rendering. Limitations include hardcoded values and pie chart-specific configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jfreechart/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n  DefaultPieDataset dataset = new DefaultPieDataset();\\n  dataset.setValue(\\\"Java\\\", 43.2d);\\n  dataset.setValue(\\\"Visual Basic\\\", 10.0d);\\n  dataset.setValue(\\\"C/C++\\\", 17.5d);\\n  dataset.setValue(\\\"PHP\\\", 32.5d);\\n  dataset.setValue(\\\"Perl\\\", 1.0d);\\n\\n  JFreeChart chart =\\n    ChartFactory.createPieChart(\\n      \\\"Pie Chart Demo 1\\\",\\n      dataset,\\n      true,\\n      true,\\n      false\\n      );\\n\\n  PiePlot plot = (PiePlot) chart.getPlot();\\n  plot.setStartAngle(290);\\n  plot.setDirection(Rotation.CLOCKWISE);\\n  plot.setForegroundAlpha(0.5f);\\n  plot.setNoDataMessage(\\\"No data to display\\\");\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running JasperReports Tabular Sample using Maven\nDESCRIPTION: This shell command uses Apache Maven to build and execute the JasperReports tabular sample project. It first cleans the project (`clean`), then compiles the source code (`compile`), and finally executes a specific goal (`exec:exec@all`) likely configured in the project's `pom.xml` to fill the report and export it to various formats. Prerequisites include having Maven (v3.6+) installed and being in the `demo/samples/tabular` directory of the JasperReports project. The output reports are generated in the `target/reports` subdirectory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tabular/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Querying Movie Information from JSON Array - JasperReports XML\nDESCRIPTION: This JRXML snippet defines a subdataset query using JSONQL to extract multiple fields (title, year, type, poster) from the 'Search' array in the JSON API response for the MoviesDataset. Field properties are mapped to their case-sensitive JSON member names. This enables population of list-type report components. Dependencies: JasperReports, JSON data source, proper JSON structure.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n <query language=\\\"jsonql\\\">\\n   <![CDATA[Search]] >\\n </query>\\n <field name=\\\"title\\\" class=\\\"java.lang.String\\\">\\n   <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"Title\\\"/>\\n </field>\\n <field name=\\\"year\\\" class=\\\"java.lang.Integer\\\">\\n   <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"Year\\\"/>\\n </field>\\n <field name=\\\"type\\\" class=\\\"java.lang.String\\\">\\n   <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"Type\\\"/>\\n </field>\\n <field name=\\\"poster\\\" class=\\\"java.lang.String\\\">\\n   <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"Poster\\\"/>\\n </field>\n```\n\n----------------------------------------\n\nTITLE: Configuring Element Stretching and Text Truncation in JasperReports XML\nDESCRIPTION: This XML snippet demonstrates how to set up JasperReports elements with different stretching and truncation behaviors. The elements include text fields and lines with properties such as positionType, stretchType, textAdjust, and fontSize. The snippet also shows how to use custom properties like net.sf.jasperreports.text.truncate.at.char to control text truncation. Inputs are XML elements within a JasperReports layout, and the output affects the rendered report's layout and text-fitting behavior. No external dependencies are needed beyond JasperReports itself.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/stretch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"elementGroup\\\">\\n  <element kind=\\\"line\\\" positionType=\\\"Float\\\" stretchType=\\\"ElementGroupHeight\\\" x=\\\"145\\\" y=\\\"5\\\" width=\\\"1\\\" height=\\\"1\\\" printWhenDetailOverflows=\\\"true\\\"/>\\n  <element kind=\\\"textField\\\" x=\\\"150\\\" y=\\\"5\\\" width=\\\"100\\\" hTextAlign=\\\"Justified\\\" textAdjust=\\\"StretchHeight\\\" removeLineWhenBlank=\\\"true\\\" fontSize=\\\"12.0\\\">\\n    <expression><![CDATA[\\\"This is a FIRST long chunk of text that will cause the text field to stretch outside\\n      its defined height and force other elements to move downwards.\\\"]] ></expression>\\n  </element>\\n  <element kind=\\\"line\\\" positionType=\\\"Float\\\" stretchType=\\\"ElementGroupHeight\\\" x=\\\"275\\\" y=\\\"5\\\" width=\\\"1\\\" height=\\\"1\\\" printWhenDetailOverflows=\\\"true\\\"/>\\n</element>\\nor text truncation properties:\\n<element kind=\\\"staticText\\\" x=\\\"145\\\" y=\\\"205\\\" width=\\\"130\\\" height=\\\"100\\\" fontSize=\\\"10.0\\\">\\n  <text><![CDATA[Text elements can also be truncated at the last character that fits the element reserved area; the behavior is triggered\\nby setting a property. This sentence might not fit fully in the space reserved for the element.]] ></text>\\n  <property name=\\\"net.sf.jasperreports.text.truncate.at.char\\\" value=\\\"true\\\"/>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Subreport Element for Documents - JasperReports XML\nDESCRIPTION: JasperReports XML snippet for embedding a subreport that receives a collection of documents per address using JRBeanCollectionDataSource. Requires the surrounding report template and 'documents' field to be present. Facilitates modular report generation by extracting and displaying details in a subreport for each parent record.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"subreport\\\" x=\\\"65\\\" y=\\\"21\\\" width=\\\"50\\\" height=\\\"20\\\" removeLineWhenBlank=\\\"true\\\">\\n  <dataSourceExpression><![CDATA[new JRBeanCollectionDataSource($F{documents})]] ></dataSourceExpression>\\n  <expression><![CDATA[\\\"DocumentsReport.jasper\\\"]] ></expression>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Defining totalResults Field in Main Dataset with XPath in JasperReports XML\nDESCRIPTION: Configuration for the totalResults field in the main dataset that uses XPath to extract the totalResults attribute from XML data retrieved from the OMDB API. The field is defined as an Integer type with a property that specifies the XPath expression.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"totalResults\" class=\"java.lang.Integer\">\n  <property name=\"net.sf.jasperreports.xpath.field.expression\" value=\"@totalResults\"/>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Conditional Autofilter End Property Expression in JasperReports XML\nDESCRIPTION: Applies the autofilter 'End' property conditionally based on page number. When the page number equals 1, the data range will end at the last Street detail cell.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<propertyExpression name=\"net.sf.jasperreports.export.xls.auto.filter\"><![CDATA[$V{PAGE_NUMBER}.equals(1) ? \"End\" : null]]></propertyExpression/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameterized SQL Query for Subreport Records - SQL\nDESCRIPTION: This SQL snippet is used within a JasperReports subreport to select product, position, document, and address fields, where results are filtered dynamically using the 'City' parameter. The query demonstrates passing master report context down to the subreport for result filtering. Dependencies: 'Positions', 'Product', 'Document', and 'Address' tables; 'City' parameter supplied by the master report. Inputs: City parameter value, outputs: SQL result set constrained by the city. The placeholder $P{City} is substituted by the reporting engine at runtime.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Product.ID AS ID, Product.Name AS Name,\\nPositions.Quantity AS Quantity, Positions.Price AS Price\\nFROM Positions, Product, Document, Address\\nWHERE Positions.DocumentID = Document.ID AND\\nDocument.AddressID = Address.ID AND\\nPositions.ProductID = Product.ID AND\\nAddress.City = $P{City}\\nORDER BY Product.ID\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports Sample with Maven\nDESCRIPTION: This command demonstrates how to run the NoReport sample using Maven. It executes the project to generate all supported document types in the target/reports directory. The command requires Maven 3.6 or later.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/noreport/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring XLSX Batch Export Options - JasperReports - Java\nDESCRIPTION: Demonstrates setting up a SimpleXlsxReportConfiguration, specifically configuring setOnePagePerSheet, and assigning it globally to an Excel exporter. Requires JasperReports exporters and configuration classes. Main setting controls whether each JasperPrint produces a separate worksheet; here, all are combined due to false. All reports share the same configuration, so report-specific configuration would require per-item setup.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nSimpleXlsxReportConfiguration configuration = new SimpleXlsxReportConfiguration();\nconfiguration.setOnePagePerSheet(false);\nexporter.setConfiguration(configuration);\n```\n\n----------------------------------------\n\nTITLE: JasperReports Variable Declaration\nDESCRIPTION: XML structure showing how to declare report variables with attributes like name, class, resetType, and calculation type. Variables are used for code reusability and calculations in reports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<variable>\n  name=\"variableName\"\n  class=\"java.lang.String\"\n  resetType=\"Report\"\n  calculation=\"Nothing\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Filling Excel Data Adapter Reports Programmatically - JasperReports Java\nDESCRIPTION: This Java method programmatically fills multiple JasperReports using various Excel data adapters and outputs them to files. It showcases parameter preparation (including filters and report titles), loading compiled '.jasper' files, configuring their data adapter properties, and invoking 'JasperFillManager.fillReportToFile' for both direct data source and query executer modes. Requires JasperReports Java libraries, and input/output files must be in place; outputs are generated report files, with execution times logged to stderr.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldataadapter/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void fill() throws JRException\\n{\\n  long start = System.currentTimeMillis();\\n  //Preparing parameters\\n  Map<String, Object> parameters = new HashMap<String, Object>();\\n  parameters.put(\\\"ReportTitle\\\", \\\"Address Report\\\");\\n  Set<String> states = new HashSet<String>();\\n  states.add(\\\"Active\\\");\\n  states.add(\\\"Trial\\\");\\n  parameters.put(\\\"IncludedStates\\\", states);\\n\\n  //query executer mode\\n  parameters.put(\\\"DataFile\\\", \\\"XLS query executer mode for Excel data adapter\\\");\\n  JasperFillManager.fillReportToFile(\\\"target/reports/ExcelXlsQeDataAdapterReport.jasper\\\", new HashMap<String, Object>(parameters));\\n  parameters.put(\\\"DataFile\\\", \\\"XLSX query executer mode for Excel data adapter\\\");\\n  JasperFillManager.fillReportToFile(\\\"target/reports/ExcelXlsxQeDataAdapterReport.jasper\\\", new HashMap<String, Object>(parameters));\\n\\n  JasperReport jasperReport = (JasperReport)JRLoader.loadObjectFromFile(\\\"target/reports/ExcelXlsQeDataAdapterReport.jasper\\\");\\n  jasperReport.setProperty(DataAdapterParameterContributorFactory.PROPERTY_DATA_ADAPTER_LOCATION, \\\"data/XlsQeDataAdapter.jrdax\\\");\\n  JasperFillManager.fillReportToFile(jasperReport, \\\"target/reports/XlsQeDataAdapterReport.jrprint\\\", new HashMap<String, Object>(parameters));\\n\\n  jasperReport = (JasperReport)JRLoader.loadObjectFromFile(\\\"target/reports/ExcelXlsxQeDataAdapterReport.jasper\\\");\\n  jasperReport.setProperty(DataAdapterParameterContributorFactory.PROPERTY_DATA_ADAPTER_LOCATION, \\\"data/XlsxQeDataAdapter.jrdax\\\");\\n  JasperFillManager.fillReportToFile(jasperReport, \\\"target/reports/XlsxQeDataAdapterReport.jrprint\\\", new HashMap<String, Object>(parameters));\\n\\n  //data source mode\\n  parameters.put(\\\"DataFile\\\", \\\"Excel data adapter for XLS data source\\\");\\n  JasperFillManager.fillReportToFile(\\\"target/reports/ExcelXlsDataAdapterReport.jasper\\\", new HashMap<String, Object>(parameters));\\n  parameters.put(\\\"DataFile\\\", \\\"Excel data adapter for XLSX data source\\\");\\n  JasperFillManager.fillReportToFile(\\\"target/reports/ExcelXlsxDataAdapterReport.jasper\\\", new HashMap<String, Object>(parameters));\\n\\n  jasperReport = (JasperReport)JRLoader.loadObjectFromFile(\\\"target/reports/ExcelXlsDataAdapterReport.jasper\\\");\\n  jasperReport.setProperty(DataAdapterParameterContributorFactory.PROPERTY_DATA_ADAPTER_LOCATION, \\\"data/XlsDataAdapter.jrdax\\\");\\n  JasperFillManager.fillReportToFile(jasperReport, \\\"target/reports/XlsDataAdapterReport.jrprint\\\", new HashMap<String, Object>(parameters));\\n\\n  jasperReport = (JasperReport)JRLoader.loadObjectFromFile(\\\"target/reports/ExcelXlsxDataAdapterReport.jasper\\\");\\n  jasperReport.setProperty(DataAdapterParameterContributorFactory.PROPERTY_DATA_ADAPTER_LOCATION, \\\"data/XlsxDataAdapter.jrdax\\\");\\n  JasperFillManager.fillReportToFile(jasperReport, \\\"target/reports/XlsxDataAdapterReport.jrprint\\\", new HashMap<String, Object>(parameters));\\n\\n  System.err.println(\\\"Filling time : \\\" + (System.currentTimeMillis() - start));\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Project Documentation with Maven - Shell\nDESCRIPTION: Generates JasperReports documentation by compiling the documentation project in the '/docs' directory using Maven. Produces documentation artifacts under '/docs/target/docs'. Requires Maven and that the documentation module's POM is properly set up for documentation generation.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean compile\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Style Properties to a TextField in JRXML\nDESCRIPTION: This JRXML snippet shows how to override style attributes for a `textField` element dynamically in JasperReports. It uses a static `<property>` tag to set `bold` to true and `<propertyExpression>` tags to set `forecolor`, `backcolor`, and `fontName` based on report fields, parameters, or variables evaluated at runtime. This requires JasperReports v.4.8.0 or later and corresponding report variables/parameters/fields (e.g., $F{Forecolor}, $P{Backcolor}, $V{FontName}) to be defined.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/crosstabs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" x=\"0\" y=\"0\" width=\"0\" height=\"10\">\n  ...\n  <property name=\"net.sf.jasperreports.style.bold\" value=\"true\"/>\n  <propertyExpression name=\"net.sf.jasperreports.style.forecolor\"><![CDATA[$F{Forecolor}]] ></propertyExpression>\n  <propertyExpression name=\"net.sf.jasperreports.style.backcolor\"><![CDATA[$P{Backcolor}]] ></propertyExpression>\n  <propertyExpression name=\"net.sf.jasperreports.style.fontName\"><![CDATA[$V{FontName}]] ></propertyExpression>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Less Than Clause with $X{LESS} in JasperReports SQL\nDESCRIPTION: Creates a SQL 'less than' comparison clause using a report parameter. Takes the column name and the parameter name. Generates `<column_name> < ?` if the parameter value is not null. If the parameter value is null, it generates a clause that always evaluates to true (e.g., `0 = 0`), effectively ignoring the comparison. For strict null comparison behavior, use standard parameter syntax like `<column_name> < $P{<parameter_name>}` instead.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n$X{LESS, <column_name>, <parameter_name>}\n```\n\n----------------------------------------\n\nTITLE: Defining JasperReports Variables for Grouping and Calculations\nDESCRIPTION: Declaration of various report variables used for grouping, calculations, and data manipulation. These variables handle first letter extraction, freight summations at different levels, date calculations, and pagination logic.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<variable name=\"FirstLetter\" resetType=\"None\" class=\"java.lang.String\">\n  <expression><![CDATA[$F{ShipCountry}.substring(0, 1).toUpperCase()]] ></expression>\n</variable>\n<variable name=\"FreightSumFirstLetterGroup\" resetType=\"Group\" calculation=\"Sum\" resetGroup=\"FirstLetterGroup\" class=\"java.lang.Double\">\n  <expression><![CDATA[$F{Freight}]] ></expression>\n</variable>\n<variable name=\"FreightSumCountryGroup\" resetType=\"Group\" calculation=\"Sum\" resetGroup=\"CountryGroup\" class=\"java.lang.Double\">\n  <expression><![CDATA[$F{Freight}]] ></expression>\n</variable>\n<variable name=\"FreightSumColumn\" resetType=\"Column\" calculation=\"Sum\" class=\"java.lang.Double\">\n  <expression><![CDATA[$F{Freight}]] ></expression>\n</variable>\n<variable name=\"FreightSumPage\" resetType=\"Page\" calculation=\"Sum\" class=\"java.lang.Double\">\n  <expression><![CDATA[$F{Freight}]] ></expression>\n</variable>\n<variable name=\"FreightSumReport\" calculation=\"Sum\" class=\"java.lang.Double\">\n  <expression><![CDATA[$F{Freight}]] ></expression>\n</variable>\n<variable name=\"DateHighestCountryGroup\" resetType=\"Group\" calculation=\"Highest\" resetGroup=\"CountryGroup\" class=\"java.sql.Timestamp\">\n  <expression><![CDATA[$F{OrderDate}]] ></expression>\n</variable>\n<variable name=\"RegionCountCountryGroup\" resetType=\"Group\" calculation=\"Count\" resetGroup=\"CountryGroup\" class=\"java.lang.Integer\">\n  <expression><![CDATA[$F{ShipRegion}]] ></expression>\n</variable>\n<variable name=\"FirstLetterStartPageNumber\" resetType=\"Group\" calculation=\"Sum\" resetGroup=\"FirstLetterGroup\" class=\"java.lang.Integer\">\n  <expression><![CDATA[$V{FirstLetterGroup_COUNT} <= 1 ? $V{PAGE_NUMBER} : 0]] ></expression>\n</variable>\n```\n\n----------------------------------------\n\nTITLE: Defining an Ant Target for Decompiling JasperReports\nDESCRIPTION: This Ant build script snippet defines a target named 'decompile'. It first defines a custom task 'jrdc' based on the `net.sf.jasperreports.ant.JRAntDecompileTask` class, setting its classpath. Then, it uses the 'jrdc' task to find all `.jasper` files within the `./build/reports` directory (and its subdirectories) and decompiles them into `.jrxml` files in the same destination directory structure. The task requires the 'sample-classpath' reference.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antcompile/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"decompile\" description=\"Decompiles report designs specified using a &lt;fileset&gt; in the &lt;src&gt; tag.\" depends=\"prepare-sample-classpath\">\n  <taskdef name=\"jrdc\" classname=\"net.sf.jasperreports.ant.JRAntDecompileTask\"> \n    <classpath refid=\"sample-classpath\"/>\n  </taskdef>\n  <jrdc destdir=\"./build/reports\">\n    <src>\n      <fileset dir=\"./build/reports\">\n        <include name=\"**/*.jasper\"/>\n      </fileset>\n    </src>\n    <classpath refid=\"sample-classpath\"/>\n  </jrdc> \n</target>\n```\n\n----------------------------------------\n\nTITLE: Complex Element with Multiple Excel Export Properties\nDESCRIPTION: This XML snippet defines a text field with multiple Excel export properties including auto-filter, column width ratio, and sheet tab color. The properties are conditionally applied based on field values, affecting only the sheet containing this element.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" positionType=\"Float\" x=\"316\" width=\"199\" height=\"15\" textAdjust=\"StretchHeight\">\n  <expression><![CDATA[$F{address}]] ></expression>\n  <propertyExpression name=\"net.sf.jasperreports.export.xls.auto.filter\">\n    <![CDATA[$V{PAGE_NUMBER}.equals(1) ? \"End\" : null]] >\n  </propertyExpression>\n  <propertyExpression name=\"net.sf.jasperreports.export.xls.column.width.ratio\">\n    <![CDATA[$F{id}.equals(44) ? \"0.75f\" : null]] >\n  </propertyExpression>\n  <propertyExpression name=\"net.sf.jasperreports.export.xls.sheet.tab.color\">\n    <![CDATA[$F{id}.equals(44) ? \"#FF0000\" : null]] >\n  </propertyExpression>\n  ...\n</element>\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Equality Clause with $X{EQUAL} in JasperReports SQL\nDESCRIPTION: Generates a SQL equality comparison clause based on a single report parameter value. Takes the column name and the parameter name. If the parameter value is not null, it generates `<column_name> = ?`. If the parameter value is null, it generates `<column_name> IS NULL`.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n$X{EQUAL, <column_name>, <parameter_name>}\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Query for JasperReports with Ordering by ShipCountry\nDESCRIPTION: SQL query that retrieves data from the Orders table with a parameter to limit results by OrderID and sorts data by ShipCountry. This ordering is crucial for proper group processing in the report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n<query language=\"sql\"><![CDATA[SELECT * FROM Orders WHERE OrderID <= $P{MaxOrderID} ORDER BY ShipCountry]] ></query>\n```\n\n----------------------------------------\n\nTITLE: Linking Bookmark Data Source to ToC Part in JRXML\nDESCRIPTION: Demonstrates setting the `net.sf.jasperreports.bookmarks.data.source.parameter` property within a report part definition. Assigning the value `REPORT_DATA_SOURCE` configures the part to use the automatically collected report bookmarks as its input data source, which is essential for generating a Table of Contents.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tableofcontents/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.bookmarks.data.source.parameter\" value=\"REPORT_DATA_SOURCE\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Exporter Input for Batch Export - JasperReports - Java\nDESCRIPTION: Shows how to provide a list of JasperPrint objects as exporter input using SimpleExporterInput.getInstance. This method packages multiple JasperPrints for batch processing, a prerequisite for coordinated export (e.g., to PDF or XLSX) in JasperReports. Input must be a List<JasperPrint>, and output is an ExporterInput instance. This pattern enables concatenation and configuration batchwise.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nexporter.setExporterInput(SimpleExporterInput.getInstance(jasperPrintList));\n```\n\n----------------------------------------\n\nTITLE: Implementing JRDataSourceProvider Interface in Java\nDESCRIPTION: Demonstrates the methods required to implement a custom JRDataSourceProvider, which allows creating and disposing of data source objects and listing available report fields.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic boolean supportsGetFieldsOperation();\npublic JRField[] getFields(JasperReport report) throws JRException, UnsupportedOperationException;\npublic JRDataSource create(JasperReport report) throws JRException;\npublic void dispose(JRDataSource dataSource) throws JRException;\n```\n\n----------------------------------------\n\nTITLE: Absolute JSONQL Path Expression using Bracket Notation\nDESCRIPTION: This snippet demonstrates an alternative syntax for an absolute JSONQL expression, using bracket notation for the root object (`$[\"Northwind\"]`) as well as for array indexing (`[0]`) and property names (`[\"Company Name\"]`). Like the previous example, it retrieves the \"Company Name\" of the first customer from the root of the JSON data.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonql\nCODE:\n```\n$[\"Northwind\"].Customers[0][\"Company Name\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fixed Date End with DATERANGE in JasperReports JRXML (XML)\nDESCRIPTION: Shows how to declare a textField element in JRXML to compute and display the end time of a specific date using DATERANGE with a static timestamp. It highlights field stretching, vertical alignment, and output formatting for the date. Dependencies: JasperReports engine and DateRange support. Input is a literal datetime string; output is the end datetime for this given date.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/daterange/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" stretchType=\\\"ElementGroupHeight\\\" mode=\\\"Opaque\\\" x=\\\"375\\\" y=\\\"380\\\" width=\\\"180\\\" height=\\\"20\\\" \\n        backcolor=\\\"#EEEEEE\\\" vTextAlign=\\\"Middle\\\" textAdjust=\\\"StretchHeight\\\" pattern=\\\"EEE, MMM d, yyyy  HH:mm:ss z\\\">\\n  <expression><![CDATA[DATERANGE(\\\"2017-05-01 14:25:48\\\").getEnd()]] ></expression>\\n  <property name=\\\"net.sf.jasperreports.export.xls.pattern\\\" value=\\\"ddd, MMM d, yyyy  HH:mm:ss\\\"/>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Viewing a Compiled JasperReport Template - Shell\nDESCRIPTION: Uses Maven's 'exec:java@viewDesign' goal with a file path argument to open a compiled '.jasper' file. Run from the relevant sample directory. Requires that the file exists at the given path and that Maven's execution goal can process JasperReport templates for viewing.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java@viewDesign -Dexec.args=target/reports/I18nReport.jasper\n```\n\n----------------------------------------\n\nTITLE: Defining Static and Conditional Styles in JasperReports XML Style Template (.jrtx)\nDESCRIPTION: This snippet is an example .jrtx style template file for JasperReports, demonstrating the definition of static styles as well as conditional styles. Dependencies include JasperReports 6.20.0+ and proper reference to the template within a report using the <template> tag. Key parameters are style names and associated expressions. The elements define font attributes, base style inheritance, and conditional formatting logic based on Boolean parameters, fields, or variables. Usage is limited to simple conditional expressions as per JasperReports schema.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n  <jasperTemplate>\n    <style name=\\\"Sans_Normal\\\" fontName=\\\"DejaVu Sans\\\" fontSize=\\\"12.0\\\" default=\\\"true\\\"/>\n    <style name=\\\"Sans_Bold\\\" fontName=\\\"DejaVu Sans\\\" fontSize=\\\"12.0\\\" bold=\\\"true\\\"/>\n    <style name=\\\"Sans_Italic\\\" fontName=\\\"DejaVu Sans\\\" fontSize=\\\"12.0\\\" italic=\\\"true\\\"/>\n    <style name=\\\"RowStyle\\\" style=\\\"Sans_Normal\\\">\n      <conditionalStyle mode=\\\"Opaque\\\" backcolor=\\\"rgba(238, 238, 238, 0.5)\\\">\\n        <conditionExpression><![CDATA[$V{ConditionalRow}]] ></conditionExpression>\\n      </conditionalStyle>\n    </style>\n    <style name=\\\"FieldStyle\\\" style=\\\"RowStyle\\\">\\n      <conditionalStyle forecolor=\\\"#0000FF\\\">\\n        <conditionExpression><![CDATA[$F{ConditionalField}]] ></conditionExpression>\\n      </conditionalStyle>\n    </style>\n    <style name=\\\"TitleStyle\\\" fontSize=\\\"22.0\\\" style=\\\"Sans_Normal\\\">\\n      <conditionalStyle fontSize=\\\"26.0\\\" bold=\\\"true\\\">\\n        <conditionExpression><![CDATA[$P{ConditionalParam}]] ></conditionExpression>\\n      </conditionalStyle>\n    </style>\n  </jasperTemplate>\n```\n\n----------------------------------------\n\nTITLE: Calculating Dynamic Background Color for Crosstab Cell in JRXML\nDESCRIPTION: This JRXML snippet, from a JasperReports crosstab example, demonstrates dynamically setting the background color of a `textField` element. It uses a `<propertyExpression>` for `net.sf.jasperreports.style.backcolor` containing a Java expression that calculates a color shade based on the `$V{OrderCount}` variable relative to a total (`$V{OrderCount_CountryRow_FreightColumn_ALL}`). This visually represents cell values using color intensity. It requires the `JRColorUtil` class, `java.awt.Color`, and the specified report variables.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/crosstabs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" mode=\"Opaque\" width=\"60\" height=\"10\" hTextAlign=\"Center\" vTextAlign=\"Middle\" style=\"OrderCountStyle\">\n  <expression><![CDATA[$V{OrderCount}]] ></expression>\n  <propertyExpression name=\"net.sf.jasperreports.style.backcolor\">\n    <![CDATA[\"#\" + net.sf.jasperreports.engine.util.JRColorUtil.getColorHexa(new java.awt.Color(\n                  255, \n                  255 - Math.min(255,(int)(255 * 20 * $V{OrderCount} / $V{OrderCount_CountryRow_FreightColumn_ALL})), \n                  255 - Math.min(255,(int)(255 * 20 * $V{OrderCount} / $V{OrderCount_CountryRow_FreightColumn_ALL}))))]] ></propertyExpression>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Filling a JasperReport with JRTableModelDataSource in Java\nDESCRIPTION: A method that demonstrates how to fill a JasperReport using JRTableModelDataSource with a CustomTableModel. It sets up parameters including the report title and data file, then uses JasperFillManager to generate the report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic void fill2() throws JRException\n{\n long start = System.currentTimeMillis();\n //Preparing parameters\n Map parameters = new HashMap();\n parameters.put(\"ReportTitle\", \"Address Report\");\n parameters.put(\"DataFile\", \"CustomTableModel.java\");\n\n JasperFillManager.fillReportToFile(\"build/reports/DataSourceReport.jasper\",\n   parameters, new JRTableModelDataSource(new CustomTableModel()));\n System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Print Expression in FooReport.jrxml (XML)\nDESCRIPTION: Shows the `<printWhenExpression>` element within the title section of `FooReport.jrxml`. It uses a Java expression `com.foo.SomeFooClass.isToPrint()` to determine if the title section should be printed. This requires the `com.foo.SomeFooClass` class to be available in the classpath during report generation.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antupdate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<printWhenExpression><![CDATA[com.foo.SomeFooClass.isToPrint()]]></printWhenExpression>\n```\n\n----------------------------------------\n\nTITLE: Compiling and Executing XChart JasperReports Sample with Maven - Shell\nDESCRIPTION: This shell command compiles and executes the JasperReports XChart sample using Apache Maven. It should be run from the sample project directory and requires Maven 3.6 or later. The command clears previous build artifacts, compiles the Java sources, and executes all configured sample reports, producing generated outputs in the target/reports directory. Prerequisites include Maven setup and dependencies specified by the JasperReports sample project.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xchart/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\\n\n```\n\n----------------------------------------\n\nTITLE: Filling Multiple Reports for Batch Export - JasperReports - Java\nDESCRIPTION: This code defines a fill method that creates three JasperPrint files by invoking JasperFillManager.fillReportToFile with different template paths, using empty data sources and printing timing information. Prerequisites are the existence of compiled report templates (.jasper) under the target/reports directory and the JasperReports library. It expects no external input, outputs .jrprint files, and logs time to standard error. This is typically the preparatory step before batch exporting.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npublic void fill() throws JRException\n{\n  long start = System.currentTimeMillis();\n  JasperFillManager.fillReportToFile(\n    \"target/reports/Report1.jasper\",\n    null, \n    new JREmptyDataSource(2)\n    );\n  JasperFillManager.fillReportToFile(\n    \"target/reports/Report2.jasper\",\n    null, \n    new JREmptyDataSource(2)\n    );\n  JasperFillManager.fillReportToFile(\n    \"target/reports/Report3.jasper\",\n    null, \n    new JREmptyDataSource(2)\n    );\n  System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Constructing Array of Objects with Selected Keys - JSON\nDESCRIPTION: This example provides the expected result of a JSONQL object construction expression, creating an array of objects each containing OrderID and OrderDate fields. The prerequisite is an Orders array of objects; key parameters are the fields selected for each object. It shows how to aggregate these fields for multiple orders, producing a concise array structure as output from input JSON via construction syntax.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[{\\n\\\"OrderID\\\": 10643,\\n\\\"OrderDate\\\": \\\"1997-08-25\\\"\\n},\\n...\\n{\\n\\\"OrderID\\\": 11011,\\n\\\"OrderDate\\\": \\\"1998-04-09\\\"\\n}]\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Helper Methods in Scriptlets - JasperReports Java\nDESCRIPTION: This Java code snippet defines a helper method within a JasperReports scriptlet class, returning a string when invoked from the report template. It depends on JRScriptletException from JasperReports and is placed inside a JRDefaultScriptlet subclass. The method can be called from within report expressions (e.g., from a TextField using $P{REPORT_SCRIPTLET}.hello()). No input parameters are needed; the method returns a standard greeting string. This approach lets scriptlet logic be reusable in report expressions and facilitates custom programmatic responses during report filling.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/scriptlet/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n    public String hello() throws JRScriptletException\\n    {\\n        return \"Hello! I'm the report's scriptlet object.\";\\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Ant Target for Updating JRXMLs via fileset (XML)\nDESCRIPTION: Defines an Ant target named `update2` using the JasperReports `<jru>` task with a nested `<src>` fileset to specify JRXML files for update. It targets files matching `**/*.jrxml` within `./reports`, outputs to `./build/reports`, and uses the `sample-classpath`. Commented-out `<updater>` tags are included for optional custom processing.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antupdate/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"update2\" description=\"Updates report designs specified using a &lt;fileset&gt; in the &lt;src&gt; tag.\" depends=\"define-jru\">\n  <mkdir dir=\"./build/reports\"/> \n  <jru destdir=\"./build/reports\">\n    <src>\n      <fileset dir=\"./reports\">\n        <include name=\"**/*.jrxml\"/>\n      </fileset>\n    </src>\n    <classpath refid=\"sample-classpath\"/>\n    <!--\n    <updater>com.update.RenewUuidsUpdater</updater>\n    <updater>com.update.StyleUpdater</updater>\n    -->\n  </jru> \n</target>\n```\n\n----------------------------------------\n\nTITLE: Starting HSQLDB Server using Maven (Shell)\nDESCRIPTION: Executes the HSQLDB server using the Maven `exec:java` plugin. This command should be run from the `demo/hsqldb` directory within the JasperReports source project. It requires Apache Maven (version 3.6 or later) to be installed. This server instance needs to remain running for the subsequent sample execution step.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/nopagebreak/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON API Response Format - JavaScript/JSON\nDESCRIPTION: This JSON snippet illustrates the sample API response from OmdbAPI used as the external data source for JasperReports. The structure consists of a main object containing a 'Search' array (with movie objects), a 'totalResults' field for pagination, and a boolean 'Response' indicating success. The JRXML fields map directly to these JSON members, requiring proper case sensitivity and structure conformity in the API response.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"Search\\\":[\\n    {\\\"Title\\\":\\\"Aliens\\\",\\\"Year\\\":\\\"1986\\\",\\\"imdbID\\\":\\\"tt0090605\\\",\\\"Type\\\":\\\"movie\\\",\\\"Poster\\\":\\\"https://.../...jpg\\\"},\\n    {\\\"Title\\\":\\\"Cowboys & Aliens\\\",\\\"Year\\\":\\\"2011\\\",\\\"imdbID\\\":\\\"tt0409847\\\",\\\"Type\\\":\\\"movie\\\",\\\"Poster\\\":\\\"https://.../...jpg\\\"},\\n    ...\\n   ],\\n  \\\"totalResults\\\":\\\"213\\\",\\n  \\\"Response\\\":\\\"True\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding an XChart Component in JasperReports JRXML Template (XML)\nDESCRIPTION: Provides a sample JRXML configuration that demonstrates embedding the custom XYChart component into a JasperReports report. Essential dependencies include the prior registration of the component and required data sources. The snippet illustrates defining a dataset, parameters, and the structure of the componentElement referencing the specialized XYChart with nested expressions for title, axes, and color; it is essential that all expressions and field references are valid for correct chart rendering. Limitations are bound to the correctness of parameter references and schema adherence.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xchartcomponent/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\\\"chartStyle\\\" backcolor=\\\"#DDDDDD\\\">\\n  <box>\\n    <pen lineWidth=\\\"1\\\"/>\\n  </box>\\n</style>\\n<subDataset name=\\\"xyDataset\\\">\\n  <parameter class=\\\"net.sf.jasperreports.engine.data.JRCsvDataSource\\\" name=\\\"xyDatasource\\\"/>\\n  <field name=\\\"name\\\" class=\\\"java.lang.String\\\"/>\\n  <field name=\\\"x\\\" class=\\\"java.lang.Integer\\\"/>\\n  <field name=\\\"y\\\" class=\\\"java.lang.Integer\\\"/>\\n  <field name=\\\"color\\\" class=\\\"java.lang.String\\\"/>\\n</subDataset>\\n<parameter class=\\\"net.sf.jasperreports.engine.data.JRCsvDataSource\\\" name=\\\"xyDatasource\\\"/>\\n\\n...\\n\\n<componentElement>\\n  <element x=\\\"0\\\" y=\\\"80\\\" width=\\\"545\\\" height=\\\"320\\\" style=\\\"chartStyle\\\"/>\\n  <xc:XYChart xmlns:xc=\\\"http://jasperreports.sourceforge.net/jasperreports/xchart\\\"\\n    xsi:schemaLocation=\\\"http://jasperreports.sourceforge.net/jasperreports/xchart\\n    http://jasperreports.sourceforge.net/dtds/xchart.xsd\\\" evaluationTime=\\\"Now\\\">\\n    <xc:XYDataset>\\n      <dataset>\\n        <datasetRun subDataset=\\\"xyDataset\\\">\\n          <dataSourceExpression><![CDATA[$P{xyDatasource}]] ></dataSourceExpression>\\n        </datasetRun>\\n      </dataset>\\n      <xc:XYSeries>\\n        <seriesExpression><![CDATA[$F{name}]] ></seriesExpression>\\n        <xValueExpression><![CDATA[$F{x}]] ></xValueExpression>\\n        <yValueExpression><![CDATA[$F{y}]] ></yValueExpression>\\n        <xc:colorExpression><![CDATA[$F{color}]] ></xc:colorExpression>\\n      </xc:XYSeries>\\n    </xc:XYDataset>\\n    <xc:chartTitleExpression><![CDATA[\\\"XY Area Chart\\\"]] ></xc:chartTitleExpression>\\n    <xc:xAxisTitleExpression><![CDATA[\\\"Probability\\\"]] ></xc:xAxisTitleExpression>\\n    <xc:yAxisTitleExpression><![CDATA[\\\"Amount\\\"]] ></xc:yAxisTitleExpression>\\n  </xc:XYChart>\\n</componentElement>\n```\n\n----------------------------------------\n\nTITLE: Viewing a Generated JRPrint Report File - Shell\nDESCRIPTION: Executes Maven with the 'exec:java@view' goal to visualize the generated '.jrprint' report output. Requires the generated file and correct Maven configuration. Outputs the visual representation of the report file for review.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java@view\n```\n\n----------------------------------------\n\nTITLE: Defining Bookmarks and Master Page Variables in Content Part JRXML\nDESCRIPTION: Illustrates defining bookmarks within a content report part (`TablePart.jrxml`) using the `bookmarkLevel` attribute and `anchorNameExpression` on text field elements. This example shows creating hierarchical bookmarks (level 1 and 2) based on report groups. It also demonstrates using `MASTER_CURRENT_PAGE` and `MASTER_TOTAL_PAGES` variables with `evaluationTime=\"Master\"` for accurate pagination in the context of report parts.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tableofcontents/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport ...>\n  ...\n  <group name=\"FirstLetterGroup\" minHeightToStartNewPage=\"60\">\n    <expression><![CDATA[$V{FirstLetter}]] ></expression>\n    <groupHeader>\n      <band height=\"25\">\n        ...\n        <element kind=\"textField\" ... bookmarkLevel=\"1\">\n          <expression><![CDATA[$V{FirstLetter}]] ></expression>\n          <anchorNameExpression><![CDATA[\"Letter \" + $V{FirstLetter}]] ></anchorNameExpression>\n        </element>\n      </band>\n    </groupHeader>\n  </group>\n  <group name=\"ShipCountryGroup\" minHeightToStartNewPage=\"60\">\n    <groupExpression><![CDATA[$F{ShipCountry}]] ></groupExpression>\n    <groupHeader>\n      <band height=\"20\">\n        ...\n        <element kind=\"textField\" y=\"4\" width=\"515\" height=\"15\" bookmarkLevel=\"2\" style=\"Sans_Bold\">\n          <expression><![CDATA[\"  \" + String.valueOf($V{ShipCountryNumber}) + \". \" + String.valueOf($F{ShipCountry})]] ></expression>\n          <anchorNameExpression><![CDATA[$F{ShipCountry}]] ></anchorNameExpression>\n        </element>\n      </band>\n    </groupHeader>\n    <groupFooter>\n      ...\n    </groupFooter>\n  </group>\n  <pageHeader>\n    <band ...>\n      ...\n    </band>\n  </pageHeader>\n  <detail>\n    <band ...>\n      ...\n    </band>\n  </detail>\n  <pageFooter>\n    <band ...>\n      ...\n      <element kind=\"textField\" y=\"20\" width=\"515\" height=\"15\" hTextAlign=\"Center\" evaluationTime=\"Master\">\n        <expression><![CDATA[\"Page \" + $V{MASTER_CURRENT_PAGE} + \" of \" + $V{MASTER_TOTAL_PAGES}]] ></expression>\n      </element>\n  </pageFooter>\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Parameterized NOTIN Clause and ORDER BY (SQL, XML)\nDESCRIPTION: This snippet is an embedded SQL query, written for JasperReports, retrieving table columns and computing a boolean field ConditionalField. The query uses the JasperReports-specific $X{NOTIN,...} macro to exclude results based on a collection parameter and parameterizes the ORDER BY clause. Required dependencies are a supported SQL database and properly configured report parameters. Inputs are OrderClause and ExcludedCities; the result set includes the computed ConditionalField.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Id, FirstName, LastName, Street, City, (Id < 30) as ConditionalField\n  FROM Address\n  WHERE $X{NOTIN, City, ExcludedCities}\n  ORDER BY $P!{OrderClause}\n```\n\n----------------------------------------\n\nTITLE: Configuring JDT compiler for Java 1.5 (Properties)\nDESCRIPTION: Shows the properties needed to configure the JDT compiler to use Java 1.5 compatibility in the jasperreports.properties file.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/java1.5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\norg.eclipse.jdt.core.compiler.source=1.5\norg.eclipse.jdt.core.compiler.compliance=1.5\norg.eclipse.jdt.core.compiler.codegen.TargetPlatform=1.5\n```\n\n----------------------------------------\n\nTITLE: JSONQL Query with Multi-Line Comment Block\nDESCRIPTION: This example shows how multi-line comments, delimited by `/*` and `*/`, can be used to comment out a block of code spanning multiple lines in a JSONQL expression. Here, the traversal into `.Orders`, the selection of all elements `.*`, and the associated filter are all commented out.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_11\n\nLANGUAGE: jsonql\nCODE:\n```\nNorthwind\n  .Customers\n  /*.Orders\n  .*\n  (Freight > 200 && OrderDate *= \"1997\")*/\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Exporter Batch Bookmarks - JasperReports - Java\nDESCRIPTION: This snippet shows how to instantiate a SimplePdfExporterConfiguration, enable batch mode bookmarks for concatenated PDF output, and assign the configuration to the exporter. Dependencies include JasperReports exporter and configuration classes. The key parameter setCreatingBatchModeBookmarks(boolean) controls whether bookmarks should mark the start of each concatenated document, and must be set before triggering export. Input requires a list of JasperPrints, and output is a single PDF with bookmarks if enabled.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nSimplePdfExporterConfiguration configuration = new SimplePdfExporterConfiguration();\nconfiguration.setCreatingBatchModeBookmarks(true);  //or false, if needed\nexporter.setConfiguration(configuration);\n```\n\n----------------------------------------\n\nTITLE: Defining and Accessing Sample JSON Document - JSON\nDESCRIPTION: This example illustrates a sample JSON structure with nested objects (Products) and inner objects (Product_1, Product_2) each holding fields like Id and Category. It serves as a concrete context for demonstrating JSONQL member expressions, showing how such structures can be traversed. Prerequisites: understanding of JSON format; key parameters include object keys and nested object fields; expected input is valid JSON and output depends on the query expression applied.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\\"Products\\\": {\\n\\\"Product_1\\\": {\\n\\\"Id\\\": 123,\\n\\\"Category\\\": \\\"books\\\"\\n},\\n\\\"Product_2\\\": {\\n\\\"Id\\\": 234,\\n\\\"Category\\\": \\\"dvds\\\"\\n}\\n}\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring enum parameter in JasperReports (XML)\nDESCRIPTION: Demonstrates how to declare an enumerated type parameter in a JasperReports template.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/java1.5/README.md#2025-04-22_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<parameter name=\"greeting\" class=\"Greeting\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Reports with Maven - Bash\nDESCRIPTION: Command-line bash instruction to compile and execute all Hibernate sample reports, outputting documents to target/reports. Requires Maven, proper project folder, and assumes HSQLDB server is already running from a previous terminal. Triggers report generation for the entire JasperReports Hibernate sample suite.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining a JSONQL Query in JasperReports XML\nDESCRIPTION: This XML snippet shows how to embed a JSONQL query within a JasperReports report definition. The `<query>` element specifies the language as \"jsonql\". The actual query, `..Orders(@size > 1).*`, is enclosed within a CDATA section. This query likely targets all elements within 'Orders' arrays where the array size is greater than 1.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<query language=\"jsonql\"><![CDATA[ ..Orders(@size > 1).* ]] ></query>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Variables with Scriptlets - JasperReports Java\nDESCRIPTION: This Java snippet demonstrates how to access a report variable and a field within a JasperReports scriptlet, as well as how to set a variable's value during the report fill stage. JasperReports dependencies are required for compiling and running this code. The method is designed to be placed inside a Java class extending JRDefaultScriptlet and uses getVariableValue, getFieldValue, and setVariableValue to fetch and update report data. Inputs include the names of the variable and field ('AllCities' and 'City'), with string values expected; output is the side effect of manipulating the JasperReports variable during group events. These calls are context-sensitive and work only during the appropriate event invocation by JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/scriptlet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n    String allCities = (String)this.getVariableValue(\"AllCities\");\\n\\tString city = (String)this.getFieldValue(\"City\");\n```\n\nLANGUAGE: Java\nCODE:\n```\n    this.setVariableValue(\"AllCities\", sbuffer.toString());\n```\n\n----------------------------------------\n\nTITLE: Defining Report Parameters with Unicode Text in JRXML (XML)\nDESCRIPTION: These JRXML snippets define several parameters (`GreekText`, `CyrillicText`, `ChineseText`, `ArabicText`, `HebrewText`) of type `java.lang.String`. Each parameter's default value is set using Unicode escape sequences (`\\uXXXX`) to represent characters from different languages (Greek, Cyrillic, Chinese, Arabic, Hebrew). This technique allows embedding complex scripts directly within the report design.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/unicode/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<parameter name=\"GreekText\" class=\"java.lang.String\" forPrompting=\"false\">\n  <defaultValueExpression>\n    \\u0393 \\u0394 \\u0398 \\u039B \\u039E \\u03A0 \\u03A3 \\u03A6 \\u03A8 \\u03A9\n  </defaultValueExpression>\n</parameter>\n<parameter name=\"CyrillicText\" class=\"java.lang.String\" forPrompting=\"false\">\n  <defaultValueExpression>\n    \\u0402 \\u040B \\u040F \\u0414 \\u0416 \\u0418 \\u041B \\u0426 \\u0429 \\u042E\n  </defaultValueExpression>\n</parameter>\n<parameter name=\"ChineseText\" class=\"java.lang.String\" forPrompting=\"false\">\n  <defaultValueExpression>\n    \\u6211\\u559c\\u6b22\\u4e2d\\u56fd\\u98df\\u7269\n  </defaultValueExpression>\n</parameter>\n<parameter name=\"ArabicText\" class=\"java.lang.String\" forPrompting=\"false\">\n  <defaultValueExpression>\n    \\u0647\\u0630\\u0627 \\u0639\\u0631\\u0636 \\u0644\\u0645\\u062C\\u0645\\u0648\\u0639\\u0629 TextLayout\n  </defaultValueExpression>\n</parameter>\n<parameter name=\"HebrewText\" class=\"java.lang.String\" forPrompting=\"false\">\n  <defaultValueExpression>\n    \\u05D0\\u05E0\\u05D9 \\u05DC\\u05D0 \\u05DE\\u05D1\\u05D9\\u05DF \\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\n  </defaultValueExpression>\n</parameter>\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Greater Than or Equal Clause with $X{[GREATER} in JasperReports SQL\nDESCRIPTION: Constructs a SQL 'greater than or equal to' comparison clause using a report parameter. Requires the column name and the parameter name. Generates `<column_name> >= ?` if the parameter value is not null. If the parameter value is null, it produces a clause evaluating to true (e.g., `0 = 0`), ignoring the null comparison. Use standard parameter syntax like `<column_name> >= $P{<parameter_name>}` for strict null comparison.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n$X{[GREATER, <column_name>, <parameter_name>}\n```\n\n----------------------------------------\n\nTITLE: Executing Ant Tasks for Cleaning, Compiling, and Decompiling Reports\nDESCRIPTION: This shell command executes a sequence of Ant targets: `clean` (removes previous build artifacts), `javac` (compiles Java source code), `compile1` (compiles JRXML files into `.jasper` files), and finally `decompile` (runs the decompile task defined previously to generate JRXML from the compiled `.jasper` files). This demonstrates a typical workflow involving the decompile task.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antcompile/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n> ant clean javac compile1 decompile\n```\n\n----------------------------------------\n\nTITLE: Registering a Hyperlink Listener in JasperReports Swing Viewer - Java\nDESCRIPTION: Shows how to register a custom hyperlink listener to handle hyperlink actions in the JasperReports Swing viewer component. The addHyperlinkListener method is called on a net.sf.jasperreports.swing.JRViewer instance, and the listener must implement the JRHyperlinkListener interface. This enables developers to receive events when report hyperlinks are clicked and perform custom logic based on the hyperlink type and parameters.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\naddHyperlinkListener(listener)\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal List Component in JasperReports XML\nDESCRIPTION: XML configuration for a horizontal list component that displays contact information in a card-like layout. Each entry includes ID, name, and full address printed horizontally.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/list/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"component\" y=\"25\" width=\"515\" height=\"40\">\n  <component kind=\"list\" printOrder=\"Horizontal\">\n    <datasetRun subDataset=\"Addresses\">\n      <parameter name=\"City\">\n        <expression><![CDATA[$F{City}]] ></expression>\n      </parameter>\n    </datasetRun>\n    <contents height=\"40\" width=\"128\">\n      <element kind=\"frame\" stretchType=\"ContainerHeight\" x=\"4\" width=\"120\" height=\"38\" style=\"ListCell\">\n        <element kind=\"textField\" y=\"2\" width=\"100\" height=\"12\" style=\"Sans_SmallBold\">\n          <expression><![CDATA[\"#\" + $V{REPORT_COUNT} + \" - \" + $F{Id}]] ></expression>\n        </element>\n        <element kind=\"textField\" positionType=\"Float\" x=\"10\" y=\"14\" width=\"110\" height=\"12\" textAdjust=\"StretchHeight\" style=\"Sans_Small\">\n          <expression><![CDATA[$F{FirstName} + \" \" + $F{LastName}]] ></expression>\n        </element>\n        <element kind=\"textField\" positionType=\"Float\" x=\"10\" y=\"26\" width=\"110\" height=\"12\" textAdjust=\"StretchHeight\" style=\"Sans_Small\">\n          <expression><![CDATA[$F{Street} + \", \" + $F{City}]] ></expression>\n        </element>\n        <box style=\"ListCell\">\n          <topPen lineWidth=\"0.5\"/>\n          <bottomPen lineWidth=\"0.5\"/>\n        </box>\n      </element>\n    </contents>\n  </component>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaBean for JasperReports Data Source (Java)\nDESCRIPTION: Defines the `CustomBean` class, a simple JavaBean with properties (city, id, name, street) and corresponding getter methods. It includes a constructor for initialization and a `getMe()` method that returns the object instance itself, which can be used for complex field mappings in JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomBean\n{\n private String city;\n private Integer id;\n private String name;\n private String street;\n\n public CustomBean(\n  String pcity,\n  Integer pid,\n  String pname,\n  String pstreet\n  )\n {\n  city = pcity;\n  id = pid;\n  name = pname;\n  street = pstreet;\n }\n\n public CustomBean getMe()\n {\n  return this;\n }\n\n public String getCity()\n {\n  return city;\n }\n\n public Integer getId()\n {\n  return id;\n }\n\n public String getName()\n {\n  return name;\n }\n\n public String getStreet()\n {\n  return street;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Right/Middle Aligned Rotated Text - JasperReports XML\nDESCRIPTION: This snippet demonstrates the configuration for horizontal alignment 'Right', vertical alignment 'Middle', and rotation 'Left' in a JasperReports text element. The parameters result in the paragraph being horizontally centered, vertically top-aligned, and with the text flowing from bottom to top. It is meant for inclusion in a report XML file.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nhTextAlign=\\\"Right\\\"\\nvTextAlign=\\\"Middle\\\"\\nrotation=\\\"Left\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global Report-Specific Configuration in JRAbstractExporter (Java)\nDESCRIPTION: This overloaded `setConfiguration` method, also part of JRAbstractExporter, sets global configuration settings that are report-specific but apply uniformly to *all* reports being exported in the batch. It accepts an object implementing the ReportExportConfiguration interface. These settings are applied per report during the batch export process. Dependencies include JRAbstractExporter and ReportExportConfiguration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void setConfiguration(RC configuration)\n```\n\n----------------------------------------\n\nTITLE: Defining JRXML Data Adapter and Datasets for XML - JasperReports XML\nDESCRIPTION: This snippet configures a JRXML report for use with an XML-based HTTP data adapter (XmlHttpDataAdapter.jrdax). Queries and fields use xPath to select data from XML nodes and attributes. The MoviesDataset subdataset performs xPath queries for result elements, with fields mapped to node attributes. The main dataset retrieves summary attributes. All parameters, queries, and field expressions are aligned for XML structure and case sensitivity.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport name=\\\"XmlHttpDataAdapterReport\\\" ...>\\n<property name=\\\"net.sf.jasperreports.data.adapter\\\" value=\\\"data/XmlHttpDataAdapter.jrdax\\\"/>\\n  <subDataset name=\\\"FetchDataset\\\">\\n    <parameter name=\\\"title\\\" class=\\\"java.lang.String\\\"/>\\n  </subDataset>\\n  <subDataset name=\\\"MoviesDataset\\\">\\n    <property name=\\\"net.sf.jasperreports.data.adapter\\\" value=\\\"data/XmlHttpDataAdapter.jrdax\\\"/>\\n    <parameter name=\\\"title\\\" class=\\\"java.lang.String\\\">\\n      <property name=\\\"net.sf.jasperreports.http.data.url.parameter\\\" value=\\\"s\\\"/>\\n    </parameter>\\n    <parameter name=\\\"page\\\" class=\\\"java.lang.Integer\\\">\\n      <property name=\\\"net.sf.jasperreports.http.data.url.parameter\\\"/>\\n    </parameter>\\n    <query language=\\\"xPath\\\">\\n      <![CDATA[/root/result]] >\\n    </query>\\n    <field name=\\\"title\\\" class=\\\"java.lang.String\\\">\\n      <property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"@title\\\"/>\\n    </field>\\n    <field name=\\\"year\\\" class=\\\"java.lang.Integer\\\">\\n      <property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"@year\\\"/>\\n    </field>\\n    <field name=\\\"type\\\" class=\\\"java.lang.String\\\">\\n      <property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"@type\\\"/>\\n    </field>\\n    <field name=\\\"poster\\\" class=\\\"java.lang.String\\\">\\n      <property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"@poster\\\"/>\\n    </field>\\n  </subDataset>\\n  <parameter name=\\\"title\\\" class=\\\"java.lang.String\\\" evaluationTime=\\\"Early\\\">\\n    <property name=\\\"net.sf.jasperreports.http.data.url.parameter\\\" value=\\\"s\\\"/>\\n    <defaultValueExpression><![CDATA[\\\"aliens\\\"]] ></defaultValueExpression>\\n  </parameter>\\n  <query language=\\\"xPath\\\">\\n    <![CDATA[/root]] >\\n  </query>\\n  <field name=\\\"totalResults\\\" class=\\\"java.lang.Integer\\\">\\n    <property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"@totalResults\\\"/>\\n  </field>\\n  ...\\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Using Scriptlet Method in Report Expression - JasperReports Expression\nDESCRIPTION: This snippet shows how to invoke a scriptlet helper method within a report expression using JasperReports expression syntax. The parameter $P{REPORT_SCRIPTLET} references the scriptlet instance; 'hello()' is a custom method defined therein. Input: no user input; Output: the string returned by the scriptlet method is shown in a report field. Dependencies: scriptlet must be attached as described and the method must exist in the scriptlet class. Limitation: type returned must be compatible with the field type in the report design.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/scriptlet/README.md#2025-04-22_snippet_5\n\nLANGUAGE: JasperReports Expression\nCODE:\n```\n    $P{REPORT_SCRIPTLET}.hello()\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Conditional Styles with Priority in JasperReports XML\nDESCRIPTION: This complex example demonstrates using multiple conditional styles with inheritance. It shows how styles are applied in sequence, with properties from earlier matching conditions taking precedence over later ones when conflicts occur.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"alternateStyle\" fontName=\"Arial\" forecolor=\"red\">\n  <conditionalStyle forecolor=\"blue\">\n    <conditionExpression><![CDATA[$V{REPORT_COUNT} % 2 == 0]] ></conditionExpression>\n  </conditionalStyle>\n  <conditionalStyle bold=\"true\">\n    <conditionExpression><![CDATA[$F{AMOUNT} > 10000]] ></conditionExpression>\n  </conditionalStyle>\n  <conditionalStyle bold=\"false\" italic=\"true\">\n    <conditionExpression><![CDATA[$F{AMOUNT} > 20000]] ></conditionExpression>\n  </conditionalStyle>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Sheet Name Property in JasperReports JRXML - XML\nDESCRIPTION: This snippet demonstrates how to use the propertyExpression tag within JRXML to set the name of an exported Excel sheet dynamically, based on report parameters and variables. The property 'net.sf.jasperreports.export.xls.sheet.name' can be used in the JRXML 'pageHeader' section to assign a custom label to each sheet. Dependencies: JasperReports reporting library, an appropriate parameter and variable configured (e.g., $P{Customers} and $V{PAGE_NUMBER}). Inputs are report parameters/variables; output is a named Excel sheet per report page.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <propertyExpression name=\\\"net.sf.jasperreports.export.xls.sheet.name\\\">\\n    <![CDATA[$P{Customers}+ \\\" \\\" + $V{PAGE_NUMBER}]] >\\n  </propertyExpression>\\n\n```\n\n----------------------------------------\n\nTITLE: Executing Report Fill with Bean Array via Maven (Shell)\nDESCRIPTION: This Maven command cleans the project, compiles the source code, and executes the `DataSourceApp` Java application. The `exec.args=\"compile fill3 view\"` argument likely instructs the application to perform compilation steps, call the `fill3` method (which uses `JRBeanArrayDataSource`), and then display the generated report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:java -Dexec.args=\"compile fill3 view\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Scriptlet Class in Report Template - JasperReports XML\nDESCRIPTION: This XML excerpt shows how to associate a custom Java scriptlet class with a JasperReports report. The 'scriptletClass' property in the jasperReport tag must contain the fully qualified class name. This inclusion instructs JasperReports to instantiate and use the custom class for scriptlet events throughout the report lifecycle. Inputs are the class name string; output is custom logic execution at document fill time. The scriptlet class must be present in the classpath during report compilation and execution.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/scriptlet/README.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n    <jasperReport\\n    name=\"ListReport\"\\n    columnCount=\"2\"\\n    pageWidth=\"595\"\\n    pageHeight=\"842\"\\n    columnWidth=\"250\"\\n    columnSpacing=\"15\"\\n    leftMargin=\"40\"\\n    rightMargin=\"40\"\\n    topMargin=\"50\"\\n    bottomMargin=\"50\"\\n    scriptletClass=\"com.myproject.reporting.MyScriptlet\">\n```\n\n----------------------------------------\n\nTITLE: Generating SQL BETWEEN (Exclusive) Clause with $X{BETWEEN} in JasperReports SQL\nDESCRIPTION: Generates a SQL clause comparing a column value against a range defined by two report parameters, excluding endpoints. Requires the column name, left parameter name, and right parameter name. Generates `(<column_name> > ? AND <column_name> < ?)` if both parameters are non-null. If left is null, generates `<column_name> < ?` (using right parameter). If right is null, generates `<column_name> > ?` (using left parameter). If both are null, generates a clause evaluating to true (e.g., `0 = 0`).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n$X{BETWEEN, <column_name>, <left_parameter_name>, <right_parameter_name>}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Report Updaters in Ant Task (XML Comment)\nDESCRIPTION: Demonstrates how to include custom report updater classes (`com.update.RenewUuidsUpdater`, `com.update.StyleUpdater`) within the `<jru>` Ant task using the `<updater>` tag. These tags are initially commented out but can be uncommented to enable specific update logic (like modifying styles or renewing UUIDs) beyond the default JasperReports schema and syntax updates provided by the `<jru>` task.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antupdate/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n<updater>com.update.RenewUuidsUpdater</updater>\n<updater>com.update.StyleUpdater</updater>\n-->\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Styles and Hyperlinks in JasperReports Styled Text (XML)\nDESCRIPTION: This XML-like fragment demonstrates how to apply basic formatting like bold, italic, underline, foreground color, and background color using the `<style>` tag within a JasperReports text element. It also shows how to embed a hyperlink using the `<a>` tag with `type=\"Reference\"` and `target=\"Blank\"` attributes wrapping a styled text segment.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/styledtext/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    This is a <style isBold=\"true\" isItalic=\"true\" isUnderline=\"true\">static text</style> element containing\n\tstyled text. <style backcolor=\"yellow\" isBold=\"true\" isItalic=\"true\">Styled text</style> elements are introduced by\n\tsetting the <style forecolor=\"blue\" isItalic=\"true\">markup</style> attribute available for\n\tthe <style isBold=\"true\" forecolor=\"magenta\">textElement</style> tag to <style forecolor=\"red\" isItalic=\"true\">styled</style> and\n\tby formatting the text content using nested <style isBold=\"true\" forecolor=\"green\">style</style> tags and simple HTML tags, including\n\t<a type=\"Reference\" href=\"http://jasperreports.sf.net\" target=\"Blank\">\n\t<style isItalic=\"true\" isBold=\"true\" isUnderline=\"true\" forecolor=\"yellow\">hyperlinks</style></a>.\n```\n\n----------------------------------------\n\nTITLE: Defining Bookmark Data Source Fields in JRXML\nDESCRIPTION: Defines the standard fields (`level`, `label`, `pageIndex`) available when using the built-in bookmark data source in a JasperReports Table of Contents part. These fields represent the bookmark's indentation level, its display text, and the initial page index where it appears.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tableofcontents/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"level\" class=\"java.lang.Integer\"/>\n<field name=\"label\" class=\"java.lang.String\"/>\n<field name=\"pageIndex\" class=\"java.lang.Integer\"/>\n```\n\n----------------------------------------\n\nTITLE: Running Maven Sample for XLS Features in JasperReports\nDESCRIPTION: This command runs a Maven project to generate sample reports in all supported document types. It cleans the project, compiles it, and then executes the 'all' goal.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Building and Running the JasperReports Unicode Sample with Maven (Shell)\nDESCRIPTION: This command executes the Apache Maven build process for the Unicode sample. `mvn clean` removes previous build artifacts, `compile` compiles the Java source code, and `exec:exec@all` runs the configured execution goal (likely report filling and exporting). This command should be run from the `demo/samples/unicode` directory within the JasperReports source project.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/unicode/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotated Text Alignment - JasperReports XML\nDESCRIPTION: This snippet illustrates how to set horizontal text alignment to 'Left', vertical alignment to 'Top', and rotation to 'Left' in a JasperReports text element. These attributes collectively affect the paragraph's placement and text flow within its textbox container. No external dependencies beyond JasperReports XML schema are required. Inputs are XML attributes for the element; the effect is visual upon report rendering, and all parameters must be set as shown.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nhTextAlign=\\\"Left\\\"\\nvTextAlign=\\\"Top\\\"\\nrotation=\\\"Left\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Autofilter Start Property in JasperReports XML\nDESCRIPTION: Sets the autofilter 'Start' property on the State element in the page header. This configures the data range to start immediately below this cell with column data lists placed on this row.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.export.xls.auto.filter\" value=\"Start\"/>\n```\n\n----------------------------------------\n\nTITLE: Constructing Array of Objects with Multiple Selected Keys - JSON\nDESCRIPTION: Demonstrates the result of a JSONQL object construction expression accessing keys such as 'Company Name' and 'Address' from anywhere in the JSON structure. Input is an array of customer objects; selected keys form fields in the returned objects. The output is an array with objects containing the required fields, highlighting the power of JSONQL to extract multiple specific fields concurrently.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[{\\n\\\"Company Name\\\": \\\"Alfreds Futterkiste\\\",\\n\\\"Address\\\": \\\"Obere Str. 57\\\"\\n},\\n...\\n{\\n\\\"Company Name\\\": \\\"Wolski  Zajazd\\\",\\n\\\"Address\\\": \\\"ul. Filtrowa 68\\\"\\n}]\\n\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports Groovy Sample with Maven - Bash\nDESCRIPTION: Executes the JasperReports Groovy sample using Apache Maven from the command line. Prerequisites include having Maven (version 3.6 or later) installed and the working directory set to 'demo/samples/groovy' in the JasperReports source project. The command compiles the sample and executes all defined executions, producing report documents in multiple formats and saving them in the 'demo/samples/groovy/target/reports' directory. This command should be run in a terminal or command prompt on any compatible OS.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring Center/Bottom Aligned Rotated Text - JasperReports XML\nDESCRIPTION: This snippet demonstrates configuring a JasperReports text element with horizontal alignment 'Center', vertical alignment 'Bottom', and rotation 'Left'. This combination aligns text to the right horizontally, centers it vertically, and rotates flow from bottom to top. The configuration is intended for use inside a .jrxml JasperReports template.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nhTextAlign=\\\"Center\\\"\\nvTextAlign=\\\"Bottom\\\"\\nrotation=\\\"Left\\\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Barcode4J Components in JasperReports XML\nDESCRIPTION: Comprehensive examples of implementing different types of barcodes using Barcode4J components in JRXML, including Code128, Codabar, DataMatrix, EAN128, Code39, USPSIntelligentMail, and more. Each example shows specific configuration options and attributes for the respective barcode type.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/barcode4j/README.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"component\" x=\"130\" y=\"100\" width=\"200\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:Code128\" moduleWidth=\"1.0\">\n    <codeExpression><![CDATA[\"0123456789\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"135\" width=\"200\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:Codabar\" moduleWidth=\"1.2\" textPosition=\"none\" wideFactor=\"4.0\">\n    <codeExpression><![CDATA[\"01234567890\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"170\" width=\"70\" height=\"40\" style=\"Barcode\">\n  <component kind=\"barcode4j:DataMatrix\" moduleWidth=\"4.0\">\n    <codeExpression><![CDATA[\"JasperReports\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"215\" width=\"250\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:EAN128\" moduleWidth=\"1.4\" checksumMode=\"check\">\n    <codeExpression><![CDATA[\"0101234567890128\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"250\" width=\"400\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:Code39\">\n    <codeExpression><![CDATA[\"0123456789\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"285\" width=\"400\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:USPSIntelligentMail\" ascenderHeight=\"8.0\" trackHeight=\"10.0\">\n    <codeExpression><![CDATA[\"00040123456200800001987654321\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"320\" width=\"400\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:RoyalMailCustomer\" ascenderHeight=\"8.0\" intercharGapWidth=\"2.5\" trackHeight=\"10.0\">\n    <codeExpression><![CDATA[\"0123456789\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"355\" width=\"400\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:Interleaved2Of5\">\n    <codeExpression><![CDATA[\"0123456789\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"390\" width=\"400\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:UPCA\">\n    <codeExpression><![CDATA[\"01234567890\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"425\" width=\"400\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:UPCE\">\n    <codeExpression><![CDATA[\"01234133\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"460\" width=\"400\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:EAN13\">\n    <codeExpression><![CDATA[\"012345678901\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"495\" width=\"400\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:EAN8\">\n    <codeExpression><![CDATA[\"01234565\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"530\" width=\"400\" height=\"20\" style=\"Barcode\">\n  <component kind=\"barcode4j:POSTNET\" shortBarHeight=\"10.0\" checksumMode=\"add\">\n    <codeExpression><![CDATA[\"01234\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" x=\"130\" y=\"555\" width=\"400\" height=\"30\" style=\"Barcode\">\n  <component kind=\"barcode4j:PDF417\" moduleWidth=\"4.0\">\n    <codeExpression><![CDATA[\"JasperReports\"]] ></codeExpression>\n  </component>\n</element>\n...\n<element kind=\"component\" mode=\"Opaque\"... forecolor=\"#0000FF\" backcolor=\"#FFFF00\" style=\"Barcode\">\n  <component kind=\"barcode4j:QRCode\" margin=\"2\" errorCorrectionLevel=\"M\">\n    <codeExpression><![CDATA[\"http://barcode4j.sourceforge.net/\"]] ></codeExpression>\n  </component>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Configuring Left/Top Aligned Right-Rotated Text - JasperReports XML\nDESCRIPTION: This snippet provides the settings for a text element with 'Left' horizontal alignment, 'Top' vertical alignment, and 'Right' rotation in JasperReports. The effect is horizontally right-aligned, top vertically, with text flow from top to bottom. Can be used inside a report template to control text orientation.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\nhTextAlign=\\\"Left\\\"\\nvTextAlign=\\\"Top\\\"\\nrotation=\\\"Right\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Character Dimensions for JasperReports Text Export in JRXML\nDESCRIPTION: Defines custom character width and height properties within a JRXML report template specifically for the text exporter. These properties inform the JRTextExporter about the expected pixel dimensions of each character (7.238px wide, 13.948px high) to accurately map report elements onto a character grid during plain text export. Setting these is crucial for layout calculations.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/text/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.export.text.character.width\" value=\"7.238\"/>\n<property name=\"net.sf.jasperreports.export.text.character.height\" value=\"13.948\"/>\n```\n\n----------------------------------------\n\nTITLE: Executing Ant Test Target for Report Updates (Shell)\nDESCRIPTION: Command-line instruction to execute the `test` target defined in the Ant `build.xml` file. This typically triggers the report update process (like the `update1` and `update2` targets described) within the `demo/samples/antupdate` directory. Requires Apache Ant (version 1.5 or later) to be installed and in the system's PATH.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antupdate/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> ant test\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON HTTP Data Adapter in XML\nDESCRIPTION: This snippet shows how to configure a JSON data adapter as an HTTP data adapter by setting the dataFile element type to httpDataLocation. This allows retrieving JSON data over HTTP to fill reports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<jsonDataAdapter class=\"net.sf.jasperreports.data.json.JsonDataAdapterImpl\">\n  <name>JSON Http Data Adapter</name>\n  <dataFile xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"httpDataLocation\">\n    ...\n  </dataFile>\n  ...\n</jsonDataAdapter>\n```\n\n----------------------------------------\n\nTITLE: Barcode4J Component Structure\nDESCRIPTION: Base structure of a Barcode4J component showing core elements and attributes used for barcode generation in JasperReports. Includes configuration for code expression, pattern expression, orientation, module width, text position, and quiet zones.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/barcode4j/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Barcode4jComponent>\n  <codeExpression></codeExpression>\n  <patternExpression></patternExpression>\n  <!-- Attributes:\n       evaluationTime\n       evaluationGroup\n       orientation (0,90,180,270)\n       moduleWidth\n       textPosition (none,bottom,top)\n       quietZone\n       verticalQuietZone\n  -->\n</Barcode4jComponent>\n```\n\n----------------------------------------\n\nTITLE: Saving JasperPrint Object to File in Java\nDESCRIPTION: This method shows how to save a programmatically created JasperPrint object to a .jrprint file. It measures and reports the time taken for the fill operation, though in this case, it's just creating the object and saving it since no actual filling is performed.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/noreport/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n  public void fill() throws JRException\n  {\n    long start = System.currentTimeMillis();\n    JasperPrint jasperPrint = getJasperPrint();\n    File file = new File(\"target/reports/NoReport.jrprint\");\n    file.getParentFile().mkdirs();\n    JRSaver.saveObject(jasperPrint, file);\n    System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n  }\n```\n\n----------------------------------------\n\nTITLE: Summing Parameters Using JavaScript Expression - JasperReports XML\nDESCRIPTION: Calculates and converts the sum of parameters A and B using a JavaScript expression in JasperReports. The result is explicitly cast to an Integer using Java’s Integer.valueOf, catering to type safety and field compatibility. This demonstrates how JavaScript can directly access report parameters and perform arithmetic before type conversion.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/javascript/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<expression><![CDATA[Integer.valueOf($P{A} + $P{B})]] ></expression>\n```\n\n----------------------------------------\n\nTITLE: Configuring XLSX Export Parameters\nDESCRIPTION: Java configuration for XLSX export to control page breaks by setting one-page-per-sheet and removing empty spaces between rows.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/nopagebreak/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n  SimpleXlsxReportConfiguration configuration = new SimpleXlsxReportConfiguration();\n  configuration.setOnePagePerSheet(false);\n  configuration.setRemoveEmptySpaceBetweenRows(true);\n  exporter.setConfiguration(configuration);\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Elements for Excel Metadata Export in JasperReports XML\nDESCRIPTION: This XML snippet demonstrates how to configure report elements with metadata properties for Excel export. It shows the proper setup for various element types including lines, text fields, and images with appropriate metadata properties like column names, width settings, and repeat values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<groupHeader>\n  <band height=\"15\">\n    <element kind=\"line\" y=\"14\" width=\"270\" height=\"1\">\n      <property name=\"net.sf.jasperreports.export.xls.repeat.value\" value=\"true\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"LineShape\"/>\n    </element>\n    <element kind=\"textField\" x=\"10\" y=\"2\" width=\"150\" height=\"11\" style=\"Sans_Bold\">\n      <expression><![CDATA[$F{ShipCountry}]] ></expression>\n      ...\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"ShipCountry\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.width.metadata\" value=\"100\"/>\n      <property name=\"net.sf.jasperreports.export.xls.repeat.value\" value=\"true\"/>\n      ...\n    </element>\n    ...\n  </band>\n</groupHeader>\n\n...\n\n<title height=\"100\">\n  <element kind=\"elementGroup\">\n    ...\n    <element kind=\"image\" key=\"TransparentImage\" y=\"5\" width=\"165\" height=\"40\" scaleImage=\"Clip\" onErrorType=\"Error\">\n      <expression><![CDATA[\"jasperreports.png\"]] ></expression>\n      <hyperlinkTooltipExpression><![CDATA[\"The JasperReports Logo\"]] ></hyperlinkTooltipExpression>\n      <property name=\"net.sf.jasperreports.export.xls.repeat.value\" value=\"true\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"JasperImage\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.width.metadata\" value=\"200\"/>\n    </element>\n  </element>\n  ...\n</title>\n\n...\n\n<detail>\n  <band height=\"13\">\n  ...\n    <element kind=\"textField\" x=\"1\" width=\"35\" height=\"11\" hTextAlign=\"Right\" style=\"OrderIdStyle\">\n      <expression><![CDATA[$F{OrderID}]] ></expression>\n      ...\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"Order\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.width.metadata\" value=\"50\"/>\n      ...\n    </element>\n    <element kind=\"textField\" positionType=\"Float\" x=\"40\" width=\"110\" height=\"11\" textAdjust=\"StretchHeight\">\n      <expression><![CDATA[$F{ShipName} + \", \" + $F{ShipCity}]] ></expression>\n      ...\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"ShipCity\"/>\n      ...\n      <propertyExpression name=\"net.sf.jasperreports.export.xls.data\"><![CDATA[$F{ShipCity}]] ></propertyExpression>\n      ...\n    </element>\n    <element kind=\"textField\" x=\"155\" width=\"25\" height=\"11\" blankWhenNull=\"true\">\n      <expression><![CDATA[$F{ShipRegion}]] ></expression>\n      ...\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"ShipRegion\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.width.metadata\" value=\"60\"/>\n      ...\n    </element>\n    <element kind=\"textField\" x=\"185\" width=\"50\" height=\"11\" pattern=\"dd/MM/yyyy\">\n      <expression><![CDATA[$F{OrderDate}]] ></expression>\n      ...\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"OrderDate\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.width.metadata\" value=\"100\"/>\n      <property name=\"net.sf.jasperreports.export.xls.pattern\" value=\"dd\\/MM\\/yyyy\"/>\n      ...\n    </element>\n    <element kind=\"textField\" x=\"235\" width=\"35\" height=\"11\" hTextAlign=\"Right\" pattern=\"0.00\">\n      <expression><![CDATA[$F{Freight}]] ></expression>\n      ...\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"Freight\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.width.metadata\" value=\"60\"/>\n      ...\n    </element>    ...\n  </band>\n</detail>\n```\n\n----------------------------------------\n\nTITLE: Configuring Master Page Variables in JRXML\nDESCRIPTION: Example of using master page variables in a text field for page numbering\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/book/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" x=\"55\" y=\"10\" width=\"45\" height=\"20\">\n  <expression><![CDATA[$V{PAGE_COUNT}]] ></expression>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Starting HSQLDB Server for JasperReports\nDESCRIPTION: Command to start the HSQLDB server that comes bundled with JasperReports distribution. Must be run from the demo/hsqldb directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data Structure for Northwind Database\nDESCRIPTION: Example JSON structure showing Customers and Orders objects with their properties in the Northwind database. Demonstrates different JSON field naming conventions including standard double-quoted, single-quoted, and unquoted field names.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsondatasource/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Northwind\": {\n  \"Customers\": [\n    {\n      Phone: \"030-0074321\",\n      'PostalCode': 12209,\n      \"ContactName\": \"Maria Anders\",\n      \"Fax\": \"030-0076545\",\n      \"Address\": \"Obere Str. 57\",\n      \"CustomerID\": \"ALFKI\",\n      \"CompanyName\": \"Alfreds Futterkiste\",\n      \"Country\": \"Germany\",\n      \"City\": \"Berlin\",\n      \"ContactTitle\": \"Sales Representative\"\n    }\n  ]\n}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Bookmark Data Source Fields in ToC Part JRXML\nDESCRIPTION: Shows the necessary field declarations (`level`, `label`, `pageIndex`) within the Table of Contents subreport template (`TocPart.jrxml`). These fields correspond to the data provided by the built-in bookmark data source and are used to render the ToC entries.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tableofcontents/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport ...>\n  ...\n  <field name=\"level\" class=\"java.lang.Integer\"/>\n  <field name=\"label\" class=\"java.lang.String\"/>\n  <field name=\"pageIndex\" class=\"java.lang.Integer\"/>\n  ...\n  <title>\n    <band ...>\n      ...\n    </band>\n  </title>\n  <pageHeader>\n    <band ...>\n      ...\n    </band>\n  </pageHeader>\n  <detail>\n    <band ...>\n      ...\n    </band>\n  </detail>\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Complete JSONQL Data Adapter Configuration\nDESCRIPTION: Full example of a JSONQL data adapter configuration including file path, connection settings, and data formatting patterns.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<jsonDataAdapter class=\"net.sf.jasperreports.data.json.JsonDataAdapterImpl\">\n  <name>NorthWind JsonQL DA</name>\n  <fileName>/data/northwind.json</fileName>\n  <useConnection>true</useConnection>\n  <language>jsonql</language>\n  <datePattern>yyyy-MM-dd</datePattern>\n  <numberPattern>#,##0.##</numberPattern>\n</jsonDataAdapter>\n```\n\n----------------------------------------\n\nTITLE: Configuring Excel Data Source with Column Mapping\nDESCRIPTION: Method to create and configure an ExcelDataSource object by setting column names and indexes. Handles both XLS and XLSX file formats using Apache POI library.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldatasource/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static ExcelDataSource getDataSource(String fileName) throws JRException\n{\n  ExcelDataSource ds;\n\n  try\n  {\n    String[] columnNames = new String[]{\"city\", \"id\", \"name\", \"address\", \"state\", \"date\"};\n    int[] columnIndexes = new int[]{0, 2, 3, 4, 5, 6};\n    ds = new ExcelDataSource(JRLoader.getLocationInputStream(fileName));\n    //ds.setUseFirstRowAsHeader(true);\n    ds.setColumnNames(columnNames, columnIndexes);\n    //uncomment the below line to see how sheet selection works\n    //ds.setSheetSelection(\"Data Sheet 2\");\n  }\n  catch (IOException e)\n  {\n    throw new JRException(e);\n  }\n\n  return ds;\n}\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports JSONQL Sample with Maven\nDESCRIPTION: This command uses Apache Maven (version 3.6 or later required) to compile and execute the JSONQL data source sample within the JasperReports project. It cleans the target directory, compiles the source code, and then executes the pre-configured 'exec:exec' goal with the 'all' profile, which generates sample reports in various formats under 'demo/samples/jsonqldatasource/target/reports'.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: XML Chart Structure Elements\nDESCRIPTION: Common XML elements used for configuring charts in JasperReports, including box, title, subtitle, legend, and hyperlink configurations.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<box />\n<chartTitle />\n<chartSubtitle />\n<chartLegend />\n<anchorNameExpression />\n<hyperlinkReferenceExpression />\n<hyperlinkAnchorExpression />\n<hyperlinkPageExpression />\n<hyperlinkTooltipExpression />\n<hyperlinkParameter />\n```\n\n----------------------------------------\n\nTITLE: Defining JasperReports XML HTTP Data Adapter in XML\nDESCRIPTION: This XML configuration, typically found in a `.jrdax` file, defines a JasperReports data adapter named 'XML Http Data Adapter' using the 'net.sf.jasperreports.data.xml.XmlDataAdapterImpl' class. It configures an HTTP GET request to 'https://www.omdbapi.com/?r=xml' to retrieve XML data, using an 'httpDataLocation' for the 'dataFile'. It shares settings like `useConnection`, time zone (Europe/Bucharest), and locale (ro_RO) with the JSON adapter example. The 'selectExpression' is empty, implying it will be specified in the corresponding report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<xmlDataAdapter class=\"net.sf.jasperreports.data.xml.XmlDataAdapterImpl\">\n  <name>XML Http Data Adapter</name>\n  <dataFile xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:type=\"httpDataLocation\">\n    <method>GET</method>\n    <url><![CDATA[https://www.omdbapi.com/?r=xml]] ></url>\n  </dataFile>\n  <useConnection>true</useConnection>\n  <timeZone xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:java=\"http://java.sun.com\" xsi:type=\"java:java.lang.String\">Europe/Bucharest</timeZone>\n  <locale xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:java=\"http://java.sun.com\" xsi:type=\"java:java.lang.String\">ro_RO</locale>\n  <selectExpression></selectExpression>\n</xmlDataAdapter>\n```\n\n----------------------------------------\n\nTITLE: Rectangle Shape Element in JRXML - JasperReports - XML\nDESCRIPTION: This XML example defines a rectangle shape in a .jrxml file, specifying positional attributes (y, width, height), a corner radius (for optional rounding), background color, and a pen line width. Used to produce rectangles with custom appearance in JasperReports visual layouts.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/shapes/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"rectangle\\\" y=\\\"250\\\" width=\\\"200\\\" height=\\\"40\\\" radius=\\\"5\\\" backcolor=\\\"#FFFF99\\\">\\n\\t<pen lineWidth=\\\"0.0\\\"/>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Embedding Background Watermark Image - JasperReports - XML\nDESCRIPTION: This XML snippet demonstrates how to define a <background/> section in a JasperReports template to embed a watermark image on all report pages. The <element> of kind 'image' specifies the image file ('jr.watermark.gif') to display, with attributes controlling size, scaling, alignment, and error handling. Dependencies include JasperReports and access to the referenced image file; required parameters are the image path and element attributes. The expected input is a valid path to an image file, and the output is a report with the background image rendered underneath all page elements.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<background height=\"742\">\n  <element kind=\"image\" width=\"150\" height=\"742\" scaleImage=\"Clip\" vImageAlign=\"Bottom\" onErrorType=\"Error\">\n    <expression><![CDATA[\"jr.watermark.gif\"]] ></expression>\n  </element>\n</background>\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Multi-Column Report in JasperReports XML\nDESCRIPTION: This XML snippet shows the configuration for a 3-column report filled horizontally. It sets the column count, print order, and dimensions for the report layout.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/horizontal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\npageWidth=\"595\" pageHeight=\"842\" columnWidth=\"175\" columnSpacing=\"5\" leftMargin=\"30\" rightMargin=\"30\"\n```\n\n----------------------------------------\n\nTITLE: Defining PPTX Datetime Field in JasperReport Template (XML)\nDESCRIPTION: Shows how to define a PPTX datetime field in a JasperReport template for automatic date updating in PPTX exports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/i18n/README.md#2025-04-22_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"textField\" positionType=\"Float\" x=\"20\" width=\"530\" height=\"20\" hTextAlign=\"Right\" pattern=\"EEEE, MMMM dd, yyyy\" fontSize=\"14.0\">\n  <expression><![CDATA[new Date()]] ></expression>\n  <property name=\"net.sf.jasperreports.export.pptx.field.type\" value=\"datetime\"/>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Declaring JRLine Methods - JasperReports - Java\nDESCRIPTION: This Java snippet defines the interface methods for handling line direction in shape elements implementing the JRLine interface. These methods allow getting and setting the LineDirectionEnum, specifying whether the line is drawn top-down or bottom-up in JasperReports. Implementations must handle direction logic and supporting enums.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/shapes/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic LineDirectionEnum getDirection();\\npublic void setDirection(LineDirectionEnum lineDirectionEnum);\n```\n\n----------------------------------------\n\nTITLE: Setting Freeze Pane Properties for Excel Export\nDESCRIPTION: These properties configure freeze panes in Excel output, setting the left column edge and bottom row edge as freeze boundaries. When applied, all columns to the left of the 'State' element and all rows above and including the 'Street' element will be frozen in the Excel view.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.export.xls.freeze.column.edge\" value=\"Left\"/>\n<property name=\"net.sf.jasperreports.export.xls.freeze.row.edge\" value=\"Bottom\"/>\n```\n\n----------------------------------------\n\nTITLE: Inserting Localized Text in JasperReport Template (XML)\nDESCRIPTION: Demonstrates two methods for inserting localized text into a JasperReport template: using the $R{} syntax and the msg() method.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/i18n/README.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"textField\" positionType=\"Float\" x=\"20\" y=\"100\" width=\"530\" height=\"20\" hTextAlign=\"Justified\" ...>\n  <expression><![CDATA[$R{text.paragraph1}]] ></expression>\n</element>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"textField positionType=\"Float\" x=\"20\" y=\"210\" width=\"530\" height=\"20\" textAdjust=\"StretchHeight\" fontSize=\"14.0\" ...>\n  <expression><![CDATA[msg($R{text.message}, $P{number})]] ></expression>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Configuring Master Report for JSON Export - JasperReports XML\nDESCRIPTION: This snippet configures a JasperReports master report XML (JRXML) to define the JSON schema source and map report elements to JSON fields. The 'net.sf.jasperreports.export.json.schema' property specifies the schema file, and each <element> uses the 'net.sf.jasperreports.export.json.path' property to map the report's City field into the JSON output. This configuration is required for the JSON metadata exporter to produce a structured and compliant export according to the schema.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport ...>\n  <property name=\\\"net.sf.jasperreports.export.json.schema\\\" value=\\\"reports/MasterReport.schema.json\\\"/>\n  ...\n  <detail>\n    <band height=\\\"50\\\">\n      <element kind=\\\"textField\\\" x=\\\"5\\\" y=\\\"5\\\" width=\\\"100\\\" height=\\\"15\\\" printWhenDetailOverflows=\\\"true\\\" style=\\\"Sans_Bold\\\">\n        <expression><![CDATA[$F{City}]] ></expression>\n        <property name=\\\"net.sf.jasperreports.export.json.path\\\" value=\\\"City\\\"/>\n      </element>\n      ...\n    </band>\n  </detail>\n  ...\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Using Localized Images in JasperReport Template (XML)\nDESCRIPTION: Shows how to use the $R{} syntax to insert localized images into a JasperReport template.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/i18n/README.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"image\" positionType=\"Float\" x=\"20\" y=\"30\" width=\"100\" height=\"50\" scaleImage=\"Clip\" onErrorType=\"Error\">\n  <expression><![CDATA[$R{image.flag}]] ></expression>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Associating a Customizer Class with a Chart Element in JRXML\nDESCRIPTION: This XML snippet shows how to apply a customizer class to a chart element within a JasperReports JRXML file. The `customizerClass` attribute is set to the fully qualified name of the implementation (`BarChartCustomizer` in this example), instructing the JasperReports engine to invoke its `customize` method after creating the JFreeChart object for this specific chart.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"chart\" chartType=\"bar\" ... customizerClass=\"BarChartCustomizer\" ...>\n  ...\n</element>\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports Sample Reports with Maven - Bash\nDESCRIPTION: This bash command uses Apache Maven to clean, compile, and execute all steps for the JasperReports landscape sample. It must be run from within the 'demo/samples/landscape' directory of a properly set up JasperReports project structure. Maven (version 3.6 or later) must be pre-installed; the output reports will be placed in the 'target/reports' subdirectory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/landscape/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Report Part in JRXML\nDESCRIPTION: Shows the basic structure of a report part definition including evaluation time, properties, print conditions and part naming\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/book/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<part evaluationTime=\"Group\" evaluationGroup=\"DatasetGroup\">\n  <property name=\"custom.property\" value=\"custom_value\"/>\n  <printWhenExpression>...</printWhenExpression>\n  <partNameExpression>\"A report part\"</partNameExpression>\n  <component kind=\"subreportPart\">\n    ...\n  </component>\n</part>\n```\n\n----------------------------------------\n\nTITLE: Defining a JasperReports Style Template (JRTX)\nDESCRIPTION: Example of a JasperReports style template file (`.jrtx`). It uses the root element `<jasperTemplate>` and includes a reference to another template (`base_styles.jrtx`) via the `<template>` tag. Several `<style>` elements define specific styles (`Regular`, `Special Emphasis`, `Strong`, `Serif`, `Serif Note`), inheriting properties from parent styles specified in the `style` attribute and setting attributes like `fontSize`, `forecolor`, `underline`, and `fontName`. Style names must be unique within the template.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<jasperTemplate>\n  <template>base_styles.jrtx</template>\n  <style name=\"Regular\" fontSize=\"12.0\" default=\"true\" style=\"Base\"/>\n  <style name=\"Special Emphasis\" forecolor=\"#FF0000\" fontSize=\"12.0\" style=\"Emphasis\"/>\n  <style name=\"Strong\" fontSize=\"14.0\" underline=\"true\" style=\"Base\"/>\n  <style name=\"Serif\" fontName=\"DejaVu Serif\" fontSize=\"12.0\" style=\"Base\"/>\n  <style name=\"Serif Note\" underline=\"true\" style=\"Serif\"/>\n</jasperTemplate>\n```\n\n----------------------------------------\n\nTITLE: Generating Report Parameters Map in HibernateApp - Java\nDESCRIPTION: Implements a static Java method to construct a map of report parameters, including Hibernate session and filter values. Requires Hibernate session object, Address-related constants, and Java Collections. Inputs: session and static values; Output: parameter map for report generation.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate static Map<String, Object> getParameters(Session session)\\n{\\n  Map<String, Object> parameters = new HashMap<String, Object>();\\n  parameters.put(HibernateConstants.PARAMETER_HIBERNATE_SESSION, session);\\n  parameters.put(\\\"ReportTitle\\\", \\\"Address Report\\\");\\n  List<String> cityFilter = new ArrayList<String>(3);\\n  cityFilter.add(\\\"Boston\\\");\\n  cityFilter.add(\\\"Chicago\\\");\\n  cityFilter.add(\\\"Oslo\\\");\\n  parameters.put(\\\"CityFilter\\\", cityFilter);\\n  parameters.put(\\\"OrderClause\\\", \\\"city\\\");\\n  return parameters;\\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running JasperReports ToC Sample using Maven\nDESCRIPTION: A command-line instruction using Apache Maven to clean the project, compile the source files, and execute the Table of Contents sample report (`exec:exec@all`). This command should be run from the `demo/samples/tableofcontents` directory after the HSQLDB server is started, and it generates report outputs in various formats.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tableofcontents/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Export Parameters\nDESCRIPTION: Java code showing how to configure HTML exporter to handle page breaks by removing empty spaces between rows and setting custom between-pages HTML.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/nopagebreak/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n  SimpleHtmlExporterConfiguration exporterConfig = new SimpleHtmlExporterConfiguration();\n  exporterConfig.setBetweenPagesHtml(\"\");\n  exporter.setConfiguration(exporterConfig);\n\n  SimpleHtmlReportConfiguration reportConfig = new SimpleHtmlReportConfiguration();\n  reportConfig.setRemoveEmptySpaceBetweenRows(true);\n  exporter.setConfiguration(reportConfig);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Supported HTML Tags in JasperReports Styled Text (XML)\nDESCRIPTION: This example showcases the HTML tags supported within JasperReports styled text markup. It demonstrates the usage and rendering of `<font>` (with size, color, face attributes), `<b>`, `<i>`, `<u>`, `<br/>` (for line breaks), `<sup>`, `<sub>`, and `<li>` (for list items). The fragment also shows how to display the literal tag syntax using HTML entities.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/styledtext/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\tHere is the list with the supported HTML tags : \n\n\t<font size=\"12\">&lt;font size=&quot;12&quot;&gt;</font>\n\t<font color=\"red\">&lt;font color=&quot;red&quot;&gt;</font>\n\t<font face=\"DejaVu Serif\">&lt;font face=&quot;DejaVu Serif&quot;&gt;</font>\n\t<b>bold &lt;b&gt;</b> <i>italic &lt;i&gt;</i> <u>underlined &lt;u&gt;</u>\n\tan empty line follows (&lt;br/&gt;):\n\t<br/>\n\t<sup>&lt;sup&gt;</sup> and <sub>&lt;sub&gt;</sub>\n\t<br/>\n\tA bulleted list:\n\t<li>item 1 &lt;li&gt;</li>\n```\n\n----------------------------------------\n\nTITLE: Setting Java language in JasperReports template (XML)\nDESCRIPTION: Demonstrates how to set the scripting language to Java in a JasperReports template. This is optional as Java is the default language.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/java1.5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nlanguage=\"java\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Landscape Orientation in JasperReports - XML\nDESCRIPTION: This XML snippet configures a JasperReports report template to use landscape orientation by setting the 'orientation' attribute to 'Landscape' and swapping the 'pageWidth' and 'pageHeight' values. The template sets the page and column sizes, margins, and specifies the Java language for report expressions. There are no external dependencies other than JasperReports itself; input is the template parameters and output is the formatted report document. Ensure this tag is included at the top level of the .jrxml file.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/landscape/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport name=\\\"LandscapeReport\\\" language=\\\"java\\\"\\n  pageWidth=\\\"842\\\" pageHeight=\\\"595\\\" orientation=\\\"Landscape\\\"\\n  columnWidth=\\\"842\\\" leftMargin=\\\"0\\\" rightMargin=\\\"0\\\" topMargin=\\\"0\\\" bottomMargin=\\\"0\\\">\n```\n\n----------------------------------------\n\nTITLE: Declaring a Boolean Variable for Conditional Row Styling in JasperReports (XML)\nDESCRIPTION: This snippet defines a Boolean variable ConditionalRow in a JasperReports .jrxml file to enable alternate row styling. The variable resets on each group (CityGroup) and is computed as even/odd row using the value of CityGroup_COUNT. The initial value is set to null. Dependencies include correct group and variable context in the report. Input is the group count; output is used by conditional style expressions.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n  <variable name=\\\"ConditionalRow\\\" resetType=\\\"Group\\\" resetGroup=\\\"CityGroup\\\" class=\\\"java.lang.Boolean\\\">\\n    <expression><![CDATA[$V{CityGroup_COUNT} % 2 == 0]] ></expression>\\n    <initialValueExpression><![CDATA[null]] ></initialValueExpression>\\n  </variable>\n```\n\n----------------------------------------\n\nTITLE: Using enum in JasperReports conditional expression (XML)\nDESCRIPTION: Demonstrates how to use an enumerated type in a conditional expression within a JasperReports template.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/java1.5/README.md#2025-04-22_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"staticText\" y=\"450\" width=\"480\" height=\"35\" hTextAlign=\"Center\" fontSize=\"24.0\">\n  <printWhenExpression><![CDATA[$P{greeting} == Greeting.bye]]></printWhenExpression>\n  <text><![CDATA[Bye!]]></text>\n</element>\n<element kind=\"staticText\" y=\"450\" width=\"480\" height=\"35\" hTextAlign=\"Center\" fontSize=\"24.0\">\n  <printWhenExpression><![CDATA[$P{greeting} == Greeting.day]]></printWhenExpression>\n  <text><![CDATA[Have a nice day!]]></text>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Implementing FirstLetterGroup in JasperReports for Initial Grouping\nDESCRIPTION: Definition of the FirstLetterGroup that groups records by the first letter of the ShipCountry. Includes group header and footer with calculations, formatting, and layout settings like starting a new column and requiring minimum height.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<group name=\"FirstLetterGroup\" minHeightToStartNewPage=\"200\" startNewColumn=\"true\" reprintHeaderOnEachPage=\"true\">\n  <expression><![CDATA[$V{FirstLetter}]] ></expression>\n  <groupHeader>\n    <band height=\"25\">\n      <element kind=\"staticText\" mode=\"Opaque\" y=\"14\" width=\"130\" height=\"11\" forecolor=\"#FF0000\" backcolor=\"#FFDDDD\" underline=\"true\" style=\"Sans_Italic\">\n      <text><![CDATA[Countries Starting With Letter :]] ></text>\n    </element>\n    <element kind=\"textField\" mode=\"Opaque\" x=\"130\" y=\"14\" width=\"70\" height=\"11\" forecolor=\"#FF0000\" backcolor=\"#FFDDDD\" style=\"Sans_Bold\">\n      <expression><![CDATA[$V{FirstLetter}]] ></expression>\n    </element>\n    <element kind=\"textField\"... evaluationTime=\"Group\" evaluationGroup=\"FirstLetterGroup\" style=\"Sans_Bold\">\n      <expression><![CDATA[$V{PAGE_NUMBER} - $V{FirstLetterStartPageNumber} + 1]] ></expression>\n    </element>\n    <element kind=\"textField\" mode=\"Opaque\" x=\"200\" y=\"14\" width=\"30\" height=\"11\" forecolor=\"#FF0000\" backcolor=\"#FFDDDD\" hTextAlign=\"Right\" style=\"Sans_Bold\">\n      <expression><![CDATA[$V{FirstLetterGroup_COUNT} == 0 ? 1 : ($V{PAGE_NUMBER} - $V{FirstLetterStartPageNumber} + 1)]] ></expression>\n    </element>\n    <element kind=\"textField\" mode=\"Opaque\" x=\"230\" y=\"14\" width=\"10\" height=\"11\" forecolor=\"#FF0000\" backcolor=\"#FFDDDD\" hTextAlign=\"Center\" style=\"Sans_Bold\">\n      <expression><![CDATA[\"/\"]] ></expression>\n    </element>\n  </band>\n  </groupHeader>\n  <groupFooter>\n  <band height=\"15\">\n    <element kind=\"line\" width=\"270\" height=\"1\" forecolor=\"#FF0000\"/>\n    <element kind=\"staticText\" y=\"1\" width=\"45\" height=\"11\" forecolor=\"#FF0000\" hTextAlign=\"Right\" style=\"Sans_Bold\">\n      <text><![CDATA[Count :]] ></text>\n    </element>\n    <element kind=\"textField\" x=\"45\" y=\"1\" width=\"25\" height=\"11\" forecolor=\"#FF0000\" hTextAlign=\"Right\" style=\"Sans_Bold\">\n      <expression><![CDATA[$V{FirstLetterGroup_COUNT}]] ></expression>\n    </element>\n    <element kind=\"staticText\" x=\"70\" y=\"1\" width=\"100\" height=\"11\" forecolor=\"#FF0000\" hTextAlign=\"Right\" style=\"Sans_Bold\">\n      <text><![CDATA[Total :]] ></text>\n    </element>\n    <element kind=\"textField\" x=\"170\" y=\"1\" width=\"60\" height=\"11\" forecolor=\"#FF0000\" hTextAlign=\"Right\" pattern=\"0.00\" style=\"Sans_Bold\">\n      <expression><![CDATA[$V{FreightSumFirstLetterGroup}]] ></expression>\n    </element>\n    <element kind=\"textField\" x=\"230\" y=\"1\" width=\"40\" height=\"11\" forecolor=\"#FF0000\" hTextAlign=\"Right\" evaluationTime=\"Auto\" style=\"Sans_Bold\">\n      <expression><![CDATA[msg(\"{0,number,0.00}%\", 100d * $V{FreightSumFirstLetterGroup} / $V{FreightSumReport})]] ></expression>\n      </element>\n    </band>\n  </groupFooter>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Building and Running the JasperReports Table Sample with Maven\nDESCRIPTION: This shell command utilizes Apache Maven to build and execute the JasperReports table component sample. It first cleans the project (`clean`), then compiles the necessary sources (`compile`), and finally executes the report generation process defined by the `exec:exec@all` profile in the project's `pom.xml`. Running this command requires Maven (v3.6+) installed and assumes the current directory is `demo/samples/table` within the JasperReports project source.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/table/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Mapping Document Entity to DOCUMENT Table - Hibernate XML Mapping\nDESCRIPTION: Defines Hibernate mapping between the Document entity and the DOCUMENT table, with a many-to-one relationship to Address and a property for document total. Designed for src/Document.hbm.xml and requires the Document.java class and existing Address mapping. Supports object-relational mapping and data fetching via Hibernate.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <hibernate-mapping>\\n\\n    <class name=\\\"Document\\\" table=\\\"DOCUMENT\\\">\\n      <id name=\\\"id\\\" column=\\\"ID\\\">\\n        <generator class=\\\"increment\\\"/>\\n      </id>\\n\\n      <many-to-one name=\\\"address\\\" column=\\\"ADDRESSID\\\"/>\\n\\n      <property name=\\\"total\\\" column=\\\"TOTAL\\\"/>\\n    </class>\\n\\n  </hibernate-mapping>\n```\n\n----------------------------------------\n\nTITLE: Generating Paginated List with Empty DataSource - JasperReports XML\nDESCRIPTION: This code shows how to use an empty data source and a FetchDataset subdataset to render paginated pages in the report's detail band. The number of pages is driven by the totalResults field divided by 10 (results per page), supporting dynamic pagination based on the JSON API's response size. Prerequisite: a dataset or field providing totalResults, and inclusion of the JREmptyDataSource class.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<detail>\\n  <band height=\\\"65\\\" splitType=\\\"Stretch\\\">\\n    <element kind=\\\"component\\\" width=\\\"170\\\" height=\\\"65\\\">\\n      <component kind=\\\"list\\\" printOrder=\\\"Vertical\\\">\\n        <datasetRun subDataset=\\\"FetchDataset\\\">\\n          <dataSourceExpression><![CDATA[new JREmptyDataSource((int)(Math.ceil($F{totalResults} / 10d)))]] ></dataSourceExpression>\\n        </datasetRun>\\n        <contents height=\\\"65\\\" width=\\\"170\\\">\\n        ...\\n        </contents>\\n      </component>\\n    </element>\\n  </band>\\n</detail>\n```\n\n----------------------------------------\n\nTITLE: Using DATERANGE Expression in JasperReports JRXML (XML)\nDESCRIPTION: Demonstrates how to use the DATERANGE function within a JasperReports JRXML textField element to display a future date's start time. This XML snippet defines formatting and rendering settings for the field and computes the start datetime for three days after the current date. Dependencies: JasperReports runtime, JRXML format, and JasperReports DateRange API. Expected output is a formatted date/time shown in the report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/daterange/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" mode=\\\"Transparent\\\" ... backcolor=\\\"#EEEEEE\\\" vTextAlign=\\\"Middle\\\" pattern=\\\"EEE, MMM d, yyyy  HH:mm:ss\\\">\\n  <expression><![CDATA[DATERANGE(\\\"DAY+3\\\").getStart()]] ></expression>\\n  <property name=\\\"net.sf.jasperreports.export.xls.pattern\\\" value=\\\"ddd, MMM d, yyyy  HH:mm:ss\\\"/>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Ellipse Shape Element in JRXML - JasperReports - XML\nDESCRIPTION: This XML snippet illustrates how to create an ellipse shape element in JasperReports. The element includes attributes for y position, width, height, foreground and background color, with a nested pen element for outline thickness. Both axes of the ellipse are determined by width and height. Used for drawing ellipses or circles in report templates.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/shapes/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"ellipse\\\" y=\\\"600\\\" width=\\\"200\\\" height=\\\"40\\\" forecolor=\\\"#FF0000\\\" backcolor=\\\"#FFFF99\\\">\\n  <pen lineWidth=\\\"2.0\\\"/>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Configuring PPTX Slide Number Field in JasperReports XML\nDESCRIPTION: This example demonstrates how to configure a text field to display as an automatically updating slide number in PPTX exports. The property 'net.sf.jasperreports.export.pptx.field.type' with value 'slidenum' enables this functionality.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\"  x=\"200\" y=\"5\" width=\"75\" height=\"20\" hTextAlign=\"Right\" fontSize=\"14.0\">\n  <expression><![CDATA[$V{PAGE_NUMBER}]] ></expression>\n  <property name=\"net.sf.jasperreports.export.pptx.field.type\" value=\"slidenum\"/>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running the JasperReports Styled Text Sample (Shell)\nDESCRIPTION: This shell command uses Apache Maven to build and execute the JasperReports styled text sample project. It first cleans the project (`clean`), then compiles the source code (`compile`), and finally runs the sample report generation for all supported formats (`exec:exec@all`). This requires Maven (version 3.6+) to be installed and configured.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/styledtext/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining DejaVu Sans Font Family in JasperReports fonts.xml\nDESCRIPTION: This XML snippet defines the 'DejaVu Sans' font family within a JasperReports `fonts.xml` file. It maps the normal, bold, italic, and boldItalic styles to their respective TTF files, sets PDF encoding to 'Identity-H' and enables embedding. It also includes export mappings for HTML, suggesting fallback fonts. Locale support is commented out, implying universal applicability unless uncommented.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/fonts/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <fontFamily name=\"DejaVu Sans\">\n    <normal>net/sf/jasperreports/fonts/dejavu/DejaVuSans.ttf</normal>\n    <bold>net/sf/jasperreports/fonts/dejavu/DejaVuSans-Bold.ttf</bold>\n    <italic>net/sf/jasperreports/fonts/dejavu/DejaVuSans-Oblique.ttf</italic>\n    <boldItalic>net/sf/jasperreports/fonts/dejavu/DejaVuSans-BoldOblique.ttf</boldItalic>\n    <pdfEncoding>Identity-H</pdfEncoding>\n    <pdfEmbedded>true</pdfEmbedded>\n    <exportFonts>\n      <export key=\"net.sf.jasperreports.html\">'DejaVu Sans', Arial, Helvetica, sans-serif</export>\n    </exportFonts>\n    <!--\n    <locales>\n      <locale>en_US</locale>\n      <locale>de_DE</locale>\n    </locales>\n    -->\n  </fontFamily>\n```\n\n----------------------------------------\n\nTITLE: Compiling and Executing All Reports in the JasperReports Sample Using Maven (Bash)\nDESCRIPTION: Provides the Maven command for compiling and running all report types in the JasperReports date range sample. To be executed from the demo/samples/daterange directory after the database server is running. Requires Maven; upon execution, generates reports in the target/reports folder.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/daterange/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring Left/Middle Aligned UpsideDown Text - JasperReports XML\nDESCRIPTION: This code sets the JasperReports text element to 'Left' horizontal alignment, 'Middle' vertical alignment, and 'UpsideDown' rotation. This produces text that is horizontally right aligned, vertically centered, and rotated with the flow from right to left. Inputs are element attributes within a .jrxml template.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\nhTextAlign=\\\"Left\\\"\\nvTextAlign=\\\"Middle\\\"\\nrotation=\\\"UpsideDown\\\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameter Values in Report Expressions - JasperReports XML\nDESCRIPTION: Shows example expressions for retrieving parameter values in JasperReports, using either JavaScript or Java syntax. The $P{A} and $P{B} notations reference previously defined parameters; these can be used in report fields or scriptlets for further dynamic computation or field population.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/javascript/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<expression><![CDATA[$P{A}]] ></expression>\\n...\\n<expression><![CDATA[$P{B}]] ></expression>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical List Component in JasperReports XML\nDESCRIPTION: XML configuration for a vertical list component that displays ID, name and address for each city in the datasource. The list uses a dataset run and defines content layout with frames and textfields.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/list/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"component\" y=\"25\" width=\"250\" height=\"20\">\n  <component kind=\"list\" printOrder=\"Vertical\">\n    <datasetRun  subDataset=\"Addresses\">\n      <parameter name=\"City\">\n        <expression><![CDATA[$F{City}]] ></expression>\n      </parameter>\n    </datasetRun>\n    <contents height=\"14\">\n      <element kind=\"frame\" width=\"250\" height=\"14\" style=\"ListRow\">\n        <element kind=\"textField\" y=\"2\" width=\"15\" height=\"10\" hTextAlign=\"Right\" style=\"Sans_Small\">\n          <expression><![CDATA[$F{Id}]] ></expression>\n        </element>\n        <element kind=\"textField\" positionType=\"Float\" x=\"20\" y=\"2\" width=\"110\" height=\"10\" textAdjust=\"StretchHeight\" style=\"Sans_Small\">\n          <expression><![CDATA[$F{FirstName} + \" \" + $F{LastName}]] ></expression>\n        </element>\n        <element kind=\"textField\" positionType=\"Float\" x=\"135\" y=\"2\" width=\"105\" height=\"10\" textAdjust=\"StretchHeight\" style=\"Sans_Small\">\n          <expression><![CDATA[$F{Street}]] ></expression>\n        </element>\n      </element>\n    </contents>\n  </component>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Running the JasperReports Paragraph Sample with Maven\nDESCRIPTION: Command line instruction to run the paragraph sample using Maven, which will generate all supported document types in the target directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Localizing Function Names and Descriptions - JasperReports Properties\nDESCRIPTION: Specifies the default English translations for the DateTimeCategory and DateTimeFunctions within the jasperreports_messages.properties file. Each key-value pair provides a localized function or parameter name or description, facilitating JasperReports' automatic localization at runtime. This properties file is required for internationalization support, with each entry mapped to a particular function or category in code.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/functions/README.md#2025-04-22_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.functions.standard.DateTimeCategory.description                           = Category for date and time manipulation functions\nnet.sf.jasperreports.functions.standard.DateTimeCategory.name                                  = Date & Time\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.dayOfMonth.description          = The day of the new date\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.dayOfMonth.name                 = Day of month\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.description                     = Creates a date object using the specified information on day, month and year.\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.month.description               = The month of the new date\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.month.name                      = Month\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.name                            = DATE\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.year.description                = The year of the new date\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.year.name                       = Year\n```\n\n----------------------------------------\n\nTITLE: Running the JasperReports Templates Sample with Maven\nDESCRIPTION: This shell command uses Apache Maven to build and run the JasperReports templates sample project. It first cleans the project (`clean`), then compiles the source code (`compile`), and finally executes the sample application using the exec plugin (`exec:exec@all`), likely generating reports using the defined templates. Requires Maven 3.6+ installed and should be run from the `demo/samples/templates` directory. Output reports are generated in the `target/reports` subdirectory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/templates/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Element to Render Dynamic Chart - XML\nDESCRIPTION: This XML snippet shows an 'element' configuration for image rendering within a report template. It uses a dynamic expression referencing the 'Chart' variable (set at runtime to a renderer instance), and specifies rendering and hyperlink behaviors. Dependency: JasperReports image element schema. Inputs are report variable expressions; outputs are formatted images in the report. Limitations: designed for pre-rendered renderable instances, not raw image paths.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jfreechart/README.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n <element kind=\"image\" y=\"110\" width=\"515\" height=\"300\" scaleImage=\"Clip\" hImageAlign=\"Center\" onErrorType=\"Error\" linkType=\"Reference\">\\n   <expression><![CDATA[$V{Chart}]] ></expression>\\n   <hyperlinkReferenceExpression><![CDATA[\\\"http://www.jfree.org/jfreechart\\\"]] ></hyperlinkReferenceExpression>\\n </element>\n```\n\n----------------------------------------\n\nTITLE: Mapping Logical JVM Fonts for HTML Export in JasperReports fonts.xml\nDESCRIPTION: This XML snippet within `fonts.xml` maps standard logical font names ('SansSerif', 'Serif', 'Monospaced') used in reports to specific font families (like the previously defined DejaVu fonts) for the HTML exporter. This ensures appropriate font rendering or fallback options in HTML output.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/fonts/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n  <fontFamily name=\"SansSerif\">\n    <exportFonts>\n      <export key=\"net.sf.jasperreports.html\">'DejaVu Sans', Arial, Helvetica, sans-serif</export>\n    </exportFonts>\n  </fontFamily>\n  <fontFamily name=\"Serif\">\n    <exportFonts>\n      <export key=\"net.sf.jasperreports.html\">'DejaVu Serif', 'Times New Roman', Times, serif</export>\n    </exportFonts>\n  </fontFamily>\n  <fontFamily name=\"Monospaced\">\n    <exportFonts>\n      <export key=\"net.sf.jasperreports.html\">'DejaVu Sans Mono', 'Courier New', Courier, monospace</export>\n    </exportFonts>\n  </fontFamily>\n```\n\n----------------------------------------\n\nTITLE: Registering HQL Query Executer Factory in Properties File - Properties\nDESCRIPTION: This properties file snippet registers a custom query executer factory for handling HQL queries in JasperReports. The property name pattern net.sf.jasperreports.query.executer.factory.hql binds the 'hql' query language to a fully qualified Java class, which should implement JRQueryExecuterFactory. The factory instantiated by this registration can introduce additional built-in parameters and override or extend built-in query execution logic. Make sure the class referenced is available in the classpath. Modifying this value changes how HQL queries are executed throughout the reporting engine.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.query.executer.factory.hql=net.sf.jasperreports.engine.query.JRHibernateQueryExecuterFactory\n```\n\n----------------------------------------\n\nTITLE: Configuring Paragraph Alignment with Properties in XML\nDESCRIPTION: Example showing how to configure text alignment using property elements for horizontal and vertical alignment instead of direct attributes.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n <element kind=\"textField\" ...>\n  <expression>...</expression>\n  <property name=\"net.sf.jasperreports.style.hTextAlign\" value=\"Center\"/>\n  <property name=\"net.sf.jasperreports.style.vTextAlign\" value=\"Middle\"/>  \n </element>\n```\n\n----------------------------------------\n\nTITLE: Configuring Center/Bottom Aligned Right-Rotated Text - JasperReports XML\nDESCRIPTION: This snippet sets up a JasperReports text element for 'Center' horizontal alignment, 'Bottom' vertical alignment, and 'Right' rotation. The appearance is text left-aligned horizontally, vertically middle, flowing from top to bottom. Designed for insertion in a .jrxml definition.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\nhTextAlign=\\\"Center\\\"\\nvTextAlign=\\\"Bottom\\\"\\nrotation=\\\"Right\\\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Report Parameters with Java Default Expressions\nDESCRIPTION: Shows the equivalent Java syntax within `defaultValueExpression` tags in JRXML for setting default values for `Double` parameters `A` and `B`. This requires explicitly creating `Double` objects using `Double.valueOf(3.0)` and `Double.valueOf(5.0)`.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<defaultValueExpression><![CDATA[Double.valueOf(3.0)]]></defaultValueExpression>\n<defaultValueExpression><![CDATA[Double.valueOf(5.0)]]></defaultValueExpression>\n```\n\n----------------------------------------\n\nTITLE: Starting HSQLDB Server for JasperReports Sample\nDESCRIPTION: Command to start the HSQLDB server required for running the list component sample.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/list/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Source in JasperReports XML\nDESCRIPTION: Sets up the JSON data source file path in the report configuration using a report property.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsondatasource/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.json.source\" value=\"data/northwind.json\"/>\n```\n\n----------------------------------------\n\nTITLE: Executing HSQLDB Server with Maven - Shell\nDESCRIPTION: This command starts the HSQLDB server included in the JasperReports distribution using Maven. It requires having Apache Maven (version 3.6 or later) installed, and the current working directory set to 'demo/hsqldb' within the JasperReports project source. The command invokes Maven to execute the Java class that runs the HSQLDB server instance, initializing the local demo database.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Configuring Right/Middle Aligned Right-Rotated Text - JasperReports XML\nDESCRIPTION: This code demonstrates applying 'Right' horizontal alignment, 'Middle' vertical alignment, and 'Right' rotation to a JasperReports text element. The resulting layout positions text centered horizontally, bottom vertically, with the flow from top to bottom. Intended as a fragment in report XML design.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\nhTextAlign=\\\"Right\\\"\\nvTextAlign=\\\"Middle\\\"\\nrotation=\\\"Right\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Field Mappings in JasperReports (XML)\nDESCRIPTION: These field definitions map CSV column names to report fields in JasperReports. Each <field> element specifies the name and data type (class) expected in the CSV data source. The mapping enables type-safe data extraction during report filling, and names must match those supplied in the CSV column names property.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/csvdatasource/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"id\\\" class=\\\"java.lang.Integer\\\"/>\n<field name=\\\"name\\\" class=\\\"java.lang.String\\\"/>\n<field name=\\\"address\\\" class=\\\"java.lang.String\\\"/>\n<field name=\\\"city\\\" class=\\\"java.lang.String\\\"/>\n<field name=\\\"state\\\" class=\\\"java.lang.String\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Dataset Run Configuration in JasperReports\nDESCRIPTION: XML snippet showing how to configure a dataset run in JasperReports. This example demonstrates passing a parameter to a subdataset named 'Customer_Quantity'.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/crosstabs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<datasetRun subDataset=\"Customer_Quantity\">\n  <parameter name=\"CityParam\">\n    <expression><![CDATA[$F{City}]] ></expression>\n  </parameter>\n</datasetRun>\n```\n\n----------------------------------------\n\nTITLE: Rendering Remote Image with Hyperlink in JasperReports XML\nDESCRIPTION: This snippet shows how to include a remote image in a JasperReports template. It loads an SVG image from a URL, applies scaling, sets background color, and includes a hyperlink to the image source.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/images/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"image\" mode=\"Opaque\"\n  x=\"400\" width=\"150\" height=\"100\" backcolor=\"#DDFFDD\" scaleImage=\"RetainShape\" onErrorType=\"Icon\" linkType=\"Reference\" lazy=\"true\">\n  <expression><![CDATA[\"https://jasperreports.sourceforge.net/jasperreports.svg\"]] ></expression>\n  <hyperlinkReferenceExpression><![CDATA[\"http://jasperreports.sf.net/jasperreports.svg\"]] ></hyperlinkReferenceExpression>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONQL Query Language in Report\nDESCRIPTION: Shows how to specify JSONQL as the query language at the report level using XML configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<query language=\"jsonql\"><![CDATA[ ..Orders(@size > 1).* ]] ></query>\n```\n\n----------------------------------------\n\nTITLE: Declaring Groovy as the Report Language in JRXML\nDESCRIPTION: Sets the report's expression language to Groovy using the `language=\"groovy\"` attribute within the root element of a JasperReports JRXML template file. This instructs JasperReports to use the configured Groovy compiler for evaluating expressions within this report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\nlanguage=\"groovy\"\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running JasperReports Print Service Sample - Maven Shell\nDESCRIPTION: This shell command demonstrates how to invoke Maven to clean, compile, and execute the 'printservice' sample provided in the JasperReports demo. It assumes that Apache Maven (3.6 or later) is installed and that the current working directory is set to 'demo/samples/printservice' in the JasperReports source tree. No parameters are required; output consists of compiled classes and report files generated in the target directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/printservice/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring JasperReports Font Extension Registry in Properties\nDESCRIPTION: This properties file snippet registers the `SimpleFontExtensionsRegistryFactory` and specifies the location of the `fonts.xml` file (`net/sf/jasperreports/fonts/fonts.xml`) which contains the actual font family definitions for the 'dejavu' extension. This is essential for JasperReports to locate and load the font extension.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/fonts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.extension.registry.factory.simple.font.families=net.sf.jasperreports.engine.fonts.SimpleFontExtensionsRegistryFactory\nnet.sf.jasperreports.extension.simple.font.families.dejavu=net/sf/jasperreports/fonts/fonts.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring RTF Text Field Element\nDESCRIPTION: Configuration for a text field that processes RTF markup content from a parameter. Uses floating position and stretch height adjustment.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/markup/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"textField\"positionType=\"Float\" mode=\"Opaque\" y=\"120\" width=\"555\" height=\"110\" backcolor=\"#C0C0C0\" markup=\"rtf\" textAdjust=\"StretchHeight\" fontSize=\"16.0\">\n  <expression><![CDATA[$P{RtfText}]] ></expression>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sheet Tab Color in Excel Export\nDESCRIPTION: This property sets the tab color for all sheets in the Excel output. The color is specified as a CSS-style hex color code. In this example, all sheet tabs will be green (#00FF00) unless overridden at element level.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.export.xls.sheet.tab.color\" value=\"#00FF00\"/>\n```\n\n----------------------------------------\n\nTITLE: Referencing an External XML Style Template in JasperReports (XML)\nDESCRIPTION: This snippet shows how to reference an external style template (e.g., ReportStyles.jrtx) within a JasperReports report. The template file must be accessible at runtime. The <template> tag uses a CDATA section to denote the file path. This enables sharing common styles across multiple reports, reducing duplication. The referenced template may contain both static and conditional styles.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n  <template><![CDATA[\\\"ReportStyles.jrtx\\\"]] ></template>\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports PDF/A Sample with Maven - Shell\nDESCRIPTION: This shell snippet demonstrates the command to compile and execute all sample PDF/A reports in the JasperReports project using Apache Maven. It assumes Maven (version 3.6+) is installed and run from the 'demo/samples/pdfa' directory. The command cleans existing builds, compiles sources, and generates sample reports in the target output directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/pdfa/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Combining Unicode Parameters in a JRXML Text Expression (XML/Java)\nDESCRIPTION: This JRXML snippet demonstrates concatenating two report parameters, `$P{GreekText}` and `$P{CyrillicText}`, within a text field's expression element using Java syntax. It shows that parameters containing Unicode characters can be combined and displayed together, separated by a newline character (`\\n`). This allows mixing different scripts within a single report element.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/unicode/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<expression class=\"java.lang.String\"><![CDATA[$P{GreekText} + \"\\n\" + $P{CyrillicText}]]></expression>\n```\n\n----------------------------------------\n\nTITLE: Pie Dataset Configuration in JasperReports\nDESCRIPTION: Configuration structure for pie chart datasets in JasperReports. Includes key, value, label expressions and section hyperlinks. Returns Comparable objects for keys and Number objects for values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<keyExpression />\n<valueExpression />\n<labelExpression />\n<sectionHyperlink />\n```\n\n----------------------------------------\n\nTITLE: Castor XML Mapping Chart Theme Settings\nDESCRIPTION: XML mapping configuration for ChartThemeSettings class defining the structure of chart theme elements including title, subtitles, legend, and axis settings.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <class name=\"net.sf.jasperreports.chartthemes.simple.ChartThemeSettings\">\n    <map-to xml=\"chart-theme\"/>\n    <field name=\"chartSettings\" type=\"net.sf.jasperreports.chartthemes.simple.ChartSettings\">\n      <bind-xml node=\"element\"/>\n    </field>\n    <field name=\"titleSettings\" type=\"net.sf.jasperreports.chartthemes.simple.TitleSettings\">\n      <bind-xml node=\"element\"/>\n    </field>\n    <field name=\"subtitleSettings\" type=\"net.sf.jasperreports.chartthemes.simple.TitleSettings\">\n      <bind-xml node=\"element\"/>\n    </field>\n    <field name=\"legendSettings\" type=\"net.sf.jasperreports.chartthemes.simple.LegendSettings\">\n      <bind-xml node=\"element\"/>\n    </field>\n    <field name=\"plotSettings\" type=\"net.sf.jasperreports.chartthemes.simple.PlotSettings\">\n      <bind-xml node=\"element\"/>\n    </field>\n    <field name=\"domainAxisSettings\" type=\"net.sf.jasperreports.chartthemes.simple.AxisSettings\">\n      <bind-xml node=\"element\"/>\n    </field>\n    <field name=\"rangeAxisSettings\" type=\"net.sf.jasperreports.chartthemes.simple.AxisSettings\" >\n      <bind-xml node=\"element\"/>\n    </field>\n  </class>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hibernate Session Factory - XML\nDESCRIPTION: Defines the Hibernate session factory settings, including database connection parameters and mappings for Address and Document entities. Required dependencies include Hibernate ORM and the HSQLDB JDBC driver. Inputs are property values for connection and mapping files, output is a session factory ready for use with the specified HSQLDB database.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<hibernate-configuration>\\n\\n  <session-factory>\\n    <property name=\\\"connection.driver_class\\\">org.hsqldb.jdbcDriver</property>\\n    <property name=\\\"connection.url\\\">jdbc:hsqldb:hsql://localhost</property>\\n    <property name=\\\"connection.username\\\">sa</property>\\n    <property name=\\\"connection.password\\\"></property>\\n    <property name=\\\"dialect\\\">org.hibernate.dialect.HSQLDialect</property>\\n    <property name=\\\"connection.pool_size\\\">1</property>\\n    <mapping resource=\\\"Address.hbm.xml\\\"/>\\n    <mapping resource=\\\"Document.hbm.xml\\\"/>\\n  </session-factory>\\n\\n</hibernate-configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF/A Properties in JasperReports\nDESCRIPTION: Configuration properties for setting PDF/A conformance levels, ICC profiles, and metadata in JasperReports exports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/pdfa/README.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.export.pdfa.conformance\nnet.sf.jasperreports.export.pdfa.icc.profile.path\nnet.sf.jasperreports.export.pdfa.embed.icc.profile\nnet.sf.jasperreports.export.pdf.use.cmyk.colors\nnet.sf.jasperreports.export.pdf.metadata.title\nnet.sf.jasperreports.components.table.accessible\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Updater in Java\nDESCRIPTION: Interface method implementation required for creating custom report updaters that can modify JasperDesign objects. This method is called for each report template being processed to apply specific modifications.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antupdate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic JasperDesign update(JasperDesign jasperDesign)\n```\n\n----------------------------------------\n\nTITLE: Running the JasperReports Sample with Maven\nDESCRIPTION: A Maven command to compile and execute the datasource sample in the JasperReports project. It generates all supported document types containing the sample report in the target/reports directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring Paragraph with Tab Stop Width in XML\nDESCRIPTION: Example showing how to set the tab stop width attribute for a paragraph with Fixed line spacing.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<paragraph lineSpacing=\"Fixed\" lineSpacingSize=\"20.0\" tabStopWidth=\"20\"/>\n```\n\n----------------------------------------\n\nTITLE: Viewing the Source JRXML Report Design - Shell\nDESCRIPTION: Invokes Maven's 'exec:java' goal with the 'viewDesign' execution target to display a sample's JRXML report design. Meant to be run in the relevant sample directory, with Maven configured to support this execution target. Outputs or displays the XML design for visual or manual inspection.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java@viewDesign\n```\n\n----------------------------------------\n\nTITLE: Configuring EJBQL Query and Fields with Column Positions in JasperReports XML\nDESCRIPTION: Demonstrates how to set up an EJBQL query in a subreport and define fields using column positions in the query result.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql/README.md#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<parameter name=\"MovieId\" class=\"java.lang.Integer\"/>\n<query language=\"ejbql\">\n  <![CDATA[SELECT   v.type, v.description\n    FROM     Varia v\n    WHERE    v.movie.id = $P{MovieId}\n    ORDER BY v.importance]] >\n</query>\n<field name=\"type\" class=\"java.lang.String\">\n  <property name=\"net.sf.jasperreports.javabean.field.property\" value=\"COLUMN_1\"/>\n</field>\n<field name=\"description\" class=\"java.lang.String\">\n  <property name=\"net.sf.jasperreports.javabean.field.property\" value=\"COLUMN_2\"/>\n</field>\n```\n\n----------------------------------------\n\nTITLE: XY Dataset Configuration in JasperReports\nDESCRIPTION: Configuration for XY chart datasets with series expression and x,y value pairs. Supports Comparable objects for series names and Number objects for coordinate values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<seriesExpression />\n<xValueExpression />\n<yValueExpression />\n<labelExpression />\n<itemHyperlink />\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Font Sizes with Newlines in JasperReports (XML)\nDESCRIPTION: This fragment illustrates how to vary font sizes within a single text element using multiple `<style>` tags with different `size` attributes. It also shows the inclusion of newline characters (`\\n`) to create line breaks between the differently sized numbers. Note the use of escaped quotes `\\\"` for attribute values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/styledtext/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n\t<style size=\\\"16\\\">1</style>\\n<style size=\\\"24\\\">2</style>\\n<style size=\\\"32\\\">3</style>\\n\n\t<style size=\\\"24\\\">2</style>\\n<style size=\\\"16\\\">1</style>\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Orders Entity in XML - XML\nDESCRIPTION: Provides an example <Orders> entity illustrating the order fields used by the data source. This snippet is referenced in reporting and linked to customers via the CustomerID. Inputs: None (sample data). Outputs: XML node representing an order. Intended to demonstrate one-to-many relationships and field mapping.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <Orders>\\n    <OrderID>10643</OrderID>\\n    <CustomerID>ALFKI</CustomerID>\\n    <EmployeeID>6</EmployeeID>\\n    <OrderDate>1997-08-25</OrderDate>\\n    <RequiredDate>1997-09-22</RequiredDate>\\n    <ShippedDate>1997-09-02</ShippedDate>\\n    <ShipVia>1</ShipVia>\\n    <Freight>29.46</Freight>\\n    <ShipName>Alfreds Futterkiste</ShipName>\\n    <ShipAddress>Obere Str. 57</ShipAddress>\\n    <ShipCity>Berlin</ShipCity>\\n    <ShipPostalCode>12209</ShipPostalCode>\\n    <ShipCountry>Germany</ShipCountry>\\n  </Orders>\n```\n\n----------------------------------------\n\nTITLE: Specifying Resource Bundle in JasperReport Template (XML)\nDESCRIPTION: Demonstrates how to specify the root name of the default resource bundle in the JasperReport template using the resourceBundle attribute.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/i18n/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\nresourceBundle=\"i18n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring XML HTTP Data Adapter in XML\nDESCRIPTION: This snippet demonstrates how to set up an XML data adapter as an HTTP data adapter by specifying the dataFile element type as httpDataLocation. This configuration enables fetching XML data over HTTP for report filling.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<xmlDataAdapter class=\"net.sf.jasperreports.data.xml.XmlDataAdapterImpl\">\n  <name>XML Http Data Adapter</name>\n  <dataFile xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"httpDataLocation\">\n    ...\n  </dataFile>\n  ...\n</xmlDataAdapter>\n```\n\n----------------------------------------\n\nTITLE: Configuring Groovy and JavaScript Compilers in JasperReports\nDESCRIPTION: This snippet shows the configuration properties used to map Groovy and JavaScript report compilers to their respective languages in JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nnet.sf.jasperreports.compiler.groovy=net.sf.jasperreports.compilers.JRGroovyCompiler\nnet.sf.jasperreports.compiler.javascript=net.sf.jasperreports.compilers.JavaScriptCompiler\n```\n\n----------------------------------------\n\nTITLE: Category Dataset Configuration in JasperReports\nDESCRIPTION: Configuration for category chart datasets including series, category, value expressions and item hyperlinks. Supports Comparable objects for series and categories, Number objects for values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<seriesExpression />\n<categoryExpression />\n<valueExpression />\n<labelExpression />\n<itemHyperlink />\n```\n\n----------------------------------------\n\nTITLE: Defining a List Input Field with Custom Separator in JasperReports JRXML\nDESCRIPTION: This JRXML snippet configures a text field element to function as a list input field in the PDF output. The 'net.sf.jasperreports.export.pdf.field.type' is set to 'List'. Choices for the list ('Un', 'Deux', etc.) are provided via the 'net.sf.jasperreports.export.pdf.field.choices' property, using a comma as the separator defined by 'net.sf.jasperreports.export.pdf.field.choice.separators'. The 'net.sf.jasperreports.export.pdf.field.value' property sets 'Quatre' as the initially selected item. The text in the 'expression' tag is ignored for PDF export. The border style (dashed red) is inherited from the 'box' and 'pen' elements.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/forms/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" positionType=\"Float\" mode=\"Opaque\" width=\"200\" height=\"95\" forecolor=\"#00FFFF\" backcolor=\"#00FF00\"\nhTextAlign=\"Center\" fontName=\"DejaVu Serif\" bold=\"true\" fontSize=\"24.0\">\n  <expression><![CDATA[\"This text does not matter in PDF export.\"]] ></expression>\n  <property name=\"net.sf.jasperreports.export.pdf.field.type\" value=\"List\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.choice.separators\" value=\",\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.choices\" value=\"Un,Deux,Trois,Quatre,Cinq\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.value\" value=\"Quatre\"/>\n  <box>\n    <pen lineWidth=\"2.0\" lineStyle=\"Dashed\" lineColor=\"#FF0000\"/>\n  </box>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Registering Hibernate Query Executer Factory\nDESCRIPTION: Property definition for registering the Hibernate Query Executer Factory in JasperReports configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.query.executer.factory.hql=net.sf.jasperreports.engine.query.JRHibernateQueryExecuterFactory\n```\n\n----------------------------------------\n\nTITLE: JSONQL Basic Array Access and Filtering\nDESCRIPTION: Example showing how to query orders with freight over 200 from 1997 using JSONQL filtering expression\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_17\n\nLANGUAGE: jsonql\nCODE:\n```\nNorthwind.Customers.Orders.*(Freight > 200 && OrderDate *= \"1997\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Remote Page Hyperlink TextField Element - JasperReports XML\nDESCRIPTION: Illustrates creating a hyperlink that navigates to a specific page of a remote (referenced) document. This uses both <hyperlinkReferenceExpression> and <hyperlinkPageExpression> in a textField, with linkType=RemoteAnchor. The reference file and page must exist; outputs a remote page link in the generated report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" x=\\\"5\\\" y=\\\"125\\\" width=\\\"400\\\" height=\\\"15\\\" linkType=\\\"RemoteAnchor\\\">\\n  <expression><![CDATA[\\\"  >> Click here to go to another PDF file (in fact, we use the same file).\\\"]] ></expression>\\n  <hyperlinkReferenceExpression><![CDATA[\\\"./HyperlinkReport.pdf\\\"]] ></hyperlinkReferenceExpression>\\n  <hyperlinkPageExpression>2</hyperlinkPageExpression>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Spring Chart Theme Extension Configuration\nDESCRIPTION: Properties configuration required to enable Spring-based chart themes in JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.extension.registry.factory.chart.theme=net.sf.jasperreports.extensions.SpringExtensionsRegistryFactory\nnet.sf.jasperreports.extension.chart.theme.spring.beans.resource=net/sf/jasperreports/chartthemes/spring/beans/chartThemesBeans.xml\n```\n\n----------------------------------------\n\nTITLE: Setting Font Properties for Static Text in JasperReports XML\nDESCRIPTION: Demonstrates how to set various font properties for a static text element in a JasperReport XML file. It specifies font family, size, style, and PDF-specific font attributes.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/fonts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"staticText\" y=\"350\" width=\"150\" height=\"40\" fontName=\"Monospaced\"\n    pdfFontName=\"Courier-Oblique\" italic=\"true\" underline=\"true\" fontSize=\"12.0\">\n  <text><![CDATA[The quick brown fox jumps over the lazy dog.]] ></text>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Time Series Dataset Configuration in JasperReports\nDESCRIPTION: Configuration for time series datasets with time period specifications and series expressions. Supports Date objects for time periods and Number objects for values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<seriesExpression />\n<timePeriodExpression />\n<valueExpression />\n<labelExpression />\n<itemHyperlink />\n```\n\n----------------------------------------\n\nTITLE: Modifying Rectangle Properties at Runtime\nDESCRIPTION: Java code that dynamically modifies the forecolor and backcolor of rectangle elements using random color values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/alterdesign/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nJRRectangle rectangle = (JRRectangle)jasperReport.getTitle().getElementByKey(\"first.rectangle\");\nrectangle.setForecolor(new Color((int)(16000000 * Math.random())));\nrectangle.setBackcolor(new Color((int)(16000000 * Math.random())));\n\nrectangle = (JRRectangle)jasperReport.getTitle().getElementByKey(\"second.rectangle\");\nrectangle.setForecolor(new Color((int)(16000000 * Math.random())));\nrectangle.setBackcolor(new Color((int)(16000000 * Math.random())));\n\nrectangle = (JRRectangle)jasperReport.getTitle().getElementByKey(\"third.rectangle\");\nrectangle.setForecolor(new Color((int)(16000000 * Math.random())));\nrectangle.setBackcolor(new Color((int)(16000000 * Math.random())));\n```\n\n----------------------------------------\n\nTITLE: Querying Address and Document Data with HQL in JasperReports - XML\nDESCRIPTION: Defines a JasperReports parameter for city filtering and an HQL query joining Address and Document entities. Requires Hibernate session, address and document mappings, and a CityFilter parameter as a list. Inputs are filter values, outputs are address-document records where cities are not filtered out.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n  <parameter name=\\\"CityFilter\\\" class=\\\"java.util.List\\\"/>\\n  <query language=\\\"hql\\\">\\n    <![CDATA[select address as address, document.id as documentId, document.total as documentTotal\\n      from Address as address join address.documents as document\\n      where city not in ($P{CityFilter})\\n      order by address.city, address.lastName, address.firstName, address.id]] >\\n  </query>\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Page Hyperlink TextField Element - JasperReports XML\nDESCRIPTION: Demonstrates using the <hyperlinkPageExpression> tag with linkType=LocalPage in a textField element, enabling navigation to a specific page within the same document. Requires an evaluatable expression (such as a page number). Clicking the link moves to the referenced page in supported outputs (e.g., PDF).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" x=\\\"5\\\" y=\\\"65\\\" width=\\\"300\\\" height=\\\"15\\\" forecolor=\\\"#008000\\\" linkType=\\\"LocalPage\\\">\\n  <expression><![CDATA[\\\"  >> Click here to go to the second page.\\\"]] ></expression>\\n  <hyperlinkPageExpression><![CDATA[2]] ></hyperlinkPageExpression>\\n  ...\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running an Individual Sample Report - Shell\nDESCRIPTION: Executes Maven to clean, compile, and then run a single sample report via its respective folder using the 'exec:java' goal. Assumes the sample project is properly configured for Maven compilation and execution. Outputs generated reports or console feedback depending on the report's implementation.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean compile exec:java\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Customizer Properties Format\nDESCRIPTION: Shows the property name format for configuring individual chart customizer properties using the customizer's arbitrary name.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartcustomizers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnet.sf.jasperreports.customizer.{arbitrary_name}.{property_name}\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Anchor TextField Element - JasperReports XML\nDESCRIPTION: Defines a JasperReports textField element that establishes a local anchor via the <anchorNameExpression> tag for referencing within the report. No external dependencies except JasperReports itself; expects anchorNameExpression to resolve to a unique string anchor. Used to facilitate internal navigation/bookmarking in output documents such as PDFs.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" x=\\\"5\\\" y=\\\"5\\\" width=\\\"450\\\" height=\\\"20\\\" bold=\\\"true\\\" fontSize=\\\"14.0\\\">\\n  <expression><![CDATA[\\\"This is the TITLE section\\\"]] ></expression>\\n  <anchorNameExpression><![CDATA[\\\"title\\\"]] ></anchorNameExpression>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Defining Function Category Key in Properties File\nDESCRIPTION: Example of how to define a function category name key in the properties file for internationalization.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/functions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nnet.sf.jasperreports.functions.standard.DateTimeCategory.name=Category_Name\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Line Spacing with Tab Stop in XML\nDESCRIPTION: Example demonstrating how to configure a text field with a Fixed line spacing, specific line spacing size, and a centered tab stop within a paragraph.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <element kind=\"textField\" style=\"indentStyle\" ...>\n    <paragraph lineSpacing=\"Fixed\" lineSpacingSize=\"20.0\" style=\"indentStyle\">\n      <tabStop position=\"33\" alignment=\"Center\"/>\n    </paragraph>\n    <expression>...</expression>\n  </element>\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring-based Chart Theme Bundle\nDESCRIPTION: Spring bean configuration that defines the chart theme bundle and maps available themes including generic, default.spring, eye.candy.sixties, and aegean themes.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <bean id=\"themeBundle\" class=\"net.sf.jasperreports.chartthemes.ChartThemeMapBundle\">\n    <property name=\"themes\">\n      <map>\n        <entry key=\"generic\">\n          <ref bean=\"genericChartTheme\"/>\n        </entry>\n        <entry key=\"default.spring\">\n          <ref bean=\"defaultChartTheme\"/>\n        </entry>\n        <entry key=\"eye.candy.sixties\">\n          <ref bean=\"eyeCandySixtiesChartTheme\"/>\n        </entry>\n        <entry key=\"aegean\">\n          <ref bean=\"aegeanChartTheme\"/>\n        </entry>\n      </map>\n    </property>\n  </bean>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Parameter Values with Java Expressions - JasperReports XML\nDESCRIPTION: Illustrates how to assign default values to report parameters using explicit Java expressions for backward compatibility. Utilizes Double.valueOf to wrap primitives as Double objects. This approach ensures compatibility with Java 1.4.x or earlier, when automatic type conversion or boxing was less advanced. These lines would be placed inside <defaultValueExpression> elements.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/javascript/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<defaultValueExpression><![CDATA[Double.valueOf(3.0)]] ></defaultValueExpression>\\n<defaultValueExpression><![CDATA[Double.valueOf(5.0)]] ></defaultValueExpression>\n```\n\n----------------------------------------\n\nTITLE: Configuring XLS Export Parameters\nDESCRIPTION: Java configuration for XLS export to control page breaks by setting one-page-per-sheet and removing empty spaces between rows.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/nopagebreak/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  SimpleXlsReportConfiguration configuration = new SimpleXlsReportConfiguration();\n  configuration.setOnePagePerSheet(false);\n  configuration.setRemoveEmptySpaceBetweenRows(true);\n  exporter.setConfiguration(configuration);\n```\n\n----------------------------------------\n\nTITLE: Accessing JasperPrint and Configuration in ExporterInputItem (Java)\nDESCRIPTION: These methods are part of the ExporterInputItem interface. `getJasperPrint()` returns the actual JasperPrint object to be exported. `getConfiguration()` returns the ReportExportConfiguration specific to this JasperPrint object, allowing per-report customization during batch export. Requires an implementation of the ExporterInputItem interface.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n- `public JasperPrint getJasperPrint()` - return the [JasperPrint](https://jasperreports.sourceforge.net/api/net/sf/jasperreports/engine/JasperPrint.html) object\n- `public ReportExportConfiguration getConfiguration()` - return export configuration settings to be applied for the [JasperPrint](https://jasperreports.sourceforge.net/api/net/sf/jasperreports/engine/JasperPrint.html) object\n```\n\n----------------------------------------\n\nTITLE: Viewing a Specific JRPrint Report File - Shell\nDESCRIPTION: Runs Maven's 'exec:java@view' goal with an argument to open a specific '.jrprint' report, using the file at the provided path. Useful for testing or debugging report output after generation. Output is a visual display or console log of report contents.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java@view -Dexec.args=target/reports/I18nReport.jrprint\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Category with Annotation - JasperReports Java\nDESCRIPTION: Declares an empty Java class annotated with @FunctionCategory to classify date and time-related functions in JasperReports. This class serves as a marker for grouping related function methods, conforming to the JasperReports functions framework. No dependencies beyond JasperReports core libraries are required, and there are no methods or fields in this category class.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/functions/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  package net.sf.jasperreports.functions.standard;\n\n  import net.sf.jasperreports.functions.annotations.FunctionCategory;\n\n  /**\n   * This class should maintain all function methods that belongs to the category {@link #DATE_TIME}.\n   */\n  @FunctionCategory(\n    //\"DATE_TIME\" // if not specified, the value is the name of the category class\n    )\n  public final class DateTimeCategory\n  {\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Export Items from ExporterInput (Java)\nDESCRIPTION: This method, defined in the ExporterInput interface, retrieves a list of ExporterInputItem objects. Each ExporterInputItem represents a single JasperPrint object along with its specific export configuration settings, enabling batch processing. Requires an implementation of the ExporterInput interface.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic List<ExporterInputItem> getItems()\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports Form Samples Using Maven - Shell Command\nDESCRIPTION: This shell snippet provides the command to compile and execute all JasperReports form samples using Maven. Requires Maven version 3.6 or later installed and project directory set to 'demo/samples/forms'. The command cleans previous builds, compiles sources, and runs the sample, outputting results to the specified target directory. Inputs are Maven commands, and outputs are generated reports in multiple formats. Assumes all environment setup and dependencies are resolved.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/forms/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Styles for Alternate Row Colors - JasperReports XML\nDESCRIPTION: This XML snippet defines a conditional style in a JasperReports .jrxml template that alternates row background color in the report's detail section. It uses a built-in counting variable (e.g., CityGroup_COUNT) in a CDATA-wrapped JavaScript-like expression to set a property (backcolor) when the row index is even. No dependencies besides the JasperReports report engine. Parameters include style properties and the expression for alternation. Input is the row count variable; output is visual row coloring in the report. Limitations: must match the variable to group context; applies only where conditional styling is supported.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/scriptlet/README.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<style name=\"AlternateDetail\">\\n  <conditionalStyle mode=\"Opaque\" backcolor=\"#C0C0C0\">\\n    <conditionExpression><![CDATA[$V{CityGroup_COUNT} % 2 == 0]] ></conditionExpression>\\n  </conditionalStyle>\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Sample Customers Fields for Mapping - Text\nDESCRIPTION: Enumerates field names to use for mapping XML elements in the Customers entity to report fields within JasperReports. Listing is solely for developer reference; input/output are not applicable here, but these names are referenced elsewhere for field property mapping.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nCustomerID\\nCompanyName\\nContactName\\nSales Representative\\nContactTitle\\nAddress\\nCity\\nPostalCode\\nCountry\\nPhone\\nFax\n```\n\n----------------------------------------\n\nTITLE: Declaring Report Parameters with Groovy Default Expressions\nDESCRIPTION: Defines two report parameters (`A` and `B`) of type `java.lang.Double` within a JRXML file. The `defaultValueExpression` uses simplified Groovy syntax (`3d`, `5d`) to assign default values. Groovy handles dynamic typing and runtime conversion to `Double` objects.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<parameter name=\"A\" class=\"java.lang.Double\">\n  <defaultValueExpression><![CDATA[3d]] ></defaultValueExpression>\n</parameter>\n<parameter name=\"B\" class=\"java.lang.Double\">\n  <defaultValueExpression><![CDATA[5d]] ></defaultValueExpression>\n</parameter>\n```\n\n----------------------------------------\n\nTITLE: Declaring JRCommonElement Methods - JasperReports - Java\nDESCRIPTION: This Java interface snippet lists the core methods that should be implemented by any JasperReports shape or common element. It demonstrates attribute accessors and mutators for width, height, unique key, visualization mode, and foreground/background colors. Dependencies include JasperReports API, and method parameters correspond to typical Java types and JasperReports enums. Implementing classes use these to manage graphical element properties.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/shapes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic int getWidth();\\npublic int getHeight();\\npublic String getKey();\\npublic ModeEnum getModeValue();\\npublic ModeEnum getOwnModeValue();\\npublic void setMode(ModeEnum mode);\\npublic Color getForecolor();\\npublic Color getOwnForecolor();\\npublic void setForecolor(Color forecolor);\\npublic Color getBackcolor();\\npublic Color getOwnBackcolor();\\npublic void setBackcolor(Color backcolor);\n```\n\n----------------------------------------\n\nTITLE: Declaring a DateRange Parameter in JRXML for JasperReports (XML)\nDESCRIPTION: Illustrates how to declare a report parameter of type net.sf.jasperreports.types.date.DateRange within a JasperReports JRXML file. This parameter uses a default value expression, leveraging DATERANGE with a fixed date string. The parameter can be used in expressions and SQL queries for dynamic date filtering. Prerequisites include JasperReports and correct type imports; output is a parameter holding the specified date range.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/daterange/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<parameter name=\\\"StartDate\\\" class=\\\"net.sf.jasperreports.types.date.DateRange\\\">\\n  <defaultValueExpression><![CDATA[DATERANGE(\\\"1996-09-01\\\")]] ></defaultValueExpression>\\n</parameter>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ant Target for Updating JRXMLs via srcdir (XML)\nDESCRIPTION: Defines an Ant target named `update1` that uses the JasperReports `<jru>` task to update JRXML files. It specifies the source directory (`./reports`), destination directory (`./build/reports`), includes `**/*.jrxml` files using the `srcdir` attribute, and references a classpath (`sample-classpath`). It also shows commented-out custom `<updater>` tags for potential advanced updates.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antupdate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"update1\" description=\"Updates report designs specified using the &quot;srcdir&quot; in the &lt;jru&gt; tag.\" depends=\"define-jru\"> \n  <mkdir dir=\"./build/reports\"/> \n  <jru \n      srcdir=\"./reports\"\n      destdir=\"./build/reports\">\n    <classpath refid=\"sample-classpath\"/>\n    <include name=\"**/*.jrxml\"/>\n    <!--\n    <updater>com.update.RenewUuidsUpdater</updater>\n    <updater>com.update.StyleUpdater</updater>\n    -->\n  </jru>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Implementing ChartThemeBundle Interface in Java\nDESCRIPTION: The required methods to implement a ChartThemeBundle interface, which makes chart themes available by giving them names and grouping them into a bundle. This interface allows retrieving chart themes by name.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic String[] getChartThemeNames();\npublic ChartTheme getChartTheme(String themeName);\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports Sample with Maven - Shell\nDESCRIPTION: Command-line instruction to execute the JasperReports sample using Apache Maven. Requires Maven (3.6+) to be installed, with the working directory set to demo/samples/javascript. The command cleans and compiles the sources, then executes all target profiles, generating reports in demo/samples/javascript/target/reports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/javascript/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Sample Orders Fields for Mapping - Text\nDESCRIPTION: Lists necessary field names for mapping Order elements in the XML source to reporting fields. Provided as a developer reference to ensure correct field extraction via XPath expressions when setting up report templates.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nOrderID\\nCustomerID\\nEmployeeID\\nOrderDate\\nRequiredDate\\nShippedDate\\nShipVia\\nFreight\\nShipName\\nShipAddress\\nShipCity\\nShipPostalCode\\nShipCountry\n```\n\n----------------------------------------\n\nTITLE: Setting Accessibility Tag for Headings in JasperReports XML\nDESCRIPTION: Demonstrates how to set a custom property to mark a text element as a heading for accessibility purposes in JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/accessible/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<property name=\"net.sf.jasperreports.export.accessibility.tag\" value=\"h2\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiline Text Input Field in JasperReports JRXML\nDESCRIPTION: This JRXML snippet defines a text field element that will be rendered as an editable multiline textbox in the exported PDF. The 'net.sf.jasperreports.export.pdf.field.type' property is set to 'Text', and 'net.sf.jasperreports.export.pdf.field.text.multiline' is set to 'true' to enable multiline input. The initial text content is provided by the 'expression' tag, as no 'net.sf.jasperreports.export.pdf.field.value' property is specified. Appearance properties like forecolor, backcolor, alignment, and font are inherited from the text field element. 'net.sf.jasperreports.print.keep.full.text' ensures the entire text is processed.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/forms/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" positionType=\"Float\" mode=\"Opaque\"\n  x=\"250\" width=\"200\" height=\"45\" forecolor=\"#FFFF00\" backcolor=\"#0000FF\" hTextAlign=\"Right\" fontName=\"DejaVu Serif\" fontSize=\"24.0\">\n  <expression><![CDATA[\"This\\nis a multi\\nline text inside a multi line text field.\"]] ></expression>\n  <property name=\"net.sf.jasperreports.export.pdf.field.type\" value=\"Text\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.text.multiline\" value=\"true\"/>\n  <property name=\"net.sf.jasperreports.print.keep.full.text\" value=\"true\"/>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Abstract Methods Implemented by JRGroovyCompiler\nDESCRIPTION: Shows the abstract method signatures from the `JRAbstractCompiler` class that the `JRGroovyCompiler` must implement. These methods handle the core Groovy-specific compilation tasks, such as compiling units, checking the language, generating source code, and determining source file names.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprotected abstract String compileUnits(JRCompilationUnit[] units, String classpath, File tempDirFile) throws JRException;\nprotected abstract void checkLanguage(String language) throws JRException;\nprotected abstract JRCompilationSourceCode generateSourceCode(JRSourceCompileTask sourceTask) throws JRException;\nprotected abstract String getSourceFileName(String unitName);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Text Field Element\nDESCRIPTION: Configuration for a text field that processes HTML markup content from a parameter. Uses floating position and stretch height adjustment.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/markup/README.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"textField\" positionType=\"Float\" mode=\"Opaque\" y=\"240\" width=\"555\" height=\"110\" backcolor=\"#C0C0C0\" markup=\"html\" textAdjust=\"StretchHeight\" fontSize=\"16.0\">\n  <expression><![CDATA[$P{HtmlText}]] ></expression>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Compiling and Executing All Sample Reports using Maven - Bash\nDESCRIPTION: Runs a Maven build lifecycle for the sample project, cleaning, compiling, and executing all sample reports. Requires Maven, source code dependencies, and database server running. Output is a suite of sample reports generated in the output directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Running the JasperReports HTTP Data Adapter Sample with Maven\nDESCRIPTION: Maven command for compiling and executing the HTTP data adapter sample in JasperReports. The command generates all supported document types containing the sample report in the target/reports directory. Requires Apache Maven version 3.6 or later.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Record Delimiter Parameter in JasperReports (XML)\nDESCRIPTION: This XML snippet defines a report parameter controlling the CSV record delimiter (e.g., for Windows newlines) in JasperReports. The parameter can be referenced by field mapping or query execution logic. It leverages the Java String class, with the default value using carriage-return/line-feed, and is used when reading the CSV resource for row splitting.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/csvdatasource/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<parameter name=\\\"net.sf.jasperreports.csv.record.delimiter\\\" class=\\\"java.lang.String\\\">\\n  <defaultValueExpression><![CDATA[\\\"\\\\r\\\\n\\\"]] ></defaultValueExpression>\\n</parameter>\n```\n\n----------------------------------------\n\nTITLE: Default Font Properties in JasperReports Properties File\nDESCRIPTION: Shows the default font properties defined in the JasperReports properties file. These properties set the default font name, size, PDF font, encoding, and embedding settings.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/fonts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nnet.sf.jasperreports.default.font.name=SansSerif\nnet.sf.jasperreports.default.font.size=10\nnet.sf.jasperreports.default.pdf.font.name=Helvetica\nnet.sf.jasperreports.default.pdf.encoding=Cp1252\nnet.sf.jasperreports.default.pdf.embedded=false\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Radio Group Elements in JasperReports XML\nDESCRIPTION: This XML snippet demonstrates how to declare radio button options for interactive PDF forms within a JasperReports template. Grouping is achieved via the property 'net.sf.jasperreports.export.pdf.field.name', which must be consistent for all radio buttons in the group. Additional properties let you define the field type, checked style ('Check', 'Circle', 'Cross'), and initial checked state. Each element represents one radio button within the group; only one may have 'checked' set to 'true' for default selection. Requires JasperReports 6.11 or later. Inputs are element XML tags, and output is a rendered radio group in exported PDF. Elements cannot span pages or be made read-only.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/forms/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" positionType=\\\"Float\\\" mode=\\\"Opaque\\\" x=\\\"250\\\" width=\\\"25\\\" height=\\\"25\\\">\\n  <expression><![CDATA[\\\"This text does not matter in PDF export.\\\"]] ></expression>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.name\\\" value=\\\"MyRadioGroup\\\"/>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.type\\\" value=\\\"Radio\\\"/>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.check.type\\\" value=\\\"Check\\\"/>\\n  <box>\\n    <pen lineWidth=\\\"1.0\\\"/>\\n  </box>\\n</element>\\n...\\n<element kind=\\\"textField\\\" positionType=\\\"Float\\\" mode=\\\"Opaque\\\" x=\\\"250\\\" width=\\\"25\\\" height=\\\"25\\\">\\n  <expression><![CDATA[\\\"This text does not matter in PDF export.\\\"]] ></expression>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.name\\\" value=\\\"MyRadioGroup\\\"/>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.type\\\" value=\\\"Radio\\\"/>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.check.type\\\" value=\\\"Circle\\\"/>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.checked\\\" value=\\\"true\\\"/>\\n  <box>\\n    <pen lineWidth=\\\"1.0\\\"/>\\n  </box>\\n</element>\\n...\\n<element kind=\\\"textField\\\" positionType=\\\"Float\\\" mode=\\\"Opaque\\\" x=\\\"250\\\" width=\\\"25\\\" height=\\\"25\\\">\\n  <expression><![CDATA[\\\"This text does not matter in PDF export.\\\"]] ></expression>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.name\\\" value=\\\"MyRadioGroup\\\"/>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.type\\\" value=\\\"Radio\\\"/>\\n  <property name=\\\"net.sf.jasperreports.export.pdf.field.check.type\\\" value=\\\"Cross\\\"/>\\n  <box>\\n    <pen lineWidth=\\\"1.0\\\"/>\\n  </box>\\n</element>\\n...\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Inequality Clause with $X{NOTEQUAL} in JasperReports SQL\nDESCRIPTION: Generates a SQL inequality comparison clause based on a single report parameter value. Requires the column name and the parameter name. If the parameter value is not null, it constructs `<column_name> <> ?`. If the parameter value is null, it generates `<column_name> IS NOT NULL`.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n$X{NOTEQUAL, <column_name>, <parameter_name>}\n```\n\n----------------------------------------\n\nTITLE: Declaring JRCommonGraphicElement Methods - JasperReports - Java\nDESCRIPTION: This Java interface code documents the methods for managing pen style and fill properties of shapes in JasperReports. Required for shapes that extend the JRCommonGraphicElement interface, these methods facilitate retrieval and assignment of line and fill styles. Dependencies include JasperReports enums and custom pen classes.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/shapes/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic JRPen getLinePen();\\npublic FillEnum getFill();\\npublic FillEnum getOwnFill();\\npublic void setFill(FillEnum fillEnum);\n```\n\n----------------------------------------\n\nTITLE: Configuring Ant Target for Compiling Updated JRXMLs (XML)\nDESCRIPTION: Defines an Ant target named `compileUpdated` that depends on `javac` and `define-jrc`. It uses the JasperReports `<jrc>` task to compile JRXML files found in `./build/reports` into `.jasper` files, placing them in the same directory. It cleans previous `.jasper` files and includes all `**/*.jrxml` files from the source directory, using the `sample-classpath`.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antupdate/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"compileUpdated\" depends=\"javac, define-jrc\" description=\"Compiles the updated report designs.\"> \n  <mkdir dir=\"./build/reports\"/> \n  <delete dir=\"./build\">\n    <include name=\"**/*.jasper\"/>\n  </delete>\n  <jrc \n      srcdir=\"./build/reports\"\n      destdir=\"./build/reports\">\n    <classpath refid=\"sample-classpath\"/>\n    <include name=\"**/*.jrxml\"/>\n  </jrc>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Generating JasperReports Sample Documents\nDESCRIPTION: This Maven command compiles and executes the horizontal sample, generating all supported document types in the target/reports directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/horizontal/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining Default Style in JasperReports XML\nDESCRIPTION: Shows how to define a default style with font properties in a JasperReport XML file. This style sets the default font family, size, and text decoration attributes.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/fonts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<style name=\"Sans_Normal\" default=\"true\" fontName=\"DejaVu Sans\" fontSize=\"8\" bold=\"false\" italic=\"false\" underline=\"false\" strikeThrough=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Methods Implemented by JavaScriptCompiler\nDESCRIPTION: Shows method signatures from the `JRAbstractCompiler` class that the `JavaScriptCompiler` implements. These methods are responsible for loading the evaluator, compiling units, checking the language, generating source code, and determining source file names specific to JavaScript expressions.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprotected JREvaluator loadEvaluator(Serializable compileData, String unitName) throws JRException;\nprotected abstract String compileUnits(JRCompilationUnit[] units, String classpath, File tempDirFile) throws JRException;\nprotected abstract void checkLanguage(String language) throws JRException;\nprotected abstract JRCompilationSourceCode generateSourceCode(JRSourceCompileTask sourceTask) throws JRException;\nprotected abstract String getSourceFileName(String unitName);\n```\n\n----------------------------------------\n\nTITLE: JSONQL Query with Single-Line Comment\nDESCRIPTION: This multi-line JSONQL expression demonstrates the use of a single-line comment, starting with `//`. The comment `//(Freight > 200 && OrderDate *= \"1997\")` effectively disables the filtering condition that would normally be applied to the selected 'Orders'.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_10\n\nLANGUAGE: jsonql\nCODE:\n```\nNorthwind\n  .Customers\n  .Orders\n  .*\n  //(Freight > 200 && OrderDate *= \"1997\")\n```\n\n----------------------------------------\n\nTITLE: Implementing JRChartCustomizer Interface Method Signature in Java\nDESCRIPTION: This code shows the mandatory method signature `customize(JFreeChart chart, JRChart jasperChart)` that must be implemented when creating a class that implements the `net.sf.jasperreports.charts.JRChartCustomizer` interface in JasperReports. This method provides access to the generated JFreeChart object and the JasperReports chart component definition, allowing for post-creation modifications.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic void customize(JFreeChart chart, JRChart jasperChart);\n```\n\n----------------------------------------\n\nTITLE: Maven Command for Executing JasperReports Sample with CustomDataSource\nDESCRIPTION: Maven command for compiling and running the data source sample with the CustomDataSource implementation. It executes the Java application with specific arguments to compile the report, fill it with data from CustomDataSource, and view the resulting report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:java -Dexec.args=\"compile fill1 view\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Dynamic XLS Formula using <propertyExpression> in JasperReports JRXML\nDESCRIPTION: This JRXML snippet illustrates defining a dynamic Excel formula using the `<propertyExpression>` element for the `net.sf.jasperreports.export.xls.formula` property. The formula string (`\"A\" + 2 + \"-A\" + 3`) is constructed using a Java expression evaluated at runtime, allowing for dynamic cell references (resulting in \"A2-A3\"). A default value (0) is set via the `<expression>` tag for non-XLS formats.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsformula/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" ...>\n  <expression><![CDATA[0]] ></expression>\n  <propertyExpression name=\"net.sf.jasperreports.export.xls.formula\"><![CDATA[\"A\" + 2 + \"-A\" + 3]] ></propertyExpression>\n  ...\n</element>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Supported Attributes for the `<style>` Tag in JasperReports (XML)\nDESCRIPTION: This fragment lists the attributes supported by the JasperReports `<style>` tag. It visually demonstrates some attributes (size, bold, italic, underline, strikethrough, forecolor, backcolor) by applying the corresponding style directly to the attribute name within the text.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/styledtext/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\tHere is the list with the attributes supported by the <style isBold=\"true\">style</style> \n\ttag used to format the text content inside a styled text element: \n\n\tfontName \n\t<style size=\"32\">size</style>\n\t<style isBold=\"true\">isBold</style>\n\t<style isItalic=\"true\">isItalic</style>\n\t<style isUnderline=\"true\">isUnderline</style>\n\t<style isStrikeThrough=\"true\">isStrikeThrough</style>\n\tpdfFontName \n\tpdfEncoding \n\tisPdfEmbedded \n\t<style forecolor=\"red\">forecolor</style>\n\t<style backcolor=\"blue\" forecolor=\"white\" isBold=\"true\">backcolor</style>\n```\n\n----------------------------------------\n\nTITLE: Building and Running JasperReports Chart Sample using Maven\nDESCRIPTION: This shell command utilizes Maven to clean the project, compile the source code, and execute the chart samples (`exec:exec@all`). It generates various report documents (in formats like PDF, HTML, etc.) containing the sample charts in the `demo/samples/charts/target/reports` directory. This command should be run in the `demo/samples/charts` directory after the HSQLDB server has been started.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum using Groovy Expression in JRXML\nDESCRIPTION: Shows how to calculate the sum of two `Double` report parameters (`$P{A}`, `$P{B}`) using a simplified Groovy expression (`$P{A} + $P{B}`) within an `<expression>` tag in JRXML. Groovy transparently handles object creation, autoboxing, and unboxing, simplifying the expression syntax.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n  <expression><![CDATA[$P{A} + $P{B}]]></expression>\n```\n\n----------------------------------------\n\nTITLE: Maven Execution Command\nDESCRIPTION: Command to compile and execute the JSON data source sample using Maven.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsondatasource/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Setting ignorePagination in JasperReport XML\nDESCRIPTION: XML configuration to set the ignorePagination flag in the JasperReport definition to suppress page breaks.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/nopagebreak/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<jasperReport ... ignorePagination=\"true\" ...>\n...\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Defining Movie Fields in MoviesDataset with XPath in JasperReports XML\nDESCRIPTION: Configuration for multiple fields in the MoviesDataset that extract movie details using XPath expressions. Fields include title (String), year (Integer), type (String), and poster (String), each with a property that specifies the corresponding XPath expression.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"title\" class=\"java.lang.String\">\n  <property name=\"net.sf.jasperreports.xpath.field.expression\" value=\"@title\"/>\n</field>\n<field name=\"year\" class=\"java.lang.Integer\">\n  <property name=\"net.sf.jasperreports.xpath.field.expression\" value=\"@year\"/>\n</field>\n<field name=\"type\" class=\"java.lang.String\">\n  <property name=\"net.sf.jasperreports.xpath.field.expression\" value=\"@type\"/>\n</field>\n<field name=\"poster\" class=\"java.lang.String\">\n  <property name=\"net.sf.jasperreports.xpath.field.expression\" value=\"@poster\"/>\n</field>\n```\n\n----------------------------------------\n\nTITLE: JasperReports Debug Logging Output for SQL Parameter Substitution (Log Snippet)\nDESCRIPTION: This snippet displays debug logs showing the resolved SQL query and bound parameters when running a JasperReports report with a NOT IN clause and a collection parameter. It demonstrates how parameter values are substituted at runtime. The dependencies are proper logging configuration and a running JasperReports environment. Inputs are provided as JDBC parameters and outputs are the debug log lines showing the resolved SQL and parameter values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n    2010-03-11 13:25:23,300 DEBUG JRJdbcQueryExecuter,http-8080-4:155 - SQL query string:\n      SELECT Id, FirstName, LastName, Street, City, (Id < 30) as ConditionalField FROM Address WHERE City NOT IN (?, ?) ORDER BY LastName\n    2010-03-11 13:25:23,302 DEBUG JRJdbcQueryExecuter,http-8080-4:303 - Parameter #1 (ExcludedCities[0] of type java.lang.String): New York\n    2010-03-11 13:25:23,302 DEBUG JRJdbcQueryExecuter,http-8080-4:303 - Parameter #2 (ExcludedCities[1] of type java.lang.String): Boston\n```\n\n----------------------------------------\n\nTITLE: Implementing Subreport Part in JRXML\nDESCRIPTION: Demonstrates how to define a subreport part with template reference and parameter passing\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/book/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<part>\n  <partNameExpression><![CDATA[\"ReportPart1\"]] ></partNameExpression>\n  <component kind=\"subreportPart\" usingCache=\"true\">\n    <expression><![CDATA[\"ReportPart1.jasper\"]] ></expression>\n    <parameter name=\"REPORT_CONNECTION\">\n      <expression><![CDATA[$P{REPORT_CONNECTION}]] ></expression>\n    </parameter>\n  </component>\n</part>\n```\n\n----------------------------------------\n\nTITLE: Executing Address and Document Join Query via HQL - JasperReports XML\nDESCRIPTION: HQL query for JasperReports that retrieves addresses and document data via a join, filtering cities not in the CityFilter parameter. Expects the CityFilter parameter to be supplied as a java.util.List and is used in a .jrxml report definition. Returns address data combined with nested document information, omitting addresses lacking related documents.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n  <parameter name=\\\"CityFilter\\\" class=\\\"java.util.List\\\"/>\\n  <query language=\\\"hql\\\">\\n    <![CDATA[select address as address, document.id as documentId, document.total as documentTotal\\n      from Address as address join address.documents as document\\n      where city not in ($P{CityFilter})\\n      order by address.city, address.lastName, address.firstName, address.id]] >\\n  </query>\n```\n\n----------------------------------------\n\nTITLE: Generating Reports with Maven - JasperReports Shell\nDESCRIPTION: Provides a shell command used to build and execute all relevant JasperReports function samples using Maven. This command, when run from the proper sample directory, will clean, compile, and run the example, producing report documents in the target output directory. Apache Maven version 3.6 or later must be installed. The command must be executed from the 'demo/samples/functions' folder within the JasperReports source tree.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/functions/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Creating a Remote Anchor Hyperlink TextField Element - JasperReports XML\nDESCRIPTION: Shows how to create a hyperlink in a textField element that targets a named anchor in a different (remote) PDF file, using both <hyperlinkReferenceExpression> and <hyperlinkAnchorExpression>. linkType=RemoteAnchor is used. The referenced file (e.g., HyperlinkReport.pdf) must exist at the specified path; outputs a cross-document anchor link.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" x=\\\"5\\\" y=\\\"125\\\" width=\\\"400\\\" height=\\\"15\\\" linkType=\\\"RemoteAnchor\\\">\\n  <expression><![CDATA[\\\"  >> Click here to go to another PDF file (in fact, we use the same file).\\\"]] ></expression>\\n  <hyperlinkReferenceExpression><![CDATA[\\\"./HyperlinkReport.pdf\\\"]] ></hyperlinkReferenceExpression>\\n  <hyperlinkAnchorExpression><![CDATA[\\\"title\\\"]] ></hyperlinkAnchorExpression>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Implementing Alternate Row Colors in JasperReports Crosstabs\nDESCRIPTION: XML code demonstrating how to create conditional styles for alternating row colors in a crosstab using the ROW_COUNT variable. The style applies a gray background color to even-numbered rows.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/crosstabs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<style name=\"RowStyle\" default=\"false\" mode=\"Opaque\">\n  <conditionalStyle>\n    <conditionExpression><![CDATA[$V{ROW_COUNT} % 2 == 0]] ></conditionExpression>\n    <style backcolor=\"#E0E0E0\"/>\n  </conditionalStyle>\n</style>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<style name=\"ColumnStyle\" default=\"false\" mode=\"Opaque\">\n  <conditionalStyle>\n    <conditionExpression><![CDATA[$V{COLUMN_COUNT} % 2 == 0]] ></conditionExpression>\n    <style backcolor=\"#E0E0E0\"/>\n  </conditionalStyle>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Messages in Properties Files (Java)\nDESCRIPTION: Shows how to define localized messages in properties files for different languages. The example includes entries for English and Portuguese.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/i18n/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\ntext.message=The program picked up {0} as a random number.\n```\n\nLANGUAGE: Properties\nCODE:\n```\ntext.message=O programa escolheu acima {0} como um número aleatório.\n```\n\n----------------------------------------\n\nTITLE: Spring Bean Configuration for Export Handlers\nDESCRIPTION: XML configuration for registering export handlers using Spring framework. Defines handler mappings for different generic element types and output formats.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/genericelement/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"ohlohExportHandlerBundle\"\n    class=\"net.sf.jasperreports.engine.export.DefaultElementHandlerBundle\">\n  <property name=\"namespace\" value=\"http://jasperreports.sourceforge.net/jasperreports/ohloh\"/>\n  <property name=\"elementHandlers\">\n    <map>\n      <entry key=\"languages\">\n        <map>\n          <entry key=\"net.sf.jasperreports.html\">\n            <ref bean=\"languagesHtmlExportHandler\"/>\n          </entry>\n        </map>\n      </entry>\n      <entry key=\"stats\">\n        <map>\n          <entry key=\"net.sf.jasperreports.html\">\n            <ref bean=\"statsHtmlExportHandler\"/>\n          </entry>\n        </map>\n      </entry>\n    </map>\n  </property>\n</bean>\n\n<bean id=\"baseHtmlExportHandler\" class=\"net.sf.jasperreports.ohloh.OhlohWidgetHtmlHandler\"\n    abstract=\"true\">\n  <property name=\"projectIDParameter\" value=\"ProjectID\"/>\n</bean>\n\n<bean id=\"languagesHtmlExportHandler\" class=\"net.sf.jasperreports.ohloh.OhlohWidgetHtmlHandler\"\n    parent=\"baseHtmlExportHandler\">\n  <property name=\"widgetName\" value=\"project_languages\"/>\n</bean>\n\n<bean id=\"statsHtmlExportHandler\" class=\"net.sf.jasperreports.ohloh.OhlohWidgetHtmlHandler\"\n    parent=\"baseHtmlExportHandler\">\n  <property name=\"widgetName\" value=\"project_basic_stats\"/>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Image in JasperReports XML\nDESCRIPTION: This snippet demonstrates how to include a basic image in a JasperReports template. It loads an image file 'dukesign.jpg' from the current folder at export time, with error handling set to 'Error'.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/images/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"image\" width=\"150\" height=\"40\" onErrorType=\"Error\">\n  <expression><![CDATA[\"dukesign.jpg\"]] ></expression>\n  <box>\n    <pen lineWidth=\"0.5\"/>\n  </box>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Setting 'totalResults' Field with a JSON Query - JasperReports XML\nDESCRIPTION: This JRXML code demonstrates how to set up a blank JSONQL query and bind the 'totalResults' report field to the 'totalResults' property in the JSON API response. This approach enables JasperReports to retrieve summary information like pagination counts for display or calculations. Requires proper field/property case mapping and an upstream JSONHTTPDataAdapter.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<query language=\\\"jsonql\\\">\\n  <![CDATA[]] >\\n</query>\\n<field name=\\\"totalResults\\\" class=\\\"java.lang.Integer\\\">\\n  <property name=\\\"net.sf.jasperreports.jsonql.field.expression\\\" value=\\\"totalResults\\\"/>\\n</field>\n```\n\n----------------------------------------\n\nTITLE: Running Maven Commands to Generate Excel Metadata Export in JasperReports\nDESCRIPTION: Shell command to compile and execute the report generation process that produces Excel metadata exports. The output files include both single sheet and multi-sheet XLSX documents with proper formatting.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n>mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Anchor Hyperlink TextField Element - JasperReports XML\nDESCRIPTION: Defines a textField XML element that creates a hyperlink to a local anchor within the same report using the <hyperlinkAnchorExpression> tag and the linkType attribute. Intended for in-report navigation. Requires a matching anchorNameExpression existing elsewhere in the report. Outputs an internal clickable link in rendered documents.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" x=\\\"5\\\" y=\\\"35\\\" width=\\\"300\\\" height=\\\"15\\\" forecolor=\\\"#FF0000\\\" linkType=\\\"LocalAnchor\\\">\\n  <expression><![CDATA[\\\"  >> Click here to go to the title section.\\\"]] ></expression>\\n  <hyperlinkAnchorExpression><![CDATA[\\\"title\\\"]] ></hyperlinkAnchorExpression>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Filling Report with XLS Data Source\nDESCRIPTION: Method to fill a JasperReport using an XLS data source. Demonstrates parameter setup including report title, data file reference, and state filtering.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldatasource/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void fill1() throws JRException\n{\n  long start = System.currentTimeMillis();\n  //Preparing parameters\n  Map<String, Object> parameters = new HashMap<String, Object>();\n  parameters.put(\"ReportTitle\", \"Address Report\");\n  parameters.put(\"DataFile\", \"MultisheetXlsDataSource.data.xls - XLS data source\");\n  Set<String> states = new HashSet<String>();\n  states.add(\"Active\");\n  states.add(\"Trial\");\n  parameters.put(\"IncludedStates\", states);\n\n  JasperFillManager.fillReportToFile(\"target/reports/ExcelDataSourceReport.jasper\", parameters, getDataSource(\"data/MultisheetXlsDataSource.data.xls\"));\n  System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSONQL Query Expression Structure\nDESCRIPTION: This snippet shows a sample JSONQL expression demonstrating chained members. It traverses a JSON structure starting from 'Northwind', moving to 'Customers', then 'Orders', and finally applies a filter `(Freight > 200 && OrderDate *= \"1997\")` to select all elements (`.*`) within matching orders. The filter selects orders where the 'Freight' value is greater than 200 AND the 'OrderDate' string contains \"1997\".\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonql\nCODE:\n```\nNorthwind.Customers.Orders.*(Freight > 200 && OrderDate *= \"1997\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Report Style Properties\nDESCRIPTION: Java code to modify font size and style properties of the first report style.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/alterdesign/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nJRStyle style = jasperReport.getStyles()[0];\nstyle.setFontSize(16f);\nstyle.setItalic(Boolean.TRUE);\n```\n\n----------------------------------------\n\nTITLE: Implementing CountryGroup in JasperReports for Secondary Grouping\nDESCRIPTION: Definition of the CountryGroup that further organizes data by individual country names within the FirstLetterGroup. Includes header and footer with export-specific properties, statistics calculations, and formatting options.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<group name=\"CountryGroup\" reprintHeaderOnEachPage=\"true\">\n  <expression><![CDATA[$F{ShipCountry}]] ></expression>\n  <groupHeader>\n  <band height=\"15\">\n    <element kind=\"line\"y=\"14\" width=\"270\" height=\"1\">\n      <property name=\"net.sf.jasperreports.export.xls.repeat.value\" value=\"true\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"LineShape\"/>\n    </element>\n    <element kind=\"textField\" x=\"10\" y=\"2\" width=\"150\" height=\"11\" style=\"Sans_Bold\">\n      <expression><![CDATA[$F{ShipCountry}]] ></expression>\n      <property name=\"net.sf.jasperreports.export.csv.column.name\" value=\"ShipCountry\"/>\n      <property name=\"net.sf.jasperreports.export.csv.repeat.value\" value=\"true\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.name\" value=\"ShipCountry\"/>\n      <property name=\"net.sf.jasperreports.export.xls.column.width.metadata\" value=\"100\"/>\n      <property name=\"net.sf.jasperreports.export.xls.repeat.value\" value=\"true\"/>\n      <property name=\"net.sf.jasperreports.export.json.path\" value=\"ShipCountry\"/>\n      <property name=\"net.sf.jasperreports.export.json.repeat.value\" value=\"true\"/>\n    </element>\n    <element kind=\"textField\" ... evaluationTime=\"Group\" evaluationGroup=\"CountryGroup\" style=\"Sans_Bold\">\n      <expression><![CDATA[$V{DateHighestCountryGroup}]] ></expression>\n      <patternExpression><![CDATA[\"EEE, MMM d, yyyy\"]] ></patternExpression>\n    </element>\n  </band>\n  </groupHeader>\n  <groupFooter>\n  <band height=\"15\">\n    <element kind=\"staticText\" mode=\"Opaque\" width=\"45\" height=\"11\" backcolor=\"#C0C0C0\" hTextAlign=\"Right\" style=\"Sans_Bold\">\n      <text><![CDATA[Count :]] ></text>\n    </element>\n    <element kind=\"textField\" mode=\"Opaque\" x=\"45\" width=\"25\" height=\"11\" backcolor=\"#C0C0C0\" hTextAlign=\"Right\" style=\"Sans_Bold\">\n      <expression><![CDATA[$V{CountryGroup_COUNT}]] ></expression>\n    </element>\n    <element kind=\"staticText\" mode=\"Opaque\" x=\"70\" width=\"100\" height=\"11\" backcolor=\"#C0C0C0\" hTextAlign=\"Right\" style=\"Sans_Bold\">\n      <text><![CDATA[Total :]] ></text>\n    </element>\n    <element kind=\"textField\" mode=\"Opaque\" x=\"170\" width=\"60\" height=\"11\" backcolor=\"#C0C0C0\" hTextAlign=\"Right\" pattern=\"0.00\" style=\"Sans_Bold\">\n      <expression><![CDATA[$V{FreightSumCountryGroup}]] ></expression>\n    </element>\n    <element kind=\"textField\" mode=\"Opaque\" x=\"230\" width=\"40\" height=\"11\" backcolor=\"#C0C0C0\" hTextAlign=\"Right\" evaluationTime=\"Auto\" style=\"Sans_Bold\">\n      <expression><![CDATA[msg(\"{0,number,0.00}%\", 100d * $V{FreightSumCountryGroup} / $V{FreightSumFirstLetterGroup})]] ></expression>\n      </element>\n    </band>\n  </groupFooter>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Executing Ant Test and Compile Targets (Shell)\nDESCRIPTION: Command-line instruction to execute both the `test` and `compileUpdated` targets defined in the Ant `build.xml` file. This first updates the JRXML reports (via the `test` target's dependencies) and then compiles the updated reports into `.jasper` files using the `compileUpdated` target. Requires Apache Ant.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antupdate/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> ant test compileUpdated\n```\n\n----------------------------------------\n\nTITLE: Defining HQL Query in JasperReports XML\nDESCRIPTION: Example of defining a Hibernate Query Language (HQL) query in a JasperReport template, showing parameter usage and query structure.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <query language=\"hql\">\n    <![CDATA[from Address address where city not in ($P{CityFilter}) order by $P!{OrderClause}]] >\n  </query>\n```\n\n----------------------------------------\n\nTITLE: Order Field Mappings and Query\nDESCRIPTION: Defines the query and field mappings for order data, including date, shipping, and financial information.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsondatasource/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<query language=\"json\"><![CDATA[Northwind.Orders(CustomerID == $P{CustomerID})]] ></query>\nFrom each order we collect the following properties:\n<field name=\"Id\" class=\"java.lang.String\">\n  <property name=\"net.sf.jasperreports.json.field.expression\" value=\"OrderID\"/>\n</field>\n<field name=\"OrderDate\" class=\"java.util.Date\">\n  <property name=\"net.sf.jasperreports.json.field.expression\" value=\"OrderDate\"/>\n</field>\n<field name=\"ShipCity\" class=\"java.lang.String\">\n  <property name=\"net.sf.jasperreports.json.field.expression\" value=\"ShipCity\"/>\n</field>\n<field name=\"Freight\" class=\"java.lang.Float\">\n  <property name=\"net.sf.jasperreports.json.field.expression\" value=\"Freight\"/>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Conditional Style in JasperReports XML\nDESCRIPTION: This example shows a conditional style definition that inherits from a parent style. The OrderIdStyle changes text color to red and applies bold formatting when the OrderID is divisible by 10.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n  <style name=\"Sans_Normal\" fontName=\"DejaVu Sans\" fontSize=\"8.0\" default=\"true\" bold=\"false\" italic=\"false\" underline=\"false\" strikeThrough=\"false\"/>\n  ...\n<style name=\"OrderIdStyle\" style=\"Sans_Normal\">\n  <conditionalStyle forecolor=\"#FF0000\" bold=\"true\">\n    <conditionExpression><![CDATA[$F{OrderID} % 10 == 0]] ></conditionExpression>\n  </conditionalStyle>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled Markup in Static Text Element\nDESCRIPTION: Example of a static text element using styled markup to format text with different styles including bold, italic, underline, colors and hyperlinks.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/markup/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"staticText\" mode=\"Opaque\" width=\"555\" height=\"110\" backcolor=\"#C0C0C0\" markup=\"styled\" fontSize=\"16.0\"> \n  <text><![CDATA[This is a <style isBold=\"true\" isItalic=\"true\" isUnderline=\"true\">static text</style> element containing \n    styled text. <style backcolor=\"yellow\" isBold=\"true\" isItalic=\"true\">Styled text</style> elements are introduced by setting the \n    <style forecolor=\"blue\" isItalic=\"true\">markup</style> attribute available for the \n    <style isBold=\"true\" forecolor=\"magenta\">textElement</style> \n    tag to <style forecolor=\"red\" isItalic=\"true\">styled</style> and by formatting the text content using \n    nested <style isBold=\"true\" forecolor=\"green\">style</style> tags and simple HTML tags, \n    including <a type=\"Reference\" href=\"http://jasperreports.sf.net\" target=\"Blank\"> \n    <style isItalic=\"true\" isBold=\"true\" isUnderline=\"true\" forecolor=\"yellow\">hyperlinks</style></a>.]] ></text>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports Virtualizer Sample with Maven\nDESCRIPTION: This shell command uses Apache Maven (version 3.6 or later required) to build and execute the JasperReports virtualizer sample application. It first cleans the project (`clean`), then compiles the source code (`compile`), and finally executes the application (`exec:exec@all`) which generates sample reports using virtualization. This command should be run from the `demo/samples/virtualizer` directory within the JasperReports source project.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/virtualizer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining enum type in Java 1.5\nDESCRIPTION: Shows how to define a simple enumerated type in Java 1.5.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/java1.5/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npublic enum Greeting { bye, day }\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports Sample with Maven - Shell\nDESCRIPTION: This shell snippet provides the Maven command to start the HSQLDB server bundled with JasperReports, a prerequisite for running the sample report. Requires Maven 3.6+ installed and working. No code modification or additional parameters needed. Input: run from the 'demo/hsqldb' directory. Output: launches the HSQLDB database server needed for demo report execution.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/scriptlet/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Customer Records Dataset in CSV Format\nDESCRIPTION: A sample dataset containing customer information with fields for city, ID, name, address, and status. Each line represents a single customer record in comma-separated values format with fields enclosed in double quotes.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/csvdatasource/data/CsvDataSource.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n\"Dallas\",47,\"Janet Fuller\",\"445 Upland Pl.\",\"Trial\"\n\"Lyon\",38,\"Andrew Heiniger\",\"347 College Av.\",\"Active\"\n\"Dallas\",43,\"Susanne Smith\",\"2 Upland Pl.\",\"Active\"\n\"Berne\",22,\"Bill Ott\",\"250 - 20th Ave.\",\"Active\"\n\"Boston\",32,\"Michael Ott\",\"339 College Av.\",\"Trial\"\n\"Dallas\",4,\"Sylvia Ringer\",\"365 College Av.\",\"Active\"\n\"Boston\",23,\"Julia Heiniger\",\"358 College Av.\",\"Active\"\n\"Chicago\",39,\"Mary Karsen\",\"202 College Av.\",\"Active\"\n\"Dallas\",40,\"Susanne Miller\",\"440 - 20th Ave.\",\"Trial\"\n\"Berne\",9,\"James Schneider\",\"277 Seventh Av.\",\"Active\"\n\"Dallas\",36,\"John Steel\",\"276 Upland Pl.\",\"Suspended\"\n\"Chicago\",35,\"George Karsen\",\"412 College Av.\",\"Suspended\"\n\"Dallas\",37,\"Michael Clancy\",\"19 Seventh Av.\",\"Deleted\"\n\"Lyon\",2,\"Anne Miller\",\"20 Upland Pl.\",\"Active\"\n\"Dallas\",0,\"Laura Steel\",\"429 Seventh Av.\",\"Active\"\n\"Lyon\",28,\"Susanne White\",\"74 - 20th Ave.\",\"Deleted\"\n\"Paris\",5,\"Laura Miller\",\"294 Seventh Av.\",\"Active\"\n\"Lyon\",17,\"Laura Ott\",\"443 Seventh Av.\",\"Active\"\n\"New York\",46,\"Andrew May\",\"172 Seventh Av.\",\"Active\"\n\"New York\",44,\"Sylvia Ott\",\"361 College Av.\",\"Active\"\n\"Dallas\",19,\"Susanne Heiniger\",\"86 - 20th Ave.\",\"Active\"\n\"Chicago\",11,\"Julia White\",\"412 Upland Pl.\",\"Active\"\n\"Dallas\",10,\"Anne Fuller\",\"135 Upland Pl.\",\"Active\"\n\"New York\",41,\"Bill King\",\"546 College Av.\",\"Deleted\"\n\"Oslo\",45,\"Janet May\",\"396 Seventh Av.\",\"Active\"\n\"Paris\",18,\"Sylvia Fuller\",\"158 - 20th Ave.\",\"Trial\"\n\"San Francisco\",48,\"Robert White\",\"549 Seventh Av.\",\"Active\"\n\"Paris\",25,\"Sylvia Steel\",\"269 College Av.\",\"Suspended\"\n\"San Francisco\",7,\"James Peterson\",\"231 Upland Pl.\",\"Active\"\n\"Oslo\",42,\"Robert Ott\",\"503 Seventh Av.\",\"Trial\"\n```\n\n----------------------------------------\n\nTITLE: Mapping the Address Entity to the ADDRESS Table - XML\nDESCRIPTION: Maps the Address Java class to the ADDRESS table using Hibernate XML. Defines fields, primary key, and a one-to-many set relationship to Document. Requires Hibernate mapping schema; input is Java class and DB columns, output is the ORM mapping.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n  <hibernate-mapping>\\n\\n  <class name=\\\"Address\\\" table=\\\"ADDRESS\\\">\\n    <id name=\\\"id\\\" column=\\\"ID\\\">\\n      <generator class=\\\"increment\\\"/>\\n    </id>\\n\\n    <property name=\\\"firstName\\\" column=\\\"FIRSTNAME\\\"/>\\n    <property name=\\\"lastName\\\" column=\\\"LASTNAME\\\"/>\\n    <property name=\\\"street\\\" column=\\\"STREET\\\"/>\\n    <property name=\\\"city\\\" column=\\\"CITY\\\"/>\\n\\n    <set name=\\\"documents\\\" inverse=\\\"true\\\">\\n      <key column=\\\"ADDRESSID\\\"/>\\n      <one-to-many class=\\\"Document\\\"/>\\n    </set>\\n  </class>\\n\\n  </hibernate-mapping>\n```\n\n----------------------------------------\n\nTITLE: Defining Image Element for Chart Output in JasperReports - XML\nDESCRIPTION: This XML snippet defines an image element within a JasperReports JRXML template, specifying attributes for positioning, scaling, alignment, and error handling. The element uses an expression to dynamically render an image from the ChartImage variable, which expects a java.awt.Image object. This setup enables JasperReports to display charts or other images computed at runtime within report pages, with onErrorType determining behavior if image rendering fails.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xchart/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"image\\\" y=\\\"70\\\" width=\\\"515\\\" height=\\\"400\\\" scaleImage=\\\"Clip\\\" hImageAlign=\\\"Center\\\" onErrorType=\\\"Error\\\">\\n  <expression><![CDATA[$V{ChartImage}]] ></expression>\\n</element>\\n\n```\n\n----------------------------------------\n\nTITLE: Starting HSQLDB Server using Maven - Bash\nDESCRIPTION: Shell command for starting the HSQLDB server included with JasperReports via Maven. To be executed from demo/hsqldb directory after Maven installation (version 3.6 or higher). Initializes the database server needed for the Hibernate samples.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Equivalent Sum Expression Using Java Syntax - JasperReports XML\nDESCRIPTION: Provides the equivalent to the JavaScript sum expression but written in explicit Java for older JDKs. Here, Double.valueOf and doubleValue are used to extract the primitive values from objects and sum them, before re-boxing the result. Required for compatibility with legacy environments or when JavaScript expressions are not available; to be placed in an <expression> element.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/javascript/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<expression><![CDATA[Double.valueOf($P{A}.doubleValue() + $P{B}.doubleValue())]] ></expression>\n```\n\n----------------------------------------\n\nTITLE: Running the JasperReports XLS Formula Sample using Maven\nDESCRIPTION: This shell command uses Apache Maven to build and run the JasperReports XLS formula sample project. It first cleans the project (`clean`), then compiles the source code (`compile`), and finally executes the configured execution goal (`exec:exec@all`), which generates the sample reports in various formats within the `demo/samples/xlsformula/target/reports` directory. Requires Maven 3.6+ installed.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsformula/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Handling Special Character Entities in JasperReports Styled Text (XML)\nDESCRIPTION: This snippet demonstrates how standard XML/HTML character entities are handled within JasperReports styled text. It shows the correct way to represent ampersand (`&amp;`), less than (`&lt;`), greater than (`&gt;`), quote (`&quot;`), and apostrophe (`&apos;`) to ensure they are displayed correctly rather than being interpreted as markup.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/styledtext/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n\tampersand &amp; less &lt; greater &gt; quote &quot; apostrophe &apos;\n\tampersand &amp; less &lt; greater &gt; quote &quot; apostrophe &apos;\n```\n\n----------------------------------------\n\nTITLE: Implementing next() and getFieldValue() Methods for CustomDataSource in Java\nDESCRIPTION: Implementation of the required methods for JasperReports custom data source. The next() method advances to the next record, while getFieldValue() retrieves data for specific fields based on their names (the_city, id, name, and street).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n public boolean next() throws JRException\n {\n  index++;\n  return (index < data.length);\n }\n\n public Object getFieldValue(JRField field) throws JRException\n {\n  Object value = null;\n  String fieldName = field.getName();\n\n  if (\"the_city\".equals(fieldName))\n  {\n   value = data[index][0];\n  }\n  else if (\"id\".equals(fieldName))\n  {\n   value = data[index][1];\n  }\n  else if (\"name\".equals(fieldName))\n  {\n   value = data[index][2];\n  }\n  else if (\"street\".equals(fieldName))\n  {\n   value = data[index][3];\n  }\n\n  return value;\n }\n```\n\n----------------------------------------\n\nTITLE: Declaring integer parameters in JasperReports (XML)\nDESCRIPTION: Shows how to declare integer parameters in a JasperReports template using Java 1.5 autoboxing.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/java1.5/README.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<parameter name=\"A\" class=\"java.lang.Integer\">\n  <defaultValueExpression><![CDATA[3]]></defaultValueExpression>\n</parameter>\n<parameter name=\"B\" class=\"java.lang.Integer\">\n  <defaultValueExpression><![CDATA[5]]></defaultValueExpression>\n</parameter>\n```\n\n----------------------------------------\n\nTITLE: Defining Page Parameter for HTTP Request - JasperReports XML\nDESCRIPTION: This snippet defines a dataset parameter 'page' for API pagination, binding it as an HTTP URL parameter for the data adapter. No default value is assigned, so the value is expected at runtime. Proper configuration is necessary to support correct paging via the URL and ensure accurate report data.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n <parameter name=\\\"page\\\" class=\\\"java.lang.Integer\\\">\\n   <property name=\\\"net.sf.jasperreports.http.data.url.parameter\\\"/>\\n </parameter>\n```\n\n----------------------------------------\n\nTITLE: Running Sample Reports with Prerequisite Services - Shell\nDESCRIPTION: Invokes all or individual samples while ensuring prerequisite services are started, using Maven's 'exec:exec@all' execution goal. This command is a one-stop execution for sample projects relying on extra background services. Should be run from either individual sample or samples collection folders.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Using Absolute JSONQL in JasperReports Field Property Expression\nDESCRIPTION: This XML snippet defines a JasperReports field named `FirstCustomerCompanyName`. Instead of relying on the main dataset query's context, it uses an absolute JSONQL path specified within the `net.sf.jasperreports.jsonql.field.expression` property. The expression `\"$.Northwind.Customers[0][\\\"Company Name\\\"]\"` directly fetches the company name of the first customer from the root of the JSON data source.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"FirstCustomerCompanyName\" class=\"java.lang.String\">\n  <description><![CDATA[ The company name of the first customer]] ></description>\n  <propertyExpression name=\"net.sf.jasperreports.jsonql.field.expression\"><![CDATA[ \"$.Northwind.Customers[0][\\\"Company Name\\\"]\" ]] ></propertyExpression>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Starting HSQLDB Server for JasperReports Sample - Shell\nDESCRIPTION: Shows the command to initialize the bundled HSQLDB database server required for the JasperReports EJB QL/JPA sample environment. The user runs this command in the 'demo/hsqldb' directory using a shell. The server must stay running in the background to provide the data layer for the sample application's reports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql-j2ee/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Mapping the Document Entity to the DOCUMENT Table - XML\nDESCRIPTION: Defines ORM mapping of the Document class to the DOCUMENT table. Specifies the fields, primary key, and a many-to-one relationship to Address. Relies on Hibernate XML mapping and the Address mapping to resolve references.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <hibernate-mapping>\\n\\n    <class name=\\\"Document\\\" table=\\\"DOCUMENT\\\">\\n      <id name=\\\"id\\\" column=\\\"ID\\\">\\n        <generator class=\\\"increment\\\"/>\\n      </id>\\n\\n      <many-to-one name=\\\"address\\\" column=\\\"ADDRESSID\\\"/>\\n\\n      <property name=\\\"total\\\" column=\\\"TOTAL\\\"/>\\n    </class>\\n\\n  </hibernate-mapping>\n```\n\n----------------------------------------\n\nTITLE: Defining a Style with Paragraph Indentation in XML\nDESCRIPTION: Example of defining a style with paragraph indentation properties including first line indent, left indent, and right indent values, along with box styling.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n  <style name=\"indentStyle\" mode=\"Transparent\" backcolor=\"#FFFFFF\" style=\"myDefault\">\n    <paragraph firstLineIndent=\"20\" leftIndent=\"35\" rightIndent=\"20\" style=\"myDefault\"/>\n    <box style=\"myDefault\">\n      <pen lineWidth=\"1.0\"/>\n    </box>\n  </style>\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Report Formats Using Maven - Shell\nDESCRIPTION: Runs multiple export methods in sequence by providing multiple arguments to Maven's 'exec:java' goal, enabling export in PDF and XLS formats. Assumes the sample application main class supports multiple method invocation via command-line arguments. Produces reports in each specified format.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java -Dexec.args=\\\"pdf xls\\\"\n```\n\n----------------------------------------\n\nTITLE: JasperReports Group XML Structure\nDESCRIPTION: XML structure showing the key components of a JasperReports group including group expression, header and footer sections. Groups are used to organize data and perform aggregate calculations.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<group>\n  <groupExpression><!-- grouping criteria --></groupExpression>\n  <groupHeader>\n    <!-- header content -->\n  </groupHeader>\n  <groupFooter>\n    <!-- footer content -->\n  </groupFooter>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Modifying SQL with Direct Parameter Injection (JasperReports/XML)\nDESCRIPTION: This snippet demonstrates using the $P!{} syntax inside a JRXML <query> element, allowing report authors to inject syntax or entire clauses (like ORDER BY) dynamically based on parameter values. The value is inserted verbatim, so caution is required to avoid SQL errors or injection. Parameters must be correctly defined in the template and provided at runtime. Inputs include runtime text; output is a SQL query with user-defined syntax sections.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <query>\\n    <![CDATA[SELECT Id, FirstName, LastName, Street, City, (Id < 30) as ConditionalField\\n      FROM Address ORDER BY $P!{OrderClause}]] >\\n  </query>\n```\n\n----------------------------------------\n\nTITLE: Running HSQLDB Server for JasperReports Sample\nDESCRIPTION: This command starts the HSQLDB server shipped with the JasperReports distribution package. It should be run in the demo/hsqldb directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/horizontal/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports PDF Encryption Sample with Maven\nDESCRIPTION: Maven command to compile and execute the PDF encryption sample, generating report documents in the target directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/pdfencrypt/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining ChartImage Variable in JasperReports Template - XML\nDESCRIPTION: This snippet introduces a variable named ChartImage of type java.awt.Image in a JRXML report definition, using the System calculation type. It enables storage and subsequent retrieval of images (specifically charts generated at runtime) within a report. The variable must be populated by a report scriptlet or similar mechanism to function as intended.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xchart/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<variable name=\\\"ChartImage\\\" class=\\\"java.awt.Image\\\" calculation=\\\"System\\\"/>\\n\n```\n\n----------------------------------------\n\nTITLE: Running Report Exports and Database Server - Shell Commands\nDESCRIPTION: These snippets show how to start the HSQLDB server using Maven and then generate the sample reports in various formats (including JSON) using build commands. The first command initiates the database, which must remain running. The second command compiles the reports and invokes execution for all demo/sample subreports, outputting to the designated directory. Requires Apache Maven 3.6+ installed.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n>mvn clean compile exec:exec@all\n```\n\nLANGUAGE: shell\nCODE:\n```\n> mvn exec:java\n```\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Setting Alignment and Rotation for Static Text - JasperReports XML Node\nDESCRIPTION: This code sample configures a JasperReports static text element, with visual attributes for position, color, text alignment ('Center'), vertical alignment ('Bottom'), and rotation ('Left'). The child <text> value demonstrates displaying the current rotation and alignment. It is valid for inclusion in a .jrxml report template, and relies on JasperReports' XML schema. Key parameters include static text configuration (kind, mode, position, colors, and alignment).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"staticText\\\" mode=\\\"Opaque\\\" x=\\\"100\\\" width=\\\"90\\\" height=\\\"350\\\" backcolor=\\\"#C0C0C0\\\" hTextAlign=\\\"Center\\\" vTextAlign=\\\"Bottom\\\" rotation=\\\"Left\\\">\\n  <text><![CDATA[rotation=\\\"Left\\\"\\n    hTextAlign=\\\"Center\\\"\\n    vTextAlign=\\\"Bottom\\\"]]> </text>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Starting HSQLDB Server for JasperReports Demo using Maven\nDESCRIPTION: This shell command uses the Maven exec plugin (`mvn exec:java`) to start the HSQLDB server bundled with the JasperReports distribution. This server is required to run the demo samples. It should be executed in the `demo/hsqldb` directory of the JasperReports source project, and the terminal should be kept running.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Configuring Paragraph with Line Spacing and Tab Stops in XML\nDESCRIPTION: Example of configuring a text field element with paragraph properties including line spacing set to Fixed with a specific line spacing size and defined tab stops.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <element kind=\"textField\" hTextAlign=\"Right\">\n    <paragraph lineSpacing=\"Fixed\" lineSpacingSize=\"20.0\">\n      <tabStop position=\"20\" alignment=\"Center\"/>\n      <tabStop position=\"40\" alignment=\"Center\"/>\n    </paragraph>\n  <expression>...</expression>\n</element>\n```\n\n----------------------------------------\n\nTITLE: JSON Query for Customer Data\nDESCRIPTION: Executes a JSON query to retrieve customer records from the Northwind dataset.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsondatasource/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<query language=\"json\"><![CDATA[Northwind.Customers]] ></query>\n```\n\n----------------------------------------\n\nTITLE: Configuring Alternative Subreport with File-based Expression - XML\nDESCRIPTION: This XML snippet configures an alternative subreport, passing a parameter and connection, as well as using a String filename in the <expression> field for subreport discovery. Default calculation type for <returnValue> is None, directly assigning a subreport variable to the master. Dependencies: JasperReports engine, compiled .jasper file available at specified path. Inputs include master report fields and connection. Outputs: subreport contents as embedded in the master layout. The parameter and return values must map correctly between master and subreport.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"subreport\\\" positionType=\\\"Float\\\" x=\\\"335\\\" y=\\\"25\\\" width=\\\"175\\\" height=\\\"20\\\" backcolor=\\\"#99CCFF\\\" removeLineWhenBlank=\\\"true\\\">\\n  <connectionExpression><![CDATA[$P{REPORT_CONNECTION}]] ></connectionExpression>\\n  <expression><![CDATA[\\\"AddressReport.jasper\\\"]] ></expression>\\n  <returnValue toVariable=\\\"CityAddressCount\\\" subreportVariable=\\\"REPORT_COUNT\\\"/>\\n  <parameter name=\\\"City\\\">\\n    <expression><![CDATA[$F{City}]] ></expression>\\n  </parameter>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running JasperReports Sample using Maven (Shell)\nDESCRIPTION: Cleans the project, compiles the source code, and executes the JasperReports 'nopagebreak' sample using the Maven `exec:exec@all` plugin configuration. This command should be run from the `demo/samples/nopagebreak` directory within the JasperReports source project. It depends on the HSQLDB server started in the previous step and generates various report documents in the `target/reports` directory. Requires Apache Maven (version 3.6 or later).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/nopagebreak/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Setting JasperReports Data Adapter Property\nDESCRIPTION: Shows how to specify the data adapter file location in the report configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<property name=\"net.sf.jasperreports.data.adapter\" value=\"data/northwindDataAdapter.jrdax\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Read-Only Pre-Checked Square Checkbox in JasperReports JRXML\nDESCRIPTION: This JRXML snippet configures an ellipse element to render as a non-editable checkbox field in the generated PDF. The 'net.sf.jasperreports.export.pdf.field.type' property designates it as a 'Check' field. Its appearance is set to 'Square' using 'check.type', and the border style is 'Beveled' via 'border.style'. The checkbox is marked as read-only ('read.only' is true) and pre-checked ('checked' is true).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/forms/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"ellipse\"  positionType=\"Float\" mode=\"Opaque\" width=\"25\" height=\"25\">\n  <pen lineWidth=\"1.0\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.type\" value=\"Check\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.check.type\" value=\"Square\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.border.style\" value=\"Beveled\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.read.only\" value=\"true\"/>\n  <property name=\"net.sf.jasperreports.export.pdf.field.checked\" value=\"true\"/>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Declaring Renderable Report Variable for Chart Renderer - XML\nDESCRIPTION: This XML snippet declares a report variable named 'Chart' of type net.sf.jasperreports.renderers.Renderable with a calculation type of 'System'. Dependency: JasperReports JRXML schema. This variable is designed to hold the renderer instance, enabling the template to refer to a dynamically constructed chart image. It expects the variable value to be set from Java code or a scriptlet.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jfreechart/README.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n  <variable name=\"Chart\" calculation=\"System\" class=\"net.sf.jasperreports.renderers.Renderable\"/>\n```\n\n----------------------------------------\n\nTITLE: Building and Running JasperReports Sample with Maven - Bash\nDESCRIPTION: This shell command invokes Maven's 'clean', 'compile', and 'exec:exec@all' lifecycle steps from the sample's directory. The step builds and executes the JasperReports rotation sample, producing output files in the designated reports directory. Prerequisites are Maven 3.6+ installed and correct working directory; the command does not take additional parameters.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Metadata Export - JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a schema file (e.g., MasterReport.schema.json) used for guiding JasperReports' JSON export. The schema defines an array of objects, with each object containing properties such as City, products, and customers, with nested object and array definitions. The _type and _children properties are mandatory as per JasperReports conventions, and each leaf node represents a value field. This schema must exist at the specified path, and is referenced via report property 'net.sf.jasperreports.export.json.schema'.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  _type: 'array',\n  _children: {\n    _type: 'object',\n    City: 'value',\n    products: {\n      _type: 'array',\n      _children: {\n        _type: 'object',\n        Id: 'value',\n        Name: 'value',\n        Quantity: 'value',\n        Price: 'value'\n      }\n    },\n    customers: {\n      _type: 'array',\n      _children: {\n        _type: 'object',\n        Name: 'value',\n        Street: 'value'\n      }\n    }  \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports I18n Sample (Shell)\nDESCRIPTION: Command to compile, fill, and view the internationalized report using Maven.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/i18n/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean compile exec:java -Dexec.args=\"compile fill view\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Paragraph Alignment with Style in XML\nDESCRIPTION: Example showing how to apply horizontal and vertical text alignment using a style element with Center and Middle alignment properties.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"MyParagraphStyle\" hTextAlign=\"Center\" vTextAlign=\"Middle\" ... />\n...\n <element kind=\"textField\" style=\"MyParagraphStyle\"...>\n  <expression>...</expression>\n </element>\n```\n\n----------------------------------------\n\nTITLE: Implementing ChartTheme Interface in Java\nDESCRIPTION: The core method of the ChartTheme interface that must be implemented to create JFreeChart objects based on the provided ChartContext. This method contains all the runtime information needed for chart creation.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic JFreeChart createChart(ChartContext charContext) throws JRException;\n```\n\n----------------------------------------\n\nTITLE: Creating Hyperlinked ToC Entries with Page Numbers in JRXML\nDESCRIPTION: Illustrates JRXML text field elements for a Table of Contents. The first element displays the bookmark label (`$F{label}`) and creates a `LocalAnchor` hyperlink to it. The second element calculates and displays the final page number (`$V{PAGE_NUMBER} + $F{pageIndex} + 1`) using `evaluationTime=\"Auto\"` and provides a `LocalPage` hyperlink.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tableofcontents/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n   <element kind=\"textField\" hyperlinkType=\"LocalAnchor\" .../>\n    <expression>$F{label}</expression>\n    <hyperlinkAnchorExpression>$F{label}</hyperlinkAnchorExpression>\n  </element>\n  <element element kind=\"textField\" evaluationTime=\"Auto\" hyperlinkType=\"LocalPage\".../>\n    <expression>$V{PAGE_NUMBER} + $F{pageIndex} + 1</expression>\n    <hyperlinkPageExpression>$V{PAGE_NUMBER} + $F{pageIndex} + 1</hyperlinkPageExpression>\n  </textField>\n```\n\n----------------------------------------\n\nTITLE: Maven Execution Command for Sample\nDESCRIPTION: Maven command to compile and execute the markup sample, generating report documents in all supported formats.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/markup/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> mvnn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Line Shape Element in JRXML - JasperReports - XML\nDESCRIPTION: This XML snippet demonstrates how to declare a line shape within a JasperReports .jrxml template file. Key attributes include position (y), width, height, color (forecolor), and direction (e.g., \\\"BottomUp\\\"). The pen sub-element specifies line thickness. The default fill type is solid and not explicitly set. This element forms part of report design configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/shapes/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"line\\\" y=\\\"150\\\" width=\\\"200\\\" height=\\\"40\\\" forecolor=\\\"#00FF00\\\" direction=\\\"BottomUp\\\">\\n  <pen lineWidth=\\\"4.0\\\"/>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Defining a JasperReports Subreport Element for Customer Documents - XML\nDESCRIPTION: Details a report sub-element in JRXML to render document subreports using JRBeanCollectionDataSource fed from the 'documents' field. Requires JasperReports library, a compiled DocumentsReport.jasper, and the parent report to provide a documents collection. Output is embedded document listings per customer.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"subreport\\\" x=\\\"65\\\" y=\\\"21\\\" width=\\\"50\\\" height=\\\"20\\\" removeLineWhenBlank=\\\"true\\\">\\n  <dataSourceExpression><![CDATA[new JRBeanCollectionDataSource($F{documents})]] ></dataSourceExpression>\\n  <expression><![CDATA[\\\"DocumentsReport.jasper\\\"]] ></expression>\\n</element>\n```\n\n----------------------------------------\n\nTITLE: Specifying ISO-8859-1 Encoding in JRXML Header (XML)\nDESCRIPTION: This XML snippet demonstrates setting the character encoding for a JRXML file to `ISO-8859-1` (Latin-1). This is suitable for reports containing characters primarily from Western European languages, like French. The encoding attribute in the XML declaration informs the report compiler how to interpret the characters within the JRXML file itself.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/unicode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports JFreeChart Sample with Maven - Maven\nDESCRIPTION: This command line snippet illustrates how to build and execute the report sample using Apache Maven. Dependency: Maven (3.6 or newer). No parameters required; the command generates sample report documents for different export types, placing them in a target directory. It assumes correct directory context and necessary dependencies already configured.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jfreechart/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Maven\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Referencing Style Templates in JasperReports (JRXML)\nDESCRIPTION: Example showing how to reference external style template files within a JasperReports JRXML definition using the `<template>` element. The content of the `<template>` element is an expression evaluated at fill time to locate the template. This expression can be a string literal (e.g., 'report_styles.jrtx'), use report parameters (e.g., '$P{BaseTemplateLocation} + \"report_styles.jrtx\"'), or be typed using the 'class' attribute (e.g., 'java.net.URL'). Template expressions are evaluated before the report calculation engine initializes, limiting usage to constants and parameters.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/templates/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<jasperReport ...>\n  <template>”report_styles.jrtx”</template>\n  <!-- parameters can be used in style template expressions -->\n  <template>$P{BaseTemplateLocation} + ”report_styles.jrtx”</template>\n  <template class=”java.net.URL”>$P{StyleTemplateURL}</template>\n  <parameter name=”BaseTemplateLocation”/>\n  <parameter name=”StyleTemplateURL” class=”java.net.URL”/>\n  ...\n</jasperReport>\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running JasperReports Font Sample with Maven\nDESCRIPTION: This command uses Maven (`mvn`) to clean the project, compile the code, and then execute a Java class (using `exec:java`). The `exec.args` parameter specifies arguments for the Java execution, in this case, instructing it to generate a `fonts.xml` file based on installed font extensions within the sample project.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/fonts/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:java -Dexec.args=\"compile fontsXml\"\n```\n\n----------------------------------------\n\nTITLE: Element-Level Excel Format Pattern Override in JasperReports JRXML - XML\nDESCRIPTION: This example shows how to set a format pattern specifically for Excel export of a textField element via the 'net.sf.jasperreports.export.xls.pattern' property. This allows using a Java date pattern for design/runtime validation and an Excel-compliant date pattern for export. Key parameters: 'pattern' attribute for Java, 'net.sf.jasperreports.export.xls.pattern' property for Excel. Requires standard JRXML structure and valid JasperReports context. Inputs: parameterized date. Output: textField with Excel-formatted date.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" pattern=\\\"EEE, MMM d, yyyy\\\" ...>\\n\\t<expression><![CDATA[$P{ReportDate}]] ></expression>\\n\\t<property name=\\\"net.sf.jasperreports.export.xls.pattern\\\" value=\\\"ddd, mmm d, yyyy\\\"/>\\n\\t...\\n</element>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JDT Compiler for Java 1.5 Compatibility\nDESCRIPTION: Demonstrates setting JasperReports configuration properties prefixed with `org.eclipse.jdt.core.` to configure the underlying JDT (Eclipse Java Development Tools) compiler. These specific properties instruct the JDT compiler to enforce Java 1.5 source compatibility, compliance level, and target platform code generation when compiling report expressions.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\norg.eclipse.jdt.core.compiler.source=1.5\norg.eclipse.jdt.core.compiler.compliance=1.5\norg.eclipse.jdt.core.compiler.codegen.TargetPlatform=1.5\n```\n\n----------------------------------------\n\nTITLE: Embedding JasperReports Logo with HTML img Tag\nDESCRIPTION: This HTML snippet utilizes an `<img>` tag to display the JasperReports logo (`jasperreports.svg`). The image source (`src`) is specified using a relative path. It includes alternative text (`alt`) for accessibility and uses the `align` attribute to position the image to the right.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/webapp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"../../resources/jasperreports.svg\" alt=\"JasperReports logo\" align=\"right\"/>\n```\n\n----------------------------------------\n\nTITLE: Viewing an XML Exported Report File - Shell\nDESCRIPTION: Calls Maven's 'exec:java@view' goal with an XML report file as argument ('.jrpxml'), enabling display or validation of XML-formatted reports. Assumes existence of the export file and proper Maven configuration. Useful for inspecting XML-exported report data.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java@view -Dexec.args=target/reports/I18nReport.jrpxml\n```\n\n----------------------------------------\n\nTITLE: Configuring Pattern Substitution Properties for Excel Export\nDESCRIPTION: These properties define pattern substitutions when exporting reports to Excel. Date patterns like 'EEE, MMM d, yyyy' are replaced with Excel-compatible patterns like 'ddd, MMM dd, yyyy', and numeric patterns like '#,##0.00¤' are replaced with '#,##0.00$'.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.export.xls.pattern.EEE,\\ MMM\\ d,\\ yyyy=ddd, MMM dd, yyyy\nnet.sf.jasperreports.export.xls.pattern.#,##0.00¤=#,##0.00$\nnet.sf.jasperreports.export.xls.pattern.#,##0.00=#,##0.00%\n```\n\n----------------------------------------\n\nTITLE: Setting Column Width Ratio for Entire Document\nDESCRIPTION: This property applies a multiplication factor to all column widths in the exported Excel document. This example sets a ratio of 1.25, which will make all columns 25% wider than their default size, unless overridden at element level.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.export.xls.column.width.ratio\" value=\"1.25f\"/>\n```\n\n----------------------------------------\n\nTITLE: Castor XML Mapping Color Provider\nDESCRIPTION: XML mapping configuration for ColorProvider class defining color attributes.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n  <class name=\"net.sf.jasperreports.chartthemes.simple.ColorProvider\">\n    <map-to xml=\"color\"/>\n    <field name=\"color\" type=\"java.awt.Color\" handler=\"net.sf.jasperreports.chartthemes.simple.handlers.ColorFieldHandler\">\n      <bind-xml node=\"attribute\"/>\n    </field>\n  </class>\n```\n\n----------------------------------------\n\nTITLE: Defining JRCompiler Interface Methods in Java\nDESCRIPTION: This snippet shows the method signatures for the JRCompiler interface, which is responsible for report compilation and expression evaluation in JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic JasperReport compileReport(JasperDesign design) throws JRException;\npublic JREvaluator loadEvaluator(JasperReport jasperReport) throws JRException;\npublic JREvaluator loadEvaluator(JasperReport jasperReport, JRDataset dataset) throws JRException;\npublic JREvaluator loadEvaluator(JasperReport jasperReport, JRCrosstab crosstab) throws JRException;\n```\n\n----------------------------------------\n\nTITLE: Multiple Field-Specific Excel Format Pattern Overrides - JasperReports JRXML - XML\nDESCRIPTION: This snippet presents several textField elements in JRXML, each mapping a Java format pattern (set via the 'pattern' attribute) to an Excel export pattern via the 'net.sf.jasperreports.export.xls.pattern' property. Intended for granular per-field Excel pattern mapping, this approach is useful in reports with heterogeneous formatting requirements. Requires JasperReports and compatible report structure; supports expressions that supply date/number values for formatting. Inputs: data values per field. Output: fields formatted per Excel's requirements during export.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\\\"textField\\\" pattern=\\\"EEE, MMM d, yyyy\\\" ...>\\n\\t<expression><![CDATA[new java.util.Date()]] ></expression>\\n\\t<property name=\\\"net.sf.jasperreports.export.xls.pattern\\\" value=\\\"ddd, mmm d, yyyy\\\"/>\\n</element>\\n\\n...\\n\\n<element kind=\\\"textField\\\" pattern=\\\"hh:mm a\\\" ...>\\n\\t<expression><![CDATA[new java.util.Date()]] ></expression>\\n\\t<property name=\\\"net.sf.jasperreports.export.xls.pattern\\\" value=\\\"hh:mm AM/PM\\\"/>\\n</element>\\n\\n...\\n\\n<element kind=\\\"textField\\\" pattern=\\\"#,##0.00\\u00A4\\\" ...>\\n\\t<expression><![CDATA[1234.567]] ></expression>\\n\\t<property name=\\\"net.sf.jasperreports.export.xls.pattern\\\" value=\\\"hh:mm AM/PM\\\"/>\\n</element>\\n\\n...\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Function Name Key in Properties File\nDESCRIPTION: Example of how to define a function name key in the properties file for internationalization.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/functions/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.name=Function_Name\n```\n\n----------------------------------------\n\nTITLE: Conditional Column Width Ratio for Excel Export\nDESCRIPTION: This property expression conditionally applies a different column width ratio based on a field value. When the 'id' field equals 44, a ratio of 0.75 is applied to all columns in the current sheet, making them narrower than their default size.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<propertyExpression name=\"net.sf.jasperreports.export.xls.column.width.ratio\">\n  <![CDATA[$F{id}.equals(44) ? \"0.75f\" : null]] >\n</propertyExpression>\n```\n\n----------------------------------------\n\nTITLE: Suppressing Maven Build Number Plugin Check - Shell\nDESCRIPTION: Runs Maven with a property to ignore the build number plugin check, intended for building artifacts when there are local, non-committed Git changes. Dependencies include Maven and the relevant JasperReports project files. This command is useful for developers working with local changes not yet pushed to Git, allowing builds to pass when they otherwise would fail due to uncommitted changes. Output includes updated JAR artifacts.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Dmaven.buildNumber.doCheck=false\n```\n\n----------------------------------------\n\nTITLE: Declaring Customers Entity in XML - XML\nDESCRIPTION: Shows a sample <Customers> entity from the Northwind data XML. This snippet is used as an example data structure for JasperReports XML data source. Key elements represent customer fields and values needed for mapping and reporting. Input: None (sample data). Output: XML node structure representing a customer. No dependencies, but typically part of a larger XML file.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <Customers>\\n    <CustomerID>ALFKI</CustomerID>\\n    <CompanyName>Alfreds Futterkiste</CompanyName>\\n    <ContactName>Maria Anders</ContactName>\\n    <ContactTitle>Sales Representative</ContactTitle>\\n    <Address>Obere Str. 57</Address>\\n    <City>Berlin</City>\\n    <PostalCode>12209</PostalCode>\\n    <Country>Germany</Country>\\n    <Phone>030-0074321</Phone>\\n    <Fax>030-0076545</Fax>\\n  </Customers>\n```\n\n----------------------------------------\n\nTITLE: Defining Function Parameter Key in Properties File\nDESCRIPTION: Example of how to define a function parameter name key in the properties file for internationalization.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/functions/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nnet.sf.jasperreports.functions.standard.DateTimeFunctions.DATE.dayOfMonth.name=Parameter_Name\n```\n\n----------------------------------------\n\nTITLE: Castor XML Mapping Legend Settings\nDESCRIPTION: XML mapping configuration for LegendSettings class defining legend-specific attributes and elements.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n  <class name=\"net.sf.jasperreports.chartthemes.simple.LegendSettings\">\n    <map-to xml=\"legend\"/>\n    <field name=\"showLegend\" type=\"java.lang.Boolean\">\n      <bind-xml node=\"attribute\"/>\n    </field>\n    <field name=\"position\" type=\"net.sf.jasperreports.charts.type.EdgeEnum\" handler=\"net.sf.jasperreports.chartthemes.simple.handlers.EdgeFieldHandler\">\n      <bind-xml node=\"attribute\"/>\n    </field>\n    <field name=\"foregroundPaint\" type=\"net.sf.jasperreports.chartthemes.simple.PaintProvider\">\n      <bind-xml auto-naming=\"deriveByField\" node=\"element\"/>\n    </field>\n    <field name=\"backgroundPaint\" type=\"net.sf.jasperreports.chartthemes.simple.PaintProvider\">\n      <bind-xml auto-naming=\"deriveByField\" node=\"element\"/>\n    </field>\n    <field name=\"font\" type=\"net.sf.jasperreports.engine.JRFont\">\n      <bind-xml auto-naming=\"deriveByClass\" node=\"element\"/>\n    </field>\n    <field name=\"horizontalAlignment\" type=\"org.jfree.chart.ui.HorizontalAlignment\" handler=\"net.sf.jasperreports.chartthemes.simple.handlers.HorizontalAlignmentFieldHandler\">\n      <bind-xml node=\"attribute\"/>\n    </field>\n    <field name=\"verticalAlignment\" type=\"org.jfree.chart.ui.VerticalAlignment\" handler=\"net.sf.jasperreports.chartthemes.simple.handlers.VerticalAlignmentFieldHandler\">\n      <bind-xml node=\"attribute\"/>\n    </field>\n    <field name=\"padding\" type=\"org.jfree.chart.ui.RectangleInsets\">\n      <bind-xml node=\"element\"/>\n    </field>\n  </class>\n```\n\n----------------------------------------\n\nTITLE: Chart Theme Element Configuration\nDESCRIPTION: XML configuration showing how to specify a chart theme at the chart element level.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<chart theme=\"theme_name\">\n...\n</chart>\n```\n\n----------------------------------------\n\nTITLE: Filtering CSV Data in JasperReports JRXML\nDESCRIPTION: Shows how to filter data from a CSV data source using a parameter in the JRXML file. This filter expression only includes records where the 'state' field matches values in the 'IncludedStates' parameter set.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/csvdatasource/README.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<parameter name=\"IncludedStates\" class=\"java.util.Set\"/>\n\n...\n\n<filterExpression><![CDATA[$P{IncludedStates}.contains($F{state})]]></filterExpression>\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Column Width in Excel Export\nDESCRIPTION: This property sets a fixed width (in pixels) for a specific column when exporting to Excel. In this example, the 'State' column width is set to 110 pixels, which will be converted to the equivalent Excel character width units.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.export.xls.column.width\" value=\"110\"/>\n```\n\n----------------------------------------\n\nTITLE: Declaring XPath Query for Main Report (Customers) - JRXML/XML\nDESCRIPTION: Defines the JRXML query for extracting Customer records using XPath. The language is specified as xPath, and the query selects all <Customers> nodes under the <Northwind> root. Dependency: JasperReports with XPath query executer configured. Inputs: Northwind.xml structure. Outputs: nodes for Customer mapping in the report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n  <query language=\\\"xPath\\\"><![CDATA[/Northwind/Customers]]></query>\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters with Defaults - JasperReports XML\nDESCRIPTION: Defines two report parameters (A and B) in a JasperReports template, each of type java.lang.Double. The default values are provided as primitive integers (3 and 5), relying on JavaScript's dynamic typing to convert these at runtime. These parameters can then be referenced in report expressions for calculations. Used in the <parameters> section of the template; available in expression fields via $P syntax.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/javascript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<parameter name=\\\"A\\\" class=\\\"java.lang.Double\\\">\\n  <defaultValueExpression><![CDATA[3]] ></defaultValueExpression>\\n</parameter>\\n<parameter name=\\\"B\\\" class=\\\"java.lang.Double\\\">\\n  <defaultValueExpression><![CDATA[5]] ></defaultValueExpression>\\n</parameter>\n```\n\n----------------------------------------\n\nTITLE: Castor Chart Theme Extension Configuration\nDESCRIPTION: Properties configuration required to enable Castor XML Mapping-based chart themes in JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.extension.registry.factory.xml.chart.themes=net.sf.jasperreports.chartthemes.simple.XmlChartThemeExtensionsRegistryFactory\nnet.sf.jasperreports.xml.chart.theme.simple=net/sf/jasperreports/chartthemes/simple/simple.jrctx\n```\n\n----------------------------------------\n\nTITLE: Defining JPA Entity with Table Annotation in Java\nDESCRIPTION: Illustrates how to define a JPA entity class with a @Table annotation to specify the corresponding database table.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@Entity\n@Table(name=\"movie_cast\")\npublic class Cast {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Field Mapping for Customer Report - JRXML/XML\nDESCRIPTION: Shows the field declaration and XPath mapping for Customer fields in the main report template. Each field specifies a Java type and a mapping property for extraction. These declarations instruct JasperReports how to bind XML nodes to report fields.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n  <field name=\\\"CustomerID\\\" class=\\\"java.lang.String\\\">\\n    <property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"CustomerID\\\"/>\\n  </field>\\n  <field name=\\\"CompanyName\\\" class=\\\"java.lang.String\\\">\\n    <property name=\\\"net.sf.jasperreports.xpath.field.expression\\\" value=\\\"CompanyName\\\"/>\\n  </field>\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Groovy Compiler Property\nDESCRIPTION: Specifies the default class (`net.sf.jasperreports.compilers.JRGroovyCompiler`) used by JasperReports for compiling report expressions written in Groovy. This configuration property `net.sf.jasperreports.compiler.groovy` tells JasperReports which implementation to use when the report language is set to 'groovy'.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.compiler.groovy=net.sf.jasperreports.compilers.JRGroovyCompiler\n```\n\n----------------------------------------\n\nTITLE: Defining a System Variable - JasperReports XML\nDESCRIPTION: This XML snippet shows how to define a report variable whose value is intended to be filled programmatically by a scriptlet or subreport. The 'calculation' attribute is set to 'System', signaling that the value will be set from code, not from a variable expression. No dependencies are required except for editing a valid JasperReports report template (.jrxml). The 'name' attribute is the variable name, 'class' is the Java type, and the absence of a Variable Expression ensures external value assignment. Input: scriptlet context; Output: variable content for use in report expressions. Only works if corresponding scriptlet sets its value during execution.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/scriptlet/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n    <variable name=\"AllCities\" class=\"java.lang.String\" calculation=\"System\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Tab Stops in XML\nDESCRIPTION: Example of configuring multiple tab stops with different positions and alignments within a paragraph element.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<paragraph lineSpacing=\"Fixed\" lineSpacingSize=\"20.0\">\n  <tabStop position=\"20\"/>\n  <tabStop position=\"40\" alignment=\"Center\"/>\n  <tabStop position=\"80\" alignment=\"Right\"/>\n</paragraph>\n```\n\n----------------------------------------\n\nTITLE: Configuring EJBQL Query Hint in JasperReports XML\nDESCRIPTION: Shows how to set a query hint property for EJBQL queries in JasperReports. This example sets the 'cacheType' hint to 'Shared'.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<property name=\"net.sf.jasperreports.ejbql.query.hint.cacheType\" value=\"Shared\"/>\n```\n\n----------------------------------------\n\nTITLE: Filling Report with XLSX Data Source\nDESCRIPTION: Method to fill a JasperReport using an XLSX data source. Similar to XLS implementation but handles the newer Excel format.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldatasource/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void fill2() throws JRException\n{\n  long start = System.currentTimeMillis();\n  //Preparing parameters\n  Map<String, Object> parameters = new HashMap<String, Object>();\n  parameters.put(\"ReportTitle\", \"Address Report\");\n  parameters.put(\"DataFile\", \"MultisheetXlsxDataSource.data.xlsx - XLSX data source\");\n  Set<String> states = new HashSet<String>();\n  states.add(\"Active\");\n  states.add(\"Trial\");\n  parameters.put(\"IncludedStates\", states);\n\n  JasperFillManager.fillReportToFile(\"target/reports/ExcelDataSourceReport.jasper\", parameters, getDataSource(\"data/MultisheetXlsxDataSource.data.xlsx\"));\n  System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting EJBQL Query Pagination in JasperReports XML\nDESCRIPTION: Demonstrates how to enable pagination for EJBQL query results to control memory usage. This property sets the page size to 500 rows.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<property name=\"net.sf.jasperreports.ejbql.query.page.size\" value=\"500\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring XPath Executer Factory - Properties\nDESCRIPTION: Sets the property for the JasperReports framework to use the Jaxen-based XPath executer. Required for enabling XPath queries against XML data sources. Dependency: JasperReports library and classpath including JaxenXPathExecuterFactory. Used at runtime to resolve XPath queries in .jrxml files.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.xpath.executer.factory=net.sf.jasperreports.jaxen.util.xml.JaxenXPathExecuterFactory\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Customizer Property Format\nDESCRIPTION: Shows the property name format for defining a chart customizer class. The property should specify a class implementing JRChartCustomizer with an empty constructor.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartcustomizers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnet.sf.jasperreports.customizer.class.{arbitrary_name}\n```\n\n----------------------------------------\n\nTITLE: JSONQL Result Structure Example\nDESCRIPTION: Sample JSON output structure showing filtered order results with ID and date\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n[\n{\n\"OrderID\": 10643,\n\"OrderDate\": \"1997-08-25\"\n},\n...\n{\n\"OrderID\": 11011,\n\"OrderDate\": \"1998-04-09\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Autofilter Start Property Expression in JasperReports XML\nDESCRIPTION: Sets the autofilter 'Start' property conditionally based on the ID field value. When the ID equals 44, the data range will start from that row in the Name column.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsfeatures/README.md#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<propertyExpression name=\"net.sf.jasperreports.export.xls.auto.filter\"><![CDATA[$F{id}.equals(44) ? \"Start\" : null]]></propertyExpression/>\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Elements in JRXML\nDESCRIPTION: XML configuration showing how to define generic elements for embedding Open Hub statistics widgets. Includes element positioning, dimensions and parameter definitions.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/genericelement/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"generic\" y=\"100\" width=\"400\" height=\"200\" style=\"widget1\">\n  <genericType namespace=\"http://jasperreports.sourceforge.net/jasperreports/ohloh\" name=\"languages\"/>\n  <parameter name=\"ProjectID\">\n    <expression><![CDATA[$P{JRProjectID}]] ></expression>\n  </parameter>\n</element>\n<element kind=\"generic\" x=\"420\" y=\"100\" width=\"400\" height=\"200\">\n  <genericType namespace=\"http://jasperreports.sourceforge.net/jasperreports/ohloh\" name=\"stats\"/>\n  <parameter name=\"ProjectID\">\n    <expression><![CDATA[$P{JRProjectID}]] ></expression>\n  </parameter>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Setting Export Character Encoding Property in JasperReports (Properties)\nDESCRIPTION: This line shows the JasperReports property `net.sf.jasperreports.export.character.encoding`. This property allows users to specify the character encoding used when exporting reports to formats like CSV, HTML, or XML, overriding the JRXML file's encoding if necessary. It defaults to UTF-8 and can be set in the `default.jasperreports.properties` file or via specific export parameters.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/unicode/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnet.sf.jasperreports.export.character.encoding\n```\n\n----------------------------------------\n\nTITLE: Creating Formatted HTML Text Field in JasperReports\nDESCRIPTION: This HTML snippet demonstrates a text field element with various formatting options including colors, styles, and a hyperlink. It also explains how to enable HTML markup in JasperReports text elements.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/markup/reports/html.txt#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<HTML>\n<BODY LANG=\"en-US\" DIR=\"LTR\">\n<P ALIGN=LEFT STYLE=\"margin-bottom: 0in\"><FONT FACE=\"DejaVu Sans, sans-serif\"><FONT SIZE=4 STYLE=\"font-size: 16pt\"><FONT COLOR=\"#000000\">This\nis a </FONT><FONT COLOR=\"#000000\"><I><U><B>text field</B></U></I></FONT><FONT COLOR=\"#000000\"><I><B>\n</B></I></FONT><FONT COLOR=\"#000000\"> element containing </FONT><FONT COLOR=\"#FF8800\"><B><U><A HREF=\"http://en.wikipedia.org/wiki/HTML?x=1&y=2\" target=\"_blank\">HTML</A></U></B></FONT><FONT COLOR=\"#000000\">\n text. </FONT><FONT COLOR=\"#000000\"><I><B><SPAN STYLE=\"background: #ffff00\">HTML\nsnippets</SPAN></B></I></FONT><FONT COLOR=\"#000000\"> can be used\ninside text elements by setting the </FONT><FONT COLOR=\"#0000ff\"><I>markup\n</I></FONT><FONT COLOR=\"#000000\">attribute available for the\n</FONT><FONT COLOR=\"#ff00ff\"><B>textElement </B></FONT><FONT COLOR=\"#000000\">tag\nto </FONT><FONT COLOR=\"#ff0000\"><I>html</I></FONT><FONT COLOR=\"#000000\">.</FONT></FONT></FONT></P>\n</BODY>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Filling and Executing JasperReports using Hibernate Data - Java\nDESCRIPTION: Defines a Java method for initializing Hibernate sessions, starting transactions, preparing report parameters, and filling multiple JasperReports files. Dependencies include Hibernate, JasperReports API, and compiled report templates. Inputs are report template files, outputs are filled reports written to disk; rolls back transaction upon completion.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic void fill() throws JRException\\n{\\n  SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();\\n  Session session = sessionFactory.openSession();\\n  Transaction transaction = session.beginTransaction();\\n\\n  Map<String, Object> params = getParameters(session);\\n\\n  File[] files =\\n    new File[]{\\n    new File(\\\"target/reports/AddressesReport.jasper\\\"),\\n      new File(\\\"target/reports/HibernateQueryReport.jasper\\\")\\n    };\\n  for(int i = 0; i < files.length; i++)\\n  {\\n    File reportFile = files[i];\\n    long start = System.currentTimeMillis();\\n    JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(), new HashMap<String, Object>(params));\\n    System.err.println(\\\"Report : \\\" + reportFile + \\\". Filling time : \\\" + (System.currentTimeMillis() - start));\\n  }\\n\\n  transaction.rollback();\\n  sessionFactory.close();\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XML API Response Structure - XML\nDESCRIPTION: This XML code shows the structure of a response from an API returning movie data for JasperReports. The response contains a root element with attributes for total results and response status, and nested result nodes for each movie, each with various attributes. JRXML queries and fields are designed to extract and map these node attributes for tabular report output.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/httpdataadapter/README.md#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<root totalResults=\\\"213\\\" response=\\\"True\\\">\\n  <result title=\\\"Aliens\\\" year=\\\"1986\\\" imdbID=\\\"tt0090605\\\" type=\\\"movie\\\" poster=\\\"https://.../...jpg\\\"/>\\n  <result title=\\\"Cowboys & Aliens\\\" year=\\\"2011\\\" imdbID=\\\"tt0409847\\\" type=\\\"movie\\\" poster=\\\"https://.../...jpg\\\"/>\\n  ...\\n</root>\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Greater Than Clause with $X{GREATER} in JasperReports SQL\nDESCRIPTION: Creates a SQL 'greater than' comparison clause based on a report parameter. Takes the column name and the parameter name. Generates `<column_name> > ?` if the parameter value is not null. If the parameter value is null, it outputs a clause that always evaluates to true (e.g., `0 = 0`), ignoring the null comparison. Use standard parameter syntax like `<column_name> > $P{<parameter_name>}` for strict null comparison.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n$X{GREATER, <column_name>, <parameter_name>}\n```\n\n----------------------------------------\n\nTITLE: Defining Token Vocabulary for ANTLR Mapping Parser in Java\nDESCRIPTION: Defines symbolic token names and their integer values for an ANTLR 2.7.5 mapping parser. No explicit dependencies are required to interpret this file, as it is generally auto-generated by ANTLR from a grammar file (mapping.g), and serves as a lookup for token values by the parser and lexer. The literals include keywords like 'Axis', 'Columns', and operators such as PLUS and STAR. The expected input is the parser/lexer usage of these constants, and the output is accurate token recognition; any modification must be reflected in the corresponding grammar.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/ext/olap/src/main/resources/net/sf/jasperreports/olap/mapping/MappingParserTokenTypes.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// $ANTLR 2.7.5 (20050128): mapping.g -> MappingParserTokenTypes.txt$\nMappingParser    // output token vocab name\nLITERAL_Axis=\"Axis\"=4\nLPAREN=5\nRPAREN=6\nLITERAL_Columns=\"Columns\"=7\nLITERAL_Rows=\"Rows\"=8\nLITERAL_Pages=\"Pages\"=9\nLITERAL_Chapters=\"Chapters\"=10\nLITERAL_Sections=\"Sections\"=11\nLITERAL_Data=\"Data\"=12\nLITERAL_FormattedData=\"FormattedData\"=13\nCOMMA=14\nQMARK=15\nPOINT=16\nINT=17\nMONDRNAME=18\nNAME=19\nPLUS=20\nMINUS=21\nSTAR=22\nWS=23\nDIGIT=24\nLETTER=25\n```\n\n----------------------------------------\n\nTITLE: Running HSQLDB Server for JasperReports Samples\nDESCRIPTION: Command to start the HSQLDB server shipped with JasperReports distribution package. This database is required for running the crosstab samples.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/crosstabs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Implementing XY Line Chart Domain Axis Customization\nDESCRIPTION: XML configuration example showing how to customize an XY line chart's domain axis by setting minimum value, maximum value, and tick unit spacing using multiple customizer properties.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartcustomizers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<element kind=\"chart\" chartType=\"xyLine\" width=\"555\" height=\"300\" evaluationTime=\"Report\">\n  ...\n  <property name=\"net.sf.jasperreports.customizer.class.domainAxis\" value=\"net.sf.jasperreports.customizers.axis.DomainAxisCustomizer\"/>\n  <property name=\"net.sf.jasperreports.customizer.domainAxis.minValue\" value=\"60\"/>\n  <property name=\"net.sf.jasperreports.customizer.domainAxis.maxValue\" value=\"90\"/>\n  <property name=\"net.sf.jasperreports.customizer.domainAxis.tickUnit\" value=\"5\"/>\n  ...\n</element>\n```\n\n----------------------------------------\n\nTITLE: Building and Running the JasperReports XChart Sample with Maven (Shell)\nDESCRIPTION: Shows the Maven command-line instruction to build, compile, and execute the full JasperReports XChart component sample. Requires Apache Maven >=3.6 and a setup JasperReports source project. The input is a shell command run within the sample's directory, the output is the report files under target/reports; ensure dependencies are resolved and directory context is correct.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xchartcomponent/README.md#2025-04-22_snippet_4\n\nLANGUAGE: maven\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Report Parameter Configuration in Java\nDESCRIPTION: Configures report parameters including date patterns, number formatting, and locale settings in Java.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsondatasource/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void fill() throws JRException\n{\n  long start = System.currentTimeMillis();\n\n  Map<String, Object> params = new HashMap<String, Object>();\n  params.put(JsonQueryExecuterFactory.JSON_DATE_PATTERN, \"yyyy-MM-dd\");\n  params.put(JsonQueryExecuterFactory.JSON_NUMBER_PATTERN, \"#,##0.##\");\n  params.put(JsonQueryExecuterFactory.JSON_LOCALE, Locale.ENGLISH);\n  params.put(JRParameter.REPORT_LOCALE, Locale.US);\n\n  JasperFillManager.fillReportToFile(\"build/reports/JsonCustomersReport.jasper\", params);\n  System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n}\n```\n\n----------------------------------------\n\nTITLE: Starting HSQLDB Server using Maven\nDESCRIPTION: A command-line instruction using Apache Maven to start the HSQLDB database server. This server is typically required as a data source for running JasperReports demo samples. This command should be executed in the `demo/hsqldb` directory of the JasperReports project.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/tableofcontents/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Using Nested Styles, Font Size, Superscript, and Subscript in JasperReports (XML)\nDESCRIPTION: This fragment illustrates nested `<style>` tags for complex formatting, specifically creating a text-based logo effect with different colors. It also demonstrates using the `<font>` tag to adjust text size and incorporates `<sup>` (superscript) and `<sub>` (subscript) tags within `<font>` tags. Note the use of escaped quotes `\\\"` for attribute values.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/styledtext/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\tThis text field element contains styled text displaying the text-only version of the\n\t<style size=\\\"12\\\" isBold=\\\"true\\\" forecolor=\\\"black\\\">^<style forecolor=\\\"#808080\\\">Jasper</style>\n\t<style forecolor=\\\"#990000\\\">Reports</style></style> logo and some <font size=\\\"10\\\"><sup>superscript</sup></font>\n\ttext and <font size=\\\"10\\\"><sub>subscript</sub></font> text.\n```\n\n----------------------------------------\n\nTITLE: XML Chart Type Examples\nDESCRIPTION: Examples of chart type attribute values in JRXML files, showing how to specify different types of charts using the chartType attribute.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/charts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nchartType=\"pie\"\nchartType=\"bar\"\nchartType=\"xyBar\"\nchartType=\"stackedBar\"\nchartType=\"line\"\nchartType=\"xyLine\"\nchartType=\"area\"\nchartType=\"stackedArea\"\nchartType=\"xyArea\"\nchartType=\"scatter\"\nchartType=\"bubble\"\nchartType=\"timeSeries\"\nchartType=\"highLow\"\nchartType=\"candlestick\"\nchartType=\"meter\"\nchartType=\"thermometer\"\nchartType=\"multiAxis\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Paragraph Alignment in XML\nDESCRIPTION: Example of directly setting horizontal and vertical text alignment attributes on a text field element without using a style reference.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n <element kind=\"textField\"  hTextAlign=\"Center\" vTextAlign=\"Middle\"...>\n  <expression>...</expression>\n </element>\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports Sample via Maven - Shell Command\nDESCRIPTION: Shell command to build, compile, and execute all JasperReports sample demos using Maven. Requires Maven 3.6+ to be installed and present in the system PATH. This command generates various output formats in the target/reports directory; must be run from the demo/samples/hyperlink directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Implementing Barbecue Barcodes in JasperReports XML\nDESCRIPTION: This snippet demonstrates how to use the Barbecue component in JasperReports to generate various types of barcodes. It includes examples of Code128, Codabar, Interleaved 2 of 5, and Standard 2 of 5 barcodes with different configurations.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/barbecue/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<parameter name=\"Code\" class=\"java.lang.String\">\n  <defaultValueExpression><![CDATA[\"01234567890\"]] ></defaultValueExpression>\n</parameter>\n...\n<element kind=\"component y=\"100\" width=\"400\" height=\"50\">\n  <component kind=\"barbecue\" drawText=\"true\" type=\"Code128\">\n    <codeExpression><![CDATA[\"JasperReports\"]] ></codeExpression>\n  </component>\n</element>\n<element kind=\"component\" y=\"160\" width=\"400\" height=\"50\">\n  <component kind=\"barbecue\" drawText=\"true\" type=\"Codabar\">\n    <codeExpression><![CDATA[$P{Code}]] ></codeExpression>\n  </component>\n</element>\n<element kind=\"component\" y=\"220\" width=\"400\" height=\"50\">\n  <component kind=\"barbecue\" drawText=\"true\" checksumRequired=\"true\" barWidth=\"3\" barHeight=\"20\" type=\"Int2of5\">\n    <codeExpression><![CDATA[$P{Code}]] ></codeExpression>\n  </component>\n</element>\n<element kind=\"component\" y=\"280\" width=\"400\" height=\"50\">\n  <component kind=\"barbecue\" type=\"Std2of5\">\n    <codeExpression><![CDATA[$P{Code}]] ></codeExpression>\n  </component>\n</element>\n```\n\n----------------------------------------\n\nTITLE: Configuring Right/Top Aligned UpsideDown Text - JasperReports XML\nDESCRIPTION: The snippet configures a text element with horizontal alignment 'Right', vertical alignment 'Top', and rotation 'UpsideDown'. This results in text left-aligned horizontally, bottom-aligned vertically, and with the flow from right to left. For use as a configuration sample in JasperReports .jrxml files.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/rotation/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\nhTextAlign=\\\"Right\\\"\\nvTextAlign=\\\"Top\\\"\\nrotation=\\\"UpsideDown\\\"\n```\n\n----------------------------------------\n\nTITLE: Running Maven Build and Exec for JasperReports Demo - Bash\nDESCRIPTION: This snippet demonstrates how to use Apache Maven to clean, compile, and execute all configurations for the JasperReports chartthemes sample. It requires Maven (version 3.6 or later) to be installed and executed from the correct directory in the JasperReports source tree. The command will produce documents in multiple formats, outputting them into the target/reports directory. No parameters are required, but Maven must be properly configured.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/chartthemes/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONQL in Data Adapter\nDESCRIPTION: Example of configuring JSONQL in a data adapter configuration using XML.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<jsonDataAdapter class=\"net.sf.jasperreports.data.json.JsonDataAdapterImpl\">\n  ...\n  <language>jsonql</language>\n  ...\n</jsonDataAdapter>\n```\n\n----------------------------------------\n\nTITLE: Starting HSQLDB Server using Maven for JasperReports Samples\nDESCRIPTION: This shell command uses Apache Maven to start the HSQLDB database server. It executes the `exec:java` goal, which is configured in the project's POM file (likely in the 'demo/hsqldb' directory) to run the HSQLDB server class. This database is often required as a data source for running JasperReports samples. The command should be run from the `demo/hsqldb` directory within the JasperReports project.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/text/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Functions Extension in JasperReports\nDESCRIPTION: Properties file configuration to enable custom functions extension in JasperReports. Defines the extension registry factory and lists function classes.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/functions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nnet.sf.jasperreports.extension.registry.factory.{registry_id}=extension_registry_factory_class\nnet.sf.jasperreports.extension.{registry_id}.{property_suffix}=comma_separated_function_classes\n```\n\n----------------------------------------\n\nTITLE: Mapping Address Entity to ADDRESS Table - Hibernate XML Mapping\nDESCRIPTION: Provides Hibernate XML mapping for the Address entity to the ADDRESS table, establishing fields and a set-based one-to-many relationship to Document. To be placed in src/Address.hbm.xml; requires Address.java and Document mapping/files to function properly. Used by Hibernate during ORM for query and persistence operations.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n  <hibernate-mapping>\\n\\n  <class name=\\\"Address\\\" table=\\\"ADDRESS\\\">\\n    <id name=\\\"id\\\" column=\\\"ID\\\">\\n      <generator class=\\\"increment\\\"/>\\n    </id>\\n\\n    <property name=\\\"firstName\\\" column=\\\"FIRSTNAME\\\"/>\\n    <property name=\\\"lastName\\\" column=\\\"LASTNAME\\\"/>\\n    <property name=\\\"street\\\" column=\\\"STREET\\\"/>\\n    <property name=\\\"city\\\" column=\\\"CITY\\\"/>\\n\\n    <set name=\\\"documents\\\" inverse=\\\"true\\\">\\n      <key column=\\\"ADDRESSID\\\"/>\\n      <one-to-many class=\\\"Document\\\"/>\\n    </set>\\n  </class>\\n\\n  </hibernate-mapping>\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Less Than or Equal Clause with $X{LESS]} in JasperReports SQL\nDESCRIPTION: Constructs a SQL 'less than or equal to' comparison clause using a report parameter. Expects the column name and the parameter name. Generates `<column_name> <= ?` if the parameter value is not null. If the parameter is null, it produces a clause evaluating to true (e.g., `0 = 0`), ignoring the comparison. Use standard parameter syntax like `<column_name> <= $P{<parameter_name>}` for strict null comparison.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n$X{LESS], <column_name>, <parameter_name>}\n```\n\n----------------------------------------\n\nTITLE: Setting EJBQL Query Pagination in JasperReports\nDESCRIPTION: Shows how to configure pagination for EJBQL queries to control memory usage by fetching results in chunks of specified size.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql-j2ee/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.ejbql.query.page.size\" value=\"500\"/>\n```\n\n----------------------------------------\n\nTITLE: Compiling and Generating Sample Reports with Maven - Shell\nDESCRIPTION: This Maven command cleans previous builds, compiles the source code, and executes all report generation tasks for JasperReports EJBQL samples. To use it, ensure Maven 3.6+ is installed and the working directory is set to 'demo/samples/ejbql' in the JasperReports source. The output sample reports will be generated in the 'demo/samples/ejbql/target/reports' directory. This operation depends on the HSQLDB server being already running.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Exporting Reports in PDF Using Maven - Shell\nDESCRIPTION: Calls Maven's 'exec:java' goal with 'pdf' as an argument to run the 'pdf()' method in the sample application's main class, exporting reports to PDF. Run from the specific sample directory, with Maven configured to handle main class argument parsing. Produces PDF output files in predefined locations.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java -Dexec.args=pdf\n```\n\n----------------------------------------\n\nTITLE: Executing the No XML Design JasperReports Sample with Maven\nDESCRIPTION: This shell command uses Apache Maven to build and run the 'noxmldesign' sample project. The `mvn clean compile exec:exec@all` command first cleans the project, then compiles the Java code (which includes the programmatic report design and compilation logic), and finally executes the report generation process defined by the `exec:exec` plugin with the `all` profile, outputting reports to the `target/reports` directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/noxmldesign/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Declaring Fields for Actor and Character in Cast Subreport - XML\nDESCRIPTION: Declares report fields for 'actor.name' and 'character' in the JasperReports Cast subreport template. The fields specify the Java class types for proper value mapping during report filling; hierarchical field referencing (actor.name) denotes property resolution into related entity objects. Data is expected to be populated already, with the main report passing the corresponding Java Bean collection as a data source to this subreport. This snippet presumes prior mapping between Java objects and report parameters.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql-j2ee/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\\\"actor.name\\\" class=\\\"java.lang.String\\\"/>\\n<field name=\\\"character\\\" class=\\\"java.lang.String\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Starting the Demo HSQLDB Database - Shell\nDESCRIPTION: Uses Maven to start the embedded HSQLDB demo database required for some sample reports. Run from the '/demo/hsqldb' directory. Assumes the existence of a Maven configuration capable of launching an HSQLDB instance via the 'exec:java' goal. Provides a running local database with demo data for sample reports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Creating Various List Types in HTML\nDESCRIPTION: This HTML snippet demonstrates different types of lists including unordered (bulleted), ordered (numbered), and ordered with custom start values and numbering styles (letters and Roman numerals).\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/markup/reports/html.txt#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<BR>\nThis is a bulleted list of fruits:\n<UL>\n<LI>apple</LI>\n<LI>banana</LI>\n<LI>cherry</LI>\n</UL>\n<BR>\nThis is a numbered list of sports starting with number 4:\n<OL start=\"4\">\n<LI>football</LI>\n<LI>rugby</LI>\n<LI>tennis</LI>\n</OL>\n<BR>\nThis is a lettered list of shapes starting with letter c:\n<OL type=\"a\" start=\"3\">\n<LI>circle</LI>\n<LI>ellipse</LI>\n<LI>rectangle</LI>\n</OL>\n<BR>\nFollowing is a numbered list of animals using Roman numerals and starting with number 3 (III):\n<OL type=\"I\" start=\"3\">\n<LI>lion</LI>\n<LI>elephant</LI>\n<LI>zebra</LI>\n</OL>\n<BR>\n```\n\n----------------------------------------\n\nTITLE: Building and Running JasperReports Sample with Maven - Shell\nDESCRIPTION: This shell command demonstrates how to clean, compile, and execute a JasperReports sample using Apache Maven version 3.6 or later. The command should be run from the demo/samples/stretch directory within the JasperReports source project. The output is a set of generated documents placed in the target/reports directory. Maven must be installed in the development environment beforehand.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/stretch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Print Expression in BarReport.jrxml (XML)\nDESCRIPTION: Shows the `<printWhenExpression>` element within the title section of `BarReport.jrxml`. It uses a Java expression `com.bar.SomeBarClass.isToPrint()` to determine if the title section should be printed. This requires the `com.bar.SomeBarClass` class to be available in the classpath during report generation.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/antupdate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<printWhenExpression><![CDATA[com.bar.SomeBarClass.isToPrint()]]></printWhenExpression>\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running the Sample with Maven - Bash\nDESCRIPTION: Provides the command to compile Java code, resolve dependencies, and execute the sample JasperReports application using Maven. Requires Maven 3.6 or higher, properly structured project (demo/samples/xmldatasource), and all source files provided. Input: None directly. Output: Reports generated in demo/samples/xmldatasource/target/reports directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xmldatasource/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Running Maven Build for JasperReports Sample - Shell\nDESCRIPTION: This shell command demonstrates how to compile and execute the JasperReports shapes demo using Apache Maven. It assumes Maven 3.6+ is installed, and must be run from the 'demo/samples/shapes' directory. After execution, reports are generated in the target/reports directory, supporting all configured output formats.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/shapes/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Setting CSV Query Language in JasperReports (XML)\nDESCRIPTION: This line sets the query language for the report to 'csv', instructing JasperReports to use the built-in CSV query executer for data source preparation. It must appear in the report's query section. No parameters are needed other than specifying the supported language name.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/csvdatasource/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<query language=\\\"csv\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Starting HSQLDB Server with Maven for JasperReports (Bash)\nDESCRIPTION: Shows the command-line steps required to launch the HSQLDB server bundled with JasperReports using Apache Maven. It assumes Maven is installed and executed within the appropriate project directory. No code dependencies except Maven and the JasperReports demo/hsqldb setup. Input: none; Output: starts HSQLDB server and keeps it running for report generation.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/daterange/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessible HTML Export in JasperReports\nDESCRIPTION: Shows the configuration property to enable accessible HTML export in JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/accessible/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nnet.sf.jasperreports.export.html.accessible\n```\n\n----------------------------------------\n\nTITLE: Running Batch Export via Maven - Shell Command\nDESCRIPTION: This shell command uses maven (mvn) to clean, compile, and execute the batch export sample. Requires Apache Maven (version 3.6+) and the correct working directory for the JasperReports batch export sample. Command compiles and runs all sample report generations, creating output files in the target directory. No parameters except shell context; output includes generated report files in multiple formats.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Initializing CSV Data Source in Java\nDESCRIPTION: Creates a JRCsvDataSource object by loading a CSV file, setting the record delimiter, and configuring column names. This prepares the CSV data to be used as a data source for filling a JasperReports report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/csvdatasource/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate static JRCsvDataSource getDataSource() throws JRException\n{\n  String[] columnNames = new String[]{\"city\", \"id\", \"name\", \"address\", \"state\"};\n  JRCsvDataSource ds = new JRCsvDataSource(JRLoader.getLocationInputStream(\"data/CsvDataSource.txt\"));\n  ds.setRecordDelimiter(\"\\r\\n\");\n  ds.setColumnNames(columnNames);\n  return ds;\n}\n```\n\n----------------------------------------\n\nTITLE: JSONQL Filter Expression Components\nDESCRIPTION: Breakdown of filter expression components showing the individual member accessors\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_18\n\nLANGUAGE: jsonql\nCODE:\n```\n(Freight > 200 && OrderDate *= \"1997\")\n```\n\n----------------------------------------\n\nTITLE: Building and Executing JasperReports Sample with Maven - Shell\nDESCRIPTION: The shell command uses Maven to clean, compile, and run all execution targets for the JasperReports Excel data adapter sample. Requires Apache Maven (v3.6+) and correct working directory. The result is that sample reports are generated into the project 'target/reports' directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldataadapter/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Running JasperReports Barcode Sample with Maven\nDESCRIPTION: Maven command to compile and execute the barcode sample report. Requires Apache Maven 3.6 or later and generates all supported document types in the target/reports directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/barcode4j/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Compiling and Executing JasperReports List Sample\nDESCRIPTION: Maven command to compile and execute the list component sample, generating reports in all supported document types.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/list/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running JasperReports Text Export Sample with Maven\nDESCRIPTION: This shell command uses Apache Maven to build and execute the text export sample project. It first cleans the project (`clean`), then compiles the source code (`compile`), and finally executes a specific configuration named `all` using the `exec:exec` plugin (`exec:exec@all`). This process generates the sample report exported to various formats, including plain text, typically placing them in the `target/reports` directory. The command should be run from the `demo/samples/text` directory after starting the HSQLDB server.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/text/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Running the Sample with Maven\nDESCRIPTION: Shell command for building and running the generic element sample using Maven.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/genericelement/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Starting the HSQLDB Server using Maven - Bash\nDESCRIPTION: Runs maven to launch the HSQLDB database server, which is required before running the report generation. Assumes Apache Maven is installed and environment variables set. No input parameters; starts DB server for subsequent reporting.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate-j2ee/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n> mvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Customer Field Mappings Definition\nDESCRIPTION: Defines field mappings for Customer data, specifying how JSON properties map to report fields.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsondatasource/README.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<field name=\"CustomerID\" class=\"java.lang.String\">\n  <property name=\"net.sf.jasperreports.json.field.expression\" value=\"CustomerID\"/>\n</field>\n<field name=\"CompanyName\" class=\"java.lang.String\">\n  <property name=\"net.sf.jasperreports.json.field.expression\" value=\"CompanyName\"/>\n</field>\n```\n\n----------------------------------------\n\nTITLE: Generating JasperReports Crosstab Sample Reports\nDESCRIPTION: Maven command to compile and execute the crosstab samples, which will generate all supported document types in the target/reports directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/crosstabs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> mvn clean compile exec:exec@\n```\n\n----------------------------------------\n\nTITLE: Calculating sum using Java 1.5 syntax in JasperReports (XML)\nDESCRIPTION: Shows how to calculate a sum of two Integer parameters using Java 1.5 syntax with autoboxing in a JasperReports expression.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/java1.5/README.md#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<expression><![CDATA[Integer.valueOf($P{A} + $P{B})]]></expression>\n```\n\n----------------------------------------\n\nTITLE: Default Paragraph Settings in JasperReports Properties\nDESCRIPTION: The default configuration values for paragraph properties in JasperReports, as defined in the default.jasperreports.properties file.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/paragraphs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\nnet.sf.jasperreports.default.line.spacing.size=1\nnet.sf.jasperreports.default.first.line.indent=0\nnet.sf.jasperreports.default.left.indent=0\nnet.sf.jasperreports.default.right.indent=0\nnet.sf.jasperreports.default.spacing.before=0\nnet.sf.jasperreports.default.spacing.after=0\nnet.sf.jasperreports.default.tab.stop.width=40\n```\n\n----------------------------------------\n\nTITLE: Generic Element Parameter Configuration\nDESCRIPTION: XML snippet showing how to define parameters for generic elements that will be passed to export handlers.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/genericelement/README.md#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<genericElementParameter name=\"ProjectID\">\n  <valueExpression class=\"java.lang.Integer\"><![CDATA[$P{JRProjectID}]] ></valueExpression>\n</genericElementParameter>\n```\n\n----------------------------------------\n\nTITLE: Calculating sum using Java 1.4 syntax in JasperReports (XML)\nDESCRIPTION: Demonstrates how to calculate a sum of two Integer parameters using Java 1.4 syntax in a JasperReports expression.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/java1.5/README.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<expression><![CDATA[Integer.valueOf($P{A}.intValue() + $P{B}.intValue())]]></expression>\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessible Table Component in JasperReports XML\nDESCRIPTION: Shows how to set a custom property to enable accessibility features for table components in JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/accessible/README.md#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<property name=\"net.sf.jasperreports.components.table.accessible\" value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: PDF/A Conformance Level Values\nDESCRIPTION: Possible values for PDF/A conformance levels that can be set using getPdfaConformance() configuration.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/pdfa/README.md#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\npdfa1a\npdfa1b\npdfa2a\npdfa2b\npdfa2u\npdfa3a\npdfa3b\npdfa3u\nnone\n```\n\n----------------------------------------\n\nTITLE: Compiling and Executing JasperReports Sample with Maven - Shell\nDESCRIPTION: This shell command runs the compilation and execution process for the JasperReports scriptlet sample. It uses Maven to clean, compile, and generate reports in all supported formats, assuming the HSQLDB server is running. Requires Maven and proper folder context ('demo/samples/scriptlet'). Output: all document formats are written to the 'demo/samples/scriptlet/target/reports' directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/scriptlet/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Defining Fields in JasperReports Subreport XML\nDESCRIPTION: Shows how to declare fields in a JasperReports subreport, including referencing nested properties of entities.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql/README.md#2025-04-22_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<field name=\"actor.name\" class=\"java.lang.String\"/>\n<field name=\"character\" class=\"java.lang.String\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Tagged PDF Export in JasperReports\nDESCRIPTION: Illustrates the configuration property to enable tagged PDF export for accessibility in JasperReports.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/accessible/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nnet.sf.jasperreports.export.pdf.tagged\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ordered Addresses with Dynamic HQL - JasperReports XML\nDESCRIPTION: Defines a dynamic HQL query for JasperReports, selecting addresses with customizable ordering and filtering by cities using the CityFilter parameter. Intended for use in a .jrxml report file as part of the main report query. Supports runtime parameterization of both exclusion filter and sort order for maximum flexibility in reporting.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hibernate/README.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n  <query language=\\\"hql\\\">\\n    <![CDATA[from Address address where city not in ($P{CityFilter}) order by $P!{OrderClause}]] >\\n  </query>\n```\n\n----------------------------------------\n\nTITLE: Extracting Array of Objects from JSON - JSON\nDESCRIPTION: This snippet shows the expected result when using a wildcard member expression to select all children objects from the Products key. It demonstrates how JSONQL evaluates wildcard expressions on a JSON object and aggregates values into an array of objects. Input is a JSON object accessed via a wild card expression, output is an array of inner objects representing individual products, with possible constraints on key uniformity.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jsonqldatasource/README.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[{\\n\\\"Id\\\": 123,\\n\\\"Category\\\": \\\"books\\\"\\n}, {\\n\\\"Id\\\": 234,\\n\\\"Category\\\": \\\"dvds\\\"\\n}]\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring EJBQL Query Hint in JasperReports\nDESCRIPTION: Demonstrates how to set a cache type hint for EJBQL queries using JasperReports properties.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/ejbql-j2ee/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.ejbql.query.hint.cacheType\" value=\"Shared\"/>\n```\n\n----------------------------------------\n\nTITLE: Writing In-Memory JasperReport to JRXML File - JasperReports Java\nDESCRIPTION: Java code snippet for extracting and writing the JRXML representation from an in-memory compiled JasperReport (.jasper) file using the JasperCompileManager.writeReportToXmlFile method. Relies on JasperReports classes and expects the file path to a compiled .jasper template. Outputs the XML (JRXML) design to file; execution time is printed for profiling.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/hyperlink/README.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic void writeXml() throws JRException\\n{\\n  long start = System.currentTimeMillis();\\n  JasperCompileManager.writeReportToXmlFile(\\\"build/reports/HyperlinkReport.jasper\\\");\\n  System.err.println(\\\"XML design creation time : \\\" + (System.currentTimeMillis() - start));\\n}\n```\n\n----------------------------------------\n\nTITLE: Filling JasperReports using JavaBean Data Sources (Java)\nDESCRIPTION: This snippet from `DataSourceApp.java` shows two methods, `fill3` and `fill4`, for filling a JasperReport. `fill3` uses a `JRBeanArrayDataSource` initialized with data from `CustomBeanFactory.getBeanArray()`. `fill4` uses a `JRBeanCollectionDataSource` initialized with data from `CustomBeanFactory.getBeanCollection()`. Both methods prepare parameters, instantiate the appropriate data source, and call `JasperFillManager.fillReportToFile` to generate the report file.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n public void fill3() throws JRException\n {\n  long start = System.currentTimeMillis();\n  //Preparing parameters\n  Map parameters = new HashMap();\n  parameters.put(\"ReportTitle\", \"Address Report\");\n  parameters.put(\"DataFile\", \"CustomBeanFactory.java - Bean Array\");\n\n  JasperFillManager.fillReportToFile(\"build/reports/DataSourceReport.jasper\",\n    parameters, new JRBeanArrayDataSource(CustomBeanFactory.getBeanArray()));\n  System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n }\n\n public void fill4() throws JRException\n {\n  long start = System.currentTimeMillis();\n  //Preparing parameters\n  Map parameters = new HashMap();\n  parameters.put(\"ReportTitle\", \"Address Report\");\n  parameters.put(\"DataFile\", \"CustomBeanFactory.java - Bean Collection\");\n\n  JasperFillManager.fillReportToFile(\"build/reports/DataSourceReport.jasper\",\n    parameters, new JRBeanCollectionDataSource(CustomBeanFactory.getBeanCollection()));\n  System.err.println(\"Filling time : \" + (System.currentTimeMillis() - start));\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Exporter Input in JRAbstractExporter (Java)\nDESCRIPTION: This method, part of the JRAbstractExporter class, is used to provide the input data to the exporter. It accepts an ExporterInput object which encapsulates the list of JasperPrint objects and their associated configuration settings required for the export process. Dependencies include the JRAbstractExporter class and the ExporterInput interface.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/batchexport/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void setExporterInput(ExporterInput exporterInput)\n```\n\n----------------------------------------\n\nTITLE: Markdown Header with Logo\nDESCRIPTION: Markdown header displaying the project title with an aligned SVG logo image.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/mondrian/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# JasperReports - Mondrian Sample <img src=\"../../resources/jasperreports.svg\" alt=\"JasperReports logo\" align=\"right\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling XLS Cell Type Detection in JasperReports JRXML\nDESCRIPTION: This JRXML snippet sets the `net.sf.jasperreports.export.xls.detect.cell.type` property to `true`. This configuration instructs JasperReports to automatically detect the data type of cells during XLS/XLSX export, which is a prerequisite for correctly exporting and evaluating formulas containing various data types like numbers, dates, or text. Without this, all cells might be exported as text.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsformula/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<property name=\"net.sf.jasperreports.export.xls.detect.cell.type\" value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Executing Report Fill with Bean Collection via Maven (Shell)\nDESCRIPTION: This Maven command cleans the project, compiles the source code, and executes the `DataSourceApp` Java application. The `exec.args=\"compile fill4 view\"` argument likely instructs the application to perform compilation steps, call the `fill4` method (which uses `JRBeanCollectionDataSource`), and then display the generated report.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/datasource/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:java -Dexec.args=\"compile fill4 view\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Static XLS Formula using <property> in JasperReports JRXML\nDESCRIPTION: This JRXML snippet demonstrates how to assign a simple static formula (the constant value 7) to a text field for XLS export using the `net.sf.jasperreports.export.xls.formula` property within a `<property>` tag. The `<expression>` tag provides a default value (0 in this case, although the example shows 7) for other export formats where the formula is not applicable.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/xlsformula/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<element kind=\"textField\" key=\"textField-1\"...>\n  <expression><![CDATA[7]] ></expression>\n  <property name=\"net.sf.jasperreports.export.xls.formula\" value=\"7\"/>\n  ...\n</element>\n```\n\n----------------------------------------\n\nTITLE: Running Maven Commands for Excel 2003 Metadata Export in JasperReports\nDESCRIPTION: Shell command to compile and execute the report generation process that produces Excel 2003 (.xls) format exports with metadata. This command produces the legacy Excel format which has fewer features than the XLSX format.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/jasper/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n>mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Supported Class Types for JasperReports Template Sources\nDESCRIPTION: Lists the valid Java class types that can be specified in the `class` attribute of the `<template>` element within a JRXML report definition. These classes indicate the type of the expression used to locate the style template source at fill time. The supported types allow referencing templates as strings (resolved as URL, file, or classpath resource), File objects, URL objects, InputStreams, or pre-compiled JRTemplate objects.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/templates/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\njava.lang.String\njava.io.File\njava.net.URL\njava.io.InputStream\nnet.sf.jasperreports.engine.JRTemplate\n```\n\n----------------------------------------\n\nTITLE: Setting the Default JavaScript Compiler Property\nDESCRIPTION: Specifies the default class (`net.sf.jasperreports.compilers.JavaScriptCompiler`) used by JasperReports for compiling report expressions written in JavaScript. This configuration property `net.sf.jasperreports.compiler.javascript` indicates the compiler implementation to use when the report language is set to 'javascript'.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/groovy/README.md#2025-04-22_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nnet.sf.jasperreports.compiler.javascript=net.sf.jasperreports.compilers.JavaScriptCompiler\n```\n\n----------------------------------------\n\nTITLE: Generating JasperReports Query Sample Documents\nDESCRIPTION: Maven command to compile and execute the query sample, generating report documents in all supported formats. Must be run from the demo/samples/query directory.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/query/README.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n> mvn clean compile exec:exec@all\n```\n\n----------------------------------------\n\nTITLE: Configuring Excel XLS Data Adapter - JasperReports XML\nDESCRIPTION: This XML snippet configures a JasperReports Excel data adapter to read from a specific XLS file in direct data source mode. Key parameters include file name, header usage, column and sheet selection, and data formatting patterns. No query is executed; columns, indexes, and formats are explicitly specified, and the 'xlsdatasource2' sheet is accessed. The adapter is intended to be referenced in JRXML report definitions via the 'net.sf.jasperreports.data.adapter' property.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/exceldataadapter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<excelDataAdapter class=\\\"net.sf.jasperreports.data.excel.ExcelDataAdapterImpl\\\">\\n  <name>excel</name>\\n  <fileName>/data/XlsDataSource.data.xls</fileName>\\n  <useFirstRowAsHeader>false</useFirstRowAsHeader>\\n  <queryExecuterMode>false</queryExecuterMode>\\n  <numberPattern>#,##0</numberPattern>\\n  <datePattern>yyyy-MM-dd</datePattern>\\n  <columnNames>city</columnNames>\\n  <columnNames>id</columnNames>\\n  <columnNames>name</columnNames>\\n  <columnNames>address</columnNames>\\n  <columnNames>state</columnNames>\\n  <columnNames>date</columnNames>\\n  <columnIndexes>0</columnIndexes>\\n  <columnIndexes>2</columnIndexes>\\n  <columnIndexes>3</columnIndexes>\\n  <columnIndexes>4</columnIndexes>\\n  <columnIndexes>5</columnIndexes>\\n  <columnIndexes>6</columnIndexes>\\n  <sheetSelection>xlsdatasource2</sheetSelection>\\n  <format>xls</format>\\n</excelDataAdapter>\n```\n\n----------------------------------------\n\nTITLE: Loading Subreport Design from File in JasperReports - Java\nDESCRIPTION: This Java line demonstrates dynamically loading a compiled JasperReport (.jasper) file to obtain a JasperReport object reference for embedding as a subreport. Required dependencies include the jasperreports library and JRLoader utility. Inputs: filesystem path to the .jasper file. Outputs: a JasperReport object instance. The loaded design can be supplied as the subreport's design expression. File paths must be valid and accessible.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/subreport/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nJasperReport subreport = (JasperReport)JRLoader.loadObjectFromFile(\\\"build/reports/ProductReport.jasper\\\");\n```\n\n----------------------------------------\n\nTITLE: Declaring JRCommonRectangle Methods - JasperReports - Java\nDESCRIPTION: This Java snippet outlines interface methods for manipulating corner radius properties of rectangle shapes in JasperReports. The radius controls whether rectangle corners are rounded; implementations must provide getter and setter logic. These methods form part of the rectangle's configuration contract.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/shapes/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic int getRadius();\\npublic Integer getOwnRadius();\\npublic void setRadius(Integer radius);\n```\n\n----------------------------------------\n\nTITLE: Specifying JavaScript as the Report Language - JasperReports XML\nDESCRIPTION: Declares the scripting language for report expressions in a JasperReports template. Setting the language attribute to \\\"javascript\\\" enables the use of JavaScript syntax for embedded expressions throughout the template. No additional dependencies are required outside standard JasperReports setup, and this line should appear within the root <jasperReport> element.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/demo/samples/javascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nlanguage=\\\"javascript\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining ANTLR Token Types for JsonQueryParser\nDESCRIPTION: This snippet defines the integer constants representing token types for a JSON query parser. Generated by ANTLR 2.7.5 from 'json_grammar.g', it establishes the vocabulary (e.g., PATH, MEMBER, STRING, EQ, LITERAL_null) used by the parser to recognize elements in a JSON query string. Each token name is assigned a unique integer value.\nSOURCE: https://github.com/jaspersoft/jasperreports/blob/master/ext/json/src/main/resources/net/sf/jasperreports/json/parser/JsonQueryParserTokenTypes.txt#2025-04-22_snippet_0\n\nLANGUAGE: ANTLR Token Definition\nCODE:\n```\n// $ANTLR 2.7.5 (20050128): json_grammar.g -> JsonQueryParserTokenTypes.txt$\nJsonQueryParser    // output token vocab name\nPATH=4\nMEMBER=5\nSIMPLE_KEY=6\nCOMPLEX_KEY=7\nOBJECT_CONSTRUCTION=8\nARRAY_INDEX=9\nARRAY_CONSTRUCTION=10\nARRAY_SLICE=11\nMULTI_LEVEL_UP=12\nFILTER=13\nABSOLUTE=14\nDOT=15\nDOTDOT=16\nID=17\nWILDCARD=18\nLBRACKET=19\nSTRING=20\nRBRACKET=21\nCOMMA=22\nINT=23\nSEMI=24\nCARET=25\nLCURLY=26\nRCURLY=27\nLPAREN=28\nRPAREN=29\nOR=30\nAND=31\nNOT=32\nAT_IS_NULL=33\nAT_IS_NOT_NULL=34\nAT_IS_ARRAY=35\nAT_IS_OBJECT=36\nAT_IS_VALUE=37\nAT_SIZE=38\nEQ=39\nNE=40\nLT=41\nLE=42\nGT=43\nGE=44\nAT_VALUE=45\nCONTAINS=46\nREAL=47\nLITERAL_null=\"null\"=48\nLITERAL_true=\"true\"=49\nLITERAL_false=\"false\"=50\nTYPE_CHECK=51\nID_OR_ABSOLUTE=52\nINT_OR_REAL_OR_DOTS=53\nNEWLINE=54\nSINGLE_LINE_COMMENT=55\nMULTI_LINE_COMMENT=56\nWS=57\nDIGIT=58\nFRAC=59\nEXP=60\nESC=61\nID_START_LETTER=62\nID_LETTER=63\n```"
  }
]