[
  {
    "owner": "nuxt-modules",
    "repo": "i18n",
    "content": "TITLE: Implementing Language Switcher in Vue with Nuxt i18n\nDESCRIPTION: This snippet demonstrates how to create a language switcher component using the Nuxt i18n module. It uses the useI18n and useSwitchLocalePath composables to manage locales and generate localized paths.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/08.lang-switcher.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { locale, locales } = useI18n()\nconst switchLocalePath = useSwitchLocalePath()\n\nconst availableLocales = computed(() => {\n  return locales.value.filter(i => i.code !== locale.value)\n})\n</script>\n\n<template>\n  <NuxtLink v-for=\"locale in availableLocales\" :key=\"locale.code\" :to=\"switchLocalePath(locale.code)\">\n    {{ locale.name }}\n  </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Route Localization\nDESCRIPTION: Example of using useLocaleRoute for programmatic route handling with additional parameters\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/02.usage.md#2025-04-10_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst localeRoute = useLocaleRoute()\nfunction onClick() {\n  const route = localeRoute({ name: 'user-profile', query: { foo: '1' } })\n  if (route) {\n    return navigateTo(route.fullPath)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"onClick\">Show profile</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multilingual Page in Nuxt (Vue)\nDESCRIPTION: Creates a Vue component for the index page with multilingual support, including page metadata and language switching functionality.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/06.seo.md#2025-04-10_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefinePageMeta({\n  title: 'pages.title.top' // set resource key\n})\n\nconst { locale, locales, t } = useI18n()\nconst switchLocalePath = useSwitchLocalePath()\n\nconst availableLocales = computed(() => {\n  return locales.value.filter(i => i.code !== locale.value)\n})\n</script>\n\n<template>\n  <div>\n    <p>{{ t('pages.top.description') }}</p>\n    <p>{{ t('pages.top.languages') }}</p>\n    <nav>\n      <template v-for=\"(locale, index) in availableLocales\" :key=\"locale.code\">\n        <span v-if=\"index\"> | </span>\n        <NuxtLink :to=\"switchLocalePath(locale.code)\">\n          {{ locale.name ?? locale.code }}\n        </NuxtLink>\n      </template>\n    </nav>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Page with Language Switching (Vue)\nDESCRIPTION: Creates a Vue component for the index page with localized content, page metadata, and language switching functionality using Nuxt i18n composables.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/06.seo.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefinePageMeta({\n  title: 'pages.title.top' // set resource key\n})\n\nconst { locale, locales, t } = useI18n()\nconst switchLocalePath = useSwitchLocalePath()\n\nconst availableLocales = computed(() => {\n  return locales.value.filter(i => i.code !== locale.value)\n})\n</script>\n\n<template>\n  <div>\n    <p>{{ t('pages.top.description') }}</p>\n    <p>{{ t('pages.top.languages') }}</p>\n    <nav>\n      <template v-for=\"(locale, index) in availableLocales\" :key=\"locale.code\">\n        <span v-if=\"index\"> | </span>\n        <NuxtLink :to=\"switchLocalePath(locale.code)\">\n          {{ locale.name ?? locale.code }}\n        </NuxtLink>\n      </template>\n    </nav>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt I18n Module in TypeScript\nDESCRIPTION: Basic configuration for Nuxt i18n module defining default locale and available languages with their respective properties\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/02.usage.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n  i18n: {\n    defaultLocale: 'en',\n    locales: [\n      { code: 'en', name: 'English', file: 'en.json' },\n      { code: 'nl', name: 'Nederlands', file: 'nl.json' }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using NuxtLinkLocale for Localized Navigation\nDESCRIPTION: Demonstrates how to use the NuxtLinkLocale component to create localized links in a Vue template. The component automatically resolves the correct path based on the current locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { t } = useI18n()\n</script>\n\n<template>\n  <NuxtLinkLocale to=\"about\"> {{ t('about') }} </NuxtLinkLocale>\n  <NuxtLinkLocale to=\"services-advanced\"> {{ t('advanced') }} </NuxtLinkLocale>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing useLocalePath in Vue Component\nDESCRIPTION: Example of using useLocalePath composable in a Vue component to create localized route paths. Shows how to use the composable with NuxtLink for internationalized navigation.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/01.use-locale-path.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst localePath = useLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"localePath('index')\">{{ $t('home') }}</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing SEO in Nuxt Layout (Vue)\nDESCRIPTION: Sets up the default layout component with SEO metadata using the useLocaleHead composable and Nuxt's built-in Head management components.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/06.seo.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst route = useRoute()\nconst { t } = useI18n()\nconst head = useLocaleHead()\nconst title = computed(() => t(route.meta.title ?? 'TBD', t('layouts.title'))\n);\n</script>\n\n<template>\n  <div>\n    <Html :lang=\"head.htmlAttrs.lang\" :dir=\"head.htmlAttrs.dir\">\n      <Head>\n        <Title>{{ title }}</Title>\n        <template v-for=\"link in head.link\" :key=\"link.hid\">\n          <Link :id=\"link.hid\" :rel=\"link.rel\" :href=\"link.href\" :hreflang=\"link.hreflang\" />\n        </template>\n        <template v-for=\"meta in head.meta\" :key=\"meta.hid\">\n          <Meta :id=\"meta.hid\" :property=\"meta.property\" :content=\"meta.content\" />\n        </template>\n      </Head>\n      <Body>\n        <slot />\n      </Body>\n    </Html>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Language Switcher with Locale Persistence\nDESCRIPTION: Implements a language switcher that properly persists the selected locale using setLocale function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/08.lang-switcher.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { locale, locales, setLocale } = useI18n()\n\nconst availableLocales = computed(() => {\n  return locales.value.filter(i => i.code !== locale.value)\n})\n</script>\n\n<template>\n  ...\n  <a href=\"#\" v-for=\"locale in availableLocales\" :key=\"locale.code\" @click.prevent.stop=\"setLocale(locale.code)\">\n    {{ locale.name }}\n  </a>\n  ...\n</template>\n```\n\n----------------------------------------\n\nTITLE: Language Switching Navigation\nDESCRIPTION: Implementation of language switching using $switchLocalePath in both template and script contexts\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/02.usage.md#2025-04-10_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink :to=\"$switchLocalePath('en')\">English</NuxtLink>\n  <NuxtLink :to=\"$switchLocalePath('nl')\">Nederlands</NuxtLink>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst switchLocalePath = useSwitchLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"switchLocalePath('en')\">English</NuxtLink>\n  <NuxtLink :to=\"switchLocalePath('nl')\">Nederlands</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing SEO Metadata in Nuxt Layout Component (Vue)\nDESCRIPTION: Sets up the default layout component with useLocaleHead to generate SEO metadata, including title, language attributes, and meta tags for internationalization.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/06.seo.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst route = useRoute()\nconst { t } = useI18n()\nconst head = useLocaleHead({\n  addDirAttribute: true,\n  identifierAttribute: 'id',\n  addSeoAttributes: true\n})\nconst title = computed(() => t(route.meta.title ?? 'TBD', t('layouts.title'))\n);\n</script>\n\n<template>\n  <div>\n    <Html :lang=\"head.htmlAttrs.lang\" :dir=\"head.htmlAttrs.dir\">\n      <Head>\n        <Title>{{ title }}</Title>\n        <template v-for=\"link in head.link\" :key=\"link.id\">\n          <Link :id=\"link.id\" :rel=\"link.rel\" :href=\"link.href\" :hreflang=\"link.hreflang\" />\n        </template>\n        <template v-for=\"meta in head.meta\" :key=\"meta.id\">\n          <Meta :id=\"meta.id\" :property=\"meta.property\" :content=\"meta.content\" />\n        </template>\n      </Head>\n      <Body>\n        <slot />\n      </Body>\n    </Html>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useLocaleHead in Vue Component Setup\nDESCRIPTION: Example of using the useLocaleHead composable in a Vue component's setup script. It demonstrates how to configure SEO attributes and use the returned values with useHead for managing HTML attributes, links, and meta tags.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/04.use-locale-head.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst i18nHead = useLocaleHead({\n  seo: {\n    canonicalQueries: ['foo']\n  }\n})\nuseHead(() => ({\n  htmlAttrs: {\n    lang: i18nHead.value.htmlAttrs!.lang\n  },\n  link: [...(i18nHead.value.link || [])],\n  meta: [...(i18nHead.value.meta || [])]\n}))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt i18n Module in nuxt.config.ts\nDESCRIPTION: This snippet shows how to configure the Nuxt i18n module in the nuxt.config.ts file. It sets up the module and specifies the path to the i18n configuration file.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/02.usage.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n  i18n: {\n    vueI18n: './i18n.config.ts' // if you are using custom path, default\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Localized Route Navigation Examples\nDESCRIPTION: Examples of using $localePath for route localization in template and script contexts\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/02.usage.md#2025-04-10_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink :to=\"$localePath('index')\">{{ $t('home') }}</NuxtLink>\n  <NuxtLink :to=\"$localePath('index', 'en')\">Homepage in English</NuxtLink>\n  <NuxtLink :to=\"$localePath('user-profile')\">Route to {{ $t('profile') }}</NuxtLink>\n  <NuxtLink :to=\"$localePath({ name: 'category-slug', params: { slug: category.slug } })\">\n    {{ category.title }}\n  </NuxtLink>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst localePath = useLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"localePath('index')\">{{ $t('home') }}</NuxtLink>\n  <NuxtLink :to=\"localePath('index', 'en')\">Homepage in English</NuxtLink>\n  <NuxtLink :to=\"localePath('user-profile')\">Route to {{ $t('profile') }}</NuxtLink>\n  <NuxtLink :to=\"localePath({ name: 'category-slug', params: { slug: category.slug } })\">\n    {{ category.title }}\n  </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n in a Vue Component\nDESCRIPTION: This snippet shows how to use i18n in a Vue component. It includes language switching buttons and displays a translated welcome message.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/02.usage.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { locale, setLocale } = useI18n()\n</script>\n\n<template>\n  <div>\n    <div>\n      <button @click=\"setLocale('en')\">en</button>\n      <button @click=\"setLocale('fr')\">fr</button>\n      <p>{{ $t('welcome') }}</p>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining i18n Configuration in i18n.config.ts\nDESCRIPTION: This snippet demonstrates how to define the i18n configuration in a separate i18n.config.ts file. It sets up locales and messages for internationalization.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/02.usage.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nConfig(() => ({\n  legacy: false,\n  locale: 'en',\n  messages: {\n    en: {\n      welcome: 'Welcome'\n    },\n    fr: {\n      welcome: 'Bienvenue'\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Fallback Options in Nuxt.js Configuration\nDESCRIPTION: This snippet demonstrates how to set up various locale fallback options in the Nuxt.js configuration file. It shows three different approaches: setting a single fallback locale, an array of fallback locales, and a decision map for more specific fallback scenarios.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/14.locale-fallback.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodules: [\n  '@nuxtjs/i18n'\n],\n\ni18n: {\n    vueI18n: {\n        fallbackLocale: 'en',\n        // or\n        fallbackLocale: ['en', 'fr'],\n        // or\n        fallbackLocale: {\n            'de-CH':   ['fr', 'it'],\n            'zh-Hant': ['zh-Hans'],\n            'es-CL':   ['es-AR'],\n            'es':      ['en-GB'],\n            'pt':      ['es-AR'],\n            'default': ['en', 'da']\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt i18n for Link Localization\nDESCRIPTION: This snippet demonstrates how to configure Nuxt i18n for link localization by setting locales and defaultLocale in the nuxt.config.ts file.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/02.usage.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n\n  i18n: {\n    locales: ['en', 'fr'], // used in URL path prefix\n    defaultLocale: 'en', // default locale of your project for Nuxt pages and routings\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using NuxtLinkLocale for Localized Navigation\nDESCRIPTION: Example of using the NuxtLinkLocale component to create links that automatically use the correct localized paths based on the current locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { t } = useI18n()\n</script>\n\n<template>\n  <NuxtLinkLocale to=\"about\"> {{ t('about') }} </NuxtLinkLocale>\n  <NuxtLinkLocale to=\"services-advanced\"> {{ t('advanced') }} </NuxtLinkLocale>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Routing Strategy in Nuxt\nDESCRIPTION: Shows how to configure the i18n routing strategy in the Nuxt configuration file. Includes setting the strategy to 'prefix_except_default' and defining 'en' as the default locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/01.index.md#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n\n  i18n: {\n    strategy: 'prefix_except_default',\n    defaultLocale: 'en'\n  }\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating French Translation File\nDESCRIPTION: Example of a French translation file that can be loaded lazily. Shows both async function approach with defineI18nLocale and direct object export patterns.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/07.lazy-load-translations.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nLocale(async locale => {\n  return {\n    welcome: 'Bienvenue'\n  }\n})\n\n// or\n\nexport default {\n  welcome: 'Bienvenue'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Language Switcher Implementation in Vue\nDESCRIPTION: Demonstrates a basic language switcher component that displays available locales and allows switching between them using NuxtLink.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/08.lang-switcher.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { locale, locales } = useI18n()\nconst switchLocalePath = useSwitchLocalePath()\n\nconst availableLocales = computed(() => {\n  return locales.value.filter(i => i.code !== locale.value)\n})\n</script>\n\n<template>\n  <NuxtLink v-for=\"locale in availableLocales\" :key=\"locale.code\" :to=\"switchLocalePath(locale.code)\">\n    {{ locale.name }}\n  </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Parameters with i18n\nDESCRIPTION: Shows how to handle dynamic route parameters with translations using useSetI18nParams composable.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/08.lang-switcher.md#2025-04-10_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// fetch product from API... (red mug)\n\nconst setI18nParams = useSetI18nParams()\nsetI18nParams({\n  en: { slug: data.slugs.en }, // slug: 'red-mug'\n  nl: { slug: data.slugs.nl } // slug: 'rode-mok'\n})\n\nconst switchLocalePath = useSwitchLocalePath()\nswitchLocalePath('en') // /products/red-mug\nswitchLocalePath('nl') // /nl/products/rode-mok\n</script>\n\n<template>\n  <!-- pages/products/[slug].vue -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using switchLocalePath Helper with nuxt-link in Vue.js\nDESCRIPTION: This snippet shows how to use the switchLocalePath helper function with nuxt-link to create links for switching between different languages on the current page.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/02.basic-usage.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<nuxt-link :to=\"switchLocalePath('en')\">English</nuxt-link>\n<nuxt-link :to=\"switchLocalePath('fr')\">Français</nuxt-link>\n```\n\n----------------------------------------\n\nTITLE: Basic Language Switcher Implementation\nDESCRIPTION: Vue component implementing a language switcher with translation display using the i18n composable\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/02.usage.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { locales, setLocale } = useI18n()\n</script>\n\n<template>\n  <div>\n    <button v-for=\"locale in locales\" @click=\"setLocale(locale.code)\">\n      {{ locale.name }}\n    </button>\n    <h1>{{ $t('welcome') }}</h1>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using SwitchLocalePathLink Component in Vue\nDESCRIPTION: Demonstrates the usage of SwitchLocalePathLink component for creating links to switch between different locales of the same page. This component internally uses switchLocalePath to generate the correct localized route.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/02.components.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SwitchLocalePathLink locale=\"nl\">Dutch</SwitchLocalePathLink>\n  <SwitchLocalePathLink locale=\"en\">English</SwitchLocalePathLink>\n</template>\n\n<!-- equivalent to -->\n\n<script setup>\nconst switchLocalePath = useSwitchLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"switchLocalePath('nl')\">Dutch</NuxtLink>\n  <NuxtLink :to=\"switchLocalePath('en')\">English</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales in Nuxt Config for i18n\nDESCRIPTION: This snippet shows how to configure the locales in the Nuxt configuration file for the i18n module. It defines multiple languages with their respective codes and display names.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/08.lang-switcher.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        name: 'English'\n      },\n      {\n        code: 'es',\n        name: 'Español'\n      },\n      {\n        code: 'fr',\n        name: 'Français'\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generated Routes Structure Example in Nuxt i18n\nDESCRIPTION: An example of how Nuxt i18n module generates routes with locale prefixes for both English (default) and French languages based on a simple page structure.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/01.index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    path: \"/\",\n    name: \"index___en\",\n    ...\n  },\n  {\n    path: \"/fr/\",\n    name: \"index___fr\",\n    ...\n  },\n  {\n    path: \"/about\",\n    name: \"about___en\",\n    ...\n  },\n  {\n    path: \"/fr/about\",\n    name: \"about___fr\",\n    ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n Custom Block with JSON\nDESCRIPTION: Demonstrates how to implement component-level translations using i18n custom blocks with JSON syntax. Uses useI18n hook with local scope and shows translations for English and Japanese.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/12.per-component-translations.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { t } = useI18n({\n  useScope: 'local'\n})\n</script>\n\n<template>\n  <p>{{ t('hello') }}</p>\n</template>\n\n<i18n lang=\"json\">\n{\n  \"en\": {\n    \"hello\": \"hello world!\"\n  },\n  \"ja\": {\n    \"hello\": \"こんにちは、世界!\"\n  }\n}\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Customizing Canonical Link Generation (Vue)\nDESCRIPTION: Demonstrates how to customize the generation of canonical links by specifying which query parameters should be included using the canonicalQueries option in useLocaleHead.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/06.seo.md#2025-04-10_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst i18nHead = useLocaleHead({\n  addSeoAttributes: {\n    canonicalQueries: ['foo']\n  }\n})\nuseHead(() => ({\n  htmlAttrs: {\n    lang: i18nHead.value.htmlAttrs!.lang\n  },\n  link: [...(i18nHead.value.link || [])],\n  meta: [...(i18nHead.value.meta || [])]\n}))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Language Switcher with Nuxt-link in Vue\nDESCRIPTION: This snippet demonstrates how to create a language switcher using nuxt-link components that display each available locale. It uses the switchLocalePath method to generate the correct URLs for each language option.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/12.lang-switcher.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<nuxt-link v-for=\"locale in availableLocales\" :key=\"locale.code\" :to=\"switchLocalePath(locale.code)\">\n{{ locale.name }}\n</nuxt-link>\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Configuration with Function Export\nDESCRIPTION: Shows how to configure Vue I18n using a function export with defineI18nConfig for better type inference. Imports separate locale files and configures multiple languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/01.index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport en from '../locales/en.json'\nimport fr from '../locales/fr.yaml'\n\n// You can use `defineI18nConfig` to get type inferences for options to pass to vue-i18n.\nexport default defineI18nConfig(() => {\n  return {\n    legacy: false,\n    locale: 'en',\n    messages: {\n      en,\n      fr\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Translation Function in TypeScript\nDESCRIPTION: Example of how to use the Vue I18n translation function in TypeScript with proper type annotations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n$tc()\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Switcher with Locale Persistence\nDESCRIPTION: This snippet demonstrates how to implement a language switcher that persists the selected locale using the setLocale method from the useI18n composable.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/08.lang-switcher.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { locale, locales, setLocale } = useI18n()\n\nconst availableLocales = computed(() => {\n  return locales.value.filter(i => i.code !== locale.value)\n})\n</script>\n\n<template>\n  ...\n  <a href=\"#\" v-for=\"locale in availableLocales\" :key=\"locale.code\" @click.prevent.stop=\"setLocale(locale.code)\">\n    {{ locale.name }}\n  </a>\n  ...\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Locales in i18n.config.ts\nDESCRIPTION: Shows three different ways to configure fallback locales in Nuxt i18n: single locale, array of locales, or a detailed mapping object for specific language variants. The configuration defines which languages to fall back to when translations are missing.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/11.locale-fallback.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  fallbackLocale: 'en',\n  // or\n  fallbackLocale: ['en', 'fr'],\n  // or\n  fallbackLocale: {\n    'de-CH': ['fr', 'it'],\n    'zh-Hant': ['zh-Hans'],\n    'es-CL': ['es-AR'],\n    es: ['en-GB'],\n    pt: ['es-AR'],\n    default: ['en', 'da']\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using localePath Helper with nuxt-link in Vue.js\nDESCRIPTION: This snippet demonstrates how to use the localePath helper function with nuxt-link to generate localized URLs for internal links in a Vue.js component.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/02.basic-usage.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<nuxt-link :to=\"localePath('index')\">{{ $t('home') }}</nuxt-link>\n<nuxt-link :to=\"localePath('/')\">{{ $t('home') }}</nuxt-link>\n<nuxt-link :to=\"localePath('index', 'en')\">Homepage in English</nuxt-link>\n<nuxt-link :to=\"localePath('/app/profile')\">Route by path to: {{ $t('Profile') }}</nuxt-link>\n<nuxt-link :to=\"localePath('app-profile')\">Route by name to: {{ $t('Profile') }}</nuxt-link>\n<nuxt-link :to=\"localePath({ name: 'category-slug', params: { slug: category.slug } })\">\n  {{ category.title }}\n</nuxt-link>\n<!-- It's also allowed to omit 'name' and 'path'. -->\n<nuxt-link :to=\"localePath({ params: { slug: 'ball' } })\">{{ category.title }}</nuxt-link>\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Detector for Nuxt i18n\nDESCRIPTION: This snippet demonstrates how to define a locale detector function using defineI18nLocaleDetector. It attempts to detect the locale from query parameters, cookies, and headers.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/16.server-side-translations.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Detect based on query, cookie, header\nexport default defineI18nLocaleDetector((event, config) => {\n  // try to get locale from query\n  const query = tryQueryLocale(event, { lang: '' }) // disable locale default value with `lang` option\n  if (query) {\n    return query.toString()\n  }\n\n  // try to get locale from cookie\n  const cookie = tryCookieLocale(event, { lang: '', name: 'i18n_locale' }) // disable locale default value with `lang` option\n  if (cookie) {\n    return cookie.toString()\n  }\n\n  // try to get locale from header (`accept-header`)\n  const header = tryHeaderLocale(event, { lang: '' }) // disable locale default value with `lang` option\n  if (header) {\n    return header.toString()\n  }\n\n  // If the locale cannot be resolved up to this point, it is resolved with the value `defaultLocale` of the locale config passed to the function\n  return config.defaultLocale\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported Languages for a Specific Route in Nuxt\nDESCRIPTION: This snippet demonstrates how to specify supported languages for a particular route (about page) directly in the Vue component file. It overrides the global i18n settings for this specific route.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/08.ignoring-localized-routes.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  nuxtI18n: {\n    locales: ['fr', 'es']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLocaleHead in Vue 3 Component\nDESCRIPTION: Shows how to use the useLocaleHead composable to set localized head properties in a Vue 3 component.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst i18nHead = useLocaleHead({\n  addSeoAttributes: {\n    canonicalQueries: ['foo']\n  }\n})\nuseHead(() => ({\n  htmlAttrs: {\n    lang: i18nHead.value.htmlAttrs!.lang\n  },\n  link: [...(i18nHead.value.link || [])],\n  meta: [...(i18nHead.value.meta || [])]\n}))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Language Switcher Component Implementation\nDESCRIPTION: Vue component implementation for a language switcher using regular anchor tags when working with different domains. Uses the useI18n and useSwitchLocalePath composables.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/09.different-domains.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { locale, locales } = useI18n()\nconst switchLocalePath = useSwitchLocalePath()\n\nconst availableLocales = computed(() => {\n  return locales.value.filter(i => i.code !== locale.value)\n})\n</script>\n\n<template>\n  ...\n  <a v-for=\"locale in availableLocales\" :href=\"switchLocalePath(locale.code)\" :key=\"locale.code\">\n    {{ locale.code }}\n  </a>\n  ...\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt i18n Module in Nuxt Config\nDESCRIPTION: Basic configuration to add @nuxtjs/i18n to the modules array in Nuxt configuration file.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/01.index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n']\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Switching with useSwitchLocalePath\nDESCRIPTION: This snippet demonstrates how to use the useSwitchLocalePath composable to create language switching links in a Vue component.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/02.usage.md#2025-04-10_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst switchLocalePath = useSwitchLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"switchLocalePath('en')\">English</NuxtLink>\n  <NuxtLink :to=\"switchLocalePath('fr')\">Français</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page-Specific Locales in Vue Component\nDESCRIPTION: Demonstrates how to specify supported languages for a specific page component using the defineI18nRoute composable. This example limits the page to only French and Spanish localizations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/04.ignoring-localized-routes.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  locales: ['fr', 'es']\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Domains in Nuxt i18n Module\nDESCRIPTION: Configuration example for setting up different domains for multiple languages in Nuxt using the i18n module. This includes setting the differentDomains option to true and configuring domain names for each locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/09.different-domains.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        domain: 'mydomain.com'\n      },\n      {\n        code: 'es',\n        domain: 'es.mydomain.com'\n      },\n      {\n        code: 'fr',\n        domain: 'fr.mydomain.com'\n      },\n      {\n        code: 'pl',\n        domain: 'http://pl.mydomain.com'\n      },\n      {\n        code: 'ua',\n        domain: 'https://ua.mydomain.com'\n      }\n    ],\n    differentDomains: true\n    // Or enable the option in production only\n    // differentDomains: (process.env.NODE_ENV === 'production')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Routes for Dynamic Pages\nDESCRIPTION: Using defineI18nRoute to set custom paths for dynamic routes with parameters in different languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  paths: {\n    en: '/articles/[name]',\n    es: '/artículo/[name]'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt i18n Module with Inline Options\nDESCRIPTION: Alternative way to set i18n module options by passing an array to the modules property in Nuxt configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/01.index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    [\n      '@nuxtjs/i18n',\n      {\n        // Module Options\n      }\n    ]\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of NuxtLinkLocale Component in Vue\nDESCRIPTION: Demonstrates the basic usage of the NuxtLinkLocale component to create a link to a localized homepage route, compared with the equivalent implementation using NuxtLink and localePath().\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/05.components/01.nuxt-link-locale.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLinkLocale to=\"/\">{{ $t('home') }}</NuxtLinkLocale>\n</template>\n\n<!-- equivalent to -->\n\n<script setup>\nconst localePath = useLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"localePath('/')\">{{ $t('home') }}</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n Runtime Hooks in Nuxt Plugin (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the i18n runtime hooks in a Nuxt plugin. It shows the implementation of 'i18n:beforeLocaleSwitch' and 'i18n:localeSwitched' hooks, which are called before and after a locale switch respectively. The hooks provide access to the old and new locales, and allow for custom logic to be executed during language changes.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/02.runtime-hooks.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(nuxtApp => {\n  // called right before setting a new locale\n  nuxtApp.hook('i18n:beforeLocaleSwitch', ({ oldLocale, newLocale, initialSetup, context }) => {\n    console.log('onBeforeLanguageSwitch', oldLocale, newLocale, initialSetup)\n  })\n\n  // called right after a new locale has been set\n  nuxtApp.hook('i18n:localeSwitched', ({ oldLocale, newLocale }) => {\n    console.log('onLanguageSwitched', oldLocale, newLocale)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy-loading in Nuxt Config\nDESCRIPTION: Basic configuration of Nuxt i18n module to enable lazy-loading of translations. This snippet demonstrates how to set up the module with multiple locale files in different formats.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/07.lazy-load-translations.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        file: 'en-US.json'\n      },\n      {\n        code: 'es',\n        file: 'es-ES.js'\n      },\n      {\n        code: 'fr',\n        file: 'fr-FR.ts'\n      }\n    ],\n    lazy: true,\n    langDir: 'lang',\n    defaultLocale: 'en'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales in Nuxt Config (TypeScript)\nDESCRIPTION: Sets up the locales option in the Nuxt configuration file, defining language codes and their corresponding full language tags.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/06.seo.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        language: 'en-US'\n      },\n      {\n        code: 'es',\n        language: 'es-ES'\n      },\n      {\n        code: 'fr',\n        language: 'fr-FR'\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic URL Localization in Nuxt Config\nDESCRIPTION: Demonstrates how to configure localized paths for a basic page structure with nested routes. The example shows French translations for various routes.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    customRoutes: 'config',\n    pages: {\n      me: {\n        fr: '/moi'\n      },\n      about: {\n        fr: '/a-propos'\n      },\n      services: {\n        fr: '/offres'\n      },\n      'services-advanced': {\n        fr: '/offres/avancee'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n Callbacks in Nuxt Plugin\nDESCRIPTION: This snippet demonstrates how to define onBeforeLanguageSwitch and onLanguageSwitched callbacks in a Nuxt plugin. These callbacks are used to perform actions before and after a language switch occurs in the application.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/04.callbacks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ({ app }) {\n  // onBeforeLanguageSwitch called right before setting a new locale\n  app.i18n.onBeforeLanguageSwitch = (oldLocale, newLocale, isInitialSetup, context) => {\n    console.log(oldLocale, newLocale, isInitialSetup)\n  }\n  // onLanguageSwitched called right after a new locale has been set\n  app.i18n.onLanguageSwitched = (oldLocale, newLocale) => {\n    console.log(oldLocale, newLocale)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Browser Language Detection in Nuxt i18n\nDESCRIPTION: This snippet demonstrates how to completely disable the browser language detection feature in the Nuxt i18n module by setting the detectBrowserLanguage option to false.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/05.browser-language-detection.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    // ...\n    detectBrowserLanguage: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Browser Language Detection in Nuxt i18n (TypeScript)\nDESCRIPTION: Basic configuration for browser language detection in @nuxtjs/i18n. Sets up the module to use cookies for storing detected language preference and redirects only on root path visits for better SEO.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/09.browser-language-detection.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  detectBrowserLanguage: {\n    useCookie: true,\n    cookieKey: 'i18n_redirected',\n    redirectOn: 'root',  // recommended\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring locales with iso codes in nuxt.config.ts\nDESCRIPTION: Configuration example showing how to set up the locales option as an array of objects with iso codes, which is required for SEO features.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/10.seo.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  locales: [\n    {\n      code: 'en',\n      iso: 'en-US'\n    },\n    {\n      code: 'es',\n      iso: 'es-ES'\n    },\n    {\n      code: 'fr',\n      iso: 'fr-FR'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Routes in Nuxt Config for I18n\nDESCRIPTION: Sets up custom route paths for different locales in the Nuxt configuration file. The example shows how to create localized versions of the 'about' route in English, French, and Spanish.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    customRoutes: 'config', // disable custom route with page components\n    pages: {\n      about: {\n        en: '/about-us', // -> accessible at /about-us (no prefix since it's the default locale)\n        fr: '/a-propos', // -> accessible at /fr/a-propos\n        es: '/sobre' // -> accessible at /es/sobre\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Language Detection in Nuxt i18n\nDESCRIPTION: This snippet demonstrates how to configure the detectBrowserLanguage option in the Nuxt configuration file. It sets up cookie usage, defines the cookie key, and specifies when to perform the redirection.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/05.browser-language-detection.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    detectBrowserLanguage: {\n      useCookie: true,\n      cookieKey: 'i18n_redirected',\n      redirectOn: 'root' // recommended\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Transition with Locale Change in Nuxt\nDESCRIPTION: This snippet demonstrates how to implement a global transition for the entire Nuxt app while handling locale changes. It uses the NuxtPage component and the finalizePendingLocaleChange method from useI18n.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/08.lang-switcher.md#2025-04-10_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { finalizePendingLocaleChange } = useI18n()\n\nconst onBeforeEnter = async () => {\n  await finalizePendingLocaleChange()\n}\n</script>\n\n<template>\n  <NuxtLayout>\n    <NuxtPage\n      :transition=\"{\n        name: 'my',\n        mode: 'out-in',\n        onBeforeEnter\n      }\"\n    />\n  </NuxtLayout>\n</template>\n\n<style>\n.my-enter-active,\n.my-leave-active {\n  transition: opacity 0.3s;\n}\n.my-enter,\n.my-leave-active {\n  opacity: 0;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale Detection with Multiple Fallbacks\nDESCRIPTION: Example implementation of a locale detector that checks query parameters, cookies, and headers in sequence, falling back to the default locale if no matches are found.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/12.define-i18n-locale-detector.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nLocaleDetector((event, config) => {\n  const query = tryQueryLocale(event, { lang: '' })\n  if (query) {\n    return query.toString()\n  }\n\n  const cookie = tryCookieLocale(event, { lang: '', name: 'i18n_locale' })\n  if (cookie) {\n    return cookie.toString()\n  }\n\n  const header = tryHeaderLocale(event, { lang: '' })\n  if (header) {\n    return header.toString()\n  }\n\n  return config.defaultLocale\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Localized Route in Vue\nDESCRIPTION: The localeRoute() method returns a localized Route object for the given route. It accepts a route argument (string or Location object) and an optional locale argument, defaulting to the current locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/05.vue.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlocaleRoute(route, locale)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic URL Localization\nDESCRIPTION: Configuration for localizing parent and child routes with custom paths for English and Catalan languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    customRoutes: 'config',\n    pages: {\n      parent: {\n        en: '/parent',\n        ca: '/pare'\n      },\n      'parent-child': {\n        en: '/parent/child',\n        ca: '/pare/fill'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining I18n Language Files\nDESCRIPTION: JSON translation files for English and Dutch languages containing key-value pairs of translated strings\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/02.usage.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"welcome\": \"Welcome\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"welcome\": \"Welkom\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTranslation in Nuxt event handler\nDESCRIPTION: Demonstrates how to use the useTranslation function within a Nuxt event handler to perform server-side translations. The event handler must be async to await the translation function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/16.server-side-translations.md#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// you need to define `async` event handler\nexport default defineEventHandler(async event => {\n  // call `useTranslation`, so it return the translation function\n  const t = await useTranslation(event)\n  return {\n    // call translation function with key of locale messages,\n    // and translation function has some overload\n    hello: t('hello')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Mixed Domain Configuration Setup\nDESCRIPTION: Configuration example for supporting multiple languages on some domains while having dedicated domains for others, using domainDefault setting for fallback locales.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/09.different-domains.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        domain: 'mydomain.com',\n        domainDefault: true\n      },\n      {\n        code: 'pl',\n        domain: 'mydomain.com'\n      },\n      {\n        code: 'ua',\n        domain: 'mydomain.com'\n      },\n      {\n        code: 'es',\n        domain: 'es.mydomain.com',\n        domainDefault: true\n      },\n      {\n        code: 'fr',\n        domain: 'fr.mydomain.com',\n        domainDefault: true\n      }\n    ],\n    strategy: 'prefix',\n    differentDomains: true\n    // Or enable the option in production only\n    // differentDomains: (process.env.NODE_ENV === 'production')\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using defineI18nLocale for Dynamic Locale Loading\nDESCRIPTION: Demonstrates how to use the defineI18nLocale function to dynamically load locale messages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nLocale(locale => {\n  return $fetch(`https://your-company-product/api/${locale}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Files for Spanish Variants\nDESCRIPTION: Advanced configuration for handling multiple Spanish language variants using the files property to load shared and country-specific translations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/07.lazy-load-translations.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      /**\n       * Example definition with `files` for Spanish speaking countries\n       */\n      {\n        code: 'es-AR',\n        name: 'Español (Argentina)',\n        // lazy loading order: `es.json` -> `es-AR.json`, and then merge 'es-AR.json' with 'es.json'\n        files: ['es.json', 'es-AR.json']\n      },\n      {\n        code: 'es-UY',\n        name: 'Español (Uruguay)',\n        // lazy loading order: `es.json` -> `es-UY.json`, and then merge 'es-UY.json' with 'es.json'\n        files: ['es.json', 'es-UY.json']\n      },\n      {\n        code: 'es-US',\n        name: 'Español (Estados Unidos)',\n        // lazy loading order: `es.json` -> `es-US.json`, and then merge 'es-US.json' with 'es.json'\n        files: ['es.json', 'es-US.json']\n      }\n    ],\n    lazy: true,\n    langDir: 'lang',\n    defaultLocale: 'en'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Route Parameters for Localization\nDESCRIPTION: Using useSetI18nParams composable to provide translations for dynamic route parameters, enabling correct path generation and SEO.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// fetch product from API... (red mug)\n\nconst setI18nParams = useSetI18nParams()\nsetI18nParams({\n  en: { slug: data.slugs.en }, // slug: 'red-mug'\n  nl: { slug: data.slugs.nl } // slug: 'rode-mok'\n})\n\nconst switchLocalePath = useSwitchLocalePath()\nswitchLocalePath('en') // /products/red-mug\nswitchLocalePath('nl') // /nl/products/rode-mok\n</script>\n\n<template>\n  <!-- pages/products/[slug].vue -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Locales in i18n.config.ts\nDESCRIPTION: Demonstrates three different ways to configure fallback locales in the Nuxt i18n module: single locale, array of locales, or a detailed mapping object for specific language variants. This configuration determines which translations to use when a requested translation is missing.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/11.locale-fallback.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  fallbackLocale: 'en',\n  // or\n  fallbackLocale: ['en', 'fr'],\n  // or\n  fallbackLocale: {\n    'de-CH': ['fr', 'it'],\n    'zh-Hant': ['zh-Hans'],\n    'es-CL': ['es-AR'],\n    es: ['en-GB'],\n    pt: ['es-AR'],\n    default: ['en', 'da']\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTranslation in Server-Side Handler\nDESCRIPTION: Demonstrates how to use the useTranslation composable in a server-side event handler to perform translations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async event => {\n  const t = await useTranslation(event)\n  return {\n    hello: t('hello')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useLocaleHead Composable in TypeScript\nDESCRIPTION: Example of how to use the useLocaleHead composable function in TypeScript for managing locale-specific head tags.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nuseLocaleHead()\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Strategy in Nuxt Config (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the i18n strategy in the Nuxt configuration file. It sets the strategy to 'prefix_except_default' and defines 'en' as the default locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/06.strategies.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ni18n: {\n  strategy: 'prefix_except_default',\n  defaultLocale: 'en'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Component Translations with JSON in Vue\nDESCRIPTION: This snippet shows how to use i18n custom blocks with JSON syntax to define translations within a Vue component. It demonstrates the setup for local scope translations and how to use the 't' function for translation.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/12.per-component-translations.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { t } = useI18n({\n  useScope: 'local'\n})\n</script>\n\n<template>\n  <p>{{ t('hello') }}</p>\n</template>\n\n<i18n lang=\"json\">\n{\n  \"en\": {\n    \"hello\": \"hello world!\"\n  },\n  \"ja\": {\n    \"hello\": \"こんにちは、世界!\"\n  }\n}\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Using useSetI18nParams Composable in Vue\nDESCRIPTION: Modern approach for setting i18n parameters for dynamic routes in Nuxt I18n v9 using the useSetI18nParams composable.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nconst setI18nParams = useSetI18nParams()\nsetI18nParams({\n  en: { id: 'my-post' },\n  fr: { id: 'mon-article' }\n})\n</script>\n<template>\n  <!-- pages/post/[id].vue -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Domains in Nuxt Config\nDESCRIPTION: Configuration example showing how to set up different domains for multiple languages using the i18n module. Includes options for domain specification with various protocols and optional ports.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/09.different-domains.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        domain: 'mydomain.com'\n      },\n      {\n        code: 'es',\n        domain: 'es.mydomain.com'\n      },\n      {\n        code: 'fr',\n        domain: 'fr.mydomain.com'\n      },\n      {\n        code: 'pl',\n        domain: 'http://pl.mydomain.com'\n      },\n      {\n        code: 'ua',\n        domain: 'https://ua.mydomain.com'\n      }\n    ],\n    differentDomains: true\n    // Or enable the option in production only\n    // differentDomains: (process.env.NODE_ENV === 'production')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Runtime Environment Variables for Locale Domains\nDESCRIPTION: Configuration for using environment variables to define domain names for different locales. This allows changing domains in different environments without rebuilding the application.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/09.different-domains.md#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const localeDomains = {\n  uk: process.env.DOMAIN_UK,\n  fr: process.env.DOMAIN_FR\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cookie Name for Browser Language Detection\nDESCRIPTION: This code snippet shows how to customize the cookie name used for storing the detected language preference. It modifies the cookieKey option in the Nuxt configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/05.browser-language-detection.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  detectBrowserLanguage: {\n    useCookie: true,\n    cookieKey: 'my_custom_cookie_name'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SwitchLocalePathLink Component in Vue with Nuxt i18n\nDESCRIPTION: Example showing basic usage of the SwitchLocalePathLink component for switching between Dutch and English locales. Below it shows the equivalent implementation using NuxtLink with the useSwitchLocalePath composable.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/05.components/02.switch-locale-path-link.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SwitchLocalePathLink locale=\"nl\">Dutch</SwitchLocalePathLink>\n  <SwitchLocalePathLink locale=\"en\">English</SwitchLocalePathLink>\n</template>\n\n<!-- equivalent to -->\n\n<script setup>\nconst switchLocalePath = useSwitchLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"switchLocalePath('nl')\">Dutch</NuxtLink>\n  <NuxtLink :to=\"switchLocalePath('en')\">English</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useSetI18nParams in Vue 3 Component\nDESCRIPTION: Demonstrates how to use the useSetI18nParams composable to set translated parameters for the current route in a Vue 3 component.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// fetch product from API... (red mug)\n\nconst setI18nParams = useSetI18nParams({\n  canonicalQueries: ['foo']\n})\nsetI18nParams({\n  en: { slug: data.slugs.en }, // slug: 'red-mug'\n  nl: { slug: data.slugs.nl } // slug: 'rode-mok'\n})\n\nconst switchLocalePath = useSwitchLocalePath()\nswitchLocalePath('en') // /products/red-mug\nswitchLocalePath('nl') // /nl/products/rode-mok\n</script>\n\n<template>\n  <!-- pages/products/[slug].vue -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Domains to Vuex Store\nDESCRIPTION: This Vuex store initialization imports the locale domains and adds them to the application state, making them accessible throughout the application at runtime without requiring a rebuild.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/13.different-domains.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst localeDomains = require('~~/config/locale-domains')\n\nexport const state = () => ({\n  localeDomains\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Translation Loading\nDESCRIPTION: Example of manually loading translations for a specific locale using loadLocaleMessages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/07.lazy-load-translations.md#2025-04-10_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst { loadLocaleMessages, t } = useI18n()\n\nawait loadLocaleMessages('nl')\n\nconst welcome = computed(() => t('welcome')) // Welcome!\nconst welcomeDutch = computed(() => t('welcome', 1, { locale: 'nl' })) // Welkom!\n```\n\n----------------------------------------\n\nTITLE: Custom Cookie Configuration for Language Detection\nDESCRIPTION: Configuration to customize the cookie name used for storing language preference.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/05.browser-language-detection.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  detectBrowserLanguage: {\n    useCookie: true,\n    cookieKey: 'my_custom_cookie_name'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer with Nuxt i18n Module\nDESCRIPTION: Configuration of a Nuxt layer that provides i18n module setup with lazy loading and locales. This shows how to set up locales in a layer that can be extended by other projects.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/15.layers.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n  i18n: {\n    lazy: true,\n    langDir: './lang',\n    locales: [\n      { code: 'en', file: 'en.json' },\n      { code: 'nl', file: 'nl.json' }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Computing Available Locales in Vue Component\nDESCRIPTION: A computed property that filters the available locales to exclude the currently active locale, making it useful for showing only languages the user can switch to.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/12.lang-switcher.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncomputed: {\n  availableLocales () {\n    return this.$i18n.locales.filter(i => i.code !== this.$i18n.locale)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Loading Locale Messages\nDESCRIPTION: Example showing how to manually load translations from a non-loaded locale using the loadLocaleMessages function from the useI18n composable.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/07.lazy-load-translations.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { loadLocaleMessages, t } = useI18n()\n\nawait loadLocaleMessages('nl')\n\nconst welcome = computed(() => t('welcome')) // Welcome!\nconst welcomeDutch = computed(() => t('welcome', 1, { locale: 'nl' })) // Welkom!\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of useRouteBaseName in Nuxt i18n\nDESCRIPTION: Type declaration for the useRouteBaseName composable function. It accepts optional I18nCommonRoutingOptionsWithComposable and returns a function that gets the base name of a route from various route representations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/06.use-route-base-name.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ndeclare function useRouteBaseName(\n  options?: I18nCommonRoutingOptionsWithComposable\n): (givenRoute?: string | Route | RouteLocationNormalizedLoaded) => string | undefined\n```\n\n----------------------------------------\n\nTITLE: Disable Cookie Usage for Language Detection\nDESCRIPTION: Configuration to disable cookie usage, causing language detection on every visit.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/05.browser-language-detection.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    detectBrowserLanguage: {\n      useCookie: false\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useLocalePath in Vue 3 Component\nDESCRIPTION: Demonstrates how to use the useLocalePath composable to generate localized paths in a Vue 3 component setup.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst localePath = useLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"localePath('index')\">{{ $t('home') }}</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Environment Variables in a Configuration File\nDESCRIPTION: This module exports locale domains using environment variables, allowing for dynamic domain configuration across different environments without requiring separate builds.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/13.different-domains.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  uk: process.env.DOMAIN_UK,\n  fr: process.env.DOMAIN_FR\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring multiDomainLocales Option in Nuxt i18n\nDESCRIPTION: Configuration option for enabling multiple domains with different locales. When enabled, locales must be configured as objects containing domains and defaultForDomains keys.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/05.domain.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- type: `boolean`\n- default: `false`\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for detectBrowserLanguage in Nuxt i18n\nDESCRIPTION: The default configuration object for the detectBrowserLanguage option, which enables browser language detection to automatically redirect visitors to their preferred locale. It includes settings for cookies, redirection behavior, and fallback options.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/04.browser.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ alwaysRedirect: false, fallbackLocale: '', redirectOn: 'root', useCookie: true, cookieCrossOrigin: false, cookieDomain: null, cookieKey: 'i18n_redirected', cookieSecure: false }\n```\n\n----------------------------------------\n\nTITLE: Creating a Language Switcher with Different Domains\nDESCRIPTION: Vue component example showing how to implement a language switcher when using different domains. It uses regular anchor tags instead of router links since each language is on a separate domain.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/09.different-domains.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { locale, locales } = useI18n()\nconst switchLocalePath = useSwitchLocalePath()\n\nconst availableLocales = computed(() => {\n  return locales.value.filter(i => i.code !== locale.value)\n})\n</script>\n\n<template>\n  ...\n  <a v-for=\"locale in availableLocales\" :href=\"switchLocalePath(locale.code)\" :key=\"locale.code\">\n    {{ locale.code }}\n  </a>\n  ...\n</template>\n```\n\n----------------------------------------\n\nTITLE: Nuxt Configuration with Environment-Based Locale Domains\nDESCRIPTION: Nuxt configuration that uses environment variables for locale domains. This approach allows for different domain configurations in staging and production environments.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/09.different-domains.md#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { localeDomains } from './locale-domains.config'\n\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n\n  i18n: {\n    differentDomains: process.env.NODE_ENV === 'production',\n    locales: [\n      {\n        code: 'uk',\n        domain: localeDomains.uk\n      },\n      {\n        code: 'fr',\n        domain: localeDomains.fr\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Routing Strategy in Nuxt Config\nDESCRIPTION: Example of how to configure the i18n routing strategy in the Nuxt configuration file. This shows setting the strategy to 'prefix_except_default' and defining 'en' as the default locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/01.index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n\n  i18n: {\n    strategy: 'prefix_except_default',\n    defaultLocale: 'en'\n  }\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Routing Strategy in Nuxt Config\nDESCRIPTION: Example of how to configure the i18n routing strategy in the Nuxt configuration file. This shows setting the strategy to 'prefix_except_default' and defining 'en' as the default locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/01.index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n\n  i18n: {\n    strategy: 'prefix_except_default',\n    defaultLocale: 'en'\n  }\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Extension in Custom Nuxt Module\nDESCRIPTION: Shows how to create a Nuxt module that extends pages using the pages:extend hook, including proper file path resolution for added pages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/14.extend-pages.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n\n    nuxt.hook('pages:extend', pages => {\n      pages.push({\n        name: 'example-page',\n        path: '/example-page',\n        file: resolve(__dirname, './pages/example-page.vue')\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Always Redirect in Browser Language Detection\nDESCRIPTION: This configuration enables the alwaysRedirect option, which causes the user to be redirected to their detected language preference on every visit while still using a cookie to store the choice.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/05.browser-language-detection.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    // ...\n    detectBrowserLanguage: {\n      useCookie: true,\n      alwaysRedirect: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Translations from API\nDESCRIPTION: Example showing how to fetch locale messages dynamically from an API endpoint using the defineI18nLocale composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/07.lazy-load-translations.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nLocale(locale => {\n  // for example, fetch locale messages from nuxt server\n  return $fetch(`/api/${locale}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Environment Variables for Locale Domains\nDESCRIPTION: Creating a configuration that uses environment variables to dynamically set domain names for different locales. This approach allows for environment-specific domain configurations without requiring multiple builds.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/10.multi-domain-locales.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const localeDomains = {\n  uk: process.env.DOMAIN_UK,\n  fr: process.env.DOMAIN_FR\n}\n```\n\n----------------------------------------\n\nTITLE: Component translations using JSON syntax\nDESCRIPTION: Example of defining component-level translations using JSON format in Vue single-file component i18n blocks for English and Japanese languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/15.per-component-translations.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<i18n>\n{\n  \"en\": {\n    \"hello\": \"hello world!\"\n  },\n  \"ja\": {\n    \"hello\": \"こんにちは、世界!\"\n  }\n}\n</i18n>\n\n<template>\n  <p>{{ $t('hello') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Cross-Origin Cookie for Browser Language Detection\nDESCRIPTION: This snippet shows how to configure the detectBrowserLanguage option to use a cross-origin cookie. It sets cookieCrossOrigin to true, changing the cookie settings to work in cross-origin environments like iFrames.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/05.browser-language-detection.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    detectBrowserLanguage: {\n      useCookie: true,\n      cookieCrossOrigin: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Picking Specific Languages for a Route in Vue Component\nDESCRIPTION: Demonstrates how to use defineI18nRoute to specify that a page should only be available in French and Spanish languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/04.ignoring-localized-routes.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  locales: ['fr', 'es']\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt with Environment Variable-Based Locale Domains\nDESCRIPTION: Implementation of Nuxt configuration that imports domain values from a separate configuration file. This setup allows for using different domain values in different environments like staging and production.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/10.multi-domain-locales.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { localeDomains } from './locale-domains.config'\n\nconst i18nDomains = [localeDomains.uk, localeDomains.fr]\n\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n\n  i18n: {\n    multiDomainLocales: true,\n    locales: [\n      {\n        code: 'uk',\n        domains: i18nDomains,\n        defaultForDomains: [localeDomains.uk]\n      },\n      {\n        code: 'fr',\n        domains: i18nDomains,\n        defaultForDomains: [localeDomains.fr]\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using localeLocation Helper in Vue.js\nDESCRIPTION: This snippet demonstrates how to use the localeLocation helper function to get the Location object for a given page and use it with Vue Router for navigation.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/02.basic-usage.md#2025-04-10_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<a href=\"#\" @click=\"$router.push(localeLocation({ name: 'index', params: { foo: '1' } }))\">\nNavigate\n</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Detector Function in Nuxt i18n\nDESCRIPTION: This snippet defines the structure for a locale detector function, which takes an H3 event and configuration object as parameters. The config object includes defaultLocale and fallbackLocale settings used for internationalization in Nuxt applications.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ndetector(event: H3Event, config: { defaultLocale: Locale; fallbackLocale: FallbackLocale; })\n```\n\n----------------------------------------\n\nTITLE: Multiple Default Domains Configuration in Nuxt\nDESCRIPTION: Shows how to configure multiple default domains for specific languages, including prefix and prefix_except_default strategies.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/10.multi-domain-locales.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18nDomains = ['mydomain.com', 'en.mydomain.com', 'es.mydomain.com', 'fr.mydomain.com', 'http://pl.mydomain.com', 'https://ua.mydomain.com']\n\nexport default defineNuxtConfig({\n  // ...\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        domains: i18nDomains,\n        defaultForDomains: ['mydomain.com', 'en.mydomain.com']\n      },\n      {\n        code: 'es',\n        domains: i18nDomains,\n        defaultForDomains: ['es.mydomain.com']\n      },\n      {\n        code: 'fr',\n        domains: i18nDomains,\n        defaultForDomains: ['fr.mydomain.com']\n      },\n      {\n        code: 'pl',\n        domains: i18nDomains,\n        defaultForDomains: ['http://pl.mydomain.com']\n      },\n      {\n        code: 'ua',\n        domains: i18nDomains,\n        defaultForDomains: ['https://ua.mydomain.com']\n      },\n      {\n        code: 'nl',\n        domains: i18nDomains\n      },\n      {\n        code: 'de',\n        domains: i18nDomains\n      },\n    ],\n    strategy: 'prefix',\n    multiDomainLocales: true\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Routes in Page Components\nDESCRIPTION: Using the defineI18nRoute compiler macro to set custom paths directly in a page component for different languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  paths: {\n    en: '/about-us', // -> accessible at /about-us (no prefix since it's the default locale)\n    fr: '/a-propos', // -> accessible at /fr/a-propos\n    es: '/sobre' // -> accessible at /es/sobre\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial URL Localization in Nuxt Config\nDESCRIPTION: Shows how to localize parts of URLs for a complex site structure with deeply nested routes. This allows for translating specific path segments while maintaining the overall route hierarchy.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    customRoutes: 'config',\n    pages: {\n      about: {\n        fr: '/a-propos'\n      },\n      services: {\n        fr: '/offres'\n      },\n      'services-development': {\n        fr: '/offres/developement'\n      },\n      'services-development-app': {\n        fr: '/offres/developement/app'\n      },\n      'services-development-website': {\n        fr: '/offres/developement/site-web'\n      },\n      'services-coaching': {\n        fr: '/offres/formation'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Files Configuration\nDESCRIPTION: Configuration example for handling multiple translation files per locale with file merging.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/07.lazy-load-translations.md#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'es-AR',\n        name: 'Español (Argentina)',\n        files: ['es.json', 'es-AR.json']\n      },\n      {\n        code: 'es-UY',\n        name: 'Español (Uruguay)',\n        files: ['es.json', 'es-UY.json']\n      },\n      {\n        code: 'es-US',\n        name: 'Español (Estados Unidos)',\n        files: ['es.json', 'es-US.json']\n      }\n    ],\n    lazy: true,\n    defaultLocale: 'en'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Implementation with useLocaleRoute\nDESCRIPTION: Example Vue component demonstrating practical usage of useLocaleRoute composable with useI18n to create localized route links. Shows how to compute route paths based on current locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/02.use-locale-route.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst localeRoute = useLocaleRoute()\nconst { locale } = useI18n()\nconst linkPath = computed(() => {\n  const route = localeRoute('blog', locale.value)\n  return route != null ? route.path : '/'\n})\n</script>\n\n<template>\n  <NuxtLink :to=\"linkPath\">{{ $t('blog') }}</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using defineI18nRoute in a Vue Component\nDESCRIPTION: Demonstrates how to use defineI18nRoute() in a Vue component to set custom route paths for different locales.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/07.compiler-macros/01.define-i18n-route.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  paths: {\n    en: '/about-us',\n    fr: '/a-propos',\n    ja: '/about-ja'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing $i18n in Nuxt Plugin\nDESCRIPTION: Demonstrates how to use the $i18n instance in a Nuxt plugin to set up a language switch callback.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/06.nuxt.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(nuxtApp => {\n  nuxtApp.$i18n.onBeforeLanguageSwitch = (oldLocale, newLocale, isInitialSetup, nuxtApp) => {\n    console.log('onBeforeLanguageSwitch', oldLocale, newLocale, isInitialSetup)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: French Translation File Implementation\nDESCRIPTION: Shows different ways to implement a translation file using defineI18nLocale or direct object export.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/07.lazy-load-translations.md#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineI18nLocale(async locale => {\n  return {\n    welcome: 'Bienvenue'\n  }\n})\n\n// or\n\nexport default {\n  welcome: 'Bienvenue'\n}\n```\n\n----------------------------------------\n\nTITLE: Type Declaration for detectBrowserLanguage\nDESCRIPTION: Type declaration for the detectBrowserLanguage configuration option that enables browser language detection functionality.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Disable Browser Language Detection\nDESCRIPTION: Configuration to completely disable the browser language detection feature.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/05.browser-language-detection.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    // ...\n    detectBrowserLanguage: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Routes for Localization in Nuxt Config\nDESCRIPTION: Demonstrates how to configure localized paths for dynamic routes. The example shows how to handle dynamic parameters in the path for Japanese localization.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    customRoutes: 'config',\n    pages: {\n      'blog-date-slug': {\n        // params need to be put back here as you would with Nuxt Dynamic Routes\n        // https://nuxt.com/docs/guide/directory-structure/pages#dynamic-routes\n        ja: '/blog/tech/[date]/[slug]'\n        // ...\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example of environment variable configuration for different environments (production and staging) to set domain names at runtime.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/09.different-domains.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nNUXT_PUBLIC_I18N_LOCALES_UK_DOMAIN=uk.example.test\nNUXT_PUBLIC_I18N_LOCALES_FR_DOMAIN=fr.example.test\n```\n\nLANGUAGE: shell\nCODE:\n```\nNUXT_PUBLIC_I18N_LOCALES_UK_DOMAIN=uk.staging.example.test\nNUXT_PUBLIC_I18N_LOCALES_FR_DOMAIN=fr.staging.example.test\n```\n\n----------------------------------------\n\nTITLE: Creating a Language File for @nuxtjs/i18n in Nuxt.js\nDESCRIPTION: This snippet shows two ways to create a language file for @nuxtjs/i18n. The first example is an async function that returns a Promise resolving to translation objects. The second is a simple object with translations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/11.lazy-load-translations.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async (context, locale) => {\n  return await Promise.resolve({\n    welcome: 'Welcome'\n  })\n}\n\n// or\n\nexport default {\n  welcome: 'Welcome'\n}\n```\n\n----------------------------------------\n\nTITLE: Global Scope i18n Block Example\nDESCRIPTION: Illustrates the usage of i18n custom block with global scope attribute for making translations available throughout the application.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/08.custom-block.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<i18n lang=\"yaml\" global>\nen:\n  hello: Hello\nes:\n  hello: Hola\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Localizing Catch-All Routes\nDESCRIPTION: Example of setting parameters for a catch-all route using an array of path segments for different languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nconst setI18nParams = useSetI18nParams()\nsetI18nParams({\n  en: { pathMatch: ['not-found-my-post'] },\n  fr: { pathMatch: ['not-found-mon-article'] }\n})\n</script>\n\n<template>\n  <!-- pages/[...pathMatch].vue -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Localization for a Page in Vue Component\nDESCRIPTION: Shows how to completely disable route localization for a specific page using the defineI18nRoute function with a false parameter.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/04.ignoring-localized-routes.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: French Translation JSON Configuration\nDESCRIPTION: French language translation file containing module-specific messages. Follows the same structure as the English translations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/13.extend-messages.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-module-example\": {\n    \"hello\": \"Bonjour depuis le module externe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring locale detector in nuxt.config.ts\nDESCRIPTION: Shows how to configure the Nuxt i18n module to use a custom locale detector by specifying the path to the detector file in the experimental options.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/16.server-side-translations.md#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    experimental: {\n      localeDetector: 'localeDetector.ts'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Nuxt i18n Pages\nDESCRIPTION: Shows the directory structure of a Nuxt application with pages that will be localized using the i18n module.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/01.index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-| pages/\n---| about.vue\n---| index.vue\n---| posts/\n-----| [id].vue\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Languages in Nuxt Configuration\nDESCRIPTION: Shows how to configure the i18n module globally to disable the English version of the about page while keeping other languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/04.ignoring-localized-routes.md#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ni18n: {\n  customRoutes: false,\n  pages: {\n    about: {\n      en: false,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi Domain Locales in Nuxt\nDESCRIPTION: Setup for using multiple domains for different locales in a Nuxt application. The configuration defines various language codes and their associated domains, with the multiDomainLocales option enabled.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/10.multi-domain-locales.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18nDomains = ['mydomain.com', 'es.mydomain.com', 'fr.mydomain.com', 'http://pl.mydomain.com', 'https://ua.mydomain.com']\n\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        domains: i18nDomains,\n        defaultForDomains: ['mydomain.com']\n      },\n      {\n        code: 'es',\n        domains: i18nDomains,\n        defaultForDomains: ['es.mydomain.com']\n      },\n      {\n        code: 'fr',\n        domains: i18nDomains,\n        defaultForDomains: ['fr.mydomain.com']\n      },\n      {\n        code: 'pl',\n        domains: i18nDomains,\n        defaultForDomains: ['http://pl.mydomain.com']\n      },\n      {\n        code: 'ua',\n        domains: i18nDomains,\n        defaultForDomains: ['https://ua.mydomain.com']\n      },\n      {\n        code: 'nl',\n        domains: i18nDomains\n      },\n      {\n        code: 'de',\n        domains: i18nDomains\n      },\n    ],\n    multiDomainLocales: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Locale File in Extended Layer\nDESCRIPTION: Example of a locale file in the extended layer that provides default translations. Shows the structure of translations that can be overridden by the main project.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/15.layers.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"title\": \"layer title\",\n  \"description\": \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing canonical link generation with query parameters\nDESCRIPTION: Example showing how to configure which query parameters should be included in the canonical URL using the canonicalQueries option.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/10.seo.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  head() {\n    return this.$nuxtI18nHead({\n      addSeoAttributes: {\n        canonicalQueries: ['foo']\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt i18n Module via NPX\nDESCRIPTION: Command to install @nuxtjs/i18n as a dev dependency using nuxi.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/01.index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add @nuxtjs/i18n\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Route Parameters in Nuxt I18n Configuration\nDESCRIPTION: Configuration for enabling dynamic route parameters in Nuxt I18n to allow locale-specific route parameters in the application.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/02.routing.md#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n\n  i18n: {\n    dynamicRouteParams: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useSwitchLocalePath in Vue 3 Component\nDESCRIPTION: Demonstrates how to use the useSwitchLocalePath composable to switch between locales in a Vue 3 component.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst switchLocalePath = useSwitchLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"switchLocalePath('en')\">English</NuxtLink>\n  <NuxtLink :to=\"switchLocalePath('fr')\">Français</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Locale File in Project\nDESCRIPTION: Example of a locale file in the project layer that will override values from the extended layer. This file provides translations for the English locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/15.layers.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"title\": \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCookie Function\nDESCRIPTION: Reference to the useCookie composable function used internally by useCookieLocale\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/08.use-cookie-locale.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseCookie()\n```\n\n----------------------------------------\n\nTITLE: Cross-Origin Cookie Configuration\nDESCRIPTION: Configuration for using language detection cookie in cross-origin environments like iFrames.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/05.browser-language-detection.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    detectBrowserLanguage: {\n      useCookie: true,\n      cookieCrossOrigin: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling scanPageMeta for Custom Named Routes\nDESCRIPTION: Configuration to enable the experimental scanPageMeta feature required for custom named routes to work with Nuxt i18n.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    scanPageMeta: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting i18n Module Options in Nuxt Config\nDESCRIPTION: Extended configuration showing how to set i18n-specific options in the Nuxt configuration file.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/01.index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n  i18n: {\n    // Module Options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Merged Locale Result\nDESCRIPTION: Shows the final merged result of locale files from different layers, demonstrating priority rules.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/15.layers.md#2025-04-10_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // earlier layers take priority\n  \"title\": \"foo\",\n  \"description\": \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales with Complex Settings in Nuxt I18n\nDESCRIPTION: Example showing how to configure the locales option with advanced settings including language codes, file paths, and text direction.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/02.routing.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"code\": \"en\", \"language\": \"en-US\", \"file\": \"en.js\", \"dir\": \"ltr\" },\n  { \"code\": \"ar\", \"language\": \"ar-EG\", \"file\": \"ar.js\", \"dir\": \"rtl\" },\n  { \"code\": \"fr\", \"language\": \"fr-FR\", \"file\": \"fr.js\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Runtime Domain Configuration Setup\nDESCRIPTION: Configuration for handling domain settings through environment variables, allowing different domain configurations for different environments.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/09.different-domains.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const localeDomains = {\n  uk: process.env.DOMAIN_UK,\n  fr: process.env.DOMAIN_FR\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { localeDomains } from './locale-domains.config'\n\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n\n  i18n: {\n    differentDomains: process.env.NODE_ENV === 'production',\n    locales: [\n      {\n        code: 'uk',\n        domain: localeDomains.uk\n      },\n      {\n        code: 'fr',\n        domain: localeDomains.fr\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing I18n Configuration with defineI18nConfig in TypeScript\nDESCRIPTION: This example demonstrates how to use defineI18nConfig to create a simple vue-i18n options object. It sets the legacy mode to false, defines the default locale as English, and provides translations for welcome messages in English and French.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/10.define-i18n-config.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nConfig(() => ({\n  legacy: false,\n  locale: 'en',\n  messages: {\n    en: {\n      welcome: 'Welcome'\n    },\n    fr: {\n      welcome: 'Bienvenue'\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Layer Extension with Nuxt i18n\nDESCRIPTION: Demonstrates basic layer extension setup where a project extends a layer with Nuxt i18n configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/15.layers.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: ['my-layer']\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n  i18n: {\n    lazy: true,\n    locales: [\n      { code: 'en', file: 'en.json' },\n      { code: 'nl', file: 'nl.json' }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Get Locale Cookie TypeScript Method\nDESCRIPTION: Method to retrieve the locale code from stored locale cookie. Takes no arguments and returns a string or undefined.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/04.vue-i18n.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetLocaleCookie(): string | undefined\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt i18n in a Module using TypeScript\nDESCRIPTION: This snippet demonstrates how to install Nuxt i18n within a Nuxt module. It uses `createResolver` and `defineNuxtModule` from '@nuxt/kit' to resolve paths and install the i18n module with specific configurations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/17.install-module.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  async setup(options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n\n    // paths needs to be resolved so absolute paths are used\n    await installModule('@nuxtjs/i18n', {\n      vueI18n: resolve('./i18n.config.ts'),\n      langDir: resolve('./lang'),\n      locales: [\n        {\n          code: 'en',\n          file: resolve('./lang/en.json'),\n        },\n        {\n          code: 'fr',\n          file: resolve('./lang/fr.json'),\n        },\n      ]\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi Domain Locales with Mixed Language Support\nDESCRIPTION: Setup for having some domains host multiple languages while others are language-specific. This configuration uses the prefix strategy and demonstrates how different domains handle various language requests.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/10.multi-domain-locales.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst i18nDomains = ['mydomain.com', 'en.mydomain.com', 'es.mydomain.com', 'fr.mydomain.com', 'http://pl.mydomain.com', 'https://ua.mydomain.com']\n\nexport default defineNuxtConfig({\n  // ...\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        domains: i18nDomains,\n        defaultForDomains: ['mydomain.com', 'en.mydomain.com']\n      },\n      {\n        code: 'es',\n        domains: i18nDomains,\n        defaultForDomains: ['es.mydomain.com']\n      },\n      {\n        code: 'fr',\n        domains: i18nDomains,\n        defaultForDomains: ['fr.mydomain.com']\n      },\n      {\n        code: 'pl',\n        domains: i18nDomains,\n        defaultForDomains: ['http://pl.mydomain.com']\n      },\n      {\n        code: 'ua',\n        domains: i18nDomains,\n        defaultForDomains: ['https://ua.mydomain.com']\n      },\n      {\n        code: 'nl',\n        domains: i18nDomains\n      },\n      {\n        code: 'de',\n        domains: i18nDomains\n      },\n    ],\n    strategy: 'prefix',\n    multiDomainLocales: true\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Detector in Nuxt Config\nDESCRIPTION: This snippet shows how to configure the locale detector in the Nuxt configuration file by specifying the path to the locale detector file.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/16.server-side-translations.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    experimental: {\n      localeDetector: './localeDetector.ts'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Project with Extended Layer in Nuxt i18n\nDESCRIPTION: Example of a Nuxt project configuration that extends a layer with i18n module already configured. This demonstrates the minimal setup needed when the i18n configuration comes from the extended layer.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/15.layers.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: ['my-layer']\n})\n```\n\n----------------------------------------\n\nTITLE: Adding cookieDomain Option for Locale Cookie in JavaScript\nDESCRIPTION: Adds a new cookieDomain option to override the domain used for the locale cookie. This allows more control over cookie settings.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncookieDomain: options.cookieDomain\n```\n\n----------------------------------------\n\nTITLE: Runtime Environment Variable Configuration for i18n Domains\nDESCRIPTION: Demonstrates how to use environment variables to configure domain settings for different environments like staging and production.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/10.multi-domain-locales.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const localeDomains = {\n  uk: process.env.DOMAIN_UK,\n  fr: process.env.DOMAIN_FR\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { localeDomains } from './locale-domains.config'\n\nconst i18nDomains = [localeDomains.uk, localeDomains.fr]\n\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n\n  i18n: {\n    multiDomainLocales: true,\n    locales: [\n      {\n        code: 'uk',\n        domains: i18nDomains,\n        defaultForDomains: [localeDomains.uk]\n      },\n      {\n        code: 'fr',\n        domains: i18nDomains,\n        defaultForDomains: [localeDomains.fr]\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Head Metadata in Vue\nDESCRIPTION: The localeHead() method generates localized head metadata for SEO purposes. It accepts an options object with properties for customizing the output, including adding dir attributes and SEO attributes.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/05.vue.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlocaleHead(options)\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Runtime Options in Nuxt Config\nDESCRIPTION: Example showing how to set up i18n options using Nuxt's runtimeConfig system. This approach allows certain options to be overridden using environment variables after building the application, rather than being hardcoded at build time.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/07.runtime-config.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n\tmodules: ['@nuxtjs/i18n'],\n\ti18n: {\n\t\t// Leave options unset that you want to set using `runtimeConfig`\n\t\t// baseUrl: 'https://example.com',\n\t},\n\truntimeConfig: {\n\t\tpublic: {\n\t\t\ti18n: {\n\t\t\t\tbaseUrl: 'https://example.com',\n\t\t\t\tdomainLocales: {}\n\t\t\t\t// other options ...\n\t\t\t}\n\t\t}\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Domain Strategy for Multiple Languages\nDESCRIPTION: Configuration for using different domains for some languages while hosting multiple languages on a single domain. The domainDefault property specifies the default language for each domain.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/09.different-domains.md#2025-04-10_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        domain: 'mydomain.com',\n        domainDefault: true\n      },\n      {\n        code: 'pl',\n        domain: 'mydomain.com'\n      },\n      {\n        code: 'ua',\n        domain: 'mydomain.com'\n      },\n      {\n        code: 'es',\n        domain: 'es.mydomain.com',\n        domainDefault: true\n      },\n      {\n        code: 'fr',\n        domain: 'fr.mydomain.com',\n        domainDefault: true\n      }\n    ],\n    strategy: 'prefix',\n    differentDomains: true\n    // Or enable the option in production only\n    // differentDomains: (process.env.NODE_ENV === 'production')\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using useLocaleRoute in Vue 3 Component\nDESCRIPTION: Shows how to use the useLocaleRoute composable to resolve routes according to the current locale in a Vue 3 component.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst localeRoute = useLocaleRoute()\nconst { locale } = useI18n()\nconst linkPath = computed(() => {\n  const route = localeRoute('blog', locale.value)\n  return route != null ? route.path : '/'\n})\n</script>\n\n<template>\n  <NuxtLink :to=\"linkPath\">{{ $t('blog') }}</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Domains in Nuxt i18n Module\nDESCRIPTION: This configuration sets up different domains for each language using the i18n module. It demonstrates how to specify domain names for different locales and optionally enable the feature conditionally in production only.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/13.different-domains.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  locales: [\n    {\n      code: 'en',\n      domain: 'mydomain.com'\n    },\n    {\n      code: 'es',\n      domain: 'es.mydomain.com'\n    },\n    {\n      code: 'fr',\n      domain: 'fr.mydomain.com'\n    },\n    {\n      code: 'ru',\n      domain: 'http://ru.mydomain.com'\n    },\n    {\n      code: 'ua',\n      domain: 'https://ua.mydomain.com'\n    }\n  ],\n  differentDomains: true\n  // Or enable the option in production only\n  // differentDomains: (process.env.NODE_ENV === 'production')\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLocaleRoute for Programmatic Navigation\nDESCRIPTION: This snippet shows how to use the useLocaleRoute composable for programmatic navigation with localized routes in a Vue component.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/02.usage.md#2025-04-10_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst localeRoute = useLocaleRoute()\nfunction onClick() {\n  const route = localeRoute({ name: 'user-profile', query: { foo: '1' } })\n  if (route) {\n    return navigateTo(route.fullPath)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"onClick\">Show profile</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring vue-i18n-loader in Nuxt\nDESCRIPTION: Configuration setup in nuxt.config.ts to enable vue-i18n-loader for component-level translations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/15.per-component-translations.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  vueI18nLoader: true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nuxt I18n Configuration\nDESCRIPTION: Demonstrates the basic configuration for lazy-loading translations in nuxt.config.ts, including locale definitions and lazy loading settings.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/07.lazy-load-translations.md#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        file: 'en-US.json'\n      },\n      {\n        code: 'es',\n        file: 'es-ES.js'\n      },\n      {\n        code: 'fr',\n        file: 'fr-FR.ts'\n      }\n    ],\n    lazy: true,\n    defaultLocale: 'en'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Locale Domains in Nuxt Configuration\nDESCRIPTION: This configuration imports locale domains from an external file and uses them in the i18n module configuration. It enables different domains only in production and sets up locales with their respective domains.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/13.different-domains.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst localeDomains = require('./config/locale-domains')\n[\n  '@nuxtjs/i18n',\n  {\n    differentDomains: process.env.NODE_ENV === 'production',\n    locales: [\n      {\n        code: 'uk',\n        domain: localeDomains.uk, // optional\n      },\n      {\n        code: 'fr',\n        domain: localeDomains.fr, // optional\n      },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Lazy Loading Options\nDESCRIPTION: Configuration options for enabling lazy loading of translations. Can be set as boolean or LazyOptions type with a default value of false. When enabled, requires langDir configuration and locales must be objects with file/files keys.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/03.lazy.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## `lazy`\n\n- type: `boolean` or `LazyOptions`\n- default: `false`\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n Custom Block with YAML\nDESCRIPTION: Shows an alternative implementation of component-level translations using i18n custom blocks with YAML syntax. Provides the same translations for English and Japanese as the JSON example.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/12.per-component-translations.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<i18n lang=\"yaml\">\nen:\n  hello: 'hello world!'\nja:\n  hello: 'こんにちは、世界!'\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Get Browser Locale TypeScript Method\nDESCRIPTION: Method to get the browser's locale code filtered against defined options. Takes no arguments and returns a string or undefined.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/04.vue-i18n.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetBrowserLocale(): string | undefined\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue I18n Compilation Options\nDESCRIPTION: Default configuration object for Vue I18n message compilation settings. Includes options for JIT compilation, strict message validation, and HTML escaping.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/06.compilation.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jit: true,\n  strictMessage: true,\n  escapeHtml: false\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Production Locale Domains\nDESCRIPTION: Production environment file example that defines domain names for different locales using the NUXT_PUBLIC_I18N_LOCALES format for runtime environment variables.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/09.different-domains.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nNUXT_PUBLIC_I18N_LOCALES_UK_DOMAIN=uk.example.test\nNUXT_PUBLIC_I18N_LOCALES_FR_DOMAIN=fr.example.test\n```\n\n----------------------------------------\n\nTITLE: Complex Pages Directory Structure for Localization\nDESCRIPTION: Shows a more complex pages directory structure with deeply nested routes that would need URL localization.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-| pages/\n---| about.vue\n---| services/\n-----| index.vue\n-----| coaching.vue\n-----| development/\n-------| app.vue\n-------| index.vue\n-------| website.vue\n```\n\n----------------------------------------\n\nTITLE: Default Language i18n Block Example\nDESCRIPTION: Shows how i18n custom block works with default language setting, allowing omission of the lang attribute while maintaining the same functionality.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/08.custom-block.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<i18n>\nen:\n  hello: Hello\nes:\n  hello: Hola\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Localizing Path in Vue\nDESCRIPTION: The localePath() method returns a localized path for the given route. It accepts a route argument (string or Location object) and an optional locale argument, defaulting to the current locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/05.vue.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlocalePath(route, locale)\n```\n\n----------------------------------------\n\nTITLE: Configuring differentDomains Option in Nuxt i18n\nDESCRIPTION: Configuration option for enabling different domains per locale. When enabled, locales must be configured as objects containing domain keys.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/05.domain.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- type: `boolean`\n- default: `false`\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Runtime Options in Nuxt.js TypeScript Config\nDESCRIPTION: This snippet demonstrates how to set up i18n runtime configuration options in a Nuxt.js project's configuration file. It shows how to use runtimeConfig to allow for environment variable overrides of i18n options.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/09.runtime-config.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n  i18n: {\n    // Leave options unset that you want to set using `runtimeConfig`\n    // baseUrl: 'https://example.com',\n  },\n  runtimeConfig: {\n    public: {\n      i18n: {\n        baseUrl: 'https://example.com',\n        locales: {}\n        // other options ...\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Default Configuration i18n Block Example\nDESCRIPTION: Demonstrates the simplified i18n block syntax when using default language settings with global scope configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/08.custom-block.md#2025-04-10_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<i18n>\nen:\n  hello: Hello\nes:\n  hello: Hola\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Installing @nuxtjs/i18n Module in Nuxt Project\nDESCRIPTION: Command to uninstall the old 'nuxt-i18n' module and install the new '@nuxtjs/i18n' module using npx.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/17.migrating.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add i18n\n```\n\n----------------------------------------\n\nTITLE: Root Redirect Configuration Example\nDESCRIPTION: JSON example showing how to configure a root URL redirect with status code and destination path.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 301,\n  \"path\": \"about-us\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue I18n Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an i18n.config.ts file to configure Vue I18n options in a Nuxt project. It uses the defineI18nConfig macro function to improve type inference.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/03.vue-i18n.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nConfig(() => {\n  return {\n    // vue-i18n options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Blocks in Nuxt i18n\nDESCRIPTION: Configures the i18n custom blocks of Single File Components (SFC). It sets the default language for SFC and determines whether to include all i18n custom blocks in the global scope.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/10.misc.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  customBlocks: {\n    defaultSFCLang: 'json',\n    globalSFCScope: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using YAML in i18n Custom Blocks with lang Attribute\nDESCRIPTION: Example of an i18n custom block in a Vue Single File Component (SFC) with explicit YAML language specification. This block contains English and Spanish translations for the 'hello' key.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<i18n lang=\"yaml\">\nen:\n  hello: Hello\nes:\n  hello: Hola\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Paths in Nuxt Config for i18n Module\nDESCRIPTION: This snippet shows how to configure custom paths for different locales in the Nuxt configuration file. It includes setting parsePages to false and defining custom paths for various routes, including nested routes.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/07.custom-paths.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ni18n: {\n  parsePages: false,   // Disable babel parsing\n  pages: {\n    about: {\n      en: '/about-us', // -> accessible at /about-us (no prefix since it's the default locale)\n      fr: '/a-propos', // -> accessible at /fr/a-propos\n      es: '/sobre'     // -> accessible at /es/sobre\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ni18n: {\n  parsePages: false,\n  pages: {\n    '_nested/_route/index': {\n      en: '/mycustompath/:nested/:route?' // Params need to be put back here as you would with vue-router\n    },\n    '_nested/_route/_': {\n      en: '/mycustompath/:nested/*' // * will match the entire route path after /:nested/\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ni18n: {\n  parsePages: false,\n  pages: {\n    about: {\n      en: '/about',\n      fr: '/a-propos',\n    },\n    'services/index': {\n      en: '/services',\n      fr: '/offres',\n    },\n    'services/development/index': {\n      en: '/services/development',\n      fr: '/offres/developement',\n    },\n    'services/development/app/index': {\n      en: '/services/development/app',\n      fr: '/offres/developement/app',\n    },\n    'services/development/website/index': {\n      en: '/services/development/website',\n      fr: '/offres/developement/site-web',\n    },\n    'services/coaching/index': {\n      en: '/services/coaching',\n      fr: '/offres/formation',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Configuration with Function Export\nDESCRIPTION: Example of a Vue I18n configuration file that uses defineI18nConfig function to export locale settings, importing messages from external files.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport en from '../locales/en.json'\nimport fr from '../locales/fr.yaml'\n\n// You can use `defineI18nConfig` to get type inferences for options to pass to vue-i18n.\nexport default defineI18nConfig(() => {\n  return {\n    legacy: false,\n    locale: 'en',\n    messages: {\n      en,\n      fr\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Features in Nuxt i18n\nDESCRIPTION: Sets up experimental features including locale detection, switch locale path link SSR, and auto-import of translation functions. These options are part of the 'experimental' configuration object.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/10.misc.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  experimental: {\n    localeDetector: '',\n    switchLocalePathLinkSSR: false,\n    autoImportTranslationFunctions: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Scope in i18n Custom Blocks\nDESCRIPTION: Example of an i18n custom block in a Vue SFC with global scope explicitly defined. With globalSFCScope: true, the global attribute would be redundant.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<i18n lang=\"yaml\" global>\nen:\n  hello: Hello\nes:\n  hello: Hola\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Adding @nuxtjs/i18n types to tsconfig.json\nDESCRIPTION: Configuration for adding @nuxtjs/i18n types to the TypeScript compiler options in tsconfig.json. This enables TypeScript support for the module.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/01.setup.md#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"@nuxt/types\", \"@nuxtjs/i18n\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Project Structure for Nuxt I18n\nDESCRIPTION: Shows the recommended file structure for organizing translation files in a Nuxt project.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/07.lazy-load-translations.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-| nuxt-project/\n---| i18n/\n-----| locales/\n-------| en-US.json\n-------| es-ES.js\n-------| fr-FR.ts\n---| nuxt.config.ts\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Configuration with Plain Object Export\nDESCRIPTION: Example of a Vue I18n configuration file that exports a plain object with locale settings and messages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  legacy: false,\n  locale: 'en',\n  messages: {\n    en: {\n      welcome: 'Welcome'\n    },\n    fr: {\n      welcome: 'Bienvenue'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: I18n Configuration in Nuxt Config\nDESCRIPTION: Shows how to configure locales in the Nuxt configuration file with locale codes and display names.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/08.lang-switcher.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        name: 'English'\n      },\n      {\n        code: 'es',\n        name: 'Español'\n      },\n      {\n        code: 'fr',\n        name: 'Français'\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Routes in Page Components with defineI18nRoute\nDESCRIPTION: Shows how to define custom localized routes directly within a page component using the defineI18nRoute compiler macro. This approach is an alternative to configuring routes in nuxt.config.ts.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  paths: {\n    en: '/about-us', // -> accessible at /about-us (no prefix since it's the default locale)\n    fr: '/a-propos', // -> accessible at /fr/a-propos\n    es: '/sobre' // -> accessible at /es/sobre\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up Type Generation\nDESCRIPTION: Command to prepare the development environment and generate types\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev:prepare\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Vue I18n Configuration in JavaScript\nDESCRIPTION: This code snippet demonstrates how to export a custom configuration for vue-i18n as a function. It returns an object with a 'modifiers' property containing a 'snakeCase' function that replaces spaces with hyphens in a string.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/03.options-reference.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default context => {\n  return {\n    modifiers: {\n      snakeCase: str => str.split(' ').join('-')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for useSetI18nParams in TypeScript\nDESCRIPTION: TypeScript type declaration for the useSetI18nParams function, showing it returns a function that takes a locale record and returns void. It accepts an optional SeoAttributesOptions parameter.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/05.use-set-i18n-params.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ndeclare function useSetI18nParams(options?: SeoAttributesOptions): (locale: Record<Locale, unknown>) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Routes for Dynamic Pages with defineI18nRoute\nDESCRIPTION: Demonstrates how to define custom localized routes for dynamic pages using the defineI18nRoute compiler macro. The example shows how to handle dynamic parameters for English and Spanish locales.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  paths: {\n    en: '/articles/[name]',\n    es: '/artículo/[name]'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Dynamic Route Parameters in Vue Component\nDESCRIPTION: Example of setting dynamic route parameters for multiple locales using the nuxtI18n field in definePageMeta for a post page.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/02.routing.md#2025-04-10_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefinePageMeta({\n  nuxtI18n: {\n    en: { id: 'my-post' },\n    fr: { id: 'mon-article' }\n  }\n})\n</script>\n\n<template>\n  <!-- pages/post/[id].vue -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Type for defineI18nConfig Function in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript type definition for the defineI18nConfig function. It takes a loader function as an argument and returns a function that resolves to an I18nOptions object.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/10.define-i18n-config.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function defineI18nConfig<Config extends I18nOptions>(\n  loader: () => Config | Promise<Config>\n): () => Config | Promise<Config>\n```\n\n----------------------------------------\n\nTITLE: Using defineI18nConfig for Vue I18n Configuration\nDESCRIPTION: Shows how to use the defineI18nConfig function to define Vue I18n configuration options.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nConfig(() => ({\n  legacy: false,\n  locale: 'en',\n  messages: {\n    en: {\n      welcome: 'Welcome'\n    },\n    fr: {\n      welcome: 'Bienvenue'\n    }\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Route Paths with defineI18nRoute in Vue\nDESCRIPTION: This snippet demonstrates how to use the defineI18nRoute compiler macro in a Vue component to set custom route paths for different languages. It allows specifying unique paths for each supported locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/03.compiler-macros.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  paths: {\n    en: '/about-us',\n    fr: '/a-propos',\n    ja: '/about-ja'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useTranslation in Nuxt Event Handler\nDESCRIPTION: This snippet demonstrates how to use the useTranslation composable within a Nuxt event handler to perform server-side translations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/16.server-side-translations.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// you need to define `async` event handler\nexport default defineEventHandler(async event => {\n  // call `useTranslation`, so it return the translation function\n  const t = await useTranslation(event)\n  return {\n    // call translation function with key of locale messages,\n    // and translation function has some overload\n    hello: t('hello')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for defineI18nConfig\nDESCRIPTION: Provides the TypeScript type definition for the defineI18nConfig function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport function defineI18nConfig<Config extends I18nOptions>(\n  loader: () => Config | Promise<Config>\n): () => Config | Promise<Config>\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Basic Configuration with Plain Object\nDESCRIPTION: Demonstrates a basic Vue I18n configuration using a plain object export. Includes locale settings and message translations for English and French languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/01.index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  legacy: false,\n  locale: 'en',\n  messages: {\n    en: {\n      welcome: 'Welcome'\n    },\n    fr: {\n      welcome: 'Bienvenue'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Dynamic Routes\nDESCRIPTION: Example directory structure for blog pages with dynamic date and slug parameters.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-| pages/\n---| blog/\n-----| [date]/\n-------| [slug].vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Options for Nuxt i18n Module\nDESCRIPTION: This code snippet shows the default configuration for the bundle options in the Nuxt i18n module. It includes settings for compositionOnly, runtimeOnly, fullInstall, and dropMessageCompiler.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/07.bundle.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  compositionOnly: true,\n  runtimeOnly: false,\n  fullInstall: true,\n  dropMessageCompiler: false\n}\n```\n\n----------------------------------------\n\nTITLE: English Localization JSON for Module Example\nDESCRIPTION: This JSON file contains English translations for the 'my-module-example' namespace. It defines a 'hello' message that can be accessed using $t('my-module-example.hello').\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/17.install-module.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-module-example\": {\n    \"hello\": \"Hello from external module\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing defineI18nLocale for Dynamic Locale Message Loading in TypeScript\nDESCRIPTION: This example demonstrates how to use the defineI18nLocale function to create a loader that fetches locale messages from an API. It uses the $fetch function to make an HTTP request to a specified endpoint with the given locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/11.define-i18n-locale.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nLocale(locale => {\n  return $fetch(`https://your-company-product/api/${locale}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Paths in Vue Component for Nuxt i18n\nDESCRIPTION: This snippet demonstrates how to set custom paths for different locales directly in a Vue component file. It shows how to define paths for both static and dynamic routes.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/07.custom-paths.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  nuxtI18n: {\n    paths: {\n      en: '/about-us', // -> accessible at /about-us (no prefix since it's the default locale)\n      fr: '/a-propos', // -> accessible at /fr/a-propos\n      es: '/sobre' // -> accessible at /es/sobre\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  nuxtI18n: {\n    paths: {\n      en: '/articles/:name',\n      es: '/artículo/:name'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Catch-all Routes with i18n Route Parameters\nDESCRIPTION: Example for setting translated route parameters for catch-all routes (_.vue), using 'pathMatch' as the key for the parameter objects.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/12.lang-switcher.md#2025-04-10_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- pages/_.vue -->\n</template>\n\n<script>\nexport default {\n  async asyncData({ store }) {\n    await store.dispatch('i18n/setRouteParams', {\n      en: { pathMatch: 'my-post/abc' },\n      fr: { pathMatch: 'mon-article/xyz' }\n    })\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useLocalePath for URL Localization in Vue\nDESCRIPTION: This snippet shows how to use the useLocalePath composable to generate localized URLs for internal links in a Vue component.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/02.usage.md#2025-04-10_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst localePath = useLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"localePath('index')\">{{ $t('home') }}</NuxtLink>\n  <NuxtLink :to=\"localePath('/')\">{{ $t('home') }}</NuxtLink>\n  <NuxtLink :to=\"localePath('index', 'en')\">Homepage in English</NuxtLink>\n  <NuxtLink :to=\"localePath('/user/profile')\">Route by path to: {{ $t('profile') }}</NuxtLink>\n  <NuxtLink :to=\"localePath('user-profile')\">Route by name to: {{ $t('profile') }}</NuxtLink>\n  <NuxtLink :to=\"localePath({ name: 'category-slug', params: { slug: category.slug } })\">\n    {{ category.title }}\n  </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching for Locale Files\nDESCRIPTION: Demonstrates how to configure caching behavior for lazy-loaded translation files using object notation with path and cache properties.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/07.lazy-load-translations.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      /**\n       * Example definition with `files` for Spanish speaking countries\n       */\n      {\n        code: 'es-ES',\n        name: 'Español (Spain)',\n        // file with cache disabled\n        file: { path: 'es.js', cache: false }\n      },\n      {\n        code: 'es-AR',\n        name: 'Español (Argentina)',\n        // files with cache disabled\n        files: [\n          { path: 'es.js', cache: false },\n          { path: 'es-AR.js', cache: false }\n        ]\n      },\n      {\n        code: 'es-UY',\n        name: 'Español (Uruguay)',\n        // strings and object configurations can be mixed\n        files: [{ path: 'es.js', cache: false }, 'es-UY.json']\n      }\n    ],\n    lazy: true,\n    langDir: 'lang',\n    defaultLocale: 'en'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Routes in nuxt.config.ts\nDESCRIPTION: Setting up custom locale-specific route paths in the Nuxt i18n module configuration. This example shows how to define custom paths for the 'about' page in English, French, and Spanish.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    customRoutes: 'config', // disable custom route with page components\n    pages: {\n      about: {\n        en: '/about-us', // -> accessible at /about-us (no prefix since it's the default locale)\n        fr: '/a-propos', // -> accessible at /fr/a-propos\n        es: '/sobre' // -> accessible at /es/sobre\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Router for Smooth Locale Transitions in Nuxt\nDESCRIPTION: This snippet shows how to configure the Nuxt router to wait for locale changes before scrolling, ensuring a smoother transition when changing languages and navigating between pages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/08.lang-switcher.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RouterConfig } from '@nuxt/schema'\n\nexport default <RouterConfig>{\n  async scrollBehavior(to, from, savedPosition) {\n    const nuxtApp = useNuxtApp()\n\n    // make sure the route has changed.\n    if (nuxtApp.$i18n && to.name !== from.name) {\n      // `$i18n` is injected in the `setup` of the nuxtjs/i18n module.\n      // `scrollBehavior` is guarded against being called even when it is not completed\n      await nuxtApp.$i18n.waitForPendingLocaleChange()\n    }\n\n    return savedPosition || { top: 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating beforeLanguageSwitch to onBeforeLanguageSwitch\nDESCRIPTION: Diff showing the change from 'beforeLanguageSwitch' to 'onBeforeLanguageSwitch' in the i18n configuration, including the addition of 'isInitialSetup' and 'context' parameters.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/17.migrating.md#2025-04-10_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-  app.i18n.beforeLanguageSwitch = (oldLocale, newLocale) => {\n-    // ...\n-  }\n+  app.i18n.onBeforeLanguageSwitch = (oldLocale, newLocale, isInitialSetup, context) => {\n+    if (!isInitialSetup) {\n+      // ...\n+    }\n+  }\n```\n\n----------------------------------------\n\nTITLE: Configuring @nuxtjs/i18n for Lazy-Loading in Nuxt.js\nDESCRIPTION: This snippet demonstrates how to configure the @nuxtjs/i18n module in nuxt.config.ts to enable lazy-loading of translations. It sets up multiple locales, specifies the language directory, and enables lazy-loading.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/11.lazy-load-translations.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  locales: [\n    {\n      code: 'en',\n      file: 'en-US.js'\n    },\n    {\n      code: 'es',\n      file: 'es-ES.js'\n    },\n    {\n      code: 'fr',\n      file: 'fr-FR.js'\n    }\n  ],\n  lazy: true,\n  langDir: 'lang/',\n  defaultLocale: 'en'\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Translation Loading Example\nDESCRIPTION: Demonstrates how to fetch translations dynamically from an API endpoint.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/07.lazy-load-translations.md#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineI18nLocale(locale => {\n  // for example, fetch locale messages from nuxt server\n  return $fetch(`/api/${locale}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for defineI18nRoute in TypeScript\nDESCRIPTION: Provides the TypeScript type definition for the defineI18nRoute function and the I18nRoute interface, showing the expected structure and types of the parameters.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/07.compiler-macros/01.define-i18n-route.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefineI18nRoute(route: I18nRoute | false) => void\n\ninterface I18nRoute {\n  paths?: Record<Locale, `/${string}`>\n  locales?: Locale[]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @nuxtjs/i18n in nuxt.config.ts\nDESCRIPTION: TypeScript configuration for adding @nuxtjs/i18n to the modules section in nuxt.config.ts. This method enables type-checking for module options.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/01.setup.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  modules: [\n    '@nuxtjs/i18n',\n  ],\n  i18n: {\n    /* module options */\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Locale Path in Vue\nDESCRIPTION: The switchLocalePath() method returns the path of the current route for a specified locale. It takes a locale argument of type Locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/05.vue.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nswitchLocalePath(locale)\n```\n\n----------------------------------------\n\nTITLE: Multiple Files Structure for Spanish Variants\nDESCRIPTION: Shows the file structure for handling multiple Spanish dialect variations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/07.lazy-load-translations.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-| nuxt-project/\n---| i18n/\n-----| locales/\n-------| es.json    # locale messages for common Spanish\n-------| es-AR.json # locale messages for Argentina\n-------| es-UY.json # locale messages for Uruguay\n-------| es-US.json # locale messages for Estados Unidos\n-------| ...        # other countries\n---| nuxt.config.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring @nuxtjs/i18n in Nuxt.js\nDESCRIPTION: This snippet shows how to configure the @nuxtjs/i18n module in the Nuxt.js configuration file. It sets up supported locales, default locale, and translation messages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/02.basic-usage.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  modules: [\n    '@nuxtjs/i18n'\n  ],\n\n  i18n: {\n    locales: ['en', 'fr', 'es'],\n    defaultLocale: 'en',\n    vueI18n: {\n      fallbackLocale: 'en',\n      messages: {\n        en: {\n          welcome: 'Welcome'\n        },\n        fr: {\n          welcome: 'Bienvenue'\n        },\n        es: {\n          welcome: 'Bienvenido'\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nuxt i18n Module to Nuxt Configuration\nDESCRIPTION: Configuration to add @nuxtjs/i18n to the modules array in the Nuxt configuration file.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/01.index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n']\n})\n```\n\n----------------------------------------\n\nTITLE: Registering I18n Module in Nuxt Module\nDESCRIPTION: Example of using the 'i18n:registerModule' hook to register additional localization files from a custom Nuxt module. This demonstrates how to extend the i18n messages from a module by providing a langDir and locales configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/06.nuxt.md#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createResolver, defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  async setup(options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n    nuxt.hook('i18n:registerModule', register => {\n      register({\n        // langDir path needs to be resolved\n        langDir: resolve('./lang'),\n        locales: [\n          {\n            code: 'en',\n            file: 'en.json',\n          },\n          {\n            code: 'fr',\n            file: 'fr.json',\n          },\n        ]\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Project Structure for I18n Files in Shell\nDESCRIPTION: Example directory structure for organizing i18n files in a Nuxt project, showing the recommended location for locale files and configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\napp/\nserver/\ni18n/\n  locales/\n    en.json\n    ja.json\n  i18n.config.ts\n  localeDetector.ts\nnuxt.config.ts\n```\n\n----------------------------------------\n\nTITLE: Dynamic Routes Structure for Localization\nDESCRIPTION: Shows a pages directory structure with dynamic routes that need URL localization. The example includes a blog with date and slug parameters.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-| pages/\n---| blog/\n-----| [date]/\n-------| [slug].vue\n```\n\n----------------------------------------\n\nTITLE: Installing @nuxtjs/i18n module with Nuxi\nDESCRIPTION: Command to add the @nuxtjs/i18n dependency to a Nuxt.js project using Nuxi.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/01.setup.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add i18n\n```\n\n----------------------------------------\n\nTITLE: Using localeHead Function in TypeScript\nDESCRIPTION: Example of how to use the localeHead function in TypeScript for generating locale-specific head tags.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n$localeHead()\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt I18n in nuxt.config.ts\nDESCRIPTION: Example configuration for the Nuxt I18n module in the nuxt.config.ts file. It sets up locales and default locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/README.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  modules: [\n    '@nuxtjs/i18n',\n  ],\n  i18n: {\n    locales: [\n      { code: 'en', language: 'en-US' },\n      { code: 'fr', language: 'fr-FR' }\n    ],\n    defaultLocale: 'en',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using defineI18nLocaleDetector composable in TypeScript\nDESCRIPTION: Shows how to define a locale detector that checks query parameters, cookies, and headers to determine the user's locale. The detector falls back to the default locale if no locale is found.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/16.server-side-translations.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// Detect based on query, cookie, header\nexport default defineI18nLocaleDetector((event, config) => {\n  // try to get locale from query\n  const query = tryQueryLocale(event, { lang: '' }) // disable locale default value with `lang` option\n  if (query) {\n    return query.toString()\n  }\n\n  // try to get locale from cookie\n  const cookie = tryCookieLocale(event, { lang: '', name: 'i18n_locale' }) // disable locale default value with `lang` option\n  if (cookie) {\n    return cookie.toString()\n  }\n\n  // try to get locale from header (`accept-header`)\n  const header = tryHeaderLocale(event, { lang: '' }) // disable locale default value with `lang` option\n  if (header) {\n    return header.toString()\n  }\n\n  // If the locale cannot be resolved up to this point, it is resolved with the value `defaultLocale` of the locale config passed to the function\n  return config.defaultLocale\n})\n```\n\n----------------------------------------\n\nTITLE: Basic YAML i18n Block Example\nDESCRIPTION: Demonstrates the usage of an i18n custom block with explicit YAML language specification for English and Spanish translations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/08.custom-block.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<i18n lang=\"yaml\">\nen:\n  hello: Hello\nes:\n  hello: Hola\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt I18n in nuxt.config.ts\nDESCRIPTION: Example configuration for the Nuxt I18n module in the nuxt.config.ts file. It sets up locales and default locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/README.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  modules: [\n    '@nuxtjs/i18n',\n  ],\n  i18n: {\n    locales: [\n      { code: 'en', language: 'en-US' },\n      { code: 'fr', language: 'fr-FR' }\n    ],\n    defaultLocale: 'en',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: English Translation Configuration\nDESCRIPTION: JSON configuration file containing English translations for the module example. Demonstrates proper namespace usage to avoid conflicts.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/13.extend-messages.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-module-example\": {\n    \"hello\": \"Hello from external module\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Localized Routes Globally in Nuxt Config\nDESCRIPTION: This snippet shows how to configure localized routes globally in the Nuxt configuration file. It disables the 'en' locale for the about page and sets parsePages to false for manual configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/08.ignoring-localized-routes.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ni18n: {\n  parsePages: false,\n  pages: {\n    about: {\n      en: false,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for defineI18nLocaleDetector\nDESCRIPTION: Provides the TypeScript type definition for the defineI18nLocaleDetector function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype LocaleConfig = {\n  defaultLocale: Locale\n  fallbackLocale: FallbackLocale\n}\ndeclare function defineI18nLocaleDetector(\n  detector: (event: H3Event, config: LocaleConfig) => string\n): (event: H3Event, config: LocaleConfig) => string\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue I18n Module Path in Nuxt\nDESCRIPTION: Shows how to configure the Nuxt module to use a custom path for Vue I18n configuration. The configuration is done in the nuxt.config.ts file by specifying the i18n module and custom configuration path.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/01.index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n  i18n: {\n    vueI18n: './nuxt-i18n.js' // custom path example\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL in Nuxt Config (TypeScript)\nDESCRIPTION: Configures the baseUrl option in the Nuxt configuration file to specify the production domain for generating fully-qualified alternate URLs.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/06.seo.md#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    baseUrl: 'https://my-nuxt-app.com'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Component Usage Example\nDESCRIPTION: Examples of built-in i18n components that can be installed based on fullInstall configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<i18n-t>\n```\n\nLANGUAGE: html\nCODE:\n```\n<i18n-d>\n```\n\nLANGUAGE: html\nCODE:\n```\n<i18n-n>\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n Module Registration in Nuxt\nDESCRIPTION: Example of a Nuxt module that registers additional i18n translations using the i18n:registerModule hook. The module sets up language configurations for English and French translations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/13.extend-messages.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  async setup(options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n\n    nuxt.hook('i18n:registerModule', register => {\n      register({\n        // langDir path needs to be resolved\n        langDir: resolve('./lang'),\n        locales: [\n          {\n            code: 'en',\n            file: 'en.json',\n          },\n          {\n            code: 'fr',\n            file: 'fr.json',\n          },\n        ]\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Strategy with Locale Order (JavaScript)\nDESCRIPTION: This snippet shows how to configure the i18n strategy for Nuxt versions lower than 2.10.2 when using 'prefix_except_default' or 'prefix_and_default' strategies. It ensures that the default locale is the last in the array of locales.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/06.strategies.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ni18n: {\n  strategy: 'prefix_except_default',\n  defaultLocale: 'en',\n  locales: [\n    'fr',\n    'en',  // Make sure that default locale is the last one!\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting baseUrl in nuxt.config.ts for fully-qualified alternate URLs\nDESCRIPTION: Configuration example showing how to set the baseUrl option to make alternate URLs fully-qualified, which is required for SEO features.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/10.seo.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  baseUrl: 'https://my-nuxt-app.com'\n}\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt UI Pro Docs for Production\nDESCRIPTION: Commands to build the application for production using different package managers.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Disabling Directory Restructuring in TypeScript\nDESCRIPTION: Configuration option to disable the directory restructuring feature in Nuxt I18n v9 for easier migration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nrestructureDir: false\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n Module Registration in Nuxt\nDESCRIPTION: Sets up a Nuxt module that registers additional i18n translations using the i18n:registerModule hook. Demonstrates how to configure language directory and locale settings for multiple languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/13.extend-messages.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  async setup(options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n\n    nuxt.hook('i18n:registerModule', register => {\n      register({\n        // langDir path needs to be resolved\n        langDir: resolve('./lang'),\n        locales: [\n          {\n            code: 'en',\n            file: 'en.json',\n          },\n          {\n            code: 'fr',\n            file: 'fr.json',\n          },\n        ]\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookie Usage in Browser Language Detection (TypeScript)\nDESCRIPTION: Configuration to disable cookie usage in browser language detection, which causes the module to detect and redirect to the user's preferred language on every visit.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/09.browser-language-detection.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  detectBrowserLanguage: {\n    useCookie: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Catchall Locale in Nuxt Config (TypeScript)\nDESCRIPTION: Shows how to configure a specific locale as the catchall locale for hreflang links in the Nuxt configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/06.seo.md#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        language: 'en-US'\n      },\n      {\n        code: 'gb',\n        language: 'en-GB',\n        isCatchallLocale: true // This one will be used as catchall locale\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Route Localization in Nuxt Config\nDESCRIPTION: Demonstrates how to globally disable route localization for specific pages through the Nuxt configuration file.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/04.ignoring-localized-routes.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  customRoutes: 'config',\n  pages: {\n    about: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nuxt Configuration with Custom i18n Module\nDESCRIPTION: Example of how to properly configure Nuxt to use the custom i18n module alongside @nuxtjs/i18n. Shows correct module registration order.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/13.extend-messages.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExampleModule from './my-module-example/module.ts' // import your custom module\n\nexport default defineNuxtConfig({\n  modules: [ExampleModule, '@nuxtjs/i18n']\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales in nuxt/i18n\nDESCRIPTION: Example of setting up locales with complex configurations including code, ISO, file, and direction properties. This snippet demonstrates how to define multiple locales with custom properties.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/03.options-reference.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { code: 'en', iso: 'en-US', file: 'en.js', dir: 'ltr' },\n  { code: 'ar', iso: 'ar-EG', file: 'ar.js', dir: 'rtl' },\n  { code: 'fr', iso: 'fr-FR', file: 'fr.js' }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Catchall Locale in Nuxt Config (TypeScript)\nDESCRIPTION: Shows how to configure locales in Nuxt config, including setting a specific locale as the catchall using the isCatchallLocale property.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/06.seo.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        language: 'en-US'\n      },\n      {\n        code: 'gb',\n        language: 'en-GB',\n        isCatchallLocale: true // This one will be used as catchall locale\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Routes Localization\nDESCRIPTION: Configuration for localizing dynamic routes with parameters like date and slug for a blog in Japanese.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    customRoutes: 'config',\n    pages: {\n      'blog-date-slug': {\n        // params need to be put back here as you would with Nuxt Dynamic Routes\n        // https://nuxt.com/docs/guide/directory-structure/pages#dynamic-routes\n        ja: '/blog/tech/[date]/[slug]'\n        // ...\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Staging Locale Domains\nDESCRIPTION: Staging environment file example that sets different domain names for locales, allowing the same build to be deployed to different environments with appropriate domain configurations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/09.different-domains.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nNUXT_PUBLIC_I18N_LOCALES_UK_DOMAIN=uk.staging.example.test\nNUXT_PUBLIC_I18N_LOCALES_FR_DOMAIN=fr.staging.example.test\n```\n\n----------------------------------------\n\nTITLE: Nuxt Configuration with Module Registration\nDESCRIPTION: Configuration showing proper module registration order, ensuring the custom module is loaded before the i18n module for proper hook execution.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/13.extend-messages.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExampleModule from './my-module-example/module.ts' // import your custom module\n\nexport default defineNuxtConfig({\n  modules: [ExampleModule, '@nuxtjs/i18n']\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling scanPageMeta for Custom Named Routes\nDESCRIPTION: Shows how to enable the experimental scanPageMeta feature in Nuxt configuration, which is required for custom named routes to work correctly with Nuxt I18n.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/03.custom-paths.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    scanPageMeta: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring locales without explicit catchall locale\nDESCRIPTION: Example configuration showing the default behavior for hreflang catchall locale selection, where the first locale is used as catchall.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/10.seo.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  locales: [\n    {\n      code: 'en',\n      iso: 'en-US' // Will be used as \"catchall\" locale by default\n    },\n    {\n      code: 'gb',\n      iso: 'en-GB'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Translation Function in TypeScript\nDESCRIPTION: Example of how to use the alternative Vue I18n translation function in TypeScript with proper type annotations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n$t()\n```\n\n----------------------------------------\n\nTITLE: Opting out of Edge Channel - Package.json Update\nDESCRIPTION: Package.json diff showing how to switch back to the stable version of the i18n module.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/01.getting-started/01.index.md#2025-04-10_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n-   \"@nuxtjs/i18n\": \"npm:@nuxtjs/i18n-edge\"\n+   \"@nuxtjs/i18n\": \"^9.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Nuxt Module to Extend Pages\nDESCRIPTION: This code demonstrates how to create a Nuxt module that adds a new page using the 'pages:extend' hook. It uses the @nuxt/kit utilities to define the module and resolve file paths.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/14.extend-pages.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n\n    nuxt.hook('pages:extend', pages => {\n      pages.push({\n        name: 'example-page',\n        path: '/example-page',\n        file: resolve(__dirname, './pages/example-page.vue')\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Origin Support for Language Detection Cookie (TypeScript)\nDESCRIPTION: Setup for using the language detection cookie in cross-origin environments like iFrames by changing the cookie settings to SameSite=None with Secure flag.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/09.browser-language-detection.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  detectBrowserLanguage: {\n    useCookie: true,\n    cookieCrossOrigin: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring locales with explicit catchall locale using isCatchallLocale\nDESCRIPTION: Example configuration showing how to use the isCatchallLocale property to explicitly select a catchall locale for hreflang tags.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/10.seo.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  locales: [\n    {\n      code: 'en',\n      iso: 'en-US'\n    },\n    {\n      code: 'gb',\n      iso: 'en-GB',\n      isCatchallLocale: true // This one will be used as catchall locale\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt i18n in a Module using installModule in TypeScript\nDESCRIPTION: Demonstrates how to set up a Nuxt module that installs Nuxt i18n with proper path resolution. The example resolves paths for vueI18n configuration, langDir, and locale files to ensure absolute paths are used when installing the i18n module.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/17.install-module.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  async setup(options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n\n    // paths needs to be resolved so absolute paths are used\n    await installModule('@nuxtjs/i18n', {\n      vueI18n: resolve('./i18n.config.ts'),\n      langDir: resolve('./lang'),\n      locales: [\n        {\n          code: 'en',\n          file: resolve('./lang/en.json'),\n        },\n        {\n          code: 'fr',\n          file: resolve('./lang/fr.json'),\n        },\n      ]\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useSwitchLocalePath\nDESCRIPTION: Provides the TypeScript type definition for the useSwitchLocalePath composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useSwitchLocalePath(options?: I18nCommonRoutingOptionsWithComposable): (locale?: Locale) => string\n```\n\n----------------------------------------\n\nTITLE: Configuring locales with automatic catchall detection\nDESCRIPTION: Example configuration showing how the module automatically detects a catchall locale when an iso value matches just the language code.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/10.seo.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  locales: [\n    {\n      code: 'gb',\n      iso: 'en-GB'\n    },\n    {\n      code: 'en',\n      iso: 'en' // will be used as \"catchall\" locale\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: French Localization JSON for Module Example\nDESCRIPTION: This JSON file contains French translations for the 'my-module-example' namespace. It defines a 'hello' message that can be accessed using $t('my-module-example.hello').\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/17.install-module.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-module-example\": {\n    \"hello\": \"Bonjour depuis le module externe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Redirect in Nuxt I18n\nDESCRIPTION: Example showing how to configure the rootRedirect option to redirect users from the root URL to a specific path with a custom status code.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/3.options/02.routing.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 301,\n  \"path\": \"about-us\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to Nuxt Page (Vue)\nDESCRIPTION: Demonstrates how to add custom metadata to a specific page component using useHead in addition to the global SEO setup.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/06.seo.md#2025-04-10_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// define page meta for layouts/default.vue\ndefinePageMeta({\n  title: 'pages.title.about'\n})\n\nuseHead({\n  meta: [{ property: 'og:title', content: 'this is og title for about page' }]\n})\n</script>\n\n<template>\n  <h2>{{ $t('pages.about.description') }}</h2>\n</template>\n```\n\n----------------------------------------\n\nTITLE: English Language JSON Configuration for i18n Module\nDESCRIPTION: English language file for the Nuxt i18n module. Defines translation strings that will be available to the project through the i18n translation system.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/17.install-module.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-module-example\": {\n    \"hello\": \"Hello from external module\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookie Usage in Browser Language Detection\nDESCRIPTION: This configuration disables the use of cookies for storing the detected language preference. It sets the useCookie option to false, causing the language detection to occur on every visit.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/05.browser-language-detection.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    detectBrowserLanguage: {\n      useCookie: false\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Browser Language Detection Configuration in Nuxt\nDESCRIPTION: Basic configuration for browser language detection with cookie support and root path redirection for better SEO.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/05.browser-language-detection.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    detectBrowserLanguage: {\n      useCookie: true,\n      cookieKey: 'i18n_redirected',\n      redirectOn: 'root' // recommended\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Locales in Project with Extended Layer\nDESCRIPTION: Example of a Nuxt project that extends a layer and also provides its own locale configuration. Shows how to override or add locales to those provided by the extended layer.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/15.layers.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: ['my-layer'],\n  i18n: {\n    langDir: './lang',\n    locales: [{ code: 'en', file: 'en.json' }]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales and Base URL in Nuxt Config (TypeScript)\nDESCRIPTION: Sets up the locales option as an array of objects with language codes and tags, and configures the baseUrl for production in the Nuxt configuration file.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/06.seo.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        language: 'en-US'\n      },\n      {\n        code: 'es',\n        language: 'es-ES'\n      },\n      {\n        code: 'fr',\n        language: 'fr-FR'\n      }\n    ],\n    baseUrl: 'https://my-nuxt-app.com'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing the Cookie Name for Browser Language Detection (TypeScript)\nDESCRIPTION: Demonstrates how to customize the cookie name used by @nuxtjs/i18n for storing the detected language preference.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/09.browser-language-detection.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  detectBrowserLanguage: {\n    useCookie: true,\n    cookieKey: 'my_custom_cookie_name'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Locales Across Layers\nDESCRIPTION: Shows how to merge locale configurations between the main project and extended layers with specific file mappings.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/15.layers.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: ['my-layer'],\n  i18n: {\n    locales: [{ code: 'en', file: 'en.json' }]\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/i18n'],\n  i18n: {\n    lazy: true,\n    locales: [\n      { code: 'en', file: 'en.json' },\n      { code: 'nl', file: 'nl.json' }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata to a Nuxt Page (Vue)\nDESCRIPTION: Demonstrates how to add custom metadata to a specific page (about page) using useHead, in addition to the global metadata set by useLocaleHead.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/06.seo.md#2025-04-10_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// define page meta for layouts/default.vue\ndefinePageMeta({\n  title: 'pages.title.about'\n})\n\nuseHead({\n  meta: [{ property: 'og:title', content: 'this is og title for about page' }]\n})\n</script>\n\n<template>\n  <h2>{{ $t('pages.about.description') }}</h2>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Completely Disabling Browser Language Detection (TypeScript)\nDESCRIPTION: Shows how to completely disable the browser language detection feature in the @nuxtjs/i18n module.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/09.browser-language-detection.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  detectBrowserLanguage: false\n}\n```\n\n----------------------------------------\n\nTITLE: Locale File Merging Example\nDESCRIPTION: Demonstrates how locale files from different layers are merged, with earlier layers taking priority for overlapping keys.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/15.layers.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"title\": \"foo\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"title\": \"layer title\",\n  \"description\": \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useLocaleRoute\nDESCRIPTION: Provides the TypeScript type definition for the useLocaleRoute composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useLocaleRoute(\n  options?: I18nCommonRoutingOptionsWithComposable\n): (route: RawLocation | RouteLocation, locale?: Locale) => Route | (RouteLocation & { href: string }) | undefined\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Language Detection in nuxt/i18n\nDESCRIPTION: Default configuration object for the detectBrowserLanguage option. This snippet shows the various settings available for controlling browser language detection and redirection behavior.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/03.options-reference.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  alwaysRedirect: false,\n  fallbackLocale: '',\n  redirectOn: 'root',\n  useCookie: true,\n  cookieAge: 365,\n  cookieCrossOrigin: false,\n  cookieDomain: null,\n  cookieKey: 'i18n_redirected',\n  cookieSecure: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Locale Resolution with NuxtLinkLocale Component in Vue\nDESCRIPTION: Shows how to use the NuxtLinkLocale component with a specific locale parameter to force route localization to a particular language (Dutch in this example), compared with the equivalent implementation.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/05.components/01.nuxt-link-locale.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLinkLocale to=\"/\" locale=\"nl\">{{ $t('home') }}</NuxtLinkLocale>\n</template>\n\n<!-- equivalent to -->\n\n<script setup>\nconst localePath = useLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"localePath('/', 'nl')\">{{ $t('home') }}</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Declaring useLocalePath Type Definition in TypeScript\nDESCRIPTION: TypeScript type declaration for useLocalePath composable that defines its signature. The function takes optional I18nCommonRoutingOptionsWithComposable and returns a function that resolves route paths based on locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/01.use-locale-path.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useLocalePath(\n  options?: I18nCommonRoutingOptionsWithComposable\n): (route: RawLocation | RouteLocation, locale?: Locale) => string\n```\n\n----------------------------------------\n\nTITLE: Locales Configuration Example with Complex Options\nDESCRIPTION: JSON example showing how to configure the locales option with complex locale objects including language codes, file paths, and text direction.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"code\": \"en\", \"language\": \"en-US\", \"file\": \"en.js\", \"dir\": \"ltr\" },\n  { \"code\": \"ar\", \"language\": \"ar-EG\", \"file\": \"ar.js\", \"dir\": \"rtl\" },\n  { \"code\": \"fr\", \"language\": \"fr-FR\", \"file\": \"fr.js\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Using useLocalePath for Localized Navigation\nDESCRIPTION: Alternative approach using the useLocalePath composable function to generate localized paths for NuxtLink components.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { t } = useI18n()\nconst localePath = useLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"localePath('about')\"> {{ t('about') }} </NuxtLink>\n  <NuxtLink :to=\"localePath('services-advanced')\"> {{ t('advanced') }} </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useLocalePath for Localized Navigation\nDESCRIPTION: Alternative approach using the useLocalePath composable function to generate localized paths for NuxtLink components.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { t } = useI18n()\nconst localePath = useLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"localePath('about')\"> {{ t('about') }} </NuxtLink>\n  <NuxtLink :to=\"localePath('services-advanced')\"> {{ t('advanced') }} </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing $nuxtI18nHead in nuxt.config.ts\nDESCRIPTION: Example of how to use the $nuxtI18nHead function in the head() method of nuxt.config.ts to enable SEO metadata.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/10.seo.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...other Nuxt options...\n  head() {\n    return this.$nuxtI18nHead({ addSeoAttributes: true })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Root Redirect in nuxt/i18n\nDESCRIPTION: Example of configuring the rootRedirect option to redirect users accessing the root URL. This snippet shows how to set up a redirect with a custom status code and path.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/03.options-reference.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  statusCode: 301,\n  path: 'about-us'\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSetI18nParams with Dynamic Route Parameters in Vue\nDESCRIPTION: Example of using useSetI18nParams in a Vue component to set localized slug parameters for different languages. The example shows fetching product data and setting different slugs for English and Dutch locales, demonstrating how switchLocalePath generates localized URLs.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/05.use-set-i18n-params.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// fetch product from API... (red mug)\n\nconst setI18nParams = useSetI18nParams({\n  canonicalQueries: ['foo']\n})\nsetI18nParams({\n  en: { slug: data.slugs.en }, // slug: 'red-mug'\n  nl: { slug: data.slugs.nl } // slug: 'rode-mok'\n})\n\nconst switchLocalePath = useSwitchLocalePath()\nswitchLocalePath('en') // /products/red-mug\nswitchLocalePath('nl') // /nl/products/rode-mok\n</script>\n\n<template>\n  <!-- pages/products/[slug].vue -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useLocalePath\nDESCRIPTION: Provides the TypeScript type definition for the useLocalePath composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useLocalePath(\n  options?: I18nCommonRoutingOptionsWithComposable\n): (route: RawLocation | RouteLocation, locale?: Locale) => string\n```\n\n----------------------------------------\n\nTITLE: Setting Up Head Method for Localization in Nuxt\nDESCRIPTION: Example of implementing the head method in a Nuxt layout to use the $nuxtI18nHead method. This is required for the direction attribute to be set correctly based on the current locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/03.options-reference.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  head() {\n    return this.$nuxtI18nHead()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useSetI18nParams\nDESCRIPTION: Provides the TypeScript type definition for the useSetI18nParams composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useSetI18nParams(options?: SeoAttributesOptions): (locale: Record<Locale, unknown>) => void\n```\n\n----------------------------------------\n\nTITLE: Vue Component Using useSwitchLocalePath\nDESCRIPTION: Example Vue component showing how to use the useSwitchLocalePath composable to create language switching links. The composable returns a function that generates the appropriate path for the specified locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/03.use-switch-locale-path.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst switchLocalePath = useSwitchLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"switchLocalePath('en')\">English</NuxtLink>\n  <NuxtLink :to=\"switchLocalePath('fr')\">Français</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Caching Configuration Example\nDESCRIPTION: Shows how to configure caching behavior for translation files using file objects.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/07.lazy-load-translations.md#2025-04-10_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'es-ES',\n        name: 'Español (Spain)',\n        file: { path: 'es.js', cache: false }\n      },\n      {\n        code: 'es-AR',\n        name: 'Español (Argentina)',\n        files: [\n          { path: 'es.js', cache: false },\n          { path: 'es-AR.js', cache: false }\n        ]\n      },\n      {\n        code: 'es-UY',\n        name: 'Español (Uruguay)',\n        files: [{ path: 'es.js', cache: false }, 'es-UY.json']\n      }\n    ],\n    lazy: true,\n    defaultLocale: 'en'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Page Transition with Locale Change in Nuxt\nDESCRIPTION: This snippet demonstrates how to implement a page-specific transition while handling locale changes in a Nuxt application. It uses definePageMeta to set the transition and adds the finalizePendingLocaleChange method to the onBeforeEnter hook.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/08.lang-switcher.md#2025-04-10_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\nconst { finalizePendingLocaleChange } = useI18n()\n\ndefinePageMeta({\n  pageTransition: {\n    name: 'page',\n    mode: 'out-in'\n  }\n})\n\nroute.meta.pageTransition.onBeforeEnter = async () => {\n  await finalizePendingLocaleChange()\n}\n</script>\n\n<style scoped>\n.page-enter-active,\n.page-leave-active {\n  transition: opacity 1s;\n}\n.page-enter,\n.page-leave-active {\n  opacity: 0;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for defineI18nRoute in TypeScript\nDESCRIPTION: This TypeScript snippet defines the type signature for the defineI18nRoute function and the I18nRoute interface. It specifies the structure of the route object, including paths and locales properties.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/03.compiler-macros.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefineI18nRoute(route: I18nRoute | false) => void\n\ninterface I18nRoute {\n  paths?: Record<string, string>\n  locales?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using defineI18nLocaleDetector for Server-Side Locale Detection\nDESCRIPTION: Shows how to use the defineI18nLocaleDetector function to define a server-side locale detector.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineI18nLocaleDetector((event, config) => {\n  const query = tryQueryLocale(event, { lang: '' })\n  if (query) {\n    return query.toString()\n  }\n\n  const cookie = tryCookieLocale(event, { lang: '', name: 'i18n_locale' })\n  if (cookie) {\n    return cookie.toString()\n  }\n\n  const header = tryHeaderLocale(event, { lang: '' })\n  if (header) {\n    return header.toString()\n  }\n\n  return config.defaultLocale\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n to Skip Setting Locale on Navigate\nDESCRIPTION: Nuxt configuration that enables skipSettingLocaleOnNavigate option to prevent locale changes during page transitions for smoother user experience.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/12.lang-switcher.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  plugins: ['~/plugins/router'],\n\n  i18n: {\n    skipSettingLocaleOnNavigate: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Localization for a Specific Route in Nuxt\nDESCRIPTION: This code snippet demonstrates how to disable localization entirely for a specific route (about page) directly in the Vue component file. It overrides the global i18n settings for this route.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/08.ignoring-localized-routes.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  nuxtI18n: false\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring useBrowserLocale Function Type in TypeScript\nDESCRIPTION: TypeScript type declaration for the useBrowserLocale composable that returns the browser's locale. The function returns a string representing the locale code or null if no locale is detected.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/07.use-browser-locale.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useBrowserLocale(): string | null\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Component Translations with YAML in Vue\nDESCRIPTION: This snippet illustrates how to use i18n custom blocks with YAML syntax to define translations within a Vue component. It provides an alternative to JSON for defining translations.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/12.per-component-translations.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<i18n lang=\"yaml\">\nen:\n  hello: 'hello world!'\nja:\n  hello: 'こんにちは、世界!'\n</i18n>\n```\n\n----------------------------------------\n\nTITLE: Creating a Language Switcher with Regular Anchor Tags\nDESCRIPTION: When using different domains for languages, the language switcher should use standard HTML anchor tags rather than router links. This Vue template loops through available locales and creates links to switch between them.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/13.different-domains.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<a v-for=\"locale in $i18n.locales\" :href=\"switchLocalePath(locale.code)\" :key=\"locale.code\">\n  {{ locale.code }}\n</a>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for defineI18nLocale\nDESCRIPTION: Provides the TypeScript type definition for the defineI18nLocale function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function defineI18nLocale<Messages = LocaleMessages<DefineLocaleMessage>, Locales = Locale>(\n  loader: (locale: Locales) => Messages | Promise<Messages>\n): (locale: Locales) => Messages | Promise<Messages>\n```\n\n----------------------------------------\n\nTITLE: Component translations using YAML syntax\nDESCRIPTION: Example of defining component-level translations using YAML format in Vue single-file component i18n blocks for English and Japanese languages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/15.per-component-translations.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<i18n lang=\"yaml\">\nen:\n  hello: 'hello world!'\nja:\n  hello: 'こんにちは、世界!'\n</i18n>\n\n<template>\n  <p>{{ $t('hello') }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Registration Order in Nuxt\nDESCRIPTION: Demonstrates the correct order of module registration in Nuxt configuration, ensuring custom modules are registered before @nuxtjs/i18n for proper localized route generation.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/14.extend-pages.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExampleModule from './modules/example-module'\n\nexport default defineNuxtConfig({\n  modules: [\n    ExampleModule, // Register module before `@nuxtjs/i18n`\n    '@nuxtjs/i18n'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Type Signature for defineI18nLocale Function in TypeScript\nDESCRIPTION: This code snippet shows the type definition of the defineI18nLocale function. It specifies that the function takes a loader function as an argument and returns a function that accepts a locale and returns a Promise resolving to a messages object.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/11.define-i18n-locale.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function defineI18nLocale<Messages = LocaleMessages<DefineLocaleMessage>, Locales = Locale>(\n  loader: (locale: Locales) => Messages | Promise<Messages>\n): (locale: Locales) => Messages | Promise<Messages>\n```\n\n----------------------------------------\n\nTITLE: Defining useLocaleHead Function Type in TypeScript\nDESCRIPTION: TypeScript type declaration for the useLocaleHead function, specifying its parameters and return type.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/04.use-locale-head.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useLocaleHead(options: I18nHeadOptions): Ref<I18nHeadMetaInfo>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Always Redirect for Browser Language Detection (TypeScript)\nDESCRIPTION: Configuration that ensures users are redirected to their preferred language on every visit while still remembering their selection via cookie.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/09.browser-language-detection.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  detectBrowserLanguage: {\n    useCookie: true,\n    alwaysRedirect: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useSwitchLocalePath Composable\nDESCRIPTION: Type definition for the useSwitchLocalePath composable function that returns a function to switch the locale. It accepts optional I18nCommonRoutingOptionsWithComposable and returns a function taking an optional Locale parameter.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/03.use-switch-locale-path.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ndeclare function useSwitchLocalePath(options?: I18nCommonRoutingOptionsWithComposable): (locale?: Locale) => string\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useLocaleHead\nDESCRIPTION: Provides the TypeScript type definition for the useLocaleHead composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useLocaleHead(options: I18nHeadOptions): Ref<I18nHeadMetaInfo>\n```\n\n----------------------------------------\n\nTITLE: Locale Route Method Definition\nDESCRIPTION: Method that returns a localized route object for a given route. Takes a route and optional locale parameter, returning a Route object or undefined.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/05.vue.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlocaleRoute()\n```\n\n----------------------------------------\n\nTITLE: Using useRouteBaseName in a Vue Component\nDESCRIPTION: Example of how to use the useRouteBaseName composable in a Vue component setup. It demonstrates getting the base route name from both a route object and a route name string.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/06.use-route-base-name.md#2025-04-10_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst route = useRoute()\nconst getRouteBaseName = useRouteBaseName()\nconst baseRouteName = computed(() => getRouteBaseName(route))\n// or\nconst baseRouteNameString = computed(() => getRouteBaseName(route.name))\n</script>\n\n<template>\n  <p>route base name: {{ baseRouteName }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useLocaleRoute Composable\nDESCRIPTION: Type declaration for the useLocaleRoute composable function which returns a function to resolve routes based on locale. Takes optional I18nCommonRoutingOptionsWithComposable and returns a function that accepts route and locale parameters.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/02.use-locale-route.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useLocaleRoute(\n  options?: I18nCommonRoutingOptionsWithComposable\n): (route: RawLocation | RouteLocation, locale?: Locale) => Route | (RouteLocation & { href: string }) | undefined\n```\n\n----------------------------------------\n\nTITLE: Basic Multi-domain Locale Configuration in Nuxt\nDESCRIPTION: Configures multiple domains for different locales with support for various languages. Each locale can have multiple domains and specific default domains.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/10.multi-domain-locales.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18nDomains = ['mydomain.com', 'es.mydomain.com', 'fr.mydomain.com', 'http://pl.mydomain.com', 'https://ua.mydomain.com']\n\nexport default defineNuxtConfig({\n  i18n: {\n    locales: [\n      {\n        code: 'en',\n        domains: i18nDomains,\n        defaultForDomains: ['mydomain.com']\n      },\n      {\n        code: 'es',\n        domains: i18nDomains,\n        defaultForDomains: ['es.mydomain.com']\n      },\n      {\n        code: 'fr',\n        domains: i18nDomains,\n        defaultForDomains: ['fr.mydomain.com']\n      },\n      {\n        code: 'pl',\n        domains: i18nDomains,\n        defaultForDomains: ['http://pl.mydomain.com']\n      },\n      {\n        code: 'ua',\n        domains: i18nDomains,\n        defaultForDomains: ['https://ua.mydomain.com']\n      },\n      {\n        code: 'nl',\n        domains: i18nDomains\n      },\n      {\n        code: 'de',\n        domains: i18nDomains\n      },\n    ],\n    multiDomainLocales: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Locale Head Method Definition\nDESCRIPTION: Method for generating i18n-related meta information for the page head. Takes an options object with dir and seo configuration and returns meta information.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/05.vue.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlocaleHead()\n```\n\n----------------------------------------\n\nTITLE: Using useRouteBaseName in Vue 3 Component\nDESCRIPTION: Shows how to use the useRouteBaseName composable to get the route's base name in a Vue 3 component.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst route = useRoute()\nconst getRouteBaseName = useRouteBaseName()\nconst baseRouteName = computed(() => {\n  return getRouteBaseName(route)\n})\n</script>\n\n<template>\n  <p>route base name: {{ baseRouteName }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Route Parameters for i18n in Vue Component\nDESCRIPTION: Example showing how to handle dynamic route parameters across different locales by dispatching the i18n/setRouteParams mutation in the asyncData hook.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/12.lang-switcher.md#2025-04-10_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- pages/post/_postId.vue -->\n</template>\n\n<script>\nexport default {\n  async asyncData({ store }) {\n    await store.dispatch('i18n/setRouteParams', {\n      en: { postId: 'my-post' },\n      fr: { postId: 'mon-article' }\n    })\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Local Path Method Definition\nDESCRIPTION: Method that returns a localized path for a given route. Takes a route and optional locale parameter, defaulting to current locale.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/05.vue.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlocalePath()\n```\n\n----------------------------------------\n\nTITLE: Using useCookieLocale Function\nDESCRIPTION: Example usage of the useCookieLocale composable function in TypeScript\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/08.use-cookie-locale.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseCookieLocale()\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n Hooks in a Nuxt Plugin\nDESCRIPTION: This snippet demonstrates how to use i18n runtime hooks in a Nuxt plugin. It shows implementation of both 'i18n:beforeLocaleSwitch' (called before locale switch) and 'i18n:localeSwitched' (called after locale switch) hooks with proper logging of the locale changes.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/02.runtime-hooks.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtPlugin(nuxtApp => {\n  // called right before setting a new locale\n  nuxtApp.hook('i18n:beforeLocaleSwitch', ({ oldLocale, newLocale, initialSetup, context }) => {\n    console.log('onBeforeLanguageSwitch', oldLocale, newLocale, initialSetup)\n  })\n\n  // called right after a new locale has been set\n  nuxtApp.hook('i18n:localeSwitched', ({ oldLocale, newLocale }) => {\n    console.log('onLanguageSwitched', oldLocale, newLocale)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Switch Locale Path Method Definition\nDESCRIPTION: Method that returns the path of the current route for a specified locale. Takes a locale parameter and returns a string path.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/05.vue.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nswitchLocalePath()\n```\n\n----------------------------------------\n\nTITLE: Type Definition for useTranslation Composable in TypeScript\nDESCRIPTION: Defines the TypeScript type signature for the useTranslation composable function. It accepts an H3Event parameter and returns a Promise containing the translation function with optional schema typing.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/09.use-translation.md#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ndeclare function useTranslation<Schema extends Record<string, any> = {}, Event extends H3Event = H3Event>(\n  event: Event\n): Promise<TranslationFunction<Schema, DefineLocaleMessage>>\n```\n\n----------------------------------------\n\nTITLE: Extending i18n Messages in Nuxt Module Setup\nDESCRIPTION: This code snippet demonstrates how to use the 'i18n:extend-messages' hook in a Nuxt module's setup file to add additional multilingual messages. It shows how to push new messages for English and French languages, which can then be accessed in the main project.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/16.extend-messages.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function () {\n  const { nuxt } = this\n\n  nuxt.hook('i18n:extend-messages', function (additionalMessages) {\n    additionalMessages.push({\n      en: {\n        'my-module-example': {\n          hello: 'Hello from external module'\n        }\n      },\n      fr: {\n        'my-module-example': {\n          hello: 'Bonjour depuis le module externe'\n        }\n      }\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Base Name in Vue\nDESCRIPTION: The getRouteBaseName() method returns the base name of a route without locale suffix or metadata added by @nuxtjs/i18n. It accepts an optional route argument and defaults to the current route.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/05.vue.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetRouteBaseName(route)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useTranslation\nDESCRIPTION: Provides the TypeScript type definition for the useTranslation composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useTranslation<Schema extends Record<string, any> = {}, Event extends H3Event = H3Event>(\n  event: Event\n): Promise<TranslationFunction<Schema, DefineLocaleMessage>>\n```\n\n----------------------------------------\n\nTITLE: Accessing Localization Helpers in Nuxt.js Plugin\nDESCRIPTION: This snippet demonstrates how to access the localePath and switchLocalePath helper functions within a Nuxt.js plugin context.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/02.basic-usage.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ app }) => {\n  // Get localized path for homepage\n  const localePath = app.localePath('index')\n  // Get path to switch current route to French\n  const switchLocalePath = app.switchLocalePath('fr')\n}\n```\n\n----------------------------------------\n\nTITLE: Locale Management Methods in Vue I18n\nDESCRIPTION: Core methods for managing locales including getting/setting locale cookies, switching locales, loading messages, and handling browser locales.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/04.vue-i18n.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get locale from cookie\ngetLocaleCookie(): string | undefined\n\n// Set locale in cookie\nsetLocaleCookie(locale: string): undefined\n\n// Switch application locale\nsetLocale(locale: string): Promise<void>\n\n// Load locale messages\nloadLocaleMessages(locale: string): Promise<void>\n\n// Get browser locale\ngetBrowserLocale(): string | undefined\n\n// Finalize pending locale change\nfinalizePendingLocaleChange(): Promise<void>\n\n// Wait for pending locale change\nwaitForPendingLocaleChange(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using useTranslation in Nuxt Server Event Handler\nDESCRIPTION: Demonstrates how to use the useTranslation composable within a Nuxt server event handler. It shows awaiting the translation function and using it to translate the 'hello' key.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/09.use-translation.md#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler(async event => {\n  const t = await useTranslation(event)\n  return {\n    hello: t('hello')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useRouteBaseName\nDESCRIPTION: Provides the TypeScript type definition for the useRouteBaseName composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useRouteBaseName(\n  options?: I18nCommonRoutingOptionsWithComposable\n): (givenRoute?: Route | RouteLocationNormalizedLoaded) => string | undefined\n```\n\n----------------------------------------\n\nTITLE: Vue I18n Configuration Properties\nDESCRIPTION: Type definitions for configuration properties including strategy, directions, locales, and domain settings.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/04.vue-i18n.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Routing strategy\nstrategy: Strategies\n\n// Default direction\ndefaultDirection: Directions\n\n// Default locale\ndefaultLocale: string\n\n// Available locale codes\nlocaleCodes: Array<string>\n\n// Locale configurations\nlocales: Array<string | LocaleObject>\n\n// Current locale properties\nlocaleProperties: LocaleObject\n\n// Domain configuration\ndifferentDomains: boolean\n```\n\n----------------------------------------\n\nTITLE: Load Locale Messages TypeScript Method\nDESCRIPTION: Async method to load translation messages for a specified locale code. Used for lazy-loading translations from non-loaded locales.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/04.vue-i18n.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nloadLocaleMessages(locale: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial URL Localization\nDESCRIPTION: Configuration for localizing parts of URLs for different routes, specifically translating route segments from English to French.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    customRoutes: 'config',\n    pages: {\n      about: {\n        fr: '/a-propos'\n      },\n      services: {\n        fr: '/offres'\n      },\n      'services-development': {\n        fr: '/offres/developement'\n      },\n      'services-development-app': {\n        fr: '/offres/developement/app'\n      },\n      'services-development-website': {\n        fr: '/offres/developement/site-web'\n      },\n      'services-coaching': {\n        fr: '/offres/formation'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using NuxtLinkLocale Component in Vue\nDESCRIPTION: Demonstrates basic usage of the NuxtLinkLocale component for creating localized links. It internally uses localePath() to generate the correct localized route.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/02.components.md#2025-04-10_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLinkLocale to=\"/\">{{ $t('home') }}</NuxtLinkLocale>\n</template>\n\n<!-- equivalent to -->\n\n<script setup>\nconst localePath = useLocalePath()\n</script>\n\n<template>\n  <NuxtLink :to=\"localePath('/')\">{{ $t('home') }}</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Set Locale TypeScript Method\nDESCRIPTION: Async method to switch the application's locale to a specified locale code. Updates cookie if enabled and handles route navigation for prefix strategies.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/04.vue-i18n.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetLocale(locale: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Get Route Base Name Method Definition\nDESCRIPTION: Method that returns the base name of a route without locale suffix or i18n metadata. Takes an optional route parameter and returns a string.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/05.vue.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetRouteBaseName()\n```\n\n----------------------------------------\n\nTITLE: Registering I18n Module in Nuxt Module\nDESCRIPTION: Shows how to use the i18n:registerModule hook in a Nuxt module to register additional locales and specify the language directory.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/06.nuxt.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  async setup(options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n    nuxt.hook('i18n:registerModule', register => {\n      register({\n        // langDir path needs to be resolved\n        langDir: resolve('./lang'),\n        locales: [\n          {\n            code: 'en',\n            file: 'en.json',\n          },\n          {\n            code: 'fr',\n            file: 'fr.json',\n          },\n        ]\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Set Locale Cookie TypeScript Method\nDESCRIPTION: Method to update the stored locale cookie with a specified locale code. Takes a locale string as argument and returns undefined.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/04.vue-i18n.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsetLocaleCookie(locale: string): undefined\n```\n\n----------------------------------------\n\nTITLE: English Translation JSON Configuration\nDESCRIPTION: English language translation file containing module-specific messages. Uses nested structure to avoid naming conflicts.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/13.extend-messages.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-module-example\": {\n    \"hello\": \"Hello from external module\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing i18n in Nuxt AsyncData\nDESCRIPTION: Example showing how to access the i18n instance and locale information within Nuxt's asyncData method using the context object.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/18.api.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Vue.extend({\n  asyncData({ i18n }) {\n    const locale = i18n.locale\n\n    return {\n      locale\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using i18n in Vuex Store Actions\nDESCRIPTION: Demonstrates how to access the i18n instance within Vuex store actions to commit the current locale to the store state.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/18.api.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const actions = {\n  nuxtServerInit({ commit }) {\n    commit('LOCALE', this.$i18n.locale)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json to Opt Out of Nuxt i18n Edge Channel\nDESCRIPTION: Diff showing how to update the package.json file to opt-out of the edge channel and return to the stable version.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/01.index.md#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n-   \"@nuxtjs/i18n\": \"npm:@nuxtjs/i18n-edge\"\n+   \"@nuxtjs/i18n\": \"^8.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Module and i18n Integration\nDESCRIPTION: This snippet shows how to configure Nuxt to use a custom module (ExampleModule) before the i18n module. This order is crucial for ensuring localized routes are generated for the added pages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/14.extend-pages.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExampleModule from './modules/example-module'\n\nexport default defineNuxtConfig({\n  modules: [\n    ExampleModule, // Register module before `@nuxtjs/i18n`\n    '@nuxtjs/i18n'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from parsePages to customRoutes Option in Nuxt Config\nDESCRIPTION: Diff showing the migration from the deprecated parsePages option to the new customRoutes option in Nuxt configuration.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n export default defineNuxtConfig({\n   modules: [\n     '@nuxtjs/i18n'\n   ],\n\n   i18n: {\n     // ...\n-    parsePages: false,\n+    customRoutes: 'config',\n     // ...\n   }\n })\n```\n\n----------------------------------------\n\nTITLE: Defining useCookieLocale Type in TypeScript\nDESCRIPTION: Type declaration for the useCookieLocale composable function that returns a reactive reference containing the cookie locale string. The function detects locale from document.cookie on client-side and cookie header on server-side.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/08.use-cookie-locale.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useCookieLocale(): Ref<string>\n```\n\n----------------------------------------\n\nTITLE: Getting Locale Location in TypeScript\nDESCRIPTION: Example of how to use the locale location function in TypeScript with proper prefix in Nuxt I18n v9.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n$localeLocation()\n```\n\n----------------------------------------\n\nTITLE: Using definePageMeta in TypeScript\nDESCRIPTION: Example of how to use definePageMeta in TypeScript for setting up dynamic route parameters in Nuxt I18n v8 (deprecated method).\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ndefinePageMeta()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for defineI18nLocaleDetector\nDESCRIPTION: Type declaration for the locale detector function including LocaleConfig type definition and function signature.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/06.composables/12.define-i18n-locale-detector.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype LocaleConfig = {\n  defaultLocale: Locale\n  fallbackLocale: FallbackLocale\n}\ndeclare function defineI18nLocaleDetector(\n  detector: (event: H3Event, config: LocaleConfig) => string\n): (event: H3Event, config: LocaleConfig) => string\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Head in TypeScript\nDESCRIPTION: Example of how to use the locale head function in TypeScript with proper prefix in Nuxt I18n v9.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n$localeHead()\n```\n\n----------------------------------------\n\nTITLE: Migrating Dynamic Route Parameters in Vue\nDESCRIPTION: Example showing how to migrate from the deprecated nuxtI18n Page Meta approach to the new useSetI18nParams composable for setting dynamic route parameters.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script>\ndefinePageMeta({\n  nuxtI18n: {\n    en: { id: 'my-post' },\n    fr: { id: 'mon-article' }\n  }\n})\n</script>\n<template>\n  <!-- pages/post/[id].vue -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useCookieLocale\nDESCRIPTION: Provides the TypeScript type definition for the useCookieLocale composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useCookieLocale(): Ref<string>\n```\n\n----------------------------------------\n\nTITLE: Using useSetI18nParams Composable in TypeScript\nDESCRIPTION: Example of how to use the useSetI18nParams composable in TypeScript for setting dynamic route parameters in Nuxt I18n v9.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nuseSetI18nParams()\n```\n\n----------------------------------------\n\nTITLE: Nuxt 2 Pages Configuration for I18n\nDESCRIPTION: Configuration example for customizing route paths in Nuxt 2 with nuxtjs/i18n v7, showing the file structure and corresponding config.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\ni18n: {\n  parsePages: false,\n  pages: {\n    about: {\n      fr: '/a-propos',\n    },\n    'users/_id/profile': {\n      fr: '/u/:id/profil',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nuxt 3 Page Component with I18n Routes in Vue\nDESCRIPTION: Example of a Nuxt 3 page component with custom i18n route paths using the defineI18nRoute compiler macro.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  paths: {\n    pl: '/polish'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Keys in Nuxt2\nDESCRIPTION: Example of route key configuration in Nuxt2 using the pages option in nuxt.config.ts\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/18.migrating.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  parsePages: false,\n  pages: {\n    about: {\n      fr: '/a-propos',\n    },\n    'users/_id/profile': {\n      fr: '/u/:id/profil',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nuxt 2 Page Component with I18n Routes in Vue\nDESCRIPTION: Example of a Nuxt 2 page component with custom i18n route paths using the nuxtI18n component option.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport Vue from 'vue'\n\nexport default Vue.extend({\n  nuxtI18n: {\n    paths: {\n      pl: '/polish'\n    }\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useBrowserLocale\nDESCRIPTION: Provides the TypeScript type definition for the useBrowserLocale composable function.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/4.api/01.index.md#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function useBrowserLocale(): string | null\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Keys in Nuxt3\nDESCRIPTION: Updated route key configuration for Nuxt3 using the new file-based routing approach\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/18.migrating.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  customRoutes: 'config',\n  pages: {\n    about: {\n      fr: '/a-propos',\n    },\n    'users/[id]/profile': {\n      fr: '/u/[id]/profil',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Locale Path in TypeScript\nDESCRIPTION: Example of how to use the locale path function in TypeScript with proper prefix in Nuxt I18n v9.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n$localePath()\n```\n\n----------------------------------------\n\nTITLE: Router Plugin for Handling Locale Changes During Transitions\nDESCRIPTION: A Nuxt plugin that finalizes pending locale changes during page transitions and customizes scroll behavior to wait for locale changes before scrolling.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/12.lang-switcher.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ app }) => {\n  app.nuxt.defaultTransition.beforeEnter = () => {\n    app.i18n.finalizePendingLocaleChange()\n  }\n\n  // Optional: wait for locale before scrolling for a smoother transition\n  app.router.options.scrollBehavior = async (to, from, savedPosition) => {\n    // Make sure the route has changed\n    if (to.name !== from.name) {\n      await app.i18n.waitForPendingLocaleChange()\n    }\n    return savedPosition || { x: 0, y: 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nuxt3 Component Route Configuration\nDESCRIPTION: Updated route configuration in Nuxt3 using the new defineI18nRoute compiler macro\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/18.migrating.md#2025-04-10_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute({\n  paths: {\n    pl: '/polish'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Resolving Routes in TypeScript\nDESCRIPTION: Example of how to use the route resolver function in TypeScript with proper prefix in Nuxt I18n v9.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n$resolveRoute()\n```\n\n----------------------------------------\n\nTITLE: Nuxt 3 Pages Configuration for I18n\nDESCRIPTION: Configuration example for customizing route paths in Nuxt 3 with nuxtjs/i18n v8+, showing the updated file structure and corresponding config.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\ni18n: {\n  customRoutes: 'config',\n  pages: {\n    about: {\n      fr: '/a-propos',\n    },\n    'users/[id]/profile': {\n      fr: '/u/[id]/profil',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Nuxt UI Pro Docs\nDESCRIPTION: Commands to start the development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Switching Locale Path in TypeScript\nDESCRIPTION: Example of how to use the locale switcher function in TypeScript with proper prefix in Nuxt I18n v9.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n$switchLocalePath()\n```\n\n----------------------------------------\n\nTITLE: Finalize Pending Locale Change TypeScript Method\nDESCRIPTION: Async method to switch to the pending locale that was prevented by skipSettingLocaleOnNavigate option.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/04.vue-i18n.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfinalizePendingLocaleChange(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Git command to create and switch to a new feature branch\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Updating Module Name in Nuxt Configuration\nDESCRIPTION: Diff showing the change in module name from 'nuxt-i18n' to '@nuxtjs/i18n' in the Nuxt configuration file.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/17.migrating.md#2025-04-10_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  modules: [\n-    'nuxt-i18n'\n+    '@nuxtjs/i18n'\n  ]\n```\n\n----------------------------------------\n\nTITLE: Component-specific Transition with Locale Change\nDESCRIPTION: Example of a page component with a custom transition that properly handles locale changes by calling finalizePendingLocaleChange in the beforeEnter hook.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/12.lang-switcher.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  transition: {\n    beforeEnter() {\n      this.$i18n.finalizePendingLocaleChange()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to install project dependencies using pnpm package manager\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd i18n\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Nuxt i18n Edge Channel\nDESCRIPTION: Diff showing how to update the package.json file to opt-in to the edge channel for beta testing the latest commits.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/01.index.md#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n-   \"@nuxtjs/i18n\": \"^8.0.0\"\n+   \"@nuxtjs/i18n\": \"npm:@nuxtjs/i18n-edge\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Route Base Name in TypeScript\nDESCRIPTION: Example of how to use the route base name function in TypeScript with proper prefix in Nuxt I18n v9.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n$getRouteBaseName()\n```\n\n----------------------------------------\n\nTITLE: Setting up Documentation Environment\nDESCRIPTION: Command to set up the documentation development environment\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CONTRIBUTING.md#2025-04-10_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm docs:setup\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt i18n Module with npm\nDESCRIPTION: Command to install @nuxtjs/i18n as a dev dependency in a Nuxt project using npx.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/1.getting-started/01.index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add i18n\n```\n\n----------------------------------------\n\nTITLE: Updating ParsePages Configuration\nDESCRIPTION: Example of migrating from parsePages to customRoutes option in nuxt.config.ts\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/18.migrating.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n   modules: [\n     '@nuxtjs/i18n'\n   ],\n\n   i18n: {\n     // ...\n-    parsePages: false,\n+    customRoutes: 'config',\n     // ...\n   }\n })\n```\n\n----------------------------------------\n\nTITLE: Reverting from Edge Release Channel\nDESCRIPTION: Diff showing how to update the @nuxtjs/i18n dependency in package.json to revert from the edge release channel to the stable version.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/README.md#2025-04-10_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n--    \"@nuxtjs/i18n\": \"npm:@nuxtjs/i18n-edge\"\n++    \"@nuxtjs/i18n\": \"^8.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @nuxtjs/i18n in nuxt.config.js\nDESCRIPTION: JavaScript configuration for adding @nuxtjs/i18n to the modules section in nuxt.config.js. This method allows inline specification of module options.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/01.setup.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  modules: [\n    [\n      '@nuxtjs/i18n',\n      { /* module options */ }\n    ]\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Catchall hreflang Tags for SEO in JavaScript\nDESCRIPTION: Enhances SEO by adding support for additional catchall hreflang tags. This improves language targeting for search engines.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CHANGELOG.md#2025-04-10_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Implementation details not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example\nDESCRIPTION: Example of default configuration values for compilation and bundle settings.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{ strictMessage: true, escapeHtml: false }\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{ compositionOnly: true, runtimeOnly: false, fullInstall: true, dropMessageCompiler: false }\n```\n\n----------------------------------------\n\nTITLE: Wait For Pending Locale Change TypeScript Method\nDESCRIPTION: Async method that returns a promise resolving when the pending locale is set.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/04.vue-i18n.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwaitForPendingLocaleChange(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Syncing Store Locale Before Triggering onLanguageSwitched Listener in JavaScript\nDESCRIPTION: Fixes an issue by ensuring the store locale is synchronized before the onLanguageSwitched listener is triggered. This improves consistency in language switching.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CHANGELOG.md#2025-04-10_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Implementation details not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Translation Function Examples\nDESCRIPTION: Examples of auto-imported translation functions available in the i18n module.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/04.api/00.options.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n$t()\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$rt()\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$d()\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$n()\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$tm()\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$te()\n```\n\n----------------------------------------\n\nTITLE: Supporting Paths in localePath() Function in JavaScript\nDESCRIPTION: Enhances the localePath() function to support path parameters. This allows for more flexible route generation in multilingual applications.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CHANGELOG.md#2025-04-10_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlocalePath('path')\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Studio Integration for Nuxt UI Pro Docs\nDESCRIPTION: Commands to add the @nuxthq/studio dependency to the project using different package managers.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/README.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install --save-dev @nuxthq/studio\n\n# pnpm\npnpm add -D @nuxthq/studio\n\n# yarn\nyarn add -D @nuxthq/studio\n\n# bun\nbun add -d @nuxthq/studio\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt I18n Module\nDESCRIPTION: Command to install the @nuxtjs/i18n module to a Nuxt project using npx.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nuxi@latest module add i18n\n```\n\n----------------------------------------\n\nTITLE: Global Page Transition with i18n\nDESCRIPTION: Demonstrates how to implement global page transitions while handling locale changes correctly.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/90.v8/2.guide/08.lang-switcher.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  i18n: {\n    // ... your other options\n    skipSettingLocaleOnNavigate: true\n  }\n})\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { finalizePendingLocaleChange } = useI18n()\n\nconst onBeforeEnter = async () => {\n  await finalizePendingLocaleChange()\n}\n</script>\n\n<template>\n  <NuxtLayout>\n    <NuxtPage\n      :transition=\"{\n        name: 'my',\n        mode: 'out-in',\n        onBeforeEnter\n      }\"\n    />\n  </NuxtLayout>\n</template>\n\n<style>\n.my-enter-active,\n.my-leave-active {\n  transition: opacity 0.3s;\n}\n.my-enter,\n.my-leave-active {\n  opacity: 0;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Server\nDESCRIPTION: Command to start the documentation development server\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CONTRIBUTING.md#2025-04-10_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Updating Type Imports for I18n Module\nDESCRIPTION: Example of updating type imports from the global NuxtVueI18n namespace to explicit imports from '@nuxtjs/i18n' in JavaScript with JSDoc.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/17.migrating.md#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('@nuxtjs/i18n').LocaleObject} */\nconst locale = { code: 'en' }\n```\n\n----------------------------------------\n\nTITLE: Disabling Route Localization in Vue Component\nDESCRIPTION: Shows how to completely disable route localization for a specific page component using the defineI18nRoute composable.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/04.ignoring-localized-routes.md#2025-04-10_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefineI18nRoute(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Development Tools\nDESCRIPTION: Commands for running linting, formatting, and testing tools during development\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CONTRIBUTING.md#2025-04-10_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm lint # lint and format check\npnpm fix  # auto fix for lint and format\npnpm test:unit # unit tests\npnpm test:spec # e2e tests\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated vuex Option in Nuxt Config\nDESCRIPTION: Diff showing how to remove the deprecated vuex option from Nuxt I18n configuration when migrating to newer versions.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/90.migrating.md#2025-04-10_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n export default defineNuxtConfig({\n   modules: [\n     '@nuxtjs/i18n'\n   ],\n\n   i18n: {\n     // ...\n-    vuex: true,\n     // ...\n   }\n })\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Complex URL Localization\nDESCRIPTION: Example directory structure showing a more complex set of nested routes for services and other pages.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-| pages/\n---| about.vue\n---| services/\n-----| index.vue\n-----| coaching.vue\n-----| development/\n-------| app.vue\n-------| website.vue\n-----| development.vue\n---| services.vue\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry\nDESCRIPTION: Git commit link and version number for latest release\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### &nbsp;&nbsp;&nbsp;&nbsp;[View changes on GitHub](https://github.com/nuxt-community/i18n-module/compare/v8.0.0-alpha.1...v8.0.0-alpha.2)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Basic URL Localization\nDESCRIPTION: Example directory structure showing parent and child routes for localization.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-| pages/\n---| parent/\n-----| child.vue\n---| parent.vue\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Basic URL Localization\nDESCRIPTION: Example directory structure showing parent and child routes for localization.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/02.guide/03.custom-paths.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-| pages/\n---| parent/\n-----| child.vue\n---| parent.vue\n```\n\n----------------------------------------\n\nTITLE: Supporting External Configuration File for vue-i18n Options in JavaScript\nDESCRIPTION: Adds support for using an external configuration file to specify vue-i18n options. This improves flexibility in managing i18n settings.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CHANGELOG.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Implementation details not provided in the snippet\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales in Nuxt.config.ts\nDESCRIPTION: Configuration example for the i18n module in nuxt.config.ts that defines available locales with their codes and display names.\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/docs/content/docs/91.v7/12.lang-switcher.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ni18n: {\n  locales: [\n    {\n      code: 'en',\n      name: 'English'\n    },\n    {\n      code: 'es',\n      name: 'Español'\n    },\n    {\n      code: 'fr',\n      name: 'Français'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the i18n Repository\nDESCRIPTION: Instructions for forking and cloning the Nuxt i18n module repository\nSOURCE: https://github.com/nuxt-modules/i18n/blob/main/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd my-projects\ngit clone git@github.com:nuxt-modules/i18n.git\n```"
  }
]