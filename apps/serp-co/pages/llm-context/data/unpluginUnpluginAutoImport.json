[
  {
    "owner": "unplugin",
    "repo": "unplugin-auto-import",
    "content": "TITLE: AutoImport Configuration\nDESCRIPTION: Details the configuration options for the `AutoImport` plugin. These options include `include` (file matching), `imports` (global imports), `ignore` (imports to filter out), `dts` (declaration file path), `eslintrc` (ESLint integration), and more.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nAutoImport({\n  // targets to transform\n  include: [\n    /\\.[tj]sx?$/, // .ts, .tsx, .js, .jsx\n    /\\.vue$/,\n    /\\.vue\\?vue/, // .vue\n    /\\.vue\\.[tj]sx?\\?vue/, // .vue (vue-loader with experimentalInlineMatchResource enabled)\n    /\\.md$/, // .md\n  ],\n\n  // global imports to register\n  imports: [\n    // presets\n    'vue',\n    'vue-router',\n    // custom\n    {\n      '@vueuse/core': [\n        // named imports\n        'useMouse', // import { useMouse } from '@vueuse/core',\n        // alias\n        ['useFetch', 'useMyFetch'], // import { useFetch as useMyFetch } from '@vueuse/core',\n      ],\n      'axios': [\n        // default imports\n        ['default', 'axios'], // import { default as axios } from 'axios',\n      ],\n      '[package-name]': [\n        '[import-names]',\n        // alias\n        ['[from]', '[alias]'],\n      ],\n    },\n    // example type import\n    {\n      from: 'vue-router',\n      imports: ['RouteLocationRaw'],\n      type: true,\n    },\n  ],\n\n  // Array of strings of regexes that contains imports meant to be filtered out.\n  ignore: [\n    'useMouse',\n    'useFetch'\n  ],\n\n  // Enable auto import by filename for default module exports under directories\n  defaultExportByFilename: false,\n\n  // Options for scanning directories for auto import\n  dirsScanOptions: {\n    types: true // Enable auto import the types under the directories\n  },\n\n  // Auto import for module exports under directories\n  // by default it only scan one level of modules under the directory\n  dirs: [\n    './hooks',\n    './composables', // only root modules\n    './composables/**', // all nested modules\n    // ...\n\n    {\n      glob: './hooks',\n      types: true // enable import the types\n    },\n    {\n      glob: './composables',\n      types: false // If top level dirsScanOptions.types importing enabled, just only disable this directory\n    }\n    // ...\n  ],\n\n  // Filepath to generate corresponding .d.ts file.\n  // Defaults to './auto-imports.d.ts' when `typescript` is installed locally.\n  // Set `false` to disable.\n  dts: './auto-imports.d.ts',\n\n  // Array of strings of regexes that contains imports meant to be ignored during\n  // the declaration file generation. You may find this useful when you need to provide\n  // a custom signature for a function.\n  ignoreDts: [\n    'ignoredFunction',\n    /^ignore_/ \n  ],\n\n  // Auto import inside Vue template\n  // see https://github.com/unjs/unimport/pull/15 and https://github.com/unjs/unimport/pull/72\n  vueTemplate: false,\n\n  // Auto import directives inside Vue template\n  // see https://github.com/unjs/unimport/pull/374\n  vueDirectives: undefined,\n\n  // Custom resolvers, compatible with `unplugin-vue-components`\n  // see https://github.com/antfu/unplugin-auto-import/pull/23/\n  resolvers: [\n    /* ... */\n  ],\n\n  // Include auto-imported packages in Vite's `optimizeDeps` options\n  // Recommend to enable\n  viteOptimizeDeps: true,\n\n  // Inject the imports at the end of other imports\n  injectAtEnd: true,\n\n  // Generate corresponding .eslintrc-auto-import.json file.\n  // eslint globals Docs - https://eslint.org/docs/user-guide/configuring/language-options#specifying-globals\n  eslintrc: {\n    enabled: false, // Default `false`\n    // provide path ending with `.mjs` or `.cjs` to generate the file with the respective format\n    filepath: './.eslintrc-auto-import.json', // Default `./.eslintrc-auto-import.json`\n    globalsPropValue: true, // Default `true`, (true | false | 'readonly' | 'readable' | 'writable' | 'writeable')\n  },\n\n  // Generate corresponding .biomelintrc-auto-import.json file.\n  // biomejs extends Docs - https://biomejs.dev/guides/how-biome-works/#the-extends-option\n  biomelintrc: {\n    enabled: false, // Default `false`\n    filepath: './.biomelintrc-auto-import.json', // Default `./.biomelintrc-auto-import.json`\n  },\n\n  // Save unimport items into a JSON file for other tools to consume\n  dumpUnimportItems: './auto-imports.json', // Default `false`\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Auto-Imports\nDESCRIPTION: Describes how to configure TypeScript to properly hint types for auto-imported APIs by enabling the `dts` option to automatically generate an `auto-imports.d.ts` file and ensuring it's not excluded in `tsconfig.json`.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nAutoImport({\n  dts: true // or a custom path\n})\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Auto-Imports\nDESCRIPTION: Details the steps to configure ESLint to avoid `no-undef` errors when using auto-imported APIs. This involves enabling the `eslintrc.enabled` option and extending your `.eslintrc.js` file to include `./.eslintrc-auto-import.json`.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nAutoImport({\n  eslintrc: {\n    enabled: true, // <-- this\n  },\n})\n\n// .eslintrc.js\nmodule.exports = {\n  extends: [\n    './.eslintrc-auto-import.json',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Package Presets Configuration\nDESCRIPTION: Demonstrates how to use package presets to auto-import APIs from packages not included in the default presets.  It requires installing the desired package as a dev dependency and adding its name to the `packagePresets` array option.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nAutoImport({\n  /* other options */\n  packagePresets: ['detect-browser-es'/* other local package names */]\n})\n```\n\n----------------------------------------\n\nTITLE: Vite Integration\nDESCRIPTION: Demonstrates how to integrate unplugin-auto-import with Vite. It requires importing the `AutoImport` plugin from `unplugin-auto-import/vite` and adding it to the `plugins` array in `vite.config.ts`.  The plugin accepts an optional configuration object.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// vite.config.ts\nimport AutoImport from 'unplugin-auto-import/vite'\n\nexport default defineConfig({\n  plugins: [\n    AutoImport({ /* options */ }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Rollup Integration\nDESCRIPTION: Illustrates how to integrate unplugin-auto-import with Rollup. It involves importing the `AutoImport` plugin from `unplugin-auto-import/rollup` and including it in the `plugins` array in `rollup.config.js`. The plugin takes an optional configuration object.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// rollup.config.js\nimport AutoImport from 'unplugin-auto-import/rollup'\n\nexport default {\n  plugins: [\n    AutoImport({ /* options */ }),\n    // other plugins\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Integration\nDESCRIPTION: Shows how to integrate unplugin-auto-import with Webpack. It requires using `require('unplugin-auto-import/webpack').default` and adding it to the `plugins` array in `webpack.config.js`.  An optional configuration object can be passed.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require('unplugin-auto-import/webpack').default({ /* options */ }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Rspack Integration\nDESCRIPTION: Shows how to integrate unplugin-auto-import with Rspack. It requires using `require('unplugin-auto-import/rspack').default` and adding it to the `plugins` array in `rspack.config.js`. An optional configuration object can be passed.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// rspack.config.js\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require('unplugin-auto-import/rspack').default({ /* options */ }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Quasar Integration\nDESCRIPTION: Illustrates how to integrate unplugin-auto-import with Quasar, demonstrating both Vite and Webpack configurations. The Vite configuration imports from `unplugin-auto-import/vite`, while the Webpack configuration uses `require('unplugin-auto-import/webpack').default`.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// vite.config.js [Vite]\nimport AutoImport from 'unplugin-auto-import/vite'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    AutoImport({ /* options */ })\n  ]\n})\n\n// quasar.conf.js [Webpack]\nconst AutoImportPlugin = require('unplugin-auto-import/webpack').default\n\nmodule.exports = {\n  build: {\n    chainWebpack(chain) {\n      chain.plugin('unplugin-auto-import').use(\n        AutoImportPlugin({ /* options */ }),\n      )\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: esbuild Integration\nDESCRIPTION: Shows how to integrate unplugin-auto-import with esbuild. It necessitates importing the `AutoImport` plugin from `unplugin-auto-import/esbuild` and including it in the `plugins` array within the `build` function's configuration object.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// esbuild.config.js\nimport { build } from 'esbuild'\nimport AutoImport from 'unplugin-auto-import/esbuild'\n\nbuild({\n  /* ... */\n  plugins: [\n    AutoImport({\n      /* options */\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Astro Integration\nDESCRIPTION: Illustrates how to integrate unplugin-auto-import with Astro. It involves importing the `AutoImport` plugin from `unplugin-auto-import/astro` and adding it to the `integrations` array in `astro.config.mjs`. The plugin accepts an optional configuration object.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// astro.config.mjs\nimport AutoImport from 'unplugin-auto-import/astro'\n\nexport default defineConfig({\n  integrations: [\n    AutoImport({\n      /* options */\n    })\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Vue CLI Integration\nDESCRIPTION: Demonstrates how to integrate unplugin-auto-import with Vue CLI. It involves using `require('unplugin-auto-import/webpack').default` and adding it to the `plugins` array in `vue.config.js`. It also showcases using static import syntax with `vue.config.mjs`.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// vue.config.js\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require('unplugin-auto-import/webpack').default({ /* options */ }),\n  ],\n}\n\n// vue.config.mjs\nimport AutoImport from 'unplugin-auto-import/webpack'\n\nexport default {\n  configureWebpack: {\n    plugins: [\n      AutoImport({ /* options */ }),\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This command installs the project's dependencies using npm.  Alternatively, pnpm or yarn can be used.  The command should be run in the project root directory.\nSOURCE: https://github.com/unplugin/unplugin-auto-import/blob/main/examples/solid-js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install # or pnpm install or yarn install\n```"
  }
]