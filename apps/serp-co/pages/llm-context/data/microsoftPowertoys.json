[
  {
    "owner": "microsoft",
    "repo": "powertoys",
    "content": "TITLE: Defining PowerToys Module Interface Class in C++\nDESCRIPTION: Core interface class definition that all PowerToys modules must implement. Contains virtual methods for module lifecycle management, configuration, and custom actions.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass PowertoyModuleIface {\npublic:\n  virtual const wchar_t* get_name() = 0;\n  virtual const wchar_t** get_events() = 0;\n  virtual bool get_config(wchar_t* buffer, int *buffer_size) = 0;\n  virtual void set_config(const wchar_t* config) = 0;\n  virtual void call_custom_action(const wchar_t* action) {};\n  virtual void enable() = 0;\n  virtual void disable() = 0;\n  virtual bool is_enabled() = 0;\n  virtual void destroy() = 0;\n};\n\ntypedef PowertoyModuleIface* (__cdecl *powertoy_create_func)();\n```\n\n----------------------------------------\n\nTITLE: Defining ICommandProvider and Related Interfaces in C#\nDESCRIPTION: This snippet defines the core interfaces for creating DevPal extensions, including ICommandSettings, IFallbackHandler, IFallbackCommandItem, and ICommandProvider. These interfaces outline the structure and requirements for command providers in DevPal.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\ninterface ICommandSettings {\n    IContentPage SettingsPage { get; };\n};\n\ninterface IFallbackHandler {\n    void UpdateQuery(String query);\n};\n\ninterface IFallbackCommandItem requires ICommandItem {\n    IFallbackHandler FallbackHandler{ get; };\n    String DisplayTitle { get; };\n};\n\ninterface ICommandProvider requires Windows.Foundation.IClosable, INotifyItemsChanged\n{\n    String Id { get; };\n    String DisplayName { get; };\n    IIconInfo Icon { get; };\n    ICommandSettings Settings { get; };\n    Boolean Frozen { get; };\n\n    ICommandItem[] TopLevelCommands();\n    IFallbackCommandItem[] FallbackCommands();\n\n    ICommand GetCommand(String id);\n\n    void InitializeWithHost(IExtensionHost host);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ICommandProvider Interface for Command Palette Extensions in C#\nDESCRIPTION: Core interface for Command Palette extensions that serves as the entry point. It defines a method to provide top-level commands that will appear in the root view of the Command Palette.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICommandProvider\n{\n    IEnumerable<ICommand> GetCommands();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ICommand Interface for Command Palette Actions in C#\nDESCRIPTION: Interface that represents executable commands within the Command Palette. It defines the structure for command units that can be executed from ListItems and ContextItems.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICommand\n{\n    string Name { get; }\n    void Execute();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command and CommandResult Interfaces in C#\nDESCRIPTION: Core interface definitions for the DevPal SDK's command system. Defines ICommand, CommandResultKind enumeration, and related interfaces for handling command execution results.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\ninterface ICommand requires INotifyPropChanged{\n    String Name{ get; };\n    String Id{ get; };\n    IIconInfo Icon{ get; };\n}\n\nenum CommandResultKind {\n    Dismiss,    // Reset the palette to the main page and dismiss\n    GoHome,     // Go back to the main page, but keep it open\n    GoBack,     // Go back one level\n    Hide,       // Keep this page open, but hide the palette.\n    KeepOpen,   // Do nothing.\n    GoToPage,   // Go to another page. GoToPageArgs will tell you where.\n    ShowToast,  // Display a transient message to the user\n    Confirm,    // Display a confirmation dialog\n};\n\nenum NavigationMode {\n    Push,   // Push the target page onto the navigation stack\n    GoBack, // Go back one page before navigating to the target page\n    GoHome, // Go back to the home page before navigating to the target page\n};\n\n[uuid(\"f9d6423b-bd5e-44bb-a204-2f5c77a72396\")]\ninterface ICommandResultArgs{};\ninterface ICommandResult {\n    CommandResultKind Kind { get; };\n    ICommandResultArgs Args { get; };\n}\ninterface IGoToPageArgs requires ICommandResultArgs{\n    String PageId { get; };\n    NavigationMode NavigationMode { get; };\n}\ninterface IToastArgs requires ICommandResultArgs{\n    String Message { get; };\n    ICommandResult Result { get; };\n}\ninterface IConfirmationArgs requires ICommandResultArgs{\n    String Title { get; };\n    String Description { get; };\n    ICommand PrimaryCommand { get; };\n    Boolean IsPrimaryCommandCritical { get; };\n}\n\n// This is a \"leaf\" of the UI. This is something that can be \"done\" by the user.\n// * A ListPage\n// * the MoreCommands flyout of for a ListItem or a MarkdownPage\ninterface IInvokableCommand requires ICommand {\n    ICommandResult Invoke(Object sender);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fallback Command with Dynamic Naming in C#\nDESCRIPTION: This snippet demonstrates how to implement a fallback command that changes its name dynamically based on user input. It includes a SpongebotPage class that implements IFallbackHandler and a SpongebotCommandsProvider class that provides the fallback command.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SpongebotPage : Microsoft.CommandPalette.Extensions.Toolkit.MarkdownPage, IFallbackHandler\n{\n    // Name, Icon, IPropertyChanged: all those are defined in the MarkdownPage base class\n    public SpongebotPage()\n    {\n        this.Name = \"\";\n        this.Icon = new(\"https://imgflip.com/s/meme/Mocking-Spongebob.jpg\");\n    }\n    public void IFallbackHandler.UpdateQuery(string query) {\n        if (string.IsNullOrEmpty(query)) {\n            this.Name = \"\";\n        } else {\n            this.Name = ConvertToAlternatingCase(query);\n        }\n        return Task.CompletedTask.AsAsyncCommand();\n    }\n    static string ConvertToAlternatingCase(string input) {\n        StringBuilder sb = new StringBuilder();\n        for (var i = 0; i < input.Length; i++)\n        {\n            sb.Append(i % 2 == 0 ? char.ToUpper(input[i]) : char.ToLower(input[i]));\n        }\n        return sb.ToString();\n    }\n    public override string Body() {\n        var t = _GenerateMeme(this.Name); // call out to imgflip APIs to generate the meme\n        t.ConfigureAwait(false);\n        return t.Result;\n    }\n}\ninternal sealed class SpongebotCommandsProvider : CommandProvider\n{\n    public ICommandItem[] TopLevelCommands() => [];\n    public IFallbackCommandItem[] FallbackCommands()\n    {\n        var spongebotPage = new SpongebotPage();\n        var listItem = new FallbackCommandItem(spongebotPage);\n        // ^ The FallbackCommandItem ctor will automatically set its FallbackHandler to the\n        // Command passed in, if the command implements IFallbackHandler\n        return [ listItem ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IPlugin Interface in C#\nDESCRIPTION: Core interface that all PowerToys Run plugins must implement, containing Init() and Query() functions for plugin initialization and search functionality.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/overview.md#2025-04-15_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IPlugin\n{\n    void Init();\n    void Query();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Interfaces in C#\nDESCRIPTION: Core interfaces that define how plugins interact with PowerToys Run. IPlugin handles initialization and fast queries, while IDelayedExecutionPlugin is for long-running queries like file searching.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/architecture.md#2025-04-15_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n    public interface IPlugin\n    {\n        // Query plugin\n        List<Result> Query(Query query);\n\n        // Initialize plugin\n        void Init(PluginInitContext context);\n    }\n\n    public interface IDelayedExecutionPlugin : IFeatures\n    {\n        // Query plugin\n        List<Result> Query(Query query, bool delayedExecution);\n    }\n```\n\n----------------------------------------\n\nTITLE: PowerToys Module Name Getter Method\nDESCRIPTION: Virtual method definition for retrieving the PowerToy module's name. The returned name will be cached by the runner.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual const wchar_t* get_name()\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Controls List Item in C#\nDESCRIPTION: Example implementation of a MediaListItem that displays the current track with play/pause and navigation controls. The code demonstrates how to create a ListItem with context commands and update its properties based on the current media session.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed class MediaListItem : ListItem\n{\n    // Theis is an example of a ListItem that displays the currently track\n    // This TogglePlayMediaCommand is the default action when the user selects the item.\n    public MediaListItem() : base(new TogglePlayMediaCommand())\n    {\n        // These two commands make up the \"More commands\" flyout for the item.\n        this.MoreCommands = [\n            new CommandContextItem(new PrevNextTrackCommand(true)),\n            new CommandContextItem(new PrevNextTrackCommand(false))\n        ];\n\n        GlobalSystemMediaTransportControlsSessionManager.RequestAsync().AsTask().ContinueWith(async (task) => {\n            var manager = task.Result;\n            var mediaSession = manager.GetCurrentSession();\n            var properties = await this.mediaSession.TryGetMediaPropertiesAsync().AsTask();\n            this.Title = properties.Title;\n            // update other things too\n        });\n\n    }\n}\ninternal sealed class TogglePlayMediaCommand : InvokableCommand\n{\n    public TogglePlayMediaCommand()\n    {\n        Name = \"Play\";\n        Icon = new(\"\\ue768\"); //play\n    }\n\n    public ICommandResult Invoke()\n    {\n        _ = mediaSession.TryTogglePlayPauseAsync();\n        return new ICommandResult(CommandResultKind.KeepOpen);\n    }\n}\n// And a similar InvokableCommand for the PrevNextTrackCommand\n```\n\n----------------------------------------\n\nTITLE: Implementing settings management with helper classes in C#\nDESCRIPTION: Example showing how to implement settings management using the PowerToys Command Palette Extensions Toolkit. This code demonstrates defining settings, loading/saving state, and creating a settings page that automatically generates a form UI.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyAppSettings {\n    private readonly Helpers.Settings _settings = new();\n    public Helpers.Settings Settings => _settings;\n\n    public MyAppSettings() {\n        // Define the structure of your settings here.\n        var onOffSetting = new Helpers.ToggleSetting(\"onOff\", \"Enable feature\", \"This feature will do something cool\", true);\n        var textSetting = new Helpers.TextSetting(\"whatever\", \"Text setting\", \"This is a text setting\", \"Default text\");\n        _settings.Add(onOffSetting);\n        _settings.Add(onOffSetting);\n    }\n    public void LoadSavedData()\n    {\n        // Possibly, load the settings from a file or something\n        var persistedData = /* load the settings from file */;\n        _settings.LoadState(persistedData);\n    }\n    public void SaveSettings()\n    {\n        /* You can save the settings to the file here */\n        var mySettingsFilePath = /* whatever */;\n        string mySettingsJson = mySettings.Settings.GetState();\n        // Or you could raise a event to indicate to the rest of your app that settings have changed.\n    }\n}\n\nclass MySettingsPage : Microsoft.CommandPalette.Extensions.Toolkit.FormPage\n{\n    private readonly MyAppSettings mySettings;\n    public MySettingsPage(MyAppSettings s) {\n        mySettings = s;\n        mySettings.Settings.SettingsChanged += SettingsChanged;\n    }\n    public override IForm[] Forms() {\n        // If you haven't already:\n        mySettings.Settings.LoadSavedData();\n        return mySettings.Settings.ToForms();\n    }\n\n    private void SettingsChanged(object sender, Settings args)\n    {\n        /* Do something with the new settings here */\n        var onOff = _settings.GetSetting<bool>(\"onOff\");\n        ExtensionHost.LogMessage(new LogMessage() { Message = $\"MySettingsPage: Changed the value of onOff to {onOff}\" });\n\n        // Possibly even:\n        mySettings.SaveSettings();\n    }\n}\n\n// elsewhere in your app:\n\nMyAppSettings instance = /* Up to you how you want to pass this around.\n                            Singleton, dependency injection, whatever. */\nvar onOff = instance.Settings.Get(\"onOff\");\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Remapping Profile JSON Structure\nDESCRIPTION: JSON schema for individual keyboard remapping profiles (default.json) that defines key remappings and shortcuts for both global and app-specific contexts.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remapKeys\": {\n        \"inProcess\": [\n            {\n                \"originalKeys\":\"91\",\n                \"newRemapKeys\":\"162;70\"\n            },\n            {\n                \"originalKeys\":\"92\",\n                \"newRemapKeys\":\"162;70\"\n            }\n        ]\n    },\n    \"remapShortcuts\": {\n        \"global\": [\n            {\n                \"originalKeys\":\"164;37\",\n                \"newRemapKeys\":\"162;65\"\n            },\n            {\n                \"originalKeys\":\"162;68\",\n                \"newRemapKeys\":\"91\"\n            }\n        ],\n        \"appSpecific\": [\n            {\n                \"originalKeys\":\"91;162;65\",\n                \"newRemapKeys\":\"162;86\",\n                \"targetApp\":\"msedge\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FrameworkView for XAML UI in C++\nDESCRIPTION: Creates a CoreWindow and CoreApplicationView, then initializes a FrameworkView object to set up the XAML framework for the Keyboard Manager UI. This approach is used to support Mica and replaces the previous XAML Island implementation.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagerui.md#2025-04-15_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nCoreWindow^ window = reinterpret_cast<CoreWindow^>(CoreWindow::Create(nullptr, 1500));\nCoreApplicationView^ view = new CoreApplicationViewStub();\nFrameworkView^ frameworkView = ref new FrameworkView(window, view);\n```\n\n----------------------------------------\n\nTITLE: Implementing PowerToy Settings Configuration in C++\nDESCRIPTION: Example implementation of PowerToy settings configuration including get_config and set_config methods. Shows how to create settings controls for boolean toggles, integer spinners, string inputs, color pickers and custom actions.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  // Return JSON with the configuration options.\n  virtual bool get_config(wchar_t* buffer, int* buffer_size) override {\n    HINSTANCE hinstance = reinterpret_cast<HINSTANCE>(&__ImageBase);\n\n    // Create a Settings object.\n    PowerToysSettings::Settings settings(hinstance, get_name());\n    settings.set_description(L\"Serves as an example powertoy, with example settings.\");\n\n    // Show an overview link in the Settings page\n    settings.set_overview_link(L\"https://github.com/microsoft/PowerToys\");\n\n    // Show a video link in the Settings page.\n    settings.set_video_link(L\"https://www.youtube.com/watch?v=d3LHo2yXKoY&t=21462\");\n\n    // Add a bool property with a toggle editor.\n    settings.add_bool_toggle(\n      L\"test_bool_toggle\", // property name.\n      L\"This is what a BoolToggle property looks like\", // description or resource id of the localized string.\n      g_settings.test_bool_prop // property value.\n    );\n\n    // Add an integer property with a spinner editor.\n    settings.add_int_spinner(\n      L\"test_int_spinner\", // property name\n      L\"This is what a IntSpinner property looks like\", // description or resource id of the localized string.\n      g_settings.test_int_prop, // property value.\n      0, // min value.\n      100, // max value.\n      10 // incremental step.\n    );\n\n    // Add a string property with a textbox editor.\n    settings.add_string(\n      L\"test_string_text\", // property name.\n      L\"This is what a String property looks like\", // description or resource id of the localized string.\n      g_settings.test_string_prop // property value.\n    );\n\n    // Add a string property with a color picker editor.\n    settings.add_color_picker(\n      L\"test_color_picker\", // property name.\n      L\"This is what a ColorPicker property looks like\", // description or resource id of the localized string.\n      g_settings.test_color_prop // property value.\n    );\n\n    // Add a custom action property. When using this settings type, the \"PowertoyModuleIface::call_custom_action()\"\n    // method should be overridden as well.\n    settings.add_custom_action(\n      L\"test_custom_action\", // action name.\n      L\"This is what a CustomAction property looks like\", // label above the field.\n      L\"Call a custom action\", // button text.\n      L\"Press the button to call a custom action in the Example PowerToy\" // display values / extended info.\n    );\n\n    return settings.serialize_to_buffer(buffer, buffer_size);\n  }\n\n  // Called by the runner to pass the updated settings values as a serialized JSON.\n  virtual void set_config(const wchar_t* config) override { \n    try {\n      // Parse the input JSON string.\n      PowerToysSettings::PowerToyValues values =\n        PowerToysSettings::PowerToyValues::from_json_string(config);\n\n      // Update the bool property.\n      if (values.is_bool_value(L\"test_bool_toggle\")) {\n        g_settings.test_bool_prop = values.get_bool_value(L\"test_bool_toggle\");\n      }\n\n      // Update the int property.\n      if (values.is_int_value(L\"test_int_spinner\")) {\n        g_settings.test_int_prop = values.get_int_value(L\"test_int_spinner\");\n      }\n\n      // Update the string property.\n      if (values.is_string_value(L\"test_string_text\")) {\n        g_settings.test_string_prop = values.get_string_value(L\"test_string_text\");\n      }\n\n      // Update the color property.\n      if (values.is_string_value(L\"test_color_picker\")) {\n        g_settings.test_color_prop = values.get_string_value(L\"test_color_picker\");\n      }\n\n      // If you don't need to do any custom processing of the settings, proceed\n      // to persists the values calling:\n      values.save_to_settings_file();\n      // Otherwise call a custom function to process the settings before saving them to disk:\n      // save_settings();\n    }\n    catch (std::exception& ex) {\n      // Improper JSON.\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Hacker News extension with helper classes in C#\nDESCRIPTION: Complete implementation of a Hacker News extension using Microsoft.CommandPalette.Extensions.Toolkit helper classes. This example demonstrates how to create list items with commands and tags, and how to implement a list page with loading state.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nclass NewsListItem : Microsoft.CommandPalette.Extensions.Toolkit.ListItem {\n    private NewsPost _post;\n    public NewsListItem(NewsPost post)\n    {\n        _post = post;\n        Title = post.Title;\n        Subtitle = post.Url;\n    }\n    public IContextItem[] Commands => [\n        new CommandContextItem(new OpenUrlCommand(post.Url, CommandResult.KeepOpen)),\n        new CommandContextItem(new OpenUrlCommand(post.CommentsUrl, CommandResult.KeepOpen){\n            Name = \"Open comments\",\n            Icon = \"\\uE8F2\" // ChatBubbles\n        })\n    ];\n    public ITag[] Tags => [ new Tag(){ Text=post.Poster, new Tag(){ Text=post.Points } } ];\n}\nclass HackerNewsPage: Microsoft.CommandPalette.Extensions.Toolkit.ListPage {\n    public HackerNewsPage()\n    {\n        Loading = true;\n    }\n    IListItem[] GetItems(String query) {\n        List<NewsItem> items = /* do some RSS feed stuff */;\n        this.IsLoading = false;\n        return items\n                .Select((post) => new NewsListItem(post))\n                .ToArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetSettings Utility Function in C#\nDESCRIPTION: The GetSettings function reads a settings file from a PowerToy's settings folder, creating one with default configurations if it doesn't exist. It should only be called by the SettingsRepository to avoid file access contention with the runner process. Objects deserialized with this function must implement the ISettingsConfig interface.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/settings-utilities.md#2025-04-15_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nGetSettings<T>(powertoy, filename)\n```\n\n----------------------------------------\n\nTITLE: Proposed Interface for Commands with Parameters in C#\nDESCRIPTION: This code snippet shows a proposed interface for allowing commands to accept parameters. It defines an interface that extends ICommand with parameter specifications and a method to invoke the command with arguments.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IInvokableCommandWithParameters requires ICommand {\n    ActionParameters Parameters { get; };\n    CommandResult InvokeWithArgs(ActionArguments args);\n}\n```\n\n----------------------------------------\n\nTITLE: Interpreting Calculation Expression using Mages Library in C#\nDESCRIPTION: This code snippet demonstrates how the Calculator plugin interprets a mathematical expression using the Mages library. It takes a query search string and the current UI culture as inputs to perform the calculation.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/calculator.md#2025-04-15_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = CalculateEngine.Interpret(query.Search, CultureInfo.CurrentUICulture);\n```\n\n----------------------------------------\n\nTITLE: Defining Content Page Interfaces for Command Palette Extensions in C#\nDESCRIPTION: Defines the interfaces for creating rich content pages in Command Palette extensions. These interfaces allow extensions to display more complex content like forms, markdown, and hierarchical content structures.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[uuid(\"b64def0f-8911-4afa-8f8f-042bd778d088\")]\ninterface IContent requires INotifyPropChanged {\n}\n\ninterface IFormContent requires IContent {\n    String TemplateJson { get; };\n    String DataJson { get; };\n    String StateJson { get; };\n    ICommandResult SubmitForm(String inputs, String data);\n}\n\ninterface IMarkdownContent requires IContent {\n    String Body { get; };\n}\n\ninterface ITreeContent requires IContent, INotifyItemsChanged {\n    IContent RootContent { get; };\n    IContent[] GetChildren();\n}\n\ninterface IContentPage requires IPage, INotifyItemsChanged {\n    IContent[] GetContent();\n    IDetails Details { get; };\n    IContextItem[] Commands { get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete SSH Hosts List Page with Config Parsing\nDESCRIPTION: Full implementation of the SSHHostsListPage class that parses the SSH config file to extract host information and displays it in the Command Palette. Includes regex pattern matching, file reading, and conversion to ListItems.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed partial class SSHHostsListPage : ListPage\n{\n    private static readonly string _defaultConfigFile = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + \"\\\\.ssh\\\\config\";\n\n    private static readonly Regex _hostRegex = new(@\"^Host\\s+(?:(\\S*) ?)*?\\s*$\", RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.Multiline);\n\n    public SSHHostsListPage()\n    {\n        Icon = new(string.Empty);\n        Name = \"SSH Keychain\";\n    }\n\n    private static async Task<List<SSHKeychainItem>> GetSSHHosts()\n    {\n        var hosts = new List<SSHKeychainItem>();\n        var configFile = _defaultConfigFile;\n\n        if (!File.Exists(configFile))\n        {\n            return hosts;\n        }\n\n        var options = new FileStreamOptions()\n        {\n            Access = FileAccess.Read,\n        };\n\n        using var reader = new StreamReader(configFile, options);\n        var fileContent = await reader.ReadToEndAsync();\n\n        if (!string.IsNullOrEmpty(fileContent))\n        {\n            var matches = _hostRegex.Matches(fileContent);\n            hosts = matches.Select(match => new SSHKeychainItem { HostName = match.Groups[1].Value }).ToList();\n        }\n\n        return hosts;\n    }\n\n    public override ISection[] GetItems()\n    {\n        var t = DoGetItems();\n        t.ConfigureAwait(false);\n        return t.Result;\n    }\n\n    private async Task<ISection[]> DoGetItems()\n    {\n        List<SSHKeychainItem> items = await GetSSHHosts();\n        var s = new ListSection()\n        {\n            Title = \"SSH Hosts\",\n            Items = items.Select((host) => new ListItem(new NoOpCommand())\n            {\n                Title = host.HostName,\n                Subtitle = host.EscapedHost,\n            }).ToArray(),\n        };\n        return [s];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardManager Settings JSON Structure\nDESCRIPTION: JSON schema for the main settings.json file that stores keyboard configuration profiles and active configuration state.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"activeConfiguration\": {\n            \"value\":\"default\"\n        },\n        \"keyboardConfigurations\": {\n            \"value\":[\"default\"]\n        }\n    },\n    \"name\":\"Keyboard Manager\",\n    \"version\":\"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Details Interfaces for Command Palette Extensions in C#\nDESCRIPTION: This set of interfaces defines how additional information can be displayed about an action or item in both List and Markdown pages. It includes structures for tags, links, commands and other elements that can appear in details sections.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_14\n\nLANGUAGE: c#\nCODE:\n```\ninterface ITag {\n    IIconInfo Icon { get; };\n    String Text { get; };\n    OptionalColor Foreground { get; };\n    OptionalColor Background { get; };\n    String ToolTip { get; };\n};\n\n[uuid(\"6a6dd345-37a3-4a1e-914d-4f658a4d583d\")]\ninterface IDetailsData {}\ninterface IDetailsElement {\n    String Key { get; };\n    IDetailsData Data { get; };\n}\ninterface IDetails {\n    IIconInfo HeroImage { get; };\n    String Title { get; };\n    String Body { get; };\n    IDetailsElement[] Metadata { get; };\n}\ninterface IDetailsTags requires IDetailsData {\n    ITag[] Tags { get; };\n}\ninterface IDetailsLink requires IDetailsData {\n    Windows.Foundation.Uri Link { get; };\n    String Text { get; };\n}\ninterface IDetailsCommand requires IDetailsData {\n    ICommand Command { get; };\n}\n[uuid(\"58070392-02bb-4e89-9beb-47ceb8c3d741\")]\ninterface IDetailsSeparator requires IDetailsData {}\n```\n\n----------------------------------------\n\nTITLE: Configuring plugin.json for PowerToys Run Plugins\nDESCRIPTION: The required JSON structure for the plugin.json file that must be included in the root folder of any PowerToys Run plugin. This configuration defines the plugin's metadata, including ID, activation keyword, and icon paths.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/new-plugin-checklist.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": string, // GUID string\n  \"ActionKeyword\": string, // Direct activation phrase\n  \"IsGlobal\": boolean,\n  \"Name\": string, // Has to be unique, same as 'PluginName' in the project name pattern  \n  \"Author\": string,\n  \"Version\": \"1.0.0\", // For future compatibility\n  \"Language\": \"csharp\", // So far we support only csharp \n  \"Website\": \"https://aka.ms/powertoys\", // Has to be an absolute uri starting with \"http://\" or \"https://\".\n  \"ExecuteFileName\": string, // Should be {Type}.PowerToys.Run.Plugin.{PluginName}.dll\n  \"IcoPathDark\": string, // Path to dark theme icon. The path is relative to the root plugin folder \n  \"IcoPathLight\": string // Path to light theme icon. The path is relative to the root plugin folder\n  \"DynamicLoading\": bool // Sets whether the plugin should dynamically load any dependencies isolated from the core application.  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining List Page Interfaces in C#\nDESCRIPTION: Core interface definitions for DevPal's list pages functionality. Includes interfaces for context items, command items, list items, grid properties, and page implementations that establish the contract between extensions and the host application.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[uuid(\"c78b9851-e76b-43ee-8f76-da5ba14e69a4\")]\ninterface IContextItem {}\n\ninterface ICommandItem requires INotifyPropChanged {\n    ICommand Command{ get; };\n    IContextItem[] MoreCommands{ get; };\n    IIconInfo Icon{ get; };\n    String Title{ get; };\n    String Subtitle{ get; };\n}\n\ninterface ICommandContextItem requires ICommandItem, IContextItem {\n    Boolean IsCritical { get; }; // READ: \"make this red\"\n    KeyChord RequestedShortcut { get; };\n}\n\n[uuid(\"924a87fc-32fe-4471-9156-84b3b30275a6\")]\ninterface ISeparatorContextItem requires IContextItem {}\n\ninterface IListItem requires ICommandItem {\n    ITag[] Tags{ get; };\n    IDetails Details{ get; };\n    String Section { get; };\n    String TextToSuggest { get; };\n}\n\ninterface IGridProperties  {\n    Windows.Foundation.Size TileSize { get; };\n}\n\ninterface IListPage requires IPage, INotifyItemsChanged {\n    // DevPal will be responsible for filtering the list of items, unless the\n    // class implements IDynamicListPage\n    String SearchText { get; };\n    String PlaceholderText { get; };\n    Boolean ShowDetails{ get; };\n    IFilters Filters { get; };\n    IGridProperties GridProperties { get; };\n    Boolean HasMoreItems { get; };\n    ICommandItem EmptyContent { get; };\n\n    IListItem[] GetItems();\n    void LoadMore();\n}\n\ninterface IDynamicListPage requires IListPage {\n    String SearchText { set; };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating List Items for SSH Hosts in PowerToys Command Palette\nDESCRIPTION: This method retrieves SSH hosts and creates a ListSection containing ListItem objects for each host. Each ListItem is associated with a LaunchSSHHostCommand to enable SSH connection functionality when selected.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n    private async Task<ISection[]> DoGetItems()\n    {\n        List<SSHKeychainItem> items = await GetSSHHosts();\n        var s = new ListSection()\n        {\n            Title = \"SSH Hosts\",\n            Items = items.Select((host) => new ListItem(new LaunchSSHHostCommand(host))\n            {\n                Title = host.HostName,\n                Subtitle = host.EscapedHost,\n            }).ToArray(),\n        };\n        return [s];\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtering Interfaces for Command Palette Extensions in C#\nDESCRIPTION: Defines the interfaces for implementing list filtering capabilities in a Command Palette extension. This allows users to filter or pivot the results with customizable filter options controlled by the extension.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[uuid(\"ef5db50c-d26b-4aee-9343-9f98739ab411\")]\ninterface IFilterItem {}\n\n[uuid(\"0a923c7f-5b7b-431d-9898-3c8c841d02ed\")]\ninterface ISeparatorFilterItem requires IFilterItem {}\n\ninterface IFilter requires IFilterItem {\n    String Id { get; };\n    String Name { get; };\n    IIconInfo Icon { get; };\n}\n\ninterface IFilters {\n    String CurrentFilterId { get; set; };\n    IFilterItem[] Filters();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDynamicListPage Interface for Dynamic Filtering in C#\nDESCRIPTION: Interface definition for dynamic list pages that extends IListPage with custom filtering capabilities. It allows developers to control how lists are filtered based on user queries.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IDynamicListPage requires IListPage {\n    ISection[] GetItems(String query); // DevPal will do no filtering of these items\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Hook Events in C++\nDESCRIPTION: The HandleKeyboardHookEvent method processes keyboard events, applying remappings and handling UI interactions. It checks various conditions and calls corresponding remapping methods in a specific order.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nHandleKeyboardHookEvent\n```\n\n----------------------------------------\n\nTITLE: Detecting Foreground Process in C++ for PowerToys Keyboard Manager\nDESCRIPTION: The GetCurrentApplication function is used to detect the foreground process for app-specific shortcuts. It handles regular processes and full-screen UWP apps, using GetForegroundWindow, get_process_path, and GetGUIThreadInfo APIs.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagercommon.md#2025-04-15_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nGetCurrentApplication\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Change Notification in C#\nDESCRIPTION: This code defines interfaces for property change notification in Command Palette extensions. It provides a simple mechanism similar to INotifyPropertyChanged that doesn't require XAML, allowing developers to notify DevPal when properties change.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\ninterface INotifyPropChanged {\n    event Windows.Foundation.TypedEventHandler<Object, PropChangedEventArgs> PropChanged;\n}\nruntimeclass PropChangedEventArgs {\n    String PropName { get; };\n}\ninterface INotifyItemsChanged {\n    event Windows.Foundation.TypedEventHandler<Object, ItemsChangedEventArgs> ItemsChanged;\n}\nruntimeclass ItemsChangedEventArgs {\n    Int32 TotalItems { get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Full-screen UWP Apps in C++ for PowerToys\nDESCRIPTION: The GetFullscreenUWPWindowHandle function is used to find the window handle for full-screen UWP apps when the standard method fails. It uses the GetGUIThreadInfo API to locate the window linked to the GUI thread.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagercommon.md#2025-04-15_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nGetFullscreenUWPWindowHandle\n```\n\n----------------------------------------\n\nTITLE: Defining Page Interfaces in C#\nDESCRIPTION: Interface definition for Pages in the DevPal SDK. Pages are commands that represent individual views in the application and provide the structure for navigation between different parts of the application.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IPage requires ICommand {\n    String Title { get; };\n    Boolean IsLoading { get; };\n\n    OptionalColor AccentColor { get; };\n}\n```\n\n----------------------------------------\n\nTITLE: FancyZones Class Responsibilities Enumeration\nDESCRIPTION: Lists the main responsibilities of the FancyZones class, which serves as the top-level entity and entry point for all user actions. It handles starting the FancyZones Editor, tracking work areas per monitor, monitoring virtual desktops, and detecting changes in the work environment.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/specs/FancyZones-DCR.md#2025-04-15_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1. Starting FancyZones Editor (C#) with appropriate command line arguments on user request.\n2. Keeping track of WorkArea per monitor (currently active work area on each connected monitor).\n3. Keeping track of active virtual desktops. This is performed in separate thread by polling VirtualDesktopIDs registry key and parsing its content.\n4. Detecting every change in work environment, such as creating / destroying / switching between virtual desktops, closing FancyZones Editor, changing display settings and handling those changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerToys Installation and Settings with Winget YAML\nDESCRIPTION: This YAML configuration file demonstrates how to install PowerToys and configure its settings using the winget configure command. It includes resource definitions for installing PowerToys and configuring specific settings for ShortcutGuide and FancyZones modules.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/dsc-configure.md#2025-04-15_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproperties:\n  resources:\n    - resource: Microsoft.WinGet.DSC/WinGetPackage\n      directives:\n        description: Install PowerToys\n        allowPrerelease: true\n      settings:\n        id: PowerToys (Preview)\n        source: winget\n\n    - resource: PowerToysConfigure\n      directives:\n        description: Configure PowerToys\n      settings:\n        ShortcutGuide:\n          Enabled: false\n          OverlayOpacity: 1\n        FancyZones:\n          Enabled: true\n          FancyzonesEditorHotkey: \"Shift+Ctrl+Alt+F\"\n  configurationVersion: 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in C# Projects\nDESCRIPTION: This C# code snippet shows how to initialize the logger in the main function or equivalent. It specifies the location where logs will be saved.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/logging.md#2025-04-15_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nLogger.InitializeLogger(\"\\\\FancyZones\\\\Editor\\\\Logs\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Keyboard Hook for Hotkey Control in C#\nDESCRIPTION: This method initializes and starts a keyboard hook for the hotkey control, setting up callbacks for key events and defining filtering logic for keyboard events. It connects the UI layer with the native keyboard hook implementation.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/hotkeycontrol.md#2025-04-15_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n        public HotkeySettingsControlHook(KeyEvent keyDown, KeyEvent keyUp, IsActive isActive, FilterAccessibleKeyboardEvents filterAccessibleKeyboardEvents)\n        {\n            _keyDown = keyDown;\n            _keyUp = keyUp;\n            _isActive = isActive;\n            _filterKeyboardEvent = filterAccessibleKeyboardEvents;\n            _hook = new KeyboardHook(HotkeySettingsHookCallback, IsActive, FilterKeyboardEvents);\n            _hook.Start();\n        }\n        \n```\n\n----------------------------------------\n\nTITLE: Saving PowerToys Settings from JSON Config\nDESCRIPTION: Shows how to implement the set_config method to save PowerToy settings received as a JSON string. The method parses the JSON and saves it to the settings file.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n// Called by the runner to pass the updated settings values as a serialized JSON.\nvirtual void set_config(const wchar_t* config) override { \n  try {\n    // Parse the input JSON string.\n    PowerToysSettings::PowerToyValues values =\n      PowerToysSettings::PowerToyValues::from_json_string(config);\n...\n    values.save_to_settings_file();\n  }\n  catch (std::exception& ex) {\n    // Improper JSON.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Wox.Plugin Functionality in Markdown\nDESCRIPTION: This snippet outlines the key functionalities and usage of the Wox.Plugin component. It highlights its role in defining base objects and interfaces for plugins, its use as a reference for C# plugin authors, and its inclusion of base commands used across all plugins.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/launcher/Wox.Plugin/README.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Defines base objects and interfaces for plugins\n* Plugin authors making C# plugins should reference this DLL via nuget\n* Contains base commands used by all plugins\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Creating New Command Palette Extensions\nDESCRIPTION: PowerShell script command for generating a new extension project. It creates the necessary files and project structure with customizable name and display name parameters.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n.\\Exts\\NewExtension.ps1 -name MastodonExtension -DisplayName \"Mastodon extension for cmdpal\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger for Low-Privilege Processes in C#\nDESCRIPTION: This C# code snippet demonstrates how to initialize the logger for low-privilege processes by setting an optional second parameter to true.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/logging.md#2025-04-15_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nLogger.InitializeLogger(\"\\\\FileExplorer\\\\Monaco\\\\Logs\", true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Notification Handlers in C++\nDESCRIPTION: Shows how to use toast notifications with background activation by first calling the notification function from your code and then implementing a handler function to process button clicks in handler_functions.cpp.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/common/common.md#2025-04-15_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Your .cpp where you'd like to show a toast\n\n#include <common/notifications.h>\n\nvoid some_func() {\n// ...\n  notifications::show_toast_background_activated(\n    L\"Toast message!\",                                                  // text displayed in a toast\n    L\"awesome_toast\",                                                   // activation handler id\n    {L\"Press me!\", L\"Also could press me!\", L\"I'm here to be pressed!\"} // buttons in a toast\n  );\n```\n\n----------------------------------------\n\nTITLE: Parsing and Validating URIs in C# for PowerToys URI Plugin\nDESCRIPTION: The ExtendedUriParser.cs file parses user input to return a System.Uri result using UriBuilder. It handles edge cases not covered by UriBuilder, such as inputs ending with ':', '.', or '://'.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/uri.md#2025-04-15_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Code not provided in the original text, but would be located at:\n// src/modules/launcher/Plugins/Microsoft.Plugin.Uri/UriHelper/ExtendedUriParser.cs\n```\n\n----------------------------------------\n\nTITLE: Handling IPC Messages in C# PowerToys Runner\nDESCRIPTION: Implements the callback for receiving IPC messages from the Runner process. Parses incoming JSON messages and executes all registered handlers from the IPCResponseHandleList. Includes error handling for JSON parsing failures.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/runner-ipc.md#2025-04-15_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// receive IPC Message\nProgram.IPCMessageReceivedCallback = (string msg) =>\n{\n    if (ShellPage.ShellHandler.IPCResponseHandleList != null)\n    {\n        try\n        {\n            JsonObject json = JsonObject.Parse(msg);\n            foreach (Action<JsonObject> handle in ShellPage.ShellHandler.IPCResponseHandleList)\n            {\n                handle(json);\n            }\n        }\n        catch (Exception)\n        {\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Saving Keyboard Manager Configuration to File in C++\nDESCRIPTION: This method saves the current keyboard remapping configuration to a JSON file. It uses a named mutex to prevent concurrent access with PowerToys Settings. The method is called when the user clicks OK in the Edit Keyboard or Edit Shortcuts windows.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagercommon.md#2025-04-15_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nbool KeyboardManagerState::SaveConfigToFile()\n{\n    // ... (code omitted for brevity)\n    wil::unique_mutex_nothrow mutex;\n    if (mutex.try_acquire(key_remapping_file_mutex_name, 1000))\n    {\n        try\n        {\n            // Write settings to file\n            std::ofstream output(file_name);\n            output << std::setw(4) << json_obj << std::endl;\n            output.close();\n            return true;\n        }\n        catch (...)\n        {\n            return false;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Settings JSON Structure\nDESCRIPTION: Configuration structure for PowerToys Run plugins stored in settings.json, initialized from plugin.json on first run. Defines ActionKeyword and IsGlobal settings.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/overview.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActionKeyword\": \"string\",\n    \"IsGlobal\": boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hacker News List Page Extension in C#\nDESCRIPTION: A comprehensive example demonstrating how to create a Hacker News extension with list items, commands to open links and comments, and tag display functionality. The example shows the structure for news posts and how to create list items with context commands.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nclass NewsPost {\n    string Title;\n    string Url;\n    string CommentsUrl;\n    string Poster;\n    int Points;\n}\nclass LinkCommand(NewsPost post) : Microsoft.CommandPalette.Extensions.Toolkit.InvokableCommand {\n    public string Name => \"Open link\";\n    public CommandResult Invoke() {\n        Process.Start(new ProcessStartInfo(post.Url) { UseShellExecute = true });\n        return CommandResult.KeepOpen;\n    }\n}\nclass CommentCommand(NewsPost post) : Microsoft.CommandPalette.Extensions.Toolkit.InvokableCommand {\n    public string Name => \"Open comments\";\n    public CommandResult Invoke() {\n        Process.Start(new ProcessStartInfo(post.CommentsUrl) { UseShellExecute = true });\n        return CommandResult.KeepOpen;\n    }\n}\nclass NewsListItem(NewsPost post) : Microsoft.CommandPalette.Extensions.Toolkit.ListItem {\n    public string Title => post.Title;\n    public string Subtitle => post.Poster;\n    public IContextItem[] Commands => [\n        new CommandContextItem(new LinkCommand(post)),\n        new CommandContextItem(new CommentCommand(post))\n    ];\n    public ITag[] Tags => [ new Tag(){ Text=post.Points } ];\n}\nclass HackerNewsPage: Microsoft.CommandPalette.Extensions.Toolkit.ListPage {\n    public bool Loading => true;\n    IListItem[] GetItems() {\n        List<NewsItem> items = /* do some RSS feed stuff */;\n        this.IsLoading = false;\n        return items\n                .Select((post) => new NewsListItem(post))\n                .ToArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action Handler in PowerToys\nDESCRIPTION: Shows how to implement the call_custom_action() method to handle custom action button clicks. The method parses the action data and performs specific logic based on the action name.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n  // Signal from the Settings editor to call a custom action.\n  // This can be used to spawn more complex editors.\n  virtual void call_custom_action(const wchar_t* action) override {\n    static UINT custom_action_num_calls = 0;\n    try {\n      // Parse the action values, including name.\n      PowerToysSettings::CustomActionObject action_object =\n        PowerToysSettings::CustomActionObject::from_json_string(action);\n\n      if (action_object.get_name() == L\"test_custom_action\") {\n        // Custom action code to increase and show a counter.\n        ++custom_action_num_calls;\n        std::wstring msg(L\"I have been called \");\n        msg += std::to_wstring(custom_action_num_calls);\n        msg += L\" time(s).\";\n        MessageBox(NULL, msg.c_str(), L\"Custom action call.\", MB_OK | MB_TOPMOST);\n      }\n    }\n    catch (std::exception& ex) {\n      // Improper JSON.\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Manually Building and Saving PowerToys Settings\nDESCRIPTION: Shows how to manually build a PowerToyValues object containing various property types and save it to the settings file. This approach offers more control over the settings processing.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// This method of saving the module settings is only required if you need to do any\n// custom processing of the settings before saving them to disk.\nvoid ExamplePowertoy::save_settings() {\n  try {\n    // Create a PowerToyValues object for this PowerToy\n    PowerToysSettings::PowerToyValues values(get_name());\n\n    // Save the bool property.\n    values.add_property(\n      L\"test_bool_toggle\", // property name\n      g_settings.test_bool_prop // property value\n    );\n\n    // Save the int property.\n    values.add_property(\n      L\"test_int_spinner\", // property name\n      g_settings.test_int_prop // property value\n    );\n\n    // Save the string property.\n    values.add_property(\n      L\"test_string_text\", // property name\n      g_settings.test_string_prop // property value\n    );\n\n    // Save the color property.\n    values.add_property(\n      L\"test_color_picker\", // property name\n      g_settings.test_color_prop // property value\n    );\n\n    // Save the PowerToyValues JSON to the power toy settings file.\n    values.save_to_settings_file();\n  }\n  catch (std::exception& ex) {\n    // Couldn't save the settings.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OleDB Search Implementation for Windows Indexer\nDESCRIPTION: Implements database querying functionality to search the Windows Search index through OleDB connections. Executes queries against the SystemIndex catalog to retrieve file search results.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/indexer.md#2025-04-15_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// OleDBSearch.cs reference\n```\n\n----------------------------------------\n\nTITLE: Registering Toast Notification Handler Functions in C++\nDESCRIPTION: Demonstrates how to implement and register a toast notification handler function that processes button clicks based on their index. This needs to be added to handler_functions.cpp and registered in the handlers_map.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/common/common.md#2025-04-15_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// handler_functions.cpp\nvoid awesome_toast_handler(IBackgroundTaskInstance, const size_t button_id)\n{\n  switch(button_id)\n  {\n    case 0:\n      // handle \"Press me!\" button click\n    case 1:\n      // handle \"Also could press me!\" button click\n    case 2:\n      // handle \"I'm here to be pressed!\" button click\n  }\n}\n\nnamespace\n{\n  const std::unordered_map<std::wstring_view, handler_function_t> handlers_map = {\n    // ...other handlers...\n    {L\"awesome_toast\", awesome_toast_handler}\n  };}\n```\n\n----------------------------------------\n\nTITLE: Drive Detection Implementation for Windows Search Indexer\nDESCRIPTION: Component that checks Windows registry to determine if Enhanced Mode indexing is enabled by verifying the EnableFindMyFiles registry value. Used to display appropriate warnings about partial system indexing.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/indexer.md#2025-04-15_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// IndexerDriveDetection.cs reference\n```\n\n----------------------------------------\n\nTITLE: Windows Search API Integration\nDESCRIPTION: Implements high-level search functionality using the Windows Search API, initializing query helpers and managing metadata retrieval. Handles file attribute filtering and result ranking based on last modified date.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/indexer.md#2025-04-15_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// WindowsSearchAPI.cs reference\n```\n\n----------------------------------------\n\nTITLE: Loading PowerToys Settings from File\nDESCRIPTION: Shows how to load PowerToy settings from the settings file. The code loads various property types (boolean, integer, string, color) and handles exceptions if the settings file is corrupted.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n// Load the settings file.\nvoid ExamplePowertoy::init_settings() {\n  try {\n    // Load and parse the settings file for this PowerToy.\n    PowerToysSettings::PowerToyValues settings =\n      PowerToysSettings::PowerToyValues::load_from_settings_file(get_name());\n\n    // Load the bool property.\n    if (settings.is_bool_value(L\"test_bool_toggle\")) {\n      g_settings.test_bool_prop = settings.get_bool_value(L\"test_bool_toggle\");\n    }\n\n    // Load the int property.\n    if (settings.is_int_value(L\"test_int_spinner\")) {\n      g_settings.test_int_prop = settings.get_int_value(L\"test_int_spinner\");\n    }\n\n    // Load the string property.\n    if (settings.is_string_value(L\"test_string_text\")) {\n      g_settings.test_string_prop = settings.get_string_value(L\"test_string_text\");\n    }\n\n    // Load the color property.\n    if (settings.is_string_value(L\"test_color_picker\")) {\n      g_settings.test_color_prop = settings.get_string_value(L\"test_color_picker\");\n    }\n  }\n  catch (std::exception& ex) {\n    // Error while loading from the settings file. Let default values stay as they are.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SSH Connection Command in C#\nDESCRIPTION: This class creates a command to launch Windows Terminal with an SSH connection to a selected host. It implements the InvokableCommand interface with an Invoke method that starts a command prompt and executes the SSH command with the appropriate host.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed partial class LaunchSSHHostCommand : InvokableCommand\n{\n    private readonly SSHKeychainItem _host;\n\n    internal LaunchSSHHostCommand(SSHKeychainItem host)\n    {\n        this._host = host;\n        this.Name = \"Connect\";\n        this.Icon = new(\"\\uE8A7\");\n    }\n\n    public override CommandResult Invoke()\n    {\n        try\n        {\n            Process.Start(\"cmd.exe\", $\"/k ssh {_host.HostName}\");\n        }\n        catch\n        {\n            Process.Start(new ProcessStartInfo(\"cmd.exe\", $\"/k ssh {_host.HostName}\") { UseShellExecute = true });\n        }\n\n        return CommandResult.KeepOpen();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a String Value in PowerToys\nDESCRIPTION: Shows how to read a string value from a PowerToyValues object. The code checks if the value exists using is_string_value() before retrieving it with get_string_value().\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Update the string property.\nif (values.is_string_value(L\"test_string_text\")) {\n  g_settings.test_string_prop = values.get_string_value(L\"test_string_text\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Command Example in C#\nDESCRIPTION: Example implementation of a simple invokable command that opens Hacker News in the default web browser. Demonstrates basic command implementation using the toolkit's InvokableCommand class.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nclass HackerNewsPage : Microsoft.CommandPalette.Extensions.Toolkit.InvokableCommand {\n    public class HackerNewsPage()\n    {\n        Name = \"Hacker News\";\n        Icon = \"https://news.ycombinator.com/favicon.ico\";\n    }\n\n    public ICommandResult Invoke() {\n        Process.Start(new ProcessStartInfo(\"https://news.ycombinator.com/\") { UseShellExecute = true });\n        return CommandResult.Hide();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Command Palette Provider with SSHHostsListPage\nDESCRIPTION: Updated implementation of the Command Provider that links the top-level command to the SSHHostsListPage, enabling navigation to the SSH hosts list when the command is executed.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IListItem[] _commands = [\n       new ListItem(new SSHHostsListPage())\n        {\n            Title = \"Search SSH Keys\",\n            Subtitle = \"Quickly find and launch into hosts from your SSH config file\",\n        },\n    ];\n```\n\n----------------------------------------\n\nTITLE: Checking Keyboard State for Shortcut Remapping in C++\nDESCRIPTION: This method checks if any keys other than those in the specified shortcut are pressed. It's used in the HandleShortcutRemapEvent to ensure shortcut-to-shortcut remaps are only applied when no other keys are pressed.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagercommon.md#2025-04-15_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nbool Shortcut::IsKeyboardStateClearExceptShortcut(BYTE* keyboardState, bool isKeyCodeUsed[])\n{\n    // ... (code omitted for brevity)\n    for (int keyCode = 0; keyCode < 256; keyCode++)\n    {\n        if (!IgnoreKeyCode((DWORD)keyCode) && !isKeyCodeUsed[keyCode] && (keyboardState[keyCode] & 0x80))\n        {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Shortcut UI Backend in C++\nDESCRIPTION: The DetectShortcutUIBackend method handles hook operations for the shortcut Type UI in both Remap keys and Remap shortcuts windows. It updates the UI with the shortcut from recent events when the Type button is clicked.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nKeyboardManagerState.DetectShortcutUIBackend(data, true)\n```\n\nLANGUAGE: cpp\nCODE:\n```\nKeyboardManagerState.DetectShortcutUIBackend(data, false)\n```\n\n----------------------------------------\n\nTITLE: PowerToys Module Disable Method\nDESCRIPTION: Virtual method for disabling the PowerToy module and freeing memory.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual void disable()\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Notification Usage in C++\nDESCRIPTION: Demonstrates the two main functions for showing toast notifications in PowerToys. The first function shows a simple toast with just a message, while the second allows for background activation with custom buttons.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/common/common.md#2025-04-15_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n    void show_toast(std::wstring_view message);       // #1\n    \n    void show_toast_background_activated(             // #2\n      std::wstring_view message,\n      std::wstring_view background_handler_id,\n      std::vector<std::wstring_view> button_labels);\n```\n\n----------------------------------------\n\nTITLE: Registering DevPal Extension in AppxManifest\nDESCRIPTION: XML configuration showing how to register a DevPal extension in the application manifest. Includes both COM server registration and app extension declaration with required properties and interfaces.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Extensions>\n    <com:Extension Category=\"windows.comServer\">\n        <com:ComServer>\n            <com:ExeServer Executable=\"ExtensionName.exe\" Arguments=\"-RegisterProcessAsComServer\" DisplayName=\"Sample Extension\">\n                <com:Class Id=\"<Extension CLSID Here>\" DisplayName=\"Sample Extension\" />\n            </com:ExeServer>\n        </com:ComServer>\n    </com:Extension>\n    <uap3:Extension Category=\"windows.appExtension\">\n        <uap3:AppExtension Name=\"com.microsoft.commandpalette\"\n                           Id=\"YourApplicationUniqueId\"\n                           PublicFolder=\"Public\"\n                           DisplayName=\"Sample Extension\"\n                           Description=\"Sample Extension for Run\">\n            <uap3:Properties>\n                <CmdPalProvider>\n                    <Activation>\n                        <CreateInstance ClassId=\"<Extension CLSID Here>\" />\n                    </Activation>\n                    <SupportedInterfaces>\n                        <Commands />\n                    </SupportedInterfaces>\n                </CmdPalProvider>\n            </uap3:Properties>\n        </uap3:AppExtension>\n    </uap3:Extension>\n</Extensions>\n```\n\n----------------------------------------\n\nTITLE: Mocking SendInput Method for Keyboard Manager Testing in C++\nDESCRIPTION: This snippet demonstrates how the SendInput method is mocked for testing the Keyboard Manager module. It processes input events, handles key states, and simulates low-level hook behavior.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardeventhandlers.md#2025-04-15_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Iterate over all the inputs in the INPUT vector argument.\n// If the event is a key up event, then it is considered WM_SYSKEYUP if Alt is held down, otherwise it is WM_KEYUP.\n// If the event is a key down event, then it is considered WM_SYSKEYDOWN if either Alt is held down or if it is F10, otherwise it is WM_KEYDOWN.\n// An optional function which can be set on the MockedInput handler can be used to test for the number of times a key event is received by the system with a particular condition using sendVirtualInputCallCondition.\n// The hook logic for a low level hook which returns 0 or 1 can be set on the MockedInput handler such that it behaves like a low level hook would behave with actual keyboard input.\n// If the method returns 1, then the keyboard state is not updated, and if it returns 0 the corresponding key event is used to update the key state.\n// For updating the keyboard state, KEYUP messages result in the state for that key code being set to false, and KEYDOWN result in the state for that key code being set to true.\n// For modifiers the behavior is slightly different as if the key state of the L/R version is modified, it should also modify the common version, and if a common version is released, it should release both the L and R versions.\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Generation Build Event in C++ Projects\nDESCRIPTION: Configures a pre-build event that converts .resx files to .rc and resource.h files for C++ projects. This target calls a PowerShell script to handle the conversion process before the build begins.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Target Name=\"GenerateResourceFiles\" BeforeTargets=\"PrepareForBuild\">\n    <Exec Command=\"powershell -NonInteractive -executionpolicy Unrestricted $(SolutionDir)tools\\build\\convert-resx-to-rc.ps1 $(MSBuildThisFileDirectory) resource.base.h resource.h ProjName.base.rc ProjName.rc\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Reading a Color Picker Value in PowerToys\nDESCRIPTION: Shows how to read a color value from a PowerToyValues object. The code checks if the string value exists using is_string_value() before retrieving it with get_string_value().\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Update the color property.\nif (values.is_string_value(L\"test_color_picker\")) {\n  g_settings.test_color_prop = values.get_string_value(L\"test_color_picker\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Language Template in Monaco Editor\nDESCRIPTION: Template for creating a new language definition using Monaco's Monarch syntax. This exports a function that returns the language configuration object.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/common/FilePreviewCommon.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function idDefinition() {\n    return {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ShowWindow Function in C# for Window Management\nDESCRIPTION: This function calls the Windows API to show or hide a window with a specified handle. It imports the necessary ShowWindow function from user32.dll and provides a managed wrapper around it.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/AdvancedPaste/AdvancedPaste/NativeMethods.txt#2025-04-15_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nShowWindow\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Command Provider for SSH Keychain Extension in C#\nDESCRIPTION: Example implementation of a CommandProvider class for an SSH Keychain extension. It defines a top-level command \"Search SSH Keys\" that will appear in the Command Palette root view.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SSHKeychainCommandsProvider : CommandProvider\n{\n    public SSHKeychainCommandsProvider()\n    {\n        DisplayName = \"SSH Keychain Commands\";\n    }\n\n    private readonly ICommandItem[] _commands = [\n       new CommandItem(new NoOpCommand())\n        {\n            Title = \"Search SSH Keys\",\n            Subtitle = \"Quickly find and launch into hosts from your SSH config file\",\n        },\n    ];\n\n    public override ICommandItem[] TopLevelCommands()\n    {\n        return _commands;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Scan Code for Key Events in C++\nDESCRIPTION: The SetKeyEvent method uses MapVirtualKey API to find the scan code from the virtual key code, preventing issues with applications that filter out key events with scan code 0.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nSetKeyEvent\n```\n\n----------------------------------------\n\nTITLE: StatusMessage interface definitions for PowerToys Command Palette\nDESCRIPTION: Interfaces defining the status message system for PowerToys Command Palette extensions. These interfaces allow extensions to display progress indicators, success/error messages, and log debug information through the host application.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nenum MessageState\n{\n    Info = 0,\n    Success,\n    Warning,\n    Error,\n};\n\nenum StatusContext\n{\n    Page,\n    Extension\n};\n\ninterface IProgressState requires INotifyPropChanged\n{\n    Boolean IsIndeterminate { get; };\n    UInt32 ProgressPercent { get; };\n};\n\ninterface IStatusMessage requires INotifyPropChanged\n{\n    MessageState State { get; };\n    IProgressState Progress { get; };\n    String Message { get; };\n    // TODO! Icon maybe? Work with design on this\n};\n\ninterface ILogMessage\n{\n    MessageState State { get; };\n    String Message { get; };\n};\n\ninterface IExtensionHost\n{\n    Windows.Foundation.IAsyncAction ShowStatus(IStatusMessage message, StatusContext context);\n    Windows.Foundation.IAsyncAction HideStatus(IStatusMessage message);\n\n    Windows.Foundation.IAsyncAction LogMessage(ILogMessage message);\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Key Delay Events in C++\nDESCRIPTION: This method checks if the UI is in the foreground and runs registered key delay handlers if so. It's part of the KeyboardManagerState class and is called from the low-level keyboard hook.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagercommon.md#2025-04-15_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid KeyboardManagerState::HandleKeyDelayEvent()\n{\n    // Check if the UI is in focus\n    if (CheckUIState())\n    {\n        for (int i = 0; i < key_delay_objects.size(); i++)\n        {\n            key_delay_objects[i]->DelayThread();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Plugin Settings Table in Markdown\nDESCRIPTION: A markdown table showing the configurable settings for the Windows System Commands Plugin, including their keys, default values, and descriptions. These settings control confirmation dialogs, localization, and search result priority.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/system.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Default value | Name/Description |\n|--------------|-----------|------------|\n| `ConfirmSystemCommands` | `false` | Show a dialog to confirm system commands |\n| `LocalizeSystemCommands` | `true` | Use localized system commands instead of English ones |\n| `ReduceNetworkResultScore` | `true` | Reduce the priority of 'IP' and 'MAC' results to improve the order in the global results |\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Plugin Settings for Time and Date in PowerToys\nDESCRIPTION: Details the optional settings available for the Time and Date plugin, including their keys, types, default values, and descriptions.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/timedate.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Type | Default value | Name | Description |\n|--------------|--------------|-----------|------------|------------|\n| `OnlyDateTimeNowGlobal` | Checkbox | `true` | Show only 'Time', 'Date', and 'Now' result for system time on global queries | Regardless of this setting, for global queries the first word of the query has to be a complete match. |\n| `TimeWithSeconds` | Checkbox | `false` | Show time with seconds | This setting applies to the 'Time' and 'Now' result. |\n| `DateWithWeekday` | Checkbox | `false` | Show date with weekday and name of month | This setting applies to the 'Date' and 'Now' result. |\n| `HideNumberMessageOnGlobalQuery` | Checkbox | `false` | Hide 'Invalid number input' error message on global queries | |\n| `CalendarFirstWeekRule` | Combo box | `-1` (Use system settings) | First week of the year | Configure the calendar rule for the first week of the year. |\n| `FirstDayOfWeek` | Combo box | `-1` (Use system settings) | First day of the week | |\n| `CustomFormats` | Multiline text box | `string.Empty` | Custom formats | Use date and time string format syntax and DOW (Day of Week), WOM (Week of Month), WOY (Week of the year), EAB (Era abbreviation), WFT (Windows File Time), UXT (Unix Time), UMS (Unix Time in milliseconds), OAD (OLE Automation date), EXC (Excel's 1900 based date value), EXF (Excel's 1904 based date value). If the format starts with UTC:, then Universal Time (UTC) is used. (Use a backslash to escape format sequences and the backslash character as text.) |\n```\n\n----------------------------------------\n\nTITLE: Registering Preview Handler DLL using RegAsm\nDESCRIPTION: Commands for registering a preview handler DLL to the system. This involves adding the handler to the Global Assembly Cache and registering it with RegAsm.exe. Note that this direct registration method is not recommended for production use.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/previewpane/README.md#2025-04-15_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ncd C:\\Windows\\Microsoft.NET\\Framework64\\4.0.x.x\ngacutil -i <path to XYZPreviewHandler.dll>\nRegAsm.exe /codebase <path to XYZPreviewHandler.dll>\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Units in UnitHandler.cs\nDESCRIPTION: This code snippet references the UnitHandler.cs file where the currently supported units for conversion are defined. It includes various physical quantities such as acceleration, angle, area, and more.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/community.unitconverter.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThese are the ones that are currently enabled (though UnitsNet supports many more). They are defined in [`UnitHandler.cs`](/src/modules/launcher/Plugins/Community.PowerToys.Run.Plugin.UnitConverter/UnitHandler.cs).\n```\n\n----------------------------------------\n\nTITLE: Detecting Single Key Remap UI Backend in C++\nDESCRIPTION: The DetectSingleRemapKeyUIBackend method handles hook operations for the single key Type UI in the Remap keys window. It updates the UI with the latest key from recent events when the left column Type button is clicked.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nKeyboardManagerState.DetectSingleRemapKeyUIBackend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Time and Date Formats in PowerToys\nDESCRIPTION: Explains how users can create custom time and date formats in the plugin settings. Each format is defined on a separate line with a name and syntax pattern.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/timedate.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Custom format definition**\nThe user can create its own formats. One per line in the settings text box. The format of each line is `<name>=<syntax pattern>`.\nIf the syntax pattern starting with `UTC:` then we use the UTC time instead of the local time.\nAs syntax pattern the pattern from `DateTime.ToString()` and the following custom pattern are available:\n- DOW: Number of the day in the week.\n- WOM: Number of week in the month.\n- WOY: Number of the week in the year.\n- EAB: Era abbreviation.\n- WFT: Windows file time.\n- UXT: Unix time stamp.\n- UMS: Unix time stamp in milliseconds.\n- OAD: OLE Automation date.\n- EXC: Excel's 1900 based date value.\n- EXF: Excel's 1904 based date value.\n```\n\n----------------------------------------\n\nTITLE: Managing UI Controls with Vector of Unique Pointers in C++\nDESCRIPTION: Uses vectors of unique pointers to manage SingleKeyRemapControl and ShortcutControl objects, ensuring proper memory management and access to UI components.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagerui.md#2025-04-15_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstd::vector<std::vector<std::unique_ptr<SingleKeyRemapControl>>> singleKeyRemapControlObjects;\nstd::vector<std::vector<std::unique_ptr<ShortcutControl>>> shortcutControlObjects;\n```\n\n----------------------------------------\n\nTITLE: Creating ICommandContextItem from IListItem Command in C#\nDESCRIPTION: This snippet demonstrates how a new ICommandContextItem is created from an IListItem's default Command when displaying it as a context item. It shows the property mapping between the list item and the context item object.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nICommandContextItem(){\n    Command = ICommandItem.Command,\n    MoreCommands = null,\n    Icon = Command.Icon, // use icon from command, not list item\n    Title = Command.Name, // Use command's name, not list item\n    Subtitle = IListItem.Title, // Use the title of the list item as the tooltip on the context menu\n    IsCritical = false,\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Dummy Key Events in C++\nDESCRIPTION: A function to send dummy key events (key down and key up) using the undocumented 0xFF virtual key code. This prevents unintended behavior with modifier keys in certain scenarios.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Code for sending dummy key events\nINPUT dummyEvent[2];\nSetKeyEvent(&dummyEvent[0], 0xFF, KEYEVENTF_KEYDOWN);\nSetKeyEvent(&dummyEvent[1], 0xFF, KEYEVENTF_KEYUP);\nSendInput(2, dummyEvent, sizeof(INPUT));\n```\n\n----------------------------------------\n\nTITLE: PowerToys Module Configuration Getter Method\nDESCRIPTION: Method for retrieving module configuration settings. Returns false if buffer is null or too small, setting required size in buffer_size parameter.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual bool get_config(wchar_t* buffer, int *buffer_size)\n```\n\n----------------------------------------\n\nTITLE: Handling Extended Keys in C++\nDESCRIPTION: The SetKeyEvent method checks for extended keys using IsExtendedKey and sets the KEYEVENTF_EXTENDEDKEY flag accordingly. This prevents issues with NumPad versions of keys being sent inadvertently.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nSetKeyEvent\n```\n\nLANGUAGE: cpp\nCODE:\n```\nIsExtendedKey\n```\n\n----------------------------------------\n\nTITLE: Querying OneNote Pages in C#\nDESCRIPTION: This snippet demonstrates how to search OneNote pages based on a user query using the ScipBe-Common-Office library. The results are cached for 1 day for improved performance.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/onenote.md#2025-04-15_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar pages = OneNoteProvider.FindPages(query.Search);\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Windows Setting Entry in JSON\nDESCRIPTION: Demonstrates the minimum required fields for adding a new Windows setting entry in the WindowsSettings.json file. It includes the Name, Type, and Command properties.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/windowssettings.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"Name\": \"mySetting\",\n    \"Type\": \"AppSettingsApp\",\n    \"Command\": \"ms-settings:mySetting\"\n  }\n```\n\n----------------------------------------\n\nTITLE: PowerToys Module Factory Function Type Definition\nDESCRIPTION: Type definition for the factory function that creates PowerToy objects. Must be exported by each module's DLL as powertoy_create().\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef PowertoyModuleIface* (__cdecl *powertoy_create_func)()\n```\n\n----------------------------------------\n\nTITLE: PowerToys Module Custom Action Handler\nDESCRIPTION: Method for handling custom actions triggered from the Settings editor, such as spawning custom editors.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual void call_custom_action(const wchar_t* action)\n```\n\n----------------------------------------\n\nTITLE: Launching Keyboard Manager UI in C++\nDESCRIPTION: The call_custom_action method is used to launch the Keyboard Manager UI when the user clicks the Remap buttons from the settings page. It checks for existing windows and launches a new one if needed.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\ncall_custom_action\n```\n\n----------------------------------------\n\nTITLE: Num Lock State Management\nDESCRIPTION: Implementation for managing Num Lock key state when suppressing events, using additional key up/down events with suppression flags to maintain correct state.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// When suppressing Num Lock key down event\nSendInput(KEYEVENTF_KEYUP, VK_NUMLOCK, KEYBOARDMANAGER_SUPPRESS_FLAG);\nSendInput(KEYEVENTF_KEYDOWN, VK_NUMLOCK, KEYBOARDMANAGER_SUPPRESS_FLAG);\n```\n\n----------------------------------------\n\nTITLE: Defining Color and OptionalColor Structures in C#\nDESCRIPTION: These structures provide a way to represent colors independently of Windows.UI.Color and handle cases where colors may be optional. The OptionalColor struct avoids ownership semantics issues that might arise with IReference<Color>.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\nstruct Color\n{\n    UInt8 R;\n    UInt8 G;\n    UInt8 B;\n    UInt8 A;\n};\n\nstruct OptionalColor\n{\n    Boolean HasValue;\n    Microsoft.CommandPalette.Extensions.Color Color;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resource Strings in C++\nDESCRIPTION: Shows how to retrieve localized strings in C++ code using the GET_RESOURCE_STRING method.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/guidance.md#2025-04-15_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <common.h>\n\nstd::wstring GET_RESOURCE_STRING(IDS_MODULE_DISPLAYNAME)\n```\n\n----------------------------------------\n\nTITLE: Defining Full Windows Setting Entry in JSON\nDESCRIPTION: Shows a complete entry for a Windows setting in the WindowsSettings.json file, including all optional fields such as Areas, AltNames, Note, IntroducedInBuild, DeprecatedInBuild, and ShowAsFirstResult.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/windowssettings.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"Name\": \"mySetting\",\n    \"Type\": \"AppSettingsApp\",\n    \"Command\": \"ms-settings:mySetting\",\n    \"Areas\": [ \"AreaMySettingArea\" ],\n    \"AltNames\": [ \"NiceSetting\" ],\n    \"Note\": \"NoteMySettingNote\",\n    \"IntroducedInBuild\" : 1903,\n    \"DeprecatedInBuild\" : 2004,\n    \"ShowAsFirstResult\" : true\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining IMarkdownPage Interface for Command Palette Markdown Pages in C#\nDESCRIPTION: Interface definition for markdown pages within the Command Palette that display rich formatted content. It includes methods to retrieve markdown bodies, details, and associated commands for context.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IMarkdownPage requires IPage {\n     String[] Bodies(); // TODO! should this be an IBody, so we can make it observable?\n     IDetails Details();\n     IContextItem[] Commands { get; };\n }\n```\n\n----------------------------------------\n\nTITLE: Japanese IME Modifier Key Handling\nDESCRIPTION: Code for handling modifier key interactions with Caps Lock on Japanese IME keyboards, using suppressed key events to prevent modifier key stuck states.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n// For Ctrl to Caps Lock remap\nSendInput(KEYEVENTF_KEYUP, VK_CONTROL, KEYBOARDMANAGER_SUPPRESS_FLAG);\nSendInput(KEYEVENTF_KEYDOWN, VK_CAPITAL, 0);\nSuppressKey(VK_CONTROL);\n\n// For Caps Lock to Ctrl remap\nSendInput(KEYEVENTF_KEYDOWN, VK_CONTROL, 0);\nSendInput(KEYEVENTF_KEYUP, VK_CONTROL, KEYBOARDMANAGER_SUPPRESS_FLAG);\nSuppressKey(VK_CAPITAL);\n```\n\n----------------------------------------\n\nTITLE: Unregistering Preview Handler DLL using RegAsm\nDESCRIPTION: Commands for unregistering a previously registered preview handler DLL from the system. This involves using RegAsm.exe to unregister the DLL and removing it from the Global Assembly Cache.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/previewpane/README.md#2025-04-15_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\ncd C:\\Windows\\Microsoft.NET\\Framework64\\4.0.x.x\nRegAsm.exe /unregister <path to XYZPreviewHandler.dll>\ngacutil -u XYZPreviewHandler\n```\n\n----------------------------------------\n\nTITLE: Including Localized Resources in C# Projects\nDESCRIPTION: XML configuration to include all localized resource files in a C# project. This embeds all culture-specific resources in the compiled assembly.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<EmbeddedResource Include=\"Properties\\Resources.*.resx\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Boolean Toggle Setting in PowerToys\nDESCRIPTION: Shows how to add a boolean property with a toggle editor to a Settings object. The toggle requires a property name, description string, and the property value to be displayed and modified.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Add a bool property with a toggle editor.\nsettings.add_bool_toggle(\n  L\"test_bool_toggle\", // property name.\n  L\"This is what a BoolToggle property looks like\", // description or resource id of the localized string.\n  g_settings.test_bool_prop // property value.\n);\n```\n\n----------------------------------------\n\nTITLE: Defining IFormPage Interface for Command Palette Form Pages in C#\nDESCRIPTION: Interface definition for form pages within the Command Palette that display interactive forms. It includes a method to retrieve the forms to be displayed on the page.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IFormPage requires IPage {\n     IForm[] Forms();\n }\n```\n\n----------------------------------------\n\nTITLE: Cross-DLL Safe String Allocation in C++ for PowerToys\nDESCRIPTION: The GetForegroundProcess method uses a specific string allocation technique to avoid exceptions when running tests across DLL boundaries. It uses an output variable approach instead of returning a string directly.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagercommon.md#2025-04-15_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nGetForegroundProcess\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Scope for FancyZones Module in PowerToys UI Testing\nDESCRIPTION: C# code snippet demonstrating how to set the scope for UI tests specific to the FancyZones module in PowerToys. It shows the class inheritance and constructor setup.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/UITests.md#2025-04-15_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class RunFancyZonesTest : UITestBase\n{\n    public RunFancyZonesTest()\n        : base(PowerToysModule.FancyZone)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a String Setting in PowerToys\nDESCRIPTION: Shows how to add a string property with a textbox editor to a Settings object. The text input requires a property name, description string, and the current property value.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Add a string property with a textbox editor.\nsettings.add_string(\n  L\"test_string_text\", // property name.\n  L\"This is what a String property looks like\", // description or resource id of the localized string.\n  g_settings.test_string_prop // property value.\n);\n```\n\n----------------------------------------\n\nTITLE: Reading a Boolean Toggle Value in PowerToys\nDESCRIPTION: Shows how to read a boolean value from a PowerToyValues object. The code checks if the value exists using is_bool_value() before retrieving it with get_bool_value().\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Update the bool property.\nif (values.is_bool_value(L\"test_bool_toggle\")) {\n  g_settings.test_bool_prop = values.get_bool_value(L\"test_bool_toggle\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IListPage Interface for Command Palette List Pages in C#\nDESCRIPTION: Interface definition for list pages within the Command Palette that display filterable lists of items. It includes properties for search text, placeholder text, detail visibility, filters, and grid properties along with a method to retrieve items.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IListPage requires IPage {\n    String SearchText { get; };\n    String PlaceholderText { get; };\n    Boolean ShowDetails{ get; };\n    IFilters Filters { get; };\n    IGridProperties GridProperties { get; };\n\n    ISection[] GetItems(); // DevPal will be responsible for filtering the list of items\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Valid URIs in C# for PowerToys URI Plugin\nDESCRIPTION: The UriResolver.cs file validates hosts for URIs. Currently, it returns true for all valid URIs created from user queries, but can be expanded to filter specific hosts in the future.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/uri.md#2025-04-15_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Code not provided in the original text, but would be located at:\n// src/modules/launcher/Plugins/Microsoft.Plugin.Uri/UriHelper/UriResolver.cs\n```\n\n----------------------------------------\n\nTITLE: PowerToys Telemetry Structure Overview\nDESCRIPTION: Hierarchical structure showing the relationship between telemetry components including Settings.UI.Library/Telemetry for event generation, EventBase for common PowerToys telemetry attributes, and IEvent for base telemetry requirements.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/telemetry.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Telemetry\\n## Overview\\n[`Settings.UI.Library/Telemetry`](/src/settings-ui/Settings.UI.Library/Telemetry) contains telemetry events generated by `Settingsv2.` These event classes are derived from the [`EventBase`](/src/common/ManagedTelemetry/Telemetry/Events/EventBase.cs) class and [`IEvent`](/src/common/ManagedTelemetry/Telemetry/Events/IEvent.cs) class.\n```\n\n----------------------------------------\n\nTITLE: Adding an Integer Spinner Setting in PowerToys\nDESCRIPTION: Shows how to add an integer property with a spinner editor to a Settings object. The spinner requires a property name, description, current value, minimum and maximum values, and an incremental step.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// Add an integer property with a spinner editor.\nsettings.add_int_spinner(\n  L\"test_int_spinner\", // property name\n  L\"This is what a IntSpinner property looks like\", // description or resource id of the localized string.\n  g_settings.test_int_prop, // property value.\n  0, // min value.\n  100, // max value.\n  10 // incremental step.\n);\n```\n\n----------------------------------------\n\nTITLE: Creating SSHHostsListPage for Command Palette Extension\nDESCRIPTION: Implementation of a ListPage class that displays a list of SSH hosts. This class creates a new page in the Command Palette with a section title and placeholder items.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed class SSHHostsListPage : ListPage\n{\n    public SSHHostsListPage()\n    {\n        Icon = new(string.Empty);\n        Name = \"SSH Keychain\";\n    }\n\n    public override ISection[] GetItems()\n    {\n        return [\n            new ListSection()\n            {\n                Title = \"SSH Hosts\",\n                Items = [\n                    new ListItem(new NoOpCommand()) { Title = \"TODO: Implement your extension here\" }\n                ],\n            }\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing OneNote Window in C#\nDESCRIPTION: This code snippet shows how to restore and focus the OneNote application window when a user selects a search result. It uses PInvoke to interact with Windows API for window management.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/onenote.md#2025-04-15_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nif (PInvoke.IsIconic(handle))\n{\n    PInvoke.ShowWindow(handle, SHOW_WINDOW_CMD.SW_RESTORE);\n}\n\nPInvoke.SetForegroundWindow(handle);\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Grid for Keyboard Manager UI in C++\nDESCRIPTION: Initializes a Grid with multiple columns to structure the Keyboard Manager UI. Rows are added dynamically when the add button is pressed.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagerui.md#2025-04-15_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nGrid uiGrid;\n// Add column definitions\n// ...\n\n// Add rows dynamically\nif (addButton.Click())\n{\n    RowDefinition row;\n    uiGrid.RowDefinitions().Append(row);\n    // Add UI elements to the new row\n}\n```\n\n----------------------------------------\n\nTITLE: Reading an Integer Spinner Value in PowerToys\nDESCRIPTION: Shows how to read an integer value from a PowerToyValues object. The code checks if the value exists using is_int_value() before retrieving it with get_int_value().\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Update the int property.\nif (values.is_int_value(L\"test_int_spinner\")) {\n  g_settings.test_int_prop = values.get_int_value(L\"test_int_spinner\");\n}\n```\n\n----------------------------------------\n\nTITLE: PowerToys Module Configuration Setter Method\nDESCRIPTION: Method for applying updated configuration settings from the Settings editor to the module.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual void set_config(const wchar_t* config)\n```\n\n----------------------------------------\n\nTITLE: Telemetry Event Logging in KeyboardManager\nDESCRIPTION: Code snippets showing the telemetry events emitted by Keyboard Manager for tracking usage and errors. Events include enable/disable state, remap counts, and error logging.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanager.md#2025-04-15_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// Enable/Disable telemetry\nKeyboardManager_EnableKeyboardManager(true/false);\n\n// Remap count telemetry\nKeyboardManager_KeyRemapCount(remapCount);\nKeyboardManager_OSLevelShortcutRemapCount(shortcutCount);\nKeyboardManager_AppSpecificShortcutRemapCount(appSpecificCount);\n\n// Error telemetry\nKeyboardManager_Error(methodName, errorCode, errorMessage);\n```\n\n----------------------------------------\n\nTITLE: Adding a Color Picker Setting in PowerToys\nDESCRIPTION: Shows how to add a color property with a color picker editor to a Settings object. The color picker requires a property name, description string, and the current color value in #RRGGBB format.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Add a string property with a color picker editor.\nsettings.add_color_picker(\n  L\"test_color_picker\", // property name.\n  L\"This is what a ColorPicker property looks like\", // description or resource id of the localized string.\n  g_settings.test_color_prop // property value.\n);\n```\n\n----------------------------------------\n\nTITLE: COM Object Creation and Foreground Window Management in C++\nDESCRIPTION: These functions are used for creating COM objects and managing foreground windows. They are essential for GUI operations and inter-process communication in Windows applications.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Microsoft.CmdPal.UI.ViewModels/NativeMethods.txt#2025-04-15_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nCoCreateInstance\nSetForegroundWindow\nIsIconic\n```\n\n----------------------------------------\n\nTITLE: PowerToys Module Enable Method\nDESCRIPTION: Virtual method for enabling the PowerToy module functionality.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual void enable()\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Keychain Data Class\nDESCRIPTION: Implementation of a data class that represents an SSH host with properties for the host name and an escaped version of the host for JSON encoding.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\ninternal class SSHKeychainItem\n{\n    internal string Host { get; init; }\n\n    internal string EscapedHost => JsonEncodedText.Encode(Host).ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PowerToys with Scoop in PowerShell\nDESCRIPTION: This command updates an existing Microsoft PowerToys installation to the latest version using the Scoop package manager. Run this from either a command line or PowerShell interface.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/unofficialInstallMethods.md#2025-04-15_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nscoop update powertoys\n```\n\n----------------------------------------\n\nTITLE: Implementing StringTable in RC File\nDESCRIPTION: Demonstrates how to define localized strings in a Windows resource script file using StringTable.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/guidance.md#2025-04-15_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nSTRINGTABLE\nBEGIN\n    IDS_MODULE_DISPLAYNAME               L\"Module Name\"\nEND\n```\n\n----------------------------------------\n\nTITLE: Monitor Information Retrieval in Windows C/C++\nDESCRIPTION: Functions for getting information about monitors associated with windows. These are used to query display device properties and configurations.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Exts/Microsoft.CmdPal.Ext.Apps/NativeMethods.txt#2025-04-15_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nMonitorFromWindow\nGetMonitorInfo\n```\n\n----------------------------------------\n\nTITLE: PowerToys Module State Checker Method\nDESCRIPTION: Virtual method that returns the current enabled/disabled state of the PowerToy module.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual bool is_enabled() = 0;\n```\n\n----------------------------------------\n\nTITLE: Registering New Language in Monaco\nDESCRIPTION: Function call to register a new language with Monaco editor, specifying the language ID, file extensions, and definition.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/common/FilePreviewCommon.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nregisterAdditionalNewLanguage(\"id\", [\".fileExtension\"], idDefinition(), monaco)\n```\n\n----------------------------------------\n\nTITLE: Defining String Resource IDs in C++ Header\nDESCRIPTION: Shows how to define string resource IDs in a C++ header file (resource.h). XXX should be replaced with a unique integer ID.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/guidance.md#2025-04-15_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#define IDS_MODULE_DISPLAYNAME                    XXX\n```\n\n----------------------------------------\n\nTITLE: Shell and Stream Operations in C++\nDESCRIPTION: These functions are related to shell operations and stream creation. They are used for file operations and loading of shell resources.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Microsoft.CmdPal.UI.ViewModels/NativeMethods.txt#2025-04-15_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nSHCreateStreamOnFileEx\nCoAllowSetForegroundWindow\nSHCreateStreamOnFileEx\nSHLoadIndirectString\n```\n\n----------------------------------------\n\nTITLE: Checking OneNote Installation in C#\nDESCRIPTION: This snippet demonstrates how the plugin checks if OneNote is installed and available. It attempts to access OneNote in the constructor and catches a COMException if OneNote is not installed, setting a flag accordingly.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/onenote.md#2025-04-15_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n    _ = OneNoteProvider.PageItems.Any();\n    _oneNoteInstalled = true;\n}\ncatch (COMException)\n{\n    // OneNote isn't installed, plugin won't do anything.\n    _oneNoteInstalled = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Additional File Extension\nDESCRIPTION: Function call to register additional file extensions for an existing language in Monaco editor.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/common/FilePreviewCommon.md#2025-04-15_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nregisterAdditionalLanguage(\"id\", [\".fileExtension\"], \"existingId\", monaco)\n```\n\n----------------------------------------\n\nTITLE: PowerShell Command for Direct IDL Generation to Consumption Location\nDESCRIPTION: An alternative PowerShell command that generates the IDL file and outputs it directly to the location where it's consumed in the project structure. This simplifies the workflow by eliminating manual file copying.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_26\n\nLANGUAGE: powershell\nCODE:\n```\n.\\doc\\initial-sdk-spec\\generate-interface.ps1 > .\\extensionsdk\\Microsoft.CommandPalette.Extensions\\Microsoft.CommandPalette.Extensions.Toolkit.idl\n```\n\n----------------------------------------\n\nTITLE: String Table Format for Resource Files in C++ Projects\nDESCRIPTION: Template for string table entries in .rc files with language specification. This format ensures resources are properly localized for different languages in C++ projects.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)\nLANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US\n\nSTRINGTABLE\nBEGIN\n    strings\nEND\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Memory Information in Windows C/C++\nDESCRIPTION: Functions for querying system memory status and physically installed memory. These are used to gather information about the system's memory resources.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Exts/Microsoft.CmdPal.Ext.Apps/NativeMethods.txt#2025-04-15_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nGetPhysicallyInstalledSystemMemory\nGlobalMemoryStatusEx\nGetSystemInfo\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Table of Contents for PowerToys Launcher Documentation\nDESCRIPTION: This Markdown snippet creates a table of contents for the PowerToys Launcher documentation. It includes links to various sections such as architecture, debugging, and a list of available plugins.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/readme.md#2025-04-15_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Table of Contents\n1. [Architecture](/doc/devdocs/modules/launcher/architecture.md)\n2. [Debugging](/doc/devdocs/modules/launcher/debugging.md)\n3. [New Plugin Checklist](/doc/devdocs/modules/launcher/new-plugin-checklist.md)\n4. [Project Structure](/doc/devdocs/modules/launcher/project_structure.md)\n5. [Telemetry](/doc/devdocs/modules/launcher/telemetry.md)\n6. Plugins\n    - [Overview](/doc/devdocs/modules/launcher/plugins/overview.md)\n    - [Calculator](/doc/devdocs/modules/launcher/plugins/calculator.md)\n    - [Folder](/doc/devdocs/modules/launcher/plugins/folder.md)\n    - [History](/doc/devdocs/modules/launcher/plugins/history.md)\n    - [Indexer](/doc/devdocs/modules/launcher/plugins/indexer.md)\n    - [OneNote](/doc/devdocs/modules/launcher/plugins/onenote.md)\n    - [Program](/doc/devdocs/modules/launcher/plugins/program.md)\n    - [Registry](/doc/devdocs/modules/launcher/plugins/registry.md)\n    - [Shell](/doc/devdocs/modules/launcher/plugins/shell.md)\n    - [Time and Date](/doc/devdocs/modules/launcher/plugins/timedate.md)\n    - [Unit Converter](/doc/devdocs/modules/launcher/plugins/community.unitconverter.md)\n    - [Uri](/doc/devdocs/modules/launcher/plugins/uri.md)\n    - [Value Generator](/doc/devdocs/modules/launcher/plugins/community.valuegenerator.md)\n    - [Web Search](/doc/devdocs/modules/launcher/plugins/WebSearch.md)\n    - [Windows Settings](/doc/devdocs/modules/launcher/plugins/windowssettings.md)\n    - [Windows System Commands](/doc/devdocs/modules/launcher/plugins/system.md)\n    - [Window Walker](/doc/devdocs/modules/launcher/plugins/windowwalker.md)\n```\n\n----------------------------------------\n\nTITLE: Enhancing SSHHostsListPage with Multiple ListItems\nDESCRIPTION: Enhanced version of the SSHHostsListPage that displays multiple ListItems with different properties, including titles, subtitles, and tags to demonstrate UI capabilities of the Command Palette.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed class SSHHostsListPage : ListPage\n{\n    public SSHHostsListPage()\n    {\n        Icon = new(string.Empty);\n        Name = \"SSH Keychain\";\n    }\n\n    public override ISection[] GetItems()\n    {\n        return [\n            new ListSection()\n            {\n                Title = \"SSH Hosts\",\n                Items = [\n                    new ListItem(new NoOpCommand()) { Title = \"TODO: Implement your extension here\" },\n                    new ListItem(new NoOpCommand()) { Title = \"Another list item\", Subtitle = \"this one has a subtitle\" },\n                    new ListItem(new NoOpCommand())\n                    {\n                        Title = \"A list item with a tag\",\n                        Subtitle = \"this one with tags\",\n                        Tags = [new Tag()\n                               {\n                                   Text = \"Example Tag\",\n                               }\n                               ],\n                    }\n                ],\n            }\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerToys Module Template XML Definition for Visual Studio\nDESCRIPTION: This XML configuration defines the Visual Studio template for creating PowerToys modules. It specifies template metadata, supported platforms, file structures, and parameter replacement rules that Visual Studio will use when a developer creates a new PowerToys module project.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/ModuleTemplate/README.md#2025-04-15_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<VSTemplate Version=\"3.0.0\" xmlns=\"http://schemas.microsoft.com/developer/vstemplate/2005\" Type=\"Project\">\n  <TemplateData>\n    <Name>PowerToys Module</Name>\n    <Description>A project for creating a PowerToys module</Description>\n    <ProjectType>VC</ProjectType>\n    <ProjectSubType>\n    </ProjectSubType>\n\t  <LanguageTag>C++</LanguageTag>\n\t  <PlatformTag>windows</PlatformTag>\n\t  <ProjectTypeTag>extension</ProjectTypeTag>\n    <SortOrder>1000</SortOrder>\n    <CreateNewFolder>true</CreateNewFolder>\n    <DefaultName>PowerToy</DefaultName>\n    <ProvideDefaultName>true</ProvideDefaultName>\n    <LocationField>Enabled</LocationField>\n    <EnableLocationBrowseButton>true</EnableLocationBrowseButton>\n    <Icon>__TemplateIcon.ico</Icon>\n  </TemplateData>\n  <TemplateContent>\n    <Project TargetFileName=\"$projectname$.vcxproj\" File=\"ModuleTemplate.vcxproj\" ReplaceParameters=\"true\">\n      <ProjectItem ReplaceParameters=\"false\" TargetFileName=\"$projectname$.vcxproj.filters\">ModuleTemplate.vcxproj.filters</ProjectItem>\n      <ProjectItem ReplaceParameters=\"true\" TargetFileName=\"dllmain.cpp\">dllmain.cpp</ProjectItem>\n      <ProjectItem ReplaceParameters=\"false\" TargetFileName=\"pch.cpp\">pch.cpp</ProjectItem>\n      <ProjectItem ReplaceParameters=\"false\" TargetFileName=\"trace.cpp\">trace.cpp</ProjectItem>\n      <ProjectItem ReplaceParameters=\"false\" TargetFileName=\"pch.h\">pch.h</ProjectItem>\n      <ProjectItem ReplaceParameters=\"false\" TargetFileName=\"resource.h\">resource.h</ProjectItem>\n      <ProjectItem ReplaceParameters=\"false\" TargetFileName=\"trace.h\">trace.h</ProjectItem>\n      <ProjectItem ReplaceParameters=\"true\" TargetFileName=\"$projectname$.rc\">ModuleTemplate.rc</ProjectItem>\n    </Project>\n  </TemplateContent>\n</VSTemplate>\n```\n\n----------------------------------------\n\nTITLE: Configuring Localization with LocProject.json\nDESCRIPTION: Example configuration file used to enable localization for a PowerToys project. This JSON file defines the language set, source resource file location, copy options, and output path for localized resources.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Projects\": [\n        {\n            \"LanguageSet\": \"Azure_Languages\",\n            \"LocItems\": [\n                {\n                    \"SourceFile\": \"src\\\\path\\\\resources\\\\Resources.resx\",\n                    \"CopyOption\": \"LangIDOnName\",\n                    \"OutputPath\": \"src\\\\path\\\\resources\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Generated Resources in C#\nDESCRIPTION: Shows the simplified approach of accessing string resources using the auto-generated Resources class in C#.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/guidance.md#2025-04-15_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstring validUIDisplayString = Resources.ValidUIDisplayString;\n```\n\n----------------------------------------\n\nTITLE: Structuring Markdown Navigation for Keyboard Manager Docs\nDESCRIPTION: A markdown-formatted table of contents that links to the four main documentation sections for the PowerToys Keyboard Manager module: core module, event handlers, UI, and common components.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/README.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Table of Contents\nThe devdocs for Keyboard Manager have been divided into the following modules:\n1. [Keyboard Manager Module](keyboardmanager.md)\n2. [Keyboard Event Handlers](keyboardeventhandlers.md)\n3. [Keyboard Manager UI](keyboardmanagerui.md)\n4. [Keyboard Manager Common](keyboardmanagercommon.md)\n```\n\n----------------------------------------\n\nTITLE: LCL File Format Example for Translations\nDESCRIPTION: Example of a localization (LCL) file entry that contains both the source string and its translation. This XML format is used by the CDPX Localization system to manage translations.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<Item ItemId=\";EditKeyboard_WindowName\" ItemType=\"0;.resx\" PsrId=\"211\" Leaf=\"true\">\n    <Str Cat=\"Text\">\n        <Val><![CDATA[Remap keys]]></Val>\n        <Tgt Cat=\"Text\" Stat=\"Loc\" Orig=\"New\">\n            <Val><![CDATA[Remapper des touches]]></Val>\n        </Tgt>\n    </Str>\n    <Disp Icon=\"Str\" />\n</Item>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tray Times in Awake Settings JSON\nDESCRIPTION: Example JSON configuration that shows how to set custom time intervals in the Awake tray menu. The configuration includes display settings, mode selection, default timer values, and custom tray time entries defined as key-value pairs where the key is the display name and the value is the duration in seconds.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/planning/awake.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"awake_keep_display_on\": true,\n        \"awake_mode\": 2,\n        \"awake_hours\": 0,\n        \"awake_minutes\": 3,\n        \"tray_times\": {\n            \"Custom length\": 1800,\n            \"Another custom length\": 3600\n        }\n    },\n    \"name\": \"Awake\",\n    \"version\": \"1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ResourceManager in C#\nDESCRIPTION: Demonstrates manual string resource retrieval using ResourceManager in C# code.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/guidance.md#2025-04-15_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.Resources.ResourceManager manager = new System.Resources.ResourceManager(baseName, assembly);\nstring validUIDisplayString = manager.GetString(\"ValidUIDisplayString\", resourceCulture);\n```\n\n----------------------------------------\n\nTITLE: Enabling Mica Background in C++ for XAML UI\nDESCRIPTION: Applies the Mica background effect to the root or page background of the Keyboard Manager UI. Falls back to ApplicationPageBackgroundThemeBrush if Mica is not available.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/keyboardmanager/keyboardmanagerui.md#2025-04-15_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nif (BackdropMaterial::IsApiAvailable())\n{\n    BackdropMaterial::SetApplyToRootOrPageBackground(rootGrid, true);\n}\nelse\n{\n    rootGrid.Background(Application::Current().Resources().Lookup(box_value(L\"ApplicationPageBackgroundThemeBrush\")).as<Brush>());\n}\n```\n\n----------------------------------------\n\nTITLE: Logger Functions in C# Projects\nDESCRIPTION: This C# code snippet lists the available logging functions in the Logger class, including methods for logging errors, warnings, info, debug messages, and tracing.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/logging.md#2025-04-15_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Logs an error that the utility encountered\nLogger.LogError(string message);\nLogger.LogError(string message, Exception ex);\n// Logs an error that isn't that grave\nLogger.LogWarning(string message);\n// Logs what the app is doing at the moment\nLogger.LogInfo(string message);\n// Like LogInfo just with infos important for debugging\nLogger.LogDebug(string message);\n// Logs the current state of the utility.\nLogger.LogTrace();\n```\n\n----------------------------------------\n\nTITLE: Importing spdlog Library in C++ Projects\nDESCRIPTION: This XML snippet shows how to include the spdlog library in a C++ project's .vcxproj file. It imports the spdlog.props file, which adds the required include directories and links the library binary.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/logging.md#2025-04-15_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Import Project=\"..\\..\\..\\deps\\spdlog.props\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Resources in RESX XML\nDESCRIPTION: Example of defining localized strings in a .NET RESX resource file with value and comment.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/guidance.md#2025-04-15_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n  <data name=\"ValidUIDisplayString\" xml:space=\"preserve\">\n    <value>Description to be displayed on UI.</value>\n    <comment>This text is displayed when XYZ button clicked.</comment>\n  </data>\n```\n\n----------------------------------------\n\nTITLE: Creating a reusable OpenUrl command with C# helper class\nDESCRIPTION: Implementation of a helper class for opening URLs in a browser. This class extends the Microsoft.CommandPalette.Extensions.Toolkit.InvokableCommand and provides a simple way to create commands that open URLs.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nclass OpenUrlCommand(string targetUrl, CommandResult result) : Microsoft.CommandPalette.Extensions.Toolkit.InvokableCommand {\n    public OpenUrlCommand()\n    {\n        Name = \"Open\";\n        Icon = new(\"\\uE8A7\"); // OpenInNewWindow\n    }\n    public CommandResult Invoke() {\n        Process.Start(new ProcessStartInfo(targetUrl) { UseShellExecute = true });\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MouseWithoutBorders.Common Properties in C#\nDESCRIPTION: This snippet shows the initialization of various properties in the MouseWithoutBorders.Common class. It includes fields for managing clipboard events, screen dimensions, network communication, and input simulation.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/MouseWithoutBorders/MouseWithoutBorders.UnitTests/Core/Logger.PrivateDump.original.txt#2025-04-15_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nlastClipboardEventTime = 0;\nclipboardCopiedTime = 0;\nComma = System.Char[];\nStar = System.Char[];\nNullSeparator = System.Char[];\n<LastIDWithClipboardData>k__BackingField = NONE;\n<NextClipboardViewer>k__BackingField = 0;\n<IsClipboardDataImage>k__BackingField = False;\nlastClipboardObject = \n<HasSwitchedMachineSinceLastCopy>k__BackingField = False;\nClipboardThreadOldLock = O;\nscreenWidth = 0;\nscreenHeight = 0;\nlastX = 0;\nlastY = 0;\nmainFormVisible = True;\nrunOnLogonDesktop = False;\nrunOnScrSaverDesktop = False;\ntoggleIconsIndex = 0;\nEvSwitch = EventWaitHandle;\nlastPos = {X=0,Y=0};\nswitchCount = 0;\nlastReconnectByHotKeyTime = 0;\ntcpPort = 0;\nsecondOpenSocketTry = False;\nbinaryName = MM;\n<PaintCount>k__BackingField = 0;\n<RunWithNoAdminRight>k__BackingField = False;\n<Is64bitOS>k__BackingField = False;\nsocketMutexBalance = 0;\n<BlockingUI>k__BackingField = False;\n<UIThreadID>k__BackingField = 0;\n<InputCallbackThreadID>k__BackingField = 0;\nInputSimulationLock = O;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Token Theme Rule\nDESCRIPTION: Configuration object for defining custom token colors and styles in Monaco editor's theme.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/common/FilePreviewCommon.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{token: 'token-name', foreground: 'ff0000'}\n```\n\n----------------------------------------\n\nTITLE: Installing PowerToys Build Prerequisites from Command Line\nDESCRIPTION: Commands to restore NuGet packages and build the BugReportTool and StylesReportTool solutions, which are prerequisites for building the PowerToys installer.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/readme.md#2025-04-15_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nnuget restore .\\tools\\BugReportTool\\BugReportTool.sln\nmsbuild -p:Platform=x64 -p:Configuration=Release .\\tools\\BugReportTool\\BugReportTool.sln\n\nnuget restore .\\tools\\StylesReportTool\\StylesReportTool.sln\nmsbuild -p:Platform=x64 -p:Configuration=Release .\\tools\\StylesReportTool\\StylesReportTool.sln\n```\n\n----------------------------------------\n\nTITLE: PowerToys Module Destructor Method\nDESCRIPTION: Virtual method for cleaning up and destroying the PowerToy module instance.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/interface.md#2025-04-15_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual void destroy()\n```\n\n----------------------------------------\n\nTITLE: Defining IconData and IconInfo Structures in C#\nDESCRIPTION: These structures provide ways to specify icons in the Command Palette extensions system. IconData encapsulates different ways to represent icons, while IconInfo allows specifying both light and dark theme versions of an icon.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\nstruct IconData {\n    IconData(String iconString);\n    static IconData FromStream(Windows.Storage.Streams.IRandomAccessStreamReference stream);\n\n    String Icon { get; };\n    Windows.Storage.Streams.IRandomAccessStreamReference Data { get; };\n}\nstruct IIconInfo {\n    IIconInfo(String iconString);\n    IIconInfo(IconData lightIcon, IconData darkIcon);\n\n    IconData Light { get; };\n    IconData Dark { get; };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for MouseWithoutBorders.Common in C#\nDESCRIPTION: This snippet shows the definition of various constants used in the MouseWithoutBorders.Common class. These constants include sizes, timeouts, and Windows message codes for input handling.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/MouseWithoutBorders/MouseWithoutBorders.UnitTests/Core/Logger.PrivateDump.original.txt#2025-04-15_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nBIG_CLIPBOARD_DATA_TIMEOUT = 30000;\nMAX_CLIPBOARD_DATA_SIZE_CAN_BE_SENT_INSTANTLY_TCP = 1048576;\nMAX_CLIPBOARD_FILE_SIZE_CAN_BE_SENT = 104857600;\nTEXT_HEADER_SIZE = 12;\nDATA_SIZE = 48;\nTEXT_TYPE_SEP = {4CFF57F7-BEDD-43d5-AE8F-27A61E886F2F};\nTOGGLE_ICONS_SIZE = 4;\nICON_ONE = 0;\nICON_ALL = 1;\nICON_SMALL_CLIPBOARD = 2;\nICON_BIG_CLIPBOARD = 3;\nICON_ERROR = 4;\nJUST_GOT_BACK_FROM_SCREEN_SAVER = 9999;\nNETWORK_STREAM_BUF_SIZE = 1048576;\nSymAlBlockSize = 16;\nPW_LENGTH = 16;\nHELPER_FORM_TEXT = Mouse without Borders Helper;\nHelperProcessName = PowerToys.MouseWithoutBordersHelper;\nMAX_LOG = 10000;\nMaxLogExceptionPerHour = 1000;\nHeaderSENT = Be{0},Ke{1},Mo{2},He{3},Mx{4},Tx{5},Im{6},By{7},Cl{8},Dr{9},De{10},Ed{11},Ie{12},Ni{13};\nHeaderRECEIVED = Be{0},Ke{1},Mo{2},He{3},Mx{4},Tx{5},Im{6},By{7},Cl{8},Dr{9},De{10},Ed{11},In{12},Ni{13},Pc{14}/{15};\nMAX_MACHINE = 4;\nMAX_SOCKET = 8;\nHEARTBEAT_TIMEOUT = 1500000;\nSKIP_PIXELS = 1;\nJUMP_PIXELS = 2;\nPACKAGE_SIZE = 32;\nPACKAGE_SIZE_EX = 64;\nWP_PACKAGE_SIZE = 6;\nKEYEVENTF_KEYDOWN = 1;\nKEYEVENTF_KEYUP = 2;\nWH_MOUSE = 7;\nWH_KEYBOARD = 2;\nWH_MOUSE_LL = 14;\nWH_KEYBOARD_LL = 13;\nWM_MOUSEMOVE = 512;\nWM_LBUTTONDOWN = 513;\nWM_RBUTTONDOWN = 516;\nWM_MBUTTONDOWN = 519;\nWM_XBUTTONDOWN = 523;\nWM_LBUTTONUP = 514;\nWM_RBUTTONUP = 517;\nWM_MBUTTONUP = 520;\nWM_XBUTTONUP = 524;\nWM_LBUTTONDBLCLK = 515;\nWM_RBUTTONDBLCLK = 518;\nWM_MBUTTONDBLCLK = 521;\nWM_MOUSEWHEEL = 522;\nWM_KEYDOWN = 256;\nWM_KEYUP = 257;\nWM_SYSKEYDOWN = 260;\nWM_SYSKEYUP = 261;\n```\n\n----------------------------------------\n\nTITLE: Describing UnitHandler Class\nDESCRIPTION: This snippet describes the UnitHandler class, which performs the actual unit conversions. It mentions support for abbreviations in user input, allowing for flexible input formats.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/community.unitconverter.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### [`UnitHandler`](/src/modules/launcher/Plugins/Community.PowerToys.Run.Plugin.UnitConverter/UnitHandler.cs)\n - Class that does the actual conversion.\n - Supports abbreviations in user input (single, double, or none).\n```\n\n----------------------------------------\n\nTITLE: Installing PowerToys with Chocolatey in PowerShell\nDESCRIPTION: This command installs Microsoft PowerToys using the Chocolatey package manager. Users should run this from either a command line or PowerShell interface.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/unofficialInstallMethods.md#2025-04-15_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install powertoys\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Action Button in PowerToys\nDESCRIPTION: Shows how to add a custom action property with a button control to a Settings object. This can be used to trigger module-specific functionality from the settings UI.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/tools/project_template/README.md#2025-04-15_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// Add a custom action property. When using this settings type, the \"PowertoyModuleIface::call_custom_action()\"\n// method should be overridden as well.\nsettings.add_custom_action(\n  L\"test_custom_action\", // action name.\n  L\"This is what a CustomAction property looks like\", // label above the field: a string literal or a resource id\n  L\"Call a custom action\", // button text: a string literal or a resource id\n  L\"Press the button to call a custom action in the Example PowerToy\" // display values / extended info: a string literal or a resource id\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking PowerToysConfigure DSC Resource Directly\nDESCRIPTION: This PowerShell command demonstrates how to invoke the PowerToysConfigure DSC resource directly, specifying properties for the Awake module and enabling debug output.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/dsc-configure.md#2025-04-15_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-DscResource -Name PowerToysConfigure -Method Set -ModuleName Microsoft.PowerToys.Configure -Property @{ Debug = $true; Awake = @{ Enabled = $false; Mode = \"TIMED\"; IntervalMinutes = \"10\" } }\n```\n\n----------------------------------------\n\nTITLE: Initializing ListItem with NoOpCommand in Command Palette\nDESCRIPTION: Initial implementation of a Command Palette command with NoOpCommand that doesn't perform any action when executed. This represents the base state before implementing actual functionality.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IListItem[] _commands = [\n       new ListItem(new NoOpCommand())\n        {\n            Title = \"Search SSH Keys\",\n            Subtitle = \"Quickly find and launch into hosts from your SSH config file\",\n        },\n    ];\n```\n\n----------------------------------------\n\nTITLE: Upgrading PowerToys with Chocolatey in PowerShell\nDESCRIPTION: This command upgrades an existing Microsoft PowerToys installation to the latest version using the Chocolatey package manager. Run this from either a command line or PowerShell interface.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/unofficialInstallMethods.md#2025-04-15_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nchoco upgrade powertoys\n```\n\n----------------------------------------\n\nTITLE: PowerToys Settings Events Documentation\nDESCRIPTION: Documentation of specific telemetry events in Settingsv2: SettingsBootEvent for UI initialization timing and SettingsEnabledEvent for module state changes.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/telemetry.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Events\\nThe following events are generated by `Settingsv2`:\\n1. [`SettingsBootEvent`](/src/settings-ui/Settings.UI.Library/Telemetry/Events/SettingsBootEvent.cs): This event captures the time taken by `Settingsv2` to initialize `MainWindow` UI control.\\n2. [`SettingsEnabledEvent.cs`](/src/settings-ui/Settings.UI.Library/Telemetry/Events/SettingsEnabledEvent.cs): This event is generated when a module is enabled or disabled.\n```\n\n----------------------------------------\n\nTITLE: Configuring PSModulePath for PowerToys DSC Resource\nDESCRIPTION: This PowerShell command adds the current directory to the PSModulePath environment variable, allowing DSC to discover the PowerToys DSC Resource module.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/dsc-configure.md#2025-04-15_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PSModulePath += \";$pwd\"\n```\n\n----------------------------------------\n\nTITLE: Launching Windows Store for DevPal Extensions\nDESCRIPTION: Demonstrates how to open the Windows Store to a list of DevPal extensions using a specific URI scheme. This method is limited as it doesn't allow direct querying of available extensions.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nms-windows-store://assoc/?Tags=AppExtension-com.microsoft.commandpalette\n```\n\n----------------------------------------\n\nTITLE: Verifying PowerToys DSC Module and Resource Availability\nDESCRIPTION: These PowerShell commands check if the PowerToys DSC module is discoverable and if the PowerToysConfigure resource is available.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/dsc-configure.md#2025-04-15_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Module -ListAvailable | grep PowerToys\nGet-DSCResource | grep PowerToys\n```\n\n----------------------------------------\n\nTITLE: Testing PowerToys Configuration with Winget\nDESCRIPTION: This PowerShell command shows how to use winget to apply a PowerToys configuration file, accepting configuration agreements and disabling interactivity.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/dsc-configure.md#2025-04-15_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nwinget configure .\\configuration.winget --accept-configuration-agreements --disable-interactivity\n```\n\n----------------------------------------\n\nTITLE: Importing PowerToys DSC Module for Diagnostics\nDESCRIPTION: This PowerShell command force-imports the PowerToys DSC module to diagnose any issues with module discovery or loading.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/dsc-configure.md#2025-04-15_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module .\\Microsoft.PowerToys.Configure.psd1\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Language Module in Monaco\nDESCRIPTION: Import statement for adding a new custom language module to the Monaco special languages configuration.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/common/FilePreviewCommon.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { idDefinition } from './customLanguages/file.js';\n```\n\n----------------------------------------\n\nTITLE: Class Diagram of DevPalette SDK Interface Relationships\nDESCRIPTION: A mermaid class diagram showing the relationships between various interfaces in the SDK. The diagram illustrates inheritance hierarchies and property relationships with multiplicity indicators (* for 0 or more, ? for optional, 1 for required).\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_23\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class ICommand {\n        String Name\n        String Id\n        IIconInfo Icon\n    }\n    IPage --|> ICommand\n    class IPage  {\n        String Title\n        Boolean IsLoading\n    }\n\n    IInvokableCommand --|> ICommand\n    class IInvokableCommand  {\n        ICommandResult Invoke(object context)\n    }\n\n    class IForm {\n        String TemplateJson()\n        String DataJson()\n        String StateJson()\n        ICommandResult SubmitForm(String payload)\n    }\n    IFormPage --|> IPage\n    class IFormPage  {\n        IForm[] Forms()\n    }\n    IForm \"*\" *-- IFormPage\n\n    IMarkdownPage --|> IPage\n    class IMarkdownPage  {\n        String[] Bodies()\n        IDetails Details()\n        IContextItem[] Commands\n    }\n    %% IMarkdownPage *-- IDetails\n    IContextItem \"*\" *-- IMarkdownPage\n    IDetails \"?\" *-- IMarkdownPage\n    %%%%%%%%%\n\n    class IFilterItem\n\n    ISeparatorFilterItem --|> IFilterItem\n    class ISeparatorFilterItem\n\n    IFilter --|> IFilterItem\n    class IFilter  {\n        String Id\n        String Name\n        IIconInfo Icon\n    }\n\n    class IFilters {\n        String CurrentFilterId\n        IFilterItem[] AvailableFilters()\n    }\n    IFilterItem \"*\" *-- IFilters\n\n    class IFallbackHandler {\n        void UpdateQuery(String query)\n    }\n\n\n    %% IListItem --|> INotifyPropChanged\n    class IListItem  {\n        IIconInfo Icon\n        String Title\n        String Subtitle\n        ICommand Command\n        IContextItem[] MoreCommands\n        ITag[] Tags\n        IDetails Details\n        IFallbackHandler FallbackHandler\n        String Section\n        String TextToSuggest\n    }\n    IContextItem \"*\" *-- IListItem\n    IDetails \"?\" *-- IListItem\n    ICommand \"?\" *-- IListItem\n    ITag \"*\" *-- IListItem\n    IFallbackHandler \"?\" *-- IListItem\n\n    class IGridProperties  {\n        Windows.Foundation.Size TileSize\n    }\n\n    IListPage --|> IPage\n    class IListPage  {\n        String SearchText\n        String PlaceholderText\n        Boolean ShowDetails\n        IFilters Filters\n        IGridProperties GridProperties\n        Boolean HasMore\n\n        IListItem[] GetItems()\n        void LoadMore()\n    }\n    IListItem \"*\" *-- IListPage\n    IFilters \"*\" *-- IListPage\n    IGridProperties \"?\" *-- IListPage\n\n    IDynamicListPage --|> IListPage\n    class IDynamicListPage  {\n        +String SearchText set;\n    }\n\n    class IDetails {\n        IIconInfo HeroImage\n        String Title\n        String Body\n        IDetailsElement[] Metadata\n    }\n\n    class ITag {\n        IIconInfo Icon\n        String Text\n        Color Color\n        String ToolTip\n        ICommand Command\n    }\n    ICommand \"?\" *-- ITag\n\n    %%%%%%\n    class IContextItem\n\n    ISeparatorContextItem --|> IContextItem\n    class ISeparatorContextItem\n    ICommandContextItem --|> IContextItem\n    class ICommandContextItem  {\n        ICommand Command\n        String Tooltip\n        Boolean IsCritical\n    }\n    ICommand \"?\" *-- ICommandContextItem\n\n\n\n    class ICommandProvider {\n        String DisplayName\n        IIconInfo Icon\n        Boolean Frozen\n\n        ICommandItem[] TopLevelCommands()\n        IFallbackCommandItem[] FallbackCommands()\n        IListItem GetCommand(String id)\n    }\n    ICommandItem \"*\" *-- ICommandProvider\n    IFallbackCommandItem \"*\" *-- ICommandProvider\n```\n\n----------------------------------------\n\nTITLE: Installing Preview Handler Dependencies to GAC using gacutil\nDESCRIPTION: Command for adding preview handler dependencies to the Global Assembly Cache (GAC). This is part of the direct DLL registration process, which is not the recommended approach but may be used for development purposes.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/previewpane/README.md#2025-04-15_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ngacutil -i <path to dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing PSDesiredStateConfiguration Module\nDESCRIPTION: This PowerShell command installs the PSDesiredStateConfiguration module, which is required for working with DSC resources.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/dsc-configure.md#2025-04-15_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name PSDesiredStateConfiguration -RequiredVersion 2.0.7\n```\n\n----------------------------------------\n\nTITLE: Updating Command Palette Provider with NoOpCommand\nDESCRIPTION: Example showing the initial state of the Command Provider with a NoOpCommand that doesn't execute any action when selected in the Command Palette.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IListItem[] _commands = [\n       new ListItem(new NoOpCommand())\n        {\n            Title = \"Search SSH Keys\",\n            Subtitle = \"Quickly find and launch into hosts from your SSH config file\",\n        },\n    ];\n```\n\n----------------------------------------\n\nTITLE: Executing PowerToys Settings Commands\nDESCRIPTION: These PowerShell commands demonstrate how the PowerToysConfigure resource invokes PowerToys.Settings.exe to apply the configuration settings specified in the Winget configuration file.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/settingsv2/dsc-configure.md#2025-04-15_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPowerToys.Settings.exe set ShortcutGuide.Enabled false\nPowerToys.Settings.exe set FancyZones.Enabled true\nPowerToys.Settings.exe set FancyZones.FancyzonesEditorHotkey \"Shift+Ctrl+Alt+F\"\n```\n\n----------------------------------------\n\nTITLE: Caching Extension Data in JSON Format\nDESCRIPTION: JSON structure used by DevPal to cache information about extensions and their top-level commands. This cache includes details such as package family name, COM CLSID, display name, frozen status, and command properties.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"extensions\": [\n        {\n            \"pfn\": \"TemplateExtension_0.0.1.0_x64__8wekyb3d8bbwe\",\n            \"clsid\": \"{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}\",\n\n            \"displayName\": \"TemplateDisplayName\",\n            \"frozen\": true,\n            \"commands\":\n            [\n                {\n                    \"id\": \"TemplateExtension.MyFirstCommand\",\n                    \"icon\": \"\",\n                    \"title\": \"\",\n                    \"subtitle\": \"\",\n                    \"name\": \"\",\n                    \"moreCommands\": [ /* Additional commands... */]\n                }\n            ]\n        }\n    ]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Logger Class in C# Projects\nDESCRIPTION: This C# code snippet demonstrates how to import the Logger class from ManagedCommon in C# projects. It's required in all files that use the logger.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/logging.md#2025-04-15_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing ManagedCommon;\n```\n\n----------------------------------------\n\nTITLE: Measuring Regular Files and Hard-links in PowerToys Installation Directory using PowerShell\nDESCRIPTION: PowerShell commands to calculate the size of regular files and hard-links in the PowerToys installation directory. These commands help distinguish between the actual disk usage and what File Explorer reports, demonstrating the space efficiency gained through hard-linking.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/disk-usage-footprint.md#2025-04-15_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRegular files:\nls -Recurse -File -force -ErrorAction SilentlyContinue | ? LinkType -ne HardLink | Measure-Object -Property Length -Sum\n\nHard-links\nls -Recurse -File -force -ErrorAction SilentlyContinue | ? LinkType -e HardLink | Measure-Object -Property Length -Sum\n```\n\n----------------------------------------\n\nTITLE: Describing InputInterpreter Class\nDESCRIPTION: This snippet describes the InputInterpreter class, which is responsible for manipulating user input to ensure correct interpretation for unit conversion. It mentions the use of regex for input processing.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/plugins/community.unitconverter.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### [`InputInterpreter`](/src/modules/launcher/Plugins/Community.PowerToys.Run.Plugin.UnitConverter/InputInterpreter.cs)\n - Class which manipulates user input such that it may be interpreted correctly and thus converted.\n - Uses a regex amongst other things to do this.\n```\n\n----------------------------------------\n\nTITLE: Configuring Project References for PowerToys UI Tests in C#\nDESCRIPTION: XML configuration for setting up a new UI test project in PowerToys. It specifies output type, test running behavior, output path, and required package and project references.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/UITests.md#2025-04-15_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n\t<OutputType>Library</OutputType>\n\t<!-- This is a UI test, so don't run as part of MSBuild -->\n\t<RunVSTest>false</RunVSTest>\n</PropertyGroup>\n\n<PropertyGroup>\n\t<OutputPath>..\\..\\..\\..\\$(Platform)\\$(Configuration)\\tests\\KeyboardManagerUITests\\</OutputPath>\n</PropertyGroup>\n\n<ItemGroup>\n    <PackageReference Include=\"MSTest\" />\n    <ProjectReference Include=\"..\\..\\..\\common\\UITestAutomation\\UITestAutomation.csproj\" />\n    <Folder Include=\"Properties\\\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: PowerShell Command for Generating IDL from Documentation\nDESCRIPTION: A PowerShell command that generates the Interface Definition Language (IDL) file for the SDK directly from the documentation. It uses the mistletoe Python package to parse and process the markdown file.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\n.\\generate-interface.ps1 > .\\Microsoft.DevPalette.Extensions.idl\n```\n\n----------------------------------------\n\nTITLE: Including RESW Files in UWP Projects\nDESCRIPTION: XML configurations for including resource files in UWP projects. The first line shows a specific culture reference, while the second line shows a wildcard pattern to include all available cultures.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<PRIResource Include=\"Strings\\en-us\\Resources.resw\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<PRIResource Include=\"Strings\\*\\Resources.resw\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Memory Information in C++\nDESCRIPTION: This snippet includes functions for querying system memory status and physically installed memory. These are used to gather information about the system's memory resources.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Microsoft.CmdPal.UI.ViewModels/NativeMethods.txt#2025-04-15_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nGetPhysicallyInstalledSystemMemory\nGlobalMemoryStatusEx\nGetSystemInfo\n```\n\n----------------------------------------\n\nTITLE: Listing NuGet Packages for PowerToys in Markdown\nDESCRIPTION: This snippet provides a comprehensive list of NuGet packages and their versions used in the PowerToys project. It includes various categories of packages such as UI toolkits, data handling libraries, Windows SDK components, and utility packages.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/NOTICE.md#2025-04-15_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## NuGet Packages used by PowerToys\n\n- AdaptiveCards.ObjectModel.WinUI3 2.0.0-beta\n- AdaptiveCards.Rendering.WinUI3 2.1.0-beta\n- AdaptiveCards.Templating 2.0.2\n- Appium.WebDriver 4.4.5\n- Azure.AI.OpenAI 1.0.0-beta.17\n- CommunityToolkit.Common 8.4.0\n- CommunityToolkit.Mvvm 8.4.0\n- CommunityToolkit.WinUI.Animations 8.2.250129-preview2\n- CommunityToolkit.WinUI.Collections 8.2.250129-preview2\n- CommunityToolkit.WinUI.Controls.Primitives 8.2.250129-preview2\n- CommunityToolkit.WinUI.Controls.Segmented 8.2.250129-preview2\n- CommunityToolkit.WinUI.Controls.SettingsControls 8.2.250129-preview2\n- CommunityToolkit.WinUI.Controls.Sizers 8.2.250129-preview2\n- CommunityToolkit.WinUI.Converters 8.2.250129-preview2\n- CommunityToolkit.WinUI.Extensions 8.2.250129-preview2\n- CommunityToolkit.WinUI.UI.Controls.DataGrid 7.1.2\n- CommunityToolkit.WinUI.UI.Controls.Markdown 7.1.2\n- ControlzEx 6.0.0\n- HelixToolkit 2.24.0\n- HelixToolkit.Core.Wpf 2.24.0\n- hyjiacan.pinyin4net 4.1.1\n- Interop.Microsoft.Office.Interop.OneNote 1.1.0.2\n- LazyCache 2.4.0\n- Mages 3.0.0\n- Markdig.Signed 0.34.0\n- MessagePack 3.1.3\n- Microsoft.Bcl.AsyncInterfaces 9.0.4\n- Microsoft.CodeAnalysis.NetAnalyzers 9.0.0\n- Microsoft.Data.Sqlite 9.0.4\n- Microsoft.Diagnostics.Tracing.TraceEvent 3.1.16\n- Microsoft.DotNet.ILCompiler (A)\n- Microsoft.Extensions.DependencyInjection 9.0.4\n- Microsoft.Extensions.Hosting 9.0.4\n- Microsoft.Extensions.Hosting.WindowsServices 9.0.4\n- Microsoft.Extensions.Logging 9.0.4\n- Microsoft.Extensions.Logging.Abstractions 9.0.4\n- Microsoft.NET.ILLink.Tasks (A)\n- Microsoft.SemanticKernel 1.15.0\n- Microsoft.Toolkit.Uwp.Notifications 7.1.2\n- Microsoft.Web.WebView2 1.0.2903.40\n- Microsoft.Win32.SystemEvents 9.0.4\n- Microsoft.Windows.Compatibility 9.0.4\n- Microsoft.Windows.CsWin32 0.2.46-beta\n- Microsoft.Windows.CsWinRT 2.2.0\n- Microsoft.Windows.SDK.BuildTools 10.0.22621.2428\n- Microsoft.WindowsAppSDK 1.6.250205002\n- Microsoft.WindowsPackageManager.ComInterop 1.10.120-preview\n- Microsoft.Xaml.Behaviors.WinUI.Managed 2.0.9\n- Microsoft.Xaml.Behaviors.Wpf 1.1.39\n- ModernWpfUI 0.9.4\n- Moq 4.18.4\n- MSTest 3.8.3\n- NLog.Extensions.Logging 5.3.8\n- NLog.Schema 5.2.8\n- OpenAI 2.0.0\n- ReverseMarkdown 4.1.0\n- ScipBe.Common.Office.OneNote 3.0.1\n- SharpCompress 0.37.2\n- StreamJsonRpc 2.21.69\n- StyleCop.Analyzers 1.2.0-beta.556\n- System.CodeDom 9.0.4\n- System.CommandLine 2.0.0-beta4.22272.1\n- System.ComponentModel.Composition 9.0.4\n- System.Configuration.ConfigurationManager 9.0.4\n- System.Data.OleDb 9.0.4\n- System.Data.SqlClient 4.8.6\n- System.Diagnostics.EventLog 9.0.4\n- System.Diagnostics.PerformanceCounter 9.0.4\n- System.Drawing.Common 9.0.4\n- System.IO.Abstractions 22.0.13\n- System.IO.Abstractions.TestingHelpers 22.0.13\n- System.Management 9.0.4\n- System.Net.Http 4.3.4\n- System.Private.Uri 4.3.2\n- System.Reactive 6.0.1\n- System.Runtime.Caching 9.0.4\n- System.ServiceProcess.ServiceController 9.0.4\n- System.Text.Encoding.CodePages 9.0.4\n- System.Text.Json 9.0.4\n- System.Text.RegularExpressions 4.3.1\n- UnicodeInformation 2.6.0\n- UnitsNet 5.56.0\n- UTF.Unknown 2.5.1\n- WinUIEx 2.2.0\n- WPF-UI 3.0.5\n- WyHash 1.0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Output Directory for Fuzzing Tests in .NET\nDESCRIPTION: Example of the directory structure where fuzzing test job dependencies should be defined, showing the path to the compiled test assemblies.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/Hosts/Hosts.FuzzTests/Fuzz.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPowerToys\\x64\\Debug\\tests\\Hosts.FuzzTests\\net8.0-windows10.0.19041.0\n```\n\n----------------------------------------\n\nTITLE: Key-Value Format for Resource Conversion\nDESCRIPTION: Plain-text key-value format used as an intermediate step when converting XAML resources to RESX format. This format uses simple key=value pairs that can be processed by resgen.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nwox_plugin_calculator_plugin_name=Calculator\nwox_plugin_calculator_plugin_description=Allows to do mathematical calculations.(Try 5*3-2 in Wox)\nwox_plugin_calculator_not_a_number=Not a number (NaN)\n```\n\n----------------------------------------\n\nTITLE: COM Object Creation and Foreground Window Management in Windows C/C++\nDESCRIPTION: Functions for creating COM objects and managing foreground windows. These are used for component object model interactions and window focus control.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Exts/Microsoft.CmdPal.Ext.Apps/NativeMethods.txt#2025-04-15_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nCoCreateInstance\nSetForegroundWindow\nIsIconic\n```\n\n----------------------------------------\n\nTITLE: Checking resources.pri with makepri.exe\nDESCRIPTION: Command line instruction for using makepri.exe to dump the contents of a resources.pri file to verify if localized resources are properly included.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nmakepri.exe dump /if .\\resources.pri\n```\n\n----------------------------------------\n\nTITLE: Installing PowerToys via WinGet - Machine-wide Scope\nDESCRIPTION: PowerShell command to install Microsoft PowerToys with machine-wide scope using the WinGet package manager, making it available for all users on the system.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/README.md#2025-04-15_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install --scope machine Microsoft.PowerToys -s winget\n```\n\n----------------------------------------\n\nTITLE: XAML Resource Format Example for Migration to RESX\nDESCRIPTION: Example of XAML string resources that need to be converted to the RESX format. This shows the original format used in XAML files with string keys and values.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<system:String x:Key=\"wox_plugin_calculator_plugin_name\">Calculator</system:String>\n<system:String x:Key=\"wox_plugin_calculator_plugin_description\">Allows to do mathematical calculations.(Try 5*3-2 in Wox)</system:String>\n<system:String x:Key=\"wox_plugin_calculator_not_a_number\">Not a number (NaN)</system:String>\n```\n\n----------------------------------------\n\nTITLE: Including Resource Files in C++ Projects\nDESCRIPTION: XML configuration that excludes resource files from direct compilation. This ensures the resources are handled by the custom build process rather than the standard compiler.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<None Include=\"Resources.resx\" />\n```\n\n----------------------------------------\n\nTITLE: Window Focus and Activation Management in Windows C/C++\nDESCRIPTION: Functions for setting foreground windows, focus, and active windows. These are used to control which window has user interaction priority.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Exts/Microsoft.CmdPal.Ext.Apps/NativeMethods.txt#2025-04-15_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nSetForegroundWindow\nSetFocus\nSetActiveWindow\n```\n\n----------------------------------------\n\nTITLE: Installing PowerToys via WinGet - User Scope\nDESCRIPTION: PowerShell command to install Microsoft PowerToys with user scope using the WinGet package manager. This is the default installation method when using WinGet.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/README.md#2025-04-15_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Microsoft.PowerToys -s winget\n```\n\n----------------------------------------\n\nTITLE: Viewing Localized Resources in resources.pri File\nDESCRIPTION: Example XML structure showing how localized resources appear in a resources.pri file after using makepri.exe to dump its contents. The snippet shows a named resource with French and English-US language variants.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<NamedResource name=\"GeneralSettings_RunningAsAdminText\" uri=\"ms-resource://f4f787a5-f0ae-47a9-be89-5408b1dd2b47/Resources/GeneralSettings_RunningAsAdminText\">\n    <Candidate qualifiers=\"Language-FR\" type=\"String\">\n        <Value>Running as administrator</Value>\n    </Candidate>\n    <Candidate qualifiers=\"Language-EN-US\" isDefault=\"true\" type=\"String\">\n        <Value>Running as administrator</Value>\n    </Candidate>\n</NamedResource>\n```\n\n----------------------------------------\n\nTITLE: Example List Section with Placeholder Item in Command Palette\nDESCRIPTION: Code snippet showing a ListSection with a single ListItem that has a placeholder title and NoOpCommand. This represents the structure for displaying content in a Command Palette page.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/command-pal-anatomy/command-palette-anatomy.md#2025-04-15_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nnew ListSection()\n            {\n                Title = \"SSH Hosts\",\n                Items = [\n                    new ListItem(new NoOpCommand()) { Title = \"TODO: Implement your extension here\" }\n                ],\n            }\n```\n\n----------------------------------------\n\nTITLE: Shell Stream and String Operations in Windows C/C++\nDESCRIPTION: Functions for creating file streams and loading indirect strings. These are used for file I/O operations and resource string management in shell contexts.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Exts/Microsoft.CmdPal.Ext.Apps/NativeMethods.txt#2025-04-15_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nSHCreateStreamOnFileEx\nCoAllowSetForegroundWindow\nSHCreateStreamOnFileEx\nSHLoadIndirectString\n```\n\n----------------------------------------\n\nTITLE: Windows API Window Management Functions\nDESCRIPTION: List of Windows API functions for managing windows, monitors, DPI, thread interactions, and GUI elements. These functions are commonly used in native Windows applications for window manipulation and system interaction.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/peek/Peek.UI/NativeMethods.txt#2025-04-15_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nMonitorFromWindow\nGetMonitorInfo\nGetDpiForWindow\nGetForegroundWindow\nSetForegroundWindow\nSetActiveWindow\nGetWindowThreadProcessId\nGetCurrentThreadId\nAttachThreadInput\nBringWindowToTop\nShowWindow\nGetWindowTextLength\nFindWindowEx\nSID_STopLevelBrowser\nGetClassName\n_SVGIO\nMONITORINFO\nGetWindowRect\nSET_WINDOW_POS_FLAGS\nSetWindowPos\nGetWindowPlacement\nSetWindowPlacement\nGetGUIThreadInfo\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Component to PowerToys MSI\nDESCRIPTION: XML code for creating a resource component in the Product.wxs file to include localized satellite DLLs in the MSI installer. This needs to be added only after the Localization team has committed the initial LCL files.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/localization.md#2025-04-15_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<Component Id=\"ProjName_$(var.IdSafeLanguage)_Component\" Directory=\"Resource$(var.IdSafeLanguage)ProjNameInstallFolder\">\n    <File Id=\"ProjName_$(var.IdSafeLanguage)_File\" Source=\"$(var.BinX64Dir)modules\\ProjName\\$(var.Language)\\ProjName.resources.dll\" />\n</Component>\n```\n\n----------------------------------------\n\nTITLE: Window Management and Hotkey Registration in C++\nDESCRIPTION: This set of functions is used for registering hotkeys, modifying window properties, and managing window focus. They are crucial for implementing custom window behaviors and keyboard shortcuts.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Microsoft.CmdPal.UI.ViewModels/NativeMethods.txt#2025-04-15_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nRegisterHotKey\nSetWindowLongPtr\nCallWindowProc\nShowWindow\nSetForegroundWindow\nSetFocus\nSetActiveWindow\n```\n\n----------------------------------------\n\nTITLE: Windows API Function Names for Security and Package Management\nDESCRIPTION: A list of Windows API function names and constants used for COM client impersonation, thread token handling, package identification, and folder path retrieval in the PowerToys project.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/extensionsdk/Microsoft.CommandPalette.Extensions.Toolkit/NativeMethods.txt#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCoImpersonateClient\nGetCurrentThread\nOpenThreadToken\nGetPackageFamilyNameFromToken\nCoRevertToSelf\nSHGetKnownFolderPath\nKNOWN_FOLDER_FLAG\nGetCurrentPackageId\n```\n\n----------------------------------------\n\nTITLE: PowerToys URL Mapping Table in Markdown\nDESCRIPTION: A markdown table containing mappings between short URLs and their corresponding full URLs for PowerToys resources, including store links, documentation, images, and support pages.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/akaLinks.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| ShortUrl | TargetUrl |\n|----------|----------|\n| getpowertoys | ms-windows-store://pdp/?productid=XP89DCGQ3K6VLD |\n| installpowertoys | https://github.com/microsoft/PowerToys/releases/latest |\n| powertoys-license | https://github.com/microsoft/PowerToys/blob/main/LICENSE |\n| powertoys | https://github.com/microsoft/PowerToys |\n| PowerToysAppCompat | https://github.com/microsoft/PowerToys/wiki/Application-Compatibility |\n| powerToysCannotRemapKeys | https://learn.microsoft.com/windows/powertoys/keyboard-manager#keys-that-cannot-be-remapped |\n| powerToysColorPickerImageSmall | https://github.com/microsoft/PowerToys/wiki/images/overview/ColorPicker_small.png |\n| powerToysColorPickerSettingImage | https://raw.githubusercontent.com/microsoft/PowerToys/main/doc/images/overview/ColorPicker_large.png |\n| powertoysDetectedElevatedHelp | https://learn.microsoft.com/windows/powertoys/administrator |\n| powertoys-docs | https://learn.microsoft.com/windows/powertoys |\n| powerToysFancyZoneImageSmall | https://github.com/microsoft/PowerToys/wiki/images/overview/FancyZones_small.png |\n| powerToysFancyZoneSettingImage | https://raw.githubusercontent.com/microsoft/PowerToys/main/doc/images/overview/FancyZones_large.png |\n| powerToysGiveFeedback | https://github.com/microsoft/PowerToys/issues |\n| powerToysImageResizerImageSmall | https://github.com/microsoft/PowerToys/wiki/images/overview/ImageResizer_small.png |\n| powerToysImageResizerSettingImage | https://raw.githubusercontent.com/microsoft/PowerToys/main/doc/images/overview/ImageResizer_large.png |\n| powerToysKBMImageSmall | https://github.com/microsoft/PowerToys/wiki/images/overview/KBM_small.png |\n| powerToysKBMSettingImage | https://raw.githubusercontent.com/microsoft/PowerToys/main/doc/images/overview/KBM_large.png |\n| PowerToysOverview | https://learn.microsoft.com/windows/powertoys/ |\n| PowerToysOverview_ColorPicker | https://learn.microsoft.com/windows/powertoys/color-picker |\n| PowerToysOverview_FancyZones | https://learn.microsoft.com/windows/powertoys/fancyzones |\n| PowerToysOverview_FileExplorerAddOns | https://learn.microsoft.com/windows/powertoys/file-explorer |\n| PowerToysOverview_ImageResizer | https://learn.microsoft.com/windows/powertoys/image-resizer |\n| PowerToysOverview_KeyboardManager | https://learn.microsoft.com/windows/powertoys/keyboard-manager |\n| PowerToysOverview_MouseUtilities | https://learn.microsoft.com/windows/powertoys/mouse-utilities |\n| PowerToysOverview_PowerRename | https://learn.microsoft.com/windows/powertoys/powerrename |\n| PowerToysOverview_PowerToysRun | https://learn.microsoft.com/windows/powertoys/run |\n| PowerToysOverview_ShortcutGuide | https://learn.microsoft.com/windows/powertoys/shortcut-guide |\n| powerToysPowerLauncherImageSmall | https://github.com/microsoft/PowerToys/wiki/images/overview/PowerLauncher_small.png |\n| powerToysPowerLauncherSettingImage | https://raw.githubusercontent.com/microsoft/PowerToys/main/doc/images/overview/PowerLauncher_large.png |\n| powerToysPowerPreviewImageSmall | https://github.com/microsoft/PowerToys/wiki/images/overview/PowerPreview_small.png |\n| powerToysPowerPreviewSettingImage | https://raw.githubusercontent.com/microsoft/PowerToys/main/doc/images/overview/PowerPreview_large.png |\n| powerToysPowerRenameImageSmall | https://github.com/microsoft/PowerToys/wiki/images/overview/PowerRename_small.png |\n| powerToysPowerRenameSettingImage | https://raw.githubusercontent.com/microsoft/PowerToys/main/doc/images/overview/PowerRename_large.png |\n| powerToysPTImageSmall | https://github.com/microsoft/PowerToys/wiki/images/overview/PT_small.png |\n| powerToysPTSettingImage | https://raw.githubusercontent.com/microsoft/PowerToys/main/doc/images/overview/PT_large.png |\n| powerToysReportBug | https://github.com/microsoft/PowerToys/issues/new?assignees=&labels=Issue-Bug%2CTriage-Needed&template=bug_report.yml&title= |\n| powerToysRequestFeature | https://github.com/microsoft/PowerToys/issues/new?assignees=&labels=&template=feature_request.md&title= |\n| powerToysShortcutGuideImageSmall | https://github.com/microsoft/PowerToys/wiki/images/overview/ShortcutGuide_small.png |\n| powerToysShortcutGuideSettingImage | https://raw.githubusercontent.com/microsoft/PowerToys/main/doc/images/overview/ShortcutGuide_large.png |\n| powertoyswiki | https://github.com/microsoft/PowerToys/wiki |\n```\n\n----------------------------------------\n\nTITLE: Windows COM Marshaling and Stream Functions Reference\nDESCRIPTION: Core COM functions used for creating COM instances, marshaling interfaces between processes, and working with global memory streams. These functions are essential for COM interop and cross-process communication in Windows.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/exts/Microsoft.CmdPal.Ext.WinGet/NativeMethods.txt#2025-04-15_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nCoCreateInstance\nCoMarshalInterface\nCoUnmarshalInterface\nCreateStreamOnHGlobal\nMSHCTX\nMSHLFLAGS\n```\n\n----------------------------------------\n\nTITLE: Monitor Information Retrieval in C++\nDESCRIPTION: These functions are used to get information about the monitor on which a window is displayed. They are useful for multi-monitor setups and screen-aware applications.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Microsoft.CmdPal.UI.ViewModels/NativeMethods.txt#2025-04-15_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nMonitorFromWindow\nGetMonitorInfo\n```\n\n----------------------------------------\n\nTITLE: PowerToys Keyboard Manager Events Table\nDESCRIPTION: HTML table documenting telemetry events for the Keyboard Manager feature, including configuration loading, remap counts, and usage tracking events.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/DATA_AND_PRIVACY.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Keyboard Manager\n<table style=\"width:100%\">\n  <tr>\n    <th>Event Name</th>\n    <th>Description</th>\n  </tr>\n  <!-- Event entries -->\n</table>\n```\n\n----------------------------------------\n\nTITLE: Mozilla Public License v1.1 for UTF.Unknown Package\nDESCRIPTION: The full text of the Mozilla Public License Version 1.1 that governs the UTF.Unknown NuGet package used for encoding detection. The license defines terms for source code distribution, modifications, and intellectual property considerations.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/NOTICE.md#2025-04-15_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                          MOZILLA PUBLIC LICENSE\n                                Version 1.1\n\n                              ---------------\n\n1. Definitions.\n\n     1.0.1. \"Commercial Use\" means distribution or otherwise making the\n     Covered Code available to a third party.\n\n     1.1. \"Contributor\" means each entity that creates or contributes to\n     the creation of Modifications.\n\n     1.2. \"Contributor Version\" means the combination of the Original\n     Code, prior Modifications used by a Contributor, and the Modifications\n     made by that particular Contributor.\n\n     1.3. \"Covered Code\" means the Original Code or Modifications or the\n     combination of the Original Code and Modifications, in each case\n     including portions thereof.\n\n     1.4. \"Electronic Distribution Mechanism\" means a mechanism generally\n     accepted in the software development community for the electronic\n     transfer of data.\n\n     1.5. \"Executable\" means Covered Code in any form other than Source\n     Code.\n\n     1.6. \"Initial Developer\" means the individual or entity identified\n     as the Initial Developer in the Source Code notice required by Exhibit\n     A.\n\n     1.7. \"Larger Work\" means a work which combines Covered Code or\n     portions thereof with code not governed by the terms of this License.\n\n     1.8. \"License\" means this document.\n\n     1.8.1. \"Licensable\" means having the right to grant, to the maximum\n     extent possible, whether at the time of the initial grant or\n     subsequently acquired, any and all of the rights conveyed herein.\n\n     1.9. \"Modifications\" means any addition to or deletion from the\n     substance or structure of either the Original Code or any previous\n     Modifications. When Covered Code is released as a series of files, a\n     Modification is:\n          A. Any addition to or deletion from the contents of a file\n          containing Original Code or previous Modifications.\n\n          B. Any new file that contains any part of the Original Code or\n          previous Modifications.\n\n     1.10. \"Original Code\" means Source Code of computer software code\n     which is described in the Source Code notice required by Exhibit A as\n     Original Code, and which, at the time of its release under this\n     License is not already Covered Code governed by this License.\n\n     1.10.1. \"Patent Claims\" means any patent claim(s), now owned or\n     hereafter acquired, including without limitation,  method, process,\n     and apparatus claims, in any patent Licensable by grantor.\n\n     1.11. \"Source Code\" means the preferred form of the Covered Code for\n     making modifications to it, including all modules it contains, plus\n     any associated interface definition files, scripts used to control\n     compilation and installation of an Executable, or source code\n     differential comparisons against either the Original Code or another\n     well known, available Covered Code of the Contributor's choice. The\n     Source Code can be in a compressed or archival form, provided the\n     appropriate decompression or de-archiving software is widely available\n     for no charge.\n\n     1.12. \"You\" (or \"Your\")  means an individual or a legal entity\n     exercising rights under, and complying with all of the terms of, this\n     License or a future version of this License issued under Section 6.1.\n     For legal entities, \"You\" includes any entity which controls, is\n     controlled by, or is under common control with You. For purposes of\n     this definition, \"control\" means (a) the power, direct or indirect,\n     to cause the direction or management of such entity, whether by\n     contract or otherwise, or (b) ownership of more than fifty percent\n     (50%) of the outstanding shares or beneficial ownership of such\n     entity.\n\n2. Source Code License.\n\n     2.1. The Initial Developer Grant.\n     The Initial Developer hereby grants You a world-wide, royalty-free,\n     non-exclusive license, subject to third party intellectual property\n     claims:\n          (a)  under intellectual property rights (other than patent or\n          trademark) Licensable by Initial Developer to use, reproduce,\n          modify, display, perform, sublicense and distribute the Original\n          Code (or portions thereof) with or without Modifications, and/or\n          as part of a Larger Work; and\n\n          (b) under Patents Claims infringed by the making, using or\n          selling of Original Code, to make, have made, use, practice,\n          sell, and offer for sale, and/or otherwise dispose of the\n          Original Code (or portions thereof).\n\n          (c) the licenses granted in this Section 2.1(a) and (b) are\n          effective on the date Initial Developer first distributes\n          Original Code under the terms of this License.\n\n          (d) Notwithstanding Section 2.1(b) above, no patent license is\n          granted: 1) for code that You delete from the Original Code; 2)\n          separate from the Original Code;  or 3) for infringements caused\n          by: i) the modification of the Original Code or ii) the\n          combination of the Original Code with other software or devices.\n\n     2.2. Contributor Grant.\n     Subject to third party intellectual property claims, each Contributor\n     hereby grants You a world-wide, royalty-free, non-exclusive license\n\n          (a)  under intellectual property rights (other than patent or\n          trademark) Licensable by Contributor, to use, reproduce, modify,\n          display, perform, sublicense and distribute the Modifications\n          created by such Contributor (or portions thereof) either on an\n          unmodified basis, with other Modifications, as Covered Code\n          and/or as part of a Larger Work; and\n\n          (b) under Patent Claims infringed by the making, using, or\n          selling of  Modifications made by that Contributor either alone\n          and/or in combination with its Contributor Version (or portions\n          of such combination), to make, use, sell, offer for sale, have\n          made, and/or otherwise dispose of: 1) Modifications made by that\n          Contributor (or portions thereof); and 2) the combination of\n          Modifications made by that Contributor with its Contributor\n          Version (or portions of such combination).\n\n          (c) the licenses granted in Sections 2.2(a) and 2.2(b) are\n          effective on the date Contributor first makes Commercial Use of\n          the Covered Code.\n\n          (d)    Notwithstanding Section 2.2(b) above, no patent license is\n          granted: 1) for any code that Contributor has deleted from the\n          Contributor Version; 2)  separate from the Contributor Version;\n          3)  for infringements caused by: i) third party modifications of\n          Contributor Version or ii)  the combination of Modifications made\n          by that Contributor with other software  (except as part of the\n          Contributor Version) or other devices; or 4) under Patent Claims\n          infringed by Covered Code in the absence of Modifications made by\n          that Contributor.\n\n3. Distribution Obligations.\n\n     3.1. Application of License.\n     The Modifications which You create or to which You contribute are\n     governed by the terms of this License, including without limitation\n     Section 2.2. The Source Code version of Covered Code may be\n     distributed only under the terms of this License or a future version\n     of this License released under Section 6.1, and You must include a\n     copy of this License with every copy of the Source Code You\n     distribute. You may not offer or impose any terms on any Source Code\n     version that alters or restricts the applicable version of this\n     License or the recipients' rights hereunder. However, You may include\n     an additional document offering the additional rights described in\n     Section 3.5.\n\n     3.2. Availability of Source Code.\n     Any Modification which You create or to which You contribute must be\n     made available in Source Code form under the terms of this License\n     either on the same media as an Executable version or via an accepted\n     Electronic Distribution Mechanism to anyone to whom you made an\n     Executable version available; and if made available via Electronic\n     Distribution Mechanism, must remain available for at least twelve (12)\n     months after the date it initially became available, or at least six\n     (6) months after a subsequent version of that particular Modification\n     has been made available to such recipients. You are responsible for\n     ensuring that the Source Code version remains available even if the\n     Electronic Distribution Mechanism is maintained by a third party.\n\n     3.3. Description of Modifications.\n     You must cause all Covered Code to which You contribute to contain a\n     file documenting the changes You made to create that Covered Code and\n     the date of any change. You must include a prominent statement that\n     the Modification is derived, directly or indirectly, from Original\n     Code provided by the Initial Developer and including the name of the\n     Initial Developer in (a) the Source Code, and (b) in any notice in an\n     Executable version or related documentation in which You describe the\n     origin or ownership of the Covered Code.\n\n     3.4. Intellectual Property Matters\n          (a) Third Party Claims.\n          If Contributor has knowledge that a license under a third party's\n          intellectual property rights is required to exercise the rights\n          granted by such Contributor under Sections 2.1 or 2.2,\n          Contributor must include a text file with the Source Code\n          distribution titled \"LEGAL\" which describes the claim and the\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Formatting Keyboard Shortcut\nDESCRIPTION: Keyboard shortcut command to format the current document in Visual Studio using ClangFormat\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/style.md#2025-04-15_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCTRL+K CTRL+D\n```\n\n----------------------------------------\n\nTITLE: Window Management and Hotkey Registration in Windows C/C++\nDESCRIPTION: Functions for registering hotkeys, modifying window properties, and manipulating window states. These are used for custom keyboard shortcuts and window behavior control.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/Exts/Microsoft.CmdPal.Ext.Apps/NativeMethods.txt#2025-04-15_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nRegisterHotKey\nSetWindowLongPtr\nCallWindowProc\nShowWindow\n```\n\n----------------------------------------\n\nTITLE: Referencing PowerToys Run Process in Markdown\nDESCRIPTION: This snippet identifies the process associated with PowerToys Run, which is crucial for attaching the debugger.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/debugging.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`PowerToys Run` is a single exe file associated with `launcher.exe` process and debugger should be attached to this process.\n```\n\n----------------------------------------\n\nTITLE: Example Output of Monitor Info Report Tool\nDESCRIPTION: Shows the format of the log file generated by the Monitor Report Tool. The output includes monitor metrics, display device information, and monitor enumeration status.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/tools/monitor-info-report.md#2025-04-15_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGetSystemMetrics = 2\nGetMonitorInfo OK\nEnumDisplayDevices OK:\n        DeviceID = \\\\?\\DISPLAY#VSCBD34#5&25664547&0&UID4355#{e6f07b5f-ee97-4a90-b076-33f57bf4eaa7}\n        DeviceKey = \\Registry\\Machine\\System\\CurrentControlSet\\Control\\Class\\{4d36e96e-e325-11ce-bfc1-08002be10318}\\0002\n        DeviceName = \\\\.\\DISPLAY1\\Monitor0\n        DeviceString = Generic PnP Monitor\nGetMonitorInfo OK\nEnumDisplayDevices OK:\n        DeviceID = \\\\?\\DISPLAY#ENC2682#5&25664547&0&UID4357#{e6f07b5f-ee97-4a90-b076-33f57bf4eaa7}\n        DeviceKey = \\Registry\\Machine\\System\\CurrentControlSet\\Control\\Class\\{4d36e96e-e325-11ce-bfc1-08002be10318}\\0003\n        DeviceName = \\\\.\\DISPLAY2\\Monitor0\n        DeviceString = Generic PnP Monitor\nEnumDisplayMonitors OK\n```\n\n----------------------------------------\n\nTITLE: Navigating FancyZones DrawLayoutTest Tool in Markdown\nDESCRIPTION: Describes the location of the DrawLayoutTest tool within the PowerToys project structure and outlines its primary functionalities, including toggling zone appearance and exiting the application.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/tools/fancyzones-draw-layout-test.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [FancyZones_DrawLayoutTest](/tools/FancyZones_DrawLayoutTest/)\n\nThis test tool is created in order to debug issues related to the drawing of zone layout on screen.\n\nCurrently, only column layout is supported with modifiable number of zones. Pressing **w** key toggles zone appearance on primary screen (multi monitor support not yet in place). Pressing **q** key exits application.\n\nApplication is DPI unaware which means that application does not scale for DPI changes and it always assumes to have a scale factor of 100% (96 DPI). Scaling will be automatically performed by the system.\n```\n\n----------------------------------------\n\nTITLE: Referencing Development Environment Setup in Markdown\nDESCRIPTION: This snippet provides a link to the instructions for setting up the PowerToys development environment, which is a prerequisite for debugging.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/debugging.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSetup development environment for PowerToys by following instruction [here.](https://github.com/microsoft/PowerToys/tree/main/doc/devdocs#prerequisites-for-compiling-powertoys)\n```\n\n----------------------------------------\n\nTITLE: Starting PowerToys Telemetry Trace Capture with WPR\nDESCRIPTION: Command to initiate telemetry trace capture using Windows Performance Recorder with the PowerToys trace profile\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/common/Telemetry/readme.md#2025-04-15_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nwpr.exe -start \"PowerToys.wprp\"\n```\n\n----------------------------------------\n\nTITLE: PowerToys Mouse Jump Events Table\nDESCRIPTION: HTML table documenting telemetry events for the Mouse Jump feature, including enabling, invocation, and cursor teleportation events.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/DATA_AND_PRIVACY.md#2025-04-15_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Mouse Jump\n<table style=\"width:100%\">\n  <tr>\n    <th>Event Name</th>\n    <th>Description</th>\n  </tr>\n  <!-- Event entries -->\n</table>\n```\n\n----------------------------------------\n\nTITLE: Listing Bug Report Tool File Contents\nDESCRIPTION: This snippet enumerates the files included in the bug report generated by the PowerToys Bug Report Tool. It details various log files, system information, and configuration data collected to assist in troubleshooting.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/tools/bug-report-tool.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* Settings files of the modules.\n* Logs of the modules and the runner.\n* Update log files.\n* `compatibility-tab-info.txt` - Information about compatibility settings set for certain PowerToys executables both in the user and system scope.\n* `context-menu-packages.txt` - Information about the packages that are registered for the new Windows 11 context menu.\n* `dotnet-installation-info.txt` - Information about the installed .NET versions.\n* `EventViewer-*.xml` - These files contain event logs from the Windows Event Viewer for the executable specified in the file name.\n* `gpo-configuration-info.txt` - Information about the configured GPO.\n* `installationFolderStructure.txt` - Information about the folder structure of the installation. All lines with files have the following structure: `FileName Version MD5Hash`.\n* `last_version_run.json` - Information about the last version of PowerToys that was run.\n* `log_settings.json` - Information about the log level settings.\n* `monitor-report-info.txt` - Information about the monitors connected to the system. This file is created by the monitor info report tool.\n* `oobe_settings.json` - Information about the OOBE settings.\n* `registry-report-info.txt` - Information about the registry keys that are used by PowerToys.\n* `settings_placement.json` - Information about the placement of the settings window.\n* `settings-telemetry.json` - Information about the last time telemetry data was sent.\n* `UpdateState.json` - Information about the last update check and the current status of the update download.\n* `windows-settings.txt` - Information about the Windows language settings.\n* `windows-version.txt` - Information about the Windows version.\n```\n\n----------------------------------------\n\nTITLE: Configuring Download Patterns in OneFuzz Pipeline for PowerToys\nDESCRIPTION: YAML configuration example for the job-fuzz.yml pipeline file, showing how to set up artifact download patterns to match a specific fuzzing test project.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/Hosts/Hosts.FuzzTests/Fuzz.md#2025-04-15_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n - download: current\n        displayName: Download artifacts\n        artifact: $(ArtifactName)\n        patterns: |-\n          **/tests/Hosts.FuzzTests/**\n```\n\n----------------------------------------\n\nTITLE: PowerShell XAML Styling Command\nDESCRIPTION: Command to apply XAML styling using PowerShell script\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/style.md#2025-04-15_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\.pipelines\\applyXamlStyling.ps1 -Main\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Image Resizer Documentation\nDESCRIPTION: Markdown link syntax directing users to the official PowerToys Image Resizer documentation overview page on Microsoft's website.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/imageresizer/README.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Image Resizer Overview](https://aka.ms/PowerToysOverview_ImageResizer)\n```\n\n----------------------------------------\n\nTITLE: Embedding Image in Markdown using HTML Tag\nDESCRIPTION: HTML image tag embedded within a markdown file that references a local image file named 'a.jpg' in the same directory.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/previewpane/UnitTests-MarkdownPreviewHandler/HelperFiles/MarkdownWithHTMLImageTag.txt#2025-04-15_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"./a.jpg\" \\>\n```\n\n----------------------------------------\n\nTITLE: PowerToys Mouse Highlighter Events Table\nDESCRIPTION: HTML table documenting telemetry events for the Mouse Highlighter feature, tracking enabling and session starts.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/DATA_AND_PRIVACY.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Mouse Highlighter\n<table style=\"width:100%\">\n  <tr>\n    <th>Event Name</th>\n    <th>Description</th>\n  </tr>\n  <!-- Event entries -->\n</table>\n```\n\n----------------------------------------\n\nTITLE: ClangFormat Path Reference\nDESCRIPTION: Environment variable path reference for ClangFormat executable in Visual Studio\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/style.md#2025-04-15_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n%VCINSTALLDIR%\\Tools\\Llvm\\bin\\\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Alert in HTML Script Tag\nDESCRIPTION: A simple script that creates an alert dialog with the message 'hello'. This is a common example used to demonstrate Cross-Site Scripting (XSS) vulnerabilities in web applications.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/previewpane/UnitTests-MarkdownPreviewHandler/HelperFiles/MarkdownWithscript.txt#2025-04-15_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>alert(\"hello\")</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Service State and Time Constants in Python\nDESCRIPTION: Defines variables for tracking service error messages and initializes time-related constants including date range boundaries and Unix epoch reference. Uses boolean flag for error message state tracking.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/MouseWithoutBorders/MouseWithoutBorders.UnitTests/Core/Logger.PrivateDump.expected.txt#2025-04-15_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nshownErrMessage = False\nlastStartServiceTime = ????????????\n--_dateData = ????????????\n--MinValue = 01/01/0001 00:00:00\n--MaxValue = 31/12/9999 23:59:59\n--UnixEpoch = 01/01/1970 00:00:00\n```\n\n----------------------------------------\n\nTITLE: Installing PowerToys with Scoop in PowerShell\nDESCRIPTION: This command installs Microsoft PowerToys using the Scoop package manager. Users should run this from either a command line or PowerShell interface.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/unofficialInstallMethods.md#2025-04-15_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nscoop install powertoys\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Command Palette in Markdown\nDESCRIPTION: Defines the default keyboard shortcut for launching the Command Palette using Markdown syntax.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/README.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>Win+Alt+Space</kbd>\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Issue Page with Markdown Content in C#\nDESCRIPTION: This class demonstrates how to create a GitHub issue page using the Command Palette Extensions Toolkit. It constructs a page with issue metadata and displays the issue body as Markdown content.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/cmdpal/doc/initial-sdk-spec/initial-sdk-spec.md#2025-04-15_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\nclass GitHubIssue {\n    string Title;\n    string Url;\n    string Body;\n    string Author;\n    string[] Tags;\n    string[] AssignedTo;\n}\nclass GithubIssuePage: Microsoft.CommandPalette.Extensions.Toolkit.ContentPage {\n    private readonly MarkdownContent issueBody;\n    public GithubIssuePage(GithubIssue issue)\n    {\n        Commands = [ new CommandContextItem(new Microsoft.CommandPalette.Extensions.Toolkit.OpenUrlCommand(issue.Url)) ];\n        Details = new Details(){\n            Title = \"\",\n            Body = \"\",\n            Metadata = [\n                new Microsoft.CommandPalette.Extensions.Toolkit.DetailsTags(){\n                    Key = \"Author\",\n                    Tags = [new Tag(issue.Author)]\n                },\n                new Microsoft.CommandPalette.Extensions.Toolkit.DetailsTags(){\n                    Key = \"Assigned To\",\n                    Tags = issue.AssignedTo.Select((user) => new Tag(user)).ToArray()\n                },\n                new Microsoft.CommandPalette.Extensions.Toolkit.DetailsTags(){\n                    Key = \"Tags\",\n                    Tags = issue.Tags.Select((tag) => new Tag(tag)).ToArray()\n                }\n            ]\n        };\n\n        issueBody = new MarkdownContent(issue.Body);\n    }\n\n    public override IContent[] GetContent() => [issueBody];\n}\n```\n\n----------------------------------------\n\nTITLE: PowerToys Event Documentation Table Structure\nDESCRIPTION: HTML table structure used consistently throughout the document to display PowerToys event names and their descriptions. Each table represents a different PowerToys module.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/DATA_AND_PRIVACY.md#2025-04-15_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table style=\"width:100%\">\n  <tr>\n    <th>Event Name</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>Microsoft.PowerToys.[EventName]</td>\n    <td>[Event Description]</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Displaying Mozilla Public License Version 1.1 for UTF.Unknown Package\nDESCRIPTION: This snippet shows the full text of the Mozilla Public License Version 1.1 that applies to the UTF.Unknown package used in PowerToys for encoding detection. It defines terms like Commercial Use, Contributor, Covered Code, and outlines the rights and responsibilities of users and contributors.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/NOTICE.md#2025-04-15_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n                          MOZILLA PUBLIC LICENSE\n                                Version 1.1\n\n                              ---------------\n\n1. Definitions.\n\n     1.0.1. \"Commercial Use\" means distribution or otherwise making the\n     Covered Code available to a third party.\n\n     1.1. \"Contributor\" means each entity that creates or contributes to\n     the creation of Modifications.\n\n     1.2. \"Contributor Version\" means the combination of the Original\n     Code, prior Modifications used by a Contributor, and the Modifications\n     made by that particular Contributor.\n\n     1.3. \"Covered Code\" means the Original Code or Modifications or the\n     combination of the Original Code and Modifications, in each case\n     including portions thereof.\n\n     1.4. \"Electronic Distribution Mechanism\" means a mechanism generally\n     accepted in the software development community for the electronic\n     transfer of data.\n\n     1.5. \"Executable\" means Covered Code in any form other than Source\n     Code.\n\n     1.6. \"Initial Developer\" means the individual or entity identified\n     as the Initial Developer in the Source Code notice required by Exhibit\n     A.\n\n     1.7. \"Larger Work\" means a work which combines Covered Code or\n     portions thereof with code not governed by the terms of this License.\n\n     1.8. \"License\" means this document.\n\n     1.8.1. \"Licensable\" means having the right to grant, to the maximum\n     extent possible, whether at the time of the initial grant or\n     subsequently acquired, any and all of the rights conveyed herein.\n\n     1.9. \"Modifications\" means any addition to or deletion from the\n     substance or structure of either the Original Code or any previous\n     Modifications. When Covered Code is released as a series of files, a\n     Modification is:\n          A. Any addition to or deletion from the contents of a file\n          containing Original Code or previous Modifications.\n\n          B. Any new file that contains any part of the Original Code or\n          previous Modifications.\n\n     1.10. \"Original Code\" means Source Code of computer software code\n     which is described in the Source Code notice required by Exhibit A as\n     Original Code, and which, at the time of its release under this\n     License is not already Covered Code governed by this License.\n\n     1.10.1. \"Patent Claims\" means any patent claim(s), now owned or\n     hereafter acquired, including without limitation,  method, process,\n     and apparatus claims, in any patent Licensable by grantor.\n\n     1.11. \"Source Code\" means the preferred form of the Covered Code for\n     making modifications to it, including all modules it contains, plus\n     any associated interface definition files, scripts used to control\n     compilation and installation of an Executable, or source code\n     differential comparisons against either the Original Code or another\n     well known, available Covered Code of the Contributor's choice. The\n     Source Code can be in a compressed or archival form, provided the\n     appropriate decompression or de-archiving software is widely available\n     for no charge.\n\n     1.12. \"You\" (or \"Your\")  means an individual or a legal entity\n     exercising rights under, and complying with all of the terms of, this\n     License or a future version of this License issued under Section 6.1.\n     For legal entities, \"You\" includes any entity which controls, is\n     controlled by, or is under common control with You. For purposes of\n     this definition, \"control\" means (a) the power, direct or indirect,\n     to cause the direction or management of such entity, whether by\n     contract or otherwise, or (b) ownership of more than fifty percent\n     (50%) of the outstanding shares or beneficial ownership of such\n     entity.\n\n2. Source Code License.\n\n     2.1. The Initial Developer Grant.\n     The Initial Developer hereby grants You a world-wide, royalty-free,\n     non-exclusive license, subject to third party intellectual property\n     claims:\n          (a)  under intellectual property rights (other than patent or\n          trademark) Licensable by Initial Developer to use, reproduce,\n          modify, display, perform, sublicense and distribute the Original\n          Code (or portions thereof) with or without Modifications, and/or\n          as part of a Larger Work; and\n\n          (b) under Patents Claims infringed by the making, using or\n          selling of Original Code, to make, have made, use, practice,\n          sell, and offer for sale, and/or otherwise dispose of the\n          Original Code (or portions thereof).\n\n          (c) the licenses granted in this Section 2.1(a) and (b) are\n          effective on the date Initial Developer first distributes\n          Original Code under the terms of this License.\n\n          (d) Notwithstanding Section 2.1(b) above, no patent license is\n          granted: 1) for code that You delete from the Original Code; 2)\n          separate from the Original Code;  or 3) for infringements caused\n          by: i) the modification of the Original Code or ii) the\n          combination of the Original Code with other software or devices.\n\n     2.2. Contributor Grant.\n     Subject to third party intellectual property claims, each Contributor\n     hereby grants You a world-wide, royalty-free, non-exclusive license\n\n          (a)  under intellectual property rights (other than patent or\n          trademark) Licensable by Contributor, to use, reproduce, modify,\n          display, perform, sublicense and distribute the Modifications\n          created by such Contributor (or portions thereof) either on an\n          unmodified basis, with other Modifications, as Covered Code\n          and/or as part of a Larger Work; and\n\n          (b) under Patent Claims infringed by the making, using, or\n          selling of  Modifications made by that Contributor either alone\n          and/or in combination with its Contributor Version (or portions\n          of such combination), to make, use, sell, offer for sale, have\n          made, and/or otherwise dispose of: 1) Modifications made by that\n          Contributor (or portions thereof); and 2) the combination of\n          Modifications made by that Contributor with its Contributor\n          Version (or portions of such combination).\n\n          (c) the licenses granted in Sections 2.2(a) and 2.2(b) are\n          effective on the date Contributor first makes Commercial Use of\n          the Covered Code.\n\n          (d)    Notwithstanding Section 2.2(b) above, no patent license is\n          granted: 1) for any code that Contributor has deleted from the\n          Contributor Version; 2)  separate from the Contributor Version;\n          3)  for infringements caused by: i) third party modifications of\n          Contributor Version or ii)  the combination of Modifications made\n          by that Contributor with other software  (except as part of the\n          Contributor Version) or other devices; or 4) under Patent Claims\n          infringed by Covered Code in the absence of Modifications made by\n          that Contributor.\n\n3. Distribution Obligations.\n\n     3.1. Application of License.\n     The Modifications which You create or to which You contribute are\n     governed by the terms of this License, including without limitation\n     Section 2.2. The Source Code version of Covered Code may be\n     distributed only under the terms of this License or a future version\n     of this License released under Section 6.1, and You must include a\n     copy of this License with every copy of the Source Code You\n     distribute. You may not offer or impose any terms on any Source Code\n     version that alters or restricts the applicable version of this\n     License or the recipients' rights hereunder. However, You may include\n     an additional document offering the additional rights described in\n     Section 3.5.\n\n     3.2. Availability of Source Code.\n     Any Modification which You create or to which You contribute must be\n     made available in Source Code form under the terms of this License\n     either on the same media as an Executable version or via an accepted\n     Electronic Distribution Mechanism to anyone to whom you made an\n     Executable version available; and if made available via Electronic\n     Distribution Mechanism, must remain available for at least twelve (12)\n     months after the date it initially became available, or at least six\n     (6) months after a subsequent version of that particular Modification\n     has been made available to such recipients. You are responsible for\n     ensuring that the Source Code version remains available even if the\n     Electronic Distribution Mechanism is maintained by a third party.\n\n     3.3. Description of Modifications.\n     You must cause all Covered Code to which You contribute to contain a\n     file documenting the changes You made to create that Covered Code and\n     the date of any change. You must include a prominent statement that\n     the Modification is derived, directly or indirectly, from Original\n     Code provided by the Initial Developer and including the name of the\n     Initial Developer in (a) the Source Code, and (b) in any notice in an\n     Executable version or related documentation in which You describe the\n     origin or ownership of the Covered Code.\n\n     3.4. Intellectual Property Matters\n          (a) Third Party Claims.\n          If Contributor has knowledge that a license under a third party's\n          intellectual property rights is required to exercise the rights\n          granted by such Contributor under Sections 2.1 or 2.2,\n          Contributor must include a text file with the Source Code\n          distribution titled \"LEGAL\" which describes the claim and the\n```\n\n----------------------------------------\n\nTITLE: WyHash Public Domain License Declaration\nDESCRIPTION: The license text for the WyHash package used in the Command Palette utility for calculating stable string hashes. This is a public domain dedication that allows unrestricted use of the software.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/NOTICE.md#2025-04-15_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n```\n\n----------------------------------------\n\nTITLE: PowerToys Event Documentation Table Structure\nDESCRIPTION: HTML table template used for documenting PowerToys events, showing event names and their descriptions.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/DATA_AND_PRIVACY.md#2025-04-15_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<table style=\\\"width:100%\\\">\\n  <tr>\\n    <th>Event Name</th>\\n    <th>Description</th>\\n  </tr>\\n  <tr>\\n    <td>x</td>\\n    <td>x</td>\\n  </tr>\\n  <tr>\\n    <td>x</td>\\n    <td>x</td>\\n  </tr>\\n  <tr>\\n    <td>x</td>\\n    <td>x</td>\\n  </tr>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining PluginID in PowerToys Run Plugin Main Class\nDESCRIPTION: Example of how to properly implement the required PluginID static property in the Main class of a PowerToys Run plugin. The ID must match the one specified in the plugin.json file.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/modules/launcher/new-plugin-checklist.md#2025-04-15_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static string PluginID => \"xxxxxxx\"; // The part xxxxxxx stands for the plugin ID.\n```\n\n----------------------------------------\n\nTITLE: PowerToys Admin Documentation Link in Markdown\nDESCRIPTION: Markdown link redirecting to the official Microsoft documentation about PowerToys administrator privileges and elevation scenarios.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/run-as-admin-detection.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[PowerToys and running as Administrator](https://aka.ms/powertoysDetectedElevatedHelp)\n```\n\n----------------------------------------\n\nTITLE: Stopping PowerToys Telemetry Trace Capture\nDESCRIPTION: Command to stop the telemetry trace capture and save results to a Trace.etl file\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/common/Telemetry/readme.md#2025-04-15_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nwpr.exe -Stop \"Trace.etl\"\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardManager UI Test in PowerToys\nDESCRIPTION: Complete C# class example for a UI test of the KeyboardManager module in PowerToys. It demonstrates opening the editor, maximizing the window, adding a key remapping, and returning to settings.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/UITests.md#2025-04-15_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.PowerToys.UITest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace UITests_KeyboardManager\n{\n    [TestClass]\n    public class RunKeyboardManagerUITests : UITestBase\n    {\n        [TestMethod]\n        public void OpenKeyboardManagerEditor()\n        {\n            // Open KeyboardManagerEditor\n            this.Session.Find<Button>(By.Name(\"Remap a key\")).Click();\n            this.Session.Attach(\"Remap keys\");\n\n            // Maximize window\n            var window = Session.Find<Window>(By.Name(\"Remap keys\")).Maximize();\n\n            // Add Key Remapping\n            this.Session.Find<Button>(By.Name(\"Add key remapping\")).Click();\n            window.Close();\n\n            // Back to Settings\n            this.Session.Attach(PowerToysModule.PowerToysSettings);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Shell Enums and Interfaces\nDESCRIPTION: Core Windows shell enums and COM interfaces used for implementing preview handlers and shell integration. Includes property store flags, shell context flags, display name formats, attribute flags and preview handler interfaces.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/peek/Peek.Common/NativeMethods.txt#2025-04-15_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nGETPROPERTYSTOREFLAGS\n_SHCONTF\nSIGDN\nSHGDNF\nSIATTRIBFLAGS\nIInitializeWithFile\nIInitializeWithItem\nIInitializeWithStream\nIPreviewHandler\nIPreviewHandlerVisuals\n```\n\n----------------------------------------\n\nTITLE: JavaScript Alert Script\nDESCRIPTION: A basic JavaScript alert that displays 'hello' in a browser popup window.\nSOURCE: https://github.com/microsoft/PowerToys/blob/main/src/modules/previewpane/UnitTests-MarkdownPreviewHandler/HelperFiles/MarkdownWithExternalImage.txt#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nalert(\"hello\")\n```"
  }
]