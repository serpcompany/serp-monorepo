[
  {
    "owner": "iterative",
    "repo": "dvc.org",
    "content": "TITLE: Initializing a DVC Project\nDESCRIPTION: Command to initialize DVC inside an existing Git repository, creating the necessary internal files for DVC functionality.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc init\n```\n\n----------------------------------------\n\nTITLE: DVC Remote Add Command Usage Syntax\nDESCRIPTION: Command line syntax and arguments for the DVC remote add command. Shows required positional arguments for name and URL along with available options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/add.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc remote add [-h] [--global | --system | --project | --local]\n                      [-q | -v] [-d] [-f]\n                      name url\n\npositional arguments:\n  name           Name of the remote.\n  url            (See supported URLs in the examples below.)\n```\n\n----------------------------------------\n\nTITLE: DVC Stage Definition in YAML\nDESCRIPTION: This YAML snippet shows the structure of the evaluation stage in the dvc.yaml file, including command, dependencies, and outputs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nevaluate:\n  cmd: python src/evaluate.py model.pkl data/features\n  deps:\n    - data/features\n    - model.pkl\n    - src/evaluate.py\n  outs:\n    - eval\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Initialization with Git\nDESCRIPTION: Demonstrates the most common workflow for initializing a DVC project in a Git repository. Creates a new directory, initializes Git, initializes DVC, and commits the DVC configuration to Git.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/init.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir mydvcrepo && cd mydvcrepo\n$ git init\n$ dvc init\n$ git status\n...\n        new file:   .dvc/.gitignore\n        new file:   .dvc/config\n\n$ git commit -m \"Init DVC\"\n```\n\n----------------------------------------\n\nTITLE: Using log_artifact Function in Python with DVCLive\nDESCRIPTION: Example usage of log_artifact function to track a model file. It demonstrates creating a file, initializing Live context, and logging the artifact with metadata.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_artifact.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom dvclive import Live\n\n# Create example file\nPath(\"model.pt\").write_text(\"weights\")\n\nwith Live() as live:\n    live.log_artifact(\n      \"model.pt\",\n      type=\"model\",\n      name=\"mymodel\",\n      desc=\"Fine-tuned Resnet50\",\n      labels=[\"resnet\", \"imagenet\"],\n    )\n```\n\n----------------------------------------\n\nTITLE: DVC Experiments Command Usage Syntax\nDESCRIPTION: Shows the command-line syntax for the 'dvc exp' command and all available subcommands. Each subcommand serves a specific purpose in experiment management, such as showing experiments, running new ones, applying changes, promoting to branches, and managing experiment files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc exp [-h] [-q | -v]\n          {show,apply,diff,run,branch,list,push,pull,remove,clean}\n          ...\n\npositional arguments:\n  COMMAND\n    show                Print experiments.\n    run                 Run or resume an experiment.\n    apply               Apply the changes from an experiment to your workspace.\n    branch              Promote an experiment to a Git branch.\n    clean               Cleanup experiments temporary internal files.\n    diff                Show changes between experiments.\n    list                List local and remote experiments.\n    pull                Pull an experiment from a Git remote.\n    push                Push a local experiment to a Git remote.\n    remove              Remove experiments.\n    save                Save current workspace as an experiment.\n```\n\n----------------------------------------\n\nTITLE: Pushing and Committing Data Updates\nDESCRIPTION: Commands to upload the updated data to remote storage and commit the updated DVC metadata file to Git.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_17\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc push\n$ git commit data/data.xml.dvc -m \"Dataset updates\"\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Pipeline Structure\nDESCRIPTION: Basic structure of a DVC pipeline defined in dvc.yaml showing multiple stages\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/defining-pipelines.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  prepare: ... # stage 1 definition\n  train: ... # stage 2 definition\n  evaluate: ... # stage 3 definition\n```\n\n----------------------------------------\n\nTITLE: Adding a new file to an existing DVC dataset\nDESCRIPTION: Demonstrates the process of adding a single new file to an existing DVC dataset without having to re-add the entire dataset, improving performance for large datasets.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/modifying-large-datasets.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ cp ~/Downloads/new.png images/test/0/70001.png\n\n$ dvc data status --granular\nDVC uncommitted changes:\n  (use \"dvc commit <file>...\" to track changes)\n  (use \"dvc checkout <file>...\" to discard changes)\n        modified: images/\n        added: images/test/0/70001.png\n\n$ dvc add images/test/0/70001.png\n100% Adding...|████████████████████████████████████████|1/1 [00:00,  1.69file/s]\n\n$ dvc data status --granular\nDVC committed changes:\n  (git commit the corresponding dvc files to update the repo)\n        modified: images/\n        added: images/test/0/70001.png\n(there are other changes not tracked by dvc, use \"git status\" to see)\n```\n\n----------------------------------------\n\nTITLE: Complete DVCLive Integration in Python Training Script\nDESCRIPTION: Shows a complete example of integrating DVCLive into a training script, including parameter logging, metric logging, and artifact logging.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# train.py\n\nfrom dvclive import Live\n\nwith Live() as live:\n\n    live.log_param(\"epochs\", NUM_EPOCHS)\n\n    for epoch in range(NUM_EPOCHS):\n        train_model(...)\n        metrics = evaluate_model(...)\n\n        for metric_name, value in metrics.items():\n            live.log_metric(metric_name, value)\n\n        live.next_step()\n\n    live.log_artifact(path, type=\"model\", name=name)\n```\n\n----------------------------------------\n\nTITLE: Running DVC Experiment with Parameter Override\nDESCRIPTION: Executes a DVC experiment while overriding a specific parameter value using the --set-param option.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/running-experiments.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --set-param train.fine_tune_args.base_lr=0.001\n...\n```\n\n----------------------------------------\n\nTITLE: Defining log_artifact Function in Python\nDESCRIPTION: Function signature for log_artifact in DVCLive. It takes parameters for path, type, name, description, labels, metadata, copy, and cache options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_artifact.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef log_artifact(\n    path: Union[str, Path],\n    type: Optional[str] = None,\n    name: Optional[str] = None,\n    desc: Optional[str] = None,\n    labels: Optional[List[str]] = None,\n    meta: Optional[Dict[str, Any]] = None,\n    copy: Optional[bool] = False,\n    cache: Optional[bool] = True,\n):\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for DVC Project\nDESCRIPTION: Commands to create a new directory, navigate into it, and initialize a Git repository as preparation for a DVC project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir example-get-started\n$ cd example-get-started\n$ git init\n```\n\n----------------------------------------\n\nTITLE: Pushing Data to Remote Storage\nDESCRIPTION: Command to upload DVC-tracked data from the local cache to the configured remote storage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc push\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with pip on macOS\nDESCRIPTION: Installs DVC using pip package manager. Requires Python 3.8+ and it's recommended to use a virtual environment or pipx.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/macos.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install dvc\n```\n\n----------------------------------------\n\nTITLE: Pulling Data from Remote Storage\nDESCRIPTION: Command to download DVC-tracked data from the remote storage to the local cache and workspace.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_11\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc pull\n```\n\n----------------------------------------\n\nTITLE: Complete DVC Pipeline Example\nDESCRIPTION: Example showing multiple connected stages in dvc.yaml with dependencies and outputs\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/defining-pipelines.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  prepare:\n    ...\n    outs:\n      - data/clean.csv\n  train:\n    cmd: python src/model.py data/model.csv\n    deps:\n      - src/model.py\n      - data/clean.csv\n    outs:\n      - data/predict.dat\n```\n\n----------------------------------------\n\nTITLE: Comparing DVC Parameters\nDESCRIPTION: This CLI command shows how to compare parameter values between the current workspace and the last commit using dvc params diff.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc params diff\nPath         Param                   HEAD  workspace\nparams.yaml  featurize.max_features  100   200\nparams.yaml  featurize.ngrams        1     2\n```\n\n----------------------------------------\n\nTITLE: Importing External Data with DVC CLI\nDESCRIPTION: Demonstrates how to use the dvc import-url command to import external data into a DVC project. This command downloads the file and creates a .dvc file to track the source.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/importing-external-data.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import-url https://data.dvc.org/get-started/data.xml\nImporting 'https://data.dvc.org/get-started/data.xml' -> 'data.xml'\n```\n\n----------------------------------------\n\nTITLE: Experiment Tracking with PyTorch Lightning\nDESCRIPTION: Integration of DVCLive logger with PyTorch Lightning trainer for experiment tracking\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-tracking.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\nfrom dvclive.lightning import DVCLiveLogger\n\n...\n    trainer = Trainer(\n        logger=DVCLiveLogger(log_model=True)\n    )\n    trainer.fit(model)\n```\n\n----------------------------------------\n\nTITLE: Importing DVC API in Python\nDESCRIPTION: This snippet demonstrates how to import the DVC API module in Python code. The API enables programmatic access to data or models stored and versioned in DVC repositories.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n```\n\n----------------------------------------\n\nTITLE: Tracking Data with DVC\nDESCRIPTION: Command to start tracking a data file with DVC, which creates a metadata file and moves the actual data to the DVC cache.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc add data/data.xml\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters in YAML for DVC\nDESCRIPTION: Example of defining parameters in a params.yaml file for use with DVC. It includes model settings, thresholds, and file paths that can be referenced in the DVC configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  us:\n    threshold: 10\n    filename: 'model-us.hdf5'\ncodedir: src\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials for DVC S3 Remote\nDESCRIPTION: Commands to set AWS access key ID, secret access key, and session token for a DVC S3 remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/amazon-s3.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote \\\n                    access_key_id 'mysecret'\n$ dvc remote modify --local myremote \\\n                    secret_access_key 'mysecret'\n$ dvc remote modify --local myremote \\\n                    session_token 'mysecret'\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a DVC Pipeline Stage\nDESCRIPTION: Commands to create a DVC pipeline stage for training a model, specifying dependencies, outputs, and metrics, followed by reproducing the pipeline.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n train -d train.py -d data \\\n          -o model.weights.h5 -o bottleneck_features_train.npy \\\n          -o bottleneck_features_validation.npy -M metrics.csv \\\n          python train.py\n$ dvc repro\n```\n\n----------------------------------------\n\nTITLE: Transferring Data Directly to Remote Storage\nDESCRIPTION: Adds a file from a URL directly to remote storage without downloading it locally first using the --to-remote flag.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc add https://data.dvc.org/get-started/data.xml --to-remote\n...\n$ ls\ndata.xml.dvc\n```\n\n----------------------------------------\n\nTITLE: Defining DVC Pipeline Stages in YAML\nDESCRIPTION: Shows an example of defining DVC pipeline stages in a 'dvc.yaml' file, including dependencies, parameters, and outputs for 'prepare' and 'featurize' stages.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/running-pipelines.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  prepare:\n    cmd: python src/prepare.py data/data.xml\n    deps:\n      - data/data.xml\n      - src/prepare.py\n    params:\n      - prepare.seed\n      - prepare.split\n    outs:\n      - data/prepared\n  featurize:\n    cmd: python src/featurization.py data/prepared data/features\n    deps:\n      - data/prepared\n      - src/featurization.py\n    params:\n      - featurize.max_features\n      - featurize.ngrams\n    outs:\n      - data/features\n```\n\n----------------------------------------\n\nTITLE: Accessing DVC Data from Python Code\nDESCRIPTION: This snippet shows how to use the DVC Python API to load or stream data directly from external DVC projects, demonstrating a simple ML model deployment method.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/data-registry/tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nmodel_path = 'model.pkl'\nrepo_url = 'https://github.com/example/registry'\n\nwith dvc.api.open(model_path, repo_url) as f:\n    model = pickle.load(f)\n    # ... Use the model!\n```\n\n----------------------------------------\n\nTITLE: Adding Evaluation Stage to DVC Pipeline\nDESCRIPTION: This CLI command adds a new evaluation stage to the DVC pipeline, specifying dependencies, outputs, and the command to run.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n evaluate \\\n  -d src/evaluate.py -d model.pkl -d data/features \\\n  -o eval \\\n  python src/evaluate.py model.pkl data/features\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Experiments Table\nDESCRIPTION: Shows basic DVC command to display experiments in a formatted table showing metrics, parameters and dependencies\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/comparing-experiments.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show\n```\n\n----------------------------------------\n\nTITLE: DVC Stage Command Line Creation\nDESCRIPTION: Example of creating a stage using dvc stage add command\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/defining-pipelines.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add --name train \\\n                --deps src/model.py \\\n                --deps data/clean.csv \\\n                --outs data/predict.dat \\\n                python src/model.py data/clean.csv\n```\n\n----------------------------------------\n\nTITLE: Selective Data Pulling in DVC Pipeline\nDESCRIPTION: Examples showing how to selectively pull and reproduce pipeline data using --pull and --allow-missing flags.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/run.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --pull --allow-missing\nReproducing experiment 'hefty-tils'\n'data/pool_data.dvc' didn't change, skipping\nStage 'data_split' didn't change, skipping\nStage 'train' didn't change, skipping\nRunning stage 'evaluate':\n...\n```\n\n----------------------------------------\n\nTITLE: Logging a Model Artifact with DVCLive\nDESCRIPTION: Python code showing how to use DVCLive's log_artifact method to cache a model with DVC and add it to the model registry. The code includes metadata such as model name, description, and labels.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/model-registry/add-model.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\n\nwith Live() as live:\n\n...\n\n    live.log_artifact(\n        str(\"models/model.pkl\"),\n        type=\"model\",\n        name=\"pool-segmentation\",\n        desc=\"This is a Computer Vision (CV) model that's segmenting out swimming pools from satellite images.\",\n        labels=[\"cv\", \"segmentation\", \"satellite-images\", params.train.arch],\n    )\n```\n\n----------------------------------------\n\nTITLE: Complete DVC YAML Configuration for Experiment Pipeline\nDESCRIPTION: This YAML snippet shows the full configuration for all stages in the DVC pipeline, including 'data_split', 'train', and 'evaluate' stages.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-pipelines.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  data_split:\n    cmd: python src/data_split.py\n    deps:\n      - data/pool_data\n      - src/data_split.py\n    params:\n      - base\n      - data_split\n    outs:\n      - data/test_data\n      - data/train_data\n  train:\n    cmd: python src/train.py\n    deps:\n      - data/train_data\n      - src/train.py\n    params:\n      - base\n      - train\n    outs:\n      - models/model.pkl\n  evaluate:\n    cmd: python src/evaluate.py\n    deps:\n      - data/test_data\n      - models/model.pkl\n      - src/evaluate.py\n    params:\n      - base\n      - evaluate\n    outs:\n      - results\n```\n\n----------------------------------------\n\nTITLE: Adding S3 Remote and Setting as Default\nDESCRIPTION: Example commands showing how to add an S3 remote storage and set it as the default remote for DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/config.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add myremote s3://bucket/path\n$ dvc config core.remote myremote\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC .gitignore Configuration\nDESCRIPTION: Shows the contents of the .gitignore file that DVC creates in its .dvc directory to exclude cache and other DVC-specific files from Git tracking.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/init.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ cat .dvc/.gitignore\n/config.local\n/tmp\n/cache\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Key Authentication in DVC CLI\nDESCRIPTION: Demonstrates how to set up SSH key authentication for a remote storage in DVC. It includes setting the key file path and configuring passphrase handling.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/ssh.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote keyfile /path/to/keyfile\n# and (if needed)\n$ dvc remote modify myremote ask_passphrase true\n# or\n$ dvc remote modify --local myremote passphrase mypassphrase\n```\n\n----------------------------------------\n\nTITLE: Registering New ML Model Version\nDESCRIPTION: Demonstrates registering a new version of the cv-class model using gto register command and viewing the updated registry status.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/get-started.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ gto register cv-class\nCreated git tag 'cv-class@v0.1.14' that registers version\nTo push the changes upstream, run:\n    git push origin cv-class@v0.1.14\n\n$ gto show\n╒══════════╤══════════╤════════╤═════════╤════════════╕\n│ name     │ latest   │ #dev   │ #prod   │ #staging   │\n╞══════════╪══════════╪════════╪═════════╪════════════╡\n│ churn    │ v3.1.1   │ v3.1.1 │ v3.0.0  │ v3.1.0     │\n│ segment  │ v0.4.1   │ v0.4.1 │ -       │ -          │\n│ cv-class │ v0.1.14  │ -      │ -       │ -          │\n╘══════════╧══════════╧════════╧═════════╧════════════╛\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic DVC Studio Login\nDESCRIPTION: Command to log in to DVC Studio, which sets up automatic sharing of experiments, including live metrics and plots, and pushing to Git and DVC remotes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/sharing-experiments.md#2025-04-21_snippet_0\n\nLANGUAGE: dvc\nCODE:\n```\n$ dvc studio login\n```\n\n----------------------------------------\n\nTITLE: Importing Data with Version Tracking using CLI\nDESCRIPTION: Demonstrates using dvc import to download data while maintaining source tracking metadata for future updates.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/discovering-and-accessing-data.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import https://github.com/iterative/dataset-registry \\\n             get-started/data.xml -o data/data.xml\n```\n\n----------------------------------------\n\nTITLE: Example .dvc File Structure in YAML\nDESCRIPTION: This snippet shows a basic example of a .dvc file structure. It includes an 'outs' section with metadata for a tracked data file, including its MD5 hash, file path, description, and associated remote storage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvc-files.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nouts:\n  - md5: a304afb96060aad90176268345e10355\n    path: data.xml\n    desc: Cats and dogs dataset\n    remote: myremote\n```\n\n----------------------------------------\n\nTITLE: Adding a DVC Stage with Parameter Dependencies\nDESCRIPTION: This CLI command demonstrates how to add a DVC stage that depends on specific parameters from the params file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/index.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n train -d train.py -d users.csv -o model.pkl \\\n                -p lr,train.epochs,train.layers \\\n                python train.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Pandas DataFrame from DVC Experiments in Python\nDESCRIPTION: Example of how to convert the output of dvc.api.exp_show() into a Pandas DataFrame for easier data manipulation and analysis.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/exp_show.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nimport pandas as pd\n\ndf = pd.DataFrame(dvc.api.exp_show())\n```\n\n----------------------------------------\n\nTITLE: Grid Search with DVC Experiments\nDESCRIPTION: This CLI command demonstrates how to perform a grid search by modifying multiple parameters in DVC experiments. It also shows how to name the experiments for better identification.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-pipelines.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --name \"arch-size\" --queue \\\n-S 'train.arch=alexnet,resnet34,squeezenet1_1' \\\n-S 'train.img_size=128,256'\nQueueing with overrides '{\"params.yaml\": [\"train.arch=alexnet\", \"train.img_size=128\"]}'.\nQueued experiment 'arch-size-1' for future execution.\nQueueing with overrides '{\"params.yaml\": [\"train.arch=alexnet\", \"train.img_size=256\"]}'.\nQueued experiment 'arch-size-2' for future execution.\nQueueing with overrides '{\"params.yaml\": [\"train.arch=resnet34\", \"train.img_size=128\"]}'.\nQueued experiment 'arch-size-3' for future execution.\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing DVC Data using Python API\nDESCRIPTION: Shows how to programmatically access data from a DVC repository using the Python API, allowing direct integration in applications.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/discovering-and-accessing-data.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nwith dvc.api.open(\n    'get-started/data.xml',\n    repo='https://github.com/iterative/dataset-registry'\n) as f:\n    # f is a file-like object which can be processed normally\n```\n\n----------------------------------------\n\nTITLE: Integrating DVCLiveCallback with LightGBM Training in Python\nDESCRIPTION: This snippet demonstrates how to include the DVCLiveCallback in the callbacks list passed to the lightgbm.train function. It requires the dvclive.lgbm module and a configured LightGBM training setup.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/lightgbm.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive.lgbm import DVCLiveCallback\n\n...\n\nlightgbm.train(\n  param, train_data, valid_sets=[validation_data], num_round=5,\n  callbacks=[DVCLiveCallback()])\n```\n\n----------------------------------------\n\nTITLE: Logging Data with DVCLive in Python\nDESCRIPTION: Demonstrates how to use DVCLive to log various types of data including metrics, images, and artifacts. It shows the usage of different logging methods and how they interact with the file system.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/how-it-works.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom pathlib import Path\n\nfrom dvclive import Live\nfrom PIL import Image\n\nEPOCHS = 2\n\nwith Live(report=\"notebook\") as live:\n    live.log_param(\"epochs\", EPOCHS)\n\n    for i in range(EPOCHS):\n        live.log_metric(\"metric\", i + random.random())\n        live.log_metric(\"nested/metric\", i + random.random())\n        live.log_image(f\"img/{live.step}.png\", Image.new(\"RGB\", (50, 50), (i, i, i)))\n        Path(\"model.pt\").write_text(str(random.random()))\n        live.next_step()\n\n    live.log_artifact(\"model.pt\", type=\"model\", name=\"mymodel\")\n    live.log_sklearn_plot(\"confusion_matrix\", [0, 0, 1, 1], [0, 1, 0, 1])\n    live.log_metric(\"summary_metric\", 1.0, plot=False)\n# live.end() has been called at this point\n```\n\n----------------------------------------\n\nTITLE: Modifying DVC Remote Configuration\nDESCRIPTION: These commands show how to modify the configuration of a DVC remote. The first command sets a local credential path, while the second sets a global connection timeout.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote modify --local \\\n                    myremote credentialpath ~/.aws/alt\n$ dvc remote modify myremote connect_timeout 300\n```\n\n----------------------------------------\n\nTITLE: DVC Config File Structure\nDESCRIPTION: Example configuration file content showing how remote storage settings are stored in .dvc/config, including the remote URL and default remote setting.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/add.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# .dvc/config\n['remote \"temp\"']\n    url = /tmp/dvcstore\n[core]\n    remote = myremote\n```\n\n----------------------------------------\n\nTITLE: Downloading Data from DVC Repository using CLI\nDESCRIPTION: Shows how to download data directly from a DVC repository using the dvc get command, useful for deployment scenarios outside of DVC projects.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/discovering-and-accessing-data.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc get https://github.com/iterative/dataset-registry \\\n          use-cases/cats-dogs\n```\n\n----------------------------------------\n\nTITLE: Modifying Parameters in DVC Experiments\nDESCRIPTION: These CLI commands demonstrate how to modify parameters when running DVC experiments. They show single and multiple parameter modifications.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-pipelines.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --set-param \"train.img_size=128\"\n\n$ dvc exp run \\\n-S \"data_split.test_pct=0.1\" -S \"train.img_size=384\"\n```\n\n----------------------------------------\n\nTITLE: Importing Model from Hugging Face Hub into DVC Project\nDESCRIPTION: Example of using dvc import to add a Stable Diffusion model file to a DVC project from Hugging Face Hub.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/huggingface.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0 sd_xl_base_1.0.safetensors\n```\n\n----------------------------------------\n\nTITLE: Experiment Tracking with Hugging Face\nDESCRIPTION: Integration of DVCLive callback with Hugging Face trainer for experiment tracking and model artifact logging\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-tracking.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\nfrom dvclive.huggingface import DVCLiveCallback\n\n...\nwith Live() as live:\n    trainer.add_callback(\n        DVCLiveCallback(live=live)\n    )\n    trainer.train()\n    trainer.save_model(\"mymodel\")\n    live.log_artifact(\"mymodel\", type=\"model\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch from DVC Experiment\nDESCRIPTION: Series of commands to create a Git branch from a DVC experiment, switch to the new branch, and push it to a remote repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/sharing-experiments.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp branch quare-zips\n$ git checkout quare-zips-branch\n$ git push origin quare-zips-branch\n```\n\n----------------------------------------\n\nTITLE: DVC Matrix Stage Definition\nDESCRIPTION: This snippet shows how to define a `matrix` stage in `dvc.yaml` to create multiple stages based on combinations of variables. The `model` and `feature` variables iterate over lists of values.  The `cmd` and `outs` fields use `${item.feature}`, `${item.model}`, and `${key}` to reference the variable values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  train:\n    matrix:\n      model: [cnn, xgb]\n      feature: [feature1, feature2, feature3]\n    cmd: ./train.py --feature ${item.feature} ${item.model}\n    outs:\n      - ${key}.pkl # equivalent to: ${item.model}-${item.feature}.pkl\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Download Example\nDESCRIPTION: Example showing how to download a file from Amazon S3 using dvc get-url.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get-url.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get-url s3://bucket/path\n```\n\n----------------------------------------\n\nTITLE: Basic Google Drive Remote Setup in DVC\nDESCRIPTION: Example showing how to add data to DVC, create a Google Drive remote with default settings, and push data to it. Includes authentication flow demonstration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc add data\n...\n$ dvc remote add --default myremote \\\n                           gdrive://0AIac4JZqHhKmUk9PDA/dvcstore\n$ dvc remote modify myremote gdrive_acknowledge_abuse true\n$ dvc push\nYour browser has been opened to visit:\n\n    https://accounts.google.com/o/oauth2/auth...\n\nAuthentication successful.\n```\n\n----------------------------------------\n\nTITLE: Using make_dvcyaml with Live Class\nDESCRIPTION: Example demonstrating how to use the Live class to log parameters, metrics, and plots before generating the DVC configuration file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/make_dvcyaml.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nlive = Live()\nlive.log_param(\"lr\", 0.01)\nlive.log_metric(\"acc\", 0.9)\nlive.log_sklearn_plot(\"confusion_matrix\", [0, 0, 1, 1], [1, 0, 0, 1])\nlive.make_dvcyaml()\n```\n\n----------------------------------------\n\nTITLE: Downloading a Directory Recursively with DVCFileSystem\nDESCRIPTION: Example showing how to recursively download an entire directory of files (both Git-tracked and DVC-tracked) using the get() method with recursive=True.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> fs.get(\"data\", \"data\", recursive=True)\n```\n\n----------------------------------------\n\nTITLE: Reverting to a Previous Data Version\nDESCRIPTION: Commands to checkout a previous version of a DVC metadata file from Git history and restore the corresponding data file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_19\n\nLANGUAGE: cli\nCODE:\n```\n$ git checkout HEAD~1 data/data.xml.dvc\n$ dvc checkout\n```\n\n----------------------------------------\n\nTITLE: Initializing DVCLive in Python\nDESCRIPTION: Demonstrates how to initialize a Live object using a context manager.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith Live() as live:\n```\n\n----------------------------------------\n\nTITLE: Hyperparameter Tuning with DVC Experiments\nDESCRIPTION: This CLI command shows how to perform hyperparameter tuning by providing multiple values for a single parameter in a DVC experiment.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-pipelines.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run \\\n--queue --set-param \"train.batch_size=8,16,24\"\nQueueing with overrides '{\"params.yaml\": [\"train.batch_size=8\"]}'.\nQueueing with overrides '{\"params.yaml\": [\"train.batch_size=16\"]}'.\nQueueing with overrides '{\"params.yaml\": [\"train.batch_size=24\"]}'.\n...\n```\n\n----------------------------------------\n\nTITLE: Running Isolated DVC Experiment in Background\nDESCRIPTION: Demonstrates how to run a DVC experiment in a temporary, isolated environment as a background process.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/running-experiments.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ nohup dvc exp run --temp &\n[1] 30473\nnohup: ignoring input and appending output to 'nohup.out'\n```\n\n----------------------------------------\n\nTITLE: Advanced DVCLiveCallback Usage with Custom Live Instance\nDESCRIPTION: Demonstrates advanced usage of DVCLiveCallback with a custom Live instance, including post-training metric logging and model evaluation.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/keras.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\nfrom dvclive.keras import DVCLiveCallback\n\nwith Live(\"custom_dir\") as live:\n    model.fit(\n        train_dataset,\n        epochs=num_epochs,\n        validation_data=validation_dataset,\n        callbacks=[DVCLiveCallback(live=live)])\n\n    model.load_weights(os.path.join(\"model\", \"best_model\"))\n\n    # Log additional data after training\n    test_loss, test_acc = model.evaluate(test_dataset)\n    live.log_metric(\"test_loss\", test_loss, plot=False)\n    live.log_metric(\"test_acc\", test_acc, plot=False)\n```\n\n----------------------------------------\n\nTITLE: DVC Foreach Stage with Parameter File Dictionary\nDESCRIPTION: This example demonstrates the usage of a dictionary from a `params.yaml` file within a `foreach` stage. The `${myobject}` parameter (defined in `params.yaml`) is used as the iterable.  The `key` and `item` variables are then available for substitution in the `cmd` and `outs` fields.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  mystages:\n    foreach: ${myobject} # From params.yaml\n    do:\n      cmd: ./script.py ${key} ${item.prop1}\n      outs:\n        - ${item.prop2}\n```\n\n----------------------------------------\n\nTITLE: Integrating DVCLiveCallback with Fast.ai Learner\nDESCRIPTION: This snippet demonstrates how to include the DVCLiveCallback in the callbacks list passed to a Fast.ai Learner. It allows for tracking metrics during the model training process.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/fastai.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive.fastai import DVCLiveCallback\n\n...\n\nlearn = tabular_learner(data_loader, metrics=accuracy)\nlearn.fit_one_cycle(\n    n_epoch=2,\n    cbs=[DVCLiveCallback()])\n```\n\n----------------------------------------\n\nTITLE: Using Live.log_metric() in Python\nDESCRIPTION: Example usage of Live.log_metric() to log train and validation loss metrics within a context manager.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_metric.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n    live.log_metric(\"train/loss\", 0.4)\n    live.log_metric(\"val/loss\", 0.9)\n```\n\n----------------------------------------\n\nTITLE: Queueing DVC Experiments with Grid Search\nDESCRIPTION: Shows how to queue a grid search of DVC experiments by specifying multiple parameter values and ranges.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/running-experiments.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --queue \\\n    -S train.arch='resnet18,shufflenet_v2_x2_0' \\\n    -S 'train.fine_tune_args.base_lr=range(0.001, 0.01, 0.001)'\nQueueing with overrides '{\"params.yaml\": [\"train.arch=resnet18\", \"train.fine_tune_args.base_lr=0.001\"]}'.\nQueued experiment 'bijou-chis' for future execution.\nQueueing with overrides '{\"params.yaml\": [\"train.arch=resnet18\", \"train.fine_tune_args.base_lr=0.002\"]}'.\nQueued experiment 'color-meal' for future execution.\nQueueing with overrides '{\"params.yaml\": [\"train.arch=resnet18\", \"train.fine_tune_args.base_lr=0.003\"]}'.\nQueued experiment 'fusil-chin' for future execution.\n...\nQueueing with overrides '{\"params.yaml\": [\"train.arch=shufflenet_v2_x2_0\", \"train.fine_tune_args.base_lr=0.001\"]}'.\nQueued experiment 'lumpy-jato' for future execution.\nQueueing with overrides '{\"params.yaml\": [\"train.arch=shufflenet_v2_x2_0\", \"train.fine_tune_args.base_lr=0.002\"]}'.\nQueued experiment 'gypsy-wino' for future execution.\nQueueing with overrides '{\"params.yaml\": [\"train.arch=shufflenet_v2_x2_0\", \"train.fine_tune_args.base_lr=0.003\"]}'.\n...\n```\n\n----------------------------------------\n\nTITLE: General Python API for Experiment Tracking\nDESCRIPTION: Example of using DVCLive's general Python API for tracking custom training loops with metrics and artifacts\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-tracking.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n    live.log_param(\"epochs\", NUM_EPOCHS)\n\n    for epoch in range(NUM_EPOCHS):\n        train_model(...)\n        metrics = evaluate_model(...)\n        for metric_name, value in metrics.items():\n            live.log_metric(metric_name, value)\n        live.next_step()\n\n    live.log_artifact(\"model.pkl\", type=\"model\")\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Cache File Link Type\nDESCRIPTION: This command configures DVC to use hard links and symbolic links for the cache. It sets the cache.type configuration to prefer hard links first, then fall back to symbolic links if needed.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/large-dataset-optimization.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc config cache.type hardlink,symlink\n```\n\n----------------------------------------\n\nTITLE: Basic DVCLiveCallback Integration with Keras\nDESCRIPTION: Shows how to add DVCLiveCallback to Keras model training for basic experiment tracking. The callback is included in the model.fit() method to log training metrics automatically.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/keras.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive.keras import DVCLiveCallback\n\n...\n\nmodel.fit(\n    train_dataset, epochs=num_epochs, validation_data=validation_dataset,\n    callbacks=[DVCLiveCallback()])\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with conda and Amazon S3 support on macOS\nDESCRIPTION: Installs DVC with Amazon S3 storage support using conda/mamba. This installs the boto3 library along with DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/macos.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c conda-forge mamba # installs much faster than conda\n$ mamba install -c conda-forge dvc-s3\n```\n\n----------------------------------------\n\nTITLE: Logging Metrics in TensorFlow Training Loop with DVCLive\nDESCRIPTION: This snippet demonstrates how to use DVCLive to log metrics in a TensorFlow training loop. It logs train and validation accuracy for each epoch using Live.log_metric() and marks the end of each epoch with Live.next_step().\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/tensorflow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n\n    for epoch in range(epochs):\n        start_time = time.time()\n        for step, (x_batch_train, y_batch_train) in enumerate(train_dataset):\n            with tf.GradientTape() as tape:\n                logits = model(x_batch_train, training=True)\n                loss_value = loss_fn(y_batch_train, logits)\n            grads = tape.gradient(loss_value, model.trainable_weights)\n            optimizer.apply_gradients(zip(grads, model.trainable_weights))\n            train_acc_metric.update_state(y_batch_train, logits)\n\n        live.log_metric(\"train/accuracy\", float(train_acc_metric.result())\n        train_acc_metric.reset_states()\n\n        for x_batch_val, y_batch_val in val_dataset:\n            val_logits = model(x_batch_val, training=False)\n            val_acc_metric.update_state(y_batch_val, val_logits)\n        live.log_metric(\"val/accuracy\", float(val_acc_metric.result())\n        val_acc_metric.reset_states()\n\n        live.next_step()\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Data for DVC Plots\nDESCRIPTION: Example of a JSON file structure for plotting accuracy and loss data with DVC. The data is organized in an array of objects under the 'train' key.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/visualizing-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"train\": [\n    { \"accuracy\": 0.96658, \"loss\": 0.10757 },\n    { \"accuracy\": 0.97641, \"loss\": 0.07324 },\n    { \"accuracy\": 0.87707, \"loss\": 0.08136 },\n    { \"accuracy\": 0.87402, \"loss\": 0.09026 },\n    { \"accuracy\": 0.8795, \"loss\": 0.0764 },\n    { \"accuracy\": 0.88038, \"loss\": 0.07608 },\n    { \"accuracy\": 0.89872, \"loss\": 0.08455 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GTO using pip\nDESCRIPTION: This command installs GTO using pip, the Python package installer. It will install both the command-line interface and make the Python API available for use in code.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/install.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install gto\n```\n\n----------------------------------------\n\nTITLE: Customizing Metrics and Plots in DVC YAML\nDESCRIPTION: This YAML configuration demonstrates how to customize metrics and plots in the dvc.yaml file, including ROC curves, confusion matrices, and precision-recall curves.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n- eval/metrics.json\nplots:\n- ROC:\n    template: simple\n    x: fpr\n    y:\n      eval/plots/sklearn/roc/train.json: tpr\n      eval/plots/sklearn/roc/test.json: tpr\n- Confusion-Matrix:\n    template: confusion\n    x: actual\n    y:\n      eval/plots/sklearn/cm/train.json: predicted\n      eval/plots/sklearn/cm/test.json: predicted\n- Precision-Recall:\n    template: simple\n    x: recall\n    y:\n      eval/plots/sklearn/prc/train.json: precision\n      eval/plots/sklearn/prc/test.json: precision\n- eval/plots/images/importance.png\n```\n\n----------------------------------------\n\nTITLE: Listing DVC Repository Contents using CLI\nDESCRIPTION: Demonstrates how to use the dvc list command to explore files and directories in a DVC repository, including both Git and DVC-tracked items.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/discovering-and-accessing-data.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc list https://github.com/iterative/dataset-registry get-started\n.gitignore\ndata.xml\ndata.xml.dvc\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Account Authentication for GCS\nDESCRIPTION: Command to configure custom authentication using a service account key file for GCS remote. Uses local config to avoid exposing credentials in Git.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-cloud-storage.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote \\n                    credentialpath 'path/to/project-XXX.json'\n```\n\n----------------------------------------\n\nTITLE: Configuring an Amazon S3 Remote Storage\nDESCRIPTION: Example command to configure an Amazon S3 bucket as a remote storage location for DVC-tracked data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d storage s3://mybucket/dvcstore\n```\n\n----------------------------------------\n\nTITLE: Defining Plots in DVC YAML Configuration\nDESCRIPTION: Example of defining plots in the dvc.yaml file. This configuration specifies various plot types, including confusion matrices, ROC curves, and image files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/visualizing-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - eval/live/plots/sklearn/cm/test.json:\n      template: confusion\n      x: actual\n      y: predicted\n\n  - ROC:\n      x: fpr\n      y:\n        eval/live/plots/sklearn/roc/train.json: tpr\n        eval/live/plots/sklearn/roc/test.json: tpr\n\n  - eval/importance.png\n  - eval/misclassified_examples\n```\n\n----------------------------------------\n\nTITLE: DVC API Read with Pickle Loading Example\nDESCRIPTION: Complete example showing how to load and deserialize a binary model file from a DVC repository using pickle and dvc.api.read().\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/read.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pickle\nimport dvc.api\n\ndata = dvc.api.read(\n    'model.pkl',\n    repo='https://github.com/iterative/example-get-started'\n    mode='rb'\n)\nmodel = pickle.loads(data)\n```\n\n----------------------------------------\n\nTITLE: DVC Foreach Stage with Dictionary Iteration\nDESCRIPTION: This snippet shows how to iterate directly over a dictionary in a `foreach` stage. Two substitution expressions are available: `${key}` (for the dictionary key) and `${item}` (for the dictionary value). The `${key}` is used in the stage name, while `${item.epochs}` and `${item.thresh}` are used in the `cmd`.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  build:\n    foreach:\n      uk:\n        epochs: 3\n        thresh: 10\n      us:\n        epochs: 10\n        thresh: 15\n    do:\n      cmd: python train.py '${key}' ${item.epochs} ${item.thresh}\n      outs:\n        - model-${key}.hdfs\n```\n\n----------------------------------------\n\nTITLE: DVC Pipeline with Parameters\nDESCRIPTION: Example showing how to define parameter dependencies in a DVC pipeline stage\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/defining-pipelines.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  train:\n    cmd: ...\n    deps: ...\n    params: # from params.yaml\n      - learning_rate\n      - nn.epochs\n      - nn.batch_size\n    outs: ...\n```\n\n----------------------------------------\n\nTITLE: Adding an S3 Remote in DVC CLI\nDESCRIPTION: Command to add a new S3 remote to DVC, specifying the bucket name and optional folder key.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/amazon-s3.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote s3://<bucket>/<key>\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for dvc exp show Command\nDESCRIPTION: Displays the complete syntax for the dvc exp show command, including all available options and flags for customizing the experiments display.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc exp show [-h] [-q | -v] [-a] [-T] [-A] [--rev <commit>]\n                    [-n <num>] [--no-pager] [--drop <regex>]\n                    [--keep <regex>] [--param-deps]\n                    [--sort-by <metric/param>]\n                    [--sort-order {asc,desc}] [--sha]\n                    [--json] [--csv] [--md] [--precision <n>]\n                    [--only-changed] [-f]\n```\n\n----------------------------------------\n\nTITLE: Loading Parameters in Python Code\nDESCRIPTION: This Python snippet shows how to load parameters in a script using the DVC API.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nparams = dvc.api.params_show()\n\nlr = params['lr']\nepochs = params['train']['epochs']\nlayers = params['train']['layers']\n```\n\n----------------------------------------\n\nTITLE: Basic Example of dvc exp show Command\nDESCRIPTION: Shows how to execute the basic dvc exp show command without any options, which displays experiments derived from the current Git HEAD.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp show\n```\n\n----------------------------------------\n\nTITLE: Using Existing Live Instance with DVCLiveCallback\nDESCRIPTION: This example shows how to use an existing Live instance with DVCLiveCallback. It demonstrates creating a Live instance, using it in the callback, and logging additional metrics after training.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/fastai.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\nfrom dvclive.fastai import DVCLiveCallback\n\nwith Live(\"custom_dir\") as live:\n    learn = tabular_learner(data_loader, metrics=accuracy)\n    learn.fit_one_cycle(\n      n_epoch=2,\n      cbs=[DVCLiveCallback(live=live)])\n\n    # Log additional metrics after training\n    live.log_metric(\"summary_metric\", 1.0, plot=False)\n```\n\n----------------------------------------\n\nTITLE: Training Model and Adding to DVC Tracking\nDESCRIPTION: Commands to run the training script and add the resulting model file to DVC tracking.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python train.py\n$ dvc add model.weights.h5\n```\n\n----------------------------------------\n\nTITLE: Pulling and Renaming the Latest Model Version\nDESCRIPTION: An alternative approach to get the latest model version using 'dvc pull' with a specific stage target, then renaming the file. This is used to compare with the previously downloaded baseline version.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc pull train\n$ mv model.pkl model.bigrams.pkl\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Stages with Parameter Substitution\nDESCRIPTION: Demonstrates how to use parameter substitution in a dvc.yaml file to configure stages and artifacts. It shows how to reference values from params.yaml within the DVC configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nartifacts:\n  model-us:\n    path: ${models.us.filename}\n    type: model\n\nstages:\n  build-us:\n    cmd: >\n      python ${codedir}/train.py\n      --thresh ${models.us.threshold}\n      --out ${models.us.filename}\n    outs:\n      - ${models.us.filename}:\n          cache: true\n```\n\n----------------------------------------\n\nTITLE: Accessing DVC Experiments via Python API\nDESCRIPTION: Demonstrates how to programmatically access experiments data using DVC's Python API\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/comparing-experiments.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nexps = dvc.api.exp_show()\n```\n\n----------------------------------------\n\nTITLE: Pulling from Specific Remote\nDESCRIPTION: Demonstrates how to pull data from a specific remote using the '--remote' option.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/pull.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc pull --remote r1\n```\n\n----------------------------------------\n\nTITLE: Using DVCLive Logger with Context Manager\nDESCRIPTION: Example showing how to use the DVCLive logger as a context manager with the 'with' statement.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of dvc.api.get_url()\nDESCRIPTION: Example demonstrating how to use dvc.api.get_url() to retrieve the URL for a file in a GitHub repository. The function returns the complete URL to the file in DVC remote storage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/get_url.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nresource_url = dvc.api.get_url(\n    'get-started/data.xml',\n    repo='https://github.com/iterative/dataset-registry'\n)\n# resource_url is now \"https://remote.dvc.org/dataset-registry/a3/04afb96060aad90176268345e10355\"\n```\n\n----------------------------------------\n\nTITLE: Adding and Listing Files with DVC in CLI\nDESCRIPTION: This snippet demonstrates how to add a file to DVC tracking and list the resulting files. It shows the creation of a .dvc file and the addition of an entry to .gitignore.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/stop-tracking-data.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc add data.csv\n\n$ ls\ndata.csv    data.csv.dvc\n$ cat .gitignore\n/data.csv\n```\n\n----------------------------------------\n\nTITLE: Using Next Step Method in DVCLive\nDESCRIPTION: Example usage of the next_step() method in a loop. It demonstrates how to log a metric and increment the step for each iteration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/next_step.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nlive = Live()\n\nfor step in range(3):\n    live.log_metric(\"metric\", 0.9)\n    live.next_step()\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with winget on Windows\nDESCRIPTION: Command to install DVC using the Windows Package Manager (winget). This provides a simple command-line method for installing the official Iterative DVC package.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/windows.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ winget install --id Iterative.DVC\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics in DVC YAML\nDESCRIPTION: Simple example showing how to specify metrics file paths in the DVC configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  - metrics.json\n```\n\n----------------------------------------\n\nTITLE: DVC Experiment Run Command Synopsis\nDESCRIPTION: The usage syntax for the 'dvc exp run' command, showing all available options and arguments. It demonstrates how to reproduce stages, set parameters, and configure experiment execution.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/run.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc exp run [-h] [-q | -v] [-f] [-i]\n                   [-s] [-p] [-P] [-R]\n                   [-n <name>] [-S [<filename>:]<override_pattern>]\n                   [--queue] [--run-all] [-j <number>] [--temp]\n                   [-r <experiment_rev>] [-C <path>]\n                   [-m <message>]\n                   [--downstream] [--force-downstream]\n                   [--pull] [--dry] [--allow-missing]\n                   [-k] [--ignore-errors]\n                   [targets [targets ...]]\n\npositional arguments:\n  targets               Stages to reproduce. 'dvc.yaml' by default\n```\n\n----------------------------------------\n\nTITLE: Comparing DVC-tracked Files Between Commits in Bash\nDESCRIPTION: Demonstrates how to use 'dvc diff' to compare DVC-tracked files between two Git commits, showing added, modified, or deleted files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/diff.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc diff baseline-experiment bigrams-experiment\n```\n\n----------------------------------------\n\nTITLE: Updating DVC Parameters\nDESCRIPTION: This git diff shows how to update parameters in the params.yaml file, specifically changing the max_features and ngrams values for the featurize stage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_7\n\nLANGUAGE: git\nCODE:\n```\n featurize:\n-  max_features: 100\n-  ngrams: 1\n+  max_features: 200\n+  ngrams: 2\n```\n\n----------------------------------------\n\nTITLE: Opening a File with DVCFileSystem in Python\nDESCRIPTION: Example showing how to open a DVC-tracked file with DVCFileSystem. The default mode is binary, and it returns a file-like object similar to dvc.api.open().\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> with fs.open(\"model.pkl\") as f:\n        model = pickle.load(f)\n```\n\n----------------------------------------\n\nTITLE: Using DVCFileSystem with Subrepos\nDESCRIPTION: Examples showing how to access DVC repositories initialized in subdirectories of a Git repository by enabling the subrepos parameter, which is disabled by default.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from dvc.api import DVCFileSystem\n>>> url = \"https://github.com/iterative/monorepo-example.git\"\n# by default, DVC initialized in a subdirectory will be ignored\n>>> fs = DVCFileSystem(url, rev=\"develop\")\n>>> fs.find(\"nlp\", detail=False, dvc_only=True)\n[]\n# use subrepos=True to list those files\n>>> fs = DVCFileSystem(url, subrepos=True, rev=\"develop\")\n>>> fs.find(\"nlp\", detail=False, dvc_only=True)\n['nlp/data/data.xml', 'nlp/data/features/test.pkl', 'nlp/data/features/train.pkl', 'nlp/data/prepared/test.tsv', 'nlp/data/prepared/train.tsv', 'nlp/eval/importance.png', 'nlp/model.pkl']\n```\n\n----------------------------------------\n\nTITLE: Training and Versioning Second Model\nDESCRIPTION: Commands to update DVC tracking for new data, retrain the model, and version the new model file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc add data\n$ python train.py\n$ dvc add model.weights.h5\n```\n\n----------------------------------------\n\nTITLE: Importing External Data with Cloud Versioning\nDESCRIPTION: Demonstrates how to use the --no-download and --version-aware flags with dvc import-url to track versioned data from cloud storage without local download.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/importing-external-data.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import-url --no-download --version-aware s3://myversionedbucket/data.xml\nImporting 's3://myversionedbucket/data.xml' -> 'data.xml'\n\n$ ls\ndata.xml.dvc\n\n$ dvc push\nEverything is up to date.\n```\n\n----------------------------------------\n\nTITLE: DVC Push Command Usage Synopsis\nDESCRIPTION: Command line syntax showing all available options and arguments for the dvc push command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/push.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: dvc push [-h] [-q | -v] [-j <number>] [-r <name>] [-a] [-T]\n                [--all-commits] [--glob] [-d] [-R]\n                [--run-cache | --no-run-cache]\n                [targets [targets ...]]\n```\n\n----------------------------------------\n\nTITLE: Importing and Pushing External Data to DVC Remote\nDESCRIPTION: Shows how to use the --to-remote flag with dvc import-url to import external data and push it directly to a DVC remote without local download.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/importing-external-data.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import-url --to-remote https://data.dvc.org/get-started/data.xml\n\n$ ls\ndata.xml.dvc\n\n$ dvc push\nEverything is up to date.\n```\n\n----------------------------------------\n\nTITLE: Downloading Models with DVC CLI\nDESCRIPTION: Use the 'dvc artifacts get' command to download a model artifact by name. This requires DVC to be installed and configured with the appropriate remote storage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/model-registry/use-models.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndvc artifacts get\n```\n\n----------------------------------------\n\nTITLE: DVC Metrics Show with All Commits\nDESCRIPTION: Shows how to display metrics across all Git commits using the '--all-commits' option, allowing users to view the history of metrics changes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/show.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc metrics show --all-commits\nRevision                                  Path       AUC      TP    error\nworkspace                                 eval.json  0.66729  516   0.16982\n85acdb826754d175c2981510e183625bc817b2e6  eval.json  0.66524  521   0.17074\n0335250a77cc9c196a40ff7fff1f53300a849ead  eval.json  0.66729  516   0.16982\nfe0af34f66bb713d5a0ae8d8affeb8bda1512d00  eval.json  0.65115  528   0.17304\na9918370c0761e78a12d9a7b7fa7ededb073937d  eval.json  0.65115  528   0.17304\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of params_show in Python\nDESCRIPTION: Simple example of using dvc.api.params_show() to retrieve all parameters from the current DVC project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nparams = dvc.api.params_show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifacts in DVC YAML\nDESCRIPTION: Example showing how to declare structured metadata about artifacts including path, type, description, labels and metadata.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nartifacts:\n  cv-classification: # artifact ID (name)\n    path: models/resnet.pt\n    type: model\n    desc: 'CV classification model, ResNet50'\n    labels:\n      - resnet50\n      - classification\n    meta:\n      framework: pytorch\n```\n\n----------------------------------------\n\nTITLE: Listing Pushed DVC Experiments\nDESCRIPTION: Command to list DVC experiments that have been pushed to a Git remote. This example lists experiments pushed to the 'origin' remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/sharing-experiments.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp list origin\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC Plots\nDESCRIPTION: This CLI command demonstrates how to generate and view DVC plots, which creates an HTML file with visualizations.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots show\nfile:///Users/dvc/example-get-started/dvc_plots/index.html\n```\n\n----------------------------------------\n\nTITLE: Downloading a DVC-tracked Model File from GitHub\nDESCRIPTION: An example showing how to download a model file from a DVC repository hosted on GitHub. This retrieves the 'model.pkl' file from the example-get-started repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get https://github.com/iterative/example-get-started model.pkl\n$ ls\nmodel.pkl\n```\n\n----------------------------------------\n\nTITLE: Adding a Single File with DVC\nDESCRIPTION: Command to add a single file (data.xml) to DVC tracking.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc add data.xml\n```\n\n----------------------------------------\n\nTITLE: Comparing Experiments via CLI\nDESCRIPTION: DVC CLI commands to show and compare experiment results including metrics and parameters\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-tracking.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show\n$ dvc plots diff $(dvc exp list --name-only)\n```\n\n----------------------------------------\n\nTITLE: Adding a Local Directory as DVC Remote\nDESCRIPTION: This snippet demonstrates how to add a local directory as a DVC remote using an absolute path. The -d flag sets it as the default remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d myremote /tmp/dvcstore\n```\n\n----------------------------------------\n\nTITLE: Sorting DVC Experiments by Metric\nDESCRIPTION: Demonstrates sorting experiments by the roc_auc metric in descending order while showing only changed experiments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show --only-changed --sort-by=roc_auc --sort-order desc\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with conda/mamba on Linux\nDESCRIPTION: Installs DVC using conda-forge channel with mamba for faster installation. Requires Miniconda or Anaconda Distribution.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/linux.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ conda install -c conda-forge mamba # installs much faster than conda\n$ mamba install -c conda-forge dvc\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output with Hash Values in DVC Diff\nDESCRIPTION: Shows how to use 'dvc diff' with JSON output format and include hash values for comparing two Git commits.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/diff.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc diff --json --show-hash \\\n           baseline-experiment bigrams-experiment\n```\n\n----------------------------------------\n\nTITLE: Defining Always Changed Stage in DVC YAML\nDESCRIPTION: Demonstrates how to define a stage that always runs in the DVC pipeline using the 'always_changed' property in the 'dvc.yaml' file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/running-pipelines.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  pull_latest:\n    cmd: python pull_latest.py\n    deps:\n      - pull_latest.py\n    outs:\n      - latest_results.csv\n    always_changed: true\n```\n\n----------------------------------------\n\nTITLE: Adding a Directory with DVC\nDESCRIPTION: Command to add an entire directory (pics) to DVC tracking.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc add pics\n```\n\n----------------------------------------\n\nTITLE: Adding and Tracking Dataset with DVC CLI\nDESCRIPTION: This snippet demonstrates how to add a dataset to a DVC registry by placing it in the workspace and tracking it with 'dvc add'. It also shows the Git workflow for committing the .dvc files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/data-registry/tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir -p music/songs\n$ cp ~/Downloads/millionsongsubset_full music/songs\n\n$ dvc add music/songs/\n\n$ git add music/songs.dvc music/.gitignore\n$ git commit -m \"Track 1.8 GB 10,000 song dataset in music/\"\n```\n\n----------------------------------------\n\nTITLE: Basic DVC API Read Usage Example\nDESCRIPTION: Simple example demonstrating how to read a model file from a GitHub repository using dvc.api.read(). Shows basic usage with repository URL and binary read mode.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/read.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nmodelpkl = dvc.api.read(\n    'model.pkl',\n    repo='https://github.com/iterative/example-get-started',\n    mode='rb'\n)\n```\n\n----------------------------------------\n\nTITLE: Logging Model Artifacts with DVCLive in Python\nDESCRIPTION: This snippet shows how to log a model as an artifact during the training process using the DVCLive Python library. The log_artifact method is used to track a model file with the type parameter set to 'model'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/model-registry/add-a-model.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlive.log_artifact(path, type=\"model\")\n```\n\n----------------------------------------\n\nTITLE: Transferring Existing Cache - CLI\nDESCRIPTION: Moves existing cache contents from the local .dvc/cache to the new shared cache location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/share-a-dvc-cache.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ mv .dvc/cache/* /home/shared/dvc-cache\n```\n\n----------------------------------------\n\nTITLE: DVC Pull Command Synopsis\nDESCRIPTION: Shows the usage syntax and available options for the 'dvc pull' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/pull.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc pull [-h] [-q | -v] [-j <number>] [-r <name>] [-a] [-T]\n                [-d] [-f] [-R] [--all-commits]\n                [--run-cache | --no-run-cache] [--allow-missing]\n                [targets [targets ...]]\n```\n\n----------------------------------------\n\nTITLE: Pulling DVC Experiments from Git Remote\nDESCRIPTION: Command to download pushed DVC experiments from a Git remote. This pulls all necessary files and data from both Git and DVC remotes for the 'origin' remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/sharing-experiments.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp pull origin\n```\n\n----------------------------------------\n\nTITLE: Downloading a Single File with DVCFileSystem\nDESCRIPTION: Example showing how to download a single DVC-tracked file from a repository to the local filesystem using get_file() method.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> fs.get_file(\"data/data.xml\", \"data.xml\")\n```\n\n----------------------------------------\n\nTITLE: Pushing DVC-tracked Data to Remote Storage\nDESCRIPTION: Command to push DVC-tracked data (cached files, models, etc.) to a configured remote storage after creating a Git branch from an experiment.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/sharing-experiments.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc push\n```\n\n----------------------------------------\n\nTITLE: DVC Update Basic Example with Rev Option\nDESCRIPTION: Example showing how to update to a specific master revision\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/update.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc update --rev master\n```\n\n----------------------------------------\n\nTITLE: Adding a Relative Path as DVC Remote\nDESCRIPTION: This command adds a DVC remote using a relative path. The path is resolved relative to the current working directory but saved relative to the config file location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d myremote ../dvcstore\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Hugging Face Datasets Integration\nDESCRIPTION: Installation command for both datasets library and DVC to enable loading DVC data with Hugging Face Datasets.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/huggingface.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install datasets dvc\n```\n\n----------------------------------------\n\nTITLE: Function Definition - DVC API Open\nDESCRIPTION: Core function definition for dvc.api.open() showing all available parameters including path, repo, rev, remote configurations and file opening modes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef open(path: str,\n         repo: str = None,\n         rev: str = None,\n         remote: str = None,\n         remote_config: dict = None,\n         config: dict = None,\n         mode: str = \"r\",\n         encoding: str = None)\n```\n\n----------------------------------------\n\nTITLE: Running Grid Search with DVC\nDESCRIPTION: Demonstrate how to queue multiple experiments for hyperparameter grid search using parameter ranges and choices.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/run.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run -S 'train.min_split=8,64' -S 'train.n_est=range(100,500,100)' --queue\nQueueing with overrides '{'params.yaml': ['train.min_split=8', 'train.n_est=100']}'.\nQueued experiment 'azure-ices' for future execution.\nQueueing with overrides '{'params.yaml': ['train.min_split=8', 'train.n_est=200']}'.\nQueued experiment 'zingy-peri' for future execution.\nQueueing with overrides '{'params.yaml': ['train.min_split=8', 'train.n_est=300']}'.\nQueued experiment 'jammy-feds' for future execution.\nQueueing with overrides '{'params.yaml': ['train.min_split=8', 'train.n_est=400']}'.\nQueued experiment 'lowse-shay' for future execution.\nQueueing with overrides '{'params.yaml': ['train.min_split=64', 'train.n_est=100']}'.\nQueued experiment 'brown-hugs' for future execution.\nQueueing with overrides '{'params.yaml': ['train.min_split=64', 'train.n_est=200']}'.\nQueued experiment 'local-scud' for future execution.\nQueueing with overrides '{'params.yaml': ['train.min_split=64', 'train.n_est=300']}'.\nQueued experiment 'alpha-neck' for future execution.\nQueueing with overrides '{'params.yaml': ['train.min_split=64', 'train.n_est=400']}'.\nQueued experiment 'algal-hood' for future execution.\n$ dvc queue start\n...\n```\n\n----------------------------------------\n\nTITLE: Logging Image with DVCLive in Python\nDESCRIPTION: Demonstrates logging an image using DVCLive, creating a numpy array and saving it as an image.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimg = np.ones((500, 500, 3), np.uint8)\nlive.log_image(\"image.png\", img)\n```\n\n----------------------------------------\n\nTITLE: DVCLiveCallback with Custom Directory Configuration\nDESCRIPTION: Shows how to customize the DVCLiveCallback instance by passing additional arguments to configure the Live instance directory.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/keras.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmodel.fit(\n    train_dataset,\n    epochs=num_epochs,\n    validation_data=validation_dataset,\n    callbacks=[DVCLiveCallback(dir=\"custom_dir\")])\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters in Python Format\nDESCRIPTION: This example demonstrates how to define parameters in a Python file, including various data types and class-based parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# All standard variable types are supported.\nBOOL = True\nINT = 5\nFLOAT = 0.001\nSTR = 'abc'\nDICT = {'a': 1, 'b': 2}\nLIST = [1, 2, 3]\nSET = {4, 5, 6}\nTUPLE = (10, 100)\nNONE = None\nUNARY_OP = -1\n\n# Complex expressions will be ignored.\nDICT_EXP = dict(a=1, b=2)\n\n# DVC can retrieve class constants and variables defined in __init__\nclass TrainConfig:\n\n    EPOCHS = 70\n\n    def __init__(self):\n        self.layers = 5\n        self.layers = 9  # TrainConfig.layers param will be 9\n        self.sum = 1 + 2  # Will NOT be found due to the expression\n        bar = 3  # Will NOT be found since it's locally scoped\n\n\nclass TestConfig:\n\n    TEST_DIR = 'path'\n    METRICS = ['metric']\n```\n\n----------------------------------------\n\nTITLE: Logging Metrics with DVCLive in Python\nDESCRIPTION: Python code snippet demonstrating how to use DVCLive to log metrics and send live updates to DVC Studio during model training.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/experiments/live-metrics-and-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n  for i in range(params[\"epochs\"]):\n    ...\n    live.log_metric(\"accuracy\", accuracy)\n    live.next_step()\n  ...\n```\n\n----------------------------------------\n\nTITLE: Combined DVC and Git Status Example\nDESCRIPTION: Shows how to use both `dvc data status` and `git status` commands together to get a complete view of all changes in the repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/data/status.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc data status\nNot in cache:\n  (use \"dvc fetch <file>...\" to download files)\n        data/data.xml\n\nDVC committed changes:\n  (git commit the corresponding dvc files to update the repo)\n        modified: data/features/\n\nDVC uncommitted changes:\n  (use \"dvc commit <file>...\" to track changes)\n  (use \"dvc checkout <file>...\" to discard changes)\n        deleted: model.pkl\n(there are other changes not tracked by dvc, use \"git status\" to see)\n\n$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   dvc.lock\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n----------------------------------------\n\nTITLE: Logging Metric with DVCLive in Python\nDESCRIPTION: Shows how to log a single metric using DVCLive.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlive.log_metric(\"acc\", 0.9)\n```\n\n----------------------------------------\n\nTITLE: Using DVCLive Parameter Logging\nDESCRIPTION: Example showing how to use Live context manager to log multiple parameters like learning rate and number of iterations.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_param.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n    live.log_param(\"lr\", 1e-3)\n    live.log_param(\"n_iter\", 50)\n```\n\n----------------------------------------\n\nTITLE: Modifying SSH Remote User and Port in DVC CLI\nDESCRIPTION: Shows how to modify the user and port for an existing SSH remote storage in DVC. These commands override the values in the SSH URL if present.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/ssh.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote user myuser\n$ dvc remote modify myremote port 2222\n```\n\n----------------------------------------\n\nTITLE: Retrieving DVC Experiments in Python\nDESCRIPTION: Function signature for dvc.api.exp_show(). This function retrieves DVC experiments from a repository, with options to specify the repo, revisions, number of experiments, and other parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/exp_show.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef exp_show(\n    repo: Optional[str] = None,\n    revs: Optional[Union[str, List[str]]] = None,\n    num: int = 1,\n    param_deps: bool = False,\n    force: bool = False,\n    config: Optional[dict] = None,\n) -> List[Dict]:\n```\n\n----------------------------------------\n\nTITLE: Downloading Data from DVC Registry with CLI\nDESCRIPTION: This snippet shows how to use the 'dvc get' command to download a dataset from a DVC repository, similar to using wget or aws s3 cp.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/data-registry/tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc get https://github.com/example/registry music/songs\n```\n\n----------------------------------------\n\nTITLE: Comparing Different Versions of a Model with --rev Option\nDESCRIPTION: A multi-step example showing how to get different versions of a model file and rename them for comparison. This demonstrates using the '--rev' option to specify Git revisions and '--out' to set custom output paths.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/iterative/example-get-started\n$ cd example-get-started\n```\n\n----------------------------------------\n\nTITLE: Defining DVC Pipeline Stage for Model Training (CLI)\nDESCRIPTION: Shows how to define a DVC pipeline stage for model training using the command-line interface. It includes dependencies, outputs, and the command to run the training script.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/how-it-works.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add --name train \\\n  --deps data_dir --deps src/train.py \\\n  --outs model.pt --outs dvclive \\\n  python train.py\n```\n\n----------------------------------------\n\nTITLE: DVC YAML Configuration for Data Split Stage\nDESCRIPTION: This YAML snippet shows the configuration for the 'data_split' stage in the DVC pipeline. It includes the command to run, dependencies, parameters, and outputs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-pipelines.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  data_split:\n    cmd: python src/data_split.py\n    deps:\n      - src/data_split.py\n      - data/pool_data\n    params:\n      - base\n      - data_split\n    outs:\n      - data/train_data\n      - data/test_data\n```\n\n----------------------------------------\n\nTITLE: Creating DVCFileSystem Instances for Local and Remote Repositories\nDESCRIPTION: Examples showing how to initialize DVCFileSystem objects for both local and remote DVC repositories. The remote example uses a GitHub URL and specifies a Git branch.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from dvc.api import DVCFileSystem\n# opening a local repository\n>>> fs = DVCFileSystem(\"/path/to/local/repository\")\n# opening a remote repository\n>>> url = \"https://github.com/iterative/example-get-started.git\"\n>>> fs = DVCFileSystem(url, rev=\"main\")\n```\n\n----------------------------------------\n\nTITLE: Converting DVC Experiments to Pandas DataFrame\nDESCRIPTION: Shows how to convert DVC experiments data into a Pandas DataFrame for analysis\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/comparing-experiments.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nimport pandas as pd\n\ndf = pd.DataFrame(dvc.api.exp_show())\n```\n\n----------------------------------------\n\nTITLE: Structured NumPy Array Plot Example\nDESCRIPTION: Example showing how to create a smooth plot using a structured NumPy array with named columns.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_plot.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom dvclive import Live\nfrom sklearn.datasets import load_iris\n\n# Create a structured array\niris = load_iris()\ndtypes = [(name, float) for name in iris.feature_names]\ndata = np.array([tuple(row) for row in iris.data], dtype=dtypes)\n\nwith Live() as live:\n\n    live.log_plot(\n        \"sepal_array_named\",\n        data,\n        x=\"sepal length (cm)\",\n        y=\"sepal width (cm)\",\n        template=\"smooth\",\n        title=\"Numpy Array with Names\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Live.log_image() with Various Image Types in Python\nDESCRIPTION: Examples of using Live.log_image() to log different types of images: NumPy arrays, Matplotlib figures, PIL images, and existing image files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_image.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live(cache_images=True) as live:\n    # 1. Log an image from a numpy array:\n    import numpy as np\n    img_numpy = np.ones((500, 500), np.uint8) * 255\n    live.log_image(\"numpy.png\", img_numpy)\n\n    # 2. Or log a matplotlib figure:\n    from matplotlib import pyplot as plt\n    fig, ax = plt.subplots()\n    ax.plot([1, 2, 3, 4])\n    live.log_image(\"matplotlib.png\", fig)\n\n    # 3. Or log a `PIL.image`:\n    from PIL import Image\n    img_pil = Image.new(\"RGB\", (500, 500), (250, 250, 250))\n    live.log_image(\"pil.png\", img_pil)\n\n    # 4. Or log an existing image:\n    live.log_image(\"sample.png\", \"run/batch_0_sample.png\")\n```\n\n----------------------------------------\n\nTITLE: Listing Data in DVC Registry with CLI\nDESCRIPTION: This snippet demonstrates how to use the 'dvc list' command to explore the contents of a DVC repository, showing both Git-tracked files and DVC-tracked data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/data-registry/tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc list -R https://github.com/iterative/dataset-registry\n.gitignore\nREADME.md\nget-started/.gitignore\nget-started/data.xml\nget-started/data.xml.dvc\nimages/.gitignore\nimages/dvc-logo-outlines.png\n...\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific Stage Outputs\nDESCRIPTION: Shows how to download outputs of a specific stage using the 'dvc pull' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/pull.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc pull train\n```\n\n----------------------------------------\n\nTITLE: DVC Stage with Parameters\nDESCRIPTION: This YAML snippet shows a DVC stage definition that includes parameter dependencies, specifying which parameters from the params.yaml file are used.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfeaturize:\n  cmd: python src/featurization.py data/prepared data/features\n  deps:\n    - data/prepared\n    - src/featurization.py\n  params:\n    - featurize.max_features\n    - featurize.ngrams\n  outs:\n    - data/features\n```\n\n----------------------------------------\n\nTITLE: Running DVC Experiment with Multiple Parameter Overrides\nDESCRIPTION: Executes a DVC experiment while overriding multiple parameter values using the -S shorthand option.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/running-experiments.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run -S train.img_size=1024 -S train.batch_size=512  # set multiple params\n...\n```\n\n----------------------------------------\n\nTITLE: DVC Pipeline Stage Example\nDESCRIPTION: Example of a prepare stage in dvc.yaml showing command, dependencies and outputs\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/defining-pipelines.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  prepare:\n    cmd: source src/cleanup.sh\n    deps:\n      - src/cleanup.sh\n      - data/raw\n    outs:\n      - data/clean.csv\n```\n\n----------------------------------------\n\nTITLE: Defining Pipeline Stages in DVC YAML\nDESCRIPTION: Example showing how to define a pipeline stage with command, dependencies and outputs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  transpose:\n    cmd: ./trans.r rows.txt > columns.txt\n    deps:\n      - rows.txt\n    outs:\n      - columns.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring an S3 Remote in DVC\nDESCRIPTION: Shows how to add and modify an S3 remote storage location using 'dvc remote add' and 'dvc remote modify' commands, including setting a custom endpoint URL.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add newremote s3://mybucket/path\n$ dvc remote modify newremote endpointurl https://object-storage.example.com\n```\n\n----------------------------------------\n\nTITLE: Function Definition - log_sklearn_plot Method\nDESCRIPTION: Core method signature for generating scikit-learn plots with type hints for parameters. Supports various plot types including calibration, confusion matrix, DET, precision-recall, and ROC curves.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_sklearn_plot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef log_sklearn_plot(\n  kind: Literal['calibration', 'confusion_matrix', 'det', 'precision_recall', 'roc'],\n  labels,\n  predictions,\n  name: Optional[str] = None,\n  **kwargs):\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Parameters for Dictionary Unpacking in DVC\nDESCRIPTION: Example of defining a complex dictionary in params.yaml that can be used for dictionary unpacking in DVC stage commands. It includes nested structures and lists.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nmydict:\n  foo: foo\n  bar: 1\n  bool: true\n  nested:\n    baz: bar\n  list: [2, 3, 'qux']\n```\n\n----------------------------------------\n\nTITLE: Getting the Storage URL of a DVC-tracked File\nDESCRIPTION: An example demonstrating how to use the '--show-url' option to display the actual storage location of a DVC-tracked file without downloading it. This reveals the remote storage URL for the model file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get --show-url \\\n          https://github.com/iterative/example-get-started model.pkl\nhttps://remote.dvc.org/get-started/c8/d307aa005d6974a8525550956d5fb3\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Pipeline Stage\nDESCRIPTION: DVC pipeline stage for data preprocessing using SageMaker Processing job with S3 input/output tracking\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/sagemaker.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npreprocessing:\n  cmd: python sm_preprocessing.py --bucket ${bucket} --prefix ${prefix}\n  deps:\n    - sm_preprocessing.py\n    - preprocessing.py\n    - s3://${bucket}/${prefix}/input_data\n  outs:\n    - s3://${bucket}/${prefix}/train:\n        cache: false\n    - s3://${bucket}/${prefix}/validation:\n        cache: false\n    - s3://${bucket}/${prefix}/test:\n        cache: false\n```\n\n----------------------------------------\n\nTITLE: Confusion Matrix Plot Example\nDESCRIPTION: Example of generating a confusion matrix plot using sample classification data with multiple classes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_sklearn_plot.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ny_true = [1, 1, 2, 2]\ny_pred = [2, 1, 1, 2]\nlive.log_sklearn_plot(\"confusion_matrix\", y_true, y_pred)\n```\n\n----------------------------------------\n\nTITLE: Committing DVC Metadata to Git\nDESCRIPTION: Commands to add the generated DVC metadata file and gitignore to Git tracking and commit them.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ git add data/data.xml.dvc data/.gitignore\n$ git commit -m \"Add raw data\"\n```\n\n----------------------------------------\n\nTITLE: Creating Train and Evaluate Stages in DVC Pipeline\nDESCRIPTION: These CLI commands create 'train' and 'evaluate' stages in the DVC pipeline. They specify the scripts to run, their dependencies, parameters, and outputs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-pipelines.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n train \\\n  -p base,train \\\n  -d src/train.py -d data/train_data \\\n  -o models/model.pkl \\\n  python src/train.py\n\n$ dvc stage add -n evaluate \\\n  -p base,evaluate \\\n  -d src/evaluate.py -d models/model.pkl -d data/test_data \\\n  -o results python src/evaluate.py\n```\n\n----------------------------------------\n\nTITLE: Advanced Example: Using SCM API with DVC Experiment API\nDESCRIPTION: Shows how to integrate the SCM API with other DVC APIs by passing tag revisions to exp_show() and loading the results into a pandas DataFrame.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/scm.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nimport pandas as pd\n\nall_tags = dvc.api.scm.all_tags()\nexps = dvc.api.exp_show(revs=all_tags)\n```\n\n----------------------------------------\n\nTITLE: DVC Lock File Structure\nDESCRIPTION: Example of a dvc.lock file structure showing stage definitions, dependencies, parameters, and outputs with their corresponding hash values and sizes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nschema: '2.0'\nstages:\n  features:\n    cmd: jupyter nbconvert --execute featurize.ipynb\n    deps:\n      - path: data/clean\n        md5: d8b874c5fa18c32b2d67f73606a1be60\n    params:\n      params.yaml:\n        levels.no: 5\n    outs:\n      - path: features\n        md5: 2119f7661d49546288b73b5730d76485\n        size: 154683\n      - path: performance.json\n        md5: ea46c1139d771bfeba7942d1fbb5981e\n        size: 975\n      - path: logs.csv\n        md5: f99aac37e383b422adc76f5f1fb45004\n        size: 695947\n```\n\n----------------------------------------\n\nTITLE: Working with remote DVC datasets without full download\nDESCRIPTION: Demonstrates how to selectively pull, modify, and push specific files in a remote dataset without having to download the entire dataset, saving time and bandwidth.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/modifying-large-datasets.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ tree\n.\n└── images.dvc\n\n0 directories, 1 file\n\n$ dvc pull images/test/0\n\n$ cp ~/Downloads/new.png images/test/0/70001.png\n\n$ dvc add images/test/0/70001.png\n100% Adding...|████████████████████████████████████████|1/1 [00:00,  1.73file/s]\n\n$ dvc push\n2 files pushed\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Type Configuration\nDESCRIPTION: Example showing how to configure cache type with fallback options in DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/config.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config cache.type reflink,copy\n```\n\n----------------------------------------\n\nTITLE: Modifying Parameters with DVC Experiments\nDESCRIPTION: Examples of modifying parameters using DVC's experiment run command with different parameter override options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/run.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\ndvc exp run -S 'prepare.split=0.1' -S 'featurize.max_features=100'\n...\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run -S 'train_config.json:+train.weight_decay=0.001'\n...\n\n$ dvc params diff --targets train_config.json\nPath               Param                HEAD    workspace\ntrain_config.json  train.weight_decay   -       0.001\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Version of a Model File\nDESCRIPTION: Using the '--rev' option to download a specific version (baseline-experiment) of a model file, and the '--out' option to save it with a custom name.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get . model.pkl --rev baseline-experiment \\\n                      --out model.monograms.pkl\n```\n\n----------------------------------------\n\nTITLE: Comparing DVC Plots\nDESCRIPTION: This CLI command shows how to generate a visual comparison of plots between different iterations of the ML pipeline using dvc plots diff.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots diff\nfile:///Users/dvc/example-get-started/plots.html\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Remote Aliases\nDESCRIPTION: Demonstrates how to set up and use remote aliases for external dependencies, including authentication configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/external-dependencies-and-outputs.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add myssh ssh://user@example.com\n$ dvc remote modify --local myssh password 'mypassword'\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n download_file \\\n          -d remote://myssh/path/to/data.txt \\\n          -o data.txt \\\n          wget https://example.com/data.txt -O data.txt\n```\n\n----------------------------------------\n\nTITLE: DVC Config for Local Directory Remote\nDESCRIPTION: This shows the resulting configuration in the DVC config file after adding a local directory as a remote using an absolute path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/index.md#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# .dvc/config\n['remote \"myremote\"']\n    url = /tmp/dvcstore\n```\n\n----------------------------------------\n\nTITLE: Viewing Interpolated Values in DVC with Verbose Mode\nDESCRIPTION: Demonstrates using verbose mode with 'dvc repro -vv' or 'dvc exp run -vv' to inspect interpolated values from templating or Hydra composition in the pipeline.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/running-pipelines.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n2023-05-18 07:38:43,955 TRACE: Hydra composition enabled.\nContents dumped to params.yaml: {'model': {'batch_size':\n512, 'latent_dim': 8, 'lr': 0.01, 'duration': '00:00:30:00',\n'max_epochs': 2}, 'data_path': 'fra.txt', 'num_samples':\n100000, 'seed': 423}\n2023-05-18 07:38:44,027 TRACE: Context during resolution of\nstage download: {'model': {'batch_size': 512, 'latent_dim':\n8, 'lr': 0.01, 'duration': '00:00:30:00', 'max_epochs': 2},\n'data_path': 'fra.txt', 'num_samples': 100000, 'seed': 423}\n2023-05-18 07:38:44,073 TRACE: Context during resolution of\nstage train: {'model': {'batch_size': 512, 'latent_dim': 8,\n'lr': 0.01, 'duration': '00:00:30:00', 'max_epochs': 2},\n'data_path': 'fra.txt', 'num_samples': 100000, 'seed': 423}\n```\n\n----------------------------------------\n\nTITLE: Filtering DVC Experiment Output with Multiple Options\nDESCRIPTION: Shows how to combine --only-changed, --drop, and --keep flags to filter experiment output, demonstrating flag priority where --keep has highest precedence.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show --only-changed --drop Created --keep 'train.(?!seed)'\n```\n\n----------------------------------------\n\nTITLE: Running DVC Experiment with Hydra Overrides\nDESCRIPTION: Example of running a DVC experiment with Hydra parameter overrides.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --set-param 'train/model=efficientnet'\n```\n\n----------------------------------------\n\nTITLE: Initializing GTO Registry Status Check\nDESCRIPTION: Shows how to clone an example model registry and check its current state using the gto show command. Displays artifacts, their latest versions, and deployment stages.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ git clone https://github.com/iterative/example-gto\n$ cd example-gto\n\n$ gto show\n╒══════════╤══════════╤════════╤═════════╤════════════╕\n│ name     │ latest   │ #dev   │ #prod   │ #staging   │\n╞══════════╪══════════╪════════╪═════════╪════════════╡\n│ churn    │ v3.1.1   │ v3.1.1 │ v3.0.0  │ v3.1.0     │\n│ segment  │ v0.4.1   │ v0.4.1 │ -       │ -          │\n│ cv-class │ v0.1.13  │ -      │ -       │ -          │\n╘══════════╧══════════╧════════╧═════════╧════════════╛\n```\n\n----------------------------------------\n\nTITLE: Generating Metrics with Python and DVCLive\nDESCRIPTION: This Python script demonstrates how to generate metrics using the DVCLive library. It logs random values for 'AUC' and 'TP' metrics.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/diff.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# train.py\nimport random\nfrom dvclive import Live\n\nwith Live() as live:\n    live.log_metric(\"AUC\", random.random())\n    live.log_metric(\"TP\", random.randint(0, 1000))\n```\n\n----------------------------------------\n\nTITLE: DVCLive Metrics Logging Example\nDESCRIPTION: Python code example showing how to log metrics using DVCLive within a machine learning workflow.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n    ...\n    live.log_metric(\"AUC\", auc)\n    live.log_metric(\"error\", error)\n    live.log_metric(\"TP\", tp)\n```\n\n----------------------------------------\n\nTITLE: Pulling with Dependencies\nDESCRIPTION: Demonstrates how to use the '--with-deps' option to pull data for a specific stage and its dependencies.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/pull.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc pull --with-deps featurize\n\n# Use the partial update...\n# Then pull the remaining data:\n\n$ dvc pull\n```\n\n----------------------------------------\n\nTITLE: Installing DVCLive for Model Tracking\nDESCRIPTION: Command to install the DVCLive Python library which is required for model artifact tracking in DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/model-registry/add-model.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install dvclive\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Split Stage in DVC Pipeline\nDESCRIPTION: This CLI command creates a 'data_split' stage in the DVC pipeline. It specifies the script to run, its dependencies, parameters, and outputs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-pipelines.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add --name data_split \\\n  --params base,data_split \\\n  --deps data/pool_data --deps src/data_split.py \\\n  --outs data/train_data --outs data/test_data \\\n  python src/data_split.py\n```\n\n----------------------------------------\n\nTITLE: Comparing a Specific Experiment with Baseline\nDESCRIPTION: Example showing how to compare a specific experiment ('gluey-leak') with the baseline experiment (HEAD), displaying the differences in metrics and parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/diff.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp diff gluey-leak\nPath         Metric  HEAD     gluey-leak  Change\nscores.json  auc     0.61314  0.577565    -0.035575\n\nPath         Param                   HEAD  gluey-leak  Change\nparams.yaml  featurize.max_features  2000  1500        -500\n```\n\n----------------------------------------\n\nTITLE: Checking Metrics and Running Experiments in DVC\nDESCRIPTION: Display current metrics and run a new experiment with modified data size to compare results.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/run.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc metrics show\nPath         avg_prec    roc_auc\nscores.json  0.60405     0.9608\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ truncate --size=20M data/data.xml\n$ dvc exp run\n...\nReproduced experiment(s): puffy-daks\nExperiment results have been applied to your workspace.\n\n$ dvc metrics diff\nPath         Metric    HEAD     workspace  Change\nscores.json  avg_prec  0.60405  0.56103    -0.04302\nscores.json  roc_auc   0.9608   0.94003    -0.02077\n```\n\n----------------------------------------\n\nTITLE: Registering DvcliveLoggerHook in OpenMMlab config file\nDESCRIPTION: This snippet shows how to add the DvcliveLoggerHook to the log_config dictionary in an OpenMMlab project's configuration file. It sets up logging at 100-step intervals using both TextLoggerHook and DvcliveLoggerHook.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/mmcv.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlog_config = dict(\n    interval=100,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='DvcliveLoggerHook')\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: DVC YAML Model Artifact Configuration\nDESCRIPTION: Example of how the model artifact information is stored in the dvc.yaml file after using the log_artifact method. It includes the model path, type, description, and labels.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/model-registry/add-model.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nartifacts:\n  pool-segmentation:\n    path: models/model.pkl\n    type: model\n    desc:\n      This is a Computer Vision (CV) model that's segmenting out swimming pools\n      from satellite images.\n    labels:\n      - cv\n      - segmentation\n      - satellite-images\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Deployment Job\nDESCRIPTION: Deployment job configuration that checks parsed model information and proceeds with deployment if conditions are met. Includes conditions for both GitHub and GitLab implementations.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/model-registry/model-cicd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy-model:\n  needs: parse\n  # using the outputs from the \"parse\" job, we run this job only for actions\n  # in the model registry and only when the model was assigned to a stage called \"prod\"\n  # You can replace the conditions with your own\n  if:\n    ${{ needs.parse.outputs.event == 'assignment' && needs.parse.outputs.stage\n    == 'prod' }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy-model:\n  needs:\n    - job: parse\n      artifacts: true\n  image: python:3.11-slim\n  script:\n    # Check if the model is assigned to prod (variables from parse.env are only available in the 'script' section)\n    # You can replace the conditions with your own\n    - if [[ $MODEL_EVENT == 'assignment' && $MODEL_STAGE == 'prod' ]]; then echo\n      \"Deploy model\"; else exit 1; fi\n```\n\n----------------------------------------\n\nTITLE: Importing Data from DVC Registry with CLI\nDESCRIPTION: This snippet demonstrates how to use 'dvc import' to download data and save dependency information, and 'dvc update' to keep the data up to date with changes in the source repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/data-registry/tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import https://github.com/example/registry images/faces\n\n$ dvc update faces.dvc\n```\n\n----------------------------------------\n\nTITLE: Logging Multiple Parameters with DVCLive in Python\nDESCRIPTION: Shows how to log multiple parameters at once using DVCLive.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nparams = {\n    \"num_classes\": 10,\n    \"metrics\": [\"accuracy\", \"mae\"],\n    \"optimizer\": \"adam\"\n}\nlive.log_params(params)\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC diff Command Usage in Bash\nDESCRIPTION: Shows the usage syntax for the 'dvc diff' command, including available options and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/diff.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc diff [-h] [-q | -v]\n                [--targets [<paths> [<paths> ...]]]\n                [--json] [--show-hash] [--md]\n                [a_rev] [b_rev]\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Experiment Display\nDESCRIPTION: Shows the basic usage of dvc exp show command to display workspace and experiments derived from HEAD with all metrics, parameters and dependencies.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show\n```\n\nLANGUAGE: dvctable\nCODE:\n```\n ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  neutral:**Experiment**                   neutral:**Created**        metric:**avg_prec**   metric:**roc_auc**   param:**prepare.split**   param:**prepare.seed**   param:**featurize.max_features**   param:**featurize.ngrams**   param:**train.seed**   param:**train.n_est**   param:**train.min_split**   dep:**data/prepared**   dep:**src/train.py**   dep:**src/evaluate.py**   dep:**src/prepare.py**   dep:**data/features**   dep:**data/data.xml**   dep:**model.pkl**   dep:**src/featurization.py**\n ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  workspace                    -               0.60405    0.9608   0.2             20170428       3000                     2                  20170428     100           64                20b786b         9ab9549        fb7b520           51549a1          52c1fdd         a304afb         484fab5     61c5927\n  random-forest-experiments    May 29, 2021    0.60405    0.9608   0.2             20170428       3000                     2                  20170428     100           64                20b786b         9ab9549        fb7b520           51549a1          52c1fdd         a304afb         484fab5     61c5927\n  ├── e7bd029 [unwet-jinn]     10:21 PM        0.58589     0.945   0.2             20170428       2000                     2                  20170428     100           64                20b786b         9ab9549        fb7b520           51549a1          2ac217b         a304afb         7aae464     61c5927\n  ├── a2efdc9 [urban-sign]     10:21 PM        0.55669   0.93516   0.2             20170428       1000                     2                  20170428     100           64                20b786b         9ab9549        fb7b520           51549a1          1b2d542         a304afb         e2b5a9a     61c5927\n  └── 56f3be3 [freed-roam]     10:21 PM        0.51799   0.92333   0.2             20170428       500                      2                  20170428     100           64                20b786b         9ab9549        fb7b520           51549a1          64ed644         a304afb         cfbfed4     61c5927\n ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example - ROC and Confusion Matrix Plots\nDESCRIPTION: Demonstrates how to use Live context manager to generate ROC and confusion matrix plots with sample data using log_sklearn_plot method.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_sklearn_plot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n  y_true = [0, 0, 1, 1]\n  y_pred = [1, 0, 1, 0]\n  y_score = [0.1, 0.4, 0.35, 0.8]\n  live.log_sklearn_plot(\"roc\", y_true, y_score)\n  live.log_sklearn_plot(\n    \"confusion_matrix\", y_true, y_pred, name=\"cm.json\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Metric Logging Path in DVCLive\nDESCRIPTION: This code snippet illustrates the file path structure used by DVCLive to log metrics. It shows how metrics are organized by split (train or eval) and metric name.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/fastai.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{Live.plots_dir}/metrics/{split}/{metric}.tsv\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC Queue Status\nDESCRIPTION: Demonstrates how to check the status of queued experiment tasks using the 'dvc queue status' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/logs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc queue status\nTask     Name    Created    Status\n192a13c          04:15 PM   Failed\n753b005          04:01 PM   Success\n0bbb118          04:01 PM   Success\n1ae8b65          04:01 PM   Success\n\nWorker status: 0 active, 0 idle\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean and List Templates in DVC\nDESCRIPTION: This code snippet illustrates how to configure the parsing settings for boolean and list types in DVC experiment commands. It includes examples of how to structure YAML files and how different parsing options affect the output command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndict:\n  bool-true: true\n  bool-false: false\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndict:\n  list: [1, 2, 'foo']\n\n```\n\nLANGUAGE: shell\nCODE:\n```\npython foo.py --bool-true\n\n```\n\nLANGUAGE: shell\nCODE:\n```\npython foo.py --bool-true --no-bool-false\n\n```\n\nLANGUAGE: shell\nCODE:\n```\npython foo.py --list 1 2 'foo'\n\n```\n\nLANGUAGE: shell\nCODE:\n```\npython foo.py --list 1 --list 2 --list 'foo'\n\n```\n\n----------------------------------------\n\nTITLE: Checking out DVC-tracked Files\nDESCRIPTION: Basic example of running the 'dvc checkout' command to restore tracked files and examining the MD5 hash of a restored model file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/checkout.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc checkout\n\n$ md5 model.pkl\nMD5 (data.xml) = ab349c2b5fa2a0f66d6f33f94424aebe\n```\n\n----------------------------------------\n\nTITLE: Comparing DVC Experiment Plots\nDESCRIPTION: Shows how to compare plots across different experiments using DVC CLI\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/comparing-experiments.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots diff $(dvc exp list --name-only)\n```\n\n----------------------------------------\n\nTITLE: Manipulating DVC Experiment Data with Pandas in Python\nDESCRIPTION: Advanced example showing how to select specific columns, clean up the data, and convert it to a markdown table using Pandas operations on the DVC experiment data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/exp_show.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncolumns = [\"Experiment\", \"dice_multi\", \"train.arch\"]\n\ndf = pd.DataFrame(dvc.api.exp_show(), columns=columns)\n\ndf.dropna(inplace=True)\ndf.reset_index(drop=True, inplace=True)\n\ndf.to_markdown()\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Blob Storage as DVC Remote\nDESCRIPTION: Uses dvc remote add command to define an Azure Blob Storage remote with a specified container and optional path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/azure-blob-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote azure://<mycontainer>/<path>\n```\n\n----------------------------------------\n\nTITLE: Modifying Dependencies and Outputs in DVC YAML\nDESCRIPTION: Example showing how to edit dvc.yaml to add a new dependency (data/raw.csv) and output (data/validate) to an existing 'prepare' stage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/add-deps-or-outs-to-a-stage.md#2025-04-21_snippet_0\n\nLANGUAGE: git\nCODE:\n```\n stages:\n   prepare:\n     cmd: python src/prepare.py\n     deps:\n+    - data/raw.csv\n     - src/prepare.py\n     outs:\n     - data/train\n+    - data/validate\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example - Opening DVC Tracked File\nDESCRIPTION: Simple example showing how to open a tracked file from a GitHub repository using dvc.api.open() as a context manager.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nwith dvc.api.open(\n    'get-started/data.xml',\n    repo='https://github.com/iterative/dataset-registry'\n) as f:\n    # ... f is a file-like object that can be processed normally.\n```\n\n----------------------------------------\n\nTITLE: Modifying an existing file in a DVC dataset\nDESCRIPTION: Shows how to update an existing file in a DVC dataset and track the changes using granular operations, which is more efficient than re-adding the entire dataset.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/modifying-large-datasets.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ cp ~/Downloads/updated.png images/test/0/00004.png\n\n$ dvc data status --granular\nDVC uncommitted changes:\n  (use \"dvc commit <file>...\" to track changes)\n  (use \"dvc checkout <file>...\" to discard changes)\n        modified: images/\n        modified: images/test/0/00004.png\n\n$ dvc add images/test/0/00004.png\n100% Adding...|████████████████████████████████████████|1/1 [00:00,  1.70file/s]\n\n$ dvc data status --granular\nDVC committed changes:\n  (git commit the corresponding dvc files to update the repo)\n        modified: images/\n        modified: images/test/0/00004.png\n(there are other changes not tracked by dvc, use \"git status\" to see)\n```\n\n----------------------------------------\n\nTITLE: Database Connection Configuration Example\nDESCRIPTION: Configures a PostgreSQL database connection with a connection string and database details\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n['db \"pgsql\"']\n  url = \"postgresql://user@host/dbname\"\n```\n\n----------------------------------------\n\nTITLE: Unstructured NumPy Array Plot Example\nDESCRIPTION: Example demonstrating how to create a linear plot from an unstructured NumPy array representing training loss over epochs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_plot.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom dvclive import Live\n\n# Create an unstructured array\nepochs = np.arange(1, 16)\nvalues = np.sort(np.random.uniform(0.45, 0.965, 15))\ndata = np.column_stack((epochs, values))\n\nwith Live() as live:\n    live.log_plot(\n        \"training_loss_plot\",\n        data,\n        x=\"0\",\n        y=\"1\",\n        template=\"linear\",\n        title=\"Training Loss\",\n        x_label=\"Epochs\",\n        y_label=\"Loss\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Files with DVC\nDESCRIPTION: Shows how to selectively check out only specific DVC-tracked files, including checking out a particular model after updating the dvc.lock file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/checkout.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ git checkout master\n$ dvc checkout            # Start with latest version of everything.\n\n$ git checkout baseline-experiment -- dvc.lock\n$ dvc checkout model.pkl  # Get previous model file only.\n```\n\n----------------------------------------\n\nTITLE: DVC Experiment Display with Regex Filtering\nDESCRIPTION: Demonstrates using regex patterns with --drop flag to filter multiple columns simultaneously from the experiment display.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show --drop 'avg_prec|train.min_split'\n```\n\nLANGUAGE: dvctable\nCODE:\n```\n ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  neutral:**Experiment**                      neutral:**Created**        metric:**roc_auc**   param:**prepare.split**   param:**prepare.seed**   param:**featurize.max_features**   param:**featurize.ngrams**   param:**train.seed**   param:**train.n_est**   dep:**src/prepare.py**   dep:**data/prepared**   dep:**data/features**   dep:**data/data.xml**   dep:**src/evaluate.py**   dep:**src/featurization.py**   dep:**src/train.py**   dep:**model.pkl**\n ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  workspace                       -               0.9608   0.2             20170428       3000                     2                  20170428     100           51549a1          20b786b         52c1fdd         a304afb         fb7b520           61c5927                9ab9549        484fab5\n  11-random-forest-experiments    May 29, 2021    0.9608   0.2             20170428       3000                     2                  20170428     100           51549a1          20b786b         52c1fdd         a304afb         fb7b520           61c5927                9ab9549        484fab5\n  ├── a2efdc9 [urban-sign]        10:21 PM       0.93516   0.2             20170428       1000                     2                  20170428     100           51549a1          20b786b         1b2d542         a304afb         fb7b520           61c5927                9ab9549        e2b5a9a\n  ├── e7bd029 [unwet-jinn]        10:21 PM         0.945   0.2             20170428       2000                     2                  20170428     100           51549a1          20b786b         2ac217b         a304afb         fb7b520           61c5927                9ab9549        7aae464\n```\n\n----------------------------------------\n\nTITLE: Metric Logging Path Structure\nDESCRIPTION: Demonstrates the directory structure where metrics are logged by DVCLive. Shows the path pattern for metric storage based on split type and metric name.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/keras.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{Live.plots_dir}/metrics/{split}/{metric}.tsv\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDAV Remote URL in DVC CLI\nDESCRIPTION: Shows how to modify the URL of an existing WebDAV remote in DVC. This is useful for updating the remote location or changing the path structure.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote url \\\n      webdavs://example.com/nextcloud/remote.php/dav/files/myuser/\n```\n\n----------------------------------------\n\nTITLE: DVC Pipeline Reproduction\nDESCRIPTION: Command to execute or restore pipeline versions\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndvc repro\n```\n\n----------------------------------------\n\nTITLE: Configuring S3-Compatible Storage for DVC Remote\nDESCRIPTION: Commands to add and configure a DVC remote for an S3-compatible storage service, using DigitalOcean Spaces as an example.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/amazon-s3.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote s3://mystore/path\n$ dvc remote modify myremote endpointurl \\\n                    https://nyc3.digitaloceanspaces.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameters from Specific Git Revision in Python\nDESCRIPTION: Example of using dvc.api.params_show() to retrieve parameters from a specific Git branch or commit.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport dvc.api\nparams = dvc.api.params_show(rev=\"tune-hyperparams\")\n```\n\n----------------------------------------\n\nTITLE: ROC Curve Plot Example\nDESCRIPTION: Example of generating a Receiver Operating Characteristic (ROC) curve plot using sample classification scores.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_sklearn_plot.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ny_true = [1, 1, 2, 2]\ny_score = [0.1, 0.4, 0.35, 0.8]\nlive.log_sklearn_plot(\"roc\", y_true, y_score)\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Data in JSON for DVC Plots\nDESCRIPTION: An example of hierarchical data in JSON format that can be used as input for DVC plots, containing training accuracy and loss values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"train\": [\n    { \"accuracy\": 0.96658, \"loss\": 0.10757 },\n    { \"accuracy\": 0.97641, \"loss\": 0.07324 },\n    { \"accuracy\": 0.87707, \"loss\": 0.08136 },\n    { \"accuracy\": 0.87402, \"loss\": 0.09026 },\n    { \"accuracy\": 0.8795, \"loss\": 0.0764 },\n    { \"accuracy\": 0.88038, \"loss\": 0.07608 },\n    { \"accuracy\": 0.89872, \"loss\": 0.08455 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Remote in CLI\nDESCRIPTION: Example of setting 'myremote' as the default remote using the CLI command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/default.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote default myremote\n```\n\n----------------------------------------\n\nTITLE: Visualizing JSON Data with DVC Plots\nDESCRIPTION: CLI command to show a plot from a JSON file using DVC, specifying the y axis. This generates an HTML file with the plot.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/visualizing-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots show train.json -y loss\nfile:///Users/usr/src/dvc_plots/index.html\n```\n\n----------------------------------------\n\nTITLE: Using DVC with Databricks Secrets\nDESCRIPTION: Example showing how to use Databricks secrets for accessing data with DVC's Python API.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/databricks.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nremote_config = {\n    'access_key_id': dbutils.secrets.get(scope='test_scope', key='aws_access_key_id'),\n    'secret_access_key': dbutils.secrets.get(scope='test_scope', key='aws_secret_access_key'),\n}\n\nwith dvc.api.open(\n    'recent-grads.csv',\n    repo='https://github.com/efiop/mydataregistry',\n    remote_config=remote_config\n) as fobj:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Comparing Two DVC Experiments\nDESCRIPTION: Example showing how to compare two specific experiments ('gluey-leak' and 'ochre-dook'), displaying the differences in metrics and parameters between them.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/diff.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp diff gluey-leak ochre-dook\nPath         Metric  gluey-leak  ochre-dook   Change\nscores.json  auc     0.577559    0.51676     -0.060799\n\nPath         Param                   gluey-leak  ochre-dook  Change\nparams.yaml  featurize.max_features  2000        500        -1500\n```\n\n----------------------------------------\n\nTITLE: Replacing DVC-tracked File\nDESCRIPTION: This snippet shows how to replace a DVC-tracked file by first removing it from DVC tracking, replacing its content, and then re-adding it to DVC and Git.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/update-tracked-data.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remove train.tsv.dvc\n$ echo new > train.tsv\n$ dvc add train.tsv\n$ git add train.tsv.dvc .gitignore\n$ git commit -m \"new train data\"\n\n# If you have remote storage and/or an upstream repo:\n$ dvc push\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Running DVC Repro with Cached Results\nDESCRIPTION: This snippet shows running dvc repro after changing a parameter back to its original value. It demonstrates how DVC uses cached results to avoid unnecessary reruns.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/data-pipelines.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc repro\nStage 'prepare' didn't change, skipping\nStage 'featurize' didn't change, skipping\n```\n\n----------------------------------------\n\nTITLE: Using DVCLive make_report Example\nDESCRIPTION: Example showing how to use Live class to log sklearn plot data and generate a report. Creates a confusion matrix plot and generates a report from the logged data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/make_report.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nlive = Live()\nlive.log_sklearn_plot(\"confusion_matrix\", [0, 0, 1, 1], [1, 0, 0, 1])\nlive.make_report()\n```\n\n----------------------------------------\n\nTITLE: Pushing DVC Experiments to a Git Remote\nDESCRIPTION: Example of pushing all experiments from the current HEAD to a Git remote named 'origin'. The command automatically uploads both the experiment references and associated data files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/push.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp push origin\nPushed experiment conic-ease, lucid-lair, and major-mela to Git remote 'origin'.\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plots\nDESCRIPTION: Command to generate a scatter plot comparing actual values against predicted probabilities.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_12\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots show probs.json -t scatter \\\n                             -x actual -y prob\n```\n\n----------------------------------------\n\nTITLE: DVC Parameters File Example\nDESCRIPTION: This YAML file (params.yaml) defines various parameters used in different stages of the ML pipeline, including data preparation, feature extraction, and model training.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprepare:\n  split: 0.20\n  seed: 20170428\n\nfeaturize:\n  max_features: 100\n  ngrams: 1\n\ntrain:\n  seed: 20170428\n  n_est: 50\n  min_split: 2\n```\n\n----------------------------------------\n\nTITLE: Deleting a file from a DVC dataset\nDESCRIPTION: Illustrates how to remove a file from a DVC dataset and track this deletion using granular commands, which is faster than operating on the entire dataset.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/modifying-large-datasets.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ rm images/test/0/00011.png\n\n$ dvc data status --granular\nDVC uncommitted changes:\n  (use \"dvc commit <file>...\" to track changes)\n  (use \"dvc checkout <file>...\" to discard changes)\n        modified: images/\n        deleted: images/test/0/00011.png\n\n$ dvc add images/test/0/00011.png\n100% Adding...|████████████████████████████████████████|1/1 [00:00,  1.73file/s]\n\n$ dvc data status --granular\nDVC committed changes:\n  (git commit the corresponding dvc files to update the repo)\n        modified: images/\n        deleted: images/test/0/00011.png\n(there are other changes not tracked by dvc, use \"git status\" to see)\n```\n\n----------------------------------------\n\nTITLE: DVC Remote Configuration Files\nDESCRIPTION: This snippet shows the content of DVC configuration files after setting up a remote. It includes the main config file, a local config file for sensitive information, and a .gitignore entry.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/index.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# .dvc/config\n['remote \"myremote\"']\n    url = s3://my-bucket\n    connect_timeout = 300\n```\n\nLANGUAGE: ini\nCODE:\n```\n# .dvc/config.local\n['remote \"myremote\"']\n    credentialpath = ~/.aws/alt\n```\n\nLANGUAGE: ini\nCODE:\n```\n# .gitignore\n.dvc/config.local\n```\n\n----------------------------------------\n\nTITLE: DVC Matrix Stage with Templating\nDESCRIPTION: This example demonstrates how to use templating within a `matrix` stage to reference variables defined elsewhere (e.g., in `params.yaml`). The `${processors}` and `${datasets}` parameters are used to populate the `processor` and `dataset` variables in the `matrix`, allowing for dynamic configuration of the stage based on external parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# params.yaml\ndatasets: [dataset1/, dataset2/]\nprocessors: [processor1, processor2]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# dvc.yaml\nstages:\n  preprocess:\n    matrix:\n      processor: ${processors}\n      dataset: ${datasets}\n\n    cmd: ./preprocess.py ${item.dataset} ${item.processor}\n    deps:\n    - ${item.dataset}\n    outs:\n    - ${item.dataset}-${item.processor}.json\n```\n\n----------------------------------------\n\nTITLE: Creating a DVC Stage and Adding a File in Bash\nDESCRIPTION: This example demonstrates how to create a dummy stage that copies a file 'foo' to 'bar' using DVC commands. It shows the process of creating a file, adding it to DVC, and creating a stage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unfreeze.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo foo > foo\n$ dvc add foo\n$ dvc stage add -n make_copy -d foo -o bar cp foo bar\n```\n\n----------------------------------------\n\nTITLE: DVC Status Example - Basic Output\nDESCRIPTION: Example showing basic dvc status output with changed dependencies and outputs across multiple stages.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/status.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc status\nbaz.dvc:\n\tchanged outs:\n\t\tmodified:           baz\ndofoo:\n\tchanged deps:\n\t\tmodified:           baz\n\tchanged outs:\n\t\tmodified:           foo\ndobar:\n\tchanged deps:\n\t\tmodified:           foo\n\tchanged outs:\n\t\tdeleted:            bar\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameters from Remote DVC Repository in Python\nDESCRIPTION: Example of using dvc.api.params_show() to retrieve parameters from a remote DVC repository without cloning it locally.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nparams = dvc.api.params_show(\n    repo=\"https://github.com/iterative/example-get-started\")\n```\n\n----------------------------------------\n\nTITLE: DVC Metrics Show Across Branches\nDESCRIPTION: Demonstrates how to compare metrics between different Git branches using the '--all-branches' option.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/show.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc metrics show -a\nRevision      Path       AUC      TP    error\nincrease_bow  eval.json  0.66524  521   0.17074\nmain          eval.json  0.66729  516   0.16982\n```\n\n----------------------------------------\n\nTITLE: Running DVC Experiment with Parameter Modification\nDESCRIPTION: Demonstrates how to run a DVC experiment using 'dvc exp run' command, modifying a parameter and showing the execution output for each stage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/running-pipelines.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --set-param featurize.ngrams=3\n\nReproducing experiment 'funny-dado'\n'data/data.xml.dvc' didn't change, skipping\nStage 'prepare' didn't change, skipping\nRunning stage 'featurize':\n> python src/featurization.py data/prepared data/features\nUpdating lock file 'dvc.lock'\n\nRunning stage 'train':\n> python src/train.py data/features model.pkl\nUpdating lock file 'dvc.lock'\n\nRunning stage 'evaluate':\n> python src/evaluate.py model.pkl data/features\nUpdating lock file 'dvc.lock'\n\nRan experiment(s): funny-dado\nExperiment results have been applied to your workspace.\n```\n\n----------------------------------------\n\nTITLE: Logging Images per Step with Live.log_image() in Python\nDESCRIPTION: Example of logging images for each step using a pattern that includes the step number in the filename, allowing for image slider visualization in DVC Studio and VSCode Extension.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_image.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom dvclive import Live\n\nwith Live() as live:\n    base_img = np.ones((500, 500), np.uint8)\n    for i in range(10):\n      live.log_image(\n        f\"numpy/{live.step}.png\", base_img * i * 10)\n      live.next_step()\n```\n\n----------------------------------------\n\nTITLE: Using DVC-tracked Data in Stage Definition\nDESCRIPTION: Example of using a DVC-tracked directory as a dependency in a stage definition.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n train \\\n                -d train.py -d pics \\\n                -M metrics.json -o model.h5 \\\n                python train.py\n```\n\n----------------------------------------\n\nTITLE: Applying SSL Certificate Changes with Helm for DVC Studio\nDESCRIPTION: This command uses Helm to upgrade the DVC Studio installation with the updated values.yaml file, which includes the new SSL certificate. It targets the 'studio' namespace.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/ssl.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nhelm upgrade studio iterative/studio --namespace studio -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Comparing DVC Metrics\nDESCRIPTION: This CLI command demonstrates how to compare metric values between the current workspace and the last commit using dvc metrics diff.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc metrics diff\nPath               Metric          HEAD     workspace    Change\neval/metrics.json  avg_prec.test   0.9014   0.925        0.0236\neval/metrics.json  avg_prec.train  0.95704  0.97437      0.01733\neval/metrics.json  roc_auc.test    0.93196  0.94602      0.01406\neval/metrics.json  roc_auc.train   0.97743  0.98667      0.00924\n```\n\n----------------------------------------\n\nTITLE: Loading DVC Data with Hugging Face Datasets\nDESCRIPTION: Python code example demonstrating how to load data from a DVC project using Hugging Face Datasets library with DVCFileSystem.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/huggingface.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from datasets import load_dataset\n>>> load_dataset(\n...     \"csv\",\n...     data_files=\"dvc://workshop/satellite-data/jan_train.csv\",\n...     storage_options={\"url\": \"https://github.com/iterative/dataset-registry.git\"}\n... )\n```\n\n----------------------------------------\n\nTITLE: Running DVC Pipeline with Selective Data Pulling\nDESCRIPTION: Shows how to run a DVC pipeline using 'dvc exp run' with '--pull' and '--allow-missing' flags to selectively pull missing data and skip stages with only missing data changes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/running-pipelines.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --pull --allow-missing --set-param evaluate.n_samples_to_save=20\nReproducing experiment 'hefty-tils'\n'data/pool_data.dvc' didn't change, skipping\nStage 'data_split' didn't change, skipping\nStage 'train' didn't change, skipping\nRunning stage 'evaluate':\n...\n```\n\n----------------------------------------\n\nTITLE: Using GTO CLI to Assign a Stage to a Model Version\nDESCRIPTION: Command-line examples showing how to use GTO (Git-Tag-Operation) to assign stages to model versions. The examples demonstrate assigning a 'dev' stage to a model version, including cases where the model is in the root directory or in a subdirectory.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/model-registry/assign-stage.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngto assign pool-segmentation --version v0.0.1 --stage dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ngto assign cv:pool-segmentation --version v0.0.1 --stage dev\n```\n\n----------------------------------------\n\nTITLE: Advanced Plot Configuration in DVC YAML\nDESCRIPTION: A more complex example of plot configuration in dvc.yaml, including custom plot ID, multiple data sources, and axis labels.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/visualizing-plots.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - ROC:\n      x: fpr\n      y:\n        evaluation/train/plots/roc.json: tpr\n        evaluation/test/plots/roc.json: tpr\n      title: Train vs. Test ROC\n      x_label: False Positive Rate\n      y_label: True Positive Rate\n```\n\n----------------------------------------\n\nTITLE: DVC Data Status with Granular File Information\nDESCRIPTION: Demonstrates using the `--granular` flag to show detailed file-level changes inside DVC-tracked directories.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/data/status.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc data status --granular\nNot in cache:\n  (use \"dvc fetch <file>...\" to download files)\n        data/data.xml\n\nDVC committed changes:\n  (git commit the corresponding dvc files to update the repo)\n        added: data/features/foo\n\nDVC uncommitted changes:\n  (use \"dvc commit <file>...\" to track changes)\n  (use \"dvc checkout <file>...\" to discard changes)\n        deleted: model.pkl\n(there are other changes not tracked by dvc, use \"git status\" to see)\n```\n\n----------------------------------------\n\nTITLE: Comparing an Experiment with a Git Revision\nDESCRIPTION: Example showing how to compare an experiment with a specific Git revision tag, displaying the differences in metrics and parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/diff.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp diff gluey-leak 7-ml-pipeline\nPath         Metric  gluey-leak  7-ml-pipeline  Change\nscores.json  auc     0.577559    None           diff not supported\n\nPath         Param                   gluey-leak  7-ml-pipeline  Change\nparams.yaml  featurize.max_features  2000        500            -1500\nparams.yaml  featurize.ngrams        2           1              -1\n```\n\n----------------------------------------\n\nTITLE: Enabling Hydra Composition in DVC\nDESCRIPTION: Command to enable Hydra composition feature in DVC configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config hydra.enabled True\n```\n\n----------------------------------------\n\nTITLE: DVC File Structure for Directory\nDESCRIPTION: Example of the .dvc file structure generated when adding an entire directory (pics) to DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nouts:\n  - md5: ce57450aa92ab8f2b957c24b0df73edc.dir\n    path: pics\n```\n\n----------------------------------------\n\nTITLE: DVC Import and Update Example\nDESCRIPTION: Example showing how to import a model file and update it from an external repository\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/update.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import git@github.com:iterative/example-get-started model.pkl\nImporting 'model.pkl (git@github.com:iterative/example-get-started)'\n-> 'model.pkl'\n\n$ dvc update model.pkl.dvc\nOutput 'model.pkl' didn't change. Skipping saving.\nSaving information to 'model.pkl.dvc'.\n```\n\n----------------------------------------\n\nTITLE: Remote Storage Configuration Example\nDESCRIPTION: Defines a temporary remote storage location and sets it as the default remote\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n['remote \"temp\"']\n    url = /tmp/dvcstore\n[core]\n    remote = temp\n```\n\n----------------------------------------\n\nTITLE: Basic Pipeline Visualization Example\nDESCRIPTION: Shows the ASCII visualization of a standard DVC pipeline with prepare, featurize, train, and evaluate stages.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/dag.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc dag\n         +---------+\n         | prepare |\n         +---------+\n              *\n              *\n              *\n        +-----------+\n        | featurize |\n        +-----------+\n         **        **\n       **            *\n      *               **\n+-------+               *\n| train |             **\n+-------+            *\n         **        **\n           **    **\n             *  *\n        +----------+\n        | evaluate |\n        +----------+\n```\n\n----------------------------------------\n\nTITLE: DVC Data Status Command Synopsis\nDESCRIPTION: Shows the command-line syntax for the `dvc data status` command including all available options and flags.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/data/status.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc data status [-h] [-q | -v]\n                       [--granular] [--unchanged]\n                       [--untracked-files [{no,all}]]\n                       [--json]\n                       [--not-in-remote] [--no-remote-refresh]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of dvc.api.exp_show() in Python\nDESCRIPTION: Simple example of how to use the dvc.api.exp_show() function to retrieve experiments from a DVC repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/exp_show.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nexps = dvc.api.exp_show()\n```\n\n----------------------------------------\n\nTITLE: Updating Imported Data with DVC CLI\nDESCRIPTION: Shows how to use the dvc update command to check for changes in the source location of imported data and update if necessary.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/importing-external-data.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc update data.xml.dvc\n'data.xml.dvc' didn't change, skipping\n```\n\n----------------------------------------\n\nTITLE: Complete Example with URL Output\nDESCRIPTION: Full example showing how to retrieve the URL for a DVC-tracked file and print it. This shows both the code and the resulting URL that would be returned.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/get_url.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nresource_url = dvc.api.get_url(\n    'get-started/data.xml',\n    repo='https://github.com/iterative/dataset-registry',\n)\nprint(resource_url)\n```\n\n----------------------------------------\n\nTITLE: Function Definition of dvc.api.metrics_show() in Python\nDESCRIPTION: The function signature of metrics_show() showing its parameters including optional targets, repository location, revision, and configuration options. It returns a dictionary of metrics.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef metrics_show(\n    *targets: str,\n    repo: Optional[str] = None,\n    rev: Optional[str] = None,\n    config: Optional[dict] = None,\n) -> Dict:\n```\n\n----------------------------------------\n\nTITLE: Disabling SSL Verification for WebHDFS in DVC CLI\nDESCRIPTION: Shows how to disable SSL verification for a WebHDFS remote in DVC. This can be useful in certain development or testing scenarios, but should be used with caution.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_11\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote ssl_verify false\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Download and Deployment\nDESCRIPTION: Final deployment steps that configure DVC and download the specified model version. Shows implementation for both GitHub Actions and GitLab CI, including authentication setup.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/model-registry/model-cicd.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - uses: iterative/setup-dvc@v1\n  - name: Get Model For Deployment\n    run: |\n      dvc config --global studio.token ${{ secrets.DVC_STUDIO_TOKEN }}\n      dvc artifacts get  ${{ github.server_url }}/${{ github.repository }} ${{ needs.parse.outputs.name }} --rev ${{ needs.parse.outputs.version }}\n      echo \"The right model is available and you can use the rest of this command to deploy it. Good job!\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n  script:\n\n  ...\n\n  # Install DVC\n  - pip install dvc\n  # Build commands to download and deploy the model\n  - dvc config --global studio.token ${DVC_STUDIO_TOKEN}\n  - dvc artifacts get  ${CI_REPOSITORY_URL} ${MODEL_NAME} --rev ${MODEL_VERSION}\n  - echo \"The right model is available and you can use the rest of this command to deploy it. Good job!\"\n```\n\n----------------------------------------\n\nTITLE: Initializing DVCLive Logger Class Definition\nDESCRIPTION: Class constructor for DVCLive logger with configuration parameters for directory, resumption, reporting, DVC experiment integration, and system monitoring capabilities.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Live:\n\n    def __init__(\n        self,\n        dir: str = \"dvclive\",\n        resume: bool = False,\n        report: Literal[\"md\", \"notebook\", \"html\", None] = None,\n        save_dvc_exp: bool = True,\n        dvcyaml: Optional[str] = \"dvc.yaml\",\n        cache_images: bool = False,\n        exp_name: Optional[str] = None,\n        exp_message: Optional[str] = None,\n        monitor_system: bool = False,\n    ):\n```\n\n----------------------------------------\n\nTITLE: Sample Metrics Output Format in JSON\nDESCRIPTION: Example of the JSON structure returned by the metrics_show() function, showing metrics for training and validation datasets including average precision and ROC AUC values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avg_prec\": { \"train\": 0.97, \"val\": 0.92 },\n  \"roc_auc\": { \"train\": 0.98, \"val\": 0.94 }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a DVC Repository\nDESCRIPTION: Shows how to use the dvc list command to view contents of a remote DVC repository. This example displays both Git and DVC-tracked files in the example-get-started repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc list https://github.com/iterative/example-get-started\n.dvcignore\n.gitignore\nREADME.md\ndata\ndvc.lock\ndvc.yaml\nmodel.pkl\nparams.yaml\nprc.json\nscores.json\nsrc\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters in YAML Format\nDESCRIPTION: This example shows how to define parameters in a YAML file named 'params.yaml', which is the default file used by DVC for parameter tracking.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlr: 0.0041\n\ntrain:\n  epochs: 70\n  layers: 9\n\nprocess:\n  thresh: 0.98\n  bow: 15000\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Fetch Command Example\nDESCRIPTION: Example of checking status and fetching all tracked files from remote storage into the cache.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/fetch.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc status --cloud\n...\n\tdeleted:            data/features/train.pkl\n\tdeleted:            model.pkl\n\n$ dvc fetch\n\n$ tree .dvc/cache/files/md5\n.dvc/cache/files/md5\n├── 20\n│   └── b786b6e6f80e2b3fcf17827ad18597.dir\n├── c8\n│    ├── d307aa005d6974a8525550956d5fb3\n│    └── ...\n...\n```\n\n----------------------------------------\n\nTITLE: Viewing Dirty Pipeline Status in DVC\nDESCRIPTION: Shows the output of 'dvc status' when a parameter has been modified, displaying the changes in dependencies and outputs across multiple stages of the pipeline.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/running-pipelines.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc status\ndata_split:\n        changed deps:\n                deleted:            data/pool_data\n                params.yaml:\n                        modified:           data_split\n        changed outs:\n                not in cache:       data/test_data\n                not in cache:       data/train_data\ntrain:\n        changed deps:\n                deleted:            data/train_data\n        changed outs:\n                not in cache:       models/model.pkl\nevaluate:\n        changed deps:\n                deleted:            data/test_data\n                deleted:            models/model.pkl\ndata/pool_data.dvc:\n        changed outs:\n                not in cache:       data/pool_data\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for AWS Authentication in DVC\nDESCRIPTION: Example of using environment variables to set AWS credentials for DVC S3 remote authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/amazon-s3.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote s3://mybucket\n$ export AWS_ACCESS_KEY_ID='myid'\n$ export AWS_SECRET_ACCESS_KEY='mysecret'\n$ dvc push\n```\n\n----------------------------------------\n\nTITLE: Defining DVC Pipeline Stage for Model Training (YAML)\nDESCRIPTION: Demonstrates how to define a DVC pipeline stage for model training in YAML format. It specifies the command, dependencies, and outputs for the training stage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/how-it-works.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  train:\n    cmd: python train.py\n    deps:\n      - train.py\n      - data_dir\n    outs:\n      - model.pt\n      - dvclive\n```\n\n----------------------------------------\n\nTITLE: DVC Import and Update with Fixed Revision\nDESCRIPTION: Example demonstrating how to import from a specific revision and update to a different version\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/update.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import --rev baseline-experiment \\\n            git@github.com:iterative/example-get-started \\\n            model.pkl\nImporting 'model.pkl (git@github.com:iterative/example-get-started)'\n-> 'model.pkl'\n\n$ dvc update model.pkl.dvc\n\n$ dvc update --rev bigrams-experiment model.pkl.dvc\nImporting 'model.pkl (git@github.com:iterative/example-get-started)'\n-> 'model.pkl'\n```\n\n----------------------------------------\n\nTITLE: Using log_params Method in Python with DVCLive\nDESCRIPTION: Example of how to use the log_params method in a Python script. It demonstrates creating a Live object and logging a complex dictionary of parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nlive = Live()\n\nparams = {\n    \"num_classes\": 10,\n    \"metrics\": [\"accuracy\", \"mae\"],\n    \"training\": {\n        \"epochs\": 42,\n        \"batch_size\": 128,\n        \"optimizer\": {\n            \"name\": \"adam\",\n            \"loss\": \"categorical_crossentropy\",\n            \"learning_rate\": 1e-3,\n        },\n    },\n}\nlive.log_params(params)\n```\n\n----------------------------------------\n\nTITLE: Git Revision Metrics Output in JSON\nDESCRIPTION: Sample JSON output when retrieving metrics from a specific Git revision, showing metrics structure for training and validation datasets.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avg_prec\": { \"train\": 0.97, \"val\": 0.92 },\n  \"roc_auc\": { \"train\": 0.98, \"val\": 0.94 }\n}\n```\n\n----------------------------------------\n\nTITLE: Running DVC Experiment Pipeline\nDESCRIPTION: Executes the DVC experiment pipeline defined in the default dvc.yaml file using the dvc exp run command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/running-experiments.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run\n...\nReproduced experiment(s): matte-vies\n```\n\n----------------------------------------\n\nTITLE: Comparing Metrics Between Specific Git Commits in Bash\nDESCRIPTION: This example demonstrates how to use 'dvc metrics diff' to compare metrics between two specific Git commits using their hash values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/diff.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc metrics diff --targets metrics.json -- 305fb8b c7bef55\nPath                  Metric    305fb8b  c7bef55  Change\ndvclive/metrics.json  AUC       0.9643   0.9743   0.0100\ndvclive/metrics.json  TP        527      516      -11\n```\n\n----------------------------------------\n\nTITLE: Setting Up DVC Git Hooks for Automatic Checkout\nDESCRIPTION: Shows how to install Git hooks that automatically run 'dvc checkout' after Git operations, eliminating the need to manually run the command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/checkout.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc install\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret for Iterative AI\nDESCRIPTION: Configures Docker credentials for pulling images from Iterative AI's private registry. Requires username and password provided by the Iterative team.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/k8s-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ kubectl create secret docker-registry iterativeai \\\n    --namespace studio \\\n    --docker-server=docker.iterative.ai \\\n    --docker-username=<username> \\\n    --docker-password=<password>\n```\n\n----------------------------------------\n\nTITLE: Listing DVC Experiments from Remote Repository in Bash\nDESCRIPTION: Shows how to list experiments from a remote DVC repository using a Git URL. This example demonstrates accessing experiments in a GitHub repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/list.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp list --all-commits git@github.com:iterative/example-get-started.git\n10-bigrams-experiment:\n    bally-gude\n    conic-ease\n```\n\n----------------------------------------\n\nTITLE: Variable Definition in DVC YAML\nDESCRIPTION: Demonstrates how to define variables in dvc.yaml for model configuration and artifacts. Shows variable substitution in stage definitions using the ${} syntax.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  - models:\n      us:\n        threshold: 10\n        filename: 'model-us.hdf5'\n  - codedir: src\n\nartifacts:\n  model-us:\n    path: ${models.us.filename}\n    type: model\n\nstages:\n  build-us:\n    cmd: >\n      python ${codedir}/train.py --thresh ${models.us.threshold} --out\n      ${models.us.filename}\n    outs:\n      - ${models.us.filename}:\n          cache: true\n```\n\n----------------------------------------\n\nTITLE: Configuring External Output in DVC\nDESCRIPTION: Creates a DVC stage that uploads a file to an external location (S3) and tracks it as an output.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/external-dependencies-and-outputs.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n upload_file \\\n          -d data.txt \\\n          -O s3://mybucket/data.txt \\\n          aws s3 cp data.txt s3://mybucket/data.txt\n```\n\n----------------------------------------\n\nTITLE: Updating Step with DVCLive in Python\nDESCRIPTION: Demonstrates how to update the step number in DVCLive, which triggers summary and report generation.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlive.next_step()\n```\n\n----------------------------------------\n\nTITLE: Checking Status of the Downloaded Model Files\nDESCRIPTION: Using Git status to confirm that both model versions have been successfully downloaded with different names and are not tracked by Git.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git status\n...\nUntracked files:\n  (use \"git add <file> ...\" to include in what will be committed)\n\n\tmodel.bigrams.pkl\n\tmodel.monograms.pkl\n```\n\n----------------------------------------\n\nTITLE: DVC Queue Remove Command Usage Syntax\nDESCRIPTION: Command syntax showing how to use the dvc queue remove command. The command accepts optional flags for different types of task removal (all, queued, success, failed) and can target specific tasks through positional arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/remove.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc queue remove [-h] [-q | -v]\n                        [--all] [--queued] [--success] [--failed]\n                        [<task> ...]\n\npositional arguments:\n  <task>         Tasks in queue to remove.\n```\n\n----------------------------------------\n\nTITLE: Tracking Updated Data with DVC\nDESCRIPTION: Command to update DVC tracking after modifying the data file, creating a new version in the cache.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_16\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc add data/data.xml\n```\n\n----------------------------------------\n\nTITLE: Executing DVC Pull Command\nDESCRIPTION: Demonstrates how to use the 'dvc pull' command to download tracked files from remote storage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/pull.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc pull\n```\n\n----------------------------------------\n\nTITLE: Python Implementation for DVC Studio Model Download\nDESCRIPTION: Python script that demonstrates how to request signed download URLs for model files and download them using the requests library. Requires a DVC Studio token with Model Registry scope.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/rest-api/download-model.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\nimport requests\n\n\nurl = \"https://studio.datachain.ai/api/model-registry/get-download-uris\"\ntoken = os.environ[\"DVC_STUDIO_TOKEN\"]\nheaders = {\"Authorization\": f\"token {token}\"}\nparams = {\n    \"repo\": \"git@github.com:iterative/demo-bank-customer-churn.git\",\n    \"name\": \"randomforest-model\",\n    \"version\": \"v2.0.0\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nfor rel_path, obj_url in json.loads(response.content).items():\n    obj = requests.get(obj_url)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Dataset using DVC\nDESCRIPTION: DVC and bash commands to download a dataset from a DVC repository, extract it, and clean up temporary files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get https://github.com/iterative/dataset-registry \\\n          tutorials/versioning/data.zip\n$ unzip -q data.zip\n$ rm -f data.zip\n```\n\n----------------------------------------\n\nTITLE: Pushing Model Tags and Remote Assignment\nDESCRIPTION: Shows how to push GTO tags to remote repository and perform stage assignments directly on a remote repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/get-started.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ git push origin cv-class@v0.1.14\n* [new tag]         cv-class@v0.1.14 -> cv-class@v0.1.14\n\n# Replace myuser with your GitHub user below.\n$ gto assign cv-class --stage dev \\\n             --repo https://github.com/myuser/example-gto\nCreated git tag 'cv-class#dev#1' that assigns stage to version 'v0.1.14'\nRunning `git push origin cv-class#dev#1`\nSuccessfully pushed git tag cv-class#dev#1 on remote.\n```\n\n----------------------------------------\n\nTITLE: Setting DVCLive Environment Variables in Python\nDESCRIPTION: This code snippet demonstrates how to set environment variables for DVCLive using Python's os.environ dictionary. It shows setting the log level to DEBUG and enabling automatic opening of HTML reports.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/env.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom dvclive import env\n\nos.environ[env.DVCLIVE_LOGLEVEL] = \"DEBUG\"\nos.environ[env.DVCLIVE_OPEN] = \"True\"\n```\n\n----------------------------------------\n\nTITLE: Applying a DVC Experiment\nDESCRIPTION: Example of using 'dvc exp apply' command to restore a saved experiment to the current workspace.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/save.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp apply extra-trees\nChanges for experiment 'extra-trees' have been applied to your current workspace.\n$ git status\nOn branch main\n\nChanges not staged for commit:\n\tmodified:   data/...\n\tmodified:   dvc.lock\n\tmodified:   evaluation/...\n\tmodified:   src/train.py\n\nUntracked files:\n\tdata/new.xml.dvc\n\tsrc/extratrees.py\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Remote Command Usage\nDESCRIPTION: Shows the usage syntax for the 'dvc remote' command and its subcommands. It lists the available operations for managing remote storage locations.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc remote [-h] [-q | -v] {add,default,remove,modify,list} ...\n\npositional arguments:\n  COMMAND\n    add                 Add remote.\n    default             Set/unset default remote.\n    remove              Remove remote.\n    modify              Modify remote.\n    list                List available remotes.\n```\n\n----------------------------------------\n\nTITLE: Listing All DVC Experiments in Bash\nDESCRIPTION: Demonstrates how to list all experiments in a DVC project using the '--all-commits' option. This example shows the output format, including experiment names and their associated commit hashes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/list.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp list --all-commits\n10-bigrams-experiment:\n    60b225a [bally-gude]\n    b485671 [gluey-leak]\n    5f30433 [lurid-lair]\n```\n\n----------------------------------------\n\nTITLE: Metric Summary in JSON Format\nDESCRIPTION: Example of the JSON output for the metric summary, showing the latest logged values and current step.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_metric.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"step\": 1,\n  \"train\": {\n    \"loss\": 0.2\n  },\n  \"val\": {\n    \"loss\": 0.4\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Parameters from YAML in Python\nDESCRIPTION: This snippet shows how to load parameters from a YAML file in Python using the ruamel.yaml library. It's used to parametrize scripts in the DVC pipeline.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-pipelines.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ruamel.yaml import YAML\n\nyaml = YAML(typ=\"safe\")\n\ndef data_split():\n    params = yaml.load(open(\"params.yaml\", encoding=\"utf-8\"))\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing ML Project with DVC\nDESCRIPTION: Clone the example project repository and pull its data dependencies, then install required Python packages.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/run.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ git clone git@github.com:iterative/example-get-started.git\n$ cd example-get-started\n$ dvc pull\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install -r src/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Download Artifact from DVC Remote Example\nDESCRIPTION: Demonstrates downloading a specific version of an artifact from a DVC remote repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/artifacts/get.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc artifacts get https://github.com/iterative/example-get-started.git text-classification --rev=v1.0.0\nDownloaded 1 file(s) to 'model.pkl'\n```\n\n----------------------------------------\n\nTITLE: Variable Substitution Syntax Examples\nDESCRIPTION: Illustrates different forms of variable substitution syntax in DVC YAML files, including simple references, nested values, and list indexing.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n${param} # Simple\n${param.key} # Nested values through . (period)\n${param.list[0]} # List elements via index in [] (square brackets)\n```\n\n----------------------------------------\n\nTITLE: Filtering Metrics by Single Target in Python\nDESCRIPTION: Example showing how to retrieve metrics from a specific metrics file by providing a single target path as an argument to the metrics_show() function.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nmetrics = dvc.api.metrics_show(\"eval/train_val_metrics.json\")\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output of DVC Experiments\nDESCRIPTION: Example of the JSON structure returned by dvc.api.exp_show(), showing experiment details including name, revision, creation date, and custom parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/exp_show.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Experiment\": \"paled-acre\",\n    \"rev\": \"883442c\",\n    \"Created\": \"Apr 19, 2023\",\n    \"dice_multi\": 0.8590125166103912,\n    \"train.arch\": \"squeezenet1_1\"\n  },\n  {\n    \"Experiment\": \"vocal-suer\",\n    \"rev\": \"231e504\",\n    \"Created\": \"Apr 19, 2023\",\n    \"dice_multi\": 0.8997336177828745,\n    \"train.arch\": \"resnet34\"\n  },\n  {\n    \"Experiment\": \"banal-hogs\",\n    \"rev\": \"ff4a08a\",\n    \"Created\": \"Apr 19, 2023\",\n    \"dice_multi\": 0.8758231459806097,\n    \"train.arch\": \"alexnet\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Logging Scikit-learn Plot with DVCLive in Python\nDESCRIPTION: Shows how to log a Scikit-learn plot (ROC curve) using DVCLive.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ny_true = [0, 0, 1, 1]\ny_pred = [0.2, 0.5, 0.3, 0.8]\nlive.log_sklearn_plot(\"roc\", y_true, y_score)\n```\n\n----------------------------------------\n\nTITLE: Configuring HDFS External Dependency in DVC\nDESCRIPTION: Creates a DVC stage that downloads a file from HDFS and tracks it as a dependency.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/external-dependencies-and-outputs.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n download_file \\\n          -d hdfs://user@example.com/data.txt \\\n          -o data.txt \\\n          hdfs fs -copyToLocal \\\n                  hdfs://user@example.com/data.txt data.txt\n```\n\n----------------------------------------\n\nTITLE: Using DVC exp apply Command Syntax\nDESCRIPTION: Shows the usage syntax for the 'dvc exp apply' command, including its arguments and options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc exp apply [-h] [-q | -v] experiment\n\npositional arguments:\n  experiment     Experiment to be applied\n```\n\n----------------------------------------\n\nTITLE: Generating Horizontal Bar Plots\nDESCRIPTION: Commands to create regular and sorted horizontal bar plots for feature importance visualization.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_11\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots show importances.csv --template bar_horizontal \\\n                             -x feature_importance -y feature_name\n$ dvc plots show importances.csv -t bar_horizontal_sorted \\\n                             -x feature_importance -y feature_name\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Remote Storage in DVC CLI\nDESCRIPTION: Demonstrates how to add a new SSH remote storage location using the DVC command line interface. The command specifies a default remote with a custom SSH URL including user, host, port, and path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/ssh.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote ssh://user@example.com:2222/path\n```\n\n----------------------------------------\n\nTITLE: DVC Status Example - With Dependencies\nDESCRIPTION: Example showing how to check status with dependencies using the --with-deps flag.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/status.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc status model.p\nData and pipelines are up to date.\n\n$ dvc status model.p --with-deps\nmatrix-train.p:\n\tchanged deps:\n\t\tmodified:  code/featurization.py\n```\n\n----------------------------------------\n\nTITLE: Pipeline Output Dependencies Visualization\nDESCRIPTION: Demonstrates the visualization of pipeline outputs and dependencies using the --outs option, showing how stage outputs are connected.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/dag.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc dag --outs\n                  +---------------+\n                  | data/prepared |\n                  +---------------+\n                          *\n                          *\n                          *\n                  +---------------+\n                  | data/features |\n                **+---------------+**\n            ****          *          *****\n       *****              *               ****\n   ****                   *                   ****\n***                 +-----------+                 ***\n  **                | model.pkl |                **\n    **              +-----------+              **\n      **           **           **           **\n        **       **               **       **\n          **   **                   **   **\n      +-------------+            +----------+\n      | scores.json |            | prc.json |\n      +-------------+            +----------+\n```\n\n----------------------------------------\n\nTITLE: Show Specific Artifact Versions\nDESCRIPTION: Demonstrates how to display all versions of a specific artifact with their stages and creation timestamps.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/command-reference/show.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ gto show churn\n╒════════════╤═══════════╤══════════════╤═════════════════════╤══════════════╕\n│ artifact   │ version   │ stage        │ created_at          │ ref          │\n╞════════════╪═══════════╪══════════════╪═════════════════════╪══════════════╡\n│ churn      │ v3.1.0    │ dev, staging │ 2022-08-28 16:58:50 │ churn@v3.1.0 │\n│ churn      │ v3.0.0    │ prod         │ 2022-08-24 01:52:10 │ churn@v3.0.0 │\n╘════════════╧═══════════╧══════════════╧═════════════════════╧══════════════╛\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Parameter Files in Python\nDESCRIPTION: Example of using dvc.api.params_show() to load parameters from multiple file paths.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nparams = dvc.api.params_show(\n  \"configs/params_dev.yaml\", \"configs/params_prod.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Changing File Location Using DVC Move in CLI\nDESCRIPTION: Shows how to use 'dvc move' to change a file's location and move it into an existing directory, including the movement of the corresponding .dvc file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/move.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ tree\n.\n├── data\n│   └── foo\n└── data2\n    └── subdir\n\n$  dvc add data/foo\n...\n$  tree\n.\n├── data\n│   ├── foo\n│   └── foo.dvc\n└── data2\n    └── subdir\n\n$ dvc move data/foo data2/subdir/\n...\n$ tree\n.\n├── data\n└── data2\n    └── subdir\n        ├── foo\n        └── foo.dvc\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to DVC Registry with YAML\nDESCRIPTION: This snippet shows how to add metadata to artifacts in a DVC registry using a dvc.yaml file, including information like type, description, and labels.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/data-registry/tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# dvc.yaml\nartifacts:\n  get-started-data:\n    path: get-started/data.xml.dvc\n    type: data\n    desc: 'Stack Overflow questions'\n    labels:\n      - nlp\n      - classification\n```\n\n----------------------------------------\n\nTITLE: Fetching with Dependencies\nDESCRIPTION: Example demonstrating how to fetch a target along with all its dependencies.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/fetch.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc status -c\n...\n    deleted:            data/features/test.pkl\n    deleted:            data/features/train.pkl\n    deleted:            model.pkl\n\n$ dvc fetch --with-deps train\n\n$ tree .dvc/cache/files/md5\n.dvc/cache/files/md5\n├── 20\n│   └── b786b6e6f80e2b3fcf17827ad18597.dir\n├── c8\n│   ├── 43577f9da31eab5ddd3a2cf1465f9b\n│   └── d307aa005d6974a8525550956d5fb3\n├── 32\n│   └── b715ef0d71ff4c9e61f55b09c15e75\n├── 54\n│   └── c0f3ef1f379563e0b9ba4accae6807\n├── 6f\n│   └── 597d341ceb7d8fbbe88859a892ef81\n├── a1\n│   └── 414b22382ffbb76a153ab1f0d69241.dir\n└── a3\n    └── 04afb96060aad90176268345e10355\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Credentials File Location in DVC\nDESCRIPTION: Configures a custom file path for storing Google Drive credentials in the user's home directory\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote --local \\\n      gdrive_user_credentials_file ~/.gdrive/myremote-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Verifying DVC Pipeline Status\nDESCRIPTION: Demonstrates how to check the status of a DVC pipeline without running or pulling data, using 'dvc repro' with '--dry' and '--allow-missing' flags.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/running-pipelines.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc repro --allow-missing --dry\n'data/pool_data.dvc' didn't change, skipping\nStage 'data_split' didn't change, skipping\nStage 'train' didn't change, skipping\nStage 'evaluate' didn't change, skipping\n```\n\n----------------------------------------\n\nTITLE: Creating a DVC Stage as Alternative to import-url\nDESCRIPTION: Shows how to create a DVC stage with dvc stage add as an alternative to import-url, defining an external dependency for downloading data with wget.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n download_data \\\n                -d https://data.dvc.org/get-started/data.xml \\\n                -o data.xml \\\n                wget https://data.dvc.org/get-started/data.xml -O data.xml\n\n$ dvc repro\n```\n\n----------------------------------------\n\nTITLE: Mermaid Flowchart Generation\nDESCRIPTION: Example of generating a Mermaid-formatted flowchart using the --mermaid flag to create a visual representation of the pipeline.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/dag.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc dag --mermaid\nflowchart TD\n        node1[\"data/data.xml.dvc\"]\n        node2[\"evaluate\"]\n        node3[\"featurize\"]\n        node4[\"prepare\"]\n        node5[\"train\"]\n        node1-->node4\n        node3-->node2\n        node3-->node5\n        node4-->node3\n        node5-->node2\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with conda/mamba and S3 support on Windows\nDESCRIPTION: Commands to install DVC with Amazon S3 storage support using conda/mamba. This installs the boto3 library along with DVC to enable S3 remote storage functionality.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/windows.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ conda install -c conda-forge mamba # installs much faster than conda\n$ mamba install -c conda-forge dvc-s3\n```\n\n----------------------------------------\n\nTITLE: Downloading Model from Hugging Face Hub using DVC\nDESCRIPTION: Example of using dvc get to download a Stable Diffusion model file from Hugging Face Hub without cloning the repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/huggingface.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc get https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0 sd_xl_base_1.0.safetensors\n```\n\n----------------------------------------\n\nTITLE: DVC API Read Function Definition\nDESCRIPTION: Function signature showing the parameters for dvc.api.read(). Used to read contents of tracked files in DVC projects with options for repository location, revision, remote storage, and file mode settings.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/read.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef read(path: str,\n         repo: str = None,\n         rev: str = None,\n         remote: str = None,\n         remote_config: dict = None,\n         config: dict = None,\n         mode: str = \"r\",\n         encoding: str = None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plot Data Sources in DVC YAML\nDESCRIPTION: Examples showing different ways to configure plot data sources with Y and X axis specifications.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - regression_hist.csv:\n      y: mean_squared_error\n  - classifier_hist.csv:\n      y: [acc, loss]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - train_val_test:\n      y:\n        train.csv: [train_acc, val_acc]\n        test.csv: test_acc\n```\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - classifier_hist.csv:\n      y: [acc, loss]\n      x: epoch\n```\n\n----------------------------------------\n\nTITLE: Adding Default Remote Storage Example\nDESCRIPTION: Example of adding a local directory as the default remote storage location using the DVC remote add command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/add.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d temp /tmp/dvcstore\n```\n\n----------------------------------------\n\nTITLE: Listing DVC Experiments Using Git Remote Name in Bash\nDESCRIPTION: Demonstrates how to list experiments from a remote DVC repository using the Git remote name instead of the full URL. This example uses 'origin' as the remote name.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/list.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp list --all-commits origin\n10-bigrams-experiment:\n    bally-gude\n    conic-ease\n```\n\n----------------------------------------\n\nTITLE: Visualizing CSV Data with DVC Plots\nDESCRIPTION: CLI command to show a plot from a CSV file using DVC, specifying the x and y axes. This generates an HTML file with the plot.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/visualizing-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots show logs.csv -x epoch -y loss\nfile:///Users/usr/src/dvc_plots/index.html\n```\n\n----------------------------------------\n\nTITLE: Remote Repository Metrics Output in JSON\nDESCRIPTION: Sample JSON output when retrieving metrics from a remote DVC repository, showing precise metric values for training and test datasets.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avg_prec\": {\n    \"train\": 0.9743681430252835,\n    \"test\": 0.9249974999612706\n  },\n  \"roc_auc\": {\n    \"train\": 0.9866678562450621,\n    \"test\": 0.9460213440787918\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Checkout of a Previous Experiment\nDESCRIPTION: Demonstrates checking out a previous Git tag containing a different version of the DVC files, but not yet updating the actual data files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/checkout.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ git checkout baseline-experiment  # Git commit where model was created\n```\n\n----------------------------------------\n\nTITLE: Migrating Cache and Updating DVC Files\nDESCRIPTION: Example of migrating both cache data and updating DVC files to the DVC 3.0 format, including the Git instructions for tracking these changes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/cache/migrate.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc cache migrate --dvc-files\nMigrated 3 files to DVC 3.0 cache location.\nUpdating DVC file 'foo.dvc'\nModifying stage 'baz' in 'dir/dvc.yaml'\nUpdating lock file 'dir/dvc.lock'\nUpdating DVC file 'dir/bar.dvc'\n\nTo track the changes with git, run:\n\n        git add dir/dvc.yaml foo.dvc dir/dvc.lock dir/bar.dvc\n\nTo enable auto staging, run:\n\n        dvc config core.autostage true\n```\n\n----------------------------------------\n\nTITLE: Logging Plot with DVCLive in Python\nDESCRIPTION: Demonstrates logging a custom plot using DVCLive, specifying data points and plot options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndatapoints = [\n    {\"name\": \"petal_width\", \"importance\": 0.4},\n    {\"name\": \"petal_length\", \"importance\": 0.33},\n    {\"name\": \"sepal_width\", \"importance\": 0.24},\n    {\"name\": \"sepal_length\", \"importance\": 0.03}\n]\nlive.log_plot(\n    \"iris\", datapoints, x=\"importance\", y=\"name\",\n    template=\"bar_horizontal\", title=\"Iris Feature Importance\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using fsspec.open with DVC URLs\nDESCRIPTION: Example showing how to open a file using fsspec's open function with a DVC URL and additional keyword arguments to specify the Git repository URL.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> import fsspec\n>>> fsspec.open(\n...   \"dvc://workshop/satellite-data/jan_train.csv\",\n...   url=\"https://github.com/iterative/dataset-registry.git\",\n... )\n<OpenFile 'workshop/satellite-data/jan_train.csv'>\n```\n\n----------------------------------------\n\nTITLE: XML Processing Example - Streaming Data\nDESCRIPTION: Advanced example demonstrating how to process an XML file using SAX parser with streaming capabilities of dvc.api.open().\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom xml.sax import parse\nimport dvc.api\nfrom mymodule import mySAXHandler\n\nwith dvc.api.open(\n    'get-started/data.xml',\n    repo='https://github.com/iterative/dataset-registry'\n) as f:\n    parse(f, mySAXHandler)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom OmegaConf Resolver for Hydra\nDESCRIPTION: Example of defining a custom OmegaConf resolver for use with Hydra composition in DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom omegaconf import OmegaConf\n\nOmegaConf.register_new_resolver('join', lambda x, y : os.path.join(x, y))\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Pipeline with Selective Caching (YAML)\nDESCRIPTION: Demonstrates how to configure a DVC pipeline stage with selective caching in YAML format. It shows how to keep certain files uncached while caching others.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/how-it-works.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  train:\n    cmd: python train.py\n    deps:\n      - train.py\n      - data_dir\n    outs:\n      - model.pt\n      - dvclive/metrics.json:\n          cache: false\n      - dvclive/plots\n```\n\n----------------------------------------\n\nTITLE: Parameter File Diff After Applying Experiment\nDESCRIPTION: Shows the Git diff output of the parameters file after applying an experiment, highlighting the parameter changes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_6\n\nLANGUAGE: git\nCODE:\n```\n@@ -3,7 +3,7 @@ prepare:\n featurize:\n-  max_features: 1500\n+  max_features: 2000\n   ngrams: 2\n```\n\n----------------------------------------\n\nTITLE: JSON Metrics File Structure\nDESCRIPTION: Example of a JSON metrics file showing hierarchical organization of various training metrics including accuracy, loss, and timing data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/index.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"train\": {\n    \"accuracy\": 0.9886999726295471,\n    \"loss\": 0.041855331510305405,\n    \"TN\": 473,\n    \"FP\": 845\n  },\n  \"time_real\": 344.61309599876404\n}\n```\n\n----------------------------------------\n\nTITLE: DVC Remote Experiment Removal\nDESCRIPTION: Demonstrates how to remove experiments from a remote Git repository using the -g flag.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/remove.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp push myremote\n\n$ dvc exp list myremote\nmaster:\n        conic-ease\n        urban-sign\n        major-mela\n\n$ dvc exp remove -g myremote urban-sign major-mela\n$ dvc exp list myremote\nmaster:\n        conic-ease\n```\n\n----------------------------------------\n\nTITLE: DVC Foreach Stage with Dictionary Values\nDESCRIPTION: This snippet demonstrates the use of `foreach` with a list of dictionaries, allowing substitution of dictionary values into stage definitions. The `${item.key}` form is used to access specific values within the dictionaries, enabling flexible configuration of stages based on complex data structures.  Stage names are appended with a zero-based index.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  train:\n    foreach:\n      - epochs: 3\n        thresh: 10\n      - epochs: 10\n        thresh: 15\n    do:\n      cmd: python train.py ${item.epochs} ${item.thresh}\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with conda/mamba on Windows\nDESCRIPTION: Commands to install DVC using conda package manager with mamba for faster installation. This requires Miniconda or Anaconda Distribution to be installed first.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/windows.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ conda install -c conda-forge mamba # installs much faster than conda\n$ mamba install -c conda-forge dvc\n```\n\n----------------------------------------\n\nTITLE: Modifying a File and Freezing a DVC Stage in Bash\nDESCRIPTION: This example shows how to modify a file that a DVC stage depends on, freeze the stage, and check the project status. It demonstrates the effect of freezing a stage on the DVC status output.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unfreeze.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ echo zoo > foo\n$ dvc freeze make_copy\n$ dvc status\nfoo.dvc:\n\tchanged outs:\n\t\tmodified:           foo\n```\n\n----------------------------------------\n\nTITLE: DVC Experiment Display with Only Changed Values\nDESCRIPTION: Demonstrates the use of --only-changed flag to show only columns where values differ across experiments, reducing output noise.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show --only-changed\n```\n\nLANGUAGE: dvctable\nCODE:\n```\n ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  neutral:**Experiment**                   neutral:**Created**        metric:**avg_prec**   metric:**roc_auc**   param:**featurize.max_features**   dep:**model.pkl**   dep:**data/features**\n ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  workspace                    -               0.60405    0.9608   3000                     484fab5     52c1fdd\n  random-forest-experiments    May 29, 2021    0.60405    0.9608   3000                     484fab5     52c1fdd\n  ├── a2efdc9 [urban-sign]     10:21 PM        0.55669   0.93516   1000                     e2b5a9a     1b2d542\n  ├── e7bd029 [unwet-jinn]     10:21 PM        0.58589     0.945   2000                     7aae464     2ac217b\n  └── 56f3be3 [freed-roam]     10:21 PM        0.51799   0.92333   500                      cfbfed4     64ed644\n ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Defining Hydra Defaults List in YAML\nDESCRIPTION: Example of a Hydra defaults list configuration in YAML format.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - dataset: imagenette\n  - train/model: resnet\n  - train/optimizer: sgd\n```\n\n----------------------------------------\n\nTITLE: Initializing DVC in a Git Subdirectory\nDESCRIPTION: Demonstrates how to initialize DVC in a subdirectory of a Git repository using the `--subdir` option, creating separate project scopes within a monorepo structure.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/init.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir mygitrepo && cd mygitrepo\n$ git init\n\n$ mkdir project-a && cd project-a\n$ dvc init --subdir\n```\n\n----------------------------------------\n\nTITLE: Creating a DVC Studio Project using Python\nDESCRIPTION: Demonstrates how to create a new project in DVC Studio using Python. It includes setting up the request payload, headers, and handling the response.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/rest-api/create-project.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\nimport requests\n\n\nurl = \"https://studio.datachain.ai/api/create-project\"\ntoken = os.environ[\"DVC_STUDIO_TOKEN\"]\npayload = json.dumps({\n  \"repo_url\": \"https://github.com/amritghimire/monorepo-model-registry-fixture\",\n  \"public\": True,\n  \"team_name\": \"team_name\",\n  \"subdir\": \"nested\",\n  \"name\": \"test-nested\"\n})\nheaders = {\n  'Authorization': f'token {token}',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nfor project in response.json()[\"projects\"]:\n    print(project[\"url\"])\n    ...\n```\n\n----------------------------------------\n\nTITLE: Generated DVC YAML Configuration\nDESCRIPTION: Example of the generated dvc.yaml file structure showing the configuration for parameters, metrics, and plots including confusion matrix visualization settings.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/make_dvcyaml.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  - dvclive/params.yaml\nmetrics:\n  - dvclive/metrics.json\nplots:\n  - dvclive/plots/metrics\n  - dvclive/plots/sklearn/confusion_matrix.json:\n      template: confusion\n      x: actual\n      y: predicted\n      title: Confusion Matrix\n      x_label: True Label\n      y_label: Predicted Label\n```\n\n----------------------------------------\n\nTITLE: Generating Vega-Lite Specification with DVC Plots Show\nDESCRIPTION: Using the --show-vega option to output a Vega-Lite specification JSON instead of rendering an HTML plot, useful for automation scenarios.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.json\",\n    \"data\": {\n        \"values\": [\n    {\n        \"accuracy\": \"0.9418667\",\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Anonymous Read Access\nDESCRIPTION: Allows anonymous read access for public containers as a last resort authentication method.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/azure-blob-storage.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote allow_anonymous_login true\n```\n\n----------------------------------------\n\nTITLE: Reverting DVC exp apply Changes with Git Commands\nDESCRIPTION: Demonstrates the Git workflow to revert changes made by 'dvc exp apply' using Git stash commands.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ git stash\n$ git stash apply refs/exps/apply/stash\n```\n\n----------------------------------------\n\nTITLE: DVC Get-URL Command Usage Syntax\nDESCRIPTION: Shows the basic command syntax and arguments for the dvc get-url command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get-url.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc get-url [-h] [-q | -v] [-j <number>] [-f] [--fs-config <name>=<value>] url [out]\n```\n\n----------------------------------------\n\nTITLE: Queueing Multiple DVC Experiments with Hydra Overrides\nDESCRIPTION: Example of queueing multiple DVC experiments with different Hydra parameter combinations.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --queue \\\n              -S 'train/optimizer=adam,sgd' \\\n              -S 'train/model=resnet,efficientnet'\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple DVC Stage Example in Python\nDESCRIPTION: Example of a DVC stage command that executes a Python script to train a machine learning model. This demonstrates how stages are typically referenced in DVC documentation.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/basic-concepts/stage.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npython train.py\n```\n\n----------------------------------------\n\nTITLE: Configuring System Monitoring Parameters in Python\nDESCRIPTION: This snippet shows how to initialize a Live object and then configure system monitoring with custom parameters for interval, number of samples, and directories to monitor.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/monitor_system.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nlive = Live()\nlive.monitor_system(\n    interval = 0.01\n    num_samples = 20,\n    directories_to_monitor = {\"data\": \"/data\", \"users\": \"/home\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Parameter Files in Python\nDESCRIPTION: Example of using dvc.api.params_show() to load parameters from a specific file path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nparams = dvc.api.params_show( \"configs/params_dev.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with Chocolatey on Windows\nDESCRIPTION: Command to install DVC using the Chocolatey package manager on Windows. This is described as the easiest way to install from command line for most cases.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/windows.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ choco install dvc\n```\n\n----------------------------------------\n\nTITLE: Committing DVC Stage Changes\nDESCRIPTION: Command to cache newly specified outputs and update deps and outs file hashes in dvc.lock without re-executing the stage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/add-deps-or-outs-to-a-stage.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc commit\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch from DVC Experiment in Bash\nDESCRIPTION: Demonstrates how to create a Git branch from a specific DVC experiment named 'gluey-leak' using the 'dvc exp branch' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/branch.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp branch gluey-leak\n```\n\n----------------------------------------\n\nTITLE: Applying DVC Experiment Results\nDESCRIPTION: Demonstrates how to apply experiment results to the current workspace\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/comparing-experiments.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp apply ochre-dook\n```\n\n----------------------------------------\n\nTITLE: Adding a DVC Stage with Python Parameter Dependencies\nDESCRIPTION: This CLI command shows how to add a DVC stage that depends on parameters defined in a Python file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/index.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n train -d train.py -d users.csv -o model.pkl \\\n                -p params.py:BOOL,INT,TrainConfig.EPOCHS,TrainConfig.layers \\\n                python train.py\n```\n\n----------------------------------------\n\nTITLE: Sample Confusion Matrix Data Format\nDESCRIPTION: Example CSV format for confusion matrix visualization\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/diff.md#2025-04-21_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\npredicted,actual\ncat,cat\ncat,cat\ncat,cat\ndog,cat\ndinosaur,cat\ndinosaur,cat\nbird,cat\ndog,turtle\ncat,turtle\n...\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with pip and Amazon S3 support on macOS\nDESCRIPTION: Installs DVC with Amazon S3 storage support using pip. This installs the boto3 library along with DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/macos.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"dvc[s3]\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Default Local Remote in DVC\nDESCRIPTION: Demonstrates how to add a default local remote using the 'dvc remote add' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/list.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d myremote /path/to/remote\nSetting 'myremote' as a default remote.\n```\n\n----------------------------------------\n\nTITLE: Unprotecting and Modifying DVC-tracked File\nDESCRIPTION: This snippet demonstrates how to unprotect a DVC-tracked file, modify its content, and re-add it to DVC and Git.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/update-tracked-data.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc unprotect train.tsv\n$ echo \"new data item\" >> train.tsv\n$ dvc add train.tsv\n$ dvc push # If you have remote storage.\n\n$ git add train.tsv.dvc\n$ git commit -m \"modify train data\"\n$ git push # If you have an upstream repo.\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Repository in Bash\nDESCRIPTION: Git commands to clone the example repository and change into the project directory.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/iterative/example-versioning.git\n$ cd example-versioning\n```\n\n----------------------------------------\n\nTITLE: Google Drive Remote Configuration with Custom Client Credentials\nDESCRIPTION: Commands for configuring a Google Drive remote with custom client ID and secret for enhanced API quotas and security.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote gdrive_client_id 'client-id'\n$ dvc remote modify myremote gdrive_client_secret 'client-secret'\n```\n\n----------------------------------------\n\nTITLE: DVC Push With Dependencies Example\nDESCRIPTION: Example demonstrating use of --with-deps option to push dependent files in a pipeline.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/push.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc status --cloud\n$ dvc push --with-deps test-posts\n$ dvc push --with-deps matrix-train\n$ dvc status --cloud\nCache and remote 'r1' are in sync.\n```\n\n----------------------------------------\n\nTITLE: Tracking Parameters from YAML File in DVC\nDESCRIPTION: This snippet demonstrates how to define parameters in a `dvc.yaml` file to track specific values from a `params.yaml` file, a custom YAML file (`myparams.yaml`), and all parameters from a JSON file (`config.json`). This allows DVC to monitor these parameters and trigger pipeline execution when they change. Dot-separated parameter names are interpreted as tree paths within the parameters file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  preprocess:\n    cmd: bin/cleanup raw.txt clean.txt\n    deps:\n      - raw.txt\n    params:\n      - threshold # track specific param (from params.yaml)\n      - nn.batch_size\n      - myparams.yaml: # track specific params from custom file\n          - epochs\n      - config.json: # track all parameters in this file\n    outs:\n      - clean.txt\n```\n\n----------------------------------------\n\nTITLE: Filtering Metrics by Multiple Targets in Python\nDESCRIPTION: Example demonstrating how to retrieve metrics from multiple specific metrics files by providing multiple target paths as arguments to the metrics_show() function.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nmetrics = dvc.api.metrics_show(\"eval/train_val_metrics.json\", \"eval/test_metrics.json\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OSS Endpoint Parameter\nDESCRIPTION: Command to set the endpoint parameter for OSS remote storage access.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/aliyun-oss.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote oss_endpoint endpoint\n```\n\n----------------------------------------\n\nTITLE: DVC gc Command Usage Synopsis\nDESCRIPTION: Shows the command-line syntax for the DVC gc command with all possible options and flags.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/gc.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc gc [-h] [-q | -v]\n              [-w] [--rev <commit>] [-n <num>] [-a] [-T] [-A]\n              [--date <YYYY-MM-DD>] [--all-experiments]\n              [-p [<path> [<path> ...]]]\n              [--not-in-remote]\n              [-c] [-r <name>] [-j <number>] [-f] [--dry]\n```\n\n----------------------------------------\n\nTITLE: Enabling Password Prompt for WebDAV in DVC CLI\nDESCRIPTION: Demonstrates how to configure DVC to prompt for a password each time when accessing the WebDAV remote. This enhances security by not storing the password.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote ask_password true\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Install the necessary Python packages for the integration\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/evidently.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install dvc dvclive evidently pandas\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage External Dependency in DVC\nDESCRIPTION: Creates a DVC stage that downloads a file from Azure Blob Storage and tracks it as a dependency.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/external-dependencies-and-outputs.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n download_file \\\n          -d azure://mycontainer/data.txt \\\n          -o data.txt \\\n          az storage copy \\\n                     -d data.json \\\n                     --source-account-name my-account \\\n                     --source-container mycontainer \\\n                     --source-blob data.txt\n```\n\n----------------------------------------\n\nTITLE: Using DVC import-db with SQL Query Parameter\nDESCRIPTION: Example of importing SQL query results from a database using a previously configured connection.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-db.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc import-db --sql \"select * from customers\" --conn pgsql\n```\n\n----------------------------------------\n\nTITLE: Using DVC Root for Fixed Path References in Bash Commands\nDESCRIPTION: Demonstrates how to use the 'dvc root' command to create fixed path references when working in subdirectories of a DVC project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/root.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc root\n../../../\n\n$ dvc stage add -d $(dvc root)/data/file.cvs ... \\\n      python $(dvc root)/scripts/something.py\n```\n\n----------------------------------------\n\nTITLE: Starting DVC Queue Workers\nDESCRIPTION: Demonstrates how to start multiple queue workers using the 'dvc queue start' command and view the updated queue status.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/status.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc queue start -j 2\nStarted '2' new experiments task queue workers.\n$ dvc queue status\nTask     Name    Created    Status\n753b005          04:01 PM   Running\n0bbb118          04:01 PM   Running\n1ae8b65          04:01 PM   Queued\n\nWorker status: 2 active, 0 idle\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC Queue Status with Queued Tasks\nDESCRIPTION: Shows the output of 'dvc queue status' after queueing multiple experiments, displaying their status and creation time.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/status.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc queue status\nTask     Name    Created    Status\n753b005          04:01 PM   Queued\n0bbb118          04:01 PM   Queued\n1ae8b65          04:01 PM   Queued\n\nWorker status: 0 active, 0 idle\n```\n\n----------------------------------------\n\nTITLE: Assigning Model Stages\nDESCRIPTION: Shows how to promote a model version to a specific stage (dev) using gto assign command and viewing the updated stage assignments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/get-started.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ gto assign cv-class --stage dev\nCreated git tag 'cv-class#dev#1' that assigns stage to version 'v0.1.14'\nTo push the changes upstream, run:\n    git push origin cv-class#dev#1\n\n$ gto show\n╒══════════╤══════════╤═════════╤═════════╤════════════╕\n│ name     │ latest   │ #dev    │ #prod   │ #staging   │\n╞══════════╪══════════╪═════════╪═════════╪════════════╡\n│ churn    │ v3.1.1   │ v3.1.1  │ v3.0.0  │ v3.1.0     │\n│ segment  │ v0.4.1   │ v0.4.1  │ -       │ -          │\n│ cv-class │ v0.1.14  │ v0.1.14 │ -       │ -          │\n╘══════════╧══════════╧═════════╧═════════╧════════════╛\n```\n\n----------------------------------------\n\nTITLE: Setting Up .dvcignore and Adding Directory\nDESCRIPTION: Creates a .dvcignore file to exclude 'dir/file1' from tracking, then uses DVC to add the entire directory.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ echo dir/file1 > .dvcignore\n$ dvc add dir\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for CI/CD in ML\nDESCRIPTION: A comprehensive markdown document that explains the integration of CI/CD practices in machine learning workflows, focusing on DVC and CML tools for data versioning, model management, and automation.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/ci-cd-for-machine-learning.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Continuous Integration and Deployment for Machine Learning\n\nApplying DevOps methodologies to machine learning (MLOps) and data management\n(DataOps) is increasingly common. This means resource orchestration\n(provisioning servers for model training), model testing (validating model\ninference), and model deployment to production, as well as monitoring &\nfeedback. [DVC](/) can manage data/models and reproducible pipelines, while\n[CML] can assist with orchestration, testing and monitoring.\n\n[cml]: https://cml.dev\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH External Dependency in DVC\nDESCRIPTION: Creates a DVC stage that downloads a file via SSH and tracks it as a dependency. Requires both SSH and SFTP access.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/external-dependencies-and-outputs.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n download_file \\\n          -d ssh://user@example.com/path/to/data.txt \\\n          -o data.txt \\\n          scp user@example.com:/path/to/data.txt data.txt\n```\n\n----------------------------------------\n\nTITLE: Setting up Password Authentication for SSH Remote in DVC CLI\nDESCRIPTION: Shows how to configure password authentication for an SSH remote in DVC. It provides options for directly setting the password or prompting for it when needed.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/ssh.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote password mypassword\n# or\n$ dvc remote modify myremote ask_password true\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Metrics Show Example\nDESCRIPTION: Demonstrates the basic usage of 'metrics show' command displaying metrics in the current workspace.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/show.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc metrics show\nPath       AUC      TP    error\neval.json  0.66729  516   0.16982\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh Completion Support\nDESCRIPTION: Code snippet to add to ~/.zshrc to enable Zsh completion through compinit.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Use modern completion system\nautoload -Uz compinit\ncompinit\n```\n\n----------------------------------------\n\nTITLE: Importing Web File Using DVC\nDESCRIPTION: Demonstrates how to import a file from a web URL using dvc import-url command and track it in the project\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import-url https://data.dvc.org/get-started/data.xml \\\n                 data/data.xml\n```\n\n----------------------------------------\n\nTITLE: Reading an Artifact's Contents with DVC API\nDESCRIPTION: Complete example showing how to retrieve an artifact's path and revision, then read and deserialize its contents using pickle and dvc.api.read().\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/artifacts_show.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pickle\nimport dvc.api\n\nartifact = dvc.api.artifacts_show(\n    'text-classification',\n    version='v1.0.0',\n    repo='https://github.com/iterative/example-get-started.git',\n)\ndata = dvc.api.read(\n    artifact['path'],\n    rev=artifact['rev'],\n    repo='https://github.com/iterative/example-get-started.git',\n    mode='rb',\n)\nmodel = pickle.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Parameters File Content\nDESCRIPTION: Shows the content of the params.yaml file, which contains the parameters used for DVC experiments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/running-experiments.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ cat params.yaml\n...\ntrain:\n  valid_pct: 0.1\n  arch: shufflenet_v2_x2_0\n  img_size: 256\n  batch_size: 8\n  fine_tune_args:\n    epochs: 8\n    base_lr: 0.01\n...\n```\n\n----------------------------------------\n\nTITLE: Switching to Previous Workspace Version\nDESCRIPTION: Git and DVC commands to switch the entire workspace back to a previous version.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout v1.0\n$ dvc checkout\n```\n\n----------------------------------------\n\nTITLE: Azure Authentication: Account Key (Bash)\nDESCRIPTION: Example of configuring an Azure remote using an account key for authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/modify.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d myremote azure://mycontainer/object\n$ dvc remote modify --local myremote account_name 'myaccount'\n$ dvc remote modify --local myremote account_key 'mysecret'\n$ dvc push\n```\n\n----------------------------------------\n\nTITLE: Saving a DVC Experiment with Custom Name and Untracked Files\nDESCRIPTION: Example of using 'dvc exp save' command to save an experiment with a custom name and include untracked files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/save.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndvc exp save --name extra-trees \\\n             -I data/new.xml.dvc -I src/extra_trees.py\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Client ID for GDrive Remote\nDESCRIPTION: Sets the OAuth 2.0 client ID for authentication with a custom Google Client project\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote gdrive_client_id 'client-id'\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Merge Driver for DVC\nDESCRIPTION: Commands to configure Git merge driver for automatically resolving DVC merge conflicts in directories.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/resolve-merge-conflicts.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ git config merge.dvc.name 'DVC merge driver'\n$ git config merge.dvc.driver \\\n      'dvc git-hook merge-driver --ancestor %O --our %A --their %B'\n```\n\n----------------------------------------\n\nTITLE: Removing a DVC Remote Storage Location\nDESCRIPTION: Shows how to remove a configured remote storage location using the 'dvc remote remove' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/index.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote remove oldremote\n```\n\n----------------------------------------\n\nTITLE: Downloading Models with cURL or Python\nDESCRIPTION: Use cURL in the terminal or Python code to directly call the DVC Studio REST API for downloading model artifacts. This method requires a DVC Studio client access token with Model registry operations scope.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/model-registry/use-models.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python code to call DVC Studio REST API\n```\n\n----------------------------------------\n\nTITLE: Creating Confusion Matrix Plots\nDESCRIPTION: Commands to generate regular and normalized confusion matrix plots from classification results.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots show classes.csv --template confusion \\\n                             -x actual -y predicted\n$ dvc plots show classes.csv -t confusion_normalized \\\n                             -x actual -y predicted\n```\n\n----------------------------------------\n\nTITLE: DVC Plots Diff Comparing Specific Versions\nDESCRIPTION: Example demonstrating how to compare two specific Git revisions of a plots file\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/diff.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots diff HEAD^ 0135527 --targets logs.csv\n```\n\n----------------------------------------\n\nTITLE: Example Output of log_params in YAML\nDESCRIPTION: Sample YAML output generated by the log_params method, showing how parameters are stored in the params.yaml file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_params.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlr: 1e-3\nn_iter: 50\n```\n\n----------------------------------------\n\nTITLE: Committing DVC Initialization Files to Git\nDESCRIPTION: Commands to check the status of the Git repository after DVC initialization and commit the newly created DVC files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ git status\nChanges to be committed:\n        new file:   .dvc/.gitignore\n        new file:   .dvc/config\n        ...\n$ git commit -m \"Initialize DVC\"\n```\n\n----------------------------------------\n\nTITLE: Training Pipeline Stage\nDESCRIPTION: DVC pipeline stage for model training using SageMaker XGBoost estimator with hyperparameter tracking\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/sagemaker.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntraining:\n  cmd: python sm_training.py --bucket ${bucket} --prefix ${prefix}  ${train}\n  deps:\n    - sm_training.py\n    - s3://${bucket}/${prefix}/train\n    - s3://${bucket}/${prefix}/validation\n  outs:\n    - s3://${bucket}/${prefix}/output:\n        cache: false\n```\n\n----------------------------------------\n\nTITLE: Single Experiment Tracking with DVCLive\nDESCRIPTION: Track multiple drift calculations in a single experiment using steps\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/evidently.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n    for date in experiment_batches:\n        live.log_param(\"begin\", date[0])\n        live.log_param(\"end\", date[1])\n\n        metrics = eval_drift(\n            df.loc[df.dteday.between(reference_dates[0], reference_dates[1])],\n            df.loc[df.dteday.between(date[0], date[1])],\n            column_mapping=data_columns,\n        )\n\n        for feature in metrics:\n            live.log_metric(feature[0], round(feature[1], 3))\n\n        live.next_step()\n```\n\n----------------------------------------\n\nTITLE: Reproducing a Pipeline with Missing Dependencies in DVC\nDESCRIPTION: Demonstrates using the '--allow-missing' and '--dry' flags with 'dvc repro' to handle a scenario with missing dependencies, showing the resulting error message.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/running-pipelines.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc repro --allow-missing --dry\n'data/pool_data.dvc' didn't change, skipping\nERROR: failed to reproduce 'data_split': [Errno 2] No such file or directory: '.../example-get-started-experiments/data/pool_data'\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Push Commands\nDESCRIPTION: Basic examples of pushing data to remote storage using dvc push command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/push.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc push\n$ dvc push data.zip.dvc\n```\n\n----------------------------------------\n\nTITLE: Setting GDrive Remote URL in DVC\nDESCRIPTION: Configures the Google Drive remote location URL for DVC storage\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote url \\\n                      gdrive://0AIac4JZqHhKmUk9PDA/dvcstore\n```\n\n----------------------------------------\n\nTITLE: Getting a DVC-Tracked File After Listing\nDESCRIPTION: Shows how to download a specific file (model.pkl) that was identified using the dvc list command. This demonstrates the typical workflow of first listing and then getting files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get https://github.com/iterative/example-get-started model.pkl\n```\n\n----------------------------------------\n\nTITLE: Viewing the structure of a large DVC-tracked dataset using tree command\nDESCRIPTION: Shows how to use the tree command to view the hierarchical structure of a large dataset tracked by DVC, displaying a nested directory structure with many files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/modifying-large-datasets.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ tree images\nimages\n├── test\n│   ├── 0\n│   │   ├── 00004.png\n│   │   ├── 00011.png\n│   │   ├── 00014.png\n│   │   ├── 00026.png\n│   │   ├── 00029.png\n│   │   ├── 00056.png\n│   │   ├── 00070.png\n...\n└── images.dvc\n\n23 directories, 70001 files\n```\n\n----------------------------------------\n\nTITLE: Re-linking Data Files in Workspace\nDESCRIPTION: Executes 'dvc checkout --relink' to adjust data file links after reconfiguring cache types. This command is used to update file links in the workspace according to the new DVC cache configuration. There must be valid data files in the workspace to re-link.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc checkout --relink\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment and Installing Dependencies\nDESCRIPTION: Bash commands to create a Python virtual environment, activate it, and install project dependencies.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m venv .env\n$ source .env/bin/activate\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Service Account JSON Credentials Path for Google Drive Remote in DVC\nDESCRIPTION: Command to specify the path to the Google Project's service account JSON key file for a DVC remote. This local configuration points to the credentials file needed for service account authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_11\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote \\\n                      gdrive_service_account_json_file_path \\\n                      path/to/file.json\n```\n\n----------------------------------------\n\nTITLE: DVC Add Command Synopsis\nDESCRIPTION: The usage syntax for the 'dvc add' command, showing available options and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc add [-h] [-q | -v] [-f] [--no-commit]\n               [--glob] [-o <path>]\n               [--to-remote] [-r <name>] [--remote-jobs <number>]\n               [--no-relink]\n               targets [targets ...]\n```\n\n----------------------------------------\n\nTITLE: Basic Feature Importance Plot Example\nDESCRIPTION: Example showing how to create a horizontal bar plot for feature importance using a list of dictionaries.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_plot.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\ndatapoints = [\n    {\"name\": \"petal_width\", \"importance\": 0.4},\n    {\"name\": \"petal_length\", \"importance\": 0.33},\n    {\"name\": \"sepal_width\", \"importance\": 0.24},\n    {\"name\": \"sepal_length\", \"importance\": 0.03}\n]\n\nwith Live() as live:\n    live.log_plot(\n        \"iris_feature_importance\",\n        datapoints,\n        x=\"importance\",\n        y=\"name\",\n        template=\"bar_horizontal\",\n        title=\"Iris Dataset: Feature Importance\",\n        y_label=\"Feature Name\",\n        x_label=\"Feature Importance\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Downloading a Git-tracked File from GitHub\nDESCRIPTION: An example showing how to use 'dvc get' to download a file that's tracked in Git rather than DVC. This retrieves the 'install.sh' script from a GitHub repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get https://github.com/schacon/cowsay install.sh\n$ ls\ninstall.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Workload Identity for DVC Studio with Terraform\nDESCRIPTION: This Terraform configuration sets up Google Cloud Workload Identity integration with DVC Studio. It creates an identity pool, provider, service account with storage admin access, and sets up the necessary IAM bindings.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/openid-connect.md#2025-04-21_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"5.13.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = \"iterative-sandbox\"\n  region  = \"us-central1\"\n}\n\nlocals {\n  provider  = \"studio.datachain.ai/api\"\n  condition = \"credentials:example-team/example-credentials\"\n}\n\ndata \"google_project\" \"current\" {}\n\nresource \"google_project_organization_policy\" \"credential_lifetime_extension\" {\n  project    = data.google_project.current.project_id\n  constraint = \"constraints/iam.allowServiceAccountCredentialLifetimeExtension\"\n\n  list_policy {\n    allow {\n      all = true\n    }\n  }\n}\n\nresource \"google_iam_workload_identity_pool\" \"studio\" {\n  workload_identity_pool_id = \"iterative-studio\"\n}\n\nresource \"google_iam_workload_identity_pool_provider\" \"studio\" {\n  workload_identity_pool_provider_id = \"studio\"\n  workload_identity_pool_id          = google_iam_workload_identity_pool.studio.workload_identity_pool_id\n\n  attribute_mapping = {\n    \"google.subject\" = \"assertion.sub\"\n  }\n\n  oidc {\n    issuer_uri = \"https://${local.provider}\"\n  }\n}\n\nresource \"google_service_account\" \"studio\" {\n  account_id = \"iterative-studio\"\n}\n\nresource \"google_service_account_iam_binding\" \"workload_identity_binding\" {\n  service_account_id = google_service_account.studio.name\n  role               = \"roles/iam.workloadIdentityUser\"\n  members            = [\"principal://iam.googleapis.com/${google_iam_workload_identity_pool.studio.name}/subject/${local.condition}\"]\n}\n\nresource \"google_project_iam_member\" \"studio\" {\n  project = data.google_project.current.project_id\n  role    = \"roles/storage.admin\"\n  member  = \"serviceAccount:${google_service_account.studio.email}\"\n}\n\noutput \"workload_identity_provider\" {\n  value = google_iam_workload_identity_pool_provider.studio.name\n}\n\noutput \"service_account\" {\n  value = google_service_account.studio.email\n}\n\noutput \"project_id\" {\n  value = data.google_project.current.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: DVCLive Generated YAML Configuration\nDESCRIPTION: Example of the automatically generated dvc.yaml configuration that references the metrics file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/index.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  - dvclive/metrics.json\n```\n\n----------------------------------------\n\nTITLE: Example Output Table from dvc exp show Command\nDESCRIPTION: Demonstrates the output format of the dvc exp show command, displaying experiments with their metrics (yellow), parameters (blue), and dependencies (violet) in a tabular format.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_2\n\nLANGUAGE: dvctable\nCODE:\n```\n ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  neutral:**Experiment**                   neutral:**Created**        metric:**avg_prec**   metric:**roc_auc**   param:**featurize.max_features**   dep:**model.pkl**   dep:**data/features**\n ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  workspace                    -               0.60405    0.9608   3000                     484fab5     52c1fdd\n  random-forest-experiments    May 29, 2021    0.60405    0.9608   3000                     484fab5     52c1fdd\n  ├── a2efdc9 [urban-sign]     10:21 PM        0.55669   0.93516   1000                     e2b5a9a     1b2d542\n  ├── e7bd029 [unwet-jinn]     10:21 PM        0.58589     0.945   2000                     7aae464     2ac217b\n  └── 56f3be3 [freed-roam]     10:21 PM        0.51799   0.92333   500                      cfbfed4     64ed644\n ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Registering Model Version Using GTO CLI in Bash\nDESCRIPTION: This snippet demonstrates how to use the GTO CLI to register a new version of a model. It shows two examples: one for a model in the root directory and another for a model in a subdirectory of a monorepo.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/model-registry/register-version.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngto register pool-segmentation --version v0.0.1\n```\n\nLANGUAGE: bash\nCODE:\n```\ngto register cv:pool-segmentation --version v0.0.1\n```\n\n----------------------------------------\n\nTITLE: DVC File Structure for Imported Data\nDESCRIPTION: Shows the structure of the .dvc file created when importing external data. This file tracks the source URL, ETag for change detection, and local file hash.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/importing-external-data.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\ndeps:\n  - etag: '\"f432e270cd634c51296ecd2bc2f5e752-5\"'\n    path: https://data.dvc.org/get-started/data.xml\nouts:\n  - md5: a304afb96060aad90176268345e10355\n    path: data.xml\n    cache: true\n    persist: false\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated Experiment State After Commit\nDESCRIPTION: Shows the output of 'dvc exp show' after committing an experiment, displaying the new state of the workspace.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show\n```\n\nLANGUAGE: dvctable\nCODE:\n```\n ─────────────────────────────────────────────────────────────────────────────\n  neutral:**Experiment**   neutral:**Created**        metric:**auc**   param:**featurize.max_features**   param:**featurize.ngrams**\n ─────────────────────────────────────────────────────────────────────────────\n  workspace    -          0.69830   2000                     2\n  master       04:31 PM   0.69830   2000                     2\n ─────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Adding an S3 Remote Storage in DVC\nDESCRIPTION: This snippet demonstrates how to add an S3 bucket as a remote storage location for DVC using the CLI command. It sets up 'myremote' pointing to an S3 bucket URL.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add myremote s3://mybucket\n```\n\n----------------------------------------\n\nTITLE: Setting Up DVC Pipeline Stage\nDESCRIPTION: Commands to set up and run a DVC pipeline stage for data preparation\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n prepare \\\n                -d src/prepare.py -d data/data.xml \\\n                -o data/prepared \\\n                python src/prepare.py data/data.xml\n\n$ dvc repro\n```\n\n----------------------------------------\n\nTITLE: Filtering Parameters by Stage Name in Python\nDESCRIPTION: Example of using dvc.api.params_show() to retrieve parameters from a specific stage named 'train'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nparams = dvc.api.params_show(stages=\"train\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Files Example\nDESCRIPTION: Example showing how to fetch only specific targets instead of all tracked files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/fetch.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc fetch prepare\n\n$ tree .dvc/cache/files/md5\n.dvc/cache/files/md5\n├── 20\n│   └── b786b6e6f80e2b3fcf17827ad18597.dir\n├── 32\n│   └── b715ef0d71ff4c9e61f55b09c15e75\n└── 6f\n    └── 597d341ceb7d8fbbe88859a892ef81\n```\n\n----------------------------------------\n\nTITLE: DVC Doctor Command Synopsis\nDESCRIPTION: The command usage syntax for the 'dvc doctor' command, showing the basic structure with optional help, quiet and verbose flags.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/doctor.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc doctor [-h] [-q | -v]\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Active Directory Authentication\nDESCRIPTION: Sets up Active Directory service principal authentication using tenant ID, client ID, and client secret.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/azure-blob-storage.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote tenant_id 'mytenant'\n$ dvc remote modify --local myremote client_id 'myclient'\n$ dvc remote modify --local myremote client_secret 'mysecret'\n```\n\n----------------------------------------\n\nTITLE: Detecting Renamed Files with DVC Diff in Bash\nDESCRIPTION: Illustrates how 'dvc diff' detects renamed files that are otherwise unmodified between Git commits or workspace changes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/diff.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc move data/data.xml data/other_data.xml\n$ dvc diff\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC's Hardlink Lock\nDESCRIPTION: Sets the 'core.hardlink_lock' option to true in the DVC configuration. This can help solve lock acquisition issues, especially when using network file systems. The command requires the DVC configuration to be modified globally or within the project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config core.hardlink_lock true\n```\n\n----------------------------------------\n\nTITLE: Moving a Directory Using DVC Move in CLI\nDESCRIPTION: Demonstrates how to use 'dvc move' to relocate an entire directory that was imported from an external DVC repository, including the movement of the .dvc file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/move.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import ../another-repo data\n...\n$ tree\n.\n├── data\n│   ├── bar\n│   └── foo\n└── data.dvc\n\n$ dvc move data data2/data3\n...\n$ tree\n.\n└── data2\n    ├── data3\n    │   ├── bar\n    │   └── foo\n    └── data3.dvc\n```\n\n----------------------------------------\n\nTITLE: Fetching Files Within Tracked Directories\nDESCRIPTION: Example showing how to fetch individual files within tracked directories.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/fetch.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc fetch data/features/test.pkl\n```\n\n----------------------------------------\n\nTITLE: Precision-Recall Plot Example\nDESCRIPTION: Example of generating a precision-recall curve plot using sample classification scores.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_sklearn_plot.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ny_true = [1, 1, 2, 2]\ny_score = [0.1, 0.4, 0.35, 0.8]\nlive.log_sklearn_plot(\"precision_recall\", y_true, y_score)\n```\n\n----------------------------------------\n\nTITLE: Disabling DVC Analytics via CLI\nDESCRIPTION: Command to disable DVC analytics for the current project using the dvc config command. This sets the core.analytics configuration value to false.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/analytics.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc config core.analytics false\n```\n\n----------------------------------------\n\nTITLE: Example of Using DVC Destroy Command\nDESCRIPTION: Demonstrates a complete workflow of initializing a DVC project, adding a file to it, and then destroying the DVC project structure while preserving the actual data files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/destroy.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc init\n$ echo foo > foo\n$ dvc add foo\n$ ls -a\n\n.dvc .git code.py foo foo.dvc\n\n$ dvc destroy\nThis will destroy all information about your pipelines, all data files...\nAre you sure you want to continue?\nyes\n\n$ ls -a\n\n.git code.py foo\n```\n\n----------------------------------------\n\nTITLE: Logging Multiple Metrics with Timestamp in Python\nDESCRIPTION: Example of logging multiple metrics with timestamps and advancing to the next step.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_metric.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlive.next_step()\nlive.log_metric(\"train/loss\", 0.2, timestamp=True)\nlive.log_metric(\"val/loss\", 0.4, timestamp=True)\n```\n\n----------------------------------------\n\nTITLE: Accessing Metrics from Remote Repository in Python\nDESCRIPTION: Example demonstrating how to retrieve metrics from a remote DVC repository using the repo parameter, without having to clone it locally.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nmetrics = dvc.api.metrics_show(\n    repo=\"https://github.com/iterative/example-get-started\")\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS for WebHDFS in DVC CLI\nDESCRIPTION: Demonstrates how to enable HTTPS (SWebHdfs) for a WebHDFS remote in DVC. This command sets the 'use_https' parameter to true for secure connections.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote use_https true\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up DVC Cache in CLI\nDESCRIPTION: This snippet demonstrates how to use dvc gc with the -w option to remove the data and all its previous versions from the cache after stopping tracking.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/stop-tracking-data.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc gc -w\n```\n\n----------------------------------------\n\nTITLE: Applying an Experiment with DVC exp apply\nDESCRIPTION: Shows how to apply a specific experiment to the workspace using the 'dvc exp apply' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp apply gluey-leak\nChanges for experiment 'gluey-leak' have been applied...\n```\n\n----------------------------------------\n\nTITLE: Unprotecting a DVC-tracked File\nDESCRIPTION: Shows how to use the 'dvc unprotect' command to make a tracked file writable again, removing its read-only status.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unprotect.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc unprotect Posts.xml.zip\n```\n\n----------------------------------------\n\nTITLE: Verifying Pushed Experiments in Remote Repository\nDESCRIPTION: Example showing how to list all experiments available in a remote repository after pushing, verifying that the experiments were successfully transferred to the remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/push.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp list --all origin\nmaster:\n    conic-ease\n    lucid-lair\n    major-mela\n```\n\n----------------------------------------\n\nTITLE: Listing DVC Remotes\nDESCRIPTION: Shows the output of the 'dvc remote list' command, displaying the names, paths, and default status of configured remotes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/list.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote list\nmyremote    /path/to/remote    (default)\notherremote    /path/to/other/remote\n```\n\n----------------------------------------\n\nTITLE: Adding WebDAV Remote in DVC CLI\nDESCRIPTION: Demonstrates how to add a WebDAV remote to DVC using the command line interface. It shows the basic command structure and an example with a subfolder path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote \\\n                    webdavs://example.com/owncloud/remote.php/dav\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote \\\n      webdavs://example.com/owncloud/remote.php/dav/files/myuser\n```\n\n----------------------------------------\n\nTITLE: Setting Additional S3 Configuration Parameters in DVC\nDESCRIPTION: Examples of setting various S3 configuration parameters for a DVC remote, including region, SSL verification, and server-side encryption.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/amazon-s3.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote region 'us-east-2'\n\n$ dvc remote modify myremote ssl_verify false\n# or\n$ dvc remote modify myremote \\\n                      ssl_verify 'path/to/ca_bundle.pem'\n\n$ dvc remote modify myremote sse 'AES256'\n\n$ dvc remote modify myremote \\\n                      acl 'bucket-owner-full-control'\n\n$ dvc remote modify myremote grant_read \\\n        'id=myuser,id=anotheruser'\n```\n\n----------------------------------------\n\nTITLE: Manual Pipeline Execution Commands\nDESCRIPTION: Example commands for manually executing pipeline stages without using dvc repro.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/commit.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ python src/featurization.py data/prepared data/features\n$ python src/train.py data/features model.pkl\n$ python src/evaluate.py model.pkl data/features auc.metric\n```\n\n----------------------------------------\n\nTITLE: DVC Studio CLI Command Usage\nDESCRIPTION: Shows the command line interface synopsis for DVC Studio commands including login, logout, and token management. Includes available options and subcommands with their basic descriptions.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/studio/index.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc studio [-h] [-q | -v] {login,logout,token} ...\n\npositional arguments:\n  COMMAND\n    login               Authenticate DVC with Studio host.\n    logout              Logout user from Studio.\n    token               View the token DVC uses to contact Studio.\n```\n\n----------------------------------------\n\nTITLE: Defining log_metric Function in Python\nDESCRIPTION: Function signature for Live.log_metric(), which logs a metric value with optional timestamp and plotting.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_metric.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef log_metric(\n    name: str,\n    val: Union[int, float, str],\n    timestamp: bool = False,\n    plot: Optional[bool] = True\n):\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Verification for HTTP Remote in DVC CLI\nDESCRIPTION: Demonstrates how to disable SSL certificate verification or specify a custom CA bundle for an HTTP remote using the DVC command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote ssl_verify false\n# or\n$ dvc remote modify myremote ssl_verify path/to/ca_bundle.pem\n```\n\n----------------------------------------\n\nTITLE: Checking File Status After DVC Tracking\nDESCRIPTION: Demonstrates how to check the status of a tracked file, showing that it has become a read-only link (symlink) after being tracked by DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unprotect.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -lh\n-r--r--r--@ 1 10576022 Apr 25  2017 Posts.xml.zip\n-rw-r--r--  1      120 Nov 27 13:29 Posts.xml.zip.dvc\n```\n\n----------------------------------------\n\nTITLE: Using DVC Remote Modify Command (Bash)\nDESCRIPTION: Example of using the 'dvc remote modify' command to update the URL of a remote named 'temp'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/modify.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote modify temp url /mnt/c/tmp/dvcstore\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Account Email for GDrive Delegation\nDESCRIPTION: Sets the service account user email for delegation to overcome quota limits\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote gdrive_service_account_user_email \\\n              example_adress@some_google_domain.com\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM OpenID Connect for DVC Studio with Terraform\nDESCRIPTION: This Terraform configuration sets up AWS IAM OpenID Connect integration with DVC Studio. It creates an OIDC provider, IAM role with S3 access policies, and configures trust relationships based on the Studio credentials subject claim.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/openid-connect.md#2025-04-21_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 4.16\"\n    }\n  }\n\n  required_version = \">= 1.2.0\"\n}\n\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nlocals {\n  provider  = \"studio.datachain.ai/api\"\n  condition = \"credentials:example-team/example-credentials\"\n}\n\ndata \"tls_certificate\" \"studio\" {\n  url = \"https://${local.provider}\"\n}\n\ndata \"aws_iam_policy_document\" \"studio_assume_role\" {\n  statement {\n    effect  = \"Allow\"\n    actions = [\"sts:AssumeRoleWithWebIdentity\"]\n\n    principals {\n      type        = \"Federated\"\n      identifiers = [aws_iam_openid_connect_provider.studio.arn]\n    }\n\n    condition {\n      test     = \"ForAnyValue:StringLike\"\n      variable = \"${aws_iam_openid_connect_provider.studio.url}:sub\"\n      values   = [local.condition]\n    }\n  }\n}\n\ndata \"aws_iam_policy_document\" \"studio\" {\n  statement {\n    actions   = [\"s3:*\"]\n    resources = [\"*\"]\n  }\n}\n\nresource \"aws_iam_openid_connect_provider\" \"studio\" {\n  url             = data.tls_certificate.studio.url\n  client_id_list  = [\"sts.amazonaws.com\"]\n  thumbprint_list = [data.tls_certificate.studio.certificates.0.sha1_fingerprint]\n}\n\nresource \"aws_iam_role\" \"studio\" {\n  max_session_duration = 12 * 60 * 60 # 12 hours\n  assume_role_policy   = data.aws_iam_policy_document.studio_assume_role.json\n\n  inline_policy {\n    name   = \"studio\"\n    policy = data.aws_iam_policy_document.studio.json\n  }\n}\n\noutput \"role_arn\" {\n  value = aws_iam_role.studio.arn\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up DVC Studio Integration\nDESCRIPTION: This code snippet describes the configuration options necessary for integrating DVC with DVC Studio, including authentication token settings, offline mode, and custom Studio URLs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntoken: your_dvc_studio_token\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\noffline: false\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nurl: https://custom.studio.url\n\n```\n\n----------------------------------------\n\nTITLE: Managing Default Remote Settings\nDESCRIPTION: Series of commands demonstrating how to set, get, and clear the default remote configuration in DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/config.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config core.remote myremote\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config core.remote\nmyremote\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config --unset core.remote\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config core.remote -u\n```\n\n----------------------------------------\n\nTITLE: DVC Freeze Command Usage Syntax\nDESCRIPTION: Shows the command line syntax and arguments for the dvc freeze command. The command accepts one or more target stages or .dvc files to freeze.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/freeze.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc freeze [-h] [-q | -v] targets [targets ...]\n```\n\n----------------------------------------\n\nTITLE: Enabling Service Account Authentication for Google Drive Remote in DVC\nDESCRIPTION: Command to enable service account authentication for a Google Drive remote in DVC. This setting ensures that the remote uses a service account with the appropriate access permissions to the file structure rather than a user account.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote gdrive_use_service_account true\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Profile for Remote Access\nDESCRIPTION: An example showing how to use the '--remote-config' option to set an AWS profile when downloading data from an S3-backed DVC repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get https://github.com/iterative/example-get-started-s3 data/prepared --remote-config profile=myprofile\n```\n\n----------------------------------------\n\nTITLE: Function Signature for dvc.api.get_url()\nDESCRIPTION: Defines the Python function signature for dvc.api.get_url() with all available parameters including path, repo, rev, remote, remote_config, and config options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/get_url.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_url(path: str,\n            repo: str = None,\n            rev: str = None,\n            remote: str = None,\n            remote_config: dict = None,\n            config: dict = None) -> str\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with conda on macOS\nDESCRIPTION: Installs DVC using conda package manager from conda-forge channel. Uses mamba for faster installation. Requires Miniconda or Anaconda Distribution.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/macos.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c conda-forge mamba # installs much faster than conda\n$ mamba install -c conda-forge dvc\n```\n\n----------------------------------------\n\nTITLE: Adding and Renaming DVC S3 Remote Example\nDESCRIPTION: Example showing how to first add an Amazon S3 remote storage and then rename it using the DVC remote rename command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/rename.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add myremote s3://mybucket/path\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote rename myremote s3remote\n```\n\n----------------------------------------\n\nTITLE: SSH Download Example\nDESCRIPTION: Example showing how to download a file via SSH using dvc get-url.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get-url.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get-url ssh://user@example.com/path/to/data\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated DVC Project Configuration\nDESCRIPTION: Displays the updated project configuration file after adding and modifying an S3 remote, showing multiple remote configurations and their settings.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/index.md#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n['remote \"myremote\"']\n    url = /path/to/remote\n[core]\n    remote = myremote\n['remote \"newremote\"']\n    url = s3://mybucket/path\n    endpointurl = https://object-storage.example.com\n```\n\n----------------------------------------\n\nTITLE: DVC Stage List Output for Matrix Stage\nDESCRIPTION: This shows the output of `dvc stage list` for a `matrix` stage.  It demonstrates the generated stage names based on the combinations of `model` and `feature` values (e.g., `train@cnn-feature1`). Each stage corresponds to a unique combination of the variables defined in the `matrix`.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_14\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage list\ntrain@cnn-feature1  Outputs cnn-feature1.pkl\ntrain@cnn-feature2  Outputs cnn-feature2.pkl\ntrain@cnn-feature3  Outputs cnn-feature3.pkl\ntrain@xgb-feature1  Outputs xgb-feature1.pkl\ntrain@xgb-feature2  Outputs xgb-feature2.pkl\ntrain@xgb-feature3  Outputs xgb-feature3.pkl\n```\n\n----------------------------------------\n\nTITLE: Using Existing Live Instance with DVCLiveCallback in Python\nDESCRIPTION: This example shows how to use an existing Live instance with DVCLiveCallback. It demonstrates creating a Live instance, using it in LightGBM training, and logging additional metrics after training.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/lightgbm.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\nfrom dvclive.lgbm import DVCLiveCallback\n\nwith Live(\"custom_dir\") as live:\n    lightgbm.train(\n        param,\n        train_data,\n        valid_sets=[validation_data],\n        num_round=5,\n        callbacks=[DVCLiveCallback(live=live)])\n\n    # Log additional metrics after training\n    live.log_metric(\"summary_metric\", 1.0, plot=False)\n```\n\n----------------------------------------\n\nTITLE: Defining log_params Function in Python\nDESCRIPTION: Function signature for the log_params method in the Live class of DVCLive. It takes a dictionary of parameters as input.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef log_params(params: Dict[ParamLike]):\n```\n\n----------------------------------------\n\nTITLE: Visualizing DVC Pipeline with DAG\nDESCRIPTION: This snippet demonstrates using the dvc dag command to visualize the pipeline structure as a graph of connected stages in the terminal.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/data-pipelines.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc dag\n         +---------+\n         | prepare |\n         +---------+\n              *\n              *\n              *\n        +-----------+\n        | featurize |\n        +-----------+\n              *\n              *\n              *\n          +-------+\n          | train |\n          +-------+\n```\n\n----------------------------------------\n\nTITLE: HTTP Download Example\nDESCRIPTION: Example showing how to download a file via HTTP using dvc get-url.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get-url.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get-url https://example.com/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Creating a TAR Archive of a DVC Project\nDESCRIPTION: Shows how to use dvc list with tar to create an archive of the entire workspace. This command creates a TAR file containing all files in the current project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc list . -R | tar -cvf project.tar\n```\n\n----------------------------------------\n\nTITLE: Viewing Complete DVC Experiment History\nDESCRIPTION: Shows how to display all experiments across Git history, sorted by the roc_auc metric, including only changed experiments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show --all-commits --only-changed --sort-by=roc_auc\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Data in YAML for DVC Plots\nDESCRIPTION: An example of hierarchical data in YAML format that can be used as input for DVC plots, containing training accuracy and loss values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntrain:\n  - accuracy: 0.96658\n    loss: 0.10757\n  - accuracy: 0.97641\n    loss: 0.07324\n  - accuracy: 0.87707\n    loss: 0.08136\n  - accuracy: 0.87402\n    loss: 0.09026\n```\n\n----------------------------------------\n\nTITLE: Updating Data in DVC Registry with CLI\nDESCRIPTION: This snippet demonstrates how to update datasets in a DVC registry by modifying the data and running 'dvc add' again, followed by committing the changes with Git.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/data-registry/tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ cp 1000/more/songs/* music/songs/\n$ dvc add music/songs/\n\n$ git status\n...\n\tmodified:   music/songs.dvc\n$ git commit -am \"Add 1,000 more songs to music/ dataset.\"\n\n$ dvc push\n```\n\n----------------------------------------\n\nTITLE: Context Manager Usage Example\nDESCRIPTION: Demonstrates how Live.end() is automatically called when exiting a context manager block using the 'with' statement.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/end.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nwith Live() as live:\n    pass\n# live.end() has been called at this point\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Experiment Diff Output Example\nDESCRIPTION: Example showing the default output format of the 'dvc exp diff' command, displaying changes in metrics and parameters between the HEAD revision and the current workspace.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/diff.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp diff\nPath         Metric   HEAD      workspace  Change\nscores.json  roc_auc  0.915363  0.93345    0.018087\nscores.json  grade    B         B-         —\n\nPath         Param         HEAD  workspace  Change\nparams.yaml  max_features  1500  3000       1500\n```\n\n----------------------------------------\n\nTITLE: Defining DVC Pipeline Stages with Hydra Parameters\nDESCRIPTION: Example of defining DVC pipeline stages using parameters from Hydra composition.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  setup-dataset:\n    cmd:\n      - wget ${dataset.url} -O tmp.tgz\n      - mkdir -p ${dataset.output_folder}\n      - tar zxvf tmp.tgz -C ${dataset.output_folder}\n      - rm tmp.tgz\n    outs:\n      - ${dataset.output_folder}\n  train:\n    cmd: python train.py\n    deps:\n      - ${dataset.output_folder}\n    params:\n      - train\n```\n\n----------------------------------------\n\nTITLE: Listing DVC Remotes\nDESCRIPTION: This command lists the configured DVC remotes, showing the remote name and its corresponding S3 bucket path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/status.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote list\nmystorage\ts3://bucket/path\n```\n\n----------------------------------------\n\nTITLE: Usage Synopsis for import-url Command\nDESCRIPTION: Shows the complete usage syntax for the dvc import-url command including all available options and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: dvc import-url [-h] [-q | -v]\n           [--to-remote] [-r <name>] [--no-exec | --no-download]\n           [-j <number>] [-f] [--version-aware]\n           [--fs-config <name>=<value>]\n           url [out]\n\npositional arguments:\n  url                   (See supported URLs in the description.)\n  out                   Destination path to put files in.\n```\n\n----------------------------------------\n\nTITLE: Changing File Name Using DVC Move in CLI\nDESCRIPTION: Demonstrates how to use 'dvc move' to change a file name from 'data.csv' to 'other.csv' and shows the resulting directory structure.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/move.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc add data.csv\n...\n$ tree\n.\n├── data.csv\n└── data.csv.dvc\n\n$ dvc move data.csv other.csv\n...\n$ tree\n.\n├── other.csv\n└── other.csv.dvc\n```\n\n----------------------------------------\n\nTITLE: Logging Single Parameter with DVCLive in Python\nDESCRIPTION: Demonstrates logging a single parameter using DVCLive.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlive.log_param(\"num_classes\", 10)\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with conda/mamba and Amazon S3 support\nDESCRIPTION: Installs DVC with Amazon S3 storage support using conda-forge channel and mamba for faster installation.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/linux.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ conda install -c conda-forge mamba\n$ mamba install -c conda-forge dvc-s3\n```\n\n----------------------------------------\n\nTITLE: DVC YAML Configuration Example\nDESCRIPTION: Shows the resulting DVC YAML configuration generated for ROC and confusion matrix plots, including templates and axis labels.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_sklearn_plot.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - dvclive/plots/sklearn/roc.json:\n      template: simple\n      x: fpr\n      y: tpr\n      title: Receiver operating characteristic (ROC)\n      x_label: False Positive Rate\n      y_label: True Positive Rate\n  - dvclive/plots/sklearn/cm.json:\n      template: confusion\n      x: actual\n      y: predicted\n      title: Confusion Matrix\n      x_label: True Label\n      y_label: Predicted Label\n```\n\n----------------------------------------\n\nTITLE: DVC Status Command Synopsis\nDESCRIPTION: Command line usage syntax for the dvc status command showing available options and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/status.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc status [-h] [-v] [-j <number>] [-q] [-c] [-r <name>] [-a] [-T]\n                  [--all-commits] [-d] [-R] [--json] [--no-updates]\n                  [targets [targets ...]]\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Studio Token in GitHub Actions\nDESCRIPTION: YAML configuration to securely provide the DVC Studio access token in a CI job using GitHub secrets.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/experiments/live-metrics-and-plots.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Train model\n    env:\n      DVC_STUDIO_TOKEN: ${{ secrets.DVC_STUDIO_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Moving Ignored Data Example\nDESCRIPTION: Demonstrates how DVC handles moving ignored files within tracked directories.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcignore-files.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir data\n$ echo data1 >> data/data1\n$ echo data2 >> data/data2\n$ tree .\n\n.\n└── data\n    ├── data1\n    └── data2\n\n$ echo data/data1 >> .dvcignore\n$ cat .dvcignore\n\ndata/data1\n\n$ dvc add data\n```\n\n----------------------------------------\n\nTITLE: DVC Plots Command Usage\nDESCRIPTION: Command line syntax for the DVC plots command showing the main subcommands (show, diff, templates) and their basic purposes. Includes positional arguments and command descriptions.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/index.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc plots [-h] [-q | -v] {show,diff,templates} ...\n\npositional arguments:\n  COMMAND\n    show        Generate plots from target files or from `plots`\n                definitions in `dvc.yaml`.\n    diff        Show multiple versions of a plot by overlaying them\n                in a single image.\n    templates   List built-in plots templates or show JSON\n                specification for one.\n```\n\n----------------------------------------\n\nTITLE: Initializing Live with System Monitoring in Python\nDESCRIPTION: This code demonstrates how to initialize a Live object with system monitoring enabled using the monitor_system parameter.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/monitor_system.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nlive = Live(monitor_system=True)\n```\n\n----------------------------------------\n\nTITLE: DVC Metrics Show Command Syntax\nDESCRIPTION: Shows the usage syntax for the 'metrics show' command including available arguments and options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/show.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: dvc metrics show [-h] [-q | -v] [-a] [-T] [--all-commits]\n                        [--json] [--md] [-R]\n                        [targets [targets ...]]\n```\n\n----------------------------------------\n\nTITLE: Query Specific Artifact Versions\nDESCRIPTION: Shows different ways to query specific versions of an artifact using shortcuts for greatest version or stage-specific queries.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/command-reference/show.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ gto show churn@greatest\n╒════════════╤═══════════╤═════════╤═════════════════════╤══════════════╕\n│ artifact   │ version   │ stage   │ created_at          │ ref          │\n╞════════════╪═══════════╪═════════╪═════════════════════╪══════════════╡\n│ churn      │ v3.1.1    │ dev     │ 2022-11-09 13:40:33 │ churn@v3.1.1 │\n╘════════════╧═══════════╧═════════╧═════════════════════╧══════════════╛\n\n$ gto show churn#prod\n╒════════════╤═══════════╤═════════╤═════════════════════╤══════════════╕\n│ artifact   │ version   │ stage   │ created_at          │ ref          │\n╞════════════╪═══════════╪═════════╪═════════════════════╪══════════════╡\n│ churn      │ v3.0.0    │ prod    │ 2022-10-28 23:53:53 │ churn@v3.0.0 │\n╘════════════╧═══════════╧═════════╧═════════════════════╧══════════════╛\n\n$ gto show churn@v3.0.0\n╒════════════╤═══════════╤═════════╤═════════════════════╤══════════════╕\n│ artifact   │ version   │ stage   │ created_at          │ ref          │\n╞════════════╪═══════════╪═════════╪═════════════════════╪══════════════╡\n│ churn      │ v3.0.0    │ prod    │ 2022-10-28 23:53:53 │ churn@v3.0.0 │\n╘════════════╧═══════════╧═════════╧═════════════════════╧══════════════╛\n```\n\n----------------------------------------\n\nTITLE: Adding and Checking Ignored Files in CLI\nDESCRIPTION: Demonstrates how to add patterns to .dvcignore and verify ignored files using dvc check-ignore command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcignore-files.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ echo data/data1 >> .dvcignore\n$ cat .dvcignore\ndata/data1\n$ dvc check-ignore data/*\ndata/data1\n```\n\n----------------------------------------\n\nTITLE: DVC Metrics YAML Configuration\nDESCRIPTION: Example of how metrics files are specified in the dvc.yaml configuration file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  - summary.json\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Data Access\nDESCRIPTION: Example demonstrating how to access specific versions of data using Git tags or commits.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport csv\nimport dvc.api\n\nwith dvc.api.open('clean.csv', rev='v1.1.0') as f:\n    reader = csv.reader(f)\n    # ... Process 'clean' data from version 1.1.0\n```\n\n----------------------------------------\n\nTITLE: Automatic DVC Checkout After Git Checkout\nDESCRIPTION: Demonstrates the effect of the installed Git hooks that automatically update DVC-tracked files when switching Git branches.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/checkout.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ git checkout bigrams-experiment  # Has the latest model version\n\n$ md5 model.pkl\nMD5 (model.pkl) = ab349c2b5fa2a0f66d6f33f94424aebe\n```\n\n----------------------------------------\n\nTITLE: Resetting Workspace State with Git and DVC\nDESCRIPTION: Commands to reset the workspace state by checking out the master branch, updating DVC-tracked files, and removing a specific DVC file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: cli\nCODE:\n```\n$ git checkout master\n$ dvc checkout\n$ dvc remove model.weights.h5.dvc\n```\n\n----------------------------------------\n\nTITLE: Using Live.make_summary() in Python\nDESCRIPTION: Example of how to use the Live.make_summary() method. It creates a Live object, adds a metric to the summary, and then calls make_summary() to serialize the data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/make_summary.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nlive = Live()\nlive.summary[\"foo\"] = 1.0\nlive.make_summary()\n```\n\n----------------------------------------\n\nTITLE: Private Repository Access Example\nDESCRIPTION: Example showing how to access files from private repositories using SSH URLs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nwith dvc.api.open(\n    'features.dat',\n    repo='git@server.com:path/to/repo.git'\n) as f:\n    # ... Process 'features'\n```\n\n----------------------------------------\n\nTITLE: DVC Install Command Usage\nDESCRIPTION: Syntax for using the 'dvc install' command to set up Git hooks in a DVC project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/install.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: dvc install [-h] [-q | -v] [--use-pre-commit-tool]\n```\n\n----------------------------------------\n\nTITLE: Using DVC Stage Add Command with Force Flag\nDESCRIPTION: Alternative approach using dvc stage add command with -f flag to add dependencies and outputs to an existing stage named 'prepare'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/add-deps-or-outs-to-a-stage.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n prepare \\\n          -f \\\n          -d src/prepare.py \\\n          -d data/raw.csv \\\n          -o data/train \\\n          -o data/validate \\\n          python src/prepare.py data/raw.csv\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Imported Data\nDESCRIPTION: This command checks the status of the project, showing that an update is available for the imported data file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/status.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc status\ndata.csv.dvc:\n\tchanged deps:\n\t\tupdate available:   data.csv (different/repo/location)\n```\n\n----------------------------------------\n\nTITLE: Including Untracked Paths in DVC Experiments\nDESCRIPTION: Example showing how to include untracked or ignored files in temporary experiments using the -C flag.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/run.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --temp -C secrets.txt -C symlinked-directory\n```\n\n----------------------------------------\n\nTITLE: Using Retrieved Parameters in Python\nDESCRIPTION: Example of how to use the parameters retrieved by dvc.api.params_show() in a machine learning context.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclf = RandomForestClassifier(\n    n_estimators=params[\"n_est\"],\n    min_samples_split=params[\"min_split\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up DVC Studio Token in CLI\nDESCRIPTION: Command to interactively set up the DVC Studio access token for local experiment runs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/experiments/live-metrics-and-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc studio login\n```\n\n----------------------------------------\n\nTITLE: Queueing DVC Experiments\nDESCRIPTION: Demonstrates how to queue multiple DVC experiments for future execution using the --queue option.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/running-experiments.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --queue -S train.fine_tune_args.base_lr=0.001\nQueueing with overrides '{\"params.yaml\": [\"train.fine_tune_args.base_lr=0.001\"]}'.\nQueued experiment 'blowy-pail' for future execution.\n$ dvc exp run --queue -S train.fine_tune_args.base_lr=0.002\nQueueing with overrides '{\"params.yaml\": [\"train.fine_tune_args.base_lr=0.002\"]}'.\nQueued experiment 'nubby-gram' for future execution.\n```\n\n----------------------------------------\n\nTITLE: DVC Plots Diff Basic Comparison Example\nDESCRIPTION: Shows how to compare uncommitted changes with the last committed version using a custom x-label\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/diff.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots diff --targets logs.csv --x-label x\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of dvc.api.metrics_show() in Python\nDESCRIPTION: Simple example showing how to import the DVC API and call the metrics_show() function without arguments to retrieve all metrics from the current project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nmetrics = dvc.api.metrics_show()\n```\n\n----------------------------------------\n\nTITLE: Configuring SageMaker Estimator with DVC Environment\nDESCRIPTION: Python code to configure SageMaker estimator with DVC environment variables for live updates\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/sagemaker.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom sagemaker.estimator import Estimator\n\nenv = {name: value for name, value in os.environ.items() if name.startswith(\"DVC\")}\n\nestimator = Estimator(\n    environment=env,\n    entry_point=\"train.py\",\n    source_dir=\"src\",\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Parameters by Multiple Stage Names in Python\nDESCRIPTION: Example of using dvc.api.params_show() to retrieve parameters from multiple stages ('featurize' and 'train').\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nparams = dvc.api.params_show(stages=[\"featurize\", \"train\"])\n```\n\n----------------------------------------\n\nTITLE: Checking Remote Data Status in DVC\nDESCRIPTION: Shows how to verify if all data exists in the remote repository using 'dvc data status' with the '--not-in-remote' and '--json' flags, filtering the output with grep.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/running-pipelines.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc data status --not-in-remote --json | grep -v not_in_remote\ntrue\n```\n\n----------------------------------------\n\nTITLE: Resolving .dvc File Merge Conflicts\nDESCRIPTION: Example of a merge conflict in a .dvc file showing conflicting MD5 hashes and sizes for tracked data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/resolve-merge-conflicts.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nouts:\n< < < < < < < HEAD\n- md5: a304afb96060aad90176268345e10355\n  size: 12\n= = = = = = =\n- md5: 35dd1fda9cfb4b645ae431f4621fa324\n  size: 100\n> > > > > > > branch\n  path: data.xml\n```\n\n----------------------------------------\n\nTITLE: Queuing and Running DVC Experiments\nDESCRIPTION: These CLI commands show how to queue DVC experiments for later execution and how to run all queued experiments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-pipelines.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --queue --set-param \"train.img_size=512\"\nQueueing with overrides '{\"params.yaml\": [\"train.img_size=512\"]}'.\n\n$ dvc exp run --run-all\n```\n\n----------------------------------------\n\nTITLE: Creating Separate ZIP Archives for Code and Data\nDESCRIPTION: Demonstrates creating separate ZIP archives for Git-tracked code and DVC-tracked data. This example creates code.zip with git archive and data.zip with the files listed by dvc list.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git archive -o code.zip HEAD\n$ dvc list . -R --dvc-only | zip -@ data.zip\n```\n\n----------------------------------------\n\nTITLE: Data Preparation Pipeline Stage\nDESCRIPTION: DVC pipeline stage definition for downloading and preparing data in SageMaker, with external S3 dependencies\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/sagemaker.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprepare:\n  cmd:\n    - wget\n      https://sagemaker-sample-data-us-west-2.s3-us-west-2.amazonaws.com/autopilot/direct_marketing/bank-additional.zip\n      -O bank-additional.zip\n    - python sm_prepare.py --bucket ${bucket} --prefix ${prefix}\n  deps:\n    - sm_prepare.py\n    - https://sagemaker-sample-data-us-west-2.s3-us-west-2.amazonaws.com/autopilot/direct_marketing/bank-additional.zip\n  outs:\n    - s3://${bucket}/${prefix}/input_data:\n        cache: false\n```\n\n----------------------------------------\n\nTITLE: Viewing Logged Parameters Using DVC CLI\nDESCRIPTION: Command-line instruction for viewing the differences in logged parameters using the DVC params command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_params.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\ndvc params diff dvclive/params.yaml\n```\n\n----------------------------------------\n\nTITLE: ML Framework Integration Example\nDESCRIPTION: Shows how Live.end() is automatically called when training ends in supported ML frameworks, using Keras as an example with the DVCLiveCallback.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/end.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive.keras import DVCLiveCallback\n\n...\n\nmodel.fit(\n    train_dataset, epochs=num_epochs, validation_data=validation_dataset,\n    callbacks=[DVCLiveCallback()])\n# live.end() has been called at this point\n```\n\n----------------------------------------\n\nTITLE: DVC Project Initialization\nDESCRIPTION: Command to initialize a new DVC project within a Git repository\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndvc init\n```\n\n----------------------------------------\n\nTITLE: Checking Status with Ignored Files\nDESCRIPTION: Example showing how DVC status behaves with modifications to ignored and tracked files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcignore-files.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc status\nData and pipelines are up to date.\n\n$ echo \"2345\" >> data/data1\n$ dvc status\nData and pipelines are up to date.\n\n$ rm data/data1\n$ dvc status\nData and pipelines are up to date.\n\n$ echo \"345\" >> data/data2\n$ dvc status\ndata.dvc:\n\tchanged outs:\n\t\tmodified:           data\n```\n\n----------------------------------------\n\nTITLE: Adding GCS Remote Storage in DVC\nDESCRIPTION: Command to add a Google Cloud Storage bucket as a default remote storage location in DVC. Requires specifying a bucket name and optional path within the bucket.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-cloud-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote gs://<mybucket>/<path>\n```\n\n----------------------------------------\n\nTITLE: Downloading Data using DVC Get\nDESCRIPTION: Command to download a sample data file from a DVC data registry repository and save it to a local path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc get https://github.com/iterative/dataset-registry \\\n          get-started/data.xml -o data/data.xml\n```\n\n----------------------------------------\n\nTITLE: Remote Credentials Configuration\nDESCRIPTION: Example showing how to provide credentials for accessing remote storage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nremote_config = {\n    'access_key_id': 'mykey',\n    'secret_access_key': 'mysecretkey',\n    'session_token': 'mytoken',\n}\n\nwith dvc.api.open('data', remote_config=remote_config) as f:\n    # ... Process data\n```\n\n----------------------------------------\n\nTITLE: DVCLive Generated Metrics JSON\nDESCRIPTION: Example of the JSON metrics file automatically generated by DVCLive containing AUC, error, and true positive metrics.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/index.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AUC\": 0.66729,\n  \"error\": 0.16982,\n  \"TP\": 516\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DVC Workspace Term in YAML\nDESCRIPTION: YAML frontmatter that defines the 'Workspace' term for DVC documentation, including its name, matching patterns, and tooltip explanation. The tooltip explains that a workspace is a directory containing DVC project files including raw data, source code, and ML models, with only one version visible at a time.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/basic-concepts/workspace.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Workspace\nmatch: [workspace]\ntooltip: >\n  Directory containing all your DVC project files, e.g. raw data, source code,\n  ML models. One project version at a time is visible in the workspace.  \n  [More info](/doc/user-guide/basic-concepts/workspace)\n---\n```\n\n----------------------------------------\n\nTITLE: Listing DVC Remote Storage Locations\nDESCRIPTION: Illustrates the use of 'dvc remote list' command to display all configured remote storage locations in the project, including their URLs and default status.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote list\nmyremote    /path/to/remote    (default)\nnewremote    s3://mybucket/path\n```\n\n----------------------------------------\n\nTITLE: Downloading Additional Dataset\nDESCRIPTION: Commands to download and extract additional training data for the second version of the model.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get https://github.com/iterative/dataset-registry \\\n          tutorials/versioning/new-labels.zip\n$ unzip -q new-labels.zip\n$ rm -f new-labels.zip\n```\n\n----------------------------------------\n\nTITLE: Migrating Existing DVC Cache\nDESCRIPTION: Example of migrating cache data from older DVC releases to the DVC 3.0 location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/cache/migrate.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc cache migrate\nMigrated 94975 files to DVC 3.0 cache location.\n```\n\n----------------------------------------\n\nTITLE: DVC Params Diff Command Synopsis\nDESCRIPTION: Shows the command-line usage syntax for the dvc params diff command including available options and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/diff.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc params diff [-h] [-q | -v]\n                       [--targets [<paths> [<paths> ...]]] [--all]\n                       [--deps] [--json] [--md] [--no-path]\n\npositional arguments:\n  a_rev          Old Git commit to compare (defaults to HEAD)\n  b_rev          New Git commit to compare (defaults to the\n                 current workspace)\n```\n\n----------------------------------------\n\nTITLE: Setting Up DVC Studio Environment Variables\nDESCRIPTION: Configuration for enabling live experiment updates in DVC Studio when using Databricks Repos.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/databricks.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport getpass\nimport os\n\nos.environ[\"DVC_STUDIO_TOKEN\"] = getpass.getpass()\nos.environ[\"DVC_EXP_GIT_REMOTE\"] = \"https://github.com/<org>/<repo>\"\n```\n\n----------------------------------------\n\nTITLE: DVC Commit Command Usage Syntax\nDESCRIPTION: Command line syntax showing usage pattern and arguments for the dvc commit command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/commit.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc commit [-h] [-q | -v] [-f] [-d] [-R]\n                  [--no-relink] [targets [targets ...]]\n```\n\n----------------------------------------\n\nTITLE: Using fsspec.get_fs_token_paths with DVC URLs and Storage Options\nDESCRIPTION: Example showing how to use fsspec's get_fs_token_paths function with a DVC URL, passing the Git repository URL through the storage_options dictionary.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> import fsspec\n>>> fsspec.get_fs_token_paths(\n...   \"dvc://workshop/satellite-data/jan_train.csv\",\n...   storage_options={\"url\": \"https://github.com/iterative/dataset-registry.git\"},\n... )\n(<dvc.fs.dvc._DVCFileSystem object at 0x113f7a290>, '06e54af48d3513bf33a8988c47e6fb47', ['workshop/satellite-data/jan_train.csv'])\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Data Version\nDESCRIPTION: Commands to checkout a specific version of the dataset while keeping current code.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout v1.0 data.dvc\n$ dvc checkout data.dvc\n```\n\n----------------------------------------\n\nTITLE: Azure Authentication: SAS Token (Bash)\nDESCRIPTION: Example of configuring an Azure remote using a SAS token for authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/modify.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d myremote azure://mycontainer/object\n$ dvc remote modify --local myremote account_name 'myaccount'\n$ dvc remote modify --local myremote sas_token 'mysecret'\n$ dvc push\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Remote in DVC CLI\nDESCRIPTION: Demonstrates how to add an HTTP remote using the DVC command line interface. This command sets up a new remote named 'myremote' with the specified URL.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote https://example.com/path\n```\n\n----------------------------------------\n\nTITLE: Listing DVC Experiments\nDESCRIPTION: Shows how to list available experiments in a DVC project using the `dvc exp list` command, which displays all experiments under the master branch.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/rename.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp list\nmaster:\n        major-mela\n        conic-ease\n        lucid-lair\n```\n\n----------------------------------------\n\nTITLE: Usage Synopsis for DVC Experiment Cleanup Command\nDESCRIPTION: Displays the usage syntax for the 'dvc exp clean' command. This command is used to clean up temporary files related to DVC experiments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/clean.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc exp clean [-h] [-q | -v]\n```\n\n----------------------------------------\n\nTITLE: Setting WebDAV Authentication Token in DVC CLI\nDESCRIPTION: Demonstrates how to set a token for WebDAV authentication. This method is used when token-based authentication is preferred over username/password.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote token 'mytoken'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom AWS Config Path for DVC S3 Remote\nDESCRIPTION: Commands to modify a DVC S3 remote with custom AWS CLI config file path, credential file path, and profile name.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/amazon-s3.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote \\\n                    configpath 'path/to/config'\n# or\n$ dvc remote modify --local myremote \\\n                    credentialpath 'path/to/credentials'\n# and (optional)\n$ dvc remote modify myremote profile 'myprofile'\n```\n\n----------------------------------------\n\nTITLE: Setting Password for HTTP Remote in DVC CLI\nDESCRIPTION: Demonstrates how to set the password for an HTTP remote using the DVC command line interface. This is used for any authentication method.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote password mypassword\n```\n\n----------------------------------------\n\nTITLE: Defining make_dvcyaml Method\nDESCRIPTION: Basic method signature for the make_dvcyaml() function that generates DVC configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/make_dvcyaml.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef make_dvcyaml()\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Stage List Command Usage\nDESCRIPTION: Shows the usage syntax for the 'dvc stage list' command, including available options and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/stage/list.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc stage list [-h] [-q | -v]\n                      [-R] [--all] [--fail] [--name-only]\n                      [targets ...]\n```\n\n----------------------------------------\n\nTITLE: Displaying Hidden Commit Indicator in Markdown\nDESCRIPTION: Shows how to display a hidden commit indicator using an image in Markdown syntax.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/experiments/explore-ml-experiments.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Hidden commit indicator](https://static.iterative.ai/img/studio/hidden_commit_indicator.png)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of DVC SCM API\nDESCRIPTION: Demonstrates how to import and use the DVC SCM API functions to retrieve lists of branches, commits, and tags from a DVC repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/scm.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nbranches = dvc.api.scm.all_branches()\ncommits = dvc.api.scm.all_commits()\ntags = dvc.api.scm.all_tags()\n```\n\n----------------------------------------\n\nTITLE: Configuring Local External Dependency in DVC\nDESCRIPTION: Creates a DVC stage that copies a file from an external local path and tracks it as a dependency.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/external-dependencies-and-outputs.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n download_file \\\n          -d /home/shared/data.txt \\\n          -o data.txt \\\n          cp /home/shared/data.txt data.txt\n```\n\n----------------------------------------\n\nTITLE: Visualizing Metrics with DVC Plots in CLI\nDESCRIPTION: Command to visualize metric differences using DVC plots in the command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_metric.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots diff dvclive/plots\n```\n\n----------------------------------------\n\nTITLE: Configuring OSS URL Parameter\nDESCRIPTION: Command to modify the URL parameter for an OSS remote storage location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/aliyun-oss.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote url oss://mybucket/path\n```\n\n----------------------------------------\n\nTITLE: Unfreezing a DVC Stage and Checking Status in Bash\nDESCRIPTION: This example demonstrates how to unfreeze a previously frozen DVC stage using the 'dvc unfreeze' command and then check the project status. It shows how unfreezing affects the DVC status output.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unfreeze.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc unfreeze make_copy\n$ dvc status\nmake_copy:\n\tchanged deps:\n\t\tmodified:           foo\nfoo.dvc:\n\tchanged outs:\n\t\tmodified:           foo\n```\n\n----------------------------------------\n\nTITLE: Adding HDFS Remote Storage in DVC CLI\nDESCRIPTION: Demonstrates how to add an HDFS remote storage location using the DVC CLI. This command sets up a new remote named 'myremote' with the specified HDFS URL.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote hdfs://user@example.com:path\n```\n\n----------------------------------------\n\nTITLE: DVC Parameters Diff Command\nDESCRIPTION: CLI command to visualize the logged parameters using DVC's param diff functionality.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_param.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc params diff dvclive/params.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Azure SAS Token\nDESCRIPTION: Configures the shared access signature (SAS) token for authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/azure-blob-storage.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote sas_token 'mysecret'\n```\n\n----------------------------------------\n\nTITLE: Manual Step Updates in DVCLive\nDESCRIPTION: Example of manually updating steps in DVCLive. This approach allows for custom step intervals and selective calling of summary and report methods.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/next_step.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nlive = Live()\n\nfor custom_step in [0, 15, 20]:\n    live.step = custom_step\n    live.log_metric(\"metric_1\", 0.9)\n    live.log_metric(\"metric_2\", 0.7)\n    live.make_summary()\n# Create report only at the end instead of at each iteration\nlive.make_report()\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Cache Location\nDESCRIPTION: Sets up a shared DVC cache directory on Databricks File System (DBFS).\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/databricks.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n!dvc config cache.dir /dbfs/dvc/cache\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage of DVC Unprotect Command\nDESCRIPTION: Shows the usage syntax and arguments for the 'dvc unprotect' command. It specifies that the command takes one or more target files or directories as positional arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unprotect.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc unprotect [-h] [-q | -v] targets [targets ...]\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC Project Configuration for Remote Storage\nDESCRIPTION: Shows the resulting configuration in the project's config file after adding a default local remote. It includes the remote URL and core settings.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/index.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n['remote \"myremote\"']\n    url = /path/to/remote\n[core]\n    remote = myremote\n```\n\n----------------------------------------\n\nTITLE: Removing DVC Tracking for a File in CLI\nDESCRIPTION: This snippet shows how to use dvc remove to stop tracking a file. It deletes the .dvc file and removes the corresponding .gitignore entry, leaving the data file untracked.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/stop-tracking-data.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remove data.csv.dvc\n\n$ git status\n    Untracked files:\n        data.csv\n```\n\n----------------------------------------\n\nTITLE: Executing DVC Version Command Inside a DVC Project\nDESCRIPTION: Demonstrates the output of the 'dvc version' command when run inside a DVC project, showing detailed environment and project information.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/version.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc version\n\nDVC version: 1.10.0 (pip)\n---------------------------------\nPlatform: Python 3.8.3 on Linux-5.4.0-47-generic-x86_64-with-debian-buster-sid\nSupports: gs, hdfs, http, https, s3\nCache types: hardlink, symlink\nCache directory: ext4 on /dev/sda1\nCaches: local\nRemotes: https, s3, ssh\nWorkspace directory: ext4 on /dev/sda1\nRepo: dvc, git\n```\n\n----------------------------------------\n\nTITLE: Recursively Listing Files in a Data Registry\nDESCRIPTION: Demonstrates using the -R option to recursively list all files in a DVC repository that's being used as a data registry. Shows the complete structure including subdirectories.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc list -R https://github.com/iterative/dataset-registry\n.gitignore\nREADME.md\nget-started/.gitignore\nget-started/data.xml\nget-started/data.xml.dvc\nimages/.gitignore\nimages/dvc-logo-outlines.png\nimages/dvc-logo-outlines.png.dvc\nimages/owl_sticker.png\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Username for HTTP Remote in DVC CLI\nDESCRIPTION: Shows how to set the username for an HTTP remote with basic authentication using the DVC command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote user myuser\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameters in DVC YAML\nDESCRIPTION: Example showing how to specify parameter file paths in the DVC configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  - params.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage for DVC Artifacts Command\nDESCRIPTION: This code snippet shows the usage syntax for the 'dvc artifacts' command. It outlines the command structure, available subcommands, and positional arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/artifacts/index.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc artifacts [-h] [-q | -v] {get} ...\n\npositional arguments:\n  COMMAND\n    get          Download an artifact from a DVC project.\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Move Command Usage in CLI\nDESCRIPTION: Shows the usage syntax for the 'dvc move' command, including its arguments and options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/move.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: dvc move [-h] [-q | -v] src dst\n\npositional arguments:\n  src            Source path to a data file or directory.\n  dst            Destination path.\n```\n\n----------------------------------------\n\nTITLE: Example Composed params.yaml\nDESCRIPTION: An example of what the resulting params.yaml could look like after Hydra composition.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndataset:\n  url: https://s3.amazonaws.com/fast-ai-imageclas/imagenette2-160.tgz\n  output_folder: imagenette\ntrain:\n  model:\n    name: ResNet\n    size: 50\n    weights: ResNet50_Weights.IMAGENET1K_V2\n  optimizer:\n    name: SGD\n    lr: 0.001\n    momentum: 0.9\n```\n\n----------------------------------------\n\nTITLE: Checking Out Files Within Tracked Directories\nDESCRIPTION: Demonstrates how to checkout specific files within a directory that is tracked by DVC as a whole.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/checkout.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc checkout data/features/test.pkl\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Triggers for GitHub/GitLab\nDESCRIPTION: YAML configuration to trigger workflow on tag push events. For GitHub, it watches all tags. For GitLab, it triggers when a CI commit tag is present.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/model-registry/model-cicd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  # the workflow is triggered whenever a tag is pushed to the repository\n  push:\n    tags:\n      - '*'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nworkflow:\n  rules:\n    # the workflow is triggered whenever a tag is pushed to the repository\n    - if: $CI_COMMIT_TAG\n```\n\n----------------------------------------\n\nTITLE: Pushing DVC Experiments to Git Remote\nDESCRIPTION: Command to push completed DVC experiments to a Git remote, including metrics, plots, code, and DVC-cached files. This example pushes to the 'origin' remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/sharing-experiments.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp push origin\n```\n\n----------------------------------------\n\nTITLE: Modifying HDFS Remote URL in DVC CLI\nDESCRIPTION: Shows how to modify the URL of an existing HDFS remote storage in DVC. This command updates the URL for the remote named 'myremote'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote url hdfs://user@example.com/path\n```\n\n----------------------------------------\n\nTITLE: Checking DVC Status and Diff After Applying Experiment\nDESCRIPTION: Shows how to check the status of DVC-tracked files after applying an experiment using DVC status and diff commands.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc status\nData and pipelines are up to date.\n$ dvc diff\nModified:\n    data/features/\n    data/features/test.pkl\n    data/features/train.pkl\n    model.pkl\nfiles summary: 0 added, 0 deleted, 3 modified, 0 not in cache\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Default Remote\nDESCRIPTION: An example demonstrating how to use the '--remote' option to specify which remote to use when downloading data from a DVC repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get https://github.com/iterative/example-get-started-s3 data/prepared --remote myremote\n```\n\n----------------------------------------\n\nTITLE: Checking Status without Update Checks\nDESCRIPTION: This command checks the status of the project without performing update checks on imported data, useful for speeding up status checks or when lacking permissions to access the original source data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/status.md#2025-04-21_snippet_8\n\nLANGUAGE: dvc\nCODE:\n```\n$ dvc status --no-updates\nData and pipelines are up to date.\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Storage Account Name\nDESCRIPTION: Modifies the DVC remote to set the Azure storage account name, which is required for authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/azure-blob-storage.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote account_name 'mystorage'\n```\n\n----------------------------------------\n\nTITLE: Defining DVC Metrics Diff Command Usage in Bash\nDESCRIPTION: This snippet shows the usage syntax for the 'dvc metrics diff' command, including available options and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/diff.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc metrics diff [-h] [-q | -v]\n                        [--targets [<paths> [<paths> ...]]] [-R]\n                        [--all] [--json] [--md] [--no-path]\n                        [--precision <n>]\n                        [a_rev] [b_rev]\n```\n\n----------------------------------------\n\nTITLE: Linking Fetched Files to Workspace\nDESCRIPTION: Command to link the fetched files from the cache to the workspace.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/fetch.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc checkout\n```\n\n----------------------------------------\n\nTITLE: Visualizing Metric Summary with DVC Metrics in CLI\nDESCRIPTION: Command to visualize metric summary differences using DVC metrics in the command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_metric.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc metrics diff dvclive/metrics.json\n```\n\n----------------------------------------\n\nTITLE: Tracking a Data File with DVC\nDESCRIPTION: Shows how to track a data file (Posts.xml.zip) using the 'dvc add' command after listing the file's details.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unprotect.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -lh\n-rw-r--r--  1 10576022 Nov 27 13:30 Posts.xml.zip\n\n$ dvc add Posts.xml.zip\n```\n\n----------------------------------------\n\nTITLE: Using DVC Experiment Diff Command (Synopsis)\nDESCRIPTION: The synopsis shows the usage pattern and available command line arguments for the 'dvc exp diff' command, including options for output formatting and specifying revisions to compare.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/diff.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc exp diff [-h] [-q | -v] [--all] [--param-deps]\n                    [--json] [--md]\n                    [--no-path] [--precision <n>]\n                    [a_rev] [b_rev]\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Connection String\nDESCRIPTION: Configures the Azure connection string for authentication, which is the recommended method.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/azure-blob-storage.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote \\\n                              connection_string 'mysecret'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Method for File Uploads in DVC CLI\nDESCRIPTION: Shows how to override the default HTTP method for file uploads to 'PUT' using the DVC command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote method PUT\n```\n\n----------------------------------------\n\nTITLE: DVC Stage Definition with Parameters\nDESCRIPTION: CLI command to create a DVC pipeline stage that depends on specific parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/diff.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n train \\\n                -d train.py -d users.csv -o model.pkl \\\n                -p lr,train \\\n                python train.py\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Environment Variables\nDESCRIPTION: Examples of setting various Azure-related environment variables for authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/azure-blob-storage.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ export AZURE_STORAGE_CONNECTION_STRING='mysecret'\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ export AZURE_STORAGE_ACCOUNT='myaccount'\n# and\n$ export AZURE_STORAGE_KEY='mysecret'\n# or\n$ export AZURE_STORAGE_SAS_TOKEN='mysecret'\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ export AZURE_TENANT_ID='directory-id'\n$ export AZURE_CLIENT_ID='client-id'\n$ export AZURE_CLIENT_CERTIFICATE_PATH='/path/to/certificate'\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ export AZURE_CLIENT_ID='client-id'\n$ export AZURE_USERNAME='myuser'\n$ export AZURE_PASSWORD='mysecret'\n```\n\n----------------------------------------\n\nTITLE: DVC Remove Command Usage Syntax\nDESCRIPTION: Shows the command line syntax and arguments for the dvc remove command\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remove.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: dvc remove [-h] [-q | -v] [--outs] targets [targets ...]\n```\n\n----------------------------------------\n\nTITLE: Resolving Imported Data Merge Conflicts\nDESCRIPTION: Example of resolving merge conflicts in .dvc files generated by dvc import or dvc import-url commands.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/resolve-merge-conflicts.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfrozen: true\ndeps:\n  - path: get-started/data.xml\n    repo:\n      url: https://github.com/iterative/dataset-registry\nouts:\n  - path: data.xml\n```\n\n----------------------------------------\n\nTITLE: Renaming a DVC Remote Storage Location\nDESCRIPTION: Demonstrates the use of 'dvc remote rename' command to change the name of an existing remote storage location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/index.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote rename oldremote newremote\n```\n\n----------------------------------------\n\nTITLE: Using Custom Resolver in Hydra Config\nDESCRIPTION: Example of using a custom OmegaConf resolver in Hydra configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndir: raw/data\nrelpath: dataset.csv\nfullpath: ${join:${dir},${relpath}}\n```\n\n----------------------------------------\n\nTITLE: Committing Experiment Changes to Git\nDESCRIPTION: Shows the Git commands to commit the changes from an applied experiment to make it persistent in the repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ git add .\n$ git commit -m \"persist gluey-leak\"\n```\n\n----------------------------------------\n\nTITLE: Custom Remote Configuration\nDESCRIPTION: Example demonstrating how to change default remote and specify credentials using config dictionary.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nconfig = {\n    'core': {'remote': 'myremote'},\n    'remote': {\n        'myremote': {\n            'access_key_id': 'mykey',\n            'secret_access_key': 'mysecretkey',\n            'session_token': 'mytoken',\n        },\n    },\n}\n\nwith dvc.api.open('data', config=config) as f:\n    # ... Process data\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with Homebrew on macOS\nDESCRIPTION: Installs DVC using Homebrew package manager on macOS. Requires Homebrew to be previously installed on the system.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/macos.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install dvc\n```\n\n----------------------------------------\n\nTITLE: Enabling Kerberos Authentication for WebHDFS in DVC CLI\nDESCRIPTION: Shows how to enable Kerberos authentication for a WebHDFS remote in DVC. This command sets the 'kerberos' parameter to true for the remote named 'myremote'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote kerberos true\n```\n\n----------------------------------------\n\nTITLE: DVC DAG Command Usage Syntax\nDESCRIPTION: Shows the basic command syntax and arguments for the dvc dag command. The command can target specific stages or show the full workspace pipeline.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/dag.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc dag [-h] [-q | -v] [-o] [--full]\n               [--md] [--mermaid] [--dot]\n               [target]\n```\n\n----------------------------------------\n\nTITLE: Using DVC Experiment Push Command Syntax\nDESCRIPTION: The usage syntax for the 'dvc exp push' command, which uploads experiments to Git remotes and their associated data to remote storage. It shows the command structure with all available arguments and options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/push.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc exp push [-h] [-q | -v] [-A] [--rev <commit>] [-n <num>] [-f]\n                    [--no-cache] [-r <name>] [-j <number>]\n                    [--run-cache | --no-run-cache]\n                    git_remote [experiment ...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Drift Evaluation\nDESCRIPTION: Define function to calculate data drift metrics using Evidently\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/evidently.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom evidently.report import Report\nfrom evidently.metric_preset import DataDriftPreset\n\n\ndef eval_drift(reference, production, column_mapping):\n    data_drift_report = Report(metrics=[DataDriftPreset()])\n    data_drift_report.run(\n        reference_data=reference, current_data=production, column_mapping=column_mapping\n    )\n    report = data_drift_report.as_dict()\n\n    drifts = []\n\n    for feature in (\n        column_mapping.numerical_features + column_mapping.categorical_features\n    ):\n        drifts.append(\n            (\n                feature,\n                report[\"metrics\"][1][\"result\"][\"drift_by_columns\"][feature][\n                    \"drift_score\"\n                ],\n            )\n        )\n\n    return drifts\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Experiment Removal Example\nDESCRIPTION: Demonstrates listing experiments and removing them individually or all at once using the -A flag.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/remove.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp list\nmaster:\n        major-mela\n        conic-ease\n        lucid-lair\n\n$ dvc exp remove conic-ease lucid-lair\n\n$ dvc exp list\nmaster:\n        major-mela\n\n$ dvc exp remove -A\n\n$ dvc exp list\n```\n\n----------------------------------------\n\nTITLE: Function Signatures for DVC SCM API Functions\nDESCRIPTION: Defines the three main functions in the dvc.api.scm module: all_branches, all_commits, and all_tags. Each function returns a list of Git revisions and accepts an optional repo parameter.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/scm.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef all_branches(repo: Optional[str] = None) -> List[str]:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef all_commits(repo: Optional[str] = None) -> List[str]:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef all_tags(repo: Optional[str] = None) -> List[str]:\n```\n\n----------------------------------------\n\nTITLE: DVC Checkout Command Synopsis\nDESCRIPTION: Shows the usage syntax for the 'dvc checkout' command including all available options and parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/checkout.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc checkout [-h] [-q | -v] [--summary] [-d] [-R] [-f]\n                    [--relink] [--allow-missing]\n                    [targets [targets ...]]\n```\n\n----------------------------------------\n\nTITLE: Setting GCS Credentials Environment Variable\nDESCRIPTION: Command to set the GOOGLE_APPLICATION_CREDENTIALS environment variable for GCS authentication using a service account key file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-cloud-storage.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ export GOOGLE_APPLICATION_CREDENTIALS='.../project-XXX.json'\n```\n\n----------------------------------------\n\nTITLE: Setting Password for WebHDFS Basic Authentication in DVC CLI\nDESCRIPTION: Shows how to set a password for Basic Authentication with a WebHDFS remote in DVC. This command should be used with the --local flag to keep the password out of Git-tracked files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_13\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local password \"mypassword\"\n```\n\n----------------------------------------\n\nTITLE: Defining the artifacts_show Function in DVC API\nDESCRIPTION: Function signature for artifacts_show() that retrieves path and Git revision for a tracked artifact in the model registry. It accepts parameters for artifact name, version, stage, and repository location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/artifacts_show.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef artifacts_show(\n    name: str,\n    version: Optional[str] = None,\n    stage: Optional[str] = None,\n    repo: Optional[str] = None,\n) -> Dict[str, str]:\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Storage Account Key\nDESCRIPTION: Configures the storage account key for authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/azure-blob-storage.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote account_key 'mysecret'\n```\n\n----------------------------------------\n\nTITLE: DVC Import-db Generated DVC File Structure\nDESCRIPTION: Shows the YAML structure of the .dvc file created by the import-db command, which tracks the database dependency and the output file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-db.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmd5: ddd4654188815dcae6ce4d4a37f83bde\nfrozen: true\ndeps:\n  - db:\n      file_format: csv\n      connection: pgsql\n      table: customers_table\nouts:\n  - md5: 131543a828b297ce0a5925800bd88810\n    size: 15084226\n    hash: md5\n    path: customers_table.csv\n```\n\n----------------------------------------\n\nTITLE: Examining Model Hash in DVC Lock File\nDESCRIPTION: Shows the MD5 hash of a model file stored in the dvc.lock file, which doesn't match the actual file in the workspace until dvc checkout is run.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/checkout.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nouts:\n  - path: model.pkl\n    md5: 98af33933679a75c2a51b953d3ab50aa\n```\n\n----------------------------------------\n\nTITLE: DVC Remote Garbage Collection Command\nDESCRIPTION: Command for cleaning up outdated data from remote storage after migrating to DVC 3.0.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndvc gc -c\n```\n\n----------------------------------------\n\nTITLE: Switching Between Data Versions\nDESCRIPTION: General pattern for switching to a different Git branch or commit and updating the corresponding data files using DVC checkout.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_18\n\nLANGUAGE: cli\nCODE:\n```\n$ git checkout <...>\n$ dvc checkout\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Example for DVC list-url Command\nDESCRIPTION: Demonstrates how to list objects and common prefixes under a specified path in an Amazon S3 bucket using DVC list-url command. Requires properly configured AWS CLI credentials.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list-url.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc list-url s3://bucket/path\n```\n\n----------------------------------------\n\nTITLE: Queuing and Viewing Logs for Running DVC Experiment\nDESCRIPTION: Illustrates how to queue a new experiment, start the queue worker, and view the logs of a running experiment task.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/logs.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp run --queue -S prepare.split=0.40 -S featurize.max_features=4000\nQueued experiment '93cfa70' for future execution.\n$ dvc queue start\nStarted '1' new experiments task queue worker.\n$ dvc queue logs 93cfa70\n'data/data.xml.dvc' didn't change, skipping\nRunning stage 'prepare':\n> python src/prepare.py data/data.xml\nUpdating lock file 'dvc.lock'\n\nRunning stage 'featurize':\n> python src/featurization.py data/prepared data/features\n```\n\n----------------------------------------\n\nTITLE: Azure Authentication: Connection String (Bash)\nDESCRIPTION: Example of configuring an Azure remote using a connection string for authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/modify.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d myremote azure://mycontainer/object\n$ dvc remote modify --local myremote connection_string 'mysecret'\n$ dvc push\n```\n\n----------------------------------------\n\nTITLE: DVC Config for Relative Path Remote\nDESCRIPTION: This shows the resulting configuration in the DVC config file after adding a remote using a relative path. The path is saved relative to the config file location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/index.md#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# .dvc/config\n['remote \"myremote\"']\n    url = ../../dvcstore\n```\n\n----------------------------------------\n\nTITLE: Viewing Logs for Failed DVC Experiment Task\nDESCRIPTION: Shows how to view the logs for a failed experiment task using the 'dvc queue logs' command with a specific task ID.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/logs.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc queue logs 192a13c\n'data/data.xml.dvc' didn't change, skipping\nRunning stage 'prepare':\n> python src/prepare.py data/data.xml\nTraceback (most recent call last):\n  File \"/Users/pmrowla/git/example-get-started/.dvc/tmp/exps/tmp217n0tjv/src/prepare.py\", line 10, in <module>\n    raise AssertionError\nAssertionError\nERROR: failed to reproduce 'prepare': failed to run: python src/prepare.py data/data.xml, exited with 1\n```\n\n----------------------------------------\n\nTITLE: DVC Plots Configuration\nDESCRIPTION: This code snippet defines the configuration settings for DVC plots, including options for automatic opening of HTML files in a browser, setting custom HTML templates, and specifying output directories.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauto_open: true\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_template: custom_template.html\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nout_dir: path/to/out_dir\n\n```\n\n----------------------------------------\n\nTITLE: Reading Binary Content from a DVC-tracked File\nDESCRIPTION: Example showing how to read binary content from a DVC-tracked file using read_bytes() or cat_file() methods.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> contents = fs.read_bytes(\"get-started/data.xml\")\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-release DVC from GitHub Repository\nDESCRIPTION: Commands for installing pre-release versions of DVC directly from the GitHub repository. Includes both the basic installation and how to add cloud storage support options using pip.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/pre-release.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n# Plain DVC\n$ pip install git+https://github.com/iterative/dvc\n\n# For cloud storage support, add `egg=dvc[option]` e.g. `s3`.\n# Use `all` to include all available clouds.\n$ pip install \"git+https://github.com/iterative/dvc#egg=dvc[s3]\"\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage Download Example\nDESCRIPTION: Example showing how to download a file from Google Cloud Storage using dvc get-url.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get-url.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get-url gs://bucket/path file\n```\n\n----------------------------------------\n\nTITLE: DVC Init Command Synopsis\nDESCRIPTION: Shows the usage syntax for the `dvc init` command with all available options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/init.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc init [-h] [-q | -v] [--no-scm] [-f] [--subdir]\n```\n\n----------------------------------------\n\nTITLE: Remote Storage Import with DVC\nDESCRIPTION: Example of importing data directly to remote storage using the --to-remote flag\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import-url https://data.dvc.org/get-started/data.xml data.xml \\\n                 --to-remote\n```\n\n----------------------------------------\n\nTITLE: Running DVC gc with Workspace Option\nDESCRIPTION: Shows the output of running dvc gc with the --workspace flag, listing each file that is removed from the cache.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/gc.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc gc --workspace\n\n'.dvc/cache/files/md5/27e30965256ed4d3e71c2bf0c4caad2e' was removed\n'.dvc/cache/files/md5/2e006be822767e8ba5d73ebad49ef082' was removed\n'.dvc/cache/files/md5/2f412200dc53fb97dcac0353b609d199' was removed\n'.dvc/cache/files/md5/541025db4da02fcab715ca2c2c8f4c19' was removed\n'.dvc/cache/files/md5/62f8c2ba93cfe5a6501136078f0336f9' was removed\n'.dvc/cache/files/md5/7c4521365288d69a03fa22ad3d399f32' was removed\n'.dvc/cache/files/md5/9ff7365a8256766be8c363fac47fc0d4' was removed\n'.dvc/cache/files/md5/a86ca87250ed8e54a9e2e8d6d34c252e' was removed\n'.dvc/cache/files/md5/f64d65d4ccef9ff9d37ea4cf70b18700' was removed\n```\n\n----------------------------------------\n\nTITLE: Renaming Stage Output in DVC YAML File\nDESCRIPTION: Shows an example of manually renaming a stage output in the dvc.yaml file from 'keras.h5' to 'model.h5'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/move.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  train:\n    ...\n    outs:\n    - keras.h5\n```\n\n----------------------------------------\n\nTITLE: Adding Data to DVC\nDESCRIPTION: Command to track data files with DVC in Databricks environment.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/databricks.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n!dvc add data\n```\n\n----------------------------------------\n\nTITLE: Downloading an Artifact with DVCFileSystem\nDESCRIPTION: Example showing how to download an artifact using dvc.api.artifacts_show() with DVCFileSystem. It retrieves the path and revision information for a production stage artifact and saves it locally.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/artifacts_show.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dvc.api\n\nartifact = dvc.api.artifacts_show(\n    'text-classification',\n    stage='prod',\n    repo='https://github.com/iterative/example-get-started.git',\n)\nfs = dvc.api.DVCFileSystem(\n    'https://github.com/iterative/example-get-started.git',\n    rev=artifact['rev'],\n)\nfs.get_file(artifact['path'], os.path.basename(artifact['path']))\n```\n\n----------------------------------------\n\nTITLE: HDFS Download Example\nDESCRIPTION: Example showing how to download a file from HDFS using dvc get-url.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get-url.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get-url hdfs://user@example.com/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Listing DVC-tracked Files Recursively\nDESCRIPTION: Example showing how to recursively list all DVC-tracked files using the find() method with dvc_only=True parameter, which is similar to the dvc ls --recursive --dvc-only CLI command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> fs.find(\"/\", detail=False, dvc_only=True)\n[\n    '/data/data.xml',\n    '/data/features/test.pkl',\n    '/data/features/train.pkl',\n    '/data/prepared/test.tsv',\n    '/data/prepared/train.tsv',\n    '/evaluation/importance.png',\n    '/model.pkl'\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Permissions - CLI\nDESCRIPTION: Sets appropriate directory and file permissions for the shared cache to ensure proper access by all team members.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/share-a-dvc-cache.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ sudo find /home/shared/dvc-cache -type d -exec chmod 0775 {} \\;\n$ sudo find /home/shared/dvc-cache -type f -exec chmod 0444 {} \\;\n$ sudo chown -R myuser:ourgroup /home/shared/dvc-cache/\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Timeout for WebDAV in DVC CLI\nDESCRIPTION: Demonstrates how to set the connection timeout for the WebDAV server. This helps manage connection issues by specifying how long to wait before timing out.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote timeout 120\n```\n\n----------------------------------------\n\nTITLE: Executing DVC Plots Show Command in Bash\nDESCRIPTION: The basic usage syntax for the 'dvc plots show' command, including various optional arguments for customizing plot output.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc plots show [-h] [-q | -v] [-t <name_or_path>] [-x <field>]\n                      [-y <field>] [--no-header] [--title <text>]\n                      [--x-label <text>] [--y-label <text>] [-o <path>]\n                      [--show-vega] [--open] [--html-template <path>]\n                      [targets [targets ...]]\n```\n\n----------------------------------------\n\nTITLE: Checking DVC Version using Command Line\nDESCRIPTION: This command is used to verify the installation of DVC and check which version is currently installed on the system.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndvc version\n```\n\n----------------------------------------\n\nTITLE: DVC Data Status with Remote Information\nDESCRIPTION: Shows how to use the `--not-in-remote` flag to display files that are missing from the remote storage in addition to standard status information.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/data/status.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc data status --not-in-remote\nNot in cache:\n  (use \"dvc fetch <file>...\" to download files)\n        data/data.xml\n\nNot in remote:\n  (use \"dvc push <file>...\" to upload files)\n        data/data.xml\n\nDVC committed changes:\n  (git commit the corresponding dvc files to update the repo)\n        modified: data/features/\n\nDVC uncommitted changes:\n  (use \"dvc commit <file>...\" to track changes)\n  (use \"dvc checkout <file>...\" to discard changes)\n        deleted: model.pkl\n(there are other changes not tracked by dvc, use \"git status\" to see)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Directory Settings\nDESCRIPTION: Examples showing how to configure DVC cache directory using both absolute and relative paths.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/config.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config cache.dir /mnt/cache\n$ dvc config cache.dir\n/mnt/cache\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config cache.dir ../../mycache\n$ dvc pull\n\n$ ls ../mycache\n2f/\n```\n\n----------------------------------------\n\nTITLE: DVC Lock File Generated by Foreach\nDESCRIPTION: This example demonstrates the `dvc.lock` file that is generated by a `foreach` loop in `dvc.yaml`. Each item in the list used in `foreach` is expanded into its own stage, with the item's value appended to the stage name after an `@`.  The `cmd` and `outs` are populated with the specific values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nschema: '2.0'\nstages:\n  cleanups@labels1:\n    cmd: clean.py \"labels1\"\n    outs:\n      - path: labels1.cln\n  cleanups@raw1:\n    cmd: clean.py \"raw1\"\n    outs:\n      - path: raw1.cln\n  cleanups@raw2:\n    cmd: clean.py \"raw2\"\n    outs:\n      - path: raw2.cln\n```\n\n----------------------------------------\n\nTITLE: Filtering Metrics by Git Revision in Python\nDESCRIPTION: Example showing how to retrieve metrics from a specific Git revision or commit by using the rev parameter in the metrics_show() function.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nmetrics = dvc.api.metrics_show(rev=\"HEAD~1\")\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite\nDESCRIPTION: Command to run the complete test suite using pytest\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/core.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ cd dvc\n$ python -m tests\n```\n\n----------------------------------------\n\nTITLE: DVC Plots Diff Command with Targets\nDESCRIPTION: Example showing how to specify multiple target files when comparing plot revisions\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/diff.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots diff --targets t1.json t2.csv -- HEAD v1 v2\n```\n\n----------------------------------------\n\nTITLE: Resulting Config File Changes (Git)\nDESCRIPTION: Shows the changes made to the .dvc/config file after modifying the 'temp' remote's URL.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/modify.md#2025-04-21_snippet_1\n\nLANGUAGE: git\nCODE:\n```\n# .dvc/config\n['remote \"temp\"']\n-     url = /tmp/dvcstore\n+     url = /mnt/c/tmp/dvcstore\n```\n\n----------------------------------------\n\nTITLE: DVC Studio Login Command Usage\nDESCRIPTION: Command syntax for authenticating DVC with Studio, showing all available command line options including hostname, scopes, token name, and output verbosity settings.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/studio/login.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc studio login [-h] [-q | -v] [-H <hostname>] [-s <scopes>] [-n <name>] [-d]\n```\n\n----------------------------------------\n\nTITLE: Exporting DVC Experiments to CSV\nDESCRIPTION: Shows how to export the experiments table to CSV format for further analysis\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/comparing-experiments.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show --csv\n```\n\n----------------------------------------\n\nTITLE: Configuring Evidently Column Mapping\nDESCRIPTION: Define categorical and numerical features for Evidently analysis\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/evidently.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom evidently.pipeline.column_mapping import ColumnMapping\n\ndata_columns = ColumnMapping()\ndata_columns.numerical_features = ['weathersit', 'temp', 'atemp', 'hum', 'windspeed']\ndata_columns.categorical_features = ['holiday', 'workingday']\n```\n\n----------------------------------------\n\nTITLE: Setting OSS Authentication Parameters\nDESCRIPTION: Commands to configure key ID and secret key for OSS remote authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/aliyun-oss.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote oss_key_id 'mykey'\n$ dvc remote modify --local myremote oss_key_secret 'mysecret'\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Path for DVC Cache Directory\nDESCRIPTION: Demonstrates how a relative cache directory path is transformed and stored in the DVC config file relative to the config file location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/cache/dir.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc cache dir ../dir\n$ cat .dvc/config\n...\n[cache]\n    dir = ../../dir\n...\n```\n\n----------------------------------------\n\nTITLE: Freezing Stage and Checking Status\nDESCRIPTION: Demonstrates freezing a stage using dvc freeze command and showing how it affects the status output of tracked files and dependencies.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/freeze.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc freeze make_copy\n$ dvc status\nfoo.dvc:\n\tchanged outs:\n\t\tmodified:           foo\n```\n\n----------------------------------------\n\nTITLE: Defining Plots in DVC YAML Configuration\nDESCRIPTION: Examples of how to define plots in the dvc.yaml file, including simple plot definitions and more complex configurations with multiple data series.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - logs.csv:\n      x: epoch\n      y: accuracy\n      title: Displaying accuracy\n      x_label: This is epoch\n      y_label: This is accuracy\n```\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - test_vs_train_loss:\n      x: epoch\n      y:\n        training_data.csv: [test_loss, train_loss]\n      title: Compare loss training versus test\n```\n\n----------------------------------------\n\nTITLE: DVC Studio Configuration YAML\nDESCRIPTION: Example configuration file for DVC Studio setup with GitLab integration, including host configuration and SCM provider settings.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/aws-ami.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - name: iterativeai\n\nglobal:\n  host: <Studio hostname>\n  scmProviders:\n    gitlab:\n      enabled: true\n      url: '<GitLab URL>'\n      clientId: '<GitLab OAuth App Client ID>'\n      secretKey: '<GitLab OAuth App Secret Key>'\n      webhookSecret: '<GitLab Webhook Secret>'\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Cache Directory - CLI\nDESCRIPTION: Creates a directory to be used as a shared DVC cache location accessible by all project users.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/share-a-dvc-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir -p /home/shared/dvc-cache\n```\n\n----------------------------------------\n\nTITLE: Interactive Check-Ignore with stdin\nDESCRIPTION: Shows how to use the --stdin option for interactive checking of paths against .dvcignore patterns.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/check-ignore.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc check-ignore --stdin\n> file1\nfile1\n> other\n> file2\nfile2\n```\n\n----------------------------------------\n\nTITLE: Testing .dvcignore with File Modifications\nDESCRIPTION: Modifies a file listed in .dvcignore and verifies that DVC status ignores the changes to excluded files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ echo file_one_changed > dir/file1\n$ dvc status\nData and pipelines are up to date.\n```\n\n----------------------------------------\n\nTITLE: Viewing Installed Git Hooks\nDESCRIPTION: Commands to view the contents of the installed pre-commit and post-checkout Git hooks.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/install.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ cat .git/hooks/pre-commit\n#!/bin/sh\nexec dvc status\n\n$ cat .git/hooks/post-checkout\n#!/bin/sh\nexec dvc checkout\n```\n\n----------------------------------------\n\nTITLE: DVC Status Example - Specific Files\nDESCRIPTION: Example demonstrating dvc status output when checking specific files and stages.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/status.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc status foo.dvc dobar\nfoo.dvc:\n\tchanged outs:\n\t\tmodified:            foo\n\tchanged checksum\ndobar:\n\tchanged deps:\n\t\tmodified:           foo\n\tchanged outs:\n\t\tnot in cache:       bar\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Pipeline with Selective Caching (CLI)\nDESCRIPTION: Shows how to configure a DVC pipeline stage with selective caching using the CLI. It demonstrates keeping lightweight metrics in Git while caching heavier plots data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/how-it-works.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add --name train \\\n  --deps data_dir --deps src/train.py \\\n  --outs model.pt --outs-no-cache dvclive/metrics.json \\\n  --outs dvclive/plots \\\n  python train.py\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for DVC list-url Command\nDESCRIPTION: Shows the command-line syntax and arguments for the list-url command, including the main URL parameter and available options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list-url.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc list-url [-h] [-q | -v] [-R|-T] [-L depth] [--size] [--fs-config <name>=<value>] url\n\npositional arguments:\n  url              (See supported URLs in the description)\n```\n\n----------------------------------------\n\nTITLE: Kanban-style Workflow Display\nDESCRIPTION: Demonstrates how to show artifacts in a Kanban-style workflow using both --vs and --av flags to control version and assignment display.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/command-reference/show.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ gto show churn --av 1 --vs -1\n╒════════════╤═══════════╤═════════╤═════════════════════╤══════════════╕\n│ artifact   │ version   │ stage   │ created_at          │ ref          │\n╞════════════╪═══════════╪═════════╪═════════════════════╪══════════════╡\n│ churn      │ v3.1.0    │ staging │ 2022-08-28 16:58:50 │ churn@v3.1.0 │\n│ churn      │ v3.0.0    │ dev     │ 2022-08-24 01:52:10 │ churn@v3.0.0 │\n╘════════════╧═══════════╧═════════╧═════════════════════╧══════════════╛\n```\n\n----------------------------------------\n\nTITLE: Importing Local File with DVC\nDESCRIPTION: Shows how to import a file from a local external source using dvc import-url command\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import-url /tmp/dvc-import-url-example/data.xml data/data.xml\n```\n\n----------------------------------------\n\nTITLE: Display Registry State\nDESCRIPTION: Shows how to display the entire state of the registry including artifacts, their latest versions, and versions in each stage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/command-reference/show.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ gto show -r https://github.com/iterative/example-gto\n╒══════════╤══════════╤════════╤═════════╤════════════╕\n│ name     │ latest   │ #dev   │ #prod   │ #staging   │\n╞══════════╪══════════╪════════╪═════════╪════════════╡\n│ churn    │ v3.1.1   │ v3.1.1 │ v3.0.0  │ v3.1.0     │\n│ segment  │ v0.4.1   │ v0.4.1 │ -       │ -          │\n│ cv-class │ v0.1.13  │ -      │ -       │ -          │\n╘══════════╧══════════╧════════╧═════════╧════════════╛\n```\n\n----------------------------------------\n\nTITLE: DVC Experiment Display with Column Filtering\nDESCRIPTION: Shows how to use the --drop flag to filter out specific columns from the experiment display.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show --drop prepare\n```\n\nLANGUAGE: dvctable\nCODE:\n```\n ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  neutral:**Experiment**                   neutral:**Created**        metric:**avg_prec**   metric:**roc_auc**   param:**featurize.max_features**   param:**featurize.ngrams**   param:**train.seed**   param:**train.n_est**   param:**train.min_split**   dep:**data/prepared**   dep:**model.pkl**   dep:**data/data.xml**   dep:**src/prepare.py**   dep:**data/features**   dep:**src/evaluate.py**   dep:**src/featurization.py**   dep:**src/train.py**\n ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  workspace                    -               0.60405    0.9608   3000                     2                  20170428     100           64                20b786b         484fab5     a304afb         51549a1          52c1fdd         fb7b520           61c5927                9ab9549\n  random-forest-experiments    May 29, 2021    0.60405    0.9608   3000                     2                  20170428     100           64                20b786b         484fab5     a304afb         51549a1          52c1fdd         fb7b520           61c5927                9ab9549\n  ├── e7bd029 [unwet-jinn]     10:21 PM        0.58589     0.945   2000                     2                  20170428     100           64                20b786b         7aae464     a304afb         51549a1          2ac217b         fb7b520           61c5927                9ab9549\n  ├── a2efdc9 [urban-sign]     10:21 PM        0.55669   0.93516   1000                     2                  20170428     100           64                20b786b         e2b5a9a     a304afb         51549a1          1b2d542         fb7b520           61c5927                9ab9549\n  └── 56f3be3 [freed-roam]     10:21 PM        0.51799   0.92333   500                      2                  20170428     100           64                20b786b         cfbfed4     a304afb         51549a1          64ed644         fb7b520           61c5927                9ab9549\n ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Adding WebHDFS Remote with Security Settings in DVC CLI\nDESCRIPTION: Shows how to add a WebHDFS remote with HTTPS and Kerberos security enabled, and how to set an authentication token. This series of commands sets up a secure WebHDFS remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote webhdfs://example.com/path\n$ dvc remote modify myremote use_https true\n$ dvc remote modify myremote kerberos true\n$ dvc remote modify --local myremote token SOME_BASE64_ENCODED_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Method for HTTP Remote in DVC CLI\nDESCRIPTION: Demonstrates how to set the authentication method for an HTTP remote to 'basic' using the DVC command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote auth basic\n```\n\n----------------------------------------\n\nTITLE: DVC Lock File Generated by Foreach with Dictionary\nDESCRIPTION: This shows the resulting `dvc.lock` file when using a dictionary directly in `foreach`. The stage names are appended with the dictionary keys (uk, us) after an `@`. The `cmd` contains the dictionary key and the corresponding values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# dvc.lock\nschema: '2.0'\nstages:\n  build@uk:\n    cmd: python train.py 'uk' 3 10\n    outs:\n      - path: model-uk.hdfs\n        md5: 17b3d1efc339b416c4b5615b1ce1b97e\n  build@us: ...\n```\n\n----------------------------------------\n\nTITLE: Tracking Directory with Ignored Files\nDESCRIPTION: Shows how DVC handles ignored files when adding a directory and examining the cache structure.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcignore-files.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc add data\n...\n$ tree .dvc/cache/files/md5\n.dvc/cache/files/md5\n├── 26\n│   └── ab0db90d72e28ad0ba1e22ee510510\n└── ad\n    └── 8b0ddcf133a6e5833002ce28f97c5a.dir\n$ md5 data/*\nb026324c6904b2a9cb4b88d6d61c81d1  data/data1\n26ab0db90d72e28ad0ba1e22ee510510  data/data2\n```\n\n----------------------------------------\n\nTITLE: Customizing New Live Instance with DVCLiveCallback\nDESCRIPTION: This snippet demonstrates how to customize a new Live instance by passing additional arguments to DVCLiveCallback. It shows setting a custom directory for metric logging.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/fastai.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlearn.fit_one_cycle(\n  n_epoch=2,\n  cbs=[DVCLiveCallback(dir=\"custom_dir\")])\n```\n\n----------------------------------------\n\nTITLE: DVC Metrics Command Usage Syntax\nDESCRIPTION: CLI usage syntax for DVC metrics commands, showing the main subcommands show and diff along with their basic options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc metrics [-h] [-q | -v] {show,diff} ...\n\npositional arguments:\n  COMMAND\n    show                Print metrics, with optional formatting\n    diff                Show changes in metrics between commits.\n```\n\n----------------------------------------\n\nTITLE: Download Artifact Using DVC Studio Token Example\nDESCRIPTION: Shows how to download an artifact using DVC Studio authentication token and specifying a production stage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/artifacts/get.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ DVC_STUDIO_TOKEN=mytoken dvc artifacts get https://github.com/iterative/example-get-started.git text-classification --stage=prod\nDownloaded 1 file(s) to 'model.pkl'\n```\n\n----------------------------------------\n\nTITLE: List and Pull Experiment Example\nDESCRIPTION: Example showing how to list available experiments from a remote and pull them to the local repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/pull.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp list --all-commits origin\nmain:\n    lurid-air\n$ dvc exp pull origin\nPulled experiment 'lurid-lair' from Git remote 'origin'.\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Timeout for HTTP Remote in DVC CLI\nDESCRIPTION: Demonstrates how to set the connection timeout for an HTTP remote to 5 minutes (300 seconds) using the DVC command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_10\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote connect_timeout 300\n```\n\n----------------------------------------\n\nTITLE: DVC Foreach Stage with List of Values\nDESCRIPTION: This snippet illustrates the use of the `foreach` keyword in a `dvc.yaml` file to define multiple stages that iterate over a list of values. Each item in the list is substituted into the `cmd` and `outs` fields using the `${item}` expression, creating a separate stage for each value.  This is useful for performing the same operation on multiple inputs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  cleanups:\n    foreach: # List of simple values\n      - raw1\n      - labels1\n      - raw2\n    do:\n      cmd: clean.py \"${item}\"\n      outs:\n        - ${item}.cln\n```\n\n----------------------------------------\n\nTITLE: Importing Data from HTTP with DVC\nDESCRIPTION: Example of importing a data file from an HTTP source to the local workspace using dvc import-url, which creates an import .dvc file to track the dependency.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import-url https://data.dvc.org/get-started/data.xml data.xml\n```\n\n----------------------------------------\n\nTITLE: Reading Text Content from a DVC-tracked File\nDESCRIPTION: Example showing how to read text content from a DVC-tracked file using read_text() with encoding specification.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> text = fs.read_text(\"get-started/data.xml\", encoding=\"utf-8\")\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: This CLI command shows an example of the directory structure containing image files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/internal-files.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n\"$ tree data/images/\ndata/images/\n├── cat.jpeg\n└── index.jpeg\n\n$ dvc add data/images\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Remote Information in Bash\nDESCRIPTION: Shows how to view Git remote information using the 'git remote -v' command. This is useful for identifying the remote repository URL.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/list.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote -v\norigin  git@github.com:iterative/example-get-started.git\n```\n\n----------------------------------------\n\nTITLE: Adding and Listing DVC Remotes\nDESCRIPTION: Shows how to add a new DVC remote and list existing remotes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/pull.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d r1 \\\n                 ssh://user@example.com/project/data/cache\n$ dvc remote list\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with pip and Amazon S3 support\nDESCRIPTION: Installs DVC with additional support for Amazon S3 storage by including the boto3 library as a dependency.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/linux.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install \"dvc[s3]\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up DVC Project Example\nDESCRIPTION: Commands to clone and set up an example DVC project for demonstrating fetch operations.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/fetch.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/iterative/example-get-started\n$ cd example-get-started\n```\n\n----------------------------------------\n\nTITLE: Updated Config File Content\nDESCRIPTION: Example showing the updated config file content after changing the default remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/default.md#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[core]\nremote = mynewremote\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output of params_show\nDESCRIPTION: Example of the dictionary returned by dvc.api.params_show(), containing parameter keys and values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"split\": 0.2,\n  \"seed\": 20170428\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DVC for Hugging Face Integration\nDESCRIPTION: Basic installation command for DVC to enable Hugging Face Hub integration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/huggingface.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install dvc\n```\n\n----------------------------------------\n\nTITLE: DVC-compatible Python Script with Hydra Composition\nDESCRIPTION: Example of a Python script adapted to use DVC with Hydra composition enabled.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom omegaconf import OmegaConf\n\ndef main() -> None:\n    cfg = OmegaConf.load(\"params.yaml\")\n    # train model using cfg parameters\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Completion Support in macOS\nDESCRIPTION: Code snippet to add to ~/.bash_profile to enable bash completion support in macOS after installing bash-completion via Homebrew.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nif [ -f \"$(brew --prefix)\"/etc/bash_completion ]; then\n    . \"$(brew --prefix)\"/etc/bash_completion\nfi\n```\n\n----------------------------------------\n\nTITLE: Installing DVC Dependencies\nDESCRIPTION: Installing DVC and DVCLive packages using pip\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/sagemaker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install dvc dvclive\n```\n\n----------------------------------------\n\nTITLE: Listing All Files Including Git-tracked and DVC-tracked\nDESCRIPTION: Example showing how to recursively list all files (Git-tracked, DVC-tracked, and possibly untracked local files) using the find() method, similar to dvc ls --recursive CLI command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> fs.find(\"/\", detail=False)\n[\n    ...\n    '/.gitignore',\n    '/README.md',\n    '/data/.gitignore',\n    '/data/data.xml',\n    '/data/features/test.pkl',\n    '/data/features/train.pkl',\n    '/data/prepared/test.tsv',\n    '/data/prepared/train.tsv',\n    ...\n    '/evaluation/.gitignore',\n    '/evaluation/importance.png',\n    '/evaluation/plots/confusion_matrix.json',\n    '/evaluation/plots/precision_recall.json',\n    '/evaluation/plots/roc.json',\n    '/model.pkl',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up External Data Source with DVC\nDESCRIPTION: Example commands for setting up a local external data source for testing DVC import functionality\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir /tmp/dvc-import-url-example\n$ cd /tmp/dvc-import-url-example/\n$ wget https://data.dvc.org/get-started/data.xml\n$ cd -\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication Exclusions\nDESCRIPTION: Sets exclusion parameters for various Azure authentication methods, useful for Windows users with specific setups.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/azure-blob-storage.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --system myremote \\\n             exclude_environment_credential true\n$ dvc remote modify --system myremote \\\n             exclude_visual_studio_code_credential true\n$ dvc remote modify --system myremote \\\n             exclude_shared_token_cache_credential true\n$ dvc remote modify --system myremote \\\n             exclude_managed_identity_credential true\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy User for WebHDFS in DVC CLI\nDESCRIPTION: Shows how to set a proxy user (Hadoop superuser) for a WebHDFS remote in DVC. This feature requires proper cluster configuration and Kerberos authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote proxy_to myuser\n```\n\n----------------------------------------\n\nTITLE: DVC Artifacts Get Command Usage Syntax\nDESCRIPTION: Shows the command line syntax and arguments for the dvc artifacts get command, including optional parameters for version control and output configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/artifacts/get.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc artifacts get [-h] [-q | -v]\n                         [--rev [<version>]] [--stage [<stage>]]\n                         [-o [<path>]] [--show-url] [-j <number>] [-f]\n                         [--config CONFIG]\n                         [--remote REMOTE] [--remote-config [REMOTE_CONFIG ...]]\n                         url name\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Cache - CLI\nDESCRIPTION: Sets up the external cache location and configures cache sharing settings including group permissions and symlink usage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/share-a-dvc-cache.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc cache dir /home/shared/dvc-cache\n\n$ dvc config cache.shared group\n$ dvc config cache.type symlink\n```\n\n----------------------------------------\n\nTITLE: Committing First Version with Git\nDESCRIPTION: Git commands to stage changes, commit the first version of the project, and create a tag.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git add data.dvc model.weights.h5.dvc metrics.csv .gitignore\n$ git commit -m \"First model, trained with 1000 images\"\n$ git tag -a \"v1.0\" -m \"model v1.0, 1000 images\"\n```\n\n----------------------------------------\n\nTITLE: DVC Cache Migration Command\nDESCRIPTION: Command for migrating DVC cache data from older versions to DVC 3.0 format. Can be run with optional --dvc-files flag to update DVC files in the repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndvc cache migrate\n```\n\nLANGUAGE: shell\nCODE:\n```\ndvc cache migrate --dvc-files\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC Experiment List\nDESCRIPTION: Example showing how to list all experiments in a DVC project using the 'dvc exp show' command, displaying experiment names, creation dates, metrics, and parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/diff.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show\n```\n\n----------------------------------------\n\nTITLE: Using DVC gc to Clean Local Cache\nDESCRIPTION: Demonstrates using the gc command with the --workspace flag to remove objects from the local cache that are not referenced in the current workspace.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/gc.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ du -sh .dvc/cache/\n7.4G    .dvc/cache/\n```\n\n----------------------------------------\n\nTITLE: Installing DVC from repository on Debian/Ubuntu\nDESCRIPTION: Sets up the Iterative repository and installs DVC from it on Debian/Ubuntu systems. Includes GPG key setup for package verification.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/linux.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ sudo apt install wget gpg\n$ sudo mkdir -p /etc/apt/keyrings\n$ wget -qO - https://dvc.org/deb/iterative.asc | sudo gpg --dearmor -o /etc/apt/keyrings/packages.iterative.gpg\n$ echo \"deb [arch=amd64 signed-by=/etc/apt/keyrings/packages.iterative.gpg] https://dvc.org/deb/ stable main\" | sudo tee /etc/apt/sources.list.d/dvc.list\n$ sudo chmod 644 /etc/apt/keyrings/packages.iterative.gpg /etc/apt/sources.list.d/dvc.list\n$ sudo apt update\n$ sudo apt install dvc\n```\n\n----------------------------------------\n\nTITLE: Multiple Versions in Stage Workflow\nDESCRIPTION: Shows how to display multiple versions in the same stage using the --vs flag for versions-per-stage configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/command-reference/show.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ gto show churn --vs -1\n╒════════════╤═══════════╤══════════════╤═════════════════════╤══════════════╕\n│ artifact   │ version   │ stage        │ created_at          │ ref          │\n╞════════════╪═══════════╪══════════════╪═════════════════════╪══════════════╡\n│ churn      │ v3.1.0    │ dev, staging │ 2022-08-28 16:58:50 │ churn@v3.1.0 │\n│ churn      │ v3.0.0    │ dev, prod    │ 2022-08-24 01:52:10 │ churn@v3.0.0 │\n╘════════════╧═══════════╧══════════════╧═════════════════════╧══════════════╛\n```\n\n----------------------------------------\n\nTITLE: Local Path Download Example\nDESCRIPTION: Example showing how to copy a file from a local path using dvc get-url.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get-url.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get-url /local/path/to/data\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC Queue Status with Completed Tasks\nDESCRIPTION: Shows the queue status after some experiments have completed, demonstrating how worker status changes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/status.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc queue status\nTask     Name    Created    Status\n1ae8b65          04:01 PM   Running\n753b005          04:01 PM   Success\n0bbb118          04:01 PM   Success\n\nWorker status: 1 active, 1 idle\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing DVC Remote Example\nDESCRIPTION: Demonstrates the process of adding an Amazon S3 remote storage and then removing it using DVC commands.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/remove.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add myremote s3://mybucket/path\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote remove myremote\n```\n\n----------------------------------------\n\nTITLE: Download Artifact from Specific YAML File Example\nDESCRIPTION: Illustrates downloading an artifact that is defined in a specific dvc.yaml file within the repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/artifacts/get.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc artifacts get https://github.com/iterative/lstm_seq2seq.git results/dvc.yaml:best\nDownloaded 1 file(s) to 'epoch=0-step=16.ckpt'\n```\n\n----------------------------------------\n\nTITLE: Comparing DVC Metrics using CLI\nDESCRIPTION: CLI command to compare metrics using the dvc metrics diff command. This command uses the serialized metrics file generated by Live.make_summary().\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/make_summary.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc metrics diff dvclive/metrics.json\n```\n\n----------------------------------------\n\nTITLE: DVC Studio Login Command\nDESCRIPTION: Command to authenticate with DVC Studio for live experiment updates\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/sagemaker.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc studio login\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections in DVC\nDESCRIPTION: Examples of how to set up database connection strings in DVC's config file, including password handling with --local option for security.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-db.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc config db.pgsql.url postgresql://user@hostname:port/database\n$ dvc config --local db.pgsql.password password\n```\n\n----------------------------------------\n\nTITLE: DVC Experiment Pull Command Usage\nDESCRIPTION: The command syntax for dvc exp pull showing all available options and arguments including git remote specification and experiment selection.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/pull.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc exp pull [-h] [-q | -v] [-A] [--rev <commit>] [-n <num>] [-f]\n                    [--no-cache] [-r <name>] [-j <number>]\n                    [--run-cache | --no-run-cache]\n                    git_remote [experiment ...]\n\npositional arguments:\n  git_remote          Git remote name or Git URL\n  experiment          Experiment to pull\n```\n\n----------------------------------------\n\nTITLE: DVC Update Command Usage Syntax\nDESCRIPTION: Shows the command-line syntax and arguments for the dvc update command, including optional flags and positional arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/update.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc update [-h] [-q | -v] [-R] [--rev <commit>]\n                  [--to-remote] [-r <name>]\n                  [--no-download] [-j <number>]\n                  targets [targets ...]\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Data for DVC Plots\nDESCRIPTION: Example of a CSV file structure for plotting epoch, loss, and accuracy data with DVC. Each column represents an array that can be used for plotting.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/visualizing-plots.md#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nepoch,loss,accuracy\n1,0.19,0.81\n2,0.11,0.89\n3,0.07,0.93\n4,0.04,0.96\n```\n\n----------------------------------------\n\nTITLE: Adding Data to DVC Tracking\nDESCRIPTION: DVC command to start tracking the 'data' directory, creating a .dvc file pointer.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc add data\n```\n\n----------------------------------------\n\nTITLE: Pandas DataFrame Plot Example\nDESCRIPTION: Example demonstrating how to create a scatter plot from a Pandas DataFrame using the Iris dataset.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_plot.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom dvclive import Live\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\ndatapoints = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n\nwith Live() as live:\n    live.log_plot(\n        \"sepal\",\n        datapoints,\n        x=\"sepal length (cm)\",\n        y=\"sepal width (cm)\",\n        template=\"scatter\",\n        title=\"Sepal width vs Sepal length\")\n```\n\n----------------------------------------\n\nTITLE: Using DVC SCM API with exp_show() in Python\nDESCRIPTION: Example demonstrating how to use the dvc.api.scm functions in conjunction with exp_show() to retrieve experiments for all tags in a repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/exp_show.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\nimport pandas as pd\n\nall_tags = dvc.api.scm.all_tags()\nexps = dvc.api.exp_show(revs=all_tags)\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary Unpacking in DVC Stage Command\nDESCRIPTION: Demonstrates how to use dictionary unpacking in a DVC stage command, referencing a complex dictionary defined in params.yaml.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  train:\n    cmd: R train.r ${mydict}\n```\n\n----------------------------------------\n\nTITLE: DVC Plots Diff with Confusion Matrix Template\nDESCRIPTION: Shows how to use the predefined confusion matrix template for plot comparison\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/diff.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots diff -t confusion --targets classes.csv -x predicted\n```\n\n----------------------------------------\n\nTITLE: Defining log_plot Method Signature\nDESCRIPTION: Method signature showing the parameters and type hints for the log_plot function that creates custom plots.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_plot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef log_plot(\n    name: str,\n    datapoints: pd.DataFrame | np.ndarray | List[Dict],\n    x: str,\n    y: Union[str, list[str]],\n    template: Optional[str] = None,\n    title: Optional[str] = None,\n    x_label: Optional[str] = None,\n    y_label: Optional[str] = None,\n):\n```\n\n----------------------------------------\n\nTITLE: Using DVC Unfreeze Command in Bash\nDESCRIPTION: The 'dvc unfreeze' command is used to unfreeze stages in a DVC pipeline, allowing them to be executed by 'dvc repro'. This snippet shows the basic usage syntax of the command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unfreeze.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc unfreeze [-h] [-q | -v] targets [targets ...]\n```\n\n----------------------------------------\n\nTITLE: Equivalent Git Clone and DVC Pull Example\nDESCRIPTION: Demonstrates that dvc list is equivalent to cloning a Git repository and pulling DVC data, without actually downloading anything. This shows the alternative manual approach.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone <url> example\n$ cd example\n$ dvc pull\n$ ls <path>\n```\n\n----------------------------------------\n\nTITLE: Queueing DVC Experiments\nDESCRIPTION: Demonstrates how to queue multiple experiments using the 'dvc exp run --queue' command with different parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/status.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --queue -S prepare.split=0.25 -S featurize.max_features=2000\nQueued experiment '0bbb118' for future execution.\n$ dvc exp run --queue -S prepare.split=0.30 -S featurize.max_features=2500\nQueued experiment '753b005' for future execution.\n$ dvc exp run --queue -S prepare.split=0.35 -S featurize.max_features=3000\nQueued experiment '1ae8b65' for future execution.\n```\n\n----------------------------------------\n\nTITLE: Changing Default Remote\nDESCRIPTION: Example of changing the default remote to a new value.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/default.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote default mynewremote\n```\n\n----------------------------------------\n\nTITLE: Customizing New Live Instance with DVCLiveCallback in Python\nDESCRIPTION: This snippet illustrates how to use kwargs to customize a new Live instance when creating DVCLiveCallback. It specifies a custom directory for the Live instance.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/lightgbm.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlightgbm.train(\n    param,\n    train_data,\n    valid_sets=[validation_data],\n    num_round=5,\n    callbacks=[DVCLiveCallback(dir=\"custom_dir\")])\n```\n\n----------------------------------------\n\nTITLE: Basic Check-Ignore Examples\nDESCRIPTION: Shows basic usage of the dvc check-ignore command with various file patterns.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/check-ignore.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc check-ignore file1\nfile1\n\n$ dvc check-ignore file1 file2\nfile1\nfile2\n\n$ dvc check-ignore other\n  # There's no command output, meaning `other` is not excluded.\n\n$ dvc check-ignore file*\nfile1\nfile2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic DVC Root Command Usage in Bash\nDESCRIPTION: Illustrates the basic usage of the 'dvc root' command in different directory contexts within a DVC project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/root.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc root\n.\n\n$ mkdir subdir\n$ cd subdir\n$ dvc root\n..\n```\n\n----------------------------------------\n\nTITLE: Starting DVC Experiment Queue Execution\nDESCRIPTION: Initiates the execution of all queued DVC experiments using the dvc queue start command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/running-experiments.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc queue start\n...\n```\n\n----------------------------------------\n\nTITLE: Listing DVC Experiments Before Pushing\nDESCRIPTION: Example showing how to list all experiments across all commits in a DVC project before pushing them to a remote. This displays experiments with their commit IDs and names.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/push.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp list --all-commits\n11-bigrams-experiment:\n    1d4c01d [conic-ease]\n    a80bca5 [lucid-lair]\n    9380a12 [major-mela]\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Root Command Usage in Bash\nDESCRIPTION: Shows the usage synopsis for the 'dvc root' command, including available options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/root.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc root [-h] [-q | -v]\n```\n\n----------------------------------------\n\nTITLE: GTO Show Command Usage Syntax\nDESCRIPTION: Shows the command syntax and available arguments for the GTO show command including optional flags and parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/command-reference/show.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: gto show [-r <text>] [-a] [-A] [--json] [--plain]\n                [--name] [--version] [--stage] [--ref]\n                [--ro] [--av <integer>] [--vs <integer>]\n                [--sort <text>] [-h]\n                [name]\n\narguments:\n  [name]           Artifact name to show. If empty, show registry\n```\n\n----------------------------------------\n\nTITLE: Version-Aware Cloud Import Configuration\nDESCRIPTION: YAML configuration showing version-aware import structure for cloud storage with version IDs\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmd5: 0c00504e8539cba57c523413d6f98df3\nfrozen: true\ndeps:\n- path: s3://mybucket/data\n  files:\n  - size: 14445097\n    version_id: LiVFgBb24qRRbn1o2DcAZhh4_M8Zy7FK\n    etag: 22a1a2931c8370d3aeedd7183606fd7f\n    relpath: data.xml\n  ...\n  - size: 6728772\n    version_id: fLkcP.Dq0zl7CtKexohzyJCazSMk_R9C\n    etag: 9ca281786366acca17632c27c5c5cc75\n    relpath: prepared/train.tsv\nouts:\n- md5: 3ce9c43d5bead55bee0d3752fc1d68c5.dir\n  size: 25115048\n  nfiles: 5\n  path: data\n  push: false\n```\n\n----------------------------------------\n\nTITLE: Installing DVC from package on Debian/Ubuntu\nDESCRIPTION: Installs DVC from a downloaded .deb package file on Debian/Ubuntu systems using apt.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/linux.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ sudo apt install ./dvc_0.62.1_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Upgrading DVC Studio Using Helm\nDESCRIPTION: This command upgrades DVC Studio to the latest version using Helm. It specifies the namespace and values file for configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/upgrading/regular-procedure.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ helm upgrade studio iterative/studio --namespace studio --values values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring GDrive Remote Profile in DVC\nDESCRIPTION: Sets a custom profile name for a Google Drive remote to isolate cached credentials from other remotes using the same client ID\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote profile myprofile\n```\n\n----------------------------------------\n\nTITLE: Pre-commit Configuration for DVC Hooks\nDESCRIPTION: YAML configuration for setting up DVC hooks using the pre-commit tool. Includes settings for pre-commit, pre-push, and post-checkout hooks.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/install.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - hooks:\n      - id: dvc-pre-commit\n        language_version: python3\n        stages:\n          - pre-commit\n      - id: dvc-pre-push\n        # use s3/gs/etc instead of all to only install specific cloud support\n        additional_dependencies: ['.[all]']\n        language_version: python3\n        stages:\n          - pre-push\n      - always_run: true\n        id: dvc-post-checkout\n        language_version: python3\n        stages:\n          - post-checkout\n    repo: https://github.com/iterative/dvc\n    rev: 3.56.0\n    # rev should be set to a specific revision (e.g. 3.56.0) since pre-commit\n    # does not allow using mutable references.\n    # If using `main`, see pre-commit guide:\n    #    https://pre-commit.com/#using-the-latest-version-for-a-repository\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for LF Line Endings\nDESCRIPTION: Add this configuration to your global settings.json or project's .vscode/settings.json to ensure VS Code uses LF line endings.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/run-dvc-on-windows.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.eol\": \"\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Check-Ignore with POSIX Pipe\nDESCRIPTION: Demonstrates how to use check-ignore with POSIX pipes for programmatic checking.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/check-ignore.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\ncat file_list | dvc check-ignore --stdin\n```\n\n----------------------------------------\n\nTITLE: Return Value Format of artifacts_show Function\nDESCRIPTION: Example of the dictionary structure returned by the artifacts_show() function, containing the relative path to the artifact and its Git revision.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/artifacts_show.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\n    'path': 'model.pkl',\n    'rev': 'c7c6ae0',\n}\n```\n\n----------------------------------------\n\nTITLE: Executing DVC Version Command Outside a DVC Project\nDESCRIPTION: Shows the output of the 'dvc version' command when run outside a DVC project, displaying limited environment information.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/version.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc version\n\nDVC version: 1.10.0 (pip)\n---------------------------------\nPlatform: Python 3.8.3 on Linux-5.4.0-47-generic-x86_64-with-debian-buster-sid\nSupports: All remotes\n```\n\n----------------------------------------\n\nTITLE: Modifying Remote Jobs Parameter (Bash)\nDESCRIPTION: Example of modifying the 'jobs' parameter for a remote named 'myremote'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/modify.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote modify myremote jobs 8\n```\n\n----------------------------------------\n\nTITLE: Clearing Local Cache for Testing (Windows)\nDESCRIPTION: Commands to remove the local DVC cache and tracked data file to simulate a fresh pull on Windows.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_13\n\nLANGUAGE: cli\nCODE:\n```\n$ rmdir .dvc\\cache\n$ del data\\data.xml\n```\n\n----------------------------------------\n\nTITLE: Applying DVC Root in Non-DVC Commands in Bash\nDESCRIPTION: Shows how to use the 'dvc root' command in conjunction with non-DVC commands like 'tree' to reference project files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/root.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc root\n../..\n\n$ tree $(dvc root)/data/\n../../data/\n├── data.xml\n├── data.xml.dvc\n...\n```\n\n----------------------------------------\n\nTITLE: Viewing Subdirectory Project Structure\nDESCRIPTION: Shows the resulting directory structure when DVC is initialized in a subdirectory of a Git repository, illustrating the relationship between Git and DVC repositories.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/init.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ tree repo -a\nrepo\n├── .git\n.\n.\n.\n└── project-a\n    └── .dvc\n```\n\n----------------------------------------\n\nTITLE: SSH Example for DVC list-url Command\nDESCRIPTION: Shows how to list files and directories on a remote server via SSH using DVC list-url command. Uses default SSH credentials to access the specified path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list-url.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc list-url ssh://user@example.com/path/to/data\n```\n\n----------------------------------------\n\nTITLE: DVC Remote Remove Command Usage\nDESCRIPTION: Shows the command syntax and arguments for removing a DVC remote. The command requires a remote name and supports various configuration scope options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/remove.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc remote remove [-h]\n                         [--global | --system | --project | --local]\n                         [-q | -v]\n                         name\n\npositional arguments:\n  name           Name of the remote to remove\n```\n\n----------------------------------------\n\nTITLE: Comparing DVC Plots Across Experiments\nDESCRIPTION: CLI command to compare plots across all experiments using dvc plots diff. This generates a visualization of the differences.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/visualizing-plots.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots diff $(dvc exp list --name-only)\n```\n\n----------------------------------------\n\nTITLE: List DVC Remote Storage Example\nDESCRIPTION: Example showing how to list configured remote storage locations using dvc remote list command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/push.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote list\nr1    ssh://user@example.com/project/data/cache   (default)\nr2    ssh://user@example.com/other/storage\n```\n\n----------------------------------------\n\nTITLE: Installing DVC in Databricks\nDESCRIPTION: Installs DVC package in Databricks environment using pip.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/databricks.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n%pip install dvc\n```\n\n----------------------------------------\n\nTITLE: Verifying Cache Size After Garbage Collection\nDESCRIPTION: Shows how to check the cache size after running dvc gc to confirm the reduction in storage usage.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/gc.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ du -sh .dvc/cache/\n3.1G    .dvc/cache/\n```\n\n----------------------------------------\n\nTITLE: Custom HTML Template for DVC Plots\nDESCRIPTION: HTML template file that uses local Vega-Lite libraries with a placeholder for DVC to inject plots.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"../path/to/my_vega.js\" type=\"text/javascript\"></script>\n    <script src=\"../path/to/my_vega_lite.js\" type=\"text/javascript\"></script>\n    <script src=\"../path/to/my_vega_embed.js\" type=\"text/javascript\"></script>\n  </head>\n  <body>\n    {plot_divs}\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Removing DVC Experiments via CLI\nDESCRIPTION: Demonstrates how to list and remove specific experiments using the DVC command line interface. The example shows removing two experiments named 'cnn-32' and 'cnn-64' from a list of experiments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/comparing-experiments.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp list\nmain:\n    2399f24 [cnn-128]\n    4e8a178 [cnn-32]\n    f1edf21 [cnn-64]\n$ dvc exp remove cnn-32 cnn-64\nRemoved experiments: cnn-32,cnn-64\n```\n\n----------------------------------------\n\nTITLE: Importing Data from Another DVC Repository\nDESCRIPTION: This command imports a data file 'data.csv' from a different DVC repository into the current project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/status.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import different/repo/location data.csv\n```\n\n----------------------------------------\n\nTITLE: Installing DVC Bash Completions in Debian/Ubuntu\nDESCRIPTION: Command to generate and install DVC bash completions in Debian/Ubuntu systems.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc completion -s bash | sudo tee /etc/bash_completion.d/dvc\n```\n\n----------------------------------------\n\nTITLE: Setting HDFS Replication Factor in DVC CLI\nDESCRIPTION: Demonstrates how to set the replication factor for write operations on an HDFS cluster in DVC. This command sets the replication factor to 2 for the remote named 'myremote'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote replication 2\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Default Remote\nDESCRIPTION: Shows how to specify which remote to use when listing a repository. This example sets 'myremote' as the remote to use for this command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc list https://github.com/iterative/example-get-started-s3 data/prepared --remote myremote\n```\n\n----------------------------------------\n\nTITLE: Multiple Targets Metrics Output in JSON\nDESCRIPTION: Sample JSON output when retrieving metrics from multiple target files, showing how the metrics are organized by file path and then by metric type and dataset.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eval/train_val_metrics.json\": {\n    \"avg_prec\": { \"train\": 0.97, \"val\": 0.92 },\n    \"roc_auc\": { \"train\": 0.98, \"val\": 0.94 }\n  },\n  \"eval/test_metrics.json\": {\n    \"avg_prec\": { \"test\": 0.72 },\n    \"roc_auc\": { \"test\": 0.77 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Local DVC Experiment\nDESCRIPTION: Demonstrates how to rename an existing experiment from 'conic-ease' to 'renamed-exp' and verify the change has been applied.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/rename.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp rename conic-ease renamed-exp\n\n$ dvc exp list\nmaster:\n        major-mela\n        renamed-exp\n        lucid-lair\n```\n\n----------------------------------------\n\nTITLE: Updating DVC File Content After Moving in YAML\nDESCRIPTION: Demonstrates how the content of a .dvc file is updated after using 'dvc move' to rename a file from 'data.csv' to 'other.csv'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/move.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nouts:\n  - md5: c8263e8422925b0872ee1fb7c953742a\n    path: other.csv\n```\n\n----------------------------------------\n\nTITLE: Listing Files Before DVC Remove\nDESCRIPTION: Shows the initial state of files before using dvc remove command\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remove.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ ls\nbar.csv  bar.csv.dvc  foo.csv  foo.csv.dvc\n$ cat .gitignore\n/foo.csv\n/bar.csv\n```\n\n----------------------------------------\n\nTITLE: Azure Authentication: Default Identity (Bash)\nDESCRIPTION: Example of configuring an Azure remote using default identity authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/modify.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d myremote azure://mycontainer/object\n$ dvc remote modify myremote account_name 'myaccount'\n$ dvc push\n```\n\n----------------------------------------\n\nTITLE: DVC Matrix Stage with Composite Values\nDESCRIPTION: This snippet showcases a `matrix` stage that uses composite values (lists and dictionaries) in its variable definitions. The `config` variable contains a list of dictionaries, while the `labels` variable contains a list of lists. DVC will generate stage names based on the variable name and the index of the value.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nmatrix:\n  config:\n    - n_estimators: 150\n      max_depth: 20\n    - n_estimators: 120\n      max_depth: 30\n  labels:\n    - [label1, label2, label3]\n    - [labelX, labelY, labelZ]\n```\n\n----------------------------------------\n\nTITLE: Querying Default Remote\nDESCRIPTION: Example of retrieving the current default remote setting.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/default.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote default\n\nmyremote\n```\n\n----------------------------------------\n\nTITLE: DVC Config File Structure\nDESCRIPTION: Example of how the default remote is stored in the DVC config file's core section.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/default.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[core]\nremote = myremote\n```\n\n----------------------------------------\n\nTITLE: DVC Experiment Removal with Keep Flag\nDESCRIPTION: Shows how to use the --keep flag to remove all experiments except specified ones.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/remove.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp list\nmaster:\n        major-mela\n        conic-ease\n        lucid-lair\n\n$ dvc exp remove --keep major-mela\n\n$ dvc exp list\nmaster:\n        major-mela\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Pager in Linux Shell\nDESCRIPTION: Examples of how to set a custom pager for DVC output using the DVC_PAGER environment variable, either for a single command or persistently.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/dag.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ DVC_PAGER=more dvc exp show  # Use more as pager once.\n...\n\n$ export DVC_PAGER=more  # Set more as pager for all commands.\n$ dvc exp show ...\n```\n\n----------------------------------------\n\nTITLE: DVC Lock File Structure\nDESCRIPTION: Example structure of dvc.lock file showing stage dependencies, parameters and outputs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/commit.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntrain:\n  cmd: python src/train.py data/features model.pkl\n  deps:\n    - path: data/features\n      md5: de03a7e34e003e54dde0d40582c6acf4.dir\n    - path: src/train.py\n      md5: ad8e71b2cca4334a7d3bb6495645068c\n  params:\n    params.yaml:\n      train.n_estimators: 100\n      train.seed: 20170428\n  outs:\n    - path: model.pkl\n      md5: 9aba000ba83b341a423a81eed8ff9238\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Experiments Table\nDESCRIPTION: Example output of 'dvc exp show' command after saving an experiment, showing the experiment details in a table format.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/save.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n Experiment                  Created        avg_prec   roc_auc   prepare.split   prepare.seed   featurize.max_features   featurize.ngrams   train.seed   train.n_est   train.min_split   data/data.xml   data/features   data/prepared   model.pkl   src/evaluate.py   src/featurization.py   src/prepare.py   src/train.py\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n workspace                   -                 0.925   0.94602   0.2             20170428       200                      2                  20170428     50            0.01              22a1a29         f35d4cc         153aad0         fb021d7     759095a           e0265fc                f09ea0c          c3961d7\n main                        Nov 02, 2022      0.925   0.94602   0.2             20170428       200                      2                  20170428     50            0.01              22a1a29         f35d4cc         153aad0         fb021d7     759095a           e0265fc                f09ea0c          c3961d7\n └── d0f234c [extra-trees]   12:11 PM        0.92707   0.94612   0.2             20170428       200                      2                  20170428     50            0.01              ced660e         f35d4cc         153aad0         27473f2     759095a           e0265fc                f09ea0c          6537232\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Proxy Target for WebHDFS in DVC CLI\nDESCRIPTION: Demonstrates how to set the data_proxy_target parameter for a WebHDFS remote in DVC. This is used to support access to WebHDFS clusters behind a High Availability proxy server.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_14\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify data_proxy_target \"https://host:port/gateway/cluster\"\n```\n\n----------------------------------------\n\nTITLE: Listing Git Branches in Bash\nDESCRIPTION: Shows how to list Git branches after creating a new branch from a DVC experiment, using the 'git branch' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/branch.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git branch\n```\n\n----------------------------------------\n\nTITLE: Installing DVClive Base Package\nDESCRIPTION: Basic installation of DVClive using pip package manager. Requires Python 3.8+.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/install.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install dvclive\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Changes and Status\nDESCRIPTION: Shows how to modify a tracked file and check its status using dvc status command, demonstrating how DVC detects changes in dependencies.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/freeze.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ echo zoo > foo\n$ dvc status\nmake_copy:\n\tchanged deps:\n\t\tmodified:           foo\nfoo.dvc:\n\tchanged outs:\n\t\tmodified:           foo\n```\n\n----------------------------------------\n\nTITLE: Transferring TLS Certificates to EC2 Instance\nDESCRIPTION: Command to securely copy TLS certificate and private key files to an EC2 instance using SCP.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/tls.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nscp studio.crt studio.pem ubuntu@my-ec2-instance:.\n```\n\n----------------------------------------\n\nTITLE: Reading DVC Cache Directory File\nDESCRIPTION: This CLI command shows the content of a `.dir` file in the DVC cache. The `.dir` file contains a JSON array mapping files inside the directory, identified by their hash values and relative paths.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/internal-files.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n\"$ cat .dvc/cache/files/md5/6f/db5336fce0dbfd669f83065f107551.dir\n[{\\\"md5\\\": \\\"de7371b0119f4f75f9de703c7c3bac16\\\", \\\"relpath\\\": \\\"cat.jpeg\\\"},\n{\\\"md5\\\": \\\"402e97968614f583ece3b35555971f64\\\", \\\"relpath\\\": \\\"index.jpeg\\\"}]\"\n```\n\n----------------------------------------\n\nTITLE: Verify Local Experiment List\nDESCRIPTION: Command to verify that the pulled experiment exists in the local repository by listing all experiments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/pull.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp list --all-commits\nmain:\n    5cdc6a9 [lurid-air]\n```\n\n----------------------------------------\n\nTITLE: Downloading Remote Data with DVC Pull\nDESCRIPTION: Demonstrates how to download the remotely stored data using the dvc pull command with the generated .dvc file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_11\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc pull data.xml.dvc\nA       data.xml\n1 file added\n```\n\n----------------------------------------\n\nTITLE: Examining DVC Cache Structure\nDESCRIPTION: Displays the structure of the DVC cache directory, showing that only non-ignored files are cached by DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ tree .dvc/cache/files/md5\n.dvc/cache/files/md5\n├── 0a\n│   └── ec3a687bd65c3e6a13e3cf20f3a6b2.dir\n└── 52\n    └── 4bcc8502a70ac49bf441db350eafc2\n```\n\n----------------------------------------\n\nTITLE: Check-Ignore Including Non-Matching Targets\nDESCRIPTION: Demonstrates using the --non-matching (-n) option to include non-matching targets in the details list.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/check-ignore.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc check-ignore -d -n other\n::\tother\n```\n\n----------------------------------------\n\nTITLE: Initializing Aliyun OSS Remote Storage in DVC\nDESCRIPTION: Basic commands to add an Aliyun OSS remote storage and configure its endpoint in DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/aliyun-oss.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote oss://mybucket/path\n$ dvc remote modify myremote oss_endpoint endpoint\n```\n\n----------------------------------------\n\nTITLE: Showing DVC Params Command Usage\nDESCRIPTION: This snippet shows the usage syntax for the 'dvc params' command, including available subcommands and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/index.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: dvc params [-h] [-q | -v] {diff} ...\n\npositional arguments:\n  COMMAND\n    diff         Show changes in params between commits in the\n                 DVC repository, or between a commit and the workspace.\n```\n\n----------------------------------------\n\nTITLE: Configuring a Local DVC Remote Storage (Mac/Linux)\nDESCRIPTION: Commands to create a directory for local DVC remote storage and configure it as the default remote for the project on Mac/Linux.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir /tmp/dvcstore\n$ dvc remote add -d myremote /tmp/dvcstore\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Files for DVC Ignore Example\nDESCRIPTION: Creates a directory 'dir' and adds two sample files for demonstrating .dvcignore functionality.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir dir\n$ echo file_one > dir/file1\n$ echo file_two > dir/file2\n```\n\n----------------------------------------\n\nTITLE: Checking Empty DVC Queue Status\nDESCRIPTION: Shows the output of 'dvc queue status' when there are no tasks in the queue and no active workers.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/status.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc queue status\nNo experiment tasks in the queue.\n\nWorker status: 0 active, 0 idle\n```\n\n----------------------------------------\n\nTITLE: Parameter Configuration in YAML\nDESCRIPTION: Example YAML configuration showing featurization parameters for ML pipeline.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/commit.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfeaturize:\n  max_features: 6000\n  ngrams: 2\n```\n\n----------------------------------------\n\nTITLE: DVC Fetch Command Usage Syntax\nDESCRIPTION: The command syntax for the DVC fetch command, showing all available options and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/fetch.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc fetch [-h] [-q | -v] [-j <number>] [-r <name>] [-a] [-T]\n                 [--all-commits] [-d] [-R] [--run-cache | --no-run-cache]\n                 [--max-size <bytes>] [--type {metrics,plots}]\n                 [targets [targets ...]]\n```\n\n----------------------------------------\n\nTITLE: Setting Kerberos Principal for WebHDFS in DVC CLI\nDESCRIPTION: Demonstrates how to set a specific Kerberos principal for a WebHDFS remote in DVC. This is useful when you have multiple principals available.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote kerberos_principal myprincipal\n```\n\n----------------------------------------\n\nTITLE: Listing All Remotes\nDESCRIPTION: Example showing how to list all configured remotes, with the default remote indicated.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/default.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote list\nmyremote    /path/to/remote    (default)\notherremote    /path/to/other/remote\n```\n\n----------------------------------------\n\nTITLE: Parsing Model Registry Tags\nDESCRIPTION: Implementation of tag parsing job that extracts model information using GTO. GitHub version uses GTO action while GitLab uses direct GTO CLI commands.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/model-registry/model-cicd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# This job parses the git tag with the GTO GitHub Action to identify model registry actions\nparse:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v3\n    - name: 'Parse GTO tag'\n      id: gto\n      uses: iterative/gto-action@v2\n  outputs:\n    event: ${{ steps.gto.outputs.event }}\n    name: ${{ steps.gto.outputs.name }}\n    stage: ${{ steps.gto.outputs.stage }}\n    version: ${{ steps.gto.outputs.version }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nparse:\n  # This job parses the model tag to identify model registry actions\n  image: python:3.11-slim\n  script:\n    # Install GTO to parse model tags\n    - pip install gto\n    # This job parses the model tags to identify model registry actions\n    - echo \"CI_COMMIT_TAG - ${CI_COMMIT_TAG}\"\n    - echo MODEL_NAME=\"$(gto check-ref ${CI_COMMIT_TAG} --name)\" >> parse.env\n    - echo MODEL_VERSION=\"$(gto check-ref ${CI_COMMIT_TAG} --version)\" >>\n      parse.env\n    - echo MODEL_EVENT=\"$(gto check-ref ${CI_COMMIT_TAG} --event)\" >> parse.env\n    - echo MODEL_STAGE=\"$(gto check-ref ${CI_COMMIT_TAG} --stage)\" >> parse.env\n    # Print variables saved to parse.env\n    - cat parse.env\n  artifacts:\n    reports:\n      dotenv: parse.env\n```\n\n----------------------------------------\n\nTITLE: Setting Read Timeout for HTTP Remote in DVC CLI\nDESCRIPTION: Shows how to set the read timeout for an HTTP remote to 5 minutes (300 seconds) using the DVC command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote read_timeout 300\n```\n\n----------------------------------------\n\nTITLE: Defining Next Step Method in Python\nDESCRIPTION: Definition of the next_step() method in DVCLive. This method signals the end of the current iteration and increases the step value by 1.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/next_step.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef next_step()\n```\n\n----------------------------------------\n\nTITLE: DVC Stage Command Synopsis\nDESCRIPTION: Command-line syntax for the DVC stage commands, showing the main subcommands 'add' and 'list' along with basic help options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/stage/index.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc stage [-h] [-q | -v] {add,list} ...\n\npositional arguments:\n  COMMAND\n    add         Create stage.\n    list        List stages.\n```\n\n----------------------------------------\n\nTITLE: Generated YAML Parameter Output\nDESCRIPTION: Example of the YAML file output generated by log_param() calls, showing the parameter name-value pairs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_param.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlr: 1e-3\nn_iter: 50\n```\n\n----------------------------------------\n\nTITLE: Calibration Plot Example\nDESCRIPTION: Example of generating a calibration curve plot using sample binary classification data.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_sklearn_plot.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ny_true = [0, 0, 1, 1]\ny_score = [0.1, 0.4, 0.35, 0.8]\nlive.log_sklearn_plot(\"calibration\", y_true, y_score)\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Development Environment\nDESCRIPTION: Commands to set up a Python virtual environment and install DVC development dependencies\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/core.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ cd dvc\n$ python3 -m venv venv\n$ source venv/bin/activate\n$ pip install --upgrade pip wheel\n$ pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Verification for WebDAV in DVC CLI\nDESCRIPTION: Shows how to disable SSL certificate verification or specify a custom CA bundle for verification when connecting to the WebDAV server.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote ssl_verify false\n# or\n$ dvc remote modify myremote ssl_verify path/to/ca_bundle.pem\n```\n\n----------------------------------------\n\nTITLE: Unsetting Default Remote\nDESCRIPTION: Example of removing the default remote setting using the unset option.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/default.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote default -u\n```\n\n----------------------------------------\n\nTITLE: DVC Queue Command Usage Synopsis\nDESCRIPTION: Displays the usage synopsis for the 'dvc queue' command, including available subcommands and their brief descriptions. This snippet shows the command structure and options for managing experiment queues in DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc queue [-h] [-q | -v]\n                 {start,stop,status,logs,remove,kill} ...\n\npositional arguments:\n  COMMAND\n    start       Start experiments queue workers.\n    stop        Stop experiments queue workers.\n    status      List the status of the queue tasks and workers.\n    logs        Show output logs for a task in the experiments queue.\n    remove      Remove tasks in experiments queue.\n    kill        Kill tasks in experiments queue.\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with pip on Windows\nDESCRIPTION: Command to install DVC using pip Python package manager. Requires Python 3.8+ for the latest version and recommends using a virtual environment or pipx.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/windows.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install dvc\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Experiment Pushing\nDESCRIPTION: DVC configuration command to enable automatic pushing of experiments after running or saving them. This sets the 'exp.auto_push' option to true.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/sharing-experiments.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc config exp.auto_push true\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC for No SCM Mode\nDESCRIPTION: Workaround configuration to use DVC in Databricks Repos without Git functionality.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/databricks.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n!dvc config core.no_scm true --local\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Queue Logs Command Usage\nDESCRIPTION: Shows the usage syntax for the 'dvc queue logs' command, including its arguments and options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/logs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc queue logs [-h] [-q | -v] [-e <encoding>] [-f] <task>\n```\n\n----------------------------------------\n\nTITLE: DVC Cache Dir Command Usage Synopsis\nDESCRIPTION: Shows the command syntax and available arguments for the dvc cache dir command, including options for configuration scope and path value handling.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/cache/dir.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc cache dir [-h] [--global | --system | --project | --local]\n                     [-u] [value]\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for DVC Get Command\nDESCRIPTION: The command-line syntax for the 'dvc get' command, showing the available options and arguments. It requires a URL to a repository and a path to the file or directory to download.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc get [-h] [-q | -v] [-o <path>] [--rev <commit>]\n               [--show-url] [-j <number>] [-f]\n               [--config <path>] [--remote <name>]\n               [--remote-config [<name>=<value> ...]]\n               url path\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Steps with Dry Run in DVC\nDESCRIPTION: Example of using the --dry option to preview what migration steps will be taken without actually performing them.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/cache/migrate.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc cache migrate --dry\n94975 files will be re-hashed and migrated to the DVC 3.0 cache location.\n```\n\n----------------------------------------\n\nTITLE: Using Custom HTML Template with DVC Plots\nDESCRIPTION: Commands to use and configure a custom HTML template for DVC plots output.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots show --html-template .dvc/plots/mypage.html\n$ dvc config plots.html_template plots/mypage.html\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Package Manager\nDESCRIPTION: Command to globally install Yarn package manager using npm.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/docs.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ npm install -g yarn\n```\n\n----------------------------------------\n\nTITLE: Modifying Data by Doubling Content (Mac/Linux)\nDESCRIPTION: Commands to simulate data updates by creating a copy of the data file and appending it to itself on Mac/Linux.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_14\n\nLANGUAGE: cli\nCODE:\n```\n$ cp data/data.xml /tmp/data.xml\n$ cat /tmp/data.xml >> data/data.xml\n```\n\n----------------------------------------\n\nTITLE: DVC Remote Rename Command Usage Syntax\nDESCRIPTION: Command line syntax for the DVC remote rename command showing all available options and required arguments. The command requires a current remote name and a new name as positional arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/rename.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc remote rename [-h]\n                         [--global | --system | --project | --local]\n                         [-q | -v]\n                         name new\n\npositional arguments:\n  name           Remote to be renamed\n  new            New name of the remote\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Remote List Command Usage\nDESCRIPTION: Shows the usage syntax for the 'dvc remote list' command, including available options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/list.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc remote list [-h] [--global | --system | --project | --local]\n                       [-q | -v]\n```\n\n----------------------------------------\n\nTITLE: Hydra-based Python Script without DVC\nDESCRIPTION: Example of a Python script using Hydra without DVC integration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/hydra-composition.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport hydra\nfrom omegaconf import DictConfig\n\n@hydra.main(version_base=None, config_path=\"conf\", config_name=\"config\")\ndef main(cfg: DictConfig) -> None:\n    # train model using cfg parameters\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Multiple Experiments Tracking with DVCLive\nDESCRIPTION: Track each drift calculation as a separate experiment\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/evidently.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n\nfor step, date in enumerate(experiment_batches):\n    with Live() as live:\n        live.log_param(\"begin\", date[0])\n        live.log_param(\"end\", date[1])\n        live.log_param(\"step\", step)\n\n        metrics = eval_drift(\n            df.loc[df.dteday.between(reference_dates[0], reference_dates[1])],\n            df.loc[df.dteday.between(date[0], date[1])],\n            column_mapping=data_columns,\n        )\n\n        for feature in metrics:\n            live.log_metric(feature[0], round(feature[1], 3))\n```\n\n----------------------------------------\n\nTITLE: DVC Experiment Status Table\nDESCRIPTION: Displays the experiment status table showing remaining queued experiments after removal.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/remove.md#2025-04-21_snippet_3\n\nLANGUAGE: dvctable\nCODE:\n```\n ──────────────────────────────────────────────────────────────────────────────────────\n  neutral:**Experiment**              neutral:**Created**        neutral:**State**    metric:**avg_prec**   metric:**roc_auc**   metric:**train.min_split**\n ──────────────────────────────────────────────────────────────────────────────────────\n  workspace               -              -         0.57553   0.94652   2\n  master                  Aug 02, 2021   -         0.53252    0.9107   2\n  └── 5751540 [split32]   04:57 PM       Queued          -         -   32\n ──────────────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC Queue Status After Task Completion\nDESCRIPTION: Demonstrates the final queue status after all tasks have completed and workers have shut down.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/status.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc queue status\nTask     Name    Created    Status\n753b005          04:01 PM   Success\n0bbb118          04:01 PM   Success\n1ae8b65          04:01 PM   Success\n\nWorker status: 0 active, 0 idle\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage for DVC Queue Kill Command\nDESCRIPTION: This code snippet shows the usage syntax for the 'dvc queue kill' command. It outlines the command structure, including optional flags and positional arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/kill.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc queue kill [-h] [-q | -v] [-f] [<task> ...]\n\npositional arguments:\n  <task>         Tasks in queue to kill.\n```\n\n----------------------------------------\n\nTITLE: Creating a DVC Studio Project using CLI\nDESCRIPTION: Shows how to create a new project in DVC Studio using a curl command in the command-line interface. It includes setting the authorization token, request payload, and headers.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/rest-api/create-project.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ curl --location 'https://studio.datachain.ai/api/create-project' \\\n--header \"Authorization:token ${DVC_STUDIO_TOKEN}\" \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"repo_url\": \"https://github.com/organization/repo\",\n    \"public\": true,\n    \"team_name\": \"team\",\n    \"subdir\": \"nested\",\n    \"name\": \"test-nested\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Ticket for HDFS in DVC CLI\nDESCRIPTION: Shows how to set the path to the Kerberos ticket cache for Kerberos-secured HDFS clusters in DVC. This setting is added locally to protect sensitive information.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote \\\n                              kerb_ticket /path/to/ticket/cache\n```\n\n----------------------------------------\n\nTITLE: Text Encoding Specification\nDESCRIPTION: Example showing how to specify text encoding when opening files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nwith dvc.api.open('data/nlp/words_ru.txt', encoding='koi8_r') as f:\n    # ... Process Russian words\n```\n\n----------------------------------------\n\nTITLE: Committing Reverted Data Version\nDESCRIPTION: Command to commit the reverted DVC metadata file to Git, completing the data version rollback.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_20\n\nLANGUAGE: cli\nCODE:\n```\n$ git commit data/data.xml.dvc -m \"Revert dataset updates\"\n```\n\n----------------------------------------\n\nTITLE: DVC Cache Command Usage Syntax\nDESCRIPTION: Shows the usage syntax for the DVC cache command, including its subcommands 'dir' and 'migrate'. The 'dir' subcommand configures cache directory location, while 'migrate' subcommand migrates cached files to the DVC 3.0 cache location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/cache/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc cache [-h] [-q] [-v] {dir,migrate} ...\n\npositional arguments:\n    dir          Configure cache directory location.\n    migrate      Migrate cached files to the DVC 3.0 cache location.\n```\n\n----------------------------------------\n\nTITLE: Importing Data via URL\nDESCRIPTION: Example of importing external data into DVC using a URL.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/databricks.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n!dvc import-url https://archive.ics.uci.edu/static/public/186/wine+quality.zip\n```\n\n----------------------------------------\n\nTITLE: Renaming a Remote DVC Experiment\nDESCRIPTION: Shows the process of pushing experiments to a remote, listing remote experiments, and renaming a remote experiment using the `-g` flag to specify the Git remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/rename.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp push myremote\n\n$ dvc exp list myremote\nmaster:\n        conic-ease\n        urban-sign\n        major-mela\n\n$ dvc exp rename -g myremote urban-sign renamed-exp\n$ dvc exp list myremote\nmaster:\n        conic-ease\n        renamed-exp\n        major-mela\n```\n\n----------------------------------------\n\nTITLE: Importing DVCLive in Python\nDESCRIPTION: Shows how to import the Live class from the dvclive module.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Images in Air-Gapped Environment\nDESCRIPTION: These commands load the previously saved Docker images into the container runtime on the air-gapped machine.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/upgrading/airgap-procedure.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ docker load -i studio-frontend-$STUDIO_VERSION.tar\n$ docker load -i studio-backend-$STUDIO_VERSION.tar\n$ docker load -i studio-datachain-worker-$STUDIO_VERSION.tar\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Completion Support in Debian/Ubuntu\nDESCRIPTION: Code snippet to add to ~/.bashrc to enable bash completion support in Debian/Ubuntu Linux distributions.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# enable bash completion in interactive shells\nif ! shopt -oq posix; then\n  if [ -f /usr/share/bash-completion/bash_completion ]; then\n    . /usr/share/bash-completion/bash_completion\n  elif [ -f /etc/bash_completion ]; then\n    . /etc/bash_completion\n  fi\nfi\n```\n\n----------------------------------------\n\nTITLE: Defining Tabular Data in CSV for DVC Plots\nDESCRIPTION: An example of tabular data in CSV format that can be used as input for DVC plots, containing epoch, loss, and accuracy values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nepoch,loss,accuracy\n1,0.19,0.81\n2,0.11,0.89\n3,0.07,0.93\n4,0.04,0.96\n```\n\n----------------------------------------\n\nTITLE: Modifying HTTP Remote URL in DVC CLI\nDESCRIPTION: Shows how to modify the URL of an existing HTTP remote named 'myremote' using the DVC command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote url https://example.com/path\n```\n\n----------------------------------------\n\nTITLE: Updating DVC Studio Hostname Configuration in YAML\nDESCRIPTION: Example of updating the hostname configuration in DVC Studio's values.yaml file to specify a custom domain.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  host: studio.company2.com\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with snap on Linux\nDESCRIPTION: Installs DVC using the snap package manager with classic confinement. Requires snapd to be installed on the system.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/linux.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ snap install --classic dvc\n```\n\n----------------------------------------\n\nTITLE: Defining monitor_system Function in Python\nDESCRIPTION: This snippet shows the function signature for the monitor_system method. It takes parameters for interval, number of samples, and directories to monitor.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/monitor_system.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef monitor_system(\n    interval: float = 0.05,\n    num_samples: int = 20,\n    directories_to_monitor: Optional[Dict[str, str]] = None,\n    ):\n```\n\n----------------------------------------\n\nTITLE: DVC Studio Login\nDESCRIPTION: Command to login to DVC Studio for experiment sharing and remote tracking\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-tracking.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc studio login\n```\n\n----------------------------------------\n\nTITLE: Supported Parameter Types Definition\nDESCRIPTION: Python type definition showing the supported parameter value types including primitives, lists, and dictionaries.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_param.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nParamLike = Union[\n    int,\n    float,\n    str,\n    bool,\n    List[\"ParamLike\"],\n    Dict[str, \"ParamLike\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Domain to GitLab Webhook Allowlist\nDESCRIPTION: Example of adding a domain to GitLab's webhook allowlist to enable local network requests.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/git-forges/gitlab.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstudio.example.com\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with Cloud Dependencies\nDESCRIPTION: Example command for installing DVC with additional dependencies required for Amazon S3 remote storage support.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/add.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"dvc[s3]\"\n```\n\n----------------------------------------\n\nTITLE: DVC Queued Experiment Removal\nDESCRIPTION: Shows how to queue multiple experiments and remove specific ones using their IDs or names.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/remove.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp run --queue -S train.min_split=64\nQueued experiment 'e41d5b4' for future execution.\n$ dvc exp run --queue -S train.min_split=32 --name split32\nQueued experiment '5751540' for future execution.\n$ dvc exp run --queue -S train.min_split=16 --name split16\nQueued experiment '8de9a6c' for future execution.\n\n$ dvc exp remove e41d5b4 split16\n\n$ dvc exp show\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC Queue Status Output\nDESCRIPTION: Demonstrates the output of the 'dvc queue status' command, showing task and worker status information.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/status.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc queue status\nTask     Name    Created    Status\n753b005          04:01 PM   Running\n1ae8b65          04:01 PM   Queued\n\nWorker status: 1 active, 0 idle\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Help Command\nDESCRIPTION: Command to display a list of available DVC commands in the terminal\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndvc -h\n```\n\n----------------------------------------\n\nTITLE: Importing External Data without Downloading\nDESCRIPTION: Demonstrates how to use the --no-download flag with dvc import-url to track external data without downloading it locally.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/importing-external-data.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc import-url --no-download https://data.dvc.org/get-started/data.xml\nImporting 'https://data.dvc.org/get-started/data.xml' -> 'data.xml'\n\n$ ls\ndata.xml.dvc\n```\n\n----------------------------------------\n\nTITLE: Logging Artifact with DVCLive in Python\nDESCRIPTION: Shows how to log an artifact using DVCLive, specifying the path, type, and name.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlive.log_artifact(\"model.pt\", type=\"model\", name=\"gpt\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Existing Docker Credentials in Kubernetes\nDESCRIPTION: This command removes the existing Docker credentials secret named 'iterativeai' from the 'studio' namespace in Kubernetes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/troubleshooting/502.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nkubectl delete secret iterativeai -n studio\n```\n\n----------------------------------------\n\nTITLE: Configuring GDrive Trash Behavior\nDESCRIPTION: Sets the trash-only flag for gc operations to move files to trash instead of permanent deletion\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote gdrive_trash_only true\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Cases\nDESCRIPTION: Examples of running individual test cases and functions with additional arguments\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/core.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ python -m tests tests/func/test_metrics.py::TestCachedMetrics\n$ python -m tests tests/unit/utils/test_fs.py::test_get_inode\n$ python -m tests --pdb\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Sample Files\nDESCRIPTION: Example showing how to create a test file, add it to DVC tracking, and create a stage that copies one file to another using dvc stage add command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/freeze.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ echo foo > foo\n$ dvc add foo\n$ dvc stage add -n make_copy -d foo -o bar cp foo bar\n```\n\n----------------------------------------\n\nTITLE: Verifying File Status After Unprotection\nDESCRIPTION: Demonstrates how to check the status of files after unprotection, showing that the target file is now writable and separate from its cached version.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unprotect.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -lh\n-rw-r--r--  1  120B Nov 27 13:29 Posts.xml.zip.dvc\n-rw-r--r--  1   10M Nov 27 13:30 Posts.xml.zip\n\n$ ls -lh .dvc/cache/files/md5/ce/\n-rw-r--r--@ 1 10M Apr 25  2017 68b98d82545628782c66192c96f2d2\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Addresses for Firewall Access in DVC Studio\nDESCRIPTION: This code snippet provides the IP addresses that should be allowed through a firewall to access self-hosted S3 storage or SSH servers for DVC Studio. These IP addresses are used by DVC Studio to connect to remote storage behind firewalls.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3.21.85.173/32\n3.142.203.124/32\n```\n\n----------------------------------------\n\nTITLE: Customizing DvcliveLoggerHook with additional parameters\nDESCRIPTION: This example demonstrates how to use **kwargs to customize the DvcliveLoggerHook. It sets up logging at 100-step intervals and specifies a custom directory for the DvcliveLoggerHook using the 'dir' parameter.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/ml-frameworks/mmcv.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlog_config = dict(\n    interval=100,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='DvcliveLoggerHook',\n            dir=\"custom_dir\"\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Example for DVC Studio Model Download\nDESCRIPTION: Command-line example using curl to request model download URLs from the DVC Studio API. Shows the response format with signed S3 URLs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/rest-api/download-model.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ curl \"https://studio.datachain.ai/api/model-registry/get-download-uris?repo=git@github.com:iterative/demo-bank-customer-churn.git&name=randomforest-model&version=v2.0.0\" --header \"Authorization:token ${DVC_STUDIO_TOKEN}\"\n\n{\n    \".mlem/model/clf-model\": \"https://sandbox-datasets-iterative.s3.amazonaws.com/bank-customer-churn/86/bd02376ac675568ba2fac566169ef9?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAU7UXIWDIQFPCO76Q%2F20230706%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230706T134619Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6807259ddd1f4448ed1e3c5d4503039884f7779381ee556175096b0a884ba1a6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Abuse Acknowledgment for GDrive Remote\nDESCRIPTION: Sets the gdrive_acknowledge_abuse flag to handle files marked as potential malware or spam\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote gdrive_acknowledge_abuse true\n```\n\n----------------------------------------\n\nTITLE: Adding SSL Certificate to values.yaml for DVC Studio\nDESCRIPTION: This snippet shows how to add an SSL certificate to the values.yaml file for a DVC Studio instance. The certificate should be placed between the BEGIN CERTIFICATE and END CERTIFICATE lines, maintaining proper indentation.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/ssl.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  customCaCerts:\n    - |-\n      -----BEGIN CERTIFICATE-----\n      ...\n      -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Experiment Table Output Display\nDESCRIPTION: Shows the tabular output of 'dvc exp show' command with experiments, their creation dates, metrics, and parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_3\n\nLANGUAGE: dvctable\nCODE:\n```\n ────────────────────────────────────────────────────────────────────────────────────────────\n  neutral:**Experiment**               neutral:**Created**            metric:**auc**   param:**featurize.max_features**   param:**featurize.ngrams**\n ────────────────────────────────────────────────────────────────────────────────────────────\n  workspace                -              0.61314   1500                     2\n  10-bigrams-experiment    Jun 20, 2020   0.61314   1500                     2\n  ├── gluey-leak           Oct 21, 2020   0.69830   2000                     2\n  ├── frank-farm           Oct 09, 2020   0.57756   1200                     2\n  └── union-mart           Oct 09, 2020   0.51676   500                      2\n ────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Generated DVC YAML Configuration\nDESCRIPTION: The resulting DVC YAML configuration generated from the feature importance plot example.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_plot.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - dvclive/plots/custom/iris_feature_importance.json:\n      template: bar_horizontal\n      x: importance\n      y: name\n      title: 'Iris Dataset: Feature Importance'\n      x_label: Feature Importance\n      y_label: Feature Name\n```\n\n----------------------------------------\n\nTITLE: Setting DVC Studio Environment Variables\nDESCRIPTION: Commands to set environment variables for DVC Studio integration\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/sagemaker.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ export DVC_STUDIO_TOKEN=\"<token>\"\n$ export DVC_EXP_GIT_REMOTE=\"https://github.com/<org>/<repo>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Local DVC Remote Storage (Windows)\nDESCRIPTION: Commands to create a directory for local DVC remote storage and configure it as the default remote for the project on Windows.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir %TEMP%/dvcstore\n$ dvc remote add -d myremote %TEMP%\\dvcstore\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP External Dependency in DVC\nDESCRIPTION: Creates a DVC stage that downloads a file via HTTP/HTTPS and tracks it as a dependency.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/external-dependencies-and-outputs.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n download_file \\\n          -d https://example.com/data.txt \\\n          -o data.txt \\\n          wget https://example.com/data.txt -O data.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Smooth DVC Plots\nDESCRIPTION: Commands to generate and smooth a plot using DVC's smooth template option.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots show data.csv\n$ dvc plots show -t smooth data.csv\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Authentication Header for HTTP Remote in DVC CLI\nDESCRIPTION: Demonstrates how to set a custom authentication header for an HTTP remote using the DVC command line interface. This is used when the auth parameter is set to 'custom'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote \\\n                      custom_auth_header 'My-Header'\n```\n\n----------------------------------------\n\nTITLE: Setting OSS Environment Variables\nDESCRIPTION: Commands to set environment variables for OSS authentication and endpoint configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/aliyun-oss.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ export OSS_ACCESS_KEY_ID='mykey'\n$ export OSS_ACCESS_KEY_SECRET='mysecret'\n$ export OSS_ENDPOINT='endpoint'\n```\n\n----------------------------------------\n\nTITLE: Defining Time Windows for Analysis\nDESCRIPTION: Set up reference and experiment time periods for drift analysis\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/evidently.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#set reference dates\nreference_dates = ('2011-01-01 00:00:00','2011-01-28 23:00:00')\n\n#set experiment batches dates\nexperiment_batches = [\n    ('2011-01-01 00:00:00','2011-01-29 23:00:00'),\n    ('2011-01-29 00:00:00','2011-02-07 23:00:00'),\n    ('2011-02-07 00:00:00','2011-02-14 23:00:00'),\n    ('2011-02-15 00:00:00','2011-02-21 23:00:00'),\n]\n```\n\n----------------------------------------\n\nTITLE: Base API URLs in Markdown\nDESCRIPTION: Lists the base URLs for accessing the DVC Studio REST API, including both cloud and self-hosted instances.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/rest-api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- https://studio.datachain.ai/api, or\n- https://your-domain/api in case of\n  [self-hosted DVC Studio](/doc/studio/self-hosting/installation)\n```\n\n----------------------------------------\n\nTITLE: Target Path Specification Example\nDESCRIPTION: Shows how to use the --targets option with multiple parameter files when comparing revisions.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/diff.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc params diff --targets m1.json m2.yaml -- HEAD v1\n```\n\n----------------------------------------\n\nTITLE: Displaying Delta Mode Toggle in Markdown\nDESCRIPTION: Illustrates how to show the Delta mode toggle option using an image in Markdown syntax.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/experiments/explore-ml-experiments.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Delta mode](https://static.iterative.ai/img/studio/delta_mode.png)\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated Metric History File in CLI\nDESCRIPTION: Example of the updated contents of a metric history file after logging multiple values.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_metric.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\ntimestamp      step  loss\n1623671484747  0     0.4\n1623671484892  1     0.2\n```\n\n----------------------------------------\n\nTITLE: DVC Import File Configuration\nDESCRIPTION: YAML configuration showing the structure of a DVC import file with local dependencies\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmd5: fceb2bc076fabe99b483729c3ea2a897\nfrozen: true\ndeps:\n  - md5: a304afb96060aad90176268345e10355\n    path: /tmp/dvc-import-url-example/data.xml\nouts:\n  - md5: a304afb96060aad90176268345e10355\n    path: data.xml\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Experiment List Command Usage in Bash\nDESCRIPTION: Shows the usage syntax for the 'dvc exp list' command, including available options and arguments. This snippet outlines the command structure for listing experiments in a DVC repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/list.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc exp list [-h] [-q | -v] [-A] [--rev <commit>]\n                    [-n <num>] [--name-only]\n                    [git_remote]\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDAV Username in DVC CLI\nDESCRIPTION: Shows how to set the username for WebDAV authentication. This is used in conjunction with a password when token-based auth is not used.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote user myuser\n```\n\n----------------------------------------\n\nTITLE: Resolving dvc.yaml Merge Conflicts\nDESCRIPTION: Example of a merge conflict in a dvc.yaml file showing conflicting dependency paths between branches.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/resolve-merge-conflicts.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  prepare:\n    cmd: python src/prepare.py data/data.xml\n    deps:\n< < < < < < < HEAD\n    - data/big.xml\n= = = = = = =\n    - data/small.xml\n> > > > > > > branch\n    - src/prepare.py\n    params:\n    - prepare.seed\n    - prepare.split\n    outs:\n    - data/prepared\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository for DVC Studio Upgrade\nDESCRIPTION: This command updates the Helm repository to ensure the latest version of DVC Studio is available for upgrade.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/upgrading/regular-procedure.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ helm repo update\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Specification for DVC Studio Model Download\nDESCRIPTION: Defines the API endpoint and HTTP method for getting model download URLs from DVC Studio.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/rest-api/download-model.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nEndpoint: api/model-registry/get-download-uris\nHTTP Method: GET\n```\n\n----------------------------------------\n\nTITLE: Displaying Save or Discard Changes Notification in Markdown\nDESCRIPTION: Shows how to display a notification for saving or discarding changes using an image in Markdown syntax.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/experiments/explore-ml-experiments.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![Save or discard changes](https://static.iterative.ai/img/studio/save_discard_changes.png)\n```\n\n----------------------------------------\n\nTITLE: DVC Remote Storage Operations\nDESCRIPTION: Commands for sharing data artifacts with remote storage\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndvc push\n```\n\nLANGUAGE: bash\nCODE:\n```\ndvc pull\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Path for DVC Cache Directory\nDESCRIPTION: Shows how an absolute cache directory path is preserved as-is in the DVC config file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/cache/dir.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc cache dir /path/to/dir\n$ cat .dvc/config\n...\n[cache]\n    dir = /path/to/dir\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage External Dependency in DVC\nDESCRIPTION: Creates a DVC stage that downloads a file from Google Cloud Storage and tracks it as a dependency.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/external-dependencies-and-outputs.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n download_file \\\n          -d gs://mybucket/data.txt \\\n          -o data.txt \\\n          gsutil cp gs://mybucket/data.txt data.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Auth Header for WebDAV in DVC CLI\nDESCRIPTION: Demonstrates how to set a custom HTTP header for authentication with the WebDAV server. This is used when the server requires a specific header for auth.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote \\\n                      custom_auth_header 'My-Header'\n```\n\n----------------------------------------\n\nTITLE: Running Support Bundle Creation Script\nDESCRIPTION: Command to execute the create-support-bundle script, which generates the DVC Studio support bundle containing application logs for troubleshooting.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/troubleshooting/support-bundle.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ create-support-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks\nDESCRIPTION: Commands to install pre-commit hooks for maintaining coding style\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/core.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install pre-commit\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Updating DVC Studio Deployment\nDESCRIPTION: Helm command to upgrade DVC Studio with the new TLS configuration using the modified values file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/tls.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\nhelm upgrade --wait studio iterative/studio --namespace studio -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Example Repository\nDESCRIPTION: Commands to clone the example repository, navigate to it, and checkout a specific tag for demonstration purposes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ git clone https://github.com/iterative/example-get-started\n$ cd example-get-started\n$ git checkout 3-config-remote\n```\n\n----------------------------------------\n\nTITLE: Check-Ignore with All Matching Patterns\nDESCRIPTION: Shows how to display all matching patterns using the --all (-a) option with detailed output.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/check-ignore.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc check-ignore -d -a file2\n.dvcignore:1:file*\tfile2\n.dvcignore:2:!file2\tfile2\n```\n\n----------------------------------------\n\nTITLE: Installing Less Pager with Chocolatey\nDESCRIPTION: Use this Chocolatey command to install the Less pager on Windows, enabling better output formatting for DVC commands like 'dvc dag'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/run-dvc-on-windows.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ choco install less\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for LF Line Endings\nDESCRIPTION: Use these Git commands to set core.autocrlf to false and core.eol to lf, ensuring consistent line ending handling across platforms.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/run-dvc-on-windows.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global core.autocrlf false\n$ git config --global core.eol lf\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Experiment Table\nDESCRIPTION: Example output of the 'dvc exp show' command, showing a table with experiments, their creation dates, and associated metrics and parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/diff.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n────────────────────────────────────────────────────────────────────────────────────────────\n neutral:**Experiment**               neutral:**Created**           metric: **auc**   param:**featurize.max_features**   param:**featurize.ngrams**\n────────────────────────────────────────────────────────────────────────────────────────────\n workspace                -              0.61314   1500                     2\n 10-bigrams-experiment    Jun 20, 2020   0.61314   1500                     2\n ├── major-mela           Oct 21, 2020   0.61314   1500                     2\n ├── gluey-leak           Oct 09, 2020   0.57756   2000                     2\n └── ochre-dook           Oct 09, 2020   0.51676   500                      2\n────────────────────────────────────────────────────────────────────────────────────────────\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Pandas\nDESCRIPTION: Load the bike sharing CSV data into a pandas DataFrame\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/evidently.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.read_csv(\"raw_data/day.csv\", header=0, sep=',', parse_dates=['dteday'])\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Enhancing Zsh Completion with Color Formatting\nDESCRIPTION: Code snippet to add to ~/.zshrc to improve Zsh completion output with color hints and better formatting for DVC commands.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Case insensitive match\nzstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'\n\n# Group matches and describe.\nzstyle ':completion:*:*:*:*:*' menu select\nzstyle ':completion:*:matches' group 'yes'\nzstyle ':completion:*:options' description 'yes'\nzstyle ':completion:*:options' auto-description '%d'\nzstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'\nzstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'\nzstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'\nzstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'\nzstyle ':completion:*:default' list-prompt '%S%M matches%s'\nzstyle ':completion:*' format ' %F{yellow}-- %d --%f'\nzstyle ':completion:*' group-name ''\nzstyle ':completion:*' verbose yes\n```\n\n----------------------------------------\n\nTITLE: Using DVC import-db with Table Parameter\nDESCRIPTION: Example of importing a table from a database using a previously configured connection.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-db.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc import-db --table customers_table --conn pgsql\n```\n\n----------------------------------------\n\nTITLE: Setting Delegation Token for WebHDFS in DVC CLI\nDESCRIPTION: Demonstrates how to set a Hadoop delegation token for a WebHDFS remote in DVC. This is used for authentication in secured clusters with Kerberos enabled.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_12\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote token \"mysecret\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS in DVC Studio Values\nDESCRIPTION: YAML configuration to enable TLS in DVC Studio and specify the TLS secret name.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/tls.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  ingress:\n    tlsEnabled: true\n    tlsSecretName: studio-ingress-tls\n```\n\n----------------------------------------\n\nTITLE: Command Synopsis for DVC Cache Migrate\nDESCRIPTION: Shows the usage syntax for the 'dvc cache migrate' command, including available options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/cache/migrate.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: dvc cache migrate [-h] [-q | -v] [--dvc-files] [--dry]\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliyun OSS Authentication Credentials\nDESCRIPTION: Commands to set up authentication credentials (key ID and secret) for Aliyun OSS remote storage using local configuration to maintain security.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/aliyun-oss.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote oss_key_id 'mykey'\n$ dvc remote modify --local myremote oss_key_secret 'mysecret'\n```\n\n----------------------------------------\n\nTITLE: DVC File Structure for Single File\nDESCRIPTION: Example of the .dvc file structure generated when adding a single file (data.xml) to DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/add.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nouts:\n  - md5: 6137cde4893c59f76f005a8123d8e8e6\n    path: data.xml\n```\n\n----------------------------------------\n\nTITLE: Local File System Example for DVC list-url Command\nDESCRIPTION: Demonstrates using the DVC list-url command to list contents of a local directory path, providing a consistent interface regardless of the source location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list-url.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc list-url /local/path/to/data\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage for DVC Queue Stop Command\nDESCRIPTION: Shows the usage syntax for the 'dvc queue stop' command, including optional arguments for help, verbosity, and kill options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/stop.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc queue stop [-h] [-q | -v] [--kill]\n```\n\n----------------------------------------\n\nTITLE: Development Commands Reference\nDESCRIPTION: Key commands for building and running the project in development and production modes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/docs.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n- yarn develop - run development server with hot reload.\n- yarn build - build assets in the public directory.\n- yarn start - run production static server over the public directory.\n```\n\n----------------------------------------\n\nTITLE: Installing DVC Studio Helm Chart\nDESCRIPTION: Deploys DVC Studio using the Helm chart with the configured values. This command installs Studio in the 'studio' namespace using the previously created values.yaml file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/k8s-helm.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ helm install studio iterative/studio \\\n    --namespace studio \\\n    -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: DVC Config Command Usage Syntax\nDESCRIPTION: Shows the basic command syntax and arguments for the dvc config command, including options for different configuration levels and operations.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/config.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc config [-h] [--global | --system | --project | --local]\n                  [-q | -v] [-u]\n                  [-l] [--show-origin] [name] [value]\n```\n\n----------------------------------------\n\nTITLE: Viewing DVC Metrics\nDESCRIPTION: This CLI command shows how to view tracked metrics using DVC, displaying the results in a tabular format.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/metrics-parameters-plots.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc metrics show\nPath                    avg_prec.test    avg_prec.train    roc_auc.test    roc_auc.train\neval/metrics.json  0.94496          0.97723           0.96191         0.98737\n```\n\n----------------------------------------\n\nTITLE: Loading SSH Key from Apple Keychain\nDESCRIPTION: Adds an SSH key to the SSH agent, loading it from the Apple keychain on macOS. Ensures that DVC can authenticate using SSH by decrypting and making the key available. Adjust '.ssh/ed255' to point to the specific SSH key file needed.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nssh-add --apple-load-keychain ~/.ssh/ed255\n```\n\n----------------------------------------\n\nTITLE: Installing DVC Zsh Completions\nDESCRIPTION: Command to generate and install DVC Zsh completions in the appropriate location.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc completion -s zsh | sudo tee /usr/local/share/zsh/site-functions/_dvc\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for DVC Studio\nDESCRIPTION: Creates a dedicated 'studio' namespace in Kubernetes for DVC Studio installation.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/k8s-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ kubectl create namespace studio\n```\n\n----------------------------------------\n\nTITLE: Setting Git Attributes for LF Line Endings\nDESCRIPTION: Add this line to your .gitattributes file to configure Git to use LF line endings for all text files regardless of the platform.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/run-dvc-on-windows.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* text=auto eol=lf\n```\n\n----------------------------------------\n\nTITLE: DVC Run Cache Directory Structure\nDESCRIPTION: This CLI command demonstrates the structure of the DVC run cache directory, which stores logs of stages that have been run in the project. It shows how runs are identified by hashes representing dependency contents and commands.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/internal-files.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n\"$ tree .dvc/cache/runs\n.dvc/cache/runs\n└── 86\n    └── 8632e1555283d6e23ec808c9ee1fadc30630c888d5c08695333609ef341508bf\n        └── e98a34c44fa6b564ef211e76fb3b265bc67f19e5de2e255217d3900d8f...\"\n```\n\n----------------------------------------\n\nTITLE: Installing DVC Bash Completions in macOS\nDESCRIPTION: Command to generate and install DVC bash completions in macOS using Homebrew paths.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc completion -s bash \\\n  | sudo tee \"$(brew --prefix)\"/etc/bash_completion.d/dvc\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Studio with GitHub App in YAML\nDESCRIPTION: This YAML configuration snippet is used to set up the GitHub integration for DVC Studio. It includes settings for enabling GitHub, specifying URLs for GitHub Enterprise, and providing OAuth App credentials.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/git-forges/github.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scmProviders:\n    # Optional\n    # This is useful in cases where DVC Studio is on an internal\n    # network, but the webhook endpoint is on an external network.\n    # Default: `global.host` value.\n    #webhookHost: \"\"\n\n    github:\n      enabled: true\n\n      # Set this if you're using the selfhosted version\n      url: <GitHub Enterprise URL>\n      # Set this if you're using the selfhosted version\n      apiUrl: <GitHub Enterprise API URL>\n\n      appName: <GitHub OAuth App Name>\n      appId: <GitHub OAuth App ID>\n      clientId: <GitHub OAuth App Client ID>\n      clientSecret: <GitHub OAuth App Client Secret>\n      privateKey: <GitHub OAuth App Private Key>\n```\n\n----------------------------------------\n\nTITLE: Installing DVC from package on Fedora/CentOS\nDESCRIPTION: Installs DVC from a downloaded .rpm package file on Fedora/CentOS systems using yum.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/linux.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ sudo yum install dvc-0.62.1-1.x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: Modifying Data by Doubling Content (Windows)\nDESCRIPTION: Commands to simulate data updates by creating a copy of the data file and appending it to itself on Windows.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_15\n\nLANGUAGE: cli\nCODE:\n```\n$ copy data\\data.xml %TEMP%\\data.xml\n$ type %TEMP%\\data.xml >> data\\data.xml\n```\n\n----------------------------------------\n\nTITLE: Defining Log Parameter Method in Python\nDESCRIPTION: Function signature for logging a single parameter with name and value in DVCLive.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_param.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef log_param(name: str, val: ParamLike):\n```\n\n----------------------------------------\n\nTITLE: Checking DVC Studio Component Status with kubectl\nDESCRIPTION: This command lists all DVC Studio components and their statuses in the 'studio' namespace. It's used for initial diagnosis of the 502 error.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/troubleshooting/502.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nkubectl get pods -n studio\n```\n\n----------------------------------------\n\nTITLE: Checking Workspace Changes with Git Status and Diff\nDESCRIPTION: Demonstrates how to inspect changes after applying an experiment using Git status and diff commands.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ git status\nOn branch master\nChanges not staged for commit:\n        modified:   dvc.lock\n        modified:   params.yaml\n        modified:   scores.json\n$ git diff params.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Key for WebDAV in DVC CLI\nDESCRIPTION: Shows how to set the path to a private key used for accessing the WebDAV remote. This is used in conjunction with the certificate path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote key_path /path/to/key\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Experiments in Bash\nDESCRIPTION: Shows how to use the 'dvc exp show' command to display a list of experiments in a DVC project.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/branch.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc exp show\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository\nDESCRIPTION: Command to update the Helm repository before installation.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/aws-ami.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nubuntu@ami:~$ helm repo update\n```\n\n----------------------------------------\n\nTITLE: Synopsis for DVC Studio Logout Command in Usage Format\nDESCRIPTION: Displays the usage syntax for the 'dvc studio logout' command, showing the available options including help, quiet, and verbose modes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/studio/logout.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc studio logout [-h] [-q | -v]\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with pip on Linux\nDESCRIPTION: Installs DVC using Python's pip package manager. Requires Python 3.8+ for the latest version.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/linux.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install dvc\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Version Command Usage in Bash\nDESCRIPTION: Shows the usage syntax for the 'dvc version' command, including available options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/version.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc version [-h] [-q | -v]\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using Yarn.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/docs.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Applying DVC Studio Configuration Changes with Helm\nDESCRIPTION: Command to apply configuration updates to DVC Studio using Helm upgrade, waiting for completion and specifying the values file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/index.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nhelm upgrade --wait studio iterative/studio --namespace studio -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: HTTP Download Alternative Using wget\nDESCRIPTION: Shows how to download HTTP files using wget as an alternative to dvc get-url on GNU/Linux systems.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get-url.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wget https://example.com/path/to/data.csv\n```\n\n----------------------------------------\n\nTITLE: Variable Loading from External Files\nDESCRIPTION: Shows how to load variables from external parameter files in dvc.yaml, including selective parameter inclusion using colon syntax.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  - params.json\n  - myvar: 'value'\n  - config/myapp.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  - params.json:clean,feats\n\nstages:\n  featurize:\n    cmd: ${feats.exec}\n    deps:\n      - ${clean.filename}\n    outs:\n      - ${feats.dirname}\n```\n\n----------------------------------------\n\nTITLE: Creating New Docker Registry Secret in Kubernetes\nDESCRIPTION: This command creates a new Docker registry secret for DVC Studio. It requires the Docker username and password for authentication.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/troubleshooting/502.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nkubectl create secret docker-registry iterativeai \\\n    --namespace studio \\\n    --docker-server=docker.iterative.ai \\\n    --docker-username=<username> \\\n    --docker-password=<password>\n```\n\n----------------------------------------\n\nTITLE: Single Target Metrics Output in JSON\nDESCRIPTION: Sample JSON output when retrieving metrics from a single target file, showing the structure of metrics for training and validation datasets.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/metrics_show.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avg_prec\": { \"train\": 0.97, \"val\": 0.92 },\n  \"roc_auc\": { \"train\": 0.98, \"val\": 0.94 }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Active Directory Federated Identity for DVC Studio with Terraform\nDESCRIPTION: This Terraform configuration sets up Azure Active Directory integration with DVC Studio via federated credentials. It creates an application, service principal, federated identity credential, and assigns storage-related permissions.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/openid-connect.md#2025-04-21_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.61.0\"\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"2.30.0\"\n    }\n  }\n}\n\nprovider \"azuread\" {}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nlocals {\n  provider  = \"studio.datachain.ai/api\"\n  condition = \"credentials:example-team/example-credentials\"\n}\n\ndata \"azuread_client_config\" \"current\" {}\ndata \"azurerm_subscription\" \"current\" {}\n\nresource \"azuread_application\" \"studio\" {\n  display_name = \"studio\"\n\n  api {\n    requested_access_token_version = 2\n  }\n}\n\nresource \"azuread_service_principal\" \"studio\" {\n  client_id = azuread_application.studio.client_id\n  owners    = [data.azuread_client_config.current.object_id]\n}\n\nresource \"azuread_application_federated_identity_credential\" \"studio\" {\n  application_id = azuread_application.studio.id\n  display_name   = azuread_application.studio.display_name\n  audiences      = [\"api://AzureADTokenExchange\"]\n  issuer         = \"https://${local.provider}\"\n  subject        = local.condition\n}\n\nresource \"azurerm_role_definition\" \"studio\" {\n  name  = azuread_application.studio.display_name\n  scope = data.azurerm_subscription.current.id\n\n  permissions {\n    actions = [\n      \"Microsoft.Storage/storageAccounts/listKeys/action\",\n      \"Microsoft.Storage/storageAccounts/read\",\n    ]\n  }\n}\n\nresource \"azurerm_role_assignment\" \"studio\" {\n  name               = azurerm_role_definition.studio.role_definition_id\n  scope              = data.azurerm_subscription.current.id\n  role_definition_id = azurerm_role_definition.studio.role_definition_resource_id\n  principal_id       = azuread_service_principal.studio.object_id\n}\n\noutput \"azure_subscription_id\" {\n  value = basename(data.azurerm_subscription.current.id)\n}\n\noutput \"azure_tenant_id\" {\n  value = data.azurerm_subscription.current.tenant_id\n}\n\noutput \"azure_client_id\" {\n  value = azuread_application.studio.client_id\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Second Version with Git\nDESCRIPTION: Git commands to stage changes, commit the second version of the project, and create a new tag.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/versioning-data-and-models/tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git add data.dvc model.weights.h5.dvc metrics.csv\n$ git commit -m \"Second model, trained with 2000 images\"\n$ git tag -a \"v2.0\" -m \"model v2.0, 2000 images\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for DVC Studio Project Creation\nDESCRIPTION: Shows the structure of the JSON response returned after successfully creating a project, including the project ID, URL, and name.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/rest-api/create-project.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": [\n    {\n      \"id\": \"tsanhawn9y\",\n      \"url\": \"https://studio.datachain.ai/user/amritghimire/projects/example-get-started-tsanhawn9y\",\n      \"name\": \"example-get-started\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: DVC File Changes Analysis\nDESCRIPTION: Shows the changes in the data.xml.dvc file after importing, including MD5 hashes, dependencies, and output specifications\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-url.md#2025-04-21_snippet_5\n\nLANGUAGE: git\nCODE:\n```\n+md5: c4d6740ee09950bb532d418b8ae0b52e\n+frozen: true\n+deps:\n+- etag: '\"f432e270cd634c51296ecd2bc2f5e752-5\"'\n+  path: https://data.dvc.org/get-started/data.xml\n outs:\n - md5: a304afb96060aad90176268345e10355\n   path: data.xml\n   cache: true\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with pip and S3 support on Windows\nDESCRIPTION: Command to install DVC with Amazon S3 storage support using pip. This installs the boto3 library along with DVC to enable S3 remote storage functionality.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/windows.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install \"dvc[s3]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes TLS Secret\nDESCRIPTION: Command to create a Kubernetes secret containing the TLS certificate and private key in the studio namespace.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/tls.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nkubectl create secret tls studio-ingress-tls \\\n      --namespace studio \\\n      --cert=studio.crt \\\n      --key=studio.pem\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Pager for DVC Output\nDESCRIPTION: Shows how to override the default pager using the DVC_PAGER environment variable, allowing customization of how command output is displayed in the terminal.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/show.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ DVC_PAGER=more dvc exp show  # Use more as pager once.\n...\n\n$ export DVC_PAGER=more  # Set more as pager for all commands.\n$ dvc exp show ...\n```\n\n----------------------------------------\n\nTITLE: Downloading Support Bundle Script for Helm Deployment\nDESCRIPTION: Commands to download and make executable the create-support-bundle script for Helm-based DVC Studio deployments. This script is used to generate the support bundle.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/troubleshooting/support-bundle.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -o create-support-bundle https://raw.githubusercontent.com/iterative/studio-selfhosted/main/packer/create-support-bundle.sh\n$ chmod +x create-support-bundle\n```\n\n----------------------------------------\n\nTITLE: Clearing Local Cache for Testing (Mac/Linux)\nDESCRIPTION: Commands to remove the local DVC cache and tracked data file to simulate a fresh pull on Mac/Linux.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_12\n\nLANGUAGE: cli\nCODE:\n```\n$ rm -rf .dvc/cache\n$ rm -f data/data.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring and Pushing to Remote Storage with DVC CLI\nDESCRIPTION: This snippet shows how to add a remote storage location for DVC and push the tracked data to it, enabling access from other locations and people.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/use-cases/data-registry/tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote add -d myremote s3://mybucket/dvcstore\n$ dvc push\n```\n\n----------------------------------------\n\nTITLE: Alternative XML Processing - Using read()\nDESCRIPTION: Example showing how to load complete file contents into memory using dvc.api.read() instead of streaming.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom xml.dom.minidom import parse\nimport dvc.api\n\nurl = 'https://github.com/iterative/dataset-registry'\nxmldata = dvc.api.read('get-started/data.xml', repo=url)\nxmldom = parse(xmldata)\n```\n\n----------------------------------------\n\nTITLE: Installing DVC Studio with Helm\nDESCRIPTION: Helm command to install DVC Studio using the configured values.yaml file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/aws-ami.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\nubuntu@ami:~$ helm install --wait studio iterative/studio --namespace studio -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Pipeline Context\nDESCRIPTION: Shows the workspace files before removing a pipeline stage\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remove.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ ls\ndvc.lock  dvc.yaml  foo.csv  foo.csv.dvc  model  train.py\n```\n\n----------------------------------------\n\nTITLE: Cloning DVC Repository\nDESCRIPTION: Command to clone the DVC repository after forking it to your GitHub account\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/core.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ git clone git@github.com:<your-username>/dvc.git\n```\n\n----------------------------------------\n\nTITLE: Extracting Helm Chart and Upgrading DVC Studio\nDESCRIPTION: These commands extract the Helm chart and perform the upgrade of DVC Studio using Helm. The upgrade command uses a custom values.yaml file for configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/upgrading/airgap-procedure.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ tar zxvf studio-0.7.0.tgz\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ helm upgrade studio studio --namespace studio --values values.yaml\n```\n\n----------------------------------------\n\nTITLE: DVC Lock File Generated by Foreach with Dictionaries\nDESCRIPTION: This shows the `dvc.lock` content resulting from a `foreach` loop iterating over a list of dictionaries. The `cmd` is populated with the values extracted from the dictionaries.  The stage names are appended with an index (0, 1, etc.) representing the order of the dictionaries in the list.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcyaml-files.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# dvc.lock\nschema: '2.0'\nstages:\n  train@0:\n    cmd: python train.py 3 10\n  train@1:\n    cmd: python train.py 10 15\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Dataset\nDESCRIPTION: Download and extract the UCI bike sharing dataset\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/evidently.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ wget https://archive.ics.uci.edu/static/public/275/bike+sharing+dataset.zip\n$ unzip bike+sharing+dataset.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML mode for DVC files in Doom Emacs\nDESCRIPTION: This Emacs Lisp code configures Doom Emacs to use YAML mode for .dvc and dvc.lock files. It should be added to the ~/.doom.d/config.el file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/ide-plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: emacs-lisp\nCODE:\n```\n(use-package! yaml-mode\n  :config\n  (add-to-list 'auto-mode-alist '(\"\\\\.dvc\" . yaml-mode))\n  (add-to-list 'auto-mode-alist '(\"dvc.lock\" . yaml-mode))\n  )\n```\n\n----------------------------------------\n\nTITLE: DET Curve Plot Example\nDESCRIPTION: Example of generating a Detection Error Tradeoff (DET) curve plot using sample classification scores.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_sklearn_plot.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ny_true = [1, 1, 2, 2]\ny_score = [0.1, 0.4, 0.35, 0.8]\nlive.log_sklearn_plot(\"det\", y_true, y_score)\n```\n\n----------------------------------------\n\nTITLE: Installing DVC from repository on Fedora/CentOS\nDESCRIPTION: Sets up the Iterative repository and installs DVC from it on Fedora/CentOS systems using yum package manager.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/linux.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ sudo wget \\\n       https://dvc.org/rpm/dvc.repo \\\n       -O /etc/yum.repos.d/dvc.repo\n$ sudo rpm --import https://dvc.org/rpm/iterative.asc\n$ sudo yum update\n$ sudo yum install dvc\n```\n\n----------------------------------------\n\nTITLE: Setting WebDAV Password in DVC CLI\nDESCRIPTION: Shows how to set the password for WebDAV authentication. This is used in conjunction with a username or custom auth header.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote password mypassword\n```\n\n----------------------------------------\n\nTITLE: Setting file type recognition for DVC files in Vim\nDESCRIPTION: This Vim script configures Vim to recognize Dvcfile, .dvc, and dvc.lock files as YAML. It should be added to the .vimrc file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/ide-plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n\" DVC\nautocmd! BufNewFile,BufRead Dvcfile,*.dvc,dvc.lock setfiletype yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying DVC Studio Component Status After Restart\nDESCRIPTION: This command checks the status of all DVC Studio components after restarting. All components should show 'Running' status if the issue is resolved.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/troubleshooting/502.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\nkubectl get pods -n studio\n```\n\n----------------------------------------\n\nTITLE: Using DVC Experiment Save Command in Bash\nDESCRIPTION: The synopsis for the 'dvc exp save' command, showing its usage and available options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/save.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc exp save [-h] [-q | -v] [-R] [-f]\n                   [--json] [-n <name>]\n                   [-I path] [-m <message>]\n                   [targets [targets ...]]\n```\n\n----------------------------------------\n\nTITLE: Check-Ignore with Detailed Output\nDESCRIPTION: Demonstrates using the --details (-d) option to show exclude patterns along with matched paths.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/check-ignore.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc check-ignore -d file1 file2\n.dvcignore:1:file*\tfile1\n.dvcignore:2:!file2\tfile2\n\n$ dvc check-ignore -d file*\n.dvcignore:1:file*\tfile1\n.dvcignore:2:!file2\tfile2\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage for DVC Queue Start Command\nDESCRIPTION: Shows the usage syntax for the 'dvc queue start' command, including available options such as help, verbosity, and number of jobs.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/start.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc queue start [-h] [-q | -v] [-j <number>]\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Helm Chart for DVC Studio Upgrade\nDESCRIPTION: These commands update the Helm repository, download the latest DVC Studio chart, and extract the application version from the chart.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/upgrading/airgap-procedure.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ helm repo update\n$ helm pull iterative/studio\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ ls -l studio-*.tgz\n-rw-r--r--. 1 username username 392409 Oct 11 14:30 studio-0.7.0.tgz\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ export STUDIO_VERSION=$(tar zxf studio-0.7.0.tgz -O studio/Chart.yaml | grep -Po '(?<=appVersion: )v[\\d.]+')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Cache Directory Location\nDESCRIPTION: Shows how to query the current cache directory location configured in DVC.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/cache/dir.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc cache dir\n/home/user/dvc/.dvc/cache\n```\n\n----------------------------------------\n\nTITLE: Python Line Ending Example Reference\nDESCRIPTION: Reference to Python line ending handling, mentioning the need to explicitly use either Unix-style '\\n' or Windows-style '\\r\\n' line endings instead of os.linesep.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nos.linesep\n```\n\n----------------------------------------\n\nTITLE: Using DVC Python API\nDESCRIPTION: Example of using DVC's Python API to access files from a remote repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/databricks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nwith dvc.api.open(\n    'get-started/data.xml',\n    repo='https://github.com/iterative/dataset-registry',\n) as fobj:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to launch the local development server.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/docs.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ yarn develop\n```\n\n----------------------------------------\n\nTITLE: Get Artifact Storage URL Example\nDESCRIPTION: Shows how to retrieve the storage URL of an artifact instead of downloading it using the --show-url flag.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/artifacts/get.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc artifacts get https://github.com/iterative/example-get-started.git \\\n  text-classification --rev=v1.0.0 --show-url\nhttps://remote.dvc.org/get-started/files/md5/cf/a72ff6e2575c44f78f423cada5b783\n```\n\n----------------------------------------\n\nTITLE: Downloading Vega-Lite Libraries for Offline DVC Plots\nDESCRIPTION: Commands to download required Vega-Lite JavaScript libraries locally for offline plot generation.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/show.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ wget https://cdn.jsdelivr.net/npm/vega@5.20.2 -O my_vega.js\n$ wget https://cdn.jsdelivr.net/npm/vega-lite@5.1.0 -O my_vega_lite.js\n$ wget https://cdn.jsdelivr.net/npm/vega-embed@6.18.2 -O my_vega_embed.js\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks\nDESCRIPTION: Command to install pre-commit, pre-push, and post-checkout hooks using the pre-commit tool.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/install.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ pre-commit install --hook-type pre-push --hook-type post-checkout --hook-type pre-commit\n```\n\n----------------------------------------\n\nTITLE: Adding Pre-commit Hook for Line Ending Checks\nDESCRIPTION: Add this configuration to your .pre-commit-config.yaml to automatically check and fix line endings to LF using pre-commit.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/run-dvc-on-windows.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- id: mixed-line-ending\n  args: [--fix=lf]\n```\n\n----------------------------------------\n\nTITLE: Formatting Commands Reference\nDESCRIPTION: Commands for code formatting using Prettier.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/docs.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n- yarn format-all - Run prettier --write on all files\n- yarn format-check-all - Run prettier --check on all files\n- yarn format-staged - alias for lint-staged\n- yarn format <file> - Run prettier on a specific file\n```\n\n----------------------------------------\n\nTITLE: Creating .dvcignore File Example\nDESCRIPTION: Demonstrates how to create a .dvcignore file with patterns and test files for exclusion checking.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/check-ignore.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ echo \"file*\\n\\!file2\" >> .dvcignore\n$ cat .dvcignore\nfile*\n!file2\n\n$ touch file1 file2 other\n$ ls\nfile1  file2 other\n```\n\n----------------------------------------\n\nTITLE: DVC Experiment Remove Command Usage Syntax\nDESCRIPTION: Shows the command-line syntax and arguments for the 'dvc exp remove' command, including optional flags and positional arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/remove.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc exp remove [-h] [-q | -v] [-A] [--rev <commit>] [-n <num>]\n                      [--queue | -g <git_remote>] [--keep]\n                      [<name> [<name> ...]]\n```\n\n----------------------------------------\n\nTITLE: DVC Data Tracking\nDESCRIPTION: Command to add files or directories to DVC for tracking and caching\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndvc add\n```\n\n----------------------------------------\n\nTITLE: DVC Studio SSO Team Login URL\nDESCRIPTION: Single Sign-on URL format for team members to log into DVC Studio.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/single-sign-on.md#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttp://studio.datachain.ai/api/teams/<TEAM_NAME>/sso\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CA Certificates in YAML Configuration for DVC Studio\nDESCRIPTION: This YAML snippet shows how to add custom CA certificates to the values.yaml configuration file for DVC Studio. It demonstrates the structure for including multiple certificates using the 'customCaCerts' list under the 'global' section.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/ca.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  customCaCerts:\n    # First certificate\n    - |-\n      -----BEGIN CERTIFICATE-----\n      ....\n      -----END CERTIFICATE-----\n    # Second certificate\n    - |-\n      -----BEGIN CERTIFICATE-----\n      ....\n      -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Removing Pushed DVC Experiments\nDESCRIPTION: Command to remove a pushed DVC experiment from a Git remote. This example removes the experiment named 'unwet-jinn' from the 'origin' remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/sharing-experiments.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp remove -g origin unwet-jinn\n```\n\n----------------------------------------\n\nTITLE: Restarting DVC Studio Components in Kubernetes\nDESCRIPTION: These commands restart all DVC Studio components (beat, backend, worker, and UI) in the 'studio' namespace after updating Docker credentials.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/troubleshooting/502.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\nkubectl rollout restart deploy/studio-beat -n studio\nkubectl rollout restart deploy/studio-backend -n studio\nkubectl rollout restart deploy/studio-worker -n studio\nkubectl rollout restart deploy/studio-ui -n studio\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Studio Values for Helm Installation\nDESCRIPTION: Creates a YAML configuration file (values.yaml) with essential settings for DVC Studio, including image pull secrets, hostname, and license key.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/k8s-helm.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - name: iterativeai\n\nglobal:\n  host: '<DVC Studio hostname>'\n  envVars:\n    SELF_HOSTED_LICENSE_KEY: '<License key provided by the Iterative team>'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DVC Command Completion Example\nDESCRIPTION: Example showing how tab completion works with DVC commands, listing available commands that start with 'r'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc r<tab>\nCompleting dvc commands\nremote  -- Set up and manage data remotes.\nremove  -- Remove stages or .dvc files, unprotect their outputs, ...\nrepro   -- Reproduce complete or partial pipelines by executing ...\nroot    -- Return the relative path to the root of the DVC project.\nrun     -- Generate a stage file from a command and execute the command\n```\n\n----------------------------------------\n\nTITLE: DVC Pipeline Stage Definition\nDESCRIPTION: Example of a train stage definition in dvc.yaml that will be removed\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remove.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntrain:\n  cmd: python train.py data.csv\n  deps:\n    - data.csv\n    - train.py\n  outs:\n    - model\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Successful DVC Studio Upgrade\nDESCRIPTION: This snippet shows the expected output after a successful upgrade of DVC Studio, including deployment details and application URL.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/upgrading/regular-procedure.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nRelease \"studio\" has been upgraded. Happy Helming!\nNAME: studio\nLAST DEPLOYED: Tue Oct 17 17:51:53 2023\nNAMESPACE: studio\nSTATUS: deployed\nREVISION: 5\nNOTES:\nApplication URL:\n  http://192.168.1.1/\n```\n\n----------------------------------------\n\nTITLE: Defining Live.log_image() Function in Python\nDESCRIPTION: Function signature for Live.log_image() method, which takes a name (string) and a value (image data) as parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_image.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef log_image(name: str, val):\n```\n\n----------------------------------------\n\nTITLE: Setting HDFS Remote User in DVC CLI\nDESCRIPTION: Demonstrates how to set the user for accessing an HDFS remote storage in DVC. This command is used with the --local flag to store sensitive information in a Git-ignored config file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote user myuser\n```\n\n----------------------------------------\n\nTITLE: Committing Cache Configuration - CLI\nDESCRIPTION: Commits the DVC cache configuration changes to Git version control.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/how-to/share-a-dvc-cache.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ git add .dvc/config\n$ git commit -m \"config external/shared DVC cache\"\n```\n\n----------------------------------------\n\nTITLE: Sample Parameters YAML Configuration\nDESCRIPTION: Example of a params.yaml file showing parameter structure with learning rate, training, and processing parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/params/diff.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlr: 0.0041\n\ntrain:\n  epochs: 70\n  layers: 9\n\nprocess:\n  thresh: 0.98\n  bow: 15000\n```\n\n----------------------------------------\n\nTITLE: Customizing DVC Experiments Display\nDESCRIPTION: Demonstrates how to show only changed values in the experiments table to reduce clutter\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/comparing-experiments.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show --only-changed\n```\n\n----------------------------------------\n\nTITLE: GTO Stages Command Usage Syntax\nDESCRIPTION: Command syntax showing how to use the 'gto stages' command with its available options including repository specification, allowed stages, used stages, JSON output format, and help.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/command-reference/stages.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: gto stages [-r <text>] [--allowed] [--used] [--json]\n                  [-h]\n```\n\n----------------------------------------\n\nTITLE: DVC Remove Example Output\nDESCRIPTION: Demonstrates the result of removing a tracked file with dvc remove\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remove.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remove foo.csv.dvc\n\n$ ls\nbar.csv  bar.csv.dvc  foo.csv\n$ cat .gitignore\n/bar.csv\n```\n\n----------------------------------------\n\nTITLE: Installing Bash Completion Support in Debian/Ubuntu\nDESCRIPTION: Command to reinstall bash-completion package in Debian/Ubuntu systems.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ sudo apt install --reinstall bash-completion\n```\n\n----------------------------------------\n\nTITLE: Configuring Git in SageMaker\nDESCRIPTION: Basic Git configuration commands to set up user name and email in SageMaker environment\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/integrations/sagemaker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name ...\ngit config --global user.email ...\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificate for WebDAV in DVC CLI\nDESCRIPTION: Demonstrates how to specify a client-side certificate for WebDAV server authentication. This is used when the server requires client certificates.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/webdav.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify --local myremote cert_path /path/to/cert\n```\n\n----------------------------------------\n\nTITLE: Defining make_report Method in Python\nDESCRIPTION: Basic method definition for make_report in the Live class.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/make_report.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef make_report()\n```\n\n----------------------------------------\n\nTITLE: Installing DVC tcsh Completions\nDESCRIPTION: Command to generate and install DVC completions for tcsh shell.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/completion.md#2025-04-21_snippet_9\n\nLANGUAGE: dvc\nCODE:\n```\n$ dvc completion -s tcsh | sudo tee /etc/profile.d/dvc.completion.csh\n```\n\n----------------------------------------\n\nTITLE: Sample DVC Metadata File Contents\nDESCRIPTION: Example of a DVC metadata file (.dvc) showing the hash of the tracked data file and its path.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/index.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nouts:\n  - md5: 22a1a2931c8370d3aeedd7183606fd7f\n    path: data.xml\n```\n\n----------------------------------------\n\nTITLE: Using DVC Experiment Branch Command in Bash\nDESCRIPTION: Demonstrates the usage syntax for the 'dvc exp branch' command, including its arguments and options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/branch.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc exp branch [-h] [-q | -v] experiment [branch]\n```\n\n----------------------------------------\n\nTITLE: DVC Cache Directory Structure\nDESCRIPTION: This CLI command illustrates the structure of the DVC cache directory after adding a directory with image files.  It highlights how files and directories are stored based on their content hash.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/internal-files.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n\".dvc/cache/\n└── files\n    └── md5\n        ├── 40\n        │   └── 2e97968614f583ece3b35555971f64\n        ├── 6f\n        │   └── db5336fce0dbfd669f83065f107551.dir\n        └── de\n            └── 7371b0119f4f75f9de703c7c3bac16\"\n```\n\n----------------------------------------\n\nTITLE: WebHDFS Download Example\nDESCRIPTION: Example showing how to download a file from WebHDFS using dvc get-url.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/get-url.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc get-url webhdfs://user@example.com/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Configuring DVC Studio YAML for GitLab Integration\nDESCRIPTION: YAML configuration for setting up GitLab integration with DVC Studio. Includes settings for webhook host, GitLab URL, OAuth credentials, and webhook secret.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/git-forges/gitlab.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scmProviders:\n    #webhookHost: \"\"\n    gitlab:\n      enabled: true\n      url: <GitLab URL>\n      clientId: <GitLab OAuth App Client ID>\n      secretKey: <GitLab OAuth App Secret Key>\n      webhookSecret: <GitLab Webhook Secret>\n```\n\n----------------------------------------\n\nTITLE: DVC Remote Default Command Usage\nDESCRIPTION: Command syntax showing the usage pattern and available arguments for the dvc remote default command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/default.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc remote default [-h]\n                          [--global | --system | --project | --local]\n                          [-q | -v] [-u]\n                          [name]\n\npositional arguments:\n  name           Name of the remote.\n```\n\n----------------------------------------\n\nTITLE: Removing Pipeline Stage with Outputs\nDESCRIPTION: Demonstrates removing a stage and its outputs using the --outs option\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remove.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remove train --outs\n$ ls\ndvc.lock  dvc.yaml  foo.csv  foo.csv.dvc  train.py\n```\n\n----------------------------------------\n\nTITLE: Delegating User Account Authority to Service Account in DVC Google Drive Remote\nDESCRIPTION: Command to delegate a user account's authority to a service account for Google Drive remote in DVC. This allows the service account to act on behalf of the specified user email address when accessing Google Drive.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_12\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote \\\n                      gdrive_service_account_user_email 'myemail-addr'\n```\n\n----------------------------------------\n\nTITLE: DVC Studio SSO URLs\nDESCRIPTION: Example URLs used for configuring SSO endpoints in DVC Studio, including the Single sign-on URL and SP Entity ID.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/single-sign-on.md#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://studio.datachain.ai/api/teams/<TEAM_NAME>/saml/consume\n```\n\nLANGUAGE: url\nCODE:\n```\nhttps://studio.datachain.ai/api/saml\n```\n\n----------------------------------------\n\nTITLE: Defining DVC Project Term Configuration in YAML\nDESCRIPTION: YAML configuration that defines the 'DVC Project' term, its matching patterns, and tooltip text. The configuration includes various matching terms for DVC projects and repositories, along with a tooltip explaining that a DVC project is initialized with 'dvc init' and contains the .dvc/ directory and other DVC-specific files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/basic-concepts/dvc-project.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: 'DVC Project'\nmatch:\n  [\n    'DVC project',\n    'DVC projects',\n    project,\n    projects,\n    'DVC repository',\n    'DVC repositories',\n    repository,\n    repositories\n  ]\ntooltip: >\n  Initialized by running `dvc init` in the **workspace** (typically a Git\n  repository). It will contain the `.dvc/` directory, as well as `dvc.yaml` and\n  `.dvc` files created with commands such as `dvc add` or `dvc stage add`.  \n  [More info](/doc/user-guide/basic-concepts/dvc-project)\n---\n```\n\n----------------------------------------\n\nTITLE: DVC Directory Specification\nDESCRIPTION: Command to run DVC in a specific directory without changing the current terminal location\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndvc --cd <path> ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage for DVC Studio Token Command\nDESCRIPTION: This code snippet shows the usage syntax for the 'dvc studio token' command. It outlines the basic structure of the command and its optional arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/studio/token.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc studio token [-h] [-q | -v]\n```\n\n----------------------------------------\n\nTITLE: Displaying Show Hidden Commit Option in Markdown\nDESCRIPTION: Demonstrates how to show an option to unhide a hidden commit using an image in Markdown syntax.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/experiments/explore-ml-experiments.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Show hidden commit](https://static.iterative.ai/img/studio/show_hidden_commit.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring file associations for DVC files in Visual Studio Code\nDESCRIPTION: This JSON snippet configures VS Code to recognize .dvc and dvc.lock files as YAML format. It should be added to the settings.json file in VS Code.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/install/ide-plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"files.associations\": {\n    \"*.dvc\": \"yaml\",\n    \"dvc.lock\": \"yaml\"\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to EC2 Instance\nDESCRIPTION: Command to establish SSH connection to the EC2 instance using the key pair.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/aws-ami.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ ssh -i <EC2 key pair> ubuntu@$EC2_INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Adding Iterative Helm Repository\nDESCRIPTION: Adds the Iterative Helm repository to the local Helm installation for accessing DVC Studio charts.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/k8s-helm.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ helm repo add iterative https://helm.iterative.ai\n```\n\n----------------------------------------\n\nTITLE: Remote Storage Access Example\nDESCRIPTION: Example showing how to specify a particular remote storage as the data source.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/open.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nwith dvc.api.open('activity.log', remote='my-s3-bucket') as f:\n    for line in f:\n        match = re.search(r'user=(\\w+)', line)\n        # ... Process users activity log\n```\n\n----------------------------------------\n\nTITLE: Viewing Logs for Successful DVC Experiment Task\nDESCRIPTION: Demonstrates viewing the logs for a successfully completed experiment task using the 'dvc queue logs' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/logs.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc queue logs 0bbb118\n'data/data.xml.dvc' didn't change, skipping\nStage 'prepare' is cached - skipping run, checking out outputs\nUpdating lock file 'dvc.lock'\n\nStage 'featurize' is cached - skipping run, checking out outputs\nUpdating lock file 'dvc.lock'\n\nStage 'train' is cached - skipping run, checking out outputs\nUpdating lock file 'dvc.lock'\n\nStage 'evaluate' is cached - skipping run, checking out outputs\nUpdating lock file 'dvc.lock'\n\nTo track the changes with git, run:\n\n    git add dvc.yaml scores.json roc.json params.yaml data/prepared data/data.xml prc.json src/featurization.py data/features src/evaluate.py model.pkl dvc.lock src/train.py src/prepare.py\n\nTo enable auto staging, run:\n\n        dvc config core.autostage true\n```\n\n----------------------------------------\n\nTITLE: Ignoring DVC Tracked Files\nDESCRIPTION: Shows how to ignore already tracked files and directories in DVC and the resulting behavior.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcignore-files.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir dir1 dir2\n$ echo data1 >> dir1/data1\n$ echo data2 >> dir2/data2\n$ dvc add dir1/data1 dir2/data2\n$ tree .\n.\n├── dir1\n│   ├── data1\n│   └── data1.dvc\n└── dir2\n    ├── data2\n    └── data2.dvc\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Profile for Default Remote\nDESCRIPTION: Demonstrates how to specify AWS profile configuration when listing a repository. This example sets the 'profile' option to 'myprofile' for the default remote.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc list https://github.com/iterative/example-get-started-s3 data/prepared --remote-config profile=myprofile\n```\n\n----------------------------------------\n\nTITLE: Basic Live.end() Method Definition\nDESCRIPTION: Simple method definition showing the end() function signature used to signal experiment completion.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/end.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef end():\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint and Method for DVC Studio Project Creation\nDESCRIPTION: Specifies the API endpoint, HTTP method, and content type for creating a new project in DVC Studio.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/rest-api/create-project.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nEndpoint: api/create-project\nHTTP Method: POST\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Command Usage Syntax for DVC List\nDESCRIPTION: Shows the command-line syntax for the 'dvc list' command, including all available options and arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc list [-h] [-q | -v] [-R|-T] [-L depth] [--dvc-only]\n                [--json] [--rev [<commit>]]\n                [--config <path>] [--remote <name>]\n                [--remote-config [<name>=<value> ...]]\n                [--size] [--show-hash]\n                url [path]\n```\n\n----------------------------------------\n\nTITLE: Defining params_show Function in Python\nDESCRIPTION: Function signature for dvc.api.params_show(), which retrieves parameters from a DVC repository. It accepts optional arguments for targeting specific parameter files, stages, repository locations, and Git revisions.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/params_show.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef params_show(\n    *targets: str,  # Optional\n    stages: Optional[Union[str, Iterable[str]]] = None,\n    repo: Optional[str] = None,\n    rev: Optional[str] = None,\n    deps: bool = False,\n    config: Optional[dict] = None,\n) -> Dict:\n```\n\n----------------------------------------\n\nTITLE: Basic DVC Data Status Output Example\nDESCRIPTION: Demonstrates the typical output of the `dvc data status` command showing files missing from cache, committed changes, and uncommitted changes.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/data/status.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc data status\nNot in cache:\n  (use \"dvc fetch <file>...\" to download files)\n        data/data.xml\n\nDVC committed changes:\n  (git commit the corresponding dvc files to update the repo)\n        modified: data/features/\n\nDVC uncommitted changes:\n  (use \"dvc commit <file>...\" to track changes)\n  (use \"dvc checkout <file>...\" to discard changes)\n        deleted: model.pkl\n(there are other changes not tracked by dvc, use \"git status\" to see)\n```\n\n----------------------------------------\n\nTITLE: Remote Repository Setup\nDESCRIPTION: Instructions for updating the local repository's remote origin to point to a forked version.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/gto/get-started.md#2025-04-21_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n$ git remote update origin https://github.com/myuser/example-gto\n```\n\n----------------------------------------\n\nTITLE: Installing DVClive with Tensorflow Support\nDESCRIPTION: Installation of DVClive with Tensorflow integration, which includes the tensorflow library as a dependency.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/install.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install \"dvclive[tf]\"\n```\n\n----------------------------------------\n\nTITLE: Initializing DVCFileSystem Class in Python\nDESCRIPTION: Constructor definition for the DVCFileSystem class which inherits from AbstractFileSystem. It accepts URL to a DVC repository, Git revision, configuration options, and additional keyword arguments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/dvcfilesystem.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DVCFileSystem(AbstractFileSystem):\n    def __init__(\n        self,\n        url: Optional[str] = None,\n        rev: Optional[str] = None,\n        config: Optional[Dict[str, Any]] = None,\n        **kwargs,\n    ):\n```\n\n----------------------------------------\n\nTITLE: DVC Destroy Command Usage Syntax\nDESCRIPTION: Shows the standard usage syntax for the dvc destroy command, including available flags for help, quiet/verbose output, and force execution.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/destroy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc destroy [-h] [-q | -v] [-f]\n```\n\n----------------------------------------\n\nTITLE: Checking Status with Remote Storage\nDESCRIPTION: This command compares the local cache with the remote storage 'mystorage', showing new files that haven't been pushed to the remote yet.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/status.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc status --remote mystorage\n...\n\tnew:      data/model.p\n\tnew:      data/eval.txt\n\tnew:      data/matrix-train.p\n\tnew:      data/matrix-test.p\n```\n\n----------------------------------------\n\nTITLE: DVC Check-Ignore Command Usage Syntax\nDESCRIPTION: Displays the usage syntax for the dvc check-ignore command, showing available arguments and options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/check-ignore.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc check-ignore [-h] [-q | -v] [-d] [-a] [-n] [--stdin]\n                        targets [targets ...]\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret\nDESCRIPTION: Kubernetes command to create a docker registry secret for accessing Iterative AI docker images. Requires username and password provided by support team.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/installation/aws-ami.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nubuntu@ami:~$ kubectl create secret docker-registry iterativeai \\\n  --namespace studio \\\n  --docker-server=docker.iterative.ai \\\n  --docker-username=<username> \\\n  --docker-password=<password>\n```\n\n----------------------------------------\n\nTITLE: Running DVC Repro After Parameter Change\nDESCRIPTION: This snippet demonstrates running dvc repro after changing a parameter in params.yaml. It shows how DVC detects changes and only runs the necessary stages.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/data-pipelines/data-pipelines.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc repro\nStage 'prepare' didn't change, skipping\nStage 'featurize' didn't change, skipping\nRunning stage 'train' with command: ...\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for DVC Experiment Rename Command\nDESCRIPTION: The command syntax and available arguments for the `dvc exp rename` command, showing required and optional parameters.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/rename.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc exp rename [-h] [-q | -v]\n                      [-g <git_remote>]\n                      [--force]\n                      [experiment] [name]\n\npositional arguments:\n   experiment    Experiment to rename\n   name          New name for the experiment\n```\n\n----------------------------------------\n\nTITLE: Running DVC Metrics Diff in Bash\nDESCRIPTION: This bash snippet shows how to use the 'dvc metrics diff' command to compare metrics between the current workspace and the latest commit.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/metrics/diff.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc metrics diff\nPath                  Metric    HEAD     workspace    Change\ndvclive/metrics.json  AUC       0.78912  0.18114      -0.60798\ndvclive/metrics.json  TP        215      768          553\n```\n\n----------------------------------------\n\nTITLE: Creating ZIP Archive on Windows with Python\nDESCRIPTION: Shows how to create a ZIP archive of DVC-tracked files on Windows using Python's zipfile module. This is an alternative to the standard zip command for Windows environments.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/list.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc list . -R --dvc-only | xargs python -m zipfile -c data.zip\n```\n\n----------------------------------------\n\nTITLE: Updating DVC-tracked Files After Git Checkout\nDESCRIPTION: Demonstrates how to run 'dvc checkout' after switching Git branches to update the DVC-tracked data files to match the current version.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/checkout.md#2025-04-21_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc checkout\nM       model.pkl\nM       data\\features\\\n\n$ md5 model.pkl\nMD5 (model.pkl) = 98af33933679a75c2a51b953d3ab50aa\n```\n\n----------------------------------------\n\nTITLE: DVC import-db Command Usage\nDESCRIPTION: Shows the basic syntax and command-line arguments for the DVC import-db command, including options for table or SQL query selection, connection specification, and output format.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/import-db.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: dvc import-db [-h] [-q | -v]\n            [--sql sql | --table table] [--conn conn]\n            [--output-format [{csv,json}]] [-o [<path>]] [-f]\n```\n\n----------------------------------------\n\nTITLE: Downloading and Saving Docker Images for DVC Studio\nDESCRIPTION: These commands authenticate with the Docker registry, pull the required DVC Studio images, and save them as tar files for transfer to the air-gapped environment.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/upgrading/airgap-procedure.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n$ docker login docker.iterative.ai\n```\n\nLANGUAGE: cli\nCODE:\n```\n$ docker pull docker.iterative.ai/studio-frontend:$STUDIO_VERSION\n$ docker save docker.iterative.ai/studio-frontend:$STUDIO_VERSION > studio-frontend-$STUDIO_VERSION.tar\n\n$ docker pull docker.iterative.ai/studio-backend:$STUDIO_VERSION\n$ docker save docker.iterative.ai/studio-backend:$STUDIO_VERSION > studio-backend-$STUDIO_VERSION.tar\n\n$ docker pull docker.iterative.ai/studio-datachain-worker:$STUDIO_VERSION\n$ docker save docker.iterative.ai/studio-datachain-worker:$STUDIO_VERSION > studio-datachain-worker-$STUDIO_VERSION.tar\n```\n\n----------------------------------------\n\nTITLE: Listing DVC Stages from Default dvc.yaml\nDESCRIPTION: Demonstrates the default behavior of 'dvc stage list' command, which lists stages from the './dvc.yaml' file in the current directory.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/stage/list.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc stage list\nprepare    Outputs data/prepared\nfeaturize  Outputs data/features\ntrain      Outputs model.pkl\nevaluate   Reports scores.json, prc.json, roc.json\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DVC API Artifacts Show\nDESCRIPTION: Simple example demonstrating how to use dvc.api.artifacts_show() to retrieve information about a text-classification artifact from a GitHub repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/api-reference/artifacts_show.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dvc.api\n\nartifact = dvc.api.artifacts_show(\n    'text-classification',\n    repo='https://github.com/iterative/example-get-started.git',\n)\n```\n\n----------------------------------------\n\nTITLE: DVC Plots Diff Command Usage Syntax\nDESCRIPTION: Shows the command line syntax and available arguments for the DVC plots diff command\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/plots/diff.md#2025-04-21_snippet_0\n\nLANGUAGE: usage\nCODE:\n```\nusage: dvc plots diff [-h] [-q | -v]\n                      [--targets [<paths> [<paths> ...]]]\n                      [-t <name_or_path>] [-x <field>] [-y <field>]\n                      [--no-header] [--title <text>]\n                      [--x-label <text>] [--y-label <text>] [-o <path>]\n                      [--show-vega] [--open] [--html-template <path>]\n                      [revisions [revisions ...]]\n```\n\n----------------------------------------\n\nTITLE: Enabling Password Prompt for HTTP Remote in DVC CLI\nDESCRIPTION: Shows how to configure DVC to prompt for a password each time when accessing an HTTP remote, using the command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/http.md#2025-04-21_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote ask_password true\n```\n\n----------------------------------------\n\nTITLE: Experiment Tracking with Keras\nDESCRIPTION: Integration of DVCLive callback with Keras model training for experiment tracking and model artifact logging\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-tracking.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dvclive import Live\nfrom dvclive.keras import DVCLiveCallback\n\n...\nwith Live() as live:\n    model.fit(\n        train_dataset,\n        validation_data=validation_dataset,\n        callbacks=[\n            DVCLiveCallback(live=live)\n        ]\n    )\n    model.save(\"mymodel\")\n    live.log_artifact(\"mymodel\", type=\"model\")\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Allowlist for GitLab Server Firewall\nDESCRIPTION: List of IP addresses that need to be allowed through the firewall for DVC Studio to access the self-hosted GitLab server.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/git-connections/custom-gitlab-server.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3.21.85.173/32\n3.142.203.124/32\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 External Dependency in DVC\nDESCRIPTION: Creates a DVC stage that downloads a file from an Amazon S3 bucket and tracks it as a dependency.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/pipelines/external-dependencies-and-outputs.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc stage add -n download_file \\\n          -d s3://mybucket/data.txt \\\n          -o data.txt \\\n          aws s3 cp s3://mybucket/data.txt data.txt\n```\n\n----------------------------------------\n\nTITLE: Adding a Default Local Remote in DVC\nDESCRIPTION: Demonstrates how to add a default local remote storage location using the 'dvc remote add' command with the '-d' option.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote add -d myremote /path/to/remote\n```\n\n----------------------------------------\n\nTITLE: Setting Up OSS Emulator for Testing\nDESCRIPTION: Commands to set up and run an OSS emulator using Docker for testing purposes, including environment variable configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/aliyun-oss.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ git clone https://github.com/nanaya-tachibana/oss-emulator.git\n$ docker image build -t oss:1.0 oss-emulator\n$ docker run --detach -p 8880:8880 --name oss-emulator oss:1.0\n$ export OSS_BUCKET='mybucket'\n$ export OSS_ENDPOINT='endpoint'\n$ export OSS_ACCESS_KEY_ID='mykey'\n$ export OSS_ACCESS_KEY_SECRET='mysecret'\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Client Secret for GDrive Remote\nDESCRIPTION: Configures the OAuth 2.0 client secret for authentication with a custom Google Client project\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/google-drive.md#2025-04-21_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote gdrive_client_secret 'client-secret'\n```\n\n----------------------------------------\n\nTITLE: Visualizing Default Plot with DVC\nDESCRIPTION: CLI command to show a plot using the default configuration in dvc.yaml. This generates an HTML file with the plot.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/visualizing-plots.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc plots show\nfile:///Users/usr/src/dvc_plots/index.html\n```\n\n----------------------------------------\n\nTITLE: Defining Live.make_summary() Method in Python\nDESCRIPTION: Definition of the make_summary() method in the Live class. This method serializes the summary of logged metrics to a file specified by Live.metrics_file.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/make_summary.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef make_summary()\n```\n\n----------------------------------------\n\nTITLE: Viewing Metric History File Contents in CLI\nDESCRIPTION: Example of viewing the contents of a metric history file using the cat command in the command line interface.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/dvclive/live/log_metric.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ cat dvclive/plots/metrics/train/loss.tsv\ntimestamp      step  loss\n1623671484747  0     0.4\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Directory Structure in CLI\nDESCRIPTION: Example showing how to create a basic directory structure with test files to demonstrate .dvcignore functionality.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/project-structure/dvcignore-files.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ mkdir data\n$ echo 1 > data/data1\n$ echo 2 > data/data2\n$ tree\n.\n└── data\n    ├── data1\n    └── data2\n```\n\n----------------------------------------\n\nTITLE: Connecting to EC2 Instance via SSH\nDESCRIPTION: Command to establish an SSH connection to the EC2 instance where DVC Studio is deployed.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/self-hosting/configuration/tls.md#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nssh ubuntu@my-ec2-instance\n```\n\n----------------------------------------\n\nTITLE: Simple Plot Definition in DVC YAML\nDESCRIPTION: A basic example of defining a plot in dvc.yaml using a CSV file. DVC will use default plotting behavior for this configuration.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/experiment-management/visualizing-plots.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nplots:\n  - logs.csv\n```\n\n----------------------------------------\n\nTITLE: Installing DVCLive Package\nDESCRIPTION: Command to install the DVCLive Python package via pip\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/start/experiments/experiment-tracking.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n$ pip install dvclive\n```\n\n----------------------------------------\n\nTITLE: Modifying WebHDFS Remote URL in DVC CLI\nDESCRIPTION: Demonstrates how to modify the URL of an existing WebHDFS remote storage in DVC. This command updates the URL for the remote named 'myremote'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/user-guide/data-management/remote-storage/hdfs.md#2025-04-21_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc remote modify myremote url webhdfs://user@example.com/path\n```\n\n----------------------------------------\n\nTITLE: Displaying DVC Queue Status Command Usage\nDESCRIPTION: Shows the usage syntax for the 'dvc queue status' command, including available options.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/queue/status.md#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nusage: dvc queue status [-h] [-q | -v]\n```\n\n----------------------------------------\n\nTITLE: Installing DVC with S3 Support (Bash)\nDESCRIPTION: Command to install DVC with Amazon S3 support using pip.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/modify.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"dvc[s3]\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for External Runs\nDESCRIPTION: Commands to set environment variables for DVC Studio token and Git remote when running experiments outside the Git repository.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/studio/user-guide/experiments/live-metrics-and-plots.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ export DVC_STUDIO_TOKEN=\"<token>\"\n$ export DVC_EXP_GIT_REMOTE=\"https://github.com/<org>/<repo>\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Verification for Remote (Bash)\nDESCRIPTION: Command to enable the 'verify' option for a remote named 'myremote'.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/remote/modify.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc remote modify myremote verify true\n```\n\n----------------------------------------\n\nTITLE: Enabling Symlinks in DVC Configuration\nDESCRIPTION: Demonstrates how to enable symlinks in DVC configuration using the 'dvc config' command. This sets the cache type to symlink.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/unprotect.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dvc config cache.type symlink\n```\n\n----------------------------------------\n\nTITLE: Linting Commands Reference\nDESCRIPTION: Commands for linting JavaScript, TypeScript, and CSS files.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/contributing/docs.md#2025-04-21_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n- yarn lint - run eslint on all compatible source code files\n- yarn lint-fix - use eslint --fix to automatically fix issues\n- yarn lint-ts - uses tsc to attempt to compile the project\n- yarn lint-css - lint .css files with stylelint\n```\n\n----------------------------------------\n\nTITLE: Showing Experiments with DVC exp show\nDESCRIPTION: Displays how to list experiments with their metrics and parameters using the 'dvc exp show' command.\nSOURCE: https://github.com/iterative/dvc.org/blob/main/content/docs/command-reference/exp/apply.md#2025-04-21_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n$ dvc exp show\n```"
  }
]