[
  {
    "owner": "microsoftdocs",
    "repo": "officedocs-skypeforbusiness",
    "content": "TITLE: Creating and Assigning a Resource Account\nDESCRIPTION: These PowerShell commands create a new online application instance for a dial-by-name auto attendant, update the user's usage location, and assign a phone system virtual user license.  A resource account is necessary for linking the dial-by-name auto attendant to the main auto attendant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineApplicationInstance -UserPrincipalName ContosoDialByNameAA-RA@contoso.com -DisplayName \"Contoso Dial By Name AA\" -ApplicationID \"ce933385-9390-45d1-9512-c8d228074e07\"\n\nUpdate-MgUser -UserId \"ContosoDialByNameAA-RA@contoso.com\" -UsageLocation US\n\nSet-MgUserLicense -UserId \"ContosoDialByNameAA-RA@contoso.com\" -AddLicenses @(contoso:PHONESYSTEM_VIRTUALUSER) -RemoveLicenses @()\n\n$dialByNameApplicationInstanceID = (Get-CsOnlineUser \"ContosoDialByNameAA-RA@contoso.com\").Identity\n```\n\n----------------------------------------\n\nTITLE: Installing MicrosoftTeams Module\nDESCRIPTION: This PowerShell command installs the MicrosoftTeams module, ensuring the latest version is used by force installing and allowing clobbering. It is a prerequisite for managing Microsoft Teams through PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name MicrosoftTeams -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Creating a Call Queue - PowerShell\nDESCRIPTION: This cmdlet creates a new Call Queue in Microsoft Teams. Call queues route incoming calls to a group of agents. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Creating Another Voice Route with PowerShell\nDESCRIPTION: This snippet creates another voice route using the `New-CsOnlineVoiceRoute` cmdlet. The `-Identity` parameter sets the route name. The `-NumberPattern` specifies the dialed number pattern using a regular expression. `-OnlinePstnGatewayList` defines the SBCs, `-Priority` sets the route priority, and `-OnlinePstnUsages` links it to a PSTN usage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoute -Identity \"Redmond 2\" -NumberPattern \"^\\+1(425|206)(\\d{7})$\" -OnlinePstnGatewayList sbc3.contoso.com, sbc4.contoso.com -Priority 2 -OnlinePstnUsages \"US and Canada\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with Certificate Object (PowerShell)\nDESCRIPTION: This PowerShell snippet shows how to connect to Microsoft Teams using a certificate object.  This allows the certificate to be stored and fetched remotely. It requires the `Connect-MicrosoftTeams` cmdlet with the `-Certificate`, `-ApplicationId`, and `-TenantId` parameters.  This method is available from Teams PowerShell Module version 4.9.2-preview or later.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-application-authentication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-MicrosoftTeams -Certificate <%X509Certificate2 object%> -ApplicationId \"00000000-0000-0000-0000-000000000000\" -TenantId \"YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY\"\n```\n\n----------------------------------------\n\nTITLE: Upgrade Online User to TeamsOnly - PowerShell\nDESCRIPTION: This command upgrades a specified online user to TeamsOnly mode. Skype for Business meetings scheduled by this user will be migrated to Teams by default.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-implement.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName UpgradeToTeams -Identity $username\n```\n\n----------------------------------------\n\nTITLE: Install Microsoft Teams PowerShell Module\nDESCRIPTION: This PowerShell command installs the Microsoft Teams PowerShell module, enabling administrators to manage Teams settings and configurations through scripting. This module is a prerequisite for many Teams management tasks.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Assign Direct Routing Number to User with PowerShell\nDESCRIPTION: This PowerShell snippet assigns a Direct Routing phone number to a user in Microsoft Teams. It uses the `Set-CsPhoneNumberAssignment` cmdlet, which needs the user's identity (UPN), the phone number, and the PhoneNumberType set to 'DirectRouting'. Direct Routing must be properly configured prior to assigning the number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-change-or-remove-a-phone-number-for-a-user.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity <user> -PhoneNumber <phone number> -PhoneNumberType DirectRouting\n```\n\n----------------------------------------\n\nTITLE: Moving Skype for Business User to Teams Using Move-CsUser (PowerShell)\nDESCRIPTION: This PowerShell command moves a user from Skype for Business on-premises to Teams. The `-MoveToTeams` switch is used to directly move the user to Teams. If the switch is not available in the Skype for Business Server version, run `Move-CsUser` first and then assign `TeamsOnly` mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-teams-on-prem-pstn-considerations.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser -MoveToTeams\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Messaging Policy\nDESCRIPTION: This PowerShell cmdlet allows administrators to configure messaging policies in Microsoft Teams.  It is used to control what chat and channel messaging features are available to users. The cmdlet requires the Teams module for PowerShell to be installed.  Refer to Microsoft Teams PowerShell documentation for specific parameters and usage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMessagingPolicy\n```\n\n----------------------------------------\n\nTITLE: Assign Emergency Call Routing Policy to Site\nDESCRIPTION: This PowerShell command assigns a specific emergency call routing policy to a network site. It uses the `Set-CsTenantNetworkSite` cmdlet, identifying the site by its identity and applying the specified emergency call routing policy.  This allows for site-specific emergency call routing configurations for Direct Routing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-dynamic-emergency-calling.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantNetworkSite -identity \"site1\" -EmergencyCallRoutingPolicy \"Contoso New York Emergency Call Routing\"\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Upgrade Policy using PowerShell\nDESCRIPTION: This snippet demonstrates how to use the Grant-CsTeamsUpgradePolicy cmdlet in PowerShell to manage Teams upgrade policies for users. It allows for enabling notifications and setting coexistence modes, facilitating a staged upgrade from Skype for Business to Teams. The cmdlet is used to configure the upgrade experience for groups of users at once.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-execute-SkypeforBusinessOnline.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nFor more information, see [Grant-CsTeamsUpgradePolicy](/powershell/module/teams/grant-csteamsupgradepolicy).\n```\n\nLANGUAGE: powershell\nCODE:\n```\nFor more information, see [Grant-CsTeamsUpgradePolicy](/powershell/module/teams/grant-csteamsupgradepolicy).\n```\n\n----------------------------------------\n\nTITLE: Create Anonymous Caller ID Policy - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new caller ID policy named 'Anonymous'. It sets the caller ID to anonymous, meaning the outgoing calling line ID and calling party name are blocked. The 'EnableUserOverride' parameter is set to $false, preventing users from overriding the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/caller-id-policies.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallingLineIdentity -Identity Anonymous -Description \"anonymous policy\" -CallingIDSubstitute Anonymous -EnableUserOverride $false\n```\n\n----------------------------------------\n\nTITLE: Creating a Schedule - PowerShell\nDESCRIPTION: This cmdlet creates a new schedule for use in Auto Attendants in Microsoft Teams.  Schedules define when certain call flows or menu options are active. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineSchedule\n```\n\n----------------------------------------\n\nTITLE: Remove emergency location place using PowerShell\nDESCRIPTION: This PowerShell cmdlet removes a place from an emergency location in Microsoft Teams. It requires the Microsoft Teams PowerShell module to be installed and a connection to the Teams service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/add-change-remove-emergency-place-organization.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee [Remove-CsOnlineLisLocation](/powershell/module/teams/remove-csonlinelislocation).\n```\n\n----------------------------------------\n\nTITLE: Creating Auto Attendant - PowerShell\nDESCRIPTION: This PowerShell script creates the main auto attendant, defining its name, default call flow, other call flows, call handling associations, language, time zone, and operator.  It uses the `New-CsAutoAttendant` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\n$autoAttendant = New-CsAutoAttendant -Name \"Contoso Main\" -DefaultCallFlow $openHoursCallFlow -CallFlows @($afterHoursCallFlow, $christmasCallFlow, $newyearCallFlow) -CallHandlingAssociations @($afterHoursCallHandlingAssociation, $christmasCallHandlingAssociation, $newyearCallFlowHandlingAssociation) -LanguageId \"en-US\" -TimeZoneId \"Eastern Standard Time\" -Operator $operatorEntity\n```\n\n----------------------------------------\n\nTITLE: Establishing Sessions: New-CsOnlineSession to Connect-MicrosoftTeams (PowerShell)\nDESCRIPTION: Demonstrates how to update PowerShell scripts that use `New-CsOnlineSession` to `Connect-MicrosoftTeams` when using Teams PowerShell Module 2.0 or later. This includes obtaining credentials and establishing a session for managing Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-move-from-sfbo.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# When using the Skype for Business online connector\n         \n         # Establishing a session\n         Import-Module SkypeOnlineConnector [LyncOnlineConnector]\n         $credential = Get-Credential\n         $SkypeSession = New-CsOnlineSession -Credential $credential\n         Import-Session $SkypeSession\n    \n         # Example getting tenant details\n         Get-csTenant\n         \n         # Disconnecting and closing the Session \n         Get-PsSession $SkypeSession | Remove-PsSession\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n# When using Teams PowerShell Module 2.0 or later\n       \n         # Establishing a session\n         Import-Module MicrosoftTeams\n         $credential = Get-Credential\n         Connect-MicrosoftTeams -Credential $credential\n       \n         # Example getting tenant details\n         Get-csTenant\n         \n         # Disconnecting and closing the Session  \n         Disconnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Edit a call routing policy with PowerShell\nDESCRIPTION: This snippet refers to the PowerShell command Set-CsOnlineVoiceRoutingPolicy, used to modify an existing call routing policy. The policy dictates how calls are routed via Direct Routing in Microsoft Teams. Refer to the linked documentation for specific syntax and parameters to update the call routing policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voice-routing-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee [Set-CsOnlineVoiceRoutingPolicy](/powershell/module/teams/set-csonlinevoiceroutingpolicy).\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Bypass for SBC using PowerShell\nDESCRIPTION: This PowerShell command enables or disables media bypass for a specific Session Border Controller (SBC).  The `-Identity` parameter specifies the SBC to configure, and the `-MediaBypass` parameter, when set to `$true`, enables media bypass. When set to `$false`, it disables it.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-plan-media-bypass.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CSOnlinePSTNGateway -Identity <SBCName> -MediaBypass $true\n```\n\n----------------------------------------\n\nTITLE: Get User's Online Configuration (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the `RegistrarPool`, `OnPremLineUri`, and `LineUri` properties for a specific user from the Microsoft Teams Online environment. This is used to verify if the user is homed online and if the `LineUri` needs to be migrated from on-premises.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-enable-users.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity \"<User name>\" | fl RegistrarPool,OnPremLineUri,LineUri\n```\n\n----------------------------------------\n\nTITLE: Removing Teams Voice Applications Policy - PowerShell\nDESCRIPTION: This cmdlet removes a Teams voice application policy. This removes the custom settings associated with the policy. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_48\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Assigning Phone Number Online with Direct Routing (PowerShell)\nDESCRIPTION: This PowerShell command assigns a phone number to a user in Microsoft Teams when the phone number is managed online. It utilizes the `Set-CsPhoneNumberAssignment` cmdlet with the `-PhoneNumber` and `-PhoneNumberType` parameters. The `PhoneNumberType` is set to `DirectRouting`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-enable-users.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity \"<User name>\" -PhoneNumber <phone number> -PhoneNumberType DirectRouting\n```\n\n----------------------------------------\n\nTITLE: Creating a PSTN Usage with PowerShell\nDESCRIPTION: This snippet demonstrates how to create a PSTN usage in Teams using the `Set-CsOnlinePstnUsage` cmdlet.  The `-Identity` parameter specifies the scope (Global in this case), and the `-Usage` parameter adds the 'US and Canada' usage. It's a prerequisite for creating voice routes and policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlinePstnUsage -Identity Global -Usage @{Add=\"US and Canada\"}\n```\n\n----------------------------------------\n\nTITLE: Create and Assign Resource Account (Support) - PowerShell\nDESCRIPTION: This PowerShell script creates a new online application instance (resource account) for the Support call queue, updates its usage location, assigns a license, and associates it with the created call queue.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineApplicationInstance -UserPrincipalName Support-RA@contoso.com -DisplayName \"Support\" -ApplicationID \"11cd3e2e-fccb-42ad-ad00-878b93575e07\"\n\nUpdate-MgUser -UserId \"Support-RA@contoso.com\" -UsageLocation US\n\nSet-MgUserLicense -UserId \"Support-RA@contoso.com\" -AddLicenses @(contoso:PHONESYSTEM_VIRTUALUSER) -RemoveLicenses @()\n\n$applicationInstanceID = (Get-CsOnlineUser -Identity \"Support-RA@contoso.com\").Identity\n$callQueueID = (Get-CsCallQueue -NameFilter \"Support\").Identity\n\nNew-CsOnlineApplicationInstanceAssociation -Identities @($applicationInstanceID) -ConfigurationID $callQueueID -ConfigurationType CallQueue\n```\n\n----------------------------------------\n\nTITLE: Assign emergency call routing policy to network site using PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign a custom emergency call routing policy to a network site. It uses the `Set-CsTenantNetworkSite` cmdlet to associate a specific policy with a designated site. The policy determines how emergency calls are routed from that network site. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-emergency-call-routing-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantNetworkSite -identity \"site1\" -EmergencyCallRoutingPolicy \"Emergency Call Routing Policy 1\"\n```\n\n----------------------------------------\n\nTITLE: Create and Assign Resource Account - PowerShell\nDESCRIPTION: This PowerShell script creates a new online application instance (resource account) for the Sales call queue, updates its usage location, assigns a license, and associates it with the created call queue.  It depends on the Get-CsCallQueue command being run beforehand.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineApplicationInstance -UserPrincipalName Sales-RA@contoso.com -DisplayName \"Sales\" -ApplicationID \"11cd3e2e-fccb-42ad-ad00-878b93575e07\"\n\nUpdate-MgUser -UserId \"Sales-RA@contoso.com\" -UsageLocation US\n\nSet-MgUserLicense -UserId \"Sales-RA@contoso.com\" -AddLicenses @(contoso:PHONESYSTEM_VIRTUALUSER) -RemoveLicenses @()\n\n$applicationInstanceID = (Get-CsOnlineUser -Identity \"Sales-RA@contoso.com\").Identity\n$callQueueID = (Get-CsCallQueue -NameFilter \"Sales\").Identity\n\nNew-CsOnlineApplicationInstanceAssociation -Identities @($applicationInstanceID) -ConfigurationID $callQueueID -ConfigurationType CallQueue\n```\n\n----------------------------------------\n\nTITLE: Get/Set-CsUserCallingSettings Cmdlets\nDESCRIPTION: This snippet details the release of the `Get-CsUserCallingSettings` and `Set-CsUserCallingSettings` cmdlets. These cmdlets provide the ability to retrieve and configure calling settings for individual users in Microsoft Teams.  This includes settings like call forwarding, voicemail, and other related options.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_143\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUserCallingSettings\nSet-CsUserCallingSettings\n```\n\n----------------------------------------\n\nTITLE: Enable Enterprise Voice with PowerShell\nDESCRIPTION: This snippet demonstrates how to enable Enterprise Voice for a user using the `Set-CsPhoneNumberAssignment` PowerShell cmdlet.  The `-EnterpriseVoiceEnabled` parameter is set to `$true`, which activates voice capabilities for the specified user. Ensure the Teams PowerShell module is installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment](/powershell/module/teams/set-csphonenumberassignment) cmdlet and set the `-EnterpriseVoiceEnabled` parameter to `$true`.\n```\n\n----------------------------------------\n\nTITLE: Creating a Call Flow - PowerShell\nDESCRIPTION: This cmdlet creates a new call flow for Auto Attendants in Microsoft Teams.  Call flows define how calls are routed and handled. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendantCallFlow\n```\n\n----------------------------------------\n\nTITLE: Creating a Voice Route in Teams with PowerShell\nDESCRIPTION: This command creates a new voice route named 'International' in Microsoft Teams. It specifies a number pattern ('.*') to match any destination number and routes calls through the online PSTN gateway 'sbc1.contoso.biz' using the 'International' PSTN usage. The Teams PowerShell module is a prerequisite.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-with-direct-routing-for-gcch-and-dod.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoute -Identity \"International\" -NumberPattern \".*\" -OnlinePstnGatewayList sbc1.contoso.biz -OnlinePstnUsages \"International\"\n```\n\n----------------------------------------\n\nTITLE: Create a call routing policy with PowerShell\nDESCRIPTION: This snippet refers to the PowerShell command New-CsOnlineVoiceRoutingPolicy, which is used to create a new call routing policy.  The policy defines how calls are routed via Direct Routing in Microsoft Teams.  Refer to the linked documentation for the specific syntax and parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voice-routing-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee [New-CsOnlineVoiceRoutingPolicy](/powershell/module/teams/new-csonlinevoiceroutingpolicy).\n```\n\n----------------------------------------\n\nTITLE: Assign Operator Connect Number to User with PowerShell\nDESCRIPTION: This PowerShell snippet assigns an Operator Connect phone number to a specific user in Microsoft Teams. It utilizes the `Set-CsPhoneNumberAssignment` cmdlet, requiring the user's identity (UPN), the phone number to assign, and the PhoneNumberType parameter set to 'OperatorConnect'.  It depends on an existing Operator Connect configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-change-or-remove-a-phone-number-for-a-user.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity <user> -PhoneNumber <phone number> -PhoneNumberType OperatorConnect\n```\n\n----------------------------------------\n\nTITLE: PowerShell: Connect to Microsoft Teams\nDESCRIPTION: This PowerShell script snippet shows how to connect to Microsoft Teams using the `Connect-MicrosoftTeams` cmdlet. This is a necessary step before running other Teams PowerShell cmdlets to manage Teams settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Create Custom Teams Feedback Policy\nDESCRIPTION: This PowerShell snippet creates a new custom Teams feedback policy named \"New Hire Feedback Policy\". It disables the ability for users assigned to this policy to provide feedback through the 'Give feedback' option and also disables their participation in surveys. This is useful for controlling feedback access for specific user groups, such as new hires.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-feedback-policies-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsFeedbackPolicy -identity \"New Hire Feedback Policy\" -userInitiatedMode disabled -receiveSurveysMode disabled\n```\n\n----------------------------------------\n\nTITLE: Creating Call Queue with Callback based on Queue Length - PowerShell\nDESCRIPTION: This PowerShell example creates a new call queue with callback enabled, triggering callback eligibility when there are more than 50 calls in the queue. The script configures the DTMF tone for callback requests, the text-to-speech prompt, and the email notification target. This utilizes the `New-CsCallQueue` cmdlet to configure call queue options.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Callback Eligible After 50 calls\" -UseDefaultMusicOnHold $true -LanguageID en-US -IsCallbackEnabled $true -CallbackRequestDtmf \"Tone1\" -NumberOfCallsInQueueBeforeOfferingCallback 50 -CallbackOfferTextToSpeechPrompt \"If you would like to have a callback when an agent becomes available, press 1\" -CallbackEmailNotificationTarget <Team or DL GUID>\n```\n\n----------------------------------------\n\nTITLE: Create Bandwidth Policy Profile using New-CsNetworkBandwidthPolicyProfile PowerShell\nDESCRIPTION: This PowerShell command creates a new bandwidth policy profile in Skype for Business Server. It defines the identity, description, and bandwidth limits for audio and video sessions.  The parameters AudioBWLimit, AudioBWSessionLimit, VideoBWLimit and VideoBWSessionLimit specify the bandwidth limitations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-bandwidth-policy-profiles.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkBandwidthPolicyProfile -Identity 10Mb_Link -Description \"BW profile for 10Mb links\" -AudioBWLimit 4000 -AudioBWSessionLimit 200 -VideoBWLimit 2800 -VideoBWSessionLimit 700\n```\n\n----------------------------------------\n\nTITLE: Remove a Teams Meeting Policy from a Group using PowerShell\nDESCRIPTION: This PowerShell snippet removes a specific Teams meeting policy from a group. The group is identified by its GroupId. Setting the PolicyName to `$null` effectively unassigns the policy from the group.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -Group f985e013-0826-40bb-8c94-e5f367076044 -PolicyName $null\n```\n\n----------------------------------------\n\nTITLE: SBC Configuration using New-CSOnlinePSTNGateway - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to configure a Session Border Controller (SBC) using the `New-CSOnlinePSTNGateway` cmdlet. It sets the SIP signaling port and assigns number translation rules for inbound and outbound calls to both Teams and PSTN networks. The translation rules are applied in the order they are listed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-translate-numbers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CSOnlinePSTNGateway -Identity sbc1.contoso.com -SipSignalingPort 5061 –InboundTeamsNumberTranslationRules ‘AddPlus1’, ‘AddE164SeattleAreaCode’ -InboundPSTNNumberTranslationRules ‘AddPlus1’ -OutboundPSTNNumberTranslationRules ‘AddSeattleAreaCode’,‘StripPlus1’  -OutboundTeamsNumberTranslationRules ‘StripPlus1’\n```\n\n----------------------------------------\n\nTITLE: Create a Hybrid Application Endpoint (Resource Account) - PowerShell\nDESCRIPTION: This PowerShell command creates a new on-premises resource account, represented as a hybrid application endpoint, for use with Phone System auto attendants or call queues. It requires the ApplicationID (a GUID), DisplayName, SipAddress, and the organizational unit (OU) where the account should be created.  Replace `<GUID>`, `appinstance01`, `sip:appinstance01@contoso.com`, and `ou=Redmond,dc=litwareinc,dc=com` with your specific values. This command prepares the on-premises resource account for synchronization with online services.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-onprem-ra.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsHybridApplicationEndpoint -ApplicationID <GUID> -DisplayName appinstance01 -SipAddress sip:appinstance01@contoso.com -OU \"ou=Redmond,dc=litwareinc,dc=com\"\n```\n\n----------------------------------------\n\nTITLE: Creating Call Queue with Callback based on Agent Ratio - PowerShell\nDESCRIPTION: This PowerShell example creates a new call queue with callback enabled, triggering callback eligibility when the number of callers is twice the number of agents. The script also configures the DTMF tone for callback request, the text-to-speech prompt, and the email notification target using the `New-CsCallQueue` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Callback Eligible After 2x calls to agents\" -UseDefaultMusicOnHold $true -LanguageID en-US -IsCallbackEnabled $true -CallbackRequestDtmf \"Tone1\" -CallToAgentRatioThresholdBeforeOfferingCallback 2 -CallbackOfferTextToSpeechPrompt \"If you would like to have a callback when an agent becomes available, press 1\" -CallbackEmailNotificationTarget <Team or DL GUID>\n```\n\n----------------------------------------\n\nTITLE: Modify Teams Calling Policy (PowerShell)\nDESCRIPTION: This cmdlet modifies an existing Teams calling policy. This allows administrators to adjust calling features and settings for user groups as organizational needs evolve. It requires specifying the policy to be changed and the desired modifications.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-calling-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Enabling Voice Isolation Globally - PowerShell\nDESCRIPTION: This PowerShell snippet enables voice isolation for all users in the organization by setting the `VoiceIsolation` parameter to `Enabled` on the Global Teams meeting policy. Users must also set up a voice profile in their Teams app for this to work.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -VoiceIsolation Enabled\n```\n\n----------------------------------------\n\nTITLE: Installing MicrosoftTeams PowerShell Module\nDESCRIPTION: This PowerShell command installs the MicrosoftTeams module. The -Force parameter overwrites any existing versions of the module and the -AllowClobber parameter allows the command to overwrite existing files if necessary.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name MicrosoftTeams -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Disable Real-time Captions in Global Policy using PowerShell\nDESCRIPTION: This PowerShell script prevents users from turning on real-time captions for calls in the global calling policy in Microsoft Teams. It uses the `Set-CsTeamsCallingPolicy` cmdlet to set the `-LiveCaptionsEnabledTypeForCalling` parameter to `Disabled`.  This forces real-time captions to be disabled for all calls covered by this policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-recording-transcription-captions.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -LiveCaptionsEnabledTypeForCalling Disabled\n```\n\n----------------------------------------\n\nTITLE: Get Resource Account Object ID - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the ObjectId of a specified resource account. The ObjectId is later used when creating a new caller ID policy that uses the resource account's phone number as the caller ID. Replace 'dkcq@contoso.com' with the actual identity of the resource account.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/caller-id-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ObjId = (Get-CsOnlineApplicationInstance -Identity dkcq@contoso.com).ObjectId\n```\n\n----------------------------------------\n\nTITLE: Setting a Toll Number for an Audio Conferencing User in PowerShell\nDESCRIPTION: This PowerShell snippet assigns a specific toll number to an audio conferencing user. The `Set-CsOnlineDialInConferencingUser` cmdlet is used, requiring the user's email address and the desired toll number as input. The toll number must be a registered number within the organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-the-audio-conferencing-settings-for-my-organization-in-teams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Set-CsOnlineDialInConferencingUser sarah@contoso.com -ServiceNumber 6128000000\n```\n\n----------------------------------------\n\nTITLE: Create Shared Calling Policy - PowerShell\nDESCRIPTION: Creates a new Shared Calling policy with specified emergency callback numbers and a resource account. It retrieves the resource account using Get-CsOnlineUser and then creates the policy using New-CsTeamsSharedCallingRoutingPolicy.  The policy includes emergency callback numbers for returning calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-scenario.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# Define the emergency callback numbers that are the same phone number type as the Auto attendant resource account\n$ecbn1 = '+14255556789'\n$ecbn2 = '+14255554321'\n\n# Create the Shared Calling policy with emergency callback numbers\n$ra = Get-CsOnlineUser -Identity $mainaa\nNew-CsTeamsSharedCallingRoutingPolicy -Identity Seattle -ResourceAccount $ra.Identity -EmergencyNumbers @{add=$ecbn1,$ecbn2}\n```\n\n----------------------------------------\n\nTITLE: Disable Webinar Recording Publishing via PowerShell\nDESCRIPTION: This PowerShell snippet prevents organizers from publishing any webinar recordings by setting the `AllowedWebinarTypesForRecordingPublish` parameter to `None` within the `CsTeamsEventsPolicy` cmdlet. This restricts all webinar recording publication capabilities.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-vod-publishing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowedWebinarTypesForRecordingPublish None\n```\n\n----------------------------------------\n\nTITLE: Assign phone number to resource account - PowerShell\nDESCRIPTION: This PowerShell script assigns an available phone number to the resource account.  The phone number usage location must match the resource account's usage location. It uses the `Set-CsPhoneNumberAssignment` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity ContosoMainAA-RA@contoso.com -PhoneNumber +{spare number from output of above command} -PhoneNumberType CallingPlan\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams and Graph\nDESCRIPTION: This PowerShell script retrieves credentials and connects to both Microsoft Teams and Microsoft Graph using those credentials. This step is essential for authenticating and authorizing subsequent administrative actions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$credential = Get-Credential\nConnect-MicrosoftTeams -Credential $credential\nConnect-MgGraph -Credential $credential\n```\n\n----------------------------------------\n\nTITLE: Assign a private line using PowerShell\nDESCRIPTION: This PowerShell script assigns a Microsoft Calling Plan phone number as a private line to a specified user. It utilizes the `Set-CsPhoneNumberAssignment` cmdlet, setting the `-AssignmentCategory` parameter to `Private` to designate the number as a private line. The `-EnterpriseVoiceEnabled` parameter is automatically set to True when a phone number is assigned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/private-line.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity user1@contoso.com -PhoneNumber '+14255551234' -PhoneNumberType CallingPlan -AssignmentCategory Private\n```\n\n----------------------------------------\n\nTITLE: Creating Open Hours Menu - PowerShell\nDESCRIPTION: This PowerShell script creates an open hours menu and call flow for the auto attendant. It combines the menu options created in the previous step into a menu and defines a call flow with greetings and the menu. It utilizes `New-CsAutoAttendantMenu` and `New-CsAutoAttendantCallFlow` cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n$openHoursMenu = New-CsAutoAttendantMenu -Name \"Open Hours Menu\" -MenuOptions @($openHoursMenuOption1, $openHoursMenuOption2, $dialbynameAAMenuOption3, $openHoursMenuOption4, $openHoursMenuOption0) -Prompt $openHoursMenuPrompt\n\n$openHoursCallFlow = New-CsAutoAttendantCallFlow -Name \"Open Hours Call Flow\" -Greetings @($openHoursGreetingPrompt) -Menu $openHoursMenu\n```\n\n----------------------------------------\n\nTITLE: Check User TeamsOnly Mode and Read-Only Status - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the TeamsUpgradeEffectiveMode and TeamsUpgradePolicyIsReadOnly properties for a specific user to verify if the user is in TeamsOnly mode and if the coexistence mode is read-only. It uses Get-CsOnlineUser to fetch the user configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/coexistence-chat-calls-presence.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n//Check if user is TeamsOnly and if mode is read only.\n$u=Get-CsOnlineUser\n$u|fl TeamsUpgradeEffectiveMode, TeamsUpgradePolicyIsReadOnly\n\nTeamsUpgradeEffectiveMode  : TeamsOnly\nTeamsUpgradePolicyIsReadOnly: ModeAndNotifications\n```\n\n----------------------------------------\n\nTITLE: Configure Limited Attendee Information - PowerShell\nDESCRIPTION: This PowerShell script configures a Teams meeting policy to allow organizers to toggle attendance and engagement reports that only show attendee identities, excluding join/leave times. It uses `Set-CsTeamsMeetingPolicy` twice: once to enable the report with `Enabled` and again to set the info shown to `identityOnly`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-analytics-and-reports/meeting-attendance-report.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowEngagementReport Enabled\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -InfoShownInReportMode identityOnly\n```\n\n----------------------------------------\n\nTITLE: Assign Teams Policy Package to a Batch of Users using PowerShell\nDESCRIPTION: This snippet demonstrates how to use the `New-CsBatchPolicyPackageAssignmentOperation` cmdlet to assign a Teams policy package to a large group of users. It explains that you can specify users by their object ID, UPN, SIP address, or email address. The assignments are processed as a background operation. A batch can contain up to 5,000 users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/policy-packages-gov.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsBatchPolicyPackageAssignmentOperation\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information with Phone Number via PowerShell\nDESCRIPTION: This PowerShell command retrieves user information from Microsoft 365, including the phone number (OnPremLineURi) if it is synchronized from on-premises Active Directory. This is relevant for Direct Routing scenarios where numbers are managed on-premises.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-phone-numbers-landing-page.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get-CsOnlineUser](/powershell/module/teams/get-csonlineuser)\n```\n\n----------------------------------------\n\nTITLE: Enable Voice Isolation for Users - PowerShell\nDESCRIPTION: This snippet shows how to enable voice isolation for users by setting the EnrollVoice parameter in CsTeamsAIPolicy and the VoiceIsolation parameter in CsTeamsMeetingPolicy to Enabled.  This allows users to capture and enroll their voice profiles and use voice isolation in Teams calls and meetings. Requires Microsoft Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/voice-isolation.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsAIPolicy -Identity <policy name> -EnrollVoice Enabled\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -VoiceIsolation Enabled\n```\n\n----------------------------------------\n\nTITLE: Enabling Spam Detection for Global Policy PowerShell\nDESCRIPTION: This PowerShell script enables spam detection for the global Teams calling policy. It utilizes the `Set-CsTeamsCallingPolicy` cmdlet to modify the `SpamFilteringEnabledType` parameter. The `Identity` parameter is set to `Global` to apply the change to the organization's default policy. This ensures all users are affected by the change unless they are assigned a different policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-call-spam-filtering.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -SpamFilteringEnabledType Enabled\n```\n\n----------------------------------------\n\nTITLE: Move On-Premises User to TeamsOnly - PowerShell\nDESCRIPTION: This command moves an on-premises Skype for Business user to TeamsOnly. The command also migrates their meetings to Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-implement.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser -identity $user -Target sipfed.online.lync.com -MoveToTeams -credential $cred\n```\n\n----------------------------------------\n\nTITLE: Add Calling Delegate - PowerShell\nDESCRIPTION: This snippet uses the `New-CsUserCallingDelegate` cmdlet to add a new delegate (`user2`) for a user (`user1`) in Microsoft Teams.  It grants the delegate all permissions: the ability to make calls, receive calls, and manage settings on behalf of the user. This requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/user-call-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsUserCallingDelegate -Identity user1@contoso.com -Delegate user2@contoso.com -MakeCalls $true -ReceiveCalls $true -ManageSettings $true\n```\n\n----------------------------------------\n\nTITLE: Creating a Teams Call Hold Policy with Custom Audio File (PowerShell)\nDESCRIPTION: This snippet demonstrates how to create a new Teams Call Hold Policy that references the uploaded custom audio file using its ID.  The New-CsTeamsCallHoldPolicy cmdlet is used to create the policy, specifying the identity, description, and the AudioFileId.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/music-on-hold.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> New-CsTeamsCallHoldPolicy -Identity \"CustomMoH1\" -Description \"Custom MoH using CustomMoH1.mp3\" -AudioFileId $AudioFile.Id\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating SBC with New-CsOnlinePSTNGateway (PowerShell)\nDESCRIPTION: This snippet shows how to use the `New-CsOnlinePSTNGateway` cmdlet to configure SBC settings in Microsoft Teams Direct Routing.  It encapsulates the usage of the cmdlet which allows administrators to set properties like FQDN, port, and other options for connecting an SBC to Teams. No specific code is provided, but it gives the context in which the cmdlet is used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-connect-the-sbc.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlinePSTNGateway\n```\n\n----------------------------------------\n\nTITLE: Create and Assign Transcription Policy to Group - PowerShell\nDESCRIPTION: These PowerShell commands create a new Teams meeting policy that enables transcription and then assigns that policy to a specific group. Replace \"Your Policy Name\" with the desired policy name and \"Group ID\" with the actual group's ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-transcription-captions.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity \"Your Policy Name\" -AllowTranscription $true\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -Group \"Group ID\" -PolicyName \"Your Policy Name\"\n```\n\n----------------------------------------\n\nTITLE: Defining External Subnets (Trusted IP Addresses) with PowerShell\nDESCRIPTION: This PowerShell command creates a new trusted IP address. The `IPAddress` parameter specifies the external IP address, `MaskBits` specifies the subnet mask, and `Description` provides a description of the address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-your-network-topology.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTenantTrustedIPAddress -IPAddress <External IP address> -MaskBits <Subnet bitmask> -Description <description> \n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTenantTrustedIPAddress -IPAddress 198.51.100.0 -MaskBits 30 -Description \"Contoso address\"  \n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Chat Resource\nDESCRIPTION: This JSON snippet represents a chat resource in the Microsoft Graph API. It includes properties such as id, replyToId, from, etag, messageType, createdDateTime, lastModifiedDateTime, deletedDateTime, subject, body, summary, chatId, attachments, mentions, importance, and locale. The `from` field contains details about the sender, including user information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"id\": \"string (identifier)\",\n \"replyToId\": \"string (identifier)\",\n \"from\": {\"@odata.type\": \"microsoft.graph.identitySet\"},\n \"etag\": \"string\",\n \"messageType\": \"string\",\n \"createdDateTime\": \"string (timestamp)\",\n \"lastModifiedDateTime\": \"string (timestamp)\",\n \"deletedDateTime\": \"string (timestamp)\",\n \"subject\": \"string\",\n \"from\": {\n                \"application\": null,\n                \"device\": null,\n                \"conversation\": null,\n                \"user\": {\n\n                    \"id\": [{\n                        \"@odata.type\": \"microsoft.graph.user\"\n                    }],\n                    \"displayName\": \"User Name\",\n\n                    \"userIdentityType\": \"aadUser\"\n                }\n            },\n \"body\": {\"@odata.type\": \"microsoft.graph.itemBody\"},\n \"summary\": \"string\",\n\n \"chatId\": [{\n                \"@odata.type\": \"microsoft.graph.chat\"\n            }],\n\n \"attachments\": [{\n                \"@odata.type\": \"microsoft.graph.chatMessageAttachment\"\n            }],\n \"mentions\": [{\n                \"@odata.type\": \"microsoft.graph.chatMessageMention\"\n            }],\n \"importance\": \"string\",\n \"locale\": \"string\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Define Service Phone Number using PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to define service phone numbers in the tenant, which can then be used to route calls to the Audio Conferencing service through Direct Routing. The phone number must be in E.164 format. There are no specific dependencies beyond having the Teams PowerShell module installed and being properly authenticated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-with-direct-routing-for-gcch-and-dod.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineDirectRoutingTelephoneNumberUploadOrder -TelephoneNumber <Phone number in E.164 format>\n```\n\n----------------------------------------\n\nTITLE: Retrieve Trusted Application Information using PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves information about trusted applications configured in Skype for Business Server. It displays details such as Identity, RegistrarPool, HomeServer, OwnerUrn, SipAddress, and other properties. It requires the Skype for Business Server Management Shell or a remote PowerShell session.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/trusted-applications.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferenceDisclaimer\n```\n\n----------------------------------------\n\nTITLE: Getting Phone Number Assignment - PowerShell\nDESCRIPTION: This cmdlet retrieves phone number assignments in Microsoft Teams.  Used to verify phone number assignments to resource accounts or users. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_37\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPhoneNumberAssignment\n```\n\n----------------------------------------\n\nTITLE: Modify Call Queue with User Assignment - PowerShell\nDESCRIPTION: This example shows how to modify an existing call queue using Set-CsCallQueue. It assigns individual users, uses default music on hold, and disables conference mode. The Identity parameter is crucial for identifying the queue to be modified.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -User @(\"User 01 GUID\", \"User 02 GUID\") -UseDefaultMusicOnHold $true -ConferenceMode $false\n```\n\n----------------------------------------\n\nTITLE: Example PowerShell Commands for Number Assignment\nDESCRIPTION: These PowerShell commands demonstrate assigning different types of phone numbers to users. The first example assigns a Calling Plan number to john@contoso.com, and the second assigns an Operator Connect number to jack@contoso.com. These examples show the concrete values required for the Identity and PhoneNumber parameters, following the format +[country code][area code][number].\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-change-or-remove-a-phone-number-for-a-user.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity john@contoso.com -PhoneNumber \"+14255550101\" -PhoneNumberType CallingPlan\nSet-CsPhoneNumberAssignment -Identity jack@contoso.com -PhoneNumber \"+14255550102\" -PhoneNumberType OperatorConnect\n```\n\n----------------------------------------\n\nTITLE: Modifying Call Queue with Audio File Greeting and Music On Hold - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to modify an existing call queue to use audio files for the greeting and on-hold music. It uses the Set-CsCallQueue cmdlet, referencing the queue by its GUID and specifying the audio file IDs for both the welcome music and music on hold.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -WelcomeMusicAudioFileId <FILE ID> -MusicOnHoldAudioFileId <FILE ID>\n```\n\n----------------------------------------\n\nTITLE: Assigning Phone Numbers with Extensions using Direct Routing (PowerShell)\nDESCRIPTION: This example showcases how to assign phone numbers with extensions to multiple users sharing the same base number. It uses the `Set-CsPhoneNumberAssignment` cmdlet with the `-PhoneNumber` parameter including the base number and the extension (e.g., `+14255388701;ext=1001`).  The `PhoneNumberType` is `DirectRouting`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-enable-users.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity \"spencer.low@contoso.com\" -PhoneNumber \"+14255388701;ext=1001\" -PhoneNumberType DirectRouting\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity \"stacy.quinn@contoso.com\" -PhoneNumber \"+14255388701;ext=1002\" -PhoneNumberType DirectRouting\n```\n\n----------------------------------------\n\nTITLE: Granting Emergency Calling Policy to User with PowerShell\nDESCRIPTION: This PowerShell cmdlet grants the created emergency calling policy E911WFH to a specific user (user@contoso.com), enabling the feature for that user to configure their emergency address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/emergency-calling-dispatchable-location.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsEmergencyCallingPolicy -PolicyName E911WFH -Identity user@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Get Supported Languages - PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of supported languages for the auto attendant, which can then be used when creating or configuring call queues.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAutoAttendantSupportedLanguage\n```\n\n----------------------------------------\n\nTITLE: Enable Call Recording for Global Policy using PowerShell\nDESCRIPTION: This PowerShell script enables cloud recording for calls for the global calling policy in Microsoft Teams. It utilizes the `Set-CsTeamsCallingPolicy` cmdlet to modify the `-AllowCloudRecordingForCalls` parameter to `$true`. This allows users covered by the global policy to record their Teams calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-recording-transcription-captions.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -AllowCloudRecordingForCalls $true\n```\n\n----------------------------------------\n\nTITLE: Enable Collaborative Annotations with PowerShell\nDESCRIPTION: This PowerShell snippet enables collaborative annotations within Teams meetings. It utilizes the `Set-CsTeamsMeetingPolicy` cmdlet to set the `AllowCollaborativeAnnotations` parameter to `$true` for a specific meeting policy. This allows meeting participants to annotate shared screens during a Teams meeting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-policies-content-sharing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSTeamsMeetingPolicy -AllowCollaborativeAnnotations $true\n```\n\n----------------------------------------\n\nTITLE: Create and Assign Transcription Policy - PowerShell\nDESCRIPTION: These PowerShell commands create a new Teams meeting policy that enables transcription and then assigns that policy to a specific user. Replace \"Your Policy Name\" with the desired policy name and \"user@contoso.onmicrosoft.com\" with the actual user's email address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-transcription-captions.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity \"Your Policy Name\" -AllowTranscription $true\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -Identity \"user@contoso.onmicrosoft.com\" -PolicyName \"Your Policy Name\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Operator Information\nDESCRIPTION: These PowerShell commands retrieve the Identity of a specific user (in this case, adele@contoso.com) and then creates a callable entity for use in auto attendant configurations. The sip address is used to uniquely identify the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$operatorID = (Get-CsOnlineUser -Identity \"sip:adele@contoso.com\").Identity\n\n$operatorEntity = New-CsAutoAttendantCallableEntity -Identity $operatorID -Type User\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transcript Content using Microsoft Graph API (HTTP)\nDESCRIPTION: This code snippet demonstrates how to retrieve the transcript content of a meeting using the Microsoft Graph API. It uses a GET request to a specific endpoint that includes the userId, meetingId, and transcriptId. The API returns the content of the recording.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_12\n\nLANGUAGE: HTTP\nCODE:\n```\nGET users('{userId}')/onlineMeetings('{meetingId}')/transcripts('{transcriptId}')/content\n```\n\n----------------------------------------\n\nTITLE: Retrieving Copilot Interactions with AppClass Filters via Graph API (HTTP)\nDESCRIPTION: This example demonstrates how to retrieve Copilot interactions with specific appClass filters using the Microsoft Graph API's getAllEnterpriseInteractions endpoint (beta). It filters interactions based on the 'IPM.SkypeTeams.Message.Copilot.Teams' or 'IPM.SkypeTeams.Message.Copilot.BizChat' appClass.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_17\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/beta/copilot/users/{id}/interactionHistory/getAllEnterpriseInteractions?$filter=appClass eq 'IPM.SkypeTeams.Message.Copilot.Teams or appClass eq 'IPM.SkypeTeams.Message.Copilot.BizChat' (beta)\n```\n\n----------------------------------------\n\nTITLE: Setting Meeting Chat Policy - Disabled - PowerShell\nDESCRIPTION: This PowerShell script disables meeting chat for users with the specified Teams meeting policy. The `Set-CsTeamsMeetingPolicy` cmdlet is used with the `-MeetingChatEnabledType` parameter set to `Disabled`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-meeting-chat.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -MeetingChatEnabledType Disabled\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Version Policy - PowerShell\nDESCRIPTION: This cmdlet creates a new client version policy with a specified identity. The Identity parameter defines the scope of the policy (e.g., site, global). In this example, a policy is created for the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsClientVersionPolicy -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning Resource Account - PowerShell\nDESCRIPTION: This PowerShell script creates a new application instance (resource account) and assigns a license to it for the auto attendant. It uses `New-CsOnlineApplicationInstance` to create the account, `Update-MgUser` to set the usage location, `Get-MgSubscribedSku` to retrieve the license, `Set-MgUserLicense` to assign the license, and `New-CsOnlineApplicationInstanceAssociation` to associate the application instance with the auto attendant.  Requires the Microsoft Graph PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineApplicationInstance -UserPrincipalName ContosoMainAA-RA@contoso.com -DisplayName \"Contoso Main AA\" -ApplicationID \"ce933385-9390-45d1-9512-c8d228074e07\"\n\nUpdate-MgUser -UserId \"ContosoMainAA-RA@contoso.com\" -UsageLocation US\n\n$Sku = Get-MgSubscribedSku -All | Where SkuPartNumber -eq 'contoso:PHONESYSTEM_VIRTUALUSER'\n$addLicenses = @(\n@{SkuId = $Sku.SkuId}\n)\n\nSet-MgUserLicense -UserId 'ContosoDialByNameAA-RA@contoso.com' -AddLicenses $addLicenses -RemoveLicenses @()\n\n$applicationInstanceID = (Get-CsOnlineUser \"ContosoMainAA-RA@contoso.com\").Identity\n\n$autoAttendantID = (Get-CsAutoAttendant -NameFilter \"Contoso Main\").Identity\n\nNew-CsOnlineApplicationInstanceAssociation -Identities @($applicationInstanceID) -ConfigurationID $autoAttendantID -ConfigurationType AutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Disable Native File Uploads for Tenant - PowerShell\nDESCRIPTION: This PowerShell command disables the `NativeFileEntryPoints` parameter for the entire Microsoft Teams tenant, preventing users from accessing OneDrive and SharePoint for file uploads within Teams chats and channels. It modifies the global Teams Files policy. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-off-teams-native-file-upload-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsFilesPolicy -Identity Global -NativeFileEntryPoints Disabled\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Upgrade with TeamsUpgradePolicy PowerShell\nDESCRIPTION: The TeamsUpgradePolicy is used to manage the transition from Skype for Business to Teams. Administrators use TeamsUpgradePolicy to control when to shift chat, calling, and meeting scheduling functionality to Teams for their users. The 'mode' property of TeamsUpgradePolicy dictates the user experience.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-and-coexistence-of-skypeforbusiness-and-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/powershell/module/teams/grant-csteamsupgradepolicy\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with Access Token Authentication (2.3.2-preview)\nDESCRIPTION: The Connect-MicrosoftTeams cmdlet in version 2.3.2-preview introduces support for AccessToken login using the -AccessTokens parameter. This parameter accepts an array of tokens, requiring both MSGraph and Teams resource tokens.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_155\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams -AccessTokens <array_of_tokens>\n```\n\n----------------------------------------\n\nTITLE: Create On-Premises Resource Account - Powershell\nDESCRIPTION: Creates a new on-premises resource account for a Phone System auto attendant or call queue using the `New-CsHybridApplicationEndpoint` cmdlet.  The resource account is given a display name, SIP address, and organizational unit (OU).  This cmdlet is part of the Skype for Business PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-onprem-ra.md#_snippet_4\n\nLANGUAGE: Powershell\nCODE:\n```\nNew-CsHybridApplicationEndpoint -DisplayName appinstance01 -SipAddress sip:appinstance01@litwareinc.com -OU \"ou=Redmond,dc=litwareinc,dc=com\"\n```\n\n----------------------------------------\n\nTITLE: Creating Unassigned Number Treatment Routing to Resource Account (PowerShell)\nDESCRIPTION: This PowerShell command creates a new unassigned number treatment that routes calls to a specific phone number (+1 (555) 222-3333) to a resource account. It retrieves the ObjectId of the resource account (aa@contoso.com) and uses it as the target. The `TreatmentPriority` is set to 1.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/routing-calls-to-unassigned-numbers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$RAObjectId = (Get-CsOnlineApplicationInstance -Identity aa@contoso.com).ObjectId\n\nNew-CsTeamsUnassignedNumberTreatment -Identity MainAA -Pattern \"^\\+15552223333$\" -TargetType ResourceAccount -Target $RAObjectId -TreatmentPriority 1\n```\n\n----------------------------------------\n\nTITLE: Enable Anonymous Join (Organization-Wide) - PowerShell\nDESCRIPTION: This PowerShell snippet enables anonymous participants to join meetings for the entire organization. It utilizes the `Set-CsTeamsMeetingConfiguration` cmdlet to modify the `-DisableAnonymousJoin` parameter. Setting this parameter to `$false` allows anonymous users to join meetings organized by anyone within the organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/anonymous-users-in-meetings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingConfiguration -Identity <policy name> -DisableAnonymousJoin $false\n```\n\n----------------------------------------\n\nTITLE: Allow Org and Guests to Bypass Lobby (PowerShell)\nDESCRIPTION: This PowerShell snippet allows people in the same organization and guests to bypass the lobby. It uses the `Set-CsTeamsEventsPolicy` cmdlet with the `-AutoAdmittedUsers` parameter set to `EveryoneInCompany`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AutoAdmittedUsers EveryoneInCompany \n```\n\n----------------------------------------\n\nTITLE: Get Facilities Team Group ID - PowerShell\nDESCRIPTION: This PowerShell script retrieves the Group ID of the Microsoft Teams team named \"Facilities\". This Group ID is later used to identify the team for the call queue settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n$teamFacilitiesGroupID = (Get-Team -DisplayName \"Facilities\").GroupID\n```\n\n----------------------------------------\n\nTITLE: Configuring External Access Policy using PowerShell\nDESCRIPTION: This snippet demonstrates how to use PowerShell cmdlets to manage external access settings for Microsoft Teams, specifically controlling communication between Teams users and Skype users. The `Set-CsExternalAccessPolicy` cmdlet is used to allow or disallow communication with Skype users, while `Set-CsTenantPublicProvider` is used to enable the WindowsLive provider for Skype interoperability.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-skype-interop.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUse the [Set-CsExternalAccessPolicy](/powershell/module/teams/set-csexternalaccesspolicy) cmdlet together with the ```EnablePublicCloudAccess``` parameter to control whether Teams users can communicate with Skype users. Setting the parameter to ```true``` allows Teams users to communicate with Skype users. You can use the ```EnablePublicCloudAudioVideoAccess``` parameter to enable/disable audio/video calls.\n\n2. Use the [Set-CsTenantPublicProvider](/powershell/module/skype/Set-CsTenantPublicProvider) cmdlet together with the ```Provider``` parameter set to ```\"WindowsLive\"``` so that Teams users can communicate with Skype users.\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Education Configuration using PowerShell\nDESCRIPTION: These cmdlets are used for managing Teams education configuration. They allow administrators to retrieve and set configuration settings related to education features in Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_97\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsTeamsEducationConfiguration\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Calling Policy to User - PowerShell\nDESCRIPTION: This PowerShell command assigns the \"AllowCallingPreventTollBypass\" Teams calling policy to a specific user (User1), enabling Location-Based Routing and preventing PSTN toll bypass. It uses the Grant-CsTeamsCallingPolicy cmdlet with the specified PolicyName and user ID. The \"AllowCallingPreventTollBypass\" policy must be pre-configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-enable.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsCallingPolicy –PolicyName \"AllowCallingPreventTollBypass\" -id \"User1\" \n```\n\n----------------------------------------\n\nTITLE: Getting Batch Assignment Status with PowerShell\nDESCRIPTION: This PowerShell command retrieves the status of a batch policy assignment operation using its OperationId. It uses the `Get-CsBatchPolicyAssignmentOperation` cmdlet and pipes the output to `fl` for a formatted list of properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Get-CsBatchPolicyAssignmentOperation -OperationId f985e013-0826-40bb-8c94-e5f367076044 | fl\n```\n\n----------------------------------------\n\nTITLE: Modifying Auto Attendant Settings - PowerShell\nDESCRIPTION: This cmdlet modifies the settings of an existing Auto Attendant in Microsoft Teams.  Parameters allow you to update properties such as the name, language, and call flow of the Auto Attendant. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Upgrade Policy to all tenant users\nDESCRIPTION: This PowerShell command changes the TeamsUpgradePolicy for all users in the tenant, except those with an explicit per-user grant. The -Global parameter applies the policy tenant-wide. In this case, it sets the policy to 'SfbWithTeamsCollab'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-tools.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName SfbWithTeamsCollab -Global\n```\n\n----------------------------------------\n\nTITLE: Enable Auto Recording\nDESCRIPTION: This PowerShell command gives organizers with the specified policy the option to automatically record their Teams meetings. Replace \"<policy name>\" with the name of the target Teams meeting policy. The MicrosoftTeams module must be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-recording.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AutoRecording Enabled\n```\n\n----------------------------------------\n\nTITLE: Creating a New Auto Attendant - PowerShell\nDESCRIPTION: This cmdlet creates a new Auto Attendant in Microsoft Teams. It requires various parameters to define the Auto Attendant's settings, such as name, language, and timezone.  Use in conjunction with other cmdlets to configure the auto attendant's call flow and menu options. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Configuring PSTN Gateway using Set-CsOnlinePSTNGateway - PowerShell\nDESCRIPTION: This snippet demonstrates how to configure a PSTN gateway object using the `Set-CsOnlinePSTNGateway` cmdlet.  The `-Identity` parameter specifies the FQDN of the gateway. The `-GatewaySiteID` parameter associates the gateway with a network site.  `-MediaBypass` enables media bypass. `-BypassMode` specifies when to use media bypass and `-ProxySBC` defines the proxy SBC FQDN.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Set-CsOnlinePSTNGateway -Identity <Identity> -GatewaySiteID <site ID> -MediaBypass <true/false> -BypassMode <Always/OnlyForLocalUsers> -ProxySBC  <proxy SBC FQDN or $null>\n```\n\n----------------------------------------\n\nTITLE: Creating a Callable Entity - PowerShell\nDESCRIPTION: This cmdlet creates a new callable entity for Auto Attendants in Microsoft Teams.  Callable entities can be users, call queues, or other Auto Attendants. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendantCallableEntity\n```\n\n----------------------------------------\n\nTITLE: Import Audio Files for Support Queue - PowerShell\nDESCRIPTION: This PowerShell script reads multiple audio files into byte arrays and imports them as online audio files for use with the Support call queue.  It assumes the files are located at `d:\\support-greeting.wav`, `d:\\support-hold-in-queue-music.wav`, and `d:\\support-shared-voicemail-greeting.wav`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$content1 = [System.IO.File]::ReadAllBytes('d:\\support-greeting.wav')\n$audioFileSupportGreetingID = (Import-CsOnlineAudioFile -ApplicationID HuntGroup -FileName \"support-greeting.wav\" -Content $content1).ID\n\n$content2 = [System.IO.File]::ReadAllBytes('d:\\support-hold-in-queue-music.wav')\n$audioFileSupportHoldInQueueMusicID = (Import-CsOnlineAudioFile -ApplicationID HuntGroup -FileName \"support-hold-in-queue-music.wav\" -Content $content2).ID\n\n$content3 = [System.IO.File]::ReadAllBytes('d:\\support-shared-voicemail-greeting.wav')\n$audioFileSupportSharedVoicemailGreetingID = (Import-CsOnlineAudioFile -ApplicationID HuntGroup -FileName \"support-shared-voicemail-greeting.wav\" -Content $content3).ID\n```\n\n----------------------------------------\n\nTITLE: Grant TeamsUpgradePolicy to Upgrade a User to Teams - PowerShell\nDESCRIPTION: This command grants the 'UpgradeToTeams' policy to a specific user, upgrading them to TeamsOnly mode. It utilizes the `Grant-CsTeamsUpgradePolicy` cmdlet to assign the policy based on the user's SIP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/migration-interop-guidance-for-teams-with-skype.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName UpgradeToTeams -Identity $SipAddress\n```\n\n----------------------------------------\n\nTITLE: Creating MsixUrlBase Registry Key for Teams SlimCore\nDESCRIPTION: This code snippet describes the registry key that needs to be created on the user's endpoint to define the base URL for the SlimCore MSIX package. This key tells the Teams client where to look for the SlimCore MSIX package, either in local or network storage. The location differs slightly based on whether you're using Citrix or Azure Virtual Desktop/W365.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_9\n\nLANGUAGE: registry\nCODE:\n```\nLocation for Citrix: HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Teams\\MsTeamsPlugin\nLocation for Azure Virtual Desktop/W365: HKLM\\SOFTWARE\\Microsoft\\Teams\\MsTeamsPlugin\nName: MsixUrlBase\nType: REG_SZ\nData: Either local storage or network storage UNC path, such as file://C:/Temp or file://ComputerName/SharedFolder.\n```\n\n----------------------------------------\n\nTITLE: Enable Live Share with PowerShell\nDESCRIPTION: This PowerShell snippet enables live share functionality within Teams meetings, allowing users to co-author documents in real time during a meeting. It uses the `Set-CsTeamsMeetingPolicy` cmdlet and sets the `AllowDocumentCollaboration` parameter to `$true` for a specified meeting policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-policies-content-sharing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSTeamsMeetingPolicy -AllowDocumentCollaboration $true\n```\n\n----------------------------------------\n\nTITLE: Releasing CsComplianceRecordingForCallQueueTemplate cmdlets\nDESCRIPTION: This snippet releases the `New-CsComplianceRecordingForCallQueueTemplate`, `Set-CsComplianceRecordingForCallQueueTemplate`, `Remove-CsComplianceRecordingForCallQueueTemplate`, and `Get-CsComplianceRecordingForCallQueueTemplate` cmdlets. These cmdlets seem to manage compliance recording templates for call queues within Microsoft Teams. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set|Remove|Get]-CsComplianceRecordingForCallQueueTemplate\n```\n\n----------------------------------------\n\nTITLE: Configuring External Access Policies with PowerShell\nDESCRIPTION: This example demonstrates how to configure external access policies in Microsoft Teams using the `Set-CsExternalAccessPolicy` cmdlet in PowerShell.  It allows administrators to specify which users can chat and meet with people outside the organization through federation, Teams consumer accounts, or Skype.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Create Shared Calling Policy using Teams Admin Center\nDESCRIPTION: These steps explain how to create a Shared Calling policy using the Teams admin center. The process involves navigating to the Shared calling policies section, adding a new policy, specifying a name and description, and selecting a resource account.  Optionally, emergency callback numbers can be added.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_4\n\nLANGUAGE: Instructions\nCODE:\n```\n1. In the Teams admin center, go to **Voice** > **Shared calling policies**.\n2. Select **Add** to create a new Shared Calling policy.\n3. Enter a unique name and description for the policy.\n4. For **Resource account**, select the resource account that you want to use for this policy.\n5. If you want to use emergency numbers for the Shared Calling policy, select **Add emergency callback numbers**. From the side panel, select the **Phone number type** and **Assigned phone number**. Once you've added the emergency callback number, select **Add**.\n6. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Creating a Teams Branch Survivability Policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new Teams Branch Survivability Policy. It requires a unique identity for the policy and a list of FQDNs of the SBAs to associate with the policy.  This policy dictates which SBAs are available to users in the branch site during an outage. Multiple SBAs can be assigned to a single policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-survivable-branch-appliance.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> new-CsTeamsSurvivableBranchAppliancePolicy -Identity CPH -BranchApplianceFqdns \"sba1.contoso.com\",\"sba2.contoso.com\" \nIdentity             : Tag:CPH \nBranchApplianceFqdns : {sba1.contoso.com, sba2.contoso.com} \n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with Access Token Authentication (2.5.1)\nDESCRIPTION: The Connect-MicrosoftTeams cmdlet in version 2.5.1 now uses a unified token array for Access Token login, replacing separate parameters for each resource-specific token. This change simplifies the authentication process when using access tokens.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_154\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams -AccessTokens <array_of_tokens>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Teams PowerShell Module\nDESCRIPTION: This snippet installs the Microsoft Teams PowerShell module, necessary for managing Teams policies. It should be run with administrator privileges and requires an active internet connection. Ensure version 1.0.5 or later is installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Assign Policy Package to Batch of Users\nDESCRIPTION: This PowerShell snippet demonstrates how to assign a policy package to a batch of users using the `New-CsBatchPolicyPackageAssignmentOperation` cmdlet.  It specifies the users by their identities (object ID or SIP address) and assigns the 'Education_PrimaryStudent' policy package. The `Identity` parameter accepts a comma-separated list of user identities, and `PackageName` specifies the policy package. The assignment operation runs in the background, and an operation ID is returned for tracking purposes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policy-packages.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsBatchPolicyPackageAssignmentOperation -Identity 1bc0b35f-095a-4a37-a24c-c4b6049816ab,user1@econtoso.com,user2@contoso.com -PackageName Education_PrimaryStudent\n```\n\n----------------------------------------\n\nTITLE: Import and Create Tenant Dial Plan from XML\nDESCRIPTION: This script is intended to be run in the Teams PowerShell Module online. It imports an on-premises dial plan from an XML file (dialplan.xml), creates new normalization rules based on the imported rules, and then creates a new tenant dial plan using the imported data.  It assumes the previous script was used to generate the dialplan.xml file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\n$DPFileName = \"dialplan.xml\"\n$dp = Import-Clixml $DPFileName\n$NormRules = @()\nForEach($nr in $dp.NormalizationRules)\n{\n $id1 = \"Global/\" + $nr.Name\n $nr2 = New-CsVoiceNormalizationRule -Identity $id1 -Description $nr.Description -Pattern $nr.Pattern -Translation $nr.Translation -IsInternalExtension $nr.IsInternalExtension -InMemory\n $NormRules += $nr2\n}\nNew-CsTenantDialPlan -Identity $dp.SimpleName -Description $dp.Description -SimpleName $dp.SimpleName -NormalizationRules $NormRules\n```\n\n----------------------------------------\n\nTITLE: Create a New Tenant Dial Plan\nDESCRIPTION: This command creates a new tenant dial plan using the New-CsTenantDialPlan cmdlet. It sets the identity, description, normalization rules and simple name for the dial plan. The NormalizationRules parameter is a placeholder and should be replaced with a valid pslistmodifier object containing the normalization rules.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n  New-CsTenantDialPlan -Identity RedmondDialPlan -Description \"Dial Plan for Redmond\" -NormalizationRules <pslistmodifier> -SimpleName \"Dial-Plan-for-Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Assign Dial-by-Name Resource Account - PowerShell\nDESCRIPTION: This PowerShell script associates the dial-by-name resource account with the dial-by-name auto attendant.  Requires the Application Instance Id. It uses the `New-CsOnlineApplicationInstanceAssociation` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineApplicationInstanceAssociation -Identities @($dialByNameApplicationInstanceID) -ConfigurationID $dialByNameAutoAttendant.Id -ConfigurationType AutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Create 'International' PSTN Usage - PowerShell\nDESCRIPTION: This PowerShell command creates a new PSTN usage record named 'International' within the global settings. This usage will be associated with specific phone number patterns and gateways for routing international calls. It requires a remote PowerShell session in Teams to be established.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlinePstnUsage -Identity Global -Usage @{Add=\"International\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu - PowerShell\nDESCRIPTION: This cmdlet creates a new menu for Auto Attendants in Microsoft Teams. Menus present options to callers. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendantMenu\n```\n\n----------------------------------------\n\nTITLE: Creating a new Call Park configuration for a specific site in Skype for Business\nDESCRIPTION: This PowerShell cmdlet creates a new Call Park configuration for a specific site. It allows customization of parameters like timeout threshold, music on hold, maximum pickup attempts, and the URI to which unanswered calls are routed. Before using this, ensure you have the Skype for Business Server Management Shell installed and are connected to the Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-call-park-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsCpsConfiguration -Identity site:<sitename to apply settings> [-CallPickupTimeoutThreshold <hh:mm:ss>] -[EnableMusicOnHold <$true | $false>] [-MaxCallPickupAttempts <number of rings>] [-OnTimeoutURI sip:<sip URI for routing unanswered call>]\n```\n\n----------------------------------------\n\nTITLE: Assigning a Teams Meeting Policy in Bulk using PowerShell\nDESCRIPTION: This snippet assigns a custom Teams meeting policy to a group of users in bulk using the `New-CsBatchPolicyAssignmentOperation` cmdlet. It sets the PolicyType to `TeamsMeetingPolicy`, the PolicyName to `EducatorMeetingPolicy`, and provides the object IDs of the users to assign.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsBatchPolicyAssignmentOperation -PolicyType TeamsMeetingPolicy -PolicyName EducatorMeetingPolicy -Identity $faculty.ObjectId\n```\n\n----------------------------------------\n\nTITLE: Modifying Call Queue with Combined Callback Conditions - PowerShell\nDESCRIPTION: This PowerShell example modifies an existing call queue to enable callback using both wait time and queue length conditions: 60 seconds or 50 calls. The script also configures the DTMF tone, text-to-speech prompt, and email notification, modifying settings of a call queue through `Set-CsCallQueue`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -IsCallbackEnabled $true -CallbackRequestDtmf \"Tone1\" -WaitTimeBeforeOfferingCallbackInSecond 60 -NumberOfCallsInQueueBeforeOfferingCallback 50 -CallbackOfferTextToSpeechPrompt \"If you would like to have a callback when an agent becomes available, press 1\" -CallbackEmailNotificationTarget <Team or DL GUID>\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Message Captions in Teams using PowerShell\nDESCRIPTION: This PowerShell cmdlet enables closed captions for video messages within Microsoft Teams.  It utilizes the `Set-CsTeamsMessagingConfiguration` cmdlet with the `-EnableVideoMessageCaptions` parameter set to `$true`. This allows users to see auto-generated captions for video messages in English (currently the only supported language).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/messaging-policies-in-teams.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMessagingConfiguration -EnableVideoMessageCaptions $true\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Meeting Broadcast Policy to User PowerShell\nDESCRIPTION: Assigns a Teams meeting broadcast policy to a specific user. The `-PolicyName` parameter specifies which policy to assign. It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingBroadcastPolicy -Identity {user} -PolicyName DisabledBroadcastSchedulingPolicy -Verbose\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingBroadcastPolicy -Identity {user} -PolicyName EnableBroadcastSchedulingPolicy -Verbose\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Policy for Far End Camera Control (FECC) using PowerShell\nDESCRIPTION: This snippet illustrates how to create or modify a Teams meeting policy to configure far end camera control (FECC) settings for Teams Rooms resource accounts. The TeamsCameraFarEndPTZMode parameter determines who can control PTZ cameras connected to Teams Rooms during meetings. Valid values are Disabled, AutoAcceptAll, and AutoAcceptInTenant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-policies-audio-and-video.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nTo specify who can use far end camera control in a meeting, create and assign a new policy to a Teams Rooms resource account using the [New-CsTeamsMeetingPolicy](/powershell/module/teams/new-csteamsmeetingpolicy) cmdlet, or use [Set-CsTeamsMeetingPolicy](/powershell/module/teams/set-csteamsmeetingpolicy) to modify an existing one. Set the `TeamsCameraFarEndPTZMode` parameter to one of the following values:\n```\n\n----------------------------------------\n\nTITLE: Disabling Meeting Registration via PowerShell\nDESCRIPTION: This PowerShell script disables the meeting registration feature for a given Teams meeting policy. It uses the `Set-CsTeamsMeetingPolicy` cmdlet and sets the `-AllowMeetingRegistration` parameter to `$False`. This prevents users with this policy from requiring registration for their Teams meetings. The `<policy name>` needs to be replaced with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-meeting-registration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowMeetingRegistration $False\n```\n\n----------------------------------------\n\nTITLE: Creating a Compliance Recording Policy - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new compliance recording policy in Microsoft Teams.  The policy can be configured to enable or disable recording.  Parameters include the Identity (policy name), Enabled status, and a Description.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-recording-compliance.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTeamsComplianceRecordingPolicy -Identity TestComplianceRecordingPolicy -Enabled $true -Description \"Test policy created by tenant admin\"\n```\n\n----------------------------------------\n\nTITLE: Creating Call Queue with Callback based on Wait Time - PowerShell\nDESCRIPTION: This PowerShell example creates a new call queue with callback enabled, setting the wait time before offering callback to 60 seconds. The script also configures the DTMF tone for callback request, the text-to-speech prompt, and the email notification target. This utilizes the `New-CsCallQueue` cmdlet to define the call queue parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Callback Eligible After 60 seconds\" -UseDefaultMusicOnHold $true -LanguageID en-US -IsCallbackEnabled $true -CallbackRequestDtmf \"Tone1\" -WaitTimeBeforeOfferingCallbackInSecond 60 -CallbackOfferTextToSpeechPrompt \"If you would like to have a callback when an agent becomes available, press 1\" -CallbackEmailNotificationTarget <Team or DL GUID>\n```\n\n----------------------------------------\n\nTITLE: Enable Transcription for Global Policy using PowerShell\nDESCRIPTION: This PowerShell script enables transcription for calls for the global calling policy in Microsoft Teams. It uses the `Set-CsTeamsCallingPolicy` cmdlet to modify the `-AllowTranscriptionForCalling` parameter to `$true`. This allows transcription to be available for users covered by the global policy after their Teams calls end.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-recording-transcription-captions.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -AllowTranscriptionForCalling $true\n```\n\n----------------------------------------\n\nTITLE: Assign Emergency Calling Policy to User\nDESCRIPTION: This PowerShell command assigns a specific emergency calling policy to a user. It uses the `Grant-CsTeamsEmergencyCallingPolicy` cmdlet to apply the policy to the specified user identity. The policy name determines the settings applied to the user, such as security desk notification preferences.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-dynamic-emergency-calling.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsEmergencyCallingPolicy -Identity user1 -PolicyName SecurityDeskNotification\n```\n\n----------------------------------------\n\nTITLE: Set Federated Call Routing to Voicemail via PowerShell\nDESCRIPTION: This PowerShell script sets the `-InboundFederatedCallRoutingTreatment` parameter to route inbound federated calls directly to voicemail for users in the Global (default) Teams Calling Policy instance.  This ensures that federated calls are immediately sent to voicemail. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/inbound-call-routing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -InboundFederatedCallRoutingTreatment Voicemail\n```\n\n----------------------------------------\n\nTITLE: Run Teams Bootstrapper with Local MSIX\nDESCRIPTION: This command runs the Teams bootstrapper executable with the `-p` parameter to provision new teams and the `-o` parameter specifying the local path to the Teams MSIX file. This is useful for offline installations and reduces bandwidth usage. Replace `c:\\path\\to\\teams.msix` with the correct path.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-bulk-install-client.md#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n.\\teamsbootstrapper.exe -p -o \"c:\\path\\to\\teams.msix\"\n```\n\n----------------------------------------\n\nTITLE: Exempting Security Groups from Download Block - PowerShell\nDESCRIPTION: This PowerShell parameter, `-ExcludedBlockDownloadGroupIds`, allows users in specified security groups to bypass the download block policy, granting them permission to download meeting recordings and transcript files. Requires a comma-separated list of security group IDs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-download-meeting-recording.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n-ExcludedBlockDownloadGroupIds <comma separated security group IDs>\n```\n\n----------------------------------------\n\nTITLE: Displaying Full PSTN Usage Names PowerShell\nDESCRIPTION: This snippet displays the full names of the configured PSTN usages using the `(Get-CSOnlinePSTNUsage).usage` property. This avoids truncation issues with the standard `Get-CSOnlinePSTNUsage` output. It shows all the configured usages in a list.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n(Get-CSOnlinePSTNUsage).usage\n```\n\n----------------------------------------\n\nTITLE: Assign Hosted Voicemail Policy to User - PowerShell\nDESCRIPTION: This PowerShell cmdlet assigns a specific hosted voicemail policy to a user, overriding the default global policy. Before enabling users for hosted voicemail, it's necessary to ensure that the desired policy is applied.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-cloud-voicemail.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Identity \"User1\" | Grant-CsHostedVoicemailPolicy -PolicyName \"Tag:CloudVoiceMailUsers\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Policy with Comparison Operators in Get-CsOnlineUser\nDESCRIPTION: This snippet demonstrates how to use comparison operators (greater than or equal to `-ge`) to filter users based on assigned policies, such as `ExternalAccessPolicy`. This is useful for identifying users with policies that meet certain criteria.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_80\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser - Filter {ExternalAccessPolicy -ge \"xyz_policy\"}\n```\n\n----------------------------------------\n\nTITLE: PowerShell script to remove chat access using Graph API\nDESCRIPTION: This PowerShell script automates the process of removing chat access for a user using the Microsoft Graph API.  It installs necessary modules, connects to Microsoft Graph, creates or retrieves a client application with required permissions (Chat.ReadWrite.All), and then calls the RemoveAllAccessForUser API.  The script takes TenantId, UserId, and ThreadId as mandatory parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/security-remove-external-chat.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n    # Tenant id for the user whom the chat access is going to be removed\n    [Parameter(Mandatory=$true)]\n    [String]\n    $TenantId,\n \n    # User id for the user whom the chat access is going to be removed\n    [Parameter(Mandatory=$true)]\n    [String]\n    $UserId,\n \n    # Id of the chat that from which access will be removed\n    [Parameter(Mandatory=$true)]\n    [String]\n    $ThreadId\n)\n \n \n# These may not all be necessary in your environment\n# Install Microsoft.Graph.Authentication module for all users (requires admin rights)\nif (Get-Module -ListAvailable -Name Microsoft.Graph.Authentication) {\n    Write-Host \"Microsoft.Graph.Authentication module found.\" -ForegroundColor \"Green\"\n} \nelse {\n    Write-Host \"Microsoft.Graph.Authentication module not found. Installing\"\n    Install-Module Microsoft.Graph.Authentication -Scope AllUsers -Force \n}\n \n# Install Microsoft.Graph.Applications module for all users (requires admin rights)\nif (Get-Module -ListAvailable -Name Microsoft.Graph.Applications) {\n    Write-Host \"Microsoft.Graph.Applications module found.\" -ForegroundColor \"Green\"\n} \nelse {\n    Write-Host \"Microsoft.Graph.Application module not found. Installing\"\n    Install-Module Microsoft.Graph.Applications -Scope AllUsers -Force \n}\n \n# Install MSAL.PS module for all users (requires admin rights)\nif (Get-Module -ListAvailable -Name MSAL.PS) {\n    Write-Host \"MSAL module found.\"  -ForegroundColor \"Green\"\n} \nelse {\n    Write-Host \"MSAL module not found. Installing\"\n    Install-Module MSAL.PS -Scope AllUsers -Force \n}\n \n \n# Connect to graph and verify that a client application exists for this purpose - if not, create one\nConnect-MgGraph -Scopes \"Application.ReadWrite.All\", \"DelegatedPermissionGrant.ReadWrite.All\"\n \n# Get client app info\n$App = Get-MgApplication -Filter \"DisplayName eq 'RemoveAllAccessForUserApp'\"\n$createAppParams = @{\n    publicClient = @{\n\t\tredirectUris = \"https://login.microsoftonline.com/common/oauth2/nativeclient\"\n\t}\n}\n \n# If client app is not found. Create it\nif ($null -eq $App)\n{\n    Write-Host \"Client app not found. Creating new one.\" -ForegroundColor \"Yellow\"\n    $App = New-MgApplication -DisplayName 'RemoveAllAccessForUserApp' @createAppParams\n    Write-Host \"Client app created. Waiting for 5 seconds before continuing.\" -ForegroundColor \"Yellow\"\n    Start-Sleep -Seconds 5\n}\nelse \n{\n    $AppId = $App.AppId\n    Write-Host \"Client app with id '$AppId' found'\" -ForegroundColor \"Green\"\n}\n\n$ClientId = $App.AppId\n \n# Now that we have the ID for our client application, we can call the RemoveAccessForUser API...\n# Msal parameters required to get access token.\n$MsalParams = @{\n    ClientId = $ClientId\n    TenantId = $TenantId\n    Scopes   = 'Chat.ReadWrite.All'\n}\n \n \n```\n\n----------------------------------------\n\nTITLE: Getting Teams Messaging Configuration using PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves the current Teams messaging configuration.  It uses the `Get-CsTeamsMessagingConfiguration` cmdlet without any parameters.  This allows administrators to view the settings related to messaging policies, including whether video message captions are enabled or disabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/messaging-policies-in-teams.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsTeamsMessagingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Get Subscribed SKUs - PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of subscribed SKUs (Stock Keeping Units) for the Microsoft 365 tenant. This is used to verify available licenses for resource accounts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgSubscribedSku\n```\n\n----------------------------------------\n\nTITLE: Configuring Emergency Numbers for Healthcare - PowerShell\nDESCRIPTION: This snippet configures two emergency numbers, 911 and 450, and associates them with a location policy specifically for a US hospital named \"US-Hospital\". This allows healthcare providers to use both emergency numbers within their network.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-multiple-emergency-numbers.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n> $a = New-CsEmergencyNumber -DialString 911\n> $b = New-CsEmergencyNumber -DialString 450\n> Set-CsLocationPolicy -Identity US-Hospital -EmergencyNumbers @{add=$a,$b}\n```\n\n----------------------------------------\n\nTITLE: Remove On-Premises Line URI - Skype for Business Server PowerShell\nDESCRIPTION: This Skype for Business Server PowerShell command removes the `LineURI` attribute for a specified user. This step is crucial for migrating Direct Routing numbers assigned on-premises to Operator Connect.  It's important to coordinate with the Operator Connect operator before running this command as the phone number will be temporarily out of service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-configure.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUser -Identity <user> -LineURI $null\n```\n\n----------------------------------------\n\nTITLE: Creating Online Application Instance - PowerShell\nDESCRIPTION: This cmdlet creates a new online application instance in Microsoft Teams. Used for creating resource accounts for Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineApplicationInstance\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Time Zone - PowerShell\nDESCRIPTION: This cmdlet retrieves a list of supported time zones for Auto Attendants in Microsoft Teams. This is important to know when configuring time-based routing. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_44\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAutoAttendantSupportedTimeZone\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Groups - PowerShell\nDESCRIPTION: These commands create two agent groups, \"Technical Support\" and \"Sales Team\", using New-CsRgsAgentGroup. Parameters include the parent service ID ($serviceId), the group name, AgentAlertTime, ParticipationPolicy, RoutingMethod, and AgentsByUri (specifying the SIP URIs of the agents).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\n$AGSupport = New-CsRgsAgentGroup -Parent $serviceId -Name \"Technical Support\" [-AgentAlertTime \"20\"] [-ParticipationPolicy \"Informal\"] [-RoutingMethod LongestIdle] [-AgentsByUri(\"sip:agent1@contoso.com\", \"sip:agent2@contoso.com\")]\n$AGSales = New-CsRgsAgentGroup -Parent $serviceId -Name \"Sales Team\" [-AgentAlertTime \"20\"] [-ParticipationPolicy \"Informal\"] [-RoutingMethod LongestIdle] [-AgentsByUri(\"sip:bob@contoso.com\", \"sip:alice@contoso.com\")]\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Default Service Number - PowerShell\nDESCRIPTION: This PowerShell snippet uses the `Unregister-CsOnlineDialInConferencingServiceNumber` cmdlet to unassign a default service number from a conference bridge. It requires the `BridgeName` and the `RemoveDefaultServiceNumber` parameters. Skype for Business Online PowerShell module is a prerequisite.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nUnregister-CsOnlineDialInConferencingServiceNumber -BridgeName \"Conference Bridge\" -RemoveDefaultServiceNumber 8005551234\n```\n\n----------------------------------------\n\nTITLE: Set Anonymous User Authentication Method (None)\nDESCRIPTION: This PowerShell snippet configures a Teams meeting policy to prevent unverified anonymous attendees from verifying their identity to join meetings. This is achieved by setting the `AnonymousUserAuthenticationMethod` parameter to `None`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/anonymous-users-in-meetings.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AnonymousUserAuthenticationMethod None\n```\n\n----------------------------------------\n\nTITLE: Remove Direct Routing Number Assignment - PowerShell\nDESCRIPTION: This Teams PowerShell Module command removes a specific phone number assignment of type DirectRouting from a user. This step is part of the process of migrating from Direct Routing to Operator Connect. The variables `<user>` and `<pn>` need to be substituted with the actual user identity and phone number respectively.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-configure.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPhoneNumberAssignment -Identity <user> -PhoneNumber <pn> -PhoneNumberType DirectRouting\n```\n\n----------------------------------------\n\nTITLE: Creating a New Call Park Orbit Range Using PowerShell\nDESCRIPTION: This PowerShell command creates a new Call Park orbit range. It requires specifying a unique name for the orbit range, the starting and ending numbers of the range, and the FQDN or service ID of the Application service hosting the Call Park application. The NumberRangeStart and NumberRangeEnd parameters define the range of extension numbers to be used for parking calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-call-park-orbit-range.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallParkOrbit -Identity <name of orbit range> -NumberRangeStart <first number in orbit range> -NumberRangeEnd <last number in orbit range> -CallParkService <FQDN or service ID of the Application service that hosts the Call Park application>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Graph Module\nDESCRIPTION: This PowerShell command installs the Microsoft Graph module, force installing it and allowing clobbering to ensure the latest version. It's necessary for interacting with Microsoft Graph APIs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name Microsoft.Graph -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Retrieving Auto Attendant Information - PowerShell\nDESCRIPTION: This cmdlet retrieves information about an existing Auto Attendant in Microsoft Teams. You can retrieve a specific Auto Attendant by its identity or retrieve a list of all Auto Attendants. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Modifying Call Queue with Callback based on Agent Ratio - PowerShell\nDESCRIPTION: This PowerShell example modifies an existing call queue to enable callback when there are two times more calls than agents. The script also configures the DTMF tone for callback request, the text-to-speech prompt, and the email notification target. This utilizes the `Set-CsCallQueue` cmdlet to modify call queue settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -IsCallbackEnabled $true -CallbackRequestDtmf\n \"Tone1\" -CallToAgentRatioThresholdBeforeOfferingCallback 2 -CallbackOfferTextToSpeechPrompt \"If you would like to have a callback when an agent becomes available, press 1\" -CallbackEmailNotificationTarget <Team or DL GUID>\n```\n\n----------------------------------------\n\nTITLE: Allow Private/Invite-Only Town Hall Recording Publishing via PowerShell\nDESCRIPTION: This PowerShell script configures the `CsTeamsEventsPolicy` to allow organizers to publish private and invite-only town hall recordings. It sets the `-AllowedTownhallTypesForRecordingPublish` parameter to `EveryoneInCompanyIncludingGuests`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-vod-publishing.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowedTownhallTypesForRecordingPublish EveryoneInCompanyIncludingGuests\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Option - PowerShell\nDESCRIPTION: This cmdlet creates a new menu option for Auto Attendants in Microsoft Teams.  Menu options define the actions taken when a caller presses a specific key. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendantMenuOption\n```\n\n----------------------------------------\n\nTITLE: Disable E2EE for Tenant via PowerShell\nDESCRIPTION: This PowerShell command disables end-to-end encryption (E2EE) for the entire tenant using the global policy. It uses the `Grant-CsTeamsEnhancedEncryptionPolicy` cmdlet to set the `CallingEndtoEndEncryptionEnabledType` to `Disabled`, preventing users from enabling E2EE in their Teams settings. This reverts any prior changes to the global policy regarding E2EE.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-end-to-end-encryption.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsEnhancedEncryptionPolicy -Identity Global -CallingEndtoEndEncryptionEnabledType Disabled\n```\n\n----------------------------------------\n\nTITLE: Remove a Blocked Number Pattern via PowerShell\nDESCRIPTION: This PowerShell command removes a blocked number pattern from the tenant list, allowing calls from the previously blocked number. It requires the identity of the pattern to be removed, which can be obtained using the Get-CsInboundBlockedNumberPattern cmdlet. This example removes the pattern named \"BlockNumber1\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsInboundBlockedNumberPattern -Identity \"BlockNumber1\"\n```\n\n----------------------------------------\n\nTITLE: Assign Calling Plan Number to User with PowerShell\nDESCRIPTION: This PowerShell snippet assigns a Calling Plan phone number to a specific user in Microsoft Teams. It uses the `Set-CsPhoneNumberAssignment` cmdlet, requiring the user's identity (UPN), the phone number to assign, and the PhoneNumberType parameter set to 'CallingPlan'. Ensure the user has a Calling Plan license before executing this command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-change-or-remove-a-phone-number-for-a-user.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity <user> -PhoneNumber <phone number> -PhoneNumberType CallingPlan\n```\n\n----------------------------------------\n\nTITLE: Remove a User Account - Skype for Business PowerShell\nDESCRIPTION: This code snippet demonstrates how to permanently remove a Skype for Business user account using the `Disable-CsUser` cmdlet. This action cannot be reversed, and all settings associated with the account will be lost. A new account must be created using `Enable-CsUser`. The `Identity` parameter specifies the user to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/user-accounts/user-accounts.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisable-CsUser -Identity \"Ken Myer\"\n```\n\n----------------------------------------\n\nTITLE: Create Call Queue with Teams Channel - PowerShell\nDESCRIPTION: This example demonstrates creating a call queue associated with a Teams channel. It uses default music on hold and enables conference mode. ChannelId and ChannelUserObjectId are required to link the queue to a specific channel.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -ChannelId <Channel GUID> -ChannelUserObjectId <Team Owner GUID> -UseDefaultMusicOnHold $true -ConferenceMode $true\n```\n\n----------------------------------------\n\nTITLE: Create Call Queue with Round Robin Routing - PowerShell\nDESCRIPTION: This example creates a new call queue with Round Robin routing, enables presence-based routing, allows agents to opt-out, and sets the agent alert time to 60 seconds.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -RoutingMethod RoundRobin -PresenceBasedRouting $true -AllowOptOut $true -AgentAlertTime 60\n```\n\n----------------------------------------\n\nTITLE: Disable Call Data Connector (Global Scope)\nDESCRIPTION: This PowerShell command disables Call Data Connector at the global scope. This will stop Skype for Business Server from uploading call data to the cloud. It requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCloudCallDataConnectorConfiguration -Identity \"global\" -EnableCallDataConnector $False\n```\n\n----------------------------------------\n\nTITLE: Getting Microsoft 365 Subscribed SKUs via PowerShell\nDESCRIPTION: This snippet retrieves a list of subscribed SKUs in the Microsoft 365 tenant, including the SkuPartNumber and SkuId. This is useful for identifying users by their license type using Microsoft Graph PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nGet-MgSubscribedSku | Select-Object -Property SkuPartNumber,SkuId\n```\n\n----------------------------------------\n\nTITLE: Get Service Principals - PowerShell\nDESCRIPTION: This command retrieves information about all service principals in the connected Microsoft 365 or Office 365 tenant using the Get-MsolServicePrincipal cmdlet.  The output includes properties like AppPrincipalId, DisplayName, and ServicePrincipalName.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MsolServicePrincipal\n```\n\n----------------------------------------\n\nTITLE: Updating User Licenses Simultaneously via PowerShell\nDESCRIPTION: This snippet demonstrates how to use the `Set-MgUserLicense` PowerShell cmdlet to update a user's licenses by adding new licenses and removing old ones in a single operation.  This is crucial to maintain phone number assignments and PSTN calling capabilities in Microsoft Teams. It prevents the phone number from being unassigned during the license change process. Dependencies include the Microsoft Graph PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/phone-numbers-licensing-changes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-MgUserLicense -UserId <user_id> -AddLicenses @(Microsoft.Graph.PowerShell.Models.MicrosoftGraphAssignedLicense) -RemoveLicenses @(Microsoft.Graph.PowerShell.Models.MicrosoftGraphAssignedLicense)\n```\n\n----------------------------------------\n\nTITLE: Add Discovery Management Role Member\nDESCRIPTION: This PowerShell command adds a user to the \"Discovery Management\" role group in Exchange. This grants the specified user (e.g., kenmyer) the necessary permissions to perform discovery searches and manage eDiscovery cases within Exchange.  It ensures the user can access and search archived data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/sharepoint-to-search-for-archived-data.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-RoleGroupMember \"Discovery Management\" -Member \"kenmyer\"\n```\n\n----------------------------------------\n\nTITLE: Modify Call Queue with Agent Routing Settings - PowerShell\nDESCRIPTION: This example demonstrates how to modify an existing call queue with specific agent routing configurations using the Set-CsCallQueue cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -RoutingMethod Attendant -PresenceBasedRouting $false -AllowOptOut $false -AgentAlertTime 20\n```\n\n----------------------------------------\n\nTITLE: Getting Online Audio File - PowerShell\nDESCRIPTION: This cmdlet retrieves information about an audio file in Microsoft Teams.  Used for managing audio prompts for Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_39\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineAudioFile\n```\n\n----------------------------------------\n\nTITLE: Listing all Teams Mobility Policy Options with PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all available Teams Mobility Policies within the tenant. It is useful for confirming that policies have been created successfully or for reviewing existing policy configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsMobilityPolicy\n```\n\n----------------------------------------\n\nTITLE: Get Available Licensing Plans PowerShell\nDESCRIPTION: This PowerShell command retrieves and displays all available licensing plans within your organization. It allows administrators to identify the specific AccountSkuId required for assigning or removing licenses. The AccountSkuId is later used to disable services for a set of users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/user-access.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgSubscribedSku\n```\n\n----------------------------------------\n\nTITLE: Get Groups Assigned a Specific Teams Meeting Policy using PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all groups that have a specific Teams meeting policy assigned. This is useful for identifying which groups are subject to a particular policy and for verifying policy distribution across the organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsGroupPolicyAssignment -PolicyType TeamsMeetingPolicy\n```\n\n----------------------------------------\n\nTITLE: Importing Online Audio File - PowerShell\nDESCRIPTION: This cmdlet imports an audio file into Microsoft Teams.  Used for uploading audio prompts for Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_40\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsOnlineAudioFile\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Meeting Transcripts via MS Graph API (HTTP)\nDESCRIPTION: This example demonstrates how to retrieve links to all available Teams meeting transcripts using the meetingOrganizerUserId, startDateTime, and endDateTime filters through Microsoft Graph API. Requires OnlineMeetingTranscript.Read.All.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/users/{id}/onlineMeetings/getAllTranscripts(meetingOrganizerUserId='{userId}',startDateTime={startDateTime},endDateTime={endDateTime})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with PowerShell\nDESCRIPTION: This snippet connects to Microsoft Teams using the `Connect-MicrosoftTeams` cmdlet. It requires the Teams PowerShell module to be installed. The user will be prompted to sign in with admin credentials.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Handling Simplified URL in PowerShell\nDESCRIPTION: This snippet handles the simplified URL.  It prompts the user for the simplified URL, and if provided, ensures that it starts with `https://`, and adds it to the redirect URLs. The URL is trimmed of trailing slashes. It uses `IsNullOrWhiteSpace` to skip this step if no URL is provided.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Handling entry for simplifiedUrl.\n$simplifiedUrl = Read-Host -Prompt \"Enter Admin Control Panel application's simplified URL eg. https://admin.contoso.com. Press ENTER to skip \"\n\nif (![string]::IsNullOrWhiteSpace($simplifiedUrl))\n{\n    if ($simplifiedUrl.StartsWith('http://'))\n    {\n        $simplifiedUrl = $simplifiedUrl.Replace('http://', '')\n    }\n\n    if (!$simplifiedUrl.StartsWith('https://'))\n    {\n        $simplifiedUrl = \"https://\" + $simplifiedUrl\n    }\n\n    $simplifiedUrl = $simplifiedUrl.TrimEnd('/')\n\n    $redirectUrls += $simplifiedUrl + \"/login\"\n    $redirectUrls += $simplifiedUrl + \"/logout\"\n    $redirectUrls += $simplifiedUrl + \"/macp/portal_oauth_iframe.html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Call Hold Policy\nDESCRIPTION: This PowerShell cmdlet allows administrators to configure call hold policies in Microsoft Teams.  This policy specifies a custom audio file to play while calls are on hold. The cmdlet requires the Teams module for PowerShell.  Refer to Microsoft Teams PowerShell documentation for specific parameters and usage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallHoldPolicy\n```\n\n----------------------------------------\n\nTITLE: Managing Audio Conferencing Bridges with PowerShell\nDESCRIPTION: This snippet demonstrates how to manage audio conferencing bridges using PowerShell with the `Set-CsOnlineDialInConferencingTenantSettings` cmdlet. The parameters control name recording, entry/exit announcement type, and PIN length.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-settings-for-an-audio-conferencing-bridge.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n-EnableNameRecording\n-EntryExitAnnouncementsType\n-EnableNameRecording\n-PinLength\n```\n\n----------------------------------------\n\nTITLE: Enable Live Streaming with PowerShell\nDESCRIPTION: This PowerShell script enables live streaming for Teams meetings and webinars for users assigned the specified meeting policy. It uses the `Set-CsTeamsMeetingPolicy` cmdlet with the `-LiveStreamingMode` parameter set to `Enabled`.  The `Identity` parameter specifies which policy to modify. In this case, it's the global policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/stream-teams-meetings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -LiveStreamingMode Enabled\n```\n\n----------------------------------------\n\nTITLE: Change a Teams Call Park Policy Assignment for a Group\nDESCRIPTION: This PowerShell snippet changes a group's Teams call park policy to a new policy and updates the assignment ranking. The group is identified by its GroupId, and the PolicyName and Rank are updated accordingly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsCallParkPolicy -Group 566b8d39-5c5c-4aaa-bc07-4f36278a1b38 -PolicyName SupportCallPark -Rank 3\n```\n\n----------------------------------------\n\nTITLE: Creating a Prompt - PowerShell\nDESCRIPTION: This cmdlet creates a new prompt for Auto Attendants in Microsoft Teams.  Prompts are audio messages played to callers. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendantPrompt\n```\n\n----------------------------------------\n\nTITLE: Creating a New Teams Meeting Branding Theme\nDESCRIPTION: Illustrates how to create a new Teams Meeting Branding Theme using the New-CsTeamsMeetingBrandingTheme cmdlet.  It sets various parameters such as display name, logo image URIs (light and dark), background image URIs (light and dark), brand accent color, enabled status, and identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_84\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsMeetingBrandingTheme -DisplayName \"exampleTheme\" -LogoImageLightUri \"https://contoso.com/light.jpg\" -LogoImageDarkUri \"https://contoso.com/dark.jpg\" -BackgroundImageLightUri \"https://contoso.com/backgroundlight.jpg\" -BackgroundImageDarkUri \"https://contoso.com/backgrounddark.jpg\" -BrandAccentColor \"#000000\" -Enabled $true -Identity \"exampleTheme\"\n```\n\n----------------------------------------\n\nTITLE: Create Call Queue with Distribution List - PowerShell\nDESCRIPTION: This example creates a new call queue and assigns distribution lists to it.  It uses a custom audio file for music on hold and enables conference mode.  The MusicOnHoldAudioFileId parameter requires a valid file ID obtained via Import-CsOnlineAudioFile.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -DistributionLists @(\"Distribution List 01 GUID\", \"Distribution List 02 GUID\") -UseDefaultMusicOnHold $false -MusicOnHoldAudioFileId <FILE ID> -ConferenceMode $true\n```\n\n----------------------------------------\n\nTITLE: Enable Live Event Scheduling in Teams - PowerShell\nDESCRIPTION: This snippet demonstrates how to enable live event scheduling in Teams using the CsTeamsMeetingBroadcastPolicy cmdlet. Setting the `-AllowBroadcastScheduling` parameter to True allows users to schedule live events within Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/plan-for-teams-live-events.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nThe [**CsTeamsMeetingBroadcastPolicy**](/powershell/module/teams/set-csteamsmeetingbroadcastpolicy) **`-AllowBroadcastScheduling`** parameter = True\n```\n\n----------------------------------------\n\nTITLE: Adding Emergency Callback Number - PowerShell\nDESCRIPTION: This PowerShell command adds the emergency callback number '+1425555433' to the Shared Calling Routing Policy named 'Seattle'. It uses the Set-CsTeamsSharedCallingRoutingPolicy cmdlet to modify the existing policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsSharedCallingRoutingPolicy -Identity Seattle -EmergencyNumbers @{add='+1425555433'}\n```\n\n----------------------------------------\n\nTITLE: Enabling Voicemail Routing using PowerShell\nDESCRIPTION: This PowerShell script enables the routing of inbound calls to voicemail by modifying the Global Teams Calling Policy. The script uses the `Set-CsTeamsCallingPolicy` cmdlet with the `-AllowVoicemail` parameter set to `AlwaysEnabled`.  Calls will always forward to voicemail after ringing for 30 seconds.  Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-phone-system-voicemail.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -AllowVoicemail AlwaysEnabled\n```\n\n----------------------------------------\n\nTITLE: Create SIP Gateway Service Principal - MS Graph Module - PowerShell\nDESCRIPTION: This snippet creates a new SIP Gateway service principal using the MS Graph module. It uses the AppId of the SIP Gateway. It requires the MS Graph module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-MgServicePrincipal -AppId \"582b2e88-6cca-4418-83d2-2451801e1d26\"\n```\n\n----------------------------------------\n\nTITLE: Defining a CLS Provider\nDESCRIPTION: This PowerShell code snippet demonstrates how to define a new CLS provider using the `New-CsClsProvider` cmdlet.  It requires specifying a name, type, level, and flags for the provider. The created provider object can then be used in a CLS scenario.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$<variableName> = New-CsClsProvider -Name <provider component> -Type <log type> -Level <log level detail type> -Flags <provider trace log flags>\n```\n\n----------------------------------------\n\nTITLE: Modifying Call Queue with Callback based on Wait Time - PowerShell\nDESCRIPTION: This PowerShell example modifies an existing call queue to enable callback, setting the wait time before offering callback to 60 seconds. The script also configures the DTMF tone for callback request, the text-to-speech prompt, and the email notification target. This utilizes the `Set-CsCallQueue` cmdlet to update the call queue parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -IsCallbackEnabled $true -CallbackRequestDtmf \"Tone1\" -WaitTimeBeforeOfferingCallbackInSecond 60 -CallbackOfferTextToSpeechPrompt \"If you would like to have a callback when an agent becomes available, press 1\" -CallbackEmailNotificationTarget <Team or DL GUID>\n```\n\n----------------------------------------\n\nTITLE: Set Audio Conferencing Number via PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set or change the default audio conferencing phone number for a user using the `Set-CsOnlineDialInConferencingUser` cmdlet. It uses the `ServiceNumber` or `TollFreeServiceNumber` parameters. The Microsoft Teams PowerShell module is required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-the-phone-numbers-included-on-invites-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingUser\n```\n\n----------------------------------------\n\nTITLE: Create User-Specific Teams Files Policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new Teams Files policy named `UserPolicy` with the `NativeFileEntryPoints` parameter set to `Disabled`.  This policy can then be assigned to specific users. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-off-teams-native-file-upload-policy.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsFilesPolicy -Identity UserPolicy -NativeFileEntryPoints Disabled\n```\n\n----------------------------------------\n\nTITLE: Create Archiving Configuration - PowerShell\nDESCRIPTION: This cmdlet creates a new set of instant messaging (IM) archiving settings. These settings are used to enable or disable the automatic saving of IM sessions, and optionally block instant messages that cannot be archived based on the specified configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/options.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsArchivingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Enable Cloud Recording for Specific Users\nDESCRIPTION: These PowerShell commands create a new Teams meeting policy with cloud recording enabled and then assign that policy to a specific user. Replace \"Your Policy Name\" and \"user@contoso.onmicrosoft.com\" with the appropriate values. The MicrosoftTeams module must be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-recording.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity \"Your Policy Name\" -AllowCloudRecording $true\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -Identity \"user@contoso.onmicrosoft.com\" -PolicyName \"Your Policy Name\"\n```\n\n----------------------------------------\n\nTITLE: Import Teams PowerShell Module and Connect\nDESCRIPTION: These commands import the MicrosoftTeams module and connect to Microsoft Teams using provided credentials.  This is a necessary first step to manage Teams via PowerShell. Requires the MicrosoftTeams module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n  # When using Teams PowerShell Module\n\n   Import-Module MicrosoftTeams\n   $credential = Get-Credential\n   Connect-MicrosoftTeams -Credential $credential\n```\n\n----------------------------------------\n\nTITLE: Modify Call Queue with Teams Channel - PowerShell\nDESCRIPTION: This example modifies an existing call queue to associate it with a Teams channel. It uses default music on hold and enables conference mode. Requires valid Identity, ChannelId, and ChannelUserObjectId.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -ChannelId <Channel GUID> -ChannelUserObjectId <Team Owner GUID> -UseDefaultMusicOnHold $true -ConferenceMode $true\n```\n\n----------------------------------------\n\nTITLE: Getting Subscribed SKU - PowerShell\nDESCRIPTION: This cmdlet retrieves information about subscribed SKUs in Microsoft Teams. Used to check for Teams Phone Resource Account licenses.  Requires the Microsoft Graph PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_35\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgSubscribedSku\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Channel Policy via PowerShell\nDESCRIPTION: This PowerShell command sets the Teams channel policy for a specific user or group, allowing administrators to control channel-related settings using the `Set-CsTeamsChannelsPolicy` cmdlet.  It requires the Teams PowerShell module to be installed and the administrator to be authenticated. The specific parameters and their values will dictate the allowed channel behaviors.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsChannelsPolicy\n```\n\n----------------------------------------\n\nTITLE: Exporting Online Audio File - PowerShell\nDESCRIPTION: This cmdlet exports an audio file from Microsoft Teams.  Used for backing up or transferring audio prompts for Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_41\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsOnlineAudioFile\n```\n\n----------------------------------------\n\nTITLE: Bulk Deployment of New Teams via Local Path\nDESCRIPTION: This command installs the new Teams client using the teamsbootstrapper.exe and an MSIX package located on a local path. The -p flag likely indicates a provision or install command, and -o specifies the path to the MSIX package. This is useful for minimizing bandwidth usage during the initial installation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_3\n\nLANGUAGE: Command Line\nCODE:\n```\n.\teamsbootstrapper.exe -p -o \"c:\\path\\to\\teams.msix\"\n```\n\n----------------------------------------\n\nTITLE: Change emergency location place using PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies an existing place within an emergency location in Microsoft Teams. It requires the Microsoft Teams PowerShell module to be installed and a connection to the Teams service.  It's crucial to avoid setting the ELIN attribute to an empty or null string to prevent errors.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/add-change-remove-emergency-place-organization.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee [Set-CsOnlineLisLocation](/powershell/module/teams/set-csonlinelislocation). If you need to update the Emergency Location Identification Number (ELIN), don't set the ELIN attribute to an empty or null string - otherwise, you will receive an error.\n```\n\n----------------------------------------\n\nTITLE: Create External Access Policy for Teams Consumer Access - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new external access policy named ContosoExternalAccess that enables Teams consumer access by setting the EnableTeamsConsumerAccess parameter to $true. This cmdlet requires the MicrosoftTeams module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsExternalAccessPolicy -Identity ContosoExternalAccess -EnableTeamsConsumerAccess $true\n```\n\n----------------------------------------\n\nTITLE: Set AppLocker Policy - Group Policy - PowerShell\nDESCRIPTION: This PowerShell command sets the AppLocker policy in a Group Policy environment using the XML file. It uses the LDAP information to target the appropriate Group Policy object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-meeting-addin-security-with-outlook.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AppLockerPolicy -XMLPolicy .\\TMA.xm -LDAP \"<LDAP Info for Group Policy>\"\n```\n\n----------------------------------------\n\nTITLE: Set Voicemail Policy using PowerShell\nDESCRIPTION: The `Set-CsOnlineVoicemailPolicy` cmdlet is used to configure voicemail policies at the organizational level. These policies control features like transcription and transcription translation. The cmdlet requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-default-language-for-greetings-and-emails.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n[Set-CsOnlineVoicemailPolicy](/powershell/module/teams/set-csonlinevoicemailpolicy)\n```\n\n----------------------------------------\n\nTITLE: Enable entry/exit announcements for Teams meetings with PowerShell\nDESCRIPTION: This PowerShell snippet enables entry and exit announcements for Microsoft Teams meetings. It uses the `Set-CsOnlineDialInConferencingTenantSettings` cmdlet with the `-EnableEntryExitNotifications` parameter set to `$true`. Participants will be notified when others join or leave the meeting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-on-or-off-entry-and-exit-announcements-for-meetings-in-teams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingTenantSettings -EnableEntryExitNotifications $true \n```\n\n----------------------------------------\n\nTITLE: Creating a Teams Call Hold Policy with Streaming Source URL (PowerShell)\nDESCRIPTION: This snippet demonstrates how to create a new Teams Call Hold Policy that references a streaming source URL for Music on Hold.  The New-CsTeamsCallHoldPolicy cmdlet is used, specifying the identity, StreamingSourceUrl, and StreamingSourceAuthType. The StreamingSourceAuthType parameter specifies the authentication type for the streaming source.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/music-on-hold.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> New-CsTeamsCallHoldPolicy -Identity 'StreamingMoH1' -StreamingSourceUrl 'https://teams-streaming.easyonholdcloud.com/08297e2a-61bf-480c-b7b4-0576fc3ca6ce' -StreamingSourceAuthType AzureAd\n```\n\n----------------------------------------\n\nTITLE: Configure Hosted Voicemail Policy - PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies the global hosted voicemail policy to route voicemail to the Cloud Voicemail service. It sets the destination FQDN to the Cloud Voicemail service and specifies the organization's default domain, ensuring voicemails are properly handled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-cloud-voicemail.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsHostedVoicemailPolicy -Identity Global -Description \"Global Cloud Voicemail Policy\" -Destination exap.um.outlook.com -Organization YourDefaultDomain.onmicrosoft.com\n```\n\n----------------------------------------\n\nTITLE: Setting Meeting Chat Policy - InMeetingOnlyForAll - PowerShell\nDESCRIPTION: This PowerShell script configures the Teams meeting policy to make chat available only during meetings for users with the assigned policy. It uses the `Set-CsTeamsMeetingPolicy` cmdlet with the `-MeetingChatEnabledType` parameter set to `EnabledInMeetingOnlyForAll`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-meeting-chat.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -MeetingChatEnabledType EnabledInMeetingOnlyForAll\n```\n\n----------------------------------------\n\nTITLE: Set Busy Options to Unanswered Settings via PowerShell\nDESCRIPTION: This PowerShell script sets the `-BusyOnBusyEnabledType` parameter to route incoming calls based on the user's unanswered settings when the user is already in a call or has a call on hold. The script applies to users in the global policy instance.  Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/inbound-call-routing.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -BusyOnBusyEnabledType Unanswered\n```\n\n----------------------------------------\n\nTITLE: Creating a Carrier Trunk using New-CSOnlinePSTNGateway\nDESCRIPTION: This PowerShell command creates a new carrier trunk in the carrier tenant. The FQDN, SIP signaling port, and ForwardPAI parameters are specified. This trunk will serve as the basis for derived trunks in customer tenants.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-sbc-multiple-tenants.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CSOnlinePSTNGateway -FQDN sbc1.adatum.biz -SIPSignalingport 5068 -ForwardPAI $true\n```\n\n----------------------------------------\n\nTITLE: Set Dial-Out Policy on Tenant Level - PowerShell\nDESCRIPTION: This PowerShell cmdlet sets the dial-out policy at the tenant level, affecting all users who do not have a specific policy assigned to them. The policy name determines the restrictions on outbound calls for audio conferencing and PSTN calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/outbound-calling-restriction-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsDialoutPolicy -PolicyName <policy name>  -Global \n```\n\n----------------------------------------\n\nTITLE: Granting a Teams Call Hold Policy to a User (PowerShell)\nDESCRIPTION: This snippet shows how to assign a Teams Call Hold Policy to a specific user using the Grant-CsTeamsCallHoldPolicy cmdlet.  The policy name and user identity are specified to apply the custom Music on Hold settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/music-on-hold.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> Grant-CsTeamsCallHoldPolicy -PolicyName \"CustomMoH1\" -Identity user1@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Setting PSTN Usages with PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set PSTN usages using the `Set-CsOnlinePstnUsage` cmdlet. Multiple usages can be specified by separating each with a comma. This is a prerequisite step for enabling Location-Based Routing for users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-enable.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlinePstnUsage -Usage <usages>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlinePstnUsage -Usage \"Long Distance\", \"Local\", \"Internal\"\n```\n\n----------------------------------------\n\nTITLE: Re-enable a User Account - Skype for Business PowerShell\nDESCRIPTION: This code snippet shows how to re-enable a previously disabled Skype for Business user account using the `Set-CsUser` cmdlet. It sets the `Enabled` property to `$True` for the specified user, restoring access to the account. The `Identity` parameter identifies the user to re-enable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/user-accounts/user-accounts.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUser -Identity \"Ken Myer\" -Enabled $True\n```\n\n----------------------------------------\n\nTITLE: Configure IP Phone Policy SignInMode using PowerShell\nDESCRIPTION: This PowerShell command configures the `SignInMode` parameter within the `New-CsTeamsIPPhonePolicy` cmdlet. This parameter determines the applications available on the phone device based on the assigned license (Personal, Shared Device, or Rooms Pro). The different modes (UserSignIn, CommonAreaPhoneSignIn, and MeetingSignIn) dictate which apps are enabled on the device.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/phones/plan-device-deployment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsIPPhonePolicy #-SignInMode\n```\n\n----------------------------------------\n\nTITLE: Modifying a Network Region using PowerShell\nDESCRIPTION: Modifies an existing network region in Skype for Business Server. The `Set-CsNetworkRegion` cmdlet is used to update the properties of a network region, such as the `CentralSite` or `Description`. The `Identity` parameter specifies the name of the region to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-network.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsNetworkRegion -Identity <String> -CentralSite <String>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsNetworkRegion -Identity NorthAmerica -CentralSite CHICAGO -Description \"North American Region\"\n```\n\n----------------------------------------\n\nTITLE: Assign the new policy to users - PowerShell\nDESCRIPTION: This PowerShell command assigns the newly created Audio Conferencing Routing policy to a specific user. The `Identity` parameter specifies the user to whom the policy is assigned. The `PolicyName` parameter defines which policy to apply to the specified user, ensuring that outbound calls from their meetings are routed according to the policy's settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-conferencing-configure.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineAudioConferencingRoutingPolicy -Identity <identity of the organizer of the meeting> -PolicyName \"International Policy\"\n```\n\n----------------------------------------\n\nTITLE: Remove Voice Routing Policy - PowerShell\nDESCRIPTION: This PowerShell command removes the assigned voice routing policy from a user.  It uses the Grant-CsVoiceRoutingPolicy cmdlet with a null policy name to achieve this.  This step is necessary when migrating from Teams Phone with on-premises PSTN connectivity in Skype for Business Server to Direct Routing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-migrating.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsVoiceRoutingPolicy -PolicyName $NULL -Identity <UPN> \n\n```\n\n----------------------------------------\n\nTITLE: Create Teams SIP Gateway Service Principal - Azure AD Module\nDESCRIPTION: This snippet creates a new Teams SIP Gateway service principal using the Azure AD module. It is required for bulk device sign-in scenarios. It uses the AppId. It requires the AzureAD module to be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-AzureADServicePrincipal -AppId \"61c8fd69-c13e-4ee6-aaa6-24ff71c09bca\"\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token with MSAL in PowerShell\nDESCRIPTION: This code snippet uses the Get-MsalToken cmdlet to acquire an access token for Microsoft Graph. It assumes that the $MsalParams variable is defined elsewhere with the necessary authentication parameters. The resulting access token is stored in the $AccessToken variable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/security-remove-external-chat.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$MsalResponse = Get-MsalToken @MsalParams\n$AccessToken  = $MsalResponse.AccessToken\n```\n\n----------------------------------------\n\nTITLE: Searching CLS Logs with Specified Components - PowerShell\nDESCRIPTION: This PowerShell command searches the Centralized Logging Service logs for entries containing specific components. It defines the components to search for and specifies the output file path where the search results will be saved. The search covers all computers and pools in the deployment for the last 30 minutes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Components <components to search on> -OutputFilePath <fully qualified path to output logs>\n```\n\n----------------------------------------\n\nTITLE: Modify Caller ID Policy - PowerShell\nDESCRIPTION: This PowerShell snippet modifies an existing caller ID policy named 'UKAA'. It updates the description of the policy to 'UK Main office'. This cmdlet allows modification of various settings within an existing caller ID policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/caller-id-policies.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallingLineIdentity -Identity \"UKAA\" -Description \"UK Main office\"\n```\n\n----------------------------------------\n\nTITLE: Updating Microsoft Entra User Phone Attributes with PowerShell\nDESCRIPTION: This code snippet shows how to update a Microsoft Entra user's phone attributes (BusinessPhones) using the Update-MgUser cmdlet in PowerShell. The phone number and extension are combined in various formats. The example requires the Microsoft Graph PowerShell module to be installed and assumes you have the necessary permissions to update user attributes in your Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/business-voice-create-auto-attendant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-MgUser -UserId usern@domain.com -BusinessPhones \"+15555555678;ext=5678\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-MgUser -UserId usern@domain.com -BusinessPhones \"+15555555678x5678\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-MgUser -UserId usern@domain.com -BusinessPhones \"x5678\"\n```\n\n----------------------------------------\n\nTITLE: Setting User License - PowerShell\nDESCRIPTION: This cmdlet assigns or removes a license from a user in Microsoft Teams. Used to assign Teams Phone Resource Account licenses. Requires the Microsoft Graph PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_36\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-MgUserLicense\n```\n\n----------------------------------------\n\nTITLE: Configure 'Who can present' meeting policy in Teams Admin Center\nDESCRIPTION: This snippet details how to configure the 'Who can present' meeting policy within the Microsoft Teams admin center. This setting determines the default value for who can present in meetings created by users.  It doesn't enforce the setting but rather provides a default option unless a sensitivity label is applied. Steps include navigating to Meeting policies, selecting a policy to edit, choosing a value for 'Who can present', and saving the changes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-meeting-presentation-experience.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n1. In the Teams admin center, expand **Meetings**, and then select **Meeting policies**.\n2. Select the policy that you want to edit.\n3. In the **Meeting join & lobby** section, select a value for **Who can present**.\n4. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Get PSTN Gateway via PowerShell\nDESCRIPTION: This PowerShell command retrieves the configuration information for a specific Online PSTN Gateway, identified by its FQDN. This is used to verify that the SBC has been successfully connected to Direct Routing and to check its current settings, such as whether it's enabled and the configured SIP signaling port.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-connect-the-sbc.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlinePSTNGateway -Identity sbc.contoso.com  \n```\n\n----------------------------------------\n\nTITLE: Setting Meeting Recording Expiration with PowerShell\nDESCRIPTION: This PowerShell command sets the expiration time for new meeting recordings and transcripts using the `Set-CsTeamsMeetingPolicy` cmdlet. The `Identity` parameter specifies the policy name, and `NewMeetingRecordingExpirationDays` sets the expiration time in days.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-recording.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -NewMeetingRecordingExpirationDays <days>\n```\n\n----------------------------------------\n\nTITLE: Assign a call routing policy with PowerShell\nDESCRIPTION: This snippet refers to the PowerShell command Grant-CsOnlineVoiceRoutingPolicy, used to assign a call routing policy to users. The assigned policy will define call routing behavior within Direct Routing in Microsoft Teams for the specified users. Refer to the linked documentation for syntax and parameter details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voice-routing-policies.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee also [Grant-CsOnlineVoiceRoutingPolicy](/powershell/module/teams/grant-csonlinevoiceroutingpolicy).\n```\n\n----------------------------------------\n\nTITLE: Set Global Transcription Policy - PowerShell\nDESCRIPTION: This PowerShell command allows all users in the organization (except those with custom policies) to transcribe Teams meetings, events, and group calls. It modifies the global Teams meeting policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-transcription-captions.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -AllowTranscription $true\n```\n\n----------------------------------------\n\nTITLE: Getting Policy Assignments for a Teams Group\nDESCRIPTION: This snippet retrieves all policy assignments for a specified security group in Teams using the `Get-CsGroupPolicyAssignment` cmdlet. It requires the group ID, and the Teams PowerShell module needs to be installed and connected. The group ID is typically the group's email address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsGroupPolicyAssignment -GroupId staff-faculty@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Deleting a Network Site with Remove-CsNetworkSite (PowerShell)\nDESCRIPTION: This snippet removes a network site from Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the site to remove. The example removes the site named \"Vancouver\". Ensure the site is not in use before removal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsNetworkSite -Identity Vancouver\n```\n\n----------------------------------------\n\nTITLE: Creating a New Team using PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a new team using the `New-Team` cmdlet in PowerShell. It sets the display name and description for the new team.  This requires the MicrosoftTeams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-managing-teams.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Team -DisplayName \"Contoso Marketing\" -Description \"Collaboration space for Contoso's Marketing department\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Third Voice Route with PowerShell\nDESCRIPTION: This snippet creates another voice route using the `New-CsOnlineVoiceRoute` cmdlet. The `-Identity` parameter sets the route name. The `-NumberPattern` specifies the dialed number pattern using a regular expression. `-OnlinePstnGatewayList` defines the SBCs, and `-OnlinePstnUsages` links it to a PSTN usage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoute -Identity \"Other +1\" -NumberPattern \"^\\+1(\\d{10})$\"\n-OnlinePstnGatewayList sbc5.contoso.com, sbc6.contoso.com -OnlinePstnUsages \"US and Canada\"\n```\n\n----------------------------------------\n\nTITLE: Allowing External Registration via PowerShell\nDESCRIPTION: This PowerShell script configures a Teams meeting policy to allow anyone, including anonymous users, to register for meetings. It uses the `Set-CsTeamsMeetingPolicy` cmdlet and sets the `-WhoCanRegister` parameter to `Everyone`. Replace `<policy name>` with the actual name of the Teams meeting policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-meeting-registration.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -WhoCanRegister Everyone\n```\n\n----------------------------------------\n\nTITLE: Creating Local Voice Route for Failover (PowerShell)\nDESCRIPTION: This PowerShell cmdlet creates a local voice route named 'LocalEmergencyRoute' for emergency calls, intended as a failover in case the primary E9-1-1 service provider is unavailable. It assumes that users have 'Local' usage in their voice policy. 'co1-pstngateway-2' is the SIP trunk service ID for the alternative gateway. The number pattern must match the Emergency Dial String setting in the location policy.  The '+' sign is required in the number pattern.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-an-e9-1-1-voice-route.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsVoiceRoute -Name \"LocalEmergencyRoute\" -NumberPattern \"^\\+911$\" -PstnUsages @{add=\"Local\"} -PstnGatewayList @{add=\"co1-pstngateway-2\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Enterprise Voice for On-Premises Phone Number Management (PowerShell)\nDESCRIPTION: This PowerShell command enables Enterprise Voice for a user who has their phone number managed on-premises. It uses the `Set-CsPhoneNumberAssignment` cmdlet to set the `EnterpriseVoiceEnabled` property to `$true` for the specified user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-enable-users.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity \"<User name>\" -EnterpriseVoiceEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Organizations with PowerShell\nDESCRIPTION: This snippet shows how to configure trusted organizations in Microsoft Teams using the `Set-CSTenantFederationConfiguration` cmdlet in PowerShell. It allows administrators to specify allowed and blocked domains for external communication.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Getting PSTN Gateway Configuration with PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to retrieve a PSTN gateway configuration using the `Get-CSONlinePSTNGateway` cmdlet. This allows you to verify the current LBR settings for a gateway. The output shows whether `GatewaySiteLbrEnabled` is set to `$true` or `$false`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-enable.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CSONlinePSTNGateway -Identity sbc.contoso.com\n\nIdentity: sbc.contoso.com\nGatewaySiteLbrEnabled: $false\n\nGet-CSONlinePSTNGateway -Identity sbc2.contoso.com\n\nIdentity: sbc2.contoso.com\nGatewaySiteLbrEnabled: $false\n```\n\n----------------------------------------\n\nTITLE: Assigning Policy Package to Batch Users via PowerShell\nDESCRIPTION: This code snippet shows how to assign a policy package to a large set of users using the New-CsBatchPolicyPackageAssignmentOperation cmdlet in PowerShell. It allows for assigning packages to up to 5,000 users in a single batch, specified by their object ID, UPN, SIP address, or email address. The assignments are processed in the background and an operation ID is generated for each batch.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/policy-packages-edu.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[New-CsBatchPolicyPackageAssignmentOperation](/powershell/module/teams/new-csbatchpolicypackageassignmentoperation)\n```\n\n----------------------------------------\n\nTITLE: Create Call Queue with No Agent Handling - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new call queue and configure the No Agent action to forward calls to an external phone number. The `New-CsCallQueue` cmdlet is used, specifying the `NoAgentAction` as `Forward` and the `NoAgentActionTarget` with the phone number in tel:+<phone number> format.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_28\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -NoAgentAction Forward -NoAgentActionTarget tel:+<phone number>\n```\n\n----------------------------------------\n\nTITLE: Get Teams Files Policy using Get-CsTeamsFilesPolicy - PowerShell\nDESCRIPTION: This PowerShell command retrieves the current Teams Files policy, allowing administrators to view the current configuration, including the default file upload app.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/admin-settings-for-file-drag-drop-to-third-party-storage.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsTeamsFilesPolicy -Identity Global\n```\n\n----------------------------------------\n\nTITLE: Remove All Site-Scoped CDR Configurations - PowerShell\nDESCRIPTION: This command removes all CDR configuration settings that are applied at the site scope. It uses Get-CsCdrConfiguration with a filter to identify site-scoped settings and then pipes the results to Remove-CsCdrConfiguration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/delete-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCdrConfiguration -Filter \"site:*\" | Remove-CsCdrConfiguration\n```\n\n----------------------------------------\n\nTITLE: Modifying Call Queue with Callback based on Queue Length - PowerShell\nDESCRIPTION: This PowerShell example modifies an existing call queue to enable callback when there are more than 50 calls in the queue. The script also configures the DTMF tone for callback request, the text-to-speech prompt, and the email notification target. This utilizes the `Set-CsCallQueue` cmdlet to adjust existing call queue settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -IsCallbackEnabled $true -CallbackRequestDtmf\n \"Tone1\" -NumberOfCallsInQueueBeforeOfferingCallback 50 -CallbackOfferTextToSpeechPrompt \"If you would like to have a callback when an agent becomes available, press 1\" -CallbackEmailNotificationTarget <Team or DL GUID>\n```\n\n----------------------------------------\n\nTITLE: Disable Q&A in Teams Meeting Policy using PowerShell\nDESCRIPTION: This PowerShell script disables the Q&A feature for organizers who are assigned a specific Teams meeting policy.  It employs the `Set-CsTeamsMeetingPolicy` cmdlet to set the `QnAEngagementMode` parameter to `Disabled`. This prevents organizers with the assigned policy from using Q&A in meetings and events they create.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-qna-for-teams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -QnAEngagementMode Disabled\n```\n\n----------------------------------------\n\nTITLE: Set Support URL for Live Events using PowerShell\nDESCRIPTION: This PowerShell snippet sets the support URL for Microsoft Teams live events. The `-SupportURL` parameter in the `Set-CsTeamsMeetingBroadcastConfiguration` cmdlet is used to specify the URL that attendees can use to get support during live events. Replace `{your URL}` with the actual URL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/configure-teams-live-events.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastConfiguration -SupportURL “{your URL}”\n```\n\n----------------------------------------\n\nTITLE: Copying Teams Log Files - Console\nDESCRIPTION: These commands copy various Teams log files from their default locations to the %Temp% folder, making them easier to analyze. The commands handle different types of logs, including SquirrelSetup logs and general application logs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/troubleshoot-installation.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncopy %LocalAppData%\\SquirrelTemp\\SquirrelSetup.log SquirrelSetup.log\ncopy %AppData%\\Microsoft\\Teams\\logs.txt logs.txt\ncopy %LocalAppData%\\Microsoft\\Teams\\SquirrelSetup.log SquirrelSetup_Teams.log\n```\n\n----------------------------------------\n\nTITLE: Defining Response Group Business Hours - PowerShell\nDESCRIPTION: This snippet mentions the use of the `New-CsRgsHoursOfBusiness` cmdlet for defining preset schedules of business hours in PowerShell.  This allows for the creation of reusable business hour configurations that can be applied to multiple response groups. It requires familiarity with the Skype for Business Server PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsRgsHoursOfBusiness\n```\n\n----------------------------------------\n\nTITLE: Removing a Calling Delegate with PowerShell\nDESCRIPTION: This PowerShell snippet removes a user as a delegate for another user. The `Remove-CsUserCallingDelegate` cmdlet is used, specifying the identities of both the delegator and the delegate. This action requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-line-appearance.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsUserCallingDelegate -Identity user1@contoso.com -Delegate user2@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Uploading Custom Audio File using PowerShell\nDESCRIPTION: This snippet demonstrates how to upload a custom audio file for Music on Hold using the Import-CsOnlineAudioFile cmdlet in PowerShell. It reads the audio file content and uploads it to the Teams service, returning an object containing the file's ID and name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/music-on-hold.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> $content = [System.IO.File]::ReadAllBytes('C:\\tmp\\customMoH1.mp3')\nC:\\> $AudioFile = Import-CsOnlineAudioFile -FileName \"customMoH1.mp3\" -Content $content\nC:\\> $AudioFile\nId            : 56a56961f2794f098a359885ec1454a1\nFileName      : customMoH1.mp3\nApplicationId : TenantGlobal\n```\n\n----------------------------------------\n\nTITLE: Enable Town Hall Creation via PowerShell\nDESCRIPTION: This PowerShell script enables the ability for users assigned the specified policy to create town halls. It uses the `Set-CsTeamsEventsPolicy` cmdlet to set the `-AllowTownhalls` parameter to `Enabled`. The `<policy name>` placeholder should be replaced with the actual name of the Teams events policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-town-halls.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowTownhalls Enabled\n```\n\n----------------------------------------\n\nTITLE: Assign Policy Package to Group Using PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign a policy package to a group of users using the `Grant-CsGroupPolicyPackageAssignment` cmdlet. It specifies the group by its object ID and assigns the 'Education_Teacher' policy package.  It also sets the ranking for `TeamsAppSetupPolicy` and `TeamsMeetingBroadcastPolicy` to 1, and `TeamsMeetingPolicy` to 2, defining the order of precedence if conflicts arise with other policy assignments. The `GroupId` parameter specifies the target group, `PackageName` identifies the policy package to apply, and `PolicyRankings` define the precedence order for individual policy types within the package. Requires the Teams PowerShell module to be installed and connected to a Teams session with admin credentials.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policy-packages.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsGroupPolicyPackageAssignment -GroupId \"dae90bb4-120f-4a3e-a15d-30f142e79f69\" -PackageName \"Education_Teacher\" -PolicyRankings \"TeamsAppSetupPolicy, 1\", \"TeamsMeetingBroadcastPolicy, 1\", \"TeamsMeetingPolicy, 2\"\n```\n\n----------------------------------------\n\nTITLE: Assign Voice Application Policy using Grant-CsTeamsVoiceApplicationsPolicy\nDESCRIPTION: This PowerShell cmdlet assigns a specific Teams voice applications policy to a user. This allows the user to be granted specified permissions related to voice application settings in Microsoft Teams. It requires the Teams PowerShell module and a connection to the Teams service. The user needs to exist, and the specified policy must be pre-configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-authorized-users.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Get Subnets for Site with Get-CsNetworkSubnet (PowerShell) and Where-Object\nDESCRIPTION: This command retrieves all network subnets and filters them to find subnets associated with a specific network site ID (Vancouver in this case). It shows how to relate subnets to sites using properties. It utilizes `Get-CsNetworkSubnet` and pipes the result to `Where-Object` for filtering.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsNetworkSubnet | Where-Object {$_.NetworkSiteID -eq \"Vancouver\"}\n```\n\n----------------------------------------\n\nTITLE: Allow Private Webinar Recording Publishing via PowerShell\nDESCRIPTION: This PowerShell snippet configures the `CsTeamsEventsPolicy` to only allow organizers to publish recordings for private webinars. It sets the `AllowedWebinarTypesForRecordingPublish` parameter to `EveryoneInCompanyIncludingGuests`, limiting publishing to internal audiences.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-vod-publishing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowedWebinarTypesForRecordingPublish EveryoneInCompanyIncludingGuests\n```\n\n----------------------------------------\n\nTITLE: Create 'International' Voice Route - PowerShell\nDESCRIPTION: This PowerShell command creates a new voice route named 'International'. It specifies a number pattern to match any number ('.*') and associates it with the 'International' PSTN usage. Calls matching the number pattern will be routed through the specified online PSTN gateways (sbc2.contoso.com, sbc5.contoso.com).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoute -Identity \"International\" -NumberPattern \".*\" -OnlinePstnGatewayList sbc2.contoso.com, sbc5.contoso.com -OnlinePstnUsages \"International\"\n```\n\n----------------------------------------\n\nTITLE: Importing Auto Attendant Holidays - PowerShell\nDESCRIPTION: This cmdlet imports holiday schedules for Auto Attendants from a file in Microsoft Teams. This allows you to bulk upload holiday configurations. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsAutoAttendantHolidays\n```\n\n----------------------------------------\n\nTITLE: Setting Meeting Chat Policy - EnabledExceptAnonymous - PowerShell\nDESCRIPTION: This PowerShell script sets the Teams meeting policy to allow meeting chat for everyone except anonymous users. It uses the `Set-CsTeamsMeetingPolicy` cmdlet with the `-MeetingChatEnabledType` parameter set to `EnabledExceptAnonymous` to achieve this.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-meeting-chat.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -MeetingChatEnabledType EnabledExceptAnonymous\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Calling Policy - PowerShell\nDESCRIPTION: This PowerShell command allows administrators to control call redirection settings for Teams users. It modifies the Teams calling policy to enable call redirection, allowing users to forward calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/devices-release-notes.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\WINDOWS\\system32> Set-CsTeamsCallingPolicy -Identity Global -AllowCallRedirect Enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample PSTN Gateways - PowerShell\nDESCRIPTION: This snippet provides examples of configuring three PSTN gateways and associating them with the Singapore, Vietnam, and Indonesia network sites. The `MediaBypass` parameter is set to `$true`, `BypassMode` is set to `Always`, and the `ProxySBC` parameter is configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CSOnlinePSTNGateway -Identity \"proxysbc.contoso.com\" -GatewaySiteID \"Singapore\" -MediaBypass $true -BypassMode \"Always\" -ProxySBC $null\n\nSet-CSOnlinePSTNGateway -Identity \"VNsbc.contoso.com\" -GatewaySiteID \"Vietnam\" -MediaBypass $true -BypassMode \"Always\" -ProxySBC \"proxysbc.contoso.com\"\n\nSet-CSOnlinePSTNGateway -Identity \"IDsbc.contoso.com\" -GatewaySiteID \"Indonesia\" -MediaBypass $true -BypassMode \"Always\" -ProxySBC \"proxysbc.contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information and Recording Policy - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves information about a specific user, including their assigned compliance recording policy.  It uses the user's email address as input and displays the SipAddress, TenantId, and TeamsComplianceRecordingPolicy properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-recording-compliance.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsOnlineUser testuser@contoso.onmicrosoft.com | select SipAddress, TenantId, TeamsComplianceRecordingPolicy | fl\n```\n\n----------------------------------------\n\nTITLE: Creating a Voice Route with PowerShell\nDESCRIPTION: This snippet creates a voice route using the `New-CsOnlineVoiceRoute` cmdlet. The `-Identity` parameter sets the route name. The `-NumberPattern` specifies the dialed number pattern using a regular expression. `-OnlinePstnGatewayList` defines the SBCs, `-Priority` sets the route priority, and `-OnlinePstnUsages` links it to a PSTN usage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoute -Identity \"Redmond 1\" -NumberPattern \"^\\+1(425|206)(\\d{7})$\" -OnlinePstnGatewayList sbc1.contoso.com, sbc2.contoso.com -Priority 1 -OnlinePstnUsages \"US and Canada\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams in Azure Cloud Shell\nDESCRIPTION: This code snippet shows how to connect to Microsoft Teams using the `Connect-MicrosoftTeams` cmdlet within the Azure Cloud Shell. This is a necessary step to manage Teams using PowerShell in the cloud environment. It requires you to be logged into Azure Cloud Shell with appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-managing-teams.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Creating Voice Route for Emergency Calls (PowerShell)\nDESCRIPTION: This PowerShell cmdlet creates a new voice route named 'EmergencyRoute' for emergency calls.  It utilizes the PSTN usage record created in the previous step ('EmergencyUsage'). The number pattern must match the Emergency Dial String setting in the location policy. 'co1-pstngateway-1' represents the SIP trunk service ID for the E9-1-1 service provider or the ELIN gateway service ID. The '+' sign is required in the number pattern.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-an-e9-1-1-voice-route.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsVoiceRoute -Name \"EmergencyRoute\" -NumberPattern \"^\\+911$\" -PstnUsages @{add=\"EmergencyUsage\"} -PstnGatewayList @{add=\"co1-pstngateway-1\"}\n```\n\n----------------------------------------\n\nTITLE: Disable External Meeting Join Policy - PowerShell\nDESCRIPTION: This PowerShell script sets the `ExternalMeetingJoin` parameter of a Microsoft Teams meeting policy to `Disabled`.  This configuration restricts users to only joining meetings within their own organization.  Replace `<policy name>` with the actual name of the Teams meeting policy you wish to modify. Requires the Microsoft Teams PowerShell module to be installed and connected.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/external-meeting-join.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -ExternalMeetingJoin  Disabled\n```\n\n----------------------------------------\n\nTITLE: Change Calling Delegate Permissions - PowerShell\nDESCRIPTION: This snippet uses the `Set-CsUserCallingDelegate` cmdlet to modify the permissions of an existing delegate (`user2`) for a user (`user1`) in Microsoft Teams. In this specific example, it revokes the delegate's ability to make calls on behalf of the user, while retaining other permissions if they were previously granted. This cmdlet requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/user-call-settings.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUserCallingDelegate -Identity user1@contoso.com -Delegate user2@contoso.com -MakeCalls $false\n```\n\n----------------------------------------\n\nTITLE: Disabling copying/forwarding of meeting chat via Teams admin policy\nDESCRIPTION: This snippet describes how to disable the ability for meeting participants to copy or forward meeting chat messages, live captions, and transcripts using a Teams admin policy.  This setting can be configured in the Teams admin center under Meeting policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-chat-sensitive-meetings.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n1. In the Teams admin center, expand **Meetings**, and then select **Meeting policies**.\n2. Choose the policy that you want to update, or create a new one.\n3. In the **Content sharing** section, set **Organizer can restrict participants from copying or forwarding meeting chat messages, live captions, and transcripts** to **Off**\n4. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Updating Teams Calling Policy - PowerShell\nDESCRIPTION: This snippet shows the addition of the `EnablePayAsYouGoSpendingLimits` and `PayAsYouGoSpendingUserLimit` parameters to the `New-CsTeamsCallingPolicy` and `Set-CsTeamsCallingPolicy` cmdlets for managing pay-as-you-go spending limits using the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_52\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsCallingPolicy -EnablePayAsYouGoSpendingLimits -PayAsYouGoSpendingUserLimit\n```\n\n----------------------------------------\n\nTITLE: Assigning Shared Calling Policy to User - PowerShell\nDESCRIPTION: This PowerShell command assigns the Shared Calling Routing Policy named 'Seattle' to the user 'user@contoso.com'. It uses the Grant-CsTeamsSharedCallingRoutingPolicy cmdlet to assign the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsSharedCallingRoutingPolicy -PolicyName Seattle -Identity user@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Enable PIN-less meeting join using PowerShell\nDESCRIPTION: This PowerShell command enables PIN-less meeting join for either a specific site or globally in Skype for Business Server. The `AllowAnonymousPstnActivation` parameter is set to `$True` to allow dial-in callers to join without entering a leader PIN. Replace `<global or site:sitename>` with the appropriate identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/pin-less-meeting-join.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingConfiguration -Identity  < global or site:sitename>  -AllowAnonymousPstnActivation $True\n```\n\n----------------------------------------\n\nTITLE: Configuring 'Who can admit from lobby' in Teams Admin Center\nDESCRIPTION: This snippet describes how to configure the 'Who can admit from lobby' setting within the Microsoft Teams admin center to control who has the authority to admit participants from the meeting lobby. The setting can be configured to 'Organizers and presenters' or 'Organizers and co-organizers'. This involves navigating to the Meeting policies section, selecting a policy to update, and then modifying the 'Who can admit from lobby' setting under the 'Meeting join & lobby' section.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-meetings-highly-sensitive-protection.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n1. In the Teams admin center, expand **Meetings** and select **Meeting policies**.\n2. Select the policy that you want to update.\n3. Under **Meeting join & lobby**, for **Who can admit from lobby**, choose either **Organizers and presenters**(default value) or **Organizers and co-organizers**.\n4. Select **Save**\n```\n\n----------------------------------------\n\nTITLE: Disable Attendee Identity Masking in Teams Meeting Policy (PowerShell)\nDESCRIPTION: This PowerShell script disables the `-AttendeeIdentityMasking` setting in a specific Teams meeting policy. When disabled, attendee names are always shown in meetings and webinars created by organizers with this policy. Replace `<policy name>` with the actual name of the Teams meeting policy you want to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/hide-attendee-names.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AttendeeIdentityMasking Disabled\n```\n\n----------------------------------------\n\nTITLE: Checking Teams Phone License\nDESCRIPTION: This PowerShell command retrieves the assigned plans for a given user and displays their attributes. The purpose is to check if the user has an enabled Teams Phone license (MCOEV) and that the CapabilityStatus attribute is set to Enabled.  $user variable must be defined as the UPN or SIP address of the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-pad-configuration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n(Get-CsOnlineUser -Identity $user).AssignedPlan\n```\n\n----------------------------------------\n\nTITLE: Assign a User-Specific Dial Plan - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign a specific dial plan to a user in Skype for Business Server.  It requires the CsUserAdministrator or CsAdministrator role. The `-Identity` parameter specifies the user, and the `-PolicyName` parameter specifies the dial plan to assign.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-users-for-enterprise-voice.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsDialPlan -Identity <UserIdParameter> -PolicyName <String>\n```\n\n----------------------------------------\n\nTITLE: Turn off Meeting Chat using PowerShell\nDESCRIPTION: This PowerShell script disables the meeting chat feature for town hall organizers by setting the `-TownhallChatExperience` parameter to `None` within the `Set-CsTeamsEventsPolicy` cmdlet.  It requires the policy name as input. This prevents organizers from allowing attendees to use chat during town halls.  This command updates the specified Teams events policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/town-hall-chat.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -TownhallChatExperience None\n```\n\n----------------------------------------\n\nTITLE: Creating a New Voice Routing Policy - PowerShell Example\nDESCRIPTION: This PowerShell example demonstrates how to create a new voice routing policy named 'HybridVoice' with the display name 'Hybrid' and associates it with the 'Local' and 'Long Distance' PSTN usage records.  Requires existing PSTN usage records with the specified names.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/skype-for-business-hybrid-solutions/plan-your-phone-system-cloud-pbx-solution/assign-a-voice-routing-policy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CSVoiceRoutingPolicy -Identity HybridVoice -Name Hybrid -PSTNUsages \"Local\", \"Long Distance\"\n```\n\n----------------------------------------\n\nTITLE: Create Voice Route with Trunk Association - PowerShell\nDESCRIPTION: This PowerShell command creates a new voice route and associates it with a specific trunk (gateway). The `-Identity` parameter specifies the route ID, `-NumberPattern` defines the number pattern to match, `-PstnUsages` adds a PSTN usage, and `-PstnGatewayList` associates the route with a trunk using its simple name defined in Topology Builder.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-trunks.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsVoiceRoute -Identity <RouteId> -NumberPattern <String> -PstnUsages @{add=\"<UsageString>\"} -PstnGatewayList @{add=\"<TrunkSimpleName>\"}\n```\n\n----------------------------------------\n\nTITLE: Detect and Uninstall TMA Script - PowerShell\nDESCRIPTION: Describes a PowerShell script used to detect and uninstall the Teams Meeting Add-in (TMA) to prevent issues after uninstalling the classic Teams client. It addresses a specific version incompatibility between new Teams and TMA and provides a link to download the script.  The script is intended to be run in the user context.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-uninstall-script.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[an additional script](https://download.microsoft.com/download/d/f/c/dfc1a7ce-e3da-4e12-94fc-bea60ba3d9ba/DetectAndUninstallTMA.ps1)\n```\n\n----------------------------------------\n\nTITLE: Assign Teams Phone Mobile Number to User with PowerShell\nDESCRIPTION: This PowerShell snippet assigns a Teams Phone Mobile phone number to a specific user in Microsoft Teams.  It employs the `Set-CsPhoneNumberAssignment` cmdlet, taking the user's identity (UPN), the phone number to assign, and the PhoneNumberType parameter set to 'OperatorConnect'. Note: Even for Teams Phone Mobile, PhoneNumberType is 'OperatorConnect'. It depends on an existing Teams Phone Mobile configuration with the operator.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-change-or-remove-a-phone-number-for-a-user.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity <user> -PhoneNumber <phone number> -PhoneNumberType OperatorConnect\n```\n\n----------------------------------------\n\nTITLE: Getting Policy Assignments for a Specific Teams User\nDESCRIPTION: This snippet retrieves all policy assignments for a specified user in Teams using the `Get-CsUserPolicyAssignment` cmdlet. It requires the user's identity (e.g., email address), and the Teams PowerShell module needs to be installed and connected.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsUserPolicyAssignment -Identity reda@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Create a new Online Voice Route policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new Online Voice Route policy. The `NumberPattern` parameter specifies the regular expression used to match phone numbers. The `OnlinePstnUsages` parameter associates the voice route with a defined PSTN usage. The `BridgeSourcePhoneNumber` parameter specifies the Operator Connect Conferencing number assigned to the Audio Conferencing bridge, ensuring calls are routed correctly through the operator.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-conferencing-configure.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoute -Identity \"International\" -NumberPattern \"\\d+\" -OnlinePstnUsages \"International\" -BridgeSourcePhoneNumber <an Operator Connect Conferencing number assigned to your Audio Conferencing bridge>\n```\n\n----------------------------------------\n\nTITLE: Managing Callers Name Recording using PowerShell\nDESCRIPTION: This snippet uses the `Set-CsOnlineDialInConferencingTenantSettings` cmdlet in PowerShell to manage whether callers can record their names before joining a meeting. The `-EnableNameRecording` parameter controls this functionality. Other relevant parameters include `-EntryExitAnnouncementsType`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/enable-users-to-record-their-name-when-they-join-a-meeting-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTo manage whether callers can record their names with PowerShell, use the **`-EnableNameRecording`**. **`-EntryExitAnnouncementsType`**, and **`-EnableNameRecording`** parameters, within the PowerShell [Set-CsOnlineDialInConferencingTenantSettings](/powershell/module/teams/set-csonlinedialinconferencingtenantsettings) cmdlet. For script examples, see [Set-CsOnlineDialInConferencingBridge](/powershell/module/teams/Set-csonlinedialinconferencingtenantsettings).\n```\n\n----------------------------------------\n\nTITLE: Get Support Team Group ID - PowerShell\nDESCRIPTION: This PowerShell script retrieves the Group ID of the Microsoft Teams team named \"Support\". This Group ID is used to configure the call queue settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n$teamSupportID = (Get-Team -DisplayName \"Support\").GroupID\n```\n\n----------------------------------------\n\nTITLE: Creating Application Instance for Compliance Recording - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new application instance in the Azure Active Directory tenant.  This instance is used by the compliance recording bot. It requires the AzureAD module to be installed. The parameters include the UserPrincipalName, DisplayName, and ApplicationId.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-recording-compliance.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsOnlineApplicationInstance -UserPrincipalName cr.instance@contoso.onmicrosoft.com -DisplayName ComplianceRecordingBotInstance -ApplicationId fcc88ff5-a42d-49cf-b3d8-f2e1f609d511\n```\n\n----------------------------------------\n\nTITLE: Creating Queues - PowerShell\nDESCRIPTION: These commands create two queues, \"Contoso Support\" and \"Contoso Sales\", using New-CsRgsQueue. Parameters include the parent service ID ($ServiceId), the queue name, and the AgentGroupIDList, which is populated with the Identity property of the previously created agent groups.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n$QSupport = New-CsRgsQueue -Parent $ServiceId -Name \"Contoso Support\" -AgentGroupIDList($AG-Support.Identity)\n$QSales = New-CsRgsQueue -Parent $ServiceId -Name \"Contoso Sales\" -AgentGroupIDList($AG-Sales.Identity)\n```\n\n----------------------------------------\n\nTITLE: Creating a new Survivable Branch Appliance (SBA) - PowerShell\nDESCRIPTION: This PowerShell command creates a new Survivable Branch Appliance (SBA). It requires the FQDN of the SBA and an optional description.  The `Identity` and `Site` parameters are automatically populated based on the `Fqdn`.  This command defines the SBA within the Microsoft Teams environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-survivable-branch-appliance.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> New-CsTeamsSurvivableBranchAppliance  -Fqdn sba1.contoso.com -Description \"SBA 1\" \nIdentity    : sba1.contoso.com \nFqdn        : sba1.contoso.com \nSite        : \nDescription : SBA 1 \n```\n\n----------------------------------------\n\nTITLE: Modifying Voicemail Policy - PowerShell\nDESCRIPTION: This cmdlet modifies an existing Cloud Voicemail policy.  It allows administrators to change settings such as transcription, translation, maximum recording duration, and call answering rules for a defined policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voicemail-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineVoicemailPolicy\n```\n\n----------------------------------------\n\nTITLE: Grant Virtual Appointments Policy PowerShell\nDESCRIPTION: This cmdlet assigns a Teams Virtual Appointments Policy to a specific user or group. It enables administrators to apply virtual appointment settings to designated users. Proper Teams module installation and permissions are required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsVirtualAppointmentsPolicy\n```\n\n----------------------------------------\n\nTITLE: Publish the Location Database - PowerShell\nDESCRIPTION: This cmdlet publishes the updated location database, making the changes available to clients. It uses the `Publish-CsLisConfiguration` cmdlet to apply the new configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nPublish-CsLisConfiguration\n```\n\n----------------------------------------\n\nTITLE: Including relatedContact resource type using Graph API\nDESCRIPTION: If your institution uses Microsoft Graph PowerShell SDK to manage student identities, this allows administrators to use the relatedContact resource type to include parent/guardian information. It requires existing setup and familiarity with Microsoft Graph PowerShell SDK and Student identities.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/edu-parents-app.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nIf you already use [Microsoft Graph PowerShell SDK](/powershell/microsoftgraph/overview) to create Student identities, you can easily include [relatedContact resource type](/graph/api/resources/relatedcontact).\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant-Wide Teams Upgrade Policy - Grant-CsTeamsUpgradePolicy - Powershell\nDESCRIPTION: This command sets the tenant-wide Teams upgrade policy. It is crucial to configure routing of calls and chats from users who are moved to Teams Only to users who remain on-premises. Options include SfBWithTeamsCollab, SfBOnly, or SfBWithTeamsCollabAndMeetings.  This ensures interoperability during the migration process.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy\n```\n\n----------------------------------------\n\nTITLE: Adding FileContent parameter to DirectRouting TelephoneNumber cmdlets\nDESCRIPTION: This snippet adds the `FileContent` parameter to the `New-CsOnlineDirectRoutingTelephoneNumberUploadOrder` cmdlet and the `New-CsOnlineTelephoneNumberReleaseOrder` cmdlet. This parameter likely accepts the content of a file related to telephone number management for Direct Routing. There are no explicitly mentioned dependencies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineDirectRoutingTelephoneNumberUploadOrder\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineTelephoneNumberReleaseOrder\n```\n\n----------------------------------------\n\nTITLE: Grant tenant-wide TeamsUpgradePolicy - PowerShell\nDESCRIPTION: This PowerShell command grants a tenant-wide TeamsUpgradePolicy. It's crucial for hybrid environments to ensure proper routing of chats and calls between TeamsOnly users and those still using Skype for Business on-premises. The policy is applied globally because individual users in pure on-premises deployments may not have SIP addresses in the online directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName SfBWithTeamsCollab -Global\n```\n\n----------------------------------------\n\nTITLE: Disable Live Captions - PowerShell\nDESCRIPTION: This PowerShell command disables live captions for users assigned the specified Teams meeting policy. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-transcription-captions.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -LiveCaptionsEnabledType Disabled\n```\n\n----------------------------------------\n\nTITLE: Set Voicemail User Settings via PowerShell\nDESCRIPTION: This PowerShell snippet shows how to use the `Set-CsOnlineVoicemailUserSettings` cmdlet to disable Cloud Voicemail for a specific user. It sets the `VoicemailEnabled` parameter to `$false` to achieve this. Before running, ensure the Teams PowerShell module is installed and you are connected to your Microsoft Teams environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voicemail-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineVoicemailUserSettings -Identity user@example.com -VoicemailEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Set Application Sharing Port Range - Single Server - PowerShell\nDESCRIPTION: This PowerShell command modifies the application sharing port range on a specific Conferencing server. It uses the `Set-CsConferenceServer` cmdlet to set the `AppSharingPortStart` and `AppSharingPortCount` properties for the server identified by its `Identity`.  The command requires the server's identity and the desired start port and port count for application sharing, ensuring a unique port range for QoS.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-conferencing-application-and-mediation-servers.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n**Set-CsConferenceServer -Identity ConferencingServer:atl-cs-001.litwareinc.com -AppSharingPortStart 40803 -AppSharingPortCount 8348**\n```\n\n----------------------------------------\n\nTITLE: Update Teams Voice Applications Policy Settings - PowerShell\nDESCRIPTION: This PowerShell cmdlet allows administrators to update the settings of an existing Teams voice applications policy. It's used to modify the permissions granted to authorized users for managing auto attendants and call queues.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voice-applications-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Set default voice representation to 'Simulate my voice' - PowerShell\nDESCRIPTION: This PowerShell script sets the default voice representation setting to 'Simulate my voice' for the entire organization. This means that when users enable Interpreter, it will automatically simulate their voice during translation by default. This is achieved using the VoiceSimulationInInterpreter parameter set to 'Enabled' within the Set-CsTeamsMeetingPolicy cmdlet. Replace <policy name> with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/interpreter-agent-teams.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -VoiceSimulationInInterpreter Enabled\n```\n\n----------------------------------------\n\nTITLE: Bulk Update Port Locations from CSV - PowerShell\nDESCRIPTION: These cmdlets import port location data from a CSV file named \"ports.csv\" and then use the `Set-CsLisPort` cmdlet to update the location database in bulk. The CSV file should contain columns corresponding to the parameters of the `Set-CsLisPort` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$g = Import-Csv ports.csv\n$g | Set-CsLisPort\n```\n\n----------------------------------------\n\nTITLE: Enable Cloud Recording Globally\nDESCRIPTION: This PowerShell command allows all users in the organization (except those with custom policies) to record Teams meetings by setting the AllowCloudRecording parameter to $true for the Global policy. No specific modules need to be imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-recording.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -AllowCloudRecording $true\n```\n\n----------------------------------------\n\nTITLE: Uninstall Teams and Remove Teams Directory - PowerShell\nDESCRIPTION: This PowerShell script uninstalls the Teams app and removes the Teams directory for a specified user profile. It first checks if the Teams update executable exists and uninstalls Teams using the executable with the -uninstall -s parameters. After uninstallation, it deletes the Teams directory. The script handles potential exceptions and provides error messages.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/scripts/powershell-script-deployment-cleanup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\nThis script uninstalls the Teams app and removes the Teams directory for a user.\n.DESCRIPTION\nUse this script to remove and clear the Teams app from a computer. Run this PowerShell script for each user profile in which Teams was installed on the computer. After you run this script for all user profiles, redeploy Teams.\n#>\n\n$TeamsPath = [System.IO.Path]::Combine($env:LOCALAPPDATA, 'Microsoft', 'Teams')\n$TeamsUpdateExePath = [System.IO.Path]::Combine($TeamsPath, 'Update.exe')\n\ntry\n{\n    if ([System.IO.File]::Exists($TeamsUpdateExePath)) {\n        Write-Host \"Uninstalling Teams process\"\n\n        # Uninstall app\n        $proc = Start-Process $TeamsUpdateExePath \"-uninstall -s\" -PassThru\n        $proc.WaitForExit()\n    }\n    Write-Host \"Deleting Teams directory\"\n    Remove-Item –path $TeamsPath -recurse\n}\ncatch\n{\n    Write-Output \"Uninstall failed with exception $_.exception.message\"\n    exit /b 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Voice Route with a Trunk Name (PstnGatewayList)\nDESCRIPTION: This PowerShell command creates a new voice route, associating it with a specified number pattern, PSTN usages, and a particular trunk (gateway) by its simple name.  The `-Identity` parameter specifies the Route ID, `-NumberPattern` defines the pattern to match dialed numbers, `-PstnUsages` adds a usage string for PSTN usage, and `-PstnGatewayList` adds the simple name of the trunk to associate the route with. This is how trunks are associated with routes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/multiple-trunk-support.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsVoiceRoute -Identity <RouteId> -NumberPattern <String> -PstnUsages @{add=\"<UsageString>\"} -PstnGatewayList @{add=\"<TrunkSimpleName>\"}\n```\n\n----------------------------------------\n\nTITLE: Assign Service Phone Number to Audio Conferencing Bridge (PowerShell)\nDESCRIPTION: This PowerShell cmdlet is used to associate a defined service phone number with the Audio Conferencing bridge of the organization, enabling it to be used for dial-in conferencing. The `-identity` parameter specifies the phone number in E.164 format, and the `-BridgeId` specifies the unique identifier of the audio conferencing bridge. Requires the Teams PowerShell module, appropriate permissions, and the Audio Conferencing bridge to be provisioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-with-direct-routing-for-gcch-and-dod.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRegister-csOnlineDialInConferencingServiceNumber -identity <Telephone number in E.164 format> -BridgeId <Identity of the audio conferencing bridge>\n```\n\n----------------------------------------\n\nTITLE: Removing Emergency Number from Location Policy - PowerShell\nDESCRIPTION: This code snippet demonstrates how to remove an existing emergency number from a location policy.  First, the emergency number to be removed is defined using `New-CsEmergencyNumber`, then the `Set-CsLocationPolicy` cmdlet is used with the `@{remove=$a}` parameter to remove the specified emergency number from the location policy identified by `-Identity`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-multiple-emergency-numbers.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n> $a = New-CsEmergencyNumber -DialString 911 -DialMask 112;999\n> Set-CsLocationPolicy -Identity <id> -EmergencyNumbers @{remove=$a}\n```\n\n----------------------------------------\n\nTITLE: Assign emergency location place to a user via PowerShell\nDESCRIPTION: This PowerShell cmdlet assigns a specific emergency location place to a user's phone number in Microsoft Teams. It requires the Microsoft Teams PowerShell module and a connection to the Teams service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/add-change-remove-emergency-place-organization.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee [Set-CsPhoneNumberAssignment](/powershell/module/teams/set-csphonenumberassignment).\n```\n\n----------------------------------------\n\nTITLE: Allow Federation with Teams Trial Tenants - PowerShell\nDESCRIPTION: This PowerShell cmdlet allows external access with Teams trial-only tenants. It sets the `-ExternalAccessWithTrialTenants` parameter to `\"Allowed\"` using the `Set-CsTenantFederationConfiguration` cmdlet. Requires at least version 6.4.0 of the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantFederationConfiguration -ExternalAccessWithTrialTenants \"Allowed\"\n```\n\n----------------------------------------\n\nTITLE: Failing Over Persistent Chat Database via Invoke-CsDatabaseFailover (PowerShell)\nDESCRIPTION: This code snippet represents using the Invoke-CsDatabaseFailover cmdlet in the Skype for Business Server Management Shell to manually fail over the primary Persistent Chat database to the mirror, and back.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-persistent-chat-server/configure-hadr-for-persistent-chat.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsDatabaseFailover\n```\n\n----------------------------------------\n\nTITLE: Run Teams Bootstrapper with UNC MSIX Path\nDESCRIPTION: This command runs the Teams bootstrapper executable with the `-p` parameter to provision new teams and the `-o` parameter specifying the UNC path to the Teams MSIX file. This is useful for offline installations and reduces bandwidth usage. Replace `\\\\unc\\path\\to\\teams.msix` with the correct UNC path.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-bulk-install-client.md#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\n.\\teamsbootstrapper.exe -p -o \"\\\\unc\\path\\to\\teams.msix\"\n```\n\n----------------------------------------\n\nTITLE: View RTMP-In Status via PowerShell\nDESCRIPTION: This PowerShell script retrieves and displays the current RTMP-In status (`AllowedStreamingMediaInput`) for a specified Teams meeting policy. It uses the `Get-CsTeamsMeetingPolicy` cmdlet to retrieve the policy, and then uses `fl` (Format-List) to display the `AllowedStreamingMediaInput` property. Replace `<policy name>` with the name of the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meetings-rtmp-in.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsMeetingPolicy -Identity <policy name>|fl AllowedStreamingMediaInput\n```\n\n----------------------------------------\n\nTITLE: Clearing msRTCSIP-DeploymentLocator Attribute\nDESCRIPTION: This PowerShell script clears the `msRTCSIP-DeploymentLocator` attribute for a group of users from Active Directory. It imports a list of users from the `c:\\data\\SfbUsers.csv` file, then iterates through each user, clearing the attribute using `Set-ADUser` and their SamAccountName as the identity. This step is necessary to fully remove Skype for Business configurations from the user accounts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$sfbusers=import-csv \"c:\\data\\SfbUsers.csv\"\nforeach($user in $sfbusers){\nSet-ADUser -Identity $user.SamAccountName -Clear msRTCSIP-DeploymentLocator}\n```\n\n----------------------------------------\n\nTITLE: Disable Webinar Scheduling via PowerShell\nDESCRIPTION: This PowerShell script prevents users with the specified policy from creating webinars by setting the `-AllowWebinars` parameter to `Disabled` in the `Set-CsTeamsEventsPolicy` cmdlet.  The `<policy name>` placeholder should be replaced with the actual name of the Teams events policy you want to modify. This command requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-webinars.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowWebinars Disabled\n```\n\n----------------------------------------\n\nTITLE: Managing Teams App (GA) - PowerShell\nDESCRIPTION: This snippet Releases [Get|Update]-M365TeamsApp, Get-AllM365TeamsApps Unified App Management cmdlets in GA. This allows to get and update teams apps using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_61\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Update]-M365TeamsApp\nGet-AllM365TeamsApps\n```\n\n----------------------------------------\n\nTITLE: Enable Enterprise Voice using Set-CsPhoneNumberAssignment\nDESCRIPTION: This PowerShell cmdlet enables Enterprise Voice for a specific user, allowing them to use voice-related features within Microsoft Teams. The `-EnterpriseVoiceEnabled` parameter is set to `$true` to activate the functionality. This cmdlet requires the Teams PowerShell module to be installed and the administrator to be connected to the Teams service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-authorized-users.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -EnterpriseVoiceEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Modify Call Queue Timeout Handling - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to modify an existing call queue's timeout settings. It uses the `Set-CsCallQueue` cmdlet to update the `TimeoutAction` to `Forward` and set the `TimeoutActionTarget` to the GUID of the Resource Account. The `-Identity` parameter specifies the GUID of the call queue to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <CallQueue GUID> -TimeoutAction Forward -TimeoutActionTarget <Resource Account GUID>\n```\n\n----------------------------------------\n\nTITLE: Logging into Microsoft Teams and Graph with Credentials\nDESCRIPTION: These PowerShell commands prompt the user for their Teams administrator credentials and then connect to both Microsoft Teams and Microsoft Graph using those credentials.  The credentials are stored in the $credential variable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$credential = Get-Credential\nConnect-MicrosoftTeams -Credential $credential\nConnect-MgGraph -Credential $credential\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted Microsoft 365 Group\nDESCRIPTION: This PowerShell command restores a soft-deleted Microsoft 365 group using its ID. It is a crucial step in recovering a deleted Microsoft Team. `[Id]` should be replaced with the actual group ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/archive-or-delete-a-team.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRestore-MgDirectoryDeletedItem -DirectoryObjectId [Id]\n```\n\n----------------------------------------\n\nTITLE: Assigning a Voice Routing Policy to a User - PowerShell Example\nDESCRIPTION: This PowerShell example assigns the voice routing policy named 'HybridVoice' to the user with the display name 'Bob Kelly'. The specified policy must exist before running this command.  The user \"Bob Kelly\" must also exist in the environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/skype-for-business-hybrid-solutions/plan-your-phone-system-cloud-pbx-solution/assign-a-voice-routing-policy.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsVoiceRoutingPolicy -Identity \"Bob Kelly\" -PolicyName HybridVoice\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Microsoft Graph in PowerShell\nDESCRIPTION: This snippet disconnects from the Microsoft Graph using the Disconnect-MgGraph cmdlet. This is important for cleaning up the session after completing API calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/security-remove-external-chat.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nWrite-Host \"Disconnecting from Microsoft Graph!\"\nDisconnect-MgGraph\n```\n\n----------------------------------------\n\nTITLE: Disable Auto Recording\nDESCRIPTION: This PowerShell command prevents organizers with the specified policy from automatically recording their Teams meetings. Replace \"<policy name>\" with the name of the target Teams meeting policy. The MicrosoftTeams module must be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-recording.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AutoRecording Disabled\n```\n\n----------------------------------------\n\nTITLE: Set Security Group as Local Administrator\nDESCRIPTION: This snippet outlines how to configure a Security Group as a local administrator on a Teams Rooms on Windows device joined to a domain (Microsoft Entra ID or Active Directory). This can be done using Microsoft Intune, Group Policy, or Local Computer Management, similar to standard Windows PCs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-prep.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Remove Online Voice Routing Policy - PowerShell\nDESCRIPTION: This Teams PowerShell Module command removes the online voice routing policy associated with a specific user. This is necessary when migrating from Direct Routing to Operator Connect to avoid conflicts with the new Operator Connect configuration. The `-PolicyName $Null` parameter ensures that any existing policy is removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-configure.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineVoiceRoutingPolicy -Identity <user> -PolicyName $Null\n```\n\n----------------------------------------\n\nTITLE: Remove Dial-In Configuration - Skype for Business - PowerShell\nDESCRIPTION: Removes one or more collections of dial-in conferencing configuration settings. These settings determine how Skype for Business Server responds when users join or leave a dial-in conference.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsDialInConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Disable Teams with Set-MgUserLicense PowerShell\nDESCRIPTION: This PowerShell script disables Microsoft Teams (TEAMS1) for a specified licensing plan. It first defines the AccountSkuId, then uses Set-MgUserLicense to create a license option with Teams disabled. This operation requires the Microsoft Graph Users module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/user-access.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n    $acctSKU=\"<CompanyName:License>\"\n    $x = Set-MgUserLicense -AccountSkuId $acctSKU -DisabledPlans \"TEAMS1\"\n```\n\n----------------------------------------\n\nTITLE: Checking Enterprise Voice Status\nDESCRIPTION: This PowerShell command retrieves a user and checks their EnterpriseVoiceEnabled attribute. It is used to verify that the user has Enterprise Voice enabled. Requires the Teams PowerShell module to be installed. $user variable must be defined as the UPN or SIP address of the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-pad-configuration.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity $user|Select EnterpriseVoiceEnabled\n```\n\n----------------------------------------\n\nTITLE: Assign Voice Policy Example - PowerShell\nDESCRIPTION: This PowerShell example shows how to assign the voice policy \"VoicePolicyJapan\" to the user \"Bob Kelly\" in Skype for Business Server. This requires the CsUserAdministrator or CsAdministrator role. This is a specific use case of the general assignment command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-users-for-enterprise-voice.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsVoicePolicy -Identity \"Bob Kelly\" -PolicyName VoicePolicyJapan\n```\n\n----------------------------------------\n\nTITLE: Detecting Suspicious Team Owners based on Sign-in Logs (Kusto)\nDESCRIPTION: This Kusto query identifies suspicious Team Owners by combining data from SigninLogs and OfficeActivity.  It detects failed sign-in patterns in Microsoft Entra ID and then correlates that with Team Owners. The query uses a time range of 1 day, a lookback period of 7 days, and defines thresholds for failed sign-ins and IP address counts to identify potentially compromised accounts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-sentinel-guide.md#_snippet_3\n\nLANGUAGE: Kusto\nCODE:\n```\nlet timeRange = 1d;\nlet lookBack = 7d;\nlet threshold_Failed = 5;\nlet threshold_FailedwithSingleIP = 20;\nlet threshold_IPAddressCount = 2;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet azPortalSignins = SigninLogs\n| where TimeGenerated >= ago(timeRange)\n// Azure Portal only and exclude non-failure Result Types\n| where AppDisplayName has \"Azure Portal\" and ResultType !in (\"0\", \"50125\", \"50140\")\n// Tagging identities not resolved to friendly names\n| extend Unresolved = iff(Identity matches regex isGUID, true, false);\n// Lookup up resolved identities from last 7 days\nlet identityLookup = SigninLogs\n| where TimeGenerated >= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\n// Join resolved names to unresolved list from portal signins\nlet unresolvedNames = azPortalSignins | where Unresolved == true | join kind= inner (\n   identityLookup ) on UserId\n| extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName\n| project-away lu_UserDisplayName, lu_UserPrincipalName;\n// Join Signins that had resolved names with list of unresolved that now have a resolved name\nlet u_azPortalSignins = azPortalSignins | where Unresolved == false | union unresolvedNames;\nlet failed_signins = (u_azPortalSignins\n| extend Status = strcat(ResultType, \": \", ResultDescription), OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\n| extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize TimeGenerated = makelist(TimeGenerated), Status = makelist(Status), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress), FailedLogonCount = count()\nby UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, FullLocation\n| mvexpand TimeGenerated, IPAddresses, Status\n| extend TimeGenerated = todatetime(tostring(TimeGenerated)), IPAddress = tostring(IPAddresses), Status = tostring(Status)\n| project-away IPAddresses\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, UserId, UserDisplayName, Status, FailedLogonCount, IPAddress, IPAddressCount, AppDisplayName, Browser, OS, FullLocation\n| where (IPAddressCount >= threshold_IPAddressCount and FailedLogonCount >= threshold_Failed) or FailedLogonCount >= threshold_FailedwithSingleIP\n| project UserPrincipalName);\nOfficeActivity\n| where TimeGenerated > ago(time_window)\n| where Operation =~ \"MemberRoleChanged\"\n| mv-expand bagexpansion=array Members\n| evaluate bag_unpack(Members)\n| where Role == '2'\n| where Members in (failed_signins)\n```\n\n----------------------------------------\n\nTITLE: Getting CsAuthConfig Settings with PowerShell\nDESCRIPTION: This snippet shows how to use the Get-CsAuthConfig cmdlet to retrieve the current authentication configuration settings for Skype for Business Server. It's recommended to record the starting state before making any changes with Set-CsAuthConfig. No specific parameters are required for this command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/modern-authentication/turn-on-modern-auth.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAuthConfig\n```\n\n----------------------------------------\n\nTITLE: Defining a Call Action for Skype for Business Queue - PowerShell\nDESCRIPTION: This PowerShell code defines an action to be taken in a Skype for Business Response Group queue, such as terminating the call. It relies on a previously created prompt and uses the `New-CsRgsCallAction` cmdlet. The action and prompt are saved to a variable, such as `$actionTO`. Replace `<saved prompt from previous step>` with the variable storing the prompt and `<action to be taken>` with the desired action (e.g., Terminate).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-queue.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$actionTO = New-CsRgsCallAction -Prompt <saved prompt from previous step> -Action <action to be taken>\n```\n\n----------------------------------------\n\nTITLE: Create Dial-by-Name Prompts and Menu Options - PowerShell\nDESCRIPTION: This PowerShell script creates prompts and menu options for the dial-by-name auto attendant. It also defines the call flow and auto attendant itself. It uses `New-CsAutoAttendantPrompt`, `Get-CsOnlineUser`, `New-CsAutoAttendantCallableEntity`, `New-CsAutoAttendantMenuOption`, `New-CsAutoAttendantMenu`, and `New-CsAutoAttendantCallFlow` and `New-CsAutoAttendant` cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\n$dialByNameMenuPrompt = New-CsAutoAttendantPrompt -TextToSpeechPrompt \"Please say or enter the name of the person you would like to reach. To return to the previous menu press 9.\"\n\n$dialByNameMenuOption9Target = (Get-CsOnlineUser \"ContosoMainAA-RA@contoso.com\").Identity\n\n$dialByNameMenuOption9Entity = New-CsAutoAttendantCallableEntity -Identity $dialByNameMenuOption9Target -Type applicationendpoint\n\n$dialByNameMenuOption9 = New-CsAutoAttendantMenuOption -Action TransferCallToTarget -DtmfResponse Tone9 -CallTarget $dialByNameMenuOption9Entity\n\n$dialByNameMenu = New-CsAutoAttendantMenu -Name \"Contoso Dial By Name AA\" -MenuOptions @($dialByNameMenuOption9) -Prompt $dialByNameMenuPrompt\n\n$dialByNameMenu = New-CsAutoAttendantMenu -Name \"Contoso Dial By Name AA\" -MenuOptions @($dialByNameMenuOption9) -Prompt $dialByNameMenuPrompt -EnableDialByName -DirectorySearchMethod ByName\n\n$dialByNameCallFlow = New-CsAutoAttendantCallFlow -Name \"Contoso Dial By Name Call Flow\" -Menu $dialByNameMenu\n\n$dialByNameAutoAttendant = New-CsAutoAttendant -Name \"Contoso Dial By Name\" -DefaultCallFlow $dialByNameCallFlow -LanguageId \"en-US\" -TimeZoneId \"UTC\" -Operator $operatorEntity -EnableVoiceResponse -InclusionScope $dialScope\n```\n\n----------------------------------------\n\nTITLE: Assign Phone Number to Resource Account - PowerShell\nDESCRIPTION: This PowerShell command assigns a phone number to an existing resource account.  The `-Identity` parameter specifies the SIP address of the resource account, and the `-LineURI` parameter specifies the phone number to be assigned, in E.164 format (e.g., `tel:+14255550100`).  This step is crucial for enabling the resource account to receive calls through the Phone System auto attendant or call queue.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-onprem-ra.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsHybridApplicationEndpoint -Identity appinstance01@contoso.com -LineURI tel:+14255550100\n```\n\n----------------------------------------\n\nTITLE: Specify QoE Retention for a Specific Location - PowerShell\nDESCRIPTION: This PowerShell command enables purging of QoE data for the Redmond site and configures the site to retain QoE data for 20 days. It uses the `Set-CsQoeConfiguration` cmdlet to modify the QoE configuration settings for a specific site. The `-Identity` parameter specifies the site, `-EnablePurging` enables data purging, and `-KeepQoEDataForDays` sets the retention period.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/modify-qoe-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsQoeConfiguration -Identity \"site:Redmond\" -EnablePurging -KeepQoEDataForDays 20\n```\n\n----------------------------------------\n\nTITLE: Importing Audio File for Sales Queue - PowerShell\nDESCRIPTION: This PowerShell script reads an audio file into a byte array and then imports it as an online audio file for use with a call queue.  It assumes the file is located at `d:\\sales-hold-in-queue-music.wav`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$content = [System.IO.File]::ReadAllBytes('d:\\sales-hold-in-queue-music.wav')\n$audioFileSalesHoldInQueueMusicID = (Import-CsOnlineAudioFile -ApplicationID HuntGroup -FileName \"sales-hold-in-queue-music.wav\" -Content $content).ID\n```\n\n----------------------------------------\n\nTITLE: Creating Teams Voice Applications Policy - PowerShell\nDESCRIPTION: This cmdlet creates a new Teams voice application policy. This allows you to define custom settings for voice applications like Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_47\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Exporting Auto Attendant Holidays - PowerShell\nDESCRIPTION: This cmdlet exports holiday schedules configured for Auto Attendants to a file in Microsoft Teams. This enables you to back up or transfer holiday configurations. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsAutoAttendantHolidays\n```\n\n----------------------------------------\n\nTITLE: Disable Teams Consumer Access - PowerShell\nDESCRIPTION: This PowerShell snippet disables external access to Teams consumer accounts globally by setting the EnableTeamsConsumerAccess parameter to $false. This requires the MicrosoftTeams module and impacts all users unless overridden by a more specific policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsExternalAccessPolicy -EnableTeamsConsumerAccess $false\n```\n\n----------------------------------------\n\nTITLE: Start Front End Pool - PowerShell\nDESCRIPTION: This PowerShell cmdlet restarts the Front End pool after adding or removing servers. This ensures that the changes are applied and the pool is functioning correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-front-end-servers.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsPool\n```\n\n----------------------------------------\n\nTITLE: Removing Online Audio File - PowerShell\nDESCRIPTION: This cmdlet removes an audio file from Microsoft Teams.  Used for managing audio prompts for Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_42\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsOnlineAudioFile\n```\n\n----------------------------------------\n\nTITLE: Enable Native File Uploads for Tenant - PowerShell\nDESCRIPTION: This PowerShell command enables the `NativeFileEntryPoints` parameter for the entire Microsoft Teams tenant, allowing users to access OneDrive and SharePoint for file uploads within Teams chats and channels. It modifies the global Teams Files policy. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-off-teams-native-file-upload-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsFilesPolicy -Identity Global -NativeFileEntryPoints Enabled\n```\n\n----------------------------------------\n\nTITLE: Assign a Teams Messaging Policy to a Batch of Users via PowerShell\nDESCRIPTION: This PowerShell snippet assigns a Teams messaging policy to a batch of users by retrieving the user list from Microsoft Entra ID using Graph PowerShell. The policy is assigned to users identified by their SIP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MgGraph\n$users = Get-MgUser\nNew-CsBatchPolicyAssignmentOperation -PolicyType TeamsMessagingPolicy -PolicyName \"New Hire Messaging Policy\" -Identity $users.SipProxyAddress -OperationName \"Example 2 batch\"\n```\n\n----------------------------------------\n\nTITLE: Creating Voicemail Policy - PowerShell\nDESCRIPTION: This cmdlet creates a new Cloud Voicemail policy. Administrators can define settings for voicemail transcription, translation, profanity masking, and other features.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voicemail-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoicemailPolicy\n```\n\n----------------------------------------\n\nTITLE: Get Status of Batch Policy Assignment\nDESCRIPTION: This PowerShell snippet retrieves the status of a batch policy assignment operation using the `Get-CsBatchPolicyAssignmentOperation` cmdlet. It filters the operation by its `OperationId` and then pipes the output to `fl` (Format-List) to display all properties of the object. The `OperationId` should be replaced with the actual ID returned when the batch assignment was initiated.  This allows administrators to monitor the progress and identify any errors during the assignment process.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policy-packages.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Get-CsBatchPolicyAssignmentOperation -OperationId f985e013-0826-40bb-8c94-e5f367076044 | fl\n```\n\n----------------------------------------\n\nTITLE: Enable Voice for User - PowerShell\nDESCRIPTION: Enables Enterprise Voice for a specific user using the Set-CsPhoneNumberAssignment cmdlet.  The user is identified by their identity, and the EnterpriseVoiceEnabled parameter is set to $true. This step is crucial for the user to make and receive calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-scenario.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n## Enable voice for the user\nSet-CsPhoneNumberAssignment -Identity user@contoso.com -EnterpriseVoiceEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Updating Archiving Configuration using Set-CsArchivingConfiguration (PowerShell)\nDESCRIPTION: This cmdlet updates an existing Archiving Configuration. The `-Identity` parameter specifies the site (e.g., `site:Redmond`). The `-ArchiveDuplicateMessages` parameter is set to `$False` to prevent duplicate messages from being archived, and `-KeepArchivingDataForDays` is set to `30` to specify the retention period.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsArchivingConfiguration -Identity site:Redmond -ArchiveDuplicateMessages $False -KeepArchivingDataForDays 30\n```\n\n----------------------------------------\n\nTITLE: Updating Call Queue for Response Time - PowerShell\nDESCRIPTION: This snippet Adds new parameters to [Set|New]-CsCallQueue cmdlets for configuring response time service level threshold using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_74\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set|New]-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Check Tenant TeamsOnly Mode and Read-Only Status - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the TeamsUpgradeEffectiveMode and TeamsUpgradePolicyIsReadOnly properties for the tenant to verify if the tenant is in TeamsOnly mode and if the coexistence mode is read-only. It uses Get-CsTenant to fetch the tenant configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/coexistence-chat-calls-presence.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n//Check if Tenant is TeamsOnly and if mode is read only.\n$t=Get-CsTenant\n$t|fl TeamsUpgradeEffectiveMode, TeamsUpgradePolicyIsReadOnly\n\nTeamsUpgradeEffectiveMode  : TeamsOnly\nTeamsUpgradePolicyIsReadOnly: ModeAndNotifications\n```\n\n----------------------------------------\n\nTITLE: Test Skype for Business and Exchange Connectivity\nDESCRIPTION: This PowerShell command tests the integration between Skype for Business Server and Exchange Server. It uses the Test-CsExStorageConnectivity cmdlet to verify that the Skype for Business Server Storage Service can connect to Exchange Server by writing and (optionally) deleting an item in a user's Conversation History folder.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/configure-partner-applications.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nTest-CsExStorageConnectivity -SipUri \"sip:kenmyer@litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Define Response Group Business Hours - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to define preset schedules for response group business hours. These preset schedules can then be selected within the Response Group Configuration Tool when configuring workflows. This allows for reusable business hour configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CSRgsHoursOfBusiness\n```\n\n----------------------------------------\n\nTITLE: Modifying a Teams Branch Survivability Policy - PowerShell\nDESCRIPTION: These PowerShell commands modify an existing Teams Branch Survivability Policy. The first command removes an SBA from the policy, and the second command adds an SBA to the policy. The `-Identity` parameter specifies the policy to modify, and the `-BranchApplianceFqdns` parameter with the `@` symbol and `remove` or `add` action specifies the changes to the list of associated SBAs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-survivable-branch-appliance.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsSurvivableBranchAppliancePolicy -Identity CPH -BranchApplianceFqdns @{remove=\"sba1.contoso.com\"} \nSet-CsTeamsSurvivableBranchAppliancePolicy -Identity CPH -BranchApplianceFqdns @{add=\"sba1.contoso.com\"} \n```\n\n----------------------------------------\n\nTITLE: Configure Webinar Registration Form to Require Only Standard and Required Questions - PowerShell\nDESCRIPTION: This PowerShell script configures the Teams events policy to only allow organizers to require attendees to answer standard and default required questions on the webinar registration form. It utilizes the `Set-CsTeamsEventsPolicy` cmdlet with the `-AllowedQuestionTypesInRegistrationForm` parameter set to `DefaultAndPredefinedOnly`. Replace `<policy name>` with the actual name of the policy you wish to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-registration-form-webinars.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowedQuestionTypesInRegistrationForm DefaultAndPredefinedOnly\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule Translation Example\nDESCRIPTION: This example demonstrates a translation rule for E.164 phone numbers within Skype for Business Server. It prepends '+1425' to a 7-digit number matched by the regular expression. '$1' represents the captured group of digits from the 'Match this pattern'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/normalization-rules.md#_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n+1425$1\n```\n\n----------------------------------------\n\nTITLE: Remove New Teams Package (All Users) - PowerShell\nDESCRIPTION: This PowerShell command removes the new Teams app package for all users on the system. It's intended to be executed with administrative privileges to ensure complete removal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-uninstall.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-AppxPackage \n```\n\n----------------------------------------\n\nTITLE: Adding Meeting Policy Parameters in CsTeamsMeetingPolicy cmdlets\nDESCRIPTION: This snippet adds `AllowsUsersForMeetingDetails` and `RealTimeText` parameters to the `New-CsTeamsMeetingPolicy` and `Set-CsTeamsMeetingPolicy` cmdlets. These parameters likely control meeting settings within Microsoft Teams. There are no explicitly mentioned dependencies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsMeetingPolicy\n```\n\n----------------------------------------\n\nTITLE: Check Teams Files Policy Status - PowerShell\nDESCRIPTION: This PowerShell command retrieves the current status of the Teams Files policy for the entire tenant.  It allows administrators to verify whether the `NativeFileEntryPoints` parameter is enabled or disabled. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-off-teams-native-file-upload-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsFilesPolicy -Identity Global\n```\n\n----------------------------------------\n\nTITLE: SBC Support for REFER Method Declaration in ALLOW Header\nDESCRIPTION: This code snippet shows an example of an SBC signaling that it supports the REFER method by including it in the ALLOW header. This indicates to the Microsoft SIP proxy that the SBC can handle call transfers directly, enabling Option 2 (SIP proxy acts as a Transferor).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-sip.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nALLOW: INVITE, OPTIONS, INFO, BYE, CANCEL, ACK, PRACK, UPDATE, REFER, SUBSCRIBE, NOTIFY\n```\n\n----------------------------------------\n\nTITLE: Migrate Response Group Configuration - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to migrate the Response Group configuration from a source pool to a destination pool. It copies agent groups, queues, workflows, and audio files.  The -Source parameter specifies the FQDN of the source pool, and the -Destination parameter specifies the FQDN of the destination pool. This cmdlet migrates the entire pool configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-response-groups.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsRgsConfiguration -Source <source pool FQDN> -Destination <destination pool FQDN>\n```\n\n----------------------------------------\n\nTITLE: Installing MicrosoftTeams PowerShell Module\nDESCRIPTION: This PowerShell command installs the MicrosoftTeams module.  The `-Force` parameter allows overwriting any existing versions and `-AllowClobber` prevents errors due to naming conflicts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/bookable-desks.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name MicrosoftTeams -Force -AllowClobber\nImport-Module MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Policy\nDESCRIPTION: This command allows administrators to modify various settings for Teams meetings policies. It is used to configure meeting engagement, content sharing and content protection settings. It requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy\n```\n\n----------------------------------------\n\nTITLE: Create a new CLS scenario with multiple providers\nDESCRIPTION: This PowerShell command creates a new scenario and assigns multiple providers to it. It utilizes splatting (`@{Add=...}`) to add multiple providers to the scenario. The `Identity` parameter defines the scope and name of the scenario. This allows collecting data from various sources simultaneously.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClsScenario -Identity \"site:Redmond/CollectDataScenario\" -Provider @{Add=$LyssProvider, $ABServerProvider,  $SIPStackProvider}\n```\n\n----------------------------------------\n\nTITLE: Get Phone Number Assignment for User (Teams PowerShell)\nDESCRIPTION: This PowerShell command retrieves the phone number assignment details for a specified user.  It verifies if the user has a Direct Routing number assigned. The expected output is that NumberType should be DirectRouting. It requires the Teams PowerShell module to be installed and the administrator to be connected to their Microsoft 365 tenant.  The parameter <user> needs to be replaced with the actual user identifier.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure-numbers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPhoneNumberAssignment -AssignedPstnTargetId <user>\n```\n\n----------------------------------------\n\nTITLE: Verifying PSTN Gateway Settings in PowerShell\nDESCRIPTION: This PowerShell snippet shows how to retrieve and display the configuration of a PSTN gateway to verify that the *PidfLoSupported* attribute has been correctly set for emergency calling in Microsoft Teams Direct Routing.  This confirms whether the gateway is configured to add location information to outgoing emergency calls. The command uses the `Get-CsOnlinePSTNGateway` cmdlet, specifying the identity of the gateway to retrieve its settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-dynamic-emergency-calling.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlinePSTNGateway -Identity sbc1.fabrikam.onmicrosoft.com\n```\n\n----------------------------------------\n\nTITLE: Create New Conference Directory - PowerShell\nDESCRIPTION: Creates a new conference directory for use in Skype for Business Server. Conference directories help dial-in conferencing users locate conference information. Requires specifying parameters such as the directory ID and pool association. The cmdlet returns the newly created conference directory object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_28\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Setup OAuth on Front End Pools - PowerShell\nDESCRIPTION: This PowerShell function `SetupOAuthOnFrontEndPools` configures or disables ADFS OAuth on specified Skype for Business Front End pools. It iterates through each pool and computer, establishes a remote PowerShell session, and executes a script block on each machine to modify registry settings, set file contents, and configure IIS application pools. It uses parameters like `$macpRegistryPath`, `$disableAdfsOAuth`, `$relativePathToContentMap`, `$adfsClientId`, `$adfsMetadataPublicUri`, `$adfsIssuerName`, and `$adfsOAuthInstance` to customize the configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction SetupOAuthOnFrontEndPools($cred, $pools, $macpRegistryPath, $disableAdfsOAuth, $relativePathToContentMap, $adfsClientId, $adfsMetadataPublicUri, $adfsIssuerName, $adfsOAuthInstance)\n{\n    foreach ($poolName in $pools)\n    {\n        $computers = (Get-CsComputer -Pool $poolName).Identity\n\n        foreach ($computer in $computers)\n        {\n            $psSession = New-PSSession -computerName $computer -credential $cred\n            Invoke-Command -Session $psSession `\n            -ArgumentList $macpRegistryPath, $disableAdfsOAuth, $relativePathToContentMap, $adfsClientId, `\n            $adfsMetadataPublicUri, $adfsIssuerName, $adfsOAuthInstance `\n            -ScriptBlock {\n                param($macpRegistryPath, $disableAdfsOAuth, $relativePathToContentMap, $adfsClientId, $adfsMetadataPublicUri, $adfsIssuerName, $adfsOAuthInstance)\n                $installDir = Get-ItemPropertyValue -Path $macpRegistryPath -Name \"InstallDir\"\n\n                foreach ($val in $relativePathToContentMap.GetEnumerator())\n                {\n                    $relativePath = $($val.Name)\n                    $fileContent = $($val.Value)\n                    $filePath = Join-Path -Path $installDir -ChildPath $relativePath\n                    Set-Content -Path $filePath -Value $fileContent\n                }\n\n                $adfsOAuthEnabled = $true\n                if ($disableAdfsOAuth -eq $true)\n                {\n                    $adfsOAuthEnabled = $false\n                }\n\n                Set-ItemProperty -Path $macpRegistryPath -Name \"AdfsOAuthEnabled\" -Value $adfsOAuthEnabled\n                Set-ItemProperty -Path $macpRegistryPath -Name \"AdfsClientId\" -Value $adfsClientId\n                Set-ItemProperty -Path $macpRegistryPath -Name \"AdfsMetadataPublicUri\" -Value $adfsMetadataPublicUri\n                Set-ItemProperty -Path $macpRegistryPath -Name \"AdfsIssuerName\" -Value $adfsIssuerName\n                Set-ItemProperty -Path $macpRegistryPath -Name \"AdfsOAuthInstance\" -Value $adfsOAuthInstance\n\n                # Changing the application pool of Macp app to make it same as that of Skype for Business Server Web Site. This is needed for URL rewrite to work in case of Simple URL.\n                # This is important to note that this change is required only for the Simple URL feature. However, we chose to make this change whenever ADFS is configured.\n                # This change may not be reverted when we fall back to WebTicket. And that is alright.\n                Import-Module WebAdministration\n                Set-ItemProperty -Path 'IIS:\\Sites\\Skype for Business Server Internal Web Site\\Macp' -Name applicationPool -Value LyncIntFeature\n                Set-ItemProperty -Path 'IIS:\\Sites\\Skype for Business Server External Web Site\\Macp' -Name applicationPool -Value LyncExtFeature\n\n                iisreset\n            }\n\n            Remove-PSSession -Session $psSession\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Shared Notes with PowerShell\nDESCRIPTION: This PowerShell snippet enables the shared notes feature in Teams meetings. It employs the `Set-CsTeamsMeetingPolicy` cmdlet to set the `AllowSharedNotes` parameter to `$true`. This allows users covered by that policy to create and share notes during meetings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-policies-content-sharing.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSTeamsMeetingPolicy -AllowSharedNotes $true\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Calling Routing Policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new Shared Calling Routing Policy named 'Seattle'. It configures the policy to use the resource account 'main-aa@contoso.com' and adds two emergency callback numbers associated with the resource account. The command depends on the Get-CsOnlineUser cmdlet to retrieve the resource account object and the New-CsTeamsSharedCallingRoutingPolicy cmdlet to create the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ecbn1 = '+14255556789'\n$ecbn2 = '+14255554321'\n$ra = Get-CsOnlineUser -Identity main-aa@contoso.com\nNew-CsTeamsSharedCallingRoutingPolicy -Identity Seattle -ResourceAccount $ra.Identity -EmergencyNumbers @{add=$ecbn1,$ecbn2}\n```\n\n----------------------------------------\n\nTITLE: Set Attendee Visibility for Live Events PowerShell\nDESCRIPTION: Sets the global policy to control who can join live events. The `-BroadcastAttendeeVisibility Everyone` parameter allows anyone, including anonymous users, to attend. It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastPolicy -Identity Global -BroadcastAttendeeVisibility Everyone  \n```\n\n----------------------------------------\n\nTITLE: Setting Authorized Users for Call Queue via PowerShell\nDESCRIPTION: This PowerShell command adds authorized users to an existing call queue. The `-Identity` parameter specifies the GUID of the call queue, and the `-AuthorizedUsers` parameter takes an array of user GUIDs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_30\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <CallQueue GUID> -AuthorizedUsers @(\"User 01 GUID\", \"User 02 GUID\")\n```\n\n----------------------------------------\n\nTITLE: Enable Copilot for B2B Members - PowerShell\nDESCRIPTION: This PowerShell snippet enables the 'Allow Copilot for B2B members' setting. It uses the `Set-CsTeamsMultiTenantOrganizationConfiguration` cmdlet with the `-Identity Global` parameter to target the global configuration and sets the `-CopilotFromHomeTenant` parameter to `Enabled`. This allows B2B members with Copilot licenses to use Copilot in meetings hosted by your organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/copilot-mto.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMultiTenantOrganizationConfiguration -Identity Global -CopilotFromHomeTenant Enabled  \n```\n\n----------------------------------------\n\nTITLE: Enabling Cloud Recording for Teams Meetings - PowerShell\nDESCRIPTION: This PowerShell snippet enables cloud recording for Teams meetings by setting the `AllowCloudRecording` parameter to `Enabled` for a given Teams meeting policy.  `<policy name>` should be replaced with the actual name of the policy. This allows users to record their Teams meetings and store them in the cloud.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity \\<policy name\\> -AllowCloudRecording Enabled\n```\n\n----------------------------------------\n\nTITLE: Move-CsUser with TeamsOnly Assignment\nDESCRIPTION: This section explains how the `Move-CsUser` cmdlet is used to move users from an on-premises Skype for Business Server or Lync Server 2013 environment directly to TeamsOnly mode in Microsoft Teams. Since the retirement of Skype for Business Online, specifying the `-MoveToTeams` parameter is no longer necessary as it automatically transitions users to TeamsOnly and initiates meeting conversions to Teams meetings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/plan-hybrid-connectivity.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser\n```\n\n----------------------------------------\n\nTITLE: Update Microsoft Graph PowerShell Module\nDESCRIPTION: This PowerShell command updates the Microsoft Graph PowerShell module to the latest version. It is used to ensure that you have the most recent cmdlets and functionalities available for managing Microsoft 365 resources.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/archive-or-delete-a-team.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Module Microsoft.Graph\n```\n\n----------------------------------------\n\nTITLE: Configure Secondary Location Source URL - PowerShell\nDESCRIPTION: This PowerShell cmdlet configures the URL for the location of the secondary location database, which is used by the Location Information service in Skype for Business Server for E9-1-1 functionality.  The <web service url> must conform to Location Information service WSDL. This setting is part of the web service configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/secondary-location-information-service.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsWebServiceConfiguration -SecondaryLocationSourceURL \"<web service url>\"\n```\n\n----------------------------------------\n\nTITLE: Enable External Meeting Chat - PowerShell\nDESCRIPTION: This PowerShell script enables chat in Teams meetings hosted by external organizations for users with the assigned policy.  It uses the `Set-CsTeamsMeetingPolicy` cmdlet with the `-AllowExternalNonTrustedMeetingChat` parameter set to `$True`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-meeting-chat.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowExternalNonTrustedMeetingChat $True\n```\n\n----------------------------------------\n\nTITLE: Create External Access Policy - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new external access policy with the specified Identity (PolicyName) and parameter set to $true.  Replace <PolicyName> with a unique name for the policy and <parameter> with settings like EnableFederationAccess or EnableTeamsConsumerAccess. This policy can then be assigned to specific users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsExternalAccessPolicy -Identity <PolicyName> -<parameter> $true\n```\n\n----------------------------------------\n\nTITLE: Setting CsAuthConfig with PowerShell\nDESCRIPTION: This snippet demonstrates how to use the Set-CsAuthConfig cmdlet to modify authentication configuration settings for Skype for Business Server.  These settings control which authentication methods are allowed internally and externally. This cmdlet is meant to be run at the Global level. After configuration, Enable-CsComputer must be run on each computer for settings to take effect.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/modern-authentication/turn-on-modern-auth.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAuthConfig\n```\n\n----------------------------------------\n\nTITLE: Disable Voice Isolation for Users - PowerShell\nDESCRIPTION: This snippet demonstrates how to prevent users from using voice isolation by setting the VoiceIsolation parameter in CsTeamsMeetingPolicy to Disabled. This restricts users from using voice isolation in Teams calls and meetings. Requires Microsoft Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/voice-isolation.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -VoiceIsolation Disabled\n```\n\n----------------------------------------\n\nTITLE: Setting Call Queue using PowerShell\nDESCRIPTION: This cmdlet sets properties of a call queue. Fixed to allow null or empty array values in the input parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_124\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Starting Azure AD Sync Cycle\nDESCRIPTION: This PowerShell script initiates an Azure AD Sync cycle using the `Start-ADSyncSyncCycle` cmdlet with the `-PolicyType Delta` parameter. This ensures that changes made to Active Directory are synchronized with Azure AD, which is important after modifying user attributes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-ADSyncSyncCycle -PolicyType Delta\n```\n\n----------------------------------------\n\nTITLE: Setting Toll-Free Number for a User - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to change the default toll-free number for a specific user using the `Set-CsOnlineDialinConferencingUser` cmdlet.  It requires the Skype for Business Online PowerShell module. The `-Identity` parameter specifies the user's email address, and the `-TollFreeServiceNumber` parameter defines the new toll-free number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialinConferencingUser -Identity amos.marble@Contoso.com -TollFreeServiceNumber   80045551234\n```\n\n----------------------------------------\n\nTITLE: Set Cloud Endpoint via Registry Key for Gov Clouds - PC\nDESCRIPTION: This code snippet shows how to set the initial cloud endpoint for Teams in Government Community Cloud High (GCCH), Department of Defense (DoD), or Gallatin environments.  This registry key restricts Teams to connecting to the correct cloud endpoint for pre-sign-in connectivity. The `Value` should be set to the corresponding number for the appropriate cloud.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-bulk-install-client.md#_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\nHKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Office\\16.0\\Teams\nValue = CloudType\nvalue type = DWORD\n  1 = Commercial, 2 = GCC, 3 = GCCH, 4 = DOD, 7 = Gallatin\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Experience using Set-CsClientPolicy (PowerShell)\nDESCRIPTION: The `Set-CsClientPolicy` cmdlet is used to choose the preferred client experience (Skype for Business or Lync 2013). The `EnableSkypeUI` parameter determines which user interface is enabled. This allows administrators to control the roll-out of the new client experience to their users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/what-s-new-in-skype-for-business-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPolicy -EnableSkypeUI $true\n```\n\n----------------------------------------\n\nTITLE: Create Teams Upgrade Policy with notifications enabled\nDESCRIPTION: This PowerShell command creates a new instance of TeamsUpgradePolicy with notifications enabled (NotifySfbUsers set to $true). This policy can then be assigned to users to inform them of the upcoming upgrade to Teams.  This is intended for on-premises Skype for Business Server environments.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-tools.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsUpgradePolicy -Identity EnableNotification -NotifySfbUsers $true\n```\n\n----------------------------------------\n\nTITLE: Get Location ID using PowerShell\nDESCRIPTION: This code snippet shows how to retrieve a location ID using the `Get-CsOnlineLisLocation` PowerShell cmdlet. This ID is required for assigning a location to a resource account for emergency calling.  Ensure the Teams PowerShell module is installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineLisLocation](/powershell/module/teams/get-csonlinelislocation) PowerShell cmdlet.\n```\n\n----------------------------------------\n\nTITLE: Updating Archiving Policy using Set-CsArchivingPolicy (PowerShell)\nDESCRIPTION: This cmdlet updates an existing Archiving Policy.  The `-Identity` parameter specifies the policy to modify (`global` in this case), and the `-ArchiveInternal` parameter is set to `$True` to enable archiving of internal communications.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsArchivingPolicy -Identity global -ArchiveInternal $True\n```\n\n----------------------------------------\n\nTITLE: Get User IDs for Sales Queue - PowerShell\nDESCRIPTION: This PowerShell script retrieves the IDs of specific users from Microsoft Teams based on their SIP addresses. These IDs are later used when configuring the call queue.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$userAdeleID = (Get-CsOnlineUser -Identity \"sip:adele@contoso.com\").Identity\n$userSalesBillID = (Get-CsOnlineUser -Identity \"sip:bill@contoso.com\").Identity\n$userSalesMaryID = (Get-CsOnlineUser -Identity \"sip:mary@contoso.com\").Identity\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Broadcast Policy via Powershell\nDESCRIPTION: This snippet shows how to use the Set-CsTeamsMeetingBroadcastPolicy PowerShell command to configure live event recording options in Microsoft Teams. This command is used to manage recording settings for organizers, controlling whether recordings are available to producers, presenters, and attendees.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/live-events-recording-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastPolicy\n```\n\n----------------------------------------\n\nTITLE: Remove a Call Park Policy using PowerShell\nDESCRIPTION: This PowerShell snippet removes the call park policy named \"SalesPolicy\". The `Remove-CsTeamsCallParkPolicy` cmdlet is used to delete the specified policy from the system. After running this command, the policy will no longer be available for assignment or use.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-park-and-retrieve.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Remove-CsTeamsCallParkPolicy -Identity \"SalesPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Set Client PIN Policy - PowerShell\nDESCRIPTION: Modifies one or more existing client personal identification number (PIN) policies.  The cmdlet requires the Skype for Business Server PowerShell module.  The input is the identity of the PIN policy to be modified and the new settings.  The output reflects the modified policy object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_45\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Editing a Resource Account with PowerShell\nDESCRIPTION: This snippet demonstrates how to edit a resource account using the Set-CsOnlineApplicationInstance PowerShell cmdlet. This allows for programmatic modification of resource account properties. The resource account requires appropriate licensing and permissions to function correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/set-up-resource-account-steps.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nYou can edit a resource account with the PowerShell cmdlet, [Set-CsOnlineApplicationInstance](/powershell/module/teams/set-csonlineapplicationinstance).\n```\n\n----------------------------------------\n\nTITLE: Create a new Teams IP Phone policy\nDESCRIPTION: This PowerShell command creates a new Teams IP Phone policy with the specified identity, description, and sign-in mode. The sign-in mode is set to 'MeetingSignIn' to force the meeting room interface. Dependencies: MicrosoftTeams module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/phones/teams-android-devices-user-interface.md#_snippet_1\n\nLANGUAGE: Powershell\nCODE:\n```\nNew-CsTeamsIPPhonePolicy –Identity 'Meeting Sign in' –Description 'Meeting Sign In Phone Policy' -SignInMode 'MeetingSignIn'\n```\n\n----------------------------------------\n\nTITLE: Allow Invited Users to Bypass Lobby (PowerShell)\nDESCRIPTION: This PowerShell snippet allows only people who were invited to bypass the lobby. It uses the `Set-CsTeamsEventsPolicy` cmdlet with the `-AutoAdmittedUsers` parameter set to `InvitedUsers`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AutoAdmittedUsers InvitedUsers \n```\n\n----------------------------------------\n\nTITLE: Get Direct Routing Number Order (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the status of a Direct Routing number upload order using the `Get-CsOnlineTelephoneNumberOrder` cmdlet.  It filters by `OrderType` (DirectRoutingNumberCreation) and `OrderId` to identify the specific order.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-enable-users.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineTelephoneNumberOrder -OrderType DirectRoutingNumberCreation -OrderId <orderId>\n```\n\n----------------------------------------\n\nTITLE: Disable Call Forwarding - PowerShell\nDESCRIPTION: This command disables call forwarding settings for a given user. It includes options to send unanswered calls to voicemail or another destination, and it can also specify a wait time and whether settings apply only during active work hours.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserCallForwardingSettings [-Identity] <UserIdParameter> -DisableForwarding  [-UnansweredToVoicemail] [-UnansweredWaitTime <TimeSpan>] [-SettingsActiveWorkHours]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserCallForwardingSettings [-Identity] <UserIdParameter> -DisableForwarding  [-UnansweredToOther <String>] [-UnansweredWaitTime <TimeSpan>] [-SettingsActiveWorkHours]\n```\n\n----------------------------------------\n\nTITLE: Move Analog Devices to New Pool - PowerShell\nDESCRIPTION: This command retrieves all analog device contact objects associated with a specific legacy registrar pool and then moves them to a specified Skype for Business Server 2019 pool. It uses `Get-CsAnalogDevice` to filter the devices by the registrar pool and `Move-CsAnalogDevice` to move them to the target pool. The parameters are `-Filter` to specify the registrar pool and `-Target` to define the destination pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-analog-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAnalogDevice -Filter {RegistrarPool -eq \"pool01.contoso.net\"} | Move-CsAnalogDevice -Target pool02.contoso.net\n```\n\n----------------------------------------\n\nTITLE: Run Teams Bootstrapper for Installation\nDESCRIPTION: This command runs the Teams bootstrapper executable to install the new Teams client for all users on the computer. The `-p` parameter triggers the provisioning process, and the command should be executed from an administrator command prompt.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-bulk-install-client.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n.\\teamsbootstrapper.exe -p\n```\n\n----------------------------------------\n\nTITLE: Adding a Skype for Business Online Domain (New-CsAllowedDomain)\nDESCRIPTION: This step adds the Skype for Business Online customer domain to the allowed domains list, enabling federation. It's necessary if domain discovery is disabled. The cmdlet New-CsAllowedDomain adds the specified domain to the list of domains allowed to federate with the Skype for Business Server deployment. This step assumes you have the appropriate permissions to modify the Skype for Business Server configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/federation-support/configuring-federation-support.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Adding Users to Azure AD Groups based on License - PowerShell\nDESCRIPTION: This snippet iterates through all users in Azure AD with assigned licenses and adds them to either the teacher or student group based on their assigned licenses. It retrieves user licenses using `Get-AzureADUser` and compares them against the previously identified `$TeacherSkuIDs` and `$StudentSkuIDs`. If a user has a matching license, they are added to the corresponding group using `Add-MsolGroupMember`. The MSOnline and AzureAD modules are dependencies for this script to function.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/scripts/powershell-script-security-groups-edu.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nForeach ($User in $AllUsers) {\n    $ObjectID = $User.ObjectID\n    Write-host \"`n\"\n    Write-Host -ForegroundColor Green \"Getting Assigned Licenses for $DN\"\n    $GetUser = Get-AzureADUser -objectid $user.objectid\n    $AssignedLicenses = ($GetUser | select -ExpandProperty assignedlicenses).skuid\n    Write-Host -ForegroundColor Green \"User Assigned License: \" $User.Displayname \"-\" $AssignedLicenses \"-\" $User.ObjectId\n\n\n    #Set Variables\n    $UPN = $User.userprincipalname\n    $DN = $User.Displayname\n    $OBJ = $User.ObjectID\n    $Age = $User.AgeGroup\n    $Consent = $User.ConsentProvidedForMinor\n    $Legal = $User.LegalAgeGroupClassification\n\n        #Start foreach loop for all assigned skus\n        Foreach ($License in $AssignedLicenses) {\n\n            #Creating new PS Object for each Sku and adding to the array\n            If ($TeacherSkuIDs -contains $License) {\n                $TeacherObj = New-Object PSObject\n                $TeacherObj | Add-Member NoteProperty -Name UserPrincipalName -Value $UPN\n                $TeacherObj | Add-Member NoteProperty -Name DisplayName -Value $DN\n                $TeacherObj | Add-Member NoteProperty -Name ObjectID -Value $OBJ\n                $TeacherObj | Add-Member NoteProperty -Name SkuID -Value $License\n                $TeacherObj | Add-Member NoteProperty -Name AgeGroup -Value $Age\n                $TeacherObj | Add-Member NoteProperty -Name ConsentProvidedForMinor -Value $Consent\n                $TeacherObj | Add-Member NoteProperty -Name LegalAgeGroupClassification -Value $Legal\n                $TeachersArray += $TeacherObj\n                if ($teachergroupid -ne $null) {\n                    Add-MsolGroupMember -GroupObjectId $teachergroupid -GroupMemberType User -GroupMemberObjectId $OBJ\n                }\n            }\n                        \n            If ($StudentSkuIDs -contains $License) {\n                $StudentObj = New-Object PSObject\n                $StudentObj | Add-Member NoteProperty -Name UserPrincipalName -Value $UPN\n                $StudentObj | Add-Member NoteProperty -Name DisplayName -Value $DN\n                $StudentObj | Add-Member NoteProperty -Name ObjectID -Value $OBJ\n                $StudentObj | Add-Member NoteProperty -Name SkuID -Value $License\n                $StudentObj | Add-Member NoteProperty -Name AgeGroup -Value $Age\n                $StudentObj | Add-Member NoteProperty -Name ConsentProvidedForMinor -Value $Consent\n                $StudentObj | Add-Member NoteProperty -Name LegalAgeGroupClassification -Value $Legal\n                $StudentsArray += $StudentObj\n                if ($studentgroupid -ne $null) {\n                    Add-MsolGroupMember -GroupObjectId $studentgroupid -GroupMemberType User -GroupMemberObjectId $OBJ\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Registry Key for Teams Sign-in Restriction\nDESCRIPTION: This snippet shows how to set a Windows Registry key to restrict Teams sign-in to accounts from a specific tenant. The `RestrictTeamsSignInToAccountsFromTenantList` value is set under the specified registry path to the Tenant ID or a comma-separated list of Tenant IDs. This policy is applicable to Teams for Windows.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/sign-in-teams.md#_snippet_1\n\nLANGUAGE: registry\nCODE:\n```\nSOFTWARE\\Policies\\Microsoft\\Office\\16.0\\Teams\\RestrictTeamsSignInToAccountsFromTenantList = Tenant ID\nor\nSOFTWARE\\Policies\\Microsoft\\Office\\16.0\\Teams\\RestrictTeamsSignInToAccountsFromTenantList = Tenant ID 1,Tenant ID 2,Tenant ID 3\n```\n\n----------------------------------------\n\nTITLE: Modify CLS scenario using Set-CsClsScenario (Replace)\nDESCRIPTION: This PowerShell command modifies an existing Centralized Logging Service (CLS) scenario by replacing the existing providers with a new set of providers. It uses the `Set-CsClsScenario` cmdlet with the `-Provider` parameter and the `@{Replace=...}` syntax to replace the current set of providers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsScenario -Identity <name of scope and scenario defined by New-CsClsScenario> -Provider @{Replace=<providers to replace existing provider set>}\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsScenario -Identity \"site:Redmond/LyssServiceScenario\" -Provider @{Replace=$LyssServiceProvider}\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsScenario -Identity \"site:Redmond/LyssServiceScenario\" -Provider @{Replace=$LyssServiceProvider, $ABServerProvider, $SIPStackProvider}\n```\n\n----------------------------------------\n\nTITLE: Assign Teams Files Policy to User - PowerShell\nDESCRIPTION: This PowerShell command assigns the pre-existing Teams Files policy `UserPolicy` to a specific user, identified by their email address. The assigned policy governs the user's file upload behavior. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-off-teams-native-file-upload-policy.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsFilesPolicy  -identity \"user email id\" -PolicyName UserPolicy\n```\n\n----------------------------------------\n\nTITLE: Enabling Copilot and Live Transcription in Teams Meeting Policy using PowerShell\nDESCRIPTION: This snippet demonstrates how to enable Copilot and live transcription for a specific Teams meeting policy using the `Set-CsTeamsMeetingPolicy` cmdlet. It enables both Copilot functionality and transcription.  The `<policy name>` placeholder needs to be replaced with the actual name of the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -Copilot Enabled -AllowTranscription $true\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with PowerShell\nDESCRIPTION: This PowerShell command establishes a connection to Microsoft Teams, initiating a session using administrative credentials. It is essential to authenticate for performing administrative tasks like policy assignment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Disable Channel Meeting Scheduling - PowerShell\nDESCRIPTION: This PowerShell script disables the ability for users assigned to the specified policy to start instant meetings and schedule channel meetings.  It uses the `Set-CsTeamsMeetingPolicy` cmdlet to modify the `AllowMeetNow` and `AllowChannelMeetingScheduling` parameters. Replace `<policy name>` with the actual name of the meeting policy you want to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-who-can-schedule-meetings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowMeetNow $False\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowChannelMeetingScheduling $False\n```\n\n----------------------------------------\n\nTITLE: Create New Dial Plan - PowerShell\nDESCRIPTION: Creates a new dial plan in Skype for Business Server. Dial plans define how phone numbers are translated and routed. Requires specifying parameters such as the dial plan name and normalization rules. The cmdlet returns the newly created dial plan object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_32\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Disable Anonymous Join (Organization-Wide) - PowerShell\nDESCRIPTION: This PowerShell script prevents anonymous participants from joining meetings hosted by anyone in the organization. It uses the `Set-CsTeamsMeetingConfiguration` cmdlet to set the `-DisableAnonymousJoin` parameter to `$true`. When this is set, no one in the organization can create meetings that anonymous users can attend.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/anonymous-users-in-meetings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingConfiguration -Identity <policy name> -DisableAnonymousJoin $true\n```\n\n----------------------------------------\n\nTITLE: Update a URL Filter using Set-CsImFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet modifies an existing URL filter configuration in Skype for Business Server.  The `-Identity` parameter specifies the filter to update, and `-Enabled $False` disables the URL filter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsImFilterConfiguration -Identity site:Redmond -Enabled $False\n```\n\n----------------------------------------\n\nTITLE: Add Switch Location to the Location Database - PowerShell\nDESCRIPTION: This cmdlet adds a switch location to the Skype for Business Server location database. It uses the `Set-CsLisSwitch` cmdlet with parameters specifying the ChassisID, description, location, company name, and civic address details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLisSwitch -ChassisID 0B-23-CD-16-AA-BB -Description \"Switch1\" -Location Location1 -CompanyName \"Litware\" -HouseNumber 1234 -HouseNumberSuffix \"\" -PreDirectional \"\" -StreetName 163rd -StreetSuffix Ave -PostDirectional NE -City Redmond -State WA -PostalCode 99123 -Country US\n```\n\n----------------------------------------\n\nTITLE: Example: Define a Phone Number using PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to define a specific phone number (+1234567890) as a service phone number within the tenant for Direct Routing. It shows the practical application of the `New-CsOnlineDirectRoutingTelephoneNumberUploadOrder` cmdlet. Requires the Teams PowerShell module to be installed and the user to have appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-with-direct-routing-for-gcch-and-dod.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineDirectRoutingTelephoneNumberUploadOrder -TelephoneNumber \"+1234567890\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Copilot for Teams Meetings - PowerShell\nDESCRIPTION: This PowerShell snippet enables Copilot for Teams meetings by setting the `Copilot` parameter to `Enabled` for a specific Teams meeting policy.  `<policy name>` should be replaced with the actual name of the policy. Transcription for meetings must also be enabled for Copilot to function fully.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -Copilot Enabled\n```\n\n----------------------------------------\n\nTITLE: Managing Online Lis Location using PowerShell\nDESCRIPTION: These cmdlets are used for managing online Lis locations. Fixes were made around the supported parameters in the modernized cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_129\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsOnlineLisLocation\n```\n\n----------------------------------------\n\nTITLE: Add User to a Team Channel using PowerShell\nDESCRIPTION: This cmdlet adds a user to a specific team channel. It supports the `TenantId` optional parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_104\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-TeamChannelUser\n```\n\n----------------------------------------\n\nTITLE: Enable Enterprise Voice and Set Line URI - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables Enterprise Voice for a user and assigns a Line URI (phone number). It is used for users created in on-premises AD and then synchronized with Skype for Business Online without being enabled for Skype for Business or Enterprise Voice, and without a LineURI set, or for users already enabled for Skype for Business on premises but not enabled for Enterprise Voice or assigned a LineURI. Replace `<Telephone Number>` with the appropriate phone number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/skype-for-business-hybrid-solutions/plan-your-phone-system-cloud-pbx-solution/enable-the-users-for-enterprise-voice-on-premises.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUser $username -EnterpriseVoiceEnabled $true -LineUri \"tel:+<Telephone Number>\"\n```\n\n----------------------------------------\n\nTITLE: Remove SIP Trunk Configurations with Media Bypass Enabled - PowerShell\nDESCRIPTION: This command removes all SIP trunk configurations where media bypass is enabled. It first retrieves all trunk configurations, then filters them based on the `EnableBypass` property using `Where-Object`.  The filtered configurations are then piped to `Remove-CsTrunkConfiguration` for deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/delete-existing-collection-of-sip-trunk-configuration-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrunkConfiguration | Where-Object {$_.EnableBypass -eq $True} | Remove-CsTrunkConfiguration\n```\n\n----------------------------------------\n\nTITLE: Update Skype for Business Databases in AlwaysOn Group - PowerShell\nDESCRIPTION: This PowerShell command updates the Skype for Business databases within an AlwaysOn Availability Group after patching the Back End Server. It uses the Install-CsDatabase cmdlet with the -Update, -ConfiguredDatabases, -SqlServerFqdn, and -Verbose parameters. The -SqlServerFqdn parameter specifies the FQDN of the AlwaysOn Availability Group.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-databases.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-CsDatabase -Update -ConfiguredDatabases -SqlServerFqdn [sqlpool.contoso.com] -Verbose\n```\n\n----------------------------------------\n\nTITLE: Blocking Teams Recording Downloads - PowerShell\nDESCRIPTION: This PowerShell command specifically blocks the download of Teams meeting recording files from SharePoint or OneDrive by setting the `BlockDownloadFileTypePolicy` to `$true` and specifying `TeamsMeetingRecording` as the file type to block. Requires SharePoint Online Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-download-meeting-recording.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-SPOTenant -BlockDownloadFileTypePolicy $true  -BlockDownloadFileTypeIds TeamsMeetingRecording\n```\n\n----------------------------------------\n\nTITLE: Create PSTN Usage - PowerShell\nDESCRIPTION: This PowerShell command creates a PSTN usage named 'US and Canada' in the global scope.  PSTN usages are collections of voice routes. This example adds \"US and Canada\" PSTN usage to the Global policy.  The command requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-on-network.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlinePstnUsage -Identity Global -Usage @{Add=\"US and Canada\"}\n```\n\n----------------------------------------\n\nTITLE: Testing SIP trunk configuration using PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves the SIP trunk configuration settings for the Redmond site and then tests if the dialed number 4255551212 can be correctly converted using those settings. The Get-CsTrunkConfiguration cmdlet retrieves the trunk configuration, and Test-CsTrunkConfiguration verifies the number conversion. The Identity parameter specifies the scope where the trunk settings are applied.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/test-sip-trunk-configuration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$trunk = Get-CsTrunkConfiguration -Identity \"site:Redmond\"\nTest-CsTrunkConfiguration -DialedNumber 4255551212 -TrunkConfiguration $trunk\n```\n\n----------------------------------------\n\nTITLE: Granting Teams Voice Applications Policy - PowerShell\nDESCRIPTION: This cmdlet grants a Teams voice application policy to a user or group. This applies the policy settings to the specified user(s). Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_46\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Create Meeting Configuration Settings - PowerShell\nDESCRIPTION: Creates a new collection of meeting configuration settings at the site or service scope within Skype for Business Server. This cmdlet allows administrators to define custom meeting policies for specific sites or services. It requires access to the Skype for Business Server Management Shell and the appropriate permissions to modify the configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/meeting-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsMeetingConfiguration](/powershell/module/skype/new-csmeetingconfiguration?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Installing MicrosoftTeams Module - PowerShell\nDESCRIPTION: This command installs the Microsoft Teams PowerShell module from the PowerShell Gallery. The `-Force` parameter overwrites any existing versions, and `-AllowClobber` prevents errors if files are in use. Requires PowerShellGet module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-install.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name MicrosoftTeams -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Enable Call Park using Set-CsVoicePolicy - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables the Call Park feature for a specific voice policy. The `-Identity` parameter specifies the voice policy to modify, and `-EnableCallPark $true` enables Call Park. If the Identity parameter is not specified, it modifies the global voice policy. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-call-park-for-users.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsVoicePolicy -Identity <VoicePolicy> -EnableCallPark $true\n```\n\n----------------------------------------\n\nTITLE: Create New Dial-In Conferencing Configuration - PowerShell\nDESCRIPTION: Creates a new collection of dial-in conferencing configuration settings in Skype for Business Server. These settings control how the system responds when users join or leave a conference. Requires specifying parameters related to name recording and entry/exit announcements. The cmdlet returns the newly created configuration object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_30\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsDialInConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Check Teams MSIX Package Registration Status for Current User\nDESCRIPTION: This PowerShell command is used to check if the Teams MSIX package is registered for the current user.  If the command returns an empty output, it indicates a failed registration of the MSIX package at the user level.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AppxPackage -name MsTeams\n```\n\n----------------------------------------\n\nTITLE: Configure Conferencing Bridge Settings via Teams Admin Center\nDESCRIPTION: This snippet explains how to access and modify the settings for an Audio Conferencing bridge via the Microsoft Teams admin center. It involves navigating to Meetings > Conference bridges and then selecting Bridge settings to open the Bridge settings pane where options like entry/exit notifications and PIN length can be configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-audio-conferencing-in-teams.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n1. From the Home, go to **Meetings** > **Conference bridges**.\n2. Select **Bridge settings** to open the **Bridge settings** pane.\n```\n\n----------------------------------------\n\nTITLE: Enabling Meeting Transcription - PowerShell\nDESCRIPTION: This PowerShell snippet enables meeting transcription for a specific Teams meeting policy by setting the `AllowTranscription` parameter to `$true`.  `<policy name>` should be replaced with the actual name of the policy. This allows users to generate transcripts of their Teams meetings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowTranscription $true\n```\n\n----------------------------------------\n\nTITLE: Creating a Dial Scope - PowerShell\nDESCRIPTION: This cmdlet creates a new dial scope for Auto Attendants in Microsoft Teams.  A dial scope defines the directory search scope for callers. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendantDialScope\n```\n\n----------------------------------------\n\nTITLE: Setting Default Conference Number with PowerShell\nDESCRIPTION: This PowerShell cmdlet replaces the default toll or toll-free number for users and reschedules their meetings. It requires specifying the number to be removed, the new default number, the number type (Toll or Toll-Free), and confirmation to reschedule meetings.  This ensures users' meeting invites are updated with correct dial-in information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingUserDefaultNumber -FromNumber <Number to be removed> -ToNumber <Number to be set as new default> -NumberType <\"Toll\" or \"Toll-Free\"> -RescheduleMeetings\n```\n\n----------------------------------------\n\nTITLE: Disable Global External Access - PowerShell\nDESCRIPTION: This PowerShell snippet disables external access globally by setting the specified parameter to $false. Replace <parameter> with the appropriate setting, such as EnableFederationAccess or EnableTeamsConsumerAccess. This affects all users unless overridden by a more specific policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsExternalAccessPolicy -<parameter> $false\n```\n\n----------------------------------------\n\nTITLE: Modify Call Queue No Agent Handling - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to modify an existing call queue's no agent settings. It uses the `Set-CsCallQueue` cmdlet to update the `NoAgentAction` to `Forward` and set the `NoAgentActionTarget` to the phone number. The `-Identity` parameter specifies the GUID of the call queue to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_29\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <CallQueue GUID> -NoAgentAction Forward -NoAgentActionTarget tel:+<phone number>\n```\n\n----------------------------------------\n\nTITLE: Disable Town Hall Creation via PowerShell\nDESCRIPTION: This PowerShell script disables the ability for users assigned the specified policy to create town halls. It uses the `Set-CsTeamsEventsPolicy` cmdlet to set the `-AllowTownhalls` parameter to `Disabled`. The `<policy name>` placeholder should be replaced with the actual name of the Teams events policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-town-halls.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowTownhalls Disabled\n```\n\n----------------------------------------\n\nTITLE: Set Call Forwarding Settings - PowerShell\nDESCRIPTION: This command modifies the call forwarding settings for a specified user in Skype for Business Server using PowerShell. It accepts various parameters (Param1, Param2, etc.) to configure forwarding options. If successful, it returns the modified settings; otherwise, an error message is displayed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserCallForwardingSettings -Identity <UserIdParameter> [Param1 <Value>] [Param2 <Value>]...\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Teams via PowerShell\nDESCRIPTION: This PowerShell command connects to Microsoft Teams and initiates a session. You will be prompted to sign in using your admin credentials. This is a necessary step to interact with Teams settings using PowerShell. `Connect-MicrosoftTeams` command establishes a connection to the Microsoft Teams service, authenticating the user and preparing the environment for subsequent cmdlet execution.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policy-packages.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Turn on Meeting Chat using PowerShell\nDESCRIPTION: This PowerShell script enables the meeting chat feature for town hall organizers by setting the `-TownhallChatExperience` parameter to `Optimized` within the `Set-CsTeamsEventsPolicy` cmdlet.  It requires the policy name as input. This allows organizers to enable chat for attendees during town halls. This command updates the specified Teams events policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/town-hall-chat.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -TownhallChatExperience Optimized\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Location Policy with Get-CsLocationPolicy (PowerShell)\nDESCRIPTION: This snippet retrieves the details of a specific location policy in Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the policy to retrieve. The example retrieves the policy named \"Reno\". It outputs a location policy object with its properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsLocationPolicy -Identity Reno\n```\n\n----------------------------------------\n\nTITLE: Assigning a Teams Branch Survivability Policy to a User - PowerShell\nDESCRIPTION: This PowerShell command assigns a Teams Branch Survivability Policy to a specific user. The `-PolicyName` parameter specifies the identity of the policy to assign, and the `-Identity` parameter specifies the user's identity.  The policy determines which SBAs the user's Teams client will connect to during an internet outage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-survivable-branch-appliance.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> Grant-CsTeamsSurvivableBranchAppliancePolicy -PolicyName CPH -Identity user@contoso.com \n```\n\n----------------------------------------\n\nTITLE: Grant Teams Meeting Branding Policy to a User - PowerShell\nDESCRIPTION: This PowerShell snippet assigns a meeting theme policy to a specific user. It employs the `Grant-CsTeamsMeetingBrandingPolicy` cmdlet, using the user's email address as the identity and specifying the policy name.  This assigns the custom branding policy to the specified user's meetings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-themes.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingBrandingPolicy -identity \" alice@contoso.com\" -PolicyName \"Policy Test\"\n```\n\n----------------------------------------\n\nTITLE: Assign a PIN Policy to Multiple Users - PowerShell\nDESCRIPTION: This PowerShell snippet assigns a specific PIN policy to multiple users based on an LDAP filter.  The Get-CsUser cmdlet is used to retrieve users matching the filter, and then the Grant-CsPinPolicy cmdlet is used to apply the PIN policy. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/assign-a-per-user-pin-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -LdapFilter \"l=Redmond\" | Grant-CsPinPolicy -PolicyName \"RedmondUsersPinPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Calling Policy - PowerShell\nDESCRIPTION: This PowerShell command assigns a specific Teams calling policy to a user, enabling Location-Based Routing by preventing PSTN toll bypass.  It uses the Grant-CsTeamsCallingPolicy cmdlet, requiring the PolicyName and the user's ID as parameters. The policy must be pre-configured to prevent PSTN toll bypass.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-enable.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsCallingPolicy -PolicyName <policy name> -id <user id> \n```\n\n----------------------------------------\n\nTITLE: Creating a Site-Level Mobility Policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new site-level mobility policy. It disables VoIP and video (`EnableIPAudioVideo $false`), enables requiring WiFi for IP audio (`RequireWiFiForIPAudio $True`), and enables requiring WiFi for IP video (`RequireWiFiforIPVideo $True`). The `-Identity` parameter specifies the site identifier.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsMobilityPolicy -Identity site:<site identifier> -EnableIPAudioVideo $false -RequireWiFiForIPAudio $True -RequireWiFiforIPVideo $True\n```\n\n----------------------------------------\n\nTITLE: Revert File Upload App to Default using Set-CsTeamsFilesPolicy - PowerShell\nDESCRIPTION: This PowerShell command reverts the default file upload app setting to the original configuration.  Setting the `DefaultFileUploadAppId` to an empty string effectively disables the third-party storage integration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/admin-settings-for-file-drag-drop-to-third-party-storage.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsFilesPolicy -Identity Global -DefaultFileUploadAppId  \"\"\n```\n\n----------------------------------------\n\nTITLE: Move on-premises Skype for Business user to TeamsOnly mode\nDESCRIPTION: This PowerShell command moves an on-premises Skype for Business user to TeamsOnly mode. It requires specifying the target SIP federation and providing credentials.  It's used within the on-premises Skype for Business toolset.  The `$user` and `$cred` variables need to be defined before running this command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-tools.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser -identity $user -Target sipfed.online.lync.com -credential $cred\n```\n\n----------------------------------------\n\nTITLE: Changing a Local Windows Account Password with PowerShell\nDESCRIPTION: This snippet demonstrates how to change the password for a local Windows account using the `Set-LocalUser` cmdlet in PowerShell. It's crucial for securing the default Admin account on Teams Rooms devices and other local accounts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/security.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-LocalUser](/powershell/module/microsoft.powershell.localaccounts/set-localuser#example-2--change-the-password-on-an-account)\n```\n\n----------------------------------------\n\nTITLE: Modifying Call Queue Settings - PowerShell\nDESCRIPTION: This cmdlet modifies the settings of an existing Call Queue in Microsoft Teams.  Parameters allow you to update properties of the Call Queue. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Mask Phone Numbers from External Users - PowerShell\nDESCRIPTION: This PowerShell command masks phone numbers from participants outside of the meeting organizer's tenant. This ensures that only internal participants can see the full phone numbers of other attendees.  It uses the `Set-CsOnlineDialInConferencingTenantSettings` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/ptsn-mask-phone-numbers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingTenantSettings -MaskPstnNumbersType \"MaskedForExternalUsers\"\n```\n\n----------------------------------------\n\nTITLE: Restrict Webinar Attendance to Internal Users via PowerShell\nDESCRIPTION: This PowerShell script restricts webinar attendance to users within the organization, excluding guests, by setting the `-EventAccessType` parameter to `EveryoneInCompanyExcludingGuests` in the `Set-CsTeamsEventsPolicy` cmdlet.  The `<policy name>` placeholder should be replaced with the actual name of the Teams events policy you want to modify. This command requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-webinars.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -EventAccessType EveryoneInCompanyExcludingGuests\n```\n\n----------------------------------------\n\nTITLE: Disable Team-Call - SEFAUtil\nDESCRIPTION: This example shows how to disable the team-call feature for a specific user using the SEFAUtil command-line tool. The command takes the target user's SIP address as input and employs the /disableteamcall switch to disable the team-call functionality. The output shows the updated user settings and confirms that the team-call feature has been disabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /disableteamcall\n```\n\n----------------------------------------\n\nTITLE: Managing Teams AIPolicy - PowerShell\nDESCRIPTION: This snippet highlights the release of `[Get|Set|Remove|Grant|New]-CsTeamsAIPolicy` cmdlets for managing Teams AI policies using the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_50\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set|Remove|Grant|New]-CsTeamsAIPolicy\n```\n\n----------------------------------------\n\nTITLE: Get Dial-In Conferencing DTMF Configuration - Skype for Business - PowerShell\nDESCRIPTION: Returns the dual-tone multi-frequency (DTMF) signaling settings used for dial-in conferencing.  DTMF enables users who dial in to a conference to control conference settings using their telephone keypad.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Disable Interpreter for the organization - PowerShell\nDESCRIPTION: This PowerShell script disables the Interpreter feature for the entire organization by setting the AIInterpreter parameter to 'Disabled' using the Set-CsTeamsMeetingPolicy cmdlet. This prevents users from using the Interpreter agent during Teams meetings. Replace <policy name> with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/interpreter-agent-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AIInterpreter Disabled\n```\n\n----------------------------------------\n\nTITLE: Modifying Location Refresh Interval using Set-CsLocationPolicy\nDESCRIPTION: This snippet demonstrates how to use the `Set-CsLocationPolicy` cmdlet in Skype for Business Server PowerShell to override the default location refresh interval, which is the time between client requests for location updates from the Location Information service. The `LocationRefreshInterval` parameter is used to set the new interval.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/enhanced-9-1-1-and-location-service.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsLocationPolicy cmdlet with the LocationRefreshInterval parameter to override the default value.\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra ID via PowerShell\nDESCRIPTION: This PowerShell command connects to Microsoft Entra ID (Azure Active Directory) using the Microsoft Graph PowerShell module. It requires 'GroupMember.Read.All, Group.ReadWrite.All' scopes to read and write group membership and group properties. An admin account is necessary for authentication.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/archive-or-delete-a-team.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MgGraph -Scopes 'GroupMember.Read.All, Group.ReadWrite.All' \n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Firewall for Teams using PowerShell\nDESCRIPTION: This PowerShell script prevents Teams from prompting users to create firewall rules when they make their first call. It is mentioned as a solution to configure firewall rules for teams.exe for both TCP and UDP protocols.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/get-clients.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee [Sample script - Microsoft Teams firewall PowerShell script](client-firewall-script.md)\n```\n\n----------------------------------------\n\nTITLE: Managing Teams BYOD and Desks Policy\nDESCRIPTION: This set of commands demonstrates how to create, modify, and remove the `CsTeamsBYODAndDesksPolicy` using PowerShell.  It shows how to disable and enable `DeviceDataCollection` to control BYOD data collection. It depends on the MicrosoftTeams module. The `Identity` parameter specifies the policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/bring-your-own-device.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module MicrosoftTeams\nGet-CsTeamsBYODAndDesksPolicy\nNew-CsTeamsBYODAndDesksPolicy -Identity \"Test\"\nSet-CsTeamsBYODAndDesksPolicy -Identity \"Test\" -DeviceDataCollection Disabled\nSet-CsTeamsBYODAndDesksPolicy -Identity \"Test\" -DeviceDataCollection Enabled\nRemove-CsTeamsBYODAndDesksPolicy -Identity \"Test\"\n```\n\n----------------------------------------\n\nTITLE: Listing UC Phone Configurations with Get-CsUCPhoneConfiguration in PowerShell\nDESCRIPTION: This snippet retrieves a list of all UC phone configurations in Skype for Business using the `Get-CsUCPhoneConfiguration` cmdlet. No parameters are required. It returns a list of UC phone configurations and their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_28\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsUCPhoneConfiguration\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Configuration with Realm - PowerShell\nDESCRIPTION: This PowerShell command sets the OAuth configuration for Skype for Business Server with a specified realm. The Realm parameter allows you to define the domain that should be used for OAuth authentication. Replace `contoso.com` with the actual realm name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-an-on-premises-partner-app.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOAuthConfiguration -ServiceName 00000004-0000-0ff1-ce00-000000000000 -Realm \"contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Set Default File Upload App using Set-CsTeamsFilesPolicy - PowerShell\nDESCRIPTION: This PowerShell command sets the default file upload app to a specified third-party cloud storage provider. The `<appId>` parameter represents the application ID of the third-party storage app.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/admin-settings-for-file-drag-drop-to-third-party-storage.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsFilesPolicy -Identity Global -DefaultFileUploadAppId  \"<appId>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Emergency Numbers for India - PowerShell\nDESCRIPTION: This code snippet configures three emergency numbers (100, 101, and 102) for India, and associates them with the \"India\" location policy. Number 100 has a dial mask of 911. This allows for different emergency services to be reached depending on the dialed number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-multiple-emergency-numbers.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n> $a = New-CsEmergencyNumber -DialString 100 -DialMask 911\n> $b = New-CsEmergencyNumber -DialString 101\n> $c = New-CsEmergencyNumber -DialString 102\n> Set-CsLocationPolicy -Identity India -EmergencyNumbers @{add=$a,$b,$c}\n```\n\n----------------------------------------\n\nTITLE: Configure Webinar Registration Form to Require All Question Types - PowerShell\nDESCRIPTION: This PowerShell script configures the Teams events policy to allow organizers to require attendees to answer custom, standard, and default required questions on the webinar registration form. It uses the `Set-CsTeamsEventsPolicy` cmdlet with the `-AllowedQuestionTypesInRegistrationForm` parameter set to `AllQuestions`. Replace `<policy name>` with the actual name of the policy you wish to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-registration-form-webinars.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowedQuestionTypesInRegistrationForm AllQuestions\n```\n\n----------------------------------------\n\nTITLE: Disable Teams View-Only Experience (PowerShell)\nDESCRIPTION: This PowerShell script disables the view-only meeting experience for Microsoft Teams. It uses the `Set-CsTeamsMeetingPolicy` cmdlet to modify the global meeting policy, setting the `StreamingAttendeeMode` parameter to `Disabled`. This limits the meeting to the first 1,000 attendees.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/view-only-meeting-experience.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -StreamingAttendeeMode Disabled\n```\n\n----------------------------------------\n\nTITLE: Enabling BulkSignIn Attribute using PowerShell\nDESCRIPTION: This snippet shows how to enable the BulkSignIn attribute in TeamsSipDevicesConfiguration using the Set-CsTeamsSipDevicesConfiguration PowerShell cmdlet.  This is a prerequisite for using the bulk sign-in functionality. The cmdlet is part of the Microsoft Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-configure.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nThe **BulkSignIn** attribute must be set to `Enabled` in [TeamsSipDevicesConfiguration](/powershell/module/teams/set-csteamssipdevicesconfiguration)\n```\n\n----------------------------------------\n\nTITLE: Unassign External Access Policy from User - PowerShell\nDESCRIPTION: This PowerShell command removes a previously assigned external access policy from a specific user. By setting the PolicyName parameter to `$Null`, the `Grant-CsExternalAccessPolicy` cmdlet effectively unassigns the policy, reverting the user to the global or site policy settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/assign-an-external-user-access-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsExternalAccessPolicy -Identity \"Ken Myer\" -PolicyName $Null\n```\n\n----------------------------------------\n\nTITLE: Getting Policy Assignments for a Specific Teams User (Alternative)\nDESCRIPTION: This snippet retrieves all policy assignments for a specified user in Teams using the `Get-CsUserPolicyAssignment` cmdlet. It requires the user's identity (e.g., email address), and the Teams PowerShell module needs to be installed and connected. This example uses 'hannah@contoso.com' as the user identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsUserPolicyAssignment -Identity hannah@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Modifying Phone Number Assignment with PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to modify a phone number assignment using the `Set-CsPhoneNumberAssignment` cmdlet. Specifically, it shows how to enable the `-ReverseNumberLookup` parameter to skip the Reverse Number Lookup (RNL) process for a specific phone number. This is useful when you want internal users to be connected to the PSTN when calling a resource account's phone number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-plans-routing-overview.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsPhoneNumberAssignment -ReverseNumberLookup\n```\n\n----------------------------------------\n\nTITLE: Retrieving Information about a Teams VDI Policy - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve information about a specific Teams VDI policy using the `Get-CsTeamsVdiPolicy` cmdlet. The `-Identity` parameter specifies the policy to retrieve. This example retrieves the `SalesPolicy` and, since identities are unique, returns only one item.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Get-CsTeamsVdiPolicy -Identity SalesPolicy\n```\n\n----------------------------------------\n\nTITLE: Identifying Users with a Specific License (Faculty) using PowerShell\nDESCRIPTION: This snippet identifies users with a specific faculty license using the Microsoft Graph PowerShell module.  It filters users based on the SkuId associated with the faculty license.  The `ConsistencyLevel` and `CountVariable` parameters are used for efficient querying.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n$SkuId = \"e97c048c-37a4-45fb-ab50-922fbf07a370\"\n$faculty = Get-MgUser -Filter \"assignedLicenses/any(x:x/skuId eq $($SkuId) )\" -ConsistencyLevel eventual -CountVariable skuIdUserCount -All\n```\n\n----------------------------------------\n\nTITLE: Create a Trusted Application Pool using PowerShell\nDESCRIPTION: This PowerShell command creates a trusted application pool in Skype for Business Server. This pool is used to host the watcher node computer, enabling Trusted Server authentication. Key parameters include Identity, Registrar, and ComputerFqdn, which define the pool's fully qualified domain name and registrar.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTrustedApplicationPool -Identity atl-watcher-001.litwareinc.com -Registrar atl-cs-001.litwareinc.com -ThrottleAsServer $True -TreatAsAuthenticated $True -OutboundOnly $False -RequiresReplication $True -ComputerFqdn atl-watcher-001.litwareinc.com -Site Redmond\n```\n\n----------------------------------------\n\nTITLE: Adding SIP Address to proxyAddresses\nDESCRIPTION: This PowerShell script adds the SIP address back to the proxyAddresses attribute in on-premises Active Directory for users listed in \"c:\\data\\SfbUsers.csv\". It iterates through each user, checks if the SIP address is already in the proxyAddresses, and adds it if it's missing. This prevents interoperability issues with other systems that rely on this attribute. It uses the UserPrincipalName to find the user in Active Directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$sfbusers=import-csv \"c:\\data\\SfbUsers.csv\"\nforeach($user in $sfbusers){\n  $userUpn=$user.UserPrincipalName\n  $userSip=$user.SipAddress\n  $proxies=Get-ADUser -Filter \"UserPrincipalName -eq '$userUpn'\" -properties * | Select-Object @{Name=\"proxyAddresses\";Expression={$_.proxyAddresses}}\n  if(($null -eq $proxies) -or ($proxies.proxyAddresses -NotContains $userSip))\n  {\n          Get-ADUser -Filter \"UserPrincipalName -eq '$userUpn'\" | Set-ADUser -Add @{\"proxyAddresses\"=$user.SipAddress}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create CVI Service Provider\nDESCRIPTION: This PowerShell cmdlet is used to specify information about a supported CVI partner that your organization would like to use. This command is used to create a new video interop service provider. It needs partner-specific details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cloud-video-interop.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsVideoInteropServiceProvider\n```\n\n----------------------------------------\n\nTITLE: Add emergency location place using PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new place within an existing emergency location in Microsoft Teams. It requires the Microsoft Teams PowerShell module to be installed and a connection to the Teams service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/add-change-remove-emergency-place-organization.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee [New-CsOnlineLisLocation](/powershell/module/teams/new-csonlinelislocation).\n```\n\n----------------------------------------\n\nTITLE: Enable CsTopology using PowerShell\nDESCRIPTION: This PowerShell command activates the changes made to the Skype for Business Server topology. It ensures that the newly created trusted application and other configuration updates take effect across the environment. Running this command is essential after creating trusted application pools or applications.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-CsTopology\n```\n\n----------------------------------------\n\nTITLE: Enable Call Park for the Global Policy - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables Call Park for the default global voice policy. The `-EnableCallPark $true` parameter enables Call Park for the global policy. Requires Skype for Business Server Management Shell. This is a simplified version of the previous command to target the global policy directly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-call-park-for-users.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsVoicePolicy -EnableCallPark $true\n```\n\n----------------------------------------\n\nTITLE: Syncing Application Instance for Compliance Recording - PowerShell\nDESCRIPTION: This PowerShell snippet synchronizes the newly created application instance with the Microsoft Teams environment. It uses the ObjectId of the application instance as input.  This step is necessary for Teams to recognize the new instance.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-recording-compliance.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSync-CsOnlineApplicationInstance -ObjectId 5069aae5-c451-4983-9e57-9455ced220b7\n```\n\n----------------------------------------\n\nTITLE: Set Tenant-Wide Default Teams Upgrade Policy - PowerShell\nDESCRIPTION: This command sets the tenant-wide default Teams upgrade policy to SfbWithTeamsCollab. This allows upgrading users to TeamsOnly mode while ensuring communication with non-upgraded users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-implement.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName SfbWithTeamsCollab -Global\n```\n\n----------------------------------------\n\nTITLE: Updating Standard Edition Databases - PowerShell\nDESCRIPTION: This PowerShell command updates the SQL Server databases for a Standard Edition server.  It uses the `-LocalDatabases` parameter, indicating the databases are local to the Standard Edition server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/patch-or-update-a-back-end-or-standard-edition-server.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-CsDatabase -Update -LocalDatabases\n```\n\n----------------------------------------\n\nTITLE: Disable Exchange Archiving using PowerShell\nDESCRIPTION: This PowerShell command enables instant messaging archiving but disables archiving to Exchange Server, meaning that transcripts are archived to Skype for Business Server instead. This command is used when you want to archive IMs but not to Exchange.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-exchange-archiving.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingConfiguration -Identity \"global\" -EnableArchiving ImOnly -EnableExchangeArchiving $False\n```\n\n----------------------------------------\n\nTITLE: Setting QoS for Audio using PowerShell\nDESCRIPTION: This snippet demonstrates how to use the `New-NetQosPolicy` cmdlet to set QoS policies for audio traffic in both the new Teams client (ms-teams.exe) and the classic Teams client (Teams.exe). It configures DSCP marking for audio traffic, specifying the application path, IP protocol, source port range, and DSCP value. Dependencies: Requires the NetQoS module in PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/QoS-in-Teams-clients.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nnew-NetQosPolicy -Name \"Teams Audio\" -AppPathNameMatchCondition \"ms-teams.exe\" -IPProtocolMatchCondition Both -IPSrcPortStartMatchCondition 50000 -IPSrcPortEndMatchCondition 50019 -DSCPAction 46 -NetworkProfile All\nnew-NetQosPolicy -Name \"Classic Teams Audio\" -AppPathNameMatchCondition \"Teams.exe\" -IPProtocolMatchCondition Both -IPSrcPortStartMatchCondition 50000 -IPSrcPortEndMatchCondition 50019 -DSCPAction 46 -NetworkProfile All\n```\n\n----------------------------------------\n\nTITLE: Adding Trusted IP Addresses using New-CsTenantTrustedIPAddress - PowerShell\nDESCRIPTION: This snippet demonstrates how to add external trusted IP addresses to the tenant configuration using the `New-CsTenantTrustedIPAddress` cmdlet. These IPs are used by Microsoft Teams clients to connect to Microsoft 365. The command specifies the IP address, subnet mask, and a descriptive name for each trusted IP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTenantTrustedIPAddress -IPAddress <External IP address> -MaskBits <Subnet bitmask> -Description <description>\n```\n\n----------------------------------------\n\nTITLE: Creating After Hours Menu and Call Flow\nDESCRIPTION: These PowerShell commands create an after-hours menu and call flow, linking the prompts and menu options defined earlier to provide a complete call handling experience outside of regular business hours. The after-hours call handling association ties the schedule, call flow, and menu together for the auto attendant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n$afterHoursMenu = New-CsAutoAttendantMenu -Name \"After Hours Menu\" -MenuOptions @($afterHoursMenuOption1, $afterHoursMenuOption2, $dialbynameAAMenuOption3, $afterHoursMenuOption4) -Prompt $afterHoursMenuPrompt\n\n$afterHoursCallFlow = New-CsAutoAttendantCallFlow -Name \"After Hours Call Flow\" -Greetings @($afterHoursGreetingPrompt) -Menu $afterHoursMenu\n\n$afterHoursCallHandlingAssociation = New-CsAutoAttendantCallHandlingAssociation -Type AfterHours -ScheduleId $afterHoursSchedule.Id -CallFlowId $afterHoursCallFlow.Id\n```\n\n----------------------------------------\n\nTITLE: Configuring Test User Accounts with New-CsWatcherNodeConfiguration\nDESCRIPTION: This step involves using the New-CsWatcherNodeConfiguration cmdlet to configure test user accounts that will be used by the watcher node to perform synthetic transactions. This configures the accounts the watcher node will use to simulate user actions like signing in or sending messages.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsWatcherNodeConfiguration\n```\n\n----------------------------------------\n\nTITLE: Uninstalling SQL Mirroring using Uninstall-CsMirrorDatabase Cmdlet\nDESCRIPTION: This cmdlet removes SQL mirroring for a pool in Skype for Business Server 2015. It requires the SqlServerFqdn parameter, and optionally accepts SqlInstanceName and DatabaseType.  The -DropExistingDatabasesOnMirror parameter specifies whether to drop the existing databases on the mirror server. Verbose logging is enabled with -Verbose.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/sql-mirroring-for-high-availability.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nUninstall-CsMirrorDatabase -SqlServerFqdn <SQLServer FQDN> [-SqlInstanceName <SQLServer instance name>] -DatabaseType <Application | Archiving | CentralMgmt | Monitoring | User | BIStaging | PersistentChat | PersistentChatCompliance> [-DropExistingDatabasesOnMirror] [-Verbose]\n```\n\n----------------------------------------\n\nTITLE: Create a new Online Audio Conferencing Routing policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new Audio Conferencing Routing policy.  It uses the defined Online PSTN Usage policy to determine how outbound calls from Teams meetings are routed. The `OnlinePstnUsages` parameter links the routing policy to the previously defined PSTN usage, dictating the routing behavior for audio conferencing calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-conferencing-configure.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineAudioConferencingRoutingPolicy \"International Policy\" -OnlinePstnUsages \"International\"\n```\n\n----------------------------------------\n\nTITLE: Example: Update AudioVideoAuthentication Certificate (PowerShell)\nDESCRIPTION: This is an example of the Set-CsCertificate cmdlet used to update the AudioVideoAuthentication certificate.  It includes the certificate thumbprint and the effective date and time. Ensure the EffectiveDate is formatted to match the server's region and language settings to avoid errors.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/stage-av-and-oauth-certificates.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCertificate -Type AudioVideoAuthentication -Thumbprint \"B142918E463981A76503828BB1278391B716280987B\" -Roll -EffectiveDate \"7/22/2015 6:00:00 AM\"\n```\n\n----------------------------------------\n\nTITLE: Getting PSTN Usage with PowerShell\nDESCRIPTION: This snippet retrieves and displays the configured PSTN usages using the `Get-CSOnlinePSTNUsage` cmdlet.  This is used to verify the successful creation of a PSTN usage. The output might be truncated, so using `(Get-CSOnlinePSTNUsage).usage` is recommended for full names.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CSOnlinePSTNUsage\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Meeting Recordings via MS Graph API (HTTP)\nDESCRIPTION: This example demonstrates how to retrieve links to all available Teams meeting recordings of a user using the meetingOrganizerUserId, startDateTime, and endDateTime filters through Microsoft Graph API. It requires OnlineMeetingRecording.Read.All permission.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nGET  https://graph.microsoft.com/v1.0/users/{id}/onlineMeetings/getAllRecordings(meetingOrganizerUserId='{userId}',startDateTime={startDateTime},endDateTime={endDateTime})\n```\n\n----------------------------------------\n\nTITLE: Get-CsOnlineTelephoneNumberCountry/Type Cmdlets\nDESCRIPTION: This snippet describes the release of the `Get-CsOnlineTelephoneNumberCountry` and `Get-CsOnlineTelephoneNumberType` cmdlets.  These cmdlets allow administrators to retrieve information about telephone number countries and types available for online use within Microsoft Teams via PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_141\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineTelephoneNumberCountry\nGet-CsOnlineTelephoneNumberType\n```\n\n----------------------------------------\n\nTITLE: Manage Live Captions with PowerShell\nDESCRIPTION: This snippet shows how to manage live caption settings using the `Set-CsTeamsMeetingPolicy` cmdlet in PowerShell. The `-LiveCaptionsEnabledType` parameter determines whether live captions are enabled, disabled, or user-configurable for meetings. You must have the Microsoft Teams PowerShell module installed to execute this cmdlet, which alters the settings of a specified Teams meeting policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-transcription-captions.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <PolicyName> -LiveCaptionsEnabledType DisabledUserOverride\n```\n\n----------------------------------------\n\nTITLE: Unassigning a Teams Meeting Policy from Users by Email\nDESCRIPTION: This snippet demonstrates how to unassign a Teams meeting policy from specific users identified by their email addresses using the `New-CsBatchPolicyAssignmentOperation` cmdlet. It requires the Teams PowerShell module to be installed and connected.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$users_ids = @(\"reda@contoso.com\", \"nikica@contoso.com\", \"jamie@contoso.com\")\nNew-CsBatchPolicyAssignmentOperation -PolicyType TeamsMeetingPolicy -PolicyName $null -Identity $users_ids -OperationName \"Unassign meeting policy\"\n```\n\n----------------------------------------\n\nTITLE: Change Archiving Database Location using PowerShell\nDESCRIPTION: This PowerShell snippet changes the location of the Archiving database for a specified Archiving Server. It uses the `Set-CsArchivingServer` cmdlet to update the `ArchivingDatabase` property. The snippet requires the Skype for Business Server PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/change-archiving-database-options.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingServer -Identity \"ArchivingServer:atl-cs-001.contoso.com\" -ArchivingDatabase \"ArchivingDatabase:atl-sql-001.contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Teams via PowerShell\nDESCRIPTION: This PowerShell command initiates a connection to the Microsoft Teams service. It prompts for administrator credentials to authenticate and authorize the session, allowing subsequent cmdlets to manage Teams resources.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-start for UWP Apps via Registry - Windows\nDESCRIPTION: This registry snippet enables the auto-start option for UWP apps, including Microsoft Teams.  This configuration allows users to control auto-start behavior through the Settings app. Requires administrator privileges to modify the registry.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_9\n\nLANGUAGE: Registry editor\nCODE:\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System]\n\"EnableFullTrustStartupTasks\"=dword:00000002\n\"EnableUwpStartupTasks\"=dword:00000002\n\"SupportFullTrustStartupTasks\"=dword:00000001\n\"SupportUwpStartupTasks\"=dword:00000001\n```\n\n----------------------------------------\n\nTITLE: Listing Location Policies with Get-CsLocationPolicy (PowerShell)\nDESCRIPTION: This snippet retrieves and lists all existing location policies in Skype for Business Server. Location policies are used to apply settings related to E9-1-1 functionality. No specific parameters are required. It outputs a list of location policy objects with their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsLocationPolicy\n```\n\n----------------------------------------\n\nTITLE: Filtering Get-CsOnlineUser with -like Operator\nDESCRIPTION: Demonstrates how to use the -like operator with wildcard characters for filtering the Get-CsOnlineUser cmdlet.  This example retrieves users whose DisplayName contains \"abc\". The wildcard character '*' is used within the -like operator for a 'contains' scenario.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_85\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter \"DisplayName -like 'abc*'\"\n```\n\n----------------------------------------\n\nTITLE: Removing User License Grace Period - PowerShell\nDESCRIPTION: This snippet Releases Remove-CsUserLicenseGracePeriod cmdlet in private preview. using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_75\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsUserLicenseGracePeriod\n```\n\n----------------------------------------\n\nTITLE: Disable Private Meeting Scheduling - PowerShell\nDESCRIPTION: This PowerShell script disables the ability for users assigned to the specified policy to start instant private meetings and schedule private meetings through Teams and Outlook.  It uses the `Set-CsTeamsMeetingPolicy` cmdlet to set the `AllowPrivateMeetNow`, `AllowPrivateMeetingScheduling`, and `AllowOutlookAddIn` parameters to `$False`. Replace `<policy name>` with the name of the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-who-can-schedule-meetings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowPrivateMeetNow $False\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowPrivateMeetingScheduling $False\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowOutlookAddIn $False\n```\n\n----------------------------------------\n\nTITLE: Setting Team Targeting Hierarchy\nDESCRIPTION: This PowerShell command uploads a CSV file to define the team targeting hierarchy in Microsoft Teams. The `-FilePath` parameter specifies the path to the CSV file.  You must be a Teams service admin to run this command.  Uploading a new hierarchy replaces the existing one.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-TeamTargetingHierarchy -FilePath \"C:\\ContosoTeamSchema.csv\"\n```\n\n----------------------------------------\n\nTITLE: Managing Auto Attendant and Call Queue Authorized Users using PowerShell\nDESCRIPTION: These cmdlets are used for managing auto attendant and call queue settings and they now support the AuthorizedUsers optional parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_111\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsAutoAttendant & [New|Set]-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Set Cloud Endpoint via .plist Configuration for Gov Clouds - Mac\nDESCRIPTION: This code snippet shows how to set the initial cloud endpoint for Teams in Government Community Cloud High (GCCH), Department of Defense (DoD), or Gallatin environments on macOS. This `.plist` configuration restricts Teams to connecting to the correct cloud endpoint for pre-sign-in connectivity. The `Value` should be set to the corresponding number for the appropriate cloud.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-bulk-install-client.md#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\nDomain: com.microsoft.teams2\nKey: CloudType\nData Type: Int\nValue: {Enter number associated with the cloud}\n  1 = Commercial, 2 = GCC, 3 = GCCH, 4 = DOD, 7 = Gallatin\n```\n\n----------------------------------------\n\nTITLE: MSI Installation Command with Logging\nDESCRIPTION: This command installs the MsTeamsPluginCitrix.msi package with verbose logging enabled. The /i flag specifies the installation of the package, and the /l*vx flag enables verbose logging to the installer.log.txt file. This detailed log file is essential for troubleshooting plugin installation failures.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_15\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec.exe /i MsTeamsPluginCitrix.msi /l*vx installer.log.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Proxy Configurations in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet creates a new proxy configuration in Skype for Business.  It requires specifying an Identity, and allows configuration of settings like RequestServerCompression and MaxClientMessageBodySizeKb. The example creates a proxy configuration for the Edge Server atl-edge-001.litwareinc.com.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsProxyConfiguration -Identity \"service:EdgeServer:atl-edge-001.litwareinc.com\" -RequestServerCompression $True -MaxClientMessageBodySizeKb 256\n```\n\n----------------------------------------\n\nTITLE: Create a per-user archiving policy\nDESCRIPTION: This PowerShell command creates a new archiving policy at the per-user level. The `New-CsArchivingPolicy` cmdlet is used with a unique `-Identity` to create the policy. Default values will be used for the properties of the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/create-a-new-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsArchivingPolicy -Identity \"RedmondArchivingPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Push XML Configuration File via PowerShell\nDESCRIPTION: This PowerShell script copies an XML configuration file (or theme graphic) to a remote computer.  It copies the file specified by `$movefile` to the SkypeSettings.xml location on the remote machine, replacing the existing configuration. The remote path includes the application package ID, which may vary.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-operations.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n$movefile = \"<path>\";\n$targetDevice = \"\\\\<Device fqdn> \\Users\\Skype\\AppData\\Local\\Packages\\Microsoft.SkypeRoomSystem_8wekyb3d8bbwe\\LocalState\\SkypeSettings.xml\"; \nCopy-Item $movefile $targetDevice \n```\n\n----------------------------------------\n\nTITLE: Disable Anonymous Access to Teams Meetings (PowerShell)\nDESCRIPTION: This PowerShell snippet disables anonymous users from joining meetings and webinars. It utilizes the `Set-CsTeamsEventsPolicy` cmdlet with the `-AllowAnonymousUsersToJoinMeeting` parameter set to `$false`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowAnonymousUsersToJoinMeeting $false\n```\n\n----------------------------------------\n\nTITLE: Creating Comma-Separated Team Data Output in PowerShell\nDESCRIPTION: This snippet constructs a comma-separated string representing team data, including DisplayName, ParentName, and TeamId. It initializes a header row and appends data from team objects ($tm1, $tm2, etc.) to the $csvOutput variable, preparing the data for export to a CSV file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$csvOutput = \"DisplayName\" + \",\" + \"ParentName\" + \",\" + \"TeamId\" + \"`n\"\n$csvOutput = $csvOutput + $tm1.DisplayName + \",\" + \",\" + $tm1.GroupID + \"`n\"\n$csvOutput = $csvOutput + $tm2.DisplayName + \",\" + $tm1.DisplayName + \",\" + $tm2.GroupID + \"`n\"\n$csvOutput = $csvOutput + $tm3.DisplayName + \",\" + $tm2.DisplayName + \",\" + $tm3.GroupID + \"`n\"\n$csvOutput = $csvOutput + $tm4.DisplayName + \",\" + $tm2.DisplayName + \",\" + $tm4.GroupID + \"`n\"\n$csvOutput = $csvOutput + $tm5.DisplayName + \",\" + $tm1.DisplayName + \",\" + $tm5.GroupID + \"`n\"\n$csvOutput = $csvOutput + $tm6.DisplayName + \",\" + $tm5.DisplayName + \",\" + $tm6.GroupID + \"`n\"\n$csvOutput = $csvOutput + $tm7.DisplayName + \",\" + $tm5.DisplayName + \",\" + $tm7.GroupID\n```\n\n----------------------------------------\n\nTITLE: Mask Phone Numbers from All Users (Except Organizer) - PowerShell\nDESCRIPTION: This PowerShell command masks phone numbers from all participants in the meeting, except for the meeting organizer. This provides the highest level of privacy, ensuring that only the organizer can see the full phone numbers of other attendees. It utilizes the `Set-CsOnlineDialInConferencingTenantSettings` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/ptsn-mask-phone-numbers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingTenantSettings -MaskPstnNumbersType \"MaskedForAllUsers\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Site Voice Policy - PowerShell\nDESCRIPTION: This snippet retrieves the voice policy for a specific site. It uses the `Get-CsVoicePolicy` cmdlet and the Identity value obtained from the `Get-CsSite` cmdlet. This is a prerequisite to enabling Busy Options for the site's voice policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsVoicePolicy -Identity Site:Redmond1\n```\n\n----------------------------------------\n\nTITLE: Defining a Network Subnet using New-CsTenantNetworkSubnet - PowerShell\nDESCRIPTION: This snippet shows how to define a network subnet and associate it with a network site using the `New-CsTenantNetworkSubnet` cmdlet. The `-SubnetID` parameter specifies the subnet IP address, the `-MaskBits` parameter defines the subnet mask, and the `-NetworkSiteID` parameter associates the subnet with a specific network site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTenantNetworkSubnet -SubnetID <Subnet IP address> -MaskBits <Subnet bitmask> -NetworkSiteID <site ID>\n```\n\n----------------------------------------\n\nTITLE: Hiding Authorized Users in a Call Queue via PowerShell\nDESCRIPTION: This PowerShell command hides authorized users in a call queue. It uses the `-Identity` parameter to specify the call queue's GUID, the `-AuthorizedUsers` parameter to list authorized user GUIDs, and the `-HideAuthorizedUsers` parameter to specify which authorized user GUIDs to hide.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_31\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <CallQueue GUID> -AuthorizedUsers @(\"User 01 GUID\", \"User 02 GUID\") -HideAuthorizedUsers @(\"User 02 GUID\")\n```\n\n----------------------------------------\n\nTITLE: Allow Phone Users Bypassing Lobby (PowerShell)\nDESCRIPTION: This PowerShell snippet allows users dialing in by phone to bypass the lobby. It uses the `Set-CsTeamsEventsPolicy` cmdlet with the `-AllowPSTNUsersToBypassLobby` parameter set to `$true`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowPSTNUsersToBypassLobby $true\n```\n\n----------------------------------------\n\nTITLE: Disable CDR for a single location - PowerShell\nDESCRIPTION: This PowerShell command disables Call Detail Recording (CDR) for a specified site in Skype for Business Server.  It sets the `EnableCDR` parameter to `$False` using the `Set-CsCdrConfiguration` cmdlet. Disabling CDR pauses the collection and storage of CDR data without uninstalling monitoring.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/enable-cdr.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCdrConfiguration -Identity \"site:Redmond\" -EnableCDR $False\n```\n\n----------------------------------------\n\nTITLE: Enabling Group Call Pickup using SEFAUtil\nDESCRIPTION: This command enables Group Call Pickup for a user and assigns a specified group number using the SEFAUtil tool. It requires the user's SIP address and the pool FQDN. This should be run on the server where SEFAUtil is installed with administrator rights. Ensure the target user is not homed online in a hybrid deployment, as this feature is unsupported for online users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-group-call-pickup-for-users-and-assign-a-group-number.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe sip:<sip address of user> /server:<pool FQDN> /enablegrouppickup:<group number>\n```\n\n----------------------------------------\n\nTITLE: Set Copilot Policy to Enabled With Transcript Default On - PowerShell\nDESCRIPTION: This PowerShell snippet configures a Teams meeting policy to set the default Copilot option to 'During and after the meeting'. Organizers can then change it to 'Only during the meeting' or 'Off'. It uses the `Set-CsTeamsMeetingPolicy` cmdlet with the `-Copilot` parameter set to `EnabledWithTranscriptDefaultOn`. `<policy name>` needs to be replaced with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/copilot-teams-transcription.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -Copilot EnabledWithTranscriptDefaultOn\n```\n\n----------------------------------------\n\nTITLE: Failover Front End Server - PowerShell\nDESCRIPTION: This PowerShell cmdlet moves all services from a specified Front End Server to other servers in the pool, taking the server offline.  Replace `<Front End Server to be patched>` with the actual computer name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-front-end-servers.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsComputerFailOver -ComputerName <Front End Server to be patched>\n```\n\n----------------------------------------\n\nTITLE: Executing Storage Service Data Re-import Tool\nDESCRIPTION: This command executes the ImportStorageServiceData.exe tool to re-import Storage Service (LYSS) flushed queue data back into a Skype for Business pool.  It requires the tool to be run on a machine within the pool that has the Lync Server Management Shell installed, and that all front-end machines have Windows PowerShell Remoting enabled.  It assumes all Storage Service instance DB sizes are at the 'Normal' level.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n>  C:\\StorageService>ImportStorageServiceData.exe\nDescription:\nThis tool will re-import Storage Service (LYSS) flushed queue data back in.  For a pool: you are required to run this tool on a machine inside the pool which has the Lync Server Management Shell installed.  Additionally, all front end machines need to have Windows Powershell Remoting enabled before executing this tool by executing Enable-PSRemoting.  Also, please ensure that all Storage Service instance DB Size are at the 'Normal' level (verify this by viewing Eventlog events). Otherwise re-importing may cause data to be flushed out again if any Storage Service instance DB size level goes above 'Normal'.\nUsage: Default behavior is to Import data from web service file share as well as any files on all Front End machines in pool.\nAdditional Options:\n-Verbose                    : Turn verbose output on.\n\n-StorageServiceHostName     : Host Name of Storage Service WCF endpoint.  ( Default=localhost netnamedpipe binding. )\n\n-FileSharePath              : Import only all data from just under the UNC path specified.\n\nActivityID: cc3b62ff-bb66-4e61-a6e2-96cb3626315c. <-- Use this to correlate with StorageService trace logs if troubleshooting.\nType Server name (TCP binding) or press <enter> for localhost (NamePipe binding):\nUsing NetNamedPipeBinding...\nOnTopologyChanged Event received\nWeb Service File Share: \\\\dc.vdomain.com\\OcsFileStore\\co1-WebServices-1\\StorageService\n\nFront Ends:\nserver.vdomain.com\nserver2.vdomain.com\nserver1.vdomain.com\nserver3.vdomain.com\nLooking under directory: \\\\dc.vdomain.com\\OcsFileStore\\co1-WebServices-1\\StorageService for exported data.\n```\n\n----------------------------------------\n\nTITLE: Remove Meeting Configuration Settings - PowerShell\nDESCRIPTION: Deletes an existing collection of meeting configuration settings from Skype for Business Server. This action will remove the customized settings, and the system will revert to the next applicable settings (site or global). It requires access to the Skype for Business Server Management Shell and appropriate administrative permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/meeting-configuration-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Remove-CsMeetingConfiguration](/powershell/module/skype/remove-csmeetingconfiguration?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Get Call Forwarding Settings - PowerShell\nDESCRIPTION: This command retrieves the call forwarding settings for a specific user in Skype for Business Server using PowerShell. It returns a call forwarding settings object and displays it on the screen. The Identity parameter specifies the user ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsUserCallForwardingSettings -Identity <UserIdParameter>\n```\n\n----------------------------------------\n\nTITLE: Removing Application Instance Association - PowerShell\nDESCRIPTION: This cmdlet removes an existing application instance association in Microsoft Teams. Used for managing resource account associations. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_33\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsOnlineApplicationInstanceAssociation\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization Header in PowerShell\nDESCRIPTION: This snippet creates an authorization header containing the access token. This header is then used when making the request to the Microsoft Graph API. The header is stored in the $AuthHeader variable as a hashtable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/security-remove-external-chat.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Request authorization header containing the access token\n$AuthHeader = @{\n    Authorization = \"Bearer $AccessToken\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get SIP Trunks by Pool FQDN - PowerShell\nDESCRIPTION: This command retrieves information about all SIP trunks that are assigned to a specific pool. The `Get-CsTrunk` cmdlet is used with the `-PoolFqdn` parameter, which specifies the fully qualified domain name (FQDN) of the pool. The output displays details of each trunk associated with the specified pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/view-sip-info.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsTrunk -PoolFqdn \"atl-cs-001.litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Updating Group Memberships in Azure AD - PowerShell\nDESCRIPTION: This code snippet handles updating group memberships for existing teacher and student groups based on facultyid and studentid parameters. It adds users with the correct license who are not already in the group and removes users who are no longer in the tenant or don't have the required license.  It uses `Get-MsolGroupMember`, `Add-MsolGroupMember`, and `Remove-MsolGroupMember` to manage group memberships. MSOnline and AzureAD modules are required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/scripts/powershell-script-security-groups-edu.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ((!$teacherAdd) -and ($facultyid -ne $null)) {\n    #Users to be Added in the Teacher Group that are not present\n    $teacherGrpMembers = Get-MsolGroupMember -GroupObjectId $facultyid\n    $teachersToAdd = ($AllUsers | ? {$_.ObjectId -ne $null}).objectid | Where {($teacherGrpMembers | ? {$_.ObjectId -ne $null}).objectid -NotContains $_}\n    Foreach ($id in $teachersToAdd) {\n        $GetUser = Get-AzureADUser -objectid $id\n        $AssignedLicenses = ($GetUser | select -ExpandProperty assignedlicenses).skuid\n        Foreach ($License in $AssignedLicenses) {\n\n            #Adding faculty members to the security group\n            If ($TeacherSkuIDs -contains $License) {\n                Add-MsolGroupMember -GroupObjectId $facultyid -GroupMemberType User -GroupMemberObjectId $id\n            }\n        }\n    }\n    \n    #Users (Faculty) to be removed from the group that are not in tenant anymore\n    $teachersToRemove = ($teacherGrpMembers | ? {$_.ObjectId -ne $null}).objectid | Where {($AllUsers | ? {$_.ObjectId -ne $null}).objectid -NotContains $_}\n    if ($teachersToRemove.Count > 0) {\n        Foreach ($id in $teachersToRemove) {\n            Remove-MsoLGroupMember -GroupObjectId $facultyid -GroupMemberType User -GroupmemberObjectId $id\n        }\n    }\n}\n\nif ((!$studentAdd) -and ($studentid -ne $null)) {\n    #Users to be Added in the Student Group that are not present\n    $studentGrpMembers = Get-MsolGroupMember -GroupObjectId $studentid\n    $studentsToAdd = ($AllUsers | ? {$_.ObjectId -ne $null}).objectid | Where {($studentGrpMembers | ? {$_.ObjectId -ne $null}).objectid -NotContains $_}\n    Foreach ($id in $studentsToAdd) {\n        $GetUser = Get-AzureADUser -objectid $id\n        $AssignedLicenses = ($GetUser | select -ExpandProperty assignedlicenses).skuid\n        Foreach ($License in $AssignedLicenses) {\n\n            #Adding student members to the security group\n            If ($StudentSkuIDs -contains $License) {\n                Add-MsolGroupMember -GroupObjectId $studentid -GroupMemberType User -GroupMemberObjectId $id\n            }\n        }\n    }\n    \n    #Users (Students) to be removed the group that are not in tenant anymore\n    $studentsToRemove = ($studentGrpMembers | ? {$_.ObjectId -ne $null}).objectid | Where {($AllUsers | ? {$_.ObjectId -ne $null}).objectid -NotContains $_}\n    if ($studentsToRemove.Count > 0) {\n        Foreach ($id in $studentsToRemove) {\n            Remove-MsolGroupMember -GroupObjectId $studentid -GroupMemberType User -GroupmemberObjectId $id\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Wildcards in Get-CsOnlineUser\nDESCRIPTION: This snippet demonstrates how to use the `-like` operator with wildcard characters to filter users based on their display name using the `Get-CsOnlineUser` cmdlet. The wildcard `*` allows you to search for users whose display name contains the string 'abc'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_77\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter \"DisplayName -like '*abc*'\"\n```\n\n----------------------------------------\n\nTITLE: Get User Voicemail Settings using PowerShell\nDESCRIPTION: The `Get-CsOnlineVoicemailUserSettings` cmdlet retrieves the voicemail settings for a specific user. This allows administrators to verify the configuration and troubleshoot any issues related to voicemail greetings or transcriptions. It requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-default-language-for-greetings-and-emails.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n[Get-CsOnlineVoicemailUserSettings](/powershell/module/teams/get-csonlinevoicemailusersettings)\n```\n\n----------------------------------------\n\nTITLE: Getting Phone Number Assignment - PowerShell\nDESCRIPTION: This snippet Fixes a bug in Get-CsPhoneNumberAssignment where ReverseNumberLookup was not getting correctly parsed using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_64\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPhoneNumberAssignment\n```\n\n----------------------------------------\n\nTITLE: Associate Subnet with Network Site - Example - PowerShell\nDESCRIPTION: This example demonstrates the use of the `New-CsNetworkSubnet` cmdlet to associate the subnet `172.11.12.13` with the network site `Chicago`, using a mask of `20`.  This configuration ensures that endpoints within the specified subnet are correctly identified as being located in the Chicago network site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-network.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkSubnet -SubnetID 172.11.12.13 - MaskBits 20 -NetworkSiteID Chicago\n```\n\n----------------------------------------\n\nTITLE: Get All Messages in Chats using Microsoft Graph API\nDESCRIPTION: Retrieves all messages in chats using the Microsoft Graph API. This API may be metered and have associated costs. Requires authentication and appropriate permissions. Output is a list of chat message objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_13\n\nLANGUAGE: HTTP\nCODE:\n```\n[chats: getAllMessages](/graph/api/chats-getallmessages)\n```\n\n----------------------------------------\n\nTITLE: Invoke database failover in Skype for Business with PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to fail over all data from the mirror to the principal node in a Skype for Business pool. It requires the Pool FQDN, Database Type, and specifies 'Primary' as the new principal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/alwayson-availability-group.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsDatabaseFailover -PoolFqdn <Pool FQDN> -DatabaseType <DatabaseType> -NewPrincipal \"Primary\"\n```\n\n----------------------------------------\n\nTITLE: Enable Team-Call - SEFAUtil\nDESCRIPTION: This example demonstrates how to enable team-call for a specified user using the SEFAUtil command-line tool. It requires that the team-call group has at least one member.  The command uses the /simulringteam switch. Output is omitted in the original document.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /simulringteam\n```\n\n----------------------------------------\n\nTITLE: Move Dial-in Access Number to Skype for Business Pool (PowerShell)\nDESCRIPTION: This PowerShell cmdlet moves a dial-in access number to a specified Skype for Business Server 2019 pool.  It requires the SIP URI of the access number and the FQDN of the target pool. Successful execution migrates the contact object to the new pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-dial-in-access-numbers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsApplicationEndpoint -Identity <SIP URI of the access number to be moved> -Target <FQDN of the pool to which the access number is moving>\n```\n\n----------------------------------------\n\nTITLE: Adding ExtendedWorkInfoInPeopleSearch parameter\nDESCRIPTION: This snippet adds `ExtendedWorkInfoInPeopleSearch` parameter to `Set-CsTeamsClientConfiguration`. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_32\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsClientConfiguration\n```\n\n----------------------------------------\n\nTITLE: Granting Teams Upgrade Policy via PowerShell\nDESCRIPTION: This code snippet demonstrates how to grant the `SfBWithTeamsCollabAndMeetings` coexistence mode to a user using PowerShell. This policy is necessary to enable the Meetings First experience for the specified user. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meetings-first.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy\n```\n\n----------------------------------------\n\nTITLE: Assign a User-Specific Voice Policy - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign a specific voice policy to a user in Skype for Business Server. It requires the CsUserAdministrator or CsAdministrator role. The `-Identity` parameter specifies the user, and the `-PolicyName` parameter specifies the voice policy to assign.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-users-for-enterprise-voice.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsVoicePolicy -Identity <UserIdParameter> -PolicyName <String>\n```\n\n----------------------------------------\n\nTITLE: Assigning Teams Upgrade Policy\nDESCRIPTION: This command assigns a Teams upgrade policy to users, specifically for displaying notifications in the Skype for Business client for on-premises users.  Only the NotifySfbUsers parameter is relevant for on-premises users.  This command will not work at the tenant level if a lyncdiscover DNS record is detected that points to a location other than Office 365.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-execute-SkypeforBusinessHybridOnPrem.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName UpgradeToTeams\n```\n\n----------------------------------------\n\nTITLE: Create PSTN Usage (PowerShell)\nDESCRIPTION: This PowerShell command adds a new PSTN (Public Switched Telephone Network) usage string to the global configuration. PSTN usages are string values that are used for call authorization and link voice policies to routes.  This example specifically adds the string \"Interop\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-analog-devices.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Set-CsOnlinePstnUsage -Identity global -Usage @{add=\"Interop\"} \n```\n\n----------------------------------------\n\nTITLE: Get Management Store Replication Status using Get-CsManagementStoreReplicationStatus - PowerShell\nDESCRIPTION: This cmdlet retrieves the replication status of the Central Management store. It helps in monitoring the health and consistency of the Skype for Business Server deployment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-topology-menu.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsManagementStoreReplicationStatus\n```\n\n----------------------------------------\n\nTITLE: Creating Teams Upgrade Policy for Notifications\nDESCRIPTION: This snippet creates a new Teams upgrade policy named 'EnableNotifications' that enables notifications for Skype for Business users, informing them of their upcoming move to Teams. It also requires assigning the newly created policy to specified users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/move-users-from-on-premises-to-teams.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsUpgradePolicy -Identity EnableNotifications -NotifySfbUser $true\nGrant-CsTeamsUpgradePolicy -Identity username@contoso.com -PolicyName EnableNotifications\n```\n\n----------------------------------------\n\nTITLE: Setting QoS for Sharing using PowerShell\nDESCRIPTION: This snippet uses the `New-NetQosPolicy` cmdlet to configure QoS policies for application sharing traffic in both the new Teams client (ms-teams.exe) and the classic Teams client (Teams.exe). It specifies the application path, IP protocol, source port range, and DSCP value to prioritize application sharing traffic. Dependencies: Requires the NetQoS module in PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/QoS-in-Teams-clients.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nnew-NetQosPolicy -Name \"Teams Sharing\" -AppPathNameMatchCondition \"ms-teams.exe\" -IPProtocolMatchCondition Both -IPSrcPortStartMatchCondition 50040 -IPSrcPortEndMatchCondition 50059 -DSCPAction 18 -NetworkProfile All\nnew-NetQosPolicy -Name \"Classic Teams Sharing\" -AppPathNameMatchCondition \"Teams.exe\" -IPProtocolMatchCondition Both -IPSrcPortStartMatchCondition 50040 -IPSrcPortEndMatchCondition 50059 -DSCPAction 18 -NetworkProfile All\n```\n\n----------------------------------------\n\nTITLE: Managing Chat Room Access Sample\nDESCRIPTION: This table demonstrates how to plan capacity for managing chat room access based on different sizes of chat rooms (small, medium, large). It includes factors such as number of users, auditorium rooms, open rooms, and membership types to calculate access control entries. The maximum access control entries should not exceed 2,000,000 to prevent performance degradation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/persistent-chat-server/capacity-planning.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n|&nbsp;|Small Chat Rooms|Medium Chat Rooms|Large Chat Rooms|Total|\n|:-----|:-----|:-----|:-----|:-----|\n|Size of chat rooms (number of users connected)   |30 per room   |150 per room   |16,000 per room   ||\n|Chat rooms   |32,000   |1,067   |10   |33,077   |\n|% of rooms that are auditorium   |1%   |1%   |50%   ||\n|% of rooms that are open   |3%   |3%   |50%   ||\n|Open rooms (no explicit membership)   |960   |32   |5   |997   |\n|Non-open rooms (regular rooms with explicit membership)   |31,040   |1.035   |5   |32,080   |\n|Auditorium rooms (additional presenters entry)   |0   |32   |5   ||\n|Rooms managed by direct membership   |50%   |10%   |0%   ||\n|Rooms managed by user groups   |50%   |90%   |100%   ||\n|User groups in each chat room's membership list for open rooms (not specified explicitly)   |0   |0   |0   ||\n|Users in each chat room's membership list for non-open rooms   |30   |150   |16,000   ||\n|User groups in each chat room's membership list for non-open rooms   |3   |5   |10   ||\n|Users and user groups in each chat room's manager list (for open and non-open rooms)   |6   |6   |6   ||\n|Users and user groups in each auditorium chat room's presenters list (for open and non-open rooms)   |6   |6   |6   ||\n|User-based membership entities across all non-open rooms   |465,600   |15,520   |-   ||\n|User-group-based membership entities across all non-open rooms   |46,560   |4656   |50   ||\n|Users and user groups based entities across all auditorium chat rooms   |0   |192   |50   ||\n|Users and user groups based manager entities across all chat rooms manager lists   |192,000   |6,400   |60   ||\n|Active users per chat room   |30   |150   |16,000   ||\n|Chat rooms per user   |12   |2   |2   |16   |\n|User groups in each chat room's membership list   |10   |10   |15   ||\n|Rooms managed by user groups   |50%   |50%   |50%   ||\n|User-group-based membership entities across all chat rooms   |155,200   |5173   |68   ||\n|User-based membership entities across all chat rooms   |465,600   |77,600   |72,000   ||\n|Users and user groups in each chat room's manager, presenter, and scope lists   |6   |6   |6   ||\n|Users and user groups across all chat rooms' manager, presenter, and scope lists   |192,000   |6400   |60   ||\n|Access control entries   |704,160   |26,768   |160   |731,088   |\n|Maximum access control entries   ||||2,000,000   |\n```\n\n----------------------------------------\n\nTITLE: Removing Emergency Callback Number - PowerShell\nDESCRIPTION: This PowerShell command removes the emergency callback number '+14255554321' from the Shared Calling Routing Policy named 'Seattle'. This is required before the number can be deleted or reassigned. It uses the Set-CsTeamsSharedCallingRoutingPolicy cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsSharedCallingRoutingPolicy -Identity Seattle -EmergencyNumbers @{remove='+14255554321'}\n```\n\n----------------------------------------\n\nTITLE: Bulk Update Switch Locations from CSV - PowerShell\nDESCRIPTION: These cmdlets import switch location data from a CSV file named \"switches.csv\" and then use the `Set-CsLisSwitch` cmdlet to update the location database in bulk. The CSV file should contain columns corresponding to the parameters of the `Set-CsLisSwitch` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$g = Import-Csv switches.csv\n$g | Set-CsLisSwitch\n```\n\n----------------------------------------\n\nTITLE: Get Dial Plan - Skype for Business PowerShell\nDESCRIPTION: This snippet retrieves existing dial plans using the `Get-CsDialPlan` cmdlet. This is used to verify that all dial plans have a region assigned, which is essential for proper routing of dial-in access numbers. It's a crucial step in ensuring dial-in conferencing functionality.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get-CsDialPlan](/powershell/module/skype/get-csdialplan?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Disabling Video Message Captions in Teams using PowerShell\nDESCRIPTION: This PowerShell cmdlet disables closed captions for video messages within Microsoft Teams.  It uses the `Set-CsTeamsMessagingConfiguration` cmdlet with the `-EnableVideoMessageCaptions` parameter set to `$false`. This prevents users from seeing captions for video messages.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/messaging-policies-in-teams.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMessagingConfiguration -EnableVideoMessageCaptions $false\n```\n\n----------------------------------------\n\nTITLE: Update User Mobile Phone with Extension using PowerShell\nDESCRIPTION: This PowerShell snippet updates a user's mobile phone number attribute in Microsoft Entra ID with an extension.  It uses the Update-MgUser cmdlet to modify the specified user's MobilePhone property. The extension is appended to the phone number using the ';ext=' format.  Prerequisites include the Microsoft.Graph.Users PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-voice-reference.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-MgUser -UserId 'usern@domain.com' -MobilePhone '15555555678;ext=5678'\n```\n\n----------------------------------------\n\nTITLE: Setting Default IM Provider with Registry Key (Teams)\nDESCRIPTION: This registry key setting is used to configure Microsoft Teams as the default instant messaging (IM) provider on a Windows system. This is useful when the Skype for Business menu option is hidden and you want to force Teams integration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/Exchange-Teams-interact.md#_snippet_0\n\nLANGUAGE: registry\nCODE:\n```\n[HKEY_CURRENT_USER\\Software\\IM Providers] \"DefaultIMApp\"=\"MsTeams\"\n```\n\n----------------------------------------\n\nTITLE: Removing an Auto Attendant - PowerShell\nDESCRIPTION: This cmdlet removes an existing Auto Attendant from Microsoft Teams.  The Auto Attendant will no longer be available to handle incoming calls after being removed. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsAutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Disabling Speaker Coach with PowerShell\nDESCRIPTION: This PowerShell script turns off the Speaker Coach feature for a specific Teams meeting policy. It utilizes the `Set-CsTeamsMeetingPolicy` cmdlet to modify the `-AllowMeetingCoach` parameter to `False`.  Replace `<policy name>` with the actual name of the Teams meeting policy you want to modify. This requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-speaker-coach.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowMeetingCoach False\n```\n\n----------------------------------------\n\nTITLE: Creating a Call Via Work Policy (PowerShell)\nDESCRIPTION: This PowerShell cmdlet creates a new Call Via Work policy. It allows you to specify the policy identity, tenant (if applicable), whether the policy is enabled, and whether to use an admin callback number along with the callback number itself. Various common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-call-via-work.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsCallViaWorkPolicy [-Identity] <XdsIdentity> [-Tenant <guid>] [-Enabled <bool>] [-UseAdminCallbackNumber  <bool>] [-AdminCallbackNumber <string>] [-InMemory] [-Force] [-WhatIf] [-Confirm]  [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Direct Routing Number Assignment Info - PowerShell\nDESCRIPTION: This PowerShell command retrieves information about the phone number assignment for a specific user, specifically to check if the `NumberType` is DirectRouting, indicating that the user has a Direct Routing number assigned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-configure.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPhoneNumberAssignment -AssignedPstnTargetId <user>\n```\n\n----------------------------------------\n\nTITLE: Moving User to TeamsOnly Using PowerShell\nDESCRIPTION: This snippet demonstrates how to move a user from Skype for Business on-premises to TeamsOnly mode using the `Move-CsUser` cmdlet in PowerShell. It requires specifying the user's identity and the target SIP federation.  It also prompts for Microsoft 365 credentials.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/move-users-from-on-premises-to-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$cred=Get-Credential\nMove-CsUser -Identity username@contoso.com -Target sipfed.online.lync.com -Credential $cred\n```\n\n----------------------------------------\n\nTITLE: Stopping Skype for Business Server Services - PowerShell\nDESCRIPTION: This PowerShell command stops all Skype for Business Server services. This is a crucial step before installing any updates to prevent conflicts and ensure proper installation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/patch-or-update-a-back-end-or-standard-edition-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nStop-CsWindowsService\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Permission Roles using PowerShell\nDESCRIPTION: This code snippet demonstrates how to use PowerShell to define chat permission roles for users using the `ChatPermissionRole` policy. This policy is part of the `CsTeamsMessagingPolicy`. The available roles are `Full`, `Limited`, and `Restricted`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/supervised-chat-non-edu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nThis policy is under [CsTeamsMessagingPolicy](/powershell/module/teams/set-csteamsmessagingpolicy).\n```\n\n----------------------------------------\n\nTITLE: Citrix Virtual Channel Allow List Configuration for Teams\nDESCRIPTION: This code snippet shows the configuration needed for the Citrix Virtual Channel Allow List to allow the new Teams client to connect to the client-side plugin. It specifies the custom virtual channels (MSTEAMS, MSTEAM1, MSTEAM2) and the ms-teams.exe executable that are required for Teams functionality.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n- MSTEAMS,C:\\Program Files\\WindowsApps\\MSTeams*8wekyb3d8bbwe\\ms-teams.exe\n- MSTEAM1,C:\\Program Files\\WindowsApps\\MSTeams*8wekyb3d8bbwe\\ms-teams.exe\n- MSTEAM2,C:\\Program Files\\WindowsApps\\MSTeams*8wekyb3d8bbwe\\ms-teams.exe\n```\n\n----------------------------------------\n\nTITLE: Example: Enabling Group Call Pickup for a user\nDESCRIPTION: This is an example of using SEFAUtil.exe to enable Group Call Pickup for a specific user (katarina@contoso.com) and assigning them to group number 199 on the pool01.contoso.com server.  Ensure that the SEFAUtil tool is installed and that you have the correct SIP address and pool FQDN. The user should not be homed online.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-group-call-pickup-for-users-and-assign-a-group-number.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe katarina@contoso.com /server:pool01.contoso.com /enablegrouppickup:199\n```\n\n----------------------------------------\n\nTITLE: Block Subdomains using PowerShell - Microsoft Teams\nDESCRIPTION: This PowerShell cmdlet blocks all subdomains associated with a specified domain for external access in Microsoft Teams. It requires the Teams PowerShell module and sets the BlockAllSubdomains parameter to $True. This prevents communication with any subdomains of a blocked domain.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantFederationConfiguration -BlockAllSubdomains $True\n```\n\n----------------------------------------\n\nTITLE: Creating Teams Mobility Policies with PowerShell\nDESCRIPTION: This PowerShell snippet creates three Teams Mobility Policies: TeamsFirst, NativeFirst, and UserSelected. TeamsFirst sets the mobile dialer preference to Teams, NativeFirst sets it to Native, and UserSelected allows the user to override the setting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsMobilityPolicy -identity TeamsFirst -MobileDialerPreference Teams \nNew-CsTeamsMobilityPolicy -identity NativeFirst -MobileDialerPreference Native \nNew-CsTeamsMobilityPolicy -identity UserSelected -MobileDialerPreference UserOverride\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Response Group Service ID in PowerShell\nDESCRIPTION: This snippet shows how to retrieve the service ID for the Lync Server Response Group service using PowerShell. It uses `Get-CsService` to retrieve all services, filters for those with applications containing \"RGS\", and extracts the `ServiceId` property. The result is prefixed with \"service:\" and assigned to the `$serviceId` variable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$serviceId = \"service:\" + (Get-CsService | ?{$_.Applications -like \"*RGS*\"}).ServiceId;\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange Rules for Auto-Labeling Policy\nDESCRIPTION: This snippet describes how to configure Exchange rules within an auto-labeling policy to automatically apply a sensitivity label to voicemail messages. The conditions specified ensure that only messages with the 'Content-Class' header set to 'Voice-CA' and originating from specific sender IP address ranges are labeled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-phone-system-voicemail.md#_snippet_3\n\nLANGUAGE: Configuration\nCODE:\n```\n- Exchange rules:\n  - Conditions:\n    - **Header matches pattern**: Content-Class = Voice-CA\n    - **Sender IP address is**: 13.107.64.0/18, 52.112.0.0/14, 52.122.0.0/15, 52.238.119.141/32, 52.244.160.207/32\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Calling Policy\nDESCRIPTION: This PowerShell cmdlet enables administrators to configure calling policies in Microsoft Teams. These policies control which calling features are available to users in Teams. The cmdlet requires the Teams module for PowerShell. See Microsoft Teams PowerShell documentation for parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Set Delayed Ring to Team - SEFAUtil\nDESCRIPTION: This example demonstrates how to set a delay before ringing the team-call group, using the SEFAUtil command-line tool. It takes the target user's SIP address as input and uses the /delayringteam switch with a specified delay (in seconds). The output indicates the delay and the team member.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /delayringteam:5\n```\n\n----------------------------------------\n\nTITLE: Create Skype for Business Proxy Configuration\nDESCRIPTION: This PowerShell command creates a new proxy configuration for Skype for Business Server, disabling Kerberos and NTLM for client-to-proxy authentication. Two commands are shown, one for Edge and the other for Registrar services.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsProxyConfiguration -Identity \"Service:EdgeServer:EdgePool01.contoso.com\" -UseKerberosForClientToProxyAuth $False -UseNtlmForClientToProxyAuth $False\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsProxyConfiguration -Identity \"Service:Registrar:SfBPool01.contoso.com\" -UseKerberosForClientToProxyAuth $False -UseNtlmForClientToProxyAuth $False\n```\n\n----------------------------------------\n\nTITLE: Updating Teams Files Policy - PowerShell\nDESCRIPTION: This snippet adds new parameter DefaultFileUploadAppId to [Set|New]-CsTeamsFilesPolicy cmdlets. This allows setting default file upload app id using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_59\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set|New]-CsTeamsFilesPolicy -DefaultFileUploadAppId\n```\n\n----------------------------------------\n\nTITLE: Checking User Homing Status\nDESCRIPTION: This PowerShell command retrieves a user and checks their RegistrarPool and HostingProvider attributes. The command is used to ensure that the user is homed online and not in Skype for Business on premises. $user variable must be defined as the UPN or SIP address of the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-pad-configuration.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity $user|Select RegistrarPool, HostingProvider\n```\n\n----------------------------------------\n\nTITLE: Create Client PIN Policy - PowerShell\nDESCRIPTION: Creates a new client personal identification number (PIN) policy.  The cmdlet requires the Skype for Business Server PowerShell module. Parameters define the settings of the new PIN policy.  The output is the newly created policy object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_43\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Grant PIN Policy to Users - Skype for Business - PowerShell\nDESCRIPTION: Assigns a client personal identification number (PIN) policy to a user or group of users. This cmdlet allows administrators to assign a PIN policy to a user or group.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Grant Dial Plan - PowerShell\nDESCRIPTION: Assigns a dial plan to one or more users or groups in Skype for Business Server.  This enables number translation and routing based on the assigned dial plan. Requires specifying the identity of the user or group and the name of the dial plan. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Voice Mail Escape using Management Shell\nDESCRIPTION: The voice mail escape feature prevents calls from being immediately routed to the user's mobile phone voice mail when simultaneous ringing is configured.  This feature is only configurable through the Skype for Business Server Management Shell and not the GUI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/voice-policy-and-pstn-usage-records.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining API URL for RemoveAllAccessForUser\nDESCRIPTION: This snippet defines the API endpoint URL for the RemoveAllAccessForUser function. It uses the $ThreadId variable to construct the URL.  The API version is beta.  The resulting URL is stored in the $apiUrl variable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/security-remove-external-chat.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Request url\n$apiUrl = \"https://graph.microsoft.com/beta/chats/$ThreadId/removeAllAccessForUser\"\n```\n\n----------------------------------------\n\nTITLE: Removing Voicemail Policy - PowerShell\nDESCRIPTION: This cmdlet removes a Cloud Voicemail policy. Administrators can use it to delete custom voicemail policies that are no longer needed. Note the Global policy cannot be removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voicemail-policies.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsOnlineVoicemailPolicy\n```\n\n----------------------------------------\n\nTITLE: Update OAuthTokenIssuer Certificate with Set-CsCertificate (PowerShell)\nDESCRIPTION: This PowerShell command updates the OAuthTokenIssuer certificate using the Set-CsCertificate cmdlet.  It includes the certificate thumbprint, the effective date, and the -Identity Global parameter, which applies the change globally. The EffectiveDate parameter specifies when the new certificate becomes active.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/stage-av-and-oauth-certificates.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCertificate -Type OAuthTokenIssuer -Thumbprint <thumbprint of new certificate> -Roll -EffectiveDate <date and time for certificate to become active> -identity Global\n```\n\n----------------------------------------\n\nTITLE: Update SQL Logins on Secondary Replicas in Skype for Business AG\nDESCRIPTION: This PowerShell cmdlet updates the SQL logins on the secondary replicas after a failover in a Skype for Business Always On Availability Group. It ensures that the necessary database roles and permissions are correctly configured on each replica, allowing the Skype for Business services to function correctly after failover. This command is executed in the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/alwayson-availability-group.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-CsDatabase -Update\n```\n\n----------------------------------------\n\nTITLE: Connect to MSOnline Service - PowerShell\nDESCRIPTION: This command establishes a connection to the Microsoft Online Services (MSOnline) using the Connect-MsolService cmdlet.  It prompts for Microsoft 365 or Office 365 credentials to authenticate the connection.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MsolService\n```\n\n----------------------------------------\n\nTITLE: JSON Payload Schema for Webhook\nDESCRIPTION: This JSON schema defines the structure of the payload sent to a specified webhook URL when a Teams device health alert is triggered. The schema includes properties such as AlertTitle, DeviceLoggedInUserId, DeviceId, MetricValues (specifically DeviceHealthStatus), RuleName, RuleDescription, RuleFrequency, RuleType, TenantId, RuleCondition, and AlertRaisedAt.  This allows external systems to integrate with Teams device monitoring and create custom workflows based on the alerts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/alerts/device-health-status.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": { \n      \"AlertTitle\": { \"type\": \"string\"} ,\n      \"DeviceLoggedInUserId\": { \"type\": \"string\" } ,\n      \"DeviceId\": { \"type\": \"string\" } ,\n      \"MetricValues\": {\n            \"type\": \"object\",\n            \"properties\": {\n                 \"DeviceHealthStatus\": { \"type\": \"string\"}\n             }\n        } ,\n        \"RuleName\": { \"type\": \"string\"} ,\n        \"RuleDescription\": { \"type\": \"string\"} ,\n        \"RuleFrequency\": { \"type\": \"string\"} ,\n        \"RuleType\": { \"type\": \"string\"} ,\n        \"TenantId\": { \"type\": \"string\"} ,\n        \"RuleCondition\": { \"type\": \"string\"} ,\n        \"AlertRaisedAt\": { \"type\": \"string\"}\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: New Virtual Appointments Policy PowerShell\nDESCRIPTION: This cmdlet creates a new Teams Virtual Appointments Policy. It allows administrators to configure settings related to virtual appointments within the Teams environment, such as enabling SMS notifications. To use this command, you must have the Teams module installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsVirtualAppointmentsPolicy\n```\n\n----------------------------------------\n\nTITLE: Enabling Supervised Chat using PowerShell\nDESCRIPTION: This code snippet shows how to enable supervised chat using PowerShell by setting the `AllowRoleBasedChatPermissions` parameter to `true`. This cmdlet is under `CsTeamsClientConfiguration`. Supervised chat must be enabled tenant-wide.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/supervised-chat-non-edu.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nYou can also use PowerShell to enable Supervised Chat by setting `AllowRoleBasedChatPermissions` to `true`. This cmdlet is under [CsTeamsClientConfiguration](/powershell/module/teams/set-csteamsclientconfiguration).\n```\n\n----------------------------------------\n\nTITLE: Connect to Exchange Online PowerShell\nDESCRIPTION: This PowerShell command connects to Exchange Online PowerShell, allowing administrators to manage Exchange Online settings. It requires the Exchange Online PowerShell module to be installed and administrative credentials for the Microsoft 365 tenant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/mtr-device-config-account-include.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-ExchangeOnline\n```\n\n----------------------------------------\n\nTITLE: Automating Teams Management using PowerShell\nDESCRIPTION: This snippet describes the capabilities of PowerShell for automating team management tasks within Microsoft Teams, including team creation, member management, channel management, and deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/plan-teams-governance-edu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPowerShell can do the following tasks:\n\n- Create a team.\n- Add members and owners.\n- Add channels.\n- Remove members, owners, and channels when you no longer need them.\n- Delete the team.\n```\n\n----------------------------------------\n\nTITLE: Importing Second Management Pack using Operations Manager Shell - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to import the second System Center Operations Manager management pack using the Import-SCOMManagementPack cmdlet. It requires the Operations Manager Shell to be open and the correct path to the management pack file. This command provides detailed error information in case the import fails.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/configure-the-primary-2019.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-SCOMManagementPack -FullName \"D:\\MP\\Microsoft.LS.2019.Monitoring.ComponentAndUser.mp\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Global Archiving Policy in Skype for Business Server (PowerShell)\nDESCRIPTION: This PowerShell command modifies the global archiving policy to enable archiving of both internal and external communication sessions. It uses the Set-CsArchivingPolicy cmdlet to set the ArchiveInternal and ArchiveExternal properties to $True.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-exchange-archiving.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsArchivingPolicy -Identity \"global\" -ArchiveInternal $True -ArchiveExternal $True\n```\n\n----------------------------------------\n\nTITLE: Example Output of Get-CsExternalAccessPolicy Cmdlet\nDESCRIPTION: This code snippet shows an example of the output returned by the Get-CsExternalAccessPolicy cmdlet. It includes the identity of the policy (e.g., Global), a description, and boolean values indicating whether federation, XMPP, public cloud access, audio/video access, and outside access are enabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/manage-external-access-policy-for-your-organization.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nIdentity                          : Global\nDescription                       :\nEnableFederationAccess            : False\nEnableXmppAccess                  : False\nEnablePublicCloudAccess           : False\nEnablePublicCloudAudioVideoAccess : False\nEnableOutsideAccess               : False\n```\n\n----------------------------------------\n\nTITLE: Data Queries Definition\nDESCRIPTION: This JavaScript snippet defines an array of objects, where each object represents a query.  These queries are likely used to fetch data for different call scenarios (Server-Server, Server-Client, etc.). Each query object contains a Label, ID, and a Query object.  The Query object defines dimensions, filters, measurements, and trend settings for retrieving call quality data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n            var queries = [\n            {\n                Label: \"Server-Server\",\n                ID: \"SS\",\n                Query:\n                {\n                  Dimensions: [{ DataModelName: '[StartDate].[Month]'}],\n                  Filters: [\n                      {\n                          \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n                          \"Caption\": \" Server-Inside-wired,Server-Inside-wired\",\n                          \"Value\": \"[1]&amp;[1]&amp;[1]&amp;[1]&amp;[Wired]&amp;[Wired]\",\n                          \"Operand\": 0,\n                          \"UnionGroup\": \"\"\n                      },\n                      { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                      { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\"}\n                  ],\n                  Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]'}],\n                  Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                 }\n            },\n            {\n                Label: \"Server-Client (inside)\",\n                ID: \"SWI\",\n                Query:\n                {\n                  Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                  Filters: [\n                      {\n                          \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n                          \"Caption\": \" Server-Inside-wired,Client-Inside-wired\",\n                          \"Value\": \"[1]&amp;[0]&amp;[1]&amp;[1]&amp;[Wired]&amp;[Wired]\",\n                          \"Operand\": 0,\n                          \"UnionGroup\": \"\"\n                      },\n                      { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                      { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\" }\n                  ],\n                  Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                  Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            },\n            {\n                Label: \"Server-Client (outside)\",\n                ID: \"SWO\",\n                Query:\n                {\n                  Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                  Filters: [\n                      {\n                          \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n                          \"Caption\": \" Server-Inside-wired,Client-Outside-wired\",\n                          \"Value\": \"[1]&amp;[0]&amp;[1]&amp;[0]&amp;[Wired]&amp;[Wired]\",\n                          \"Operand\": 0,\n                          \"UnionGroup\": \"\"\n                      },\n                      { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                      { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\" }\n                  ],\n                  Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                  Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                 }\n            },\n            {\n\n```\n\n----------------------------------------\n\nTITLE: Create NorthAmerica_EMEA_Route using New-CsNetworkInterRegionRoute (PowerShell)\nDESCRIPTION: This PowerShell command creates a new network interregional route named 'NorthAmerica_EMEA_Route' between the 'NorthAmerica' and 'EMEA' network regions, using the 'NA-EMEA-LINK' network region link. It utilizes the New-CsNetworkInterRegionRoute cmdlet to define the route.  The NetworkRegionID1 and NetworkRegionID2 parameters specify the two network regions to be connected, and the NetworkRegionLinkIDs parameter specifies the link to be used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-network-interregional-routes.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkInterRegionRoute -Identity NorthAmerica_EMEA_Route -NetworkRegionID1 NorthAmerica -NetworkRegionID2 EMEA -NetworkRegionLinkIDs \"NA-EMEA-LINK\"\n```\n\n----------------------------------------\n\nTITLE: Move All Conference Directories on a Pool - PowerShell\nDESCRIPTION: This command moves all conference directories associated with a specific pool to a new target pool.  It combines `Get-CsConferenceDirectory` with `Where-Object` to filter by the source pool, then pipes the results to `Move-CsConferenceDirectory`. This approach is useful for bulk migration of conference directories during decommissioning.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-conference-directories.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferenceDirectory | Where-Object {$_.ServiceID -match \"pool01.contoso.net\"} | Move-CsConferenceDirectory -TargetPool \"pool02.contoso.net\"\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Events Policy using PowerShell\nDESCRIPTION: These cmdlets provide functionalities for managing Teams events policies, allowing administrators to create, retrieve, modify, remove, and grant event policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_107\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set|New|Remove|Grant]-CsTeamsEventsPolicy\n```\n\n----------------------------------------\n\nTITLE: Importing Audio File and Setting Music on Hold - PowerShell\nDESCRIPTION: This snippet shows how to import an audio file for use as the default music on hold and then configure the Response Group to use it. It first uses `Import-CsRgsAudioFile` to import the audio file and store it in the `$x` variable. Then, `Set-CsRgsConfiguration` is used to set the `DefaultMusicOnHoldFile` to the imported audio file object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/managing-application-level-response-group-settings.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$x = Import-CsRgsAudioFile -Identity \"service:ApplicationServer:redmond.contoso.com\" -FileName \"MusicWhileYouWait.wav\" -Content ([System.IO.File]::ReadAllBytes('C:\\Media\\ MusicWhileYouWait.wav'))\nSet-CsRgsConfiguration -Identity \"service:ApplicationServer:redmond.contoso.com\" -DefaultMusicOnHoldFile $x\n```\n\n----------------------------------------\n\nTITLE: Enable Attendance Reports with Attendee Opt-in - PowerShell\nDESCRIPTION: This PowerShell script enables attendance and engagement reports for a Teams meeting policy but initially excludes all attendees, providing them the option to opt in.  It uses `Set-CsTeamsMeetingPolicy` twice: once to enable the report with `ForceEnabled` and again to set attendee tracking to `DisabledUserOverride`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-analytics-and-reports/meeting-attendance-report.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowEngagementReport ForceEnabled\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowTrackingInReport DisabledUserOverride\n```\n\n----------------------------------------\n\nTITLE: Updating an Auto Attendant - PowerShell\nDESCRIPTION: This cmdlet updates an existing Auto Attendant in Microsoft Teams. It is potentially similar to Set-CsAutoAttendant, but could handle updates differently, such as schema changes or migrations. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-CsAutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Voice Applications Policy using PowerShell\nDESCRIPTION: These cmdlets are used for managing Teams voice applications policies. They allow administrators to create, retrieve, modify, remove, and grant voice applications policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_113\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Get|Set|Remove|Grant]-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Check Replica Status - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet checks the replication status for all Front-End Servers, ensuring that all replicas have a value of True.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsManagementStoreReplicationStatus\n```\n\n----------------------------------------\n\nTITLE: Get User PIN Information using PowerShell\nDESCRIPTION: This code snippet demonstrates how to retrieve a user's PIN information using the `Get-CsClientPinInfo` cmdlet in Skype for Business Server Management Shell. It requires the Skype for Business Server PowerShell module. The input is the user's identity, and the output is the user's PIN status, lock-out status, last PIN change time, and PIN expiration time.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/view-user-pin-information.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClientPinInfo -Identity \"Ken Myer\"\n```\n\n----------------------------------------\n\nTITLE: Managing Batch Teams Deployment Status using PowerShell\nDESCRIPTION: This cmdlet retrieves status for Batch Teams Deployment. Part of the Deployment at Scale cmdlets in preview.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_126\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsBatchTeamsDeploymentStatus\n```\n\n----------------------------------------\n\nTITLE: Retrieve Teams MTO Configuration - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the Teams multitenant organization's configuration. It uses the `Get-CsTeamsMultiTenantOrganizationConfiguration` cmdlet to fetch the current settings. No specific parameters are needed.  This allows administrators to view the current state of settings, including the Copilot access setting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/copilot-mto.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsMultiTenantOrganizationConfiguration \n```\n\n----------------------------------------\n\nTITLE: Email Body: Announcement - Online Phone System\nDESCRIPTION: This snippet provides the body of the initial email introducing the new phone system. It highlights the benefits of using Microsoft Teams for phone calls, including flexibility, adaptability, and productivity. It also includes calls to action, such as getting started with Teams, ordering a new headset, and getting trained.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/prepare-my-users-email-templates.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nInstant messaging and online meetings have become a common way to communicate\nwith others, but your phone can still be a lifeline to getting your job done.\nFrom building rapport when you can't be there in person to maintaining momentum\non a project, sometimes it's easier to just pick up the phone and talk to\nsomeone. At the same time, we understand that many of you work remotely, have\nflexible work schedules or travel frequently and can't be tethered to your\ndesk or phone all day.\n\nTo better adapt to how you work, we want to ensure you have flexibility in how\nyou communicate including being able to make and receive phone calls from\nanywhere, at any time. We're excited to announce that you'll soon be able\nto use Microsoft Teams as your phone. This upgrade will provide\ninstant messaging, online meetings and phone calling all in one application,\nsimplifying the way you work.\n\nUsing Teams as your phone offers...\n\n-   Flexibility - Make and receive calls anywhere, any time, across\n    devices\n\n-   Adaptability - Easily move between your headset and a variety of\n    devices, including mobile\n\n-   Capability - Transfer calls to an internal contact, external number or\n    even your voicemail\n\n-   Productivity - Call your contacts with one click, alleviating the need\n    to remember phone numbers\n\nWhen will phone calling be available?\n\nWe understand this is a big shift in the way you make calls today and want to\nensure you have everything you need to get started. Phone capabilities will be\nenabled on <INSERT DATE>, but you can start preparing today.\n\nCALL TO ACTION\n\n-   <OPTIONAL> Get started with Teams. If you're not already\n    taking advantage of Teams IM and meetings capabilities, get\n    started today by visiting https://aka.ms/F63e30.\n\n-   <OPTIONAL> Order your new headset. To ensure the best audio quality, use\n    an approved headset. You can view available options or order yours <INSERT LINK>. We'll\n    also be hosting a device bar in <INSERT LOCATION>, where you can try on a few\n    headsets and find the best fit for you.\n\n-   Get trained. Learn how to make and receive phone calls right from your\n    PC. To view available training, visit https://aka.ms/B6fx7u to get started.\n\nIf you have questions concerning this change, contact <INSERT NAME/EMAIL>.\n\n<INSERT NAME OF EXECUTIVE SPONSOR>\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Meeting Recording Resource\nDESCRIPTION: This JSON snippet represents a meeting recording resource in the Microsoft Graph API. It includes properties such as @odata.context, @odata.count, @odata.nextLink, and value (an array of meetingRecording objects). Each meetingRecording object contains details like id, meetingId, meetingOrganizerId, createdDateTime, and recordingContentUrl, providing the URL to access the recording content.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"@odata.context\": \"https://graph.microsoft.com/v1.0/$metadata#Collection(meetingRecording)\", \n \"@odata.count\": 2, \n \"@odata.nextLink\": \"https://graph.microsoft.com/v1.0/users('{userId}')/onlineMeetings/getAllRecordings?$filter=MeetingOrganizer%2fUser%2fId+eq+%27{userId}%27&$skiptoken=MSMjMCMjTkNaYVNIQjVVbXRPYWxaV1dscGFWVGg1V2pOb1IxUXpRWGxrUm1oTFVrWmtTV1ZyYkhwUlZVWm9UMWR3VEdWWGRFTlJWVVpDVVZFOVBRPT0%3d\", \n \"value\":\n   [ \n     { \n      \"@odata.type\": \"#microsoft.graph.meetingRecording\", \n      \"id\": \"6263af16-b660-41d0-a17b-83fbd15a39c7\", \n      \"meetingId\": \"MSoxMjczYTAxNi0yMDFkRLTmOTUtODA5My0xYjdmOTliM2VkZWIqMCoqMTk6bWVldGluZ19aR1F3WTJZNE9XTXROekppWlMwME1XWTRMVGc0TWpBdE1BBXdOV1kzWlRsak9UTXlAdGhyZWFkLnYy\", \n      \"meetingOrganizerId\": \"{userId}\", \n      \"createdDateTime\": \"2022-08-03T20:43:36.2573447Z\", \n      \"recordingContentUrl\":    \"https://graph.microsoft.com/v1.0/users/{userId}/onlineMeetings/MSoxMjczYTAxNi0yMDFkLTRmOTUtODA4My0xYjdmOTliM2VkZWIqMCoqMTk6bWVldGluZ19aR1F3WTJZNE9XTXROekppWlMwME1XWTRMVGc0TWpBdE1ERXdOV1kzWlRsak9UTXlAdGhyZWFkLnYy/recordings/MSMjMCMjMGFjNmUwZTgtYmZjYy00NDQxLTk2MGYtZjllNjVhNjI0NzBh/content\" \n     }, \n     { \n      \"@odata.type\": \"#microsoft.graph.meetingRecording\", \n      \"id\": \"{recordingId}\", \n      \"meetingId\": \"{meetingId}\", \n      \"meetingOrganizerId\": \"{userId}\", \n      \"createdDateTime\": \"2022-08-03T20:44:11.2635254Z\", \n      \"recordingContentUrl\": \" https://graph.microsoft.com/v1.0/users/{userId}/onlineMeetings/{meetingId}/recordings/{recordingId}/content\" \n      }\n    ]\n   }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Retained Messages of a Team via Graph API (HTTP)\nDESCRIPTION: This example shows how to retrieve all retained messages of a team using the Microsoft Graph API's getAllRetainedMessages endpoint. It requires the team's ID to specify which team's retained messages should be retrieved.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_15\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/teams/8b081ef6-4792-4def-b2c9-c363a1bf41d5/channels/getAllRetainedMessages\n```\n\n----------------------------------------\n\nTITLE: Granting Voice Routing Policy to User with PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to associate an online voice routing policy to a user using the `Grant-CsOnlineVoiceRoutingPolicy` cmdlet. This enforces the routing restrictions defined in the policy for the specified user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-enable.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineVoiceRoutingPolicy -Identity <User> -Tenant <TenantId>\n```\n\n----------------------------------------\n\nTITLE: Testing SIP Trunk Configuration - PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves the SIP trunk configuration settings for the \"Redmond\" site and then tests if the trunk can correctly convert the dialed number 4255551212 using the Test-CsTrunkConfiguration cmdlet. The Get-CsTrunkConfiguration cmdlet retrieves the trunk configuration, which is then piped to the Test-CsTrunkConfiguration cmdlet for testing the number conversion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/test-sip-trunk-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$trunk = Get-CsTrunkConfiguration -Identity \"site:Redmond\"\nTest-CsTrunkConfiguration -DialedNumber 4255551212 -TrunkConfiguration $trunk\n```\n\n----------------------------------------\n\nTITLE: Assign Users to ContosoExternalAccess Policy - PowerShell\nDESCRIPTION: This PowerShell snippet assigns the ContosoExternalAccess policy to the specified users (MeganB@contoso.com and AlexW@contoso.com) using New-CsBatchPolicyAssignmentOperation.  The $users_ids variable contains the user principal names. This cmdlet requires the MicrosoftTeams module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n$users_ids = @(\"MeganB@contoso.com\", \"AlexW@contoso.com\")\nNew-CsBatchPolicyAssignmentOperation -PolicyType ExternalAccessPolicy -PolicyName \"ContosoExternalAccess\" -Identity $users_ids\n```\n\n----------------------------------------\n\nTITLE: Install Watcher Node with TrustedServer Authentication\nDESCRIPTION: This command executes the Watchernode.msi installer with the Authentication parameter set to TrustedServer. This configures the watcher node to use TrustedServer authentication, which simplifies administration by using a certificate instead of user passwords. This command must be run on any computer where both the Operations Manager agent files and Skype for Business Server 2015 core components are installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\Tools\\Watchernode.msi Authentication=TrustedServer\n```\n\n----------------------------------------\n\nTITLE: Starting Meeting Migration Service (MMS) with PowerShell\nDESCRIPTION: This PowerShell command starts the Meeting Migration Service (MMS) for a specific user to update existing meeting invites with new conference bridge phone numbers. It requires the user's email address as a parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsExMeetingMigration user@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Creating Application Instance Association - PowerShell\nDESCRIPTION: This cmdlet creates a new application instance association in Microsoft Teams.  Used to associate a resource account with a user or another application instance. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_31\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineApplicationInstanceAssociation\n```\n\n----------------------------------------\n\nTITLE: View External Access Policies using PowerShell\nDESCRIPTION: This code snippet demonstrates how to use the Get-CsExternalAccessPolicy cmdlet in Skype for Business Server Management Shell to retrieve information about all external access policies. This allows administrators to view the current settings for federation, XMPP, public cloud access, and outside access.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/manage-external-access-policy-for-your-organization.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsExternalAccessPolicy\n```\n\n----------------------------------------\n\nTITLE: Getting Computer Details PowerShell\nDESCRIPTION: Retrieves computer system details such as DNS hostname and domain using `Get-WmiObject`. If the computer details cannot be retrieved, an error is written, and the script exits.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\n$computerDetails = Get-WmiObject win32_computersystem\n\nif (($computerDetails -eq $null) -OR\n    ($computerDetails.DNSHostName -eq $null) -OR\n    ($computerDetails.Domain -eq $null))\n{\n    # Unable to find computer details.\n    # We will return false in that case.\n    Write-Error \"Unable to find host and domain details. Aborting process.\"\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All User Chat Messages via MS Graph API (HTTP)\nDESCRIPTION: This example demonstrates how to retrieve all chat messages for a specific user using the Microsoft Graph API. It does not include any filtering. Requires Chat.Read.All permission.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/users/{id}/chats/getAllMessages\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Network Sites - PowerShell\nDESCRIPTION: This snippet provides examples of creating three network sites (Vietnam, Indonesia, and Singapore) within the \"APAC\" region. The `NetworkSiteID` parameter defines the name of each site, and the `NetworkRegionID` parameter associates each site with the APAC region.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTenantNetworkSite -NetworkSiteID \"Vietnam\" -NetworkRegionID \"APAC\"\nNew-CsTenantNetworkSite -NetworkSiteID \"Indonesia\" -NetworkRegionID \"APAC\"\nNew-CsTenantNetworkSite -NetworkSiteID \"Singapore\" -NetworkRegionID \"APAC\"\n```\n\n----------------------------------------\n\nTITLE: Checking MicrosoftTeams PowerShell Module Version\nDESCRIPTION: These PowerShell commands import the MicrosoftTeams module and then check its version. This is a prerequisite for using the TeamsBYODAndDesks policy cmdlets. If the module is not installed, the script provides a command to install it.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/bookable-desks.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module MicrosoftTeams\nGet-Module -Name MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Checking Microsoft Calling Plan License\nDESCRIPTION: This PowerShell command retrieves the assigned plans for a given user and displays their attributes. The purpose is to verify that the user has a Microsoft Calling Plan license (MCOPSTN) enabled, with the CapabilityStatus attribute set to Enabled.  $user variable must be defined as the UPN or SIP address of the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-pad-configuration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n(Get-CsOnlineUser -Identity $user).AssignedPlan\n```\n\n----------------------------------------\n\nTITLE: Get Dial Plan Information - Skype for Business - PowerShell\nDESCRIPTION: Returns information about the dial plans used in the organization. Dial plans are used to normalize phone numbers for routing purposes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Turn on VbSS completely - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet completely enables Video-Based Screen Sharing (VbSS) by setting the EnableVideoBasedSharing parameter to $true in the media configuration. This command needs to be executed in the Skype for Business Management Console.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/video-based-screen-sharing.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMediaConfiguration -EnableVideoBasedSharing $true\n```\n\n----------------------------------------\n\nTITLE: Get New Teams Version - PowerShell\nDESCRIPTION: This PowerShell command retrieves the version number of the currently installed new Teams package. It uses `Get-AppXPackage` to find the package named 'MSTeams' and then extracts the 'Version' property using `Select-Object`. This is useful for determining the exact version of Teams to use in other scripts or commands.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AppXPackage -Name \"*msteams*\" | Select-Object -ExpandProperty Version\n```\n\n----------------------------------------\n\nTITLE: Updating MicrosoftTeams PowerShell Module\nDESCRIPTION: This snippet demonstrates how to update the MicrosoftTeams PowerShell module to the latest version using the Update-Module cmdlet. This ensures you have the latest features and security updates.  It requires the PowerShellGet module to be installed. It's important to use the same method for updating the module as was used for the initial installation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-supported-versions.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Create Bandwidth Policy Profile using New-CsNetworkBandwidthPolicyProfile PowerShell\nDESCRIPTION: This PowerShell command creates a new bandwidth policy profile in Skype for Business Server. It defines the identity, description, and bandwidth limits for audio and video sessions.  The parameters AudioBWLimit, AudioBWSessionLimit, VideoBWLimit and VideoBWSessionLimit specify the bandwidth limitations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-bandwidth-policy-profiles.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkBandwidthPolicyProfile -Identity 50Mb_Link -Description \"BW profile for 50Mb links\" -AudioBWLimit 20000 -AudioBWSessionLimit 200 -VideoBWLimit 14000 -VideoBWSessionLimit 700\n```\n\n----------------------------------------\n\nTITLE: Setting Meeting Policy for Teams Only\nDESCRIPTION: This PowerShell script demonstrates how to set a Teams meeting policy to only allow the Teams Meeting add-in in Outlook for users in Islands mode. The `PreferredMeetingProviderForIslandsMode` parameter is set to `Teams`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-provider-islands-mode.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -PreferredMeetingProviderForIslandsMode Teams\n```\n\n----------------------------------------\n\nTITLE: Enable Call Data Connector (Global Scope)\nDESCRIPTION: This PowerShell command enables Call Data Connector at the global scope. This will forward monitoring records for the entire Skype for Business Server deployment to online monitoring. It requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCloudCallDataConnectorConfiguration -Identity \"global\" -EnableCallDataConnector $True\n```\n\n----------------------------------------\n\nTITLE: Modify Persistent Chat Add-in - PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies the URL assigned to an existing Persistent Chat add-in. It requires the identity of the add-in to be modified and the new URL. The example modifies the URL of the ITPersistentChatAddin to http://atl-cs-001.contoso.com/itchat2.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-add-ins.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatAddin -Identity \"atl-cs-001.contoso.com\\ITPersistentChatAddin\" -Url \"http://atl-cs-001.contoso.com/itchat2\"\n```\n\n----------------------------------------\n\nTITLE: Export Archiving Data for Single User - PowerShell\nDESCRIPTION: This command exports archiving data for a single user, specified by the UserUri parameter. The Identity, StartDate, and OutputFolder parameters function as described in the previous example. The UserUri parameter specifies the SIP address of the user whose archiving data is to be exported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/export-archived-data.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsArchivingData -Identity \"ArchivingDatabase:atl-sql-001.contoso.com\" -StartDate 6/1/2012 -OutputFolder \"C:\\ArchivingExports\" -UserUri \"sip:kenmyer@contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Configure App Principal Permissions\nDESCRIPTION: This PowerShell snippet configures the app principal permissions in SharePoint, granting full control at the SiteSubscription scope. It retrieves the Exchange token issuer and the SharePoint app principal, then sets the necessary permissions to allow the app to access SharePoint resources for eDiscovery purposes. Requires a valid SharePoint site URL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/sharepoint-to-search-for-archived-data.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$exchange = Get-SPTrustedSecurityTokenIssuer \"Exchange\"\n$app = Get-SPAppPrincipal -Site \"https://atl-sharepoint-001\" -NameIdentifier $exchange.NameID\n$site = Get-SPSite  \"https://atl-sharepoint-001\"\nSet-SPAppPrincipalPermission -AppPrincipal $app -Site $site.RootWeb -Scope \"SiteSubscription\" -Right \"FullControl\" -EnableAppOnlyPolicy\n```\n\n----------------------------------------\n\nTITLE: Hiding Meeting Names in Calendar via XML\nDESCRIPTION: This XML snippet hides meeting names from the calendar display on Teams Rooms on Windows devices, replacing them with the organizer's name. Setting the 'HideMeetingName' element to '1' enables this privacy feature. This can also be configured via the Teams admin center or device settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/mtr-home-refresh.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<HideMeetingName>1</HideMeetingName>\n```\n\n----------------------------------------\n\nTITLE: Get license types - PowerShell\nDESCRIPTION: This PowerShell script retrieves the list of available license types. It is used to find the correct license to assign to the resource account. The script uses the `Get-MgSubscribedSku` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgSubscribedSku\n```\n\n----------------------------------------\n\nTITLE: Update OnPremPhoneNumber for Online Application Instance\nDESCRIPTION: This PowerShell script iterates through a CSV file containing hybrid endpoint data and clears the OnPremPhoneNumber attribute for corresponding online application instances (Resource Accounts). It checks if the endpoint has a LineURI, retrieves the UserPrincipalName from the SipAddress, and then uses `Set-CsOnlineApplicationInstance` to clear the on-premises phone number association. This handles cases where phone numbers might have been managed in Microsoft 365.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-move-on-prem-endpoints.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$endpoints = import-csv \"c:\\backup\\HybridEndpoints.csv\"\nforeach ($endpoint in $endpoints)\n{\nif($endpoint.LineUri)\n    {\n        $upn = $endpoint.SipAddress.Replace(\"sip:\",\"\")\n        $ra=Get-CsOnlineApplicationInstance | where UserPrincipalName -eq $upn \n        Set-CsOnlineApplicationInstance -Identity $ra.Objectid -OnpremPhoneNumber \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Site Link - Skype for Business PowerShell\nDESCRIPTION: This PowerShell command creates a new network site link that defines bandwidth limitations between two network sites (Reno and Portland) using a specified bandwidth policy profile (LowBWLimits).  The NetworkSiteID1, NetworkSiteID2, and BWPolicyProfileID must exist prior to running the command. The network sites and bandwidth policy profile must already exist before running this command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsNetworkInterSitePolicy -Identity Reno_Portland -NetworkSiteID1 Reno -NetworkSiteID2 Portland -BWPolicyProfileID LowBWLimits\n```\n\n----------------------------------------\n\nTITLE: Querying Teams Sites with Federated External Users - KQL\nDESCRIPTION: This query identifies Teams sites containing federated external users, focusing on users with domain names or UPN suffixes not owned by the organization. It helps in auditing external access and potential security risks by listing teams where external members have been added.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-sentinel-guide.md#_snippet_0\n\nLANGUAGE: Kusto\nCODE:\n```\nOfficeActivity\n| where TimeGenerated > ago(7d)\n| where Operation =~ \"MemberAdded\"\n| where parse_json(Members)[0].Role == 3\n| project TeamName, Operation, UserId, Members\n| mv-expand bagexpansion=array Members\n| evaluate bag_unpack(Members)\n```\n\n----------------------------------------\n\nTITLE: Get All Blocked Number Patterns via PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of all blocked number patterns configured for the tenant. It allows administrators to view all active blocking rules.  The output can be filtered using built-in PowerShell filtering abilities.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsInboundBlockedNumberPattern\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Call Transcript Resource\nDESCRIPTION: This JSON snippet represents a call transcript resource in the Microsoft Graph API. It contains properties such as @odata.context, @odata.count, @odata.nextLink, and a value array of callTranscript objects. Each callTranscript object includes details like id, meetingId, meetingOrganizerId, transcriptContentUrl (the URL to access the transcript content), and createdDateTime.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"@odata.context\": \"https://graph.microsoft.com/v1.0/$metadata#Collection(callTranscript)\",  \n \"@odata.count\": 2, \n \"@odata.nextLink\": \"https://graph.microsoft.com/v1.0/users('{userId}')/onlineMeetings/getAllTranscripts?$filter=MeetingOrganizer%2fUser%2fId+eq+%27{userId}%27&$skiptoken=MSMjMCMjTkNaYVNIQjVVbXRPYWxaV1dscGFWVGg1V2pOb1IxUXpRWGxrUm1oTFVrWmtTV1ZyYkhwUlZVWm9UMWR3VEdWWGRFTlJWVVpDVVZFOVBRPT0%3d\",  \n \"value\":\n   [ \n     { \n      \"@odata.type\": \"#microsoft.graph.callTranscript\", \n      \"id\": \"MSMjMCMjMGFjNmUwZTgtYmZjYy00NDQxLTk2MGYtZjllNjVhNjI0NzBh\", \n      \"meetingId\": \"MSoxMjczYTAxNi0yMDFkLTRmOTUtODA4My0xYjdmOTliM2VkZWIqMCoqMTk6bWVldGluZ19aR1F3WTJZNE9XTXROekppWlMwME1XWTRMVGc0TWpBdE1ERXdOV1kzWlRsak9UTXlAdGhyZWFkLnYy\", \n      \"meetingOrganizerId\": \"{userId}\", \n      \"transcriptContentUrl\": \"https://graph.microsoft.com/v1.0/users/{userId}/onlineMeetings/MSoxMjczYTAxNi0yMDFkLTRmOTUtODA4My0xYjdmOTliM2VkZWIqMCoqMTk6bWVldGluZ19aR1F3WTJZNE9XTXROekppWlMwME1XWTRMVGc0TWpBdE1ERXdOV1kzWlRsak9UTXlAdGhyZWFkLnYy/transcripts/MSMjMCMjMGFjNmUwZTgtYmZjYy00NDQxLTk2MGYtZjllNjVhNjI0NzBh/content\", \n     \"createdDateTime\": \"2022-08-03T20:43:36.6248355Z\" \n     }, \n     { \n      \"@odata.type\": \"#microsoft.graph.callTranscript\", \n      \"id\": \"{transcriptId}\", \n      \"meetingId\": \"{meetingId}\", \n      \"meetingOrganizerId\": \"{userId}\", \n      \"transcriptContentUrl\": \"https://graph.microsoft.com/v1.0/users/{userId}/onlineMeetings/{meetingId}/transcripts/{transcriptId}/content\",   \n      }\n    ]\n   }\n```\n\n----------------------------------------\n\nTITLE: Extending a Finance Team Template using PowerShell\nDESCRIPTION: This PowerShell code snippet provides an example script for extending the Finance Team template. It defines properties such as the team's display name, description, channels (including private channels with tabs), member settings, guest settings, fun settings, messaging settings, discovery settings, and installed apps. It uses Microsoft Graph to bind template resources and apps.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/smb-templates.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n{\n  \"template@odata.bind\": \"https://graph.microsoft.com/beta/teamsTemplates('standard')\",\n  \"displayName\": \"Finance\",\n  \"description\": \"Finance Team\",\n  \"channels\": \n   [\n        {\n            \"displayName\": \"Private\",\n            \"isFavoriteByDefault\": true,\n            \"description\": \"Invite a more select audience for specific topics.\",\n             \"tabs\": \n             [\n                {\n                    \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps('0d820ecd-def2-4297-adad-78056cde7c78')\",\n                    \"name\": \"OneNote\"\n                },\n                {\n                    \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps('com.microsoft.teamspace.tab.planner')\",\n                    \"name\": \"Planner\"\n                }\n            ]\n        }\n    ],\n    \"memberSettings\": \n    {\n        \"allowCreateUpdateChannels\": true,\n        \"allowDeleteChannels\": true,\n       \"allowAddRemoveApps\": true,\n        \"allowCreateUpdateRemoveTabs\": true,\n        \"allowCreateUpdateRemoveConnectors\": true\n    },\n    \"guestSettings\": \n    {\n        \"allowCreateUpdateChannels\": false,\n        \"allowDeleteChannels\": false\n    },\n    \"funSettings\": \n    {\n        \"allowGiphy\": true,\n        \"giphyContentRating\": \"Moderate\",\n        \"allowStickersAndMemes\": true,\n        \"allowCustomMemes\": true\n    },\n    \"messagingSettings\": \n    {\n        \"allowUserEditMessages\": true,\n        \"allowUserDeleteMessages\": true,\n        \"allowOwnerDeleteMessages\": true,\n        \"allowTeamMentions\": true,\n        \"allowChannelMentions\": true\n    },\n    \"discoverySettings\": \n    {\n        \"showInTeamsSearchAndSuggestions\": true\n    },\n    \"installedApps\": \n    [\n        {\n            \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps('0d820ecd-def2-4297-adad-78056cde7c78')\"\n        },\n        {\n            \"teamsApp@odata.bind\": \"https://graph.microsoft.com/v1.0/appCatalogs/teamsApps('com.microsoft.teamspace.tab.planner')\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Move multiple users using PowerShell filter in Skype for Business\nDESCRIPTION: This PowerShell command moves a large number of users to a different pool using filtering.  It uses the Get-CsUser cmdlet with the -Filter parameter to select users based on their RegistrarPool and then pipes the results to the Move-CsUser cmdlet to move them to the specified target pool. Requires the Skype for Business Server Management Shell to be loaded.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/user-accounts/customize-properties.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Filter {RegistrarPool -eq \"CurrentPoolFqdn\"} | Move-CsUser -Target \"TargetPoolFQDN\"\n```\n\n----------------------------------------\n\nTITLE: Chat Room Access by Invitation Sample\nDESCRIPTION: This table shows how to plan capacity for managing chat room access by invitation. It calculates the number of invitations generated based on the number of users per room and the percentage of rooms with invitations enabled. The generated invitations must stay below the maximum allowable number (2,000,000) to avoid server performance issues. It also includes models to estimate chat rate based on either expected messages per room or messages per user per day.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/persistent-chat-server/capacity-planning.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n|&nbsp;|Small Chat Rooms|Medium Chat Rooms|Large Chat Rooms|Total|\n|:-----|:-----|:-----|:-----|:-----|\n|Users who can access chat room   |30 per room   |150 per room   |16,000 per room   ||\n|Percentage of rooms that have invitations   |50%   |50%   |50%   ||\n|Chat rooms configured to send invitations   |16,000   |533   |5   ||\n|Users who can access the chat room   |60   |225   |16,000   ||\n|Invitations generated by Persistent Chat Server   |960,000   |120,000   |80,000   |1,160,000   |\n|Maximum allowable number of invitations   ||||2,000,000   |\n|Model 1 - Start with expected number of messages per room per day   |||||\n|Chat Rate Per Room (per day)   |50   |500   |100   |650   |\n|Chat rate (per second) across all rooms   |55.56   |18.52   |0.03   |74   |\n|Model 2 - Start with number of messages posted per user per day   |||||\n|Chat rate per user per day   |15   |5   |0.1   |20   |\n|Chat rate per room (per day)   |38   |375   |800   |1,213   |\n|Chat rate (per second) across all rooms   |41.67   |13.89   |0.28   |56   |\n```\n\n----------------------------------------\n\nTITLE: Get SIP Gateway Service Principal - MS Graph Module - PowerShell\nDESCRIPTION: This snippet retrieves a SIP Gateway service principal using the MS Graph module. It filters based on the AppId. If no output is returned the service principal does not exist and should be created. It requires the MS Graph module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgServicePrincipal -Filter \"AppId eq '582b2e88-6cca-4418-83d2-2451801e1d26'\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Skype for Business Users\nDESCRIPTION: This PowerShell script disables Skype for Business users based on the SipAddress obtained from the \"c:\\data\\SfbUsers.csv\" file. It imports the CSV file and iterates through each user, disabling them using the `Disable-CsUser` cmdlet. This is a critical step in removing the Skype for Business attributes from Active Directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$sfbusers=import-csv \"c:\\data\\SfbUsers.csv\"\nforeach($user in $sfbusers){\nDisable-CsUser -Identity $user.SipAddress}\n```\n\n----------------------------------------\n\nTITLE: Set scale and resolution for main display (XML)\nDESCRIPTION: This XML snippet sets the resolution and scaling for the main front-of-room display. MainFoRDisplayResolution sets the width and height in pixels (e.g., 1920,1080), and MainFoRDisplayScaling sets the scaling factor (e.g., 100).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-room-scale-res.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<MainFoRDisplay>\n      <MainFoRDisplayResolution>1920,1080</MainFoRDisplayResolution> \n      <MainFoRDisplayScaling>100</MainFoRDisplayScaling> \n</MainFoRDisplay>\n```\n\n----------------------------------------\n\nTITLE: Creating a Unified Messaging Dial Plan in Exchange PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new Unified Messaging dial plan using the Exchange Management Shell. The first command creates the dial plan with specified security, digit length, URI type and country code. The second command configures the dial plan with allowed in-country groups. It requires Exchange Management Shell and server-to-server authentication between Skype for Business Server and Exchange Server 2016 or 2013.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/exchangeunified-messaging-for-voice-mail.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UMDialPlan -Name \"RedmondDialPlan\" -VoIPSecurity \"Secured\" -NumberOfDigitsInExtension 3 -URIType \"SipName\" -CountryOrRegionCode 1\nSet-UMDialPlan \"RedmondDialPlan\" -ConfiguredInCountryOrRegionGroups \"Anywhere,*,*,*\" -AllowedInCountryOrRegionGroups \"Anywhere\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Finance Team via Graph API\nDESCRIPTION: This code snippet demonstrates how to create a Finance team using the Microsoft Graph API. It includes the HTTP POST request with the required JSON payload. The payload specifies the team's template, display name, description, and visibility. The request assumes a pre-existing template ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/smb-templates.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://graph.microsoft.com/beta/teams \nContent-Type: application/json \n{\n    \"template@odata.bind\": \"https://graph.microsoft.com/beta/teamsTemplates('SmallBusinessFinance')\",\n    \"displayName\": \"Finance\",\n    \"description\": \"All posts, announcements and daily collaboration and communication within the Finance team members (and exec team members as appropriate).\",\n    \"visibility\": \"Private\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Policy via PowerShell\nDESCRIPTION: This section details the PowerShell cmdlet `Set-CsTeamsMeetingPolicy` used to configure Teams meeting policies. It is referenced in multiple sections related to recording & transcription, audio & video policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy\n```\n\n----------------------------------------\n\nTITLE: Apply AppLocker Policy from XML - PowerShell\nDESCRIPTION: This PowerShell command applies an AppLocker policy from an XML file. It merges the new policy with the existing AppLocker policy, which requires the correct LDAP information if applying to a group policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-meeting-addin-security-with-outlook.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AppLockerPolicy -XmlPolicy .\\TMA.xml  -Merge\n```\n\n----------------------------------------\n\nTITLE: Assign Conferencing Policy to User (PowerShell)\nDESCRIPTION: This PowerShell snippet assigns a specific conferencing policy to a user identified by their identity. The Grant-CsConferencingPolicy cmdlet is used with the -identity parameter to specify the user and the -PolicyName parameter to specify the conferencing policy to apply. This requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/assign-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsConferencingPolicy -identity \"Ken Myer\" -PolicyName SalesConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Policy - Allow Participant Control (PowerShell)\nDESCRIPTION: This PowerShell script uses the `Set-CsTeamsMeetingPolicy` cmdlet to enable or disable the ability for internal participants to give, request, or be given control during Teams meetings and webinars. The `-AllowParticipantGiveRequestControl` parameter is used to toggle this functionality.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-who-present-request-control.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowParticipantGiveRequestControl $True\n```\n\n----------------------------------------\n\nTITLE: List Trusted Applications using Get-CsTrustedApplication - PowerShell\nDESCRIPTION: This cmdlet retrieves information about trusted applications registered in Skype for Business Server. It lists all trusted applications within the environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-topology-menu.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsTrustedApplication\n```\n\n----------------------------------------\n\nTITLE: Setting Block Download Policy - PowerShell\nDESCRIPTION: This PowerShell command sets the tenant-level policy to block or allow the download of files based on their type. The `BlockDownloadFileTypePolicy` parameter enables or disables the policy.  The `BlockDownloadFileTypeIds` parameter specifies the file types to block. Requires SharePoint Online Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-download-meeting-recording.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-SPOTenant -BlockDownloadFileTypePolicy <$true/$false(default)>  -BlockDownloadFileTypeIds  TeamsMeetingRecording\n```\n\n----------------------------------------\n\nTITLE: View All Dial-in Conferencing Access Numbers - PowerShell\nDESCRIPTION: This PowerShell command retrieves all dial-in conferencing access numbers configured for the organization. It uses the `Get-CsDialInConferencingAccessNumber` cmdlet without any parameters, returning a list of all configured access numbers and their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/access-numbers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Updating Registry Key for Call Hold Synchronization\nDESCRIPTION: This snippet shows the registry keys required to enable call hold synchronization between the new Teams client and the Skype for Business client. It involves setting the Enable21Interop and EnableIPCForHoldResume DWORD values to 0x01.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-and-skypeforbusiness-coexistence-and-interoperability.md#_snippet_1\n\nLANGUAGE: registry\nCODE:\n```\nComputer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Office\\16.0\\Lync\\Enable21Interop with DWORD set to `0x01`\nComputer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Lync\\EnableIPCForHoldResume with DWORD set to `0x01`\n```\n\n----------------------------------------\n\nTITLE: Creating a Call Park Orbit Range with Specific Values Using PowerShell\nDESCRIPTION: This PowerShell command demonstrates how to create a Call Park orbit range with specific values for the identity, number range, and Call Park service. The Identity parameter specifies the name of the orbit range, NumberRangeStart and NumberRangeEnd define the range of extension numbers, and CallParkService specifies the application server hosting the Call Park application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-call-park-orbit-range.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallParkOrbit -Identity \"Redmond orbit 1\" -NumberRangeStart 100 -NumberRangeEnd 199 -CallParkService redmond-applicationserver-1\n```\n\n----------------------------------------\n\nTITLE: Setting a Toll-Free Number for an Audio Conferencing User in PowerShell\nDESCRIPTION: This PowerShell snippet assigns a specific toll-free number to an audio conferencing user. The `Set-CsOnlineDialInConferencingUser` cmdlet is used, requiring the user's email address and the desired toll-free number as input. The toll-free number must be a registered number within the organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-the-audio-conferencing-settings-for-my-organization-in-teams.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Set-CsOnlineDialInConferencingUser sarah@contoso.com -ServiceNumber 61280001234\n```\n\n----------------------------------------\n\nTITLE: Getting Credentials PowerShell\nDESCRIPTION: Prompts the user for administrator credentials using `Get-Credential`. The script exits if no credentials are provided.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nWrite-Host \"`n`rStarting modification to all the servers in Skype for Business 2019 FE pools (or Pools mentioned using -Pools parameter). Please provide Administrator credentials.\"\n$cred = Get-Credential\n\nif ($cred -eq $null)\n{\n    Write-Error \"Credential is not defined. Aborting process.\"\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade Agent Component - PowerShell\nDESCRIPTION: This PowerShell script upgrades the Agent component of Statistics Manager. It uninstalls the old version and installs the new version. The script uses the Update-StatsMan.ps1 file with the -Service Agent parameter. It can also be run silently using the -NoPrompt switch for remote upgrades.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/upgrade.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\Update-StatsMan.ps1 -Service Agent\n```\n\n----------------------------------------\n\nTITLE: Disabling HID via Registry Key for Teams\nDESCRIPTION: This code snippet shows the registry key that can be created on the endpoint to disable Human Interface Device (HID) functionality in Teams.  This is a workaround for HID collisions that can occur when multiple Unified Communications apps are running side by side, which can cause active calls to get disconnected. This key is applicable for Teams version 25060.205.3499.6849 or higher.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_12\n\nLANGUAGE: registry\nCODE:\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Teams\\HID\n\nName: DisableHidManagerV1 \n\nType: DWORD\n\nValue: 1 (when set to 1, it will disable HID) (If set to 0 or the key is not present, HID is enabled)\n```\n\n----------------------------------------\n\nTITLE: Remove Persistent Chat Add-in - PowerShell\nDESCRIPTION: This PowerShell cmdlet removes an existing Persistent Chat add-in. It requires the identity of the add-in to be removed. The example removes the add-in named ITChatAddin from the pool atl-cs-001.contoso.com.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-add-ins.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPersistentChatAddin -Identity \"atl-cs-001.contoso.com\\ITChatAddin\"\n```\n\n----------------------------------------\n\nTITLE: Create a new Persistent Chat Category - PowerShell\nDESCRIPTION: This PowerShell command creates a new Persistent Chat category named 'HelpDesk' on the specified pool (atl-cs-001.contoso.com). It also enables file uploads for chat rooms within this category. The PersistentChatPoolFqdn parameter identifies the Persistent Chat Server pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/categories.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsPersistentChatCategory -Name \"HelpDesk\" -PersistentChatPoolFqdn \"atl-cs-001.contoso.com\" -EnableFileUpload \n```\n\n----------------------------------------\n\nTITLE: Get All Number Exceptions via PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of all number exception patterns configured for the tenant. The Identity parameter is optional; if not specified, all exception patterns are returned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsInboundExemptNumberPattern -Identity <String>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsInboundExemptNumberPattern\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Graph PowerShell\nDESCRIPTION: This PowerShell command connects to the Microsoft Graph API, allowing administrators to manage Microsoft Entra ID resources.  Authentication requires administrator credentials.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MgGraph\n```\n\n----------------------------------------\n\nTITLE: Adding Emergency Location via PowerShell\nDESCRIPTION: This snippet references the PowerShell cmdlet for creating a new emergency location. It's used to define emergency address information for phone numbers in Microsoft Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/add-change-remove-emergency-location-organization.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsOnlineLisCivicAddress](/powershell/module/teams/new-csonlineliscivicaddress)\n```\n\n----------------------------------------\n\nTITLE: List members of a channel via Microsoft Graph API\nDESCRIPTION: Lists the members of a channel in a Team using the Microsoft Graph API. Requires Channel ID and Team ID. Output: List of members.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_19\n\nLANGUAGE: HTTP\nCODE:\n```\n[List members of a channel](/graph/api/channel-list-members).\n```\n\n----------------------------------------\n\nTITLE: Configure RTCP for Media Bypass - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to disable RTCP (Real-time Transport Control Protocol) for active and held calls when media bypass is enabled and the trunk peer does not support receiving SIP REFER requests from the Mediation Server. This is necessary to ensure proper conditions for media bypass in such scenarios. It is called after configuring the Trunk.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/configure-a-trunk-with-media-bypass.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTrunkConfiguration\n```\n\n----------------------------------------\n\nTITLE: Creating External Access Policy with PowerShell in Skype for Business\nDESCRIPTION: This PowerShell snippet creates a new external access policy in Skype for Business Server. It requires a policy name (for site or user policy only), a description, and settings for federation, XMPP, Public Cloud, Audio/Video, and outside access.  A global policy cannot be created with this cmdlet.  Replace <name of site or user policy - you cannot create a new global policy using New-CsExternalAccessPolicy > and other parameters with appropriate values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/configure-policies-to-control-federated-user-access.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsExtenalAccessPolicy -Identity <name of site or user policy - you cannot create a new global policy using New-CsExternalAccessPolicy > -Description <descriptive name for policy> -EnableFederationAccess <$true, $false> -EnableXmppAccess <$true, $false> -EnablePublicCloudAccess <$true, $false> -EnablePublicCloudAudioVideoAccess <$true, $false> -EnableOutsideAccess <$true, $false>\n```\n\n----------------------------------------\n\nTITLE: Allow Only Org Members to Bypass Lobby (PowerShell)\nDESCRIPTION: This PowerShell snippet allows only people in your organization to bypass the lobby. It uses the `Set-CsTeamsEventsPolicy` cmdlet with the `-AutoAdmittedUsers` parameter set to `EveryoneInCompany`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AutoAdmittedUsers EveryoneInCompany \n```\n\n----------------------------------------\n\nTITLE: Connecting to MicrosoftTeams with Admin Credentials\nDESCRIPTION: This snippet retrieves credentials and connects to MicrosoftTeams using those credentials.  It prompts for user credentials with Get-Credential and then establishes a connection using Connect-MicrosoftTeams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/edu-parents-app.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$credential = Get-Credential\nConnect-MicrosoftTeams -Credential $credential\n```\n\n----------------------------------------\n\nTITLE: Teams Meeting Add-in Deployment Script - PowerShell\nDESCRIPTION: This PowerShell script automates the installation of the Teams Meeting Add-in (TMA) for new Teams in a non-persistent environment. It checks for administrator privileges, retrieves the versions of both new Teams and the TMA MSI, constructs the installation parameters, and executes the `msiexec.exe` command. The script writes informative messages to the console and checks for the presence of both new Teams and TMA before proceeding.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nIf (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator') ){\n    Write-Error \"Need to run as administrator. Exiting..\"\n    exit 1\n}\n\n# Get Version of currently installed new Teams Package\nif (-not ($NewTeamsPackageVersion = (Get-AppxPackage -Name MSTeams).Version)) {\n    Write-Host \"New Teams Package not found. Please install new Teams from https://aka.ms/GetTeams .\"\n    exit 1\n}\nWrite-Host \"Found new Teams Version: $NewTeamsPackageVersion\"\n\n# Get Teams Meeting Addin Version\n$TMAPath = \"{0}\\WINDOWSAPPS\\MSTEAMS_{1}_X64__8WEKYB3D8BBWE\\MICROSOFTTEAMSMEETINGADDININSTALLER.MSI\" -f $env:programfiles,$NewTeamsPackageVersion\nif (-not ($TMAVersion = (Get-AppLockerFileInformation -Path $TMAPath | Select-Object -ExpandProperty Publisher).BinaryVersion))\n{\n    Write-Host \"Teams Meeting Addin not found in $TMAPath.\"\n    exit 1\n}\nWrite-Host \"Found Teams Meeting Addin Version: $TMAVersion\"\n\n# Install parameters\n$TargetDir = \"{0}\\Microsoft\\TeamsMeetingAdd-in\\{1}\\\" -f ${env:ProgramFiles(x86)},$TMAVersion\n$params = '/i \"{0}\" TARGETDIR=\"{1}\" /qn ALLUSERS=1' -f $TMAPath, $TargetDir\n\n# Start the install process\nwrite-host \"executing msiexec.exe $params\"\nStart-Process msiexec.exe -ArgumentList $params\nwrite-host \"Please confirm install result in Windows Eventlog\"\n```\n\n----------------------------------------\n\nTITLE: Processing Report Set Data with AJAX (jQuery)\nDESCRIPTION: This JavaScript function `processReportSetData` takes a DOM element (`divReportSet`) and a report set definition (`reportSetDef`) as input. It iterates through the `subItemIds` array of the report set definition to retrieve individual report definitions using AJAX GET requests. For each report, it creates a new div, appends it to the `divReportSet`, and calls the `processReportData` function to display the report's content. It handles potential errors by displaying an alert message.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar processReportSetData = function (divReportSet, reportSetDef) {\n    //show the report set definition like Title, Description, etc\n    showReportSetDefinition(divReportSet, reportSetDef);\n\n    //for each Report in the Reportset, get the Report definition from the Repository Service\n    for (var i = 0; i < reportSetDef.subItemIds.length; i++)\n    {\n        //the reportId is in the subItemIds array.  This is not shown in the CQD UI at all\n        var reportId = reportSetDef.subItemIds[i];\n\n        var divReport = document.createElement('div');\n        divReport.style.margin = '12px';                \n        divReportSet.appendChild(divReport);\n\n        //retrieve the report definition with the reportId\n        $.ajax({\n            url: urlRepositoryApi + reportId,\n            data: '',\n            type: 'GET',\n            async: false,\n            contentType: 'application/json;charset=utf-8',\n            success: function (reportData) {\n                processReportData(divReport, reportData, reportId);\n            },\n            error: function (error) {\n                alert('Error getting Report ' + reportId.toString() + ', check that the qoe data service is running and url is correct.');\n            }\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Upload Authorization Certificate to Microsoft Entra ACS - PowerShell\nDESCRIPTION: This PowerShell script connects to Microsoft Graph, reads an authorization certificate from the filesystem, converts it to a base64 string, and uploads it as a key credential for the Skype for Business service principal in Microsoft Entra ID. It handles cases where the certificate already exists, expired certificates, and the initial certificate upload.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/oauth-with-online-and-on-premises.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MgGraph -Scopes Application.ReadWrite.All\n\n$CertFile = \"$env:SYSTEMDRIVE\\OAuthConfig\\OAuthCert.cer\"\n$objFSO = New-Object -ComObject Scripting.FileSystemObject\n$CertFile = $objFSO.GetAbsolutePathName($CertFile)\n$cer = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($CertFile)\n$binCert = $cer.GetRawCertData()\n$credValue = [System.Convert]::ToBase64String($binCert)\n$ServiceName = \"00000004-0000-0ff1-ce00-000000000000\"\nWrite-Host \"[+] Trying to query the service principals for service: $ServiceName\" -ForegroundColor Cyan\n$p = Get-MgServicePrincipal -Filter \"AppId eq '$ServiceName'\"\nWrite-Host \"[+] Trying to query the keyCredentials for service: $ServiceName\" -ForegroundColor Cyan\n$servicePrincipalKeyInformation = Get-MgServicePrincipal -Filter \"AppId eq '$ServiceName'\" -Select \"keyCredentials\"\n\n$keyCredentialsLength = $servicePrincipalKeyInformation.KeyCredentials.Length\nif ($keyCredentialsLength -gt 0) {\n   Write-Host \"[+] $keyCredentialsLength existing key(s) found - we keep them if they have not expired\" -ForegroundColor Cyan\n\n$newCertAlreadyExists = $false\n   $servicePrincipalObj = New-Object -TypeName Microsoft.Graph.PowerShell.Models.MicrosoftGraphServicePrincipal\n   $keyCredentialsArray = @()\n\nforeach ($cred in $servicePrincipalKeyInformation.KeyCredentials) {\n        $thumbprint = [System.Convert]::ToBase64String($cred.CustomKeyIdentifier)\n\nWrite-Host \"[+] Processing existing key: $($cred.DisplayName) thumbprint: $thumbprint\" -ForegroundColor Cyan\n\nif ($newCertAlreadyExists -ne $true) {\n           $newCertAlreadyExists = ($cer.Thumbprint).Equals($thumbprint, [System.StringComparison]::OrdinalIgnoreCase)\n        }\n\nif ($cred.EndDateTime -lt (Get-Date)) {\n           Write-Host \"[+] This key has expired on $($cred.EndDateTime) and will not be retained\" -ForegroundColor Yellow\n           continue\n        }\n\n$keyCredential = New-Object -TypeName Microsoft.Graph.PowerShell.Models.MicrosoftGraphKeyCredential\n        $keyCredential.Type = \"AsymmetricX509Cert\"\n        $keyCredential.Usage = \"Verify\"\n        $keyCredential.Key = $cred.Key\n\n$keyCredentialsArray += $keyCredential\n   }\n\nif ($newCertAlreadyExists -eq $false) {\n        Write-Host \"[+] New key: $($cer.Subject) thumbprint: $($cer.Thumbprint) will be added\" -ForegroundColor Cyan\n        $keyCredential = New-Object -TypeName Microsoft.Graph.PowerShell.Models.MicrosoftGraphKeyCredential\n        $keyCredential.Type = \"AsymmetricX509Cert\"\n        $keyCredential.Usage = \"Verify\"\n        $keyCredential.Key = [System.Text.Encoding]::ASCII.GetBytes($credValue)\n\n$keyCredentialsArray += $keyCredential\n\n$servicePrincipalObj.KeyCredentials = $keyCredentialsArray\n        Update-MgServicePrincipal -ServicePrincipalId $p.Id -BodyParameter $servicePrincipalObj\n     } else {\n        Write-Host \"[+] New key: $($cer.Subject) thumbprint: $($cer.Thumbprint) already exists and will not be uploaded again\" -ForegroundColor Yellow\n     }\n} else {\n   $params = @{\n      type = \"AsymmetricX509Cert\"\n      usage = \"Verify\"\n      key = [System.Text.Encoding]::ASCII.GetBytes($credValue)\n   }\n\nWrite-Host \"[+] This is the first key which will be added to this service principal\" -ForegroundColor Cyan\n   Update-MgServicePrincipal -ServicePrincipalId $p.Id -KeyCredentials $params\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Holiday Prompts and Menu Options\nDESCRIPTION: These PowerShell commands define prompts, menu options, call flows, and call handling associations for the Christmas and New Year holidays within the auto attendant. When a call is received during the Christmas or New Year period, the auto attendant will play a specific greeting and then disconnect the call.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$christmasGreetingPrompt = New-CsAutoAttendantPrompt -TextToSpeechPrompt \"Thank you for calling Contoso. Our offices ae currently closed for the Christmas holiday. Our Sales and Support teams will be happy to take your call on the next business day. Regular business hours are Monday through Friday from 8:30 am to 5:00 pm and Saturday from 10:00 am to 4:00 pm eastern time. Thank you for calling Contoso.\"\n\n$christmasMenuOption = New-CsAutoAttendantMenuOption -Action DisconnectCall -DtmfResponse Automatic\n\n$christmasMenu = New-CsAutoAttendantMenu -Name \"Christmas Menu\" -MenuOptions @($christmasMenuOption)\n\n$christmasCallFlow = New-CsAutoAttendantCallFlow -Name \"Christmas\" -Greetings @($christmasGreetingPrompt) -Menu $christmasMenu\n\n$christmasCallHandlingAssociation = New-CsAutoAttendantCallHandlingAssociation -Type Holiday -ScheduleId $christmasSchedule.Id -CallFlowId $christmasCallFlow.Id\n\n$newyearGreetingPrompt = New-CsAutoAttendantPrompt -TextToSpeechPrompt \"Thank you for calling Contoso. Our offices ae currently closed for the New Year's holiday. Our Sales and Support teams will be happy to take your call on the next business day. Regular business hours are Monday through Friday from 8:30 am to 5:00 pm and Saturday from 10:00 am to 4:00 pm eastern time. Thank you for calling Contoso.\"\n\n$newyearMenuOption = New-CsAutoAttendantMenuOption -Action DisconnectCall -DtmfResponse Automatic\n\n$newyearMenu = New-CsAutoAttendantMenu -Name \"New Year Menu\" -MenuOptions @($newyearMenuOption)\n\n$newyearCallFlow = New-CsAutoAttendantCallFlow -Name \"New Year\" -Greetings @($newyearGreetingPrompt) -Menu $newyearMenu\n\n$newyearCallHandlingAssociation = New-CsAutoAttendantCallHandlingAssociation -Type Holiday -ScheduleId $newyearSchedule.Id -CallFlowId $newyearCallFlow.Id\n```\n\n----------------------------------------\n\nTITLE: Creating a Sensitivity Label for Teams Meetings - Microsoft Purview\nDESCRIPTION: This snippet details the steps to create a sensitivity label in the Microsoft Purview portal for protecting Teams meetings. The procedure includes naming the label, defining its scope to include Files, Emails, and Meetings, and configuring settings to control lobby bypass, presenter roles, and recording permissions. The created label will enforce specified restrictions for sensitive meetings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-meetings-sensitive-protection.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1. Open the [Microsoft Purview portal](https://purview.microsoft.com).\n2. Under **Solutions**, expand **Information protection**, and then select **Labels**.\n3. Select **Create a label**.\n4. Give the label a name. We suggest **Sensitive**, but you can choose a different name if **Sensitive** is already taken.\n5. Add a display name and description, and then select **Next**.\n6. On the **Define the scope for this label** page, make sure **Files & other data assets**, **Emails**, and **Meetings** are selected. You can select other options if you want to use this label for other purposes.\n7. Select **Next**.\n8. On the **Choose protection settings for types of items you selected** page, select **Protect Teams meetings and chats**, and then select **Next**.\n9. On the **Settings for Teams meetings and chats** page, choose the following values:\n    1. Select **Control who can bypass the lobby** and choose **People who were invited** from the dropdown list.\n    1. Clear the **People dialing in can bypass the lobby** check box.\n    1. Select **Control who can present** and choose **People in my org and guests** from the dropdown list.\n    1. Select **Control who can record and transcribe** and choose **Organizers and co-organizers** from the dropdown list.\n    1. Configure any other settings that you need for your organization.\n10. Select **Next**.\n11. Complete the wizard with any other settings you want to use, select **Create label**, and then select **Done**.\n```\n\n----------------------------------------\n\nTITLE: Disable Legacy Control Panel (CSCP) via PowerShell\nDESCRIPTION: This PowerShell script adds registry keys to disable the legacy Control Panel (CSCP) in Skype for Business Server and modifies the IIS application physical path. It also provides an option to undo the changes by using the -Undo parameter. It requires the WebAdministration module to be imported and performs actions based on the presence of the -Undo switch.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/plan/disable-legacy-control-panel.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[CmdletBinding()]\nparam (\n    [switch]$Undo\n)\n\n# IIS site details\n$iisSiteName = \"Skype for Business Server Internal Web Site\"\n$iisAppName = \"cscp\"\n$iisAppPhysicalPathOld = \"C:\\Program Files\\Skype for Business Server 2019\\Web Components\\AdminUI\"\n$iisAppPhysicalPath = \"C:\\Program Files\\Skype for Business Server 2019\\Web Components\"\n\n# Load the WebAdministration module\nImport-Module WebAdministration\n\nif ($Undo) {\n    # Undo the changes made by the script\n    $parentKey = \"HKLM:\\SOFTWARE\\Microsoft\\Real-Time Communications\\{5DC8C4D5-5133-4CE5-BF4E-8C459BF419D6}\"\n    $registryKeys = @(\"DMR\", \"OCP\")\n\n    foreach ($key in $registryKeys) {\n        $registryKey = \"$parentKey\\$key\"\n        # Check if the key exists before removing it\n        if (Test-Path $registryKey) {\n            Remove-Item -Path $registryKey -Recurse -Force\n            Write-Host \"Registry key '$registryKey' removed.\"\n        } else {\n            Write-Host \"Registry key '$registryKey' does not exist. No changes were made.\"\n        }\n    }\n\n     # IIS application changes\n    # Check if the IIS site exists\n    if ($iisSite = Get-Website $iisSiteName -ErrorAction SilentlyContinue) {\n        # Check if the application exists\n        $existingApp = Get-WebApplication -Site $iisSiteName | Where-Object { $_.Path -eq \"/$iisAppName\" }\n        if ($existingApp) {\n            # If the application exists, change the Physical Path using Set-WebConfigurationProperty\n            Set-WebConfigurationProperty -Filter \"/system.applicationHost/sites/site[@name='$iisSiteName']/application[@path='/$iisAppName']/virtualDirectory[@path='/']\" -Name \"physicalPath\" -Value $iisAppPhysicalPathOld\n            Write-Host \"IIS application '$iisAppName' Physical Path changed to '$iisAppPhysicalPathOld'.\"\n        } else {\n            Write-Host \"IIS application '$iisAppName' does not exist. The Physical Path cannot be changed.\"\n        }\n    } else {\n        Write-Host \"IIS site '$iisSiteName' does not exist. The application cannot be changed.\"\n    }\n} else {\n    # Apply the changes\n\n    # Registry changes\n    $parentKey = \"HKLM:\\SOFTWARE\\Microsoft\\Real-Time Communications\\{5DC8C4D5-5133-4CE5-BF4E-8C459BF419D6}\"\n    $registryKeys = @(\"DMR\", \"OCP\")\n\n    foreach ($key in $registryKeys) {\n        $registryKey = \"$parentKey\\$key\"\n        # Check if the key exists\n        if (-Not (Test-Path $registryKey)) {\n            # If the key does not exist, create it with a default value or add any necessary subkeys or values\n            New-Item -Path $registryKey -Force | Out-Null\n            Write-Host \"Registry key '$registryKey' and values created.\"\n        } else {\n            Write-Host \"Registry key '$registryKey' already exists.\"\n        }\n    }\n\n    # IIS application changes\n    # Check if the IIS site exists\n    if ($iisSite = Get-Website $iisSiteName -ErrorAction SilentlyContinue) {\n        # Check if the application exists\n        $existingApp = Get-WebApplication -Site $iisSiteName | Where-Object { $_.Path -eq \"/$iisAppName\" }\n        if ($existingApp) {\n            # If the application exists, change the Physical Path using Set-WebConfigurationProperty\n            Set-WebConfigurationProperty -Filter \"/system.applicationHost/sites/site[@name='$iisSiteName']/application[@path='/$iisAppName']/virtualDirectory[@path='/']\" -Name \"physicalPath\" -Value $iisAppPhysicalPath\n            Write-Host \"IIS application '$iisAppName' Physical Path changed to '$iisAppPhysicalPath'.\"\n        } else {\n            Write-Host \"IIS application '$iisAppName' does not exist. The Physical Path cannot be changed.\"\n        }\n    } else {\n        Write-Host \"IIS site '$iisSiteName' does not exist. The application cannot be changed.\"\n    }\n}\n\nWrite-Host \"Restarting IIS Server\"\n# Perform IIS reset\niisreset\nWrite-Host \"Done\"\n\n```\n\n----------------------------------------\n\nTITLE: Getting Teams App - PowerShell\nDESCRIPTION: This snippet displays the addition of the `InstalledFor` output attribute to `Get-M365TeamsApp` & `Get-AllM365TeamsApps`. This allows knowing for whom the app has been installed using these cmdlets from MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_46\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-M365TeamsApp & Get-AllM365TeamsApps\n```\n\n----------------------------------------\n\nTITLE: Get Front End Pool Fabric State - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves the fabric state of the Front End pool. It's used before applying patches to check for any missing replicas. Replace `<PoolFQDN>` with the actual FQDN of the pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-front-end-servers.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPoolFabricState -PoolFqdn <PoolFQDN>\n```\n\n----------------------------------------\n\nTITLE: Test Dial Plan - PowerShell\nDESCRIPTION: Tests a telephone number against a dial plan (formerly known as a location profile) and returns the normalization rule that will be applied to the number as well as the translated number after the normalization rule has been applied.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_58\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Enable Connectors for Teams - Exchange Online PowerShell\nDESCRIPTION: This snippet demonstrates how to enable connectors, connectors for Teams, and actionable messages using Exchange Online PowerShell. It requires connecting to Exchange Online PowerShell with an administrator account and using the `Set-OrganizationConfig` cmdlet.  To disable, set the value to `$false`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/m365-custom-connectors.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-OrganizationConfig -ConnectorsEnabled:$true\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-OrganizationConfig -ConnectorsEnabledForTeams:$true\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-OrganizationConfig -ConnectorsActionableMessagesEnabled:$true\n```\n\n----------------------------------------\n\nTITLE: Querying User Additions to Teams Channels - KQL\nDESCRIPTION: This KQL query identifies when a specific user was added to a Teams channel within the last seven days. It checks for 'MemberAdded' operations and filters based on the user's display name or User Principal Name (UPN).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-sentinel-guide.md#_snippet_1\n\nLANGUAGE: Kusto\nCODE:\n```\nOfficeActivity\n| where TimeGenerated > ago(7d)\n| where Operation =~ \"MemberAdded\"\n| where Members has \"<DisplayName>\" or Members has \"<UserPrincipalName>\"\n| project TeamName, Operation, UserId, Members\n```\n\n----------------------------------------\n\nTITLE: Retrieving Counter Values\nDESCRIPTION: This console command retrieves the values for a specified counter from Redis and exports them to a CSV file.  The '-counter' parameter specifies the counter to retrieve, and '-file:all-processor.csv' specifies the output file.  The 'PerfAgentStorageManager.exe' tool is used, and Redis must be running on localhost.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n.\\PerfAgentStorageManager.exe -redis=localhost -a=getcountervalues  -counter=\"\\\\*\\Processor Information\\% Processor Time_Mean_Mean\\\\_Total\" -file:all-processor.csv\n```\n\n----------------------------------------\n\nTITLE: Set eCDN Provider to Microsoft - PowerShell\nDESCRIPTION: This PowerShell command configures Microsoft eCDN as the third-party video distribution provider for Teams meetings. It utilizes the `Set-CsTeamsMeetingBroadcastConfiguration` cmdlet to set `AllowSdnProviderForBroadcastMeeting` to `$True` and `SdnProviderName` to `microsoft`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/streaming-ecdn-enterprise-content-delivery-network.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastConfiguration -AllowSdnProviderForBroadcastMeeting $True -SdnProviderName microsoft\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Default Call Action in PowerShell\nDESCRIPTION: This snippet provides a specific example of defining a default call action using `New-CsRgsCallAction` in PowerShell. It uses the `$promptWM` prompt, sets the action to `TransferToQueue`, and utilizes the `$qid.Identity` queue ID to direct the call to the specified queue. The resulting call action is stored in `$actionWM`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$actionWM = New-CsRgsCallAction -Prompt $promptWM -Action TransferToQueue -QueueID $qid.Identity\n```\n\n----------------------------------------\n\nTITLE: Enabling Feedback to PMP via XML\nDESCRIPTION: This XML snippet enables sending feedback events from a Teams Rooms on Windows device to the Teams Rooms Pro Management portal. When set to 'true', user-reported issues are logged in the portal, facilitating issue resolution and support case creation. This setting is applicable for devices with a Teams Rooms Pro license.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/mtr-home-refresh.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<SendFeedbackToPMP>true</SendFeedbackToPMP>\n```\n\n----------------------------------------\n\nTITLE: Filtering User Messages using Microsoft Graph API (HTTP)\nDESCRIPTION: This section provides examples of filter parameters that can be used with the Microsoft Graph API to optimize the retrieval of messages from a chat thread. The examples demonstrate how to filter messages based on the sender (user, application, anonymous user, federated user) and message type. It uses the getAllMessages API.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_13\n\nLANGUAGE: HTTP\nCODE:\n```\n$filter=from/application/applicationIdentityType eq '<appType>' (bots/tenantBots/connectors, etc.)  \n  \n$filter=from/user/id eq '<oid>' (any number of id filters)  \n  \n$filter=from/user/userIdentityType eq 'anonymousGuest'  \n  \n$filter=from/user/userIdentityType eq 'federatedUser' (guest/external)  \n  \n$filter=from/application/applicationIdentityType eq '<appType>' or from/user/id eq '<oid>' (sent by app or userid)  \n  \n$filter=from/application/applicationIdentityType eq '<appType>' or from/user/userIdentityType eq 'anonymousGuest' (sent by app or anonymous)  \n\n$filter=from/application/applicationIdentityType eq '<appType>' or from/user/userIdentityType eq 'federatedUser' (sent by app or federated)  \n  \n$filter=from/application/applicationIdentityType eq '<appType>' or from/user/userIdentityType eq 'anonymousGuest' or from/user/userIdentityType eq 'federatedUser' (sent by app, anonymous or federated)  \n  \n$filter=from/user/id eq '<oid>' or from/user/userIdentityType eq 'anonymousGuest' (sent by any number of userid or anonymous)  \n  \n$filter=from/user/id eq '<oid>' or from/user/userIdentityType eq 'federatedUser' (sent by any number of userid or federated)  \n\n$filter=from/application/applicationIdentityType eq '<appType>' or from/user/id eq '<oid>' or from/user/userIdentityType eq 'anonymousGuest' or from/user/userIdentityType eq 'federatedUser' (sent by any number of userid or federated or anonymous)\n \n$filter=from/application/applicationIdentityType eq '<appType>' or from/user/id eq '<oid>' or from/user/userIdentityType eq 'anonymousGuest' or from/user/userIdentityType eq 'federatedUser' (sent by any number of userid or federated or anonymous) or messsageType eq 'systemEventMessage'\n\n(<any of the previous filters>) and (lastModifiedDateTime+gt+<date>+and+lastModifiedDateTime+lt+<date>)  \n```\n\n----------------------------------------\n\nTITLE: Remove Online Voice Routing Policy (Teams PowerShell)\nDESCRIPTION: This PowerShell command removes the online voice routing policy associated with a specific user. It's crucial to execute this after unassigning a Direct Routing number and before assigning an Operator Connect for India number during migration. The `<user>` placeholder should be replaced with the actual user's identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-india-configure.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineVoiceRoutingPolicy -Identity <user> -PolicyName $Null\n```\n\n----------------------------------------\n\nTITLE: Adding FileTypeCheck, UrlReputationCheck parameters\nDESCRIPTION: This snippet adds `FileTypeCheck`, `UrlReputationCheck` parameters to `[New|Set]-CsTeamsMessagingConfiguration`. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_36\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsMessagingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Associate Subnets via CSV Import - PowerShell\nDESCRIPTION: This PowerShell command imports subnet data from a CSV file and creates network subnet associations in Skype for Business Server. The CSV file must contain columns for IPAddress, mask, description, and NetworkSiteID. The `import-csv` cmdlet reads the CSV and pipes each row to `New-CsNetworkSubnet` to create subnet associations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-network.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nimport-csv subnet.csv | foreach {New-CsNetworkSubnet -Identity $_.IPAddress -MaskBits $_.mask -Description $_.description -NetworkSiteID $_.NetworkSiteID}\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Contact Method to Email\nDESCRIPTION: This snippet sets the preferred contact method for Parent Connection invitations to Email. It utilizes the Set-CsTeamsEducationConfiguration cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/edu-parents-app.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEducationConfiguration -ParentGuardianPreferredContactMethod Email\n```\n\n----------------------------------------\n\nTITLE: Import and Encode X.509 Certificate - PowerShell\nDESCRIPTION: These commands import an X.509 certificate from a .CER file, encode it into a Base64 string, and store the encoded value in the $credentialsValue variable. The certificate is used for authenticating service principals with Microsoft 365 or Office 365.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$certificate = New-Object System.Security.Cryptography.X509Certificates.X509Certificate\n$certificate.Import(\"C:\\Certificates\\Office365.cer\")\n$binaryValue = $certificate.GetRawCertData()\n$credentialsValue = [System.Convert]::ToBase64String($binaryValue) \n```\n\n----------------------------------------\n\nTITLE: Translation Rule Example\nDESCRIPTION: This snippet shows an example of a translation rule that prepends '011' to a matched number. This translation rule is designed to be used with regular expression. Where $1 represents the matched number pattern.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/called-id-presentation-rules.md#_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n011$1\n```\n\n----------------------------------------\n\nTITLE: Modifying Conferencing Policy with PowerShell\nDESCRIPTION: This example demonstrates how to modify a conferencing policy using the `Set-CsConferencingPolicy` cmdlet in Skype for Business Server Management Shell. It sets the `AllowConferenceRecording` property of the `SalesConferencingPolicy` to `False`, preventing conferences using this policy from being recorded. The cmdlet requires the `Identity` parameter to specify the policy to modify and the `-AllowConferenceRecording` parameter to set the recording property.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/modify-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingPolicy -Identity SalesConferencingPolicy -AllowConferenceRecording $False\n```\n\n----------------------------------------\n\nTITLE: Assign Voice Route Policy to User (PowerShell)\nDESCRIPTION: This PowerShell command assigns the per-user online voice routing policy `AnalogInteropPolicy` to the user with the identity `exampleuser@contoso.com`. This determines which PSTN usages are available to the user for outbound calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-analog-devices.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Grant-CsOnlineVoiceRoutingPolicy -Identity \"exampleuser@contoso.com\" -PolicyName \"AnalogInteropPolicy\" \n```\n\n----------------------------------------\n\nTITLE: Get PIN Policy Information - Skype for Business - PowerShell\nDESCRIPTION: Returns information about the client personal identification number (PIN) policies configured for use in an organization. PIN authentication enables users to access Skype for Business Server by providing a PIN instead of a username and password.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Set Global Teams Meeting Broadcast Policy PowerShell\nDESCRIPTION: Modifies the global Teams meeting broadcast policy. The example sets the `-AllowBroadcastScheduling` parameter to `$false`, disabling live event scheduling for the entire organization. It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastPolicy -identity Global -AllowBroadcastScheduling $false\n```\n\n----------------------------------------\n\nTITLE: Adding ShiftsTeamId & ShiftsSchedulingGroupId to CsCallQueue cmdlets\nDESCRIPTION: This snippet adds `ShiftsTeamId` and `ShiftsSchedulingGroupId` parameters to the `New-CsCallQueue` and `Set-CsCallQueue` cmdlets.  These parameters likely relate to integration with the Shifts application within Microsoft Teams. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Creating Registry Key for Central Discovery - PowerShell\nDESCRIPTION: This PowerShell code snippet creates a new registry key for 'Health' if it doesn't already exist, which is required for central discovery logic in System Center Operations Manager. It's executed on the server elected to manage the central discovery logic. If the key exists, the command may fail but can be safely ignored.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/configure-scom-monitoring.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Item -Path \"HKLM:\\Software\\Microsoft\\Real-Time Communications\\Health\"\n```\n\n----------------------------------------\n\nTITLE: Querying User Role Changes in Teams - KQL\nDESCRIPTION: This KQL query identifies instances where a user's role within a Team has been changed in the last seven days. It specifically looks for 'MemberRoleChanged' operations and then checks if the new role assigned is '1', which likely represents a specific role type (e.g., Owner).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-sentinel-guide.md#_snippet_2\n\nLANGUAGE: Kusto\nCODE:\n```\nOfficeActivity\n| where TimeGenerated > ago(7d)\n| where Operation =~ \"MemberRoleChanged\"\n| project TeamName, Operation, UserId, Members\n| mv-expand bagexpansion=array Members\n| evaluate bag_unpack(Members)\n| where Role == '1'\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Credential - PowerShell\nDESCRIPTION: This command retrieves credential information for a specific service principal, including the KeyId, which is needed to remove the certificate later.  The -AppPrincipalId parameter specifies the service principal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MsolServicePrincipalCredential -AppPrincipalId 00000004-0000-0ff1-ce00-000000000000\n```\n\n----------------------------------------\n\nTITLE: Get Specific Exchange UM Auto Attendant Details - Powershell\nDESCRIPTION: Retrieves detailed information about a specific Exchange UM auto attendant using the `Get-UMAutoAttendant` cmdlet.  This is used during migration to extract settings such as business hours, non-business hours, language, and holiday schedules for re-implementation in Phone System.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-onprem-ra.md#_snippet_7\n\nLANGUAGE: Powershell\nCODE:\n```\nGet-UMAutoAttendant -Identity MyUMAutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Checking User's Teams Mobility Policies with PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the Teams policy assignments for a specific user. Replace 'user@xyz.onmicrosoft.com' with the actual user's email address to check their assigned policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nget-CsUserpolicyassignment -identity user@xyz.onmicrosoft.com\n```\n\n----------------------------------------\n\nTITLE: Create New Conferencing Policy - Skype for Business PowerShell\nDESCRIPTION: This cmdlet creates a new conferencing policy. This is used to define custom settings for conferencing that can then be applied to users or sites.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing-policies.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsConferencingPolicy](/powershell/module/skype/new-csconferencingpolicy?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Assigning Policy to a subset of Users (Chunking)\nDESCRIPTION: Demonstrates assigning a policy in batches, when you have more than 5000 users. In this specific case, it is assigning to the first 20000 members of the `$faculty` array.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsBatchPolicyAssignmentOperation -PolicyType TeamsMeetingPolicy -PolicyName EducatorMeetingPolicy -Identity $faculty[0..19999].ObjectId\n```\n\n----------------------------------------\n\nTITLE: List Unique Users from the User Activity Report in PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of unique users who initiated at least one session as the 'From user'. It groups the data by the 'From user' column, selects the 'Name' property (representing the user's SIP URI), and sorts the list alphabetically by name. This provides a clean, ordered list of all users who initiated sessions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/user-activity-report.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x | Group-Object \"From user\" | Select Name | Sort-Object Name\n```\n\n----------------------------------------\n\nTITLE: Remove Directly Assigned Teams Meeting Broadcast Policy from User\nDESCRIPTION: This PowerShell snippet removes a Teams meeting broadcast policy that was directly assigned to a user. This forces the user to inherit the policy assigned to a group they belong to. The user is identified by their Identity (e.g., email address), and the PolicyName is set to `$null` to remove the direct assignment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingBroadcastPolicy -Identity daniel@contoso.com -PolicyName $null\n```\n\n----------------------------------------\n\nTITLE: Reassign Call Park Orbit with PowerShell\nDESCRIPTION: This PowerShell cmdlet reassigns a Call Park orbit range from the legacy pool to the Skype for Business Server 2019 pool. It requires the Skype for Business Server Management Shell.  The Identity of the orbit to be changed and the FQDN of the new pool are needed as input.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-call-park-application-settings.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallParkOrbit -Identity \"<Call Park Orbit Identity>\" -CallParkService \"service:ApplicationServer:<Skype for Business Server 2019 Pool FQDN>\"\n```\n\n----------------------------------------\n\nTITLE: Defining QoE Queries\nDESCRIPTION: This JavaScript code defines an array of query objects for retrieving QoE data. Each object specifies a label, an ID, and a query structure. The query structure includes dimensions (e.g., StartDate.Month), filters (e.g., ScenarioPair, StreamType), measurements (e.g., AudioPoorJPDRPercentage), and trend settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n            {\n                Label: \"Client-Client (inside)\",\n                ID: \"WWI\",\n                Query:\n                {\n                    Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                    Filters: [\n                        {\n                            \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n                            \"Caption\": \" Client-Inside-wired,Client-Inside-wired\",\n                            \"Value\": \"[0]&amp;[0]&amp;[1]&amp;[1]&amp;[Wired]&amp;[Wired]\",\n                            \"Operand\": 0,\n                            \"UnionGroup\": \"\"\n                        },\n                        { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                        { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\" }\n                    ],\n                    Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                    Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            }\n            ,\n            {\n                Label: \"Client-Client (outside)\",\n                ID: \"WIWO\",\n                Query:\n                {\n                    Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                    Filters: [\n                        {\n                          \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n                          \"Caption\": \"Client-Outside-Wired,Client-Outside-Wired\",\n                          \"Value\": \"[0]&amp;[0]&amp;[0]&amp;[0]&amp;[Wired]&amp;[Wired]\",\n                          \"Operand\": 0,\n                          \"UnionGroup\": \"\"\n                        },\n                        { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                        { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\" }\n                    ],\n                    Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                    Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            },\n            {\n                Label: \"Server-Client (inside)\",\n                ID: \"SWFI\",\n                Query:\n                {\n                    Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                    Filters: [\n                        {\n                            \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n                            \"Caption\": \" Server-Inside-wired,Client-Inside-wifi\",\n                            \"Value\": \"[1]&amp;[0]&amp;[1]&amp;[1]&amp;[Wired]&amp;[Wifi]\",\n                            \"Operand\": 0,\n                            \"UnionGroup\": \"\"\n                        },\n                        { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                        { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\" }\n                    ],\n                    Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                    Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            },\n            {\n                Label: \"Server-Client (outside)\",\n                ID: \"SWFO\",\n                Query:\n                {\n                    Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                    Filters: [\n                         {\n                             \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n                             \"Caption\": \" Server-Inside-wired,Client-Outside-wifi\",\n                             \"Value\": \"[1]&amp;[0]&amp;[1]&amp;[0]&amp;[Wired]&amp;[Wifi]\",\n                             \"Operand\": 0,\n                             \"UnionGroup\": \"\"\n                         },\n                        { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                        { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\" }\n                    ],\n                    Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                    Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            },\n            {\n                Label: \"Client-Client (inside)\",\n                ID: \"WFIWFI\",\n                Query:\n                {\n                    Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                    Filters: [\n                        {\n                            \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n                            \"Caption\": \" Client-Inside-Wifi,Client-Inside-Wifi\",\n                            \"Value\": \"[0]&amp;[0]&amp;[1]&amp;[1]&amp;[Wifi]&amp;[Wifi]\",\n                            \"Operand\": 0,\n                            \"UnionGroup\": \"\"\n                        },\n                        { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                        { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\" }\n                    ],\n                    Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                    Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            },\n            {\n                Label: \"Client-Client (outside)\",\n                ID: \"WFOWFO\",\n                Query:\n                {\n                    Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                    Filters: [\n                        {\n                          \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n                          \"Caption\": \"Client-Outside-Wifi,Client-Outside-Wifi\",\n                          \"Value\": \"[0]&amp;[0]&amp;[0]&amp;[0]&amp;[Wifi]&amp;[Wifi]\",\n                          \"Operand\": 0,\n                          \"UnionGroup\": \"\"\n                        },\n                        { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                        { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\" }\n                    ],\n                    Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                    Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            },\n            {\n                Label: \"Server-MobilePhone\",\n                ID: \"SMP\",\n                Query:\n                {\n                    Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                    Filters: [\n                        {\"DataModelName\": \"[First Is Server].[Agent]\",\"Caption\": \"Server\",\"Value\": \"[1]\",\"Operand\": 0,\"UnionGroup\": \"\"},\n                        {\"DataModelName\": \"[Second User Agent].[User Agent Type]\",\"Caption\": \"AndroidLync | iPhoneLync | WPLync\",\"Value\": \"[AndroidLync],[iPhoneLync],[WPLync]\",\"Operand\": 0,\"UnionGroup\": \"\"},\n                        { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n                    ],\n                    Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                    Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            },\n            {\n                Label: \"Server-MobileBroadBand\",\n                ID: \"SMBB\",\n                Query:\n                {\n                    Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                    Filters: [\n                        {\"DataModelName\": \"[Second Network Connection Type].[Network Connection Detail]\",\"Caption\": \"MobileBB\",\"Value\": \"[MobileBB]\",\"Operand\": 0,\"UnionGroup\": \"\"},\n                        {\"DataModelName\": \"[First Is Server].[Agent]\",\"Caption\": \"Server\",\"Value\": \"[1]\",\"Operand\": 0,\"UnionGroup\": \"\"},\n                        {\"DataModelName\": \"[Second Is Server].[Agent]\",\"Caption\": \"Client \",\"Value\": \"[0]\",\"Operand\": 0,\"UnionGroup\": \"\"},\n                        { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 }                       \n                    ],\n                    Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                    Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            },\n            {\n                Label: \"Server-LWA\",\n                ID: \"SLWA\",\n                Query:\n                {\n                    Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                    Filters: [\n                        {\"DataModelName\": \"[First Is Server].[Agent]\",\"Caption\": \"Server\",\"Value\": \"[1]\",\"Operand\": 0,\"UnionGroup\": \"\"},\n                        {\"DataModelName\": \"[Second User Agent].[User Agent Type]\",\"Caption\": \"LWA\",\"Value\": \"[LWA]\",\"Operand\": 0,\"UnionGroup\": \"\"},\n                        { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 }                       \n                    ],\n                    Measurements: [{ DataModelName: '[Measures].[AudioPoorJPDRPercentage]' }],\n                    Trend: { EnableTrend: true, SpanCount: numMonthsToShow, TrendDate: currentMonth, Type: 0 }\n                }\n            }\n\n            ];\n```\n\n----------------------------------------\n\nTITLE: Getting Auto Attendant Status - PowerShell\nDESCRIPTION: This cmdlet retrieves the status of an Auto Attendant in Microsoft Teams. This can be used to monitor the operational status of the Auto Attendant. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAutoAttendantStatus\n```\n\n----------------------------------------\n\nTITLE: Apply Region and Language via PowerShell\nDESCRIPTION: This PowerShell command applies the current region and language settings to the Microsoft Teams Rooms system. It executes a script located at `c:\\Rigel\\x64\\scripts\\provisioning\\scriptlaunch.ps1` with the argument `ApplyCurrentRegionAndLanguage.ps1`. The `-executionpolicy unrestricted` parameter allows the script to run regardless of the PowerShell execution policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-operations.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\npowershell -executionpolicy unrestricted c:\\Rigel\\x64\\scripts\\provisioning\\scriptlaunch.ps1 ApplyCurrentRegionAndLanguage.ps1\n```\n\n----------------------------------------\n\nTITLE: Finding Access Numbers Without Assigned Regions (PowerShell)\nDESCRIPTION: This PowerShell cmdlet retrieves all dial-in conferencing access numbers that are not associated with a region. It requires the Skype for Business Server Management Shell and membership in the RTCUniversalServerAdmins group, Cs-ServerAdministrator, or CsAdministrator role.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/tests.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialinConferencingAccessNumber -Region NULL\n```\n\n----------------------------------------\n\nTITLE: Creating New Skype UI Policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new client policy named UseSkypeUI and enables the Skype for Business client experience by setting the EnableSkypeUI parameter to $True. This policy must then be assigned to specific users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClientPolicy -Identity UseSkypeUI -EnableSkypeUI $True\n```\n\n----------------------------------------\n\nTITLE: Getting Auto Attendant Holidays - PowerShell\nDESCRIPTION: This cmdlet retrieves holiday schedules configured for Auto Attendants in Microsoft Teams.  This allows you to view the defined holiday periods. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAutoAttendantHolidays\n```\n\n----------------------------------------\n\nTITLE: Enable E2EE for Tenant via PowerShell\nDESCRIPTION: This PowerShell command enables end-to-end encryption (E2EE) for the entire tenant using the global policy.  It sets the `CallingEndtoEndEncryptionEnabledType` to `DisabledUserOverride`, meaning E2EE is disabled by default, but users can enable it in their Teams settings.  The `Set-CsTeamsEnhancedEncryptionPolicy` cmdlet modifies the global policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-end-to-end-encryption.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEnhancedEncryptionPolicy -Identity Global -CallingEndtoEndEncryptionEnabledType DisabledUserOverride\n```\n\n----------------------------------------\n\nTITLE: Get Web Service Configuration PowerShell\nDESCRIPTION: Retrieves the current web service configuration settings using the Get-CsWebServiceConfiguration cmdlet in Skype for Business Server Management Shell. This allows administrators to view the current settings related to web service functionality, including meeting join page behavior.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/configure-the-meeting-join-page.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWebServiceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Modify Conferencing Policy - PowerShell\nDESCRIPTION: Modifies an existing conferencing policy in Skype for Business Server.  This allows for adjusting settings of an already defined policy. Requires identifying the policy to be modified and specifying which parameters to change. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Modify Regions for Dial-in Access Number - PowerShell\nDESCRIPTION: This PowerShell command modifies the associated regions for a given dial-in conferencing access number. The `-Identity` parameter specifies the access number to modify, and the `-Regions` parameter assigns the new regions as comma-separated string values. The specified regions must already be defined in dial plans; otherwise, the command will fail. This command is used to associate the access number with specific geographic regions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/access-numbers.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingAccessNumber -Identity \"sip:RedmondDialIn@litwareinc.com\" -Regions \"Redmond\", \"Seattle\"\n```\n\n----------------------------------------\n\nTITLE: Granting a Voice Routing Policy Globally in Teams with PowerShell\nDESCRIPTION: This command assigns the voice routing policy named 'InternationalVoiceRoutingPolicy' to the global scope in Microsoft Teams. This makes the policy the default for all users in the organization. The Teams PowerShell module is required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-with-direct-routing-for-gcch-and-dod.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineVoiceRoutingPolicy -PolicyName \"InternationalVoiceRoutingPolicy\" -Global\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Server Application using Set-CsServerApplication - PowerShell\nDESCRIPTION: This cmdlet modifies the properties of a Skype for Business Server application. The example shows how to enable a specific server application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-topology-menu.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsServerApplication -Identity \"Registrar:atl-cs-001.litwareinc.com/ExumRouting\" -Enabled $True\n```\n\n----------------------------------------\n\nTITLE: Updating Teams App - PowerShell\nDESCRIPTION: This snippet highlights the addition of the `AppInstallType`, `InstallForOperationType`, `InstallForUsers`, `InstallForGroups` and `InstallVersion` parameters to `Update-M365TeamsApp`. These parameters likely provide more granular control over app installations within Teams. It's part of the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_45\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-M365TeamsApp -AppInstallType -InstallForOperationType -InstallForUsers -InstallForGroups -InstallVersion\n```\n\n----------------------------------------\n\nTITLE: Setting Meeting Policy for Teams and Skype for Business\nDESCRIPTION: This PowerShell script demonstrates how to set a Teams meeting policy to allow both the Teams Meeting add-in and the Skype for Business add-in in Outlook for users in Islands mode. The `PreferredMeetingProviderForIslandsMode` parameter is set to `TeamsAndSfB`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-provider-islands-mode.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -PreferredMeetingProviderForIslandsMode TeamsAndSfB\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning Teams VDI Policy to Disable Audio/Video\nDESCRIPTION: This PowerShell code creates a new Teams VDI policy named 'DisableCallsAndMeetingsAV' that disables audio and video in calls and meetings for users in non-optimized VDI environments, but allows screen sharing. It assigns this policy to a user, checks policy application and includes a cleanup block to remove policy assignments and the created policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$PolName = \"DisableCallsAndMeetingsAV\"\n\nNew-CsTeamsVdiPolicy -Identity $PolName -DisableCallsAndMeetings $false -DisableAudioVideoInCallsAndMeetings $true\nGrant-CsTeamsVdiPolicy -Identity $user -PolicyName $PolName\n\n<# Wait for some time until the policy is applied #>\nGet-CSOnlineUser -identity $user | FL UserPrincipalName, *vdi*\n\n<# Cleanup afterwards #>\n$cleanup = $false\nif($cleanup){\n\n    \"Doing cleanup\"\n\n    # De-assign policy from user  \n    Grant-CsTeamsVdiPolicy -Identity $user -PolicyName $null\n    Get-CSOnlineUser -identity $user | FL UserPrincipalName, *vdi*\n\n    # Remove policies\n    Get-CsTeamsVdiPolicy | ?{$_.identity -ne 'Global'} | remove-csTeamsVdiPolicy\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Backup Service Status for Pool - PowerShell\nDESCRIPTION: This command retrieves the status of the Backup Service for a specific Front End pool. The `-PoolFqdn` parameter specifies the fully qualified domain name (FQDN) of the pool. Understanding the sync status between pools is crucial for failover and disaster recovery scenarios.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/configuring-and-monitoring-the-backup-service.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsBackupServiceStatus -PoolFqdn \\<pool-FQDN>\n```\n\n----------------------------------------\n\nTITLE: Get a User's Teams Meeting Broadcast Policy Source via PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the source of a user's Teams meeting broadcast policy assignment. It uses Get-CsUserPolicyAssignment to identify the policies applied to the user and then extracts the PolicySource details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUserPolicyAssignment -Identity daniel@contoso.com -PolicyType TeamsMeetingBroadcastPolicy | select -ExpandProperty PolicySource\n```\n\n----------------------------------------\n\nTITLE: Uninstall Monitoring Database using PowerShell\nDESCRIPTION: This PowerShell command uninstalls the Monitoring Server database from a specified SQL Server instance.  It requires membership in the SQL Server sysadmins group. The <FQDN> parameter specifies the fully qualified domain name of the SQL Server, and <instance> is an optional named instance. The cmdlet prompts for confirmation before proceeding.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/remove-the-sql-server-database-for-a-monitoring-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-CsDataBase -DatabaseType Monitoring -SqlServerFqdn <FQDN> [-SqlInstanceName <instance>]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Graph and Teams via PowerShell\nDESCRIPTION: This section describes running the Connect-MgGraph and Connect-MicrosoftTeams PowerShell modules. These modules are prerequisites for the other scripts and establish the necessary connections to Microsoft Graph and Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-manager-directs-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Connect-MgGraph](/powershell/microsoftgraph/authentication-commands)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Connect-MicrosoftTeams](/powershell/module/teams/connect-microsoftteams)\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Mitigation Application - PowerShell\nDESCRIPTION: This PowerShell cmdlet disables the automatic application of mitigations by the Emergency Mitigation Service (EMS). While EMS will still check for mitigations hourly, it won't automatically apply them to the Skype for Business Server.  The PoolFqdn parameter specifies the pool to configure, and MitigationsEnabled is set to $false to disable automatic application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/emergency-mitigation-service-overview.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMitigationConfiguration - PoolFqdn <Pool1> -MitigationsEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Setting QoS for Calling/Meeting Signaling using PowerShell\nDESCRIPTION: This snippet uses the `New-NetQosPolicy` cmdlet to configure QoS policies for calling and meeting signaling traffic in both the new Teams client (ms-teams.exe) and the classic Teams client (Teams.exe). It sets DSCP markings, specifying the application path, IP protocol (UDP), source port range, and DSCP value. Dependencies: Requires the NetQoS module in PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/QoS-in-Teams-clients.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nnew-NetQosPolicy -Name \"Teams Calling-Meeting Signaling\" -AppPathNameMatchCondition \"ms-teams.exe\" -IPProtocolMatchCondition UDP -IPSrcPortStartMatchCondition 50070 -IPSrcPortEndMatchCondition 50089 -DSCPAction 40 -NetworkProfile All\nnew-NetQosPolicy -Name \"Classic Teams Calling-Meeting Signaling\" -AppPathNameMatchCondition \"Teams.exe\" -IPProtocolMatchCondition UDP -IPSrcPortStartMatchCondition 50070 -IPSrcPortEndMatchCondition 50089 -DSCPAction 40 -NetworkProfile All\n```\n\n----------------------------------------\n\nTITLE: Syncing Full RGS Data on Backup Pool - PowerShell\nDESCRIPTION: This command synchronizes the full RGS data on the backup pool. Replace `<Pool1 FQDN>` with the FQDN of the pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsBackupServiceSync -PoolFqdn <Pool1 FQDN> -BackupModule ApplicationServer.RGSDataStore\n```\n\n----------------------------------------\n\nTITLE: Disable Shared SIP Address Space - PowerShell\nDESCRIPTION: This PowerShell command disables shared SIP address space in the Microsoft 365 organization.  This step logically separates the on-premises deployment from Microsoft 365 and is essential for completing the migration to Teams Only.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-disabling-hybrid.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantFederationConfiguration -SharedSipAddressSpace $false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Response Group Service ID - PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves the service ID for the Response Group service in Skype for Business. It uses a combination of `Get-CSService` and `Where-Object` (aliased as `?`) to filter services and find the one that contains \"RGS\" in its Applications property. The ServiceId is then extracted and prefixed with \"service:\", and the result is stored in the `$serviceId` variable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-queue.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$serviceId=\"service:\"+(Get-CSService | ?{$_.Applications -Like \"*RGS*\"}).ServiceId;\n```\n\n----------------------------------------\n\nTITLE: Setting Unified Messaging Call Router Settings\nDESCRIPTION: This snippet demonstrates how to configure the UM Call Router settings using the Exchange Management Shell, including the startup mode and dial plans. It also shows enabling the Exchange certificate for the UMCallRouter service. It requires the Exchange Management Shell, a configured UM dial plan, and a valid certificate thumbprint.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/exchangeunified-messaging-for-voice-mail.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-UMCallRouterSettings -Server \"atl-exchange-001.litwareinc.com\" -UMStartupMode \"Dual\" -DialPlans \"RedmondDialPlan\" \nEnable-ExchangeCertificate -Server \"atl-umserver-001.litwareinc.com\" -Thumbprint \"45BAA32496CC891169B75B9811320F78A1075DDA\" -Services \"IIS\",\"UMCallRouter\"\n```\n\n----------------------------------------\n\nTITLE: Building Data File Format Specification\nDESCRIPTION: This snippet describes the format of the building data file required for uploading to the Call Quality Dashboard (CQD). It specifies the column names, data types, and order of columns, along with example values and guidance for each column. The file must be either .tsv or .csv.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/CQD-upload-tenant-building-data.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n**Building data file format**\n  \n| Column name        | Data type | Example                   | Guidance              |\n|--------------------|-----------|---------------------------|-----------------------|\n| NetworkIP          | String    | 192.168.1.0               | Required              |\n| NetworkName        | String    | USA/Seattle/SEATTLE-SEA-1 | Required<sup>1</sup>  |\n| NetworkRange       | Number    | 26                        | Required              |\n| BuildingName       | String    | SEATTLE-SEA-1             | Required<sup>1</sup>  |\n| OwnershipType      | String    | Contoso                   | Optional<sup>4</sup>  |\n| BuildingType       | String    | IT Termination            | Optional<sup>4</sup>  |\n| BuildingOfficeType | String    | Engineering               | Optional<sup>4</sup>  |\n| City               | String    | Seattle                   | Recommended           |\n| ZipCode            | String    | 98001                     | Recommended           |\n| Country            | String    | US                        | Recommended           |\n| State              | String    | WA                        | Recommended           |\n| Region             | String    | MSUS                      | Recommended           |\n| InsideCorp<sup>2</sup>         | Bool      | 1             | Required              |\n| ExpressRoute<sup>3</sup>       | Bool      | 0             | Required              |\n| VPN                | Bool      | 0                         | Optional              |\n\n  <sup>1</sup> While not required by CQD, the templates are configured to display Building and Network name.\n\n  <sup>2</sup> This setting can be used to reflect whether or not the subnet is inside the corporate network. You can customize usage for other purposes.\n\n  <sup>3</sup> This setting can be used to reflect whether or not the network uses Azure ExpressRoute. You can customize usage for other purposes.  \n  \n  <sup>4</sup> While these optional columns are named to suggest what values you might want to populate them with, you can customize usage for other purposes, such as: Network Priority - `Tier 1, Tier 2, Tier 3`.\n```\n\n----------------------------------------\n\nTITLE: Mapping Slack Users to Azure AD using PowerShell\nDESCRIPTION: This PowerShell script connects to Microsoft Graph, reads Slack user data from a JSON file, and attempts to match Slack users to Azure AD users based on email addresses. It then reports whether the user exists in Azure AD and if they are enabled for Teams, exporting the mapping to a CSV file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/migrate-slack-to-teams.md#_snippet_0\n\nLANGUAGE: azurepowershell\nCODE:\n```\nConnect-MgGraph\nFunction Get-TimeStamp {\n    return \"[{0:MM/dd/yy} {0:HH:mm:ss}]\" -f (Get-Date)\n}\n\nclass User {\n    [ValidateNotNullOrEmpty()] $ID\n    [ValidateNotNullOrEmpty()] $FullName\n    [string] $Email\n    [string] $UPN\n    [ValidateNotNullOrEmpty()][bool] $ExistsAzureAD\n    [ValidateNotNullOrEmpty()][bool] $TeamsEnabled\n}\n\n$output = New-Object -type System.Collections.ObjectModel.Collection[\"User\"]\n\n$users = Get-Content -Raw -Path .\\slackHistory\\users.json | ConvertFrom-Json\n\nWrite-Host -ForegroundColor Green \"$(Get-Timestamp) User Count: \" $users.Count\n\n$i=1\nWrite-Host \"$(Get-Timestamp) Attempting direct email match.. `n\"\nforeach ($slackUser in $users) {\n    $user = New-Object User\n    $user.id = $slackUser.id\n    $user.FullName = $slackUser.name\n    try {\n        if ($null -ne $slackUser.profile.email) {\n            $user.email = $slackUser.profile.email\n            $emailSplit = $slackUser.profile.email.Split('@')\n            $mailNickName = $emailSplit[0]\n            $result = Get-MgUser -Filter \"MailNickName eq '$($mailNickName)' or UserPrincipalName eq '$($slackUser.profile.email)' or proxyAddresses/any(c:c eq 'smtp:$($slackUser.profile.email)')\"\n            if ($null -ne $result) {\n                $user.ExistsAzureAD = $true\n                $user.UPN = $result.UserPrincipalName\n                $assignedPlans = $result.assignedPlans\n                foreach ($plan in $assignedPlans) {\n                    if ($plan.ServicePlanId -eq \"57ff2da0-773e-42df-b2af-ffb7a2317929\") {\n                        if ($plan.CapabilityStatus -eq \"Enabled\") {\n                            $user.TeamsEnabled = $true\n                        }\n                        else {\n                            $user.TeamsEnabled = $false\n                        }\n                    }\n                }\n                Write-Host -ForegroundColor Green \"$(Get-Timestamp) Current User $($i) - AzureAD object found:\" $result.MailNickName\n                Write-Host -ForegroundColor Green \"$(Get-Timestamp) Current User $($i) - Teams Enabled:\" $user.TeamsEnabled\n            }\n            else {\n                $user.ExistsAzureAD = $false\n                Write-Host -ForegroundColor Yellow \"$(Get-Timestamp) Current User $($i) - AzureAD object not found: \" $slackUser.profile.email\n            }\n        }\n        $i++\n    }   \n    catch\n    {\n        $user.ExistsAzureAD = $false\n        Write-Host -ForegroundColor Yellow \"$(Get-Timestamp) Current User $($i) - AzureAD object not found: $($i)\" $user.profile.email\n        $i++\n    }\n    $output.Add($user)\n}\n\n$output | Export-Csv -Path .\\SlackToAzureADIdentityMapping.csv -NoTypeInformation\nWrite-Host \"`n $(Get-Timestamp) Generated SlackToAzureADIdentityMapping.csv. Exiting...\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating an App-Powered Task in Planner - HTTP\nDESCRIPTION: This example shows how to create an app-powered task named \"Review security practices presentation\" and assign it to a user using the Microsoft Graph API.  It utilizes a specific reference URL to link the task to a YouTube video within Teams.  The request includes task details, assignments, and reference information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/app-powered-tasks-in-planner.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://graph.microsoft.com/beta/solutions/businessScenarios/ccd5aa8aebd048bd839a4fa5b7420631/planner/tasks\n\n{\n\"title\": \"Review security practices presentation\",\n    \"target\": {\n        \"@odata.type\": \"#microsoft.graph.businessScenarioGroupTarget\",\n        \"taskTargetKind\": \"group\",\n        \"groupId\": \"769bbf41-70b7-4ea6-a044-a7037358883e\"\n    },\n    \"businessScenarioProperties\": {\n        \"externalObjectId\": \"SP-202418\",\n        \"externalBucketId\": \"Security practices\"\n    },\n    \"assignments\": {\n        \"44ee44ee-ff55-aa66-bb77-88cc88cc88cc\": {\n            \"@odata.type\": \"#microsoft.graph.plannerAssignment\",\n            \"orderHint\": \" !\"\n        }\n    },\n    \"details\": {\n        \"references\": {\n            \"https://teams%2Emicrosoft%2Ecom/l/stage/com%2Emicrosoft%2Eteamspace%2Etab%2Eyoutube/0?context=%7B%22contentUrl%22%3A%22https%3A%2F%2Ftabs%2Eteams%2Emicrosoft%2Ecom%2FyoutubeContentStage%3FvideoId%3DHBGmSy1iVmY%22%2C%22name%22%3A%22Security%2520talk%22%2C%22openMode%22%3A%22modal%22%7D\": {\n                \"@odata.type\": \"microsoft.graph.plannerExternalReference\",\n                \"alias\": \"Security practices presentation\",\n                \"previewPriority\": \" !\",\n                \"type\": \"TeamsHostedApp\"\n             }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incoming Webhook Connector Manifest - JSON\nDESCRIPTION: This JSON snippet represents the manifest for an Incoming Webhook connector custom app, designed to be used in Government Community Cloud (GCC) or Government Community Cloud-High (GCCH) environments.  The `id` and `connectorId` are crucial and must be identical.  The scopes determine where the connector can be used (e.g., team).  This manifest must be uploaded as part of a custom app package to the Teams admin center.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/m365-custom-connectors.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://developer.microsoft.com/en-us/json-schemas/teams/v1.5/MicrosoftTeams.schema.json\",\n  \"manifestVersion\": \"1.5\",\n  \"id\": \"203a1e2c-26cc-47ca-83ae-be98f960b6b2\",\n  \"version\": \"1.0.0\",\n  \"packageName\": \"com.incomingwebhook.microsoft\",\n  \"developer\": {\n    \"name\": \"Microsoft Corporation\",\n    \"websiteUrl\": \"https://go.microsoft.com/fwlink/?linkid=837668\",\n    \"privacyUrl\": \"https://privacy.microsoft.com/privacystatement\",\n    \"termsOfUseUrl\": \"https://www.microsoft.com/servicesagreement\"\n  },\n  \"description\": {\n    \"full\": \"The Incoming Webhook connector enables external services to notify you about activities that you want to track.\",\n    \"short\": \"Send data from a service to your Microsoft 365 group in real time. \"\n  },\n  \"icons\": {\n    \"outline\": \"outline.png\",\n    \"color\": \"color.png\"\n  },\n  \"connectors\": [\n    {\n      \"connectorId\": \"203a1e2c-26cc-47ca-83ae-be98f960b6b2\",\n      \"scopes\": [\"team\"]\n    }\n  ],\n  \"name\": {\n    \"full\": \"Incoming Webhook\",\n    \"short\": \"Incoming Webhook\"\n  },\n  \"accentColor\": \"#FFFFFF\",\n  \"permissions\": [\"identity\", \"messageTeamMembers\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Offline IM in Skype for Business Server (PowerShell)\nDESCRIPTION: This PowerShell command enables Offline Instant Messaging (IM) in Skype for Business Server. It modifies the `EnableOfflineIM` property within the `CsImConfiguration` to `$True`. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/im-and-presence/enable-or-disable-offline-im.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsImConfiguration -EnableOfflineIM $True\n```\n\n----------------------------------------\n\nTITLE: Setting Client Policy to Enable Smart Contacts - PowerShell\nDESCRIPTION: This PowerShell command sets the 'Global' client policy by adding the previously created policy entry ('$x') to it. This action enables the Smart contacts list feature for all users affected by the global policy. It requires the 'EnableClientAutoPopulateWithTeam' policy entry to be defined beforehand.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-smart-contacts-list.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsClientPolicy -Identity Global -PolicyEntry @{Add=$x}\n```\n\n----------------------------------------\n\nTITLE: Granting Archiving Policy to a User in Skype for Business Server (PowerShell)\nDESCRIPTION: This PowerShell command assigns the RedmondArchivingPolicy to a specific user, Ken Myer. It uses the Grant-CsArchivingPolicy cmdlet to associate the created policy with the specified user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-exchange-archiving.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsArchivingPolicy -Identity \"Ken Myer\" -PolicyName  \"RedmondArchivingPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Remove SIP Trunk Configurations by Service Scope - PowerShell\nDESCRIPTION: This command removes all SIP trunk configurations applied to the service scope. It uses `Get-CsTrunkConfiguration` to retrieve all configurations with a service scope and pipes them to `Remove-CsTrunkConfiguration` for removal. The `Filter` parameter is used to select only the configurations with a service scope.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/delete-existing-collection-of-sip-trunk-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrunkConfiguration -Filter \"service:*\" | Remove-CsTrunkConfiguration\n```\n\n----------------------------------------\n\nTITLE: Assign Users to External Access Policy - PowerShell\nDESCRIPTION: This PowerShell snippet assigns an existing external access policy to a list of users using New-CsBatchPolicyAssignmentOperation. $users_ids is an array of user IDs (UserPrincipalNames).  Replace <PolicyName> with the name of the policy created earlier. This cmdlet requires the MicrosoftTeams module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$users_ids = @(\"<UserName1>\", \"<UserName2>\")\nNew-CsBatchPolicyAssignmentOperation -PolicyType ExternalAccessPolicy -PolicyName \"<PolicyName>\" -Identity $users_ids\n```\n\n----------------------------------------\n\nTITLE: Copy File Store Data using Robocopy\nDESCRIPTION: This command uses Robocopy to copy data from the old file store to the new file store.  It includes options for handling subdirectories, retries, wait times, excluding the Meeting.Active file, using multiple threads, and creating a log file.  The user must replace the placeholders with actual server and share names.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/help-topobld/move-file-store-data.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRobocopy \\\\<OldFileServer>\\<OldShare> \\\\<NewFileServer>\\<NewShare> /S /R:10 /W:10 /XF Meeting.Active /MT /LOG:<directory path\\logname>\n```\n\n----------------------------------------\n\nTITLE: Set Dial-in Conferencing Configuration - PowerShell\nDESCRIPTION: This cmdlet modifies the dial-in conferencing configuration, allowing you to control name recording, default announcement settings, and announcement types. The Identity parameter specifies the scope (global or site).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/join-and-leave-announcements.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialinConferencingConfiguration -Identity <identity of dial-in conferencing settings to be modified>\n   [-EnableNameRecording <$true | $false>]\n   [-EntryExitAnnouncementsEnabledByDefault <$true | $false>]\n   [-EntryExitAnnouncementsType <UseNames | ToneOnly]\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat with Skype and Unmanaged Teams Users in PowerShell\nDESCRIPTION: This snippet uses the `Set-CSTenantFederationConfiguration` cmdlet in PowerShell to configure chat settings with Skype users and unmanaged Teams users.  It allows administrators to control whether to allow or prevent these types of communications, including inbound conversations from unmanaged Teams users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Analyze Device Report Data with PowerShell\nDESCRIPTION: This PowerShell script imports Device Report data from a CSV file, filters it to find calls using a specific capture device (e.g., Aastra), and calculates the total call volume for those devices. It requires the Device Report to be exported to a CSV file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/device-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$devices = Import-Csv \"C:\\Data\\Device_Report.csv\n$sum = $devices | Where-Object {$_.\"Capture device\" -match \"Aastra\"}\n$sum | foreach-object {[Int]$x = [Int]$x + [Int]$_.\"call volume\"}\n$x\n```\n\n----------------------------------------\n\nTITLE: Create Meeting Configuration with Presenter and PSTN Settings - PowerShell\nDESCRIPTION: This PowerShell command creates a new meeting configuration for the Redmond site, allowing everyone to be a presenter and forcing PSTN users to wait in the lobby until admitted.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/create-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsMeetingConfiguration -Identity \"site:Redmond\" -DesignateAsPresenter \"Everyone\" -PSTNUCallersBypassLobby $True\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Test Device with Get-CsTestDevice in PowerShell\nDESCRIPTION: This snippet retrieves details for a specific test device using the `Get-CsTestDevice` cmdlet and the `Identity` parameter. The `Identity` parameter specifies the unique identifier for the test device. It outputs the properties of the specified test device.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsTestDevice -Identity site:Redmond/UCPhone\n```\n\n----------------------------------------\n\nTITLE: Verify User Migration via PowerShell\nDESCRIPTION: This PowerShell snippet retrieves a specific user by their Identity and displays their properties, including the Registrar Pool. Replace User1 with the actual Identity of the user you want to verify.  This helps confirm that the user has been successfully moved to the specified pool, as the Registrar Pool property should now point to the target pool's FQDN.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-multiple-users-to-the-pilot-pool.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Identity \"User1\"\n```\n\n----------------------------------------\n\nTITLE: Set Dial-Out Policy on Per-User Level - PowerShell\nDESCRIPTION: This PowerShell cmdlet assigns a dial-out policy to a specific user, controlling the types of outbound calls they can make. It requires the username and the policy name as parameters. The policy name corresponds to a predefined policy instance that specifies the allowed call destinations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/outbound-calling-restriction-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsDialoutPolicy -Identity <username> -PolicyName <policy name>    \n```\n\n----------------------------------------\n\nTITLE: Translation Rule Example using Regular Expression\nDESCRIPTION: This example demonstrates how to create a translation rule using a regular expression. It shows how to match a pattern like +441235551010 and translate it to 011441235551010 using the regular expression ^\\+(\\d{9}\\d+)$ and the translation rule 011$1. This is done within the 'Build a Translation Rule' section of the Skype for Business Control Panel.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/defining-translation-rules.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nMatch this pattern: ^\\+(\\d{9}\\d+)$\nTranslation rule: 011$1\n```\n\n----------------------------------------\n\nTITLE: Create Voice Route for Analog Device (PowerShell)\nDESCRIPTION: This PowerShell command creates an online voice route with identity “analog-interop” for number range +1425 4XX XX XX applicable to a list of online gateways sbc.contoso.com and associates it with online PSTN usage “Interop”. This command should be run for each analog device with appropriate phone number pattern.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-analog-devices.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> New-CsOnlineVoiceRoute -Identity analog-interop -NumberPattern \"^\\+1(4254)(\\d{6})$\"  -OnlinePstnGatewayList sbc.contoso.com -Priority 1 -OnlinePstnUsages \"Interop\"\n```\n\n----------------------------------------\n\nTITLE: Creating Response Group Call Actions - PowerShell\nDESCRIPTION: These commands create two response group call actions, one for support and one for sales, using New-CsRgsCallAction. Parameters include the Prompt object, the Action (TransferToQueue), and the QueueID (the Identity property of the corresponding queue).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\n$SupportAction = New-CsRgsCallAction -Prompt $SupportPrompt -Action TransferToQueue -QueueID $QSupport.Identity\n$SalesAction = New-CsRgsCallAction -Prompt $SalesPrompt -Action TransferToQueue -QueueID $QSales.Identity\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with credentials in PowerShell\nDESCRIPTION: This command establishes a connection to Microsoft Teams using the administrator credentials stored in the `$credential` variable. It authenticates the PowerShell session to allow further management actions on Microsoft Teams resources.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-configure.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams –Credential $credential\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange and SharePoint as Partner Applications - PowerShell\nDESCRIPTION: This PowerShell script configures Microsoft Exchange and SharePoint as partner applications for Skype for Business Server.  It retrieves existing partner application configurations, removes them if necessary (if application identifier doesn't match), and creates or updates the partner applications using the provided metadata URLs. Finally, it sets the OAuth configuration. Note: Replace placeholder URLs with your actual Exchange and SharePoint metadata URLs. This script must be saved as a `.PS1` file and executed in the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-an-on-premises-partner-app.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ((Get-CsPartnerApplication -ErrorAction SilentlyContinue) -ne $Null)\n   {\n       Remove-CsPartnerApplication app\n   }\n\n$exch = Get-CsPartnerApplication microsoft.exchange -ErrorAction SilentlyContinue\n        \nif ($exch -eq $null)\n   {\n      New-CsPartnerApplication -Identity microsoft.exchange -MetadataUrl https://atl-exchange-001.litwareinc.com/autodiscover/metadata/json/1 -ApplicationTrustLevel Full \n    }\nelse\n    {\n       if ($exch.ApplicationIdentifier -ne \"00000002-0000-0ff1-ce00-000000000000\")\n          {\n             Remove-CsPartnerApplication microsoft.exchange\nNew-CsPartnerApplication -Identity microsoft.exchange -MetadataUrl https://atl-exchange-001.litwareinc.com/autodiscover/metadata/json/1 -ApplicationTrustLevel Full \n           }\n        else\n           {\n             Set-CsPartnerApplication -Identity microsoft.exchange -ApplicationTrustLevel Full \n           }\n     }\n\n$shp = Get-CsPartnerApplication microsoft.sharepoint -ErrorAction SilentlyContinue\n        \nif ($shp -eq $null)\n   {\n      New-CsPartnerApplication -Identity microsoft.sharepoint -MetadataUrl http://atl-sharepoint-001.litwareinc.com/jsonmetadata.ashx -ApplicationTrustLevel Full \n    }\nelse\n    {\n       if ($shp.ApplicationIdentifier -ne \"00000003-0000-0ff1-ce00-000000000000\")\n          {\n             Remove-CsPartnerApplication microsoft.sharepoint\n  \n             New-CsPartnerApplication -Identity microsoft.sharepoint -MetadataUrl https://atl-sharepoint-001.litwareinc.com/_layouts/15/metadata/json/1 -ApplicationTrustLevel Full \n           }\n        else\n           {\n             Set-CsPartnerApplication -Identity microsoft.sharepoint -ApplicationTrustLevel Full \n            }\n   }\n\nSet-CsOAuthConfiguration -ServiceName 00000004-0000-0ff1-ce00-000000000000\n```\n\n----------------------------------------\n\nTITLE: Viewing Video Trunk Configuration Settings - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves and displays the settings associated with a specified video trunk configuration.  It helps in verifying the configuration parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-video-interop-server/configure-the-vis.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsVideoTrunkConfiguration -Identity \"Service:VideoGateway:CUCMVIS1.CUCMInterop.contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Listing Archiving Policies using Get-CsArchivingPolicy (PowerShell)\nDESCRIPTION: This cmdlet retrieves a list of all Archiving Policies within the Skype for Business environment. No specific parameters are used in this example to retrieve all archiving policies. It returns a list of Archiving Policy objects with their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsArchivingPolicy\n```\n\n----------------------------------------\n\nTITLE: Update RBAC roles for SLA cmdlets - PowerShell\nDESCRIPTION: Updates the Role-Based Access Control (RBAC) roles to include permissions for the Shared Line Appearance (SLA) cmdlets. This ensures that administrators have the necessary permissions to manage SLA configurations. This command needs to be run after installing the SLA feature.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-shared-line-appearance.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-CsAdminRole\n```\n\n----------------------------------------\n\nTITLE: Starting a Front End Pool in Skype for Business Server\nDESCRIPTION: The Start-CsPool cmdlet is introduced in Skype for Business Server to simplify and improve the process of cold-starting an entire Front End pool. It checks prerequisites for all Front End Servers in the pool and attempts to start each server, diagnosing problems and providing workarounds if issues arise.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/what-s-new-in-skype-for-business-server.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsPool\n```\n\n----------------------------------------\n\nTITLE: Exporting Skype for Business User Settings\nDESCRIPTION: This PowerShell script exports Skype for Business user settings to a CSV file. It retrieves properties such as SipAddress, UserPrincipalName, SamAccountName, RegistrarPool, HostingProvider, EnabledForFederation, EnabledForInternetAccess, LineUri, EnterpriseVoiceEnabled, and HostedVoiceMail.  It's crucial to back up this data before modifying user attributes in Active Directory. The data is sorted by SipAddress before exporting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser | Select-Object SipAddress, UserPrincipalName, SamAccountName, RegistrarPool, HostingProvider, EnabledForFederation, EnabledForInternetAccess, LineUri, EnterpriseVoiceEnabled, HostedVoiceMail | Sort SipAddress | Export-Csv -Path  \"c:\\backup\\SfbUserSettings.csv\"\n```\n\n----------------------------------------\n\nTITLE: Set Teams Audio Conferencing Policy\nDESCRIPTION: This snippet illustrates the use of the `-Set-CsTeamsAudioConferencingPolicy` cmdlet for configuring audio conferencing policies. It shows that phone numbers added to this policy take precedence over those set using the 'Default conferencing Toll phone number' in the Teams Admin Center. If no numbers are defined in the policy, the default toll phone number is used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-the-audio-conferencing-settings-for-a-user-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n`-Set-CsTeamsAudioConferencingPolicy`\n```\n\n----------------------------------------\n\nTITLE: Remove Voice Routing Policy (Teams PowerShell)\nDESCRIPTION: This PowerShell command removes the online voice routing policy associated with a user.  It's necessary to clear the Direct Routing configuration after unassigning the number. It requires the Teams PowerShell module to be installed and the administrator to be connected to their Microsoft 365 tenant. The parameter <user> needs to be replaced with the actual user identifier.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure-numbers.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineVoiceRoutingPolicy -Identity <user> -PolicyName $Null\n```\n\n----------------------------------------\n\nTITLE: Creating Open Hours Prompts and Menu Options - PowerShell\nDESCRIPTION: This PowerShell script creates prompts and menu options for an open hours auto attendant, including defining actions for different DTMF responses. It defines prompts for greeting and menu options, targets for call transfers, and menu options for sales, support, address information, and operator assistance. It utilizes `New-CsAutoAttendantPrompt`, `Get-CsOnlineUser`, `New-CsAutoAttendantCallableEntity`, and `New-CsAutoAttendantMenuOption` cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n$openHoursGreetingPrompt = New-CsAutoAttendantPrompt -TextToSpeechPrompt \" Thank you for calling Contoso.\"\n\n$openHoursMenuPrompt = New-CsAutoAttendantPrompt -TextToSpeechPrompt \"For Sales press 1. For Support press 2. If you know the name of the person you would like to reach, press 3. For our address, email and fax information, press 4. For all other inquiries press 0 to speak with the operator.\"\n\n$openHoursMenuOption1Target = (Get-CsOnlineUser \"Sales-RA@contoso.com\").Identity\n\n$openHoursMenuOption1Entity = New-CsAutoAttendantCallableEntity -Identity $openHoursMenuOption1Target -Type applicationendpoint\n\n$openHoursMenuOption1 = New-CsAutoAttendantMenuOption -Action TransferCallToTarget -DtmfResponse Tone1 -CallTarget $openHoursMenuOption1Entity\n\n$openHoursMenuOption2Target = (Get-CsOnlineUser \"Support-RA@contoso.com\").Identity\n\n$openHoursMenuOption2Entity = New-CsAutoAttendantCallableEntity -Identity $openHoursMenuOption2Target -Type applicationendpoint\n\n$openHoursMenuOption2 = New-CsAutoAttendantMenuOption -Action TransferCallToTarget -DtmfResponse Tone2 -CallTarget $openHoursMenuOption2Entity\n\n$openHoursMenuOption4 = New-CsAutoAttendantMenuOption -Action Announcement -DtmfResponse Tone4 -Prompt $addressPrompt\n\n$openHoursMenuOption0 = New-CsAutoAttendantMenuOption -Action TransferCallToOperator -DtmfResponse Tone0\n```\n\n----------------------------------------\n\nTITLE: Compatibility Script for Windows Server 2022 - PowerShell\nDESCRIPTION: This PowerShell script configures encryption settings to ensure compatibility between Skype for Business Server and Windows Server 2022. It checks for an existing configuration, sets up necessary encryption providers and key containers, and modifies the applicationHost.config file, enhancing security and interoperability.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/plan/system-requirements.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$providerName = \"AesProvider\"\n$keyContainerName = \"iisCustomConfigurationKey\"\n\n$exe = Get-ChildItem -Path \"$env:SystemRoot\\Microsoft.NET\\Framework64\" -Filter \"aspnet_regiis.exe\" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1\n\nif ($exe -eq $null) {\n  Write-Error \"aspnet_regiis.exe not found. Exiting\";\n  Exit\n}\n\n$existingProvider = Get-WebConfiguration -PSPath 'MACHINE/WEBROOT/APPHOST' -Filter \"configProtectedData/providers/add[@name='$providerName']\"\nif ($null -ne $existingProvider) { # Provider already exists\n  Write-Host \"Script has already run. $providerName already exists. Exiting\"\n  Exit 0\n} \n\n& $exe.FullName -pc $keyContainerName -exp\n& $exe.FullName -pa $keyContainerName \"BUILTIN\\IIS_IUSRS\"\n& $exe.FullName -pa $keyContainerName \"NT SERVICE\\WMSVC\"\n\nAdd-WebConfigurationProperty -PSPath 'MACHINE/WEBROOT/APPHOST' -Filter \"configProtectedData/providers\" -Name \".\" -Value @{name=\"$providerName\";type='System.Configuration.RsaProtectedConfigurationProvider,System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'}\n\n$applicationHostConfigPath = \"$env:SystemRoot\\System32\\inetsrv\\config\\applicationHost.config\"\n[xml] $applicationHostConfigFile = Get-Content $applicationHostConfigPath\nforeach ($ele in $applicationHostConfigFile.configuration.configProtectedData.providers.add) {\n  if ($ele.name -eq $providerName) {\n    $ele.SetAttribute(\"keyContainerName\", $keyContainerName)\n    $ele.SetAttribute(\"useMachineContainer\", \"true\")\n    $ele.SetAttribute(\"useOAEP\", \"false\")\n    $ele.SetAttribute(\"useFIPS\", \"true\")\n  }\n}\n$applicationHostConfigFile.Save($applicationHostConfigPath)\nWrite-Host \"Script ran successfully. Key container $keyContainerName created. Provider $providerName added.\" \n```\n\n----------------------------------------\n\nTITLE: Disable UPN Pre-population in Teams via Windows Registry\nDESCRIPTION: This code snippet demonstrates how to disable the pre-population of the user name (UPN) on the Microsoft Teams sign-in screen for domain-joined computers.  It involves setting a specific DWORD value in the Windows Registry.  This setting is useful when administrators do not want the username to be automatically filled in for users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/legacy-login-issues.md#_snippet_0\n\nLANGUAGE: registry\nCODE:\n```\nComputer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\Teams<br/>\nSkipUpnPrefill(REG_DWORD)<br/>\n0x00000001 (1)\n```\n\n----------------------------------------\n\nTITLE: Assigning AllowCalling Policy using PowerShell\nDESCRIPTION: This snippet demonstrates how to assign the `AllowCalling` policy to a user using PowerShell. The `AllowCalling` policy enables all calling features for a Teams user. The `Identity` parameter accepts the user's email ID.  Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsCallingPolicy -PolicyName AllowCalling -Identity \"user email id\"\n```\n\n----------------------------------------\n\nTITLE: Synthetic Transactions via PowerShell for Skype for Business\nDESCRIPTION: This section describes how Skype for Business Server Management Packs provide increased coverage for alerts through synthetic transactions using Windows PowerShell cmdlets. These cmdlets are integrated into the Operations Manager management pack to test end-to-end user scenarios and generate stateful alerts upon failure. Failures resulting from a synthetic transaction generate a stateful alert.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/use-scom-management-pack.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Create New Dial-In Configuration - Skype for Business - PowerShell\nDESCRIPTION: Creates a new collection of dial-in conferencing configuration settings. These settings determine how Skype for Business Server responds when users join or leave a dial-in conference.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsDialInConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Modify Dial Plan - PowerShell\nDESCRIPTION: Modifies an existing dial plan in Skype for Business Server. Requires identifying the dial plan to be modified and specifying which parameters to change. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_40\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Assigning RBAC Roles with Administrative Unit Scope via Graph API\nDESCRIPTION: This section refers to Microsoft Graph API examples for creating role assignments with administrative unit scope, specifically demonstrating how to assign RBAC roles such as Teams Administrator, Teams Device Administrator, Teams Communication Administrator, Teams Communication Support Engineer, and Teams Communication Support Specialist. It requires the Microsoft Graph PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-administrative-units.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Learn more](/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0&tabs=powershell#example-2--create-a-role-assignment-with-administrative-unit-scope)\n```\n\n----------------------------------------\n\nTITLE: Modify Call Queue with Round Robin Routing - PowerShell\nDESCRIPTION: This example modifies an existing call queue to use Round Robin routing, enables presence-based routing, allows agents to opt-out, and sets the agent alert time to 60 seconds.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID>  -RoutingMethod RoundRobin -PresenceBasedRouting $true -AllowOptOut $true -AgentAlertTime 60\n```\n\n----------------------------------------\n\nTITLE: Generating HTTPS Prefix PowerShell\nDESCRIPTION: Adds 'https://' prefix to the ADFS OAuth instance, metadata URI and issuer name if `$disableAdfsOAuth` is false.  Also removes trailing slashes and adds a trailing slash to the ADFS OAuth instance.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ($disableAdfsOAuth.Equals($false))\n{\n    $adfsOAuthInstance = GenerateHttpsPrefix -input $adfsOAuthInstance\n    $adfsMetadataPublicUri = GenerateHttpsPrefix -input $adfsMetadataPublicUri\n    $adfsIssuerName = GenerateHttpsPrefix -input $adfsIssuerName\n\n    # Removing any trailing slash from the issuer name\n    $adfsIssuerName = $adfsIssuerName.TrimEnd('/')\n\n    # Make sure that instance name has a trailing slash\n    $adfsOAuthInstance = $adfsOAuthInstance.TrimEnd('/') + '/'\n}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Pattern to Match Example\nDESCRIPTION: This snippet shows an example of a regular expression used to match a specific number pattern in the 'Match this pattern' field when manually defining a translation rule. This pattern is designed to match numbers that start with a '+' followed by at least 10 digits.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/called-id-presentation-rules.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^\\+(\\d{9}\\d+)$\n```\n\n----------------------------------------\n\nTITLE: Get Conference Bridge Information - PowerShell\nDESCRIPTION: This PowerShell snippet uses `Get-CsOnlineDialInConferencingBridge` to retrieve information about a specific conference bridge, identified by its name.  The Skype for Business Online PowerShell module is required. This is often used to identify the BridgeID for use in other cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineDialInConferencingBridge -Name \"Conference Bridge\"\n```\n\n----------------------------------------\n\nTITLE: Remove Messages and Replace with Note - PowerShell\nDESCRIPTION: This PowerShell command removes messages from a chat room posted by a specific user and replaces them with a specified message indicating the content is no longer available.  It requires the Identity of the chat room, the UserUri of the user, and the ReplaceMessage parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/chat-rooms.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPersistentChatMessage -Identity \"atl-persistentchat-001.contoso.com\\ITChatRoom\" -UserUri \"sip:kenmyer@contoso.com\" -ReplaceMessage \"This message is no longer available.\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Global External Access Policy using PowerShell\nDESCRIPTION: This snippet demonstrates how to reset the global external access policy using the `Remove-CsExternalAccessPolicy` cmdlet in Windows PowerShell. The `-Identity` parameter specifies the policy to be reset, in this case, the global policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/reset-the-global-policy-for-external-user-access.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsExternalAccessPolicy -Identity \"global\"\n```\n\n----------------------------------------\n\nTITLE: Removing Busy Options for a User - PowerShell\nDESCRIPTION: This code removes the Busy Options configuration for a specific user (Ken Myer) using the `Remove-CsBusyOptions` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsBusyOptions -Identity \"Ken Myer\"\n```\n\n----------------------------------------\n\nTITLE: Get Dial-In Conferencing Access Number - PowerShell\nDESCRIPTION: Retrieves information about all the dial-in conferencing access numbers configured for use in Skype for Business Server. The cmdlet returns access number objects with details about the configured settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of QoE Queries\nDESCRIPTION: This JSON snippet defines the structure of a QoE query object. It includes dimensions, filters, measurements, and trend settings. Dimensions define the data granularity, filters specify criteria to narrow down the results, measurements indicate the metric to be retrieved, and trend settings configure trend analysis parameters such as span count and trend date.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Dimensions\": [{ \"DataModelName\": '[StartDate].[Month]' }],\n    \"Filters\": [\n        {\n            \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n            \"Caption\": \" Client-Inside-wired,Client-Inside-wired\",\n            \"Value\": \"[0]&amp;[0]&amp;[1]&amp;[1]&amp;[Wired]&amp;[Wired]\",\n            \"Operand\": 0,\n            \"UnionGroup\": \"\"\n        },\n        { \"DataModelName\": '[StartDate].[Month]', \"Value\": currentMonth, \"Operand\": 0 },\n        { \"DataModelName\": '[StreamType].[StreamType]', \"Caption\": \"Valid\", \"Value\": \"[False]\", \"Operand\": 0, \"UnionGroup\": \"\" }\n    ],\n    \"Measurements\": [{ \"DataModelName\": '[Measures].[AudioPoorJPDRPercentage]' }],\n    \"Trend\": { \"EnableTrend\": true, \"SpanCount\": numMonthsToShow, \"TrendDate\": currentMonth, \"Type\": 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Front of Room display resolution and scaling via XML\nDESCRIPTION: IT admins can remotely set Front of Room display resolution and scaling through XML settings. This enables centralized management of display configurations across multiple Teams Rooms devices. This functionality depends on XML settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-release-note.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding Busy Options as a Server Application - PowerShell\nDESCRIPTION: This command adds Busy Options to the list of server applications using the `New-CsServerApplication` cmdlet. The `%FQDN%` placeholder must be replaced with the fully-qualified domain name of a specific pool. This step enables the Busy Options application within the Skype for Business Server environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsServerApplication -Identity 'Service:Registrar:%FQDN%/BusyOptions' -Uri http://www.microsoft.com/LCS/BusyOptions -Critical $False -Enabled $True -Priority (Get-CsServerApplication -Identity 'Service:Registrar:%FQDN%/UserServices').Priority\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Version Configuration Details - PowerShell\nDESCRIPTION: This cmdlet retrieves the details of a specified client version configuration using its Identity. This example retrieves the configuration for the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsClientVersionConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Managing End-to-End Meeting Encryption Policy in Teams Admin Center\nDESCRIPTION: This snippet describes how to manage the end-to-end meeting encryption policy within the Microsoft Teams admin center. It outlines the steps to navigate to the enhanced encryption policy settings, select a policy, and configure the 'End-to-end meeting encryption' setting. This configuration controls whether end-to-end encryption is enforced or allowed for users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/end-to-end-encrypted-meetings.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. In the Teams admin center, select **Enhanced encryption policy**.\n\n2. Select the policy you want to update.\n\n3. Set **End-to-end meeting encryption**, to **Not enabled** or **Not enabled, but users can enable**.\n\n4. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Run Teams Guest Access Diagnostic\nDESCRIPTION: This snippet provides a direct link to run a diagnostic tool in the Microsoft 365 admin center.  This tool validates if guest access is correctly configured for use in Teams, and offers remediation steps if misconfigurations are detected. It requires administrative access to the Microsoft 365 admin center.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/guest-access.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"nextstepaction\"]\n> [Run Tests: Teams Guest Access](https://aka.ms/TeamsGuestAccessDiag)\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific SIP Trunk by Identity (PowerShell)\nDESCRIPTION: This command uses the Get-CsTrunk cmdlet with the -Identity parameter to retrieve information about a specific SIP trunk, identified by its unique Identity string (PstnGateway:192.168.0.240).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/view-information-about-individual-sip-trunks.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrunk -Identity \"PstnGateway:192.168.0.240\"\n```\n\n----------------------------------------\n\nTITLE: Connect to MgGraph and define variables - PowerShell\nDESCRIPTION: Connects to Microsoft Graph using the specified scopes and defines variables for the display name and application ID of the Microsoft Teams meeting add-on for Google Workspace.  This snippet is a prerequisite for subsequent PowerShell operations related to managing the add-on. It requires the Microsoft.Graph.Applications PowerShell module to be installed. The account used to run this script must have the necessary permissions to connect to MgGraph.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/google-workspace-addon-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MgGraph -Scopes \"Application.ReadWrite.All\"\n\n$displayName = 'Microsoft Teams meeting add-on for Google Workspace'\n$appId = '7969c887-ba98-48bb-8832-6c9239929d7c'\n```\n\n----------------------------------------\n\nTITLE: Get Shared Calling User - PowerShell\nDESCRIPTION: Retrieves the Shared Calling user object using the Get-CsOnlineUser cmdlet.  The user object is identified by the user's identity (email address). This is a prerequisite for enabling voice and assigning policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-scenario.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# Get the Shared Calling user\n$user = Get-CsOnlineUser -Identity user@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Get Emergency Location Details Using PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the details of an emergency location using its unique Location ID. The LocationId parameter specifies the alphanumeric identifier of the location.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/what-are-emergency-locations-addresses-and-call-routing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineLisLocation -LocationId abec3dca-fe2f-4426-9068-bd741123456\n```\n\n----------------------------------------\n\nTITLE: Getting a Skype for Business Queue - PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves a specific queue from Skype for Business using the `Get-CsRgsQueue` cmdlet.  It filters the queues by name (e.g., \"Help Desk\") and displays the properties of the matching queue.  This can be used to verify that a queue has been created successfully or to examine its current configuration.  The specified queue must exist.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-queue.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsRgsQueue -Name \"Help Desk\"\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Logging with Transcripts\nDESCRIPTION: This snippet initializes and stops a PowerShell transcript to log the script's execution. The `Start-Transcript` cmdlet begins recording all console output to a specified file, and `Stop-Transcript` ends the logging session. It then retrieves and outputs the member counts and IDs for both the teacher and student groups. This helps in auditing and debugging the script's execution.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/scripts/powershell-script-security-groups-edu.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-Transcript -Path \"C:\\results\\log.txt\"\nif ($facultyid -ne $null) {\n    $TeacherGroup = Get-MsolGroupMember -GroupObjectId $facultyid\n    Write-Host -ForegroundColor Green \"Teacher Group Count:\" $TeacherGroup.Count\n    Write-Host -ForegroundColor Green \"Teacher Group Id:\" $facultyid\n}\nelse {\n    $TeacherGroup = Get-MsolGroupMember -GroupObjectId $teachergroupid\n    Write-Host -ForegroundColor Green \"Teacher Group Count:\" $TeacherGroup.Count\n    Write-Host -ForegroundColor Green \"Teacher Group Id:\" $teachergroupid\n}\n\nif ($studentid -ne $null) {\n    $StudentGroup = Get-MsolGroupMember -GroupObjectId $studentid\n    Write-Host -ForegroundColor Green \"Student Group Count:\" $StudentGroup.Count\n    Write-Host -ForegroundColor Green \"Student Group Id:\" $studentid\n}\nelse {\n    $StudentGroup = Get-MsolGroupMember -GroupObjectId $studentgroupid\n    Write-Host -ForegroundColor Green \"Student Group Count:\" $StudentGroup.Count\n    Write-Host -ForegroundColor Green \"Student Group Id:\" $studentgroupid\n}\nStop-Transcript\n```\n\n----------------------------------------\n\nTITLE: Creating a Skype for Business Queue - PowerShell\nDESCRIPTION: This PowerShell code snippet creates a new queue in Skype for Business using the `New-CsRgsQueue` cmdlet. It requires the service ID, name, and other optional parameters like description, timeout settings, overflow settings, and agent group assignments. Placeholders like `<saved service ID from previous step>`, `<name of queue>`, `<description for queue>`, `<# seconds before call times out>`, `<saved timeout action>`, `<# calls queue can hold>`, `<call to be acted on when overflow threshold met>`, and `<saved overflow action>` need to be replaced with actual values. The `AgentGroupIDList` parameter should be an array of agent group identities.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-queue.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$q = New-CsRgsQueue -Parent <saved service ID from previous step> -Name \"<name of queue>\" [-Description \"<description for queue>\"] [-TimeoutThreshold <# seconds before call times out>] [-TimeoutAction <saved timeout action>] [-OverflowThreshold <# calls queue can hold>] [-OverflowCandidate <call to be acted on when overflow threshold met>] [-OverflowAction <saved overflow action>] [-AgentGroupIDList(<agent group identity>)];\n```\n\n----------------------------------------\n\nTITLE: Creating After Hours Prompts and Menu Options\nDESCRIPTION: These PowerShell commands create prompts and menu options for after-hours call handling. Callers can leave voicemails for the sales and support teams, connect to the dial-by-name directory, or hear address/contact information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n$afterHoursGreetingPrompt = New-CsAutoAttendantPrompt -TextToSpeechPrompt \"Thank you for calling Contoso. Our offices are now closed. Regular business hours are Monday through Friday from 8:30 am to 5:00 pm and Saturday from 10:00 am to 4:00 pm eastern time.\"\n\n$afterHoursMenuPrompt = New-CsAutoAttendantPrompt -TextToSpeechPrompt \"To leave a voicemail for our sales team press 1. To leave a message for our support team press 2. If you know the name of the person you would like to reach, press 3. For our address, email and fax information press 4.\"\n\n$afterHoursMenuOption1Target = (Get-Team -displayname \"Sales\").GroupID\n\n$afterHoursMenuOption1Entity = New-CsAutoAttendantCallableEntity -Identity $afterHoursMenuOption1Target -Type SharedVoiceMail -EnableTranscription -EnableSharedVoicemailSystemPromptSuppression\n\n$afterHoursMenuOption1 = New-CsAutoAttendantMenuOption -Action TransferCallToTarget -DtmfResponse Tone1 -CallTarget $afterHoursMenuOption1Entity\n\n$afterHoursMenuOption2Target = (Get-Team -displayname \"Support\").GroupID\n\n$afterHoursMenuOption2Entity = New-CsAutoAttendantCallableEntity -Identity $afterHoursMenuOption2Target -Type SharedVoicemail -EnableTranscription -EnableSharedVoicemailSystemPromptSuppression\n\n$afterHoursMenuOption2 = New-CsAutoAttendantMenuOption -Action TransferCallToTarget -DtmfResponse Tone2 -CallTarget $afterHoursMenuOption2Entity\n\n$dialbynameAAOption3Target = (Get-CsOnlineUser -Identity \"ContosoDialByNameAA-RA@contoso.com\").Identity\n\n$dialbynameAAMenuOption3Entity = New-CsAutoAttendantCallableEntity -Identity $dialbynameAAOption3Target -Type applicationendpoint\n\n$dialbynameAAMenuOption3 = New-CsAutoAttendantMenuOption -Action TransferCallToTarget -DtmfResponse Tone3 -CallTarget $dialbynameAAMenuOption3Entity\n\n$afterHoursMenuOption4 = New-CsAutoAttendantMenuOption -Action Announcement -DtmfResponse Tone4 -Prompt $addressPrompt\n```\n\n----------------------------------------\n\nTITLE: Detecting Failed Logons from Different IPs (Kusto)\nDESCRIPTION: This Kusto query identifies successful logons from one IP address followed by failed logons from a different IP address, specifically scoped to Teams sign-ins. It uses a timeframe of 1 day and a logon difference threshold of 10 minutes to detect potential account compromise scenarios. The query outputs the UserPrincipalName, SuccessIPAddress, AppDisplayName, FailedIPAddress, ResultType, and ResultDescription for each detected incident.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-sentinel-guide.md#_snippet_5\n\nLANGUAGE: Kusto\nCODE:\n```\nlet timeFrame = 1d;\nlet logonDiff = 10m;\nSigninLogs \n  | where TimeGenerated >= ago(timeFrame) \n  | where ResultType == \"0\" \n  | where AppDisplayName has \"Teams\"\n  | project SuccessLogonTime = TimeGenerated, UserPrincipalName, SuccessIPAddress = IPAddress, AppDisplayName, SuccessIPBlock = strcat(split(IPAddress, \".\")[0], \".\", split(IPAddress, \".\")[1])\n  | join kind= inner (\n      SigninLogs \n      | where TimeGenerated >= ago(timeFrame) \n      | where ResultType !in (\"0\", \"50140\") \n      | where ResultDescription !~ \"Other\"  \n      | where AppDisplayName startswith \"Microsoft Teams\"\n      | project FailedLogonTime = TimeGenerated, UserPrincipalName, FailedIPAddress = IPAddress, AppDisplayName, ResultType, ResultDescription\n  ) on UserPrincipalName, AppDisplayName \n  | where SuccessLogonTime < FailedLogonTime and FailedLogonTime - SuccessLogonTime <= logonDiff and FailedIPAddress !startswith SuccessIPBlock\n  | summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime) by UserPrincipalName, SuccessIPAddress, AppDisplayName, FailedIPAddress, ResultType, ResultDescription \n  | extend timestamp = SuccessLogonTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = SuccessIPAddress\n```\n\n----------------------------------------\n\nTITLE: Querying Video Feedback Data using SQL\nDESCRIPTION: This SQL query retrieves video feedback data from the Skype for Business monitoring database.  It joins several tables, including [Session], [MediaLine], [VideoStream], [CallQualityFeedback], [CallQualityFeedbackToken], [CallQualityFeedbackTokenDef], and [User], to extract information about video call quality feedback. The query filters for video-related feedback using the TokenId.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/rate-my-call.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n        s.ConferenceDateTime\n        ,Caller.URI as Caller\n        ,CallerCqf.FeedbackText \n        ,CallerCqf.Rating\n        ,CallerCqfTokenDef.TokenDescription \n        ,CallerCqfToken.TokenValue\n    FROM [Session] s WITH (NOLOCK)\n        INNER JOIN [MediaLine] AS m WITH (NOLOCK) ON \n            m.ConferenceDateTime = s.ConferenceDateTime\n            AND m.SessionSeq = s.SessionSeq                        \n        INNER JOIN [VideoStream] AS v WITH (NOLOCK) ON -- only look at Video related feedback\n            v.MediaLineLabel = m.MediaLineLabel    \n            and v.ConferenceDateTime = m.ConferenceDateTime \n            and v.SessionSeq = m.SessionSeq\n            and v.SenderIsCallerPAI = 1                \n        INNER JOIN [CallQualityFeedback] AS CallerCqf WITH (NOLOCK) ON\n            CallerCqf.ConferenceDateTime  = s.ConferenceDateTime \n            and\n            CallerCqf.SessionSeq = s.SessionSeq \n        INNER JOIN [CallQualityFeedbackToken] AS CallerCqfToken WITH (NOLOCK) ON\n            CallerCqfToken.ConferenceDateTime  = s.ConferenceDateTime \n            and\n            CallerCqfToken.SessionSeq = s.SessionSeq\n            and\n            CallerCqfToken.FromURI = CallerCqf.FromURI\n        INNER JOIN [CallQualityFeedbackTokenDef] AS CallerCqfTokenDef WITH (NOLOCK) ON\n            CallerCqfTokenDef.TokenId = CallerCqfToken.TokenId\n            and\n           ((CallerCqfToken.TokenId > 20 and CallerCqfToken.TokenId < 100) or (CallerCqfToken.TokenId > 200 and CallerCqfToken.TokenId < 300)) -- only look at Video related feedback\n        INNER JOIN [User] AS Caller WITH (NOLOCK) ON\n            Caller.UserKey = CallerCqf.FromURI\n```\n\n----------------------------------------\n\nTITLE: Create New Client Policy for Skype for Business - PowerShell\nDESCRIPTION: This PowerShell command creates a new client policy named 'SalesClientUI' that enables the Skype for Business client experience. The `-Identity` parameter specifies the name of the new policy, and `$true` enables the Skype for Business UI.  This policy can then be assigned to specific users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClientPolicy -Identity SalesClientUI -EnableSkypeUI $true\n```\n\n----------------------------------------\n\nTITLE: Updating a Mobility Policy with Set-CsMobilityPolicy in PowerShell\nDESCRIPTION: This snippet updates an existing mobility policy in Skype for Business using the `Set-CsMobilityPolicy` cmdlet. It requires the `Identity` parameter to identify the policy and then additional parameters such as `EnableOutsideVoice` to modify the policy's properties. It modifies the attributes of the identified mobility policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_37\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMobilityPolicy -Identity \"site:Redmond\" -EnableOutsideVoice $False\n```\n\n----------------------------------------\n\nTITLE: Disable Voice Enrollment Globally - PowerShell\nDESCRIPTION: This PowerShell command disables voice enrollment for all users in the organization by setting the `EnrollVoice` parameter to `Disabled` in the global `CsTeamsAIPolicy`. This prevents users from creating voice profiles.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/voice-and-face-recognition.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsAIPolicy -Identity Global -EnrollVoice Disabled\n```\n\n----------------------------------------\n\nTITLE: Creating a User Group for Processing\nDESCRIPTION: This PowerShell script creates a CSV file containing a filtered group of Skype for Business users based on their UserPrincipalName. Specifically, it selects users whose UserPrincipalName starts with \"abc\". This is used to process users in smaller groups. The selected properties are the same as in the previous script, and the output is saved to \"c:\\data\\SfbUsers.csv\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser | where userprincipalname -like \"abc*\" | Select-Object SipAddress, UserPrincipalName, SamAccountName, RegistrarPool, HostingProvider, EnabledForFederation, EnabledForInternetAccess, LineUri, EnterpriseVoiceEnabled, HostedVoiceMail | Sort SipAddress | Export-Csv -Path \"c:\\data\\SfbUsers.csv\"\n```\n\n----------------------------------------\n\nTITLE: Updating Device Settings on Teams Panels\nDESCRIPTION: This section describes how to access and modify device settings such as about, accessibility, reboot, and privacy policy directly from the Teams panels. It outlines the steps involved in navigating to the settings screen and updating specific settings. The available device settings may differ based on the Original Equipment Manufacturer (OEM) of your device.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/use-teams-panels.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Set Global Client Policy to Skype for Business - PowerShell\nDESCRIPTION: This PowerShell command sets the global client policy to enable the Skype for Business client experience for all users.  It affects all users except those with a more specific site or user policy applied. The `-Identity Global` parameter specifies the global policy, and `$true` enables the Skype for Business UI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPolicy -Identity Global -EnableSkypeUI $true\n```\n\n----------------------------------------\n\nTITLE: Deleting Client Version Configurations - PowerShell\nDESCRIPTION: This cmdlet removes a specified client version configuration. The Identity parameter indicates which configuration to remove. This example removes the configuration for the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsClientVersionConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Example: Migrate Response Group Configuration - PowerShell\nDESCRIPTION: This is an example of using the Move-CsRgsConfiguration cmdlet to migrate the Response Group configuration from skype-old.contoso.net to skype-new.contoso.net.  This command assumes you have the appropriate permissions and that both source and destination pools are correctly configured.  Replace the example FQDNs with your actual pool FQDNs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-response-groups.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsRgsConfiguration -Source skype-old.contoso.net -Destination skype-new.contoso.net\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Text-to-Speech Prompt in PowerShell\nDESCRIPTION: This snippet provides a specific example of creating a text-to-speech prompt using the `New-CsRgsPrompt` cmdlet in PowerShell. The prompt is set to \"Welcome to Contoso. Please wait for an available agent.\", which will be spoken to the caller when the prompt is played. The prompt object is stored in the `$promptWM` variable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$promptWM = New-CsRgsPrompt -TextToSpeechPrompt \"Welcome to Contoso. Please wait for an available agent.\"\n```\n\n----------------------------------------\n\nTITLE: Constructing a VAAC Query\nDESCRIPTION: This JSON snippet demonstrates the structure of a valid query for the Voice App Analytics Connector (VAAC). It includes filters for date, dimensions for auto attendant identity, measurements for PSTN total minutes and total call count, and a parameter for UserAgent. The LimitResultRowsCount specifies the maximum number of rows to be returned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-cqd-historical-reports.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Filters\":[\n      {\n         \"DataModelName\":\"Date\",\n         \"Value\":\"2022-04-01\",\n         \"Operand\":4\n      },\n      {\n         \"DataModelName\":\"Date\",\n         \"Value\":\"2022-04-30\",\n         \"Operand\":6\n      }\n   ],\n   \"Dimensions\":[\n      {\n         \"DataModelName\":\"AutoAttendantIdentity\"\n      },\n      {\n         \"DataModelName\":\"AutoAttendantDirectorySearchMethod\"\n      }\n   ],\n   \"Measurements\":[\n      {\n         \"DataModelName\":\"PSTNTotalMinutes\"\n      },\n      {\n         \"DataModelName\":\"TotalCallCount\"\n      }\n   ],\n   \"Parameters\":{\n      \"UserAgent\":\"Power BI Desktop\"\n   },\n   \"LimitResultRowsCount\":100000\n}\n```\n\n----------------------------------------\n\nTITLE: Remove New Teams Package (Individual User) - PowerShell\nDESCRIPTION: This PowerShell cmdlet removes the new Teams app package for the current user without requiring administrator privileges. It uses Get-AppxPackage to find packages matching '*MSTeams*' and then pipes the results to Remove-AppxPackage to remove it for the current user profile.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-uninstall.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AppxPackage *MSTeams*|Remove-AppxPackage\n```\n\n----------------------------------------\n\nTITLE: Get PIN Policy Information using PowerShell\nDESCRIPTION: This PowerShell command retrieves information about PIN policies configured for Skype for Business Server. It's used to verify the installation of the core components by checking if PIN policy information is returned. If successful, it indicates that the core components have been successfully installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Associating Emergency Number with Location Policy - PowerShell\nDESCRIPTION: This code snippet demonstrates how to associate a previously created emergency number (stored in `$a`) with a specific location policy using the `Set-CsLocationPolicy` cmdlet. The `EmergencyNumbers` parameter with the `@{add=$a}` syntax is used to add the emergency number to the location policy. The `-Identity` parameter specifies the ID of the location policy to be modified.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-multiple-emergency-numbers.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n> Set-CsLocationPolicy -Identity <id> -EmergencyNumbers @{add=$a}\n```\n\n----------------------------------------\n\nTITLE: Managing Shared With Team using PowerShell\nDESCRIPTION: These cmdlets are used to retrieve and remove teams that are shared with a specific user or entity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_99\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Remove]-SharedWithTeam\n```\n\n----------------------------------------\n\nTITLE: Deleting Dial-in Conferencing Access Numbers by Language - PowerShell\nDESCRIPTION: This PowerShell command deletes all dial-in conferencing access numbers where the primary language is Italian (it-IT). It first retrieves all dial-in conferencing access numbers using Get-CsDialInConferencingAccessNumber, filters them based on the PrimaryLanguage property using Where-Object, and then pipes the filtered results to Remove-CsDialInConferencingAccessNumber for deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/access-numbers.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingAccessNumber | Where-Object {$_.PrimaryLanguage -eq \"it-IT\"} | Remove-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Updating Teams Meeting Policy - PowerShell\nDESCRIPTION: This snippet Adds new parameter SmsNotifications to TeamsMeetingPolicy cmdlets using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_72\n\nLANGUAGE: PowerShell\nCODE:\n```\nTeamsMeetingPolicy -SmsNotifications\n```\n\n----------------------------------------\n\nTITLE: Start Skype for Business Pool - PowerShell\nDESCRIPTION: This PowerShell cmdlet starts all Skype for Business services in an Enterprise Edition Front End pool with at least three servers, leveraging Windows Fabric. It is executed within the Skype for Business Server Management Shell. Requires the Skype for Business Server Management Shell to be opened and the appropriate permissions to start services.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/install/install-skype-for-business-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsPool\n```\n\n----------------------------------------\n\nTITLE: Move Selected User to TeamsOnly On-Premises - PowerShell\nDESCRIPTION: This command is to move a selected user from On-Premises to TeamsOnly mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-implement.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser -Identity $user -Target sipfed.online.lync.com -MoveToTeams -credential $cred\n```\n\n----------------------------------------\n\nTITLE: Updating MicrosoftTeams Module - PowerShell\nDESCRIPTION: This command updates the Microsoft Teams PowerShell module to the latest version available in the PowerShell Gallery. It's crucial to close and reopen the PowerShell session after updating to avoid import conflicts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-install.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Check Current Dial-Out Policy at Tenant Level - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves the currently applied dial-out policy at the tenant (global) level. This allows administrators to verify which policy is in effect for users without individually assigned policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/outbound-calling-restriction-policies.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CSOnlineDialOutPolicy -Identity Global\n```\n\n----------------------------------------\n\nTITLE: Approving Device Update Rules - PowerShell\nDESCRIPTION: This cmdlet approves a device update rule, making it available for deployment.  The Identity parameter specifies the rule to be approved.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\n Approve-CsDeviceUpdateRule -Identity service:WebServer:atl-cs-001.litwareinc.com/d5ce3c10-2588-420a-82ac-dc2d9b1222ff9\n```\n\n----------------------------------------\n\nTITLE: Move a single user using PowerShell in Skype for Business\nDESCRIPTION: This PowerShell command moves a single user to a different pool. It uses the Move-CsUser cmdlet with the -Identity parameter to specify the user and the -Target parameter to specify the destination pool.  Requires the Skype for Business Server Management Shell to be loaded.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/user-accounts/customize-properties.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser -Identity \"Pilar Ackerman\" -Target \"pool01.contoso.net\"\n```\n\n----------------------------------------\n\nTITLE: Updating Web Service Configurations in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet modifies an existing web service configuration in Skype for Business. The Identity parameter specifies the web service configuration to modify, and other parameters allow updating various settings like EnableGroupExpansion. The example enables group expansion for the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsWebServiceConfiguration -Identity site:Redmond -EnableGroupExpansion $True\n```\n\n----------------------------------------\n\nTITLE: Creating a New Client Version Policy Rule - PowerShell\nDESCRIPTION: This cmdlet creates a new client version policy rule. It requires a Parent (policy where the rule applies), a RuleId (generated GUID), MajorVersion, and UserAgent.  A GUID is generated and then passed to the New-CsClientVersionPolicyRule cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n $x = \\[guid\\]::NewGuid()\n\n    New-CsClientVersionPolicyRule -Parent \"site:Redmond\" -RuleId $x -MajorVersion 4 -UserAgent InHouse\n```\n\n----------------------------------------\n\nTITLE: Enable Live Captions (User Override) - PowerShell\nDESCRIPTION: This PowerShell command enables live captions, allowing users to override the policy setting and enable captions themselves. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-transcription-captions.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -LiveCaptionsEnabledType DisabledUserOverride \n```\n\n----------------------------------------\n\nTITLE: Identifying Student and Teacher SKUs in PowerShell\nDESCRIPTION: This snippet retrieves Azure AD subscribed SKUs to identify student and teacher licenses.  It uses `Get-AzureADSubscribedSku` to fetch all SKUs and then filters them based on the `skupartnumber` property. The SkuIDs for student and teacher licenses are stored in `$StudentSkuIDs` and `$TeacherSkuIDs` arrays, respectively.  The AzureAD module is a dependency for this snippet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/scripts/powershell-script-security-groups-edu.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n#Build the Student Sku Array\n$StudentSkus = @()\n$AllSkus = Get-AzureADSubscribedSku\n$StudentSkuIDs = ($AllSkus | ? {$_.skupartnumber -like \"*student*\"}).skuid\nWrite-Host -ForegroundColor Green \"The Student Skus identified are listed below:\"\nForeach ($Element in $StudentSkuIDs) {\n$SkuPart = (Get-AzureADSubscribedSku | ? {$_.SkuID -eq $Element}).SkuPartNumber\nWrite-Host -ForegroundColor Green \"Student SkuID ${Element} for License $SkuPart\"\n}\nWrite-Host \"`n\"\n\n#Build the Teacher Sku Array\n$TeacherSkus = @()\n$AllSkus = Get-AzureADSubscribedSku\n$TeacherSkuIDs = ($AllSkus | ? {$_.skupartnumber -like \"*faculty*\"}).skuid\nWrite-Host -ForegroundColor Green \"The Teacher Skus identified are listed below:\"\nForeach ($Element in $TeacherSkuIDs) {\n$SkuPart = (Get-AzureADSubscribedSku | ? {$_.SkuID -eq $Element}).SkuPartNumber\nWrite-Host -ForegroundColor Green \"Teacher SkuID ${Element} for License $SkuPart\"\n}\nWrite-Host \"`n\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Meeting Migration Status PowerShell\nDESCRIPTION: This PowerShell command retrieves and displays a summary of the Meeting Migration Service (MMS) status.  This is used to check if all meetings have been rescheduled after a change has been made.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMeetingMigrationStatus -SummaryOnly\n```\n\n----------------------------------------\n\nTITLE: Remove Announcement Example - PowerShell\nDESCRIPTION: This is an example of removing announcement with a specified identity using Remove-CsAnnouncement cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-an-announcement.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsAnnouncement -Identity \"ApplicationServer:Redmond.contoso.com/1951f734-c80f-4fb2-965d-51807c792b90\"\n```\n\n----------------------------------------\n\nTITLE: Searching CLS Logs within a Specific Front End Pool - PowerShell\nDESCRIPTION: This PowerShell command searches the Centralized Logging Service logs for entries related to the 'SIPStack', 'S4', and 'UserServices' components within a specific Front End pool ('pool01.contoso.net').  The results are saved to the specified output file path. Note: pool filtering is not implemented in the provided snippet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Components \"SIPStack\",\"S4\",\"UserServices\" -OutputFilePath \"C:\\Logfiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Disable Archiving Policy - PowerShell\nDESCRIPTION: This PowerShell snippet disables archiving altogether for a specified archiving policy.  The `Set-CsArchivingPolicy` cmdlet modifies the policy with the given `Identity`, setting both the `ArchiveInternal` and `ArchiveExternal` parameters to `$False`. The policy identity in this example is set to \"global\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/change-an-existing-policy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingPolicy -Identity \"global\" -ArchiveInternal $False -ArchiveExternal $False\n```\n\n----------------------------------------\n\nTITLE: Getting all SIP Trunks in Skype for Business (PowerShell)\nDESCRIPTION: This command uses the Get-CsTrunk cmdlet to retrieve information about all SIP trunks configured in the Skype for Business Server environment. No parameters are used, returning all trunk configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/view-information-about-individual-sip-trunks.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrunk\n```\n\n----------------------------------------\n\nTITLE: Running Test-CsRegistration with Rich Logging in PowerShell\nDESCRIPTION: This PowerShell command runs the Test-CsRegistration cmdlet to check user registration with Skype for Business Server and enables rich logging for troubleshooting. The OutLoggerVariable parameter specifies a variable to store detailed information about the transaction, including timestamps, actions, messages, and results. This variable can then be used to generate HTML or XML logs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsRegistration -TargetFqdn atl-cs-001.litwareinc.com -OutLoggerVariable RegistrationTest\n```\n\n----------------------------------------\n\nTITLE: Remove Assigned TenantDialPlan from Users\nDESCRIPTION: This script removes any assigned TenantDialPlan from all users who have a HostingProvider of sipfed.online.lync.com.  It sets the policy to null effectively unassigning the dial plan.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter {HostingProvider -eq \"sipfed.online.lync.com\"} | Grant-CsTenantDialPlan -policyname $null\n```\n\n----------------------------------------\n\nTITLE: Stop new connections to Front End Server - PowerShell\nDESCRIPTION: This PowerShell cmdlet gracefully stops new connections to a Front End Server. It is used before removing a server from the pool to prevent service interruption.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-front-end-servers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nStop-CsWindowsService -Graceful\n```\n\n----------------------------------------\n\nTITLE: Get Teams SIP Gateway Service Principal - MS Graph Module\nDESCRIPTION: This snippet retrieves the Teams SIP Gateway service principal using the MS Graph module. It is required for bulk device sign-in scenarios. It filters based on the AppId. If no output is returned the service principal does not exist and should be created. It requires the MS Graph module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AzureADServicePrincipal -Filter \"AppId eq '61c8fd69-c13e-4ee6-aaa6-24ff71c09bca\n```\n\n----------------------------------------\n\nTITLE: Configuring Room Equipment Display Names with PowerShell\nDESCRIPTION: This snippet demonstrates how to use the `Set-Place` cmdlet in PowerShell to configure the display names for room equipment details such as audio devices, display devices, video devices, tags, and wheelchair accessibility. This information can then be displayed on a Teams panel.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/use-teams-panels.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Place /powershell/module/exchange/set-place\n```\n\n----------------------------------------\n\nTITLE: Creating a Watcher Node with Auto Discovery - PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a watcher node configuration using the New-CsWatcherNodeConfiguration cmdlet with auto discovery enabled. It specifies the UseAutoDiscovery parameter as true, along with TargetFqdn, PortNumber, and TestUsers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsWatcherNodeConfiguration -UseAutoDiscovery $true -TargetFqdn \"atl-cs-001.litwareinc.com\" -PortNumber 5061 -TestUsers @{Add= \"sip:watcher1@litwareinc.com\",\"sip:watcher2@litwareinc.com\", \"sip:watcher3@litwareinc.com\"}\n```\n\n----------------------------------------\n\nTITLE: SDP Offer Format from SBC in Bypass Mode\nDESCRIPTION: This code shows the required format for the Session Description Protocol (SDP) offer originating from an SBC when operating in media bypass mode. The offer must include SDES (Session Description Protocol Security Descriptions) and can optionally include DTLS (Datagram Transport Layer Security).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-media.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nm=audio 54056 UDP/TLS/RTP/SAVP 0 8 76 77 18 9 101 13\na=rtcp:54056\na=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:krXco0QRglwErMqtbMs2zSw29tBdmdgXpEYZhQmp|2^31\na=fingerprint:sha-256 AE:24:07:15:5C:B7:45:1A:E4:45:60:C1:1E:68:0E:CC:8D:A6:78:3B:76:65:BB:B0:77:88:07:F8:98:18:62:34\na=setup:actpass\na=rtcp-mux\n```\n\n----------------------------------------\n\nTITLE: Running Bootstrapper for Backup Pairing - PowerShell\nDESCRIPTION: This PowerShell command runs the Bootstrapper.exe to configure services required for backup pairing on Front End Servers. It should be executed on every Front End Server in both paired pools after they are defined in Topology Builder.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/front-end-pools-for-disaster-recovery.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<system drive>\\Program Files\\Skype for Business Server 2019\\Deployment\\Bootstrapper.exe \n```\n\n----------------------------------------\n\nTITLE: Configure OAuth Server and Partner Application - PowerShell\nDESCRIPTION: This script configures the on-premises Skype for Business Server to trust the authorization server. It checks if the OAuth server and Partner Application exist, and if not, creates them. If they exist but have incorrect settings, they are removed and recreated. It also updates the OAuth configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$TenantID = (Get-CsTenant -Filter {DisplayName -eq \"Fabrikam.com\"}).TenantId\n\n$sts = Get-CsOAuthServer microsoft.sts -ErrorAction SilentlyContinue\n\n   if ($sts -eq $null)\n      {\n         New-CsOAuthServer microsoft.sts -MetadataUrl \"https://accounts.accesscontrol.windows.net/$TenantId/metadata/json/1\"\n      }\n   else\n      {\n         if ($sts.MetadataUrl -ne  \"https://accounts.accesscontrol.windows.net/$TenantId/metadata/json/1\")\n            {\n               Remove-CsOAuthServer microsoft.sts\n               New-CsOAuthServer microsoft.sts -MetadataUrl \"https://accounts.accesscontrol.windows.net/$TenantId/metadata/json/1\"\n            }\n        }\n\n$exch = Get-CsPartnerApplication microsoft.exchange -ErrorAction SilentlyContinue\n\nif ($exch -eq $null)\n   {\n      New-CsPartnerApplication -Identity microsoft.exchange -ApplicationIdentifier 00000002-0000-0ff1-ce00-000000000000 -ApplicationTrustLevel Full -UseOAuthServer\n    }\nelse\n    {\n       if ($exch.ApplicationIdentifier -ne \"00000002-0000-0ff1-ce00-000000000000\")\n          {\n             Remove-CsPartnerApplication microsoft.exchange\n             New-CsPartnerApplication -Identity microsoft.exchange -ApplicationIdentifier 00000002-0000-0ff1-ce00-000000000000 -ApplicationTrustLevel Full -UseOAuthServer \n          }\n       else\n          {\n             Set-CsPartnerApplication -Identity microsoft.exchange -ApplicationTrustLevel Full -UseOAuthServer\n          }\n   }\n\nSet-CsOAuthConfiguration -ServiceName 00000004-0000-0ff1-ce00-000000000000\n```\n\n----------------------------------------\n\nTITLE: Create Call Queue with User Assignment - PowerShell\nDESCRIPTION: This example demonstrates how to create a new call queue and assign individual users to it. It configures the queue to use default music on hold and disables conference mode. Note that the example might not include the minimum required parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -User @(\"User 01 GUID\", \"User 02 GUID\") -UseDefaultMusicOnHold $true -ConferenceMode $false\n```\n\n----------------------------------------\n\nTITLE: Enrolling Teams Rooms in Public Preview via XML setting\nDESCRIPTION: IT admins can enroll a Teams Rooms device to receive public preview features through XML settings. Once enrolled, the device starts to receive preview features. This allows admins to test upcoming features before their general release. Requires configuration through XML.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-release-note.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Set-Place Cmdlet for Device Resource Display\nDESCRIPTION: References the Set-Place PowerShell cmdlet, used in conjunction with managing resource mailboxes in Exchange Online, to ensure Teams devices properly display available resources.  This allows administrators to configure the equipment list available on a panel.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/devices-release-notes.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-Place](/powershell/module/exchange/set-place)\n```\n\n----------------------------------------\n\nTITLE: Create Skype for Business Web Service Configuration\nDESCRIPTION: This PowerShell command creates a new web service configuration for Skype for Business Server to enable passive authentication. The Identity parameter specifies the service identity, UseWsFedPassiveAuth enables passive authentication, and WsFedPassiveMetadataUri specifies the AD FS metadata URI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsWebServiceConfiguration -Identity \"Service:WebServer:SfBPool01.contoso.com\" -UseWsFedPassiveAuth $true -WsFedPassiveMetadataUri https://dc.contoso.com/federationmetadata/2007-06/federationmetadata.xml\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - 4-Digit Extension (.NET Regex)\nDESCRIPTION: This normalization rule translates 4-digit extensions to E.164 format.  It uses a .NET Framework regular expression to match 4 digits and prepends \"+1425555\" to the matched digits. The input is a 4 digit number, and the output is the E.164 formatted number. The first captured group ($1) is appended to the translation string.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_0\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^(\\d{4})$\n```\n\n----------------------------------------\n\nTITLE: Move Conference Directory - PowerShell\nDESCRIPTION: This command moves a specific conference directory to a new pool. The `-Identity` parameter specifies the numeric ID of the conference directory to move, and the `-TargetPool` parameter specifies the FQDN of the destination pool. This command is crucial for migrating conference directory ownership to a new pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-conference-directories.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsConferenceDirectory -Identity <Numeric identity of conference directory> -TargetPool <FQDN of pool where ownership is to be transitioned>\n```\n\n----------------------------------------\n\nTITLE: Verify Certificate Upload - PowerShell\nDESCRIPTION: This PowerShell command retrieves the key credentials for the Skype for Business service principal and displays them in a formatted list. This allows verification that the certificate was uploaded successfully and its start and end dates match the Exchange OAuth certificate.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/oauth-with-online-and-on-premises.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgServicePrincipal -Filter \"AppId eq '00000004-0000-0ff1-ce00-000000000000'\" -Select \"keyCredentials\" | Format-List *\n```\n\n----------------------------------------\n\nTITLE: Grant custom Teams Upgrade Policy to a user\nDESCRIPTION: This PowerShell command assigns a specific instance of TeamsUpgradePolicy to a given user.  In this case it's assigning the policy created in the previous step, which enables notifications.  This would be run after creating a custom policy like the one enabling notifications.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-tools.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -Identity $user -PolicyName EnableNotification\n```\n\n----------------------------------------\n\nTITLE: Modifying a Network Site Link - Skype for Business PowerShell\nDESCRIPTION: This PowerShell command modifies an existing network site link (Reno_Portland) by changing its associated bandwidth policy profile to HighBWLimits. The Identity parameter specifies the name of the network site link to modify. The BWPolicyProfileID parameter specifies the bandwidth policy profile to assign to the network site link.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsNetworkInterSitePolicy -Identity Reno_Portland -BWPolicyProfileID HighBWLimits\n```\n\n----------------------------------------\n\nTITLE: Controlling Teams Auto-start Behavior via Registry - Windows\nDESCRIPTION: This registry snippet controls the Teams auto-start behavior, allowing it to be enabled or disabled programmatically.  The `State` value determines whether Teams will automatically start. Requires understanding of the different `State` values and their meanings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_10\n\nLANGUAGE: Registry editor\nCODE:\n```\n[HKEY_CURRENT_USER\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\AppModel\\SystemAppData\\MSTeams_8wekyb3d8bbwe\\TeamsTfwStartupTask]\n\"State\"=dword:00000002\n\"UserEnabledStartupOnce\"=dword:00000001\n```\n\n----------------------------------------\n\nTITLE: Test Effective Tenant Dial Plan Settings\nDESCRIPTION: This command tests the effective dial plan settings for a specific user and dialed number using the Test-CsEffectiveTenantDialPlan cmdlet. The DialedNumber parameter specifies the phone number to test, and the Identity parameter specifies the user's email address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n  Test-CsEffectiveTenantDialPlan -DialedNumber 14255550199 -Identity amos.marble@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Enable Enterprise Voice - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables Enterprise Voice for a user who is already enabled in Skype for Business on premises but not enabled for Enterprise Voice, even if they already have a LineURI assigned. It sets the `EnterpriseVoiceEnabled` property to `$true`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/skype-for-business-hybrid-solutions/plan-your-phone-system-cloud-pbx-solution/enable-the-users-for-enterprise-voice-on-premises.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUser $username -EnterpriseVoiceEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with Access Tokens (PowerShell)\nDESCRIPTION: This PowerShell script retrieves access tokens for Microsoft Graph and the Skype and Teams Tenant Admin API using client credentials, then uses these tokens to connect to Microsoft Teams. It requires the `Invoke-RestMethod` and `Connect-MicrosoftTeams` cmdlets. `$ClientSecret`, `$ApplicationID`, and `$TenantID` must be replaced with your actual credentials and tenant ID. Two access tokens are required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-application-authentication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$ClientSecret   = \"…\"\n$ApplicationID = \"00000000-0000-0000-0000-000000000000\"\n$TenantID = \"YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY\"\n\n$graphtokenBody = @{   \n   Grant_Type    = \"client_credentials\"   \n   Scope         = \"https://graph.microsoft.com/.default\"   \n   Client_Id     = $ApplicationID   \n   Client_Secret = $ClientSecret   \n}  \n\n$graphToken = Invoke-RestMethod -Uri \"https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token\" -Method POST -Body $graphtokenBody | Select-Object -ExpandProperty Access_Token \n\n$teamstokenBody = @{   \n   Grant_Type    = \"client_credentials\"   \n   Scope         = \"48ac35b8-9aa8-4d74-927d-1f4a14a0b239/.default\"   \n   Client_Id     = $ApplicationID   \n   Client_Secret = $ClientSecret \n} \n\n$teamsToken = Invoke-RestMethod -Uri \"https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token\" -Method POST -Body $teamstokenBody | Select-Object -ExpandProperty Access_Token \n\nConnect-MicrosoftTeams -AccessTokens @(\"$graphToken\", \"$teamsToken\")\n```\n\n----------------------------------------\n\nTITLE: Assign Licenses to Users with PowerShell\nDESCRIPTION: This PowerShell script assigns licenses to users in bulk. It imports the Microsoft Graph PowerShell Module, authenticates to Microsoft Graph, prompts the user to select a text file containing a list of User Principal Names (UPNs), and then iterates through the list to assign licenses to each user. The specific license to assign is dynamically identified by SKU part number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-add-on-licensing/assign-teams-add-on-licenses.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n    # Create a text file with a single column that lists the user principal names (UPNs) of users to assign licenses to. The MSOL service uses the UPN to license user accounts.\n    # Example of text file:\n    # user1@domain.com\n    # user2@domain.com\n    \n    # Import Module\n    Import-Module Microsoft.Graph.Users.Actions\n    \n    # Authenticate to Microsoft Graph\n    Connect-MgGraph\n    \n    # File prompt to select the userlist txt file\n    [System.Reflection.Assembly]::LoadWithPartialName(\"System.windows.forms\") | Out-Null\n        $OFD = New-Object System.Windows.Forms.OpenFileDialog\n        $OFD.filter = \"text files (*.*)| *.txt\"\n        $OFD.ShowDialog() | Out-Null\n        $OFD.filename\n    \n    If ($OFD.filename -eq '')\n    {\n    Write-Host \"You did not choose a file. Try again\" -ForegroundColor White -BackgroundColor Red\n    }\n    \n    # Create a variable of all users\n    $users = Get-Content $OFD.filename\n    \n    # License each user in the $users variable\n      $EmsSku = Get-MgSubscribedSku -All | Where SkuPartNumber -eq ''\n      $addLicenses = @(\n      @{\"SkuId\" = $EmsSku.SkuId}\n      )\n\n      foreach ($user in $users){\n      Write-host \"Assigning License: $user\"\n      Set-MgUserLicense -UserId $user -AddLicenses $addLicenses -ErrorAction SilentlyContinue\n      }\n```\n\n----------------------------------------\n\nTITLE: Create Trusted Security Token Issuer\nDESCRIPTION: This PowerShell snippet creates a trusted security token issuer in SharePoint for Exchange. It configures the token service to enable hybrid STS selection and disables metadata and OAuth over HTTP. This is a critical step for server-to-server authentication between SharePoint and Exchange, ensuring secure communication.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/sharepoint-to-search-for-archived-data.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-SPTrustedSecurityTokenIssuer -Name \"Exchange\" -MetadataEndPoint \"https://autodiscover.litwareinc.com/autodiscover/metadata/json/1\"\n$service = Get-SPSecurityTokenServiceConfig\n$service.HybridStsSelectionEnabled = $True\n$service.AllowMetadataOverHttp = $False\n$service.AllowOAuthOverHttp = $False\n$service.Update()\n```\n\n----------------------------------------\n\nTITLE: Assign Teams Phone License using Microsoft 365 Admin Center\nDESCRIPTION: These steps outline how to assign a Teams Phone license to a user using the Microsoft 365 admin center.  The process involves navigating to the Licenses section, selecting the Teams Phone license, and assigning it to the desired users. This is a prerequisite for enabling voice functionality.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_0\n\nLANGUAGE: Instructions\nCODE:\n```\n1. Use the Microsoft 365 admin center and go to **Billing** > **Licenses**.\n2. Select your Teams Phone license. On the product details page, select **Assign licenses** and assign the license to your users.\n3. Select **Assign** once you're finished.\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Contact Method to SMS\nDESCRIPTION: This snippet sets the preferred contact method for Parent Connection invitations to SMS. It uses the Set-CsTeamsEducationConfiguration cmdlet to modify the `ParentGuardianPreferredContactMethod`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/edu-parents-app.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEducationConfiguration -ParentGuardianPreferredContactMethod SMS\n```\n\n----------------------------------------\n\nTITLE: Copy File Store Data using Robocopy - Cmd\nDESCRIPTION: This command uses Robocopy to move the file store data from the old file server and share to the new file server and share.  It includes options for retries, wait time, skipping active meeting files, multithreading, and logging the operation.  Replace <OldFileServer>, <OldShare>, <NewFileServer>, <NewShare>, and <directory path\\logname> with the appropriate values for your environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/2019/topobld/move-file-store-data.md#_snippet_0\n\nLANGUAGE: Cmd\nCODE:\n```\nRobocopy \\\\<OldFileServer>\\\\<OldShare> \\\\<NewFileServer>\\\\<NewShare> /S /R:10 /W:10 /XF Meeting.Active /MT /LOG:<directory path\\logname>\n```\n\n----------------------------------------\n\nTITLE: CLS Logging Search with Time Range - PowerShell\nDESCRIPTION: This command searches CLS logs within a specific time range on a specified pool. It utilizes the `-StartTime` and `-EndTime` parameters to define the range, and `-OutputFilePath` to save the results.  The time and date string can be formatted as \"date time\" or \"time date\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Pools \"pool01.contoso.net\" -StartTime \"11/20/2012 08:00:00 AM\" -EndTime \"11/20/2012 09:00:00 AM\" -OutputFilePath \"C:\\Logfiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Get Conferencing Policy Information - Skype for Business PowerShell\nDESCRIPTION: This cmdlet retrieves information about the conferencing policies configured for use in the Skype for Business Server environment. It allows administrators to view existing policy settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get-CsConferencingPolicy](/powershell/module/skype/get-csconferencingpolicy?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Disabling Captcha Verification Policy - PowerShell\nDESCRIPTION: This PowerShell command modifies a Teams meeting policy to prevent users from completing a CAPTCHA verification check before joining meetings and webinars. The `-Identity` parameter identifies the policy, and `-CaptchaVerificationForMeetingJoin` is set to `NotRequired` to disable the verification requirement.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/join-verification-check.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -CaptchaVerificationForMeetingJoin NotRequired\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange Calendar Processing Rules for Third-Party Meetings - PowerShell\nDESCRIPTION: This PowerShell command configures the Exchange calendar processing rules on a Teams Room resource account to process external meeting messages and prevent the deletion of comments. This ensures that the Teams Room can correctly interpret meeting invites from third-party platforms and generate a join button.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/third-party-join.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CalendarProcessing <UserPrincipalName> -ProcessExternalMeetingMessages $True -DeleteComments $False\n```\n\n----------------------------------------\n\nTITLE: Create a Response Group Holiday - PowerShell\nDESCRIPTION: This PowerShell command creates a new Response Group holiday with a specified name, start date, and end date. The holiday object is stored in a variable for later use in a holiday set.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/optional-define-response-group-holiday-sets.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$x = New-CsRgsHoliday [-Name <holiday name>] -StartDate <starting date of holiday> -EndDate <ending date of holiday>\n```\n\n----------------------------------------\n\nTITLE: Get Network Bandwidth Policy Profile Cmdlet - PowerShell\nDESCRIPTION: This cmdlet retrieves network bandwidth policy profiles in Skype for Business Server.  These profiles define bandwidth limitations and other settings that can be applied to network sites.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsNetworkBandwidthPolicyProfile\n```\n\n----------------------------------------\n\nTITLE: Creating Call Queue with Text-to-Speech Greeting and Default Music - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new call queue with a text-to-speech greeting and uses the default music on hold. The New-CsCallQueue cmdlet is used to create the queue with the specified parameters. Note that this example doesn't contain the minimum number of parameters required to create a new call queue.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -WelcomeTextToSpeechPrompt \"Welcome to the call queue \" -UseDefaultMusicOnHold $true\n```\n\n----------------------------------------\n\nTITLE: Importing Buildings with SQL\nDESCRIPTION: This SQL snippet demonstrates how to insert a new building into the `CqdBuilding` table. The `BuildingKey`, `BuildingName`, `BuildingShortName`, `OwnershipTypeId`, and `BuildingTypeId` parameters are required. Importing buildings allows for building-specific insights, such as call quality metrics per building.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/deploy-0.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO [dbo].[CqdBuilding] \n( [BuildingKey]\n,[BuildingName]\n,[BuildingShortName]\n,[OwnershipTypeId],\n[BuildingTypeId]\n)\nVALUES\n(2, 'Ann Arbor', 'AA', 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Create a new CLS scenario using New-CsClsScenario\nDESCRIPTION: This PowerShell command creates a new scenario for the Centralized Logging Service.  It defines the scenario's identity (scope and name) and associates it with a specific provider, such as LyssProvider. Replace `<scope>` and `<unique scenario name>` with the intended values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClsScenario -Identity <scope>/<unique scenario name> -Provider <provider variable>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClsScenario -Identity \"site:Redmond/LyssServiceScenario\" -Provider $LyssProvider\n```\n\n----------------------------------------\n\nTITLE: Setting ExchangeArchivingPolicy for a User in Skype for Business Server (PowerShell)\nDESCRIPTION: This PowerShell command configures the ExchangeArchivingPolicy property for a specific user, Ken Myer, to ArchivingToExchange. This ensures that instant messaging and Web conferencing transcripts are archived to Exchange regardless of In-Place Hold settings. It requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-exchange-archiving.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUser -Identity \"Ken Myer\" -ExchangeArchivingPolicy ArchivingToExchange\n```\n\n----------------------------------------\n\nTITLE: Granting Per-User Policy - PowerShell\nDESCRIPTION: This PowerShell command assigns the per-user user services policy `AllowUnifiedContactStore` to the user `Ken Myer`. This enables the unified contact store for that specific user, overriding the global policy if it disables the unified contact store.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-the-unified-contact-store.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsUserServicesPolicy -Identity \"Ken Myer\" -PolicyName \"AllowUnifiedContactStore\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Group Agent Live Host Address\nDESCRIPTION: Administrators can define the default host address for the Response Group Agent Live tool by editing the `defaultHostAddress` property within the `RGAgentLive.exe.config` file. This setting is crucial for connecting the tool to the correct Response Group service. The host address typically corresponds to the web pool FQDN of the agent's home pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Example of configuring the defaultHostAddress in RGAgentLive.exe.config -->\n<!-- <appSettings>\n  <add key=\"defaultHostAddress\" value=\"your_web_pool_fqdn\" />\n</appSettings> -->\n```\n\n----------------------------------------\n\nTITLE: Creating Emergency Number with Dial Mask - PowerShell\nDESCRIPTION: This code snippet demonstrates how to create an emergency number with a dial string and a single dial mask. This allows users to dial a different number (the dial mask) which is then translated to the actual emergency number (the dial string) by Skype for Business.  In this example, the dial string is 911 and the dial mask is 112.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-multiple-emergency-numbers.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n> $a = New-CsEmergencyNumber -DialString 911 -DialMask 112\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Media Connectivity Policy - PowerShell\nDESCRIPTION: This snippet Releases [Get|New|Set|Grant]-CsTeamsMediaConnectivityPolicy cmdlets using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_67\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|New|Set|Grant]-CsTeamsMediaConnectivityPolicy\n```\n\n----------------------------------------\n\nTITLE: Creating a CLS Scenario\nDESCRIPTION: This PowerShell snippet shows how to create a new CLS scenario using the `New-CsClsScenario` cmdlet. It requires specifying an identity (scope and name) for the scenario and assigning a previously defined provider to it. The provider is passed as a variable containing the provider object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClsScenario -Identity \"site:Redmond/RedmondLyssInfo\" -Provider $LyssProvider\n```\n\n----------------------------------------\n\nTITLE: Configure Emergency Service Provider Connection - PowerShell\nDESCRIPTION: These cmdlets configure the connection to the emergency service provider for address validation. It reads the password securely and uses the `Set-CsLisServiceProvider` cmdlet to set the service provider name, validation service URL, certificate file name, and password.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$pwd = Read-Host -AsSecureString <password>\nSet-CsLisServiceProvider -ServiceProviderName Provider1 -ValidationServiceUrl <URL provided by provider> -CertFileName <location of certificate provided by provider> -Password $pwd\n```\n\n----------------------------------------\n\nTITLE: Install Monitoring Reports using PowerShell Script\nDESCRIPTION: This PowerShell script installs Skype for Business Server Monitoring Reports using the DeployReports.ps1 script. It requires several parameters to configure the connection to the monitoring database and set access permissions.  Ensure the user account has the necessary SQL Server and SQL Server Reporting Services permissions or the script will fail.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/install-monitoring-reports.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Program Files\\Skype for Business Server 2015\\Deployment\\Setup\\DeployReports.ps1 -storedUserName \"litwareinc\\kenmyer\" -storedPassword \"p@ssw0rd\" -readOnlyGroupName \"RTCUniversalReadOnlyAdmins\" -reportServerSqlInstance \"atl-sql-001.litwareinc.com\" -monitoringDatabaseId \"MonitoringDatabase:atl-sql-001.litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Federation Configuration - PowerShell\nDESCRIPTION: This snippet Adds BlockAllSubDomains parameter to the Set-CsTenantFederationConfiguration cmdlet to block all subdomains using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_65\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantFederationConfiguration -BlockAllSubDomains\n```\n\n----------------------------------------\n\nTITLE: Example: Disabling Call via Work for a User in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates creating a Mobility policy named \"tag:disableOutsideVoice\" that disables Call via Work and then granting this policy to a user with the identity \"MobileUser1@contoso.com\".  Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsMobilityPolicy \"tag:disableOutsideVoice\" -EnableOutsideVoice $False\nGrant-CsMobilityPolicy -Identity MobileUser1@contoso.com -PolicyName tag:disableOutsideVoice\n```\n\n----------------------------------------\n\nTITLE: Verify QoS Policy via Registry Editor\nDESCRIPTION: This procedure describes how to verify the application of Quality of Service (QoS) policies by examining the Windows Registry. It navigates to the specific registry key where QoS policy settings are stored, allowing confirmation that the policies have been successfully applied to the system. Requires access to the Registry Editor.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-conferencing-application-and-mediation-servers.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n1. On a Skype for Business Server computer, click **Start**, and then click **Run**.\n\n2. In the **Run** dialog box, type **regedit**, and then press ENTER.\n\n3. In Registry Editor, expand **Computer**, expand **HKEY_LOCAL_MACHINE**, expand **SOFTWARE**, expand **Policies**, expand **Microsoft**, expand **Windows**, and then click **QoS**. Under **QoS** you should see registry keys for each of the QoS policies you just created. For example, if you created two new policies (one named Skype for Business Server Audio QoS and the other named Skype for Business Server Video QoS), you should see registry entries for Skype for Business Server Audio QoS and Skype for Business Server Video QoS.\n```\n\n----------------------------------------\n\nTITLE: Service Level Target Calculation (SL_met_handled)\nDESCRIPTION: This formula calculates the percentage of answered calls that met the service level target.  It divides the total number of calls answered within the service level target by the total number of answered calls.  The result is a two-digit decimal and is null if sl_target is null.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-real-time-reports.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n(sl_tot_answered_calls / tot_answered_calls)\n```\n\n----------------------------------------\n\nTITLE: Creating Web Service Configurations in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet creates a new web service configuration in Skype for Business. It requires specifying an Identity and allows configuring settings like EnableGroupExpansion and UseCertificateAuth. The example creates a new web service configuration for the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsWebServiceConfiguration -Identity site:Redmond -EnableGroupExpansion $False -UseCertificateAuth $True\n```\n\n----------------------------------------\n\nTITLE: Removing External Access Policy with PowerShell in Skype for Business\nDESCRIPTION: This PowerShell snippet removes an existing external access policy in Skype for Business Server. It requires the policy name (global, site, or user). The global policy can only be reset, not deleted. Replace <name of global, site or user policy> with the correct policy name. \nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/configure-policies-to-control-federated-user-access.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsExternalAccessPolicy -Identity <name of global, site or user policy>\n```\n\n----------------------------------------\n\nTITLE: Enable QoE for a single location - PowerShell\nDESCRIPTION: This PowerShell snippet enables Quality of Experience (QoE) for a specific site (e.g., Redmond) in Skype for Business Server. It uses the `Set-CsQoEConfiguration` cmdlet to modify the QoE configuration for the specified identity. The `EnableQoE` parameter is set to `$True` to activate QoE data collection and storage for that location. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/enable-qoe.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsQoEConfiguration -Identity \"site:Redmond\" -EnableQoE $True\n```\n\n----------------------------------------\n\nTITLE: Configuring Watcher Node Test User Accounts with New-CsWatcherNodeConfiguration\nDESCRIPTION: This step involves using the `New-CsWatcherNodeConfiguration` cmdlet to configure test user accounts to be employed by the watcher node. The cmdlet allows specifying which synthetic transactions the node will run, enabling monitoring of specific functionalities. Parameters such as `Tests` can be used to customize the tests performed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsWatcherNodeConfiguration\n```\n\n----------------------------------------\n\nTITLE: Creating a New Skype Public Provider with PowerShell\nDESCRIPTION: This PowerShell command creates a new Skype public provider in Skype for Business Server. It sets the necessary parameters for federation, icon URL, name decoration routing domain, excluded domain list, and enables Skype ID routing and directory search. This configuration allows Skype for Business users to connect with Skype users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-skype-connectivity.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsPublicProvider -Identity Skype -ProxyFqdn federation.messenger.msn.com -IconUrl https://images.edge.messenger.live.com/Messenger_16x16.png -NameDecorationRoutingDomain msn.com -NameDecorationExcludedDomainList \"msn.com,outlook.com,live.com,hotmail.com\" -Enabled $true -EnableSkypeIdRouting $true -EnableSkypeDirectorySearch $true\n```\n\n----------------------------------------\n\nTITLE: Add a Subnet Location with ELIN to the Database - PowerShell\nDESCRIPTION: This cmdlet adds a subnet location to the Skype for Business Server location database, including the Emergency Location Identification Number (ELIN). It demonstrates how to specify multiple ELINs separated by semicolons in the `CompanyName` field. It uses the `Set-CsLisSubnet` cmdlet with parameters specifying the subnet, description, location, company name, and civic address details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLisSubnet -Subnet 157.56.66.0 -Description \"Subnet 1\" -Location Location1 -CompanyName 425-555-0100; 425-555-0200; 425-555-0300 -HouseNumber 1234 -HouseNumberSuffix \"\" -PreDirectional \"\" -StreetName 163rd -StreetSuffix Ave -PostDirectional NE -City Redmond -State WA -PostalCode 99123 -Country US\n```\n\n----------------------------------------\n\nTITLE: Filtering Get-CsOnlineUser with -contains Operator\nDESCRIPTION: Demonstrates filtering Get-CsOnlineUser based on whether the FeatureTypes property, which is an array of strings, contains \"PhoneSystem\". The -contains operator is used for this purpose.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_86\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter {FeatureTypes -contains \"PhoneSystem\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Cloud Endpoint via Registry - PowerShell\nDESCRIPTION: This code snippet demonstrates how to set the initial cloud endpoint for Microsoft Teams using a registry key. This is important for customers in GCCH, DoD, or Gallatin environments to ensure Teams connects to the correct cloud endpoint for pre-sign-in connectivity. The registry key restricts Teams to the appropriate cloud endpoint.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/msi-deployment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nHKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Office\\16.0\\Teams\nValue = CloudType\nvalue type = DWORD\n  1 = Commercial, 2 = GCC, 3 = GCCH, 4 = DOD, 7 = Gallatin\n```\n\n----------------------------------------\n\nTITLE: Bulk Update Wireless Locations from CSV - PowerShell\nDESCRIPTION: These cmdlets import wireless access point location data from a CSV file named \"waps.csv\" and then use the `Set-CsLisWirelessAccessPoint` cmdlet to update the location database in bulk. The CSV file should contain columns corresponding to the parameters of the `Set-CsLisWirelessAccessPoint` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$g = Import-Csv waps.csv\n$g | Set-CsLisWirelessAccessPoint\n```\n\n----------------------------------------\n\nTITLE: Disabling a chat room using Set-CsPersistentChatRoom PowerShell cmdlet\nDESCRIPTION: This PowerShell snippet demonstrates how to disable a chat room named ITChatRoom on the pool atl-cs-001.contoso.com using the Set-CsPersistentChatRoom cmdlet and setting the Disabled parameter to $True. This makes the room unavailable to users.\n\nDependencies: Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/chat-rooms.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatRoom -Identity \"atl-cs-001.contoso.com\\ITChatRoom\" -Disabled $True\n```\n\n----------------------------------------\n\nTITLE: Deleting Trunk Configuration Settings for a Specific Site - PowerShell\nDESCRIPTION: This command removes the trunk configuration settings that are applied to the Redmond site. It targets configurations specifically scoped to the 'site:Redmond' identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/delete-trunk-configuration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTrunkConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Get Meeting Configuration - PowerShell\nDESCRIPTION: Retrieves information about meeting configuration settings in Skype for Business Server. These settings dictate the types of meetings users can create and control how anonymous and dial-in users can join. The cmdlet returns meeting configuration objects with details about the configured settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMeetingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Enable Screen Sharing in Teams Meetings - PowerShell\nDESCRIPTION: This snippet shows how to enable screen sharing in Teams meetings using the CsTeamsMeetingPolicy cmdlet. Setting the `-ScreenSharingMode` parameter to EntireScreen allows users to share their entire screen, which is required for presenting during live events.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/plan-for-teams-live-events.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nThe [**CsTeamsMeetingPolicy**](/powershell/module/teams/set-csteamsmeetingpolicy) **`-ScreenSharingMode`** parameter = EntireScreen\n```\n\n----------------------------------------\n\nTITLE: Get Specific SIP Trunk by Identity - PowerShell\nDESCRIPTION: This command retrieves information for a specific SIP trunk, identified by its unique Identity. The `Get-CsTrunk` cmdlet is used with the `-Identity` parameter, which specifies the identity of the target trunk. The identity typically includes the PSTN gateway IP address.  The output shows the properties of the specified trunk.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/view-sip-info.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsTrunk -Identity \"PstnGateway:192.168.0.240\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Supervised Chat with PowerShell\nDESCRIPTION: This snippet shows how to enable supervised chat using PowerShell by setting the `AllowRoleBasedChatPermissions` property to `True`. This cmdlet is part of the `CsTeamsClientConfiguration`. This action requires that chat permission roles have already been configured for users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/supervise-chats-edu.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nYou can also use PowerShell to enable Supervised Chat by setting AllowRoleBasedChatPermissions to True. This cmdlet is under CsTeamsClientConfiguration.\n```\n\n----------------------------------------\n\nTITLE: Get Conferencing Configuration - PowerShell\nDESCRIPTION: Retrieves information about the conference configuration settings for the organization in Skype for Business Server. These settings determine aspects such as maximum content size and content grace period. The cmdlet returns conferencing configuration objects with details about the settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Creating Network Intersite Policy with New-CsNetworkInterSitePolicy (Powershell)\nDESCRIPTION: This code snippet demonstrates how to create a new network inter-site policy using the `New-CsNetworkInterSitePolicy` cmdlet in Skype for Business Server Management Shell. It defines bandwidth limitations between two network sites, Reno and Albuquerque, by applying the `20Mb_Link` bandwidth policy profile.  The policy is identified by `Reno_Albuquerque`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-network-intersite-policies.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkInterSitePolicy -InterNetworkSitePolicyID Reno_Albuquerque -NetworkSiteID1 Reno -NetworkSiteID2 Albuquerque -BWPolicyProfileID 20Mb_Link\n```\n\n----------------------------------------\n\nTITLE: Filtering Get-CsOnlineUser with -ge Operator on Policies\nDESCRIPTION: Shows how to use the -ge (greater than or equal to) operator for filtering based on policies in Get-CsOnlineUser.  The example filters users based on their ExternalAccessPolicy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_88\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter {ExternalAccessPolicy -ge \"xyz_policy\"}\n```\n\n----------------------------------------\n\nTITLE: Verify Central Management Store Replication - PowerShell\nDESCRIPTION: This PowerShell cmdlet verifies that the changes made to the Central Management store have been replicated to all replicas.  It's crucial to ensure the `UpToDate` value is showing TRUE for all replicas before proceeding. This command should be run on an internal server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/outlook-web-app.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsManagementStoreReplicationStatus\n```\n\n----------------------------------------\n\nTITLE: Update a File Transfer Filter using Set-CsFileTransferFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet modifies an existing file transfer filter configuration in Skype for Business Server. The `-Identity` parameter specifies the filter to update, and `-Extensions` adds the `.ps1` extension to the list of blocked extensions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsFileTransferFilterConfiguration -Identity site:Redmond -Extensions @{Add=\".ps1\"}\n```\n\n----------------------------------------\n\nTITLE: Install Teams Meeting Add-in in non-persistent environments - Command Prompt\nDESCRIPTION: This command installs the Teams Meeting Add-in (TMA) in non-persistent environments where Teams auto-update is disabled. It uses `msiexec.exe` to install the MSI package located in the new Teams installation directory.  The `ALLUSERS=1` parameter ensures installation for all users, `/qn` performs a silent installation, `/norestart` prevents automatic restart, and `TARGETDIR` specifies the installation directory.  The X.X.X.X placeholders need to be replaced with the correct New Teams and TMA versions. Version placeholders must also be replaced.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_11\n\nLANGUAGE: command prompt\nCODE:\n```\nmsiexec.exe /i \"C:\\Program Files\\WindowsApps\\MSTeams_X.X.X.X_x64__8wekyb3d8bbwe\\MicrosoftTeamsMeetingAddinInstaller.msi\" ALLUSERS=1 /qn /norestart TARGETDIR=\"C:\\Program Files (x86)\\Microsoft\\TeamsMeetingAdd-in\\<version>\\\"\n```\n\n----------------------------------------\n\nTITLE: Check Offline IM Configuration in Skype for Business Server (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the current Offline Instant Messaging (IM) configuration in Skype for Business Server. It allows you to confirm if Offline IM is enabled or disabled. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/im-and-presence/enable-or-disable-offline-im.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsImConfiguration\n```\n\n----------------------------------------\n\nTITLE: Get Mediation Server Audio Port Ranges - PowerShell\nDESCRIPTION: This PowerShell command retrieves the audio port range configured for a Mediation server. It utilizes the `Get-CsService` cmdlet, filtering for Mediation servers, and then selects the Identity, AudioPortStart, and AudioPortCount properties to display the audio port information. This enables administrators to check the audio port configuration on Mediation Servers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-conferencing-application-and-mediation-servers.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsService -MediationServer | Select-Object Identity, AudioPortStart, AudioPortCount\n```\n\n----------------------------------------\n\nTITLE: Searching CLS Logs for Specific Components and Output to File - PowerShell\nDESCRIPTION: This PowerShell command searches the Centralized Logging Service logs for entries related to the 'SIPStack', 'S4', and 'UserServices' components. The results are saved to the specified output file path (C:\\Logfiles\\logfile.txt). The search covers all computers and pools in the deployment for the last 30 minutes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Components \"SIPStack\",\"S4\",\"UserServices\" -OutputFilePath \"C:\\Logfiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Importing Component and User Management Pack using Operations Manager Shell in PowerShell\nDESCRIPTION: This PowerShell snippet shows how to import the Component and User management pack for Skype for Business Server 2015 using the `Import-SCOMManagementPack` cmdlet. The `-FullName` parameter is used to specify the file path to the management pack.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/configure-the-primary.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-SCOMManagementPack -FullName \"D:\\MP\\Microsoft.LS.2015.Monitoring.ComponentAndUser.mp\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Device Update Configuration with Get-CsDeviceUpdateConfiguration in PowerShell\nDESCRIPTION: This snippet retrieves details for a specific device update configuration using the `Get-CsDeviceUpdateConfiguration` cmdlet and the `Identity` parameter. The `Identity` parameter specifies the unique identifier for the configuration. It outputs the properties of the specified device update configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsDeviceUpdateConfiguration -Identity Global\n```\n\n----------------------------------------\n\nTITLE: Remove User-Specific Teams Files Policy - PowerShell\nDESCRIPTION: This PowerShell command removes the Teams Files policy named `UserPolicy`. This does *not* remove the policy from users; it removes the policy *definition*. It only removes the policy definition. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-off-teams-native-file-upload-policy.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTeamsFilesPolicy -Identity UserPolicy\n```\n\n----------------------------------------\n\nTITLE: Set Dial Plan Region in Skype for Business using PowerShell\nDESCRIPTION: This PowerShell command modifies an existing dial plan in Skype for Business Server to set the dial-in conferencing region. The `-Identity` parameter specifies the dial plan to modify, and `-DialinConferencingRegion` sets the conferencing region. This is crucial for associating dial-in access numbers with the correct dial plan.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/dial-in-conferencing.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsDialPlan [-Identity <Identity of the dial plan to be modified>] -DialinConferencingRegion \"<new region>\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsDialPlan -Identity Redmond -DialinConferencingRegion \"US West Coast\"\n```\n\n----------------------------------------\n\nTITLE: Configure participant control settings in Teams Admin Center\nDESCRIPTION: This snippet explains how to configure the 'Participants can give or request control' and 'External participants can give or request control' policies in the Teams admin center.  These policies control whether meeting participants can give control of their shared screen, and whether external participants can be given control. Steps include navigating to Meeting policies, selecting a policy to modify, setting the control options under 'Content sharing', and saving the changes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-meeting-presentation-experience.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n1. In the Teams admin center, expand **Meetings**, and then select **Meeting policies**.\n2. Select the policy that you want to modify.\n3. Under **Content sharing**:\n    - To prevent participants from giving control of a screen share to others, set **Participants can give or request control** to **Off**.\n\n    - To prevent external participants from being given control of a screen share, set **External participants can give or request control** to **On**.\n4. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Configure Skype for Business as Partner Application\nDESCRIPTION: This PowerShell command configures Skype for Business Server as a partner application in Exchange Server.  It uses the Configure-EnterprisePartnerApplication.ps1 script, which is part of Exchange Server, and requires the Skype for Business Server authentication metadata URL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/configure-partner-applications.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n\"C:\\Program Files\\Microsoft\\Exchange Server\\V15\\Scripts\\Configure-EnterprisePartnerApplication.ps1 -AuthMetaDataUrl 'https://atl-cs-001.litwareinc.com/metadata/json/1' -ApplicationType Lync\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Report Definition from CQD Repository Service\nDESCRIPTION: This HTML/JavaScript snippet demonstrates how to retrieve a report definition from the CQD Repository Service using an AJAX GET request.  It takes a report set ID from an input field and sends a request to the Repository API to fetch the corresponding report set data. The function `loadReportSet` retrieves the report definition from the Repository service and displays it. It also handles errors if the data service is not running or the URL is incorrect. It requires jQuery.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv='cache-control' content='no-cache'>\n    <meta http-equiv='expires' content='0'>\n    <meta http-equiv='pragma' content='no-cache'>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta http-equiv=\"x-content-type-options\" content=\"nosniff\">\n    <title>CQD Report definition viewer</title>\n</head>\n<body>    \n    <div style=\"font-size:32pt\">CQD Report definition viewer</div>\n        <p>ReportSet Id: <input id=\"reportSetId\" /></p>\n        <button onclick='loadReportSet()'>Load</button>\n        <div id=\"Report\"></div>\n    <!-- Third party Libraries -->\n    <script src=\"OpenSourceSoftware/Scripts/jquery-2.1.1.js\"></script>\n\n    <script>\n        var urlRepositoryApi = 'http://localhost/QoERepositoryService/repository/item/';\n\n        var loadReportSet = function ()\n        {\n            var reportSetId = document.getElementById('reportSetId').value;\n\n            $.ajax({\n                url: urlRepositoryApi + reportSetId,\n                data: '',\n                type: 'GET',\n                async: false,\n                contentType: 'application/json;charset=utf-8',\n                success: function (data) {\n                    var reportSetDiv = document.getElementById('Report');\n                    reportSetDiv.innerHTML = '';\n                    processReportSetData(reportSetDiv, data);\n                },\n                error: function (error) {\n                    alert('Error getting Report, check that the qoe data service is running and url is correct.');\n                }\n            });\n        };\n\n```\n\n----------------------------------------\n\nTITLE: Assigning a Private Line Using Set-CsUser Cmdlet\nDESCRIPTION: This code snippet demonstrates how to assign a telephone number to a private telephone line for a user using the Set-CsUser cmdlet in Skype for Business Server Management Shell. The telephone number must be between 3 and 15 numbers in length and preceded with the 'TEL:' prefix.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/private-telephone-lines.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUser -Identity \"sip:joe@contoso.com\" -PrivateLine \"Tel:+14255551212\"\n```\n\n----------------------------------------\n\nTITLE: Sample Skype for Business client settings file - Text\nDESCRIPTION: This is a sample of the `com.microsoft.SkypeForBusiness.plist` file, showing default settings for various client preferences. This file can be found at `~/Library/Containers/com.microsoft.SkypeForBusiness/Data/Library/Preferences/com.microsoft.SkypeForBusiness.plist` on macOS. It's a property list file in XML format.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/customize-the-mac-client-experience.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n{\n    BITApplicationDidEnterBackgroundTime = \"1496164840.505589\";\n    BITApplicationWasLaunched = 1;\n    CallHistorySelectedFilterIndex = 0;\n    HockeySDKAutomaticallySendCrashReports = 0;\n    HockeySDKCrashReportActivated = 1;\n    \"LastSignOut_me\" = \"2017-05-30 17:22:17 +0000\";\n    \"NSSplitView Subview Frames CallHistoryListDetailSplit\" =     (\n        \"0.000000, 0.000000, 291.500000, 473.000000, NO, NO\",\n        \"292.500000, 0.000000, 408.500000, 473.000000, NO, NO\"\n    );\n    \"NSSplitView Subview Frames calendarListSplitView\" =     (\n        \"0.000000, 0.000000, 320.000000, 473.000000, NO, NO\",\n        \"321.000000, 0.000000, 380.000000, 473.000000, NO, NO\"\n    );\n   \"NSSplitView Subview Frames conversationListSplitView\" =     (\n        \"0.000000, 0.000000, 320.000000, 473.000000, NO, NO\",\n        \"321.000000, 0.000000, 380.000000, 473.000000, NO, NO\"\n    );\n    \"NSWindow Frame HomeWindow\" = \"511 134 769 473 0 0 1280 778 \";\n    \"NSWindow Frame SignInWindow\" = \"388 208 512 518 0 0 1280 778 \";\n    RawCameraSupportVersion = 7030;\n    appRunning = 1;\n    buildTime = \"May 22 2017 12:37:28\";\n    \"user@contoso.com_userPreferences\" =     {\n        ContactsListState =         {\n            expandedGroupState =             {\n                \"/me/pendingContacts\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/HR6ZQDk_JUI9WUR0Gq0TEAUYfYDk8OwzsPAuDxZfjxg=\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/N-kLDW4VAs4O3PDv36MNyaYxhuqkRGD1eWpzDGdaHnw=\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/RJk1X9SsFDq-MbvPe2eUyKTdPizt7-eMxij-ef1SGWQ=\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/UulRAGZQL3JnSpYCDqy4KsZCboNF2pqmp-ru3sqiDPQ=\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/Wsbhk9lfd8OUv_0aCtHmYPfm0Wal0mzoM5WFbkxaNjM=\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/afYHfnLUqTmnwac55OaqHUNqLLCqFTZuDezsBeSLOko=\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/aok8RuCx35GbuVLMp-_Zi4gnBK_c5qO7mANf4Drf8Ak=\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/hSrWaq6LWhzvT6sRxpyQimwfXzMgLyEc3O4FgSokesc=\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/mDdgSHulTTkweoDbjXVp7Y308xM70eFDDZn2j7sAytM=\" = 0;\n                \"/ucwa/v1/applications/414177012058/people/groups/nj3ApLemRK23ChI-K3x_RRGjlEeqTh6_9w6kYwKWldQ=\" = 1;\n                \"/ucwa/v1/applications/414177012058/people/groups/oRX0pDJ2zEP-DQOfynLdvnTEFFNnsv95uvCmVfHjSik=\" = 0;\n            };\n        };\n    };\n    defaultAudioPlaybackDevice = <62706c69 73743030 d4010203 04050618 19582476 65727369 6f6e5824 6f626a65 63747359 24617263 68697665 72542474 6f701200 0186a0a5 07080f10 1155246e 756c6cd3 090a0b0c 0d0e5b64 6973706c 61794e61 6d655624 636c6173 735a6964 656e7469 66696572 80038004 80025f10 5a417070 6c655553 42417564 696f456e 67696e65 3a432d4d 65646961 20456c65 6374726f 6e696373 20496e63 2e202020 2020203a 4d696372 6f736f66 74204c69 66654368 6174204c 582d3330 30303a31 34313030 3030303a 322c315f 101a4d69 63726f73 6f667420 4c696665 43686174 204c582d 33303030 d2121314 155a2463 6c617373 6e616d65 5824636c 61737365 735f1016 4d6f6465 6c2e4175 64696f56 6964656f 44657669 6365a216 175f1016 4d6f6465 6c2e4175 64696f56 6964656f 44657669 6365584e 534f626a 6563745f 100f4e53 4b657965 64417263 68697665 72d11a1b 54726f6f 74800100 08001100 1a002300 2d003200 37003d00 43004a00 56005d00 68006a00 6c006e00 cb00e800 ed00f801 01011a01 1d013601 3f015101 54015900 00000000 00020100 00000000 00001c00 00000000 00000000 00000000 00015b>;\n    defaultAudioRecordingDevice = <62706c69 73743030 d4010203 04050618 19582476 65727369 6f6e5824 6f626a65 63747359 24617263 68697665 72542474 6f701200 0186a0a5 07080f10 1155246e 756c6cd3 090a0b0c 0d0e5b64 6973706c 61794e61 6d655624 636c6173 735a6964 656e7469 66696572 80038004 80025f10 5a417070 6c655553 42417564 696f456e 67696e65 3a432d4d 65646961 20456c65 6374726f 6e696373 20496e63 2e202020 2020203a 4d696372 6f736f66 74204c69 66654368 6174204c 582d3330 30303a31 34313030 3030303a 322c315f 101a4d69 63726f73 6f667420 4c696665 43686174 204c582d 33303030 d2121314 155a2463 6c617373 6e616d65 5824636c 61737365 735f1016 4d6f6465 6c2e4175 64696f56 6964656f 44657669 6365a216 175f1016 4d6f6465 6c2e4175 64696f56 6964656f 44657669 6365584e 534f626a 6563745f 100f4e53 4b657965 64417263 68697665 72d11a1b 54726f6f 74800100 08001100 1a002300 2d003200 37003d00 43004a00 56005d00 68006a00 6c006e00 cb00e800 ed00f801 01011a01 1d013601 3f015101 54015900 00000000 00020100 00000000 00001c00 00000000 00000000 00000000 00015b>;\n    firstRun = 0;\n    showEndCallDialog = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CQD Data Service with AJAX\nDESCRIPTION: This JavaScript snippet demonstrates how to query the CQD Data Service using an AJAX call. It constructs a JSON query object with dimensions, filters, and measurements, then sends a POST request to the Data Service's RunQuery endpoint.  The success function extracts and displays the returned data in HTML elements, and the error function provides error handling. It requires jQuery.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$($.fn.freeFormReport = function (queries, urlApi, presentation) {\n            var query = {\n                Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                Filters: [{\n                    DataModelName: '[StartDate].[Month]',\n                    Value: '[2015-02-01T00:00:00]',\n                    Operand: 0\n                }],\n                Measurements:\n                    [{ DataModelName: '[Measures].[Audio Good Streams JPDR Count]' },\n                     { DataModelName: '[Measures].[Audio Poor Streams JPDR Count]' },]\n            };            \n\n            $.ajax({\n                url: 'http://localhost/QoEDataService/RunQuery',\n                data: JSON.stringify(query),\n                type: 'POST',\n                async: true,\n                contentType: 'application/json;charset=utf-8',\n                success: function (data) {\n                    //This is the jQuery syntax for document.GetElementById()\n                    $('#AudioGoodStreamsJPDRCount').html(data.DataResult[0][1]);\n                    $('#AudioPoorStreamsJPDRCount').html(data.DataResult[0][2]);\n                }\n                error: function (error) {\n                    alert('Error getting data, check that the data service is running and that the URL is correct.');\n           }\n            });\n        });\n```\n\n----------------------------------------\n\nTITLE: Updating a CLS Scenario with a Modified Provider\nDESCRIPTION: This PowerShell command updates an existing CLS scenario using the `Set-CsClsScenario` cmdlet, assigning the modified provider to it. The `Identity` parameter specifies the scenario to update, and the `Provider` parameter references the updated provider object stored in the `$LyssProvider` variable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsScenario -Identity \"site:Redmond/RedmondLyssInfo\" -Provider $LyssProvider\n```\n\n----------------------------------------\n\nTITLE: Replacing EnablePayAsYouGoSpendingLimits parameter\nDESCRIPTION: This snippet replaces `EnablePayAsYouGoSpendingLimits` with `EnableSpendLimits` in the `New-CsTeamsCallingPolicy` and `Set-CsTeamsCallingPolicy` cmdlets. This is a breaking change, requiring updates to scripts that use the old parameter. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Defining a Network Site using New-CsTenantNetworkSite - PowerShell\nDESCRIPTION: This snippet demonstrates how to create a network site using the `New-CsTenantNetworkSite` cmdlet.  The `-NetworkSiteID` parameter specifies the name of the site, and the `-NetworkRegionID` parameter associates the site with a previously defined network region.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTenantNetworkSite -NetworkSiteID <site ID> -NetworkRegionID <region ID>\n```\n\n----------------------------------------\n\nTITLE: Associate Subnet with Network Site - New-CsNetworkSubnet - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new association between a subnet and a network site within Skype for Business Server. It requires specifying the subnet ID, mask bits, and the network site ID.  This association is critical for location-based routing and advanced Enterprise Voice features. This can be used to configure public IP addresses of the Audio/Video Edge Servers by using a mask of 32.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-network.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkSubnet -SubnetID <String> -MaskBits <Int32> -NetworkSiteID <String>\n```\n\n----------------------------------------\n\nTITLE: Disable entry/exit announcements for Teams meetings with PowerShell\nDESCRIPTION: This PowerShell snippet disables entry and exit announcements for Microsoft Teams meetings. It utilizes the `Set-CsOnlineDialInConferencingTenantSettings` cmdlet with the `-EnableEntryExitNotifications` parameter set to `$false`. This prevents notifications when participants join or leave a meeting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-on-or-off-entry-and-exit-announcements-for-meetings-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingTenantSettings -EnableEntryExitNotifications $false \n```\n\n----------------------------------------\n\nTITLE: Set Front Row Video Height Size via XML - Teams Rooms\nDESCRIPTION: This XML snippet configures the video height size in Front Row for Teams Rooms. The `<FrontRowVideoSize>` element can be set to `small`, `medium`, or `large` to control the amount of screen space allocated to meeting participant video versus meeting content. The default value is `medium`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-row.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<FrontRowVideoSize>large</FrontRowVideoSize>\n```\n\n----------------------------------------\n\nTITLE: Create Unassigned Number Range for Announcement Service - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new unassigned number range that routes calls to an Announcement service.  It requires the Announcement service FQDN and the announcement name. The Identity parameter specifies a unique identifier for the unassigned number range.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-unassigned-number-range.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsUnassignedNumber -Identity <unique identifier for unassigned number range> -NumberRangeStart <first number in range> -NumberRangeEnd <last number in range> -AnnouncementName <announcement name> -AnnouncementService <FQDN or service ID of the Announcement service>\n```\n\n----------------------------------------\n\nTITLE: Grant permissions to RTCUniversalUserAdmins - PowerShell\nDESCRIPTION: This command grants OU permissions for users, contacts, and inetOrgPersons to the RTCUniversalUserAdmins group. It uses the Grant-CsOUPermission cmdlet with the -OU parameter specifying the distinguished name of the OU and the -ObjectType parameter set to multiple object types separated by commas.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/test-admin-permissions.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOUPermission -OU \"ou=Redmond,dc=litwareinc,dc=com\" -ObjectType \"user\", \"contact\", \"inetOrgPerson\"\n```\n\n----------------------------------------\n\nTITLE: Modify Meeting Configuration - PowerShell\nDESCRIPTION: Modifies the meeting configuration settings currently in use in Skype for Business Server. This requires identifying the configuration to be modified and specifying which parameters to change. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMeetingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Enable Remote User Access via PowerShell - Skype for Business\nDESCRIPTION: This PowerShell cmdlet enables remote user access for Skype for Business Server. It sets the `AllowOutsideUsers` property of the `CsAccessEdgeConfiguration` to `$True`. This allows users outside the internal network to connect to the Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-remote-user-access.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -AllowOutsideUsers $True\n```\n\n----------------------------------------\n\nTITLE: Get Service Status PowerShell\nDESCRIPTION: This PowerShell command retrieves the status of services running on a specific computer in a Skype for Business Server environment. The `-ComputerName` parameter specifies the target computer. The output is then filtered using `Select-Object` to display only the `RoleName` and `Status` properties, providing a clear overview of the service states.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-services.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWindowsService -ComputerName atl-cs-001.litwareinc.com | Select-Object RoleName, Status\n```\n\n----------------------------------------\n\nTITLE: Forwarding mail from Microsoft 365 mailboxes to Gmail using PowerShell\nDESCRIPTION: This PowerShell script configures automatic email forwarding from Microsoft 365 mailboxes to a specified Gmail subdomain. It retrieves all user mailboxes and sets the forwarding address. It requires the ExchangeOnlineManagement module and administrator privileges. The script sets DeliverToMailboxAndForward to true to ensure a copy of the email is kept in the original mailbox.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/connect-teams-essentials-to-email.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$forwardingDomain = \"g.contosolandscaping2.m365master.com\"\nConnect-ExchangeOnline\n$Mailboxes = Get-Mailbox -ResultSize Unlimited -Filter {RecipientTypeDetails -eq \"UserMailbox\"}\nForeach ($mbx in $mailboxes) {\n\nSet-Mailbox $mbx.Identity -DeliverToMailboxAndForward $true -ForwardingSMTPAddress $($mbx.Alias,$forwardingDomain -join \"@\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Details of a Push Notification Configuration (Get-CsPushNotificationConfiguration)\nDESCRIPTION: This command retrieves the details of a specific push notification configuration based on its identity. The -Identity parameter specifies the configuration to retrieve. This cmdlet allows admins to view the settings of a particular configuration for verification or troubleshooting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_40\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsPushNotificationConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Get Migrated Dial-in Access Numbers (PowerShell)\nDESCRIPTION: This PowerShell cmdlet retrieves all dial-in conferencing access numbers that have been migrated to a specific Skype for Business Server 2019 pool.  It uses a filter based on the pool's FQDN. The expected output is a list of dial-in access numbers associated with the specified pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-dial-in-access-numbers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingAccessNumber -Filter {Pool -eq \"<FQDN of the pool to which the access number is moved>\"}\n```\n\n----------------------------------------\n\nTITLE: Disable Remote User Access via PowerShell - Skype for Business\nDESCRIPTION: This PowerShell cmdlet disables remote user access for Skype for Business Server. It sets the `AllowOutsideUsers` property of the `CsAccessEdgeConfiguration` to `$False`. This prevents users outside the internal network from connecting to the Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-remote-user-access.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -AllowOutsideUsers $False\n```\n\n----------------------------------------\n\nTITLE: Deleting Web Service Configurations in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet deletes a specified web service configuration from Skype for Business. The Identity parameter specifies the web service configuration to be removed. This action is permanent and should be performed with caution.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsWebServiceConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Modify Global Location Policy - PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies the global location policy for Skype for Business Server. It enables enhanced emergency services, sets the location requirement to 'disclaimer', configures the disclaimer text, defines the PSTN usage, emergency dial string and mask, sets up a conference URI and mode, configures notification URI and enables location for E911 only and finally sets location refresh interval.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-location-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLocationPolicy -Identity Global -EnhancedEmergencyServicesEnabled $true -LocationRequired \"disclaimer\" -EnhancedEmergencyServiceDisclaimer \"Your company policy requires you to set a location. If you do not set a location emergency services will not be able to locate you in an emergency. Please set a location.\" -PstnUsage \"emergencyUsage\" -EmergencyDialString \"911\" -ConferenceMode \"twoway\" -ConferenceUri \"sip:+14255550123@litwareinc.com\" -EmergencyDialMask \"112\" NotificationUri \"sip:security@litwareinc.com\" -UseLocationForE911Only $true -LocationRefreshInterval 2\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Education Assignments App Policy - PowerShell\nDESCRIPTION: This snippet showcases the release of `[Get|Set]-CsTeamsEducationAssignmentsAppPolicy` cmdlets for managing Teams Education Assignments App policies using the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_51\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsTeamsEducationAssignmentsAppPolicy\n```\n\n----------------------------------------\n\nTITLE: Adding AIInterpreter, VoiceSimulationInInterpreter parameters\nDESCRIPTION: This snippet adds `AIInterpreter`, `VoiceSimulationInInterpreter` parameters to `[New|Set]-CsTeamsMeetingPolicy`. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_29\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsMeetingPolicy\n```\n\n----------------------------------------\n\nTITLE: Configure Webinar Registration Form to Require Only Required Questions - PowerShell\nDESCRIPTION: This PowerShell script configures the Teams events policy to only allow organizers to require attendees to answer the default required questions on the webinar registration form. It uses the `Set-CsTeamsEventsPolicy` cmdlet with the `-AllowedQuestionTypesInRegistrationForm` parameter set to `DefaultOnly`. Replace `<policy name>` with the actual name of the policy you wish to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-registration-form-webinars.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowedQuestionTypesInRegistrationForm DefaultOnly\n```\n\n----------------------------------------\n\nTITLE: Enable Live Captions and Subtitles PowerShell\nDESCRIPTION: Sets the global policy to turn on live captions and subtitles (transcription) for event attendees in live events produced in Teams.  The `-AllowBroadcastTranscription $true` parameter enables this feature. It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastPolicy -Identity Global -AllowBroadcastTranscription $true \n```\n\n----------------------------------------\n\nTITLE: Get RBAC roles with specific cmdlet - PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of all role-based access control (RBAC) roles that have been assigned cmdlets containing \"Set-CsClsConfiguration\". It can be used to verify which roles have permissions to modify the Centralized Logging Service configuration. The result is filtered using `Where-Object` to find roles that have the specified cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Set-CsClsConfiguration\"}\n```\n\n----------------------------------------\n\nTITLE: Running Network Test in Walkie Talkie\nDESCRIPTION: This snippet describes how to check the network connection quality within the Walkie Talkie app in Microsoft Teams.  It guides the user through the steps to access the network test, which provides information about latency and jitter. Poor network quality can cause interruptions, delays, or loss of communication.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/walkie-talkie-troubleshoot.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTo check the network connection, ask users to run the network test in Walkie Talkie. Have them go to their profile picture in Teams, and then tap **Settings** > **Walkie Talkie** > **Test Network Quality**.\n```\n\n----------------------------------------\n\nTITLE: Configure SLA group Busy Option - PowerShell\nDESCRIPTION: Configures the behavior when the maximum number of concurrent calls for a Shared Line Appearance (SLA) group is reached. Options include Forwarding calls to a target user or phone number, or sending the caller to voicemail.  The Target parameter is required when BusyOption is set to Forward, and the target can be a user's SIP address or a phone number.  The other possible parameter for `BusyOption` is `Voicemail`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-shared-line-appearance.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsSlaConfiguration -Identity <IdentityOfGroup> -BusyOption <Option> [-Target <TargetUserOrPhoneNumber>]\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsSlaConfiguration -Identity SLAGroup1 -BusyOption Forward -Target tel:+2025551234\n```\n\n----------------------------------------\n\nTITLE: Managing Online Schedule using PowerShell\nDESCRIPTION: These cmdlets manage online schedules and they were fixed to work in the European date-time format.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_112\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsOnlineSchedule\n```\n\n----------------------------------------\n\nTITLE: CQD URL Filter - Is Teams\nDESCRIPTION: This snippet shows how to add a dashboard-level filter to the CQD URL to filter by the 'Is Teams' parameter. It demonstrates how to append a filter parameter to the URL, specifying the data model name and value (TRUE or FALSE) to filter by, which helps in focusing on Teams-specific data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cqd-data-and-reports.md#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\n/filter/[AllStreams].[Is Teams]|[TRUE | FALSE]\n```\n\n----------------------------------------\n\nTITLE: Install Central Management Database - Enterprise Edition - PowerShell\nDESCRIPTION: This PowerShell command installs the Central Management Database on the specified SQL Server for an Enterprise Edition Front End pool. It creates the new Central Management store in the Skype for Business Server 2019 SQL Server database. Requires the FQDN of the SQL Server and the SQL instance name as parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-the-central-management-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-CsDatabase -CentralManagementDatabase -SQLServerFQDN <FQDN of your SQL Server> -SQLInstanceName <name of instance>\n```\n\n----------------------------------------\n\nTITLE: Grant a Tenant Dial Plan to a User\nDESCRIPTION: This command assigns a tenant dial plan to a specific user using the Grant-CsTenantDialPlan cmdlet. It sets the policy name for the user's dial plan. The Identity parameter specifies the user's email address, and the PolicyName parameter specifies the name of the dial plan.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n  Grant-CsTenantDialPlan -Identity amos.marble@contoso.com -PolicyName RedmondDialPlan\n```\n\n----------------------------------------\n\nTITLE: Enable VbSS globally - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies the global conferencing policy to enable Video-Based Screen Sharing (VbSS) by setting the ApplicationSharingMode to VideoWithFallback. This affects all users without an assigned policy. This command needs to be executed in the Skype for Business Management Console.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/video-based-screen-sharing.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingPolicy -ApplicationSharingMode VideoWithFallback\n```\n\n----------------------------------------\n\nTITLE: Get All Channels of a Team using PowerShell\nDESCRIPTION: This cmdlet is used to retrieve all channels of a specific team.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_100\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-TeamAllChannel\n```\n\n----------------------------------------\n\nTITLE: Checking PowerShell Version - PowerShell\nDESCRIPTION: This command retrieves the PowerShell version installed on the system by accessing the `$PSVersionTable.PSVersion` property. It's a quick way to verify if the installed version meets the minimum requirements for the Microsoft Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-install.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$PSVersionTable.PSVersion\n```\n\n----------------------------------------\n\nTITLE: Getting Online User - PowerShell\nDESCRIPTION: This snippet Releases updates to Get-CsOnlineUser in commercial environments to get unlicensed users and change AccountType as Unknown is renamed to IneligibleUser using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_62\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Update User-Specific Teams Files Policy - PowerShell\nDESCRIPTION: This PowerShell command modifies the existing Teams Files policy named `UserPolicy`, setting the `NativeFileEntryPoints` parameter to `Enabled`. This changes the policy for all users assigned to `UserPolicy`. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-off-teams-native-file-upload-policy.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsFilesPolicy -Identity UserPolicy -NativeFileEntryPoints Enabled\n```\n\n----------------------------------------\n\nTITLE: Granting Setup Permissions - PowerShell\nDESCRIPTION: This PowerShell command grants setup permissions to a specific Active Directory container using the Grant-CsSetupPermission cmdlet. It specifies the distinguished name of the container using the -ComputerOU parameter. This is used to allow members of the RTCUniversalServerAdmins group to install and enable Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/test-admin-topology-rights.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsSetupPermission -ComputerOU \"cn=Computers,dc=litwareinc,dc=com\"\n```\n\n----------------------------------------\n\nTITLE: Configure Call Data Connector (Existing Connection)\nDESCRIPTION: This PowerShell command retrieves an existing online data collector and sets the tenant ID. It's used when a call data connection already exists for the tenant. Replace <tenant_id> with the actual tenant ID. It requires the Microsoft Teams PowerShell module and administrator privileges.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCloudCallDataConnection | Set-CsCloudCallDataConnector -TenantId <tenant_id>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Version Policy Rules - PowerShell\nDESCRIPTION: This cmdlet retrieves client version policy rules. The first example filters the rules based on \"Global/*\", and the second one retrieves a rule based on its specific Identity (GUID).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsClientVersionPolicyRule -Filter \"Global/*\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsClientVersionPolicyRule -Identity \"Global/2336c611-a243-4c5d-994b-eea8a524d0e4\"\n```\n\n----------------------------------------\n\nTITLE: Get-CsAdDomain Example\nDESCRIPTION: This example shows how to use the Get-CsAdDomain command to check the contoso.local domain and specify the GlobalSettingsDomainController.  The expected result is LC_DOMAINSETTINGS_STATE_READY if the domain has successfully replicated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/install/prepare-active-directory.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsAdDomain -Domain contoso.local -GlobalSettingsDomainController dc.contoso.local\n```\n\n----------------------------------------\n\nTITLE: Refreshing Group Policy using Gpupdate.exe, Windows\nDESCRIPTION: This command forces an immediate refresh of Group Policy on the client computer. This ensures that the newly created or modified QoS policies are applied without waiting for the periodic automatic refresh. It requires administrator privileges to execute successfully.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-skype-clients.md#_snippet_7\n\nLANGUAGE: Batchfile\nCODE:\n```\nGpupdate.exe /force\n```\n\n----------------------------------------\n\nTITLE: Extending Hospital Team Template using Microsoft Graph PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to extend the 'healthcareHospital' team template with additional channels using the Microsoft Graph API. It defines the template ID, display name, description, a list of channels (including Ambulatory, Anesthesiology, etc.), and an app ID. This allows for customization of the template to fit specific hospital needs, such as adding channels for different departments.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/expand-teams-across-your-org/healthcare/healthcare-templates-admin-console.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n{ \n          \"template@odata.bind\": \"https://graph.microsoft.com/beta/teamsTemplates('healthcareHospital')\",\n          \"DisplayName\": \"Contoso Hospital\",\n          \"Description\": \"Team for all staff in Contoso Hospital\",\n          \"Channels\": [\n            {\n              \"displayName\": \"Ambulatory\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Anesthesiology\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Cardiology\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"CCU\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Ear, Nose, and Throat\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Emergency Care\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Family Medicine\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Gynecology\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"ICU\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Mother-Baby\",\n              \"IsFavoriteByDefault\": false\n            }, \n            {\n              \"displayName\": \"Neonatal\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Neurology\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Oncology\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Ophthalmology\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"PACU\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Psychiatric\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Radiology\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Rehabilitation\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Surgical\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Urology\",\n              \"IsFavoriteByDefault\": false\n            },\n            {\n              \"displayName\": \"Women's Health\",\n              \"IsFavoriteByDefault\": false\n            }\n          ],\n          \"Apps\": [\n            {\n              \"Id\": \"1542629c-01b3-4a6d-8f76-1938b779e48d\"\n            }\n          ]\n          }\n\n```\n\n----------------------------------------\n\nTITLE: Display detailed provider info - PowerShell\nDESCRIPTION: This PowerShell command retrieves and displays detailed information about the providers associated with a Centralized Logging Service (CLS) scenario. It uses `Get-CsClsScenario` to get the scenario, then uses `Select-Object` with `-ExpandProperty Provider` to expand the `Provider` property and display each provider's details in a multi-line format, including name, logging type, logging level, flags, GUID, and role.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClsScenario -Identity \"global/CAA\" | Select-Object -ExpandProperty Provider\n```\n\n----------------------------------------\n\nTITLE: Defining a Trusted Application for SEFAUtil in Skype for Business Server\nDESCRIPTION: This command defines SEFAUtil as a new trusted application within the Skype for Business Server topology using the Skype for Business Server Management Shell. It requires specifying an ApplicationId (sefautil), the TrustedApplicationPoolFqdn, and a port number. A different port can be used if needed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTrustedApplication -ApplicationId sefautil -TrustedApplicationPoolFqdn <Pool FQDN> -Port 7489\n```\n\n----------------------------------------\n\nTITLE: Enable Federation and Public IM Connectivity in PowerShell\nDESCRIPTION: This PowerShell cmdlet enables federation and public IM connectivity by setting the AllowFederatedUsers property of the CsAccessEdgeConfiguration to True. It requires the Skype for Business Server Management Shell or a remote PowerShell session with appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-federation-and-public-im-connectivity.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -AllowFederatedUsers $True\n```\n\n----------------------------------------\n\nTITLE: Test UCWA Conference with Credentials - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create secure string credentials and pass them to the Test-CsUcwaConference cmdlet. It includes commands to convert passwords to secure strings and create PSCredential objects for each user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$passwd1 = ConvertTo-SecureString \"Password01\" -AsPlainText -Force\n$passwd2 = ConvertTo-SecureString \"Password02\" -AsPlainText -Force\n$testuser1 = New-Object Management.Automation.PSCredential(\"contoso\\UserName1\", $passwd1)\n$testuser2 = New-Object Management.Automation.PSCredential(\"contoso\\UserName2\", $passwd2)\nTest-CsUcwaConference -TargetFqdn pool01.contoso.com -Authentication Negotiate -OrganizerSipAddress sip:UserName1@contoso.com -OrganizerCredential $testuser1 -ParticipantSipAddress sip:UserName2@contoso.com -ParticipantCredential $testuser2 -v\n```\n\n----------------------------------------\n\nTITLE: Getting Voice Route Information with PowerShell\nDESCRIPTION: This snippet retrieves voice route information using the `Get-CsOnlineVoiceRoute` cmdlet and filters the results based on priority.  It's designed to verify the configuration of the voice routes.  The use of `Where-Object` allows filtering based on criteria like priority.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineVoiceRoute | Where-Object {($_.priority -eq 1) -or ($_.priority -eq 2) or ($_.priority -eq 4) -Identity \"Redmond 1\" -NumberPattern \"^\\+1(425|206) (\\d{7})$\" -OnlinePstnGatewayList sbc1.contoso.com, sbc2.contoso.com -Priority 1 -OnlinePstnUsages \"US and Canada\"\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Features for Directors - PowerShell\nDESCRIPTION: This PowerShell script installs the necessary Windows features for Directors in a Skype for Business Server deployment, focusing on web server components, .NET framework extensions, ISAPI support, and media foundation. The script ensures Directors have the required functionalities to operate correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/plan/system-requirements.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-WindowsFeature RSAT-ADDS, Web-Server, Web-Static-Content, Web-Default-Doc, Web-Http-Errors, Web-Asp-Net, Web-Net-Ext, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Http-Logging, Web-Log-Libraries, Web-Request-Monitor, Web-Http-Tracing, Web-Basic-Auth, Web-Windows-Auth, Web-Client-Auth, Web-Filtering, Web-Stat-Compression, NET-WCF-HTTP-Activation45, Web-Asp-Net45, Web-Scripting-Tools, Web-Mgmt-Compat, Server-Media-Foundation, Telnet-Client\n```\n\n----------------------------------------\n\nTITLE: Create NorthAmerica_APAC_Route using New-CsNetworkInterRegionRoute (PowerShell)\nDESCRIPTION: This PowerShell command creates a network interregional route named 'NorthAmerica_APAC_Route' between the 'NorthAmerica' and 'APAC' network regions. It uses two network region links, 'NA-EMEA-LINK' and 'EMEA-APAC-LINK', as there is no direct link between North America and APAC. It relies on the New-CsNetworkInterRegionRoute cmdlet to define the route. The NetworkRegionID1 and NetworkRegionID2 parameters specify the two network regions to be connected, and the NetworkRegionLinkIDs parameter specifies the links to be used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-network-interregional-routes.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkInterRegionRoute -Identity NorthAmerica_APAC_Route -NetworkRegionID1 NorthAmerica -NetworkRegionID2 APAC -NetworkRegionLinkIDs \"NA-EMEA-LINK, EMEA-APAC-LINK\"\n```\n\n----------------------------------------\n\nTITLE: Setting XMPP Federation Route using PowerShell\nDESCRIPTION: This PowerShell cmdlet re-points the XMPP federation route back to the original Edge server after it has been restored. It takes the site name and the FQDN of the Edge server as parameters, effectively redirecting XMPP traffic back to the original Edge pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsSite Site1 -XmppExternalFederationRoute EdgeServer1.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Updating Call Queue - PowerShell\nDESCRIPTION: This snippet Adds new parameters to [Set|New]-CsCallQueue cmdlets for configuring courtesy callback using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_66\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set|New]-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Install database updates in Skype for Business with PowerShell\nDESCRIPTION: This PowerShell cmdlet installs or updates the databases, ensuring that the SQL logins are correctly configured on each of the replicas in the AlwaysOn Availability Group. It is run after a failover to a secondary replica.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/alwayson-availability-group.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-CsDatabase -Update\n```\n\n----------------------------------------\n\nTITLE: Get-CsAdDomain Cmdlet Syntax - PowerShell\nDESCRIPTION: This cmdlet retrieves information about the state of a domain as it pertains to Skype for Business Server.  It requires the Skype for Business Server Management Shell to be open. Key parameters include -Domain, -DomainController, -GlobalCatalog, and -GlobalSettingsDomainController. A return value of LC_DOMAIN_SETTINGS_STATE_READY indicates success.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/2019/depwiz/ms.lync.dep.DeployMainVerifyDomainPrep.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdDomain [-Domain <Fqdn>] [-DomainController <Fqdn>] [-GlobalCatalog <Fqdn>] [-GlobalSettingsDomainController <Fqdn>]\n```\n\n----------------------------------------\n\nTITLE: Restoring Conference Data - PowerShell\nDESCRIPTION: This command is used to restore conference data for a specified pool using the Backup Service.  It synchronizes the `ConfServices.DataConf` module.  The `-PoolFqdn` parameter should be the FQDN of the backup pool from which to restore the data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/configuring-and-monitoring-the-backup-service.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsBackupServiceSync -PoolFqdn \\<Pool2 FQDN> -BackupModule ConfServices.DataConf\n```\n\n----------------------------------------\n\nTITLE: Recommended IPsec Exceptions - Skype for Business\nDESCRIPTION: This table provides recommended IPsec exception settings for Skype for Business Server to avoid delays in media port allocation.  It specifies source/destination IPs, protocols (UDP and TCP), source/destination ports (Any), and sets authentication to 'Don't authenticate'.  The exceptions cover A/V Edge Servers, Mediation Servers, Conferencing Attendant, Front End Servers, Exchange Unified Messaging, and Application Sharing Servers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/network-requirements/network-requirements.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n|Rule name |Source IP |Destination IP |Protocol |Source port |Destination port |Authentication Requirement |\n|:--- |:--- |:--- |:--- |:---|:---|:--- |\n|A/V Edge Server Internal Inbound|Any  |A/V Edge Server Internal|UDP and TCP|Any |Any |Don't authenticate|\n|A/V Edge Server External Inbound|Any  |A/V Edge Server External|UDP and TCP|Any |Any |Don't authenticate|\n|A/V Edge Server Internal Outbound|A/V Edge Server Internal  |A/V Edge Server External |UDP and TCP|Any |Any |Don't authenticate|\n|A/V Edge Server External Outbound|A/V Edge Server External |Any |UDP and TCP|Any |Any |Don't authenticate|\n|Mediation Server Inbound|Any  |Mediation Server(s) |UDP and TCP|Any |Any |Don't authenticate|\n|Mediation Server Outbound|Mediation Server(s)  |Any|UDP and TCP|Any |Any |Don't authenticate|\n|Conferencing Attendant Inbound|Any  |Front End Server running Conferencing Attendant |UDP and TCP|Any |Any |Don't authenticate|\n|Conferencing Attendant Outbound|Front End Server running Conferencing Attendant  |Any|UDP and TCP|Any |Any |Don't authenticate|\n|A/V Conferencing Inbound|Any|Front End Servers|UDP and TCP|Any |Any |Don't authenticate|\n|A/V Conferencing Outbound|Front End Servers|Any|UDP and TCP|Any |Any |Don't authenticate|\n|Exchange Inbound|Any|Exchange Unified Messaging|UDP and TCP|Any |Any |Don't authenticate|\n|Application Sharing Servers Inbound|Any|Application Sharing Servers|UDP and TCP|Any |Any |Don't authenticate|\n|Application Sharing Server Outbound|Application Sharing Servers| Any |UDP and TCP|Any |Any |Don't authenticate|\n|Exchange Outbound|Exchange Unified Messaging|Any|UDP and TCP|Any |Any |Don't authenticate|\n|Clients| Any  |Any|UDP and TCP|Any |Any |Don't authenticate|\n|         |         |         |         |         |         |         |\n```\n\n----------------------------------------\n\nTITLE: Test Unified Contact Store Migration - PowerShell\nDESCRIPTION: This PowerShell cmdlet tests whether a user's contacts have been migrated to the unified contact store. It checks the user's SIP address and the target FQDN.  Replace the UserSipAddress and TargetFqdn with valid values.  If the test succeeds, the user's contacts have been migrated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-unified-contact-store.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nTest-CsUnifiedContactStore -UserSipAddress \"sip:kenmyer@litwareinc.com\" -TargetFqdn \"atl-cs-001.litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Meeting Template in Teams Admin Center\nDESCRIPTION: This snippet outlines how to create a custom meeting template within the Teams admin center. The steps involve navigating to the Meeting templates section, adding a new template, assigning a previously created sensitivity label, and configuring meeting options like \"Manage what attendees see\".  Meeting options can be locked or hidden to prevent organizers from changing or viewing them, thus enforcing settings for sensitive meetings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-meetings-sensitive-protection.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1. In the Teams admin center, expand **Meetings** and select **Meeting templates**.\n2. Select **Add**\n3. Type a name and description for the template.\n4. In the **Apply sensitivity label** section, choose the label you created above.\n5. Select **Apply sensitivity label**, and then select **Lock**.\n6. Under **Meeting engagement**, set **Manage what attendees see** to **On**, then select it and select **Lock**.\n7. Change any other options if desired.\n8. To prevent the meeting organizer from changing an option, select the option and then select **lock**.\n9. To prevent the meeting organizer from seeing an option, select the option and then select **Hide**.\n10. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Set Teams Events Policy to use Partner eCDN - PowerShell\nDESCRIPTION: This PowerShell command configures the Teams events policy to allow Premium town hall organizers to utilize a partner eCDN solution instead of the Microsoft eCDN. It uses the `Set-CsTeamsEventsPolicy` cmdlet and sets the `-UseMicrosoftECDN` parameter to `$false` for the specified policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/streaming-ecdn-enterprise-content-delivery-network.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -UseMicrosoftECDN $false\n```\n\n----------------------------------------\n\nTITLE: Granting Client Policy to User - PowerShell\nDESCRIPTION: This PowerShell command assigns a client policy to a specific user.  The `PolicyName` parameter specifies the policy to be assigned, and should match the `Identity` used when the policy was created.  Requires Skype for Business Server PowerShell module and a valid user SIP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsClientPolicy username@contoso.com -PolicyName UseLyncUI\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Version Policy Details - PowerShell\nDESCRIPTION: This cmdlet retrieves details of a specific client version policy using its Identity. The Identity parameter specifies the policy to retrieve. This example retrieves the policy configured for the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsClientVersionPolicy -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Create App-Powered Task using Graph API - HTTP Request\nDESCRIPTION: This snippet demonstrates an HTTP POST request to create an app-powered task using the Microsoft Graph API. The request includes the task title, target group, business scenario properties, assignments, and details with a reference to a Teams Hosted App. This request needs the businessScenarioId and the groupId of the team.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/app-powered-tasks-in-planner.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://graph.microsoft.com/beta/solutions/businessScenarios/{your-business-scenario-ID}/planner/tasks \n\n{\n\"title\": \"{Task title}\",\n    \"target\": {\n        \"@odata.type\": \"#microsoft.graph.businessScenarioGroupTarget\",\n        \"taskTargetKind\": \"group\",\n        \"groupId\": \"{group ID of the team where you want to create the task}\"\n    },\n    \"businessScenarioProperties\": {\n        \"externalObjectId\": \"{any unique ID, for example, the ID of the object in your destination app}\",\n        \"externalBucketId\": \"{any bucket ID from planConfiguration of your business scenario}\"\n    },\n    \"assignments\": {\n        \"{user ID of user you want to assign the task to}\": {\n            \"@odata.type\": \"#microsoft.graph.plannerAssignment\",\n            \"orderHint\": \" !\"\n        }\n    },\n    \"details\": {\n        \"references\": {\n            \"{reference URL}\": {\n                \"@odata.type\": \"microsoft.graph.plannerExternalReference\",\n                \"alias\": \"{destination app name}\",\n                \"previewPriority\": \" !\",\n                \"type\": \"TeamsHostedApp\"\n            }\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Client Identifier in PowerShell\nDESCRIPTION: This snippet generates a new GUID (Globally Unique Identifier) to be used as the client identifier for the application. It uses the `[guid]::NewGuid()` method to create a new GUID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$clientIdentifier = [guid]::NewGuid()\n```\n\n----------------------------------------\n\nTITLE: Disabling Email Notifications via PowerShell\nDESCRIPTION: This PowerShell snippet disables the automatic sending of emails to users when their dial-in settings change in Microsoft Teams. It utilizes the `Set-CsOnlineDialInConferencingTenantSettings` cmdlet with the `-AutomaticallySendEmailsToUsers` parameter set to `$False`. This cmdlet is part of the Microsoft Teams PowerShell module, which needs to be installed and connected to the Microsoft 365 tenant. The effect is that users will no longer receive automated emails regarding changes to their audio conferencing settings, requiring administrators to communicate these changes manually.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/emails-sent-to-users-when-their-settings-change-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingTenantSettings -AutomaticallySendEmailsToUsers $False\n```\n\n----------------------------------------\n\nTITLE: Configure Skype for Business Service Principal Name - PowerShell\nDESCRIPTION: These commands configure the Service Principal Names (SPN) for the Skype for Business Service Principal. This involves retrieving the service principal, adding the external web services URL, and then updating the service principal with the new SPNs. \"Pool1ExternalWebFQDN.contoso.com\" should be replaced with the actual external web services URL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n$lyncSP = Get-MSOLServicePrincipal -AppPrincipalID 00000004-0000-0ff1-ce00-000000000000\n$lyncSP.ServicePrincipalNames.Add(\"00000004-0000-0ff1-ce00-000000000000/Pool1ExternalWebFQDN.contoso.com\")\nSet-MSOLServicePrincipal -AppPrincipalID 00000004-0000-0ff1-ce00-000000000000 -ServicePrincipalNames $lyncSP.ServicePrincipalNames\n```\n\n----------------------------------------\n\nTITLE: Getting Backup Service Configuration - PowerShell\nDESCRIPTION: This command retrieves the current configuration settings of the Skype for Business Server Backup Service. It does not require any input parameters and outputs the current configuration, including the SyncInterval.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/configuring-and-monitoring-the-backup-service.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsBackupServiceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Get Trusted Application using PowerShell\nDESCRIPTION: This PowerShell command retrieves the configuration details of a specific trusted application in Skype for Business Server. It uses the Identity parameter to locate the application based on its fully qualified domain name and application identifier.  The returned information confirms the application's creation and configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrustedApplication -Identity \"atl-watcher-001.litwareinc.com/urn:application:STWatcherNode\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Unified Messaging Mailbox Policy\nDESCRIPTION: This snippet demonstrates how to create a new Unified Messaging mailbox policy using the Exchange Management Shell. It requires the Exchange Management Shell and determines the allowed in-country/region groups.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/exchangeunified-messaging-for-voice-mail.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-UMMailboxPolicy -Name \"RedmondMailboxPolicy\" -AllowedInCountryOrRegionGroups \"Anywhere\"\n```\n\n----------------------------------------\n\nTITLE: Listing Mobility Policies with Get-CsMobilityPolicy in PowerShell\nDESCRIPTION: This snippet retrieves a list of all mobility policies in Skype for Business using the `Get-CsMobilityPolicy` cmdlet. No parameters are required. It returns a list of mobility policies and their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_33\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsMobilityPolicy\n```\n\n----------------------------------------\n\nTITLE: Enable NDI Streaming with PowerShell\nDESCRIPTION: This PowerShell script enables NDI streaming for users associated with a specific Teams meeting policy.  The `Set-CsTeamsMeetingPolicy` cmdlet is used to modify the specified policy by setting the `AllowNDIStreaming` parameter to `$true`. The `<policy name>` placeholder should be replaced with the actual name of the Teams meeting policy to be modified.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/use-NDI-in-meetings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowNDIStreaming $true\n```\n\n----------------------------------------\n\nTITLE: Debug Data Conference - PowerShell\nDESCRIPTION: Returns diagnostic information for the data conferencing capabilities included in Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_61\n\nLANGUAGE: PowerShell\nCODE:\n```\nDebug-CsDataConference\n```\n\n----------------------------------------\n\nTITLE: CLS Logging Search on a Specific Computer - PowerShell\nDESCRIPTION: This command initiates a search using the Centralized Logging Service (CLS) on a specific computer. The `-Computers` parameter specifies the fully qualified domain name (FQDN) of the computer. The results are saved to the specified file path using the `-OutputFilePath` parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Computers <string value of computer names> -OutputFilePath <string value of path and file to write the output file>\n```\n\n----------------------------------------\n\nTITLE: Managing Cloud Call Data Connection using PowerShell\nDESCRIPTION: These cmdlets are modernized versions for managing cloud call data connections. They are used to create and retrieve cloud call data connections.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_98\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Get]-CsCloudCallDataConnection\n```\n\n----------------------------------------\n\nTITLE: Get Skype for Business Web Service Configuration\nDESCRIPTION: This PowerShell command retrieves the web service configuration for Skype for Business Server and displays the UseWsFedPassiveAuth and WsFedPassiveMetadataUri values to verify that they are set correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWebServiceConfiguration -identity \"Service:WebServer:SfBPool01.contoso.com\" | format-list UseWsFedPassiveAuth, WsFedPassiveMetadataUri\n```\n\n----------------------------------------\n\nTITLE: Modify an existing Exchange room mailbox\nDESCRIPTION: This PowerShell command modifies an existing room mailbox to enable it as a resource account for Microsoft Teams Rooms. It requires specifying the RoomMailboxIdentity and a password.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/mtr-device-config-account-include.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Mailbox -Identity <RoomMailboxIdentity> -EnableRoomMailboxAccount $true -RoomMailboxPassword (ConvertTo-SecureString -String '<Password>' -AsPlainText -Force)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Mailbox -Identity ConferenceRoom02 -EnableRoomMailboxAccount $true -RoomMailboxPassword (ConvertTo-SecureString -String '9898P@$$W0rd' -AsPlainText -Force)\n```\n\n----------------------------------------\n\nTITLE: Disabling App Interaction for Anonymous Users in Teams Meetings\nDESCRIPTION: This snippet describes how to disable the ability for anonymous users to interact with apps in Microsoft Teams meetings using the Teams admin center. This setting can be toggled to prevent anonymous users from using apps within meetings, providing more control over meeting app usage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/apps-external-users.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Sign in to the Teams admin center and access **Meetings** > **[Meeting settings](https://admin.teams.microsoft.com/meetings/settings)**.\n\n2. Under **Participants**, change the toggle for **Anonymous users can interact with apps in meetings** to **Off**.\n\n3. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Shifts Connection Instance using PowerShell\nDESCRIPTION: These cmdlets manage Teams Shifts connection instances, including creating, setting, and validating connections, particularly for UKG Dimensions integration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_94\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CSTeamsShiftsConnectionInstance, Test-CsTeamsShiftsConnectionValidate\n```\n\n----------------------------------------\n\nTITLE: Enable Purging of All Archived Data - PowerShell\nDESCRIPTION: This PowerShell command enables the purging of all archived data in Skype for Business Server for the specified site. After running this command, the server will purge all archiving records older than the value specified for the KeepArchivingDataForDays parameter.  The -Identity parameter specifies the site to configure. The -EnablePurging parameter is set to $True to enable the purging.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/purging-of-archived-data.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingConfiguration -Identity \"site:Redmond\" -EnablePurging $True\n```\n\n----------------------------------------\n\nTITLE: Creating a Location Policy with New-CsLocationPolicy (PowerShell)\nDESCRIPTION: This snippet creates a new location policy in Skype for Business Server. The `-Identity` parameter specifies the unique identifier for the policy, and `-EnhancedEmergencyServicesEnabled` enables or disables E9-1-1 functionality. The example creates a site-scoped policy named \"Redmond\" with E9-1-1 enabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsLocationPolicy -Identity site:Redmond -EnhancedEmergencyServicesEnabled $True\n```\n\n----------------------------------------\n\nTITLE: Remove Dial-In Conferencing DTMF Configuration - PowerShell\nDESCRIPTION: Removes an existing collection of dual-tone multi-frequency (DTMF) signaling settings used for dial-in conferencing in Skype for Business Server. Requires identifying the DTMF configuration to remove. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_36\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsDialInConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Saving Rich Log to HTML - PowerShell\nDESCRIPTION: This PowerShell command converts the rich logging information stored in the RegistrationTest variable to HTML format and saves it to a file named Registration.html in the C:\\Logs directory. This provides a human-readable format for troubleshooting information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\n$RegistrationTest.ToHTML() | Out-File C:\\Logs\\Registration.html\n```\n\n----------------------------------------\n\nTITLE: Getting Archiving Configuration Details using Get-CsArchivingConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves the details of a specific Archiving Configuration based on its identity.  The `-Identity` parameter specifies the site (e.g., `site:Redmond`). It returns an Archiving Configuration object with all its properties for the specified site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsArchivingConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: List joinedTeams using Microsoft Graph API\nDESCRIPTION: Lists the Teams that the user has joined, using the Microsoft Graph API. Requires user authentication. Output: List of joined teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_14\n\nLANGUAGE: HTTP\nCODE:\n```\n[List joinedTeams](/graph/api/user-list-joinedteams).\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Data API in web.config (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) for the Data API in the web.config file. It specifies the trusted domains that are allowed to access the Data API, using the `corsTrustedOrigin` application setting. Remember to include the exact protocol, host name, and port (if any), without a trailing forward slash. Multiple entries should be separated by commas.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/data-api.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <appSettings>\n    <add key=\"corsTrustedOrigin\" value=\"https://<trusted-server>,http://<another-trusted-domain>:8080\" /> <!-- Domains which are trusted to get the data -->\n    <add key=\"QoEDataLib.DebugMode\" value=\"True\" /> <!-- Setting this to True, allows seeing of the detail logs in status page -->\n...  </appSettings>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Credential - PowerShell\nDESCRIPTION: This command removes a certificate from a specified service principal. The -AppPrincipalId parameter identifies the service principal, and the -KeyId parameter specifies the certificate to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-MsolServicePrincipalCredential -AppPrincipalId 00000004-0000-0ff1-ce00-000000000000 -KeyId bc2795f3-2387-4543-a95d-f92c85c7a1b0\n```\n\n----------------------------------------\n\nTITLE: Filter Audio Sessions by User in PowerShell\nDESCRIPTION: This PowerShell command filters the User Activity Report data to include only sessions that used audio as a modality. It then groups these audio-only sessions by the 'From user', selects the count and name of each user, and sorts the results in descending order of session count. This helps identify the most active users in audio-based communication.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/user-activity-report.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x | Where-Object {$_.Modalities -match \"audio\"} | Group-Object \"From user\" | Select Count, Name | Sort-Object Count -Descending\n```\n\n----------------------------------------\n\nTITLE: Managing TeamsBYODAndDesks Policy\nDESCRIPTION: These PowerShell commands demonstrate how to manage the TeamsBYODAndDesks policy. They include creating, setting, granting, and removing the policy. `Connect-MicrosoftTeams` is a necessary prerequisite to authenticate before policy management.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/bookable-desks.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module MicrosoftTeams\nConnect-MicrosoftTeams\nGet-CSTeamsBYODAndDesksPolicy\nSet-CSTeamsBYODAndDesksPolicy -Identity Test -DeviceDataCollection Enabled\nGrant-CSTeamsBYODAndDesksPolicy -PolicyName Test -Identity testuser@test.onmicrosoft.com\nGrant-CSTeamsBYODAndDesksPolicy -Group \nGrant-CSTeamsBYODAndDesksPolicy -Global -PolicyName Test\nRemove-CSTeamsBYODAndDesksPolicy -Identity Test\n```\n\n----------------------------------------\n\nTITLE: Get Details of a File Transfer Filter using Get-CsFileTransferFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves details of a specific file transfer filter configuration in Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the filter to retrieve.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsFileTransferFilterConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Features for Front End and Standard Edition Servers - PowerShell\nDESCRIPTION: This PowerShell script installs the required Windows features and roles for Front End Servers and Standard Edition servers in a Skype for Business Server 2015 deployment. It adds features such as .NET Framework Core, Active Directory tools, Windows Identity Foundation, IIS components, Media Foundation, and other networking and management tools. The script assumes either online access to Windows Update or local availability of source files in a specific order.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/requirements-for-your-environment/server-requirements.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-WindowsFeature NET-Framework-Core, RSAT-ADDS, Windows-Identity-Foundation, Web-Server, Web-Static-Content, Web-Default-Doc, Web-Http-Errors, Web-Dir-Browsing, Web-Asp-Net, Web-Net-Ext, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Http-Logging, Web-Log-Libraries, Web-Request-Monitor, Web-Http-Tracing, Web-Basic-Auth, Web-Windows-Auth, Web-Client-Auth, Web-Filtering, Web-Stat-Compression, Web-Dyn-Compression, NET-WCF-HTTP-Activation45, Web-Asp-Net45, Web-Mgmt-Tools, Web-Scripting-Tools, Web-Mgmt-Compat, Server-Media-Foundation, BITS, Desktop-Experience, Telnet-Client\n```\n\n----------------------------------------\n\nTITLE: Disable Group Call Pickup - SEFAUtil\nDESCRIPTION: This example shows how to disable group call pickup for a given user using the SEFAUtil command-line tool. The command takes the target user's SIP address as input and uses the /disablegrouppickup switch. The output shows the updated user settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_28\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /disablegrouppickup\n```\n\n----------------------------------------\n\nTITLE: Compliance Recording Bot Registration (GitHub Sample)\nDESCRIPTION: This link points to a GitHub repository containing a sample compliance recording bot. The sample demonstrates the necessary steps for developing and deploying a bot that integrates with Microsoft Teams for compliance recording purposes. It uses Microsoft Graph APIs and requires registration and configuration within Azure.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-recording-compliance.md#_snippet_0\n\nLANGUAGE: N/A\nCODE:\n```\n[deploying and testing a sample bot](https://github.com/microsoftgraph/microsoft-graph-comms-samples/tree/a3943bafd73ce0df780c0e1ac3428e3de13a101f/Samples/BetaSamples/LocalMediaSamples/ComplianceRecordingBot#bot-registration)\n```\n\n----------------------------------------\n\nTITLE: Example SIP Invite Message - From Header\nDESCRIPTION: This snippet shows an example of the From Header in a SIP Invite message for an incoming call. The phone number must contain a plus sign (+).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-sip.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nFrom: <sip:+17168712781@sbc1.adatum.biz;transport=udp;tag=1c747237679\n```\n\n----------------------------------------\n\nTITLE: Removing Provider from CLS Scenario (PowerShell)\nDESCRIPTION: This snippet shows how to remove a provider from an existing CLS scenario using the `Edit-CsClsScenario` cmdlet. The `-ScenarioName` and `-ProviderName` parameters specify the scenario and provider to remove, and the `-Remove` parameter indicates the removal operation. Positional parameters are used for `ScenarioName` and `ProviderName`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nEdit-CsClsScenario -ScenarioName <string of the scenario to edit> -ProviderName <string of the provider to remove> -Remove\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nEdit-CsClsScenario -ScenarioName AlwaysOn -ProviderName ChatServer -Remove\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nEdit-CsClsScenario AlwaysOn ChatServer -Remove\n```\n\n----------------------------------------\n\nTITLE: Creating a New Archiving Policy in Skype for Business Server (PowerShell)\nDESCRIPTION: This PowerShell command creates a new per-user archiving policy named RedmondArchivingPolicy. It uses the New-CsArchivingPolicy cmdlet and sets ArchiveInternal and ArchiveExternal properties to $True, enabling archiving for internal and external communications.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-exchange-archiving.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsArchivingPolicy -Identity \"RedmondArchivingPolicy\" -ArchiveInternal $True -ArchiveExternal $True\n```\n\n----------------------------------------\n\nTITLE: Managing Teams External Access Configuration - PowerShell\nDESCRIPTION: This snippet showcases the release of `[Get|Set]-CsTeamsExternalAccessConfiguration` cmdlets for managing Teams external access configuration using the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_55\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsTeamsExternalAccessConfiguration\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with Application-Based Authentication\nDESCRIPTION: This command allows connecting to Microsoft Teams using application-based authentication. The supported cmdlets are being rolled out gradually.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_96\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Set External Access Policy for Response Group - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to configure the global external access policy for response group federation. It sets the `EnableOutsideAccess` parameter to `True`, allowing external users to access the response group. Note that global policy settings apply to all users unless a site or user policy overrides them.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsExternalAccessPolicy\n```\n\n----------------------------------------\n\nTITLE: Disable communications on archiving failure - PowerShell\nDESCRIPTION: This PowerShell command disables communications for the 'Redmond' site if an archiving failure occurs. It uses the Set-CsArchivingConfiguration cmdlet to set the BlockOnArchiveFailure parameter to $True.  This ensures that IM and web conferencing sessions are blocked when archiving is not possible.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/configure-options-to-handle-failures.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingConfiguration -Identity \"site:Redmond\" -BlockOnArchiveFailure $True\n```\n\n----------------------------------------\n\nTITLE: Get Conference Disclaimer - PowerShell\nDESCRIPTION: Returns information about the conference disclaimer used in an organization. The conference disclaimer is a message that is displayed to users who join the conference by using a hyperlink.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_48\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferenceDisclaimer\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Voicemail as Hosting Provider - PowerShell\nDESCRIPTION: This PowerShell cmdlet configures Cloud Voicemail as the hosting provider on a Front End Server. It defines the hosting provider's identity, enables the connection, specifies shared address space and proxy server details, and sets the verification level.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-cloud-voicemail.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsHostingProvider -Identity \"Exchange Online\" -Enabled $True -EnabledSharedAddressSpace $True -HostsOCSUsers $False -ProxyFqdn \"exap.um.outlook.com\" -IsLocal $False -VerificationLevel UseSourceVerification\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - Long Distance (US) (.NET Regex)\nDESCRIPTION: This normalization rule translates numbers with long distance prefixes (1) in the United States to E.164 format.  It utilizes a .NET Framework regular expression to match '1' followed by 10 digits, and prepends \"+\" to the matched 10 digits. The input is '1' followed by a 10 digit phone number, and the output is the E.164 formatted number. The first captured group ($1) is used as the complete translation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_5\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^1(\\d{10})$\n```\n\n----------------------------------------\n\nTITLE: Add Delegate and Set Up Call Forward to Delegates - SEFAUtil\nDESCRIPTION: This example shows how to add a delegate and set up call forwarding to delegates using the SEFAUtil command-line tool. The command takes the target user's SIP address and the delegate's SIP address as input, using the /adddelegate switch to add the delegate and the /fwdtodelegates switch to forward calls to the delegates. The output displays the forwarding calls to delegates settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /adddelegate:anders@contoso.com /fwdtodelegates\n```\n\n----------------------------------------\n\nTITLE: Validate Addresses in the Location Database - PowerShell\nDESCRIPTION: This cmdlet validates the addresses stored in the Skype for Business Server location database. It uses the `Get-CsLisCivicAddress` cmdlet to retrieve all civic addresses and then pipes them to the `Test-CsLisCivicAddress` cmdlet to validate and update the validation status.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsLisCivicAddress | Test-CsLisCivicAddress -UpdateValidationStatus\n```\n\n----------------------------------------\n\nTITLE: Listing Subnets using Get-CsNetworkSubnet in PowerShell\nDESCRIPTION: This cmdlet retrieves a list of all configured network subnets in Skype for Business. It requires no specific parameters and returns a comprehensive list of subnets and their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_22\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsNetworkSubnet\n```\n\n----------------------------------------\n\nTITLE: List Simple URL Configurations using Get-CsSimpleUrlConfiguration - PowerShell\nDESCRIPTION: This cmdlet retrieves information about the simple URL configurations.  The example retrieves the simple URLs configured in Skype for Business Server. It uses `Select-Object` to expand the `SimpleUrl` property.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-topology-menu.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsSimpleUrlConfiguration | Select-Object -ExpandProperty SimpleUrl\n```\n\n----------------------------------------\n\nTITLE: Updating a Bandwidth Policy with Set-CsNetworkBandwidthPolicyProfile (PowerShell)\nDESCRIPTION: This snippet modifies an existing bandwidth policy profile in Skype for Business Server. The `-Identity` parameter specifies the profile to modify, and `-VideoBWLimit` and `-VideoBWSessionLimit` parameters update the video bandwidth limits. The example modifies the profile named \"LowBWLimit\" to adjust video bandwidth limits.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsNetworkBandwidthPolicyProfile -Identity LowBWLimit -VideoBWLimit 2500 -VideoBWSessionLimit 300\n```\n\n----------------------------------------\n\nTITLE: Create Virtual Smart Card - Command Line - Windows\nDESCRIPTION: This command creates a new virtual smart card on Windows using the TpmVscMgr tool. It requires administrative privileges and a compatible TPM.  The `/name` parameter specifies the card name, `/pin` sets the user PIN (using `default` sets it to the default value), `/adminkey` sets the admin key, and `/generate` creates a new admin key.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nTpmVscMgr create /name MyVSC /pin default /adminkey random /generate\n```\n\n----------------------------------------\n\nTITLE: Get-CsTeamsShiftsConnectionWfm[User|Team] Cmdlets\nDESCRIPTION: This snippet details the release of the `Get-CsTeamsShiftsConnectionWfmUser` and `Get-CsTeamsShiftsConnectionWfmTeam` cmdlets. These cmdlets allow administrators to retrieve user and team information from the connected Workforce Management (WFM) system for use with the Teams Shifts connector.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_150\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsShiftsConnectionWfmUser\nGet-CsTeamsShiftsConnectionWfmTeam\n```\n\n----------------------------------------\n\nTITLE: Removing an Existing Centralized Logging Service (CLS) Configuration - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to remove an existing Centralized Logging Service configuration using the `Remove-CsClsConfiguration` cmdlet.  The command requires the Identity of the configuration to be removed. If a site-level configuration is removed, the site will revert to using the global settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsClsConfiguration -Identity <scope and name>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsClsConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Create Network Region Link using PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new network region link with a specified ID, linking two network regions and applying a bandwidth policy profile. It requires the Skype for Business Server Management Shell and proper permissions. The cmdlet takes parameters such as NetworkRegionLinkID, NetworkRegionID1, NetworkRegionID2, and BWPolicyProfileID to define the link and its bandwidth constraints.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-network-region-links.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkRegionLink -NetworkRegionLinkID NA-EMEA-LINK -NetworkRegionID1 NorthAmerica -NetworkRegionID2 EMEA -BWPolicyProfileID 50Mb_Link\n```\n\n----------------------------------------\n\nTITLE: Modifying Group Mailbox Visibility using Set-UnifiedGroup Cmdlet\nDESCRIPTION: This PowerShell cmdlet is used to modify the visibility of a Microsoft 365 group's mailbox in Outlook. The `HiddenFromExchangeClientsEnabled` parameter controls whether the mailbox is visible to users in Outlook and other Exchange clients. This is useful to control how users interact with team mailboxes created by Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/Office-365-groups.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[Set-UnifiedGroup](/powershell/module/exchange/users-and-groups/set-unifiedgroup) cmdlet with the **HiddenFromExchangeClientsEnabled** parameter to make a mailbox visible.\n```\n\n----------------------------------------\n\nTITLE: Configure GeoDNS Addresses for Internal Meet Simple URL\nDESCRIPTION: This snippet shows an example of how to configure a GeoDNS address for internal access to the Meet simple URL. It maps the Meet-int.geolb.contoso.com address to the internal web FQDNs of two Front End pools (Pool1 and Pool2) to provide redundancy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/network-requirements/simple-urls.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nMeet-int.geolb.contoso.com\n     Pool1InternalWebFQDN.contoso.com\n     Pool2InternalWebFQDN.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Disable Front Row via XML - Teams Rooms\nDESCRIPTION: This XML snippet disables the Front Row layout in Teams Rooms. Adding `<FrontRowEnabled>false</FrontRowEnabled>` to the XML configuration file prevents end-users from using Front Row in the specified room. Front Row is enabled by default.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-row.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<FrontRowEnabled>false</FrontRowEnabled>\n```\n\n----------------------------------------\n\nTITLE: Modifying a Test Device using PowerShell\nDESCRIPTION: This section references the Set-CsTestDevice PowerShell cmdlet, enabling administrators to modify the settings of an existing test device in Skype for Business Server. This includes properties such as the device's scope or identification details. It allows for updating a device's configuration for ongoing testing needs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/help-lscp/test-device.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsTestDevice](/powershell/module/skype/set-cstestdevice?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Counting Failed Sessions Per User with PowerShell\nDESCRIPTION: This PowerShell script imports a CSV file containing failure list data and calculates the number of failed sessions each user was involved in. It uses `Import-Csv` to read the data, `Group-Object` to group by the \"From user\" column, and `Select-Object` to select the count and name for each user. The results are then sorted in descending order based on the count to show the users with the most failed sessions.  The script assumes that the CSV file has a column named \"From user\" representing the user's SIP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/failure-list-report.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$failures = Import-Csv -Path \"C:\\Data\\Failure_List.csv\"\n$failures | Group-Object \"From user\" | Select-Object Count, Name | Sort-Object -Property Count -Descending\n```\n\n----------------------------------------\n\nTITLE: Edit an Existing Tenant Dial Plan\nDESCRIPTION: This command modifies an existing tenant dial plan using the Set-CsTenantDialPlan cmdlet. It updates the normalization rules and simple name of the dial plan. The NormalizationRules parameter is a placeholder and should be replaced with a valid pslistmodifier object containing the normalization rules.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n  Set-CsTenantDialPlan -Identity RedmondDialPlan  -NormalizationRules <pslistmodifier> -SimpleName \"Dial-Plan-for-Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Enable Simultaneous Ring - PowerShell\nDESCRIPTION: This command configures simultaneous ring settings for a user, allowing incoming calls to ring multiple destinations concurrently. It includes options for handling unanswered calls (voicemail or another number), setting wait times, specifying delegates, team members, and team delegate ring wait times, as well as restricting settings to active work hours.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserCallForwardingSettings [-Identity] <UserIdParameter> -EnableSimulRing <String> [-UnansweredToVoicemail]  [-UnansweredWaitTime <TimeSpan>] [-Delegates <PSListModifier>] [-Team <PSListModifier>] [-TeamDelegateRingWaitTime <TimeSpan>] [-SettingsActiveWorkHours]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserCallForwardingSettings [-Identity] <UserIdParameter> -EnableSimulRing <String> [-UnansweredToOther <String>] [-UnansweredWaitTime <TimeSpan>] [-Delegates <PSListModifier>]  [-Team <PSListModifier>]  [-TeamDelegateRingWaitTime <TimeSpan>]  [-SettingsActiveWorkHours]\n```\n\n----------------------------------------\n\nTITLE: Remove TeamsUpgradePolicy assignment (PowerShell)\nDESCRIPTION: This PowerShell snippet removes the assignment of the `TeamsUpgradePolicy` from a user. This is required if the user is being moved back to on-premises and is in TeamsOnly mode using a Skype for Business server version earlier than Skype for Business 2015 with CU8.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/move-users-from-the-cloud-to-on-premises.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -Identity $user -PolicyName $null\n```\n\n----------------------------------------\n\nTITLE: Export Persistent Chat Data - PowerShell\nDESCRIPTION: This PowerShell cmdlet exports Persistent Chat data (categories, rooms, chats, etc.) from a Skype for Business Server 2015 instance.  It requires the DBInstance parameter, specifying the backend server FQDN and instance name, and the FileName parameter, specifying the path and filename for the exported zip file. The user running the cmdlet needs to have the `RTCUniversalServerAdmins` permission assigned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-persistent-chat-pool.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nExport-CsPersistentChatData -DBInstance \"<backend-FQDN\\instance-name>\" -FileName \"C:\\PersistentChatData.zip\"\n```\n\n----------------------------------------\n\nTITLE: Releasing Update-M365UnifiedCustomPendingApp cmdlet\nDESCRIPTION: This snippet releases `Update-M365UnifiedCustomPendingApp` cmdlet to publish or reject an M365 unified custom pending app. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-M365UnifiedCustomPendingApp\n```\n\n----------------------------------------\n\nTITLE: Get Help for CDR/QoE Cmdlets - PowerShell\nDESCRIPTION: These commands display help information for the New-CsCdrConfiguration, Set-CsCdrConfiguration, New-CsQoEConfiguration and Set-CsQoEConfiguration cmdlets within the Skype for Business Server Management Shell. The `Get-Help` cmdlet retrieves detailed information about each cmdlet, and `| more` displays the output one screen at a time.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/call-detail-recording-and-qoe.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Help New-CsCdrConfiguration | more\nGet-Help Set-CsCdrConfiguration | more\nGet-Help New-CsQoEConfiguration | more\nGet-Help Set-CsQoEConfiguration | more\n```\n\n----------------------------------------\n\nTITLE: Configure Skype for Business as Exchange Partner Application - PowerShell\nDESCRIPTION: This PowerShell command configures Skype for Business Server as a partner application for Exchange 2013 using the `Configure-EnterprisePartnerApplication.ps1` script.  It requires the Skype for Business metadata URL and specifies the application type as \"Lync\".  This command should be executed from the Exchange Management Shell. Replace \"https://SkypePro.contoso.com/metadata/json/1\" with the actual Skype for Business metadata URL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-an-on-premises-partner-app.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"c:\\Program Files\\Microsoft\\Exchange Server\\V15\\Scripts\\Configure-EnterprisePartnerApplication.ps1\" -AuthMetadataUrl \"https://SkypePro.contoso.com/metadata/json/1\" -ApplicationType \"Lync\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Conferencing Configuration - PowerShell\nDESCRIPTION: This PowerShell code defines a new collection of conferencing configuration settings, initially storing them in memory, and then applying them to the Redmond site. It uses New-CsConferencingConfiguration to create the settings in memory, sets the Organization property, and applies the settings using Set-CsConferencingConfiguration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing-server-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x = New-CsConferencingConfiguration -Identity site:Redmond -InMemory\n$x.Organization = \"Litwareinc\"\nSet-CsConferencingConfiguration -Instance $x\n```\n\n----------------------------------------\n\nTITLE: Create Dial Plan - Skype for Business PowerShell\nDESCRIPTION: This snippet creates a new dial plan for routing dial-in access phone numbers using the `New-CsDialPlan` cmdlet. The dial plan is then associated with a geographic region. This cmdlet is used to configure phone number normalization rules for dial-in conferencing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsDialPlan](/powershell/module/skype/new-csdialplan?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Remove Teams Files Policy using Remove-CsTeamsFilesPolicy - PowerShell\nDESCRIPTION: This PowerShell command removes the Teams Files policy from a specified identity, typically `Global`. This action could affect file handling settings for Teams users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/admin-settings-for-file-drag-drop-to-third-party-storage.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsTeamsFilesPolicy -Identity Global\n```\n\n----------------------------------------\n\nTITLE: Starting Skype for Business Services - PowerShell\nDESCRIPTION: This snippet starts the Skype for Business Server Windows services on all Front End servers where Busy Options are installed using the `Start-CsWindowsService` cmdlet.  This is the final step in enabling the Busy Options feature.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nStart-CsWindowsService\n```\n\n----------------------------------------\n\nTITLE: Disable RTMP-In via PowerShell\nDESCRIPTION: This PowerShell script disables RTMP-In for meeting organizers by setting the `-AllowedStreamingMediaInput` parameter to an empty string for the specified Teams meeting policy. This effectively prevents organizers with the policy from using RTMP-In.  It's important to note the usage of an empty string to disable the feature.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meetings-rtmp-in.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -AllowedStreamingMediaInput \"\"\n```\n\n----------------------------------------\n\nTITLE: Install Microsoft Teams PowerShell Module\nDESCRIPTION: This PowerShell command installs the MicrosoftTeams module from the PowerShell Gallery. Ensure you have version 1.0.5 or later. This module is required to manage Teams settings and configurations via PowerShell.  The `-Name MicrosoftTeams` parameter specifies the module to be installed. You will need to have PowerShellGet installed and configured correctly, and potentially set the execution policy to allow script execution.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policy-packages.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Remove Unassigned Number Range Example - PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to remove an unassigned number range named \"Unassigned range 1\" from Skype for Business Server.  The `Remove-CsUnassignedNumber` cmdlet is used with the `-Identity` parameter set to the name of the range to be removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-unassigned-number-range.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsUnassignedNumber -Identity \"Unassigned range 1\"\n```\n\n----------------------------------------\n\nTITLE: Set External Meeting Join Policy to Trusted Orgs - PowerShell\nDESCRIPTION: This PowerShell script sets the `ExternalMeetingJoin` parameter of a Microsoft Teams meeting policy to `EnabledForTrustedOrgs`. This configuration allows users to only join meetings that are either within the organization or hosted by organizations with a trusted relationship. Replace `<policy name>` with the actual name of the Teams meeting policy you wish to modify. Requires the Microsoft Teams PowerShell module to be installed and connected.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/external-meeting-join.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -ExternalMeetingJoin  EnabledForTrustedOrgs\n```\n\n----------------------------------------\n\nTITLE: Create New Dial-In Access Number - Skype for Business - PowerShell\nDESCRIPTION: Creates a new dial-in conferencing access number. This cmdlet is used to add a new number that users can dial into for conferences.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Set Network Site Cmdlet - PowerShell\nDESCRIPTION: This cmdlet modifies an existing network site in Skype for Business Server.  It allows changes to site attributes such as description, region, and bandwidth policy profile. Review parameters before executing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsNetworkSite\n```\n\n----------------------------------------\n\nTITLE: Remove On-Premises Hybrid Application Endpoints\nDESCRIPTION: This PowerShell command removes all on-premises hybrid application endpoints. It retrieves all hybrid application endpoints using `Get-CsHybridApplicationEndpoint` and then pipes them to `Remove-CsHybridApplicationEndpoint` for deletion.  This is the final step in decommissioning the on-premises endpoints after their functionality has been migrated to the cloud.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-move-on-prem-endpoints.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsHybridApplicationEndpoint | Remove-CsHybridApplicationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Purging CDR Database Records - PowerShell\nDESCRIPTION: This PowerShell command purges call detail and diagnostic data older than 10 days from the specified monitoring database. It utilizes the `Invoke-CsCdrDatabasePurge` cmdlet, requiring the `Identity`, `PurgeCallDetailDataOlderThanDays`, and `PurgeDiagnosticDataOlderThanDays` parameters. The Identity parameter specifies the target monitoring database.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/purgecall-detail-recording-and-qoe.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsCdrDatabasePurge -Identity service:MonitoringDatabase:atl-sql-001.litwareinc.com -PurgeCallDetailDataOlderThanDays 10 -PurgeDiagnosticDataOlderThanDays 10\n```\n\n----------------------------------------\n\nTITLE: Example: Create Unassigned Number Range for Announcement Service - PowerShell\nDESCRIPTION: This PowerShell snippet provides an example of creating an unassigned number range for an Announcement service. It sets the Identity, NumberRangeStart, NumberRangeEnd, AnnouncementName, and AnnouncementService parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-unassigned-number-range.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsUnassignedNumber -Identity \"Unassigned range 1\" -NumberRangeStart \"+14255551000\" -NumberRangeEnd \"+14255551100\" -AnnouncementName \"Welcome Announcement\" -AnnouncementService ApplicationServer:Redmond.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Shifts Connection Team Map using PowerShell\nDESCRIPTION: These cmdlets handle the mapping of teams within Teams Shifts connections. The `TimeZone` attribute was added to these cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_93\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|New]-CsTeamsShiftsConnectionTeamMap\n```\n\n----------------------------------------\n\nTITLE: Adding ShowTeamsCallsInCallLog parameter\nDESCRIPTION: This snippet adds the `ShowTeamsCallsInCallLog` parameter to the `New-CsTeamsCallingPolicy` and `Set-CsTeamsCallingPolicy` cmdlets. This parameter likely controls whether Teams calls are displayed in the call log. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Granting Policies with Group and Rank Parameters using PowerShell\nDESCRIPTION: These cmdlets are used for granting policies and now support the Group and Rank parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_117\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-Cs<PolicyName>\n```\n\n----------------------------------------\n\nTITLE: Identifying Front End Server Order - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to determine the order in which Front End Servers were originally brought up in a Skype for Business Front End pool. The order is determined by the topology. This information is crucial to determine which are the \"first servers\" when dealing with pool-level quorum loss. It requires the Skype for Business Server PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/high-availability-and-disaster-recovery/high-availability.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsComputer -PoolFqdn <PoolFqdn>\n```\n\n----------------------------------------\n\nTITLE: Create SQL Logins on Replicas using PowerShell\nDESCRIPTION: This PowerShell cmdlet creates SQL logins on a specified replica within an Always On Availability Group.  It is executed within the Skype for Business Server Management Shell. It requires that the Availability Group has already been created and that a failover to the target replica has been performed prior to execution. The command updates the database to reflect the current state.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/alwayson-availability-group.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-CsDatabase -Update\n```\n\n----------------------------------------\n\nTITLE: Creating a Region Link using New-CsNetworkRegionLink in PowerShell\nDESCRIPTION: This cmdlet creates a new network region link in Skype for Business. It requires the Identity, NetworkRegionID1, NetworkRegionID2, and BWPolicyProfileID parameters to define the link's ID, linked regions, and bandwidth policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_28\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsNetworkRegionLink -Identity NA_EMEA -NetworkRegionID1 NorthAmerica -NetworkRegionID2 EMEA -BWPolicyProfileID LowBWLimits\n```\n\n----------------------------------------\n\nTITLE: Assigning Archiving Policy to User Group with PowerShell\nDESCRIPTION: This PowerShell command assigns a specific archiving policy to all users homed on a specific Registrar pool. It first retrieves all users with accounts on the specified pool using `Get-CsUser` and then pipes the output to `Grant-CsArchivingPolicy` to apply the policy. This is useful for applying policies to groups of users based on their Registrar pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/apply-a-policy-to-users.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Filter {RegistrarPool -eq \"atl-cs-001.contoso.com\"} | Grant-CsArchivingPolicy -PolicyName \"RedmondArchivingPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Adding Android Enterprise System App for QR Code Scanning\nDESCRIPTION: This snippet describes how to add a mobile system OS scanner within the Android work profile using the Intune Admin Center, which is necessary for QR code reservations on Teams Panels when users have both work and personal profiles on their Android phones.  The steps include navigating to Apps > Android, selecting Android enterprise system app, entering the Android phone type, finding the OS camera package name, assigning the app to a user or group, and downloading/installing the camera app within the work profile.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/devices-release-notes.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1. In the Intune Admin Center, go to **Apps** > **Android**, and add.\n\n2. Select **Android enterprise system app**.\n\n3. Enter the type of Android phone. Then, Google and paste the OS camera package name.\n\n4. Assign to an individual or group.\n\n5. Download and install the camera app from the app store in your work profile.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Hunt Group Workflow in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new hunt group workflow using the `New-CsRgsWorkflow` cmdlet in PowerShell. It includes several parameters to configure the workflow, such as the parent service ID, name, description, primary URI, line URI, display number, active state, default action, and manager assignments.  It shows the use of variables, such as `$serviceID` and `$actionWM`, from prior steps. \nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$workflowHG = New-CsRgsWorkflow -Parent <service ID for the Response Group service> -Name \"<hunt group name>\" [-Description \"<hunt group description>\"] -PrimaryUri \"<SIP address for the workflow>\" [-LineUri \"<Phone number for the workflow>\"] [-DisplayNumber \"<Phone number displayed in Lync>\"] [-Active <$true | $false>] [-Anonymous <$true | $false>] [-DefaultAction <variable from preceding step>] [-EnabledForFederation <$true | $false>] [-Managed <$true | $false>] [-ManagersByUri <SIP addresses for Response Group Managers who can manage the workflow>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Hunt Group Workflow in PowerShell\nDESCRIPTION: This snippet provides a complete example of creating a new hunt group workflow using the `New-CsRgsWorkflow` cmdlet in PowerShell. It showcases the use of specific parameters, such as `-Parent`, `-Name`, `-Description`, `-PrimaryUri`, `-LineUri`, `-DisplayNumber`, `-Active`, `-Anonymous`, `-DefaultAction`, `-EnabledForFederation`, `-Managed`, and `-ManagersByUri`, to define a functional workflow for the Human Resources department. Variables previously defined such as `$serviceID` and `$actionWM` are used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n$workflowHG = New-CsRgsWorkflow -Parent $serviceID -Name \"Human Resources\" -Description \"Human Resources workflow\" -PrimaryUri \"sip:humanresources@contoso.com\" -LineUri \"TEL:+14255551219\" -DisplayNumber \"555-1219\" -Active $true -Anonymous $true -DefaultAction $actionWM -EnabledForFederation $false -Managed $true -ManagersByUri \"sip:bob@contoso.com\", \"mindy@contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Managing Teams User Licenses via PowerShell\nDESCRIPTION: Managing user licenses for Microsoft Teams is possible using PowerShell. This allows for automation and bulk management of user licenses, streamlining administrative tasks.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-quick-start-guide-edu.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Creating Policy to Disable Unified Contact Store - PowerShell\nDESCRIPTION: This PowerShell command creates a new user services policy named `NoUnifiedContactStore` that disables the unified contact store by setting the `UcsAllowed` property to `$False`. This policy is used to prevent users from having their contacts stored in the unified contact store, particularly when rolling back from it.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-the-unified-contact-store.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsUserServicesPolicy -Identity NoUnifiedContactStore -UcsAllowed $False\n```\n\n----------------------------------------\n\nTITLE: Adding Compliance Recording parameters to CsCallQueue cmdlets\nDESCRIPTION: This snippet adds compliance recording related parameters (`ComplianceRecordingForCallQueueTemplateId`, `TextAnnouncementForCR`, `CustomAudioFileAnnouncementForCR`, `TextAnnouncementForCRFailure`, `CustomAudioFileAnnouncementForCRFailure`) to the `New-CsCallQueue` and `Set-CsCallQueue` cmdlets.  Corresponding output attributes are added to the `Get-CsCallQueue` cmdlet.  These parameters likely configure compliance recording features within the call queue settings. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsCallQueue\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Viewing RBAC Roles in Skype for Business Server - PowerShell\nDESCRIPTION: This command retrieves basic information about the available RBAC roles in Skype for Business Server. It uses the Get-CsAdminRole cmdlet to list the existing roles and their properties. The output shows the Identity (name) of each role, which corresponds to an Active Directory security group.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/delegating-administrative-control.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole\n```\n\n----------------------------------------\n\nTITLE: Checking OAuthTokenIssuer Certificate - PowerShell\nDESCRIPTION: This PowerShell command checks if a server-to-server authentication certificate (OAuthTokenIssuer) is already assigned to the Skype for Business Server. If no certificate information is returned, a certificate needs to be assigned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/assign-a-server-to-server-certificate.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCertificate -Type OAuthTokenIssuer\n```\n\n----------------------------------------\n\nTITLE: Apply display scaling settings with PowerShell\nDESCRIPTION: This PowerShell command applies the current display scaling settings for Microsoft Teams Rooms. It uses the ScriptLaunch.ps1 script to execute ApplyCurrentDisplayScaling.ps1. This is used after manually configuring display resolution and scaling in Windows settings to ensure Teams Rooms uses the desired settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-operations.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPowershell -ExecutionPolicy Unrestricted c:\\Rigel\\x64\\scripts\\provisioning\\scriptlaunch.ps1 ApplyCurrentDisplayScaling.ps1 \n```\n\n----------------------------------------\n\nTITLE: Deleting All Service-Scoped Trunk Configuration Settings - PowerShell\nDESCRIPTION: This command removes all trunk configuration settings that are applied at the service scope. It uses `Get-CsTrunkConfiguration` with a filter to retrieve all service-scoped configurations and then pipes them to `Remove-CsTrunkConfiguration` for deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/delete-trunk-configuration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrunkConfiguration -Filter \"service:*\" | Remove-CsTrunkConfiguration\n```\n\n----------------------------------------\n\nTITLE: Create/Modify SLA group - PowerShell\nDESCRIPTION: Creates a new Shared Line Appearance (SLA) group or modifies an existing one. The Identity parameter must be a valid Enterprise Voice-enabled user account.  The MaxNumberOfCalls parameter sets the maximum concurrent calls, and the BusyOption defines the behavior when the maximum is reached. Possible values for BusyOption are BusyOnBusy, Voicemail, or Forward, and Target is required when using Forward.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-shared-line-appearance.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsSlaConfiguration -Identity <IdentityOfGroup> -MaxNumberOfCalls <Number> -BusyOption <BusyOnBusy|Voicemail|Forward> [-Target <TargetUserOrPhoneNumber>]\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsSlaConfiguration -Identity SLAGroup1 -MaxNumberOfCalls 3 -BusyOption BusyOnBusy\n```\n\n----------------------------------------\n\nTITLE: Remove DTMF Configuration - Skype for Business - PowerShell\nDESCRIPTION: Removes an existing collection of dual-tone multi-frequency (DTMF) signaling settings used for dial-in conferencing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsDialInConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Disable Password Expiration via Microsoft Graph PowerShell\nDESCRIPTION: This PowerShell snippet disables password expiration for a specified user account in Microsoft Graph using the Update-MgUser cmdlet. It sets the '-PasswordPolicies' parameter to 'DisablePasswordExpiration'. The '-UserId' parameter specifies the target user account, and '-PassThru' displays the modified object.  Requires connection to Microsoft Graph.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/mtr-device-config-password-include.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-MgUser -UserId ConferenceRoom01@contoso.com -PasswordPolicies DisablePasswordExpiration -PassThru\n```\n\n----------------------------------------\n\nTITLE: Get Hosting Provider Configuration - PowerShell\nDESCRIPTION: This PowerShell command retrieves the value of the ProxyFQDN attribute for your Skype for Business Server environment. This value is then used in subsequent commands to configure the Autodiscover URL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsHostingProvider\n```\n\n----------------------------------------\n\nTITLE: Get-CsLocationPolicy Cmdlet\nDESCRIPTION: This cmdlet retrieves location policies from Skype for Business. It allows administrators to view the settings of existing policies. Refer to the linked documentation for details on available parameters and usage examples.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/enhanced-9-1-1-and-location-service.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsLocationPolicy\n```\n\n----------------------------------------\n\nTITLE: Limit Purging to Exported Archives Only - PowerShell\nDESCRIPTION: This PowerShell command limits purging to archived records that have been exported to a data file using the Export-CsArchivingData cmdlet.  It sets the EnablePurging parameter to True to enable purging, and the PurgeExportedArchivesOnly parameter to True to restrict purging to only exported archives. The -Identity parameter specifies the site to configure.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/purging-of-archived-data.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingConfiguration -Identity \"site:Redmond\" -EnablePurging $True -PurgeExportedArchivesOnly $True\n```\n\n----------------------------------------\n\nTITLE: Managing Online Dial-In Conferencing Bridge using PowerShell\nDESCRIPTION: This cmdlet is used for managing online dial-in conferencing bridges. Error handling has been improved.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_120\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineDialInConferencingBridge\n```\n\n----------------------------------------\n\nTITLE: Set-CsUCPhoneConfiguration Cmdlet\nDESCRIPTION: This cmdlet is used to modify the settings for a UC phone configuration in Skype for Business Server. It allows administrators to manage various device settings, such as security mode, logging level, and QoS settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/help-lscp/device-configuration.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[Set-CsUCPhoneConfiguration](/powershell/module/skype/set-csucphoneconfiguration?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Modifying Agent Configuration - MaxProcessMemoryMB\nDESCRIPTION: This code snippet shows how to modify the Agent configuration file to remove the upper memory limit by changing the value of 'MaxProcessMemoryMB' to '0'. This is useful when the Agent fails to start due to issues with the Windows Job Object. Note: it should be changed to zero instead of 300.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/troubleshoot.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<setting name=\"MaxProcessMemoryMB\" serializeAs=\"String\"> <value>300</value> </setting>\n```\n\n----------------------------------------\n\nTITLE: Creating Archiving Policy using New-CsArchivingPolicy (PowerShell)\nDESCRIPTION: This cmdlet creates a new Archiving Policy for a specified site in Skype for Business. The `-Identity` parameter specifies the site (e.g., `site:Redmond`), and the `-ArchiveInternal` parameter determines whether internal communications are archived, here set to `$True`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsArchivingPolicy -Identity site:Redmond -ArchiveInternal $True\n```\n\n----------------------------------------\n\nTITLE: Remove Conferencing Policy - PowerShell\nDESCRIPTION: Removes a specific conferencing policy from Skype for Business Server. This requires identifying the policy to be removed.  Be careful when removing a policy assigned to users; ensure a default policy is in place. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Enable Skype for Business Topology - PowerShell\nDESCRIPTION: This PowerShell command enables the Skype for Business topology. It is a prerequisite for moving the Central Management Server. Failure to complete this step successfully may lead to topology corruption.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-the-central-management-server.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-CsTopology\n```\n\n----------------------------------------\n\nTITLE: Disable Content Sharing in External Meetings - PowerShell\nDESCRIPTION: This PowerShell script disables content sharing for users with the specified meeting policy when they attend external meetings.  It sets the `ContentSharingInExternalMeetings` parameter to `Disabled`.  Requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-external-content-share.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -ContentSharingInExternalMeetings Disabled\n```\n\n----------------------------------------\n\nTITLE: Get RBAC roles with specific Skype for Business Server cmdlet\nDESCRIPTION: This PowerShell command retrieves all RBAC roles (including custom roles) that have been assigned a specific Skype for Business Server 2015 cmdlet. This helps determine the permissions required to execute the cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Skype for Business Server 2015 cmdlet\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Most Active Chat Rooms - SQL\nDESCRIPTION: This SQL query retrieves a list of the most active Persistent Chat rooms after a specified date. It joins the `tblChat` and `tblNode` tables, filters by date, groups by chat room name, and orders the results by the number of chat messages in descending order.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/persistent-chat-database-schema/sample-persistent-chat-database-queries.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT nodeName as ChatRoom, COUNT(*) as ChatMessages\n  FROM tblChat, tblNode\n  WHERE channelId = nodeID AND dbo.fnTicksToDate(chatDate) > '1/1/2011'\n  GROUP BY nodeName\n  ORDER BY ChatMessages DESC\n```\n\n----------------------------------------\n\nTITLE: Remove PIN Policy - Skype for Business - PowerShell\nDESCRIPTION: Removes the specified personal identification number (PIN) policy. This cmdlet is used to delete a PIN policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Email Body: Action Request - New Phone System Prep\nDESCRIPTION: This snippet provides the body of the second email which reinforces the upcoming changes and outlines the capabilities of the new phone system. It includes a call to action, reminding users to order a new headset and get training.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/prepare-my-users-email-templates.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nYour new phone calling capabilities are almost here. As explained in our initial\nemail, you'll soon be able to use Microsoft Teams to make and\nreceive phone calls. We understand that this change represents a new way of\nworking and want to ensure you have everything you need to be successful.\n\nWith this new calling system, you'll be able to...\n\n-   Make, receive and transfer calls right from your computer.\n\n-   Configure and access your voicemail, whether in the office or on the go.\n\n-   Add others to your call, creating an ad-hoc group conversation.\n\n-   Switch devices, allowing you to take your calls with you and limiting disruption.\n\nCALL TO ACTION. If you haven't already done so:\n\n-   Order your new headset. To ensure the best audio quality, use an\n    approved headset. You can view available options and order yours at <INSERT LINK>.\n    We'll also be hosting a device bar in <INSERT LOCATION>, where you can try on a few\n    headsets and find the best fit for you.\n\n-   Get trained. Learn how to make and receive phone calls right from your\n    PC. To view available training, visit https://aka.ms/B6fx7u to get started.\n\nIf you have questions, visit our <INSERT INTRANET LINK> or send me an e-mail <INSERT\nEMAIL ADDRESS>.\n\nRegards,\n\n<INSERT NAME OF DEPARTMENT MANAGER>\n```\n\n----------------------------------------\n\nTITLE: Create Teams Emergency Calling Policy with Extended Notification - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new Teams Emergency Calling Policy (ECP1) with an extended notification configuration for the emergency dial string 933 (test number).  It sets other parameters such as notification group, dial out number, notification mode, and external location lookup mode.\n\nRequires the Teams PowerShell module to be installed and the user to be authenticated with appropriate permissions.\n\nInput: Parameters for the emergency calling policy, including notification groups, dial out number, notification mode, external location lookup mode, and extended notifications.\n\nOutput: Creates a new emergency calling policy with the specified settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/emergency-calling-security-desk-notifications.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$en1 = New-CsTeamsEmergencyCallingExtendedNotification -EmergencyDialString \"933\"\nNew-CsTeamsEmergencyCallingPolicy -Identity ECP1 -Description \"Test ECP1\" -NotificationGroup \"alert@contoso.com\" -NotificationDialOutNumber \"+14255551234\" -NotificationMode ConferenceUnMuted -ExternalLocationLookupMode Enabled -ExtendedNotifications @{add=$en1}\n```\n\n----------------------------------------\n\nTITLE: Display Call Forwarding and Delegation Settings - PowerShell\nDESCRIPTION: This snippet uses the `Get-CsUserCallingSettings` cmdlet to display the current call forwarding and delegation settings for a specified user in Microsoft Teams. It shows if forwarding is enabled, the forwarding type, target, and settings for unanswered calls, as well as any configured delegates and their permissions. The output includes details about delegates such as their ID, and permissions to make calls, manage settings, and receive calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/user-call-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUserCallingSettings -Identity user1@contoso.com\nSipUri                    : sip:opr1@contoso.com\nIsForwardingEnabled       : True\nForwardingType            : Simultaneous\nForwardingTarget          :\nForwardingTargetType      : MyDelegates\nIsUnansweredEnabled       : True\nUnansweredTarget          :\nUnansweredTargetType      : Voicemail\nUnansweredDelay           : 00:00:20\nDelegates                 : Id:sip:user2@contoso.com\nDelegators                :\nCallGroupOrder            : InOrder\nCallGroupTargets          : {}\nGroupMembershipDetails    :\nGroupNotificationOverride : Ring\n\n(Get-CsUserCallingSettings -Identity user1@contoso.com).Delegates\n\nId             : sip:user2@contoso.com\nMakeCalls      : True\nManageSettings : True\nReceiveCalls   : True\n```\n\n----------------------------------------\n\nTITLE: Move Central Management Server - PowerShell\nDESCRIPTION: This PowerShell command initiates the move of the Central Management Server. It migrates the database from the legacy SQL Server database to the Skype for Business Server 2019 SQL Server database and updates the SCP to point to the new location. It requires confirmation before proceeding.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-the-central-management-server.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsManagementServer\n```\n\n----------------------------------------\n\nTITLE: Remove a Specific PIN Policy - PowerShell\nDESCRIPTION: This PowerShell command removes a specific PIN policy identified by its Identity.  The Identity parameter specifies the unique identifier of the PIN policy to be removed. In this case, the PIN policy with the Identity \"RedmondPinPolicy\" will be deleted.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/delete-a-pin-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPinPolicy -Identity \"RedmondPinPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Get Certificate Thumbprint using PowerShell\nDESCRIPTION: This PowerShell command retrieves the thumbprints of certificates installed in the LocalMachine\\My store. This is used to identify the correct certificate for the Listener service to encrypt HTTPS traffic.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ChildItem -path cert:\\LocalMachine\\My\n```\n\n----------------------------------------\n\nTITLE: Getting Application Instance Association - PowerShell\nDESCRIPTION: This cmdlet retrieves information about an existing application instance association in Microsoft Teams.  Used for managing resource account associations. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_32\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineApplicationInstanceAssociation\n```\n\n----------------------------------------\n\nTITLE: Set-CsLocationPolicy Cmdlet\nDESCRIPTION: This cmdlet modifies an existing location policy in Skype for Business. It allows administrators to update the settings of a pre-existing policy. Refer to the linked documentation for details on available parameters and usage examples.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/enhanced-9-1-1-and-location-service.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLocationPolicy\n```\n\n----------------------------------------\n\nTITLE: Set Meeting Room - PowerShell\nDESCRIPTION: Modifies the property values of an existing Skype for Business Server meeting room.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_52\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMeetingRoom\n```\n\n----------------------------------------\n\nTITLE: Creating a new Group Call Pickup range - PowerShell\nDESCRIPTION: This snippet creates a new range of call pickup group numbers using the New-CsCallParkOrbit cmdlet. It requires specifying the Identity (name of the range), NumberRangeStart (first number in the range), NumberRangeEnd (last number in the range), CallParkService (FQDN or service ID of the Application service hosting Call Park), and Type (GroupPickup). The Identity must be unique. Number ranges must be globally unique and adhere to specific rules.  The CallParkService parameter must be a valid Application service FQDN or ID.  The Type parameter must be set to GroupPickup for call pickup ranges. This cmdlet is used in the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-group-call-pickup-number-range.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsCallParkOrbit -Identity <name of call pickup group range> -NumberRangeStart <first number in range> -NumberRangeEnd <last number in range> -CallParkService <FQDN or service ID of the Application service that hosts the Call Park application> -Type GroupPickup\n```\n\n----------------------------------------\n\nTITLE: Enabling Topology Changes in Skype for Business Server\nDESCRIPTION: This command enables the topology changes made in Skype for Business Server using the Skype for Business Server Management Shell. This is necessary after defining the trusted application for SEFAUtil. No parameters are needed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-CsToplogy\n```\n\n----------------------------------------\n\nTITLE: Granting Skype UI Policy to User - PowerShell\nDESCRIPTION: This PowerShell command grants the client policy named UseSkypeUI to a specific user, username@contoso.com, forcing them to use the Skype for Business client experience.  The policy must first be created with New-CsClientPolicy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsClientPolicy username@contoso.com -PolicyName UseSkypeUI\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - Dallas Site Prefix (.NET Regex)\nDESCRIPTION: This normalization rule translates numbers with an on-net prefix (6) and Dallas site code (444) to E.164 format. It uses a .NET Framework regular expression to match '6444' followed by 4 digits, and prepends \"+1972555\" to the matched digits. The input is '6444' followed by 4 digits, and the output is the E.164 formatted number. The first captured group ($1) is appended to the translation string.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_10\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^6444(\\d{4})$\n```\n\n----------------------------------------\n\nTITLE: Get Teams Template via PowerShell\nDESCRIPTION: This PowerShell command retrieves a specific Teams template using the `Get-CsTeamTemplate` cmdlet. It requires the Teams PowerShell module to be installed and the administrator to be authenticated.  The output is a TeamTemplate object containing the template's properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamTemplate\n```\n\n----------------------------------------\n\nTITLE: Modify OAuth Configuration (Skype for Business)\nDESCRIPTION: This PowerShell command modifies the OAuth configuration settings in Skype for Business Server to point to the Exchange Autodiscover service. This configuration is crucial for enabling server-to-server communication and authentication between Skype for Business and Exchange.  Replace \"https://autodiscover.litwareinc.com/autodiscover/autodiscover.svc\" with your Autodiscover service URI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/integrate-with-exchange/integrate-with-exchange.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOAuthConfiguration -Identity global -ExchangeAutodiscoverUrl \"https://autodiscover.litwareinc.com/autodiscover/autodiscover.svc\" \n```\n\n----------------------------------------\n\nTITLE: Disable Language Switching - Teams Rooms on Windows - XML\nDESCRIPTION: This XML snippet disables the ability for room users to temporarily change the language of the Teams Rooms app on Teams Rooms on Windows devices. By default, users can change the language from the home screen, but this setting prevents such changes, maintaining a consistent language experience until a device restart.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/mtr-home-refresh.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<RoomLanguageSwitchEnabled>false</RoomLanguageSwitchEnabled>\n```\n\n----------------------------------------\n\nTITLE: Filtering Sign-in Logs for Microsoft Teams (Kusto)\nDESCRIPTION: This Kusto snippet filters SigninLogs to include only Teams-based logons by adding a filter for AppDisplayName containing 'Teams'.  It is intended to narrow down the scope of sign-in events to those related to Microsoft Teams, simplifying the analysis and threat hunting process.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-sentinel-guide.md#_snippet_4\n\nLANGUAGE: Kusto\nCODE:\n```\n| where AppDisplayName has 'Teams'\n```\n\n----------------------------------------\n\nTITLE: Get Online User Details (Teams PowerShell) - Verification\nDESCRIPTION: This PowerShell command verifies the removal of the on-premises LineURI by checking RegistrarPool, OnPremLineURI, and LineURI attributes of the user. It's used after running `Set-CsUser -Identity <user> -LineURI $null` to confirm the change. It requires the Teams PowerShell module to be installed and the administrator to be connected to their Microsoft 365 tenant.  The parameter <user> needs to be replaced with the actual user identifier.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure-numbers.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity <user> | fl RegistrarPool, OnPremLineURI, LineURI\n```\n\n----------------------------------------\n\nTITLE: Updating a Subnet using Set-CsNetworkSubnet in PowerShell\nDESCRIPTION: This cmdlet updates the properties of an existing network subnet in Skype for Business. It requires the Identity parameter to identify the subnet to modify, along with parameters specifying the properties to update, such as MaskBits and NetworkSiteID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_26\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsNetworkSubnet -Identity 172.11.15.0 -MaskBits 25 -NetworkSiteID Chicago\n```\n\n----------------------------------------\n\nTITLE: Getting Acquired Phone Number Status - PowerShell\nDESCRIPTION: This snippet demonstrates the release of the `Get-CsExportAcquiredPhoneNumberStatus` cmdlet to get the status of acquired phone number export using the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_49\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsExportAcquiredPhoneNumberStatus\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Policy - Prevent External Participant Control (PowerShell)\nDESCRIPTION: This PowerShell script leverages the `Set-CsTeamsMeetingPolicy` cmdlet to prevent external participants from giving, requesting, or being given control during Teams meetings and webinars organized by users with the specified policy. The `-AllowExternalParticipantGiveRequestControl` parameter is set to `$False` to disable this function.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-who-present-request-control.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowExternalParticipantGiveRequestControl $False\n```\n\n----------------------------------------\n\nTITLE: Listing Audio Conferencing Numbers using PowerShell\nDESCRIPTION: This PowerShell snippet retrieves and displays all audio conferencing phone numbers configured within the Microsoft Teams organization. It utilizes the `Get-CsOnlineDialInConferencingServiceNumber` cmdlet and pipes the output to `fl` to format the output for easy readability of all properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/see-a-list-of-audio-conferencing-numbers-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineDialInConferencingServiceNumber | fl\n```\n\n----------------------------------------\n\nTITLE: CLS Logging Search on a Pool - PowerShell\nDESCRIPTION: This command initiates a search using the Centralized Logging Service (CLS) on a specific pool. The `-Pools` parameter specifies the FQDN of the pool. The results are saved to the specified file path using the `-OutputFilePath` parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Pools \"pool01.contoso.net\" -OutputFilePath \"C:\\Logfiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Remove Dial-In Access Number - Skype for Business - PowerShell\nDESCRIPTION: Removes an existing dial-in conferencing access number. This cmdlet deletes a dial-in access number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Enabling Call Park for Users using Set-CSVoicePolicy Cmdlet\nDESCRIPTION: This cmdlet is used to enable Call Park for users by modifying voice policies. The EnableCallPark option is set to enable the feature for users associated with the voice policy. Ensure the property is set for each voice policy and not just the default one.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-call-park.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CSVoicePolicy\n```\n\n----------------------------------------\n\nTITLE: Example Xcopy Usage\nDESCRIPTION: This snippet provides an example of how to use the Xcopy command to copy music-on-hold files, showing example file paths for both the legacy and Skype for Business Server 2019 file stores. This assumes the file store structure remains consistent during the migration process and that the OcsFileStore path exists on both servers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-call-park-application-settings.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nExample usage:  Xcopy \"<legacy File Store Path>\\OcsFileStore\\coX-ApplicationServer-X\\AppServerFiles\\CPS\\\"  \"<Skype for Business Server 2019 File Store Path>\\OcsFileStore\\coX-ApplicationServer-X\\AppServerFiles\\CPS\\\" \n```\n\n----------------------------------------\n\nTITLE: Retrieving Region Route Details using Get-CsNetworkInterRegionRoute in PowerShell\nDESCRIPTION: This cmdlet retrieves the details of a specific network inter-region route in Skype for Business. It uses the Filter parameter to specify routes to retrieve. It returns the detailed configuration of the requested region route.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_34\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsNetworkInterRegionRoute -Filter *APAC*\n```\n\n----------------------------------------\n\nTITLE: View Network Region Route Information using Get-CsNetworkInterRegionRoute (PowerShell)\nDESCRIPTION: This PowerShell cmdlet retrieves information about network region routes in Skype for Business Server. It can be used to view details of all routes or specific routes based on given parameters. The output displays key properties such as Identity, NetworkRegionLinks, and NetworkRegionID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-network-region-routes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsNetworkInterRegionRoute\n```\n\n----------------------------------------\n\nTITLE: Enable communications on archiving failure - PowerShell\nDESCRIPTION: This PowerShell command enables communications for the 'Redmond' site even if an archiving failure occurs. It utilizes the Set-CsArchivingConfiguration cmdlet and sets the BlockOnArchiveFailure parameter to $False, allowing IM and web conferencing sessions to continue despite potential archiving issues.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/configure-options-to-handle-failures.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingConfiguration -Identity \"site:Redmond\" -BlockOnArchiveFailure $False\n```\n\n----------------------------------------\n\nTITLE: Enable Content Sharing for Trusted Orgs - PowerShell\nDESCRIPTION: This PowerShell script enables content sharing for users with the specified meeting policy only when they attend meetings hosted by trusted organizations and guests, as defined in the external access policy. It sets the `ContentSharingInExternalMeetings` parameter to `EnabledForTrustedOrgs`. Requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-external-content-share.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -ContentSharingInExternalMeetings EnabledForTrustedOrgs\n```\n\n----------------------------------------\n\nTITLE: Modifying an existing range to GroupPickup - PowerShell\nDESCRIPTION: This snippet modifies an existing call park orbit to be a GroupPickup range using the Set-CsCallParkOrbit cmdlet. It requires specifying the Identity (name of the call park orbit) and setting the Type parameter to GroupPickup. The important note indicates that this cmdlet should only be used to correct initially incorrect types if the group range is not yet in use.  Changing the type after the range is in use will cause call park or group call pickup to stop working for that range. This operation is performed in the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-group-call-pickup-number-range.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsCallParkOrbit -Identity \"Redmond call pickup\" -Type GroupPickup\n```\n\n----------------------------------------\n\nTITLE: Get Skype for Business On-Premises Objects using PowerShell\nDESCRIPTION: This code snippet retrieves various Skype for Business Server objects from the on-premises deployment using PowerShell cmdlets. These objects include meeting rooms, common area phones, analog devices, ExUm contacts, dial-in conferencing access numbers, RGS workflows, trusted application endpoints, trusted applications, persistent chat endpoints, audio test service applications, call park orbits, and unassigned numbers.  The output is used to identify objects to be removed prior to decommissioning.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-remove-on-prem.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMeetingRoom\nGet-CsCommonAreaPhone\nGet-CsAnalogDevice\nGet-CsExUmContact\nGet-CsDialInConferencingAccessNumber\nGet-CsRgsWorkflow\nGet-CsTrustedApplicationEndpoint\nGet-CsTrustedApplication\nGet-CsPersistentChatEndpoint\nGet-CsAudioTestServiceApplication\nGet-CsCallParkOrbit\nGet-CsUnassignedNumber\n```\n\n----------------------------------------\n\nTITLE: Find Users Assigned to a Specific Dial Plan\nDESCRIPTION: This script retrieves all online users who have been granted the RedmondDialPlan tenant dial plan. It filters the users based on the TenantDialPlan property.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser | Where-Object {$_.TenantDialPlan -eq \"RedmondDialPlan\"}\n```\n\n----------------------------------------\n\nTITLE: Copying Audio Files using Xcopy Command\nDESCRIPTION: This snippet demonstrates how to use the Xcopy command in the console to copy customized music-on-hold audio files from a legacy Skype for Business pool's file store to the new Skype for Business Server 2019 pool's file store.  It takes the source and destination file store paths as arguments.  The paths must be valid and accessible by the user executing the command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-call-park-application-settings.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nXcopy <Source: legacy Pool CPS File Store Path> <Destination: Skype for Business Server 2019 Pool CPS File Store Path>\n```\n\n----------------------------------------\n\nTITLE: Listing Client Version Policies - PowerShell\nDESCRIPTION: This cmdlet retrieves a list of all client version policies configured in the Skype for Business Server environment. It does not require any specific parameters and outputs the details of each policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsClientVersionPolicy\n```\n\n----------------------------------------\n\nTITLE: Uninstall Application Database - Skype for Business - PowerShell\nDESCRIPTION: This PowerShell command uninstalls the application database for a Skype for Business Front End pool. It requires the fully qualified domain name (FQDN) of the SQL Server.  Optionally, the name of the SQL instance can be specified.  The cmdlet prompts for confirmation before proceeding with the removal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/remove-the-sql-server-database-for-a-front-end-pool.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-CsDataBase -DatabaseType Application -SqlServerFqdn <FQDN> [-SqlInstanceName <instance>]\n```\n\n----------------------------------------\n\nTITLE: Install Local Monitoring Database with PowerShell\nDESCRIPTION: This PowerShell command installs the Skype for Business Server databases, including the monitoring database, on the local computer. It reads the current topology to determine which databases need installation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/associate-a-monitoring-store.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-CsDatabase -LocalDatabases\n```\n\n----------------------------------------\n\nTITLE: Adding Properties parameter to Get-CsOnlineUser cmdlet\nDESCRIPTION: This snippet adds the `Properties` parameter to the `Get-CsOnlineUser` cmdlet. This parameter likely allows specifying which properties to retrieve for user objects, potentially improving performance. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Disable Native File Uploads for Tenant (Alternative) - PowerShell\nDESCRIPTION: This PowerShell command disables the `NativeFileEntryPoints` parameter for the entire Microsoft Teams tenant, preventing users from accessing OneDrive and SharePoint for file uploads within Teams chats and channels. It modifies the global Teams Files policy. Requires the MicrosoftTeams PowerShell module. This is a duplicate example.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-off-teams-native-file-upload-policy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsFilesPolicy -Identity Global -NativeFileEntryPoints Disabled\n```\n\n----------------------------------------\n\nTITLE: Enable Dial-Out Join Confirmation with PowerShell\nDESCRIPTION: This PowerShell command enables the dial-out join confirmation setting for all meetings in the organization. It uses the `Set-CsOnlineDialInConferencingTenantSettings` cmdlet from the Teams PowerShell module to set the `-EnableDialOutJoinConfirmation` parameter to `$true`. This requires the Teams PowerShell module to be installed and the user to have appropriate administrator privileges.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-meeting-dial-out-confirmation.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingTenantSettings -EnableDialOutJoinConfirmation $true\n```\n\n----------------------------------------\n\nTITLE: Clearing content from a chat room with Clear-CsPersistentChatRoom PowerShell cmdlet\nDESCRIPTION: This PowerShell snippet demonstrates how to remove all content from the Persistent Chat room ITChatRoom that was added on or before March 1, 2015, using the Clear-CsPersistentChatRoom cmdlet with the Identity and EndDate parameters.\n\nDependencies: Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/chat-rooms.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nClear-CsPersistentChatRoom -Identity \"atl-cs-001.contoso.com\\ITChatRoom\" -EndDate \"3/1/2015\"\n```\n\n----------------------------------------\n\nTITLE: Using CQDTools PowerShell Module\nDESCRIPTION: The CQDTools PowerShell Module offers functionalities to streamline the creation and validation of building files for Call Quality Dashboard (CQD). It leverages Active Directory (AD) Sites and Services, Microsoft DHCP servers, and existing building files to pre-populate data, identify duplicates, overlaps, and unmapped subnets. This module helps in accurately mapping subnets to buildings, which is crucial for network management and optimization in CQD.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/CQD-building-mapping.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Email Body: Feedback Request - New Phone System\nDESCRIPTION: This snippet contains the body of the fourth email, requesting feedback from users after they have used the new phone system for a few weeks. It includes a link to an online feedback survey.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/prepare-my-users-email-templates.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nIt's been a few weeks since you started using Microsoft Teams to\nmake and receive phone calls, and we'd like to hear how it's going. Please take a\nfew minutes to share your experience with us by completing this online feedback\nsurvey.\n\nWe value your input, and we'll be sure to follow through on all feedback.\n\nRegards,\n\n<INSERT NAME OF EXECUTIVE SPONSOR>\n```\n\n----------------------------------------\n\nTITLE: Service Level Target Calculation (SL_met_positive_abandon)\nDESCRIPTION: This formula calculates the percentage of answered/abandoned calls that met service level target. Abandoned calls within service level target positively impact service level percentage.  It is null if sl_target is null.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-real-time-reports.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n([sl_tot_answered_calls + sl_tot_abandoned_calls] / tot_offered_calls\n```\n\n----------------------------------------\n\nTITLE: Enable Meeting Room - PowerShell\nDESCRIPTION: Enables a Skype for Business Server meeting room. To enable a meeting room you must first create an Active Directory user account that will represent that system. Meeting room objects are based on user accounts, but these objects will not show up when you run the Get-CsUser cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_47\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-CsMeetingRoom\n```\n\n----------------------------------------\n\nTITLE: Processing Report Data and Displaying Content\nDESCRIPTION: The JavaScript function `processReportData` takes a DOM element (`divReport`), report data (`reportData`), and an item ID (`itemId`) as input. It parses the JSON content of the report data and displays the item ID, the report title, and the entire report definition within the provided DOM element.  Error handling ensures that the function operates correctly only when both `divReport` and `reportData.content` are defined.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//show the report definition\nvar processReportData = function (divReport, reportData, itemId) {\n    if (divReport != undefined &amp;&amp; reportData.content != undefined) {\n        var Report = JSON.parse(reportData.content);\n\n        var divReportId = document.createElement('div');\n        var subItemId = reportData.subItemIds.length > 0 ? reportData.subItemIds[0].toString() : 'none';\n        divReportId.innerHTML = 'ItemId: ' + itemId.toString() + ' (' + Report.Title + ') [subItemId:' + subItemId + ']';\n        divReport.appendChild(divReportId);\n\n        var divReportDef = document.createElement('div');\n        txt = document.createTextNode(JSON.stringify(Report));\n        divReportDef.style.margin = '12px';\n        divReportDef.appendChild(txt);                            \n        divReport.appendChild(divReportDef);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Create New Announcement - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new announcement for handling unassigned numbers. It requires the parent Application Server service, a unique name for the announcement, and optionally an audio file prompt (specified from Import-CsAnnouncementFile), a text-to-speech prompt, language for TTS, or a target URI for transferring calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-an-announcement.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAnnouncement -Parent <service of Application Server running the Announcement application, in the form: service:ApplicationServer:<fqdn>> -Name <unique name to be used as destination in unassigned number table> [-AudioFilePrompt <FileName specified in Import-CsAnnouncementFile>] [-TextToSpeechPrompt <text string to be converted to speech>] [-Language <Language for playing the TTS prompt (required for PromptTts)>] [-TargetUri sip:SIPAddress for transferring caller after announcement]\n```\n\n----------------------------------------\n\nTITLE: Importing Management Pack using Operations Manager Shell in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to import a System Center Operations Manager management pack using the `Import-SCOMManagementPack` cmdlet. The `-FullName` parameter specifies the full path to the management pack file. This approach is useful for troubleshooting import errors, as it provides detailed information about any failures.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/configure-the-primary.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-SCOMManagementPack -FullName \"D:\\MP\\Microsoft.LS.2015.Monitoring.ActiveMonitoring.mp\"\n```\n\n----------------------------------------\n\nTITLE: Set Default Front Row Layout via XML - Teams Rooms\nDESCRIPTION: This XML snippet sets Front Row as the default layout for Teams Rooms. By adding `<DefaultFoRExperience>1</DefaultFoRExperience>` to the XML configuration file, the system will default to Front Row on the next restart.  End-users can still switch layouts during meetings using the view switcher.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-row.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<DefaultFoRExperience>1</DefaultFoRExperience>\n```\n\n----------------------------------------\n\nTITLE: Set Network InterSite Policy Cmdlet - PowerShell\nDESCRIPTION: This cmdlet modifies an existing network inter-site policy in Skype for Business Server.  It allows for adjustments to bandwidth allocation and other settings between network sites. Consult Microsoft documentation for parameter usage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsNetworkInterSitePolicy\n```\n\n----------------------------------------\n\nTITLE: Setting Test User Credentials for Watcher Nodes - PowerShell\nDESCRIPTION: This code snippet demonstrates how to set test user credentials for watcher nodes using the Set-CsTestUserCredential cmdlet. This is necessary when using the Negotiate authentication method. It requires the SipAddress, UserName, and Password for each test user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTestUserCredential -SipAddress \"sip:watcher1@litwareinc.com\" -UserName \"litwareinc\\watcher1\" -Password \"P@ssw0rd\"\nSet-CsTestUserCredential -SipAddress \"sip:watcher2@litwareinc.com\" -UserName \"litwareinc\\watcher2\" -Password \"P@ssw0rd\"\nSet-CsTestUserCredential -SipAddress \"sip:watcher3@litwareinc.com\" -UserName \"litwareinc\\watcher3\" -Password \"P@ssw0rd\"\n```\n\n----------------------------------------\n\nTITLE: Managing Conferencing Configuration via PowerShell\nDESCRIPTION: This section explains the management of conferencing configuration settings exclusively through the Skype for Business Server Management Shell. Users are instructed to search for cmdlets starting with `-CsConferencingConfiguration` to modify server-level conferencing parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch for **-CsConferencingConfiguration** cmdlets.\n```\n\n----------------------------------------\n\nTITLE: Reboot System using PowerShell\nDESCRIPTION: This PowerShell script reboots the specified remote computer immediately. It uses the `Shutdown` command with the `/r` (reboot) and `/t 0` (time-out 0 seconds) parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-operations.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\ninvoke-command { Shutdown /r /t 0 } -ComputerName <Device fqdn>\n```\n\n----------------------------------------\n\nTITLE: Disable Unified Background in Front Row via XML - Teams Rooms\nDESCRIPTION: This XML snippet disables the unified background feature in Front Row for Teams Rooms. By default, the unified background is enabled on devices with 4 cores or higher CPUs. Adding `<IsFrontRowUnifiedBackgroundEnabled>false</IsFrontRowUnifiedBackgroundEnabled>` to the XML configuration file turns it off.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-row.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<IsFrontRowUnifiedBackgroundEnabled>false</IsFrontRowUnifiedBackgroundEnabled>\n```\n\n----------------------------------------\n\nTITLE: Disable QoE Monitoring Globally - PowerShell\nDESCRIPTION: This command disables Quality of Experience (QoE) monitoring for the entire Skype for Business Server deployment by setting the EnableQoE property to False at the global scope. It uses the Set-CsQoEConfiguration cmdlet with the Identity parameter set to \"global\" and the EnableQoE parameter set to $False.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/call-detail-recording-and-qoe.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsQoEConfiguration -Identity \"global\" -EnableQoE $False\n```\n\n----------------------------------------\n\nTITLE: Remove Skype for Business On-Premises Objects using PowerShell\nDESCRIPTION: This code snippet disables or removes various Skype for Business Server objects from the on-premises deployment using PowerShell cmdlets. These objects include meeting rooms, common area phones, analog devices, ExUm contacts, dial-in conferencing access numbers, RGS workflows, trusted application endpoints, trusted applications, persistent chat endpoints, call park orbits, voice routes and unassigned numbers. The `-Force` parameter is used where required to bypass confirmation prompts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-remove-on-prem.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMeetingRoom | Disable-CsMeetingRoom\nGet-CsCommonAreaPhone | Remove-CsCommonAreaPhone \nGet-CsAnalogDevice | Remove-CsAnalogDevice\nGet-CsExUmContact | Remove-CsExUmContact\nGet-CsDialInConferencingAccessNumber | Remove-CsDialInConferencingAccessNumber\nGet-CsRgsWorkflow | Remove-CsRgsWorkflow\nGet-CsTrustedApplicationEndpoint | Remove-CsTrustedApplicationEndpoint\nGet-CsTrustedApplication | Remove-CsTrustedApplication -Force\nGet-CsPersistentChatEndpoint |  Remove-CsPersistentChatEndpoint\nGet-CsCallParkOrbit | Remove-CsCallParkOrbit -Force\nGet-CsVoiceRoute | Remove-CsVoiceRoute -Force\nGet-CsUnassignedNumber | Remove-CsUnassignedNumber -Force\n```\n\n----------------------------------------\n\nTITLE: Managing Persistent Chat Server with PowerShell Cmdlets\nDESCRIPTION: This section lists the PowerShell cmdlets available for managing Persistent Chat Server in Skype for Business. These cmdlets allow for the creation, modification, retrieval, and removal of categories, chat rooms, and add-ins, as well as the configuration of compliance settings and the export/import of chat data. The table summarizes each cmdlet and its primary function.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/persistent-chat.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Create Teams Meeting Broadcast Policy PowerShell\nDESCRIPTION: Creates a new Teams meeting broadcast policy with a specified identity (name). This allows for customized policy settings for specific groups of users. It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CSTeamsMeetingBroadcastPolicy -Identity DisabledBroadcastSchedulingPolicy\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CSTeamsMeetingBroadcastPolicy -identity EnableBroadcastSchedulingPolicy\n```\n\n----------------------------------------\n\nTITLE: Set Online PSTN Usage - PowerShell\nDESCRIPTION: This PowerShell command enables you to configure PSTN usage records for Direct Routing in Microsoft Teams.  These records are used to link voice routes to voice routing policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlinePstnUsage\n```\n\n----------------------------------------\n\nTITLE: Restoring Pool to Normal State using PowerShell\nDESCRIPTION: This PowerShell command restores the Persistent Chat pool to its normal state after failback.  Replace the identity with your Persistent Chat pool's identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/high-availability-and-disaster-recovery.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatState -Identity \"service: lyncpc.dci.discovery.com\" -PoolState Normal\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Graph PowerShell\nDESCRIPTION: This PowerShell snippet establishes a connection to Microsoft Graph using the Connect-MgGraph cmdlet.  It requires the 'User.ReadWrite.All' scope to allow modification of user properties. This step is a prerequisite for managing user password policies in Microsoft Graph.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/mtr-device-config-password-include.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MgGraph -Scopes \"User.ReadWrite.All\"\n```\n\n----------------------------------------\n\nTITLE: Get Server Applications in Skype for Business with PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves a list of server applications hosted by Skype for Business Server, along with their priority values. It is used to determine the appropriate priority to assign to the Location-Based Routing for Conferencing application before enabling it. The <Pool FQDN> placeholder must be replaced with the fully qualified domain name of the target pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/lbr-for-conferencing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsServerApplication -Identity Service:Registrar:<Pool FQDN>\n```\n\n----------------------------------------\n\nTITLE: Upgrade Listener Component - PowerShell\nDESCRIPTION: This PowerShell script upgrades the Listener component of Statistics Manager. It uninstalls the old version, installs the new version, and retains the Redis cache data. The script uses the Update-StatsMan.ps1 file with the -Service Listener parameter. The service password will be displayed in clear text on the command line.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/upgrade.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\Update-StatsMan.ps1 -Service Listener\n```\n\n----------------------------------------\n\nTITLE: Get Meeting Room - PowerShell\nDESCRIPTION: Returns information about all the Skype for Business Server meeting rooms configured for use in the organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_49\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMeetingRoom\n```\n\n----------------------------------------\n\nTITLE: Create New DTMF Configuration - Skype for Business - PowerShell\nDESCRIPTION: Creates a new collection of dual-tone multi-frequency (DTMF) signaling settings used for dial-in conferencing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsDialInConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Updating QoE Configuration using Set-CsQoEConfiguration (PowerShell)\nDESCRIPTION: This cmdlet updates an existing Quality of Experience (QoE) configuration for a specified site in Skype for Business.  The `-Identity` parameter specifies the site (e.g., `site:Redmond`), and the `-EnableQoE` parameter is used to enable or disable QoE reporting; in this case, it is being disabled (`$False`).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsQoEConfiguration -Identity site:Redmond -EnableQoE $False\n```\n\n----------------------------------------\n\nTITLE: Get CsOnlineUser using PowerShell\nDESCRIPTION: This cmdlet retrieves information about online users and it now supports SoftDeletedUsers parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_109\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: ABSConfig File Path\nDESCRIPTION: Specifies the default installation path of the ABSConfig tool after installing Skype for Business Server 2015 Resource Kit.  The ABSConfig.exe executable resides in this directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nPath: %ProgramFiles%\\Skype for Business Server 2015\\Reskit\n```\n\n----------------------------------------\n\nTITLE: List direct reports using Microsoft Graph API\nDESCRIPTION: Lists the direct reports of a user using the Microsoft Graph API. This enables applications to build organizational charts and hierarchies. Dependencies include Microsoft Graph API and a valid user ID. Output is a list of direct reports.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\n[List directReports](/graph/api/user-list-directreports)\n```\n\n----------------------------------------\n\nTITLE: MAU Registration for Name Mismatch Issue\nDESCRIPTION: This XML snippet provides a registration setup to address Microsoft Teams name mismatches. It includes registrations for 'Microsoft Teams.app', 'Microsoft Teams (work or school).app', and 'Microsoft Teams (work preview).app', all pointing to the same Application ID (TEAMS21), resolving update issues for users with outdated Teams names.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-update.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n/Applications/Microsoft Teams.app = {\n    \"Application ID\" = TEAMS21;\n}\n/Applications/Microsoft Teams (work or school).app = {\n    \"Application ID\" = TEAMS21;\n}\n/Applications/Microsoft Teams (work preview).app = {\n    \"Application ID\" = TEAMS21;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing a CLS Provider\nDESCRIPTION: This PowerShell snippet demonstrates how to replace an existing CLS provider within a scenario using the `Set-CsClsScenario` cmdlet and the `Replace` directive. This involves redefining the provider with the desired settings and then using the `Replace` directive to update the scenario.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n$LyssProvider = New-CsClsProvider -Name \"Lyss\" -Type \"WPP\" -Level \"Debug\" -Flags \"All\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsScenario -Identity \"site:Redmond/RedmondLyssInfo\" -Provider @{Replace=$LyssProvider}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Entra ID with PowerShell\nDESCRIPTION: This snippet connects to Microsoft Entra ID using the `Connect-MgGraph` cmdlet. It requires the Microsoft Graph PowerShell module to be installed. The user will be prompted to sign in with admin credentials.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-MgGraph\n```\n\n----------------------------------------\n\nTITLE: Get AppxPackage for SlimCore - PowerShell\nDESCRIPTION: This PowerShell command retrieves information about the SlimCore MSIX package installed on the endpoint.  It helps to verify if the SlimCore package is installed correctly and its version. The output includes details like PackageFullName, InstallLocation, and Version.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AppxPackage Microsoft.Teams.SlimCore*\n```\n\n----------------------------------------\n\nTITLE: Create AD FS Issuance Transform Rule\nDESCRIPTION: This PowerShell command creates an issuance transform rule to pass through the primary SID claim.  This rule is needed to ensure the correct user context is passed to Skype for Business. The IssuanceTransformRules variable defines the rule template.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$IssuanceTransformRules = '@RuleTemplate = \"PassThroughClaims\" @RuleName = \"Sid\" c:[Type == \"https://schemas.microsoft.com/ws/2008/06/identity/claims/primarysid\"]=> issue(claim = c);'\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Virtual Appointments Policy to User (PowerShell)\nDESCRIPTION: This PowerShell snippet grants a specific Teams Virtual Appointments Policy to a user.  It assigns the policy named \"New Hire SMS Policy\" to the user daniela@contoso.com. This action controls the user's access to SMS notifications within the Virtual Appointment template, as defined by the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/virtual-appointment-meeting-template.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsVirtualAppointmentsPolicy -Identity daniela@contoso.com -PolicyName \"New Hire SMS Policy\"\n```\n\n----------------------------------------\n\nTITLE: Create Unassigned Number Range for Exchange UM - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to create a new unassigned number range that routes calls to an Exchange UM Auto Attendant.  It requires the phone number of the Exchange UM Auto Attendant. The Identity parameter specifies a unique identifier for the unassigned number range.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-unassigned-number-range.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsUnassignedNumber -ExUmAutoAttendantPhoneNumber <phone number> -Identity <unique identifier for unassigned number range> -NumberRangeStart <first number in range> -NumberRangeEnd <last number in range>\n```\n\n----------------------------------------\n\nTITLE: Enable Federation Partner Discovery - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables the discovery of federation partners in Skype for Business Server.  It sets the EnablePartnerDiscovery property to True, requiring DNS SRV routing to be enabled.  The cmdlet modifies the global Access Edge Configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-discovery-of-federation-partners.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -UseDnsSrvRouting -EnablePartnerDiscovery $True\n```\n\n----------------------------------------\n\nTITLE: Setting CDR Retention for a Specific Location in PowerShell\nDESCRIPTION: This PowerShell snippet configures the CDR retention settings for a specific site (Redmond in this example). It enables purging of CDR data and sets the retention period for both call detail data and error reports to 20 days.  The `Set-CsCdrConfiguration` cmdlet is used to modify the CDR configuration for the specified identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/specify-retention-of-data.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCdrConfiguration -Identity \"site:Redmond\" -EnablePurging -KeepCallDetailForDays 20 -KeepErrorReportForDays 20\n```\n\n----------------------------------------\n\nTITLE: Initializing CU Version String PowerShell\nDESCRIPTION: Defines the minimum CU version string required for ADFS OAuth to be enabled for the Admin Control Panel. This variable is later used to verify the installed version.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\n$cu3VersionStr = \"7.0.2046.216\"\n```\n\n----------------------------------------\n\nTITLE: Get Attached Devices using PowerShell\nDESCRIPTION: This PowerShell script retrieves information about video, audio, and display devices connected to the specified remote computer. It uses `Get-WmiObject` to query the `Win32_PnPEntity` class, filtering by `PNPClass` to identify devices of interest. The results are formatted into tables showing device name, status, and presence.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-operations.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\ninvoke-command {Write-Host \"VIDEO DEVICES:\" \ngwmi -Class Win32_PnPEntity | where {$_.PNPClass -eq \"Image\" -or $_.PNPClass -eq \"Camera\"} | Format-Table Name,Status,Present; Write-Host \"AUDIO DEVICES:\" \ngwmi -Class Win32_PnPEntity | where {$_.PNPClass -eq \"Media\"} | Format-Table Name,Status,Present; Write-Host \"DISPLAY DEVICES:\" \ngwmi -Class Win32_PnPEntity | where {$_.PNPClass -eq \"Monitor\"} | Format-Table Name,Status,Present} -ComputerName <Device fqdn>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Workflow - PowerShell\nDESCRIPTION: These commands create the interactive workflow. First, a call action is created using New-CsRgsCallAction that specifies the TransferToQuestion action. Then, the workflow is created using New-CsRgsWorkflow, specifying the parent service ID, name, description, primary URI, line URI, display number, active status, anonymous status, default action, managed status, and managers by URI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\n$IVRAction = New-CsRgsCallAction -Action TransferToQuestion [-Question $Question]\n$IVRWorkflow = New-CsRgsWorkflow -Parent $ServiceId -Name \"Contoso Helpdesk\" [-Description \"The Contoso Helpdesk line.\"] -PrimaryUri \"sip:helpdesk@contoso.com\" [-LineUri tel:+14255554321] [-DisplayNumber \"+1 (425) 555-4321\"] [-Active $true] [-Anonymous $true] [-DefaultAction $IVRAction] [-Managed $true] [-ManagersByURI (\"sip:mindy@contoso.com\", \"sip:bob@contoso.com\")]\n```\n\n----------------------------------------\n\nTITLE: Resetting the Global Policy with PowerShell in Skype for Business\nDESCRIPTION: This PowerShell snippet resets the global external access policy in Skype for Business Server, effectively removing all settings. The global policy cannot be deleted, only reset. This is done using the Remove-CsExternalAccessPolicy cmdlet with the Identity parameter set to 'global'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/configure-policies-to-control-federated-user-access.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsExternalAccessPolicy -Identity global\n```\n\n----------------------------------------\n\nTITLE: Move Central Management Server - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet forces the move of the Central Management Server. It takes configuration file parameters, `ConfigurationFileName` and `LisConfigurationFileName`, and uses the `-Force` parameter to execute without prompting for confirmation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nMove-CsManagementServer -ConfigurationFileName c:\\CsConfigurationFile.zip -LisConfigurationFileName c:\\CsLisConfigurationFile.zip -Force\n```\n\n----------------------------------------\n\nTITLE: Managing Phone Number Assignment using PowerShell\nDESCRIPTION: These cmdlets are used for managing phone number assignments. Error handling has been improved.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_127\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set|Remove]-CsPhoneNumberAssignment\n```\n\n----------------------------------------\n\nTITLE: Modify Meeting Configuration Settings - PowerShell\nDESCRIPTION: Modifies the existing meeting configuration settings currently in use within the Skype for Business Server organization. This cmdlet allows administrators to adjust various meeting parameters. It requires access to the Skype for Business Server Management Shell and the appropriate permissions to modify the configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/meeting-configuration-settings.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsMeetingConfiguration](/powershell/module/skype/set-csmeetingconfiguration?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Getting Edited File Content for Web.config PowerShell\nDESCRIPTION: Gets the edited content for the internal and external OcsPsws web.config files using the `GetEditedFileContentForWebConfig` function. This function takes various parameters including whether ADFS OAuth is disabled, relative path, registry path, ADFS client ID, ADFS metadata public URI, ADFS issuer name and ADFS OAuth instance.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\n$internalOcsPswsWebConfigContent = GetEditedFileContentForWebConfig -disableAdfsOAuth $disableAdfsOAuth -relativePath $ocsPswsInternalWebConfigPath `\n-macpRegistryPath $macpRegPath -adfsClientId $adfsClientId -adfsMetadataPublicUri $adfsMetadataPublicUri -adfsIssuerName $adfsIssuerName -adfsOAuthInstance $adfsOAuthInstance\n\n$externalOcsPswsWebConfigContent = GetEditedFileContentForWebConfig -disableAdfsOAuth $disableAdfsOAuth -relativePath $ocsPswsExternalWebConfigPath `\n-macpRegistryPath $macpRegPath -adfsClientId $adfsClientId -adfsMetadataPublicUri $adfsMetadataPublicUri -adfsIssuerName $adfsIssuerName -adfsOAuthInstance $adfsOAuthInstance\n```\n\n----------------------------------------\n\nTITLE: Get Auto Attendant Phone Number - PowerShell\nDESCRIPTION: Retrieves the phone number assigned to an Auto Attendant resource account.  It uses Get-CsPhoneNumberAssignment, filtering by the AssignedPstnTargetId, which is the identity of the resource account.  The script then checks the NumberType to determine the appropriate emergency calling configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-scenario.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n## Get the phone number of the Auto attendant resource account\n$mainaa = 'main-aa@contoso.com'\n$PhoneNumber=Get-CsPhoneNumberAssignment -AssignedPstnTargetId $mainaa\n\nif ($PhoneNumber.NumberType -eq 'DirectRouting') {\n    # Define the emergency numbers for emergency calling\n    $en1=New-CsTeamsEmergencyNumber -EmergencyDialString 933 -OnlinePSTNUsage WW\n    $en2=New-CsTeamsEmergencyNumber -EmergencyDialString 911 -OnlinePSTNUsage WW\n\n    New-CsTeamsEmergencyCallRoutingPolicy -Identity TECRP-DR -EmergencyNumbers @{add=$en1,$en2} -AllowEnhancedEmergencyServices $true\n\n    # Grant the policy to the user\n    Grant-CsTeamsEmergencyCallRoutingPolicy -Identity $user -PolicyName TECRP-DR\n}\n\nelse {\n    # Define the emergency numbers for emergency calling\n    $en1=New-CsTeamsEmergencyNumber -EmergencyDialString 933\n    $en2=New-CsTeamsEmergencyNumber -EmergencyDialString 911\n\n    New-CsTeamsEmergencyCallRoutingPolicy -Identity TECRP-CPOC -EmergencyNumbers @{add=$en1,$en2} -AllowEnhancedEmergencyServices $true\n\n    # Grant the policy to the user\n    Grant-CsTeamsEmergencyCallRoutingPolicy -Identity $user -PolicyName TECRP-CPOC\n}\n```\n\n----------------------------------------\n\nTITLE: Create Tagged Location Policy - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new tagged location policy named 'Redmond' for Skype for Business Server. It enables enhanced emergency services, sets the location requirement to 'disclaimer', configures the disclaimer text, disables location use for E911 only, defines the PSTN usage, emergency dial string and mask, sets up a conference URI and mode, configures the notification URI, and sets the location refresh interval.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-location-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsLocationPolicy -Identity Tag:Redmond - EnhancedEmergencyServicesEnabled $true -LocationRequired \"disclaimer\" -EnhancedEmergencyServiceDisclaimer \"Your company policy requires you to set a location. If you do not set a location emergency services will not be able to locate you in an emergency. Please set a location.\" -UseLocationForE911Only $false -PstnUsage \"EmergencyUsage\" -EmergencyDialString \"911\" -EmergencyDialMask \"112\" -NotificationUri \"sip:security@litwareinc.com\" -ConferenceUri \"sip:+14255550123@litwareinc.com\" -ConferenceMode \"twoway\" -LocationRefreshInterval 2\n```\n\n----------------------------------------\n\nTITLE: Installing IIS Role Services with PowerShell\nDESCRIPTION: This PowerShell command utilizes the 'add-windowsfeature' cmdlet to install required IIS role services. It includes Web Server, Static Content, Default Document, ASP.NET, .NET Extensibility, ISAPI Extensions, ISAPI Filters, HTTP Logging, URL Authorization, Windows Authentication, and Management Console. The command ensures that all necessary components for CQD are available on the server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/plan.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nadd-windowsfeature Web-Server, Web-Static-Content, Web-Default-Doc, Web-Asp-Net, Web-Asp-Net45, Web-Net-Ext, Web-Net-Ext45, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Http-Logging, Web-Url-Auth, Web-Windows-Auth, Web-Mgmt-Console\n```\n\n----------------------------------------\n\nTITLE: Setting CsTeamsMeetingPolicy using PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to modify the `CsTeamsMeetingPolicy` to enable people recognition and voice identification within Microsoft Teams Rooms. It includes steps for importing the MicrosoftTeams module, connecting to Microsoft Teams with admin credentials, creating a new policy, setting the `RoomPeopleNameUserOverride` to `On`, and the `RoomAttributeUserOverride` to `Attribute`. The snippet then confirms the changes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/multistream-intelliframe.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module MicrosoftTeams\n$credential = Get-Credential   // Enter your admin’s email and password \nConnect-MicrosoftTeams –Credential $credential\n\nNew-CsTeamsMeetingPolicy    // enter identity name and use it in next steps \nSet-CsTeamsMeetingPolicy -identity {identity_name} –RoomPeopleNameUserOverride On \nGet-CsTeamsMeetingPolicy -identity {identity_name} // to confirm the changed value.\n\nNew-CsTeamsMeetingPolicy // enter identity name and use it in next steps.\nSet-CsTeamsMeetingPolicy -identity {identity_name} –RoomAttributeUserOverride Attribute\nGet-CsTeamsMeetingPolicy -identity {identity_name} // to confirm the changed value. \n```\n\n----------------------------------------\n\nTITLE: Failing back a Front End Server using Invoke-CsComputerFailBack (PowerShell)\nDESCRIPTION: The `Invoke-CsComputerFailBack` cmdlet is used to bring a Front End Server back into service after maintenance or patching is completed.  This cmdlet restores the server's workload after it has been temporarily moved to other servers in the pool using `Invoke-CsComputerFailOver`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/what-s-new-in-skype-for-business-server.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsComputerFailBack -Identity <ServerFQDN>\n```\n\n----------------------------------------\n\nTITLE: Listing Teams Users with Validation Errors\nDESCRIPTION: This PowerShell script lists Teams users with validation errors. It filters for users who are SIP enabled and have UserValidationErrors not equal to null. The script displays SipAddress, InterpretedUserType, OnPremHostingProvider, and UserValidationErrors.  This serves as another step in verifying the successful migration and identifying any remaining issues.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter {IsSipEnabled -eq $True} | where {$_.UserValidationErrors -ne $null} | fl SipAddress, InterpretedUserType, OnPremHostingProvider, UserValidationErrors\n```\n\n----------------------------------------\n\nTITLE: Removing EXUM Contacts for Subscriber Access - PowerShell\nDESCRIPTION: This PowerShell command removes the Exchange Unified Messaging (EXUM) contacts associated with subscriber access lines. It helps to avoid user confusion and an inconsistent experience due to greeting changes after migration to Cloud Voicemail. This script filters for contacts where 'IsSubscriberAccess' is true and then removes them.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/plan/exchange-unified-messaging-online-migration-support.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsExUmContact | ?{$_.IsSubscriberAccess -eq $true} | Remove-CsExUmContact\n```\n\n----------------------------------------\n\nTITLE: Remove Conference Directory - PowerShell\nDESCRIPTION: Removes an existing conference directory from Skype for Business Server. Conference directories help dial-in conferencing users locate conference information. Requires identifying the conference directory to remove. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_33\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Setting Call Via Work Global Phone Number (PowerShell)\nDESCRIPTION: This PowerShell cmdlet sets the global phone number that Skype for Business displays on the PBX caller ID of users making Call Via Work calls. The phone number must be provided in a format that includes the country code. The cmdlet modifies the routing configuration to include this number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-call-via-work.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsRoutingConfiguration -CallViaWorkCallerId +<PhoneNumber>\n```\n\n----------------------------------------\n\nTITLE: Blocking Multiple Mitigations - PowerShell\nDESCRIPTION: This PowerShell cmdlet blocks multiple mitigations by specifying a comma-separated list of Mitigation IDs. It allows administrators to selectively prevent certain mitigations from being applied to their Skype for Business Server pools. Replace `<poolName>` with the FQDN of the Skype for Business pool and `M0001,M002` with the desired mitigation IDs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/emergency-mitigation-service-overview.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Csmitigation - PoolFqdn <poolName> -MitigationBlocked M0001,M002\n```\n\n----------------------------------------\n\nTITLE: Move Meeting Room - PowerShell\nDESCRIPTION: Moves a Skype for Business Server meeting room object from one Registrar pool to another.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_50\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsMeetingRoom\n```\n\n----------------------------------------\n\nTITLE: Get All SIP Trunks - PowerShell\nDESCRIPTION: This command retrieves information about all SIP trunks configured in the Skype for Business Server environment. It leverages the `Get-CsTrunk` cmdlet without any specific parameters to fetch details for every trunk. The output displays various properties of each trunk, such as identity, pool FQDN, and associated PSTN gateway.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/view-sip-info.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsTrunk\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload\nDESCRIPTION: This is a sample JSON payload that would be sent to the configured webhook when a device goes offline. It includes example values for AlertTitle, DeviceLoggedInUserId, DeviceId, MetricValues (DeviceHealthStatus set to \"offline\"), RuleName, RuleDescription, RuleFrequency, RuleType, TenantId, RuleCondition, and AlertRaisedAt. This example provides a practical illustration of the schema and the data it contains.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/alerts/device-health-status.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"AlertTitle\":\"sample_device_name of User_Name has become offline\",\n    \"DeviceLoggedInUserId\": User_GUID ,\n    \"DeviceId\": Device_GUID ,  \n    \"MetricValues\": { \n       \"DeviceHealthStatus\": \"offline\"\n           },\n\n    \"RuleName\": \"Device state rule\" ,\n    \"RuleDescription\": \"Alerts when device health status is detected as offline\" ,\n    \"RuleFrequency\": \"Real-time\" ,\n    \"RuleType\": \"Device Management\" ,\n    \"TenantId\": Tenant_GUID ,\n    \"RuleCondition\": \"DeviceHealthStatus = Offline\" ,\n    \"AlertRaisedAt\": \"2020-02-28T12:49:06Z\"\n }\n```\n\n----------------------------------------\n\nTITLE: Stopping a CLS Logging Session (PowerShell)\nDESCRIPTION: This PowerShell command stops a specific Centralized Logging Service (CLS) session using the Stop-CsClsLogging cmdlet. It requires specifying the scenario name, computers, and pools associated with the logging session. This example stops the UserReplicator scenario on pool01.contoso.net.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/start-or-stop-log-capture.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nStop-CsClsLogging -Scenario <scenario name> -Computers <comma separated list of fully qualified computer names> -Pools <comma separated list of fully qualified pool names>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nStop-CsClsLogging -Scenario UserReplicator -Pools pool01.contoso.net\n```\n\n----------------------------------------\n\nTITLE: Valid Address Book Normalization Rule Example\nDESCRIPTION: This example shows a corrected normalization rule string that avoids whitespace and punctuation issues. The '?' characters make the optional spaces and hyphens.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-address-book.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\\s*\\(?\\s*\\d\\d\\d\\s*\\)?\\s*\\-?\\s*\\d\\d\\d\\s*\\-?\\s*\\d\\d\\d\\d\n```\n\n----------------------------------------\n\nTITLE: Get and Manage Team Targeting Hierarchy using PowerShell\nDESCRIPTION: These cmdlets are used to manage team targeting hierarchy. Get-TeamTargetingHierarchyStatus is used to retrieve the status and [Remove|Set]-TeamTargetingHierarchy is used to remove or set the hierarchy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_105\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-TeamTargetingHierarchyStatus & [Remove|Set]-TeamTargetingHierarchy\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Network Region with Get-CsNetworkRegion (PowerShell)\nDESCRIPTION: This snippet retrieves the details of a specific network region in Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the region to retrieve. The example retrieves the region named \"NorthAmerica\". It outputs a network region object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsNetworkRegion -Identity NorthAmerica\n```\n\n----------------------------------------\n\nTITLE: Create a new room mailbox (Exchange Server)\nDESCRIPTION: This PowerShell command creates a new room mailbox in Exchange Server, enabling it to authenticate with Microsoft Teams. It includes parameters for specifying the User Principal Name (UPN), name, alias, and password for the mailbox.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/mtr-device-config-account-include.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Mailbox -UserPrincipalName <UPN> -Name <String> -Alias <String> -Room -EnableRoomMailboxAccount $true -RoomMailboxPassword (ConvertTo-SecureString -String '<Password>' -AsPlainText -Force)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Mailbox -UserPrincipalName ConferenceRoom01@contoso.com -Name \"ConferenceRoom01\" -Alias ConferenceRoom01 -Room -EnableRoomMailboxAccount $true -RoomMailboxPassword (ConvertTo-SecureString -String 'P@$$W0rd5959' -AsPlainText -Force)\n```\n\n----------------------------------------\n\nTITLE: Configure Federated Users in Skype for Business - PowerShell\nDESCRIPTION: This PowerShell cmdlet configures the Access Edge to allow communication with federated users.  This is a prerequisite for enabling communication between on-premises Skype for Business Server and Exchange Online in a shared SIP address space scenario. The `AllowFederatedUsers` parameter must be set to `$True`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/outlook-web-app.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -AllowFederatedUsers $True\n```\n\n----------------------------------------\n\nTITLE: Get/New/Remove-CsTeamsShiftsConnectionTeamMap Cmdlets\nDESCRIPTION: This snippet documents the release of the `Get-CsTeamsShiftsConnectionTeamMap`, `New-CsTeamsShiftsConnectionTeamMap`, and `Remove-CsTeamsShiftsConnectionTeamMap` cmdlets.  These cmdlets are used to manage team mappings for the Teams Shifts connector, allowing administrators to retrieve, create, and delete team mappings between Teams Shifts and external systems.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_149\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsShiftsConnectionTeamMap\nNew-CsTeamsShiftsConnectionTeamMap\nRemove-CsTeamsShiftsConnectionTeamMap\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Array Properties in Get-CsOnlineUser\nDESCRIPTION: This snippet shows how to filter users based on whether an array property, such as `FeatureTypes`, contains a specific value. The `-contains` operator is used to check if the `FeatureTypes` array includes the string 'PhoneSystem'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_78\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter {FeatureTypes -contains \"PhoneSystem\"}\n```\n\n----------------------------------------\n\nTITLE: Overriding download folder cleanup via registry key setting\nDESCRIPTION: IT admins can override the default download folder cleanup behavior on Teams Rooms devices through registry key settings. This allows for customized management of storage and data retention. Requires modification of Windows registry.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-release-note.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Install Microsoft Graph Applications Module - PowerShell\nDESCRIPTION: This PowerShell command installs the Microsoft Graph Applications module, which is required for subsequent steps involving Microsoft Graph cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/oauth-with-online-and-on-premises.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name Microsoft.Graph.Applications\n```\n\n----------------------------------------\n\nTITLE: Set/Remove-CsPhoneNumberAssignment Cmdlets Release\nDESCRIPTION: This snippet highlights the release of the `Set-CsPhoneNumberAssignment` and `Remove-CsPhoneNumberAssignment` cmdlets.  The rollout is gradual, and some tenants might receive an error message referencing existing cmdlets that they can use until the full deployment is finished. It allows administrators to manage phone number assignments via PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_137\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment\nRemove-CsPhoneNumberAssignment\n```\n\n----------------------------------------\n\nTITLE: Remove User Account with Skype for Business Server Management Shell\nDESCRIPTION: This section describes how to remove a user account using the Skype for Business Server Management Shell. This process permanently deletes the user's Skype for Business Server settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/user-accounts/user-accounts.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Get Response Group Workflows - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves a list of Response Group workflows. It is used to verify that all workflows have been successfully migrated from the legacy environment. No specific parameters are required for this cmdlet to retrieve all workflows.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-response-groups.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsRgsWorkflow\n```\n\n----------------------------------------\n\nTITLE: Searching CLS Logs Excluding Network Logs - PowerShell\nDESCRIPTION: This PowerShell command searches the Centralized Logging Service logs, but excludes logs located on the network file share (defined via CacheFileNetworkFolder). It searches for entries related to 'SIPStack', 'S4', and 'UserServices' components within the specified time range (StartTime and EndTime). The `-SkipNetworkLogs` parameter prevents the inclusion of network logs. The results are saved to the defined output file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Components \"SIPStack\",\"S4\",\"UserServices\" -StartTime \"11/1/2012 00:00:01 AM\" -EndTime \"11/20/2012 2:45:00 PM\" -SkipNetworkLogs -OutputFilePath \"C:\\Logfiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Features for Directors - PowerShell\nDESCRIPTION: This PowerShell script installs the required Windows features and roles for Directors in a Skype for Business Server 2015 deployment.  It installs features such as Active Directory tools, IIS components, .NET Framework extensions, and other networking and management tools.  Note that it installs a similar set of features as the Front End/Standard Edition server script, but omits Dynamic Content Compression and Management Tools.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/requirements-for-your-environment/server-requirements.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-WindowsFeature RSAT-ADDS, Web-Server, Web-Static-Content, Web-Default-Doc, Web-Http-Errors, Web-Asp-Net, Web-Net-Ext, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Http-Logging, Web-Log-Libraries, Web-Request-Monitor, Web-Http-Tracing, Web-Basic-Auth, Web-Windows-Auth, Web-Client-Auth, Web-Filtering, Web-Stat-Compression, NET-WCF-HTTP-Activation45, Web-Asp-Net45, Web-Scripting-Tools, Web-Mgmt-Compat, Desktop-Experience, Telnet-Client\n```\n\n----------------------------------------\n\nTITLE: Disable Network Location Awareness via Registry\nDESCRIPTION: This procedure describes how to disable Network Location Awareness (NLA) by creating or modifying a registry entry. This ensures that network packets are marked with the appropriate DSCP value for QoS. It requires administrator privileges and modifying the registry.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-conferencing-application-and-mediation-servers.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n1.  Click **Start**, and then click **Run**.\n\n2.  In the **Run** dialog box, type **regedit**, and then press ENTER.\n\n3.  In the Registry Editor, expand **HKEY_LOCAL_MACHINE**, expand **SYSTEM**, expand **CurrentControlSet**, expand **services**, and then expand **Tcpip**.\n\n4.  Right-click **Tcpip**, point to **New**, and then click **Key**. After the new registry key is created, type **QoS**, and then press ENTER to rename the key.\n\n5.  Right-click **QoS**, point to **New**, and then click **String Value**. After the new registry value is created, type **Do not use NLA**, and then press ENTER to rename the value.\n\n6.  Double-click **Do not use NLA**. In the **Edit String** dialog box, type **1** in the **Value data** box, and then click **OK**.\n\n7.  Close the Registry Editor and reboot your computer.\n```\n\n----------------------------------------\n\nTITLE: Audio Stream Classification Logic - CQD\nDESCRIPTION: This snippet describes the logic used to classify audio streams as Poor in the Call Quality Dashboard (CQD). It checks if Round Trip Time (RTT) exceeds 500ms, Packet Loss Rate exceeds 0.1, or Jitter exceeds 30ms, given a packet utilization greater than 500 packets. The \"Poor Due To\" dimensions are used to identify the responsible metric.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/stream-classification-in-call-quality-dashboard.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nIf one or more of the following conditions are met and Packet Utilization is > 500 packets, an audio stream is marked as _Poor_:\n\n|Metric|Scenario|Condition|Explanation|\n|:-----|:-----|:-----|:-----|\n|Round Trip|ALL|> 500|Average round-trip network propagation time, computed in milliseconds. Details available in [RFC3550](https://tools.ietf.org/html/rfc3550).|\n|Packet Loss Rate|ALL|> 0.1|Average packet loss rate for stream.|\n|Jitter|ALL|> 30|Average jitter for stream in milliseconds.\n```\n\n----------------------------------------\n\nTITLE: Setting QoS for Video using PowerShell\nDESCRIPTION: This snippet uses the `New-NetQosPolicy` cmdlet to configure QoS policies for video traffic in both the new Teams client (ms-teams.exe) and the classic Teams client (Teams.exe). The policies specify the application path, IP protocol, source port range, and DSCP value to prioritize video traffic. Dependencies: Requires the NetQoS module in PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/QoS-in-Teams-clients.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nnew-NetQosPolicy -Name \"Teams Video\" -AppPathNameMatchCondition \"ms-teams.exe\" -IPProtocolMatchCondition Both -IPSrcPortStartMatchCondition 50020 -IPSrcPortEndMatchCondition 50039 -DSCPAction 34 -NetworkProfile All\nnew-NetQosPolicy -Name \"Classic Teams Video\" -AppPathNameMatchCondition \"Teams.exe\" -IPProtocolMatchCondition Both -IPSrcPortStartMatchCondition 50020 -IPSrcPortEndMatchCondition 50039 -DSCPAction 34 -NetworkProfile All\n```\n\n----------------------------------------\n\nTITLE: Conversation XML Structure\nDESCRIPTION: This XML snippet represents the overall structure of a conversation as outputted by the Skype for Business Compliance Service.  It includes elements for Channel, Messages, StartTimeUTC, and EndTimeUTC, encapsulating the metadata and message history of a conversation. It provides the general format for how conversations are logged.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?> \n<Conversations xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <Conversation>\n    <Channel uri=\"ma-chan://litwareinc.com/300\" name=\"ma-chan://litwareinc.com/300\" islogged=\"\" /> \n    <!--FirstMessage goes here --!>\n    <Messages> \n      <!—Messages go here--!>\n    </Messages>\n    <StartTimeUTC since1970=\"1212610540953\" string=\"2008-06-04T20:15:40.9535482Z\" long=\"633482073409535482\" /> \n    <EndTimeUTC since1970=\"1212610602532\" string=\"2008-06-04T20:16:42.5324614Z\" long=\"633482074025324614\" /> \n  </Conversation>\n</Conversations>\n```\n\n----------------------------------------\n\nTITLE: Create Conference Directory with New-CsConferenceDirectory (PowerShell)\nDESCRIPTION: This PowerShell command creates a new conference directory with the identity \"42\" and associates it with the specified home pool, \"atl-cs-001.litwareinc.com\". The Identity parameter specifies a unique identifier for the conference directory, and the HomePool parameter determines which Skype for Business pool hosts the directory. Ensure the specified HomePool exists and is correctly configured in your Skype for Business Server environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/directories.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsConferenceDirectory -Identity 42 -HomePool \"atl-cs-001.litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Basic MAU configuration example for Teams\nDESCRIPTION: This XML snippet shows a basic configuration for Microsoft Auto Update (MAU) for Microsoft Teams. It specifies the 'Application ID' which is crucial for MAU to identify and update the correct application. This configuration resides within the Applications dictionary.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-update.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nApplications= {\n      ...\n      \"/Applications/Microsoft Teams.app\" =     {\n        \"Application ID\" = TEAMS21;\n    };\n    ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Get RBAC Roles for Skype for Business Cmdlets - PowerShell\nDESCRIPTION: This command retrieves a list of all RBAC roles that are assigned to Skype for Business Server 2015 cmdlets. It uses the `Get-CsAdminRole` cmdlet to get all RBAC roles and filters the results to only include roles that have cmdlets matching the specified string.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Skype for Business Server 2015 cmdlet\"}\n```\n\n----------------------------------------\n\nTITLE: Add Delegate and Set Up Simultaneous Ringing - SEFAUtil\nDESCRIPTION: This example demonstrates how to add a user as a delegate and configure simultaneous ringing of delegates using the SEFAUtil command-line tool. The command takes the target user's SIP address and the delegate's SIP address as input, along with the /simulringdelegates switch to enable simultaneous ringing. The output shows the updated user settings including the delegate's SIP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /adddelegate:joe@contoso.com /simulringdelegates\n```\n\n----------------------------------------\n\nTITLE: Get/New/Set/Remove-CsTeamsShiftsConnectionInstance Cmdlets\nDESCRIPTION: This snippet refers to the release of the `Get-CsTeamsShiftsConnectionInstance`, `New-CsTeamsShiftsConnectionInstance`, `Set-CsTeamsShiftsConnectionInstance`, and `Remove-CsTeamsShiftsConnectionInstance` cmdlets. These cmdlets are used to manage connection instances for the Teams Shifts connector, including retrieving, creating, modifying, and deleting connection instances.  This allows control over the integration between Teams Shifts and external systems.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_148\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsShiftsConnectionInstance\nNew-CsTeamsShiftsConnectionInstance\nSet-CsTeamsShiftsConnectionInstance\nRemove-CsTeamsShiftsConnectionInstance\n```\n\n----------------------------------------\n\nTITLE: Example: Enable Location-Based Routing for Conferencing with PowerShell\nDESCRIPTION: This PowerShell cmdlet provides an example of enabling the Location-Based Routing for Conferencing application. It sets the identity to a specific pool FQDN, assigns a priority of '3', enables the application, sets it as critical, and specifies the URI. It's crucial to replace the placeholder values with environment-specific data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/lbr-for-conferencing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsServerApplication -Identity Service:Registrar:LS2013CU2LBRPool.contoso.com/LBRouting -Priority 3 -Enabled $true -Critical $true -Uri http://www.microsoft.com/LCS/LBRouting\n```\n\n----------------------------------------\n\nTITLE: Assign a PIN Policy to a Single User - PowerShell\nDESCRIPTION: This PowerShell snippet assigns a specific PIN policy to a single user.  The Grant-CsPinPolicy cmdlet is used with the Identity parameter to specify the user and the PolicyName parameter to specify the PIN policy to apply.  Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/assign-a-per-user-pin-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsPinPolicy -Identity \"Ken Myer\" -PolicyName \"RedmondPinPolicy\"\n```\n\n----------------------------------------\n\nTITLE: List allChannels via Microsoft Graph API\nDESCRIPTION: Lists all the channels in a team, including hidden channels using the Microsoft Graph API. Requires Team ID and necessary permissions. Output: List of all channels in the team.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_17\n\nLANGUAGE: HTTP\nCODE:\n```\n[List allChannels](/graph/api/team-list-allchannels).\n```\n\n----------------------------------------\n\nTITLE: Prompting for Domain Name in PowerShell\nDESCRIPTION: This snippet prompts the user for the application's domain name, defaulting to the computer's domain if the user doesn't provide one. It uses `Read-Host` to get user input and `IsNullOrWhiteSpace` to check if the input is empty.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$defaultDomain = $computerDetails.Domain\n\n$domain = Read-Host -Prompt \"Enter Admin Control Panel application's domain name e.g. contoso.com. Press ENTER to keep  $defaultDomain\"\nif([string]::IsNullOrWhiteSpace($domain))\n{\n    $domain = $defaultDomain\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Statistics Manager Server Information\nDESCRIPTION: This PowerShell command updates the Statistics Manager server information using the data from the provided XML file.  The '-CsPoolFile' parameter specifies the path to the 'mypoolinfo.xml' file containing the Skype for Business Server pool information. This script must be run from the Listener installation directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\Update-StatsManServerInfo.ps1 -CsPoolFile  <path to mypoolinfo.xml>\n```\n\n----------------------------------------\n\nTITLE: Back up Skype for Business Server Settings\nDESCRIPTION: Backs up Skype for Business Server settings using the Export-CsConfiguration command-line tool. This is essential for disaster recovery and allows restoring configuration data after a failure.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/test-disaster-recovery.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsConfiguration\n```\n\n----------------------------------------\n\nTITLE: Create EMEA_APAC_Route using New-CsNetworkInterRegionRoute (PowerShell)\nDESCRIPTION: This PowerShell command creates a new network interregional route named 'EMEA_APAC_Route' between the 'EMEA' and 'APAC' network regions, using the 'EMEA-APAC-LINK' network region link.  It makes use of the New-CsNetworkInterRegionRoute cmdlet to define the route.  The NetworkRegionID1 and NetworkRegionID2 parameters specify the two network regions to be connected, and the NetworkRegionLinkIDs parameter specifies the link to be used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-network-interregional-routes.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkInterRegionRoute -Identity EMEA_APAC_Route -NetworkRegionID1 EMEA -NetworkRegionID2 APAC -NetworkRegionLinkIDs \"EMEA-APAC-LINK\"\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Lists App in Teams Admin Center\nDESCRIPTION: This snippet details how to enable or disable the Lists app at the organizational level through the Microsoft Teams admin center. It involves navigating to Teams apps > Manage apps, searching for the Lists app, and then selecting either Block or Allow.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-lists-app.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n1. In the left pane of the Microsoft Teams admin center, go to **Teams apps** > **Manage apps**.\n2. Do one of the following:\n\n    - To turn off Lists for your organization, search for the Lists app, select it, and then select **Block**.\n    - To turn on Lists for your organization, search for the Lists app, select it, and then select **Allow**.\n```\n\n----------------------------------------\n\nTITLE: Remove-CsLocationPolicy Cmdlet\nDESCRIPTION: This cmdlet removes a location policy from Skype for Business. It is used to delete policies that are no longer needed. Refer to the linked documentation for details on available parameters and usage examples.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/enhanced-9-1-1-and-location-service.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsLocationPolicy\n```\n\n----------------------------------------\n\nTITLE: Assign Communication Credits Licenses in Bulk using PowerShell\nDESCRIPTION: This snippet demonstrates how to use PowerShell to assign Communication Credits licenses to multiple users in bulk. The article mentions the availability of PowerShell for license assignment to multiple users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-communications-credits-for-your-organization.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAlso, you can use [PowerShell](/powershell/module/teams/) to assign licenses to multiple users in bulk.\n```\n\n----------------------------------------\n\nTITLE: Enable Unified Contact Store by Tenant - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables the unified contact store for a specific tenant.  It modifies the tenant's user services policy, setting the UcsAllowed parameter to $True. Replace <tenantId> with the actual tenant ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-unified-contact-store.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserServicesPolicy -Tenant <tenantId> -UcsAllowed $True\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserServicesPolicy -Tenant \"38aad667-af54-4397-aaa7-e94c79ec2308\" -UcsAllowed $True\n```\n\n----------------------------------------\n\nTITLE: Creating a Skype for Business Queue with Variables - PowerShell\nDESCRIPTION: This PowerShell example creates a new queue named \"Help Desk\" in Skype for Business. It uses previously defined variables `$serviceId`, `$actionTO`, `$actionOV` and `$agid` for service ID, timeout action, overflow action, and agent group ID, respectively. It also sets the description, timeout threshold, overflow threshold, and overflow candidate.  The `NewestCall` parameter specifies that the newest call in the queue will be acted upon when the overflow threshold is met.  The AgentGroupIDList parameter accepts an array; however, in this specific example, it appears to have a syntax error as it ends with `($agid.Identity;` instead of `($agid.Identity)`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-queue.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$q = New-CsRgsQueue -Parent $serviceId -Name \"Help Desk\" -Description \"Contoso Help Desk\" -TimeoutThreshold 300 -TimeoutAction $actionTO -OverflowThreshold 10 -OverflowCandidate NewestCall -OverflowAction $actionOV -AgentGroupIDList($agid.Identity;\n```\n\n----------------------------------------\n\nTITLE: Updating Site Scope for Centralized Logging Service (CLS) - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to update the configuration for a specific site within the Centralized Logging Service.  It utilizes `Set-CsClsConfiguration` to change the `EtlFileRolloverSizeMB` parameter for the specified site.  Only computers and pools within that site (e.g., \"site/Redmond\") will be affected by this command. The Identity parameter is the site name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsConfiguration -Identity <scope/site name> -EtlFileRolloverSizeMB <size for logging file in megabytes>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsConfiguration -Identity \"site/Redmond\" -EtlFileRolloverSizeMB 40\n```\n\n----------------------------------------\n\nTITLE: Email Body: Launch Notification - New Phone System Live\nDESCRIPTION: This snippet contains the body of the third email, informing users that their Microsoft Teams application has been enabled with phone calling capabilities. It provides instructions on how to make calls and access voicemail. It also includes details about recycling old phones.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/prepare-my-users-email-templates.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWelcome to your new phone system. Your Microsoft Teams application\nhas been enabled with phone calling capabilities. You should now see a dial pad\ntab on your client, enabling you to make outgoing calls and listen to\nyour voicemail. When a call comes in, you'll receive an alert, just like you\nwould for an instant message. Just select the alert to answer the call – it's\nthat easy!\n\nCALL TO ACTION\n\n*  Plug in your headset, go to the Calls tab, and either\n   call a contact or use the dial pad to make a call. \n\n*  Start a chat, and escalate it to a call.\n\nWith the launch of phone calling capabilities in Teams, we'll be\nrecycling your old phone, allowing for more real estate on your desk.\n<INSERT PROCESS FOR RECYCLING OLD PHONES>\n\nIf you have any technical problems or questions, please feel free to contact our\nhelpdesk or visit <INSERT INTRANET LINK>.\n\nRegards,\n\n<INSERT NAME OF DEPARTMENT MANAGER OR EXECUTIVE SPONSOR>\n```\n\n----------------------------------------\n\nTITLE: Add/Remove User Delegates - PowerShell\nDESCRIPTION: This command enables adding or removing delegates from a user's delegate list in Skype for Business Server using PowerShell. The Delegates parameter is used to specify the delegates to add or remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserDelegates -Identity <UserIdParameter> [-Delegates @{add=[list]}] [-Delegates @{remove=[list]}]\n```\n\n----------------------------------------\n\nTITLE: Create Dial-in Access Number - Skype for Business PowerShell\nDESCRIPTION: This snippet creates a new dial-in conferencing access number using the `New-CsDialInConferencingAccessNumber` cmdlet. This number allows users to dial in to conferences from the PSTN.  It is associated with a dial plan region for correct routing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsDialInConferencingAccessNumber](/powershell/module/skype/new-csdialinconferencingaccessnumber?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Enable Global CDR Monitoring - PowerShell\nDESCRIPTION: This PowerShell command enables Call Detail Recording (CDR) monitoring at the global scope in Skype for Business Server. This allows tracking usage of features like VoIP calls and IM. It requires the Skype for Business Server Management Shell and appropriate RBAC permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/deploy-monitoring.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsCdrConfiguration -Identity \"global\" -EnableCDR $True\n```\n\n----------------------------------------\n\nTITLE: Failback Front End Server - PowerShell\nDESCRIPTION: This PowerShell cmdlet returns a Front End Server to service after applying an upgrade or patch. Replace `<Front End Server to be patched>` with the actual computer name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-front-end-servers.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsComputerFailBack -ComputerName <Front End Server to be patched>\n```\n\n----------------------------------------\n\nTITLE: Create AppLocker Policy for a Single DLL - PowerShell\nDESCRIPTION: This PowerShell command creates an AppLocker policy for a specific DLL file. It gets the file information, creates a new policy based on publisher and hash rules for everyone, allows Windows components, and outputs the policy to an XML file. The TMA file location depends on the installation type (per user or per machine).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-meeting-addin-security-with-outlook.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ChildItem <TMAFileLocation>\\Microsoft.Teams.AddinLoader.dll | Get-AppLockerFileInformation | New-AppLockerPolicy  -RuleType Publisher, Hash -User Everyone -RuleNamePrefix TeamsMeetingAddin -AllowWindows -Xml | Out-File .\\TMA.xml\n```\n\n----------------------------------------\n\nTITLE: Insert BSSID Data into CqdBssid Table - SQL\nDESCRIPTION: Inserts BSSID (Basic Service Set Identifier) data into the CqdBssid table for Call Quality Dashboard.  This allows for WiFi stream correlation. Requires the AP, Bss, Building, ess and phy parameters. The Bss parameter requires a specific delimited format.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/deploy-0.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO [dbo].[CqdBssid]\n([\nAp],\n[Bss],\n[Building],\n[ess],\n[phy]\n)\nVALUES\n('AP1','00-00-00-00-00-00','Aruba AP 1','Controller1','bgn')\n```\n\n----------------------------------------\n\nTITLE: Adding Live Chat Widget to Website - JavaScript\nDESCRIPTION: This snippet is a placeholder for the JavaScript code that is generated after adding a website URL in the Teams Admin app. It demonstrates where the code is copied from and where it's intended to be pasted within a website's HTML code to enable the live chat widget.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-live-chat.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Placeholder for Live Chat JavaScript code snippet\n// Paste this code snippet into your website’s code and publish your website.\n```\n\n----------------------------------------\n\nTITLE: Configure Reporting URL with PowerShell\nDESCRIPTION: This PowerShell command configures the URL used to access the installed Monitoring Reports. It uses the New-CsReportingConfiguration cmdlet and requires the Identity and ReportingURL parameters.  It is recommended to use the HTTPS protocol for the ReportingURL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/install-monitoring-reports.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsReportingConfiguration -Identity 'service:MonitoringDatabase:atl-sql-001.litwareinc.com' -ReportingURL 'https://atl-sql-001.litwareinc.com:443/Reports_ARCHINST'\n```\n\n----------------------------------------\n\nTITLE: Get RBAC roles with Skype for Business cmdlet - PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of all role-based access control (RBAC) roles that have been assigned cmdlets containing \"Skype for Business Server 2015 cmdlet\".  It's used to identify the roles that have permissions to execute Skype for Business Server cmdlets. The result is filtered using `Where-Object` to find roles that have the specified cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Skype for Business Server 2015 cmdlet\"}\n```\n\n----------------------------------------\n\nTITLE: Modify an existing CLS scenario using Set-CsClsScenario (Add)\nDESCRIPTION: This PowerShell command modifies an existing scenario by adding a new provider to it. The `Identity` parameter specifies the scope and name of the scenario.  Splatting (`@{Add=...}`) is used to add the new provider without removing the existing ones.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsScenario -Identity <name of scope and scenario defined by New-CsClsScenario> -Provider @{Add=<new provider to add>}\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsScenario -Identity \"site:Redmond/LyssServiceScenario\" -Provider @{Add=$S4Provider}\n```\n\n----------------------------------------\n\nTITLE: Configure Exchange Online Service Principal - PowerShell\nDESCRIPTION: This command enables the Exchange Online Service Principal. It requires connecting to MSOnline first.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-MSOLServicePrincipal -AppPrincipalID 00000002-0000-0ff1-ce00-000000000000 -AccountEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Retrieve User State from Batch Assignment\nDESCRIPTION: This PowerShell snippet retrieves detailed user state information from a batch policy assignment operation using the `Get-CsBatchPolicyAssignmentOperation` cmdlet. It filters the operation by its `OperationId` and then selects and expands the `UserState` property, providing specific error details for any failed assignments. This is used to diagnose and troubleshoot issues during the batch assignment process.  The `OperationId` should be replaced with the actual ID returned when the batch assignment was initiated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policy-packages.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsBatchPolicyAssignmentOperation -OperationId f985e013-0826-40bb-8c94-e5f367076044 | Select -ExpandProperty UserState\n```\n\n----------------------------------------\n\nTITLE: Changing Default Toll-Free Number for Users with Existing Number - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to change the default toll-free number for all users who currently have a specific toll-free number (8005551234) to a new number (8005551239) using the `Set-CsOnlineDialInConferencingUserDefaultNumber` cmdlet. It also automatically reschedules their meetings.  It uses `-FromNumber` to identify users with the existing number, `-ToNumber` for the new number, `-NumberType TollFree`, `-BridgeId`, and `-RescheduleMeetings`. The Skype for Business Online PowerShell module is a prerequisite.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingUserDefaultNumber -FromNumber 8005551234 -ToNumber 8005551239 NumberType TollFree -BridgeId <Bridge Id> -RescheduleMeetings\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for Policy Content in Lync Server\nDESCRIPTION: This XML schema defines the structure for the msRTCSIP-PolicyContent attribute, which contains policy definitions in XML format. It specifies the elements and attributes used to represent policy properties. The schema is intended to be common across different policy types, with settings varying for each type.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/active-directory-schema-extensions-classes-and-attributes/schema-attributes-and-descriptions.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?><xs:schema id=\"instance\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  <xs:element name=\"instance\" msdata:IsDataSet=\"true\">    <xs:complexType>      <xs:choice maxOccurs=\"unbounded\">        <xs:element name=\"property\" nillable=\"true\">          <xs:complexType>            <xs:simpleContent msdata:ColumnName=\"property_Text\" msdata:Ordinal=\"1\">              <xs:extension base=\"xs:string\">                <xs:attribute name=\"name\" type=\"xs:string\" />              </xs:extension>            </xs:simpleContent>          </xs:complexType>        </xs:element>      </xs:choice>    </xs:complexType>  </xs:element></xs:schema>\n```\n\n----------------------------------------\n\nTITLE: Setting Toll-Free Number by Country - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set the default toll-free number for all users located in a specific country (U.S.) using the `Set-CsOnlineDialInConferencingUserDefaultNumber` cmdlet. It also automatically reschedules their meetings. It requires the Skype for Business Online PowerShell module. The `-Country` parameter specifies the country code, `-ToNumber` defines the new toll-free number, `-NumberType TollFree`, `-BridgeId`, and `-RescheduleMeetings` parameters are also used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingUserDefaultNumber -Country US -ToNumber 8005551234 -NumberType TollFree -BridgeId <Bridge Id> -RescheduleMeetings\n```\n\n----------------------------------------\n\nTITLE: Get CVI Service Policy\nDESCRIPTION: This PowerShell cmdlet allows you to identify the preconstructed CVI policies that you can use in your organization. These policies, provided by Microsoft for supported partners, designate which partners to use for CVI. It retrieves existing Teams Video Interop Service Policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cloud-video-interop.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsVideoInteropServicePolicy\n```\n\n----------------------------------------\n\nTITLE: Modernized Get-CsTenant and Get-CsOnlineUser (2.5.1, 2.4.0-preview)\nDESCRIPTION: Modernized versions of Get-CsTenant and Get-CsOnlineUser (with -identity parameter only) are released. They no longer emit deprecated properties and have some formatting changes compared to their remoting counterparts. The version 2.4.0-preview introduced them and 2.5.1 is released.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_157\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTenant -Identity <identity>\nGet-CsOnlineUser -Identity <identity>\n```\n\n----------------------------------------\n\nTITLE: Creating Location Policies using New-CsLocationPolicy - PowerShell\nDESCRIPTION: The New-CsLocationPolicy cmdlet is used to create location policies in Skype for Business Server. These policies define settings for enhanced emergency services (E9-1-1), including location prompts, disclaimers, emergency dial strings, and PSTN usage. This allows administrators to customize emergency calling behavior based on user location.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/location-policies.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[New-CsLocationPolicy](/powershell/module/skype/new-cslocationpolicy?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Get Team ID via PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of teams in the organization, including their names and IDs. The output is saved to a CSV file, which can be used to find the TeamId required when creating the team hierarchy CSV file. This is necessary to link a node to a specific team within the hierarchy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Team | Export-Csv TeamList.csv\n```\n\n----------------------------------------\n\nTITLE: Create a site-level archiving policy\nDESCRIPTION: This PowerShell command creates a new archiving policy for the Redmond site. It utilizes the `New-CsArchivingPolicy` cmdlet with the `-Identity` parameter to specify the site for which the policy is being created. No other parameters are specified, so the policy uses default values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/create-a-new-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsArchivingPolicy -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Assign Specific Port Ranges - PowerShell\nDESCRIPTION: This command assigns specific port ranges for audio, video, application sharing, and file transfer for the global conferencing configuration. Ensure ClientMediaPortRangeEnabled is set to $True for this to take effect. Individual users must sign out and sign back in for changes to apply.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-skype-clients.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingConfiguration -Identity global -ClientAudioPort 50020 -ClientAudioPortRange 20 -ClientVideoPort 58000 -ClientVideoPortRange 20 -ClientAppSharingPort 42000 -ClientAppSharingPortRange 20 -ClientFileTransferPort 42020 -ClientFileTransferPortRange 20\n```\n\n----------------------------------------\n\nTITLE: Modifying External Access Policy with PowerShell in Skype for Business\nDESCRIPTION: This PowerShell snippet modifies an existing external access policy in Skype for Business Server. It requires the policy name and allows changing parameters like description, federation access, XMPP access, Public Cloud access, and outside access. The policy must already exist. Replace <name of global, site or user policy - policy must exist when using Set-CsExternalAccessPolicy > and other parameters with appropriate values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/configure-policies-to-control-federated-user-access.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsExternalAccessPolicy -Identity <name of global, site or user policy - policy must exist when using Set-CsExternalAccessPolicy > -Description <descriptive name for policy> -EnableFederationAccess <$true, $false> -EnableXmppAccess <$true, $false> -EnablePublicCloudAcess <$true, $false> -EnablePublicCloudAudioVideoAcess <$true, $false> -EnableOutsideAcess <$true, $false>\n```\n\n----------------------------------------\n\nTITLE: List teams using Microsoft Graph API\nDESCRIPTION: Lists the available Teams using the Microsoft Graph API. Requires authentication and permissions. Output: List of Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_15\n\nLANGUAGE: HTTP\nCODE:\n```\n[List teams](/graph/api/teams-list).\n```\n\n----------------------------------------\n\nTITLE: Connect Admin Account - Exchange Online PowerShell\nDESCRIPTION: This snippet connects an administrator account to Exchange Online PowerShell. Replace `UPN` with the actual User Principal Name of the admin account. This step is necessary to perform administrative tasks such as enabling or disabling connectors.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/m365-custom-connectors.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-ExchangeOnline -UserPrincipalName UPN -ExchangeEnvironmentName O365USGovGCCHigh\n```\n\n----------------------------------------\n\nTITLE: Install Statistics Manager Agent in Unattended Mode\nDESCRIPTION: This command-line example demonstrates how to install the Statistics Manager Agent on multiple machines in unattended mode. It uses `msiexec` to execute the MSI installer with specific parameters such as service thumbprint, password, and URI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmsiexec /l install.log /i StatsManPerfAgent.msi SERVICE_THUMBPRINT=<thumbprint> SERVICE_PASSWORD=<password> SERVICE_URI=https://<hostname>:<servicePort>/[INSTALLDIR=<directory>][DIR_STATSMANAPPDATA=<directory>]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Theme Image URL in XML - Teams Rooms\nDESCRIPTION: This XML snippet specifies the file name of the custom theme image to be used as the background in Microsoft Teams Rooms. The file should be placed in the `C:\\Users\\Skype\\AppData\\Local\\Packages\\Microsoft.SkypeRoomSystem_8wekyb3d8bbwe\\LocalState` directory. The file name (e.g., `ContosoBackground.png`) should match the actual image file name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/custom-backgrounds.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<CustomThemeImageUrl>ContosoBackground.png</CustomThemeImageUrl>\n```\n\n----------------------------------------\n\nTITLE: Deleting Web Conference Data Tool\nDESCRIPTION: This command uses the `WebConfDataTool.exe` to delete all inactive web conferencing data for a specified user. The `/User` parameter specifies the user's SIP address, and `/Action:delete` indicates the delete action.  The tool must be run in the same pool where the organizer is currently homed with administrator privileges and access to the Content File Store.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_33\n\nLANGUAGE: console\nCODE:\n```\nWebConfDataTool.exe /User:user0@contoso.com /Action:delete\n```\n\n----------------------------------------\n\nTITLE: Modify Dial-In Configuration - Skype for Business - PowerShell\nDESCRIPTION: Modifies settings that determine how Skype for Business Server responds when users join or leave a dial-in conference. This affects aspects like name recording and announcements.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Remove QoE Configuration Settings Where Monitoring Is Disabled - PowerShell\nDESCRIPTION: This PowerShell command removes all Quality of Experience (QoE) configuration settings where QoE monitoring is disabled (EnableQoE is set to $False). It retrieves all QoE configurations, filters them to find the ones where monitoring is disabled, and then removes those configurations using the Remove-CsQoEConfiguration cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/delete-qoe-configuration-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsQoEConfiguration | Where-Object {$_.EnableQoE -eq $False} | Remove-CsQoEConfiguration\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Skype UI Policy - PowerShell\nDESCRIPTION: This PowerShell command modifies an existing client policy named ExistingClientPolicyName to enable the Skype for Business client experience by setting the EnableSkypeUI parameter to $True. This only affects users assigned to this specific policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPolicy -Identity ExistingClientPolicyName -EnableSkypeUI $True\n```\n\n----------------------------------------\n\nTITLE: Uploading Team Hierarchy and Checking Status in PowerShell\nDESCRIPTION: This snippet uploads the generated CSV file to create a team targeting hierarchy. It uses the Set-TeamTargetingHierarchy cmdlet with the -FilePath parameter to specify the path to the CSV file. It then checks the status of the upload using Get-TeamTargetingHierarchyStatus.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nSet-TeamTargetingHierarchy -FilePath $csvOutputPath\nGet-TeamTargetingHierarchyStatus\n```\n\n----------------------------------------\n\nTITLE: Test AS Conference - PowerShell\nDESCRIPTION: Tests the ability of a pair of users to take part in an application sharing conference.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_53\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsASConference\n```\n\n----------------------------------------\n\nTITLE: Delete SLA group - PowerShell\nDESCRIPTION: Deletes a Shared Line Appearance (SLA) group. The Identity parameter specifies the identity of the SLA group to be removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-shared-line-appearance.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsSlaConfiguration -Identity <IdentityOfGroup>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsSlaConfiguration -Identity SLAGroup1\n```\n\n----------------------------------------\n\nTITLE: Setting Backup Service Sync Interval - PowerShell\nDESCRIPTION: This command modifies the synchronization interval for the Skype for Business Server Backup Service. The `-SyncInterval` parameter specifies the desired interval.  The interval format is HH:MM:SS.  It's crucial to avoid unnecessary changes to this setting, as it impacts performance and recovery point objective (RPO).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/configuring-and-monitoring-the-backup-service.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsBackupServiceConfiguration -SyncInterval interval\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsBackupServiceConfiguration -SyncInterval 00:03:00\n```\n\n----------------------------------------\n\nTITLE: Creating a New Agent Group using New-CsRgsAgentGroup in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new agent group using the `New-CsRgsAgentGroup` cmdlet. It requires the agent group name, parent service ID, and other optional parameters such as description, agent alert time, participation policy, routing method, and agent URIs. The `Parent` parameter specifies the service ID of the Application Server.  The command creates a new agent group within the Skype for Business Server environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-agent-group.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsRgsAgentGroup -Name \"<agent group name>\" -Parent $serviceId [-Description \"<agent group description>\"] -[AgentAlertTime <# seconds until call is routed to next agent>] [-ParticipationPolicy <Formal | Informal>] [-RoutingMethod <method for routing calls>] [-AgentsByUri(\"<first agent's SIP address>\",\"<second agent's SIP address>\")];\n```\n\n----------------------------------------\n\nTITLE: Get Users Response Payload - JSON\nDESCRIPTION: This JSON snippet shows a sample response payload returned by the Get Users operation. It is an array of User objects, each containing userId, loginName, and defaultItemId. The userId is a unique identifier, loginName is the user's login, and defaultItemId is related to the default item.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-users.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\n\"userId\": 0,\n\"loginName\": \"system\",\n\"defaultItemId\": 1652\n},\n{\n\"userId\": 1,\n\"loginName\": \"SAMPLEDOMAIN\\\\testuser1\",\n\"defaultItemId\": 1652\n},\n{\n\"userId\": 2,\n\"loginName\": \"SAMPLEDOMAIN\\\\testuser2\",\n\"defaultItemId\": 1774\n}]\n```\n\n----------------------------------------\n\nTITLE: Getting credentials for Microsoft Teams in PowerShell\nDESCRIPTION: This command prompts the user for their administrator email and password, which are then stored in the `$credential` variable. These credentials will be used to authenticate with Microsoft Teams when connecting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-configure.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$credential = Get-Credential   // Enter your admin’s email and password\n```\n\n----------------------------------------\n\nTITLE: BYOD PowerShell Script for En-Masse Association\nDESCRIPTION: This PowerShell script is used to retrieve peripheral details from rooms, enabling accurate location and mapping of peripherals to the corresponding room resource account. It requires administrator permissions to run and aids in associating peripherals to BYOD rooms in bulk.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/bring-your-own-device.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nYou can use a custom script to get peripheral details from rooms to locate peripherals correctly and ensure they're mapped to the corresponding room resource account. The PowerShell script located [here](https://www.microsoft.com/en-us/download/details.aspx?id=106063) must be run with administrator permissions.\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Meeting Broadcast Policy to User PowerShell\nDESCRIPTION: Assigns a Teams meeting broadcast policy to a specific user.  The `-PolicyName $null` parameter removes any existing policy assignments, effectively assigning the global policy.  It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingBroadcastPolicy -Identity {user} -PolicyName $null -Verbose\n```\n\n----------------------------------------\n\nTITLE: Force PIN Reset and Send Email with SSL (PowerShell)\nDESCRIPTION: This PowerShell example forces a new PIN with a value of \"383042650\" for bob@contoso.com, even if they already have an existing PIN. It then sends a welcome email from marco@contoso.com with the subject \"Your new dial-in conferencing PIN\". The command uses the `-Credential` parameter, prompting the user to enter a password, and sends the email using Secure Sockets Layer (SSL).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/welcome-emails.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPinSendCAWelcomeMail -UserUri \"bob@contoso.com\"\n-From \"marco@contoso.com\" -Subject \"Your new dial-in conferencing PIN\"\n-Pin \"383042650\" -Force\n-Credential Admin@contoso.com -UseSsl\n```\n\n----------------------------------------\n\nTITLE: Rendering Report Set Definition\nDESCRIPTION: The `showReportSetDefinition` function takes a DOM element (`divReportSet`) and a report set definition object (`reportSetDef`) as input. It creates a new div element, sets its margin style, creates a text node containing the report set definition content, appends the text node to the div, and then appends the div to the `divReportSet` element. The content of the `reportSetDef` is assigned to `ReportSetDefinition` and then set as the text of the newly created div.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//helper function to render the ReportSet definition\nvar showReportSetDefinition = function (divReportSet, reportSetDef) {\n    var div = document.createElement('div');\n    ReportSetDefinition = reportSetDef.content;\n    txt = document.createTextNode(ReportSetDefinition);\n    div.style.margin = '12px';\n    div.appendChild(txt);\n    divReportSet.appendChild(div);\n};\n```\n\n----------------------------------------\n\nTITLE: Call Parkometer Command-Line Parameters\nDESCRIPTION: This snippet describes the different command-line parameters available for the Call Parkometer tool, which allows users to interact with the Call Park Server orbit database. Parameters include options to list orbit ranges, used orbits, free orbits, recently parked calls, and test orbit reservation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n-o parameter—lists all orbit ranges configured for this pool.\n\n-n parameter—lists all currently used orbits in this pool. The information displayed is as follows:\n\n  - SIP Uniform Resource Identifier (URI) of the parkee and parker.\n\n  - Host name of the CPS where the call is parked.\n\n  - Time stamp of when the call was parked.\n\n-f parameter—lists the number of currently free orbits in the pool.\n\n-r <n> parameter—lists the <n> last parked calls. The information displayed is as follows:\n\n  - Parkee SIP URI.\n\n  - Parker SIP URI.\n\n  - Host name of the CPS where the call was parked.\n\n  - Time stamp of when the call was retrieved or dropped.\n\n-t<n> parameter - tests reserving an orbit in the database to show the randomness of the assigned orbit numbers.\n```\n\n----------------------------------------\n\nTITLE: Adding Tenant ID to Provisioning URL\nDESCRIPTION: This snippet demonstrates how to add the tenant ID to the provisioning URL for various SIP devices, which is a prerequisite for bulk sign-in.  Different URLs are provided for Alcatel-Lucent Enterprise, AudioCodes, Yealink, Cisco IP phones, and analog devices using AudioCodes ATAs and Cisco ATAs. The tenant ID should be replaced with the actual GUID of the tenant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-configure.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nFor Alcatel-Lucent Enterprise, AudioCodes, and Yealink IP phones use: `http://noam.ipp.sdg.teams.microsoft.com/tenantid/<your-tenant-ID-guid>`\n- For Cisco IP phones use: `http://noam.ipp.sdg.teams.microsoft.com/tenantid/<your-tenant-ID-guid>/$PSN.xml`\n- For analog devices that connect to AudioCodes ATAs use: `http://noam.ipp.sdg.teams.microsoft.com/tenantid/<your-tenant-ID-guid>/mac.ini`\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Busy Options - PowerShell\nDESCRIPTION: This set of commands enables logging for Busy Options using the Centralized Logging Service. It defines providers for S4, Sipstack, and BusyOptions and then creates a new CLS scenario named BusyOptions, and adding providers to it. These providers are configured with varying logging levels and flags to capture relevant information for troubleshooting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$p1 = New-CsClsProvider -Name S4 -Type WPP -Level Info -Flags All\n$p2 = New-CsClsProvider -Name Sipstack -Type WPP -Level Info -Flags\n \"TF_PROTOCOL,TF_CONNECTION,TF_SECURITY,TF_DIAG,TF_SHOW_CONFERENCE,TF_SHOW_ALLREQUESTS,TF_SHOW_ALLSIPHEADERS\" -Role Registrar\n$p3 = New-CsClsProvider -Name BusyOptions -Type WPP -Level Verbose -Flags All\nNew-CsClsScenario -Parent Global -Name BusyOptions -Provider @{Add=$p1,$p2,$p3}\n```\n\n----------------------------------------\n\nTITLE: Listing PIN Policies in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet retrieves a list of all PIN policies in Skype for Business. It does not require any specific parameters. The output displays the configured PIN policy settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Install Exchange Web Services API\nDESCRIPTION: This command installs the Exchange Web Services Managed API on the SharePoint server. It uses the msiexec command-line tool with specific parameters to install the necessary features and register the API in the Global Assembly Cache (GAC). This allows SharePoint to communicate with Exchange.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/sharepoint-to-search-for-archived-data.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmsiexec /I EwsManagedApi.msi addlocal=\"ExchangeWebServicesApi_Feature,ExchangeWebServicesApi_Gac\"\n```\n\n----------------------------------------\n\nTITLE: Sample Endpoint Data Row\nDESCRIPTION: This is an example of a valid row in the Endpoint data file for CQD. It demonstrates the expected column order and data format. The file should be either a .tsv or .csv file without headers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/CQD-upload-tenant-building-data.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1409W3534, Fabrikam, Model 123, Laptop, IT designated 2018 Laptop, Asset Tag 5678, Purchase 2018\n```\n\n----------------------------------------\n\nTITLE: CLS Logging Search on Multiple Pools - PowerShell\nDESCRIPTION: This command initiates a search using the Centralized Logging Service (CLS) across multiple pools. The `-Pools` parameter accepts a comma-separated list of pool FQDNs, including Front End, Persistent Chat, and Edge pools. The output is written to the specified file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Pools \"pool01.contoso.net\", \"pchatpool01.contoso.net\", \"intedgepool01.contoso.net\" -OutputFilePath \"C:\\Logfiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Enabling the Topology - PowerShell\nDESCRIPTION: The `Enable-CsTopology` cmdlet is used to apply the changes made to the topology, including the creation of the trusted application pool and the specification of SEFAUtil as a trusted application. This step activates the configured settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-group-call-pickup.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-CsTopology\n```\n\n----------------------------------------\n\nTITLE: Assign Location Policy to Existing Network Site - PowerShell\nDESCRIPTION: This PowerShell cmdlet assigns a specified location policy to an existing network site in Skype for Business Server. It requires the Skype for Business Server Management Shell. The `-Identity` parameter specifies the name of the network site to modify. The `-NetworkRegionID` parameter specifies the network region. The `-LocationPolicy` parameter defines the location policy to be assigned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/add-a-location-policy-to-a-network-site.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsNetworkSite -Identity \"Redmond\" -NetworkRegionID \"NorthAmerica\" -LocationPolicy \"Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Configuring an existing chat room with Set-CsPersistentChatRoom PowerShell cmdlet\nDESCRIPTION: These PowerShell snippets demonstrates how to configure an existing chat room, 'testCat', by adding members, presenters, and managers. It uses the Set-CsPersistentChatRoom cmdlet with the Identity, Members, Presenters and Managers parameters to add/remove users via SIP address or Active Directory objects.\n\nDependencies: Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/chat-rooms.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatRoom -Identity testCat -Members @{Add=\"sip:user1@contoso.com\", \"CN=container,DC=contoso,DC=com\"}\nSet-CsPersistentChatRoom -Identity testCat -Presenters @{Add=\"sip:user1@contoso.com\"}\nSet-CsPersistentChatRoom -Identity testCat -Managers @{Add=\"sip:user2@contoso.com\"}\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatRoom -PersistentChatPoolFqdn \"atl-cs-001.contoso.com\\NorthAmerica\" -Members @{Add=\"OU=NorthAmericaUsers,DC=contoso,DC=com\"}\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatRoom -PersistentChatPoolFqdn \"atl-cs-001.contoso.com\\NorthAmerica\" -Members @{Add=\"CN=Finance,OU=ExternalUsers,DC=contoso,DC=com\"}\n```\n\n----------------------------------------\n\nTITLE: Syncing All Module Data (Including RGS) - PowerShell\nDESCRIPTION: This command synchronizes data for all modules, including RGS.  This will perform a full data synchronization across all configured modules. Replace `<Pool FQDN>` with the actual FQDN of the pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nBackup-CsPool -PoolFqdn <Pool FQDN>\n```\n\n----------------------------------------\n\nTITLE: Releasing New-CsOnlineDirectRoutingTelephoneNumberUploadOrder cmdlet\nDESCRIPTION: This snippet releases the `New-CsOnlineDirectRoutingTelephoneNumberUploadOrder` cmdlet. This cmdlet likely allows uploading telephone numbers for Direct Routing configurations. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineDirectRoutingTelephoneNumberUploadOrder\n```\n\n----------------------------------------\n\nTITLE: Creating Top-Level Prompt - PowerShell\nDESCRIPTION: This command creates the top-level prompt using New-CsRgsPrompt. The prompt instructs the caller to press 1 for technical support or 2 for a sales representative.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\n$TopLevelPrompt = New-CsRgsPrompt -TextToSpeechPrompt \"Thank you for calling Contoso. For Technical Support, press 1. For a Sales Representative, press 2.\"\n```\n\n----------------------------------------\n\nTITLE: Video Stream Freeze Classification Logic - CQD\nDESCRIPTION: This snippet details the classification of video streams as Good or Poor based on the Video Poor Due to Freeze Classifier in the Call Quality Dashboard (CQD). It uses a score between 0 and 1, generated from user experience, freeze duration statistics, and overall call experience, to determine the stream's classification. It differentiates between Client:Server and Client:Client server pairs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/stream-classification-in-call-quality-dashboard.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n|Step #|Metric|Scenario|Condition |Classification if Condition is True |Classification if Condition is False |Classification if Metric is Unavailable |Explanation |\n|:--- |:--- |:--- |:--- |:--- |:--- |:--- |:--- |\n|1|Video Poor Due to Freeze Classifier |Is Server Pair is Client : Server|>0.246|_Poor_|_Good_|_Unclassified_|A Score between 0 and 1 that is generated based on a combination of user experience, freeze duration statistics, and overall call experience |\n|2|Video Poor Due to Freeze Classifier |Is Server Pair is Client : Client|>0.524|_Poor_|_Good_|_Unclassified_|A Score between 0 and 1 that is generated based on a combination of user experience, freeze duration statistics, and overall call experience |\n```\n\n----------------------------------------\n\nTITLE: Update User Mobile Phone with Extension using PowerShell (x only format)\nDESCRIPTION: This PowerShell snippet updates a user's mobile phone number attribute in Microsoft Entra ID with only the extension.  It utilizes the Update-MgUser cmdlet to modify the specified user's MobilePhone property. The extension is appended to the phone number using the 'x' format. Prerequisites include the Microsoft.Graph.Users PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-voice-reference.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-MgUser -UserId 'usern@domain.com' -MobilePhone 'x5678'\n```\n\n----------------------------------------\n\nTITLE: Set AD FS Relying Party Rules\nDESCRIPTION: These commands set the issuance authorization and transform rules for the AD FS relying party trust. The authorization rule allows all users. The transform rule passes through the primary security identifier (SID). Replace `ContosoApp` with the name of the relying party trust.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/deploy-web-downloadable-clients.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$IssuanceAuthorizationRules = '@RuleTemplate = \"AllowAllAuthzRule\" => issue(Type = \"http://schemas.contoso.com/authorization/claims/permit\", Value = \"true\");'$IssuanceTransformRules = '@RuleTemplate = \"PassThroughClaims\" @RuleName = \"Sid\" c:[Type == \"http://schemas.contoso.com/ws/2008/06/identity/claims/primarysid\"]=> issue(claim = c);'\n   Set-ADFSRelyingPartyTrust -TargetName ContosoApp -IssuanceAuthorizationRules $IssuanceAuthorizationRules -IssuanceTransformRules $IssuanceTransformRules\n   Set-CsWebServiceConfiguration -UseWsFedPassiveAuth $true -WsFedPassiveMetadataUri https://dc.contoso.com/federationmetadata/2007-06/federationmetadata.xml\n```\n\n----------------------------------------\n\nTITLE: Setting Client Policy to Disable Auto Tagging - PowerShell\nDESCRIPTION: This PowerShell command sets the 'Global' client policy by adding the previously created policy entry ('$x') to it, which disables auto-tagging feature for the smart contact list. This prevents automatic presence updates for the contacts in the auto-populated group. It relies on the 'TagContactsInClientAutoPopulatedGroup' policy entry to exist.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-smart-contacts-list.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsClientPolicy -Identity Global -PolicyEntry @{Add=$x}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Uninstall-CsMirrorDatabase Cmdlet\nDESCRIPTION: This example demonstrates removing SQL mirroring specifically for User databases using the Uninstall-CsMirrorDatabase cmdlet.  The parameters include SqlServerFqdn, SqlInstanceName, Verbose, DatabaseType, and DropExistingDatabasesOnMirror.  The specified databases are also dropped from the mirror server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/sql-mirroring-for-high-availability.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nUninstall-CsMirrorDatabase -SqlServerFqdn primaryBE.contoso.com -SqlInstanceName rtc -Verbose -DatabaseType User -DropExistingDatabasesOnMirror\n```\n\n----------------------------------------\n\nTITLE: Assign templates policy to a batch of users using PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign a Teams template permission policy to a batch of users. It uses the `New-CsBatchPolicyAssignmentOperation` cmdlet to initiate the assignment. The assignment is performed asynchronously, and its progress can be tracked using the `Get-CsBatchPolicyAssignmentOperation` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/templates-policies.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsBatchPolicyAssignmentOperation -OperationName <Any operation name> -PolicyType TeamsTemplatePermissionPolicy -PolicyName <policy name> -Identity <users identity | list of user identities>\n```\n\n----------------------------------------\n\nTITLE: Modify Conferencing Configuration - PowerShell\nDESCRIPTION: Modifies an existing collection of conferencing configuration settings in Skype for Business Server. Requires identifying the configuration to be modified and specifying which parameters to change. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Create Address Book Configuration for a Pool - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new Address Book configuration for a specific Skype for Business Server 2019 pool, setting UseNormalizationRules and IgnoreGenericRules to True.  This is used when the deployment includes a mix of legacy and Skype for Business Server 2019 servers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-address-book.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAddressBookConfiguration -identity <XdsIdentity> -UseNormalizationRules=$true -IgnoreGenericRules=$true\n```\n\n----------------------------------------\n\nTITLE: Remove Conferencing Policy - Skype for Business PowerShell\nDESCRIPTION: This cmdlet removes a specified conferencing policy. This allows administrators to delete custom policies that are no longer needed. The global policy cannot be removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing-policies.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Remove-CsConferencingPolicy](/powershell/module/skype/remove-csconferencingpolicy?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Deleting All Per-User Archiving Policies in Skype for Business using PowerShell\nDESCRIPTION: This PowerShell command retrieves all archiving policies applied at the per-user level (identified by the 'tag:*' filter) and then removes them. This reverts users to the global archiving policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/delete-an-existing-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsArchivingPolicy -Filter \"tag:*\" | Remove-CsArchivingPolicy\n```\n\n----------------------------------------\n\nTITLE: Disable Voice Isolation - PowerShell\nDESCRIPTION: This PowerShell command disables voice isolation in the meeting policy. The `-VoiceIsolation` parameter is set to `Disabled`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/voice-and-face-recognition.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n\n  -VoiceIsolation Disabled\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Recording Roll Out Policy - PowerShell\nDESCRIPTION: This snippet Releases [Get|New|Remove|Set|Grant]-CsTeamsRecordingRollOutPolicy cmdlets using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_70\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|New|Remove|Set|Grant]-CsTeamsRecordingRollOutPolicy\n```\n\n----------------------------------------\n\nTITLE: Creating Holiday Schedules for Auto Attendant\nDESCRIPTION: These PowerShell commands create holiday schedules for the auto attendant, specifying date ranges for Christmas and New Year. These schedules will be linked to call flows that provide specific greetings and handling during the holiday periods.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$dtr = New-CsOnlineDateTimeRange -Start \"24/12/2022\" -End \"25/12/2022\"\n\n$christmasSchedule = New-CsOnlineSchedule -Name \"Christmas\" -FixedSchedule -DateTimeRanges @($dtr)\n\n$dtr = New-CsOnlineDateTimeRange -Start \"01/01/2022\" -End \"02/01/2022\"\n\n$newyearSchedule = New-CsOnlineSchedule -Name \"New Year\" -FixedSchedule -DateTimeRanges @($dtr)\n```\n\n----------------------------------------\n\nTITLE: Testing Unified Contact Store Migration - PowerShell\nDESCRIPTION: This PowerShell command verifies whether the contacts for the user `kenmyer@litwareinc.com` have been successfully migrated to the unified contact store. It specifies the user's SIP address and the target FQDN.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-the-unified-contact-store.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nTest-CsUnifiedContactStore -UserSipAddress \"sip:kenmyer@litwareinc.com\" -TargetFqdn \"atl-cs-001.litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Set Exchange Autodiscover URL - PowerShell\nDESCRIPTION: This PowerShell cmdlet sets the Exchange Autodiscover URL to resolve potential OAuth failures during autodiscover due to CNAME redirection when using only Exchange Online with Skype for Business. It configures the OAuth settings to point to the correct autodiscover service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-a-multi-forest-environment-for-hybrid.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOAuthConfiguration -ExchangeAutoDiscoverURL https://autodiscover-s.outlook.com/autodiscover/autodiscover.svc\n```\n\n----------------------------------------\n\nTITLE: Failing over a Front End Server using Invoke-CsComputerFailOver (PowerShell)\nDESCRIPTION: The `Invoke-CsComputerFailOver` cmdlet is used to move the workload of a Front End Server to other servers in the pool before applying a patch or performing maintenance. This allows for patching servers with minimal downtime.  The server's name needs to be specified.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/what-s-new-in-skype-for-business-server.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsComputerFailOver -Identity <ServerFQDN>\n```\n\n----------------------------------------\n\nTITLE: Set Default Front Row Panel Components via XML - Teams Rooms\nDESCRIPTION: This XML snippet defines the default components displayed in the left and right panels of Front Row in Teams Rooms.  The `<FrontRowPanelDefaults>` element accepts two numeric values separated by a comma, representing the components for the left and right panels respectively.  Valid values are `1` (Hide), `2` (Show meeting chat), and `3` (Show raised hand list). If unspecified, the default is raise hand on the left and chat on the right in dual display mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-row.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<FrontRowPanelDefaults>3,2</FrontRowPanelDefaults>\n```\n\n----------------------------------------\n\nTITLE: Configuring User Name Extension for Dial by Name using PowerShell\nDESCRIPTION: This PowerShell cmdlet allows customization of dial-by-name search results by appending additional information, such as office or department, after the name when multiple users share the same name. This enhances caller experience and ensures accurate call routing. Note that this configuration is only available through PowerShell and isn't reflected in the Teams Admin Center; modifying settings in the Teams Admin Center will erase these PowerShell settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendant -UserNameExtension\n```\n\n----------------------------------------\n\nTITLE: SDP Answer Format with SDES to SBC\nDESCRIPTION: This code presents the format for a Session Description Protocol (SDP) answer containing SDES (Session Description Protocol Security Descriptions) sent back to an SBC.  It includes multiple crypto attributes with inline keys, salts, and session lifetime information, along with rtcp-mux.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-media.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nm=audio 54056 RTP/SAVP 111 103 104 9 0 8 description 106 13 110 112 113 126\na=rtcp:54056\na=crypto:2 AES_CM_128_HMAC_SHA1_80 inline:fBc61ikv1kMy0sF85DblNqTzVAbFa7hJQ9GKb6Yj|2^31|1:1\na=crypto:3 AES_CM_128_HMAC_SHA1_80 inline:O1qT9tWbs/NwJVwhfrgF5tCrbNOxnVDqkIqTx4rz|2^31\na=rtcp-mux\n```\n\n----------------------------------------\n\nTITLE: Listing Users Involved in Failed Sessions with PowerShell\nDESCRIPTION: This PowerShell script imports a CSV file containing failure list data and extracts a unique list of users involved in at least one failed session. It uses `Import-Csv` to read the data, `Sort-Object` to sort the results, and `Select-Object` with the `-Unique` parameter to get a list of unique \"From user\" entries. The script assumes that the CSV file has a column named \"From user\" representing the user's SIP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/failure-list-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$failures = Import-Csv -Path \" C:\\Data\\Failure_List.csv\"\n$failure |Sort-Object \"From user\" | Select-Object \"From user\" -Unique\n```\n\n----------------------------------------\n\nTITLE: Configuring QoS with Intune OMA-URI for New Teams\nDESCRIPTION: This section details how to create a device configuration policy for QoS for the new Microsoft Teams client on Windows using Microsoft Intune. It involves creating custom OMA-URI settings for audio, video, screen sharing, and calling/meeting signaling to set DSCP markings.  The OMA-URI settings include specifying the application executable name (ms-teams.exe), source port ranges, and corresponding DSCP values for each media type.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/QoS-in-Teams-clients.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: CSV File Formatting for Phone Number Porting\nDESCRIPTION: This section describes the required format for submitting phone numbers when creating a port order.  The phone numbers must be uploaded using a CSV file with specific formatting rules, including a header named 'PhoneNumber', one number per row, and the option to use either digits-only or E.164 format, matching the selected country or region.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/phone-number-calling-plans/more-information-about-porting.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n- You can give the file any name that you want.\n- The file must only have one column with a header named PhoneNumber.\n- Each phone number must be on a separate row.\n- Phone numbers can be digits only or in E.164 format.\n- The phone number format must match the country or region you selected. For example, if you choose the United Kingdom in the porting wizard, use 44, which is the country code, followed by the phone number with the correct number of digits. For example, 4420812341234.\n```\n\n----------------------------------------\n\nTITLE: Configuring QoS with Intune OMA-URI for Classic Teams\nDESCRIPTION: This section details how to create a device configuration policy for QoS for the classic Microsoft Teams client on Windows using Microsoft Intune. It involves creating custom OMA-URI settings for audio, video, screen sharing, and calling/meeting signaling to set DSCP markings. The OMA-URI settings include specifying the application executable name (teams.exe), source port ranges, and corresponding DSCP values for each media type.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/QoS-in-Teams-clients.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: CQD Filter Configuration (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows an example of how to configure filters for CQD reports.  It demonstrates setting filters on `[StartDate].[Month]`, `[Scenarios].[ScenarioPair]`, and `[StreamType].[StreamType]` dimensions, showcasing different operand values (0 for equals).  The `[Scenarios].[ScenarioPair]` filter simplifies scenario definition by combining multiple conditions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nFilters: [\n  { DataModelName: '[StartDate].[Month]', Value: currentMonth, Operand: 0 },\n  {\n    \"DataModelName\": \"[Scenarios].[ScenarioPair]\",\n    \"Caption\": \" Server-Inside-wired,Client-Inside-wired\",\n    \"Value\": \"[1]&amp;[0]&amp;[1]&amp;[1]&amp;[Wired]&amp;[Wired]\",\n    \"Operand\": 0,\n    \"UnionGroup\": \"\"\n  },\n\n  { DataModelName: '[StreamType].[StreamType]', Caption: \"Valid\", Value: \"[False]\", Operand: 0, UnionGroup: \"\" }\n],\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Group Configuration - PowerShell\nDESCRIPTION: This snippet demonstrates how to modify the Response Group application-level settings such as agent ringback grace period and disabling call context using the `Set-CsRgsConfiguration` cmdlet.  It requires the `Identity` parameter specifying the service hosting the Response Group. The `AgentRingbackGracePeriod` specifies the number of seconds until a call returns to the agent after being declined. `DisableCallContext` enables or disables call context for interactive workflows.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/managing-application-level-response-group-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsRgsConfiguration -Identity <name of service hosting Response Group> [-AgentRingbackGracePeriod <# seconds until call returns to agent after declined>] [-DefaultMusicOnHoldFile <audio file>] [-DisableCallContext <$true | $false>]\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Features for Skype for Business Server - PowerShell\nDESCRIPTION: This PowerShell script adds essential Windows features required for Skype for Business Server functionality, including AD DS tools, web server components, .NET framework extensions, and media foundation support. It prepares the server environment for a successful Skype for Business Server installation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/plan/system-requirements.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-WindowsFeature RSAT-ADDS, Web-Server, Web-Static-Content, Web-Default-Doc, Web-Http-Errors, Web-Asp-Net, Web-Net-Ext, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Http-Logging, Web-Log-Libraries, Web-Request-Monitor, Web-Http-Tracing, Web-Basic-Auth, Web-Windows-Auth, Web-Client-Auth, Web-Filtering, Web-Stat-Compression, Web-Dyn-Compression, NET-WCF-HTTP-Activation45, Web-Asp-Net45, Web-Mgmt-Tools, Web-Scripting-Tools, Web-Mgmt-Compat, Windows-Identity-Foundation, Server-Media-Foundation, Telnet-Client, BITS, ManagementOData, Web-Mgmt-Console, Web-Metabase, Web-Lgcy-Mgmt-Console, Web-Lgcy-Scripting, Web-WMI, Web-Scripting-Tools, Web-Mgmt-Service\n```\n\n----------------------------------------\n\nTITLE: Executing MsTurnPing\nDESCRIPTION: These snippets demonstrate how to execute the MSTurnPing tool from the command line with different ServerRole parameters. The first command tests the Audio/Video Edge Server, while the second tests the Bandwidth Policy Server. This tool is used to check the status and functionality of these services within a Skype for Business Server 2015 environment. The tool must be run on a computer within the topology that has the local store installed and must be run as an administrator.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nMsTurnPing -ServerRole AudioVideoEdgeServer\n```\n\nLANGUAGE: console\nCODE:\n```\nMsTurnPing -ServerRole BandwidthPolicyServer\n```\n\n----------------------------------------\n\nTITLE: Export Exchange UMO Prompt PowerShell\nDESCRIPTION: This PowerShell cmdlet exports the greeting media files used by Exchange Unified Messaging Online (ExUMO) auto attendants. The files are converted to .mp3 format for use with Cloud Auto Attendants. It requires Exchange Online PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/plan/exchange-unified-messaging-online-migration-support.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-UMprompt\n```\n\n----------------------------------------\n\nTITLE: Setting Skype User Proxy Registry with PAC - Windows\nDESCRIPTION: This snippet shows an example configuration of the Skype User proxy settings using a Proxy Auto-Configuration (PAC) file in the Windows Registry for Teams Rooms.  It sets 'MigrateProxy' and 'ProxyEnable' to 1, and specifies the 'AutoConfigURL' with the URL to the PAC file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-prep.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n[HKEY_USERS\\Skype\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings]\n\"MigrateProxy\"=dword:00000001\n\"ProxyEnable\"=dword:00000001\n\"AutoConfigURL\"=http://contosoproxy.corp.net/proxy.pac\n```\n\n----------------------------------------\n\nTITLE: Capturing Open Handles - Console\nDESCRIPTION: This command uses the 'handle' tool (from Sysinternals) to capture a list of all open handles in the system and saves the output to 'handles.txt'. This is useful for identifying processes that might be locking files and preventing Teams from updating.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/troubleshoot-installation.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhandle > handles.txt\n```\n\n----------------------------------------\n\nTITLE: Add DNS Pin-Point Zone for Skype for Business Domain\nDESCRIPTION: This code adds a pin-point zone and SRV record for the _sipinternaltls._tcp.contoso.com domain, creates a zone for the pool01.contoso.com domain, and adds A and AAAA records for two front-end servers with their IP addresses.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/network-requirements/advanced-edge-server-dns.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndnscmd . /zoneadd _sipinternaltls._tcp.contoso.com. /dsprimary\ndnscmd . /recordadd _sipinternaltls._tcp.contoso.com. @ SRV 0 0 5061 pool01.contoso.com.\ndnscmd . /zoneadd pool01.contoso.com. /dsprimary\ndnscmd . /recordadd pool01.contoso.com. @ A 192.168.10.90\ndnscmd . /recordadd pool01.contoso.com. @ AAAA <IPv6 address>\ndnscmd . /recordadd pool01.contoso.com. @ A 192.168.10.91 \ndnscmd . /recordadd pool01.contoso.com. @ AAAA <IPv6 address>\n```\n\n----------------------------------------\n\nTITLE: Enabling a chat room using Set-CsPersistentChatRoom PowerShell cmdlet\nDESCRIPTION: This PowerShell snippet demonstrates how to enable a previously disabled chat room named ITChatRoom on the pool atl-cs-001.contoso.com using the Set-CsPersistentChatRoom cmdlet and setting the Disabled parameter to $False. This makes the room available to users again.\n\nDependencies: Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/chat-rooms.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatRoom -Identity \"atl-cs-001.contoso.com\\ITChatRoom\" -Disabled $False\n```\n\n----------------------------------------\n\nTITLE: Creating Response Group Prompts - PowerShell\nDESCRIPTION: These commands create two response group prompts, one for support and one for sales, using New-CsRgsPrompt. The -TextToSpeechPrompt parameter specifies the text that will be spoken to the caller.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n$SupportPrompt = New-CsRgsPrompt -TextToSpeechPrompt \"Please be patient while we connect you with Contoso Technical Support.\"\n$SalesPrompt = New-CsRgsPrompt -TextToSpeechPrompt \"Please hold while we connect you with Contoso Sales.\"\n```\n\n----------------------------------------\n\nTITLE: Get CDR Configuration using PowerShell\nDESCRIPTION: This PowerShell command retrieves the current Call Detail Recording (CDR) configuration settings from the Skype for Business Server. It allows administrators to view the current purging settings configured for the CDR database.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/call-detail-recording-cdr-database-schema/purgesettings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCdrConfiguration\n```\n\n----------------------------------------\n\nTITLE: Getting Archiving Policy Details using Get-CsArchivingPolicy (PowerShell)\nDESCRIPTION: This cmdlet retrieves the details of a specific Archiving Policy based on its identity. The `-Identity` parameter specifies the site (e.g., `site:Redmond`). It returns an Archiving Policy object with all its properties for the specified site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsArchivingPolicy -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Enable customized scale and resolution (XML)\nDESCRIPTION: This XML snippet enables customized scale and resolution settings for front-of-room displays.  It's a prerequisite for setting individual display resolutions and scaling factors.  If dual displays are enabled, configuration for both MainFoRDisplay and ExtendedFoRDisplay must be provided, or the settings will be ignored.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-room-scale-res.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<EnableResolutionAndScalingSetting>true</EnableResolutionAndScalingSetting>\n```\n\n----------------------------------------\n\nTITLE: Translation Pattern for Normalization Rule\nDESCRIPTION: This example shows the 'Translation pattern' to preserve the original orbit number in a normalization rule for Call Park in Skype for Business Server. This ensures that the orbit number is not modified during the normalization process, which is crucial for the Call Park feature to function as expected. It uses backreference to the matched group from the pattern.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/verify-normalization-rules-for-call-park.md#_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n$1\n```\n\n----------------------------------------\n\nTITLE: Getting Online Application Instance - PowerShell\nDESCRIPTION: This snippet adds AcsResourceId output attribute to the Get-CsOnlineApplicationInstance cmdlet. This provides information on AcsResourceId using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_58\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineApplicationInstance\n```\n\n----------------------------------------\n\nTITLE: Assigning Archiving Policy to User with PowerShell\nDESCRIPTION: This PowerShell command assigns a specific archiving policy to a user. It uses the `Grant-CsArchivingPolicy` cmdlet, specifying the user's identity and the policy name to be applied. This allows administrators to customize archiving settings for individual users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/apply-a-policy-to-users.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsArchivingPolicy -Identity \"Ken Myer\" -PolicyName \"RedmondArchivingPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Importing Modules: SkypeOnlineConnector to MicrosoftTeams (PowerShell)\nDESCRIPTION: Illustrates how to update the `Import-Module` command in PowerShell scripts when migrating from the SkypeOnlineConnector or LyncOnlineConnector to the MicrosoftTeams module. This is a crucial step in switching to the new module for Teams management.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-move-from-sfbo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module -Name SkypeOnlineConnector\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module -Name MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Message Type: PART XML Example\nDESCRIPTION: This XML snippet illustrates a 'PART' message type, signifying a user leaving a chat room.  Similar to JOIN, the content attribute is empty, focusing on the event of a user exiting the chat.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<Message type=\"PART\" content=\"\" id=\"0\">\n  < Sender UserName=\"TestUser kazuto\" id=\"10\" email=\"kazuto@litwareinc.com\" internal=\"true\" uri=\"kazuto@litwareinc.com\" /> \n  <DateTimeUTC since1970=\"1212610602532\" string=\"2008-06-04T20:16:42.5324614Z\" long=\"633482074025324614\" /> \n</Message>\n```\n\n----------------------------------------\n\nTITLE: Remove Unassigned Number Range - PowerShell\nDESCRIPTION: This PowerShell command removes a specified unassigned number range from Skype for Business Server. The `-Identity` parameter specifies the name of the unassigned number range to be removed. The user must be a member of the RTCUniversalServerAdmins group or have equivalent permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-unassigned-number-range.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsUnassignedNumber -Identity \"<name of unassigned number range>\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Front End Pool Services - PowerShell\nDESCRIPTION: This command restarts all services in the Front End pool after an upgrade. It's a crucial step to ensure that the Skype for Business Server functionalities are properly initialized and available to users. The command targets the entire pool, ensuring consistency and reliability.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/upgrade.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsPool\n```\n\n----------------------------------------\n\nTITLE: Creating a Text-to-Speech Prompt for Skype for Business Queue - PowerShell\nDESCRIPTION: This PowerShell code snippet creates a new prompt using text-to-speech (TTS) for use in a Skype for Business Response Group queue.  It uses the `New-CsRgsPrompt` cmdlet and stores the resulting prompt object in the `$promptTO` variable. This prompt can then be used in subsequent actions, such as when a call times out in the queue. The `<text for TTS prompt>` placeholder should be replaced with the desired text.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-queue.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$promptTO = New-CsRgsPrompt -TextToSpeechPrompt \"<text for TTS prompt>\"\n```\n\n----------------------------------------\n\nTITLE: Disable VbSS for specific user policy - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies a specific user conferencing policy to disable Video-Based Screen Sharing (VbSS) by setting the ApplicationSharingMode to RDP. Replace [PolicyName] with the actual policy name. This command needs to be executed in the Skype for Business Management Console.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/video-based-screen-sharing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingPolicy -Identity [PolicyName] -ApplicationSharingMode RDP\n```\n\n----------------------------------------\n\nTITLE: Exporting Skype for Business Pool Information to XML\nDESCRIPTION: This PowerShell command retrieves information about each pool in the Skype for Business Server organization using the Get-CsPool cmdlet and exports it to an XML file named 'mypoolinfo.xml'.  This file is then used to import the topology into Statistics Manager. The command requires the Skype for Business Server PowerShell cmdlets to be available.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPool | Export-Clixml -Path mypoolinfo.xml\n```\n\n----------------------------------------\n\nTITLE: Get Integration Log Response Sample - JSON\nDESCRIPTION: This JSON snippet demonstrates the expected response format from the Get Integration Log operation. The response is an array of log entries, each containing a LogCategory, LogTime, and LogDescription. This shows the structure of the data returned, allowing developers to parse and interpret the logs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-integration-log.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n{\"LogCategory\":\"<category>\",\"LogTime\":\"2015-03-18T10:28:29.10\",\"LogDescription\":\"<log description>\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Assign Voice Route to PSTN Usage (PowerShell)\nDESCRIPTION: This PowerShell command creates a new online per-user voice routing policy named “AnalogInteropPolicy”. This policy is assigned a single online PSTN usage: “Interop\". This policy is then applied to specific users to control how their outbound calls are routed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-analog-devices.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> New-CsOnlineVoiceRoutingPolicy -Identity \"AnalogInteropPolicy\" -OnlinePstnUsages \"Interop\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Phone Numbers and Enabling Phone System\nDESCRIPTION: This PowerShell script assigns phone numbers to users and enables them for Phone System in Teams.  It imports user data from \"c:\\data\\SfbUsers.csv\" and iterates through each user. If a LineUri (phone number) is present, it uses `Set-CsPhoneNumberAssignment` to assign the number with PhoneNumberType DirectRouting. It removes the \"tel:\" prefix from the LineUri before assigning it.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n$sfbusers=import-csv \"c:\\data\\SfbUsers.csv\"\nforeach($user in $sfbusers){\nif($user.LineUri)\n     {\n          Set-CsPhoneNumberAssignment -Identity $user.SipAddress -PhoneNumber $user.LineUri.Replace(\"tel:\",\"\") -PhoneNumberType DirectRouting\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching CLS Logs Matching All Parameters - PowerShell\nDESCRIPTION: This PowerShell command searches the Centralized Logging Service logs and requires *all* specified parameters to match. It looks for log entries with the specified CallId ('d0af828e49fa4dcb99f5f80223a634bc') AND components ('SIPStack', 'S4', 'UserServices'). The results are saved to the specified output file path. The `-MatchAll` parameter enforces the AND condition.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -CallId \"d0af828e49fa4dcb99f5f80223a634bc\" -Components \"SIPStack\",\"S4\",\"UserServices\" -MatchAll -OutputFilePath \"C:\\Logfiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Generating Redirect URLs in PowerShell\nDESCRIPTION: This snippet generates the redirect URLs based on the pool names and domain(s). It loops through each pool name and creates URLs for login, logout, and the OAuth iframe. It also handles the case where an external domain is specified.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n[string[]] $redirectUrls = @()\nforeach ($poolName in $poolList)\n{\n    $redirectUrls += \"https://\" + $poolName + \".\" + $domain + \"/macp/login\"\n    $redirectUrls += \"https://\" + $poolName + \".\" + $domain + \"/macp/logout\"\n    $redirectUrls += \"https://\" + $poolName + \".\" + $domain + \"/macp/portal_oauth_iframe.html\"\n\n    if (![string]::IsNullOrWhiteSpace($extDomain))\n    {\n        $redirectUrls += \"https://\" + $poolName + \".\" + $extDomain + \"/macp/login\"\n        $redirectUrls += \"https://\" + $poolName + \".\" + $extDomain + \"/macp/logout\"\n        $redirectUrls += \"https://\" + $poolName + \".\" + $extDomain + \"/macp/portal_oauth_iframe.html\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Archiving Configuration for IM Only PowerShell\nDESCRIPTION: This PowerShell command creates a new collection of archiving configuration settings for the Redmond site using the `New-CsArchivingConfiguration` cmdlet.  It enables archiving only for instant messaging sessions using the `-EnableArchiving \"ImOnly\"` parameter. The Identity parameter is mandatory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/create-a-configuration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsArchivingConfiguration -Identity \"site:Redmond\" -EnableArchiving \"ImOnly\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global Client Policy - PowerShell\nDESCRIPTION: This PowerShell command sets the global client policy to enable the Lync client experience by disabling the Skype for Business UI. This command applies to all users unless overridden by more specific policies. Requires Skype for Business Server PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPolicy -Identity Global -EnableSkypeUI $False\n```\n\n----------------------------------------\n\nTITLE: Remove New Teams Package (All Users) - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves and removes the new Teams app package for all users on the computer. It uses Get-AppxPackage to find packages matching '*MSTeams*' and then pipes the results to Remove-AppxPackage with the -AllUsers parameter to remove it for all user profiles.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-uninstall.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AppxPackage *MSTeams* -AllUsers |Remove-AppxPackage -AllUsers\n```\n\n----------------------------------------\n\nTITLE: Creating an Executive Team via Graph API\nDESCRIPTION: This code snippet demonstrates how to create an Executive team using the Microsoft Graph API. It includes the HTTP POST request with the required JSON payload. The payload specifies the team's template, display name, description, and visibility. The request assumes a pre-existing template ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/smb-templates.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://graph.microsoft.com/beta/teams \nContent-Type: application/json \n{\n    \"template@odata.bind\": \"https://graph.microsoft.com/beta/teamsTemplates('SmallBusinessExecutive')\",\n    \"displayName\": \"Executive\",\n    \"description\": \"All posts, announcements and daily collaboration and communication for the company's leadership team.\",\n    \"visibility\": \"Private\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Count of Faculty Members\nDESCRIPTION: This PowerShell snippet retrieves the number of members in the `$faculty` array. Useful for determining the size of the user group before a bulk policy assignment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n$faculty.count\n```\n\n----------------------------------------\n\nTITLE: Verify Management Store Replication Status - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the replication status of the Central Management store to verify connectivity between internal servers and the Edge server. It utilizes the `Get-CsManagementStoreReplicationStatus` cmdlet to check the replication status.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-edge-server/validate-edge-deployment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsManagementStoreReplicationStatus\n```\n\n----------------------------------------\n\nTITLE: Example Stageview Modal Link\nDESCRIPTION: This snippet shows a fully constructed example of a reference URL pointing to a YouTube video within Teams.  It demonstrates how to specify the Teams app ID, destination URL, and page title for the Stageview modal link. If the YouTube app in Teams is available, this URL should open the specified video.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/app-powered-tasks-in-planner.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\nhttps://teams.microsoft.com/l/stage/com.microsoft.teamspace.tab.youtube/0?context={\"contentUrl\":\"https://tabs.teams.microsoft.com/youtubeContentStage?videoId=HBGmSy1iVmY\",\"name\":\"Security%20talk\",\"openMode\":\"modal\"}\n```\n\n----------------------------------------\n\nTITLE: Disable Skype for Business Active Directory Forest Changes using PowerShell\nDESCRIPTION: This PowerShell cmdlet undoes the Skype for Business Server forest-level changes in Active Directory. It requires membership in the Enterprise Admins group to modify Active Directory forest settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-remove-on-prem.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisable-CsAdForest\n```\n\n----------------------------------------\n\nTITLE: Get Teams Meeting Add-in Version - PowerShell\nDESCRIPTION: This PowerShell command retrieves the binary version of the MicrosoftTeamsMeetingAddinInstaller.msi file using the Get-AppLockerFileInformation cmdlet.  It filters the results by expanding the Publisher property and selecting the BinaryVersion. The path to the MSI file is hardcoded and should be adjusted based on the specific Teams installation path.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\WINDOWS\\system32> Get-AppLockerFileInformation -Path \"C:\\PROGRAM FILES\\WINDOWSAPPS\\MSTEAMS_24026.1000.2656.1710_X64__8WEKYB3D8BBWE\\MICROSOFTTEAMSMEETINGADDININSTALLER.MSI\" | Select -ExpandProperty Publisher | select BinaryVersion\n```\n\n----------------------------------------\n\nTITLE: Citrix Workspace App Plugin Installation\nDESCRIPTION: Instructions on how to install the Microsoft Teams VDI plugin for Citrix Workspace App (CWA) using the command line. The command is used to install the plugin for managed devices, and ensures that the plugin is properly integrated with the CWA installation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nC:\\>CitrixWorkspaceApp.exe installMSTeamsPlugin\n```\n\n----------------------------------------\n\nTITLE: Exporting Acquired Phone Number - PowerShell\nDESCRIPTION: This snippet illustrates the release of the `Export-CsAcquiredPhoneNumber` cmdlet to export acquired phone numbers using the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_48\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsAcquiredPhoneNumber\n```\n\n----------------------------------------\n\nTITLE: Restoring Device Update Rules - PowerShell\nDESCRIPTION: This cmdlet restores a device update rule. The Identity parameter specifies the rule to be restored.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\n Restore-CsDeviceUpdateRule -Identity service:WebServer:atl-cs-001.litwareinc.com/d5ce3c10-2588-420a-82ac-dc2d9b1222ff9\n```\n\n----------------------------------------\n\nTITLE: Configure Hosting Provider on Edge Server - PowerShell\nDESCRIPTION: This PowerShell cmdlet configures a hosting provider on the Edge Server for integration with Exchange Online.  Key parameters include `Identity`, `Enabled`, `EnabledSharedAddressSpace`, `HostsOCSUsers`, `ProxyFqdn`, `IsLocal`, and `VerificationLevel`. The `ProxyFqdn` parameter should be adjusted based on the specific Microsoft 365 or Office 365 environment (e.g., operated by 21Vianet in China, GCC High).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/outlook-web-app.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsHostingProvider -Identity \"Exchange Online\" -Enabled $True -EnabledSharedAddressSpace $True -HostsOCSUsers $False -ProxyFqdn \"exap.um.outlook.com\" -IsLocal $False -VerificationLevel UseSourceVerification\n```\n\n----------------------------------------\n\nTITLE: List Scenarios in Global Centralized Logging Service Configuration - PowerShell\nDESCRIPTION: This command retrieves a listing of the scenarios currently defined for the global scope within the Centralized Logging Service configuration. It shows providers, settings and flags that are used in the scenario.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClsConfiguration -Identity \"global\" | Select-Object -ExpandProperty Scenarios\n```\n\n----------------------------------------\n\nTITLE: Assigning a Meeting Policy to a Security Group (PowerShell)\nDESCRIPTION: This PowerShell command assigns the EducatorMeetingPolicy to a specified security group. It uses the group's email address to identify the group and sets the policy assignment ranking to 1. Higher ranking values take precedence.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsGroupPolicyAssignment -GroupId staff-faculty@contoso.com -PolicyType TeamsMeetingPolicy -PolicyName \"EducatorMeetingPolicy\" -Rank 1\n```\n\n----------------------------------------\n\nTITLE: Create Audio Conferencing Routing Policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new Audio Conferencing voice routing policy named 'Policy 1' and associates it with the 'US and Canada' PSTN usage. Audio Conferencing voice routing policies determine the available routes for dial-out calls from meetings, based on the destination number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-on-network.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineAudioConferencingRoutingPolicy \"Policy 1\" -OnlinePstnUsages \"US and Canada\"\n```\n\n----------------------------------------\n\nTITLE: Get Skype for Business Server Port Ranges - PowerShell\nDESCRIPTION: This PowerShell command retrieves the current port ranges configured for audio, video, and application sharing on a Conferencing server.  It uses the `Get-CsService` cmdlet to filter for Conferencing servers and then selects the relevant properties to display, allowing administrators to verify the existing port configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-conferencing-application-and-mediation-servers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsService -ConferencingServer | Select-Object Identity, AudioPortStart, AudioPortCount, VideoPortStart, VideoPortCount, AppSharingPortStart, AppSharingPortCount\n```\n\n----------------------------------------\n\nTITLE: Disable Skype for Business Active Directory Domain Changes using PowerShell\nDESCRIPTION: This PowerShell cmdlet undoes the Skype for Business Server domain-level changes in Active Directory. It requires appropriate permissions to modify Active Directory domain settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-remove-on-prem.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisable-CsAdDomain\n```\n\n----------------------------------------\n\nTITLE: Testing Push Notifications - PowerShell\nDESCRIPTION: This PowerShell command tests push notifications using the `Test-CsMcxPushNotification` cmdlet. It requires the Access Edge service FQDN.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nTest-CsMcxPushNotification -AccessEdgeFqdn <Access Edge service FQDN>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nTest-CsMcxPushNotification -AccessEdgeFqdn accessproxy.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Setting Online LIS Civic Address - PowerShell\nDESCRIPTION: This snippet indicates a fix for the postal code mapping in the `Set-CsOnlineLisCivicAddress` cmdlet using the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_54\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineLisCivicAddress\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Team Channel Messages via MS Graph API (HTTP)\nDESCRIPTION: This example demonstrates how to retrieve team channel messages using date and time filters and a top limit with the Microsoft Graph API. Requires the ChannelMessage.Read.All permission. It filters messages based on the lastModifiedDateTime.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/teams/{id}/channels/getAllMessages?$top=50&$filter=lastModifiedDateTime gt 2020-06-04T18:03:11.591Z and lastModifiedDateTime lt 2020-06-05T21:00:09.413Z\n```\n\n----------------------------------------\n\nTITLE: Replace User Delegates - PowerShell\nDESCRIPTION: This command replaces the existing list of delegates with a new list for a user in Skype for Business Server using PowerShell. The new delegate list is specified using the Delegates parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserDelegates -Identity <UserIdParameter> [-Delegates @{replace=[list]}]\n```\n\n----------------------------------------\n\nTITLE: Get callRecording via Microsoft Graph API\nDESCRIPTION: Retrieves a specific call recording using the Microsoft Graph API. Requires authentication and callRecordingId. Output: Call recording resource.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_22\n\nLANGUAGE: HTTP\nCODE:\n```\n[Get callRecording](/graph/api/callrecording-get).\n```\n\n----------------------------------------\n\nTITLE: Remove Normalization Rule by Index\nDESCRIPTION: This script first retrieves the normalization rules of the RedmondDialPlan, displays them, and then removes a specific rule based on its index in the array. In this case, the rule at index 1 (the 3-digit normalization rule) is removed. The script shows how to examine existing rules before removing them.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n(Get-CsTenantDialPlan RedmondDialPlan).NormalizationRules\nDescription         : 4-digit\nPattern             : ^(\\\\d{4})$\nTranslation         : +1426666$1\nName                : NR2\nIsInternalExtension : False\n\nDescription         : 3-digit\nPattern             : ^(\\\\d{3})$\nTranslation         : +14255551$1\nName                : NR12\nIsInternalExtension : False\n\n$nr1=(Get-CsTenantDialPlan RedmondDialPlan).NormalizationRules[1]\nSet-CsTenantDialPlan -Identity RedmondDialPlan -NormalizationRules @{remove=$nr1}\n```\n\n----------------------------------------\n\nTITLE: Disable Communication between On-premises and Microsoft 365 - PowerShell\nDESCRIPTION: This PowerShell command disables communication between the on-premises Skype for Business environment and Microsoft 365.  It retrieves the hosting provider and sets its Enabled property to $false, which is a critical step in logically separating the environments.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-disabling-hybrid.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsHostingProvider|Set-CsHostingProvider -Enabled $false\n```\n\n----------------------------------------\n\nTITLE: Disable Actionable Messages in Teams Activity Emails - PowerShell\nDESCRIPTION: This PowerShell command disables the actionable messages feature in Microsoft Teams activity emails at the organization level. After executing this command, users will no longer be able to reply directly from Outlook; instead, they will be directed to reply within the Teams application. This configuration change affects all users in the organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-outlook-email-integration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-OrganizationConfig -SmtpActionableMessagesEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - 5-Digit Extension (.NET Regex)\nDESCRIPTION: This normalization rule translates 5-digit extensions starting with '5' to E.164 format. It uses a .NET Framework regular expression to match '5' followed by 4 digits, and prepends \"+1425555\" to the matched digits. The input is a 5 digit number starting with 5, and the output is the E.164 formatted number. The first captured group ($1) is appended to the translation string.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_1\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^5(\\d{4})$\n```\n\n----------------------------------------\n\nTITLE: Get-CsAdDomain Cmdlet Usage - PowerShell\nDESCRIPTION: This snippet demonstrates the usage of the Get-CsAdDomain cmdlet in PowerShell to verify domain preparation in Skype for Business Server. It shows the general syntax and a specific example with parameters for Domain and GlobalSettingsDomainController. The GlobalSettingsDomainController parameter allows specifying the location where global settings are stored, which can be either the System container or the Configuration container in Active Directory Domain Services. The cmdlet returns 'LC_DOMAIN_SETTINGS_STATE_READY' if domain preparation was successful.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/help-depwiz/verify-replication-in-the-domain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdDomain [-Domain <Fqdn>] [-DomainController <Fqdn>] [-GlobalCatalog <Fqdn>] [-GlobalSettingsDomainController <Fqdn>]\n```\n\n----------------------------------------\n\nTITLE: Remove Archiving Configurations where Exchange Archiving is Disabled (PowerShell)\nDESCRIPTION: This PowerShell command retrieves all archiving configuration settings where Exchange archiving is disabled and then removes those configurations.  This helps clean up configurations that are not actively being used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/delete-a-configuration.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsArchivingConfiguration | Where-Object {$_.EnableExchangeArchiving -eq $False} | Remove-CsArchivingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Setting Default Toll-Free Number for All Users - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set the default toll-free number for all users who don't already have one, using the `Set-CsOnlineDialInConferencingUserDefaultNumber` cmdlet. The `-FromNumber` parameter is set to `$null` to target users without a default number, and `-ToNumber` specifies the new toll-free number. `-NumberType` is set to `TollFree`, and `-BridgeId` is required. The Skype for Business Online PowerShell module is a prerequisite.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingUserDefaultNumber -FromNumber $null -ToNumber 8005551234 -NumberType TollFree -BridgeId <Bridge Id>\n```\n\n----------------------------------------\n\nTITLE: Querying Web Conference Data Tool\nDESCRIPTION: This command executes the `WebConfDataTool.exe` to query web conferencing data for a specific user. The `/User` parameter specifies the user's SIP address, `/Action:query` indicates the query action, and `/ExpirationDate` filters data based on a date. The tool must be run in the same pool as the target user with administrator privileges and access to the Content File Store.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_32\n\nLANGUAGE: console\nCODE:\n```\nWebConfDataTool.exe /User:user0@contoso.com /Action:query \"\"/ExpirationDate:08/09/2010 12:00:00\"\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Registry Key for Citrix VDA Teams Optimization (REG_MULTI_SZ)\nDESCRIPTION: This snippet shows the registry key to be deployed on the Citrix Virtual Delivery Agent (VDA) to enable optimization for the new Teams client. It adds msedgewebview2.exe to the ProcessWhitelist, allowing Teams to operate in optimized mode. If the key is missing or incorrectly configured, Teams runs in server-side rendering mode (non-optimized). VDA version 2402 or later do not require this registry key.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_1\n\nLANGUAGE: registry\nCODE:\n```\n- Location:\t HKLM\\SOFTWARE\\WOW6432Node\\Citrix\\WebSocketService\n- Key (REG_Multi_SZ): ProcessWhitelist\n- Value: msedgewebview2.exe\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Level in Web.config for SRS Logging\nDESCRIPTION: This XML snippet shows how to configure the trace level in the Web.config file to obtain more detailed logs for troubleshooting issues with the Skype Room System (SRS) administrative web portal.  The `TraceLevelSwitch` value determines the level of detail in the logs, with higher values providing more information. A value of \"3\" is used in this example.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/room-system-v1-administrative-web-portal.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <system.diagnostics>\n    <switches>\n      <!--\n      This switch controls logging message levels. 0 implies\n      logging is turned off. 1 implies only errors are logged,\n      2 implies errors &amp; warnings. 4 is the most detailed.\n      -->\n      <add name=\"TraceLevelSwitch\" value=\"3\" />\n    </switches>\n  </system.diagnostics>\n```\n\n----------------------------------------\n\nTITLE: Enable Skype for Business User and Set SIP Address - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables a user for Skype for Business and sets their SIP address. It is used for users created in on-premises Active Directory (AD) and then synchronized with Skype for Business Online without being enabled for Skype for Business or Enterprise Voice, and without a LineURI set. The `-HostingProvider` parameter specifies the hosting provider, and the `-SipAddress` parameter sets the user's SIP address. Replace `<UserName>` and `<SIP Domain>` with the appropriate values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/skype-for-business-hybrid-solutions/plan-your-phone-system-cloud-pbx-solution/enable-the-users-for-enterprise-voice-on-premises.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-CsUser $username -HostingProvider sipfed.online.lync.com -SipAddress sip:<UserName>@<SIP Domain>\n```\n\n----------------------------------------\n\nTITLE: Configuring Voice Mail Escape using Set-CsVoicePolicy - PowerShell\nDESCRIPTION: This code snippet demonstrates how to configure voice mail escape settings using the `Set-CsVoicePolicy` cmdlet in Skype for Business Server Management Shell.  It sets the `EnableVoiceMailEscapeTimer` parameter to `$true` to enable the feature and the `PSTNVoicemailEscapeTimer` parameter to specify the timeout value in milliseconds.  The first example modifies a user voice policy named `UserVoicePolicy` and the second example updates a site-level policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-voice-mail-escape.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsVoicePolicy UserVoicePolicy -EnableVoiceMailEscapeTimer $true - PSTNVoicemailEscapeTimer 2000\nSet-CsVoicePolicy -Identity site:SitePolicy -EnableVoiceMailEscapeTimer $true -PSTNVoicemailEscapeTimer 1500\n```\n\n----------------------------------------\n\nTITLE: Extract Microsoft Teams Rooms Installation Package\nDESCRIPTION: This command extracts the files from the Microsoft Teams Rooms installation package (MSI) to a specified target directory. It uses the `msiexec` command-line tool with the `/a` option to perform an administrative installation and the `/qb` option for a basic UI during the extraction process. `PathToMsi` should be replaced with the actual path to the MSI file, and `PathToTarget` should be replaced with the desired output directory. The command preserves the directory structure of the original package.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/recovery-tool.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nmsiexec /a PathToMsi /qb TARGETDIR=PathToTarget\n```\n\n----------------------------------------\n\nTITLE: Add Team Member and Set Up Simultaneous Ringing to Team - SEFAUtil\nDESCRIPTION: This example shows how to add a team member to the team-call group of a user and enable simultaneous ringing to the team-call group using the SEFAUtil command-line tool. The command takes the target user's SIP address and the team member's SIP address as input, using the /addteammember switch to add the member and the /simulringteam switch to enable simultaneous ringing to the team.  The output displays the team ringing enabled setting with the team member.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /addteammember:anders@contoso.com /simulringteam\n```\n\n----------------------------------------\n\nTITLE: Querying Group Memberships for a Principal - SQL\nDESCRIPTION: This SQL query retrieves a list of group memberships for a specific principal (user). It joins the `tblPrincipalAffiliations` and `tblPrincipal` tables, filtering by a specific principal ID (7 in this case).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/persistent-chat-database-schema/sample-persistent-chat-database-queries.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT prinName as Name    \n  FROM tblPrincipalAffiliations as pa, tblPrincipal\n  where principalID = 7 and affiliationID = prinID\n```\n\n----------------------------------------\n\nTITLE: Adding AllowedTrialTenantDomains parameter\nDESCRIPTION: This snippet adds `AllowedTrialTenantDomains` parameter to `[New|Set]-CsTenantFederationSettings`. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_37\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTenantFederationSettings\n```\n\n----------------------------------------\n\nTITLE: Get Dial-In Conferencing Language List - Skype for Business - PowerShell\nDESCRIPTION: Returns a list of languages supported for use with Skype for Business Server dial-in conferences. These languages are used to relay audio messages and instructions to users participating in a conference by telephone.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingLanguageList\n```\n\n----------------------------------------\n\nTITLE: Getting Online User - PowerShell\nDESCRIPTION: This snippet Adds IsInGracePeriod & GracePeriodExpiryDate to each plan in the AssignedPlan attribute in the Get-CsOnlineUser output. using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_76\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Creating a new QoE configuration - PowerShell\nDESCRIPTION: This PowerShell command creates a new collection of QoE configuration settings applied to the Redmond site. It demonstrates the basic syntax for creating a new configuration using the New-CsQoEConfiguration cmdlet. No specific properties are defined, so it will use the default values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/create-qoe-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsQoEConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Updating Global Scope for Centralized Logging Service (CLS) - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to update the global scope configuration for the Centralized Logging Service. It uses the `Set-CsClsConfiguration` cmdlet to modify the `EtlFileRolloverSizeMB` parameter, which determines the maximum size of the logging file in megabytes. This change affects all computers and pools in the Skype for Business deployment. The Identity parameter is set to \"global\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsConfiguration -Identity <scope> -EtlFileRolloverSizeMB <size for logging file in megabytes>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsConfiguration -Identity \"global\" -EtlFileRolloverSizeMB 40\n```\n\n----------------------------------------\n\nTITLE: Displaying ADFS OAuth Status PowerShell\nDESCRIPTION: Displays a message indicating whether ADFS OAuth has been enabled or disabled for the admin control panel based on the `$disableAdfsOAuth` flag.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ($disableAdfsOAuth -eq $true)\n{\n    Write-Host \"`n`rADFS OAuth has been disabled for the admin control panel.\" -ForeGroundColor Green\n}\nelse\n{\n    Write-Host \"`n`rADFS OAuth has been enabled for the admin control panel.\" -ForeGroundColor Green\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Group Policy Results Report using Command Prompt\nDESCRIPTION: This command generates a report of applied Group Policy Objects (GPOs) and sends it to a text file named gp.txt. The `/R` switch displays a summary of the RSoP (Resultant Set of Policy) data for the current user and computer. The command should be executed with administrator privileges.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/QoS-in-Teams-clients.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ngpresult /R > gp.txt\n```\n\n----------------------------------------\n\nTITLE: Get-CsTeamsShiftsConnectionConnector Cmdlet\nDESCRIPTION: This snippet indicates the release of the `Get-CsTeamsShiftsConnectionConnector` cmdlet. This cmdlet allows administrators to retrieve information about the Teams Shifts connector, including its configuration and status.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_151\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsShiftsConnectionConnector\n```\n\n----------------------------------------\n\nTITLE: Replacing VoiceSimulationInInterpretation parameter\nDESCRIPTION: This snippet replaces `VoiceSimulationInInterpretation` for `VoiceSimulationInInterpreter` in `[New|Set]-CsTeamsCallingPolicy`. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_33\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Capturing ACLs for Teams Folder - Console\nDESCRIPTION: This command uses 'icacls' to capture the Access Control Lists (ACLs) of the Teams folder and its subfolders and saves them to 'icacls.txt'. This helps in diagnosing permission-related issues that might prevent Teams from updating or running correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/troubleshoot-installation.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nicacls %LocalAppData%\\Microsoft\\Teams /save icacls.txt /T\n```\n\n----------------------------------------\n\nTITLE: Searching for Messages Containing Specific Text - SQL\nDESCRIPTION: This SQL query retrieves a list of users who have sent messages containing the text 'Hello World'. It joins the `tblChat`, `tblNode`, and `tblPrincipal` tables, and filters based on message content.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/persistent-chat-database-schema/sample-persistent-chat-database-queries.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT nodeName as ChatRoom, prinName as Name, content as Message\n  FROM tblChat, tblNode, tblPrincipal\n  WHERE channelId = nodeID AND userId = prinID AND content like '%Hello World%'\n```\n\n----------------------------------------\n\nTITLE: Establish AD FS Relying Party Trust\nDESCRIPTION: This command establishes a relying party trust between AD FS and Skype for Business Server. It specifies the metadata URL of the Skype for Business Server passive authentication endpoint. Replace `https://lyncpool.contoso.com/passiveauth/federationmetadata/2007-06/federationmetadata.xml` with the correct URL for your environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/deploy-web-downloadable-clients.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-ADFSRelyingPartyTrust -Name ContosoApp -MetadataURL https://lyncpool.contoso.com/passiveauth/federationmetadata/2007-06/federationmetadata.xml\n```\n\n----------------------------------------\n\nTITLE: Get User Team Members - PowerShell\nDESCRIPTION: This command retrieves the list of team members for a specified user in Skype for Business Server using PowerShell. It returns an object representing the team member list.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsUserTeamMembers -Identity <UserIdParameter>\n```\n\n----------------------------------------\n\nTITLE: Import User Activity Report CSV data to PowerShell\nDESCRIPTION: Imports the data from a comma-separated values (CSV) file, representing the User Activity Report, into Windows PowerShell. The imported data is stored in the variable `$x` for further analysis. This allows users to manipulate and query the data using PowerShell commands.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/user-activity-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x = Import-Csv -Path \"C:\\Data\\User_Activity_Report.csv\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Group Information using Get-CsRgsAgentGroup in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to retrieve information about an existing agent group using the `Get-CsRgsAgentGroup` cmdlet. It requires the name of the agent group to be retrieved. This command allows administrators to verify that an agent group has been created and to view its properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-agent-group.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsRgsAgentGroup -Name \"Help Desk\"\n```\n\n----------------------------------------\n\nTITLE: ADFS OAuth Configuration Script - PowerShell\nDESCRIPTION: This PowerShell script segment guides the user through enabling or disabling ADFS OAuth for the Skype for Business Admin Control Panel. It prompts the user for input regarding ADFS instance details, client ID, metadata URI, and simple URL prefix. It leverages the `GenerateHttpsPrefix` function for ensuring URL prefixes are correct and then stores the information. The script uses read-host prompts to gather data from the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Script execution start\n\n$disableAdfsOAuth = $null\n$adfsOAuthInstance = $null\n$adfsClientId = $null\n$adfsMetadataPublicUri = $null\n$adfsIssuerName = $null\n$simplifiedUrlPrefix = $null\n$pools = $null\n\n$mode = Read-Host -Prompt \"Do you want to Enable [e] or Disable [d] ADFS OAuth for Admin Control Panel. Confirm[e/d]\"\nif([string]::IsNullOrWhiteSpace($mode))\n{\n  $mode = 'e'\n}\n\nif ($mode -match '^[eE]$')\n{\n  $disableAdfsOAuth = $false\n  Write-Host \"`n`rStarting script to enable ADFS OAuth.\" -ForeGroundColor Green\n\n  $adfsOAuthInstance = Read-Host -Prompt \"Enter the ADFS farm instance (FQDN) where the Admin Control Panel is registered for ADFS OAuth\"\n  $adfsOAuthInstance = GenerateHttpsPrefix -input $adfsOAuthInstance\n  # Make sure that instance name has a trailing slash\n  $adfsOAuthInstance = $adfsOAuthInstance.TrimEnd('/') + '/'\n\n  $defaultAdfsMetadataPublicUri = $adfsOAuthInstance + 'FederationMetadata/2007-06/FederationMetadata.xml'\n  $adfsMetadataPublicUri = Read-Host -Prompt \"Enter OAuth Metadata Public URI for the Admin Control Panel in the ADFS. Press ENTER to use default $defaultAdfsMetadataPublicUri \"\n  if([string]::IsNullOrWhiteSpace($adfsMetadataPublicUri))\n  {\n      $adfsMetadataPublicUri = $defaultAdfsMetadataPublicUri\n  }\n  else\n  {\n    $adfsMetadataPublicUri = GenerateHttpsPrefix -input $adfsMetadataPublicUri\n  }\n\n  $adfsIssuerNameDefault = $adfsOAuthInstance.TrimEnd('/') + '/adfs'\n  $adfsIssuerName = Read-Host -Prompt \"Enter Issuer Name for the Admin Control Panel in the ADFS. Press ENTER to use default  $adfsIssuerNameDefault\"\n  if([string]::IsNullOrWhiteSpace($adfsIssuerName))\n  {\n      $adfsIssuerName = $adfsIssuerNameDefault\n  }\n\n  $adfsClientId = Read-Host -Prompt \"Enter Client Identifier of the application created for the Admin Control Panel in the ADFS\"\n\n  if([string]::IsNullOrWhiteSpace($adfsClientId))\n  {\n    Write-Host \"`n`rClient identifier cannot be empty\" -ForeGroundColor Red\n    Write-Host \"`n`rAborting Process.\" -ForeGroundColor Red\n    return\n  }\n\n  $simplifiedUrlPrefix = Read-Host -Prompt \"Enter the Simple URL prefix for the Admin Control Panel (if configured). Press ENTER to use default 'admin.' \"\n  if([string]::IsNullOrWhiteSpace($simplifiedUrlPrefix))\n  {\n      $simplifiedUrlPrefix = 'admin.'\n  }\n\n}\nelseif ($mode -match '^[dD]$')\n{\n  $disableAdfsOAuth = $true\n  Write-Host \"`n`rStarting script to disable ADFS OAuth.\"-ForeGroundColor Green\n}\nelse\n{\n  Write-Host \"`n`rInvalid Input.\" -ForeGroundColor Red\n  Write-Host \"`n`rAborting Process.\" -ForeGroundColor Red\n  return\n}\n\n$pool = Read-Host -Prompt \"Enter pool names in which ADFS OAuth is to be setup for the admin control panel in a comma separated format. Press ENTER to setup OAuth for all FE pools deployed with Skype for Business 2019\"\n\n# This is the registry path for Admin Control Panel for SfB 2019 machines.\n$macpRegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Real-Time Communications\\{D00E3324-D7F8-4735-B4CF-206FE63FD577}\"\n```\n\n----------------------------------------\n\nTITLE: New-CsTeamsShiftsConnectionBatchTeamMap Cmdlet\nDESCRIPTION: This snippet describes the release of the `New-CsTeamsShiftsConnectionBatchTeamMap` cmdlet in preview.  This cmdlet allows administrators to create batch team maps for the Teams Shifts connector, enabling efficient mapping of teams between Shifts and other systems. It is a preview release, meaning functionality could change.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_146\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsShiftsConnectionBatchTeamMap\n```\n\n----------------------------------------\n\nTITLE: Managing Batch Teams Deployment using PowerShell\nDESCRIPTION: These cmdlets are used for deploying teams in bulk. They provide functionalities to create new batch deployments and retrieve the status of existing deployments.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_95\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|New]-CsBatchTeamsDeployment\n```\n\n----------------------------------------\n\nTITLE: Get Chat via Microsoft Graph API\nDESCRIPTION: Retrieves a specific chat using the Microsoft Graph API. Requires a chat ID. Output is a chat object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_10\n\nLANGUAGE: HTTP\nCODE:\n```\n[Get Chat](/graph/api/chat-get)\n```\n\n----------------------------------------\n\nTITLE: Defining Building Ownership Types with SQL\nDESCRIPTION: This SQL snippet shows how to insert a new building ownership type into the `CqdBuildingOwnershipType` table. The `OwnershipTypeId` and `OwnershipTypeDesc` parameters are required. This helps distinguish between owned and leased assets within the organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/deploy-0.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO\n[dbo].[CqdBuildingOwnershipType]\n([OwnershipTypeId],\n[OwnershipTypeDesc]\n)\n\nVALUES\n(1,\n'Contoso Owned'\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Team Targeting Hierarchy\nDESCRIPTION: This PowerShell command removes the existing team targeting hierarchy from Microsoft Teams. Removing the hierarchy disables the Published lists tab for all users.  You must be an admin to perform this step. Removing the hierarchy does not unpublish previously published tasks.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-TeamTargetingHierarchy\n```\n\n----------------------------------------\n\nTITLE: Assign Tagged Location Policy to User - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves a user object matching the username 'UserName' and assigns the tagged location policy 'Redmond' to that user. It relies on the Get-CsUser and Grant-CsLocationPolicy cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-location-policies.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n(Get-CsUser | where { $_.Name -match \"UserName\" }) | Grant-CsLocationPolicy -PolicyName Redmond\n```\n\n----------------------------------------\n\nTITLE: Configuring Skype for Business Installation using Config.xml\nDESCRIPTION: This XML snippet demonstrates a typical Config.xml configuration for a silent installation of the Skype for Business client. It disables Business Connectivity Services, sets the display level to none, configures verbose logging, prevents reboots during setup, and specifies the distribution point. This configuration requires the Skype for Business installation source to be available at the specified network path.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/use-config-xml-to-perform-installation-tasks.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Configuration Product=\"Lync\"> \n  <OptionState Id=\"LOBiMain\" State=\"Absent\" Children=\"Force\" /> \n  <Display Level=\"None\" CompletionNotice=\"No\" AcceptEula=\"Yes\" /> \n  <Logging Type=\"verbose\" Path=\"%temp%\" Template=\"LyncSetupVerbose(*).log\" />\n  <Setting Id=\"SETUP_REBOOT\" Value=\"Never\" /> \n  <DistributionPoint Location=\"\\\\server\\share\\Skype15\" /> \n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Retrieve Logs using PowerShell\nDESCRIPTION: This PowerShell script retrieves logs from a remote computer. It executes a script to collect the logs, finds the most recent zip file, copies it to the local machine, and then removes the zip file from the remote machine. It relies on `CollectSrsV2Logs.ps1` being present on the remote system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-operations.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$targetDevice = \"<Device fqdn> \"\n$logFile = invoke-command {$output = Powershell.exe -ExecutionPolicy Bypass -File C:\\Rigel\\x64\\Scripts\\Provisioning\\ScriptLaunch.ps1 CollectSrsV2Logs.ps1\nGet-ChildItem -Path C:\\Rigel\\*.zip | Sort-Object -Descending -Property LastWriteTime | Select-Object -First 1} -ComputerName $targetDevice\n$session = new-pssession -ComputerName $targetDevice\nCopy-Item -Path $logFile.FullName -Destination .\\ -FromSession $session; invoke-command {remove-item -force C:\\Rigel\\*.zip} -ComputerName $targetDevice\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - 10-Digit Number (US) (.NET Regex)\nDESCRIPTION: This normalization rule translates 10-digit numbers in the United States to E.164 format.  It employs a .NET Framework regular expression to match 10 digits and prepends \"+1\" to the matched digits. The input is a 10 digit phone number, and the output is the E.164 formatted number with the US country code. The first captured group ($1) is appended to the translation string.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_4\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^(\\d{10})$\n```\n\n----------------------------------------\n\nTITLE: Create Call Queue - General Info via PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create or modify a call queue using `New-CsCallQueue` or `Set-CsCallQueue` cmdlets. It showcases how to set parameters such as name, outbound caller ID resource accounts, service level threshold, and language. The `New-CsCallQueue` cmdlet creates a new call queue, while the `Set-CsCallQueue` cmdlet modifies an existing call queue. The `-OboResourceAccountIds` parameter sets the outbound caller ID accounts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -OboResourceAccountIds @(\"Resource Account 01 GUID\", \"Resource Account 02 GUID\") -ServiceLevelThresholdResponseTimeInSecond 45 -LanguageID en-US -U\n```\n\n----------------------------------------\n\nTITLE: Set Call Forwarding Settings - PowerShell\nDESCRIPTION: This snippet demonstrates how to use the `Set-CsUserCallingSettings` cmdlet to configure call forwarding settings for a user in Microsoft Teams. The first example forwards all calls for `user1` to `user2` immediately. The second example configures simultaneous ringing for all delegates of `user3`. The third example configures a call group for `user4` with `user5` and `user6` as members, where calls are forwarded in order.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/user-call-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUserCallingSettings -Identity user1@contoso.com -IsForwardingEnabled $true -ForwardingType Immediate -ForwardingTargetType SingleTarget -ForwardingTarget user2@contoso.com\n\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUserCallingSettings -Identity user3@contoso.com -IsForwardingEnabled $true -ForwardingType Simultaneous -ForwardingTargetType MyDelegates\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n$cgm = @(\"user5@contoso.com\",\"user6@contoso.com\")\n\nSet-CsUserCallingSettings -Identity user4@contoso.com -CallGroupOrder InOrder -CallGroupTargets $cgm\n\nSet-CsUserCallingSettings -Identity user4@contoso.com -IsForwardingEnabled $true -ForwardingType Immediate -ForwardingTargetType Group\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Configuration with PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to limit presenter role permissions in Microsoft Teams meetings by setting the `-LimitPresenterRolePermissions` parameter to `$true` using the `Set-CsTeamsMeetingConfiguration` cmdlet.  The `<policy name>` placeholder should be replaced with the actual policy name. This action reduces the capabilities of presenters, preventing them from enabling/disabling attendee mics/cameras, changing participant roles, lowering hands, or removing participants.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/presenter-role-reduction.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingConfiguration -Identity <policy name> -LimitPresenterRolePermissions  $true\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - 7-Digit Number (Dallas) (.NET Regex)\nDESCRIPTION: This normalization rule translates 7-digit numbers to Dallas local numbers in E.164 format. It uses a .NET Framework regular expression to match 7 digits and prepends \"+1972\" to the matched digits. The input is a 7 digit phone number, and the output is the E.164 formatted number with the Dallas area code. The first captured group ($1) is appended to the translation string.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_3\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^(\\d{7})$\n```\n\n----------------------------------------\n\nTITLE: Disabling Mobility and Call via Work Globally - PowerShell\nDESCRIPTION: This PowerShell command disables access to Mobility and Call via Work globally by setting both the `EnableMobility` and `EnableOutsideVoice` parameters to `$False` in the `Set-CsMobilityPolicy` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsMobilityPolicy -EnableMobility $False -EnableOutsideVoice $False\n```\n\n----------------------------------------\n\nTITLE: Create Support Call Queue - PowerShell\nDESCRIPTION: This PowerShell command creates a new call queue named \"Support\" with specific configurations, including audio files for greeting and music on hold, overflow settings, timeout settings, routing method, and associated distribution list.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Support\" -AgentAlertTime 15 -AllowOptOut $false -DistributionLists $teamSupportID -WelcomeMusicAudioFileID $audioFileSupportGreetingID -MusicOnHoldAudioFileID $audioFileSupportHoldInQueueMusicID -OverflowAction SharedVoicemail -OverflowActionTarget $teamSupportID -OverflowThreshold 200 -OverflowSharedVoicemailAudioFilePrompt $audioFileSupportSharedVoicemailGreetingID -EnableOverflowSharedVoicemailTranscription $true -TimeoutAction SharedVoicemail -TimeoutActionTarget $teamSupportID -TimeoutThreshold 2700 -TimeoutSharedVoicemailTextToSpeechPrompt \"We're sorry to have kept you waiting and are now transferring your call to voicemail.\" -EnableTimeoutSharedVoicemailTranscription $true -RoutingMethod LongestIdle -ConferenceMode $true -LanguageID \"en-US\"\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - 7-Digit Number (Redmond) (.NET Regex)\nDESCRIPTION: This normalization rule translates 7-digit numbers to Redmond local numbers in E.164 format.  It utilizes a .NET Framework regular expression to match 7 digits and prepends \"+1425\" to the matched digits. The input is a 7 digit phone number and the output is the E.164 formatted number with the Redmond area code. The first captured group ($1) is appended to the translation string.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_2\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^(\\d{7})$\n```\n\n----------------------------------------\n\nTITLE: Creating Call Queue with Combined Callback Conditions - PowerShell\nDESCRIPTION: This PowerShell example creates a new call queue with callback enabled based on combined wait time and queue length conditions. Callback eligibility is triggered after 60 seconds of waiting or when the queue exceeds 50 calls. The script configures the DTMF tone, text-to-speech prompt, and email notification using `New-CsCallQueue`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Callback Eligible After 60s or 50 calls\" -UseDefaultMusicOnHold $true -LanguageID en-US -IsCallbackEnabled $true -CallbackRequestDtmf \"Tone1\" -WaitTimeBeforeOfferingCallbackInSecond 60 -NumberOfCallsInQueueBeforeOfferingCallback 50 -CallbackOfferTextToSpeechPrompt \"If you would like to have a callback when an agent becomes available, press 1\" -CallbackEmailNotificationTarget <Team or DL GUID>\n```\n\n----------------------------------------\n\nTITLE: Create New Dial-In Conferencing Access Number - PowerShell\nDESCRIPTION: Creates a new dial-in conferencing access number in Skype for Business Server. This provides a number that users can dial to join conferences. Requires specifying parameters such as the phone number and pool association. The cmdlet returns the newly created access number object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_29\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Updating a Network Region with Set-CsNetworkRegion (PowerShell)\nDESCRIPTION: This snippet modifies an existing network region in Skype for Business Server. The `-Identity` parameter specifies the region to modify, and `-Description` updates the region description. The example modifies the region named \"NorthAmerica\" and changes its description.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsNetworkRegion -Identity NorthAmerica -Description \"North American Region\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Device with New-CsTestDevice in PowerShell\nDESCRIPTION: This snippet creates a new test device in Skype for Business using the `New-CsTestDevice` cmdlet. It requires specifying the `Identity`, `IdentifierType`, and `Identifier` parameters to define the device.  This adds a new test device to the system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsTestDevice -Identity site:Redmond/UCPhone -IdentifierType SerialNumber -Identifier \"07823-A345\"\n```\n\n----------------------------------------\n\nTITLE: Disable Automated Purging - PowerShell\nDESCRIPTION: This PowerShell command disables the automated purging of archiving records in Skype for Business Server for the specified site. It sets the EnablePurging parameter to False, which prevents the server from automatically purging archived data. The -Identity parameter specifies the site to configure.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/purging-of-archived-data.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingConfiguration -Identity \"site:Redmond\" -EnablePurging $False\n```\n\n----------------------------------------\n\nTITLE: Listing Test Devices using Get-CsTestDevice in PowerShell\nDESCRIPTION: This snippet shows how to retrieve a list of all test devices configured in Skype for Business using the `Get-CsTestDevice` cmdlet.  No parameters are required. It returns a list of test devices and their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsTestDevice\n```\n\n----------------------------------------\n\nTITLE: Get database types in Skype for Business pool with PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves all database types stored within a specific Skype for Business pool. It utilizes the Pool FQDN to identify the target pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/alwayson-availability-group.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsPool -Identity <Pool FQDN>\n```\n\n----------------------------------------\n\nTITLE: Customizing Music on Hold using Set-CsCallParkServiceMusicOnHoldFile Cmdlet\nDESCRIPTION: This cmdlet allows customization of the music on hold played to callers when their call is parked. It is used to upload a custom audio file to replace the default music on hold.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-call-park.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsCallParkServiceMusicOnHoldFile\n```\n\n----------------------------------------\n\nTITLE: Updating Teams Shifts Connection Instance using PowerShell\nDESCRIPTION: This cmdlet is used to update an existing Teams Shifts connection instance. This is for managing the connection between Teams Shifts and external workforce management systems.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_92\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-CsTeamsShiftsConnectionInstance\n```\n\n----------------------------------------\n\nTITLE: Enable Anonymous Access to Teams Meetings (PowerShell)\nDESCRIPTION: This PowerShell snippet enables anonymous users to join meetings and webinars. It uses the `Set-CsTeamsEventsPolicy` cmdlet with the `-AllowAnonymousUsersToJoinMeeting` parameter set to `$true`.  Replace `<policy name>` with the actual policy name. This is the default setting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowAnonymousUsersToJoinMeeting $true\n```\n\n----------------------------------------\n\nTITLE: Force Group Policy Update - Command Line\nDESCRIPTION: This command forces an immediate refresh of Group Policy settings on the local computer. This ensures that newly created or modified Group Policy Objects (GPOs) are applied without waiting for the periodic automatic refresh.  The command must be run with administrator privileges.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-conferencing-application-and-mediation-servers.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGpupdate.exe /force\n```\n\n----------------------------------------\n\nTITLE: Find Total Conferences Using Meeting Console\nDESCRIPTION: This SQL query aims to determine the average conversational MOS (Mean Opinion Score) for conferences conducted using the Meeting Console. It joins SessionView and MediaLineView, filtering for audio media lines and Lync user agent types to isolate Meeting Console usage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/quality-of-experience-qoe-database-schema/sample-qoe-database-queries.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect avg(ConversationalMOS)\nfrom SessionView s\ninner join MediaLineView m\non s.ConferenceDateTime = m.ConferenceDateTime\n   and s.SessionSeq = m.SessionSeq\n   and m.MediaLineLabel = 0 -- audio media line\n   and s.CallerUserAgentType = 4 -- Lync\n   and s.CalleeUserAgentType = 4 -- Lync\n```\n\n----------------------------------------\n\nTITLE: List items shared with user via Microsoft Graph API\nDESCRIPTION: Lists the items shared with the signed-in user using the Microsoft Graph API. Requires authentication. Output: List of shared drive items.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_29\n\nLANGUAGE: HTTP\nCODE:\n```\n[List items shared with the signed-in user](/onedrive/developer/rest-api/api/drive_sharedwithme).\n```\n\n----------------------------------------\n\nTITLE: Enable Unified Contact Store Globally - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables the unified contact store globally for all Skype for Business Server users. It modifies the global user services policy, setting the UcsAllowed parameter to $True. This allows all users to have their contacts stored in Exchange.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-unified-contact-store.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserServicesPolicy -Identity global -UcsAllowed $True\n```\n\n----------------------------------------\n\nTITLE: Creating RTCLOCAL SQL Instance - PowerShell\nDESCRIPTION: This PowerShell command creates the RTCLOCAL SQL instance. It uses SQLEXPR_x64.exe with several parameters to configure the instance, including enabling TCP, setting the service account, and granting administrator privileges. The command must complete before proceeding to the next step.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/disable-tls-1.0-1.1.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSQLEXPR_x64.exe  /Q /IACCEPTSQLSERVERLICENSETERMS /UPDATEENABLED=0 /HIDECONSOLE /ACTION=Install /FEATURES=SQLEngine,Tools /INSTANCENAME=RTCLOCAL /TCPENABLED=1 /SQLSVCACCOUNT=\"NT AUTHORITY\\NetworkService\" /SQLSYSADMINACCOUNTS=\"Builtin\\Administrators\" /BROWSERSVCSTARTUPTYPE=\"Automatic\" /AGTSVCACCOUNT=\"NTAUTHORITY\\NetworkService\" /SQLSVCSTARTUPTYPE=Automati\n```\n\n----------------------------------------\n\nTITLE: Getting Error Information from Batch Assignment with PowerShell\nDESCRIPTION: This PowerShell command retrieves detailed error information from a batch policy assignment operation. It uses the `Get-CsBatchPolicyAssignmentOperation` cmdlet with the OperationId and selects the `UserState` property to expand for detailed error messages.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsBatchPolicyAssignmentOperation -OperationId f985e013-0826-40bb-8c94-e5f367076044 | Select -ExpandProperty UserState\n```\n\n----------------------------------------\n\nTITLE: Listing On-Premises Skype for Business Users via PowerShell\nDESCRIPTION: This PowerShell command is used to list all users hosted on-premises in a Skype for Business Server environment. It uses the `Get-CsUser` cmdlet with a filter to find users whose HostingProvider is set to \"SRV:\", indicating they are hosted on-premises.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-move-on-prem-users.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Filter { HostingProvider -eq \"SRV:\"}\n```\n\n----------------------------------------\n\nTITLE: Example of creating a Call Park configuration in Skype for Business using PowerShell\nDESCRIPTION: This PowerShell example demonstrates creating a Call Park configuration for the site \"Redmond1\" with specific settings: Call Pickup Timeout Threshold set to 1 minute, Music on Hold disabled, Maximum Call Pickup Attempts set to 2, and the OnTimeoutURI set to sip:bob@contoso.com. It assumes that the Skype for Business Server Management Shell is already open and connected.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-call-park-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsCpsConfiguration -Identity site:Redmond1 -CallPickupTimeoutThreshold 00:01:00 -EnableMusicOnHold $false -MaxCallPickupAttempts 2 -OnTimeoutURI sip:bob@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Managing Online Voicemail Policy PowerShell Cmdlets\nDESCRIPTION: These cmdlets provide functionalities for managing online voicemail policies, allowing administrators to create, retrieve, modify, and remove voicemail policies. Note that these only work with powershell.exe and not pwsh.exe in version 4.8.1-preview\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_91\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Get|Set|Remove]-CsOnlineVoicemailPolicy\n```\n\n----------------------------------------\n\nTITLE: Add DNS Pin-Point Zone for Second Skype for Business Domain\nDESCRIPTION: This set of commands adds a pin-point zone and SRV record for the _sipinternaltls._tcp.fabrikam.com domain, creates a zone for the pool01.fabrikam.com domain, and adds A and AAAA records, demonstrating configuration for a secondary SIP domain.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/network-requirements/advanced-edge-server-dns.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndnscmd . /zoneadd _sipinternaltls._tcp.fabrikam.com. /dsprimary\ndnscmd . /recordadd _sipinternaltls._tcp.fabrikam.com. @ SRV 0 0 5061 pool01.fabrikam.com.\ndnscmd . /zoneadd pool01.fabrikam.com. /dsprimary\ndnscmd . /recordadd pool01.fabrikam.com. @ A 192.168.10.90\ndnscmd . /recordadd pool01.contoso.com. @ AAAA <IPv6 address>\ndnscmd . /recordadd pool01.fabrikam.com. @ A 192.168.10.91\ndnscmd . /recordadd pool01.contoso.com. @ AAAA <IPv6 address>\n```\n\n----------------------------------------\n\nTITLE: Viewing Meeting Migration Status with PowerShell\nDESCRIPTION: This PowerShell command retrieves and displays a summary of the Meeting Migration Service (MMS) status.  It helps in monitoring the progress of meeting updates after changes to conference bridge phone numbers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMeetingMigrationStatus -SummaryOnly\n```\n\n----------------------------------------\n\nTITLE: Restarting IIS Service (Console Command)\nDESCRIPTION: This console command restarts the Internet Information Services (IIS) service. It is required after modifying the Web.config file to ensure that the changes are applied and the application uses the updated configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-response-group.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\niisreset\n```\n\n----------------------------------------\n\nTITLE: Send Welcome Email with Default Template (PowerShell)\nDESCRIPTION: This PowerShell example creates a new PIN and sends a welcome email from marco@contoso.com to bob@contoso.com. It uses the default email template for the email text and creates the email in HTML format. The default subject is \"Welcome to Dial In Conferencing\". It assumes that the SMTP server is configured and the current user has permission to send email on behalf of marco@contoso.com.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/welcome-emails.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPinSendCAWelcomeMail -UserUri \"bob@contoso.com\"\n-From \"marco@contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Assign a Specific User PIN using Set-CsClientPin\nDESCRIPTION: This PowerShell command assigns a specific PIN (121989) to the user 'Ken Myer'. The `Set-CsClientPin` cmdlet is used with both the `Identity` and `Pin` parameters. The `Identity` parameter specifies the user, and the `Pin` parameter sets the user's PIN to the provided value. PIN requirements are specified in PIN policy settings. The Skype for Business Server Management Shell or a remote PowerShell session connected to Skype for Business Server is required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/set-a-user-s-dial-in-conferencing-pin.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPin -Identity \"Ken Myer\" -Pin 121989\n```\n\n----------------------------------------\n\nTITLE: Installing SQL Mirroring using Install-CsMirrorDatabase Cmdlet\nDESCRIPTION: This cmdlet installs the SQL mirror and configures mirroring for Skype for Business Server 2015 databases present on the primary SQL store. It requires parameters like FileShare and SqlServerFqdn. The -DropExistingDatabasesOnMirror parameter specifies whether to drop existing databases on the mirror server.  The -Verbose parameter provides detailed output.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/sql-mirroring-for-high-availability.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-CsMirrorDatabase [-ConfiguredDatabases] [-ForInstance] [-ForDefaultInstance] [-DatabaseType <Application | Archiving | CentralMgmt | Monitoring | User | BIStaging | PersistentChat | PersistentChatCompliance >] -FileShare <fileshare> -SqlServerFqdn <primarySqlserverFqdn> [-SqlInstanceName] [-DatabasePathMap] [-ExcludeDatabaseList] [-DropExistingDatabasesOnMirror] -Verbose\n```\n\n----------------------------------------\n\nTITLE: Get Computer Information using Get-CsComputer - PowerShell\nDESCRIPTION: This cmdlet retrieves information about Skype for Business Server computers. It's used to list all computers in the topology and their status.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-topology-menu.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsComputer\n```\n\n----------------------------------------\n\nTITLE: Adding DNS Zones and Records using dnscmd.exe for contoso.com\nDESCRIPTION: This snippet demonstrates how to use the `dnscmd.exe` utility to add pin-point DNS zones and A records in an internal DNS server for automatic configuration of Skype for Business clients for the contoso.com SIP domain.  It creates zones for _sipinternaltls._tcp.contoso.com and pool01.contoso.com and adds SRV and A/AAAA records to these zones. The IP addresses (192.168.10.90, 192.168.10.91) represent the Front End servers within the pool.  This allows clients using the contoso.com SIP domain to automatically configure.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/edge-server-deployments/advanced-edge-server-dns.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndnscmd . /zoneadd _sipinternaltls._tcp.contoso.com. /dsprimary\ndnscmd . /recordadd _sipinternaltls._tcp.contoso.com. @ SRV 0 0 5061 pool01.contoso.com.\ndnscmd . /zoneadd pool01.contoso.com. /dsprimary\ndnscmd . /recordadd pool01.contoso.com. @ A 192.168.10.90\ndnscmd . /recordadd pool01.contoso.com. @ AAAA <IPv6 address>\ndnscmd . /recordadd pool01.contoso.com. @ A 192.168.10.91 \ndnscmd . /recordadd pool01.contoso.com. @ AAAA <IPv6 address>\n```\n\n----------------------------------------\n\nTITLE: Get Pool Information using Get-CsPool - PowerShell\nDESCRIPTION: This cmdlet retrieves information about Skype for Business Server pools. It's used to list all the pools within the topology and their corresponding status.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-topology-menu.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsPool\n```\n\n----------------------------------------\n\nTITLE: Setting PSTN Gateway for PIDF/LO Support in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to modify the *PidfLoSupported* attribute of a PSTN gateway to enable support for PIDF/LO (Presence Information Data Format/Location Object) for emergency calls in Microsoft Teams Direct Routing. This allows the gateway to add location information to the outgoing emergency call's INVITE protocol. The command uses the `Set-CsOnlinePSTNGateway` cmdlet, specifying the identity of the gateway and setting the `PidfLoSupported` parameter to `$true`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-dynamic-emergency-calling.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nset-CsOnlinePSTNGateway -Identity sbc1.fabrikam.onmicrosoft.com -PidfLoSupported $true\n```\n\n----------------------------------------\n\nTITLE: Move Specific Users to Pilot Pool using PowerShell\nDESCRIPTION: This PowerShell snippet retrieves specific users by their DisplayName and moves them to the specified target pool. Replace User1 and User2 with the actual DisplayNames of the users you want to move.  Replace pool_FQDN with the fully qualified domain name of the destination pool.  The Get-CsUser cmdlet filters users based on DisplayName, and Move-CsUser moves them to the specified target.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-multiple-users-to-the-pilot-pool.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Filter {DisplayName -eq \"User1\" -or DisplayName - eq \"User2\"} | Move-CsUser -Target \"pool_FQDN\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with Certificate Thumbprint (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to connect to Microsoft Teams using a certificate thumbprint. The certificate must be installed in the user certificate store on the computer where the command is executed. It requires the `Connect-MicrosoftTeams` cmdlet with the `-CertificateThumbprint`, `-ApplicationId`, and `-TenantId` parameters. The application ID and tenant ID are GUIDs that identify your Microsoft Entra application and tenant, respectively.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-application-authentication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-MicrosoftTeams -CertificateThumbprint \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" -ApplicationId \"00000000-0000-0000-0000-000000000000\" -TenantId \"YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY\"\n```\n\n----------------------------------------\n\nTITLE: Create Microsoft Teams add-on for Google Workspace - PowerShell\nDESCRIPTION: This PowerShell snippet checks if a service principal already exists for the Microsoft Teams meeting add-on in Google Workspace, and creates it if it doesn't. It depends on a connection to Microsoft Graph and the appId variable defined previously. The output indicates whether the service principal already existed or was newly created.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/google-workspace-addon-teams.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MgGraph -Scopes \"Application.ReadWrite.All\"\n\n$displayName = 'Microsoft Teams meeting add-on for Google Workspace'\n$appId = '7969c887-ba98-48bb-8832-6c9239929d7c'\n\n# Check if a service principal already exists for the app\n$servicePrincipal = Get-MgServicePrincipal -Filter \"appId eq '$appId'\"\nif ($servicePrincipal) {\n    # Service principal exists already\n    Write-Host \"The Service principal already exists\"\n} else {\n    # Service principal does not yet exist, create it\n    New-MgServicePrincipal -AppId $appId -DisplayName $displayName\n    Write-Host \"Created the Service Principal\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assign Microsoft 365 and Audio Conferencing Licenses\nDESCRIPTION: This PowerShell script assigns both Microsoft 365 Enterprise E1 and Audio Conferencing licenses to a user. It uses `Get-MgSubscribedSku` to retrieve the SkuIds for each license based on their `SkuPartNumber` ('ENTERPRISEPACK' and 'MCOMEETADV' respectively), then uses `Set-MgUserLicense` to assign them.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-add-on-licensing/assign-teams-add-on-licenses.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n    Connect-Graph -Scopes User.ReadWrite.All, Organization.Read.All\n\n    $EmsSku = Get-MgSubscribedSku -All | Where SkuPartNumber -eq 'ENTERPRISEPACK'\n    $FlowSku = Get-MgSubscribedSku -All | Where SkuPartNumber -eq 'MCOMEETADV'\n    $addLicenses = @(\n    @{\"SkuId\" = $EmsSku.SkuId},\n    @{\"SkuId\" = $FlowSku.SkuId}\n    )\n\n    Set-MgUserLicense -UserId $user -AddLicenses $addLicenses -RemoveLicenses @()\n```\n\n----------------------------------------\n\nTITLE: Install New Teams on Windows Server 2019 via DISM\nDESCRIPTION: This command installs the new Teams client on Windows Server 2019 using the DISM (Deployment Image Servicing and Management) tool. It adds a provisioned AppxPackage, skipping license validation as it's not a store package. Sideloading and WebView2 must be enabled prior to running this command. The /SkipLicense command is crucial for successful installation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_5\n\nLANGUAGE: Command Line\nCODE:\n```\nDism /Online /Add-ProvisionedAppxPackage /PackagePath:<MSIX package path> /SkipLicense\n```\n\n----------------------------------------\n\nTITLE: Get App Status using PowerShell\nDESCRIPTION: This PowerShell script checks the status of the SkypeRoomSystem application on a remote computer. It retrieves the application package information and displays its version if installed. It also checks if the application process is running and displays its start time and responsiveness if it is. The script handles cases where the application is not installed or not running.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-operations.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\ninvoke-command { $package = get-appxpackage -User Skype -Name Microsoft.SkypeRoomSystem; if ($package -eq $null) {Write-host \"SkypeRoomSystems not installed.\"} else {write-host \"SkypeRoomSystem Version : \" $package.Version}; $process = Get-Process -Name \"Microsoft.SkypeRoomSystem\" -ErrorAction SilentlyContinue; if ($process -eq $null) {write-host \"App not running.\"} else {$process | format-list StartTime,Responding}} -ComputerName <Device fqdn>\n```\n\n----------------------------------------\n\nTITLE: Deploying Registry Key for Azure Virtual Desktop/Windows 365 Teams Optimization (REG_DWORD)\nDESCRIPTION: This snippet demonstrates how to deploy a registry key on the virtual desktop to enable optimization for the new Teams client in Azure Virtual Desktop and Windows 365 environments. It ensures that Teams recognizes the VDI environment and leverages optimization features. This key needs to be configured in order for AV redirection to work correctly. Missing this registry key can lead to Teams operating in non-optimized mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_0\n\nLANGUAGE: registry\nCODE:\n```\nHKLM\\SOFTWARE\\Microsoft\\Teams:\n\n- Name: IsWVDEnvironment\n- Type: DWORD\n- Value: 1\n```\n\n----------------------------------------\n\nTITLE: Modify Teams Emergency Calling Policy Notification Group - PowerShell\nDESCRIPTION: This PowerShell snippet modifies an existing Teams Emergency Calling Policy instance (TestECP) to specify the notification groups 123@contoso.com and 567@contoso.com. It uses the Set-CsTeamsEmergencyCallingPolicy cmdlet.\n\nRequires the Teams PowerShell module to be installed and the user to be authenticated with appropriate permissions.\n\nInput: The identity of the emergency calling policy to modify and a semicolon-separated list of notification groups.\n\nOutput: Modifies the specified emergency calling policy with the provided notification groups.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/emergency-calling-security-desk-notifications.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEmergencyCallingPolicy -Identity \"TestECP\" -NotificationGroup \"123@contoso.com;567@contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Executing RemoveAllAccessForUser API Call in PowerShell\nDESCRIPTION: This snippet executes the RemoveAllAccessForUser API call using Invoke-RestMethod. It uses the $AuthHeader, $apiUrl, and $Body variables. It also includes error handling to catch potential exceptions and display the error information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/security-remove-external-chat.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Execute request\nWrite-Host \"Executing RemoveAllAccessForUser request.\"\n\ntry {\n    Invoke-RestMethod  -Headers $AuthHeader -Uri $apiUrl -Method POST -ContentType 'application/json' -Body $Body \n    Write-Host \"Rquest to RemoveAllAccessForUser api succeeded.\" -ForegroundColor \"Green\"\n} catch {\n    Write-Host \"Request to RemoveAllAccessForUser api failed.\" -ForegroundColor \"Red\"\n    Write-Host \"StatusCode:\" $_.Exception.Response.StatusCode.value__ \n    Write-Host \"StatusDescription:\" $_.Exception.Response.StatusDescription\n    $receiveStream = $_.Exception.Response.GetResponseStream();\n    Write-Host ([System.Text.Encoding]::ASCII).GetString($receiveStream.ToArray())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Watcher Node with Extended PSTN Test - PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a new watcher node configuration with an extended PSTN test using the New-CsWatcherNodeConfiguration cmdlet. It includes the TargetFqdn, PortNumber, TestUsers, and adds the extended test through the ExtendedTests parameter.  It requires the Skype for Business Server core files and RTCLocal database to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsWatcherNodeConfiguration -TargetFqdn \"atl-cs-001.litwareinc.com\" -PortNumber 5061 -TestUsers @{Add= \"sip:watcher1@litwareinc.com\",\"sip:watcher2@litwareinc.com\", \"sip:watcher3@litwareinc.com\"} -ExtendedTests @{Add=$pstnTest}\n```\n\n----------------------------------------\n\nTITLE: Getting Agent Group Identity - PowerShell\nDESCRIPTION: This PowerShell code retrieves the identity of a specific agent group in Skype for Business using the `Get-CsRgsAgentGroup` cmdlet. It filters the agent groups by name (e.g., \"Help Desk\") and extracts the Identity property of the matching group.  The result is stored in the `$agid` variable, which can then be used in other commands, such as when creating a queue. The specified Agent Group must already exist.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-queue.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$agid = (Get-CsRgsAgentGroup -Name \"Help Desk\").Identity;\n```\n\n----------------------------------------\n\nTITLE: Prompting for Front End Pool Names in PowerShell\nDESCRIPTION: This snippet prompts the user for a comma-separated list of front-end pool names.  It then splits the string into an array. The script checks if at least one pool name is provided. If not, it removes the application group and exits.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n[string[]] $poolList= @()\n$poolList = (Read-Host -Prompt \"Enter all the front end pool names in a comma separated manner without the domain name e.g. pool0,pool1,pool2 etc\")\n$poolList = $poolList.Split(',').Split(' ')\n\nif($poolList.Count -eq 0)\n{\n    Write-Error \"`nAt least 1 pool machine name is mandatory. Please run the script again once you are ready with the names. Deleting $groupName.\"\n    Remove-AdfsApplicationGroup -TargetApplicationGroupIdentifier $groupName\n    exit\n}\n```\n\n----------------------------------------\n\nTITLE: Set Application Sharing Port Range - All Servers - PowerShell\nDESCRIPTION: This PowerShell command modifies the application sharing port range on all Conferencing servers in the environment.  It uses `Get-CsService` to retrieve all Conferencing servers and then pipes the results to `ForEach-Object`, which executes `Set-CsConferenceServer` for each server, setting the `AppSharingPortStart` and `AppSharingPortCount` properties to the specified values.  This ensures consistent application sharing port ranges across all Conferencing servers for QoS purposes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-conferencing-application-and-mediation-servers.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n**Get-CsService -ConferencingServer | ForEach-Object {Set-CsConferenceServer -Identity $_.Identity -AppSharingPortStart 40803 -AppSharingPortCount 8348}**\n```\n\n----------------------------------------\n\nTITLE: Example: Creating a Site Policy using PowerShell in Skype for Business\nDESCRIPTION: This PowerShell snippet demonstrates creating a new site policy named 'Redmond' with all access options enabled in Skype for Business Server. It uses the New-CsExternalAccessPolicy cmdlet to define the policy and set parameters for federation, XMPP, Public Cloud, Audio/Video, and outside access to true. The Identity parameter specifies the site to which the policy applies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/configure-policies-to-control-federated-user-access.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsExternalAccessPolicy -Identity site:Redmond -EnableFederationAccess $true -EnableXmppAccess $true -EnableOutsideAccess $true -EnablePublicCloudAccess $true -EnablePublicCloudAudioVideoAccess $true\n```\n\n----------------------------------------\n\nTITLE: Configure Teams Meeting Policy for Intelligent Speaker User Recognition (PowerShell)\nDESCRIPTION: This PowerShell snippet sets the Teams meeting policy to control voice-based user identification in meeting rooms and allows transcription. The `roomAttributeUserOverride` parameter determines how room users are identified (Off, Attribute, or Distinguish), while the `AllowTranscription` parameter enables or disables transcription for BYOD users and Teams Room accounts. Policy changes may take up to 48 hours to propagate.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/voice-recognition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity PolicyName -roomAttributeUserOverride Attribute -AllowTranscription $true\n```\n\n----------------------------------------\n\nTITLE: Getting Proxy Configuration Details in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet retrieves details for a specific proxy configuration in Skype for Business based on the provided Identity. The Identity parameter specifies the scope of the proxy configuration to retrieve. The output shows all settings for the specified proxy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsProxyConfiguration -Identity \"service:EdgeServer:atl-cs-001.litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Region Route using Remove-CsNetworkInterRegionRoute in PowerShell\nDESCRIPTION: This cmdlet deletes a network inter-region route from the Skype for Business configuration. It requires the Identity parameter to specify the region route to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_35\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsNetworkInterRegionRoute -Identity NA_APAC_Route\n```\n\n----------------------------------------\n\nTITLE: Cmdlet Usage Examples - Microsoft Teams PowerShell\nDESCRIPTION: This snippet encompasses various Microsoft Teams PowerShell cmdlets used for managing users, phone numbers, meeting templates, and other Teams-related configurations. It showcases the usage of cmdlets such as Set-CsUser, Get-CsTeamsShiftsConnectionTeamMap, Remove-CsTeamsShiftsConnection, Set-CsPhoneNumberAssignment, Get-CsPhoneNumberAssignment, New-CsTeamsMeetingTemplatePermissionPolicy, Get-CsTeamsMeetingTemplateConfiguration, Set-CsCallQueue, New-CsCallQueue, Get-CsOnlineUser, Grant-CsTeamsUpgradePolicy and others. Parameters are used to modify or retrieve information about the Teams environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_81\n\n\n\n----------------------------------------\n\nTITLE: Getting Online User - PowerShell\nDESCRIPTION: This cmdlet retrieves information about an online user in Microsoft Teams. This is a common utility to find user details that can be used when configuring Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Converting ExternalId to Text - SQL\nDESCRIPTION: This SQL statement converts the binary data stored in the ExternalId column to a text format.  The ExternalId column stores the SIP dialog ID in a binary format.  The statement casts the varbinary data to varchar for readability.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/call-detail-recording-cdr-database-schema/dialogs.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncast(cast(ExternalId as varbinary(max)) as varchar(max))\n```\n\n----------------------------------------\n\nTITLE: Restrict anonymous users from dialing out using PowerShell\nDESCRIPTION: This PowerShell command restricts anonymous users from dialing out of a conference in Skype for Business Server. This is a security measure that is often implemented when PIN-less meeting join is enabled to prevent unauthorized use. The `AllowAnonymousUsersToDialOut` parameter is set to `$False` to prevent anonymous users from dialing out.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/pin-less-meeting-join.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingPolicy [-Identity <XdsIdentity>] -AllowAnonymousUsersToDialOut $False\n```\n\n----------------------------------------\n\nTITLE: Reading managed configuration values in iOS (Objective-C)\nDESCRIPTION: This snippet demonstrates how to read the 'domain_name' value from the managed app configuration in iOS using UserDefaults. It retrieves the managed configuration dictionary and accesses the 'domain_name' key to obtain the domain name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/sign-in-teams.md#_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\nUserDefaults.standard.object(forKey:\"com.apple.configuration.managed\")[\"domain_name\"]\n```\n\n----------------------------------------\n\nTITLE: Executing LyncPerfTool.exe with displayfile - Console\nDESCRIPTION: This command demonstrates how to execute LyncPerfTool.exe with an XML configuration file and display the file's contents. It uses the `/file` parameter to specify the XML configuration and the `/displayfile` parameter to show the configuration values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/stress-and-performance-tool/using-the-tool.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nLyncPerfTool.exe /file:IM_client0.xml /displayfile\n```\n\n----------------------------------------\n\nTITLE: Monitor HTTPS GET Requests for External Access\nDESCRIPTION: This snippet shows the HTTPS GET requests that should be monitored for external access to verify that the Front End pools are functioning correctly. These requests should not contain any ACCEPT header and should return 200 OK. Monitoring is performed against the /autodiscover/autodiscoverservice.svc/root endpoint.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/network-requirements/simple-urls.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nHTTPS GET Pool1ExternalWebFQDN.contoso.com/autodiscover/autodiscoverservice.svc/root\nHTTPS GET Pool2ExternalWebFQDN.contoso.com/autodiscover/autodiscoverservice.svc/root\n```\n\n----------------------------------------\n\nTITLE: List Recordings via Microsoft Graph API\nDESCRIPTION: Lists the recordings of online meetings using the Microsoft Graph API. Requires authentication and onlineMeetingId. Output: List of meeting recordings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_21\n\nLANGUAGE: HTTP\nCODE:\n```\n[List recordings](/graph/api/onlinemeeting-list-recordings).\n```\n\n----------------------------------------\n\nTITLE: Defining Building Types with SQL\nDESCRIPTION: This SQL snippet demonstrates how to insert a new building type into the `CqdBuildingType` table.  The `BuildingTypeId` and `BuildingTypeDesc` parameters are required to describe the building type within the organization. This allows filtering calls by building type.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/deploy-0.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO\n[dbo].[CqdBuildingType]\n([BuildingTypeId],\n[BuildingTypeDesc])\nVALUES\n(1, \n'Headquarters')   \n```\n\n----------------------------------------\n\nTITLE: Sample Hierarchy CSV File Structure\nDESCRIPTION: This CSV file demonstrates the required structure for defining a team targeting hierarchy in Microsoft Teams. It includes the required `TargetName`, `ParentName`, and `TeamId` columns, as well as example attribute columns (`Store layout`, `Departments:Clothing`, `Departments:Foods`) and bucket columns (`#Fresh Foods`, `#Frozen Foods`, `#Women's Wear`). The file illustrates how to represent hierarchical relationships and assign attributes and buckets to individual team nodes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_1\n\nLANGUAGE: CSV\nCODE:\n```\nTargetName,ParentName,TeamId,Store layout,Departments:Clothing,Departments:Foods,#Fresh Foods,#Frozen Foods,#Women's Wear\nRecall,,db23e6ba-04a6-412a-95e8-49e5b01943ba,,,,,,\nCommunications,,145399ce-a761-4843-a110-3077249037fc,,,,,,\nHR,,125399ce-a761-4983-a125-3abc249037fc,,,,,,\nEast Regional Office,HR;Communications;Recall,,,,,,,\nWest Regional Office,HR;Communications;Recall,,,,,,,\nNortheast Zone,East Regional Office,,,,,,,\nSoutheast Zone,East Regional Office,,,,,,,\nNew York Store,Northeast Zone,e2ba65f6-25e7-488b-b8f0-b8562d5de60a,Large,1,1,,,\nBoston Store,Northeast Zone,0454f08a-0507-437c-969a-682eb2fae7fc,Standard,1,1,,,\nMiami Store,Southeast Zone,619d6e4e-5f68-4b36-8e1f-16c98d7396c1,Compact,0,1,,,\nNew Orleans Store,Southeast Zone,6be960b8-72af-4561-a343-9ac4711874eb,Compact,0,1,,,\nSeattle Store,West Regional Office,487c0d20-4e55-4dc2-8187-a24c826e0fee,Standard,1,1,,,\nLos Angeles Store,West Regional Office,204a1287-2efb-4a8a-88e0-56fbaf5a2389,Large,1,1,,,\n```\n\n----------------------------------------\n\nTITLE: VBSS Stream Classification Logic - CQD\nDESCRIPTION: This snippet describes the logic to classify VBSS streams as Good or Poor in the Call Quality Dashboard (CQD). It checks Video Local Frame Loss Percentage Avg (for non-H264S inbound streams) and Video Frame Rate Avg. Classification proceeds to the next step if a metric is unavailable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/stream-classification-in-call-quality-dashboard.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nA VBSS stream is marked as _Good_ or _Poor_ based on the value of the first available metric in the following order:\n\n|Step # |Metric |Condition |Classification if Condition is True |Classification if Condition is False |Classification if Metric is Unavailable |Explanation |\n|:-----|:-----|:-----|:-----|:-----|:-----|:-----|\n|1|Video Local Frame Loss Percentage Avg|Codec is NOT H264S</br>And</br>StreamDirection is Inbound</br></br>If FrameLoss > 50%|_Poor_|_Good_|_Unclassified_|Average percentage of video frames lost as displayed to the user. The average includes frames recovered from network losses. FrameLoss is only used for classifying inbound non-H264S streams.|\n|2|Video Frame Rate Avg|< 1|_Poor_|_Good_|_Unclassified_|Average frames per second received for a video stream, computed over the duration of the session. Applies to all outbound streams and either StreamDirection for H264S.|\n```\n\n----------------------------------------\n\nTITLE: Deprecating CustomizeFederation parameter in CsTenantFederationConfiguration cmdlets\nDESCRIPTION: This snippet indicates the deprecation of the `CustomizeFederation` parameter from the `Get-CsTenantFederationConfiguration` and `Set-CsTenantFederationConfiguration` cmdlets. This implies a change in how federation settings are managed within the Teams tenant. This is a breaking change, requiring updates to existing scripts utilizing this parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsTenantFederationConfiguration\n```\n\n----------------------------------------\n\nTITLE: Running Registration Test with Rich Logging - PowerShell\nDESCRIPTION: This PowerShell command runs the Test-CsRegistration cmdlet and saves rich logging information to a variable named RegistrationTest. This allows for detailed troubleshooting of registration issues by capturing timestamps, actions, messages, SIP registrations, and exception records. The variable should not be prefixed with the $ character.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsRegistration -TargetFqdn atl-cs-001.litwareinc.com -OutLoggerVariable RegistrationTest\n```\n\n----------------------------------------\n\nTITLE: Listing Proxy Configurations in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet retrieves a list of all proxy configurations in Skype for Business. It does not require any specific parameters. The output displays the configured proxy settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsProxyConfiguration\n```\n\n----------------------------------------\n\nTITLE: Get Skype for Business Proxy Authentication Configuration\nDESCRIPTION: This PowerShell command retrieves the proxy configuration and displays the UseKerberosForClientToProxyAuth, UseNtlmForClientToProxyAuth and UseCertifcateForClientToProxyAuth values to verify the settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsProxyConfiguration -Identity \"Service:Registrar:SfBPool01.contoso.com\" | format-list UseKerberosForClientToProxyAuth, UseNtlmForClientToProxyAuth, UseCertifcateForClientToProxyAuth\n```\n\n----------------------------------------\n\nTITLE: Translation Rule: Add Phone Number and Extension\nDESCRIPTION: This translation rule adds a full phone number and extension to a dialed 5-digit extension number. The translated number includes the organization's full phone number and the dialed extension. This is critical for routing calls via PSTN when the WAN link is down.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/enterprise-voice-resiliency.md#_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n\\+14255550123;ext=$1\n```\n\nLANGUAGE: regex\nCODE:\n```\n\\+14255550100;ext=$1\n```\n\n----------------------------------------\n\nTITLE: Email Subject: Launch Notification - New Phone System Live\nDESCRIPTION: This snippet shows the subject line for the third email, to be sent on launch day. It notifies users that the new phone system is live.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/prepare-my-users-email-templates.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nIMPORTANT NOTICE: Your new phone system is live\n```\n\n----------------------------------------\n\nTITLE: Teams Machine-Wide Uninstaller - Batch\nDESCRIPTION: This code snippet shows the registry entry that is created upon uninstallation of the Teams Machine-Wide Installer. The `TeamsMachineUninstallerLocalAppData` key contains a command to uninstall Teams the next time the user signs in. The command utilizes `Update.exe` with the `--uninstall --msiUninstall` flags to remove Teams from the user's profile.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/msi-deployment.md#_snippet_1\n\nLANGUAGE: Batch\nCODE:\n```\nTeamsMachineUninstallerLocalAppData REG_EXPAND_SZ\n%LOCALAPPDATA%\\Microsoft\\Teams\\Update.exe --uninstall --msiUninstall\n```\n\n----------------------------------------\n\nTITLE: Deleting a Device Update Configuration with Remove-CsDeviceUpdateConfiguration in PowerShell\nDESCRIPTION: This snippet removes a device update configuration from Skype for Business using the `Remove-CsDeviceUpdateConfiguration` cmdlet. It requires the `Identity` parameter to specify the configuration to be deleted. This action permanently removes the specified device update configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsDeviceUpdateConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Configuring Voice Mail Escape via Management Shell\nDESCRIPTION: This snippet highlights that the 'Voice mail escape' feature is configurable *only* via the Skype for Business Server Management Shell. This implies a specific command or set of commands needs to be executed through the shell to modify this setting. This setting impacts call routing when simultaneous ringing is configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/voice-policy-and-pstn-usage-records.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# Example - The actual command will differ based on desired configuration\n# This is a conceptual placeholder\nSet-CsVoicePolicy -Identity <PolicyName> -EnableVoiceMailEscape $true\n```\n\n----------------------------------------\n\nTITLE: Example: Creating a Group Call Pickup range - PowerShell\nDESCRIPTION: This example demonstrates how to create a new range of call pickup group numbers using the New-CsCallParkOrbit cmdlet. It sets the Identity to \"Redmond call pickup\", the NumberRangeStart to 100, the NumberRangeEnd to 199, the CallParkService to redmond-applicationserver-1, and the Type to GroupPickup. This example illustrates the concrete parameter values required to successfully execute the command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-group-call-pickup-number-range.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsCallParkOrbit -Identity \"Redmond call pickup\" -NumberRangeStart 100 -NumberRangeEnd 199 -CallParkService redmond-applicationserver-1 -Type GroupPickup\n```\n\n----------------------------------------\n\nTITLE: Set default voice representation to 'Automated voice' - PowerShell\nDESCRIPTION: This PowerShell script sets the default voice representation setting to 'Automated voice' for the entire organization.  When users enable Interpreter, they will need to manually choose to simulate their voice or select an automated voice.  This is achieved using the VoiceSimulationInInterpreter parameter set to 'Disabled' within the Set-CsTeamsMeetingPolicy cmdlet. Replace <policy name> with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/interpreter-agent-teams.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -VoiceSimulationInInterpreter Disabled\n```\n\n----------------------------------------\n\nTITLE: Set Call Park Configuration with PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to reconfigure the Call Park application settings on the Skype for Business Server 2019 pool.  It requires the Skype for Business Server Management Shell to be opened on the Front End Server. It updates settings such as pickup timeout, music on hold, maximum pickup attempts, and the timeout URI, using values from the legacy environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-call-park-application-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCpsConfiguration -Identity \"<LS2013 Call Park Service ID>\" -CallPickupTimeoutThreshold \"<LS2010 CPS TimeSpan>\" -EnableMusicOnHold \"<LS2010 CPS value>\" -MaxCallPickupAttempts \"<LS2010 CPS pickup attempts>\" -OnTimeoutURI \"<LS2010 CPS timeout URI>\"\n```\n\n----------------------------------------\n\nTITLE: Start AD Sync Cycle - PowerShell\nDESCRIPTION: This PowerShell command initiates a delta synchronization cycle in Microsoft Entra Connect to synchronize the newly created on-premises resource account to online services. This step is necessary to make the resource account available for configuration in the Teams admin center. It requires the `adsync` module to be imported.  The delta sync focuses on changes since the last synchronization, making it faster than a full synchronization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-onprem-ra.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-ADSyncSyncCycle -PolicyType Delta\n```\n\n----------------------------------------\n\nTITLE: Exporting Rich Logging Data to HTML in PowerShell\nDESCRIPTION: This PowerShell command takes the rich logging data stored in the RegistrationTest variable (created by Test-CsRegistration with -OutLoggerVariable) and exports it to an HTML file.  The ToHTML() method converts the data to HTML format, and Out-File saves it to the specified file path. This HTML file can then be opened in a web browser for detailed analysis of the synthetic transaction.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n$RegistrationTest.ToHTML() | Out-File C:\\Logs\\Registration.html\n```\n\n----------------------------------------\n\nTITLE: Change Simultaneous Ringing Rule - SEFAUtil\nDESCRIPTION: This example illustrates how to change the simultaneous ringing rule to a delayed ringing rule using SEFAUtil. The command takes the target user's SIP address as input and uses the /delayringdelegates switch with a delay value (in seconds) to configure the delayed ringing. The output confirms that simultaneous ringing is disabled and displays the delay ringing delegate information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /delayringdelegates:10\n```\n\n----------------------------------------\n\nTITLE: Remove Calling Plans Licenses - PowerShell\nDESCRIPTION: This PowerShell script removes the previously configured Calling Plans licenses from a specific user.  It defines the license names based on the company name and uses the Set-MgUserLicense cmdlet to remove these licenses. This ensures that users are properly configured when migrating from Calling Plans to Direct Routing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-migrating.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$companyname = “contoso” \n$lic1 = $companyname + “:MCOPSTN1” \n$lic2 = $companyname + “:MCOPSTN2” \nSet-MgUserLicense -UserId '11111111-0000-aaaa-bbbb-222222222222' -RemoveLicenses @($lic1) \nSet-MgUserLicense -UserId '11111111-0000-aaaa-bbbb-222222222222' -RemoveLicenses @($lic2) \n\n```\n\n----------------------------------------\n\nTITLE: Application Sharing Stream Classification Logic - CQD\nDESCRIPTION: This snippet describes the logic to classify application sharing streams as Poor in the Call Quality Dashboard (CQD). It checks Spoiled Tile Percent Total, AppSharing RDP Tile Processing Latency Average, and AppSharing Relative OneWay Average.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/stream-classification-in-call-quality-dashboard.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nAn application sharing stream is marked as _Poor_ if one or more of the following conditions are met:\n\n| Metric     | Condition | Explanation |\n|:---        |:---       | :--- |\n| Spoiled Tile Percent Total | > 36 | Percentage of tiles that are discarded instead of sent to a remote peer (for example, from the MCU to a viewer). Discarded (or spoiled) tiles might be caused by bandwidth restrictions between client and server. |\n| AppSharing RDP Tile Processing Latency Average | > 400 | Average latency in milliseconds processing tiles on the RDP Stack at the conferencing server. |\n| AppSharing Relative OneWay Average | > 1.75 | Average relative one-way delay between the endpoints in seconds for application sharing streams. |\n```\n\n----------------------------------------\n\nTITLE: Enable and Assign Port Ranges in One Command - PowerShell\nDESCRIPTION: This command enables client media port ranges and assigns specific port ranges for audio, video, application sharing, and file transfer in a single command. This is a more concise way to enable and configure these settings simultaneously. Users need to sign out and back in for the change to apply.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-skype-clients.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingConfiguration -ClientMediaPortRangeEnabled $True -ClientAudioPort 50020 -ClientAudioPortRange 20 -ClientVideoPort 58000 -ClientVideoPortRange 20 -ClientAppSharingPort 42000 -ClientAppSharingPortRange 20 -ClientFileTransferPort 42020 -ClientFileTransferPortRange 20\n```\n\n----------------------------------------\n\nTITLE: Common Subnets Definitions\nDESCRIPTION: Defines a list of common private subnets that are frequently used in hotels, home networks, and hotspots. These subnets can cause difficulty when triaging network issues, and the document recommends moving organizations off of these networks for easier reporting in CQD.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/quality-of-experience-review-guide.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n-   10.0.0.0/24\n-   192.168.0.0/24\n-   192.168.1.0/24\n-   192.168.2.0/24\n-   172.20.10.0/24\n-   192.168.43.0/24\n```\n\n----------------------------------------\n\nTITLE: Setting CDR Retention for Multiple Locations in PowerShell\nDESCRIPTION: This PowerShell snippet configures CDR retention settings for all CDR configurations in an organization. It retrieves all CDR configurations using `Get-CsCdrConfiguration` and then pipes the results to `Set-CsCdrConfiguration` to enable purging and set the retention period for call detail data and error reports to 20 days.  This command is useful for applying the same retention policy across an entire Skype for Business Server deployment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/specify-retention-of-data.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCdrConfiguration | Set-CsCdrConfiguration-EnablePurging -KeepCallDetailForDays 20 -KeepErrorReportForDays 20\n```\n\n----------------------------------------\n\nTITLE: Register SLA as a server application - PowerShell\nDESCRIPTION: Registers Shared Line Appearance (SLA) as a server application in Skype for Business Server.  This command is executed for each pool in the deployment.  %FQDN% must be replaced with the fully qualified domain name of the pool.  The Uri parameter specifies the URI for the SLA application, and the Priority is inherited from the UserServices application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-shared-line-appearance.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsServerApplication -Identity 'Service:Registrar:%FQDN%/SharedLineAppearance' -Uri http://www.microsoft.com/LCS/SharedLineAppearance -Critical $false -Enabled $true -Priority (Get-CsServerApplication -Identity  'Service:Registrar:%FQDN%/UserServices').Priority\n```\n\n----------------------------------------\n\nTITLE: Create Caller ID Policy with Resource Account - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new caller ID policy named 'DKCQ'. It configures the policy to use a resource account's phone number as the caller ID and sets the Calling party name to 'Contoso'. The '$ObjId' variable, obtained from the resource account, is used to identify the resource account.  The EnableUserOverride parameter is set to $false, preventing users from overriding the policy settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/caller-id-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallingLineIdentity -Identity DKCQ -CallingIDSubstitute Resource -EnableUserOverride $false -ResourceAccount $ObjId -CompanyName \"Contoso\"\n```\n\n----------------------------------------\n\nTITLE: Moving Unassigned Number Announcements Configuration (Skype to Lync)\nDESCRIPTION: This PowerShell command moves the unassigned number announcements configuration from a Skype for Business Server 2015 pool to a Lync Server 2013 pool.  The command uses the `Move-CsAnnouncementConfiguration.ps1` script, specifying the source and destination pools using the `-Source` and `-Destination` parameters, respectively. This allows for rollback or migration between different versions of the server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_31\n\nLANGUAGE: powershell\nCODE:\n```\nMove-CsAnnouncementConfiguration.ps1 -Source SfBS2015Pool.contoso.com -Destination LS2013Pool.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Replace User Team Members - PowerShell\nDESCRIPTION: This command replaces the existing list of team members with a new list for a user in Skype for Business Server using PowerShell. The new list is specified using the Team parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserTeamMembers -Identity <UserIdParameter> [-Team @{replace=[list]}]\n```\n\n----------------------------------------\n\nTITLE: Move Conference Directory - PowerShell\nDESCRIPTION: Moves an existing conference directory from one pool to another in Skype for Business Server. Conference directories help dial-in conferencing users locate conference information. Requires identifying the conference directory to move and the destination pool. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Add Registry Key for VDI Detection\nDESCRIPTION: This command adds a registry key that indicates to the Teams installer that it is running in a VDI environment.  This is necessary for machine-wide installations to succeed, preventing the \"Cannot install for all users when a VDI environment is not detected\" error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Teams\" /v IsWVDEnvironment /t REG_DWORD /d 1 /f\n```\n\n----------------------------------------\n\nTITLE: Getting Edited File Content for Index.Aspx PowerShell\nDESCRIPTION: Gets the edited content for the internal and external Macp index.aspx files using the `GetEditedFileContentForIndexAspx` function.  Parameters include disableAdfsOAuth, relative path, registry path, ADFS client ID, ADFS OAuth instance, and simplified URL prefix.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\n$internalIndexAspxContent = GetEditedFileContentForIndexAspx -disableAdfsOAuth $disableAdfsOAuth -relativePath $macpInternalIndexAspxPath `\n-macpRegistryPath $macpRegPath -adfsClientId $adfsClientId -adfsOAuthInstance $adfsOAuthInstance -simplifiedUrlPrefix $simplifiedUrlPrefix\n\n$externalIndexAspxContent = GetEditedFileContentForIndexAspx -disableAdfsOAuth $disableAdfsOAuth -relativePath $macpExternalIndexAspxPath `\n-macpRegistryPath $macpRegPath -adfsClientId $adfsClientId -adfsOAuthInstance $adfsOAuthInstance -simplifiedUrlPrefix $simplifiedUrlPrefix\n```\n\n----------------------------------------\n\nTITLE: Enable QoE in multiple locations - PowerShell\nDESCRIPTION: This PowerShell snippet enables Quality of Experience (QoE) for all QoE configuration settings currently in use in the organization. It retrieves all QoE configurations using `Get-CsQoEConfiguration` and pipes them to `Set-CsQoEConfiguration` to set the `EnableQoE` parameter to `$True`. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/enable-qoe.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsQoEConfiguration | Set-CsQoEConfiguration \"site:Redmond\" -EnableQoE $True\n```\n\n----------------------------------------\n\nTITLE: Completely Disable Client Tutorial - Registry\nDESCRIPTION: This registry setting disables the client tutorial, preventing users from accessing it.  The `TutorialFeatureEnabled` value is created as a DWORD (32-bit) Value under the `HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Lync` key and set to 0.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_8\n\nLANGUAGE: registry\nCODE:\n```\n\"TutorialFeatureEnabled\"=dword:00000000\n```\n\n----------------------------------------\n\nTITLE: Granting Client Policy (Online) - PowerShell\nDESCRIPTION: This PowerShell command assigns a pre-existing client policy to a user in Skype for Business Online, influencing their client experience. The `ClientPolicyDisableSkypeUI` policy is intended to revert the client to the Lync UI. Requires Skype for Business Online PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsClientPolicy -PolicyName ClientPolicyDisableSkypeUI\n```\n\n----------------------------------------\n\nTITLE: Get information about Persistent Chat Categories - PowerShell\nDESCRIPTION: This PowerShell command retrieves information for all the Persistent Chat categories in the organization.  It utilizes the Get-CsPersistentChatCategory cmdlet without any specific parameters to retrieve all category objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/categories.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPersistentChatCategory\n```\n\n----------------------------------------\n\nTITLE: Checking Team Targeting Hierarchy Status\nDESCRIPTION: This PowerShell command retrieves the status of the team targeting hierarchy upload. The command returns details like the upload ID, status (Starting, Validating, Successful, Failed), error details (if any), last updated timestamp, user who last modified the file, and the file name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-TeamTargetingHierarchyStatus\n```\n\n----------------------------------------\n\nTITLE: Example SIP Invite Message - Request-URI\nDESCRIPTION: This snippet shows an example of the Request-URI in a SIP Invite message for an incoming call. The phone number must contain a plus sign (+).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-sip.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nINVITE sip:+18338006777@sip.pstnhub.microsoft.com SIP /2.0\n```\n\n----------------------------------------\n\nTITLE: Deprecated Cmdlets List\nDESCRIPTION: This snippet lists several cmdlets that have been deprecated. These include `ConvertTo-JsonForPSWS`, `Set-CsUserServicesPolicy`, `[Get|Set]-CsNetworkConfiguration`, `[Set|Remove]-CsTenantNetworkConfiguration`, `New-CsNetworkMediaBypassConfiguration`, `[Get|Grant|New|Remove|Set]-CsTeamsVerticalPackagePolicy`, and `[Get|Remove|Set]-CsVoiceNormalizationRule`. Using these cmdlets may result in errors or unexpected behavior and administrators should migrate to alternative methods.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_133\n\nLANGUAGE: PowerShell\nCODE:\n```\nConvertTo-JsonForPSWS\nSet-CsUserServicesPolicy\nGet-CsNetworkConfiguration\nSet-CsNetworkConfiguration\nSet-CsTenantNetworkConfiguration\nRemove-CsTenantNetworkConfiguration\nNew-CsNetworkMediaBypassConfiguration\nGet-CsTeamsVerticalPackagePolicy\nGrant-CsTeamsVerticalPackagePolicy\nNew-CsTeamsVerticalPackagePolicy\nRemove-CsTeamsVerticalPackagePolicy\nSet-CsTeamsVerticalPackagePolicy\nGet-CsVoiceNormalizationRule\nRemove-CsVoiceNormalizationRule\nSet-CsVoiceNormalizationRule\n```\n\n----------------------------------------\n\nTITLE: Enable Public Preview in Teams Rooms via XML Configuration\nDESCRIPTION: This code snippet demonstrates how to enable Public preview for Microsoft Teams Rooms on Windows by adding an XML element to the configuration file. This allows Teams Rooms devices to access and test preview features. Requires editing of the XML configuration file used for managing Teams Rooms settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/public-preview-doc-updates.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<EnablePublicPreview>True</EnablePublicPreview>\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Voice Applications Policy - PowerShell\nDESCRIPTION: This cmdlet modifies the settings of an existing Teams voice application policy. This allows you to update the custom settings for voice applications like Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_49\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Media Logging Policy using PowerShell\nDESCRIPTION: These cmdlets are used for managing Teams media logging policies, allowing administrators to retrieve and grant media logging policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_110\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Grant]-CsTeamsMediaLoggingPolicy\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Integration Data\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the Get Last Integration Data operation. It includes lists of the last 5 successful and failed integrations and cube processings, as well as the start times of the last data integration and cube processing. Note that some fields may be null if no data is available.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-last-integration-data.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"LastSuccessIntegrations\": [\"01/18/2015 10:30:13\",\n\"01/18/2015 10:28:29\",\n\"01/17/2015 15:15:17\",\n\"01/17/2015 15:00:17\",\n\"01/17/2015 14:45:13\"],\n\"LastSuccessCubeProcessings\": [\"01/17/2015 15:16:40\",\n\"01/17/2015 15:01:41\",\n\"01/17/2015 14:47:19\",\n\"01/17/2015 14:31:40\",\n\"01/17/2015 14:17:01\"],\n\"LastFailedIntegrations\":  ,\n\"LastFailedCubeProcessings\": [\"01/18/2015 10:30:58\",\n\"01/18/2015 10:29:28\",\n\"01/17/2015 10:02:20\",\n\"01/15/2015 20:01:56\",\n\"01/15/2015 19:45:50\"],\n\"LastDataIntegrationStart\": null,\n\"LastCubeProcessingStart\": \"01/18/2015 10:30:16\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Call Via Work Policy to a User (PowerShell)\nDESCRIPTION: This PowerShell cmdlet assigns a Call Via Work policy to a specified user. The Identity parameter identifies the user, and the PolicyName parameter specifies the name of the policy to assign.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-call-via-work.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsCallViaWorkPolicy -Identity <UserName> -PolicyName Tag:<PolicyName>\n```\n\n----------------------------------------\n\nTITLE: SDES Offer Example\nDESCRIPTION: This code snippet shows a sample SDES offer that might be sent to an SBC during a Skype for Business session. It defines audio parameters, RTP/SAVP profiles, and cryptographic keys for secure communication. The offer includes audio codecs (111, 103, 104, etc.), crypto attributes with inline keying material using AES_CM_128_HMAC_SHA1, and RTP/RTCP configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-media.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nm=audio 52884 RTP/SAVP 111 103 104 9 0 8 106 13 110 112 113 126\na=crypto:0 AES_CM_128_HMAC_SHA1_32 inline:Hr4D2cgUu9+Uza5Igz/JkVx59DAxDbaxJg862ibQ|2^31\na=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:JPEaIxHegfuv53ykBPZk8hV0GO8kTiiqRMfHimEE|2^31\na=rtcp:52884\na=rtcp-mux\n```\n\n----------------------------------------\n\nTITLE: Adding Filter parameter to Get-CsPhoneNumberAssignment cmdlet\nDESCRIPTION: This snippet adds `Filter` parameter to `Get-CsPhoneNumberAssignment` cmdlet. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_28\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPhoneNumberAssignment\n```\n\n----------------------------------------\n\nTITLE: Get-CsTeamsShiftsConnectionOperation Cmdlet\nDESCRIPTION: This snippet notes the release of the `Get-CsTeamsShiftsConnectionOperation` cmdlet in preview. This cmdlet is used to retrieve information about operations related to the Teams Shifts connector, allowing administrators to monitor and manage the connector's activities. It's available in preview, so functionality may change.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_145\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsShiftsConnectionOperation\n```\n\n----------------------------------------\n\nTITLE: Set Copilot Policy to Disabled - PowerShell\nDESCRIPTION: This PowerShell snippet configures a Teams meeting policy to disable Copilot by default for users assigned to this policy.  Organizers can then change the option to 'Only during the meeting' or 'During and after the meeting'.  It uses the `Set-CsTeamsMeetingPolicy` cmdlet with the `-Copilot` parameter set to `Disabled`.  `<policy name>` needs to be replaced with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/copilot-teams-transcription.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -Copilot Disabled\n```\n\n----------------------------------------\n\nTITLE: Updating a Test Device with Set-CsTestDevice in PowerShell\nDESCRIPTION: This snippet updates an existing test device in Skype for Business using the `Set-CsTestDevice` cmdlet. It requires the `Identity` parameter to identify the device and then additional parameters such as `IdentifierType` and `Identifier` to modify the device's properties. It modifies the attributes of the identified test device.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTestDevice -Identity site:Redmond/UCPhone -IdentifierType SerialNumber -Identifier \"09768-ABDR-83295\"\n```\n\n----------------------------------------\n\nTITLE: Modify DTMF Settings - PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies the DTMF settings for dial-in conferencing.  It allows specifying the key to be pressed for various conference control options like muting, locking, and enabling/disabling announcements. The `-Identity` parameter specifies the scope (global or site).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/key-mapping-for-dtmf-commands.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialinConferencingDtmfConfiguration [-Identity <global or site collection to be changed>]\n   [-AdmitAll <default key is 8>] [-AudienceMuteCommand <default key is 4>]\n   [-CommandCharacter <* (default) | #>] [-EnableDisableAnnouncementsCommand <default key is 9>]\n   [-HelpCommand <default key is 1>] [-LockUnlockConferenceCommand <default key is 7>]\n   [-MuteUnmuteCommand <default key is 6>] [-PrivateRollCallCommand <default key is 3>]\n```\n\n----------------------------------------\n\nTITLE: Get OfficeGraphInsights resource using Microsoft Graph API\nDESCRIPTION: Retrieves insights about documents, such as trending documents or documents a user has viewed, modified, or shared using the Microsoft Graph API. No direct dependencies mentioned other than the MS Graph API and appropriate permissions. Outputs are OfficeGraphInsights objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\n[officeGraphInsights resource type](/graph/api/resources/officegraphinsights)\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Policy - Allow External Participant Control (PowerShell)\nDESCRIPTION: This PowerShell script employs the `Set-CsTeamsMeetingPolicy` cmdlet to allow external participants to give, request, or be given control during Teams meetings and webinars. The `-AllowExternalParticipantGiveRequestControl` parameter is set to `$True` to enable this capability for meetings organized by users with the specified policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-who-present-request-control.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowExternalParticipantGiveRequestControl $True\n```\n\n----------------------------------------\n\nTITLE: Rollback Unified Contact Store\nDESCRIPTION: This cmdlet removes existing user contacts from the Unified Contact Store and stores them in Skype for Business Server before enabling two-factor authentication. It is crucial to prevent contact loss after enabling two-factor authentication.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/two-factor-authentication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsUcsRollback\n```\n\n----------------------------------------\n\nTITLE: Configure Coordinated Meetings for Teams Rooms via XML\nDESCRIPTION: This XML snippet demonstrates the configuration settings for Coordinated Meetings on Teams Rooms on Windows devices. It includes settings for audio, video, and whiteboard, as well as a list of trusted accounts. The file is placed in the local state folder and is read upon device startup.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/coordinated-meetings.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<CoordinatedMeetings enabled=\"true\">\n    <Settings>\n        <Audio default=\"true\" enabled=\"true\"/>\n        <Video default=\"true\" enabled=\"true\"/>\n        <Whiteboard default=\"false\" enabled=\"false\"/>\n    </Settings>\n    <TrustedAccounts>hub@contoso.com</TrustedAccounts>\n</CoordinatedMeetings>\n```\n\n----------------------------------------\n\nTITLE: Set Teams Update Management Policy (New Teams Client)\nDESCRIPTION: This snippet uses the `Set-CsTeamsUpdateManagementPolicy` cmdlet in PowerShell to configure the Teams update management policy, specifically the `-UseNewTeamsClient` parameter. This parameter is used to control the \"Try the new Teams\" toggle switch and manage the installation and default behavior of the new Teams client based on the rollout schedule. No specific inputs or outputs beyond the PowerShell cmdlet's standard behavior are described.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsUpdateManagementPolicy -UseNewTeamsClient\n```\n\n----------------------------------------\n\nTITLE: Creating Voice Routing Policy with PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new voice routing policy using the `New-CsOnlineVoiceRoutingPolicy` cmdlet.  It assigns PSTN usages to the policy, which are then used to determine the appropriate routing for users.  Make sure that the PSTN usages are associated to voice routes that use a local PSTN gateway or a gateway in a region without LBR restrictions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-enable.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoutingPolicy -Identity <voice routing policy ID> -Description <voice routing policy name> -OnlinePstnUsages <usages>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoutingPolicy -Identity \"DelhiVoiceRoutingPolicy\" -Description \"Delhi voice routing policy\" -OnlinePstnUsages \"Long Distance\" \nNew-CsOnlineVoiceRoutingPolicy -Identity \"HyderabadVoiceRoutingPolicy\" -Description \" Hyderabad voice routing policy\" -OnlinePstnUsages \"Long Distance\", \"Local\", \"Internal\"\n```\n\n----------------------------------------\n\nTITLE: Remove Delegate - SEFAUtil\nDESCRIPTION: This example shows how to remove a delegate using the SEFAUtil command-line tool. The command takes the target user's SIP address and the delegate's SIP address as input, using the /removedelegate switch to remove the specified delegate. The output shows the updated user settings without the removed delegate and confirms that delegate ringing is disabled if it was the last delegate.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /removedelegate:joe@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Add Port Location to the Location Database - PowerShell\nDESCRIPTION: This cmdlet adds a port location to the Skype for Business Server location database. It uses the `Set-CsLisPort` cmdlet with parameters specifying the ChassisID, PortID, description, location, company name, and civic address details. The PortIDSubType defaults to LocallyAssigned, but can be set to InterfaceAlias or InterfaceName.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLisPort -ChassisID 0C-23-CD-16-AA-CC -PortID 0A-abcd -Description \"Port1\" -Location Location2 -CompanyName \"Litware\" -HouseNumber 2345 -HouseNumberSuffix \"\" -PreDirectional \"\" -StreetName 163rd -StreetSuffix Ave -PostDirectional NE -City Bellevue -State WA -PostalCode 99234 -Country US\n```\n\n----------------------------------------\n\nTITLE: Update AudioVideoAuthentication Certificate with Set-CsCertificate (PowerShell)\nDESCRIPTION: This PowerShell command configures a new AudioVideoAuthentication certificate for the Skype for Business A/V Edge service using the Set-CsCertificate cmdlet with the -Roll and -EffectiveDate parameters. The EffectiveDate parameter specifies the date and time when the new certificate becomes active. It requires the thumbprint of the new certificate and the effective date formatted according to the server's region and language settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/stage-av-and-oauth-certificates.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCertificate -Type AudioVideoAuthentication -Thumbprint <thumb print of new certificate> -Roll -EffectiveDate <date and time for certificate to become active>\n```\n\n----------------------------------------\n\nTITLE: Creating Unassigned Number Treatment Routing to Announcement Service (PowerShell)\nDESCRIPTION: This PowerShell example creates an unassigned number treatment that routes calls to a range of phone numbers (+1 (555) 333-0000 to +1 (555) 333-9999) to an announcement service. It imports an audio file (MainAnnouncement.wav) and uses its ID to configure the treatment, setting the `TreatmentPriority` to 2.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/routing-calls-to-unassigned-numbers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Content = [System.IO.File]::ReadAllBytes('C:\\Media\\MainAnnouncement.wav')\n\n$AudioFile = Import-CsOnlineAudioFile -FileName \"MainAnnouncement.wav\" -Content $Content\n\n$fid = [System.Guid]::Parse($AudioFile.Id)\n\nNew-CsTeamsUnassignedNumberTreatment -Identity TR1 -Pattern \"^\\+1555333\\d{4}$\" -TargetType Announcement -Target $fid.Guid -TreatmentPriority 2\n```\n\n----------------------------------------\n\nTITLE: Set Copilot Policy to Enabled (Only During Meeting) - PowerShell\nDESCRIPTION: This PowerShell snippet configures a Teams meeting policy to enable Copilot, allowing it to be used 'Only during the meeting' for users assigned to this policy. The organizer can change this setting.  It uses the `Set-CsTeamsMeetingPolicy` cmdlet with the `-Copilot` parameter set to `Enabled`.  `<policy name>` needs to be replaced with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/copilot-teams-transcription.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -Copilot Enabled\n```\n\n----------------------------------------\n\nTITLE: Testing Access Numbers for a Specific Pool (PowerShell)\nDESCRIPTION: This PowerShell script simulates calls to access numbers for a specific pool. It requires the Skype for Business Server Management Shell, membership in the RTCUniversalServerAdmins group, Cs-ServerAdministrator, or CsAdministrator role, and the SIP address and credentials of a UC client hosted on the specific pool. Replace <serverName>.<domainName>.com with the target server's FQDN.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/tests.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$credentials = Get-Credential\nUser name:  testuser1@contoso.com\nPassword:  ********\nTest-CsDialInConferencing -UserSipAddress sip:testuser1@contoso.com -UserCredential $credentials -TargetFqdn <serverName>.<domainName>.com -Verbose\n```\n\n----------------------------------------\n\nTITLE: Extending Store Template with PowerShell using Microsoft Graph\nDESCRIPTION: This PowerShell script demonstrates how to extend the 'retailStore' template using Microsoft Graph. It specifies the template to use, the display name and description of the new team, and adds an additional channel named 'Additional store channel'. The 'template@odata.bind' property is crucial for specifying the base template.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/get-started-with-retail-teams-templates.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n{\n  \"template@odata.bind\": \"https://graph.microsoft.com/beta/teamsTemplates('retailStore')\",\n  \"DisplayName\": \"Contoso Store\",\n  \"Description\": \"Team for all staff in Contoso Store\",\n  \"Channels\": [\n    {\n      \"displayName\": \"Additional store channel\",\n      \"IsFavoriteByDefault\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Online SIP Domains using Disable-CsOnlineSipDomain - Powershell\nDESCRIPTION: This command disables the online SIP domain for a specific deployment (e.g., AcquiredCompany.com). This is necessary when multiple Skype for Business deployments exist and only one can be in hybrid mode at a time. Before migrating a new deployment to the cloud, its online SIP domain must be enabled, which requires other domains to be disabled. This prevents conflicts during migration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisable-CsOnlineSipDomain\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a New Agent Group in PowerShell\nDESCRIPTION: This PowerShell snippet provides a concrete example of how to create a new agent group named \"Help Desk\" using the `New-CsRgsAgentGroup` cmdlet. It specifies the parent service, description, agent alert time, participation policy, routing method, and agent URIs. This demonstrates how to set specific parameters for a new agent group.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-agent-group.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsRgsAgentGroup -Name \"Help Desk\" -Parent \"service:ApplicationServer:atl-cs-001.contoso.com\"  -Description \"Contoso Help Desk\" -AgentAlertTime 20 -ParticipationPolicy Formal -RoutingMethod RoundRobin -AgentsByUri(\"sip:mindy@contoso.com\",\"sip:bob@contoso.com\")\n```\n\n----------------------------------------\n\nTITLE: Create Call Queue with Timeout Handling - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new call queue and configure the Timeout action to forward calls to a Resource Account. The `New-CsCallQueue` cmdlet is used, specifying the `TimeoutAction` as `Forward` and the `OverflowActionTarget` (Note: Should be TimeoutActionTarget) with the GUID of the Resource Account. It is important to note the typo in the original documentation which incorrectly labels TimeoutActionTarget as OverflowActionTarget in the example.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -TimeoutAction Forward -OverflowActionTarget <Resource Account GUID>\n```\n\n----------------------------------------\n\nTITLE: Reserving Meeting Spaces via Teams Panels\nDESCRIPTION: This section explains how to reserve available meeting spaces for ad hoc meetings directly from the Teams panels device. It details the steps involved, including tapping the \"Reserve\" button, selecting an end time, and confirming the reservation. It also highlights constraints such as start time always being the current time and the inability to unreserve the space from the panel itself.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/use-teams-panels.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Configuring Emergency Numbers for London - PowerShell\nDESCRIPTION: This snippet configures two emergency numbers for the city of London. It sets 999 with dial mask 144 and 112 with dial masks 911, 117, and 118, associating them with the location policy \"London\". This allows for both the standard emergency numbers and possible misdials to route correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-multiple-emergency-numbers.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n> $a = New-CsEmergencyNumber -DialString 999 -DialMask 144\n> $b = New-CsEmergencyNumber -DialString 112 -DialMask 911;117;118\n> Set-CsLocationPolicy -Identity London -EmergencyNumbers @{add=$a,$b}\n```\n\n----------------------------------------\n\nTITLE: Creating a Company-Wide Team via Graph API\nDESCRIPTION: This code snippet demonstrates how to create a Company-Wide team using the Microsoft Graph API. It includes the HTTP POST request with the required JSON payload.  The payload specifies the team's template, display name, description, and visibility.  The request assumes a pre-existing template ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/smb-templates.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://graph.microsoft.com/beta/teams \nContent-Type: application/json \n{\n    \"template@odata.bind\": \"https://graph.microsoft.com/beta/teamsTemplates('SmallBusinessOrgWide')\",\n    \"displayName\": \"Org-wide\",\n    \"description\": \"All posts that are relevant for entire company (e.g. Company-wide announcements, Exec posts, employee poll/feedback).\",\n    \"visibility\": \"Private\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar Processing Properties for Resource Account\nDESCRIPTION: This PowerShell command configures various calendar processing properties for a specified resource account (e.g., a conference room) in Exchange Online.  It sets properties like AutomateProcessing, AddOrganizerToSubject, AllowRecurringMeetings, DeleteAttachments, DeleteComments, DeleteSubject, ProcessExternalMeetingMessages, RemovePrivateProperty, AddAdditionalResponse, and AdditionalResponse. Requires connection to Exchange Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/mtr-device-config-mailbox-include.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CalendarProcessing -Identity \"ConferenceRoom01\" -AutomateProcessing AutoAccept -AddOrganizerToSubject $false -AllowRecurringMeetings $true -DeleteAttachments $true -DeleteComments $false -DeleteSubject $false -ProcessExternalMeetingMessages $true -RemovePrivateProperty $false -AddAdditionalResponse $true -AdditionalResponse \"This is a Microsoft Teams Meeting room!\"\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Emergency Numbers to Location Policy - PowerShell\nDESCRIPTION: This code snippet demonstrates how to create multiple emergency numbers, each with a dial string and dial mask, and then associate them with a location policy. This provides flexibility in configuring multiple emergency numbers for different scenarios. Emergency numbers `$a` and `$b` are created and added to the location policy specified by `-Identity`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-multiple-emergency-numbers.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n> $a = New-CsEmergencyNumber -DialString 911 -DialMask 112;999\n> $b = New-CsEmergencyNumber -DialString 500 -DialMask 501;502\n> Set-CsLocationPolicy -Identity <id> -EmergencyNumbers @{add=$a,$b}\n```\n\n----------------------------------------\n\nTITLE: Adding Sample Trusted IP Addresses - PowerShell\nDESCRIPTION: This snippet provides examples of adding trusted IP addresses for specific sites (Vietnam, Indonesia, and Singapore).  The `-IPAddress` parameter defines the external IP. `-MaskBits 32` indicates that these are individual IPv4 addresses. `-Description` provides a human-readable label.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTenantTrustedIPAddress -IPAddress 172.16.240.110 -MaskBits 32 -Description \"Vietnam site trusted IP\"\nNew-CsTenantTrustedIPAddress -IPAddress 172.16.240.120 -MaskBits 32 -Description \"Indonesia site trusted IP\"\nNew-CsTenantTrustedIPAddress -IPAddress 172.16.240.130 -MaskBits 32 -Description \"Singapore site trusted IP\"\n```\n\n----------------------------------------\n\nTITLE: PowerShell Warning Message for Teams Upgrade Policy\nDESCRIPTION: This is the warning message displayed in PowerShell when granting a Teams upgrade policy that overrides existing settings.  It informs the administrator that certain enabled features (AllowUserChat, AllowPrivateCalling, AllowPrivateMeetingScheduling, AllowChannelMeetingScheduling) will be effectively disabled because the TeamsUpgradePolicy dictates the client behavior based on the assigned mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-experience-and-conformance-to-coexistence-modes.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nWARNING: The user 'user1@contoso.com' currently has enabled values for: AllowUserChat, AllowPrivateCalling, AllowPrivateMeetingScheduling, AllowChannelMeetingScheduling, however these values will be ignored. This is because you are granting this user TeamsUpgradePolicy with mode=SfBWithTeamsCollab, which causes the Teams client to behave as if they are disabled.\n```\n\n----------------------------------------\n\nTITLE: Call RemoveAllAccessForUser Graph API\nDESCRIPTION: This snippet demonstrates how to call the RemoveAllAccessForUser Graph API using an HTTP POST request. It constructs the request with the chat ID and user details in JSON format.  The API removes an external chat from a specified user's view.  It requires the `chatsId` to be replaced with the appropriate chat ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/security-remove-external-chat.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://graph.microsoft.com/beta/chats/{chatsId}/removeAllAccessForUser \nContent-Type: application/json \n\n{ \n\t\"user\": { \n\t\t\"id\" : \"d864e79f-……..-0eeb4d61fdc2\", \n\t\t\"tenantId\": \"2a690434-………-13600199a\" \n\t} \n}\n```\n\n----------------------------------------\n\nTITLE: Configuration XML for Call Parkometer - XML\nDESCRIPTION: This XML configuration file is an example of parkometer.exe.config. It specifies the database connection string parameters: server, database, User Id, Password, and Integrated Security. It must be placed in the same directory where parkometer.exe is located for remote access to the CPS database.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <appSettings>\n   <add key=\"SQL\" value=\"server=myserver\\RTC;\ndatabase=cpsdyn;\nUser Id=mydomain\\Administrator;\nPassword=mypassword.;\nIntegrated Security=false;\"/>\n  </appSettings>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Summarizing IP Phone Inventory Data using PowerShell\nDESCRIPTION: This PowerShell snippet imports IP phone inventory data from a CSV file, groups the phones by manufacturer and hardware version, and then displays the count and name of each group, sorted in descending order by count. It requires the `Import-Csv` cmdlet and assumes the CSV file contains columns for 'Manufacturer' and 'Hardware version'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/ip-phone-inventory-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$phones = Import-Csv \"C:\\Data\\IP_Phone_Inventory_Report.csv\"\n$phones |Group-Object Manufacturer, \"Hardware version\" | Select-Object Count, Name | Sort-Object Count -Descending\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - NY Site Prefix (.NET Regex)\nDESCRIPTION: This normalization rule translates numbers with an on-net prefix (6) and NY site code (333) to E.164 format. It uses a .NET Framework regular expression to match '6333' followed by 4 digits, and prepends \"+1202555\" to the matched digits. The input is '6333' followed by 4 digits, and the output is the E.164 formatted number. The first captured group ($1) is appended to the translation string.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_9\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^6333(\\d{4})$\n```\n\n----------------------------------------\n\nTITLE: Setting up OAuth on Front End Pools PowerShell\nDESCRIPTION: Sets up OAuth on the Front End pools using the `SetupOAuthOnFrontEndPools` function.  It passes in credential, pools array, registry path, disableAdfsOAuth flag, content map, ADFS client ID, ADFS metadata public URI, ADFS issuer name, and ADFS OAuth instance.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\nSetupOAuthOnFrontEndPools -cred $cred -pools $poolArray -macpRegistryPath $macpRegPath `\n-disableAdfsOAuth $disableAdfsOAuth -relativePathToContentMap $finalRelativePathToContentMap -adfsClientId $adfsClientId `\n-adfsMetadataPublicUri $adfsMetadataPublicUri -adfsIssuerName $adfsIssuerName -adfsOAuthInstance $adfsOAuthInstance\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - International (US) (.NET Regex)\nDESCRIPTION: This normalization rule translates numbers with international prefixes (011) in the United States to E.164 format. It uses a .NET Framework regular expression to match '011' followed by any number of digits, and prepends \"+\" to the matched digits. The input is '011' followed by a phone number, and the output is the E.164 formatted number. The first captured group ($1) is used as the complete translation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_6\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^011(\\d*)$\n```\n\n----------------------------------------\n\nTITLE: Get Dial-In Conferencing Language List - PowerShell\nDESCRIPTION: Retrieves a list of languages supported for use with Skype for Business Server dial-in conferences. These languages are used to relay audio messages and instructions to users. The cmdlet returns a list of available languages.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingLanguageList\n```\n\n----------------------------------------\n\nTITLE: Add AD FS PowerShell Snap-in\nDESCRIPTION: This command adds the Microsoft.Adfs.Powershell snap-in to the current Windows PowerShell session. This is required to manage AD FS through PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/deploy-web-downloadable-clients.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nadd-pssnapin Microsoft.Adfs.powershell\n```\n\n----------------------------------------\n\nTITLE: Create Voice Route (PowerShell)\nDESCRIPTION: This PowerShell command creates a new online voice route with the identity “analog-interop” for the number range +1425 XXX XX XX. The voice route is associated with the online gateway sbc.contoso.com and the online PSTN usage “Interop”. The `NumberPattern` parameter uses a regular expression to match phone numbers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-analog-devices.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> New-CsOnlineVoiceRoute -Identity analog-interop -NumberPattern \"^\\+1(425)(\\d{7})$\" -OnlinePstnGatewayList sbc.contoso.com -Priority 1 -OnlinePstnUsages \"Interop\"\n```\n\n----------------------------------------\n\nTITLE: Enable Client Media Port Range - PowerShell\nDESCRIPTION: This command enables the client media port range for the global conferencing configuration. By default, client media port range is disabled and clients use any available port between ports 1024 and 65535. Enabling this is a prerequisite for configuring specific port ranges for QoS.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-skype-clients.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingConfiguration -ClientMediaPortRangeEnabled $True\n```\n\n----------------------------------------\n\nTITLE: Adding UserNameExtension parameter\nDESCRIPTION: This snippet adds `UserNameExtension` parameter to `[New|Set]-CsAutoAttendant` cmdlets. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_38\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsAutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Managing Online Application Instance Association using PowerShell\nDESCRIPTION: These cmdlets are used for managing online application instance associations. User Principal Name (UPN) & GUID can now be used as identity in modernized cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_123\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Remove]-CsOnlineApplicationInstanceAssociation\n```\n\n----------------------------------------\n\nTITLE: AJAX Request for QoE Data\nDESCRIPTION: This JavaScript code snippet iterates through an array of queries and sends an AJAX POST request for each query to a local server endpoint. It serializes the query object to JSON and sends it as the request body. The request is synchronous to ensure that the data is processed in order.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n//get the overall corpnet data\n            for (var i = 0; i < queries.length; i++) {\n                $.ajax({\n\n                    url: 'http://localhost/QoEDataService/RunQuery',\n                    data: JSON.stringify(queries[i].Query),\n                    type: 'POST',\n                    async: false,\n```\n\n----------------------------------------\n\nTITLE: Updating Skype for Business PowerShell Module Help\nDESCRIPTION: This command updates the help content for the Skype for Business PowerShell module. It downloads and installs the latest help files, ensuring administrators have access to the most current documentation. This is crucial for understanding new features and updated cmdlet parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/management-shell.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Help -Module SkypeforBusiness\n```\n\n----------------------------------------\n\nTITLE: Querying Most Active Users - SQL\nDESCRIPTION: This SQL query retrieves a list of the most active users after a certain date. It joins the `tblChat` and `tblPrincipal` tables, filters by date, groups by user name, and orders the results by the number of chat messages in descending order.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/persistent-chat-database-schema/sample-persistent-chat-database-queries.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT prinName as Name, count(*) as ChatMessages\n  FROM tblChat, tblPrincipal\n  WHERE prinID = userId AND dbo.fnTicksToDate(chatDate) > '1/1/2011'\n  GROUP BY prinName\n  ORDER BY ChatMessages DESC\n```\n\n----------------------------------------\n\nTITLE: Creating classic Teams Firewall Rules - PowerShell\nDESCRIPTION: This PowerShell script creates inbound firewall rules for the classic Microsoft Teams client for each user profile found in the c:\\users directory. It checks for the existence of `Teams.exe` in each user's profile and, if found, creates firewall rules allowing inbound UDP and TCP traffic. The script requires PowerShell 3.0 or later and must be run with elevated administrator privileges. The classic Teams client is no longer supported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/client-firewall-script.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n   Creates firewall rules for Teams.\n.DESCRIPTION\n   (c) Microsoft Corporation 2018. All rights reserved. Script provided as-is without any warranty of any kind. Use it freely at your own risks.\n   Must be run with elevated permissions. Can be run as a GPO Computer Startup script, or as a Scheduled Task with elevated permissions.\n   The script will create a new inbound firewall rule for each user folder found in c:\\users.\n   Requires PowerShell 3.0.\n#>\n\n#Requires -Version 3\n\n$users = Get-ChildItem (Join-Path -Path $env:SystemDrive -ChildPath 'Users') -Exclude 'Public', 'ADMINI~*'\nif ($null -ne $users) {\n    foreach ($user in $users) {\n        $progPath = Join-Path -Path $user.FullName -ChildPath \"AppData\\Local\\Microsoft\\Teams\\Current\\Teams.exe\"\n        if (Test-Path $progPath) {\n            if (-not (Get-NetFirewallApplicationFilter -Program $progPath -ErrorAction SilentlyContinue)) {\n                $ruleName = \"Teams.exe for user $($user.Name)\"\n                \"UDP\", \"TCP\" | ForEach-Object { New-NetFirewallRule -DisplayName $ruleName -Direction Inbound -Profile Domain -Program $progPath -Action Allow -Protocol $_ }\n                Clear-Variable ruleName\n            }\n        }\n        Clear-Variable progPath\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Dial Plan - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves a specific dial plan, allowing you to inspect its configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-video-interop-server/configure-the-vis.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsDialPlan -Identity \"Service:CUCMVIS1.CUCMInterop.contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Get Conferencing PIN Policy in Skype for Business\nDESCRIPTION: Retrieves the current conferencing PIN policy settings.  This cmdlet allows administrators to view the PIN policy, including minimum length, logon attempts, expiration, and pattern restrictions. No specific input is needed, and it returns the CsPinPolicy object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Voice enable user with Set-CsPhoneNumberAssignment PowerShell\nDESCRIPTION: This PowerShell cmdlet enables the Enterprise Voice setting for a specific user, which is a prerequisite for using SMS in Teams. It requires the Teams PowerShell module to be installed and the user to have a valid Teams Calling Plan phone number assigned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/sms-overview.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -EnterpriseVoiceEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Create 'No Restrictions' Voice Routing Policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new voice routing policy named 'No Restrictions'. It associates the policy with 'US and Canada' and 'International' PSTN usages, allowing unrestricted call routing to these regions. The order of PSTN usages matters because if the 'International' PSTN usage is before 'US and Canada', calls to +1 425 XXX XX XX will be routed using international routing logic.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoutingPolicy \"No Restrictions\" -OnlinePstnUsages \"US and Canada\", \"International\"\n```\n\n----------------------------------------\n\nTITLE: Archiving PowerShell Cmdlets - Skype for Business Server\nDESCRIPTION: This section lists PowerShell cmdlets available for managing archiving in Skype for Business Server. These cmdlets allow administrators to export archiving data, retrieve configuration and policy information, grant archiving policies, manually purge the archiving database, create new archiving configurations and policies, remove configurations and policies, modify existing configurations and policies, and set the archiving server database location.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/archiving.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Staging Certificates with Set-CsCertificate PowerShell Cmdlet\nDESCRIPTION: This section explains the usage of the Set-CsCertificate cmdlet with the -Roll parameter for staging AudioVideoAuthentication and OAuthTokenIssuer certificates in Skype for Business Server. It highlights the dependencies between -Roll, -EffectiveDate, -Thumbprint, and -Type parameters. The parameters are used to define the certificate to be staged, its type, and when it becomes effective, allowing for a smooth transition during certificate expiry.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/stage-av-and-oauth-certificates.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Managing Voice Routing via PowerShell\nDESCRIPTION: This section focuses on managing dial-in access information, like dial plans, voice policies, routes, and PSTN usage, using the Skype for Business Server Management Shell.  It advises searching for cmdlets with the prefixes `-CsDialPlan` and `-CsVoice`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nsearch for the **-CsDialPlan** and **-CsVoice** cmdlets\n```\n\n----------------------------------------\n\nTITLE: Get Permission resource using Microsoft Graph API\nDESCRIPTION: Retrieves permission information for a file or folder using the Microsoft Graph API. Allows applications to determine who has access and what level of access they have. Requires a file or folder ID. Returns permission objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\n[Permission resource type](/graph/api/resources/permission)\n```\n\n----------------------------------------\n\nTITLE: Running gpedit.msc to open Local Group Policy Editor\nDESCRIPTION: This snippet provides instructions on how to open the Local Group Policy Editor in Windows, which is used to configure QoS policies on standalone Edge servers. It involves clicking the 'Start' button, selecting 'Run', typing 'gpedit.msc' in the dialog box, and pressing ENTER.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-edge-servers.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n1.  Click **Start**, and then click **Run**.\n\n2.  In the **Run** dialog box, type **gpedit.msc**, and then press ENTER.\n```\n\n----------------------------------------\n\nTITLE: Configuring Machine Key for FIPS Compliance in Web.config (XML)\nDESCRIPTION: This code snippet demonstrates how to configure the machineKey section in the Web.config file to comply with Federal Information Processing Standards (FIPS). It specifies the Triple Data Encryption Standard (3DES) algorithm for processing view state data, ensuring secure encryption within the ASP.NET application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-response-group.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n   <machineKey validationKey=\"AutoGenerate,IsolateApps\" decryptionKey=\"AutoGenerate,IsolateApps\" validation=\"3DES\" decryption=\"3DES\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring IIS URL Authorization Rules for CQD Portal (XML)\nDESCRIPTION: This XML snippet configures URL authorization rules in IIS for the CQD portal. It removes the default \"Allow All Users\" rule and adds a new rule to allow access only to users in the \"CQDPortalUsers\" role. This ensures that only authorized users can access the portal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/deploy-0.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <system.webServer> <security> <authorization> <remove users=\"*\" roles=\"\" verbs=\"\" /> <add accessType=\"Allow\" roles=\"CQDPortalUsers\" /> </authorization> </security> </system.webServer> </configuration> \n```\n\n----------------------------------------\n\nTITLE: List Unique Users by Session Count in PowerShell\nDESCRIPTION: This PowerShell command identifies unique users based on the total number of sessions they participated in as the 'From user'.  It groups the data by the 'From user' column, selects both the session count ('Count') and the user's name ('Name'), and sorts the results in descending order of session count. This shows the most active users at the top of the list.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/user-activity-report.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x | Group-Object \"From user\" | Select Count, Name | Sort-Object Count -Descending\n```\n\n----------------------------------------\n\nTITLE: Get Online User Details (Teams PowerShell)\nDESCRIPTION: This PowerShell command retrieves online user details, specifically checking for RegistrarPool, OnPremLineURI, and LineURI attributes. It helps determine if a phone number is assigned online or on-premises. It requires the Teams PowerShell module to be installed and the administrator to be connected to their Microsoft 365 tenant. The parameter <user> needs to be replaced with the actual user identifier.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure-numbers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity <user> | fl RegistrarPool, OnPremLineURI, LineURI\n```\n\n----------------------------------------\n\nTITLE: Move users using PowerShell filter with pool names in Skype for Business\nDESCRIPTION: This PowerShell command moves a large number of users from one pool to another. The Get-CsUser cmdlet with the -Filter parameter selects users who are currently in pool02.contoso.net.  These users are then piped to the Move-CsUser cmdlet and moved to pool01.contoso.net. Requires the Skype for Business Server Management Shell to be loaded.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/user-accounts/customize-properties.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Filter {RegistrarPool -eq \"pool02.contoso.net\"} | Move-CsUser -Target \"pool01.contoso.net\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Individual Teleconference Policy - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new individual Teams Room Video Teleconferencing policy, enabling SIP and H.323 dialing for a specific set of Teams Rooms resource accounts. It requires the Teams PowerShell module to be installed and connected. The `AreaCode` parameter must be provided by the CVI provider. Replace the placeholder GUID with the actual GUID provided by your CVI provider.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/meetings-with-sip-h323-devices.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsRoomVideoTeleConferencingPolicy -Identity \"TurnOnSIPH323\" -Enabled $true -AreaCode \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\" -ReceiveExternalCalls Enabled -ReceiveInternalCalls Enabled\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Call Action in PowerShell\nDESCRIPTION: This snippet demonstrates how to define a default call action using the `New-CsRgsCallAction` cmdlet in PowerShell.  It requires a previously saved prompt (e.g., `$promptWM`), specifies the action to be taken (e.g., `TransferToQueue`), and associates the action with a queue ID (e.g., `$qid`). The action object is then stored in the `$actionWM` variable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$actionWM = New-CsRgsCallAction -Prompt <saved prompt from previous step> -Action <action to be taken> -QueueID $qid\n```\n\n----------------------------------------\n\nTITLE: Creating Relative Path to Content Map PowerShell\nDESCRIPTION: Creates a hash table `$finalRelativePathToContentMap` that maps the relative paths of the web.config and index.aspx files to their corresponding content. This map is used to deploy the updated content.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\n$finalRelativePathToContentMap = @{}\n$key = Join-Path -Path $internalOcsPswsPath -ChildPath \"web.config\"\n$finalRelativePathToContentMap[$key] = $internalOcsPswsWebConfigContent\n\n$key = Join-Path -Path $externalOcsPswsPath -ChildPath \"web.config\"\n$finalRelativePathToContentMap[$key] = $externalOcsPswsWebConfigContent\n\n$key = Join-Path -Path $internalMacpPath -ChildPath \"index.aspx\"\n$finalRelativePathToContentMap[$key] = $internalIndexAspxContent\n\n$key = Join-Path -Path $externalMacpPath -ChildPath \"index.aspx\"\n$finalRelativePathToContentMap[$key] = $externalIndexAspxContent\n```\n\n----------------------------------------\n\nTITLE: PowerShell: Create and Assign Messaging Policy\nDESCRIPTION: This PowerShell script sample creates and assigns a messaging policy in Microsoft Teams. It provides a way to customize messaging features for specific groups of users, allowing administrators to control aspects like editing/deleting messages, chat availability, and the use of memes. The script likely utilizes cmdlets from the Microsoft Teams PowerShell module (e.g., New-CsTeamsMessagingPolicy, Grant-CsTeamsMessagingPolicy).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/deploy-chat-teams-channels-microsoft-teams-landing-page.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[PowerShell script sample - Create and assign a messaging policy](scripts/powershell-script-teams-messaging-policy-edu.md)\n```\n\n----------------------------------------\n\nTITLE: Deleting Web Service Configurations with Certificate Authentication - PowerShell\nDESCRIPTION: This PowerShell command removes all Web Service configuration settings that allow certificate authentication. It retrieves all Web Service configurations using `Get-CsWebServiceConfiguration`, filters them using `Where-Object` to select only those where `UseCertificateAuth` is `$True`, and then pipes the filtered results to `Remove-CsWebServiceConfiguration` for deletion. This command requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/web-service-configuration-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWebServiceConfiguration | Where-Object {$_.UseCertificateAuth -eq $True} | Remove-CsWebServiceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Response Codes for SBC - PowerShell\nDESCRIPTION: This PowerShell command configures the FailoverResponseCodes parameter for a specific Session Border Controller (SBC). It specifies which SIP response codes, when received from the SBC, should trigger a failover to another SBC in the voice routing policy. The example sets the sbc1.contoso.com gateway to failover when it receives a 408 response code.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-trunk-failover-on-outbound-call.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSOnlinePSTNGateway -Identity sbc1.contoso.com -FailoverResponseCodes \"408\"\n```\n\n----------------------------------------\n\nTITLE: Disable Anonymous Join (Per-Organizer) - PowerShell\nDESCRIPTION: This PowerShell script prevents anonymous participants from joining meetings organized by users or groups associated with the specified meeting policy. It utilizes the `Set-CsTeamsMeetingPolicy` cmdlet to set the `-AllowAnonymousUsersToJoinMeeting` parameter to `$false`. This provides a way to restrict certain organizers from allowing anonymous attendees in their meetings, overriding the organization-wide setting if it's enabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/anonymous-users-in-meetings.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowAnonymousUsersToJoinMeeting $false\n```\n\n----------------------------------------\n\nTITLE: Checking the status of a bulk sign-in batch using PowerShell\nDESCRIPTION: This set of commands retrieves the status of a bulk sign-in batch.  First, it re-creates a bulk sign-in request. Then extracts the `BatchId`. Finally it uses `Get-CsSdgBulkSignInRequestStatus` and BatchId to get the status. The status is then formatted and printed to the console. Finally, the BatchItem property is displayed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-configure.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$newBatchResponse = New-CsSdgBulkSignInRequest  -DeviceDetailsFilePath  .\\Example.csv  -Region APAC\n$newBatchResponse.BatchId\n$getBatchStatusResponse = Get-CsSdgBulkSignInRequestStatus -Batchid $newBatchResponse.BatchId\n$getBatchStatusResponse | ft\n$getBatchStatusResponse.BatchItem\n```\n\n----------------------------------------\n\nTITLE: Generating Pool Name Array PowerShell\nDESCRIPTION: Generates an array of Skype for Business Front End pool names. If no pools are specified via parameter, the script attempts to retrieve all pools using the `GetAllSfBW17Pools` function; otherwise, it generates the array based on input pools using `GeneratePoolNameArray`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ($pools -eq $null)\n{\n    $poolName = GetAllSfBW17Pools\n    if ($poolName.length -eq 0)\n    {\n        Write-Error \"Error generating list of FE pool FQDN. Aborting process.\"\n        return\n    }\n\n    $poolArray += ($poolName)\n}\nelse\n{\n    $poolArray = GeneratePoolNameArray -pools $pools -computerDetails $computerDetails\n\n    if ($poolArray.length -eq 0)\n    {\n        Write-Error \"Error parsing pool names.\"\n        return\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable UPN Prefill in Teams on Windows - Registry Key\nDESCRIPTION: This registry key disables the pre-population of the User Principal Name (UPN) on the Teams sign-in screen for domain-joined PCs.  This is useful when on-premises and Microsoft Entra ID UPNs differ. It prevents Teams from automatically filling in the username field during sign-in. Setting this to 1 (0x00000001) disables the prefill.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/sign-in-teams.md#_snippet_0\n\nLANGUAGE: reg\nCODE:\n```\nComputer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\Teams<br/>\nSkipUpnPrefill(REG_DWORD)<br/>\n0x00000001 (1)\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Example for Normalization Rule\nDESCRIPTION: This example demonstrates a regular expression used to match 7-digit phone numbers and a translation rule to convert them to E.164 format by prepending +1425. The regular expression `^(\\d{7})$` matches exactly seven digits, and the translation rule `+1425$1` adds the prefix +1425 to the matched digits. The $1 represents the captured group of 7 digits from the regular expression.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/defining-normalization-rules.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^(\\d{7})$\n```\n\n----------------------------------------\n\nTITLE: Import Persistent Chat Data - PowerShell\nDESCRIPTION: This PowerShell cmdlet imports Persistent Chat data from a zip file into a Skype for Business Server 2019 instance.  It requires the DBInstance parameter, specifying the backend server FQDN and instance name, and the FileName parameter, specifying the path and filename of the zip file containing the exported data. The zip file should be copied from the Skype for Business 2015 front-end server to the Skype for Business 2019 front-end server prior to running this cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-persistent-chat-pool.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nImport-CsPersistentChatData -DBInstance \"<backend-FQDN\\instance-name>\" -FileName \"C:\\PersistentChatData.zip\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Region using PowerShell\nDESCRIPTION: Creates a new network region in Skype for Business Server, associating it with a central site. The `New-CsNetworkRegion` cmdlet requires the `Identity` (name of the region) and `CentralSite` (site ID of the central site) parameters. The `Description` parameter is optional.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-network.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkRegion -Identity <String> -CentralSite <String>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkRegion -Identity NorthAmerica -CentralSite CHICAGO -Description \"All North America Locations\"\n```\n\n----------------------------------------\n\nTITLE: Disable Skype UI on First Launch - Registry\nDESCRIPTION: This registry setting disables the Skype for Business UI on the first launch, forcing the Lync UI to appear initially. This should be done *before* the user launches Skype for Business for the first time. The 'EnableSkypeUI' value is created as a Binary value under the `HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\Lync` key and set to 00 00 00 00.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_6\n\nLANGUAGE: registry\nCODE:\n```\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\Lync]\n\"CanSharePptInCollab\"=dword:00000001\n\"CanShareOneNoteInCollab\"=dword:00000001\n\"CanAppShareInCollab\"=dword:00000001\n\"EnableSkypeUI\"=hex:00,00,00,00\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Pool Data - PowerShell\nDESCRIPTION: These PowerShell cmdlets synchronize user and conference data between the paired Front End pools. Invoke-CsBackupServiceSync initiates the synchronization, and Get-CsBackupServiceStatus allows checking the synchronization status to ensure it is in a steady state. Replace <Pool1 FQDN> and <Pool2 FQDN> with the Fully Qualified Domain Names of your pools.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/front-end-pools-for-disaster-recovery.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsBackupServiceSync -PoolFqdn <Pool1 FQDN>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsBackupServiceSync -PoolFqdn <Pool2 FQDN>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsBackupServiceStatus -PoolFqdn <Pool1 FQDN>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsBackupServiceStatus -PoolFqdn <Pool2 FQDN>\n```\n\n----------------------------------------\n\nTITLE: PowerShell Cmdlets for LIS Database Import\nDESCRIPTION: These PowerShell cmdlets are used to import the generated .CSV files into the Location Information Service (LIS) database.  Each cmdlet corresponds to a specific type of LIS data: subnet, switch, port, and wireless access point. These cmdlets allow administrators to populate the LIS database with the configuration data generated by the Stress and Performance Tool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/stress-and-performance-tool/using-the-tool.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLisSubnet\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLisSwitch\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLisPort\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWirelessAccessPoint\n```\n\n----------------------------------------\n\nTITLE: Installing RGS Database on Paired Pools - PowerShell\nDESCRIPTION: These commands install the RGS database on both members of the paired pool. This step is necessary for RGS data replication to function correctly. Replace `<Pool1 BackendDatabase FQDN>` and `<Pool2 BackendDatabase FQDN>` with the actual FQDNs of the backend databases for each pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-CsDatabase -ConfiguredDatabases -SqlServerFqdn <Pool1 BackendDatabase FQDN>\nInstall-CsDatabase -ConfiguredDatabases -SqlServerFqdn <Pool2 BackendDatabase FQDN>\n```\n\n----------------------------------------\n\nTITLE: Create Network Region Link using PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new network region link with a specified ID, linking two network regions and applying a bandwidth policy profile. It requires the Skype for Business Server Management Shell and proper permissions. The cmdlet takes parameters such as NetworkRegionLinkID, NetworkRegionID1, NetworkRegionID2, and BWPolicyProfileID to define the link and its bandwidth constraints.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-network-region-links.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkRegionLink -NetworkRegionLinkID EMEA-APAC-LINK -NetworkRegionID1 EMEA -NetworkRegionID2 APAC -BWPolicyProfileID 25Mb_Link\n```\n\n----------------------------------------\n\nTITLE: Creating a QoE configuration with multiple properties - PowerShell\nDESCRIPTION: This PowerShell command creates a new collection of QoE configuration settings applied to the Redmond site.  It configures the retention period for QoE data to 30 days and sets the purge time to 3:00 AM using the KeepQoEDataForDays and PurgeHourOfDay parameters, respectively. This demonstrates how to set multiple configuration properties at once.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/create-qoe-configuration-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsQoEConfiguration -Identity \"site:Redmond\" -KeepQoEDataForDays 30 -PurgeHourOfDay 3\n```\n\n----------------------------------------\n\nTITLE: Setting Skype User Proxy Registry - Windows\nDESCRIPTION: This snippet shows how to configure the Skype User proxy settings in the Windows Registry for Teams Rooms. It involves loading the NTUSER.dat hive, modifying the MigrateProxy, ProxyEnable, and ProxyServer values, and then unloading the hive. Replace xx.xx.xx.xx:8080 with the correct proxy server IP/host and port.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-prep.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n[HKEY_USERS\\Skype\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings]\n\"MigrateProxy\"=dword:00000001\n\"ProxyEnable\"=dword:00000001\n\"ProxyServer\"=\"xx.xx.xx.xx:8080\"\n```\n\n----------------------------------------\n\nTITLE: Listing Users with Assigned Phone Numbers with Get-CsOnlineUser (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a list of all users with an assigned telephone number. It uses `Get-CsOnlineUser` to get all users, filters using `Where-Object` to only include users where the `LineURI` property is not null, and then formats the output to show the display name, user principal name, and `LineURI`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/see-a-list-of-phone-numbers-in-your-organization.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser | Where-Object  { $_.LineURI -notlike $null } | ft DisplayName,UserPrincipalName,LineURI\n```\n\n----------------------------------------\n\nTITLE: Disable Teams Autostart (32-bit) using MSI\nDESCRIPTION: This command disables the automatic start of Microsoft Teams after installation using the MSI installer for the 32-bit version. The `OPTIONS=\"noAutoStart=true\"` parameter prevents Teams from launching automatically upon user login after installation. Requires elevated permissions to run correctly. The `ALLUSERS=1` parameter installs Teams Machine-Wide Installer for all users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/msi-deployment.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmsiexec /i Teams_windows.msi OPTIONS=\"noAutoStart=true\" ALLUSERS=1\n```\n\n----------------------------------------\n\nTITLE: UWF Exclusions for SlimCore MSIX Provisioning\nDESCRIPTION: This code snippet provides the Unified Write Filter (UWF) exclusions that should be created on thin clients to allow SlimCore MSIX packages to be provisioned. These exclusions ensure that the necessary directories for installing and updating SlimCore are not protected by the UWF.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_10\n\nLANGUAGE: batch\nCODE:\n```\nuwfmgr.exe file Add-Exclusion \"C:\\Program Files\\WindowsApps\"\nuwfmgr.exe file Add-Exclusion \"C:\\Users\\User\\AppData\\Local\\Packages\"\nuwfmgr.exe file Add-Exclusion \"C:\\Users\\User\\AppData\\Local\\Microsoft\\WindowsApps\"\nuwfmgr.exe file Add-Exclusion \"C:\\Users\\User\\AppData\\Local\\Microsoft\\TeamsVDI\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Call Group - PowerShell\nDESCRIPTION: This PowerShell example shows how to update an existing call group by adding and removing members. It retrieves the current call group settings using `Get-CsUserCallingSettings`, modifies the member list, and then applies the changes using `Set-CsUserCallingSettings`. This approach ensures that other settings related to the call group are preserved.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-sharing-and-group-call-pickup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ucs = Get-CsUserCallingSettings -Identity user1@contoso.com\n$cgt = {$ucs.CallGroupTargets}.Invoke()\n$cgt.Add(\"sip:user5@contoso.com\")\n$cgt.Remove(\"sip:user6@contoso.com\")\nSet-CsUserCallingSettings -Identity user1@contoso.com -CallGroupOrder $ucs.CallGroupOrder -CallGroupTargets $cgt\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific Web Service Configuration - PowerShell\nDESCRIPTION: This PowerShell command removes the Web Service configuration settings applied to a specific site (e.g., Redmond).  It uses the `Remove-CsWebServiceConfiguration` cmdlet with the `-Identity` parameter to specify the site to remove the settings from. This command requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/web-service-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsWebServiceConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Modifying a Teleconference Policy - PowerShell\nDESCRIPTION: This PowerShell snippet modifies an existing Teams Room Video Teleconferencing policy, specifically disabling external inbound calling. It requires the Teams PowerShell module to be installed and connected. Replace `TurnOnSIPH323` with the name of the policy you wish to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/meetings-with-sip-h323-devices.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsRoomVideoTeleConferencingPolicy -Identity `TurnOnSIPH323` -ReceiveExternalCalls `Disabled`\n```\n\n----------------------------------------\n\nTITLE: Getting RBAC roles with Test-CsSetupPermission access - PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of all RBAC roles that have permission to run the Test-CsSetupPermission cmdlet. It's used to identify which roles can be used for testing setup permissions. The command uses Get-CsAdminRole to retrieve all RBAC roles, then filters the results to only include roles where the Cmdlets property matches \"Test-CsSetupPermission\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/test-admin-topology-rights.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Test-CsSetupPermission\"}\n```\n\n----------------------------------------\n\nTITLE: Creating LYNCLOCAL SQL Instance - PowerShell\nDESCRIPTION: This PowerShell command creates the LYNCLOCAL SQL instance. Similar to the RTCLOCAL instance creation, it uses SQLEXPR_x64.exe with parameters to configure the instance.  It is essential that this command finishes executing before proceeding to the next step.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/disable-tls-1.0-1.1.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSQLEXPR_x64.exe /Q /IACCEPTSQLSERVERLICENSETERMS /UPDATEENABLED=0 /HIDECONSOLE /ACTION=Install /FEATURES=SQLEngine,Tools /INSTANCENAME=LYNCLOCAL /TCPENABLED=1 /SQLSVCACCOUNT=\"NT AUTHORITY\\NetworkService\" /SQLSYSADMINACCOUNTS=\"Builtin\\Administrators\" /BROWSERSVCSTARTUPTYPE=\"Automatic\" /AGTSVCACCOUNT=\"NTAUTHORITY\\NetworkService\" /SQLSVCSTARTUPTYPE=Automatic\n```\n\n----------------------------------------\n\nTITLE: Modifying Agent Configuration - MaxProcessMemoryMB\nDESCRIPTION: This code snippet shows how to modify the Agent configuration file to remove the upper memory limit by changing the value of 'MaxProcessMemoryMB' to '0'. This is useful when the Agent fails to start due to issues with the Windows Job Object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/troubleshoot.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<setting name=\"MaxProcessMemoryMB\" serializeAs=\"String\"> <value>300</value> </setting>\n```\n\n----------------------------------------\n\nTITLE: Get Database Mirror State - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet gets the database mirror state for the Central Management database. It helps determine which Back-End Server in the backup pool runs the principal instance of the CMS.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsDatabaseMirrorState -DatabaseType Centralmgmt -PoolFqdn <Backup_Pool Fqdn>\n```\n\n----------------------------------------\n\nTITLE: Adding RecordingForTownhall, RecordingForWebinar\nDESCRIPTION: This snippet adds `RecordingForTownhall`, `RecordingForWebinar`, `TranscriptionForTownhall`, `TranscriptionForWebinar` parameters to `[New|Set]-CsTeamsEventsPolicy`. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_35\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsEventsPolicy\n```\n\n----------------------------------------\n\nTITLE: Disable Teams Autostart (64-bit) using MSI\nDESCRIPTION: This command disables the automatic start of Microsoft Teams after installation using the MSI installer for the 64-bit version. The `OPTIONS=\"noAutoStart=true\"` parameter prevents Teams from launching automatically upon user login after installation. Requires elevated permissions to run correctly. The `ALLUSERS=1` parameter installs Teams Machine-Wide Installer for all users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/msi-deployment.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmsiexec /i Teams_windows_x64.msi OPTIONS=\"noAutoStart=true\" ALLUSERS=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation with Skype for Business Online Resources (PowerShell)\nDESCRIPTION: This PowerShell cmdlet configures federation with Skype for Business Online resources by creating a new hosting provider. It sets properties such as the proxy FQDN, verification level, and enabling shared address space and hosting of OCS users. This allows on-premises Skype for Business users to communicate with Skype for Business Online users for Skype Meeting Broadcast.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/configure-skype-meeting-broadcast.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsHostingProvider -Identity LyncOnlineResources -ProxyFqdn sipfed.resources.lync.com -VerificationLevel AlwaysVerifiable -Enabled $True -EnabledSharedAddressSpace $True -HostsOCSUsers $True -IsLocal $False\n```\n\n----------------------------------------\n\nTITLE: Disable Auto-Accept for QR Code Meeting Invites (Windows)\nDESCRIPTION: This XML snippet shows how to disable the automatic acceptance of meeting invitations when joining via QR code on Teams Rooms on Windows. Setting QRCodeAutoAcceptProximateMeetingInvitations to 'false' forces users to manually accept the meeting invitation on the room console. This configuration enhances meeting security.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/teams-rooms-qr-codes.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<QRCodeAutoAcceptProximateMeetingInvitations>false</QRCodeAutoAcceptProximateMeetingInvitations>\n```\n\n----------------------------------------\n\nTITLE: Dropping Log Shipping SQL Command\nDESCRIPTION: This SQL command is used to remove log shipping from the Persistent Chat Server backup database (mgc). It is executed on the database instance where the backup mgc database is located.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/high-availability-and-disaster-recovery.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nexec sp_delete_log_shipping_secondary_database mgc\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by String Properties with Comparison Operators in Get-CsOnlineUser\nDESCRIPTION: This snippet illustrates how to use greater than (`-gt`) or less than (`-lt`) operators to filter users based on a string property, such as `UserPrincipalName`. This allows you to find users whose User Principal Name is alphabetically greater or less than a specified value.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_79\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter {UserPrincipalName -gt/-lt \"abc\"}\n```\n\n----------------------------------------\n\nTITLE: Converting MsDiagHeader to text in SQL\nDESCRIPTION: This SQL statement converts the binary data in the MsDiagHeader column to a readable text format. The MsDiagHeader column stores more information about the error, which can be useful for troubleshooting and analysis. This conversion allows for easier examination of the error details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/call-detail-recording-cdr-database-schema/errorreport.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncast(cast(Detail as varbinary(max)) as varchar(max))\n```\n\n----------------------------------------\n\nTITLE: Updating Statistics Manager with a Single Server\nDESCRIPTION: This PowerShell command allows importing a single server into Statistics Manager. It requires the 'HostName', 'SiteName', 'PoolName', and 'Roles' parameters to be specified. This is useful for monitoring servers not included in the Skype for Business Server topology.  This must be run from the Listener installation directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\Update-StatsManServerInfo.ps1 -HostName <hostname> -SiteName <name of site> -PoolName <poolName> -Roles <role1>[,<role2>,<roleN>]\n```\n\n----------------------------------------\n\nTITLE: Create Voice Route - PowerShell\nDESCRIPTION: This PowerShell command creates a new voice route named 'Redmond 1'. It defines a number pattern (regex) to match phone numbers starting with +1(425|206) followed by 7 digits. It specifies two online PSTN gateways (sbc1.contoso.biz and sbc2.contoso.biz), sets the priority to 1, and associates the voice route with the 'US and Canada' PSTN usage. This cmdlet creates the voice route that determines the PSTN gateway to use for routing calls based on the dialed phone number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-on-network.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoute -Identity \"Redmond 1\" -NumberPattern \"^\\+1(425|206)(\\d{7})$\" -OnlinePstnGatewayList sbc1.contoso.biz, sbc2.contoso.biz -Priority 1 -OnlinePstnUsages \"US and Canada\"\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Page with CQD Data Query\nDESCRIPTION: This HTML snippet creates a webpage that uses JavaScript and jQuery to query the CQD Data Service and display results in a table. The JavaScript code defines a function to send an AJAX request to the Data Service with a specified query. The success callback populates table cells with the retrieved data. The page includes HTML elements for displaying the data and error messages. It relies on jQuery library.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n</head>\n<body>\n    <script src=\"OpenSourceSoftware/Scripts/jquery-2.1.1.js\"></script>\n\n    <script>\n        $($.fn.freeFormReport = function (queries, urlApi, presentation) {\n\n            var query = {\n                Dimensions: [{ DataModelName: '[StartDate].[Month]' }],\n                Filters: [{\n                    DataModelName: '[StartDate].[Month]',\n                    Value: '[2015-02-01T00:00:00]',\n                    Operand: 0\n                }],\n                Measurements:\n                    [{ DataModelName: '[Measures].[Audio Good Streams JPDR Count]' },\n                     { DataModelName: '[Measures].[Audio Poor Streams JPDR Count]' },]\n            };            \n\n            $.ajax({\n                url: 'http://localhost/QoEDataService/RunQuery',\n                data: JSON.stringify(query),\n                type: 'POST',\n                async: true,\n                contentType: 'application/json;charset=utf-8',\n                success: function (data) {\n                    //This is the jQuery syntax for document.GetElementById()\n                    $('#AudioGoodStreamsJPDRCount').html(data.DataResult[0][1]);\n                    $('#AudioPoorStreamsJPDRCount').html(data.DataResult[0][2]);\n                }\n                error: function (error) {\n                    alert('Error getting data, check that the data service is running and that the URL is correct.');\n           }\n\n            });\n        });\n    </script>\n    <table border=\"1\">\n        <tr>\n            <td></td>\n            <td><div>Audio Good Streams JPDR Count</div></td>\n            <td><div>Audio Poor Streams JPDR Count</div></td>\n        </tr>\n        <tr>\n            <td>February</td>\n            <td><div id=\"AudioGoodStreamsJPDRCount\"></div></td>\n            <td><div id=\"AudioPoorStreamsJPDRCount\"></div></td>\n        </tr>\n    </table>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enabling LBR for Gateways with PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to enable Location-Based Routing (LBR) for PSTN gateways using the `Set-CSOnlinePSTNGateway` cmdlet. This ensures that routing restrictions are enforced for calls routed through these gateways. The `GatewaySiteLbrEnabled` parameter enables LBR, and `GatewaySiteID` associates the gateway with a specific network site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-enable.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSOnlinePSTNGateway -Identity <gateway configuration ID> -GatewaySiteLbrEnabled $true -GatewaySiteID <site ID>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSOnlinePSTNGateway -Identity sbc.contoso.com  -GatewaySiteLbrEnabled $true –GatewaySiteID \"Delhi\"\nSet-CSOnlinePSTNGateway -Identity sbc1.contoso.com  -GatewaySiteLbrEnabled $true -GatewaySiteID \"Hyderabad\"\n```\n\n----------------------------------------\n\nTITLE: Executing LyncPerfTool.exe with XML file - Console\nDESCRIPTION: This command shows how to directly run the LyncPerfTool.exe with a specified XML configuration file.  The `/file` parameter indicates the path to the configuration file.  It assumes the LyncPerfTool.exe is in the current directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/stress-and-performance-tool/using-the-tool.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nLyncPerfTool.exe /file:IM_client0.xml\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Client Version Configurations - PowerShell\nDESCRIPTION: This cmdlet enables or disables a specific client version configuration. The Identity parameter specifies the configuration to modify, and the Enabled parameter sets its status.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientVersionConfiguration -Identity site:Redmond -Enabled $False\n```\n\n----------------------------------------\n\nTITLE: Assign Dial Plan Example - PowerShell\nDESCRIPTION: This PowerShell example shows how to assign the dial plan \"DialPlanJapan\" to the user \"Bob Kelly\" in Skype for Business Server. This requires the CsUserAdministrator or CsAdministrator role. This is a specific use case of the general assignment command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-users-for-enterprise-voice.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsDialPlan -Identity \"Bob Kelly\" -PolicyName DialPlanJapan\n```\n\n----------------------------------------\n\nTITLE: Converting varbinary data to text format in SQL\nDESCRIPTION: This code snippet demonstrates how to convert varbinary data stored in the RequestType or ContentType columns of the ErrorDef table to a readable text format using SQL's `cast` function. This allows for easier analysis of the request and content types associated with errors.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/call-detail-recording-cdr-database-schema/errordef.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncast(cast(RequestType as varbinary(max)) as varchar(max))\n```\n\nLANGUAGE: sql\nCODE:\n```\ncast(cast(ContentType as varbinary(max)) as varchar(max))\n```\n\n----------------------------------------\n\nTITLE: CLS Logging Search with Start and End Time on Computer - PowerShell\nDESCRIPTION: This command searches CLS logs within a specific time range on a specified computer.  The `-StartTime` and `-EndTime` parameters are used to define the time window, while `-Computers` specifies the FQDN of the target computer.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Computers \"edge01.contoso.net\" -StartTime \"11/20/2012 1:00:00 PM\" -EndTime \"11/20/2012 2:45:00 PM\" -OutputFilePath \"C:\\Logfiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Queue Identity in PowerShell\nDESCRIPTION: This snippet shows how to retrieve the identity of a queue using the `Get-CsRgsQueue` cmdlet in PowerShell. The `-Name` parameter specifies the name of the queue. The `.Identity` property retrieves the unique identifier for the queue, which is then stored in the `$qid` variable for subsequent use in configuring call actions or workflows.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$qid = (Get-CsRgsQueue -Name \"Help Desk\").Identity\n```\n\n----------------------------------------\n\nTITLE: Validating Pool Names in PowerShell\nDESCRIPTION: This snippet validates that the entered pool names do not contain the domain name. If a pool name contains the domain, an error is written, the application group is removed, and the script exits. It iterates through the pool list and performs a regex match.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nforeach($poolName in $poolList)\n{\n    if ($poolName -match \"^(\\w+).$domain$\" -or `\n        (![string]::IsNullOrWhiteSpace($extDomain) -and `\n         $poolName -match \"^(\\w+).$extDomain$\"))\n    {\n        Write-Error \"Enter pool name $poolName without domain name.\"\n        Remove-AdfsApplicationGroup -TargetApplicationGroupIdentifier $groupName\n        exit\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Exchange Online calendar transport rule using PowerShell\nDESCRIPTION: This PowerShell script creates two transport rules in Exchange Online to automatically accept calendar invites and move them to the deleted items folder, effectively enabling direct-to-calendar functionality. It requires the ExchangeOnlineManagement module and administrator privileges.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/connect-teams-essentials-to-email.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-ExchangeOnline\nNew-TransportRule -Name \"Direct to Calendar\" -MessageTypeMatches Calendaring -SetHeaderName \"X-MS-Exchange-Organization-CalendarBooking-Response\" -SetHeaderValue Tentative\nNew-TransportRule -Name \"Direct to Calendar triage action\" -MessageTypeMatches Calendaring -SetHeaderName \"X-MS-Exchange-Organization-CalendarBooking-TriageAction\" -SetHeaderValue MoveToDeletedItems\n```\n\n----------------------------------------\n\nTITLE: Basic CLS Logging Search with Output File - PowerShell\nDESCRIPTION: This command initiates a basic search using the Centralized Logging Service (CLS) and saves the results to the specified file path. It uses the Search-CsClsLogging cmdlet with the -OutputFilePath parameter to define the path and filename for the output.  Ensure the directory exists and the user has the correct permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -OutputFilePath \"C:\\LogFiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Set eCDN Provider to Kollective - PowerShell\nDESCRIPTION: This PowerShell command configures Kollective as the third-party video distribution provider for Teams meetings. It utilizes the `Set-CsTeamsMeetingBroadcastConfiguration` cmdlet to set `AllowSdnProviderForBroadcastMeeting` to `$True`, `SdnProviderName` to `kollective`, and includes the `SdnApiTemplateUrl` and `SdnApiToken` parameters with the values provided by Kollective.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/streaming-ecdn-enterprise-content-delivery-network.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastConfiguration -AllowSdnProviderForBroadcastMeeting $True -SdnProviderName kollective -SdnApiTemplateUrl \"{API template URL provided by Kollective}\" -SdnApiToken {API token GUID provided by Kollective}\n```\n\n----------------------------------------\n\nTITLE: Remove On-Premises Line URI (Skype for Business PowerShell)\nDESCRIPTION: This PowerShell command removes the on-premises LineURI from a user object in Skype for Business Server. It's used when migrating Direct Routing numbers assigned on-premises to Teams Phone Mobile. It requires Skype for Business Server PowerShell module and connectivity to the on-premises Skype for Business Server environment.  The parameter <user> needs to be replaced with the actual user identifier.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure-numbers.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUser -Identity <user> -LineURI $null\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Teleconference Policy - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new global Teams Room Video Teleconferencing policy, enabling SIP and H.323 dialing for all Teams Rooms resource accounts. It requires the Teams PowerShell module to be installed and connected. The `AreaCode` parameter must be provided by the CVI provider. Replace the placeholder GUID with the actual GUID provided by your CVI provider.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/meetings-with-sip-h323-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsRoomVideoTeleConferencingPolicy -Identity Global -Enabled $true -AreaCode \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\" -ReceiveExternalCalls Enabled -ReceiveInternalCalls Enabled\n```\n\n----------------------------------------\n\nTITLE: Dialing Feature Codes from SIP Devices\nDESCRIPTION: This snippet outlines the feature codes used to interact with the Microsoft Teams system from a SIP device. These codes enable functionality such as setting Do Not Disturb (DND) status, resetting DND status, and validating devices provisioned through Teams Admin Center.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-plan.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n*30* (Set DND From SIP Device)\n*31* (Reset Teams DND Status from SIP Device)\n*32* - Reset Call Forwarding Status\n*33* (Set \"Call Forwarded To\" Number)\n*34* (Set \"Forward on Timeout\")\n*35* (Setup Simultaneous Ring)\n*55* - OTP validation from devices provisioned through Teams Admin Center\n*99* - Check voicemail\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Install-CsMirrorDatabase Cmdlet\nDESCRIPTION: This example shows how to use the Install-CsMirrorDatabase cmdlet with the ConfiguredDatabases, FileShare, SqlServerFqdn, DropExistingDatabasesOnMirror, and Verbose parameters.  It sets up mirroring for all configured databases using the specified file share and SQL Server. The example includes dropping existing databases on the mirror.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/sql-mirroring-for-high-availability.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-CsMirrorDatabase -ConfiguredDatabases -FileShare \\\\PRIMARYBE\\csdatabackup -SqlServerFqdn primaryBE.contoso.com -DropExistingDatabasesOnMirror -Verbose\n```\n\n----------------------------------------\n\nTITLE: Configure SLA Missed Call Option - PowerShell\nDESCRIPTION: Configures the action taken when a call to a Shared Line Appearance (SLA) group is missed. Options include forwarding to a target user or phone number, playing a busy signal, or disconnecting the call. If MissedCallOption is set to Forward, the MissedCallForwardTarget parameter is required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-shared-line-appearance.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsSlaConfiguration -Identity <IdentityOfGroup> -MissedCallOption <Option> -MissedCallForwardTarget <TargetUserOrPhoneNumber> -BusyOption <Option> -MaxNumberofCalls <#> -Target [Target]\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsSlaConfiguration -Identity SLAGroup1 -MissedCallOption Forward -MissedCallForwardTarget sip:sla_forward_number@contoso.com -BusyOption Forward -MaxNumberOfCalls 2 -Target sip:sla_forward_number@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Install Watcher Node with Negotiate Authentication - PowerShell\nDESCRIPTION: This PowerShell command installs the Watcher Node Configuration Files using Watchernode.msi. The `Authentication=Negotiate` parameter specifies that the Negotiate authentication mode should be used, which is required when the watcher node cannot be set up as a trusted application pool.  Administrators need to manage test user passwords on the watcher node in this mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nc:\\Tools\\Watchernode.msi Authentication=Negotiate\n```\n\n----------------------------------------\n\nTITLE: Get Audio Conferencing Bridge ID and Assign Number (PowerShell)\nDESCRIPTION: This PowerShell example retrieves the ID of the Audio Conferencing Bridge using `Get-CsOnlineDialInConferencingBridge` and then assigns a service phone number (14257048060) to that bridge. This two-step process ensures that the phone number is correctly linked to the conferencing service. Requires Teams PowerShell module, appropriate permissions, and an existing Audio Conferencing Bridge.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-with-direct-routing-for-gcch-and-dod.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$b= Get-CsOnlineDialInConferencingBridge\nRegister-csOnlineDialInConferencingServiceNumber -identity 14257048060 -BridgeId $b.identity\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate My Call Display Percentage using PowerShell\nDESCRIPTION: This PowerShell command configures the Rate My Call feature's display percentage and enables custom user feedback. It requires the Skype for Business Server PowerShell module to be installed.  The -Identity parameter specifies the client policy to modify. RateMyCallDisplayPercentage sets the percentage of calls that will prompt the user for feedback, and RateMyCallAllowCustomUserFeedback enables or disables the custom feedback text box.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/rate-my-call.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSClientPolicy -Identity <PolicyIdentity> -RateMyCallDisplayPercentage 80 -RateMyCallAllowCustomUserFeedback $true\n```\n\n----------------------------------------\n\nTITLE: Creating a bulk sign-in request for SIP devices in PowerShell\nDESCRIPTION: This command creates a new bulk sign-in request for SIP devices using the specified CSV file containing device details and the SIP gateway provisioning region. `DeviceDetailsFilePath` specifies the path to the CSV, and `Region` specifies the geographical region (APAC, EMEA, NOAM). The command returns a batch response which is stored in `$newBatchResponse`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-configure.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$newBatchResponse = New-CsSdgBulkSignInRequest  -DeviceDetailsFilePath  .\\Example.csv  -Region APAC\n```\n\n----------------------------------------\n\nTITLE: Allow Public Webinar Attendance via PowerShell\nDESCRIPTION: This PowerShell script allows anyone to attend webinars created by users with the specified policy by setting the `-EventAccessType` parameter to `Everyone` in the `Set-CsTeamsEventsPolicy` cmdlet. The `<policy name>` placeholder should be replaced with the actual name of the Teams events policy you want to modify. This command requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-webinars.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -EventAccessType Everyone\n```\n\n----------------------------------------\n\nTITLE: Add a Normalization Rule to a Dial Plan (InMemory)\nDESCRIPTION: This script adds a new normalization rule to an existing tenant dial plan named RedmondDialPlan. The normalization rule is first created in memory using New-CsVoiceNormalizationRule and then added to the dial plan using Set-CsTenantDialPlan. The `-InMemory` parameter creates the rule without immediately persisting it.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$b1=New-CsVoiceNormalizationRule -Identity Global/NR4 -InMemory\nSet-CsTenantDialPlan -Identity RedmondDialPlan -NormalizationRules @{add=$b1}\n(Get-CsTenantDialPlan -Identity RedmondDialPlan).NormalizationRules\n$b2=New-CsVoiceNormalizationRule -Identity Global/NR4 -InMemory\nSet-CsTenantDialPlan -Identity RedmondDialPlan -NormalizationRules @{remove=$b2}\n```\n\n----------------------------------------\n\nTITLE: Specify QoE Retention for Multiple Locations - PowerShell\nDESCRIPTION: This PowerShell command configures QoE retention for all QoE configuration settings within an organization. It uses `Get-CsQoEConfiguration` to retrieve all QoE configuration objects and pipes them to `Set-CsQoEConfiguration` to enable purging and set the retention period to 20 days for all locations. The cmdlet requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/modify-qoe-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsQoEConfiguration | Set-CsQoEConfiguration-EnablePurging -KeepQoEDataForDays 20\n```\n\n----------------------------------------\n\nTITLE: Enable Online User (PowerShell)\nDESCRIPTION: This PowerShell command modifies the user account with the Identity exampleuser@contoso.com to enable Enterprise Voice, the Microsoft implementation of VoIP, with enabled voice mail and assigns the number +14255000000 to this user. This command should be run for each Teams user (excluding ATA device users) in the company tenant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-analog-devices.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Set-CsUser -Identity \"exampleuser@contoso.com\" -EnterpriseVoiceEnabled $True -HostedVoiceMail $True -OnPremLineUri \"tel:+14255000000\"\n```\n\n----------------------------------------\n\nTITLE: Purging CDR Database Records with Different Retention - PowerShell\nDESCRIPTION: This PowerShell command demonstrates purging call detail records older than 10 days while retaining all diagnostic data records. This is achieved by setting `PurgeCallDetailDataOlderThanDays` to 10 and `PurgeDiagnosticDataOlderThanDays` to 0. The `Identity` parameter specifies the target database.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/purgecall-detail-recording-and-qoe.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsCdrDatabasePurge -Identity service:MonitoringDatabase:atl-sql-001.litwareinc.com -PurgeCallDetailDataOlderThanDays 10 -PurgeDiagnosticDataOlderThanDays 0\n```\n\n----------------------------------------\n\nTITLE: Blocking Channel Meeting Recording Downloads using PowerShell\nDESCRIPTION: This PowerShell snippet uses the `Set-CsTeamsMeetingPolicy` cmdlet to control whether channel members can download meeting recordings.  By setting the `-ChannelRecordingDownload` parameter, administrators can prevent users from downloading recordings while still allowing them to view the content. This is useful for controlling the distribution of sensitive meeting content.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-meeting-recording-options.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsTeamsMeetingPolicy](/powershell/module/teams/set-csteamsmeetingpolicy)\n```\n\n----------------------------------------\n\nTITLE: Adding ADFS Native Client Application in PowerShell\nDESCRIPTION: This snippet adds the ADFS native client application using `Add-AdfsNativeClientApplication`. It takes the application group identifier, application name, client identifier, and redirect URIs as parameters.  A try-catch block handles potential errors during the application creation. If an error occurs, the application group is removed and the process is aborted.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry\n{\n    Add-AdfsNativeClientApplication -ApplicationGroupIdentifier $groupName -Name $appName -Identifier $clientIdentifier -RedirectUri $redirectUrls\n}\ncatch\n{\n    Write-Error \"`nUnable to create Admin Control Panel Native Client App. Deleting $groupName. Aborting process.\"\n    Remove-AdfsApplicationGroup -TargetApplicationGroupIdentifier $groupName\n    throw\n    exit\n}\n```\n\n----------------------------------------\n\nTITLE: Set Call Forward/No Answer Destination with SEFAUtil\nDESCRIPTION: This command sets the call forward/no answer destination and the ring delay for a user using the SEFAUtil tool.  It enables call forwarding with no answer (`/enablefwdnoanswer`), sets the call answer wait time (`/callanswerwaittime`), and sets the forwarding destination (`/setfwddestination`). The Skype for Business server address is specified using the /server switch.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /enablefwdnoanswer /callanswerwaittime:30 /setfwddestination:+14255550126@contoso.com;user=phone\n```\n\n----------------------------------------\n\nTITLE: Creating Subkey for Central Discovery Candidate - PowerShell\nDESCRIPTION: This PowerShell code snippet creates a new subkey 'CentralDiscoveryCandidate' under the 'Health' registry key, which is required for identifying the central discovery candidate server in System Center Operations Manager. It's executed on the designated central discovery server. An error may occur if the key already exists, which can be ignored.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/configure-scom-monitoring.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Item -Path \"HKLM:\\Software\\Microsoft\\Real-Time Communications\\Health\\CentralDiscoveryCandidate\"\n```\n\n----------------------------------------\n\nTITLE: Test UCWA Conference - PowerShell\nDESCRIPTION: This PowerShell command tests the ability of two users to create, join, and communicate in a conference using UCWA. It requires the FQDN of the Front End pool, authentication type, SIP addresses and credentials of both the organizer and participant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nTest-CsUcwaConference -TargetFqdn <FQDN of Front End pool> -Authentication <TrustedServer | Negotiate | ClientCertificate | LiveID> -OrganizerSipAddress sip:<SIP address of test user 1> -OrganizerCredential <test user 1 credentials> -ParticipantSipAddress sip:<SIP address of test user 2> -ParticipantCredential <test user 2 credentials> -v\n```\n\n----------------------------------------\n\nTITLE: Connect SBC to Direct Routing (PowerShell)\nDESCRIPTION: This PowerShell command configures the connection to the SBC (Session Border Controller) with the specified FQDN, signaling port, media bypass mode, and call history/PAI forwarding settings. It creates a new online PSTN gateway to enable communication between Teams and the PSTN via the SBC.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-analog-devices.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> New-CsOnlinePSTNGateway -FQDN sbc.contoso.com -SIPSignalingPort 5068 -ForwardCallHistory $true -ForwardPAI $true -MediaBypass $true -Enabled $true \n```\n\n----------------------------------------\n\nTITLE: Resetting Pool State After Config Change - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to reset the state of a Skype for Business Front End pool after a configuration change (e.g., adding/removing servers) when the entire pool has been down. It ensures that the pool functions correctly after the new topology is published. It requires the Skype for Business Server PowerShell module and the `-PoolFQDN <PoolFQDN>` parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/high-availability-and-disaster-recovery/high-availability.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-CsPoolRegistrarState -PoolFQDN <PoolFQDN> -ResetType ServiceReset\n```\n\n----------------------------------------\n\nTITLE: Configure Test User Credentials for Negotiate Authentication - PowerShell\nDESCRIPTION: This PowerShell snippet uses the `Set-CsTestUserCredential` cmdlet to configure test user accounts for use with synthetic transactions when using the Negotiate authentication method. It requires the SIP address, username, and password for each test user. It enables the watcher node to use the specified test users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTestUserCredential -SipAddress \"sip:watcher1@litwareinc.com\" -UserName \"litwareinc\\watcher1\" -Password \"P@ssw0rd\"\nSet-CsTestUserCredential -SipAddress \"sip:watcher2@litwareinc.com\" -UserName \"litwareinc\\watcher2\" -Password \"P@ssw0rd\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-start for UWP Apps via Registry - Windows\nDESCRIPTION: This registry snippet disables the auto-start option for UWP apps, including Microsoft Teams.  This setting can prevent users from enabling auto-start through the Settings app. Requires administrator privileges to modify the registry.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_8\n\nLANGUAGE: Registry editor\nCODE:\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System] \n\"EnableFullTrustStartupTasks\"=dword:00000000\n\"EnableUwpStartupTasks\"=dword:00000000\n\"SupportFullTrustStartupTasks\"=dword:00000000\n\"SupportUwpStartupTasks\"=dword:00000000\n```\n\n----------------------------------------\n\nTITLE: Create a policy to archive internal and external communication\nDESCRIPTION: This PowerShell command creates a new archiving policy for the Redmond site that enables archiving of both internal and external instant messaging sessions. The `New-CsArchivingPolicy` cmdlet is used with the `-Identity` parameter to specify the site, the `-ArchiveInternal` parameter set to `$True` to enable internal archiving, and the `-ArchiveExternal` parameter set to `$True` to enable external archiving.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/create-a-new-policy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsArchivingPolicy -Identity \"site:Redmond\" -ArchiveInternal $True -ArchiveExternal $True\n```\n\n----------------------------------------\n\nTITLE: Message XML Structure\nDESCRIPTION: This XML snippet displays the basic structure of a Message element, focusing on its attributes (type, content, id) and nested elements (Sender, DateTimeUTC). It demonstrates the key components of a logged message within the Skype for Business Compliance Service output.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Message type=\"JOIN\" content=\"\" id=\"0\">\n  <Sender UserName=\"TestUser kazuto\" id=\"10\" email=\"kazuto@litwareinc.com\" internal=\"true\" uri=\"kazuto@litwareinc.com\" /> \n  <DateTimeUTC since1970=\"1206211842612\" string=\"2008-03-22T18:50:42.6127374Z\" long=\"633418086426127374\" /> \n</Message>\n```\n\n----------------------------------------\n\nTITLE: Set Music on Hold from File - PowerShell\nDESCRIPTION: This PowerShell example shows how to read a music file (soothingmusic.wma) into a byte array and then set it as the music-on-hold file for the Call Park service running on a specific application server. It uses the System.IO.File class to read the file.  The Service parameter is the ApplicationServer identity where the call park service resides.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/customize-call-park-music-on-hold.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$a = [System.IO.File]::ReadAllBytes('C:\\MoHFiles\\soothingmusic.wma')\n\nSet-CsCallParkServiceMusicOnHoldFile -Service Redmond1-applicationserver-1 -Content $a\n```\n\n----------------------------------------\n\nTITLE: Creating After Hours Schedules\nDESCRIPTION: These PowerShell commands create an after-hours schedule for the auto attendant, specifying the weekly recurrent schedule. The schedule defines the times when the office is closed, and an alternative call flow will be used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$timerangeMoFr = New-CsOnlineTimeRange -Start 08:30 -end 17:00\n\n$timerangeSa = New-CsOnlineTimeRange -Start 10:00 -end 16:00\n\n$afterHoursSchedule = New-CsOnlineSchedule -Name \"After Hours Schedule\" -WeeklyRecurrentSchedule -MondayHours @($timerangeMoFr) -TuesdayHours @($timerangeMoFr) -WednesdayHours @($timerangeMoFr) -ThursdayHours @($timerangeMoFr) -FridayHours @($timerangeMoFr) -SaturdayHours @($timerangeSa) -Complement\n```\n\n----------------------------------------\n\nTITLE: Disable Teams for Licensed Users PowerShell\nDESCRIPTION: This PowerShell command identifies all users with a specific licensing plan and disables Teams for those users. It filters users based on their AccountSku and licensing status, then applies the license options created earlier to disable Teams. This command also requires the Microsoft Graph Users module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/user-access.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgUser | Where-Object {$_.licenses[0].AccountSku.SkuPartNumber -eq  ($acctSKU).Substring($acctSKU.IndexOf(\":\")+1,  $acctSKU.Length-$acctSKU.IndexOf(\":\")-1) -and $_.IsLicensed -eq $True} |  Set-MgUserLicense -LicenseOptions $x\n```\n\n----------------------------------------\n\nTITLE: Customizing User Info for Third-Party Meetings via XML\nDESCRIPTION: This XML snippet shows how to specify a custom username and email address to be used when joining third-party meetings through the SkypeSettings.xml file for Microsoft Teams Rooms. If the provided values are invalid, the Teams Rooms device defaults to using the room mailbox information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/third-party-join.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<UseCustomInfoForThirdPartyMeetings>true</UseCustomInfoForThirdPartyMeetings>\n<CustomDisplayNameForThirdPartyMeetings>guestname</CustomDisplayNameForThirdPartyMeetings>\n<CustomDisplayEmailForThirdPartyMeetings>guest@contoso.com</CustomDisplayEmailForThirdPartyMeetings>\n```\n\n----------------------------------------\n\nTITLE: Creating an Archiving Configuration with IM and Failure Blocking PowerShell\nDESCRIPTION: This PowerShell command creates a new collection of archiving configuration settings for the Redmond site using the `New-CsArchivingConfiguration` cmdlet. It enables archiving only for instant messaging sessions using `-EnableArchiving \"ImOnly\"`, and it configures the settings to block instant messaging if the archiving service is unavailable using `-BlockOnArchiveFailure $True`. The Identity parameter is mandatory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/create-a-configuration.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsArchivingConfiguration -Identity \"site:Redmond\" -EnableArchiving \"ImOnly\" -BlockOnArchiveFailure $True\n```\n\n----------------------------------------\n\nTITLE: Enable Skype Meetings App via CDN\nDESCRIPTION: These commands enable the use of the Content Delivery Network (CDN) for delivering the Skype Meetings App and Skype for Business for Mac. They also enable client-side logging telemetry and set a timeout for fallback to the locally hosted Skype for Business Web App.  Replace placeholders such as `ContosoApp` appropriately.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/deploy-web-downloadable-clients.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsWebServiceConfiguration -MeetingUxUseCdn $True\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsWebServiceConfiguration -MeetingUxEnableTelemetry $True\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsWebServiceConfiguration -JoinLauncherCdnTimeout (New-TimeSpan -Seconds 10)\n```\n\n----------------------------------------\n\nTITLE: Get RBAC Roles for a Skype for Business Cmdlet - PowerShell\nDESCRIPTION: This command retrieves a list of all RBAC roles that have been assigned a specific Skype for Business cmdlet. It's useful for determining the required permissions to execute a particular cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"<Skype for Business cmdlet>\"}\n```\n\n----------------------------------------\n\nTITLE: Set eCDN Provider to Hive - PowerShell\nDESCRIPTION: This PowerShell command configures Hive as the third-party video distribution provider for Teams meetings. It uses the `Set-CsTeamsMeetingBroadcastConfiguration` cmdlet to set `AllowSdnProviderForBroadcastMeeting` to `$True`, `SdnProviderName` to `hive`, and includes the `SdnLicenseId` and `SdnApiTemplateUrl` parameters with the values provided by Hive.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/streaming-ecdn-enterprise-content-delivery-network.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastConfiguration -AllowSdnProviderForBroadcastMeeting $True -SdnProviderName hive -SdnLicenseId {license ID GUID provided by Hive} -SdnApiTemplateUrl “{API template URL provided by Hive}”\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Month Headers\nDESCRIPTION: This JavaScript snippet uses jQuery to dynamically update the month headers of the scorecard.  It calculates the month names based on a starting month and displays the appropriate abbreviated month. This script assumes jQuery is included, as indicated by the `<script>` tag sourcing `jquery-2.1.1.js`. It targets the element with the id 'Header' and iterates through its children to modify their `innerHTML` property.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n    <script>\n\n        $(function () {\n            var month_names_short = ['NAM', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n            var currentMonth = '2015-3';\n\n            //update the header with the month names\n            var row = document.getElementById('Header');\n            var numMonthsToShow = 6;\n            for (var m = numMonthsToShow-1; m >= 0; m--) {\n                var dateSplit = currentMonth.split('-');\n                var monthInt = parseInt(dateSplit[1]);\n                var yearInt = parseInt(dateSplit[0]);\n                monthInt = monthInt - m;\n                if (monthInt < 1)\n                {\n                    monthInt += 12;\n                    yearInt--;\n                }\n                row.children[numMonthsToShow-m].innerHTML = month_names_short[monthInt];\n            }\n\n```\n\n----------------------------------------\n\nTITLE: Modify DTMF Configuration - Skype for Business - PowerShell\nDESCRIPTION: Modifies the dual-tone multifrequency (DTMF) signaling settings used for dial-in conferencing. DTMF settings control how users can interact with the conference using their phone's keypad.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Create SIP Gateway API Service Principal - Azure AD Module - PowerShell\nDESCRIPTION: This snippet creates a new SIP Gateway API service principal using the Azure AD module. It uses the AppId of the SIP Gateway API. It requires the AzureAD module to be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-AzureADServicePrincipal -AppId \"0ab9de21-b802-4d77-b279-1ad41ca233b4\"\n```\n\n----------------------------------------\n\nTITLE: Create a new room mailbox (Exchange Online)\nDESCRIPTION: This PowerShell command creates a new room mailbox in Exchange Online, enabling it to authenticate with Microsoft Teams.  It includes parameters for specifying the Office 365 ID, name, alias, and password for the mailbox.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/mtr-device-config-account-include.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Mailbox -MicrosoftOnlineServicesID <Office365 ID> -Name <String> -Alias <string> -Room -EnableRoomMailboxAccount $true  -RoomMailboxPassword (ConvertTo-SecureString -String '<Password>' -AsPlainText -Force)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Mailbox -MicrosoftOnlineServicesID ConferenceRoom01@contoso.com -Name \"ConferenceRoom01\" -Alias ConferenceRoom01 -Room -EnableRoomMailboxAccount $true  -RoomMailboxPassword (ConvertTo-SecureString -String 'P@$$W0rd5959' -AsPlainText -Force)\n```\n\n----------------------------------------\n\nTITLE: Get Dial-In Conferencing DTMF Configuration - PowerShell\nDESCRIPTION: Retrieves the dual-tone multifrequency (DTMF) signaling settings used for dial-in conferencing in Skype for Business Server. DTMF enables users to control conference settings via their telephone keypad. The cmdlet returns DTMF configuration objects with details about the settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Setting Site-Level Simple URLs\nDESCRIPTION: This PowerShell cmdlet is used to configure simple URLs at the site level in Skype for Business Server. It allows administrators to customize simple URLs for specific sites, overriding global settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/network-requirements/simple-urls.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsSimpleURLConfiguration\n```\n\n----------------------------------------\n\nTITLE: Retrieving Counter Storage Names\nDESCRIPTION: This console command retrieves the counter storage names from Redis, filtering the output to only show lines containing 'processor'. It uses the 'PerfAgentStorageManager.exe' tool and requires Redis to be running on localhost. The '-a=listcounterstoragenames' argument specifies the action, and '-mode=verbose' increases the level of detail in the output.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n.\\PerfAgentStorageManager.exe -redis=localhost -a=listcounterstoragenames -mode=verbose | findstr /i processor\n```\n\n----------------------------------------\n\nTITLE: Saving Team Data to a CSV File in PowerShell\nDESCRIPTION: This snippet saves the generated CSV output to a file in the user's Downloads folder.  It dynamically creates a filename including the current date and time, ensuring uniqueness.  The Out-File cmdlet writes the $csvOutput string to the specified file path.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$csvOutputPath = $env:USERPROFILE + \"\\downloads\\testhierarchy-\" + (Get-Date -Format \"yyyy-MM-dd-hhmmss\") + \".csv\" \n$csvOutput | Out-File $csvOutputPath\n```\n\n----------------------------------------\n\nTITLE: Run Query Response Payload - JSON\nDESCRIPTION: This JSON payload illustrates the response structure returned by the RunQuery operation.  The 'ExecutionTime' field indicates the query execution duration.  'DataResult' contains the query result as a two-dimensional array with dimension members and aggregated measurement values.  'ResultIsFromCache' shows whether the data was retrieved from the cache or the QoE Cube.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/run-query.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"ExecutionTime\": \"00:00:00.2102630\",\n\"DataResult\": [[\"September 2014\",\n        1792,\n        34,\n        78,\n        4.171],\n        [\"October 2014\",\n        37017,\n        1731,\n        3305,\n        8.197],\n        [\"November 2014\",\n        79184,\n        3033,\n        5556,\n        6.557],\n        [\"December 2014\",\n        122253,\n        4050,\n        5444,\n        4.263],\n        [\"January 2015\",\n        31246,\n        1069,\n        1342,\n        4.118]],\n\"ResultIsFromCache\": false,\n\"ErrorType\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Network Interface Information with Get-CsNetworkInterface - PowerShell\nDESCRIPTION: This command retrieves information about network interfaces configured on the Skype for Business Server. The cmdlet can be executed from the Skype for Business Server Management Shell or a remote PowerShell session with the necessary Skype for Business Server modules loaded. No specific parameters are needed to get all interfaces. The output displays properties like Identity, ComputerFqdn, IPAddress, and Interface details for each interface.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/viewing-network-interface-information.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsNetworkInterface\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation via MSIExec\nDESCRIPTION: Describes the use of msiexec for installing the Citrix plugin for Teams VDI.  It highlights the usage of appropriate flags with msiexec command, allowing for automated and customized installation process. This method is relevant for admins using tools like SCCM or Intune.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nAdmins can use **msiexec** with appropriate flags, as discussed in [msiexec](/windows-server/administration/windows-commands/msiexec).\n```\n\n----------------------------------------\n\nTITLE: SRTP Crypto Attribute Example\nDESCRIPTION: This code snippet demonstrates the format of the crypto attribute within the Session Description Protocol (SDP) offer from an SBC. It showcases the SRTP encryption cipher AES_CM_128_HMAC_SHA1_80, including the inline key and salt. The MKI and Length parameters are not included.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-media.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\na=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:V/Lr6Lsvhad/crSB9kCQ28jrYDxR2Yfk5bXryH5V|2^31\n```\n\n----------------------------------------\n\nTITLE: Listing Skype for Business Cmdlets in PowerShell\nDESCRIPTION: This command retrieves a list of all cmdlets available for managing Skype for Business Server within the Skype for Business Server Management Shell. The `Get-Command` cmdlet is used with wildcards and module filters to identify relevant cmdlets. The output is a list of available commands for administering Skype for Business.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/management-shell.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Command * -Module SkypeforBusiness -CommandType cmdlet\n```\n\n----------------------------------------\n\nTITLE: Monitoring User Provisioning in Teams\nDESCRIPTION: This PowerShell script monitors user provisioning progress in Teams by checking for users with validation errors after enabling SIP. It retrieves online users that are SIP enabled and have UserValidationErrors not equal to null. This is a verification step to ensure the provisioning process completes successfully.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter {IsSipEnabled -eq $True} | Where {$_.UserValidationErrors -ne $null} | Select SipAddress,InterpretedUserType,UserValidationErrors\n```\n\n----------------------------------------\n\nTITLE: Testing P2P IM with Credentials in Script - PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to pass credentials to the `Test-CsMcxP2PIM` cmdlet using secure strings and `PSCredential` objects. This allows for more secure handling of passwords within a script. It defines user names and passwords, converts password into secure strings, creates credential objects, and then uses those objects with the Test-CsMcxP2PIM command. Requires the Management.Automation module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$passwd1 = ConvertTo-SecureString \"Password01\" -AsPlainText -Force\n$passwd2 = ConvertTo-SecureString \"Password02\" -AsPlainText -Force\n$tuc1 = New-Object Management.Automation.PSCredential(\"contoso\\UserName1\", $passwd1)\n$tuc2 = New-Object Management.Automation.PSCredential(\"contoso\\UserName2\", $passwd2)\nTest-CsMcxP2PIM -TargetFqdn pool01.contoso.com -Authentication Negotiate -SenderSipAddress sip:UserName1@contoso.com -SenderCredential $tuc1 -ReceiverSipAddress sip:UserName2@contoso.com -ReceiverCredential $tuc2 -v\n```\n\n----------------------------------------\n\nTITLE: Skype Settings XML Configuration\nDESCRIPTION: This XML configuration file is used to configure various settings for Skype for Business, including auto screen sharing, meeting name visibility, user account credentials, meeting enablement for different platforms (Teams, Skype, WebEx, Zoom, BlueJeans), device settings, and other features like Bluetooth advertisement and proximity-based meeting invitations. It allows administrators to customize the user experience and device behavior.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/xml-config-file.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<SkypeSettings>\n  <AutoScreenShare>1</AutoScreenShare>\n  <HideMeetingName>0</HideMeetingName>\n  <AutoExitMeetingEnabled>true</AutoExitMeetingEnabled>\n  <AudioRenderDefaultDeviceVolume>50</AudioRenderDefaultDeviceVolume>\n  <AudioRenderCommunicationDeviceVolume>50</AudioRenderCommunicationDeviceVolume>\n  <UserAccount>\n    <SkypeSignInAddress>username@microsoft.com</SkypeSignInAddress>\n    <Password>Password!</Password>\n  </UserAccount>\n  <TeamsMeetingsEnabled>true</TeamsMeetingsEnabled>\n  <SfbMeetingEnabled>false</SfbMeetingEnabled>\n  <IsTeamsDefaultClient>true</IsTeamsDefaultClient>\n  <RequirePasscodeForAllTeamsMeetings>false</RequirePasscodeForAllTeamsMeetings>\n  <RequirePasscodeForAllPrivateTeamsMeetings>false</RequirePasscodeForAllPrivateTeamsMeetings>\n  <WebExMeetingsEnabled>true</WebExMeetingsEnabled>\n  <ZoomMeetingsEnabled>true</ZoomMeetingsEnabled>\n  <BlueJeansMeetingsEnabled>true</BlueJeansMeetingsEnabled>\n  <UseCustomInfoForThirdPartyMeetings>true</UseCustomInfoForThirdPartyMeetings>\n  <CustomDisplayNameForThirdPartyMeetings>guestname</CustomDisplayNameForThirdPartyMeetings>\n  <CustomDisplayEmailForThirdPartyMeetings>guest@microsoft.com</CustomDisplayEmailForThirdPartyMeetings>\n  <BluetoothAdvertisementEnabled>true</BluetoothAdvertisementEnabled>\n  <AutoAcceptProximateMeetingInvitations>true</AutoAcceptProximateMeetingInvitations>\n  <AllowRoomRemoteEnabled>true</AllowRoomRemoteEnabled>\n  <RoomQRcodeEnabled>true</RoomQRcodeEnabled>\n  <QRCodeAutoAcceptProximateMeetingInvitations>true</QRCodeAutoAcceptProximateMeetingInvitations>\n  <DualScreenMode>false</DualScreenMode>\n  <DuplicateIngestDefault>true</DuplicateIngestDefault>\n  <DisableTeamsAudioSharing>false</DisableTeamsAudioSharing>\n  <EnableRoomCapacityNotification>true</EnableRoomCapacityNotification>\n  <FrontRowEnabled>true</FrontRowEnabled>\n  <FrontRowVideoSize>medium</FrontRowVideoSize>\n  <FrontRowPanelDefaults>3,2</FrontRowPanelDefaults>\n  <SingleFoRDefaultContentLayout>1</SingleFoRDefaultContentLayout>\n  <DefaultFoRExperience>0</DefaultFoRExperience>\n  <ShowMeetingChat>true</ShowMeetingChat>\n  <OpenMeetingChatByDefault>true</OpenMeetingChatByDefault>\n  <EnablePublicPreview>false</EnablePublicPreview>\n  <NoiseSuppressionDefault>1</NoiseSuppressionDefault>\n  <RoomLanguageSwitchEnabled>true</RoomLanguageSwitchEnabled>\n  <SendLogs>\n    <EmailAddressForLogsAndFeedback>username@microsoft.com</EmailAddressForLogsAndFeedback>\n    <SendLogsAndFeedback>true</SendLogsAndFeedback>\n  </SendLogs>\n <SendFeedbackToPMP>true</SendFeedbackToPMP>\n <Devices>\n    <MicrophoneForCommunication>Device1</MicrophoneForCommunication>\n    <SpeakerForCommunication>DeviceX</SpeakerForCommunication>\n    <DefaultSpeaker>DeviceX</DefaultSpeaker>\n    <ContentCameraId>Camera1</ContentCameraId>\n    <ContentCameraEnhancement>true</ContentCameraEnhancement>\n    <ContentCameraInverted>false</ContentCameraInverted>\n  </Devices>\n  <Theming>\n       <ThemeName>Custom</ThemeName>\n       <CustomBackgroundMainFoRDisplay>file name</CustomBackgroundMainFoRDisplay>\n       <CustomBackgroundExtendedFoRDisplay>file name</CustomBackgroundExtendedFoRDisplay>\n       <CustomBackgroundConsole>file name</CustomBackgroundConsole>\n       <CustomThemeImageUrl>file name</CustomThemeImageUrl>\n  </Theming>\n  <TeamsRoomsNewExperience>true</TeamsRoomsNewExperience>\n  <RemoveFoRCalendar>false</RemoveFoRCalendar>\n  <CoordinatedMeetings enabled=\"true\">\n    <TrustedAccounts>username1@microsoft.com,username2@contoso.com</TrustedAccounts>\n    <Settings>\n      <Audio default=\"true\" enabled=\"true\"/>\n      <Video default=\"true\" enabled=\"true\"/>\n      <Whiteboard default=\"true\" enabled=\"true\"/>\n    </Settings>\n  </CoordinatedMeetings>\n  <EnableResolutionAndScalingSetting>true</EnableResolutionAndScalingSetting> \n  <MainFoRDisplay> \n      <MainFoRDisplayResolution>1920,1080</MainFoRDisplayResolution> \n      <MainFoRDisplayScaling>100</MainFoRDisplayScaling> \n  </MainFoRDisplay> \n  <ExtendedFoRDisplay> \n      <ExtendedFoRDisplayResolution>1920,1080</ExtendedFoRDisplayResolution> \n      <ExtendedFoRDisplayScaling>100</ExtendedFoRDisplayScaling> \n  </ExtendedFoRDisplay>  \n  <EnableDeviceEndToEndEncryption>false</EnableDeviceEndToEndEncryption>\n  <SplitVideoLayoutsDisabled>false</SplitVideoLayoutsDisabled>\n</SkypeSettings>\n```\n\n----------------------------------------\n\nTITLE: Adding Provider to CLS Scenario (PowerShell)\nDESCRIPTION: This snippet adds a provider to an existing CLS scenario using the `Edit-CsClsScenario` cmdlet. The `-ScenarioName`, `-ProviderName`, `-Level`, and `-Flags` parameters specify the scenario, provider, logging level, and flags. Positional parameters are used for `ScenarioName` and `ProviderName`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nEdit-CsClsScenario -ScenarioName <string of the scenario to edit> -ProviderName <string of the provider to add> -Level <string of type level> -Flags <string of type flags>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nEdit-CsClsScenario -ScenarioName AlwaysOn -ProviderName ChatServer -Level Info -Flags TF_COMPONENT\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nEdit-CsClsScenario AlwaysOn ChatServer -Level Info -Flags ALL\n```\n\n----------------------------------------\n\nTITLE: Restrict Town Hall Attendance to Internal Users via PowerShell\nDESCRIPTION: This PowerShell script restricts town hall attendance to only users within the organization (including guests) for events created by users with the specified policy. It utilizes the `Set-CsTeamsEventsPolicy` cmdlet and sets the `-EventAccessType` parameter to `EveryoneInCompanyExcludingGuests`. The `<policy name>` placeholder should be replaced with the actual name of the Teams events policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-town-halls.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -EventAccessType EveryoneInCompanyExcludingGuests\n```\n\n----------------------------------------\n\nTITLE: Creating Call Queue with Audio File Greeting and Music On Hold - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates creating a new call queue using audio files for both the greeting and the on-hold music. It uses the New-CsCallQueue cmdlet and specifies the WelcomeMusicAudioFileId and MusicOnHoldAudioFileId parameters. Note that this example doesn't contain the minimum number of parameters required to create a new call queue.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -WelcomeMusicAudioFileId <FILE ID> -MusicOnHoldAudioFileId <FILE ID>\n```\n\n----------------------------------------\n\nTITLE: Creating a Bandwidth Policy with New-CsNetworkBandwidthPolicyProfile (PowerShell)\nDESCRIPTION: This snippet creates a new bandwidth policy profile in Skype for Business Server.  `-Identity` sets the profile name. `-AudioBWLimit`, `-AudioBWSessionLimit`, `-VideoBWLimit`, and `-VideoBWSessionLimit` parameters specify bandwidth limits for audio and video. The example creates a profile named \"LowBWLimits\" with specific bandwidth limitations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsNetworkBandwidthPolicyProfile -Identity LowBWLimits -AudioBWLimit 2000 -AudioBWSessionLimit 200 -VideoBWLimit 1400 -VideoBWSessionLimit 500\n```\n\n----------------------------------------\n\nTITLE: Set Web Service Configuration PowerShell\nDESCRIPTION: Modifies the web service configuration settings, specifically the ShowJoinUsingLegacyClientLink parameter, using the Set-CsWebServiceConfiguration cmdlet in Skype for Business Server Management Shell. The -Identity parameter specifies the scope (global in this case), and the ShowJoinUsingLegacyClientLink parameter is set to either $True or $False to control whether users are given the option to join using a legacy client.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/configure-the-meeting-join-page.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWebServiceConfiguration -Identity global -ShowJoinUsingLegacyClientLink $True\n```\n\n----------------------------------------\n\nTITLE: Get QoE Configuration using PowerShell\nDESCRIPTION: This PowerShell command retrieves the current Quality of Experience (QoE) configuration settings from the Skype for Business Server. It provides information about purging settings, including whether purging is enabled, the retention period for QoE data, and the scheduled purge time. No specific dependencies are required beyond the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/quality-of-experience-qoe-database-schema/purgesettings-qoe.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsQoEConfiguration\n```\n\n----------------------------------------\n\nTITLE: Set Teams Update Management Policy (Public Preview)\nDESCRIPTION: This snippet uses the `Set-CsTeamsUpdateManagementPolicy` cmdlet in PowerShell to configure the Teams update management policy, specifically the `-AllowPublicPreview` parameter. This parameter enables or disables Teams Public preview features for users in the Office Current Channel (Preview). No specific inputs or outputs beyond the PowerShell cmdlet's standard behavior are described.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsUpdateManagementPolicy -AllowPublicPreview\n```\n\n----------------------------------------\n\nTITLE: Creating Normalization Rule for Call Park\nDESCRIPTION: This example demonstrates how to create a normalization rule to prevent Call Park orbit numbers from being normalized in Skype for Business Server.  The rule identifies the orbit range using the 'Pattern to match' and preserves the original number using '$1' in the 'Translation pattern'. This ensures that the Call Park feature functions correctly. The normalization rule is created in the dial plan.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/verify-normalization-rules-for-call-park.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^(7\\d{3})$\n```\n\n----------------------------------------\n\nTITLE: Creating Teams with PowerShell\nDESCRIPTION: This PowerShell script creates a set of Microsoft Teams.  Each `New-Team` command creates a new team with the specified display name. The variables `$tm1`, `$tm2`, etc. store the team objects for later use, if needed, in more complex scripts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$tm1 = New-Team -DisplayName \"HQ\"\n$tm2 = New-Team -DisplayName \"North\"\n$tm3 = New-Team -DisplayName \"Store 1\"\n$tm4 = New-Team -DisplayName \"Store 2\"\n$tm5 = New-Team -DisplayName \"South\"\n$tm6 = New-Team -DisplayName \"Store 3\"\n$tm7 = New-Team -DisplayName \"Store 4\"\n```\n\n----------------------------------------\n\nTITLE: Purging QoE Database Records - PowerShell\nDESCRIPTION: This PowerShell command purges Quality of Experience (QoE) data older than 10 days from the specified monitoring database. It uses the `Invoke-CsQoEDatabasePurge` cmdlet, requiring the `Identity` and `PurgeQoEDataOlderThanDays` parameters to specify the database and the age threshold for data deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/purgecall-detail-recording-and-qoe.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsQoEDatabasePurge -Identity service:MonitoringDatabase:atl-sql-001.litwareinc.com -PurgeQoEDataOlderThanDays 10\n```\n\n----------------------------------------\n\nTITLE: Requiring Passcode for Teams Meetings via XML\nDESCRIPTION: This XML snippet enforces the requirement for users to enter a meeting ID and passcode before joining scheduled Teams meetings on Teams Rooms on Windows devices.  'RequirePasscodeForAllTeamsMeetings' applies to all meetings, while 'RquirePasscodeForAllPrivateTeamsMeetings' applies only to meetings marked as private. A Teams Rooms Pro license is required for this feature.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/mtr-home-refresh.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<RequirePasscodeForAllTeamsMeetings>true</RequirePasscodeForAllTeamsMeetings>\n<RquirePasscodeForAllPrivateTeamsMeetings>true</RquirePasscodeForAllPrivateTeamsMeetings>\n```\n\n----------------------------------------\n\nTITLE: Configure PSTN Test for Watcher Node - PowerShell\nDESCRIPTION: This PowerShell snippet configures the PSTN test for a watcher node. It first creates an extended test using the `New-CsExtendedTest` cmdlet, specifying the test users and test type. Then, it associates the extended test with the watcher node using the `New-CsWatcherNodeConfiguration` cmdlet. It requires the Skype for Business Server core files and the RTCLocal database to be installed on the watcher node.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$pstnTest = New-CsExtendedTest -TestUsers \"sip:watcher1@litwareinc.com\", \"sip:watcher2@litwareinc.com\" -Name \"Contoso Provider Test\" -TestType PSTN\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsWatcherNodeConfiguration -TargetFqdn \"atl-cs-001.litwareinc.com\" -PortNumber 5061 -TestUsers @{Add= \"sip:watcher1@litwareinc.com\",\"sip:watcher2@litwareinc.com\"} -ExtendedTests @{Add=$pstnTest}\n```\n\n----------------------------------------\n\nTITLE: Enable Location-Based Routing for Conferencing with PowerShell\nDESCRIPTION: This PowerShell cmdlet enables the Location-Based Routing for Conferencing application on a specified Front-End pool or Standard Edition Server. It requires specifying the pool FQDN, application priority, and setting the 'Enabled' and 'Critical' parameters. The Priority parameter needs to be determined based on existing applications using Get-CsServerApplication.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/lbr-for-conferencing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsServerApplication -Identity Service:Registrar:<Pool FQDN>/LBRouting -Priority <Application Priority> -Enabled $true -Critical $true -Uri <http://www.microsoft.com/LCS/LBRouting>\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Policy for Video Filters using PowerShell\nDESCRIPTION: This snippet shows how to use PowerShell to configure video filter settings for Teams meetings using the Set-CsTeamsMeetingPolicy or New-CsTeamsMeetingPolicy cmdlets with the VideoFiltersMode parameter. The parameter allows administrators to control whether users can customize their video background in a meeting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-policies-audio-and-video.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUse [Set-CsTeamsMeetingPolicy](/powershell/module/teams/set-csteamsmeetingpolicy) or [New-CsTeamsMeetingPolicy](/powershell/module/teams/new-csteamsmeetingpolicy) with the *VideoFiltersMode* parameter to configure the values in PowerShell.\n```\n\n----------------------------------------\n\nTITLE: Modify Call Queue - General Info via PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to modify an existing call queue using the `Set-CsCallQueue` cmdlet. It updates parameters such as outbound caller ID resource accounts, service level threshold, and language. The `-Identity` parameter specifies the GUID of the call queue to be modified. The `-OboResourceAccountIds` parameter sets the outbound caller ID accounts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -OboResourceAccountIds @(\"Resource Account GUID 01\", \"Resource Account GUID 02\") -ServiceLevelThresholdResponseTimeInSecond 45 -LanguageID en-US\n```\n\n----------------------------------------\n\nTITLE: Disabling On-Premises Skype for Business Users via PowerShell\nDESCRIPTION: This PowerShell command disables specified Skype for Business user accounts. It retrieves users hosted on-premises using `Get-CsUser` with the appropriate filter and then pipes the results to `Disable-CsUser`, removing their Skype for Business attributes.  It's critical to confirm the accounts are no longer needed before running this command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-move-on-prem-users.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Filter { HostingProvider -eq \"SRV:\"} | Disable-CsUser\n```\n\n----------------------------------------\n\nTITLE: Remove Team Member - SEFAUtil\nDESCRIPTION: This example shows how to remove a team member from the team-call group of a user using the SEFAUtil command-line tool. The command takes the target user's SIP address and the team member's SIP address as input, using the /removeteammember switch to remove the member. The output shows updated user settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /removeteammember:anders@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Run Offboarding Script via PowerShell\nDESCRIPTION: This snippet shows how to execute the MTR Pro device offboarding script using PowerShell with elevated privileges. It sets the execution policy to allow remote signed scripts and then runs the script from a specified path. This script removes the Teams Rooms Pro management monitoring agent and files, reverting the device to standard MTR updates.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/enroll-a-device.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Users\\admin\\Downloads\\MTRP\\_Device\\_Offboarding\\MTRP\\_Device\\_Offboarding.ps1\n```\n\n----------------------------------------\n\nTITLE: Start CLS Logging with Advanced PowerShell Parameters\nDESCRIPTION: This code snippet shows how to use advanced parameters with `Start-CsClsLogging`, including `-Duration` to specify the logging duration and `-Pools` to target specific pools. It requires the Skype for Business Server Management Shell. It demonstrates starting the UserReplicator scenario on a specific pool for a defined duration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/start-or-stop-log-capture.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsClsLogging -Scenario UserReplicator -Duration 8:00 -Pools \"pool01.contoso.net\"\n```\n\n----------------------------------------\n\nTITLE: Custom channel MAU configuration example for Teams\nDESCRIPTION: This XML snippet showcases a more advanced Microsoft Auto Update (MAU) configuration, specifically designed for using a custom channel for Microsoft Teams updates. It includes the 'Application ID', 'ChannelName', 'ManifestServer' (the URL to the update manifest), and 'ManifestServerExpiryTime'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-update.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\nApplications= {\n      ...\n      \"/Applications/Microsoft Teams.app\" =         {\n      \"Application ID\" = TEAMS21;\n      ChannelName = Custom;\n      ManifestServer = \"https://statics.teams.cdn.office.net/production-osx/24199.1700.3003.1785/\";\n      ManifestServerExpiryTime = \"2024-08-02T08:40:06Z\";\n    };\n    ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Failing Over Persistent Chat Database with Invoke-CsDatabaseFailover\nDESCRIPTION: This snippet demonstrates how to manually fail over the primary Persistent Chat database to its mirror using the Skype for Business Server Management Shell. This is achieved by utilizing the `Invoke-CsDatabaseFailover` cmdlet. This ensures minimal downtime during planned or unplanned outages by switching database operations to the mirror database.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/configure-hadr-for-persistent-chat.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsDatabaseFailover\n```\n\n----------------------------------------\n\nTITLE: Setting MACResolverUrl in Skype for Business using Set-CsWebServiceConfiguration\nDESCRIPTION: This PowerShell cmdlet sets the MACResolverUrl property within the Skype for Business Server web service configuration. This property is used to specify the URL of the SNMP application that resolves MAC addresses to port and switch information, which is crucial for E9-1-1 functionality. Replace \"<SNMP application url>\" with the actual URL of your SNMP application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-an-snmp-application.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsWebServiceConfiguration -MACResolverUrl \"<SNMP application url>\"\n```\n\n----------------------------------------\n\nTITLE: Update User Mobile Phone with Extension using PowerShell (x format)\nDESCRIPTION: This PowerShell snippet updates a user's mobile phone number attribute in Microsoft Entra ID with an extension. It utilizes the Update-MgUser cmdlet to modify the specified user's MobilePhone property. The extension is appended to the phone number using the 'x' format. Prerequisites include the Microsoft.Graph.Users PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-voice-reference.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-MgUser -UserId 'usern@domain.com' -MobilePhone '+15555555678x5678'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test User Credentials - PowerShell\nDESCRIPTION: This code snippet demonstrates how to retrieve test user credentials using the Get-CsTestUserCredential cmdlet. It takes the SipAddress as input and returns the UserName and a SecureString representation of the password. It is used to verify the successful creation of the test user credentials.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTestUserCredential -SipAddress \"sip:watcher1@litwareinc.com\"\nGet-CsTestUserCredential -SipAddress \"sip:watcher2@litwareinc.com\"\nGet-CsTestUserCredential -SipAddress \"sip:watcher3@litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Teams IP Phone Policy for Hot-desking using PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new Microsoft Teams IP Phone policy using the `New-CsTeamsIPPhonePolicy` PowerShell cmdlet, which is essential for enabling hot-desking on Teams displays.  It's used to configure settings for shared devices. The cmdlet takes parameters that define the policy's behavior, and it requires the Teams PowerShell module to be installed and authenticated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/teams-displays.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsTeamsIPPhonePolicy](/powershell/module/teams/new-csteamsipphonepolicy)\n```\n\n----------------------------------------\n\nTITLE: Replicating Existing RGS Data - PowerShell\nDESCRIPTION: This command replicates existing RGS data to the backup tables so that the data can be picked up by RGSBackupService.  It needs to be run on both pools. Replace `<Pool1 FQDN>` and `<Pool2 FQDN>` with the actual FQDNs of each pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsRGSStoreReplicateData -PoolFqdn <Pool1 FQDN>\nInvoke-CsRGSStoreReplicateData -PoolFqdn <Pool2 FQDN>\n```\n\n----------------------------------------\n\nTITLE: Auto-Assign a User PIN using Set-CsClientPin\nDESCRIPTION: This PowerShell command auto-assigns a PIN to the user 'Ken Myer'. The `Set-CsClientPin` cmdlet is used without the `-Pin` parameter, causing Skype for Business Server to generate a PIN automatically. The `Identity` parameter specifies the user to whom the PIN is assigned. This requires the Skype for Business Server Management Shell or a remote PowerShell session connected to Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/set-a-user-s-dial-in-conferencing-pin.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPin -Identity \"Ken Myer\"\n```\n\n----------------------------------------\n\nTITLE: Disable Simultaneous Ringing - SEFAUtil\nDESCRIPTION: This example demonstrates how to disable simultaneous ringing for a user using the SEFAUtil command-line tool. The command takes the target user's SIP address as input and uses the /disablesimulring switch to disable simultaneous ringing. The output shows the updated user settings and confirms that simultaneous ringing is disabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /disablesimulring\n```\n\n----------------------------------------\n\nTITLE: Set PSTN Call Routing to Unanswered via PowerShell\nDESCRIPTION: This PowerShell script sets the `-InboundPstnCallRoutingTreatment` parameter to route inbound PSTN calls according to the unanswered call forwarding settings for users in the Global (default) Teams Calling Policy instance. This ensures that PSTN calls are handled based on the user's configured call forwarding rules when they don't answer. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/inbound-call-routing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -InboundPstnCallRoutingTreatment Unanswered\n```\n\n----------------------------------------\n\nTITLE: Uninstall Classic Teams on macOS\nDESCRIPTION: These commands are used to remove the Classic Teams client and its associated cache from a macOS device. The first command removes the application bundle, while the second command removes the cache directory from the user's Library folder.  The commands require sudo and rm -rf which allows for force removal of files and directories.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-classic-client-uninstall.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove Classic Teams\nsudo rm -rf /Applications/Microsoft\\ Teams\\ classic.app\n# Remove Classic Teams cache\nrm -rf ~/Library/Application\\ Support/Microsoft/Teams\n```\n\n----------------------------------------\n\nTITLE: Get Centralized Logging Service Configuration - PowerShell\nDESCRIPTION: This command retrieves the current Centralized Logging Service configuration from the Central Management store. It displays information about the Global configuration, including any site configurations defined.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClsConfiguration\n```\n\n----------------------------------------\n\nTITLE: Testing P2P Instant Messaging with Test-CsMcxP2PIM - PowerShell\nDESCRIPTION: This PowerShell code snippet tests point-to-point instant messaging (P2P IM) functionality for Skype for Business mobile clients using the `Test-CsMcxP2PIM` cmdlet. It requires the FQDN of the Front End pool, authentication type, SIP addresses and credentials for both the sender and receiver. The `-v` parameter enables verbose output.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nTest-CsMcxP2PIM -TargetFqdn <FQDN of Front End pool> -Authentication <TrustedServer | Negotiate | ClientCertificate | LiveID> -SenderSipAddress sip:<SIP address of test user 1> -SenderCredential <test user 1 credentials> -ReceiverSipAddress sip:<SIP address of test user 2> -ReceiverCredential <test user 2 credentials> -v\n```\n\n----------------------------------------\n\nTITLE: Get User Information - PowerShell\nDESCRIPTION: This PowerShell command retrieves information about a specific user. The `Get-CsUser` cmdlet is used, requiring the user's identity as a parameter. It fetches the user information for \"David Pelton\" to verify the RegistrarPool attribute.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-a-single-user-to-the-pilot-pool.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Identity \"David Pelton\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Rich Logging Data to XML in PowerShell\nDESCRIPTION: This PowerShell command takes the rich logging data stored in the RegistrationTest variable (created by Test-CsRegistration with -OutLoggerVariable) and exports it to an XML file. The ToXML() method converts the data to XML format, and Out-File saves it to the specified file path. This XML file can then be opened in a text editor or XML viewer for detailed analysis of the synthetic transaction.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n$RegistrationTest.ToXML() | Out-File C:\\Logs\\Registration.xml\n```\n\n----------------------------------------\n\nTITLE: Getting Teams Files Policy - PowerShell\nDESCRIPTION: This snippet adds DefaultFileUploadAppId attribute in the Get-CsTeamsFilesPolicy output. This allows retrieving default file upload app id using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_60\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsFilesPolicy\n```\n\n----------------------------------------\n\nTITLE: Defining Path for Language-Specific ADML Files\nDESCRIPTION: This code defines the path for storing language-specific ADML files within the central store on a domain controller. This location complements the ADMX files and provides language-specific resources for Group Policy management.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-client-bootstrapping-policies.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n%systemroot%\\sysvol\\domain\\policies\\PolicyDefinitions\\EN-US\n```\n\n----------------------------------------\n\nTITLE: Setting Compliance Adapter Configuration - C++\nDESCRIPTION: This C++ code shows the method that the Persistent Chat Compliance server calls when the custom adapter first loads.  The  `AdapterConfig` contains the Persistent Chat compliance configuration that is relevant to the compliance adapter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid SetConfig(AdapterConfig config)\n```\n\n----------------------------------------\n\nTITLE: Export Skype for Business Configuration with PowerShell\nDESCRIPTION: This PowerShell cmdlet exports the Skype for Business Central Management store configuration to a specified file. This is essential for installing the local configuration store on an Edge Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/2019/depwiz/ms.lync.dep.DeployReplicaConfig.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nExport-CsConfiguration -FileName <ConfigurationFilePath.zip>\n```\n\n----------------------------------------\n\nTITLE: Create New PIN Policy - Skype for Business - PowerShell\nDESCRIPTION: Creates a new client personal identification number (PIN) policy.  This cmdlet is used to create a new PIN policy with specific settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Verifying Pool Roles and Version PowerShell\nDESCRIPTION: Verifies that all pools in the `$poolArray` are Front End pools deployed with Skype for Business 2019 using the `VerifyRoleAndVersionOfSelectedPools` function. The script exits if the pools are not valid.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\n$status = VerifyRoleAndVersionOfSelectedPools -poolArray $poolArray\n\nif ($status -eq $false)\n{\n    Write-Error \"Not all the pools mentioned are Front end pool or deployed with SfB 2019. Aborting process.\"\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Microsoft Teams add-on for Google Workspace - PowerShell\nDESCRIPTION: This PowerShell snippet checks if a service principal exists for the Microsoft Teams meeting add-on in Google Workspace and disables it if it does, or creates and disables it if it doesn't. It depends on a connection to Microsoft Graph and the appId variable defined in the previous snippet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/google-workspace-addon-teams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ServicePrincipalUpdate =@{\n  \"accountEnabled\" = \"false\"\n}\n\n$servicePrincipal = Get-MgServicePrincipal -Filter \"appId eq '$appId'\"\nif ($servicePrincipal) {\n    # Service principal exists already, disable it\n    Update-MgServicePrincipal -ServicePrincipalId $servicePrincipal.Id -BodyParameter $ServicePrincipalUpdate\n    Write-Host \"Disabled existing Service Principal \\n\"\n} else {\n    # Service principal does not yet exist, create it and disable it at the same time\n    $servicePrincipal = New-MgServicePrincipal -AppId $appId -DisplayName $displayName\n    Update-MgServicePrincipal -ServicePrincipalId $servicePrincipal.Id -BodyParameter $ServicePrincipalUpdate\n    Write-Host \"Created and disabled the Service Principal \\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Move All Users to Pilot Pool via PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all users currently homed on the Lync Server and moves them to the specified target pool. Replace pool_FQDN with the fully qualified domain name of the destination pool.  The Get-CsUser -OnLyncServer cmdlet retrieves all users on the Lync Server, and Move-CsUser moves them to the specified target.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-multiple-users-to-the-pilot-pool.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -OnLyncServer | Move-CsUser -Target \"pool_FQDN\"\n```\n\n----------------------------------------\n\nTITLE: Enable Spatial Audio XML\nDESCRIPTION: This XML snippet enables spatial audio in the Front Row experience of Microsoft Teams Rooms. Enabling this feature allows audio from remote participants to be played from the speaker channel that corresponds to their location on the Front Row layout, creating a more immersive and natural experience. Spatial audio requires stereo speakers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-release-note.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<IsSpatialAudioEnabled>true</IsSpatialAudioEnabled>\n```\n\n----------------------------------------\n\nTITLE: Modify DisplayName for Dial-in Access Number - PowerShell\nDESCRIPTION: This PowerShell command modifies the `DisplayName` property of a specified dial-in conferencing access number. The `-Identity` parameter identifies the target access number using its SIP URI, and the `-DisplayName` parameter sets the new display name. This is useful for providing a more descriptive name for the access number in Skype for Business.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/access-numbers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingAccessNumber -Identity \"sip:RedmondDialIn@litwareinc.com\" -DisplayName \"Redmond Dial-In Access Number\"\n```\n\n----------------------------------------\n\nTITLE: Modernized Remove-Cs<Name>Policy Cmdlets\nDESCRIPTION: This snippet describes the release of modernized versions of all 75+ `Remove-Cs<Name>Policy` cmdlets. These cmdlets are designed to operate similarly to their remoting counterparts.  Due to a phased rollout, some tenants might still encounter the older versions until the update is fully implemented. This affects policy removal in Microsoft Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_136\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-Cs<Name>Policy\n```\n\n----------------------------------------\n\nTITLE: History-Info Header Example\nDESCRIPTION: This snippet provides an example of a History-Info header with multiple entries, showing how redirect information is included with the appropriate reason and index.  The original URI header text is escaped for special characters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-sip.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nHistory-Info:\n  <sip:+14257123456@sip.pstnhub.microsoft.com:5061;user=phone?Reason=SIP%3Bcause%3D302%3Btext%3D%22Moved%20temporarily%22>;index=1,\n  <sip:+14257123456@sip.pstnhub.microsoft.com:5061;user=phone?Reason=SIP%3Bcause%3D496%3Btext%3D%22User%20Busy%22>;index=1.1\n```\n\n----------------------------------------\n\nTITLE: Disable QoE for a single location - PowerShell\nDESCRIPTION: This PowerShell snippet disables Quality of Experience (QoE) for a single location. It uses the `Set-CsQoEConfiguration` cmdlet and sets the `EnableQoE` parameter to `$False`. Disabling QoE pauses the collection and storage of QoE data but does not uninstall the monitoring service. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/enable-qoe.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsQoEConfiguration -Identity \"site:Redmond\" -EnableQoE $False\n```\n\n----------------------------------------\n\nTITLE: Creating Policy Entry to Disable Auto Tagging - PowerShell\nDESCRIPTION: This PowerShell command creates a new client policy entry named 'TagContactsInClientAutoPopulatedGroup' and sets its value to '$False'. This disables the auto-tagging feature, preventing automatic presence updates for contacts in the Smart contacts list. The newly created policy entry is stored in the $x variable for subsequent use.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-smart-contacts-list.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$x=New-CsClientPolicyEntry -Name TagContactsInClientAutoPopulatedGroup -Value $False\n```\n\n----------------------------------------\n\nTITLE: Get-CsOnlineUser Cmdlet Update\nDESCRIPTION: This snippet refers to updates to the `Get-CsOnlineUser` cmdlet.  Specifically, the `Country` attribute (previously `CountryOrRegionDisplayName` in versions before 3.x.x) has been added. Additionally, the `CountryAbbreviation` attribute is now only available when used with the `-Identity` parameter. This affects how user information is retrieved using PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_131\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Removing CLS Scenario with Remove-CsClsScenario (PowerShell)\nDESCRIPTION: This snippet demonstrates how to remove an existing Centralized Logging Service (CLS) scenario using the `Remove-CsClsScenario` cmdlet in Skype for Business Server.  The `-Identity` parameter specifies the scope and scenario name. The traces are still available in the logs even after the scenario is removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsClsScenario -Identity <name of scope and scenario>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsClsScenario -Identity \"site:Redmond/LyssServiceScenario\"\n```\n\n----------------------------------------\n\nTITLE: Set AppLocker Policy - Local Machine - PowerShell\nDESCRIPTION: This PowerShell command sets the AppLocker policy on the local machine using the XML file created in the previous step. The `-Merge` parameter merges the new policy with the existing one.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-meeting-addin-security-with-outlook.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AppLockerPolicy -XmlPolicy .\\TMA.xml -Merge\n```\n\n----------------------------------------\n\nTITLE: Working with Files via Microsoft Graph API\nDESCRIPTION: Provides access to files stored in SharePoint and OneDrive using the Microsoft Graph API. Allows applications to access, modify, and manage files. Requires authentication and appropriate permissions. Inputs can vary depending on the specific operation (e.g., file ID). Outputs are file resources or data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\n[Working with files in Microsoft Graph](/graph/api/resources/onedrive)\n```\n\n----------------------------------------\n\nTITLE: Force Azure AD Sync - Powershell\nDESCRIPTION: Forces a synchronization between on-premises Active Directory and Azure Active Directory using the `Start-ADSyncSyncCycle` cmdlet.  This ensures that newly created resource accounts are available for online configuration of Phone System auto attendants or call queues.  Requires the `ADSync` module to be imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-onprem-ra.md#_snippet_5\n\nLANGUAGE: Powershell\nCODE:\n```\nStart-ADSyncSyncCycle -PolicyType Delta\n```\n\n----------------------------------------\n\nTITLE: Disable New Teams Autoupdate via Registry Key\nDESCRIPTION: This configures a registry key to disable the automatic update feature for the new Teams client in non-persistent VDI environments. This prevents unintended updates that might disrupt the VDI setup. The registry key must be created with the specified location, name, type, and value.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_7\n\nLANGUAGE: Registry editor\nCODE:\n```\nLocation: Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Teams\nName: disableAutoUpdate\nType: DWORD\nValue: 1\n```\n\n----------------------------------------\n\nTITLE: Creating QoE Configuration using New-CsQoEConfiguration (PowerShell)\nDESCRIPTION: This cmdlet creates a new Quality of Experience (QoE) configuration for a specified site in Skype for Business.  The `-Identity` parameter specifies the site (e.g., `site:Redmond`), and the `-EnableQoE` parameter determines whether QoE reporting is enabled for that site, in this example it is disabled (`$False`).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsQoEConfiguration -Identity site:Redmond -EnableQoE $False\n```\n\n----------------------------------------\n\nTITLE: Modifying an Existing Call Park Orbit Range Using PowerShell\nDESCRIPTION: This PowerShell command modifies an existing Call Park orbit range by updating the starting and ending numbers of the range. The Identity parameter specifies the name of the orbit range to be modified, and the NumberRangeStart and NumberRangeEnd parameters define the new range of extension numbers to be used for parking calls. The existing range specified by Identity will be overwritten.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-call-park-orbit-range.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallParkOrbit -Identity \"Redmond orbit 1\" -NumberRangeStart 500 -NumberRangeEnd 699\n```\n\n----------------------------------------\n\nTITLE: Configure Moodle connection with Microsoft Entra ID using PowerShell\nDESCRIPTION: This section describes using a PowerShell script to register Moodle as an application in Microsoft Entra ID.  The script automates the provisioning of a new Microsoft Entra application for your Microsoft 365 or Office 365 organization, sets up the required Reply URLs and Permissions, and returns the AppID and Key. These values are then used to configure the Moodle server to connect to Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/install-moodle-integration.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Verifying Macp Version PowerShell\nDESCRIPTION: Verifies the minimum Cumulative Update (CU) version required for MacpWebComponents using the `VerifyMacpVersionOnFrontEndPools` function. Requires credentials, pool array, registry path, and minimum version string as input. The script aborts if the version requirement is not met.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\n$status = VerifyMacpVersionOnFrontEndPools -cred $cred -pools $poolArray -macpRegistryPath $macpRegPath -minVersion $cu3VersionStr\n\nif ($status -eq $false)\n{\n    Write-Error \"Not all the pools have the required CU installed for MacpWebComponents. Please update to the latest version. Aborting process.\"\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Find Central Management Server Host Pool - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet determines which pool currently hosts the Central Management Server (CMS). It provides information needed to correctly fail over the CMS during a disaster recovery scenario. It uses the `-Whatif` parameter to simulate the command and view the potential outcome without making any changes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsManagementServerFailover -Whatif\n```\n\n----------------------------------------\n\nTITLE: List Scenarios in Centralized Logging Service Configuration - PowerShell\nDESCRIPTION: This command retrieves a listing of the scenarios currently defined for a specific scope within the Centralized Logging Service configuration. It uses the Select-Object cmdlet with the -ExpandProperty parameter to expand the Scenarios property and display all of the scenarios and partial information about providers, settings, and flags used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClsConfiguration -Identity <scope and name> | Select-Object -ExpandProperty Scenarios\n```\n\n----------------------------------------\n\nTITLE: Recovering a Two-Server Pool - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to recover a Skype for Business Front End pool with only two Front End Servers after both servers have been down. It allows the pool to restart even if it cannot be brought up in the reverse order of shutdown. It requires the Skype for Business Server PowerShell module and the `-PoolFQDN <FQDN>` parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/high-availability-and-disaster-recovery/high-availability.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-CsPoolRegistrarState -ResetType QuorumLossRecovery -PoolFQDN <FQDN>\n```\n\n----------------------------------------\n\nTITLE: Move Common Area Phones to new Pool - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves Common Area Phone contact objects from a specified RegistrarPool and moves them to a new Target pool within Skype for Business Server 2019. It utilizes the Get-CsCommonAreaPhone cmdlet with a filter and pipes the output to the Move-CsCommonAreaPhone cmdlet.  Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-common-area-phones.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCommonAreaPhone -Filter {RegistrarPool -eq \"pool01.contoso.net\"} | Move-CsCommonAreaPhone -Target pool02.contoso.net\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Network Subnets - PowerShell\nDESCRIPTION: This snippet provides examples of defining three network subnets and associating them with the Vietnam, Indonesia, and Singapore network sites. Each subnet is defined with a subnet IP address, subnet mask, and the corresponding network site ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTenantNetworkSubnet -SubnetID 192.168.1.0 -MaskBits 24 -NetworkSiteID \"Vietnam\"\nNew-CsTenantNetworkSubnet -SubnetID 192.168.2.0 -MaskBits 24 -NetworkSiteID \"Indonesia\"\nNew-CsTenantNetworkSubnet -SubnetID 192.168.3.0 -MaskBits 24 -NetworkSiteID \"Singapore\"\n```\n\n----------------------------------------\n\nTITLE: Set On-Premises Call Data Connector\nDESCRIPTION: This PowerShell command configures the on-premises Call Data Connector by setting the tenant ID and token. The token is obtained from the output of the New-CsCloudCallDataConnection or Get-CsCloudCallDataConnection commands executed in the Microsoft Teams PowerShell module. Replace <tenant_id> and <token-copied-from-online> with their actual values. This command is executed from the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCloudCallDataConnector -Identity Global -TenantId <tenant_id> -Token <token-copied-from-online>\n```\n\n----------------------------------------\n\nTITLE: Enable E2EE for Specific User via PowerShell\nDESCRIPTION: This PowerShell command grants a specific enhanced encryption policy to a single user, effectively enabling end-to-end encryption (E2EE) for that user based on the defined policy. The `Grant-CsTeamsEnhancedEncryptionPolicy` cmdlet assigns the policy specified by `PolicyName` to the user identified by `Identity`. Users still need to manually enable E2EE in their Teams settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-end-to-end-encryption.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsEnhancedEncryptionPolicy -Identity \"username\" -PolicyName \"policyname\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsEnhancedEncryptionPolicy -Identity \"kenmeyer@contoso.onmicrosoft.com\" -PolicyName \"ContosoE2EEUserPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Block Federation with Teams Trial Tenants - PowerShell\nDESCRIPTION: This PowerShell cmdlet blocks external communication with Teams trial-only tenants. It sets the `-ExternalAccessWithTrialTenants` parameter to `\"Blocked\"` using the `Set-CsTenantFederationConfiguration` cmdlet. Requires at least version 6.4.0 of the Teams PowerShell module. This prevents users in trial tenants from contacting users in your organization and vice versa.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/trusted-organizations-external-meetings-chat.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantFederationConfiguration -ExternalAccessWithTrialTenants \"Blocked\"\n```\n\n----------------------------------------\n\nTITLE: Checking Data Replication Across Pools - PowerShell\nDESCRIPTION: These commands retrieve RGS workflow, queue, agent group, hour of business, and holiday set information. The returned data shows only owner pool data. These are used to verify the data replication across pools.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-csRGSWorkflow\nGet-csRGSQueue\nGet-csRGSAgentGroup\nGet-csRGSHourOfBusiness\nGet-csRGSHolidaySet\n```\n\n----------------------------------------\n\nTITLE: Setting ExchangeArchivingPolicy for a Group of Users in Skype for Business Server (PowerShell)\nDESCRIPTION: This PowerShell command sets the ExchangeArchivingPolicy property to ArchivingToExchange for all users homed on a specified Registrar pool (atl-cs-001.litwareinc.com). This command efficiently applies the same archiving policy to a group of users.  It uses Get-CsUser to filter users and Set-CsUser to update the ExchangeArchivingPolicy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-exchange-archiving.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsUser -Filter {RegistrarPool -eq \"atl-cs-001.litwareinc.com\"} | Set-CsUser -ExchangeArchivingPolicy ArchivingToExchange\n```\n\n----------------------------------------\n\nTITLE: Create Dial Scope - PowerShell\nDESCRIPTION: This PowerShell script creates a dial scope for the dial-by-name auto attendant. It finds the group IDs for Sales and Support and creates a dial scope that includes these groups. This limits the directory search scope. It uses `Find-CsGroup` and `New-CsAutoAttendantDialScope` cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\n$salesGroupID = Find-CsGroup -SearchQuery \"Sales\" | % { $_.Id }\n\n$supportGroupID = Find-CsGroup -SearchQuery \"Support\" | % { $_.Id }\n\n$dialScope = New-CsAutoAttendantDialScope -GroupScope -GroupIds @($salesGroupID, $supportGroupID)\n```\n\n----------------------------------------\n\nTITLE: Defining Web Component Paths PowerShell\nDESCRIPTION: Defines paths for the web.config and index.aspx files for both internal and external access for the OcsPsws and Macp web components.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\n$internalOcsPswsPath = \"Web Components\\OcsPsws\\Int\\\"\n$externalOcsPswsPath = \"Web Components\\OcsPsws\\Ext\\\"\n$internalMacpPath = \"Web Components\\Macp\\Int\\\"\n$externalMacpPath = \"Web Components\\Macp\\Ext\\\"\n\n$ocsPswsInternalWebConfigPath = Join-Path -Path $internalOcsPswsPath -ChildPath \"web.config\"\n$ocsPswsExternalWebConfigPath = Join-Path -Path $externalOcsPswsPath -ChildPath \"web.config\"\n$macpInternalIndexAspxPath = Join-Path -Path $internalMacpPath -ChildPath \"index.aspx\"\n$macpExternalIndexAspxPath = Join-Path -Path $externalMacpPath -ChildPath \"index.aspx\"\n```\n\n----------------------------------------\n\nTITLE: Assign Audio Conferencing Routing Policy to User - PowerShell\nDESCRIPTION: This PowerShell command assigns the Audio Conferencing voice routing policy named 'Policy 1' to a specific user, identified by '<User Identity>'.  The policy determines how dial-out calls from meetings organized by that user are routed. Replace <User Identity> with the actual user's identity (e.g., user principal name).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-on-network.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineAudioConferencingRoutingPolicy -Identity \"<User Identity>\" -PolicyName \"Policy 1\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Connectors in Government Cloud Environments (PowerShell)\nDESCRIPTION: This snippet demonstrates how to enable Connectors in Government Cloud Community (GCC) and Government Community Cloud-High (GCCH) environments using the `SetOrganizationConfig` cmdlet within Exchange Online PowerShell. It requires connecting to Exchange Online PowerShell first. The `ConnectorsEnabled` or `ConnectorsEnabledForTeams` parameters are set to `$true` to enable the feature.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/m365-custom-connectors.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSetOrganizationConfig -ConnectorsEnabled $true\nSetOrganizationConfig -ConnectorsEnabledForTeams $true\n```\n\n----------------------------------------\n\nTITLE: Enable Webinar Scheduling via PowerShell\nDESCRIPTION: This PowerShell script allows users with the specified policy to create webinars by setting the `-AllowWebinars` parameter to `Enabled` in the `Set-CsTeamsEventsPolicy` cmdlet. The `<policy name>` placeholder should be replaced with the actual name of the Teams events policy you want to modify. This command requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-webinars.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowWebinars Enabled\n```\n\n----------------------------------------\n\nTITLE: Insert Subnet Data into CqdNetwork Table - SQL\nDESCRIPTION: Inserts subnet information into the CqdNetwork table for Call Quality Dashboard. The Network and UpdatedDate parameters are required. Other parameters like NetworkRange, NetworkNameID and BuildingKey are optional. The Network parameter represents the subnet address. NetworkRange is the CIDR notation for the subnet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/deploy-0.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO [dbo].[CqdNetwork] \n([Network]\n,[NetworkRange]\n,[NetworkNameID]\n,[BuildingKey]\n,[UpdatedDate]\n)\n\nVALUES\n ('172.16.254.0',32,0,1,'2015-11-11')\n```\n\n----------------------------------------\n\nTITLE: Grant Client Policy to Users - PowerShell\nDESCRIPTION: This PowerShell command assigns the 'SalesClientUI' policy to all users in the Sales department. It uses `Get-CsUser` with an LDAP filter to retrieve users from the Sales department and then pipes them to `Grant-CsClientPolicy` to assign the policy.  This assumes an Active Directory attribute 'Department' exists and is populated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -LDAPFilter \"Department=Sales\" | Grant-CsClientPolicy -PolicyName SalesClientUI\n```\n\n----------------------------------------\n\nTITLE: Add a Subnet Location to the Location Database - PowerShell\nDESCRIPTION: This cmdlet adds a subnet location to the Skype for Business Server location database. It uses the `Set-CsLisSubnet` cmdlet with parameters specifying the subnet, description, location, company name, and civic address details. The ELIN can be included in the CompanyName field.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLisSubnet -Subnet 157.56.66.0 -Description \"Subnet 1\" -Location Location1 -CompanyName \"Litware\" -HouseNumber 1234 -HouseNumberSuffix \"\" -PreDirectional \"\" -StreetName 163rd -StreetSuffix Ave -PostDirectional NE -City Redmond -State WA -PostalCode 99123 -Country US\n```\n\n----------------------------------------\n\nTITLE: Verifying On-Premises Skype for Business Users\nDESCRIPTION: This PowerShell script retrieves a list of Skype for Business users that are homed on-premises (HostingProvider -eq \"SRV:\"). It selects the Identity, SipAddress, UserPrincipalName, and RegistrarPool properties. This helps confirm that no users are homed on-premises before proceeding with further attribute clearing or decommissioning steps.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Filter { HostingProvider -eq \"SRV:\"} | Select-Object Identity, SipAddress, UserPrincipalName, RegistrarPool\n```\n\n----------------------------------------\n\nTITLE: Confirm Hosting Provider Configuration on Edge - PowerShell\nDESCRIPTION: This PowerShell cmdlet confirms that the hosting provider configuration has been applied to the Edge Server's local store. Double-checking the information displayed matches the changes committed in the previous steps ensures correct configuration. The `-LocalStore` parameter is used to query the local store of the Edge Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/outlook-web-app.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsHostingProvider -LocalStore\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Server - Command Line - CMD\nDESCRIPTION: This code snippet shows how to set a proxy server for the LOCALSYSTEM using the `bitsadmin` command in the command line. It covers both single proxy server and PAC file configurations. The proxy settings are required for the monitoring agent to communicate with the Pro Management portal if the device is behind a proxy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/enroll-a-device.md#_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nbitsadmin /Util /SetIEProxy LOCALSYSTEM MANUAL_PROXY <proxyserver>:<port> \"\"\n```\n\n----------------------------------------\n\nTITLE: Create Sales Call Queue - PowerShell\nDESCRIPTION: This PowerShell command creates a new call queue named \"Sales\" with specific configurations such as agent alert time, music on hold, overflow settings, timeout settings, routing method, and associated users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Sales\" -AgentAlertTime 15 -AllowOptOut $true -MusicOnHoldAudioFileID $audioFileSalesHoldInQueueMusicID -OverflowAction Forward -OverflowActionTarget $userAdeleID -OverflowThreshold 200 -TimeoutAction Forward -TimeoutActionTarget $userAdeleID -TimeoutThreshold 120 -RoutingMethod Attendant -ConferenceMode $true -User @($userSalesBillID, $userSalesMaryID) -LanguageID \"en-US\"\n```\n\n----------------------------------------\n\nTITLE: Saving and Updating Skype for Business PowerShell Help Offline\nDESCRIPTION: These commands demonstrate how to save the Skype for Business PowerShell help files to a network share using `Save-Help` and then update the help files on a server disconnected from the internet using `Update-Help` with the `-SourcePath` parameter. This is useful for updating help on servers in secure or isolated environments.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/management-shell.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n// Save the help files\n Save-Help -DestinationPath \\\\UpdateShare\\HelpDownload\n// Run Update-Help against the local help files\n Update-Help -Module SkypeforBusiness -SourcePath \\\\UpdateShare\\HelpDownload\n```\n\n----------------------------------------\n\nTITLE: Identifying Unused IP Phones with PowerShell\nDESCRIPTION: This PowerShell snippet imports IP phone inventory data from a CSV file and filters the data to identify phones that have never been used to make a call. It relies on the 'Last activity' column being blank for unused phones and requires the `Import-Csv` and `Where-Object` cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/ip-phone-inventory-report.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$phones = Import-Csv \"C:\\Data\\IP_Phone_Inventory_Report.csv\"\n$phones | Where-Object {$_.\"Last activity\" -eq \"\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring SIP Federated Domains (PowerShell)\nDESCRIPTION: These PowerShell cmdlets configure external access for SIP federated domains by adding them to the allowed domain list. This step is essential for setting up Skype Meeting Broadcast in a hybrid environment as it allows communication with the regional data centers used in Skype for Business Online.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/configure-skype-meeting-broadcast.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAllowedDomain -Identity \"noammeetings.lync.com\"\nNew-CsAllowedDomain -Identity \"emeameetings.lync.com\"\nNew-CsAllowedDomain -Identity \"apacmeetings.lync.com\"\nNew-CsAllowedDomain -Identity \"resources.lync.com\"\n```\n\n----------------------------------------\n\nTITLE: Get Tenant Service Instance using Get-CsTenant cmdlet - PowerShell\nDESCRIPTION: This PowerShell code retrieves the service instance of the tenant using the `Get-CsTenant` cmdlet.  It's used to identify the correct region for the CQD data pipeline when configuring the Power BI report. The ServiceInstance property indicates the region after the '/'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-cqd-historical-reports-v164.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n(Get-CsTenant).ServiceInstance\n\nmicrosoftcommunicationsonline/noam-4a-s7\n```\n\n----------------------------------------\n\nTITLE: CQD URL Filter - Product Filter (Microsoft Teams)\nDESCRIPTION: This snippet demonstrates a complete CQD URL with a Product filter applied for Microsoft Teams. It shows how to encode spaces in the filter name and specify the value as True to focus the report on Teams data.  This is helpful for isolating Teams-specific data within the CQD.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cqd-data-and-reports.md#_snippet_3\n\nLANGUAGE: URL\nCODE:\n```\nhttps://cqd.teams.microsoft.com/spd/#/Dashboard/2624085/2018-9/filter/[AllStreams].[Is%20Teams]|[True]\n```\n\n----------------------------------------\n\nTITLE: Get Specific Response Group Workflow URI - PowerShell\nDESCRIPTION: This PowerShell command retrieves the Name and PrimaryUri (SIP address) for a specific Response Group workflow based on its Name.  It uses the Get-CsRgsWorkflow cmdlet with the -Name parameter to filter for the desired workflow and then Select-Object to specify the properties to display. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/response-group-usage-report.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsRgsWorkflow -Name \"New Ad Campaign\" | Select-Object Name, PrimaryUri\n```\n\n----------------------------------------\n\nTITLE: Export Hybrid Application Endpoint Settings (On-Premises)\nDESCRIPTION: This PowerShell command retrieves settings for on-premises hybrid application endpoints (Sipaddress, DisplayName, ApplicationID, LineUri) and exports them to a CSV file. This serves as a backup before migration and provides data for creating corresponding resources in Microsoft 365. The file is saved at c:\\backup\\HybridEndpoints.csv.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-move-on-prem-endpoints.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsHybridApplicationEndpoint|select Sipaddress, DisplayName, ApplicationID, LineUri |Export-Csv -Path \"c:\\backup\\HybridEndpoints.csv\"\n```\n\n----------------------------------------\n\nTITLE: Get Conferencing Policy Information - PowerShell\nDESCRIPTION: Retrieves information about conferencing policies configured in Skype for Business Server. These policies define features and capabilities available in a conference, such as IP audio/video and maximum attendee count. No specific dependencies are required other than access to the Skype for Business Server Management Shell. The cmdlet returns policy objects with details about the configured settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Creating and Granting Mobility Policy in PowerShell\nDESCRIPTION: This PowerShell snippet creates a new Mobility policy and grants it to a specific user. The policy can be configured to disable Mobility and Call via Work. Requires Skype for Business Server Management Shell. Replace <policy name> with the desired policy name and <user identifier> with the user's identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsMobilityPolicy -Identity <policy name> -EnableMobility $False -EnableOutsideVoice $False\nGrant-CsMobilityPolicy -Identity <user identifier> -PolicyName <policy name>\n```\n\n----------------------------------------\n\nTITLE: Setting Client Policy for Lync VDI Plug-in - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set the EnableMediaRedirection parameter to TRUE for all Lync VDI plug-in users in Skype for Business Server. This setting is crucial for enabling media redirection, which is necessary for the VDI plug-in to function correctly. The cmdlets New-CsClientPolicy and Set-CsClientPolicy are used to manage client policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/deploy-the-lync-vdi-plug-in.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClientPolicy\nSet-CsClientPolicy\n```\n\n----------------------------------------\n\nTITLE: Enabling Meeting Registration via PowerShell\nDESCRIPTION: This PowerShell script enables the meeting registration feature for a specific Teams meeting policy.  It uses the `Set-CsTeamsMeetingPolicy` cmdlet to modify an existing policy, setting the `-AllowMeetingRegistration` parameter to `$True`. This allows users assigned to this policy to require registration for their Teams meetings. The `<policy name>` needs to be replaced with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-meeting-registration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowMeetingRegistration $True\n```\n\n----------------------------------------\n\nTITLE: Set Auto Attendant Languages via Teams Admin Center\nDESCRIPTION: This snippet outlines the steps to set the default and alternate languages for a conferencing bridge using the Microsoft Teams admin center.  It instructs the user to navigate to Meetings > Conference bridges, select the conferencing bridge phone number, select Edit, and then choose the default language for the auto attendant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-audio-conferencing-in-teams.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n1. From the Home, go to **Meetings** > **Conference bridges**.\n2. Select the conferencing bridge phone number, select **Edit**, and then choose the default language.\n```\n\n----------------------------------------\n\nTITLE: New/Set/Remove-CsUserCallingDelegate Cmdlets (Preview)\nDESCRIPTION: This snippet refers to the release (in preview) of the `New-CsUserCallingDelegate`, `Set-CsUserCallingDelegate`, and `Remove-CsUserCallingDelegate` cmdlets. These cmdlets facilitate the management of calling delegates for users in Teams, enabling features such as call forwarding and delegation. They are available in preview mode, so functionality may change.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_142\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsUserCallingDelegate\nSet-CsUserCallingDelegate\nRemove-CsUserCallingDelegate\n```\n\n----------------------------------------\n\nTITLE: Get-CsAdDomain Example - PowerShell\nDESCRIPTION: This snippet provides an example of how to use the Get-CsAdDomain cmdlet with specific parameters. It sets the Domain to 'domain1.contoso.net' and the GlobalSettingsDomainController to 'dc01.domain1.contoso.com'. This configuration is used to explicitly define the domain and the domain controller where global settings are stored, ensuring accurate verification of domain preparation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/help-depwiz/verify-replication-in-the-domain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdDomain -Domain domain1.contoso.net -GlobalSettingsDomainController dc01.domain1.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Modify an Existing Test Device - PowerShell\nDESCRIPTION: This cmdlet enables modification of settings for an existing test device in Skype for Business Server. Allows for adjustments to configurations like scope and update settings. It is essential for managing how updates are applied to test devices during the pre-production testing phase.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/2019/lscp/ms.lync.lscp.ClientDeviceTestMain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTestDevice\n```\n\n----------------------------------------\n\nTITLE: Creating PSTN Gateway with PowerShell\nDESCRIPTION: This PowerShell snippet shows how to create a PSTN gateway configuration using the `New-CsOnlinePSTNGateway` cmdlet. This command configures the gateway's FQDN, listening port, and enables the gateway for Direct Routing.  The `SipSignalingPort` parameter specifies the port used for SIP signaling.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-enable.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CSOnlinePSTNGateway -Fqdn <FDQN registered for the SBC> -Identity <gateway configuration ID> -SipSignalingPort <listening port used> -Enabled $true\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlinePSTNGateway -Fqdn sbc.contoso.com -Enabled $true -SipSignalingPort 5067\n```\n\n----------------------------------------\n\nTITLE: Force Group Policy Update using Command Prompt\nDESCRIPTION: This command forces an immediate refresh of Group Policy on the local computer. It ensures that any newly created or modified Group Policy objects (GPOs) are applied. The command should be executed with administrator privileges.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/QoS-in-Teams-clients.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ngpupdate /force\n```\n\n----------------------------------------\n\nTITLE: Creating Microsoft Teams Rooms USB Setup Disk using CreateSrsMedia.ps1 - Powershell\nDESCRIPTION: This snippet describes how to create a Microsoft Teams Rooms USB setup disk using the CreateSrsMedia.ps1 script. The script requires a Windows ISO obtained from the Volume Licensing Service Center.  It is recommended to note the log file location output by the script in case support is needed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/console.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n1. Download the [CreateSrsMedia.ps1 script](https://go.microsoft.com/fwlink/?linkid=867842).\n2. Run the CreateSrsMedia.ps1 script from an elevated prompt on a Windows machine.\n3. Follow the script's instructions to create a Microsoft Teams Rooms USB setup disk.\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Item\nDESCRIPTION: This JSON snippet represents a sample response payload for a successful Get Item operation. It includes the itemId, userId, content, type, and subItemIds of the retrieved item. The content field contains application-specific data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-item.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"itemId\": 1652,\n\"userId\": 0,\n\"content\": \"{\\\"Title\\\":\\\"All Audio Streams\\\",...}\",\n\"type\": \"application/json\",\n\"subItemIds\": [1653, 1710]\n}\n```\n\n----------------------------------------\n\nTITLE: Recovering from Routing Group Quorum Loss - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to enable a Skype for Business Front End pool to recover from a routing group level quorum loss. It's essential when a pool doesn't have the required 85% of servers running upon restart but isn't in pool-level quorum loss.  It requires the Skype for Business Server PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/high-availability-and-disaster-recovery/high-availability.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-CsPoolRegistrarState -ResetType QuorumLossRecovery\n```\n\n----------------------------------------\n\nTITLE: Get Admin Role Assignment PowerShell\nDESCRIPTION: This PowerShell command retrieves the role assignment for a specific user in Skype for Business Server, which helps determine the user's administrative privileges. The `-Identity` parameter specifies the user's identity, for example, their user principal name or display name. This is essential to ensure that a user has the proper permissions to start or stop services.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-services.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRoleAssignment -Identity \"kenmyer\"`\n```\n\n----------------------------------------\n\nTITLE: Finding Users with Different ExchangeArchivingPolicy (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the display name of users who do *not* have the ExchangeArchivingPolicy property set to UseLyncArchivingPolicy. It utilizes Get-CsUser, Where-Object (with -ne for 'not equal'), and Select-Object to filter and present the user information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-exchange-archiving.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsUser | Where-Object {$_.ExchangeArchivingPolicy -ne \"UseLyncArchivingPolicy\"} | Select-Object DisplayName\n```\n\n----------------------------------------\n\nTITLE: Verifying RBAC Role Assignment - PowerShell\nDESCRIPTION: This command verifies the RBAC roles assigned to a specific user. It uses the Get-CsAdminRoleAssignment cmdlet, passing the user's SamAccountName (Active Directory logon name) via the -Identity parameter.  The output displays the RBAC roles assigned to the specified user, confirming their administrative permissions within Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/delegating-administrative-control.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRoleAssignment  -Identity \"kenmyer\"\n```\n\n----------------------------------------\n\nTITLE: Get RBAC Roles for Specific Cmdlet - PowerShell\nDESCRIPTION: This command retrieves a list of all RBAC roles that are assigned to the `Set-CsClsConfiguration` cmdlet.  It uses the `Get-CsAdminRole` cmdlet to get all RBAC roles and filters the results to only include roles that have cmdlets matching the specified cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Set-CsClsConfiguration\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Setup Permissions - PowerShell\nDESCRIPTION: This PowerShell command tests if the setup permissions are assigned for a specific Active Directory container using the Test-CsSetupPermission cmdlet. It specifies the distinguished name of the container to be checked using the -ComputerOU parameter.  The cmdlet returns 'True' if permissions are correctly set, and 'False' with warnings if not.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/test-admin-topology-rights.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsSetupPermission -ComputerOU \"ou=CsServers,dc=litwareinc,dc=com\"\n```\n\n----------------------------------------\n\nTITLE: Enabling XMPP Synthetic Transaction in PowerShell\nDESCRIPTION: This PowerShell command enables the XMPP synthetic transaction for a specified watcher node configuration. It requires specifying the Identity of the watcher node and the XmppTestReceiverMailAddress, which is a user account at a routable XMPP domain. A corresponding Skype for Business Server rule must exist to route messages to an XMPP gateway.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity pool0.contoso.com -Tests @{Add=\"XmppIM\"} -XmppTestReceiverMailAddress user1@litwareinc.com\n```\n\n----------------------------------------\n\nTITLE: Unassigning a Teams Meeting Policy from Users via Text File\nDESCRIPTION: This snippet shows how to unassign a Teams meeting policy from a list of users specified in a text file. The `Get-Content` cmdlet reads user IDs from the file, and `New-CsBatchPolicyAssignmentOperation` removes the policy. Ensure the Teams PowerShell module is installed and connected.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$user_ids = Get-Content .\\users_ids.txt\nNew-CsBatchPolicyAssignmentOperation -PolicyType TeamsMeetingPolicy -PolicyName $null -Identity $users_ids -OperationName \"Unassign meeting policy\"\n```\n\n----------------------------------------\n\nTITLE: Modernized Grant-Cs<Name>Policy Cmdlets\nDESCRIPTION: This snippet mentions the release of modernized versions of all 75+ `Grant-Cs<Name>Policy` cmdlets (all parameter sets). These cmdlets are expected to function similarly to their remoting counterparts. The rollout is gradual, so some tenants might still see the older versions until the process is complete. This impacts policy assignment in Microsoft Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_135\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-Cs<Name>Policy\n```\n\n----------------------------------------\n\nTITLE: Testing Connectivity to Office Config Service (OCS) - PowerShell\nDESCRIPTION: This cmdlet verifies that a Skype for Business server has connectivity to the Office Config Service (OCS), which is required for the Emergency Mitigation Service (EMS) to download and apply the latest mitigations. It checks if the server can reach the OCS endpoint.  The expected output indicates either a successful connection or a failure message.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/emergency-mitigation-service-overview.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsMitigationServiceConnectivity\n```\n\n----------------------------------------\n\nTITLE: Defining Network Names with SQL\nDESCRIPTION: This SQL snippet shows how to insert a new network name into the `CqdNetworkName` table. The `NetworkName` parameter is required, and the `NetworkType` parameter is optional but recommended.  This allows for filtering based on different types of networks within the organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/deploy-0.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO [dbo].[CqdNetworkName] \n( [NetworkName]\n,[NetworkType]\n )\nVALUES\n('VPN','VPN') \n```\n\n----------------------------------------\n\nTITLE: Creating CDR Configuration using New-CsCdrConfiguration (PowerShell)\nDESCRIPTION: This cmdlet creates a new Call Detail Recording (CDR) configuration for a specified site in Skype for Business. The `-Identity` parameter specifies the site (e.g., `site:Redmond`), and the `-EnableCDR` parameter determines whether CDR is enabled for the site.  In this example, CDR is disabled (`$False`).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsCdrConfiguration -Identity site:Redmond -EnableCDR $False\n```\n\n----------------------------------------\n\nTITLE: Enable Watermark for Screen Sharing using PowerShell\nDESCRIPTION: This PowerShell snippet enables the watermark feature for content shared on screen during Teams meetings.  It uses the `Set-CsTeamsMeetingPolicy` cmdlet to modify the global meeting policy and sets the `AllowWatermarkForScreenSharing` parameter to `$True`.  This allows meeting organizers to apply a watermark to shared content, displaying the participant's email address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/watermark-meeting-content-video.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -AllowWatermarkForScreenSharing $True\n```\n\n----------------------------------------\n\nTITLE: Modify Dial-In Conferencing Access Number - PowerShell\nDESCRIPTION: Modifies the property values of an existing dial-in conferencing access number in Skype for Business Server. Dial-in conferencing allows users to join the audio portion of a conference using a phone. Requires identifying the access number to modify and specifying which parameters to change. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_37\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Sample Building Data Row\nDESCRIPTION: This snippet provides a sample row of building data, demonstrating the required format for a .tsv or .csv file to be uploaded to the Call Quality Dashboard (CQD). The sample illustrates the order, data types, and delimiters required for each column, adhering to the defined building data file format.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/CQD-upload-tenant-building-data.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n192.168.1.0,USA/Seattle/SEATTLE-SEA-1,26,SEATTLE-SEA-1,Contoso,IT Termination,Engineering,Seattle,98001,US,WA,MSUS,1,0,0\n```\n\n----------------------------------------\n\nTITLE: Creating a New Push Notification Configuration (New-CsPushNotificationConfiguration)\nDESCRIPTION: This command creates a new push notification configuration with the specified identity and settings. It enables or disables the Apple Push Notification Service (APNS) and Microsoft Push Notification Service (MPNS). Key parameters include -Identity, -EnableApplePushNotificationService, and -EnableMicrosoftPushNotificationService to customize the configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_39\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsPushNotificationConfiguration -Identity \"site:Redmond\" -EnableApplePushNotificationService $True -EnableMicrosoftPushNotificationService -$True\n```\n\n----------------------------------------\n\nTITLE: Disable Teams Fallback Mode Registry Setting\nDESCRIPTION: This registry key setting controls whether Teams uses fallback mode (unoptimized audio/video) when a user connects from an unsupported endpoint. Setting the value to 1 disables fallback mode, while setting it to 2 enables audio-only mode.  If the value is absent or set to 0, fallback mode is enabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Teams\\DisableFallback`\n`HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\Teams\\DisableFallback`\n```\n\n----------------------------------------\n\nTITLE: Allow User to Override Real-time Captions in Global Policy using PowerShell\nDESCRIPTION: This PowerShell script allows users to turn on real-time captions for calls in the global calling policy in Microsoft Teams. It uses the `Set-CsTeamsCallingPolicy` cmdlet to set the `-LiveCaptionsEnabledTypeForCalling` parameter to `DisabledUserOverride`.  This gives the user the option to enable or disable real-time captions during a call.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-recording-transcription-captions.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -LiveCaptionsEnabledTypeForCalling DisabledUserOverride\n```\n\n----------------------------------------\n\nTITLE: Enable External Archiving Policy - PowerShell\nDESCRIPTION: This PowerShell snippet enables the archiving of external communication sessions for a specified archiving policy. The `Set-CsArchivingPolicy` cmdlet modifies the policy with the given `Identity`, setting the `ArchiveExternal` parameter to `$True`.  This configures the system to archive external communications according to the defined policy. The policy identity in this example is set to \"global\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/change-an-existing-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingPolicy -Identity \"global\" -ArchiveExternal $True\n```\n\n----------------------------------------\n\nTITLE: Enabling LBR for Network Sites with PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to enable Location-Based Routing (LBR) for network sites using the `Set-CsTenantNetworkSite` cmdlet. This step is crucial for enforcing routing restrictions based on the user's network location.  The `-Identity` parameter specifies the site ID, and `-EnableLocationBasedRouting` enables or disables LBR.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-enable.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantNetworkSite -Identity <site ID> -EnableLocationBasedRouting <$true|$false>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantNetworkSite -Identity \"Delhi\" -EnableLocationBasedRouting $true\nSet-CsTenantNetworkSite -Identity \"Hyderabad\" -EnableLocationBasedRouting $true\n```\n\n----------------------------------------\n\nTITLE: CQD URL Filter - Tenant ID Example\nDESCRIPTION: This snippet demonstrates a complete CQD URL with a filter applied for a specific tenant ID.  It showcases how to combine the base URL, trending month, and the filter parameter to create a direct link to a filtered CQD report. Replace [TENANTID] with the actual tenant ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cqd-data-and-reports.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\nhttps://cqd.teams.microsoft.com/cqd/#/1234567/2018-08/filter/[AllStreams].[Second Tenant Id]|[TENANTID]\n```\n\n----------------------------------------\n\nTITLE: Remove QoE Configuration Settings for a Specific Site - PowerShell\nDESCRIPTION: This PowerShell command removes the Quality of Experience (QoE) configuration settings that are specifically applied to the 'Redmond' site. It targets settings configured at the site scope, which override global settings for that particular location. This command uses the Remove-CsQoEConfiguration cmdlet with the -Identity parameter to specify the site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/delete-qoe-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsQoEConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Set eCDN Provider to Ramp - PowerShell\nDESCRIPTION: This PowerShell command configures Ramp as the third-party video distribution provider for Teams meetings. It utilizes the `Set-CsTeamsMeetingBroadcastConfiguration` cmdlet to set `AllowSdnProviderForBroadcastMeeting` to `$True`, `SdnProviderName` to `ramp`, and includes the `SdnRuntimeConfiguration` parameter with the configuration provided by Ramp.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/streaming-ecdn-enterprise-content-delivery-network.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastConfiguration -AllowSdnProviderForBroadcastMeeting $True -SdnProviderName ramp -SdnRuntimeConfiguration \"{Configuration provided by RAMP}\"\n```\n\n----------------------------------------\n\nTITLE: Disable Copilot for B2B Members - PowerShell\nDESCRIPTION: This PowerShell snippet disables the 'Allow Copilot for B2B members' setting.  It uses the `Set-CsTeamsMultiTenantOrganizationConfiguration` cmdlet with the `-Identity Global` parameter to target the global configuration and sets the `-CopilotFromHomeTenant` parameter to `Disabled`. This prevents B2B members from using Copilot in meetings hosted by your organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/copilot-mto.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMultiTenantOrganizationConfiguration -Identity Global -CopilotFromHomeTenant Disabled  \n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Watcher Node Configuration - PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a new watcher node configuration using the New-CsWatcherNodeConfiguration cmdlet. It specifies the TargetFqdn, PortNumber, and TestUsers. It creates a watcher node with default settings and synthetic transactions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsWatcherNodeConfiguration -TargetFqdn \"atl-cs-001.litwareinc.com\" -PortNumber 5061 -TestUsers @{Add= \"sip:watcher1@litwareinc.com\",\"sip:watcher2@litwareinc.com\", \"sip:watcher3@litwareinc.com\"}\n```\n\n----------------------------------------\n\nTITLE: Configure an existing Persistent Chat Category - PowerShell\nDESCRIPTION: This PowerShell example configures an existing category named 'testCat'. It adds user1@contoso.com and a container to the AllowedMembers, denies user2@contoso.com from accessing the rooms, and adds user1@contoso.com as a Creator. The Identity parameter specifies the category to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/categories.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatCategory -Identity testCat -AllowedMembers @{Add=\"sip:user1@contoso.com\", \"CN=container,DC=contoso,DC=com\"}  -DeniedMembers @{Add=\"sip:user2@contoso.com\"}\nSet-CsPersistentChatCategory -Identity testCat -Creators @{Add=\"sip:user1@contoso.com\"}\n```\n\n----------------------------------------\n\nTITLE: Get Client PIN Policy Info - PowerShell\nDESCRIPTION: Retrieves information about the client personal identification number (PIN) policies configured for use in an organization. PIN authentication enables users to access Skype for Business Server by providing a PIN instead of a user name and password. There are no specific dependencies other than having the Skype for Business Server PowerShell module installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_41\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Bulk Deployment of New Teams via UNC Path\nDESCRIPTION: This command installs the new Teams client using teamsbootstrapper.exe and an MSIX package located on a UNC path. This allows for a centralized installation source. Similar to the local path method, the -p flag likely initiates the installation and -o defines the path to the MSIX package on the network.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_4\n\nLANGUAGE: Command Line\nCODE:\n```\n.\teamsbootstrapper.exe -p -o \"\\\\unc\\path\\to\\teams.msix\"\n```\n\n----------------------------------------\n\nTITLE: Verifying User Synchronization to the Cloud with PowerShell\nDESCRIPTION: This PowerShell command checks if a user's information has been successfully synchronized from on-premises Skype for Business to the cloud using Microsoft Entra Connect.  The `Get-CsOnlineUser` cmdlet retrieves user information, and the `HostingProvider` property is examined to confirm synchronization. A value of \"SRV:\" indicates successful synchronization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/skype-for-business-online-retirement.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Getting Backup Relationship for Pool - PowerShell\nDESCRIPTION: This command retrieves information about the backup relationship configured for a specific Front End pool.  The `-PoolFQDN` parameter specifies the fully qualified domain name (FQDN) of the pool. The output describes how the specified pool interacts with its backup pool within the Backup Service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/configuring-and-monitoring-the-backup-service.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPoolBackupRelationship -PoolFQDN \\<poolFQDN>\n```\n\n----------------------------------------\n\nTITLE: Enable SIP Gateway via PowerShell using Set-CsTeamsCallingPolicy\nDESCRIPTION: This PowerShell cmdlet enables SIP Gateway for users by modifying their Teams calling policy.  It sets the `-AllowSIPDevicesCalling` attribute to `True` to allow users to use SIP devices. Requires the Teams PowerShell module to be installed and connected to your Microsoft 365 tenant.  Policy propagation can take up to 24 hours.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-configure.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity <Policy Name> -AllowSIPDevicesCalling $True\n```\n\n----------------------------------------\n\nTITLE: Modifying an Existing CLS Provider\nDESCRIPTION: This PowerShell code snippet shows how to update an existing CLS provider definition using the `New-CsClsProvider` cmdlet, reassigning it to the same variable name. This example changes the level to \"Debug\" and flags to \"TF_Connection, TF_Diag\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$LyssProvider = New-CsClsProvider -Name \"Lyss\" -Type \"WPP\" -Level \"Debug\" -Flags \"TF_Connection, TF_Diag\"\n```\n\n----------------------------------------\n\nTITLE: Add Normalization Rule for Organization Extension Dialing\nDESCRIPTION: This script adds a normalization rule to an existing tenant dial plan named RedmondDialPlan. The rule normalizes 3-digit extensions to a full phone number.  This script uses `InMemory` to avoid creating a persistent global rule.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$nr1=New-CsVoiceNormalizationRule -Parent Global -Description 'Organization extension dialing' -Pattern '^(\\\\d{3})$' -Translation '+14255551$1' -Name NR1 -IsInternalExtension $false -InMemory\nSet-CsTenantDialPlan -Identity RedmondDialPlan -NormalizationRules @{add=$nr1}\n```\n\n----------------------------------------\n\nTITLE: Create eDiscovery Site\nDESCRIPTION: This PowerShell snippet creates a new eDiscovery site in SharePoint. It retrieves the \"eDiscovery Center\" template and then creates a new site based on that template with the specified URL, owner, and name. This site is used to manage eDiscovery cases and searches.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/sharepoint-to-search-for-archived-data.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$template = Get-SPWebTemplate | Where-Object {$_.Title -eq \"eDiscovery Center\"}\nNew-SPSite -Url \"https://atl-sharepoint-001/sites/discovery\" -OwnerAlias \"kenmyer\" -Template $Template -Name \"Discovery Center\"\n```\n\n----------------------------------------\n\nTITLE: Run Teams PSTN Diagnostic in Microsoft 365 Admin Center\nDESCRIPTION: This snippet instructs Microsoft 365 admin users to run a diagnostic tool to verify a user is properly configured to make or receive PSTN calls. The tool performs verifications related to PSTN calling setup within the tenant. This feature is not available for specific Microsoft 365 environments.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-calling-plans.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nSelect Run Tests, as follows. This will populate the diagnostic in the Microsoft 365 Admin Center.\n>> [!div class=\"nextstepaction\"]\n>> [Run Tests: Teams PSTN](https://aka.ms/TeamsPSTNDiag)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for User Settings\nDESCRIPTION: This JSON snippet shows the structure of the response when retrieving user settings. It includes the user ID, setting key, and value. The `userId` identifies the user, `key` represents the setting name, and `value` specifies the setting's value (e.g., \"true\" or \"false\").\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-user-settings.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\n\"userId\": 6,\n\"key\": \"ShowDescriptions\",\n\"value\": \"true\"\n},\n{\n\"userId\": 6,\n\"key\": \"ShowTimeStamps\",\n\"value\": \"true\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Block a Number Range via PowerShell\nDESCRIPTION: This PowerShell command creates a new inbound blocked number pattern to block calls from a specified number range. It uses regular expressions to define the pattern, enabling the pattern and adding a description for clarity. The example blocks numbers from 1 (312) 555-0000 to 1 (312) 555-9999.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsInboundBlockedNumberPattern -Name \"BlockRange1\" -Enabled $True -Description \"Block Contoso\" -Pattern \"^\\+?1312555\\d{4}$\"\n```\n\n----------------------------------------\n\nTITLE: Assign Emergency Calling Policy to Network Site (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to assign a custom emergency calling policy to a specific network site in Microsoft Teams.  It uses the `Set-CsTenantNetworkSite` cmdlet to update the network site's configuration with the specified policy.  The script requires the `identity` parameter to identify the network site and the `EmergencyCallingPolicy` parameter to specify the policy to assign.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-emergency-calling-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantNetworkSite -identity \"site1\" -EmergencyCallingPolicy \"Contoso Emergency Calling Policy 1\"\n```\n\n----------------------------------------\n\nTITLE: Remove Registrar Security Settings for Site Scope - PowerShell\nDESCRIPTION: This PowerShell command removes all Registrar security settings applied to the Registrar service at the site scope.  It uses `Get-CsProxyConfiguration` to retrieve all Registrar configurations with a service type of 'Registrar' and then pipes them to `Remove-CsProxyConfiguration` for deletion.  The command requires the Skype for Business Server Management Shell to be installed and configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/registrar-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsProxyConfiguration -Filter \"service:Registrar:*\" | Remove-CsProxyConfiguration\n```\n\n----------------------------------------\n\nTITLE: Set Teams Update Management Policy using PowerShell\nDESCRIPTION: This snippet shows how to use the `Set-CsTeamsUpdateManagementPolicy` cmdlet to configure Teams update policies in PowerShell.  This allows administrators to control which users have access to preview features. No specific dependencies are explicitly listed but requires the Teams PowerShell module to be installed and configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/public-preview-doc-updates.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nYou can also set the policy using the PowerShell `Set-CsTeamsUpdateManagementPolicy` cmdlet.\n```\n\n----------------------------------------\n\nTITLE: Assign Voice Routing Policy to User - PowerShell\nDESCRIPTION: This PowerShell command assigns the 'No Restrictions' voice routing policy to a specific user (user2@contoso.com). This policy determines how the user's outbound calls are routed, based on the associated PSTN usages and voice routes.  You can verify that the voice policy is assigned with the `Get-CsOnlineUser` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineVoiceRoutingPolicy -Identity \"user2@contoso.com\" -PolicyName \"No Restrictions\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser \"user2@contoso.com\" | Select OnlineVoiceRoutingPolicy\n```\n\n----------------------------------------\n\nTITLE: Create PSTN Gateway via PowerShell\nDESCRIPTION: This PowerShell command creates a new Online PSTN Gateway object, which represents the connection between the SBC and the Microsoft Teams tenant. It requires specifying the FQDN of the SBC, the SIP signaling port, the maximum number of concurrent sessions, and enabling the gateway.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-connect-the-sbc.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlinePSTNGateway -Fqdn <SBC FQDN> -SipSignalingPort <SBC SIP Port> -MaxConcurrentSessions <Max Concurrent Sessions the SBC can handle> -Enabled $true\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic Screen Sharing and Audio - Teams Rooms on Windows - XML\nDESCRIPTION: This XML snippet configures several HDMI input settings on a Teams Rooms on Windows device. It disables automatic screen sharing into Teams meetings, prevents HDMI content from being duplicated on dual screens, and disables HDMI ingest audio sharing. These settings can be adjusted to customize the HDMI input behavior.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/mtr-home-refresh.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<AutoScreenShare>0</AutoScreenShare>\n<DuplicateIngestDefault>false</DuplicateIngestDefault>\n<DisableTeamsAudioSharing>true</DisableTeamsAudioSharing>\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Providers to a CLS Scenario\nDESCRIPTION: This PowerShell code snippet shows how to add multiple providers to an existing CLS scenario using the `Set-CsClsScenario` cmdlet and the `Add` directive. Each provider being added must have been previously defined using `New-CsClsProvider`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClsScenario -Identity \"site:Redmond/RedmondLyssInfo\" -Provider @{Add=$ABSProvider, $CASProvider, S4Provider}\n```\n\n----------------------------------------\n\nTITLE: Set Autodiscover Service URI (Exchange)\nDESCRIPTION: This PowerShell command sets the Autodiscover Service Internal URI for the Exchange Server.  It configures the Autodiscover service, which is essential for client applications to automatically discover Exchange Server settings. Replace \"https://autodiscover.litwareinc.com/autodiscover/autodiscover.xml\" with the actual URI of your Autodiscover service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/integrate-with-exchange/integrate-with-exchange.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ClientAccessServer | Set-ClientAccessServer -AutoDiscoverServiceInternalUri \"https://autodiscover.litwareinc.com/autodiscover/autodiscover.xml\"\n```\n\n----------------------------------------\n\nTITLE: Message Type: BACKCHAT XML Example\nDESCRIPTION: This XML snippet demonstrates a 'BACKCHAT' message type, indicating a user's request for chat history content. The content attribute contains a reference to the requested historical data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<Message type=\"BACKCHAT\" content=\"backchatcontent\" id=\"0\">\n  <Sender UserName=\"TestUser kazuto\" id=\"10\" email=\"kazuto@litwareinc.com\" internal=\"true\" uri=\"kazuto@litwareinc.com\" /> \n  <DateTimeUTC since1970=\"1206034385284\" string=\"2008-03-20T17:33:05.2841594Z\" long=\"633416311852841594\" /> \n</Message>\n```\n\n----------------------------------------\n\nTITLE: Testing Watcher Node Configuration - PowerShell\nDESCRIPTION: This command tests the configuration of each watcher node in the deployment. The `Test-CsWatcherNodeConfiguration` cmdlet verifies that the required Registrar role is installed, registry key is created, servers are running the correct version of Skype for Business Server, ports are configured correctly, and assigned test users have the required credentials.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsWatcherNodeConfiguration\n```\n\n----------------------------------------\n\nTITLE: Create Trusted Application Pool using PowerShell\nDESCRIPTION: This PowerShell command creates a trusted application pool for Skype for Business Server. It's used when configuring Trusted Server authentication for watcher nodes inside the perimeter network. Parameters specify the identity, registrar, and other settings for the trusted application pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTrustedApplicationPool -Identity atl-watcher-001.litwareinc.com -Registrar atl-cs-001.litwareinc.com -ThrottleAsServer $True -TreatAsAuthenticated $True -OutboundOnly $False -RequiresReplication $True -ComputerFqdn atl-watcher-001.litwareinc.com -Site Redmond\n```\n\n----------------------------------------\n\nTITLE: Creating New Emergency Number with Dial String - PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a new emergency number with a specific dial string using the `New-CsEmergencyNumber` cmdlet in PowerShell. The created emergency number is stored in the `$a` variable for later use, such as associating it with a location policy.  The example uses the dial string 911.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-multiple-emergency-numbers.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n> $a = New-CsEmergencyNumber -DialString 911\n```\n\n----------------------------------------\n\nTITLE: Enable Attendee Identity Masking in Teams Meeting Policy (PowerShell)\nDESCRIPTION: This PowerShell script enables the `-AttendeeIdentityMasking` setting in a specific Teams meeting policy. When enabled, attendee names are always hidden in meetings and webinars created by organizers with this policy. Replace `<policy name>` with the actual name of the Teams meeting policy you want to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/hide-attendee-names.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AttendeeIdentityMasking Enabled\n```\n\n----------------------------------------\n\nTITLE: Get Application Server Audio Port Ranges - PowerShell\nDESCRIPTION: This PowerShell command retrieves the audio port range configured for an Application server. It uses the `Get-CsService` cmdlet, filtering for Application servers, and selects the Identity, AudioPortStart, and AudioPortCount properties to display the relevant information. This allows administrators to verify the audio port configuration on Application Servers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-conferencing-application-and-mediation-servers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsService -ApplicationServer | Select-Object Identity, AudioPortStart, AudioPortCount\n```\n\n----------------------------------------\n\nTITLE: Adding a Skype for Business Online Hosting Provider - PowerShell\nDESCRIPTION: This PowerShell code adds a new hosting provider for Skype for Business Online. It requires a unique identifier, sets the `Enabled` parameter to `$True`, specifies the FQDN for the Access Server used by the hosting provider, and sets the `VerificationLevel` to `UseSourceVerification`. The sipfed.online.lync.com is used as ProxyFQDN.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsHostingProvider -Identity <unique identifier for hosting provider> -Enabled $True -ProxyFQDN <FQDN for the Access Server used by the hosting provider> -VerificationLevel UseSourceVerification\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsHostingProvider -Identity \"SkypeOnline\" -Enabled $True -ProxyFQDN \"sipfed.online.lync.com\" -VerificationLevel UseSourceVerification\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Upgrade Policy using PowerShell\nDESCRIPTION: This PowerShell command grants a specific Teams upgrade policy (SfBWithTeamsCollab) to a user. It also demonstrates the warning message displayed if the user currently has enabled settings for chat, calling, or meeting scheduling policies that will be ignored due to the granted TeamsUpgradePolicy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-experience-and-conformance-to-coexistence-modes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -Identity user1@contoso.com -PolicyName SfBWithTeamsCollab\n```\n\n----------------------------------------\n\nTITLE: Set Conferencing PIN Policy in Skype for Business\nDESCRIPTION: Modifies the existing conferencing PIN policy settings.  Administrators can use this cmdlet to adjust parameters such as minimum PIN length, maximum logon attempts, PIN expiration, and whether common patterns are allowed. Requires specifying the Identity and parameters to change.  Returns the modified CsPinPolicy object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Disable Meeting Room - PowerShell\nDESCRIPTION: Disables a Skype for Business Server meeting room.  A meeting room is a conferencing device designed to address video conferencing and collaboration scenarios in small conference rooms. When you disable a meeting room object you remove all the Skype for Business Server-specific Active Directory attributes assigned to the user account that represents the meeting room.  The Active Directory user account itself is not deleted.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_46\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisable-CsMeetingRoom\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Permission Roles with PowerShell\nDESCRIPTION: This snippet demonstrates how to use PowerShell to define chat permission roles using the `ChatPermissionRole` policy.  The policy accepts values of `Full`, `Limited`, or `Restricted`. This policy is part of the `CsTeamsMessagingPolicy`. This is a necessary prerequisite to enabling supervised chat.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/supervise-chats-edu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTo set your users’ chat permission role, use the **Chat permissions** **role** policy found within your Messaging policy options in the Teams admin portal. You can use PowerShell to define roles using the ChatPermissionRole policy with the values Full, Limited, or Restricted. This policy is under CsTeamsMessagingPolicy.\n```\n\n----------------------------------------\n\nTITLE: Creating a Text-to-Speech Prompt in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a text-to-speech prompt using the `New-CsRgsPrompt` cmdlet in PowerShell. The `-TextToSpeechPrompt` parameter specifies the text that will be converted to speech and played to the caller. The resulting prompt object is then saved in a variable for later use.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$promptWM = New-CsRgsPrompt -TextToSpeechPrompt \"<text for TTS prompt>\"\n```\n\n----------------------------------------\n\nTITLE: Failover Monitoring Database using PowerShell\nDESCRIPTION: This PowerShell command initiates a failover of the specified monitoring database to its mirror.  It requires the PoolFqdn, DatabaseType, and NewPrincipal parameters.  The PoolFqdn identifies the pool the database belongs to, DatabaseType specifies that it's a monitoring database, and NewPrincipal designates the mirror as the new primary.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/monitoring.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsDatabaseFailover -PoolFqdn atl-cs-001.litwareinc.com -DatabaseType \"Monitoring\" -NewPrincipal \"Mirror\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Attachment for Planner Task - HTTP\nDESCRIPTION: This snippet demonstrates how to define the attachment for a Planner task, including the reference URL, alias, preview priority, and type. It specifies the properties required in the 'references' section of the request body for creating an app-powered task.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/app-powered-tasks-in-planner.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n        \"references\": { \n            \"{reference-URL}\": { \n            \"@odata.type\": \"microsoft.graph.plannerExternalReference\", \n            \"alias\": \"{destination app name}\", \n            \"previewPriority\": \" !\", \n            \"type\": \"TeamsHostedApp\" \n         } \n       } \n```\n\n----------------------------------------\n\nTITLE: Remove a Chat Room - PowerShell\nDESCRIPTION: This PowerShell command removes a specific chat room.  It requires the Identity of the chat room to be removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/chat-rooms.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPersistentChatRoom -Identity \"atl-gc-001.contoso.com\\RedmondChatRoom\"\n```\n\n----------------------------------------\n\nTITLE: Disabling CAC with Set-CsNetworkConfiguration - PowerShell\nDESCRIPTION: This PowerShell command disables Call Admission Control (CAC) by setting the EnableBandwidthPolicyCheck parameter to 0. This removes the enforcement of bandwidth policies in the Skype for Business Server environment. It requires the Skype for Business Server Management Shell to be initialized.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-call-admission-control.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsNetworkConfiguration -EnableBandwidthPolicyCheck 0\n```\n\n----------------------------------------\n\nTITLE: Deleting Push Notification Configurations (Remove-CsPushNotificationConfiguration)\nDESCRIPTION: This command removes a specified push notification configuration. The -Identity parameter identifies the configuration to be removed. Use with caution, as deletion is permanent and affects push notifications for the specified scope.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_41\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsPushNotificationConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Assigning a Teleconference Policy - PowerShell\nDESCRIPTION: This PowerShell snippet assigns a specific Teams Room Video Teleconferencing policy to a Teams Rooms resource account. It requires the Teams PowerShell module to be installed and connected.  Replace `<resource account UPN>` with the actual User Principal Name of the Teams Rooms resource account and `TurnOnSIPH323` with the name of the policy you wish to assign.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/meetings-with-sip-h323-devices.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsRoomVideoTeleConferencingPolicy -Identity \"<resource account UPN>\" -PolicyName \"TurnOnSIPH323\"\n```\n\n----------------------------------------\n\nTITLE: Verifying SEFAUtil Functionality in Skype for Business Server\nDESCRIPTION: This command verifies the correct operation of SEFAUtil by displaying the call forwarding settings of a specified user. The user's SIP address and the Skype for Business Server/Pool FQDN must be provided as arguments. It must be run from a command prompt with administrator privileges.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe <user SIP address> /server:<Skype for Business Server/Pool FQDN>\n```\n\n----------------------------------------\n\nTITLE: Updating a Region Route using Set-CsNetworkInterRegionRoute in PowerShell\nDESCRIPTION: This cmdlet updates the properties of an existing network inter-region route in Skype for Business. It requires the Identity parameter to identify the route to modify, along with parameters specifying the properties to update, such as NetworkRegionLinkIDs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_36\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsNetworkInterRegionRoute -Identity NA_APAC_Route -NetworkRegionLinkIDs \"NA_SA,SA_APAC\"\n```\n\n----------------------------------------\n\nTITLE: Enabling CsComputer After CsAuthConfig Changes\nDESCRIPTION: This snippet shows the command required after any changes done with Set-CsAuthConfig to apply these new configuration settings on each computer within the Skype for Business Server deployment. This command ensures that the new authentication settings take effect across the environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/modern-authentication/turn-on-modern-auth.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-CsComputer\n```\n\n----------------------------------------\n\nTITLE: Get Response Group Queues - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves a list of Response Group queues. It is used to verify that all queues have been successfully migrated from the legacy environment. No specific parameters are required for this cmdlet to retrieve all queues.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-response-groups.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsRgsQueue\n```\n\n----------------------------------------\n\nTITLE: Get Subnets for Region with Get-CsNetworkSite (PowerShell) and Where-Object\nDESCRIPTION: This command retrieves all network sites and filters them to find sites associated with a specific network region ID (AKR in this case). It demonstrates how to find related objects using properties.  It utilizes `Get-CsNetworkSite` and pipes the result to `Where-Object` for filtering.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsNetworkSite | Where-Object {$_.NetworkRegionID -eq \"AKR\"}\n```\n\n----------------------------------------\n\nTITLE: Get RBAC roles for Test-CsOUPermission - PowerShell\nDESCRIPTION: This command retrieves all RBAC roles that have permission to run the Test-CsOUPermission cmdlet. It uses Get-CsAdminRole to retrieve all roles and then filters them based on whether the Cmdlets property contains \"Test-CsOUPermission\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/test-admin-permissions.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Test-CsOUPermission\"}\n```\n\n----------------------------------------\n\nTITLE: Enable Spatial Audio in Front Row via XML - Teams Rooms\nDESCRIPTION: This XML snippet enables spatial audio in Front Row for Teams Rooms on Windows. Spatial audio is off by default and requires Teams-certified stereo speakers for the best experience. The feature can be enabled using the following XML tag.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-row.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<IsSpatialAudioEnabled>true</IsSpatialAudioEnabled>\n```\n\n----------------------------------------\n\nTITLE: Importing Management Pack using Operations Manager Shell - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to import a System Center Operations Manager management pack using the Import-SCOMManagementPack cmdlet. It requires the Operations Manager Shell to be open and the correct path to the management pack file. This command provides detailed error information in case the import fails.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/configure-the-primary-2019.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-SCOMManagementPack -FullName \"D:\\MP\\Microsoft.LS.2019.Monitoring.ActiveMonitoring.mp\"\n```\n\n----------------------------------------\n\nTITLE: Get Teams SIP Gateway Service Principal - Azure AD Module\nDESCRIPTION: This snippet retrieves the Teams SIP Gateway service principal using the Azure AD module. It is required for bulk device sign-in scenarios. It filters based on the AppId. If no output is returned the service principal does not exist and should be created. It requires the AzureAD module to be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AzureADServicePrincipal -Filter \"AppId eq '61c8fd69-c13e-4ee6-aaa6-24ff71c09bca\n```\n\n----------------------------------------\n\nTITLE: Configuring App Permission Policies for Lists\nDESCRIPTION: This snippet outlines the steps to allow or block specific users from using the Lists app. It requires ensuring the Lists app is enabled organization-wide and then creating and assigning a custom app permission policy to the targeted users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-lists-app.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nTo allow or block specific users in your organization from using Lists, make sure Lists is turned on for your organization on the [Manage apps](manage-apps.md) page, and then create a custom policy for app permissions and assign it to those users. To learn more, see [Use app permission policies to control user access to apps](teams-app-permission-policies.md).\n```\n\n----------------------------------------\n\nTITLE: Getting Web Service Configuration Details in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet retrieves details for a specific web service configuration in Skype for Business based on the provided Identity. The Identity parameter specifies the scope of the web service configuration to retrieve. The output shows the settings for the specified web service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsWebServiceConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Granting Voice/Face Enrollment Override to Custom Policy - PowerShell\nDESCRIPTION: This PowerShell snippet grants a custom Teams meeting policy the ability to override user settings for voice and face enrollment. It enables enrollment for users assigned to the specified policy. `<PolicyName>` should be replaced with the actual name of the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -Identity <PolicyName> -EnrollUserOverride Enabled\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Meeting Branding Policy to a Group - PowerShell\nDESCRIPTION: This PowerShell snippet assigns a meeting theme policy to a specific group.  It uses the `Grant-CsTeamsMeetingBrandingPolicy` cmdlet, specifying the group's email address and the policy name to apply. The `Rank` parameter is used to define the policy's priority if multiple policies are assigned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-themes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingBrandingPolicy -Group group@contoso.com -PolicyName \"Policy Test\" -Rank 1\n```\n\n----------------------------------------\n\nTITLE: Create AppLocker Policy for All DLLs in a Directory - PowerShell\nDESCRIPTION: This PowerShell command creates an AppLocker policy for all DLLs within a specified directory recursively.  It uses `Get-AppLockerFileInformation` to gather file details, creates a new policy with publisher and hash rules, and outputs the policy to an XML file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-meeting-addin-security-with-outlook.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AppLockerFileInformation -Directory  .\\Microsoft\\TeamsMeetingAddin\\1.0.23089.2 -Recurse | New-AppLockerPolicy -Verbose -RuleType Publisher, Hash -User Everyone -RuleNamePrefix TeamsMeetingAddin -AllowWindows -Xml | Out-File .\\TMA.xml\n```\n\n----------------------------------------\n\nTITLE: View all PIN policies using Get-CsPinPolicy - PowerShell\nDESCRIPTION: This PowerShell command retrieves and displays information about all PIN policies configured in Skype for Business Server. It uses the Get-CsPinPolicy cmdlet without any specific parameters to return all policies. The output includes details like Identity, Description, MinPasswordLength, PINHistoryCount, AllowCommonPatterns, PINLifetime, and MaximumLogonAttempts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/view-pin-policy-information.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Assign Direct Routing Number to Resource Account - PowerShell\nDESCRIPTION: This PowerShell command assigns a Direct Routing or hybrid phone number to an existing resource account in a Microsoft Teams environment. Replace `appinstance01@contoso.com` with the actual identity of the resource account and `+14250000000` with the Direct Routing phone number you want to assign. This is specifically for assigning numbers in Direct Routing or Hybrid scenarios.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-onprem-ra.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineApplicationInstance -Identity appinstance01@contoso.com -OnpremPhoneNumber +14250000000\n```\n\n----------------------------------------\n\nTITLE: Disabling Voicemail Routing using PowerShell\nDESCRIPTION: This PowerShell script disables the routing of inbound calls to voicemail for users by modifying the Global Teams Calling Policy.  It uses the `Set-CsTeamsCallingPolicy` cmdlet with the `-AllowVoicemail` parameter set to `AlwaysDisabled`. This prevents calls from being forwarded to voicemail, regardless of user-specific call forwarding settings. It requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-phone-system-voicemail.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -AllowVoicemail AlwaysDisabled\n```\n\n----------------------------------------\n\nTITLE: CLS Logging Search with Start Time - PowerShell\nDESCRIPTION: This command searches CLS logs starting from a specified time on a given pool. The `-StartTime` parameter defines the beginning of the search window. Without the `-EndTime` parameter, the search defaults to a 30-minute duration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Pools \"pool01.contoso.net\" -StartTime \"11/20/2012 11:00:00 AM\" -OutputFilePath \"C:\\Logfiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Disabling QoS for a Specific Site in Skype for Business - PowerShell\nDESCRIPTION: This command disables Quality of Service (QoS) for a specific site (e.g., Redmond) in Skype for Business Server.  It provides the ability to disable QoS on certain network segments while leaving it enabled elsewhere. It requires the Skype for Business Server Management Shell and knowledge of the site's identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/enabling-qos-for-devices-that-are-not-based-on-windows.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMediaConfiguration -Identity site:Redmond -EnableQoS `$False\n```\n\n----------------------------------------\n\nTITLE: Creating a New Teams VDI Policy - PowerShell\nDESCRIPTION: This snippet shows how to create a new Teams VDI policy using the `New-CsTeamsVdiPolicy` cmdlet. The `-Identity` parameter specifies the name of the policy, and the `-VDI2Optimization` parameter controls whether users with this policy can use SlimCore optimization.  In this example, the `RestrictedUserPolicy` is created with SlimCore optimization disabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-CsTeamsVdiPolicy -Identity RestrictedUserPolicy -VDI2Optimization \"Disabled\"\n```\n\n----------------------------------------\n\nTITLE: Run Microsoft Teams Rooms Recovery Tool\nDESCRIPTION: This command runs the `RecoveryTool.ps1` PowerShell script located at the specified path. It uses `powershell.exe` with the `-ExecutionPolicy Unrestricted` parameter to bypass script execution policy restrictions and the `-File` parameter to specify the script to run.  The `<path to RecoveryTool.ps1>` needs to be replaced with the actual path to the script.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/recovery-tool.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\npowershell.exe -ExecutionPolicy Unrestricted -File \"<path to RecoveryTool.ps1>\"\n```\n\n----------------------------------------\n\nTITLE: Add a new string to Online PSTN Usage policy - PowerShell\nDESCRIPTION: This PowerShell command adds a new usage string to the existing Online PSTN Usage policy.  It is used to define the scope of the PSTN usage and is a prerequisite for creating voice routes. The `Identity Global` parameter targets the global policy, and the `Usage` parameter appends the specified string to the existing usage list.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-conferencing-configure.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlinePstnUsage -Identity Global -Usage @{Add=\"International\"}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Sub-Items\nDESCRIPTION: This JSON snippet shows a sample response payload for the Get Sub-Items operation in the Call Quality Dashboard Repository API. The response is an array of Item objects, each containing 'itemId', 'userId', and 'type' fields.  The 'Content' and 'subItems' fields are excluded to reduce data transfer.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-sub-items.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\n\"itemId\": 1653,\n\"userId\": 0,\n\"type\": \"application/json\"\n},\n{\n\"itemId\": 1710,\n\"userId\": 0,\n\"type\": \"json\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating a new Test Device using PowerShell\nDESCRIPTION: This section refers to the New-CsTestDevice PowerShell cmdlet, which allows administrators to create a new test device within the Skype for Business Server environment. It enables specifying the device's MAC address or serial number and scope (global or site-specific). It is used to designate a device for testing purposes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/help-lscp/test-device.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsTestDevice](/powershell/module/skype/new-cstestdevice?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Message Type: FILEUPLOAD XML Example\nDESCRIPTION: This XML snippet showcases a 'FILEUPLOAD' message type, representing a user uploading a file.  The content attribute contains the filename of the uploaded file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<Message type=\"FILEUPLOAD\" content=\"0988239a-bb66-4616-90a4-b07771a2097c.txt\" id=\"0\">\n  <Sender UserName=\"TestUser kazuto\" id=\"10\" email=\"kazuto@litwareinc.com\" internal=\"true\" uri=\"kazuto@litwareinc.com\" /> \n  <DateTimeUTC since1970=\"1205351828975\" string=\"2008-03-12T19:57:08.9755711Z\" long=\"633409486289755711\" /> \n</Message>\n```\n\n----------------------------------------\n\nTITLE: Message Type: JOIN XML Example\nDESCRIPTION: This XML snippet exemplifies a 'JOIN' message type, indicating a user joining a chat room. The content attribute is empty, as JOIN messages primarily convey user entry events.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Message type=\"JOIN\" content=\"\" id=\"0\">\n  <Sender UserName=\"TestUser kazuto\" id=\"10\" email=\"kazuto@litwareinc.com\" internal=\"true\" uri=\"kazuto@litwareinc.com\" /> \n  <DateTimeUTC since1970=\"1206211842612\" string=\"2008-03-22T18:50:42.6127374Z\" long=\"633418086426127374\" /> \n</Message\n```\n\n----------------------------------------\n\nTITLE: Restart IIS on Exchange Server\nDESCRIPTION: This PowerShell command restarts Internet Information Services (IIS) on the specified Exchange server. This is recommended after configuring the partner application to ensure that the changes are applied and the Exchange server can properly communicate with SharePoint. It requires the server name as a parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/sharepoint-to-search-for-archived-data.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\niisreset atl-exchange-001\n```\n\n----------------------------------------\n\nTITLE: Assign Custom Teams Feedback Policy to User\nDESCRIPTION: This PowerShell snippet assigns a custom Teams feedback policy named \"New Hire Feedback Policy\" to a specific user, user1@contoso.com. This command applies the settings defined in the custom policy to the specified user, overriding the global (Org-wide default) policy for that user.  This allows for granular control over feedback settings on a per-user basis.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-feedback-policies-in-teams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsFeedbackPolicy -Identity user1@contoso.com -PolicyName \"New Hire Feedback Policy\"\n```\n\n----------------------------------------\n\nTITLE: Clearing New Teams Cache on macOS using Terminal\nDESCRIPTION: This code snippet provides commands to clear the cache for the new Microsoft Teams client on macOS. It removes specific directories from the user's library related to the application's group containers and containers. This helps resolve issues caused by corrupted or outdated cached data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-mac-install-prerequisites.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/Library/Group Containers/UBF8T346G9.com.microsoft.teams\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/Library/Containers/com.microsoft.teams2\n```\n\n----------------------------------------\n\nTITLE: Enable Anonymous Join (Per-Organizer) - PowerShell\nDESCRIPTION: This PowerShell snippet allows anonymous participants to join meetings organized by specific users or groups associated with the specified meeting policy.  It uses the `Set-CsTeamsMeetingPolicy` cmdlet to set the `-AllowAnonymousUsersToJoinMeeting` parameter to `$true`. This allows granular control over which organizers can host meetings with anonymous attendees.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/anonymous-users-in-meetings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowAnonymousUsersToJoinMeeting $true\n```\n\n----------------------------------------\n\nTITLE: Creating Call Pickup Number Ranges - PowerShell\nDESCRIPTION: The `New-CSCallParkOrbit` cmdlet is used to define call pickup number ranges within the call park orbit table. These ranges are assigned the type `GroupPickup` and act as virtual extensions for seamless integration with existing dial plans. Assigning DID numbers is not supported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-group-call-pickup.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CSCallParkOrbit\n```\n\n----------------------------------------\n\nTITLE: Remove Dial-In Conferencing Configuration - PowerShell\nDESCRIPTION: Removes one or more collections of dial-in conferencing configuration settings from Skype for Business Server. These settings control how the system responds when users join or leave a conference. Requires identifying the configuration(s) to remove. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_35\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsDialInConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Basic CLS Logging Search - PowerShell\nDESCRIPTION: This command initiates a basic search using the Centralized Logging Service (CLS) and saves the results to a file. The `-OutputFilePath` parameter specifies the location and name of the output file. Ensure the directory exists and the user has Read and Write permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -OutputFilePath <string value of path and file to write the output file>\n```\n\n----------------------------------------\n\nTITLE: Assign Specific Port Ranges to all Configurations - PowerShell\nDESCRIPTION: This command assigns specific port ranges for audio, video, application sharing, and file transfer across all conferencing configurations. The command retrieves all configurations and then pipes them to the Set-CsConferencingConfiguration cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-skype-clients.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferencingConfiguration | Set-CsConferencingConfiguration -ClientAudioPort 50020 -ClientAudioPortRange 20 -ClientVideoPort 58000 -ClientVideoPortRange 20 -ClientAppSharingPort 42000 -ClientAppSharingPortRange 20 -ClientFileTransferPort 42020 -ClientFileTransferPortRange 20\n```\n\n----------------------------------------\n\nTITLE: Creating Teams Upgrade Configuration\nDESCRIPTION: This code snippet creates a new Teams upgrade configuration for a specific site (e.g., Redmond1). This configuration is used to control the automatic download of the Teams client via the Skype for Business Win32 client. By default, `DownloadTeams` is `True` if `NotifySfbUser` is also `True` in the assigned `TeamsUpgradePolicy`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/move-users-from-on-premises-to-teams.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsUpgradeConfiguration -Identity \"site:redmond1\"\n```\n\n----------------------------------------\n\nTITLE: Enable Watermark for Camera Video using PowerShell\nDESCRIPTION: This PowerShell snippet enables the watermark feature for attendee video in Teams meetings. It uses the `Set-CsTeamsMeetingPolicy` cmdlet to modify the global meeting policy and sets the `AllowWatermarkForCameraVideo` parameter to `$True`. This allows meeting organizers to apply a watermark to participants' video feeds, displaying their email address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/watermark-meeting-content-video.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -AllowWatermarkForCameraVideo $True\n```\n\n----------------------------------------\n\nTITLE: Enable Enterprise Voice via Teams Admin Center\nDESCRIPTION: This describes how to enable enterprise voice for a user via the Teams Admin Center.  It involves navigating to the user's account settings and toggling the 'Enterprise Voice' option to 'On'.  No actual code is present, but rather a description of steps within the GUI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-authorized-users-plan.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Creating Call Group and Setting Call Forwarding - PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to create a call group for a specific user with specified members, and then configures immediate call forwarding to that call group. It uses the `Set-CsUserCallingSettings` cmdlet to achieve this.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-sharing-and-group-call-pickup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$cgm = @(\"sip:user2@contoso.com\",\"sip:user3@contoso.com\")\nSet-CsUserCallingSettings -Identity user1@contoso.com -CallGroupOrder InOrder -CallGroupTargets $cgm\nSet-CsUserCallingSettings -Identity user1@contoso.com -IsForwardingEnabled $true -ForwardingType Immediate -ForwardingTargetType Group\n```\n\n----------------------------------------\n\nTITLE: Updating a UC Phone Configuration with Set-CsUCPhoneConfiguration in PowerShell\nDESCRIPTION: This snippet updates an existing UC phone configuration in Skype for Business using the `Set-CsUCPhoneConfiguration` cmdlet. It requires the `Identity` parameter to identify the configuration and then additional parameters such as `PhoneLockTimeout` to modify the configuration's properties. It modifies the attributes of the identified UC phone configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_32\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsUCPhoneConfiguration -Identity site:Redmond -PhoneLockTimeout \"00:30:00\"\n```\n\n----------------------------------------\n\nTITLE: Message Type: FILEDOWNLOAD XML Example\nDESCRIPTION: This XML snippet exemplifies a 'FILEDOWNLOAD' message type, showing a user downloading a file. The content attribute holds the filename of the downloaded file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<Message type=\"FILEDOWNLOAD\" content=\"006074ca-24f0-4b35-8bd8-98006a2d1aa8.txt\" id=\"0\">\n  <Sender UserName=\"kazuto@litwareinc.com\" id=\"10\" email=\"\" internal=\"true\" uri=\"kazuto@litwareinc.com\" /> \n  <DateTimeUTC since1970=\"1212611141851\" string=\"2008-06-04T20:25:41.8518646Z\" long=\"633482079418518646\" /> \n</Message>\n```\n\n----------------------------------------\n\nTITLE: Manage Auto Attendant Languages with PowerShell\nDESCRIPTION: This snippet illustrates using the CsOnlineDialInConferencingServiceNumber cmdlet in PowerShell to manage auto attendant languages. It requires the Teams PowerShell module to be installed and an active connection to Microsoft Teams. Refer to the cmdlet documentation for examples and parameter details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-auto-attendant-languages-for-audio-conferencing-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTo manage auto attendant languages with PowerShell, use the PowerShell [CsOnlineDialInConferencingServiceNumber](/powershell/module/teams/set-csonlinedialinconferencingtenantsettings) cmdlet.\n\nFor examples, see [CsOnlineDialInConferencingServiceNumber](/powershell/module/teams/set-csonlinedialinconferencingtenantsettings).\n```\n\n----------------------------------------\n\nTITLE: Get System Info using PowerShell\nDESCRIPTION: This PowerShell script retrieves system information, including domain/workgroup details, manufacturer, model, serial number, and BIOS version from the specified remote computer. It utilizes `Get-WmiObject` to query the `Win32_ComputerSystem` and `Win32_Bios` classes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-operations.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\ninvoke-command {gwmi -Class Win32_ComputerSystem | Format-List PartOfDomain,Domain,Workgroup,Manufacturer,Model\ngwmi -Class Win32_Bios | Format-List SerialNumber,SMBIOSBIOSVersion} -ComputerName <Device fqdn>\n```\n\n----------------------------------------\n\nTITLE: JSON Response Payload Example - Get Item Ancestors\nDESCRIPTION: This JSON snippet is a sample response payload for the Get Item Ancestors operation. It demonstrates the structure of the data returned, including item IDs, depth, and titles of ancestor items. Item1 represents the ID, Item2 represents the depth, and Item3 represents the title.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-item-ancestors.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\n\"item1\": 1653,\n\"item2\": 0,\n\"item3\": \"Audio Streams Monthly Trend\"\n},\n{\n\"item1\": 1652,\n\"item2\": 1,\n\"item3\": \"All Audio Streams\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Disable Email Editing for Teams Events via PowerShell\nDESCRIPTION: This PowerShell snippet disables the ability for organizers and co-organizers to edit email templates for webinars and town halls by setting the `-AllowEmailEditing` parameter to `Disabled` in the `Set-CsTeamsEventsPolicy` cmdlet. Replace `<policy name>` with the actual policy name. This command requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-email-communications.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowEmailEditing Disabled\n```\n\n----------------------------------------\n\nTITLE: Enable Both Internal and External Archiving - PowerShell\nDESCRIPTION: This PowerShell snippet enables the archiving of both internal and external communication sessions for a specified archiving policy. The `Set-CsArchivingPolicy` cmdlet modifies the policy identified by the `Identity` parameter by setting both the `ArchiveInternal` and `ArchiveExternal` parameters to `$True`. The policy identity in this example is set to \"global\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/change-an-existing-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingPolicy -Identity \"global\" -ArchiveInternal $True -ArchiveExternal $True\n```\n\n----------------------------------------\n\nTITLE: Enable Simultaneous Ringing and Set Destination Number - SEFAUtil\nDESCRIPTION: This example demonstrates how to enable simultaneous ringing and set a destination number using SEFAUtil. It uses the /setsimulringdestination switch to set the destination number and the /enablesimulring switch to enable the feature. The output shows that simultaneous ringing is enabled and displays the destination number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /setsimulringdestination:+14255550126 /enablesimulring\n```\n\n----------------------------------------\n\nTITLE: Manage Meeting Transcription with PowerShell\nDESCRIPTION: This snippet demonstrates how to manage meeting transcription settings using the `Set-CsTeamsMeetingPolicy` cmdlet in PowerShell.  The `-AllowTranscription` parameter controls whether transcription is allowed for meetings governed by the specified policy. To use this, you need to have the Microsoft Teams PowerShell module installed. The cmdlet modifies an existing Teams meeting policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-transcription-captions.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <PolicyName> -AllowTranscription $true\n```\n\n----------------------------------------\n\nTITLE: Assigning DisallowCalling Policy using PowerShell\nDESCRIPTION: This snippet demonstrates how to use the `Grant-CsTeamsCallingPolicy` cmdlet in PowerShell to assign the `DisallowCalling` policy to a specific user. The DisallowCalling policy disables all calling features for the assigned user.  The `Identity` parameter accepts the user's email ID.  Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsCallingPolicy -PolicyName DisallowCalling -Identity \"user email id\"\n```\n\n----------------------------------------\n\nTITLE: Remove PIN Policies Allowing Common Patterns - PowerShell\nDESCRIPTION: This PowerShell command removes all PIN policies that allow the use of common patterns.  It retrieves all PIN policies using Get-CsPinPolicy, filters them based on the AllowCommonPatterns property being set to $True, and then pipes the filtered policies to Remove-CsPinPolicy for deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/delete-a-pin-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy | Where-Object {$_.AllowCommonPatterns -eq $True} | Remove-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Enabling Online SIP Domains using Enable-CsOnlineSipDomain - Powershell\nDESCRIPTION: This command enables the online SIP domain for a specific deployment (e.g., AcquiredCompany.com). This is done after disabling hybrid with a previous deployment.  This allows the specified domain to be used for hybrid connectivity, enabling migration of users from that on-premises environment to the cloud.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-CsOnlineSipDomain\n```\n\n----------------------------------------\n\nTITLE: Updating a Location Policy with Set-CsLocationPolicy (PowerShell)\nDESCRIPTION: This snippet modifies an existing location policy in Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the policy to modify, and `-EnhancedEmergencyServicesEnabled` sets the E9-1-1 functionality. The example modifies the site-scoped policy named \"Redmond\" to enable E9-1-1.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsLocationPolicy -Identity site:Redmond -EnhancedEmergencyServicesEnabled $True\n```\n\n----------------------------------------\n\nTITLE: Set DTMF Configuration in Skype for Business\nDESCRIPTION: Modifies the key mapping of DTMF (dual-tone multi-frequency) commands used for controlling conference settings. This allows customization of keys used for actions like mute/unmute or lock/unlock. Requires specifying the Identity and the desired key mappings. Returns the modified CsDialinConferencingDtmfConfiguration object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialinConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Site using PowerShell\nDESCRIPTION: Creates a new network site in Skype for Business Server and associates it with a network region. The `New-CsNetworkSite` cmdlet requires the `NetworkSiteID` (name of the site) parameter. The `Description` and `NetworkRegionID` parameters are also used to provide a description and associate the site to a network region, respectively.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-network.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkSite -NetworkSiteID <string>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkSite -NetworkSiteID Chicago -Description \"Corporate headquarters\"-NetworkRegionID NorthAmerica\n```\n\n----------------------------------------\n\nTITLE: Checking Teams Legacy Authorization Status with PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the Teams upgrade configuration and displays the value of the BlockLegacyAuthorization setting. This is important to determine if Teams phones are prevented from connecting to Teams services due to legacy authorization restrictions.  It uses the Get-CsTeamsUpgradeConfiguration cmdlet and filters the output to show only the BlockLegacyAuthorization property.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/phones/authentication-best-practices-phones.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsUpgradeConfiguration | fl BlockLegacyAuthorization\n```\n\n----------------------------------------\n\nTITLE: Blocking a Mitigation - PowerShell\nDESCRIPTION: This PowerShell cmdlet blocks a specific mitigation from being applied to the Skype for Business Server by the Emergency Mitigation Service (EMS). Replace `<poolName>` with the FQDN of the Skype for Business pool and `M0001` with the mitigation ID to block.  This cmdlet is used when a mitigation critically affects the functionality of the server and the risk of exposing the server to the vulnerability is accepted.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/emergency-mitigation-service-overview.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Csmitigation - PoolFqdn <poolName> -MitigationBlocked M0001\n```\n\n----------------------------------------\n\nTITLE: Getting CDR Configuration Details using Get-CsCdrConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves the details of a specific Call Detail Recording (CDR) configuration based on its identity. The `-Identity` parameter specifies the site (e.g., `site:Redmond`). It returns a CDR configuration object with all its properties for the specified site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsCdrConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Region with New-CsNetworkRegion (PowerShell)\nDESCRIPTION: This snippet creates a new network region in Skype for Business Server. The `-Identity` parameter specifies the unique identifier for the region. `-Description` provides a description and `-CentralSite` links to a central site. The example creates a region named \"NorthAmerica\" with a description and associated central site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsNetworkRegion -Identity NorthAmerica -Description \"All North American Locations\" -CentralSite Redmond-NA-MLS\n```\n\n----------------------------------------\n\nTITLE: Configuring Email for Logs and Feedback via XML\nDESCRIPTION: This XML snippet configures sending logs and feedback from a Teams Rooms on Windows device to a specified email address.  The 'EmailAddressForLogsAndFeedback' element sets the recipient email, while 'SendLogsAndFeedback' enables the feature. This configuration applies to production environments.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/mtr-home-refresh.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<SendLogs>\n    <EmailAddressForLogsAndFeedback>username@microsoft.com</EmailAddressForLogsAndFeedback>\n    <SendLogsAndFeedback>true</SendLogsAndFeedback>\n</SendLogs>\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in CQD Web Config XML\nDESCRIPTION: This snippet demonstrates how to enable debug mode in the Call Quality Dashboard (CQD) by modifying the `web.config` file. Setting the `QoEDataLib.DebugMode` key to \"True\" enables detailed log messages for troubleshooting.  This requires access to the server's file system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/deploy-0.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"QoEDataLib.DebugMode\" value=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Preparing Request Body for RemoveAllAccessForUser in PowerShell\nDESCRIPTION: This snippet prepares the request body for the RemoveAllAccessForUser API call. It constructs a JSON object containing the user's ID and tenant ID, using the $UserId and $TenantId variables.  The resulting JSON object is stored in the $Body variable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/security-remove-external-chat.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Prepare request body\n$Body = @{\n\tuser = @{\n\t\tid = \"$UserId\"\n\t\ttenantId = \"$TenantId\"\n\t}\n}\n\n$Body = $Body | ConvertTo-Json\n```\n\n----------------------------------------\n\nTITLE: Set Dial-in Access Number - Skype for Business PowerShell\nDESCRIPTION: This snippet modifies the properties of a dial-in conferencing access number using the `Set-CsDialInConferencingAccessNumber` cmdlet.  It is used, for example, to modify the display name of the Active Directory contact objects representing the access number, to make them more easily identifiable to users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsDialInConferencingAccessNumber](/powershell/module/skype/set-csdialinconferencingaccessnumber?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Request body example for Get Dimension Members\nDESCRIPTION: This JSON payload represents the request body for the Get Dimension Members operation. It specifies the dimension to retrieve members from (DataModelName), cache behavior (ByPassCache), search criteria (SearchCaption, SearchValue), and pagination parameters (PageNumber, PageSize). The example requests members for the '[StartDate].[Month]' dimension.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-dimension-members.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"ByPassCache\": false,\n\"DataModelName\": \"[StartDate].[Month]\",\n\"SearchCaption\": \"\",\n\"SearchValue\": \"\",\n\"PageNumber\": 0,\n\"PageSize\": 8000\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PIN Policy using New-CsPinPolicy (PowerShell)\nDESCRIPTION: This snippet demonstrates how to create a new PIN policy with the identity \"site:Redmond\" using the `New-CsPinPolicy` cmdlet. It sets the `MinPasswordLength` property to 7, while all other properties are set to their default values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/pin-policies.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsPinPolicy -Identity \"site:Redmond\" -MinPasswordLength 7\n```\n\n----------------------------------------\n\nTITLE: Setting PSTN Usage for Emergency Calls (PowerShell)\nDESCRIPTION: This PowerShell cmdlet adds a new PSTN usage record named 'EmergencyUsage'. This is a required step to configure E9-1-1 voice routes. The same name must be used for the PSTN setting in the location policy. This command modifies the existing PSTN usages by adding the new usage record.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-an-e9-1-1-voice-route.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPstnUsage -Usage @{add='EmergencyUsage'}\n```\n\n----------------------------------------\n\nTITLE: Capturing Opened DLLs for Teams Process - Console\nDESCRIPTION: This command uses the 'listdlls' tool (from Sysinternals) to list all DLLs loaded by the Teams process ('Teams.exe') and saves the verbose output to 'dlls.txt'. This helps in identifying potential conflicts or dependencies that might be causing issues.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/troubleshoot-installation.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nlistdlls -v Teams > dlls.txt\n```\n\n----------------------------------------\n\nTITLE: Allow Public Town Hall Attendance via PowerShell\nDESCRIPTION: This PowerShell script allows anyone to attend town halls created by users with the specified policy. It uses the `Set-CsTeamsEventsPolicy` cmdlet and sets the `-EventAccessType` parameter to `Everyone`. The `<policy name>` placeholder should be replaced with the actual name of the Teams events policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-town-halls.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -EventAccessType Everyone\n```\n\n----------------------------------------\n\nTITLE: Loading Edit-CsClsScenario Module (PowerShell)\nDESCRIPTION: This code snippet loads the `ClsScenarioEdit.psm1` module, which contains the `Edit-CsClsScenario` cmdlet. This module is part of the Skype for Business Server 2015 Debugging tools and can be downloaded separately. The code assumes the debugging tools are installed in the default directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module \"CDBurn\\OCO\\amd64\\Support\"\n```\n\n----------------------------------------\n\nTITLE: Unassign Teams Enhanced Encryption Policy with PowerShell\nDESCRIPTION: This PowerShell command unassigns an end-to-end encryption policy from a specified user. The `Grant-CsTeamsEnhancedEncryptionPolicy` cmdlet is used with the `-Identity` parameter to specify the user's email address and the `-PolicyName` parameter set to `$NULL` to unassign the policy. This reverts the user to the default organization-wide policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-end-to-end-encryption.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsEnhancedEncryptionPolicy -Identity \"kenmeyer@contoso.onmicrosoft.com\" -PolicyName $NULL\n```\n\n----------------------------------------\n\nTITLE: Remove CDR Configurations Where CDR is Disabled - PowerShell\nDESCRIPTION: This command removes all CDR configuration settings where call detail recording has been explicitly disabled. It uses Get-CsCdrConfiguration to retrieve all settings, filters them based on the EnableCDR property, and then pipes the results to Remove-CsCdrConfiguration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/delete-configuration-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCdrConfiguration | Where-Object {$_.EnableCDR -eq $False} | Remove-CsCdrConfiguration\n```\n\n----------------------------------------\n\nTITLE: Getting QoE Configuration Details using Get-CsQoEConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves the details of a specific Quality of Experience (QoE) configuration based on its identity. The `-Identity` parameter specifies the site (e.g., `site:Redmond`). It returns a QoE configuration object with all properties for the specified site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsQoEConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Add Synthetic Transactions to Watcher Node - PowerShell\nDESCRIPTION: This PowerShell snippet uses the `Set-CsWatcherNodeConfiguration` cmdlet to add synthetic transactions to an existing watcher node.  The `Identity` parameter specifies the watcher node to modify, and the `Tests` parameter with the `Add` method specifies the transactions to add.  Multiple tests can be added at once by separating them with commas.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" -Tests @{Add=\"PersistentChatMessage\"}\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" -Tests @{Add=\"PersistentChatMessage\",\"DataConference\",\"UnifiedContactStore\"}\n```\n\n----------------------------------------\n\nTITLE: Unified Contact Store Transaction Setup - PowerShell\nDESCRIPTION: This command migrates test users' contact lists to Exchange for the Unified Contact Store synthetic transaction. It uses the `Test-CsUnifiedContactStore` cmdlet with the `-Setup` flag. Lyss-Exchange server-to-server authentication and valid Exchange mailboxes for test users are prerequisites.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsUnifiedContactStore -TargetFqdn pool0.contoso.com -UserSipAddress sip:testUser1@contoso.com -RegistrarPort 5061 -Authentication TrustedServer -Setup\n```\n\n----------------------------------------\n\nTITLE: Adding a Calling Delegate with PowerShell\nDESCRIPTION: This PowerShell snippet adds a user as a delegate for another user, granting permissions to make and receive calls, and manage settings. The `New-CsUserCallingDelegate` cmdlet is used with specified parameters for identity, delegate, and permissions. Requires the Teams PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-line-appearance.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsUserCallingDelegate -Identity user1@contoso.com -Delegate user2@contoso.com -MakeCalls $true -ReceiveCalls $true -ManageSettings $true\n```\n\n----------------------------------------\n\nTITLE: Creating an Archiving Configuration with Default Settings PowerShell\nDESCRIPTION: This PowerShell command creates a new collection of archiving configuration settings for the Redmond site using the `New-CsArchivingConfiguration` cmdlet.  It only specifies the mandatory Identity parameter, so the new settings will use default values for all other properties. No specific archiving options are enabled or disabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/create-a-configuration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsArchivingConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Testing Exchange UM Connectivity\nDESCRIPTION: This snippet demonstrates how to test Exchange UM connectivity using the Test-CsExUMConnectivity cmdlet in the Skype for Business Server Management Shell. It requires valid user credentials, the target FQDN, and the user's SIP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/exchangeunified-messaging-for-voice-mail.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$credential = Get-Credential \"litwareinc\\kenmyer\"\nTest-CsExUMConnectivity -TargetFqdn \"atl-cs-001.litwareinc.com\" -UserSipAddress \"sip:kenmyer@litwareinc.com\" -UserCredential $credential\n```\n\n----------------------------------------\n\nTITLE: Assigning AllOff Meeting Policy using PowerShell\nDESCRIPTION: This snippet shows how to use the `Grant-CsTeamsMeetingPolicy` cmdlet to assign the `AllOff` meeting policy to a specific user. The AllOff policy disables all meeting features for the assigned user. The `Identity` parameter accepts the user's email ID. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -PolicyName AllOff -Identity \"user email id\"\n```\n\n----------------------------------------\n\nTITLE: Create New Conferencing Policy - PowerShell\nDESCRIPTION: Creates a new conferencing policy in Skype for Business Server. This allows administrators to define custom settings for conferences. Requires specifying parameters such as maximum meeting size, media settings, and content sharing capabilities. The cmdlet returns the newly created policy object upon successful creation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Unassign a PIN Policy - PowerShell\nDESCRIPTION: This PowerShell snippet unassigns a PIN policy from a user, reverting them to the global or site policy. The Grant-CsPinPolicy cmdlet is used with the Identity parameter to specify the user and the PolicyName parameter set to $Null to remove the assigned policy. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/assign-a-per-user-pin-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsPinPolicy -Identity \"Ken Myer\" -PolicyName $Null\n```\n\n----------------------------------------\n\nTITLE: Configuring Room Attribute User Override in Teams Meeting Policy using PowerShell\nDESCRIPTION: This snippet demonstrates how to configure the room attribute user override for a Teams meeting policy using the `Set-CsTeamsMeetingPolicy` cmdlet. This setting allows voice and face profiles to be used for recognition in meetings within a Teams Room. Replace `<PolicyName>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <PolicyName> -RoomAttributeUserOverride Attribute\n```\n\n----------------------------------------\n\nTITLE: Restart Front End Servers - PowerShell\nDESCRIPTION: Restarts the RTCSRV (Skype for Business Server) service on all Front End Servers in the pools where Shared Line Appearance (SLA) has been installed and enabled. This is required for the changes to take effect.  The command stops and then starts the service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-shared-line-appearance.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nStop-CsWindowsService RTCSRV Start-CsWindowsService RTCSRV\n```\n\n----------------------------------------\n\nTITLE: Display CLS Configuration for Site - PowerShell\nDESCRIPTION: This PowerShell command retrieves and displays the Centralized Logging Service (CLS) configuration for a specific site in Skype for Business Server. It utilizes the `-Identity` parameter to filter the results based on the specified site (e.g., Redmond). It retrieves settings such as Identity, Scenarios, SearchTerms, and other parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/centralized-logging-service.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClsConfiguration -Identity \"Site:Redmond\" | Select-Object -ExpandProperty Scenarios\n```\n\n----------------------------------------\n\nTITLE: Enabling automatic email forwarding using PowerShell\nDESCRIPTION: This PowerShell script enables automatic email forwarding at the organizational level. It first sets the execution policy to unrestricted, then enables organization customization, and finally sets the AutoForwardingMode to On for the HostedOutboundSpamFilterPolicy. This is necessary to allow forwarding rules to function correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/connect-teams-essentials-to-email.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy Unrestricted\nEnable-OrganizationCustomization\nGet-HostOutboundSpamFilterPolicy | set-HostedOutboundSpamFilterPolicy -AutoForwardingMode On\n```\n\n----------------------------------------\n\nTITLE: Grant CVI Service Policy\nDESCRIPTION: This PowerShell cmdlet assigns a preconstructed CVI policy for use in your organization or to specific users.  It is used to grant the Teams Video Interop Service Policy, enabling the selected CVI partner for specified users or the entire organization. It requires the policy name and user identity if assigning to a specific user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cloud-video-interop.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsVideoInteropServicePolicy\n```\n\n----------------------------------------\n\nTITLE: Updating a Device Update Configuration with Set-CsDeviceUpdateConfiguration in PowerShell\nDESCRIPTION: This snippet updates an existing device update configuration in Skype for Business using the `Set-CsDeviceUpdateConfiguration` cmdlet. It requires the `Identity` parameter to identify the configuration and then additional parameters such as `MaxLogFileSize` and `MaxLogCacheLimit` to modify the configuration's properties. It modifies the attributes of the identified device update configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDeviceUpdateConfiguration -Identity global -MaxLogFileSize 2048000 -MaxLogCacheLimit 1024000\n```\n\n----------------------------------------\n\nTITLE: Modifying Archiving Configuration using PowerShell\nDESCRIPTION: This PowerShell script modifies all archiving configuration settings so that only IM sessions are archived. It retrieves all archiving configurations, filters for those where archiving is enabled for both IM and web conferences, and then sets the EnableArchiving property to \"ImOnly\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/enable-or-disable-archiving.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsArchivingConfiguration | Where-Object {$_.EnableArchiving -eq \"ImAndWebConf\"} | Set-CsArchivingConfiguration -EnableArchiving \"ImOnly\"\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Branding Policy to Null\nDESCRIPTION: Demonstrates how to remove all elements from MeetingBrandingThemes in CsTeamsMeetingBrandingPolicy by setting the values to null. This workaround is necessary due to a known issue with the 'Remove' list modifier. The command sets the MeetingBrandingThemes and DefaultTheme parameters to $null and an empty string, respectively.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_82\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBrandingPolicy -Identity <Identity> -MeetingBrandingThemes $null -DefaultTheme \"\"\n```\n\n----------------------------------------\n\nTITLE: Removing User Archiving Policy with PowerShell\nDESCRIPTION: This PowerShell command removes any previously assigned per-user archiving policy. Setting the `PolicyName` parameter to `$Null` effectively reverts the user to using the global or site-level archiving policy. This is useful when you want a user to inherit policies from higher-level configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/apply-a-policy-to-users.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsArchivingPolicy -Identity \"Ken Myer\" -PolicyName $Null\n```\n\n----------------------------------------\n\nTITLE: Move Central Management Server (CMS) - PowerShell\nDESCRIPTION: This command allows you to move the Central Management Server (CMS) role to a different Front End Server or Front End pool within your Skype for Business Server environment.  It's essential for maintenance, upgrades, and disaster recovery scenarios. Review the documentation before executing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/2019/topobld/ms.lync.tb.PublishTopologySelectCmsPage.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsManagementServer\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Upgrade Policy Globally - PowerShell\nDESCRIPTION: This PowerShell command attempts to set the tenant coexistence mode to TeamsOnly. It is used to identify any stale DNS records that prevent the organization from becoming Teams Only. If any records are found that point to something other than Microsoft 365, the command will fail.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-manage-dns-entries.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName UpgradeToTeams -Global\n```\n\n----------------------------------------\n\nTITLE: Configure Coordinated Meetings for Surface Hub via XML\nDESCRIPTION: This XML snippet shows the configuration for Coordinated Meetings on Surface Hub devices. It includes settings for Bluetooth advertisement, auto-accepting meeting invitations, audio and video, and trusted accounts. This configuration is applied using Windows Configuration Designer or Microsoft Intune.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/coordinated-meetings.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<SurfaceHubSettings>\n    <BluetoothAdvertisementEnabled>true</BluetoothAdvertisementEnabled>\n    <AutoAcceptProximateMeetingInvitations>true</AutoAcceptProximateMeetingInvitations>\n    <CoordinatedMeetings enabled=\"true\"> \n        <TrustedAccounts>room@contoso.com</TrustedAccounts>\n        <Settings> \n            <Audio default=\"false\" enabled=\"false\" />\n            <Video default=\"false\" enabled=\"true\" /> \n        </Settings> \n    </CoordinatedMeetings>\n</SurfaceHubSettings>\n```\n\n----------------------------------------\n\nTITLE: Enabling XMPP Synthetic Transaction - PowerShell\nDESCRIPTION: This PowerShell command enables the XMPP synthetic transaction by configuring the XmppTestReceiverMailAddress parameter with a user account at a routable XMPP domain. A corresponding Skype for Business Server rule needs to exist to route messages for the specified domain to an XMPP gateway.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity pool0.contoso.com -Tests @{Add=\"XmppIM\"} -XmppTestReceiverMailAddress user1@litwareinc.com\n```\n\n----------------------------------------\n\nTITLE: Forcing Backup Service Sync - PowerShell\nDESCRIPTION: This command initiates a manual synchronization of the Backup Service for a specific Front End pool. The `-PoolFqdn` parameter specifies the FQDN of the pool. The optional `-BackupModule` parameter can be used to synchronize specific modules (All, PresenceFocus, DataConf, CMSMaster).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/configuring-and-monitoring-the-backup-service.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsBackupServiceSync -PoolFqdn \\<poolFqdn> [-BackupModule  {All|PresenceFocus|DataConf|CMSMaster}]\n```\n\n----------------------------------------\n\nTITLE: Example: Update OAuthTokenIssuer Certificate (PowerShell)\nDESCRIPTION: This is an example of the Set-CsCertificate cmdlet to update the OAuthTokenIssuer certificate. It includes the certificate thumbprint and the effective date and time. Ensure the EffectiveDate is formatted to match the server's region and language settings to avoid errors.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/stage-av-and-oauth-certificates.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCertificate -Type OAuthTokenIssuer -Thumbprint \"B142918E463981A76503828BB1278391B716280987B\" -Roll -EffectiveDate \"7/21/2015 1:00:00 PM\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Account with PowerShell\nDESCRIPTION: This snippet demonstrates how to create a resource account using the New-CsOnlineApplicationInstance PowerShell cmdlet. This allows for programmatic creation of resource accounts which can then be associated with auto attendants or call queues. The resource account requires appropriate licensing and permissions to function correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/set-up-resource-account-steps.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nYou can create a resource account with the PowerShell cmdlet, [New-CsOnlineApplicationInstance](/powershell/module/teams/new-csonlineapplicationinstance).\n```\n\n----------------------------------------\n\nTITLE: Modifying Meeting Configuration using PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to modify meeting configuration settings in Skype for Business Server. It utilizes the `Set-CsMeetingConfiguration` cmdlet to update the `DesignateAsPresenter` property for the meeting configuration associated with the \"Redmond\" site to \"Everyone\". This command requires the Skype for Business Server Management Shell. It modifies the meeting configuration assigned to a specific site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/modify-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMeetingConfiguration -Identity \"site:Redmond\" -DesignateAsPresenter \"Everyone\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Response Group Service ID - PowerShell\nDESCRIPTION: This command retrieves the service ID for the Response Group service in Skype for Business Server. It uses Get-CsService to get all services, filters for those with \"RGS\" in their Applications, and extracts the ServiceId. The ID is then stored in the $serviceId variable, prefixed with \"service:\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$serviceId = \"service:\" + (Get-CsService | ?{$_.Applications -like \"*RGS*\"}).ServiceId;\n```\n\n----------------------------------------\n\nTITLE: PowerShell: Set Live Events Policy\nDESCRIPTION: This snippet shows the PowerShell cmdlet used to configure live events policies in Microsoft Teams, specifically the `BroadcastAttendeeVisibilityMode` parameter, which controls who can attend live events. This is required for GCC High and DoD customers. This is a direct link to Microsoft's documentation on this topic.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastPolicy\n```\n\n----------------------------------------\n\nTITLE: Assign Phone Number to Conferencing Bridge via Teams Admin Center\nDESCRIPTION: This snippet describes how to assign a phone number to an audio conferencing bridge using the Microsoft Teams admin center. It involves navigating to the Phone numbers section under Voice, selecting the phone number, and then choosing the Assign option. This allows the number to be used on meeting invitations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-audio-conferencing-in-teams.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n1. From the Home, go to **Voice** > **Phone numbers**.\n2. Select the phone number, and select **Assign**.\n```\n\n----------------------------------------\n\nTITLE: Updating Teams Meeting Branding Themes\nDESCRIPTION: Shows how to update the MeetingBrandingThemes using the Set-CsTeamsMeetingBrandingPolicy cmdlet and a list of desired MeetingBrandingThemes created with New-CsTeamsMeetingBrandingTheme.  This approach is required to update the themes due to an identified issue.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_83\n\nLANGUAGE: PowerShell\nCODE:\n```\n$exampleMeetingBrandingTheme = New-CsTeamsMeetingBrandingTheme -DisplayName \"exampleTheme\" -LogoImageLightUri \"https://contoso.com/light.jpg\" -LogoImageDarkUri \"https://contoso.com/dark.jpg\" -BackgroundImageLightUri \"https://contoso.com/backgroundlight.jpg\" -BackgroundImageDarkUri \"https://contoso.com/backgrounddark.jpg\" -BrandAccentColor \"#000000\" -Enabled $true -Identity \"exampleTheme\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBrandingPolicy -Identity <Identity> -MeetingBrandingThemes @($exampleMeetingBrandingTheme) -DefaultTheme \"exampleTheme\"\n```\n\n----------------------------------------\n\nTITLE: View Conferencing Policies using Get-CsConferencingPolicy (PowerShell)\nDESCRIPTION: This PowerShell cmdlet retrieves and displays the existing conferencing policies configured within the Skype for Business Server environment. It shows settings like audio and video permissions, application sharing options, and recording capabilities. It does not require any input parameters to list all policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/view.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Setting IE Proxy for NetworkService account - Console\nDESCRIPTION: This command disables the Windows Internet Explorer proxy settings for the Network Service account. This is required to run the Data Conferencing Synthetic Transaction when the watcher node is located outside the perimeter network. `bitsadmin /util /SetIEProxy NetworkService NO_PROXY` disables the proxy for the specified account.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nbitsadmin /util /SetIEProxy NetworkService NO_PROXY\n```\n\n----------------------------------------\n\nTITLE: Create Persistent Chat Add-in - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new Persistent Chat add-in. It requires the add-in's name, the Persistent Chat pool FQDN, and the URL to be associated with the add-in. The URL parameter specifies the location of the add-in's webpage. The example creates an add-in named ITPersistentChatAddin.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-add-ins.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsPersistentChatAddin -Name \"ITPersistentChatAddin\" -PersistentChatPoolFqdn \"atl-cs-001.contoso.com\" -Url \"http://atl-cs-001.contoso.com/itchat\"\n```\n\n----------------------------------------\n\nTITLE: Setting Captcha Verification Policy - PowerShell\nDESCRIPTION: This PowerShell command configures a Teams meeting policy to require anonymous users and users from untrusted organizations to complete a CAPTCHA verification check before joining meetings and webinars. The `-Identity` parameter specifies the policy name, and `-CaptchaVerificationForMeetingJoin` is set to `AnonymousUsersAndUntrustedOrganizations` to enforce the verification.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/join-verification-check.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -CaptchaVerificationForMeetingJoin AnonymousUsersAndUntrustedOrganizations\n```\n\n----------------------------------------\n\nTITLE: Allow Org, Trusted Orgs, and Guests Bypass (PowerShell)\nDESCRIPTION: This PowerShell snippet allows people in the same organization, trusted organizations, and guests to bypass the lobby. It uses the `Set-CsTeamsEventsPolicy` cmdlet with the `-AutoAdmittedUsers` parameter set to `EveryoneInSameAndFederatedCompany`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AutoAdmittedUsers EveryoneInSameAndFederatedCompany \n```\n\n----------------------------------------\n\nTITLE: Export Persistent Chat Data to File, PowerShell\nDESCRIPTION: This command exports Persistent Chat data from the specified database instance to a zip file. The DBInstance parameter specifies the location of the database server and the rtc instance. The FileName parameter specifies the output file path.  A full export of Persistent Chat information is performed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/back-up-and-restore-databases.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsPersistentChatData -DBInstance \"atl-sql-001.contoso.com\\rtc\" -FileName \"C:\\Logs\\PersistentChatData.zip\"\n```\n\n----------------------------------------\n\nTITLE: Updating Enterprise Edition Databases - Collocated DBs - PowerShell\nDESCRIPTION: This PowerShell command updates SQL Server databases for an Enterprise Edition Back End Server when collocated databases (Archiving, Monitoring) are present. `-ExcludeCollocatedStores` parameter is used to exclude the collocated stores during the database update process. `SQL Server FQDN` is required as a parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/patch-or-update-a-back-end-or-standard-edition-server.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-CsDatabase -Update -ConfiguredDatabases -SqlServerFqdn <SQL Server FQDN>  -ExcludeCollocatedStores\n```\n\n----------------------------------------\n\nTITLE: Disable Inline Message Translation using PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to disable inline message translation by using the Set-CsTeamsMessagingPolicy cmdlet. Disabling the policy prevents users from translating messages within the Teams client. The change takes a few minutes to apply, and users might need to sign out and back in.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/inline-message-translation-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTurn off the policy by using the [Set-CsTeamsMessagingPolicy](/powershell/module/teams/set-csteamsmessagingpolicy) cmdlet.\n```\n\n----------------------------------------\n\nTITLE: Assign Teams Phone with Calling Plan License\nDESCRIPTION: This PowerShell script assigns a Teams Phone with Calling Plan license to a specified user. It connects to Microsoft Graph, retrieves the SkuId of the 'MCOTEAMS_ESSENTIALS' license, and then uses `Set-MgUserLicense` to assign it by adding and removing licenses.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-add-on-licensing/assign-teams-add-on-licenses.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n      Connect-Graph -Scopes User.ReadWrite.All, Organization.Read.All\n\n      $EmsSku = Get-MgSubscribedSku -All | Where SkuPartNumber -eq 'MCOTEAMS_ESSENTIALS'\n\n      Set-MgUserLicense -UserId $user -AddLicenses @() -RemoveLicenses @()\n```\n\n----------------------------------------\n\nTITLE: Install Teams via MSI (Per-Machine)\nDESCRIPTION: This command installs the Teams MSI package to the %ProgramFiles(x86)% or %ProgramFiles% folder, depending on the operating system architecture. This is a per-machine installation and is required for non-persistent VDI setups. It requires the path to the MSI file and creates an install log.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmsiexec /i <path_to_msi> /l*v <install_logfile_name> ALLUSER=1 ALLUSERS=1\n```\n\n----------------------------------------\n\nTITLE: Setting Pro Management Agent Proxy - PAC File\nDESCRIPTION: This command sets the proxy settings for the Pro Management Agent using a Proxy Auto-Configuration (PAC) file with the bitsadmin utility in Windows. It configures the proxy to use the provided PAC file URL for the LOCALSYSTEM account. Replace http://contosoproxy.corp.net/proxy.pac with the actual PAC file URL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-prep.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nbitsadmin /Util /SetIEProxy LOCALSYSTEM AUTOSCRIPT http://contosoproxy.corp.net/proxy.pac\n```\n\n----------------------------------------\n\nTITLE: Finding Dial Plans with Unused Dial-in Conferencing Region (PowerShell)\nDESCRIPTION: This PowerShell cmdlet retrieves all dial plans that have a dial-in conferencing region but are not associated with any access number. It requires the Skype for Business Server Management Shell and membership in the RTCUniversalServerAdmins group, Cs-ServerAdministrator, or CsAdministrator role.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/tests.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialinConferencingAccessNumber -EmptyRegion\n```\n\n----------------------------------------\n\nTITLE: Enabling QoS for All Media Configurations in Skype for Business - PowerShell\nDESCRIPTION: This command enables Quality of Service (QoS) for all media configuration settings in Skype for Business Server, regardless of their scope (global or site).  It retrieves all media configurations and then applies the EnableQoS setting to each one. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/enabling-qos-for-devices-that-are-not-based-on-windows.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMediaConfiguration | Set-CsMediaConfiguration -EnableQoS `$True\n```\n\n----------------------------------------\n\nTITLE: Retrieving Watcher Node Tests Sorted - PowerShell\nDESCRIPTION: This command retrieves and sorts the list of tests assigned to a specific watcher node in alphabetical order. The `Sort-Object` cmdlet sorts the output of `Select-Object -ExpandProperty Tests`. The `-Identity` parameter specifies the fully qualified domain name (FQDN) of the watcher node.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" | Select-Object -ExpandProperty Tests | Sort-Object\n```\n\n----------------------------------------\n\nTITLE: Creating Emergency Number with Multiple Dial Masks - PowerShell\nDESCRIPTION: This code snippet demonstrates how to create an emergency number with a dial string and multiple dial masks, separated by a semicolon. This allows for multiple alternative numbers that translate to the same emergency number. In this example, the dial string is 911 and the dial masks are 112 and 999.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-multiple-emergency-numbers.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n> $a = New-CsEmergencyNumber -DialString 911 -DialMask 112;999\n```\n\n----------------------------------------\n\nTITLE: Updating Client Version Policy - PowerShell\nDESCRIPTION: This cmdlet updates an existing client version policy by setting its Rules property. The example retrieves existing rules from another site (Dublin) and applies them to the Redmond site after clearing any existing rules.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsClientVersionPolicy -Identity site:Redmond -Rules $Null\n\n    $x = Get-CsClientVersionPolicy -Identity site:Dublin | Select-Object -ExpandProperty Rules\n\n    Set-CsClientVersionPolicy -Identity site:Redmond -Rules $x\n```\n\n----------------------------------------\n\nTITLE: Listing Push Notification Configurations (Get-CsPushNotificationConfiguration)\nDESCRIPTION: This command retrieves a list of all existing push notification configurations within the Skype for Business environment. It does not require any parameters and returns all configured policies. This cmdlet helps in understanding current settings before creating or modifying configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_38\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsPushNotificationConfiguration\n```\n\n----------------------------------------\n\nTITLE: Create a Basic Watcher Node Configuration - PowerShell\nDESCRIPTION: This PowerShell snippet uses the `New-CsWatcherNodeConfiguration` cmdlet to create a new watcher node with default settings and synthetic transactions. It requires the TargetFqdn, PortNumber, and a list of test users. The test users must be enabled for Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsWatcherNodeConfiguration -TargetFqdn \"atl-cs-001.litwareinc.com\" -PortNumber 5061 -TestUsers @{Add= \"sip:watcher1@litwareinc.com\",\"sip:watcher2@litwareinc.com\"}\n```\n\n----------------------------------------\n\nTITLE: Modify Call Queue Overflow Handling - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to modify an existing call queue's overflow settings. It uses the `Set-CsCallQueue` cmdlet to update the `OverflowAction` to `Forward` and set the `OverflowActionTarget` to the GUID of the desired Auto Attendant or Call Queue. The `-Identity` parameter specifies the GUID of the call queue to modify.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <CallQueue GUID> -OverflowAction Forward -OverflowActionTarget <Auto Attendant or Call Queue GUID>\n```\n\n----------------------------------------\n\nTITLE: Review existing CLS scenario providers - PowerShell\nDESCRIPTION: This PowerShell command retrieves information about an existing Centralized Logging Service (CLS) scenario. It uses the `Get-CsClsScenario` cmdlet with the `-Identity` parameter to specify the scope and scenario name. In the example, it retrieves information about the global conferencing attendant scenario (CAA).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClsScenario -Identity \"global/CAA\"\n```\n\n----------------------------------------\n\nTITLE: Uninstall Classic Teams Script - Intune Instructions\nDESCRIPTION: Provides a link to sample instructions for running scripts in Intune, particularly focusing on how to add shortcuts. This link is provided in the context of running the classic Teams uninstallation script across an organization. The linked instructions likely contain PowerShell code snippets and Intune configuration details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-uninstall-script.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[sample instructions](https://github.com/microsoft/MDE-PowerBI-Templates/blob/master/ASR_scripts/AddShortcuts_with_Intune.md)\n```\n\n----------------------------------------\n\nTITLE: Enabling QoS Globally in Skype for Business - PowerShell\nDESCRIPTION: This command enables Quality of Service (QoS) at the global scope in Skype for Business Server.  This means that QoS will be enabled for all devices, including those that are not Windows-based, unless overridden by site-specific settings. It requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/enabling-qos-for-devices-that-are-not-based-on-windows.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMediaConfiguration -EnableQoS `$True\n```\n\n----------------------------------------\n\nTITLE: Assigning AllOn Meeting Policy using PowerShell\nDESCRIPTION: This snippet shows how to assign the `AllOn` meeting policy to a specific user via PowerShell. The `AllOn` policy enables all meeting features for the assigned user. The `Identity` parameter accepts the user's email ID. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -PolicyName AllOn -Identity \"user email id\"\n```\n\n----------------------------------------\n\nTITLE: Listing CDR Configurations using Get-CsCdrConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves a list of all Call Detail Recording (CDR) configurations within the Skype for Business environment. No specific parameters are used in this example to retrieve all configurations. It returns a list of CDR configuration objects with their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsCdrConfiguration\n```\n\n----------------------------------------\n\nTITLE: Finding Users with Specific ExchangeArchivingPolicy (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the Active Directory display name of all users who have the ExchangeArchivingPolicy property set to Uninitialized. It uses Get-CsUser, Where-Object, and Select-Object to filter and display the relevant user information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-exchange-archiving.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsUser | Where-Object {$_.ExchangeArchivingPolicy -eq \"Uninitialized\"} | Select-Object DisplayName\n```\n\n----------------------------------------\n\nTITLE: Add a Number Exception via PowerShell\nDESCRIPTION: This PowerShell command adds a number exception pattern to the tenant list, allowing specific numbers to bypass the blocked number patterns.  The example allows the numbers 1 (312) 555-8882 and 1 (312) 555-8883. The Enabled parameter activates the exception pattern.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsInboundExemptNumberPattern  -Identity \"AllowContoso1\" -Pattern \"^\\+?1312555888[2|3]$\" -Description \"Allow Contoso helpdesk\" -Enabled $True\n```\n\n----------------------------------------\n\nTITLE: Listing Cmdlets Assigned to an RBAC Role - PowerShell\nDESCRIPTION: This command retrieves a list of PowerShell cmdlets associated with a specific RBAC role (CsHelpDesk in this example). It uses the Get-CsAdminRole cmdlet with the -Identity parameter to specify the role. The Select-Object cmdlet is then used to expand the Cmdlets property, displaying the list of cmdlets assigned to the role.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/delegating-administrative-control.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole -Identity \"CsHelpDesk\" | Select-Object -ExpandProperty Cmdlets\n```\n\n----------------------------------------\n\nTITLE: Configure Enterprise Partner Application\nDESCRIPTION: This PowerShell command configures Exchange Server as an enterprise partner application. It uses the Configure-EnterprisePartnerApplication.ps1 script with the AuthMetaDataUrl parameter, which points to the SharePoint metadata endpoint. This enables Exchange to trust and communicate with SharePoint for eDiscovery.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/sharepoint-to-search-for-archived-data.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"C:\\Program Files\\Microsoft\\Exchange Server\\V15\\Scripts\\Configure-EnterprisePartnerApplication.ps1 -AuthMetaDataUrl 'https://atl-sharepoint-001/_layouts/15/metadata/json/1' -ApplicationType SharePoint\"\n```\n\n----------------------------------------\n\nTITLE: Add delegates to SLA group - PowerShell\nDESCRIPTION: Adds a user as a delegate to a Shared Line Appearance (SLA) group.  Each user added to the group must be a valid Enterprise Voice-enabled user.  Users can only belong to a single SLA group.  The Delegate parameter specifies the SIP address of the delegate.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-shared-line-appearance.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-CsSlaDelegates -Identity <IdentityOfGroup> -Delegate <NameOfDelegate@domain>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-CsSlaDelegates -Identity SLAGroup1 -Delegate sip:SLA_Delegate1@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Assign Location Policy to New Network Site - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new network site and assigns a specified location policy to it in Skype for Business Server. It requires the Skype for Business Server Management Shell. The `-Identity` parameter specifies the name of the new network site. The `-NetworkRegionID` parameter specifies the network region for the new site. The `-LocationPolicy` parameter defines the location policy to be assigned to the new site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/add-a-location-policy-to-a-network-site.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkSite -Identity \"Redmond\" -NetworkRegionID \"NorthAmerica\" -LocationPolicy \"Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Remove Specific Inbound Exempt Number Pattern - PowerShell\nDESCRIPTION: Removes a specific exempt number pattern named \"AllowContoso1\" from the tenant list. This example demonstrates how to use the Identity parameter with a string value to identify the pattern to be removed. Replication time should be allowed before testing and validating.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsInboundExemptNumberPattern -Identity \"AllowContoso1\"\n```\n\n----------------------------------------\n\nTITLE: Uninstall User Database - Skype for Business - PowerShell\nDESCRIPTION: This PowerShell command uninstalls the user database for a Skype for Business Front End pool.  It requires the fully qualified domain name (FQDN) of the SQL Server. Optionally, the name of the SQL instance can be specified. The cmdlet prompts for confirmation before proceeding with the removal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/remove-the-sql-server-database-for-a-front-end-pool.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-CsDataBase -DatabaseType User -SqlServerFqdn <FQDN> [-SqlInstanceName <instance>]\n```\n\n----------------------------------------\n\nTITLE: Setting Meeting Recording Ownership via PowerShell\nDESCRIPTION: This PowerShell cmdlet sets the meeting recording ownership policy using the `CsTeamsRecordingRolloutPolicy`. The `-MeetingRecordingOwnership` parameter determines whether the recording is saved to the organizer's OneDrive (`MeetingOrganizer`) or the recording initiator's OneDrive (`RecordingInitiator`). This policy impacts various meeting types, including automatically recorded meetings, delegate-created meetings, and webinars.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/tmr-meeting-recording-change.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[/powershell/module/teams/set-csteamsrecordingrolloutpolicy)\n```\n\n----------------------------------------\n\nTITLE: Install Central Management Database - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet installs the Central Management database on the specified Back End Server. The `-Clean` parameter removes any existing database before installation.  The `-SqlServerFqdn` and `-SqlInstanceName` parameters are used to define the SQL Server and instance.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-CsDatabase -CentralManagementDatabase -Clean -SqlServerFqdn <Backup_Pool Back End Server FQDN> -SqlInstanceName rtc\n```\n\n----------------------------------------\n\nTITLE: Create a new CLS scenario with Name and Parent\nDESCRIPTION: This PowerShell command creates a new Centralized Logging Service (CLS) scenario using the `-Name` and `-Parent` parameters.  `-Name` specifies a unique identifier for the scenario, while `-Parent` sets the scope (global or site).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClsScenario -Name \"LyssServiceScenario\" -Parent \"site:Redmond\" -Provider $LyssProvider\n```\n\n----------------------------------------\n\nTITLE: Translation Rule: Remove Extension from Phone Number\nDESCRIPTION: This translation rule removes the extension from a phone number that already includes one. It is used when the trunk peer handling PSTN rerouting does not support extension numbers, ensuring the call can be routed correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/enterprise-voice-resiliency.md#_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n^\\+(\\d\\*);ext=(\\d\\*)$\n```\n\n----------------------------------------\n\nTITLE: Create Bandwidth Policy Profile using New-CsNetworkBandwidthPolicyProfile PowerShell\nDESCRIPTION: This PowerShell command creates a new bandwidth policy profile in Skype for Business Server. It defines the identity, description, and bandwidth limits for audio and video sessions.  The parameters AudioBWLimit, AudioBWSessionLimit, VideoBWLimit and VideoBWSessionLimit specify the bandwidth limitations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-bandwidth-policy-profiles.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkBandwidthPolicyProfile -Identity 5Mb_Link -Description \"BW profile for 5Mb links\" -AudioBWLimit 2000 -AudioBWSessionLimit 200 -VideoBWLimit 1400   -VideoBWSessionLimit 700\n```\n\n----------------------------------------\n\nTITLE: Modifying a PIN Policy - PowerShell\nDESCRIPTION: This command modifies the PIN policy assigned to the Redmond site. The MinPasswordLength property is changed to 10, requiring new PINs to contain at least 10 digits. It utilizes the `Set-CsPinPolicy` cmdlet with the `-Identity` and `-MinPasswordLength` parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/pin-policies.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPinPolicy -Identity site:Redmond -MinPasswordLength 10\n```\n\n----------------------------------------\n\nTITLE: Create Site-Scoped QoE Configuration - PowerShell\nDESCRIPTION: This command creates new Quality of Experience (QoE) configuration settings at the site scope for the \"Redmond\" site. It sets the number of days QoE data is retained to 15 days. The New-CsQoEConfiguration cmdlet is used to create these settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/call-detail-recording-and-qoe.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsQoEConfiguration -Identity \"site:Redmond\" -KeepQoEDataForDays 15\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Bandwidth Policy Profile Information PowerShell\nDESCRIPTION: This PowerShell command retrieves information about all network bandwidth policy profiles configured in Skype for Business Server. It utilizes the `Get-CsNetworkBandwidthPolicyProfile` cmdlet to fetch and display the profile details, including identity, bandwidth policy settings, and description. No specific parameters are required for this command to return all profiles.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-network-bandwidth-policy-profiles.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsNetworkBandwidthPolicyProfile\n```\n\n----------------------------------------\n\nTITLE: AppLocker Publisher Condition Rules Example\nDESCRIPTION: This example demonstrates the recommended publisher condition rules for allowing the Microsoft Teams client application within AppLocker. It specifies the publisher (Microsoft Corporation) and the product names (Microsoft Teams and Microsoft Teams Update) to ensure that all files and versions of Teams are allowed to execute.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/applocker-in-teams.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nPublisher: O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US\nProduct name: MICROSOFT TEAMS\nProduct name: MICROSOFT TEAMS UPDATE\n```\n\n----------------------------------------\n\nTITLE: Allowing Internal Registration via PowerShell\nDESCRIPTION: This PowerShell script configures a Teams meeting policy to allow only users within the organization to register for meetings. It uses the `Set-CsTeamsMeetingPolicy` cmdlet and sets the `-WhoCanRegister` parameter to `EveryoneInCompany`. Replace `<policy name>` with the actual name of the Teams meeting policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-meeting-registration.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -WhoCanRegister EveryoneInCompany\n```\n\n----------------------------------------\n\nTITLE: Disable a User Account - Skype for Business PowerShell\nDESCRIPTION: This code snippet demonstrates how to temporarily disable a Skype for Business user account using the `Set-CsUser` cmdlet. It sets the `Enabled` property to `$False` for the specified user. This disables the account but retains its settings for future re-enablement. The `Identity` parameter specifies the user to disable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/user-accounts/user-accounts.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUser -Identity \"Ken Myer\" -Enabled $False\n```\n\n----------------------------------------\n\nTITLE: Disable Outlook on the web for mailboxes using PowerShell\nDESCRIPTION: This PowerShell script disables Outlook on the web access for all user mailboxes in Exchange Online. It retrieves all user mailboxes and sets the OWAEnabled property to false. It requires the ExchangeOnlineManagement module and administrator privileges.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/connect-teams-essentials-to-email.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-ExchangeOnline\n$Mailboxes = Get-Mailbox -ResultSize Unlimited -Filter {RecipientTypeDetails -eq \"UserMailbox\"}\nForeach ($mbx in $mailboxes) {\nSet-CASMailbox $mbx.Identity -OWAEnabled $false\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying multiple property values for CDR configuration with PowerShell\nDESCRIPTION: This PowerShell command creates a new collection of CDR configuration settings for the Redmond site, configuring the retention period for call detail records and error reports.  It sets KeepCallDetailForDays to 30 and KeepErrorReportForDays to 90.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/create-or-modify-a-collection-of-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCdrConfiguration -Identity \"site:Redmond\" -KeepCallDetailForDays 30 -KeepErrorReportForDays 90\n```\n\n----------------------------------------\n\nTITLE: Start CLS Logging with Basic PowerShell\nDESCRIPTION: This code snippet demonstrates how to start a CLS logging scenario using the `Start-CsClsLogging` cmdlet in PowerShell. It requires the Skype for Business Server Management Shell. The `-Scenario` parameter specifies the name of the scenario to run.  For example, it shows how to start the AlwaysOn scenario.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/start-or-stop-log-capture.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsClsLogging -Scenario <name of scenario>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsClsLogging -Scenario AlwaysOn\n```\n\n----------------------------------------\n\nTITLE: Upgrade User to Teams and Assign LineUri - PowerShell\nDESCRIPTION: This PowerShell command upgrades a user from Skype for Business on-premises to TeamsOnly mode using the `Move-CsUser` cmdlet with the `-MoveToTeams` switch. If new phone numbers from Microsoft are used, the `Set-CsPhoneNumberAssignment` cmdlet changes the LineUri for the user after the move.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-teams-on-prem-pstn-considerations.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser with the -MoveToTeams switch\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment\n```\n\n----------------------------------------\n\nTITLE: Querying User Invitations - SQL\nDESCRIPTION: This SQL query retrieves a list of invitations received by a specific user. It joins the `tblPrincipalInvites`, `tblPrincipal`, and `tblNode` tables, filtering by a specific principal ID (5 in this case), and orders the results by invitation ID in descending order.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/persistent-chat-database-schema/sample-persistent-chat-database-queries.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT prinName\n      ,nodeName\n      ,invID   \n      ,createdOn\n  FROM tblPrincipalInvites as inv, tblPrincipal as p, tblNode as n\n  where inv.prinID = 5 AND inv.prinID = p.prinID and inv.nodeID = n.nodeID\n  ORDER BY invID DESC\n```\n\n----------------------------------------\n\nTITLE: Run PowerShell Update Script\nDESCRIPTION: This command executes the offline app update PowerShell script with unrestricted execution policy.  The script updates the Teams Rooms app to a newer version. Replace `<path to script>` with the actual path to the script file. The script needs to be run from an elevated command prompt while the Skype user is still signed in.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manual-update.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPowerShell -ExecutionPolicy Unrestricted \"<path to script>\"\n```\n\n----------------------------------------\n\nTITLE: Modifying a Network Site using PowerShell\nDESCRIPTION: Modifies an existing network site in Skype for Business Server.  The `Set-CsNetworkSite` cmdlet requires the `Identity` (NetworkSiteID) parameter to specify the site to be modified. Other parameters, such as `NetworkRegionID`, `BWPolicyProfileID`, or `LocationPolicy`, can be used to update the site's properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-network.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsNetworkSite -Identity <string>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsNetworkSite -Identity Albuquerque -NetworkRegionID NorthAmerica\n```\n\n----------------------------------------\n\nTITLE: Adding a Derived Trunk to a Voice Route using Set-CsOnlineVoiceRoute\nDESCRIPTION: This PowerShell command adds a derived trunk FQDN to an existing voice route in a customer tenant. The -OnlinePstnGatewayList parameter is used to specify the FQDN of the derived trunk. The derived trunk inherits its configuration from the carrier trunk based on the FQDN.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-sbc-multiple-tenants.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineVoiceRoute -Identity OnlineVoiceRoute_1 -OnlinePstnGatewayList @{add=\"woodgrovebank.sbc1.adatum.biz\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Tenant ID using PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves the Tenant ID, which is a unique identifier for your organization within Microsoft 365 or Office 365. This ID is required when opting in for a planned Voicemail service migration to Cloud Voicemail (CVM). The output is the ObjectId property representing the tenant ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/plan/exchange-unified-messaging-online-migration-support.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsTenant | Select ObjectId\n```\n\n----------------------------------------\n\nTITLE: Create New Dial-In Conferencing DTMF Configuration - PowerShell\nDESCRIPTION: Creates a new collection of dual-tone multifrequency (DTMF) signaling settings used for dial-in conferencing in Skype for Business Server.  Allows defining keypad commands for controlling the conference. Requires specifying the various DTMF command sequences. The cmdlet returns the newly created DTMF configuration object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_31\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsDialInConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Set Global Client Policy to Lync - PowerShell\nDESCRIPTION: This PowerShell command sets the global client policy to enable the Lync client experience for all users.  It affects all users except those with a more specific site or user policy applied. The `-Identity Global` parameter specifies the global policy, and `$false` enables the Lync UI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPolicy -Identity Global -EnableSkypeUI $false\n```\n\n----------------------------------------\n\nTITLE: Disable Password Expiration via Active Directory PowerShell\nDESCRIPTION: This PowerShell snippet disables password expiration for a specified user account in Active Directory using the Set-ADUser cmdlet. It sets the '-PasswordNeverExpires' parameter to '$true'. The '-Identity' parameter specifies the target user account. Requires that the Active Directory module has been imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/mtr-device-config-password-include.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ADUser -Identity ConferenceRoom01@contoso.com -PasswordNeverExpires $true\n```\n\n----------------------------------------\n\nTITLE: Create a policy to archive internal communication\nDESCRIPTION: This PowerShell command creates a new archiving policy for the Redmond site that enables archiving of internal instant messaging sessions. The `New-CsArchivingPolicy` cmdlet is used with the `-Identity` parameter to specify the site and the `-ArchiveInternal` parameter set to `$True` to enable internal archiving.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/create-a-new-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsArchivingPolicy -Identity \"site:Redmond\" -ArchiveInternal $True\n```\n\n----------------------------------------\n\nTITLE: Grant a Call Park Policy to a User using PowerShell\nDESCRIPTION: This PowerShell snippet assigns the call park policy named \"SalesPolicy\" to a specific user identified by their email address (Ken.Myer@contoso.com). The `Grant-CsTeamsCallParkPolicy` cmdlet is used to apply the policy to the user, enabling them to use the call park and retrieve features defined in the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-park-and-retrieve.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Grant-CsTeamsCallParkPolicy -PolicyName \"SalesPolicy\" -Identity Ken.Myer@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Create Announcement with Audio Prompt - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create an announcement with an audio prompt by first reading the audio file into a byte array, importing the audio file using Import-CsAnnouncementFile, and then creating the announcement using New-CsAnnouncement.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-an-announcement.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$a = [System.IO.File]::ReadAllBytes('.\\PromptFile.wav')\nImport-CsAnnouncementFile -Parent service:ApplicationServer:pool0@contoso.com -FileName \"ChangedNumberMessage.wav\" -Content $a\nNew-CsAnnouncement -Parent service:ApplicationServer:pool0.contoso.com -Name \"Number Changed Announcement\" -AudioFilePrompt \"ChangedNumberMessage.wav\"\n```\n\n----------------------------------------\n\nTITLE: Create New Network Roaming Policy (Teams)\nDESCRIPTION: This PowerShell command creates a new Teams network roaming policy named 'LowBandwidthSite'.  It disables IP video and sets the media bit rate to 1000 Kbps. This is achieved by setting the AllowIPVideo parameter to '$false' and the MediaBitRateKb parameter to '1000' using the New-CsTeamsNetworkRoamingPolicy cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/network-roaming-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsNetworkRoamingPolicy -Identity LowBandwidthSite -AllowIPVideo $false -MediaBitRateKb 1000\n```\n\n----------------------------------------\n\nTITLE: Adding SpeakerAttributionForBYOD Parameter in CsTeamsAIPolicy Cmdlets\nDESCRIPTION: This snippet adds the `SpeakerAttributionForBYOD` parameter to the `New-CsTeamsAIPolicy` and `Set-CsTeamsAIPolicy` cmdlets. This parameter probably controls the speaker attribution settings for BYOD (Bring Your Own Device) scenarios within Microsoft Teams. There are no explicitly mentioned dependencies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsAIPolicy\n```\n\n----------------------------------------\n\nTITLE: Get Teams Messaging Policy - PowerShell\nDESCRIPTION: This command retrieves existing Teams messaging policies in the tenant. It's used to check if any default policies meet the requirements before creating a new one. No specific parameters are needed for this command. The output lists the available Teams messaging policies and their configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-quick-start-guide-edu.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsMessagingPolicy\n```\n\n----------------------------------------\n\nTITLE: Creating Policy Entry for Smart Contacts List - PowerShell\nDESCRIPTION: This PowerShell command creates a new client policy entry named 'EnableClientAutoPopulateWithTeam' and sets its value to '$True'. This entry is used to enable the Smart contacts list feature in Skype for Business clients. The policy entry then can be added to a CsClientPolicy, like the Global policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-smart-contacts-list.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$x=New-CsClientPolicyEntry -Name EnableClientAutoPopulateWithTeam -Value $True\n```\n\n----------------------------------------\n\nTITLE: Configuring Call Park Settings using Set-CsCpsConfiguration Cmdlet\nDESCRIPTION: This cmdlet is used to configure Call Park settings, including the fallback destination when a parked call times out (OnTimeoutURI), enabling/disabling music on hold (EnableMusicOnHold), the number of call pickup attempts (MaxCallPickupAttempts), and the call pickup timeout threshold (CallPickupTimeoutThreshold).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-call-park.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsCpsConfiguration\n```\n\n----------------------------------------\n\nTITLE: Removing a Video Trunk Configuration - PowerShell\nDESCRIPTION: This PowerShell cmdlet removes a specified video trunk configuration. If a more specific configuration doesn't exist, the globally scoped video trunk configuration applies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-video-interop-server/configure-the-vis.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsVideoTrunkConfiguration -Identity \"Service:VideoGateway:CUCMVIS1.CUCMInterop.contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Create a New Test Device - PowerShell\nDESCRIPTION: This cmdlet allows the creation of a new test device within the Skype for Business Server environment. This allows administrators to designate specific devices for testing updates before they are rolled out to production. Use the MAC address or serial number to uniquely identify the device.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/2019/lscp/ms.lync.lscp.ClientDeviceTestMain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTestDevice\n```\n\n----------------------------------------\n\nTITLE: Generating HTTPS Prefix - PowerShell\nDESCRIPTION: This PowerShell function `GenerateHttpsPrefix` ensures that a given input string has the 'https://' prefix. It removes any existing 'http://' prefix and adds 'https://' if it's not already present. It returns the modified string with the correct prefix.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction GenerateHttpsPrefix($inputVal)\n{\n    if ($inputVal.StartsWith('http://'))\n    {\n        $inputVal = $inputVal.Replace('http://', '')\n    }\n\n    if (!$inputVal.StartsWith('https://'))\n    {\n        $inputVal = \"https://\" + $inputVal\n    }\n\n    return $inputVal\n}\n```\n\n----------------------------------------\n\nTITLE: Assign External Access Policy to Multiple Users - PowerShell\nDESCRIPTION: This PowerShell command assigns a specific external access policy to multiple users within an organizational unit (OU) in Active Directory. It uses `Get-CsUser` to retrieve users from the specified OU and then pipes the results to `Grant-CsExternalAccessPolicy` to apply the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/assign-an-external-user-access-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -OU \"ou=UnitedStates,dc=litwareinc,dc=com\" | Grant-CsExternalAccessPolicy -PolicyName \"USAExternalAccessPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Trusted Origins in web.config (XML)\nDESCRIPTION: This code snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) trusted origins within the Repository API's web.config file. It shows how to specify a list of trusted domains from which scripts can make requests to the Repository API, separated by commas. Ensure to include the full protocol, hostname, and port (if applicable) for each domain and to omit the trailing slash.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/repository-api.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<repositoryConfiguration>\n    <service corsTrustedOrigin=\"https://<trusted-server>,http://<another-trusted-domain>:8080\"\" />\n    <diagnostics eventLevel=\"Verbose\" systemLoggedEventLevel=\"Error\">\n      <traceLog enabled=\"true\" fileName=\"repository_trace.log\" />\n    </diagnostics>\n </repositoryConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Update Emergency Address Coordinates Using PowerShell\nDESCRIPTION: This PowerShell snippet updates the latitude and longitude coordinates of an emergency address using its CivicAddressId.  This requires retrieving the CivicAddressId attribute from the Get-CsOnlineLisLocation cmdlet output.  It sets the new geographical coordinates for the specified civic address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/what-are-emergency-locations-addresses-and-call-routing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineLisCivicAddress -CivicAddressId ced7e600-8375-11eb-90a6-85f615654321 -Latitude 39.43210 -Longitude -122.56789\n```\n\n----------------------------------------\n\nTITLE: Fixes for Get/Import/Remove-CsOnlineAudioFile Cmdlets\nDESCRIPTION: This snippet indicates fixes for error handling in the `Get-CsOnlineAudioFile`, `Import-CsOnlineAudioFile`, and `Remove-CsOnlineAudioFile` cmdlets. These fixes improve the reliability and stability of managing online audio files within Microsoft Teams via PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_140\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineAudioFile\nImport-CsOnlineAudioFile\nRemove-CsOnlineAudioFile\n```\n\n----------------------------------------\n\nTITLE: Defining SEFAUtil as Trusted Application - PowerShell\nDESCRIPTION: This PowerShell command defines the SEFAUtil tool as a trusted application within the specified trusted application pool. It requires the Pool FQDN and assigns port 7489 to the application. This step is crucial for granting SEFAUtil the necessary permissions to interact with the Skype for Business environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-the-sefautil-tool.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTrustedApplication -ApplicationId sefautil -TrustedApplicationPoolFqdn <Pool FQDN>  -Port 7489\n```\n\n----------------------------------------\n\nTITLE: Removing a CLS Scenario\nDESCRIPTION: This PowerShell command removes a CLS scenario using the `Remove-CsClsScenario` cmdlet. It requires specifying the identity (scope and name) of the scenario to remove. Removing a scenario also removes any providers associated with it.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsClsScenario -Identity <scope and name of scenario>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsClsScenario -Identity \"site:Redmond/RedmondLyssInfo\"\n```\n\n----------------------------------------\n\nTITLE: Managing Hybrid Telephone Number using PowerShell\nDESCRIPTION: These cmdlets manage hybrid telephone numbers. The Get-CsHybridTelephoneNumber cmdlet is released, and modernized versions of New and Remove are available.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_114\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsHybridTelephoneNumber\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Remove]-CsHybridTelephoneNumber\n```\n\n----------------------------------------\n\nTITLE: Replacing Synthetic Transactions on a Watcher Node - PowerShell\nDESCRIPTION: This code snippet demonstrates how to replace all existing synthetic transactions on a watcher node with a new set of transactions using the Set-CsWatcherNodeConfiguration cmdlet. It uses the Replace method within the Tests parameter to specify the new transactions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" -Tests @{Replace=\"IM\"}\n```\n\n----------------------------------------\n\nTITLE: Updating a Push Notification Configuration (Set-CsPushNotificationConfiguration)\nDESCRIPTION: This command modifies an existing push notification configuration. It uses the -Identity parameter to specify the configuration to update, and allows changing settings such as enabling or disabling APNS. Modifying configurations can affect push notification delivery.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_42\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsPushNotificationConfiguration -Identity \"site:Redmond\" -EnableApplePushNotificationService $False\n```\n\n----------------------------------------\n\nTITLE: Get Dial-in Conferencing Configuration - PowerShell\nDESCRIPTION: This cmdlet retrieves information about the current dial-in conferencing configuration, including name recording requirements and announcement settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/join-and-leave-announcements.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialinConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Verify Common Area Phone Migration - PowerShell\nDESCRIPTION: This PowerShell snippet verifies that Common Area Phone contact objects have been successfully moved to the Skype for Business Server 2019 pool. It uses the Get-CsCommonAreaPhone cmdlet with a filter to retrieve all contact objects associated with the new pool. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-common-area-phones.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCommonAreaPhone -Filter {RegistrarPool -eq \"pool02.contoso.net\"}\n```\n\n----------------------------------------\n\nTITLE: Get-CsTenant Cmdlet Breaking Change\nDESCRIPTION: This snippet describes a breaking change in the `Get-CsTenant` cmdlet. Attributes that are no longer relevant in the Teams environment are deprecated for TeamsOnly tenants.  Administrators relying on these deprecated attributes will need to update their scripts to use the replacement attributes or alternative methods. It affects only TeamsOnly tenants.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_134\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTenant\n```\n\n----------------------------------------\n\nTITLE: Listing On-Premises Skype for Business Users\nDESCRIPTION: This PowerShell script lists on-premises Skype for Business users and their SipAddress and UserPrincipalName properties. This is used as part of the final verification to ensure that all users have been successfully moved or disabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser | Select-Object SipAddress, UserPrincipalName\n```\n\n----------------------------------------\n\nTITLE: Manually Purge Archived Data - PowerShell\nDESCRIPTION: This PowerShell command manually purges all records older than 24 hours from the archiving database on the specified server. The PurgeExportedArchivesOnly parameter is set to False to ensure that all records are deleted, including those that haven't been exported.  The -Identity parameter specifies the Archiving Database service. The -PurgeArchivingDataOlderThanHours parameter specifies the age of the records to purge.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/purging-of-archived-data.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsArchivingDatabasePurge -Identity \"service:ArchivingDatabase:atl-sql-001.contoso.com\" -PurgeArchivingDataOlderThanHours 24 -PurgeExportedArchivesOnly $False\n```\n\n----------------------------------------\n\nTITLE: Set Dial Plan - Skype for Business PowerShell\nDESCRIPTION: This snippet modifies existing dial plans using the `Set-CsDialPlan` cmdlet. This allows administrators to assign or update the region associated with a dial plan, ensuring correct geographic association for dial-in access numbers and call routing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsDialPlan](/powershell/module/skype/set-csdialplan?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Update-StatsManServerInfo.ps1\nDESCRIPTION: This PowerShell command retrieves detailed help information for the 'Update-StatsManServerInfo.ps1' script. It provides a description of all available parameters and their usage, useful for understanding the script's functionality and options. This must be run from the Listener installation directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help .\\Update-StatsManServerInfo.ps1 -Detailed\n```\n\n----------------------------------------\n\nTITLE: Make Microsoft 365 group mailbox visible in Exchange using PowerShell\nDESCRIPTION: This PowerShell cmdlet makes the mailbox of a Microsoft 365 group visible in Exchange clients. It is used when creating a Microsoft 365 group in Microsoft Teams, as the mailbox might be hidden by default. The `-HiddenFromExchangeClientsEnabled` parameter is set to `$false` to reveal the mailbox.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-shared-voicemail.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-UnifiedGroup -Identity <GUID> -HiddenFromExchangeClientsEnabled:$false\n```\n\n----------------------------------------\n\nTITLE: Set Conferencing Policy for Dial-in - PowerShell\nDESCRIPTION: This PowerShell command enables or disables dial-in conferencing by modifying the conferencing policy. It uses the `Set-CsConferencingPolicy` cmdlet and the `EnableDialInConferencing` parameter. The parameter accepts either `$true` to enable or `$false` to disable dial-in conferencing. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/enable-or-disable.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingPolicy  [-EnableDialInConferencing <$true | $false>]\n```\n\n----------------------------------------\n\nTITLE: Modify Dial-In Conferencing Configuration - PowerShell\nDESCRIPTION: Modifies settings that determine how Skype for Business Server responds when users join or leave a dial-in conference. Requires identifying the configuration to be modified and specifying which parameters to change. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_38\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Exporting Skype for Business Configuration via PowerShell\nDESCRIPTION: This PowerShell command exports the Skype for Business Server configuration to a specified file. The exported file can then be copied to external media for use on Edge Servers, which are outside of the domain. Replace `<ConfigurationFilePath.zip>` with the desired path and filename for the exported configuration file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-edge-server/create-your-edge-topology.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsConfiguration -FileName <ConfigurationFilePath.zip>\n```\n\n----------------------------------------\n\nTITLE: Get All Response Group Workflow URIs - PowerShell\nDESCRIPTION: This PowerShell command retrieves the Name and PrimaryUri (SIP address) for all Response Group workflows configured in Skype for Business Server.  It uses the Get-CsRgsWorkflow cmdlet to retrieve the workflows and then Select-Object to specify the properties to display. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/response-group-usage-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsRgsWorkflow | Select-Object Name, PrimaryUri\n```\n\n----------------------------------------\n\nTITLE: Create Teams Virtual Appointments Policy (PowerShell)\nDESCRIPTION: This PowerShell snippet creates a new Teams Virtual Appointments Policy.  It sets the `EnableSMSNotifications` parameter to `$false`, effectively disabling SMS notifications for users assigned to this policy.  This is useful for restricting SMS usage for specific groups, like new hires in training.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/virtual-appointment-meeting-template.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsVirtualAppointmentsPolicy -Identity \"New Hire SMS Policy\" -EnableSMSNotifications $false\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Device Group with OData Query for Teams Rooms Consoles\nDESCRIPTION: This snippet demonstrates how to create a dynamic device group in Intune to include all Teams Rooms consoles using Windows Autopilot. The OData query uses the devicePhysicalIds attribute to identify devices with the 'MTR-' prefix in their OrderID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/autopilot-autologin.md#_snippet_0\n\nLANGUAGE: odata\nCODE:\n```\n(device.devicePhysicalIds -any _ -startswith\"[OrderID]:MTR-\")\n```\n\n----------------------------------------\n\nTITLE: CQD URL Filter Example - URL\nDESCRIPTION: This example shows how to filter detailed reports in Call Quality Dashboard (CQD) using a URL. The URL includes a filter to only show data related to Skype for Business calls by appending /filter/[AllStreams].[Is Teams]|[FALSE] to the base URL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/quality-of-experience-review-guide.md#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\nhttps://cqd.teams.microsoft.com/cqd/#/1234567/2018-5/filter/[AllStreams].[Is Teams]|[FALSE]\n```\n\n----------------------------------------\n\nTITLE: Translation Rule Example for Normalization\nDESCRIPTION: This example shows the translation rule used in conjunction with the regular expression to format the number to E.164. This translation rule takes the matched 7 digit number from the regex using `$1` and prepends the value `+1425`. The combined effect with the regex normalizes 5550100 to +14255550100.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/defining-normalization-rules.md#_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n+1425$1\n```\n\n----------------------------------------\n\nTITLE: Remove Teams Provisioning PowerShell Registry Key\nDESCRIPTION: This registry key is added by the teamsbootstrapper.exe to address issues in environments lacking specific KB fixes.  Deleting this key prevents a PowerShell window from appearing after New Teams is provisioned in VDI environments with the necessary KB fixes installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n```powershell\nLocation: \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nName: TeamsProvisionRunKey\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying Global Teams Messaging Policy via PowerShell\nDESCRIPTION: This PowerShell command modifies the Global Teams messaging policy, specifically disabling the ability for users to edit messages.  Only specify the parameters that you wish to change. It's important to first review the current settings before making any changes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/policy-assignment-overview.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsMessagingPolicy -Identity Global -AllowUserEditMessage $false\n```\n\n----------------------------------------\n\nTITLE: Disable Trial App Installation using PowerShell\nDESCRIPTION: This snippet references an external article on how to use PowerShell to turn off a user's ability to install trial apps and services. It applies specifically to the self-service Teams Exploratory trial. The linked article likely provides the detailed PowerShell commands.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-exploratory.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee [Use AllowSelfServicePurchase for the MSCommerce PowerShell module](/microsoft-365/commerce/subscriptions/allowselfservicepurchase-powershell) for instructions.\n```\n\n----------------------------------------\n\nTITLE: Disabling Cloud IntelliFrame via XML Configuration\nDESCRIPTION: This code snippet demonstrates how to disable the Cloud IntelliFrame feature in Microsoft Teams Rooms by modifying the SkypeSettings.xml configuration file. This involves adding an XML element to explicitly set the EnableCloudIntelliframe property to false. After modifying the XML file, the console needs to be restarted for the changes to take effect.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/cloud-intelliframe.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<EnableCloudIntelliframe>false</EnableCloudIntelliframe>\n```\n\n----------------------------------------\n\nTITLE: Get Voicemail User Settings via PowerShell\nDESCRIPTION: This PowerShell snippet shows how to use the `Get-CsOnlineVoicemailUserSettings` cmdlet to view Cloud Voicemail settings for a specific user. It retrieves the current voicemail configuration. Ensure you have the Teams PowerShell module installed and are connected to your Microsoft Teams environment before running.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voicemail-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineVoicemailUserSettings -Identity user@example.com\n```\n\n----------------------------------------\n\nTITLE: Finding Users Assigned to Specific External Access Policy in MicrosoftTeams\nDESCRIPTION: This snippet identifies users assigned to a specific external access policy. Replace `<PolicyName>` with the actual policy name you want to query. It retrieves DisplayName, ObjectId, and UserPrincipalName for each user matching the criteria.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/edu-parents-app.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter {ExternalAccessPolicy -eq \"<PolicyName>\"} | Select-Object DisplayName,ObjectId,UserPrincipalName\n```\n\n----------------------------------------\n\nTITLE: Export Persistent Chat Data using Export-CsPersistentChatData, PowerShell\nDESCRIPTION: This PowerShell cmdlet exports Persistent Chat data.  It can export to a file specified by -FileName, or as bytes using -AsBytes. The data exported includes chat room data like history, configuration, and user provisioning. This requires access to the Persistent Chat database.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/back-up-and-restore-databases.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsPersistentChatData [-FileName <String>] <COMMON PARAMETERS>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsPersistentChatData [-AsBytes <SwitchParameter>] <COMMON PARAMETERS>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Watcher Node Tests - PowerShell\nDESCRIPTION: This command retrieves the list of tests assigned to a specific watcher node. The `Get-CsWatcherNodeConfiguration` cmdlet retrieves the watcher node configuration, and `Select-Object -ExpandProperty Tests` extracts the list of tests. The `-Identity` parameter specifies the fully qualified domain name (FQDN) of the watcher node.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" | Select-Object -ExpandProperty Tests\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - Redmond Operator (.NET Regex)\nDESCRIPTION: This normalization rule translates '0' to the Redmond Operator number in E.164 format.  It employs a .NET Framework regular expression to match '0', and replaces it with \"+14255550100\".  The input is '0', and the output is the E.164 formatted Redmond Operator number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_7\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^0$\n```\n\n----------------------------------------\n\nTITLE: Enabling RGSBackupService - PowerShell\nDESCRIPTION: This command enables RGSBackupService globally. When enabled, RGSBackupService starts syncing RGS data on paired pools.  It should be used with caution as it affects all paired pools. It requires the July cumulative update (CU1).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsBackupServiceConfiguration -EnableRgsBackupService 1\n```\n\n----------------------------------------\n\nTITLE: Install Central Management Database - Standard Edition - PowerShell\nDESCRIPTION: This PowerShell command installs the Central Management Database on the specified SQL Server for a Standard Edition Front End server. It creates the new Central Management store on the Skype for Business Server 2019 Standard Edition Front End Server. Requires the FQDN of the Standard Edition Server and the SQL instance name as parameters. The SQL instance name defaults to RTC.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-the-central-management-server.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-CsDatabase -CentralManagementDatabase -SQLServerFQDN <FQDN of your Standard Edition Server> -SQLInstanceName <name of instance - RTC by default>\n```\n\n----------------------------------------\n\nTITLE: Creating a UC Phone Configuration with New-CsUCPhoneConfiguration in PowerShell\nDESCRIPTION: This snippet creates a new UC phone configuration in Skype for Business using the `New-CsUCPhoneConfiguration` cmdlet. It requires the `Identity` parameter to define the new configuration, as well as parameters such as `CalendarPollInterval` and `LoggingLevel`. This adds a new UC phone configuration to the system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_29\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsUCPhoneConfiguration -Identity site:Redmond -CalendarPollInterval \"00:10:00\" -LoggingLevel \"Medium\"\n```\n\n----------------------------------------\n\nTITLE: Check Teams MSIX Package Registration Status\nDESCRIPTION: This PowerShell command is used to check if the Teams MSIX package is registered for all users. Running this command from an elevated PowerShell window will display information about the package, including its full name and status (OK or Paused).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AppxPackage -name MsTeams -allusers\n```\n\n----------------------------------------\n\nTITLE: Viewing all PSTN Usages with Get-CsPstnUsage - PowerShell\nDESCRIPTION: This PowerShell command retrieves information about all PSTN usage records configured in the Skype for Business Server environment. It displays the identity and the associated usage types (e.g., Internal, Local, Long Distance). The command requires the Skype for Business Server Management Shell to be installed and properly configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/view-pstn-usage-records.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsPstnUsage\n```\n\n----------------------------------------\n\nTITLE: Check User's Line URI Info - PowerShell\nDESCRIPTION: This PowerShell command retrieves information about a user's online settings, specifically `RegistrarPool`, `OnPremLineURI`, and `LineURI`.  It's used to determine if a phone number was assigned on-premises and synchronized to Microsoft 365 by checking if `OnPremLineUri` is populated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-configure.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity <user> | fl RegistrarPool, OnPremLineURI, LineURI\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Subnets from CSV with PowerShell\nDESCRIPTION: This PowerShell script imports subnet definitions from a CSV file and creates new network subnets based on the data in the file. The script reads the CSV file and uses the `New-CsTenantNetworkSubnet` cmdlet to create each subnet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-your-network-topology.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CSV C:\\subnet.csv | foreach {New-CsTenantNetworkSubnet –SubnetID $_.Identity -MaskBits $_.Mask -NetworkSiteID $_.SiteID}  \n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nIdentity, Mask, SiteID\n172.11.12.0, 24, Redmond\n172.11.13.0, 24, Chicago\n172.11.14.0, 25, Vancouver\n172.11.15.0, 28, Paris\n```\n\n----------------------------------------\n\nTITLE: Creating a Region Route using New-CsNetworkInterRegionRoute in PowerShell\nDESCRIPTION: This cmdlet creates a new network inter-region route in Skype for Business. It requires the Identity, NetworkRegionID1, NetworkRegionID2, and NetworkRegionLinkIDs parameters to define the route's ID, linked regions, and region link IDs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_33\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsNetworkInterRegionRoute -Identity NA_APAC_Route -NetworkRegionID1 NorthAmerica -NetworkRegionID2 APAC -NetworkRegionLinkIDs \"NA_EMEA,EMEA_APAC\"\n```\n\n----------------------------------------\n\nTITLE: Get Service Status with PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves the status of Windows services on a specified computer in a Skype for Business Server deployment. It requires the Skype for Business Server Management Shell to be available. The `-ComputerName` parameter specifies the target computer. The output is filtered to display the `RoleName` and `Status` properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/manage-services.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsWindowsService -ComputerName atl-cs-001.litwareinc.com | Select-Object RoleName, Status\n```\n\n----------------------------------------\n\nTITLE: Set Client Policy for Site to Skype for Business - PowerShell\nDESCRIPTION: This PowerShell command configures the Skype for Business client experience for all users within the Redmond site. It uses the `site:Redmond` identity to target the policy specifically to that site. The `$true` parameter value enables the Skype for Business UI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPolicy -Identity site:Redmond -EnableSkypeUI $true\n```\n\n----------------------------------------\n\nTITLE: Example: Run PowerShell Update Script\nDESCRIPTION: This is an example of the PowerShell command to execute the update script, with a specific path provided. This shows how to replace the generic `<path to script>` placeholder with a real file path. It assumes the script is located in the Admin user's Downloads folder.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manual-update.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPowerShell -ExecutionPolicy Unrestricted \"C:\\Users\\Admin\\Downloads\\MTR-Update-4.5.6.7.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Circular Delegation via Cmdlets\nDESCRIPTION: Explains the use of cmdlets for setting up circular delegation in Teams Phone environments, where multiple users can share lines with each other. It highlights that the Teams client and Teams Admin Center do not currently support this feature, requiring the use of cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/devices-release-notes.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Uninstall Classic Teams using Intune (Windows)\nDESCRIPTION: This snippet outlines the process of uninstalling an application, specifically the Teams Machine-Wide Installer, across all Windows devices using Microsoft Intune. It involves adding a Win32 app in Intune, configuring detection rules to identify the application and providing the uninstall command to remove it silently.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-classic-client-uninstall.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Assign a Teams Meeting Policy to a Group using PowerShell\nDESCRIPTION: This PowerShell snippet assigns a specific Teams meeting policy to a group of users. The group is identified by its object ID, and the policy is applied with a specific ranking. This sets the priority of the policy compared to other policies that may apply to the same users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -Group d8ebfa45-0f28-4d2d-9bcc-b158a49e2d17 -PolicyName \"Retail Managers Meeting Policy\" -Rank 1\n```\n\n----------------------------------------\n\nTITLE: Modify Dial-In Conferencing DTMF Configuration - PowerShell\nDESCRIPTION: Modifies the dual-tone multifrequency (DTMF) signaling settings used for dial-in conferencing in Skype for Business Server. Requires identifying the DTMF configuration to be modified and specifying which parameters to change. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_39\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Setting Voice Route Number Pattern with PowerShell\nDESCRIPTION: This snippet modifies an existing voice route using the `Set-CsOnlineVoiceRoute` cmdlet.  The `-id` parameter specifies the route to modify.  The `-NumberPattern` parameter is updated to \".*\", which matches any number. `-OnlinePstnGatewayList` defines the SBCs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineVoiceRoute -id \"Redmond 1\" -NumberPattern \".*\" -OnlinePstnGatewayList sbc1.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Deleting PIN Policies by Scope - PowerShell\nDESCRIPTION: This command removes all PIN policies configured at the site scope. It uses `Get-CsPinPolicy` with the `-Filter` parameter to retrieve a collection of policies with an Identity starting with \"site:\". The retrieved policies are then piped to `Remove-CsPinPolicy` for deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/pin-policies.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy -Filter \"site:*\" | Remove-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Get Central Management Store Replication Status - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet checks the status of the Central Management store replication. It verifies that the ActiveMasterFQDN and ActiveFileTransferAgents are pointing to the correct FQDN. It's a crucial step for ensuring the CMS is available and properly replicated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsManagementStoreReplicationStatus -CentralManagementStoreStatus\n```\n\n----------------------------------------\n\nTITLE: Moving Skype for Business Users to the Cloud\nDESCRIPTION: This command is used to move on-premises Skype for Business Server users to the cloud, enabling them to become TeamsOnly users. Hybrid connectivity must be configured before using this command. The `-MoveToTeams` switch is no longer required as users are automatically assigned TeamsOnly mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-execute-SkypeforBusinessHybridOnPrem.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser\n```\n\n----------------------------------------\n\nTITLE: Checking Direct Routing Configuration\nDESCRIPTION: This PowerShell command retrieves a user and checks their OnlineVoiceRoutingPolicy attribute. It is used to confirm that the user is enabled for Direct Routing by verifying that the OnlineVoiceRoutingPolicy attribute has a non-null value assigned. $user variable must be defined as the UPN or SIP address of the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-pad-configuration.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity $user|Select OnlineVoiceRoutingPolicy\n```\n\n----------------------------------------\n\nTITLE: Enable Whiteboard with PowerShell\nDESCRIPTION: This PowerShell snippet enables the Microsoft Whiteboard feature for the entire organization. It uses the `Set-SPOTenant` cmdlet from the SharePoint Online module and sets the `IsWBFluidEnabled` parameter to `$true`. This allows users to share and collaborate on whiteboards in Teams meetings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-policies-content-sharing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-SPOTenant -IsWBFluidEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Disabling Private Meet Now via CsTeamsMeetingPolicy - Powershell\nDESCRIPTION: This PowerShell command disables the Interop escalation for a specific user by setting the `AllowPrivateMeetNow` parameter in `CsTeamsMeetingPolicy` to `$false`.  This prevents the user from initiating ad-hoc meetings.  Requires appropriate admin permissions to execute.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-and-skypeforbusiness-coexistence-and-interoperability.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n-AllowPrivateMeetNow\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$false\n```\n\n----------------------------------------\n\nTITLE: CLS Logging Search on Multiple Computers - PowerShell\nDESCRIPTION: This command initiates a search using the Centralized Logging Service (CLS) across multiple computers. The `-Computers` parameter takes a comma-separated list of FQDNs. The output is saved to \"C:\\LogFiles\\logfile.txt\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Computers \"fe01.contoso.net\", \"fe02.contoso.net\", \"fe03.contoso.net\" -OutputFilePath \"C:\\LogFiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Failover Pool - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet fails over the users from one pool to another. It utilizes the `-DisasterMode` parameter for disaster recovery scenarios and `-Verbose` for detailed output. The `-PoolFQDN` specifies the FQDN of the pool that is being failed over.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsPoolFailover -PoolFQDN <Pool1 FQDN> -DisasterMode -Verbose\n```\n\n----------------------------------------\n\nTITLE: Setting Edge Server Media Port Range - PowerShell\nDESCRIPTION: This command sets the media communication port range for a specific Edge Server.  It requires the server identity, the starting port number, and the number of ports to reserve. Changing default port ranges can impact some scenarios.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-edge-servers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsEdgeServer -Identity EdgeServer:atl-edge-001.litwareinc.com -MediaCommunicationPortStart 40803 -MediaCommunicationPortCount 24730\n```\n\n----------------------------------------\n\nTITLE: Configure PortalUserRegistrarFQDN in Web.config (XML)\nDESCRIPTION: This XML snippet shows how to configure the PortalUserRegistrarFQDN in the Web.config file for the SRS v1 Administrative Web Portal.  This is only needed if the PortalUserName user is using a different registrar than the local registrar. Update value to match the registrar FQDN.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/room-system-v1-administrative-web-portal.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"PortalUserRegistrarFQDN\" value=\"pool-xxxx.domain.com\" />\n```\n\n----------------------------------------\n\nTITLE: Disable Bluetooth Beaconing - Teams Rooms on Windows - XML\nDESCRIPTION: This XML snippet disables Bluetooth beaconing on a Teams Rooms on Windows device. Disabling this feature prevents room users from casting content from their desktop or mobile devices via Bluetooth. This setting can be configured via XML, Teams Rooms Pro Management portal, or Teams admin center.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/mtr-home-refresh.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<BluetoothAdvertisementEnabled>false</BluetoothAdvertisementEnabled>\n```\n\n----------------------------------------\n\nTITLE: PowerShell Command for Event Log Creation\nDESCRIPTION: This PowerShell command creates a new event log source named \"Microsoft Teams VDI\" within the Application log. This enables filtering of VDI-related events in the Event Viewer by source, simplifying troubleshooting and diagnostics of Teams VDI issues. It requires elevated privileges to execute successfully.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EventLog -LogName Application -Source \"Microsoft Teams VDI\"\n```\n\n----------------------------------------\n\nTITLE: Modifying PIN Policy using Get-CsPinPolicy and Set-CsPinPolicy (PowerShell)\nDESCRIPTION: This snippet demonstrates how to modify the `MinPasswordLength` property for all existing PIN policies. It first retrieves all PIN policies using `Get-CsPinPolicy` and then pipes the output to `Set-CsPinPolicy` to modify the `MinPasswordLength` to 10.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/pin-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy | Set-CsPinPolicy -MinPasswordLength 10\n```\n\n----------------------------------------\n\nTITLE: Get RBAC roles for Set-CsClsConfiguration Cmdlet\nDESCRIPTION: This PowerShell command retrieves all RBAC roles (including custom roles) that have been assigned the 'Set-CsClsConfiguration' cmdlet. It's used to verify permissions required for specific Centralized Logging Service cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Set-CsClsConfiguration\"}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Web Service Configurations at Service Scope - PowerShell\nDESCRIPTION: This PowerShell command removes all Web Service configuration settings applied at the service scope. It first uses `Get-CsWebServiceConfiguration` with the `-Filter` parameter to retrieve all configurations at the service scope.  Then, it pipes the results to `Remove-CsWebServiceConfiguration` for deletion. This command requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/web-service-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWebServiceConfiguration -Filter \"service:*\" | Remove-CsWebServiceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Creating a Per-User Policy for Unified Contact Store - PowerShell\nDESCRIPTION: This PowerShell command creates a new per-user user services policy named `AllowUnifiedContactStore` that enables the use of the unified contact store by setting the `UcsAllowed` property to `$True`.  This policy can then be assigned to specific users to enable the unified contact store for them.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-the-unified-contact-store.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsUserServicesPolicy -Identity \"AllowUnifiedContactStore\" -UcsAllowed $True\n```\n\n----------------------------------------\n\nTITLE: Verify User's Line URI (Post-Removal) - PowerShell\nDESCRIPTION: This Teams PowerShell Module command is used to verify that the phone number has been successfully removed from a user's `LineUri` attribute.  It's executed after attempting to remove a Direct Routing number assignment to ensure the change has taken effect.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-configure.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity <user> | fl LineUri\n```\n\n----------------------------------------\n\nTITLE: Creating New Client Policy - PowerShell\nDESCRIPTION: This PowerShell command creates a new client policy to enable the Lync client experience. This is the first step and requires a unique identity for the new policy. The `-EnableSkypeUI $False` parameter disables the Skype for Business UI, effectively enabling the Lync UI. Requires Skype for Business Server PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClientPolicy -Identity UseLyncUI -EnableSkypeUI $False\n```\n\n----------------------------------------\n\nTITLE: Creating Archiving Configuration using New-CsArchivingConfiguration (PowerShell)\nDESCRIPTION: This cmdlet creates a new Archiving Configuration for a specified site in Skype for Business.  The `-Identity` parameter specifies the site (e.g., `site:Redmond`), and the `-EnableArchiving` parameter determines the type of archiving to enable, which is set to `ImOnly` here.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsArchivingConfiguration -Identity site:Redmond -EnableArchiving \"ImOnly\"\n```\n\n----------------------------------------\n\nTITLE: Disable Phone Number Masking - PowerShell\nDESCRIPTION: This PowerShell command disables phone number masking, making phone numbers visible to everyone in the meeting. This option is useful when privacy is not a concern or when participants need to see each other's phone numbers for collaboration. It uses the `Set-CsOnlineDialInConferencingTenantSettings` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/ptsn-mask-phone-numbers.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingTenantSettings -MaskPstnNumbersType \"NoMasking\"\n```\n\n----------------------------------------\n\nTITLE: Message Type: CHAT XML Example\nDESCRIPTION: This XML snippet shows a 'CHAT' message type, representing a text message sent by a user. The content attribute holds the actual text of the message.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Message type=\"CHAT\" content=\"hello\" id=\"1\">\n  <Sender UserName=\"TestUser kazuto\" id=\"10\" email=\"kazuto@litwareinc.com\" internal=\"true\" uri=\"kazuto@litwareinc.com\" /> \n  <DateTimeUTC since1970=\"1205351800522\" string=\"2008-03-12T19:56:40.522264Z\" long=\"633409486005222640\" /> \n</Message>\n```\n\n----------------------------------------\n\nTITLE: Install Watcher Node Incorrect Case using PowerShell\nDESCRIPTION: This PowerShell command attempts to install the Watcher Node using the Watchernode.msi installer but uses incorrect letter casing for the Authentication parameter. This example highlights that the Authentication=TrustedServer parameter is case-sensitive and must be typed exactly as shown.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\Tools\\Watchernode.msi authentication=trustedserver\n```\n\n----------------------------------------\n\nTITLE: Get Management Store Replication Status - PowerShell\nDESCRIPTION: This cmdlet retrieves the replication status of the Central Management store to the Edge server. It should be run on the internal computer hosting the Central Management store or a domain-joined computer with Skype for Business Server 2019 Core Components installed. The expected output is a boolean value indicating the replication status.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/verify-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsManagementStoreReplicationStatus\n```\n\n----------------------------------------\n\nTITLE: Simplified Command for Moving User to TeamsOnly\nDESCRIPTION: This snippet shows a simplified version of the `Move-CsUser` command for moving a user to TeamsOnly. It assumes that the necessary prerequisites and permissions are already configured. It does not require a separate credential object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/move-users-from-on-premises-to-teams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser -Identity username@contoso.com -Target sipfed.online.lync.com\n```\n\n----------------------------------------\n\nTITLE: Setting PSTN Usages for Global Voice Routing Policy - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to add PSTN usage records to the global voice routing policy. This is a prerequisite for using the global policy for Phone System with on-premises PSTN connectivity users.  The PSTNUsages parameter accepts a list of PSTN usage record IDs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/skype-for-business-hybrid-solutions/plan-your-phone-system-cloud-pbx-solution/assign-a-voice-routing-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSVoiceRoutingPolicy -Identity Global -PSTNUsages <PSTNUsagesId>\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Site Information - Skype for Business PowerShell\nDESCRIPTION: This PowerShell command retrieves and displays information about all network sites configured in the Skype for Business Server deployment. The command returns details such as Identity, NetworkSiteID, Description, NetworkRegionID, BypassID, BWPolicyProfileID, and LocationPolicy for each site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsNetworkSite\n```\n\n----------------------------------------\n\nTITLE: Setting Pro Management Agent Proxy - Single Proxy\nDESCRIPTION: This command sets the proxy server for the Pro Management Agent using the bitsadmin utility in Windows. It configures a manual proxy with the specified proxy server and port for the LOCALSYSTEM account. Replace contosoproxy.corp.net:8080 with the actual proxy server address and port.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-prep.md#_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nbitsadmin /Util /SetIEProxy LOCALSYSTEM MANUAL_PROXY contosoproxy.corp.net:8080 \"\"\n```\n\n----------------------------------------\n\nTITLE: Create Watcher Node with Auto-Discovery - PowerShell\nDESCRIPTION: This PowerShell snippet creates a watcher node configuration using automatic discovery of the target pool instead of targeting a pool directly. It uses the `New-CsWatcherNodeConfiguration` cmdlet with the `-UseAutoDiscovery` parameter set to `$true`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsWatcherNodeConfiguration -UseAutoDiscovery $true -TargetFqdn \"atl-cs-001.litwareinc.com\" -PortNumber 5061 -TestUsers @{Add= \"sip:watcher1@litwareinc.com\",\"sip:watcher2@litwareinc.com\"}\n```\n\n----------------------------------------\n\nTITLE: Remove Calling Delegate - PowerShell\nDESCRIPTION: This snippet uses the `Remove-CsUserCallingDelegate` cmdlet to remove a delegate (`user2`) from a user's (`user1`) calling delegation settings in Microsoft Teams. After running this cmdlet, the specified user will no longer be a delegate for the specified user. The Teams PowerShell module is required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/user-call-settings.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsUserCallingDelegate -Identity user1@contoso.com -Delegate user2@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Checking Teams PowerShell Module Version\nDESCRIPTION: This snippet imports the MicrosoftTeams module and retrieves the installed version. It's a prerequisite for using the BYOD and Desks policy cmdlets. The TPM version should be greater than 6.5.0. If the version is older, it provides a link to update the module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/bring-your-own-device.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module MicrosoftTeams\nGet-Module -Name MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Upgrade Policy to online user using PowerShell\nDESCRIPTION: This PowerShell command assigns the 'UpgradeToTeams' instance of TeamsUpgradePolicy to a specific user, upgrading them to TeamsOnly mode. The -Identity parameter specifies the user to be upgraded. This command is intended for users already homed in the cloud.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-tools.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName UpgradeToTeams -Identity $user\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShellGet - PowerShell\nDESCRIPTION: This command installs or updates the PowerShellGet module, which is required for installing modules from the PowerShell Gallery. The `-Force` parameter overwrites any existing versions, and `-AllowClobber` prevents errors if files are in use.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-install.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name PowerShellGet -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Creating a Trusted Application Pool in Skype for Business Server\nDESCRIPTION: This command creates a new trusted application pool in Skype for Business Server using the Skype for Business Server Management Shell. It requires specifying the pool's FQDN, Registrar FQDN, and site ID. This pool is needed to run the SEFAUtil tool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTrustedApplicationPool -id <Pool FQDN> -Registrar <Pool Registrar FQDN> -site Site:<Pool Site>\n```\n\n----------------------------------------\n\nTITLE: Get Dial Plans with PowerShell in Skype for Business\nDESCRIPTION: This PowerShell command retrieves dial plans configured in the Skype for Business Server environment. It is used to verify the settings of existing dial plans, specifically to identify if the dial-in conferencing region is set. The command returns a list of dial plans and their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/dial-in-conferencing.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsDialPlan [-Identity <Identifier of the dial plans to be retrieved>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Get Azure Tenant ID via PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve the Azure tenant ID (Directory ID) using PowerShell. By logging into the Azure account, the script provides access to account details, including the tenant ID, which is required for CQD configurations and filtering.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cqd-data-and-reports.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nLogin-AzureRmAccount\n```\n\n----------------------------------------\n\nTITLE: Enable VbSS for specific user policy - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies a specific user conferencing policy to enable Video-Based Screen Sharing (VbSS) by setting the ApplicationSharingMode to VideoWithFallback. Replace [PolicyName] with the actual policy name. This command needs to be executed in the Skype for Business Management Console.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/video-based-screen-sharing.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingPolicy -Identity [PolicyName] -ApplicationSharingMode VideoWithFallback\n```\n\n----------------------------------------\n\nTITLE: Assign Certificate to Service Principal - PowerShell\nDESCRIPTION: This command assigns the encoded X.509 certificate to a specified Microsoft 365 or Office 365 service principal.  The -AppPrincipalId parameter identifies the service principal. Requires the $credentialsValue variable to contain the Base64 encoded certificate data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-MsolServicePrincipalCredential -AppPrincipalId 00000004-0000-0ff1-ce00-000000000000 -Type Asymmetric -Usage Verify -Value $credentialsValue \n```\n\n----------------------------------------\n\nTITLE: Create Announcement with TTS Prompt - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create an announcement with a text-to-speech (TTS) prompt using the New-CsAnnouncement cmdlet, including specifying the text and language for the prompt.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-an-announcement.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAnnouncement -Parent service:ApplicationServer:pool0.contoso.com -Name \"Help Desk Announcement\" -TextToSpeechPrompt \"The Help Desk number has changed. Please dial 5550100.\" -Language \"en-US\"\n```\n\n----------------------------------------\n\nTITLE: Creating Emergency Calling Policy with PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new Teams Emergency Calling Policy named E911WFH and sets the ExternalLocationLookupMode parameter to Enabled, allowing end users to configure their own emergency addresses.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/emergency-calling-dispatchable-location.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsEmergencyCallingPolicy -Identity E911WFH -ExternalLocationLookupMode Enabled\n```\n\n----------------------------------------\n\nTITLE: Testing Federation Configuration - PowerShell\nDESCRIPTION: This PowerShell command tests the federation configuration using the `Test-CsFederatedPartner` cmdlet. It requires the FQDN of the Access Edge server used for federated SIP traffic, the FQDN of the federated domain, and the FQDN of the Access Edge server used by the federated organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nTest-CsFederatedPartner -TargetFqdn <FQDN of Access Edge server used for federated SIP traffic> -Domain <FQDN of federated domain> -ProxyFqdn <FQDN of the Access Edge server used by the federated organization>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nTest-CsFederatedPartner -TargetFqdn accessproxy.contoso.com -Domain push.lync.com -ProxyFqdn sipfed.online.lync.com\n```\n\n----------------------------------------\n\nTITLE: Enable Q&A in Teams Meeting Policy using PowerShell\nDESCRIPTION: This PowerShell script enables the Q&A feature for organizers who are assigned a specific Teams meeting policy. It uses the `Set-CsTeamsMeetingPolicy` cmdlet to set the `QnAEngagementMode` parameter to `Enabled`. This allows organizers with the assigned policy to use Q&A in meetings and events they create.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-qna-for-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -QnAEngagementMode Enabled\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Meeting Recordings via MS Graph API (HTTP)\nDESCRIPTION: This example demonstrates how to retrieve links to all available Teams meeting recordings for a given user using the Microsoft Graph API. It filters based on the meeting organizer ID. It requires OnlineMeetingRecording.Read.All permission.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/users/{id}/onlineMeetings/getAllRecordings?$filter=MeetingOrganizer/User/Id eq ‘{id}’\n```\n\n----------------------------------------\n\nTITLE: Reapplying a Mitigation - PowerShell\nDESCRIPTION: This PowerShell cmdlet reapplies a previously blocked mitigation.  It removes the specified Mitigation ID from the list of blocked mitigations, effectively allowing EMS to apply it to the Skype for Business Server. Replace `<poolName>` with the FQDN of the Skype for Business pool and `M0001` with the mitigation ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/emergency-mitigation-service-overview.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Csmitigation - PoolFqdn <poolName> -MitigationApplied M0001\n```\n\n----------------------------------------\n\nTITLE: Moving Central Management Server Store with PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to move the Central Management Server store to another Front End server. It's crucial for relocating the CMS store if it has already been defined, published, and deployed. Refer to the official documentation for parameters and usage details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/2019/topobld/ms.lync.tb.CmsSettingsExpander.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsManagementServer\n```\n\n----------------------------------------\n\nTITLE: Configure Call Data Connector (First Time)\nDESCRIPTION: This PowerShell command establishes an online data collector and sets the tenant ID for Call Data Connector. It's intended for the initial setup of the connector. Replace <tenant_id> with the actual tenant ID. It requires the Microsoft Teams PowerShell module to be installed and the user to be logged in as an administrator.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCloudCallDataConnection | Set-CsCloudCallDataConnector -TenantId <tenant_id>\n```\n\n----------------------------------------\n\nTITLE: Creating Allowed Domains for federation using New-CsAllowedDomain - Powershell\nDESCRIPTION: This command adds allowed domains for federation.  If using closed federation, any SIP domains of the pure online tenant (excluding *.microsoftonline.com) must be added as Allowed Domains in Microsoft 365 to allow cross-communication. Used in on-premises AcquiredCompany.com\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAllowedDomain\n```\n\n----------------------------------------\n\nTITLE: Failback Pool - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet fails back users who were originally homed in one pool and failed over to another. The `-PoolFQDN` parameter specifies the FQDN of the pool to which users are being failed back. `-Verbose` provides detailed output.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsPoolFailback -PoolFQDN <Pool1 FQDN> -Verbose\n```\n\n----------------------------------------\n\nTITLE: Enable Call Forwarding - PowerShell\nDESCRIPTION: This command enables call forwarding for a user to a specified destination. It supports options for setting delegates, delegate ring wait time, and applying settings during active work hours.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserCallForwardingSettings [-Identity] <UserIdParameter> -EnableForwarding <String> [-Delegates <PSListModifier>] [-DelegateRingWaitTime <TimeSpan>] [-SettingsActiveWorkHours]\n```\n\n----------------------------------------\n\nTITLE: Set User Voicemail Settings using PowerShell\nDESCRIPTION: The `Set-CsOnlineVoicemailUserSettings` cmdlet is used to configure custom text-to-speech greetings and prompt language for a user.  This is done through PowerShell, allowing administrators to customize the voicemail experience for individual users. The cmdlet requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-default-language-for-greetings-and-emails.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[Set-CsOnlineVoicemailUserSettings](/powershell/module/teams/set-csonlinevoicemailusersettings)\n```\n\n----------------------------------------\n\nTITLE: Calculating SIP Trunk Peak Bandwidth\nDESCRIPTION: This formula calculates the peak bandwidth required for a SIP trunk based on the maximum number of simultaneous calls. It considers both the 64 kbps required for each call and the header size (maximum 20 bytes). The formula is used to determine bandwidth needs for SIP trunk implementations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/sip-trunking.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nSIP Trunk Peak Bandwidth = Max Simultaneous Calls x (64 kbps + header size)\n```\n\n----------------------------------------\n\nTITLE: Reset IIS\nDESCRIPTION: This command resets the Internet Information Services (IIS) on the SharePoint server. This is required to apply the changes made by installing the Exchange Web Services Managed API. Resetting IIS ensures that the SharePoint server recognizes and utilizes the newly installed API.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/sharepoint-to-search-for-archived-data.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\niisreset\n```\n\n----------------------------------------\n\nTITLE: Unblock File via PowerShell\nDESCRIPTION: This PowerShell command is used to unblock a downloaded file, allowing it to be executed without interaction. This is necessary because downloaded files may be marked as blocked by Windows. The command ensures that the script can run without prompting for user confirmation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manual-update.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Unblock-File](/powershell/module/microsoft.powershell.utility/unblock-file)\n```\n\n----------------------------------------\n\nTITLE: Removing Synthetic Transactions from a Watcher Node - PowerShell\nDESCRIPTION: This code snippet demonstrates how to remove a synthetic transaction from an existing watcher node using the Set-CsWatcherNodeConfiguration cmdlet. It uses the Remove method within the Tests parameter to specify the transaction to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" -Tests @{Remove=\"ABWQ\"}\n```\n\n----------------------------------------\n\nTITLE: New/Set-CsTeamsEmergencyCallingPolicy Cmdlet Update\nDESCRIPTION: This snippet describes the addition of the `EnhancedEmergencyServiceDisclaimer` parameter to the `Set-CsTeamsEmergencyCallingPolicy` and `New-CsTeamsEmergencyCallingPolicy` cmdlets. This parameter allows administrators to configure enhanced emergency service disclaimers within Teams emergency calling policies, enhancing safety features. It requires the MicrosoftTeams module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_132\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEmergencyCallingPolicy\nNew-CsTeamsEmergencyCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Removing CDR Configuration using Remove-CsCdrConfiguration (PowerShell)\nDESCRIPTION: This cmdlet removes a Call Detail Recording (CDR) configuration for a specified site in Skype for Business. The `-Identity` parameter specifies the site (e.g., `site:Redmond`) to be removed.  This action permanently deletes the CDR configuration for the specified site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsCdrConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Get Global Teams Meeting Broadcast Policy PowerShell\nDESCRIPTION: Retrieves the global Teams meeting broadcast policy to verify settings, particularly the `-AllowBroadcastScheduling` parameter. This command is often used as a preliminary step before modifying or assigning policies.  It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsMeetingBroadcastPolicy -identity Global\n```\n\n----------------------------------------\n\nTITLE: Updating a Network Site with Set-CsNetworkSite (PowerShell)\nDESCRIPTION: This snippet modifies an existing network site in Skype for Business Server. The `-Identity` parameter specifies the site to modify, and `-BWPolicyProfileID` associates the site with a bandwidth policy profile. The example modifies the site named \"Vancouver\" and associates it with the \"LowBWLimits\" bandwidth policy profile.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\n  Set-CsNetworkSite -Identity Vancouver - BWPolicyProfileID LowBWLimits\n```\n\n----------------------------------------\n\nTITLE: Allow Users to Choose Busy Options via PowerShell\nDESCRIPTION: This PowerShell script configures the `-BusyOnBusyEnabledType` parameter to allow users to choose their busy options for users in the global policy instance. Users can then configure how incoming calls are handled when they are already in a call. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/inbound-call-routing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -BusyOnBusyEnabledType UserOverride\n```\n\n----------------------------------------\n\nTITLE: Enabling Spatial Audio via XML Configuration\nDESCRIPTION: This code snippet demonstrates how to enable spatial audio in Microsoft Teams Rooms using an XML configuration file. Spatial audio enhances the meeting experience by making sound emanate from the direction of the speaker. This setting should be used in conjunction with Teams-certified stereo speakers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/room-planning-guidance.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<IsSpatialAudioEnabled>true</IsSpatialAudioEnabled>\n```\n\n----------------------------------------\n\nTITLE: Remove Directly Assigned Teams Meeting Broadcast Policy in Bulk\nDESCRIPTION: This PowerShell snippet removes Teams meeting broadcast policies from a batch of users. This method utilizes the New-CsBatchPolicyAssignmentOperation cmdlet for bulk policy assignment. The $users variable should contain a list of user identities.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsBatchPolicyAssignmentOperation -OperationName \"Assigning null at bulk\" -PolicyType TeamsMeetingBroadcastPolicy -PolicyName $null -Identity $users\n```\n\n----------------------------------------\n\nTITLE: Create Call Queue with Overflow Handling - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new call queue and configure the Overflow action to forward calls to an Auto Attendant or Call Queue directly. The `New-CsCallQueue` cmdlet is used, specifying the `OverflowAction` as `Forward` and the `OverflowActionTarget` with the GUID of the Auto Attendant or Call Queue.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -OverflowAction Forward -OverflowActionTarget <Auto Attendant or Call Queue GUID>\n```\n\n----------------------------------------\n\nTITLE: Set Teams App Permission Policy\nDESCRIPTION: This snippet refers to the `Set-CsTeamsAppPermissionPolicy` cmdlet. It's for configuring app permission policies in Teams using PowerShell.  It manages user access to apps within the Teams environment. No specific inputs or outputs beyond the PowerShell cmdlet's standard behavior are described.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsAppPermissionPolicy\n```\n\n----------------------------------------\n\nTITLE: Setting Unified Messaging Service Parameters in Exchange PowerShell\nDESCRIPTION: This snippet demonstrates how to set Unified Messaging service parameters, including the dial plan and startup mode, using the Exchange Management Shell. It requires the Exchange Management Shell and a pre-existing Unified Messaging dial plan.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/exchangeunified-messaging-for-voice-mail.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-UmService -Identity \"atl-exchangeum-001.litwareinc.com\" -DialPlans \"RedmondDialPlan\" -UMStartupMode \"Dual\"\n```\n\n----------------------------------------\n\nTITLE: Enabling QoS for a Specific Site in Skype for Business - PowerShell\nDESCRIPTION: This command enables Quality of Service (QoS) for a specific site (e.g., Redmond) in Skype for Business Server. Site-level settings take precedence over global settings.  It requires the Skype for Business Server Management Shell and knowledge of the site's identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/enabling-qos-for-devices-that-are-not-based-on-windows.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMediaConfiguration -Identity site:Redmond -EnableQoS `$True\n```\n\n----------------------------------------\n\nTITLE: Prompting for External Domain Name in PowerShell\nDESCRIPTION: This snippet prompts the user for the application's external domain name, if it differs from the internal domain. This is necessary for ADFS OAuth to work with external websites.  It uses `Read-Host` to get user input.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$extDomain = Read-Host -Prompt \"Enter Admin Control Panel application's external domain name if its different from $domain or else ADFS OAuth wouldn't work for external website for Admin Control Panel \"\n```\n\n----------------------------------------\n\nTITLE: Creating Voice Routing Policy with PowerShell\nDESCRIPTION: This snippet creates a voice routing policy using the `New-CsOnlineVoiceRoutingPolicy` cmdlet.  The policy is named 'US Only', and the `-OnlinePstnUsages` parameter assigns the 'US and Canada' PSTN usage.  This policy determines which routes are used for outbound calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoutingPolicy \"US Only\" -OnlinePstnUsages \"US and Canada\"\n```\n\n----------------------------------------\n\nTITLE: Unassign a private line using PowerShell\nDESCRIPTION: This PowerShell script removes a Microsoft Calling Plan phone number assignment as a private line from a specified user. It uses the `Remove-CsPhoneNumberAssignment` cmdlet. Two variations are shown: one to remove a specific number and another to remove all numbers from a user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/private-line.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPhoneNumberAssignment -Identity user1@contoso.com -PhoneNumber +14255551234 -PhoneNumberType CallingPlan\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPhoneNumberAssignment -Identity user1@contoso.com -RemoveAll  \n```\n\n----------------------------------------\n\nTITLE: Get Person resource using Microsoft Graph API\nDESCRIPTION: Retrieves information about a person using the Microsoft Graph API. This API allows developers to access user profile details within Microsoft 365. No specific dependencies are mentioned beyond the Microsoft Graph API. Input is a user ID. Output is the person resource.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\n[Person resource type](/graph/api/resources/person)\n```\n\n----------------------------------------\n\nTITLE: Reading MAU preferences using defaults command\nDESCRIPTION: These commands are used to read the Microsoft Auto Update (MAU) preferences from the command line. The first command reads from the managed preferences, which take precedence. The second reads from the standard preferences. This allows for identification of update configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-update.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndefaults read /Library/Managed\\ Preferences/com.microsoft.autoupdate2\n```\n\nLANGUAGE: shell\nCODE:\n```\ndefaults read com.microsoft.autoupdate2\n```\n\n----------------------------------------\n\nTITLE: Listing QoE Configurations using Get-CsQoEConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves a list of all Quality of Experience (QoE) configurations within the Skype for Business environment. No parameters are used, which retrieves all configurations. It returns a list of QoE configuration objects with their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsQoEConfiguration\n```\n\n----------------------------------------\n\nTITLE: Bulk Update Subnet Locations from CSV - PowerShell\nDESCRIPTION: These cmdlets import subnet location data from a CSV file named \"subnets.csv\" and then use the `Set-CsLisSubnet` cmdlet to update the location database in bulk. The CSV file should contain columns corresponding to the parameters of the `Set-CsLisSubnet` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$g = Import-Csv subnets.csv\n$g | Set-CsLisSubnet\n```\n\n----------------------------------------\n\nTITLE: Get Policy Assignments for a Group using PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all policy assignments for a specified group.  The group is identified by its GroupId. The cmdlet returns a list of all policies applied to the group, which can be useful for auditing and troubleshooting policy application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsGroupPolicyAssignment -GroupId e050ce51-54bc-45b7-b3e6-c00343d31274\n```\n\n----------------------------------------\n\nTITLE: Import Persistent Chat Data using Import-CsPersistentChatData, PowerShell\nDESCRIPTION: This PowerShell cmdlet imports Persistent Chat data. It can import from a file specified by -FileName or from byte input using -ByteInput. This cmdlet is used to restore Persistent Chat data previously exported using Export-CsPersistentChatData. Access to the Persistent Chat database is required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/back-up-and-restore-databases.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsPersistentChatData -FileName <String> <COMMON PARAMETERS>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsPersistentChatData -ByteInput <Byte > <COMMON PARAMETERS>\n```\n\n----------------------------------------\n\nTITLE: Assign DisallowCalling Policy via PowerShell\nDESCRIPTION: This PowerShell snippet shows how to assign the DisallowCalling calling policy to a specific user. This policy disables all calling features for the user, which is recommended when using Teams in a virtualized environment. The Identity parameter specifies the user's email ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-on-rdp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsCallingPolicy -PolicyName DisallowCalling -Identity \"user email id\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Teams VDI Policy - PowerShell\nDESCRIPTION: This snippet shows how to delete a previously created Teams VDI policy using the `Remove-CsTeamsMeetingPolicy` cmdlet. The `-Identity` parameter specifies the policy to remove. This command removes the policy from the organization's list of policies and removes all assignments of this policy from users who have the policy assigned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Remove-CsTeamsMeetingPolicy -Identity RestrictedUserPolicy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Watcher Node Configuration - PowerShell\nDESCRIPTION: This command retrieves the configuration details of all watcher nodes in the Skype for Business Server deployment. The `Get-CsWatcherNodeConfiguration` cmdlet retrieves the configuration information for all watcher nodes. It returns information such as identity, test users, extended tests, target FQDN, and port number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWatcherNodeConfiguration\n```\n\n----------------------------------------\n\nTITLE: Enable Cloud Recording for Specific Groups\nDESCRIPTION: These PowerShell commands create a new Teams meeting policy with cloud recording enabled and then assign that policy to a specific group. Replace \"Your Policy Name\" and \"Group ID\" with the appropriate values. The MicrosoftTeams module must be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-recording.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity \"Your Policy Name\" -AllowCloudRecording $true\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -Group \"Group ID\" -PolicyName \"Your Policy Name\"\n```\n\n----------------------------------------\n\nTITLE: Assign Location to Resource Account using PowerShell\nDESCRIPTION: This code snippet illustrates how to assign a location to a resource account number for Calling Plan, Operator Connect, and Direct Routing using the `Set-CsPhoneNumberAssignment` PowerShell cmdlet. The location ID obtained from `Get-CsOnlineLisLocation` is used. Ensure the Teams PowerShell module is installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment](/powershell/module/teams/set-csphonenumberassignment) PowerShell cmdlet.\n```\n\n----------------------------------------\n\nTITLE: Creating a Conferencing Policy via PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new conferencing policy using the `New-CsConferencingPolicy` cmdlet.  It sets the `MaxMeetingSize` parameter to 50, overriding the default value of 250. The policy is named `SalesConferencingPolicy`. Requires Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/create-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsConferencingPolicy -Identity SalesConferencingPolicy -MaxMeetingSize 50\n```\n\n----------------------------------------\n\nTITLE: Assign AllOff Meeting Policy via PowerShell\nDESCRIPTION: This PowerShell snippet shows how to assign the AllOff meeting policy to a specific user. This policy disables all meeting features for the user, which is recommended when using Teams in a virtualized environment. The Identity parameter specifies the user's email ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-on-rdp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -PolicyName AllOff -Identity \"user email id\"\n```\n\n----------------------------------------\n\nTITLE: Enable CDR in multiple locations - PowerShell\nDESCRIPTION: This PowerShell command enables Call Detail Recording (CDR) for all CDR configuration settings currently in use within the Skype for Business Server organization. It retrieves all CDR configurations using `Get-CsCdrConfiguration` and then pipes them to `Set-CsCdrConfiguration` to enable CDR for each.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/enable-cdr.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCdrConfiguration | Set-CsCdrConfiguration -EnableCDR $True\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edge Server Media Port Settings - PowerShell\nDESCRIPTION: This command retrieves and displays the current media communication port settings (Identity, MediaCommunicationPortStart, and MediaCommunicationPortCount) for all Edge Servers. The output is filtered using Select-Object to display only the relevant properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-edge-servers.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsService -EdgeServer | Select-Object Identity, MediaCommunicationPortStart, MediaCommunicationPortCount\n```\n\n----------------------------------------\n\nTITLE: Get Help on New-CsTrustedApplicationPool Cmdlet\nDESCRIPTION: This PowerShell command displays the full help documentation for the `New-CsTrustedApplicationPool` cmdlet. It provides detailed information about the parameters, usage, and functionality of the cmdlet, aiding in the proper configuration of trusted application pools in Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help New-CsTrustedApplicationPool -Full | more\n```\n\n----------------------------------------\n\nTITLE: Get PIN Policy Information using PowerShell\nDESCRIPTION: This PowerShell command retrieves information about PIN policies configured for Skype for Business Server.  It verifies the installation of Skype for Business Server 2015 by confirming that PIN policy information is accessible. Successful retrieval indicates that core components have been correctly installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Create Teams Messaging Policy - PowerShell\nDESCRIPTION: This command creates a new Teams messaging policy with specified parameters. The `-Identity` parameter defines the name of the new policy. Other parameters, such as `-AllowUserEditMessages`, configure the policy's settings. The output confirms policy creation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-quick-start-guide-edu.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsMessagingPolicy -Identity &lt;policy name&gt; -&lt;parameter name&gt; -&lt;parameter value&gt;\n```\n\n----------------------------------------\n\nTITLE: Display Current Call Handling Settings with SEFAUtil\nDESCRIPTION: This command displays the call handling settings for a specific user using the SEFAUtil tool. It utilizes the `/server` switch to specify the Skype for Business Server.  The command needs to be executed in a command prompt with appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBS2015server.contoso.com katarina@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Get Exchange UM Auto Attendant - Powershell\nDESCRIPTION: Retrieves a list of all Exchange UM auto attendants and their properties using the `Get-UMAutoAttendant` cmdlet piped to `Format-List`. This is used during migration from Exchange UM to Phone System to identify existing configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-onprem-ra.md#_snippet_6\n\nLANGUAGE: Powershell\nCODE:\n```\nGet-UMAutoAttendant | Format-List\n```\n\n----------------------------------------\n\nTITLE: Disable NTCredentials Registry Setting\nDESCRIPTION: This registry setting prevents users from being prompted for Windows credentials before being prompted for their PIN in a two-factor authentication environment. This setting is applied to the local machine to disable NTLM or Kerberos authentication prompts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/two-factor-authentication.md#_snippet_1\n\nLANGUAGE: registry\nCODE:\n```\nHKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Office\\15.0\\Lync\n\nREG_DWORD: DisableNTCredentials\n\nValue: 0x0\n```\n\n----------------------------------------\n\nTITLE: Updating PIN Policies in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet modifies an existing PIN policy in Skype for Business. The Identity parameter specifies the PIN policy to modify, and other parameters allow updating various settings like MinPasswordLength. The example updates the minimum password length for the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsPinPolicy -Identity site:Redmond -MinPasswordLength 10\n```\n\n----------------------------------------\n\nTITLE: Test if a Number is Blocked via PowerShell\nDESCRIPTION: This PowerShell command tests whether a given phone number is blocked by any of the configured number patterns. It requires the PhoneNumber parameter (a numeric string without extra characters) and returns a boolean value (IsNumberBlocked) indicating whether the number is blocked.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsInboundBlockedNumberPattern -PhoneNumber 13125558884\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsInboundBlockedNumberPattern -PhoneNumber 13125558883\n```\n\n----------------------------------------\n\nTITLE: Get SIP Gateway API Service Principal - Azure AD Module - PowerShell\nDESCRIPTION: This snippet retrieves the SIP Gateway API service principal using the Azure AD module.  It filters based on the AppId. If no output is returned the service principal does not exist and should be created.  It requires the AzureAD module to be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AzureADServicePrincipal -Filter \"AppId eq '0ab9de21-b802-4d77-b279-1ad41ca233b4'\"\n```\n\n----------------------------------------\n\nTITLE: Associate Phone Number to Network Site using PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to associate an Operator Connect India fixed-line phone number with a specific network site. The phone number must correspond to the network site where the user is located when making or receiving calls. This configuration is crucial for enforcing Location-Based Routing policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/location-based-routing-india-plan.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -PhoneNumber <string> -NetworkSiteId <string>\n```\n\n----------------------------------------\n\nTITLE: Upgrading User to TeamsOnly Mode Using Grant-CsTeamsUpgradePolicy (PowerShell)\nDESCRIPTION: This PowerShell command upgrades a user to TeamsOnly mode.  Before running this command, ensure the user is properly configured and licensed for Teams. Incoming PSTN calls will land in the user's Teams client after this upgrade.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-teams-on-prem-pstn-considerations.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy\n```\n\n----------------------------------------\n\nTITLE: Installing Watcher Node Configuration Files with Negotiate - PowerShell\nDESCRIPTION: This PowerShell command installs the Watcher Node Configuration Files (Watchernode.msi) using the Negotiate authentication method.  This is required when the watcher node cannot be configured as a trusted application pool.  Administrators will need to manage test user passwords on the watcher node in this mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nc:\\Tools\\Watchernode.msi Authentication=Negotiate\n```\n\n----------------------------------------\n\nTITLE: Enabling User Override for Voice/Face Enrollment - PowerShell\nDESCRIPTION: This PowerShell snippet sets the `EnrollUserOverride` parameter to `Enabled` on the Global Teams meeting policy. This allows users to enroll their voice and face for recognition features in Teams meetings. It modifies the Global policy for all users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -EnrollUserOverride Enabled\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Teams VDI Policy - PowerShell\nDESCRIPTION: This snippet illustrates how to update an existing Teams VDI policy using the `Set-CsTeamsVdiPolicy` cmdlet. The `-Identity` parameter specifies the policy to update, and the `-VDI2Optimization` parameter modifies the SlimCore optimization setting.  In this example, the `RestrictedUserPolicy` is updated to disable SlimCore optimization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Set-CsTeamsVdiPolicy -Identity RestrictedUserPolicy -VDI2Optimization \"Disabled\"\n```\n\n----------------------------------------\n\nTITLE: Grant Conferencing Policy - PowerShell\nDESCRIPTION: Assigns a specific conferencing policy to a user in Skype for Business Server. This allows for customizing the conferencing experience based on individual user needs. It requires the identity of the user and the name of the conferencing policy. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Set scale and resolution for extended display (XML)\nDESCRIPTION: This XML snippet sets the resolution and scaling for the extended front-of-room display. ExtendedFoRDisplayResolution sets the width and height in pixels (e.g., 1920,1080), and ExtendedFoRDisplayScaling sets the scaling factor (e.g., 100).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-room-scale-res.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ExtendedFoRDisplay> \n    <ExtendedFoRDisplayResolution>1920,1080</ExtendedFoRDisplayResolution> \n    <ExtendedFoRDisplayScaling>100</ExtendedFoRDisplayScaling> \n</ExtendedFoRDisplay>  \n```\n\n----------------------------------------\n\nTITLE: Set EnterpriseVoiceEnabled property - PowerShell\nDESCRIPTION: This PowerShell command sets the EnterpriseVoiceEnabled property to true for a user using the `Set-CsPhoneNumberAssignment` cmdlet. This is necessary for users to have PSTN functionality in Teams, especially when migrating from on-premises or after assigning a Phone System license.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-teams-on-prem-pstn-considerations.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -EnterpriseVoiceEnabled $True\n```\n\n----------------------------------------\n\nTITLE: Remove a Persistent Chat Category - PowerShell\nDESCRIPTION: This PowerShell command removes a Persistent Chat category with the specified Identity (atl-cs-001.contoso.com\\helpdesk). Before removing a category, all chat rooms under it must be either deleted or moved to a new category. The Identity parameter identifies the category to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/categories.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPersistentChatCategory -Identity \"atl-cs-001.contoso.com\\helpdesk\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global Teams Mobility Policy with PowerShell\nDESCRIPTION: This PowerShell snippet updates the default Global Mobility policy for all users. Replace '<Policy name>' with the policy name (e.g., TeamsFirst, NativeFirst, UserSelected) and '<Dialer preference>' with the dialer preference (Teams, Native, or UserOverride).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMobilityPolicy -identity <Policy name> -MobileDialerPreference <Dialer preference>\t\n```\n\n----------------------------------------\n\nTITLE: Creating Call Park Orbit Ranges using New-CSCallParkOrbit Cmdlet\nDESCRIPTION: This cmdlet is used to create orbit ranges in the call park orbit table and associate them with the Application service hosting the Call Park application.  Orbit ranges are configured as a block of virtual extensions for seamless integration with existing dial plans.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-call-park.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CSCallParkOrbit\n```\n\n----------------------------------------\n\nTITLE: Email Subject: Announcement - Online Phone System\nDESCRIPTION: This snippet presents the subject line for the first email to be sent three weeks prior to the launch of the new online phone system. It is intended to capture users' attention and inform them about upcoming changes to their phone system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/prepare-my-users-email-templates.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nIMPORTANT ANNOUNCEMENT about your office desk phone\n```\n\n----------------------------------------\n\nTITLE: Get Call Park Orbit Ranges with PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to retrieve a list of all Call Park orbit ranges in the Skype for Business deployment. It requires the Skype for Business Server Management Shell and lists the orbits including their CallParkServiceId and CallParkServerFqdn which can then be verified.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-call-park-application-settings.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCallParkOrbit\n```\n\n----------------------------------------\n\nTITLE: Disable VbSS globally - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies the global conferencing policy to disable Video-Based Screen Sharing (VbSS) by setting the ApplicationSharingMode to RDP. This affects all users without an assigned policy. This command needs to be executed in the Skype for Business Management Console.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/video-based-screen-sharing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingPolicy -ApplicationSharingMode RDP\n```\n\n----------------------------------------\n\nTITLE: Add/Remove/Get-TeamChannelUser Cmdlets Release\nDESCRIPTION: This snippet indicates the release of the `Get-TeamChannelUser`, `Add-TeamChannelUser`, and `Remove-TeamChannelUser` cmdlets. These cmdlets provide functionalities to manage users within Teams channels. They enable administrators to retrieve, add, and remove users from specific channels via PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_138\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-TeamChannelUser\nAdd-TeamChannelUser\nRemove-TeamChannelUser\n```\n\n----------------------------------------\n\nTITLE: Creating a New Voice Routing Policy - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to create a new voice routing policy. The Identity parameter specifies the unique identifier for the policy, Name sets the display name, and PSTNUsages associates PSTN usage records with the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/skype-for-business-hybrid-solutions/plan-your-phone-system-cloud-pbx-solution/assign-a-voice-routing-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CSVoiceRoutingPolicy -Identity <String> -Name <String> -PSTNUsages <PSTNUsagesId>\n```\n\n----------------------------------------\n\nTITLE: Enable Client Media Port Range for a Specific Site - PowerShell\nDESCRIPTION: This command enables the client media port range for a specified site. The Identity parameter allows targeting a specific site, such as \"site:Redmond\", to apply the configuration changes to that particular location.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-skype-clients.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsConferencingConfiguration -Identity \"site:Redmond\" -ClientMediaPortRangeEnabled $True\n```\n\n----------------------------------------\n\nTITLE: Enabling a User for Unified Messaging\nDESCRIPTION: This snippet demonstrates how to enable a user for Unified Messaging using the Exchange Management Shell. It requires the Exchange Management Shell, a UM mailbox policy, and the user's extension and SIP resource identifier.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/exchangeunified-messaging-for-voice-mail.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-UMMailbox -Extensions 100 -SIPResourceIdentifier \"kenmyer@litwareinc.com\" -Identity \"litwareinc\\kenmyer\" -UMMailboxPolicy \"RedmondMailboxPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Updating Teams Messaging Policy - PowerShell\nDESCRIPTION: This snippet showcases the addition of the `AllowExtendedWorkInfoInSearch` parameter to the `New-CsTeamsMessagingPolicy` and `Set-CsTeamsMessagingPolicy` cmdlets. This parameter likely controls whether extended work information is included in search results within Teams messaging. It's part of the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_39\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsMessagingPolicy -AllowExtendedWorkInfoInSearch\n```\n\n----------------------------------------\n\nTITLE: Remove New Teams for all users\nDESCRIPTION: This command uninstalls and deprovisions the new Teams client for all users on the machine, cleaning up the Teams user profile and cache. This uses the teamsbootstrapper.exe with the -x flag, which likely indicates an uninstall or removal action.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n./teamsbootstrapper -x\n```\n\n----------------------------------------\n\nTITLE: Configuring Watcher Node to Use Internal URLs - PowerShell\nDESCRIPTION: This command configures a watcher node to use internal Web URLs for testing. The `Set-CsWatcherNodeConfiguration` cmdlet modifies the watcher node configuration. The `-Identity` parameter specifies the FQDN of the watcher node, and the `-UseInternalWebUrls $True` parameter sets the node to use internal URLs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-watcher-001.litwareinc.com\" -UseInternalWebUrls $True\n```\n\n----------------------------------------\n\nTITLE: Getting SIP Trunks Assigned to a Pool (PowerShell)\nDESCRIPTION: This command uses the Get-CsTrunk cmdlet with the -PoolFqdn parameter to retrieve information about all SIP trunks assigned to a specific pool (atl-cs-001.litwareinc.com). This allows administrators to view the trunks associated with a particular Skype for Business pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/view-information-about-individual-sip-trunks.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrunk -PoolFqdn \"atl-cs-001.litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Create Trusted Application using PowerShell\nDESCRIPTION: This PowerShell command creates a trusted application for Skype for Business Server. It's used to configure a watcher node to run synthetic transactions as a trusted application. Parameters specify the application ID, trusted application pool FQDN, and port.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTrustedApplication -ApplicationId STWatcherNode -TrustedApplicationPoolFqdn atl-watcher-001.litwareinc.com -Port 5061\n```\n\n----------------------------------------\n\nTITLE: Get Line URI (Teams PowerShell)\nDESCRIPTION: This PowerShell command checks if the phone number was removed. It requires the Teams PowerShell module to be installed and the administrator to be connected to their Microsoft 365 tenant.  The parameter <user> needs to be replaced with the actual user identifier.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure-numbers.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity <user> | fl LineUri\n```\n\n----------------------------------------\n\nTITLE: Configuring Watcher Node to Use External URLs - PowerShell\nDESCRIPTION: This command configures a watcher node to use external Web URLs for testing. The `Set-CsWatcherNodeConfiguration` cmdlet modifies the watcher node configuration. The `-Identity` parameter specifies the FQDN of the watcher node, and the `-UseInternalWebUrls $False` parameter sets the node to use external URLs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-watcher-001.litwareinc.com\" -UseInternalWebUrls $False\n```\n\n----------------------------------------\n\nTITLE: Setting Voicemail Routing to User Controlled using PowerShell\nDESCRIPTION: This PowerShell script sets the voicemail routing to user controlled by modifying the Global Teams Calling Policy. The script uses the `Set-CsTeamsCallingPolicy` cmdlet with the `-AllowVoicemail` parameter set to `UserOverride`. Calls are forwarded to voicemail based on user call forwarding settings. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-phone-system-voicemail.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsCallingPolicy -Identity Global -AllowVoicemail UserOverride\n```\n\n----------------------------------------\n\nTITLE: Unified Contact Store Transaction Status - PowerShell\nDESCRIPTION: This command checks the migration status of test users' contact lists to Exchange for the Unified Contact Store synthetic transaction. It utilizes the `Test-CsUnifiedContactStore` cmdlet without the `-Setup` flag.  The command will succeed once the migration is complete.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsUnifiedContactStore -TargetFqdn pool0.contoso.com -UserSipAddress sip:testUser1@contoso.com -RegistrarPort 5061 -Authentication TrustedServer\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mobility Policy with Remove-CsMobilityPolicy in PowerShell\nDESCRIPTION: This snippet removes a mobility policy from Skype for Business using the `Remove-CsMobilityPolicy` cmdlet. It requires the `Identity` parameter to specify the policy to be deleted. This action permanently removes the specified mobility policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_36\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsMobilityPolicy -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Create a Custom Call Park Policy using PowerShell\nDESCRIPTION: This PowerShell snippet creates a new custom call park policy named \"SalesPolicy\". It enables call parking, sets the pickup number range from 500 to 1500, and configures the park timeout to 600 seconds.  The `New-CsTeamsCallParkPolicy` cmdlet is used with specified parameters to define the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-park-and-retrieve.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-CsTeamsCallParkPolicy -Identity \"SalesPolicy\" -AllowCallPark $true -PickupRangeStart 500 -PickupRangeEnd 1500 -ParkTimeoutSeconds 600\n```\n\n----------------------------------------\n\nTITLE: Export Archiving Data from Database - PowerShell\nDESCRIPTION: This command exports all the archiving data written to the archiving database specified by the Identity parameter since the date specified by the StartDate parameter. The resulting output files will be stored in the folder specified by the OutputFolder parameter. The Identity parameter specifies the archiving database to export from, StartDate specifies the date to start exporting from, and OutputFolder specifies the directory to store the exported files.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/export-archived-data.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsArchivingData -Identity \"ArchivingDatabase:atl-sql-001.contoso.com\" -StartDate 6/1/2012 -OutputFolder \"C:\\ArchivingExports\"\n```\n\n----------------------------------------\n\nTITLE: Importing MicrosoftTeams module in PowerShell\nDESCRIPTION: This PowerShell command imports the MicrosoftTeams module, which is required for managing Microsoft Teams settings and features. The module needs to be installed beforehand. This is the first step in using the Teams PowerShell cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-configure.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Defining Network Sites with PowerShell\nDESCRIPTION: This PowerShell command creates a new network site and associates it with a network region. The `NetworkSiteID` parameter specifies the unique identifier for the site, and the `NetworkRegionID` parameter specifies the region to which the site belongs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-your-network-topology.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTenantNetworkSite -NetworkSiteID <site ID> -NetworkRegionID <region ID>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTenantNetworkSite -NetworkSiteID \"Delhi\" -NetworkRegionID \"India\"\nNew-CsTenantNetworkSite -NetworkSiteID \"Hyderabad\" -NetworkRegionID \"India\"\n```\n\n----------------------------------------\n\nTITLE: Update Item Request Payload JSON\nDESCRIPTION: This JSON payload demonstrates the required structure for updating an item in the Call Quality Dashboard repository. It includes the 'content' field, which contains the JSON formatted data to update the item with, and the 'type' field, which must be set to \"application/json\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/update-item.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  content : \"{ 'Product' : 'New Product Name'\",\n  type: \"application/json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Watcher Node Installation Command\nDESCRIPTION: This PowerShell command shows an incorrect example of how to execute the Watchernode.msi installer.  The `Authentication` parameter is case-sensitive and must be `Authentication=TrustedServer`. Incorrect casing, as shown here, will result in the command failing.  It emphasizes the importance of using the correct syntax.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\Tools\\Watchernode.msi authentication=trustedserver\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Chat Compliance using PowerShell\nDESCRIPTION: This PowerShell code snippet shows how to configure the Persistent Chat Compliance service using the `Set-CsPersistentChatComplianceConfiguration` cmdlet. It includes options for setting the adapter type, creating separate reports for each chat room, adding chat room and user details, specifying the identity, and setting the run interval. The parameters `AdapterType`, `OneChatRoomPerOutputFile`, `AddChatRoomDetails`, `AddUserDetails`, `Identity`, and `RunInterval` can be customized.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatComplianceConfiguration [-Identity <XdsIdentity>] <COMMON PARAMETERS>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatComplianceConfiguration [-Instance <PSObject>] <COMMON PARAMETERS>\n```\n\n----------------------------------------\n\nTITLE: Updating Teams App Setup Policy - PowerShell\nDESCRIPTION: This snippet demonstrates the addition of the `PinnedCallingBarApps` parameter to the `New-CsTeamsAppSetupPolicy` and `Set-CsTeamsAppSetupPolicy` cmdlets. This parameter probably controls which apps are pinned to the calling bar in Teams. It's part of the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_41\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsAppSetupPolicy -PinnedCallingBarApps\n```\n\n----------------------------------------\n\nTITLE: Adding multiple domains to the trusted domain list - Shell\nDESCRIPTION: This code snippet demonstrates how to add multiple domains (sfb.com, abc.com, test.org) to the trusted domain list in the Skype for Business on Mac client preferences. It uses the `defaults write` command with `-array-add` to append the domains.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/customize-the-mac-client-experience.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndefaults write com.microsoft.SkypeForBusiness trustedDomainList -array-add \"sfb.com\" \"abc.com\" \"test.org\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Site with New-CsNetworkSite (PowerShell)\nDESCRIPTION: This snippet creates a new network site in Skype for Business Server. The `-Identity` parameter specifies the unique identifier for the site, and `-NetworkRegionID` associates the site with a network region. The example creates a site named \"Vancouver\" and associates it with the \"NorthAmerica\" region.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsNetworkSite -Identity Vancouver -NetworkRegionID NorthAmerica\n```\n\n----------------------------------------\n\nTITLE: Get Help for Trusted Application Pool Cmdlet using PowerShell\nDESCRIPTION: This PowerShell command retrieves detailed help information about the New-CsTrustedApplicationPool cmdlet.  It provides comprehensive details about the parameters and usage of the cmdlet, useful for understanding and customizing the trusted application pool creation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help New-CsTrustedApplicationPool -Full | more\n```\n\n----------------------------------------\n\nTITLE: Suppressing Confirmation Prompts During CDR Purge - PowerShell\nDESCRIPTION: This PowerShell command shows how to suppress confirmation prompts when purging the CDR database. The `-Confirm:$False` parameter is added to the `Invoke-CsCdrDatabasePurge` cmdlet to disable the prompts. This is useful for automating the purging process.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/purgecall-detail-recording-and-qoe.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsCdrDatabasePurge -Identity service:MonitoringDatabase:atl-sql-001.litwareinc.com -PurgeCallDetailDataOlderThanDays 10 -PurgeDiagnosticDataOlderThanDays 10 -Confirm:$False\n```\n\n----------------------------------------\n\nTITLE: Adding DNS Zones and Records using dnscmd.exe for fabrikam.com\nDESCRIPTION: This snippet demonstrates how to use the `dnscmd.exe` utility to add pin-point DNS zones and A records in an internal DNS server for automatic configuration of Skype for Business clients for the fabrikam.com SIP domain. It creates zones for _sipinternaltls._tcp.fabrikam.com and pool01.fabrikam.com and adds SRV and A/AAAA records to these zones.  The IP addresses (192.168.10.90, 192.168.10.91) represent the Front End servers within the pool.  This allows clients using the fabrikam.com SIP domain to automatically configure.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/edge-server-deployments/advanced-edge-server-dns.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndnscmd . /zoneadd _sipinternaltls._tcp.fabrikam.com. /dsprimary\ndnscmd . /recordadd _sipinternaltls._tcp.fabrikam.com. @ SRV 0 0 5061 pool01.fabrikam.com.\ndnscmd . /zoneadd pool01.fabrikam.com. /dsprimary\ndnscmd . /recordadd pool01.fabrikam.com. @ A 192.168.10.90\ndnscmd . /recordadd pool01.contoso.com. @ AAAA <IPv6 address>\ndnscmd . /recordadd pool01.fabrikam.com. @ A 192.168.10.91\ndnscmd . /recordadd pool01.contoso.com. @ AAAA <IPv6 address>\n```\n\n----------------------------------------\n\nTITLE: Adding Messaging Configuration Parameters to CsTeamsMessagingConfiguration cmdlets\nDESCRIPTION: This snippet adds `UsersCanDeleteBotMessages`, `ContentBasedPhishingCheck`, and `ReportIncorrectSecurityDetections` parameters to the `New-CsTeamsMessagingConfiguration` and `Set-CsTeamsMessagingConfiguration` cmdlets. These parameters seem to configure messaging security and bot interaction within Microsoft Teams. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsMessagingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Remove Inbound Exempt Number Pattern - PowerShell\nDESCRIPTION: Removes an exempt number pattern from the tenant list. Requires the Identity parameter, which specifies the pattern to remove. Use Get-CsInboundExemptNumberPattern to find the identity if it's unknown. Replication time should be allowed before testing and validating.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsInboundExemptNumberPattern -Identity <String>\n```\n\n----------------------------------------\n\nTITLE: Get Tenant ID - PowerShell\nDESCRIPTION: This PowerShell command retrieves the TenantId property for a specified tenant using the Get-CsTenant cmdlet.  It filters the tenants based on the DisplayName (e.g., \"Fabrikam.com\").  Requires the Skype for Business Online PowerShell module to be installed and connected.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$TenantID = (Get-CsTenant -Filter {DisplayName -eq \"Fabrikam.com\"}).TenantId\n```\n\n----------------------------------------\n\nTITLE: Defining Network Subnets with PowerShell\nDESCRIPTION: This PowerShell command creates a new network subnet and associates it with a network site. The `SubnetID` parameter specifies the IP address of the subnet, `MaskBits` specifies the subnet mask, and `NetworkSiteID` specifies the site to which the subnet belongs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-your-network-topology.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTenantNetworkSubnet -SubnetID <Subnet IP address> -MaskBits <Subnet bitmask> -NetworkSiteID <site ID>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTenantNetworkSubnet -SubnetID \"192.168.0.0\" -MaskBits \"24\" -NetworkSiteID \"Delhi\"\nNew-CsTenantNetworkSubnet -SubnetID \"2001:4898:e8:25:844e:926f:85ad:dd8e\" -MaskBits \"120\" -NetworkSiteID \"Hyderabad\"\n```\n\n----------------------------------------\n\nTITLE: Set Client Policy for Skype for Business/Lync - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to set the client policy, determining whether users see the Skype for Business or Lync client experience. The `EnableSkypeUI` parameter controls the client interface. The cmdlet accepts an identity parameter to target global, site, or user policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPolicy  [-Identity <XdsIdentity] [-EnableSkypeUI <$true | $false>]\n```\n\n----------------------------------------\n\nTITLE: Get SIP Gateway Service Principal - Azure AD Module - PowerShell\nDESCRIPTION: This snippet retrieves a SIP Gateway service principal using the Azure AD module.  It filters based on the AppId. If no output is returned the service principal does not exist and should be created.  It requires the AzureAD module to be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AzureADServicePrincipal -Filter \"AppId eq '582b2e88-6cca-4418-83d2-2451801e1d26'\"\n```\n\n----------------------------------------\n\nTITLE: Assign a Teams App Setup Policy to a Batch of Users via PowerShell\nDESCRIPTION: This PowerShell snippet assigns a specific Teams app setup policy to a batch of users. The user identities are read from a text file, and the New-CsBatchPolicyAssignmentOperation cmdlet is used to process the batch assignment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n$user_ids = Get-Content .\\users_ids.txt\nNew-CsBatchPolicyAssignmentOperation -PolicyType TeamsAppSetupPolicy -PolicyName \"HR App Setup Policy\" -Identity $user_ids -OperationName \"Example 1 batch\"\n```\n\n----------------------------------------\n\nTITLE: Create a Trusted Application using PowerShell\nDESCRIPTION: This PowerShell command creates a trusted application within the specified trusted application pool in Skype for Business Server. The ApplicationId identifies the application (STWatcherNode), and TrustedApplicationPoolFqdn specifies the pool the application belongs to. The Port parameter sets the port for the application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTrustedApplication -ApplicationId STWatcherNode -TrustedApplicationPoolFqdn atl-watcher-001.litwareinc.com -Port 5061\n```\n\n----------------------------------------\n\nTITLE: Viewing Phone Numbers with PowerShell Cmdlet\nDESCRIPTION: This snippet utilizes the `Get-CsPhoneNumberAssignment` PowerShell cmdlet to retrieve a list of up to 500 phone numbers associated with your Microsoft Teams organization. It requires the Teams PowerShell module to be installed and configured. Alternatively, you can use `Export-CsAcquiredPhoneNumber` to download the complete list of phone numbers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/getting-phone-numbers-for-your-users.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPhoneNumberAssignment\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsAcquiredPhoneNumber\n```\n\n----------------------------------------\n\nTITLE: Enable CDR Monitoring Globally - PowerShell\nDESCRIPTION: This command re-enables Call Detail Recording (CDR) monitoring for the entire Skype for Business Server deployment. It uses the Set-CsCdrConfiguration cmdlet to set the EnableCDR property back to True ($True) at the global scope.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/call-detail-recording-and-qoe.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsCdrConfiguration -Identity \"global\" -EnableCDR $True\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Transcription in Teams Meeting Policy using PowerShell\nDESCRIPTION: This snippet demonstrates how to enable live transcription for a specific Teams meeting policy using the `Set-CsTeamsMeetingPolicy` cmdlet.  It requires the Teams PowerShell module to be installed. The `<policy name>` placeholder needs to be replaced with the actual name of the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowTranscription $true\n```\n\n----------------------------------------\n\nTITLE: Disable QoE Purging Globally - PowerShell\nDESCRIPTION: This command disables the automatic purging of Quality of Experience (QoE) records from the monitoring database at the global scope. It uses the Set-CsQoEConfiguration cmdlet, setting the EnablePurging property to $False.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/call-detail-recording-and-qoe.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsQoEConfiguration -Identity \"global\" -EnablePurging $False\n```\n\n----------------------------------------\n\nTITLE: View all CDR configurations - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves and displays information about all CDR configuration settings in the Skype for Business Server environment. It uses the `Get-CsCdrConfiguration` cmdlet to fetch the configuration details. This is useful for understanding the current CDR setup and ensuring that it aligns with organizational requirements.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/view-configuration-information.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCdrConfiguration\n```\n\n----------------------------------------\n\nTITLE: Modifying Calling Delegate Permissions with PowerShell\nDESCRIPTION: This PowerShell snippet modifies the permissions of an existing delegate, specifically revoking the ability to make calls on behalf of the delegator. The `Set-CsUserCallingDelegate` cmdlet is used with the `-MakeCalls` parameter set to `$false`. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-line-appearance.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUserCallingDelegate -Identity user1@contoso.com -Delegate user2@contoso.com -MakeCalls $false\n```\n\n----------------------------------------\n\nTITLE: Querying Chat Rooms for User Membership - SQL\nDESCRIPTION: This SQL query retrieves a list of chat rooms a user, Jane Dow, is a direct member of. It joins the `tblPrincipalRole`, `tblPrincipal`, and `tblNode` tables and filters by the user's name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/persistent-chat-database-schema/sample-persistent-chat-database-queries.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT nodeName as ChatRoom, prinName as Name          \n  FROM tblPrincipalRole, tblPrincipal, tblNode\n  WHERE  prinRoleNodeID = nodeID AND prinRolePrinID = prinID AND prinName = 'Jane Dow'\n```\n\n----------------------------------------\n\nTITLE: Moving users homed on-premises to the cloud via Powershell\nDESCRIPTION: This cmdlet migrates a user homed on-premises to the cloud, automatically assigning them TeamsOnly mode regardless of whether the `MoveToTeams` switch was specified. The action occurs when a user is moved from on-premises to the cloud.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/skype-for-business-online-retirement.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n`Move-CsUser`\n```\n\n----------------------------------------\n\nTITLE: Enabling Busy Options for a Site Voice Policy - PowerShell\nDESCRIPTION: This code enables Busy Options for a specific site's voice policy using the `Set-CsVoicePolicy` cmdlet.  The `Identity` parameter should match the name retrieved using `Get-CsSite`. This step is required if a voice policy exists for the site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsVoicePolicy -Identity Site:Redmond1 -EnableBusyOptions $true\n```\n\n----------------------------------------\n\nTITLE: Getting Effective Tenant Dial Plan using PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves all normalization rules applicable to a specific user.  It is used to evaluate the service country/region dial plan's normalization rules and determine which tenant dial plan normalization rules are needed.  The user's identity is the input parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/what-are-dial-plans.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsEffectiveTenantDialPlan\n```\n\n----------------------------------------\n\nTITLE: Creating a Voice Routing Policy in Teams with PowerShell\nDESCRIPTION: This command creates a new voice routing policy named 'InternationalVoiceRoutingPolicy' in Microsoft Teams. It associates the 'International' PSTN usage with the policy. The Teams PowerShell module must be installed for this command to execute successfully.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-with-direct-routing-for-gcch-and-dod.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineVoiceRoutingPolicy \"InternationalVoiceRoutingPolicy\" -OnlinePstnUsages \"International\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Non-Front End Services - PowerShell\nDESCRIPTION: This command restarts a specific Windows service on a non-Front End server after the upgrade process. It is used to ensure that services besides the Front End pool are properly initialized. Restarting these individual services is required for complete system functionality.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/upgrade.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CSWindowsService\n```\n\n----------------------------------------\n\nTITLE: Disable Front Row Unified Background XML\nDESCRIPTION: This XML snippet disables the Front Row unified background feature in Microsoft Teams Rooms. Disabling this feature means that remote participants will appear with their individual backgrounds instead of a unified background, potentially increasing distractions for in-room participants.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-release-note.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<IsFrontRowUnifiedBackgroundEnabled>false</IsFrontRowUnifiedBackgroundEnabled>\n```\n\n----------------------------------------\n\nTITLE: Disable Homescreen via PowerShell policy\nDESCRIPTION: This PowerShell command uses the `New-CsTeamsIPPhonePolicy` cmdlet with the `-AllowHomescreen` parameter to disable the default home screen on the Teams phone and setting the Calls app as the default home screen on devices signed in with UserSignIn or CommonAreaSignIn modes (with advanced calling enabled).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/phones/plan-device-deployment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsIPPhonePolicy #-AllowHomescreen\n```\n\n----------------------------------------\n\nTITLE: Enable Unified Contact Store for a Site - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables the unified contact store for users at a specific site.  It creates a new user services policy for the specified site with the UcsAllowed parameter set to $True. Replace <site name> with the actual site name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-unified-contact-store.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsUserServicesPolicy -Identity site:<site name> -UcsAllowed $True\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsUserServicesPolicy -Identity site:Redmond -UcsAllowed $True\n```\n\n----------------------------------------\n\nTITLE: Assign Emergency Call Routing Policy to User\nDESCRIPTION: This PowerShell command assigns a specific emergency call routing policy to a user. It uses the `Grant-CsTeamsEmergencyCallRoutingPolicy` cmdlet to apply the policy to the specified user identity. Emergency call routing policies are relevant for Direct Routing users, defining how emergency calls are routed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-dynamic-emergency-calling.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsEmergencyCallRoutingPolicy -Identity user1 -PolicyName UnitedStates\n```\n\n----------------------------------------\n\nTITLE: Replace Synthetic Transactions on Watcher Node - PowerShell\nDESCRIPTION: This PowerShell snippet replaces all existing synthetic transactions on a watcher node with a new set of transactions. It uses the `Set-CsWatcherNodeConfiguration` cmdlet with the `Identity` parameter to identify the watcher node and the `Tests` parameter with the `Replace` method to specify the new tests.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" -Tests @{Replace=\"IM\"}\n```\n\n----------------------------------------\n\nTITLE: Enable CDR for a single location - PowerShell\nDESCRIPTION: This PowerShell command enables Call Detail Recording (CDR) for a specified site in Skype for Business Server. It uses the `Set-CsCdrConfiguration` cmdlet to set the `EnableCDR` parameter to `$True` for the site identified by its `Identity` (e.g., \"site:Redmond\").\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/enable-cdr.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCdrConfiguration -Identity \"site:Redmond\" -EnableCDR $True\n```\n\n----------------------------------------\n\nTITLE: Enable Enterprise Voice using PowerShell\nDESCRIPTION: This snippet demonstrates how to enable Enterprise Voice for a user using the `Set-CsPhoneNumberAssignment` PowerShell cmdlet. The `-EnterpriseVoiceEnabled` parameter is set to `$true` to enable voice functionality for the specified user. This requires the Teams PowerShell module to be installed and configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-authorized-users-plan.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsPhoneNumberAssignment -EnterpriseVoiceEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Set Emergency Location - PowerShell\nDESCRIPTION: Sets the static emergency location for a phone number. It retrieves a civic address using Get-CsOnlineLisCivicAddress and then uses Set-CsPhoneNumberAssignment to assign the location to the phone number.  This is a crucial step for emergency services to locate the caller.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-scenario.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# Set the static emergency location on the resource account\n$CivicAddress = Get-CsOnlineLisCivicAddress -City Seattle\nSet-CsPhoneNumberAssignment -LocationId $CivicAddress.DefaultLocationId -PhoneNumber $PhoneNumber.TelephoneNumber\n```\n\n----------------------------------------\n\nTITLE: Setting Speaker Attribution Mode in Teams Meeting Policy using PowerShell\nDESCRIPTION: This snippet shows how to set the speaker attribution mode for a Teams meeting policy using the `Set-CsTeamsMeetingPolicy` cmdlet. The example sets the mode to `Enabled`, which means speakers will be identified in transcriptions. It configures the 'Global' policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/copilot-admin-mtr.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -SpeakerAttributionMode Enabled\n```\n\n----------------------------------------\n\nTITLE: Assigning Specific Phone Number with Direct Routing Example (PowerShell)\nDESCRIPTION: This example demonstrates assigning a specific phone number to a user using the `Set-CsPhoneNumberAssignment` cmdlet.  It sets the `Identity` to the user's email address, the `PhoneNumber` to the full E.164 phone number, and the `PhoneNumberType` to `DirectRouting`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-enable-users.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity \"spencer.low@contoso.com\" -PhoneNumber \"+14255388797\" -PhoneNumberType DirectRouting\n```\n\n----------------------------------------\n\nTITLE: Deleting a Bandwidth Policy with Remove-CsNetworkBandwidthPolicyProfile (PowerShell)\nDESCRIPTION: This snippet removes a bandwidth policy profile from Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the profile to remove. The example removes the profile named \"LowBWProfile\". Ensure the profile is not in use before removal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsNetworkBandwidthPolicyProfile -Identity LowBWProfile\n```\n\n----------------------------------------\n\nTITLE: Syncing RGS Delta Data - PowerShell\nDESCRIPTION: This command synchronizes delta data on the backup pool for RGS only. It's a faster method for syncing recent changes. Replace `<Pool FQDN>` with the actual FQDN of the pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nBackup-CsPool -PoolFqdn <Pool FQDN> -Category RGS\n```\n\n----------------------------------------\n\nTITLE: Display CLS Configuration - PowerShell\nDESCRIPTION: This PowerShell command retrieves and displays the current configuration of the Centralized Logging Service (CLS) in Skype for Business Server. It fetches settings such as Identity, Scenarios, SearchTerms, and other parameters related to logging behavior. Use the `-Identity` parameter to narrow results.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/centralized-logging-service.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClsConfiguration\n```\n\n----------------------------------------\n\nTITLE: Stopping Windows Service on Edge Server with PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to stop the Windows service on an Edge server. This is a prerequisite step when re-pointing XMPP federation to a new Edge pool to ensure the old configuration is fully stopped before applying changes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nStop-CsWindowsService\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Region Information with Get-CsNetworkRegion (PowerShell)\nDESCRIPTION: This snippet retrieves information about all network regions configured in Skype for Business Server. It uses the Get-CsNetworkRegion cmdlet to display details such as Identity, Description, BypassID, CentralSite, BWAlternatePaths, and NetworkRegionID for each region.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-network-regions.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsNetworkRegion\n```\n\n----------------------------------------\n\nTITLE: Referencing Education Class Team Template ID in Microsoft Graph\nDESCRIPTION: This snippet shows the Microsoft Graph URL for referencing the 'educationClass' team template. This template is designed for classrooms, includes the OneNote Class Notebook and Assignments apps pinned to the General tab, and sets the team visibility to HiddenMembership.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/get-started-with-teams-templates.md#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\n`https://graph.microsoft.com/v1.0/`<br>`teamsTemplates('educationClass')`\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Policy with PowerShell\nDESCRIPTION: This PowerShell command assigns a TeamsMeetingPolicy to a user that forces Islands mode users to schedule all new meetings in Teams. `PreferredMeetingProviderForIslandsMode=Teams` enforces this behavior. This helps transition users to Teams meetings instead of Skype for Business meetings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/skype-for-business-online-retirement.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nTeamsMeetingPolicy with the PreferredMeetingProviderForIslandsMode=Teams\n```\n\n----------------------------------------\n\nTITLE: Modify Call Queue with Distribution List - PowerShell\nDESCRIPTION: This example modifies an existing call queue to assign distribution lists, uses a custom audio file for music on hold, and enables conference mode. Requires a valid Identity and MusicOnHoldAudioFileId.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -DistributionLists @(\"Distribution List 01 GUID\", \"Distribution List 02 GUID\") -UseDefaultMusicOnHold $false -MusicOnHoldAudioFileId <FILE ID> -ConferenceMode $true\n```\n\n----------------------------------------\n\nTITLE: Updating External Access Policy - PowerShell\nDESCRIPTION: This snippet highlights the addition of the `FederatedBilateralChats` parameter to the `New-CsExternalAccessPolicy` and `Set-CsExternalAccessPolicy` cmdlets. This parameter likely manages the ability to have bilateral chats with federated users. It's part of the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_40\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsExternalAccessPolicy -FederatedBilateralChats\n```\n\n----------------------------------------\n\nTITLE: Get Teams Meeting Broadcast Policy by Name PowerShell\nDESCRIPTION: Retrieves a specific Teams meeting broadcast policy by its name to verify settings, such as `-AllowBroadcastScheduling`. This is used to check policies other than the global policy.  It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsMeetingBroadcastPolicy -identity {policy name}\n```\n\n----------------------------------------\n\nTITLE: Verify Test User Credentials - PowerShell\nDESCRIPTION: This PowerShell snippet uses the `Get-CsTestUserCredential` cmdlet to verify that the test user credentials were created successfully. It takes the SIP address of the test user as input and returns the username and a secure string representation of the password.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTestUserCredential -SipAddress \"sip:watcher1@litwareinc.com\"\nGet-CsTestUserCredential -SipAddress \"sip:watcher2@litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Granting a Teams VDI Policy to a User - PowerShell\nDESCRIPTION: This snippet demonstrates how to assign a Teams VDI policy to a specific user using the `Grant-CsTeamsVdiPolicy` cmdlet. The `-Identity` parameter identifies the user, and the `-PolicyName` parameter specifies the policy to assign.  In this example, the `RestrictedUserPolicy` is assigned to the user \"Ken Myer\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Grant-CsTeamsVdiPolicy -identity \"Ken Myer\" -PolicyName RestrictedUserPolicy\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule: 5-Digit Extensions\nDESCRIPTION: This normalization rule does not translate 5-digit extension numbers. It is designed for scenarios where calls within a site, or to a central site when the WAN link is available, use extension-only dialing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/enterprise-voice-resiliency.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^(\\d{5})$\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Upgrade Policy using PowerShell\nDESCRIPTION: This command grants the specified Teams upgrade policy to users. The `SfBOnly` or `SfBWithTeamsCollab` policies are recommended as tenant default to prevent users from using Teams in Islands mode before Meetings First is launched. The Grant-CsTeamsUpgradePolicy cmdlet is part of the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meetings-first.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy\n```\n\n----------------------------------------\n\nTITLE: Block a Specific Number via PowerShell\nDESCRIPTION: This PowerShell command adds a blocked number pattern to the tenant list.  The pattern blocks the specific phone number 1 (412) 555-1234.  The Enabled parameter is set to True to activate the block. The description is an optional field.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsInboundBlockedNumberPattern -Name \"BlockNumber1\" -Enabled $True -Description \"Block Fabrikam\" -Pattern \"^\\+?14125551234$\"\n```\n\n----------------------------------------\n\nTITLE: Disable Call Forwarding Immediately with SEFAUtil\nDESCRIPTION: This command immediately disables call forwarding for a user using the SEFAUtil tool. It uses the `/disablefwdimmediate` switch to disable immediate call forwarding. The command needs to be executed in a command prompt with appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com katarina@contoso.com /disablefwdimmediate\n```\n\n----------------------------------------\n\nTITLE: Get Autodiscover Service URI (Exchange)\nDESCRIPTION: This PowerShell command retrieves the Autodiscover Service Internal URI from the Exchange Server. It is used to verify if the Autodiscover service is configured correctly. The output displays the name of the Client Access Server and its associated Autodiscover Service Internal URI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/integrate-with-exchange/integrate-with-exchange.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ClientAccessServer | Select-Object Name, AutoDiscoverServiceInternalUri | Format-List\n```\n\n----------------------------------------\n\nTITLE: Teams PowerShell Module Cmdlets for Shared Calling\nDESCRIPTION: This section explains that Shared Calling can be configured with the Teams admin center and PowerShell.  It highlights the requirement of Teams PowerShell Module version 5.5.0 or higher to use the new TeamsSharedCallingRoutingPolicy cmdlets for creating and managing Shared Calling policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-plan.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[TeamsSharedCallingRoutingPolicy](/powershell/module/teams/set-csteamssharedcallingroutingpolicy)\n```\n\n----------------------------------------\n\nTITLE: Set Specific Teams Meeting Broadcast Policy PowerShell\nDESCRIPTION: Modifies a specific Teams meeting broadcast policy. The example sets the `-AllowBroadcastScheduling` parameter, either enabling or disabling live event scheduling for users assigned to this policy. It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastPolicy -Identity DisabledBroadcastSchedulingPolicy -AllowBroadcastScheduling $false\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastPolicy -identity EnableBroadcastSchedulingPolicy -AllowBroadcastScheduling $true\n```\n\n----------------------------------------\n\nTITLE: Failover Central Management Server - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet initiates the failover of the Central Management Server to a backup SQL Server. The parameters specify either the primary or mirror SQL Server FQDN and instance name, depending on which is the principal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CSManagementServerFailover -BackupSQLServerFqdn <Backup_Pool Primary BackEnd Server FQDN> -BackupSQLInstanceName <Backup_Pool Primary SQL Instance Name>\n```\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CSManagementServerFailover -MirrorSQLServerFqdn <Backup_Pool Mirror BackEnd Server FQDN> -MirrorSQLInstanceName <Backup_Pool Mirror SQL Instance Name>\n```\n\n----------------------------------------\n\nTITLE: Checking Conference Data Restore Status - PowerShell\nDESCRIPTION: This command is used to check the status of a conference data restore operation.  It targets the `ConfServices.DataConf` module and monitors its synchronization status. A status of \"Steady State\" indicates the restore process is complete.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/configuring-and-monitoring-the-backup-service.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsBackupServiceStatus -PoolFqdn \\<Pool2 FQDN> -BackupModule ConfServices.DataConf\n```\n\n----------------------------------------\n\nTITLE: Enabling Exchange Certificate for Unified Messaging\nDESCRIPTION: This snippet demonstrates how to enable an Exchange certificate for Unified Messaging services using the Exchange Management Shell. It requires the Exchange Management Shell and a valid certificate with the specified thumbprint.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/exchangeunified-messaging-for-voice-mail.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-ExchangeCertificate -Server \"atl-umserver-001.litwareinc.com\" -Thumbprint \"EA5A332496CC05DA69B75B66111C0F78A110D22d\" -Services \"SMTP\",\"IIS\",\"UM\"\n```\n\n----------------------------------------\n\nTITLE: Enable Interpreter for the organization - PowerShell\nDESCRIPTION: This PowerShell script enables the Interpreter feature for the entire organization by setting the AIInterpreter parameter to 'Enabled' using the Set-CsTeamsMeetingPolicy cmdlet. This allows users to use the Interpreter agent during Teams meetings. Replace <policy name> with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/interpreter-agent-teams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AIInterpreter Enabled\n```\n\n----------------------------------------\n\nTITLE: Enable Video Sharing in Teams Meetings - PowerShell\nDESCRIPTION: This snippet demonstrates how to enable video sharing in Teams meetings using the CsTeamsMeetingPolicy cmdlet. The `-AllowIPVideo` parameter needs to be set to True to allow users to share video during Teams meetings, which is necessary for live events.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/plan-for-teams-live-events.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nThe [**CsTeamsMeetingPolicy**](/powershell/module/teams/set-csteamsmeetingpolicy) **`-AllowIPVideo`** parameter = True\n```\n\n----------------------------------------\n\nTITLE: Retrieving RBAC Roles for Skype for Business Cmdlets (PowerShell)\nDESCRIPTION: This PowerShell snippet retrieves a list of RBAC roles that have been assigned cmdlets related to Skype for Business Server 2015. It helps in identifying the roles with permissions to manage Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/start-or-stop-log-capture.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Skype for Business Server 2015 cmdlet\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Response Group Answers - PowerShell\nDESCRIPTION: These commands create two response group answers, one for support and one for sales, using New-CsRgsAnswer. Parameters include the Action object and the DtmfResponse (DTMF tone pressed by the user).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\n$SupportAnswer = New-CsRgsAnswer -Action $SupportAction [-DtmfResponse 1]\n$SalesAnswer = New-CsRgsAnswer -Action $SalesAction [-DtmfResponse 2]\n```\n\n----------------------------------------\n\nTITLE: Filtering Get-CsOnlineUser with -gt/-le/-lt Operators\nDESCRIPTION: Illustrates how to use the -gt (greater than), -lt (less than), and -le (less than or equal to) operators for filtering string properties in Get-CsOnlineUser. The example filters users based on their UserPrincipalName.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_87\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Filter {UserPrincipalName -gt/-le/-lt \"abc\"}\n```\n\n----------------------------------------\n\nTITLE: Deleting Dial-in Conferencing Access Numbers by Region - PowerShell\nDESCRIPTION: This PowerShell command deletes all dial-in conferencing access numbers associated with a specific region. It first uses the Get-CsDialInConferencingAccessNumber cmdlet to retrieve all access numbers in the \"Northwest\" region and then pipes the output to the Remove-CsDialInConferencingAccessNumber cmdlet for deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/access-numbers.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingAccessNumber -Region \"Northwest\" | Remove-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Create PSTN Gateway with parameters via PowerShell\nDESCRIPTION: This PowerShell command creates a new Online PSTN Gateway object with Identity, SipSignalingPort and MaxConcurrentSessions set. It uses the New-CsOnlinePSTNGateway cmdlet to create the connection between the SBC and the Microsoft Teams tenant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-connect-the-sbc.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlinePSTNGateway -Identity sbc.contoso.com -Enabled $true -SipSignalingPort 5067 -MaxConcurrentSessions 100 \n```\n\n----------------------------------------\n\nTITLE: Get-CsAdDomain Syntax\nDESCRIPTION: This command verifies replication within the domain. It can specify the domain, domain controller, global catalog, and global settings domain controller.  If the Domain parameter is not specified, the command defaults to the local domain.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/install/prepare-active-directory.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsAdDomain [-Domain <Fqdn>] [-DomainController <Fqdn>] [-GlobalCatalog <Fqdn>] [-GlobalSettingsDomainController <Fqdn>]\n```\n\n----------------------------------------\n\nTITLE: Prevent Phone Users Bypassing Lobby (PowerShell)\nDESCRIPTION: This PowerShell snippet prevents users dialing in by phone from bypassing the lobby. It utilizes the `Set-CsTeamsEventsPolicy` cmdlet with the `-AllowPSTNUsersToBypassLobby` parameter set to `$false`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowPSTNUsersToBypassLobby $false\n```\n\n----------------------------------------\n\nTITLE: Grant TeamsUpgradePolicy to Upgrade Entire Tenant to Teams - PowerShell\nDESCRIPTION: This command upgrades the entire tenant to TeamsOnly mode by granting the 'UpgradeToTeams' policy at the tenant level. The `Grant-CsTeamsUpgradePolicy` cmdlet is used without specifying an identity, which applies the policy to all users in the tenant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/migration-interop-guidance-for-teams-with-skype.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName UpgradeToTeams\n```\n\n----------------------------------------\n\nTITLE: Adding Synthetic Transactions to a Watcher Node - PowerShell\nDESCRIPTION: This code snippet demonstrates how to add synthetic transactions to an existing watcher node using the Set-CsWatcherNodeConfiguration cmdlet. It uses the Add method within the Tests parameter to specify the transactions to add.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" -Tests @{Add=\"PersistentChatMessage\"}\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" -Tests @{Add=\"PersistentChatMessage\",\"DataConference\",\"UnifiedContactStore\"}\n```\n\n----------------------------------------\n\nTITLE: Enable Call Forwarding Immediately with SEFAUtil\nDESCRIPTION: This command immediately enables call forwarding to another user using the SEFAUtil tool. It uses the `/enablefwdimmediate` switch to enable immediate call forwarding and the `/setfwddestination` switch to specify the forwarding destination.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe sip:katarina@contoso.com /enablefwdimmediate /setfwddestination:anders@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Starting LYNCBACKUP Service - PowerShell\nDESCRIPTION: This PowerShell command starts the LYNCBACKUP service on Front End Servers. It is necessary after running Bootstrapper and reapplying any previous Cumulative Updates to ensure backup pairing functionality is operational.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-high-availability-and-disaster-recovery/front-end-pools-for-disaster-recovery.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nStart-CsWindowsService -Name LYNCBACKUP\n```\n\n----------------------------------------\n\nTITLE: Run ExchUcUtil.ps1 script\nDESCRIPTION: This PowerShell command is used to navigate to the directory containing the ExchUcUtil.ps1 script and then execute it. It requires the Exchange Management Shell to be open and the user to have the necessary Exchange permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/exchangeunified-messaging-for-voice-mail.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd \\<drive letter>:\\Program Files\\Microsoft\\Exchange Server\\V15\\Scripts>.ExchUcUtil.ps1\n```\n\n----------------------------------------\n\nTITLE: Getting information about chat rooms with Get-CsPersistentChatRoom PowerShell cmdlet\nDESCRIPTION: This PowerShell snippet demonstrates how to retrieve information about all chat rooms configured in the organization using the Get-CsPersistentChatRoom cmdlet without any parameters. This will return all properties of all Persistent Chat rooms.\n\nDependencies: Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/chat-rooms.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPersistentChatRoom\n```\n\n----------------------------------------\n\nTITLE: Move user to a new pool - PowerShell\nDESCRIPTION: This PowerShell command moves a specific user to a target pool. The `Move-CsUser` cmdlet is used, requiring the user's identity and the FQDN of the target pool as parameters. It moves the user \"David Pelton\" to the target pool \"pool02.contoso.net\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-a-single-user-to-the-pilot-pool.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsUser -Identity \"David Pelton\" -Target \"pool02.contoso.net\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Bandwidth Policy with Get-CsNetworkBandwidthPolicyProfile (PowerShell)\nDESCRIPTION: This snippet retrieves the details of a specific bandwidth policy profile in Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the profile to retrieve. The example retrieves the profile named \"LowBWProfile\". It outputs a bandwidth policy profile object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsNetworkBandwidthPolicyProfile -Identity LowBWProfile\n```\n\n----------------------------------------\n\nTITLE: Restart Front End Pool Services - PowerShell\nDESCRIPTION: This PowerShell command restarts the services on all servers within the Front End pool after the In-Place Upgrade. It ensures that the upgraded services are properly initiated. A reboot may be required prior to execution to resolve assembly exceptions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/upgrade-to-skype-for-business-server.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsPool\n```\n\n----------------------------------------\n\nTITLE: Checking User Validation Errors\nDESCRIPTION: This PowerShell command retrieves a user and checks the UserValidationErrors attribute. It allows admins to check for any provisioning errors associated with the user's Teams configuration. $user variable must be defined as the UPN or SIP address of the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-pad-configuration.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser -Identity $user|Select UserValidationErrors\n```\n\n----------------------------------------\n\nTITLE: Require Explicit Recording Consent\nDESCRIPTION: This PowerShell command requires participants to explicitly consent to be recorded or transcribed in Teams meetings created by organizers with the specified policy. Replace \"<policy name>\" with the name of the target Teams meeting policy. The MicrosoftTeams module must be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-recording.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -ExplicitRecordingConsent Enabled\n```\n\n----------------------------------------\n\nTITLE: Deleting a Location Policy with Remove-CsLocationPolicy (PowerShell)\nDESCRIPTION: This snippet removes a location policy from Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the policy to remove. The example removes the policy named \"Reno\".  Ensure the policy is not in use before removing it.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsLocationPolicy -Identity Reno\n```\n\n----------------------------------------\n\nTITLE: Configure Hybrid Application Endpoint for Skype for Business Server 2019\nDESCRIPTION: This snippet shows how to configure hybrid application endpoints on an on-premises Skype for Business Server 2019 server using the New-CsHybridApplicationEndpoint cmdlet. This is required for hybrid implementations where numbers are homed on Direct Routing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-resource-accounts.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[/powershell/module/skype/new-cshybridapplicationendpoint]\n```\n\n----------------------------------------\n\nTITLE: Get/Remove-CsTeamsShiftsConnectionErrorReport\nDESCRIPTION: This snippet indicates the release of the `Get-CsTeamsShiftsConnectionErrorReport` and `Remove-CsTeamsShiftsConnectionErrorReport` cmdlets, available in preview. These cmdlets enable administrators to retrieve and remove error reports related to the Teams Shifts connector. This facilitates troubleshooting and maintenance of the connector integration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_144\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsShiftsConnectionErrorReport\nRemove-CsTeamsShiftsConnectionErrorReport\n```\n\n----------------------------------------\n\nTITLE: New Network InterSite Policy Cmdlet - PowerShell\nDESCRIPTION: This cmdlet creates a new network inter-site policy in Skype for Business Server.  It is used to define how bandwidth is allocated between different network sites.  Refer to the official Microsoft documentation for parameter details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkInterSitePolicy\n```\n\n----------------------------------------\n\nTITLE: Disable IIS Request Tracing\nDESCRIPTION: This command disables IIS request tracing for an entire server. It modifies the httpLogging configuration section to prevent logging. This is useful for managing disk space when the generated logs become too large.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/iis-request-tracing-log-files.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n%SystemDrive%\\Windows\\System32\\inetsrv\\appcmd set config /section:httpLogging /dontLog:True\n```\n\n----------------------------------------\n\nTITLE: Import Audio File to File Store - PowerShell\nDESCRIPTION: This PowerShell cmdlet imports an audio file to the File Store for use as an audio prompt in an announcement. The command requires the parent Application Server service, a filename for the file in the File Store, and the contents of the file as a byte array.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-an-announcement.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsAnnouncementFile -Parent <service of the Application Server running the Announcement application> -FileName <name for file in File Store> -Content Byte [<contents of file in byte array>]\n```\n\n----------------------------------------\n\nTITLE: Move User to On-Premises using Move-CsUser (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to move a user from the cloud to an on-premises Skype for Business Server deployment using the `Move-CsUser` cmdlet. It prompts for credentials, specifies the user's identity, and designates the target on-premises pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/move-users-from-the-cloud-to-on-premises.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$cred=Get-Credential\nMove-CsUser -Identity username@contoso.com -Target pool.corp.contoso.com -Credential $cred\n```\n\n----------------------------------------\n\nTITLE: Create Conferencing Policy - Skype for Business PowerShell\nDESCRIPTION: This snippet creates a new conferencing policy using the `New-CsConferencingPolicy` cmdlet. This enables configuration of settings such as PSTN conference dial-in, anonymous participant invitation, and unauthenticated user dial-out capabilities.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsConferencingPolicy](/powershell/module/skype/new-csconferencingpolicy?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Assign Islands Mode to Active Teams Users - PowerShell\nDESCRIPTION: This script assigns Islands mode to a list of users active in Teams. This is typically done before setting the tenant-wide policy to SfbWithTeamsCollab to avoid disrupting their existing Teams usage.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-implement.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$users=get-content \"C:\\MyPath\\users.txt\"\n foreach ($user in $users){\n Grant-CsTeamsUpgradePolicy -identity $user -PolicyName Islands}\n```\n\n----------------------------------------\n\nTITLE: Displaying Currently Running CLS Scenarios (PowerShell)\nDESCRIPTION: This PowerShell command uses the Show-CsClsLogging cmdlet to display the currently running Centralized Logging Service (CLS) scenarios and their scopes in Skype for Business Server. It provides a summary of the active logging sessions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/start-or-stop-log-capture.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nShow-CsClsLogging\n```\n\n----------------------------------------\n\nTITLE: Run PowerShell Script from Command Line\nDESCRIPTION: This command demonstrates how to execute a PowerShell script from the command line using PowerShell.exe.  The `<path to the file>` placeholder should be replaced with the actual path to the PowerShell script file.  This is useful for automating configuration tasks.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/stress-and-performance-tool/provisioning-the-topology-to-run-load.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPowerShell.exe -file <path to the file>\n```\n\n----------------------------------------\n\nTITLE: Configuring User Access for Federation\nDESCRIPTION: This process involves configuring user accounts to allow communication with federated partners, including Skype for Business Online customers. The user access configuration can be done through Configure policies to control federated user access and Assign an external user access policy to a Skype for Business enabled user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/federation-support/configuring-federation-support.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Verify Hosted Voicemail Policy - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves the configured hosted voicemail policies.  It allows administrators to confirm the successful creation and configuration of the hosted voicemail policy after applying changes. Used to ensure settings have been properly applied.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-cloud-voicemail.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsHostedVoicemailPolicy\n```\n\n----------------------------------------\n\nTITLE: Set User Delegates - PowerShell\nDESCRIPTION: This command modifies the delegate settings for a user in Skype for Business Server. It allows setting the list of delegates, returning the updated list upon successful execution.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserDelegates -Identity <UserIdParameter> [-Delegates <PSListModifier>]\n```\n\n----------------------------------------\n\nTITLE: Create Bandwidth Policy Profile using New-CsNetworkBandwidthPolicyProfile PowerShell\nDESCRIPTION: This PowerShell command creates a new bandwidth policy profile in Skype for Business Server. It defines the identity, description, and bandwidth limits for audio and video sessions.  The parameters AudioBWLimit, AudioBWSessionLimit, VideoBWLimit and VideoBWSessionLimit specify the bandwidth limitations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-bandwidth-policy-profiles.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkBandwidthPolicyProfile -Identity 25Mb_Link -Description \"BW profile for 25Mb links\" -AudioBWLimit 10000 -AudioBWSessionLimit 200 -VideoBWLimit 7000 -VideoBWSessionLimit 700\n```\n\n----------------------------------------\n\nTITLE: Creating Auto Attendant Menu Option using PowerShell\nDESCRIPTION: This cmdlet creates a new auto attendant menu option. ToneStar and TonePound are now supported as values for the DtmfResponse parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_115\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendantMenuOption\n```\n\n----------------------------------------\n\nTITLE: Invoke Management Store Replication - PowerShell\nDESCRIPTION: This PowerShell snippet initiates the replication of the Central Management store, which can be useful when the initial replication status check returns 'False'. It calls the `Invoke-CsManagementStoreReplication` cmdlet to trigger the replication process.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-edge-server/validate-edge-deployment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsManagementStoreReplication\n```\n\n----------------------------------------\n\nTITLE: Get Detailed Help for Cmdlets - PowerShell\nDESCRIPTION: This command retrieves detailed help information for a specified PowerShell cmdlet. It provides information about the cmdlet's parameters, usage, and related topics. Replace `<cmdlet name>` with the actual name of the cmdlet for which you want to get help. This command is useful for understanding the syntax and functionality of Skype for Business Server cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-response-groups.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help <cmdlet name> -Detailed\n```\n\n----------------------------------------\n\nTITLE: Configuring a Hosting Provider (New-CsHostingProvider) - PowerShell\nDESCRIPTION: This PowerShell snippet configures support for the hosting provider of a Skype for Business Online customer.  It creates a new hosting provider entry with specific parameters like ProxyFQDN, VerificationLevel, and Enabled.  This step is crucial for enabling communication between the on-premises Skype for Business Server and the Skype for Business Online service. The parameters configure how messages are verified and whether the connection is enabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/federation-support/configuring-federation-support.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsHostingProvider -Identity LyncOnline -ProxyFqdn \"sipfed.online.lync.com\" -VerificationLevel UseSourceVerification -Enabled $True -EnabledSharedAddressSpace $False -HostsOCSUsers $False -IsLocal $False\n```\n\n----------------------------------------\n\nTITLE: Set Conference Announcement Configuration in Skype for Business\nDESCRIPTION: Changes how announcements work when participants join and leave conferences. This allows configuration of join/leave announcement behavior. Requires specifying the Identity and the desired announcement settings. Returns the modified CsDialinConferencingConfiguration object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Creating a Mobility Policy with New-CsMobilityPolicy in PowerShell\nDESCRIPTION: This snippet creates a new mobility policy in Skype for Business using the `New-CsMobilityPolicy` cmdlet. It requires the `Identity` parameter to define the new policy, as well as parameters such as `EnableOutsideVoice`. This adds a new mobility policy to the system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_34\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsMobilityPolicy -Identity site:Redmond -EnableOutsideVoice $False\n```\n\n----------------------------------------\n\nTITLE: Removing a Site Policy with PowerShell in Skype for Business\nDESCRIPTION: This PowerShell snippet removes a site-specific external access policy named 'Redmond' from Skype for Business Server. It uses the Remove-CsExternalAccessPolicy cmdlet and specifies the site policy to be removed via the Identity parameter (site:Redmond).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/configure-policies-to-control-federated-user-access.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsExternalAccessPolicy -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Disable Connectors in Organization - Exchange Online PowerShell\nDESCRIPTION: This snippet demonstrates how to disable connectors for an entire organization using Exchange Online PowerShell. It requires connecting to Exchange Online PowerShell with an administrator account and uses the `Set-OrganizationConfig` cmdlet. This action affects all users in the organization.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/m365-custom-connectors.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-OrganizationConfig -ConnectorsEnabled:$false\n```\n\n----------------------------------------\n\nTITLE: Assigning/Managing Phone Numbers via PowerShell\nDESCRIPTION: These PowerShell cmdlets are used to manage Direct Routing numbers in Microsoft 365 when the numbers are not synchronized from on-premises Active Directory.  They allow assigning and retrieving phone number assignments for users and resources.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-phone-numbers-landing-page.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsPhoneNumberAssignment](/powershell/module/teams/set-csphonenumberassignment)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get-CsPhoneNumberAssignment](/powershell/module/teams/get-csphonenumberassignment)\n```\n\n----------------------------------------\n\nTITLE: Saving Rich Log to XML - PowerShell\nDESCRIPTION: This PowerShell command converts the rich logging information stored in the RegistrationTest variable to XML format and saves it to a file named Registration.xml in the C:\\Logs directory. XML format allows for programmatic parsing of the troubleshooting information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\n$RegistrationTest.ToXML() | Out-File C:\\Logs\\Registration.xml\n```\n\n----------------------------------------\n\nTITLE: Remove Previous OAuthTokenIssuer Certificate (PowerShell)\nDESCRIPTION: This PowerShell command removes the old OAuthTokenIssuer certificate using the Remove-CsCertificate cmdlet with the -Previous parameter. This should be performed after the new certificate has become active to prevent service interruption.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/stage-av-and-oauth-certificates.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsCertificate -Type OAuthTokenIssuer -Previous\n```\n\n----------------------------------------\n\nTITLE: Example: Creating a Call Via Work Policy (PowerShell)\nDESCRIPTION: This example creates a Call Via Work policy named 'ContosoUser1CvWP', enables the policy, requires the user to use an admin callback number, and sets the callback number to +15557891234.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-call-via-work.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsCallViaWorkPolicy -Identity Tag:ContosoUser1CvWP -Enabled $true -UseAdminCallbackNumber $true -AdminCallbackNumber +15557891234\n```\n\n----------------------------------------\n\nTITLE: Enable Teams View-Only Experience (PowerShell)\nDESCRIPTION: This PowerShell script enables the view-only meeting experience for Microsoft Teams. It uses the `Set-CsTeamsMeetingPolicy` cmdlet to modify the global meeting policy, setting the `StreamingAttendeeMode` parameter to `Enabled`. This allows attendees joining after the 900-user capacity to have a view-only experience.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/view-only-meeting-experience.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -StreamingAttendeeMode Enabled\n```\n\n----------------------------------------\n\nTITLE: Remove Normalization Rule from Dial Plan\nDESCRIPTION: This script removes a normalization rule from an existing tenant dial plan named RedmondDialPlan. The rule is identified by its Identity (Global/NR1). A temporary in-memory object is created, then used for removal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n$nr1=New-CsVoiceNormalizationRule -Identity Global/NR1 -InMemory\nSet-CsTenantDialPlan -Identity RedmondDialPlan -NormalizationRules @{remove=$nr1}\n```\n\n----------------------------------------\n\nTITLE: Get SIP Gateway API Service Principal - MS Graph Module - PowerShell\nDESCRIPTION: This snippet retrieves the SIP Gateway API service principal using the MS Graph module. It filters based on the AppId. If no output is returned the service principal does not exist and should be created. It requires the MS Graph module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgServicePrincipal -Filter \"AppId eq '0ab9de21-b802-4d77-b279-1ad41ca233b4'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Meeting Transcripts via MS Graph API (HTTP)\nDESCRIPTION: This example demonstrates how to retrieve links to all available Teams meeting transcripts of a user using the Microsoft Graph API. It filters based on meeting organizer ID. Requires OnlineMeetingTranscript.Read.All.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/users/{id}/onlineMeetings/getAllTranscripts?$filter=MeetingOrganizer/User/Id eq ‘{id}’\n```\n\n----------------------------------------\n\nTITLE: Enabling Public Preview via XML\nDESCRIPTION: This XML snippet enables the public preview feature on a Teams Rooms on Windows device. Setting the 'EnablePublicPreview' element to 'true' allows the device to access pre-release versions of Microsoft Teams. This places the device in an earlier release ring.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/mtr-home-refresh.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<EnablePublicPreview>true</EnablePublicPreview>\n```\n\n----------------------------------------\n\nTITLE: Set Anonymous User Authentication Method (OneTimePasscode)\nDESCRIPTION: This PowerShell snippet configures a Teams meeting policy to allow unverified anonymous attendees to verify themselves using a one-time passcode to join meetings. This is achieved by setting the `AnonymousUserAuthenticationMethod` parameter to `OneTimePasscode`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/anonymous-users-in-meetings.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AnonymousUserAuthenticationMethod OneTimePasscode\n```\n\n----------------------------------------\n\nTITLE: Edit a Call Park Policy using PowerShell\nDESCRIPTION: This PowerShell snippet disables the call park feature for the existing policy named \"SalesPolicy\". The `Set-CsTeamsCallParkPolicy` cmdlet is used to modify the `AllowCallPark` parameter to `$false`, effectively turning off the call park functionality for this policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-park-and-retrieve.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Set-CsTeamsCallParkPolicy -Identity \"SalesPolicy\" -AllowCallPark $false\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Mobility Policy with Get-CsMobilityPolicy in PowerShell\nDESCRIPTION: This snippet retrieves details for a specific mobility policy using the `Get-CsMobilityPolicy` cmdlet and the `Identity` parameter. The `Identity` parameter specifies the unique identifier for the policy. It outputs the properties of the specified mobility policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_35\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsMobilityPolicy -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific UC Phone Configuration with Get-CsUCPhoneConfiguration in PowerShell\nDESCRIPTION: This snippet retrieves details for a specific UC phone configuration using the `Get-CsUCPhoneConfiguration` cmdlet and the `Identity` parameter. The `Identity` parameter specifies the unique identifier for the configuration. It outputs the properties of the specified UC phone configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_30\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsUCPhoneConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Granting Custom Client Policy (Online) - PowerShell\nDESCRIPTION: This PowerShell command grants a custom-configured client policy, `ClientPolicyNoIMURLDisableSkypeUI`, to a specific user in Skype for Business Online. This allows for tailored client configurations. Requires Skype for Business Online PowerShell module and a valid user SIP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsClientPolicy username@contoso.com -PolicyName ClientPolicyNoIMURLDisableSkypeUI\n```\n\n----------------------------------------\n\nTITLE: List Chats via Microsoft Graph API\nDESCRIPTION: Lists the chats available to a user using the Microsoft Graph API. Allows retrieval of direct messages, group chats, and meeting chats. Requires authentication and appropriate permissions. Output is a list of chat objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_9\n\nLANGUAGE: HTTP\nCODE:\n```\n[List Chats](/graph/api/chat-list)\n```\n\n----------------------------------------\n\nTITLE: Removing a Teams Branch Survivability Policy from a User - PowerShell\nDESCRIPTION: This PowerShell command removes a Teams Branch Survivability Policy from a user. It's achieved by assigning the `$Null` policy to the user. This effectively removes any specific SBA policy assignment from the user, reverting them to the default behavior.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-survivable-branch-appliance.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> Grant-CsTeamsSurvivableBranchAppliancePolicy -PolicyName $Null -Identity user@contoso.com \n```\n\n----------------------------------------\n\nTITLE: Removing a User Policy with PowerShell in Skype for Business\nDESCRIPTION: This PowerShell snippet removes a user-specific external access policy named 'UserEAPPolicy' from Skype for Business Server.  It uses the Remove-CsExternalAccessPolicy cmdlet and specifies the user policy to be removed via the Identity parameter (UserEAPPolicy).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/configure-policies-to-control-federated-user-access.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsExternalAccessPolicy -Identity UserEAPPolicy\n```\n\n----------------------------------------\n\nTITLE: Upgrade Website Component - PowerShell\nDESCRIPTION: This PowerShell script upgrades the Website component of Statistics Manager. It uninstalls the old version and installs the new version. The script uses the Update-StatsMan.ps1 file with the -Service Website parameter. You will be prompted to uninstall the old version of the product.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/upgrade.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\Update-StatsMan.ps1 -Service Website\n```\n\n----------------------------------------\n\nTITLE: Modifying Call Queue with Text-to-Speech Greeting and Default Music - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to modify an existing call queue to use a text-to-speech greeting and the default music on hold. The Set-CsCallQueue cmdlet is used to update the queue identified by its GUID with the specified parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallQueue -Identity <Call Queue GUID> -WelcomeTextToSpeechPrompt \"Welcome to the call queue \" -UseDefaultMusicOnHold $true\n```\n\n----------------------------------------\n\nTITLE: Retrieving RBAC Roles for Specific Skype for Business Cmdlets (PowerShell)\nDESCRIPTION: This PowerShell script retrieves a list of RBAC roles assigned to the Set-CsClsConfiguration cmdlet. It's useful for determining which roles can modify CLS configurations in Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/start-or-stop-log-capture.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Set-CsClsConfiguration\"}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Conference Number with PowerShell\nDESCRIPTION: These PowerShell commands unregister a toll or toll-free number from a conference bridge. It requires the phone number to be removed and the Conference Bridge ID.  The Conference Bridge ID can be obtained by running Get-CsOnlineDialInConferencingBridge.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-phone-numbers-on-your-audio-conferencing-bridge.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nUnregister-CsOnlineDialInConferencingServiceNumber -identity \"toll number to be removed\" -bridgeId \"Conference Bridge ID\"\nUnregister-CsOnlineDialInConferencingServiceNumber -identity \"toll free number to be removed\" -bridgeId \"Conference Bridge ID\"\n```\n\n----------------------------------------\n\nTITLE: Verify Agent Installation using PowerShell\nDESCRIPTION: This PowerShell snippet is used to list all Operations Manager agents after installation to verify that the agent was created successfully. It requires the System Center Operations Manager 2012 shell to be available. It outputs a list of all configured agents.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/configure-computers-to-monitor.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SCOMAgent\n```\n\n----------------------------------------\n\nTITLE: Enabling Enterprise Voice for a User with PowerShell\nDESCRIPTION: This PowerShell cmdlet enables the Enterprise Voice setting for a specific user, allowing them to use Teams Phone features. The `-EnterpriseVoiceEnabled` parameter is set to `$true` to activate voice capabilities for the user. This is an alternative to enabling the setting via the Teams Admin Center.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/what-is-phone-system-in-office-365.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -EnterpriseVoiceEnabled `$true`\n```\n\n----------------------------------------\n\nTITLE: Grant Teams Meeting Policy to User - PowerShell\nDESCRIPTION: This snippet shows how to use the `Grant-CsTeamsMeetingPolicy` cmdlet to assign a Teams meeting policy to a specific user.  The `-Identity` parameter specifies the user's email address, and the `-PolicyName` parameter specifies the name of the policy to be assigned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMeetingPolicy -Identity reda@contoso.com -PolicyName \"Student Meeting Policy\"\n```\n\n----------------------------------------\n\nTITLE: Set Edge Pool Next Hop (Different Site) - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet configures an Edge server to use a Front End pool at a different site as its next hop registrar. It requires the Edge Server FQDN and the FQDN of the desired Next Hop Pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsEdgeServer -Identity EdgeServer:<Edge Server pool FQDN> -Registrar Registrar:<NextHopPoolFQDN>\n```\n\n----------------------------------------\n\nTITLE: Replacing PayAsYouGoSpendingUserLimit parameter\nDESCRIPTION: This snippet replaces `PayAsYouGoSpendingUserLimit` with `CallingSpendUserLimit` in the `New-CsTeamsCallingPolicy` and `Set-CsTeamsCallingPolicy` cmdlets. This is a breaking change, requiring updates to scripts that use the old parameter. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Granting Voice Routing Policy to User with PowerShell\nDESCRIPTION: This snippet assigns a voice routing policy to a user using the `Grant-CsOnlineVoiceRoutingPolicy` cmdlet.  The `-Identity` parameter specifies the user's email address, and the `-PolicyName` parameter specifies the name of the policy to assign. This associates the policy with the user for call routing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineVoiceRoutingPolicy -Identity \"user1@contoso.com\" -PolicyName \"US Only\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Application Name in PowerShell\nDESCRIPTION: This snippet prompts the user for the application name and uses a default name if the user doesn't provide one. It uses `Read-Host` to get user input and `IsNullOrWhiteSpace` to check if the input is empty.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$appName = Read-Host -Prompt \"Enter Admin Control Panel Application Name. Press ENTER to use default name as 'MACPApp' \"\nif([string]::IsNullOrWhiteSpace($appName))\n{\n    $appName = \"MACPApp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Response Payload Sample - JSON\nDESCRIPTION: This JSON snippet shows a sample response payload for the Get User operation. It includes the user ID, login name, and default item ID. The `defaultItemId` can be used to retrieve the default item details using the Get Item operation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-user.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"userId\": 0,\n\"loginName\": \"system\",\n\"defaultItemId\": 1655\n}\n```\n\n----------------------------------------\n\nTITLE: Get Archiving Configuration - PowerShell\nDESCRIPTION: This cmdlet retrieves information about the existing archiving configuration settings within the Skype for Business Server organization. It returns details regarding whether archiving is enabled, the scope of archiving (IM sessions, web conferences, etc.), and other configuration parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/options.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsArchivingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Restarting Skype Edge Service with PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to stop and start the Skype for Business Edge service on a single server. This is a necessary step after installing a new edge certificate to ensure the changes take effect.  It stops and then starts the `CsWindowsService`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-edge-certificates.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nStop-CsWindowsService\nStart-CsWindowsService\n```\n\n----------------------------------------\n\nTITLE: Get PSTN Gateway Commands via PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of available commands for managing Online PSTN Gateways, which are used to connect an SBC to Direct Routing in Microsoft Teams. It verifies that the necessary cmdlets for managing the SBC are accessible in the current PowerShell session.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-connect-the-sbc.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Command *onlinePSTNGateway*\n```\n\n----------------------------------------\n\nTITLE: Get Response Group Agent Groups - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves a list of Response Group agent groups. It is used to verify that all agent groups have been successfully migrated from the legacy environment. No specific parameters are required for this cmdlet to retrieve all agent groups.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-response-groups.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsRgsAgentGroup\n```\n\n----------------------------------------\n\nTITLE: Capturing Running Drivers - Console\nDESCRIPTION: This command uses the 'driverquery' command to list all running drivers in the system with verbose output and saves the result to 'driverquery.txt'. This is helpful in identifying potential driver-related conflicts affecting Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/troubleshoot-installation.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndriverquery /v > driverquery.txt\n```\n\n----------------------------------------\n\nTITLE: Filtering Diagnostic IDs in Top Failures Report - Skype for Business Server\nDESCRIPTION: This snippet shows how to filter the Top Failures Report by entering multiple diagnostic IDs. Diagnostic IDs are separated by commas. The filter will only show failed calls that reported at least one of the listed diagnostic IDs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/top-failures-report.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1011, 2412, 1033, 52116, 1008\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Client Policy - PowerShell\nDESCRIPTION: This PowerShell command modifies an existing client policy to enable the Lync client experience by disabling the Skype for Business UI.  It applies only to users who are assigned the specified client policy. Requires Skype for Business Server PowerShell module and the existing policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPolicy -Identity ExistingClientPolicyName -EnableSkypeUI $False\n```\n\n----------------------------------------\n\nTITLE: Stopping Skype for Business Services using PowerShell\nDESCRIPTION: This PowerShell cmdlet stops all Skype for Business services on a server. It's recommended before performing an In-Place Upgrade to prevent automatic service restarts from interfering with the upgrade process. The `-Scorch` parameter ensures a complete shutdown.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/upgrade-to-skype-for-business-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisable-CsComputer -Scorch\n```\n\n----------------------------------------\n\nTITLE: Create a Response Group Holiday Set - PowerShell\nDESCRIPTION: This PowerShell command creates a new Response Group holiday set. It requires the parent service where the workflow is hosted, a unique name for the holiday set, and a list of holidays to include in the set.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/optional-define-response-group-holiday-sets.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsRgsHolidaySet -Parent <service where the workflow is hosted> -Name <unique name for holiday set> -HolidayList <one or more holidays to be included in the holiday set>\n```\n\n----------------------------------------\n\nTITLE: Getting the Status of a Bulk Policy Assignment using PowerShell\nDESCRIPTION: This snippet retrieves the status of a bulk policy assignment operation using the `Get-CsBatchPolicyAssignmentOperation` cmdlet. It requires the OperationId of the bulk assignment. The output can be formatted using `fl` for detailed information.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsBatchPolicyAssignmentOperation -OperationId 3964004e-caa8-4eb4-b0d2-7dd2c8173c8c | fl\n```\n\n----------------------------------------\n\nTITLE: Setting XMPP Federation Route using PowerShell\nDESCRIPTION: This PowerShell cmdlet re-points the XMPP federation route to a specified Edge server. It takes the site name and the FQDN of the Edge server as parameters, effectively redirecting XMPP traffic to the new Edge pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsSite Site2 -XmppExternalFederationRoute EdgeServer2.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Get All Messages in Channels using Microsoft Graph API\nDESCRIPTION: Retrieves all messages in a channel using the Microsoft Graph API. This API may be metered and have associated costs. Requires authentication and channel id. Output is a list of chat message objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_20\n\nLANGUAGE: HTTP\nCODE:\n```\n[channel: getAllMessages](/graph/api/channel-getallmessages).\n```\n\n----------------------------------------\n\nTITLE: Enable Global QoE Monitoring - PowerShell\nDESCRIPTION: This PowerShell command enables Quality of Experience (QoE) monitoring at the global scope in Skype for Business Server. This allows tracking of audio and video call quality metrics. It requires the Skype for Business Server Management Shell and appropriate RBAC permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/deploy-monitoring.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsQoEConfiguration -Identity \"global\" -EnableQoE $True\n```\n\n----------------------------------------\n\nTITLE: Configuring Busy Options for a User (VoicemailOnBusy) - PowerShell\nDESCRIPTION: This configures the busy options for a specific user (Chrystal Velasquez) to forward new incoming calls to voicemail when they are already in a call, using the `Set-CsBusyOptions` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsBusyOptions -Identity \"Chrystal Velasquez\" -ActionType VoicemailOnBusy\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Unified Contact Store - PowerShell\nDESCRIPTION: This PowerShell command moves the user's contacts out of Exchange Server and back to Skype for Business Server. It is used after assigning the user a new user services policy that prohibits storing contacts in the unified contact store.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-the-unified-contact-store.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CsUcsRollback -Identity \"Ken Myer\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Phone Number with Extension - PowerShell\nDESCRIPTION: This PowerShell command assigns a Direct Routing phone number '+12223334444' with extension '6789' to the Shared Calling user 'user@company.com'. It leverages the Set-CsPhoneNumberAssignment cmdlet to configure the phone number and extension. It requires the user to be enabled for Direct Routing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-setup.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -Identity <user@company.com>\n-PhoneNumber “+12223334444;ext=6789” -PhoneNumberType DirectRouting \n```\n\n----------------------------------------\n\nTITLE: Test user permissions in OU - PowerShell\nDESCRIPTION: This command checks whether user permissions are set on the specified OU. It uses the Test-CsOUPermission cmdlet with the -OU parameter specifying the distinguished name of the OU and the -ObjectType parameter set to \"user\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/test-admin-permissions.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsOUPermission -OU \"ou=Redmond,dc=litwareinc,dc=com\" -ObjectType \"user\"\n```\n\n----------------------------------------\n\nTITLE: Remove Synthetic Transactions from Watcher Node - PowerShell\nDESCRIPTION: This PowerShell snippet removes a synthetic transaction from a watcher node using the `Set-CsWatcherNodeConfiguration` cmdlet. It uses the `Identity` parameter to identify the watcher node and the `Tests` parameter with the `Remove` method to specify the test to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-cs-001.litwareinc.com\" -Tests @{Remove=\"ABWQ\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling VoIP for Skype for Business Clients using New-CsMobilityPolicy\nDESCRIPTION: To disable VoIP for Skype for Business clients enabled for Location-Based Routing, you need to assign a mobility policy with IP Audio/Video disabled using the New-CsMobilityPolicy cmdlet. This ensures Location-Based Routing is properly enforced by preventing VoIP usage when necessary.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/location-based-routing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsMobilityPolicy\n```\n\n----------------------------------------\n\nTITLE: Defining a Network Region using New-CsTenantNetworkRegion - PowerShell\nDESCRIPTION: This snippet shows how to create a network region using the `New-CsTenantNetworkRegion` cmdlet. The `-NetworkRegionID` parameter defines the logical name for the region. This cmdlet is used to group network sites into regions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTenantNetworkRegion -NetworkRegionID <region ID>\n```\n\n----------------------------------------\n\nTITLE: Get Voicemail Policy using PowerShell\nDESCRIPTION: The `Get-CsOnlineVoicemailPolicy` cmdlet retrieves voicemail policies configured for the organization. This allows administrators to view the current settings and ensure they are configured correctly. It requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/change-the-default-language-for-greetings-and-emails.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n[Get-CsOnlineVoicemailPolicy](/powershell/module/teams/get-csonlinevoicemailpolicy)\n```\n\n----------------------------------------\n\nTITLE: Listing Sites with Get-CsNetworkSite (PowerShell)\nDESCRIPTION: This snippet retrieves and lists all existing network sites in Skype for Business Server. Network sites represent offices or locations within a region. No specific parameters are required. It outputs a list of network site objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsNetworkSite\n```\n\n----------------------------------------\n\nTITLE: Install Remote Monitoring Database with PowerShell\nDESCRIPTION: This PowerShell command installs the Skype for Business Server databases, including the monitoring database, on a remote computer. It requires the `ConfiguredDatabases` and `SqlServerFqdn` parameters to specify the target server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/associate-a-monitoring-store.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-CsDatabase -ConfiguredDatabases -SqlServerFqdn atl-sql-001.litwareinc.com\n```\n\n----------------------------------------\n\nTITLE: Disable Welcome Screen Tutorial - Registry\nDESCRIPTION: This registry setting prevents the Welcome screen tutorial from appearing when the Skype for Business client is opened. The `IsBasicTutorialSeenByUser` value is created as a DWORD (32-bit) Value under the `HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Lync` key and set to 1.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_7\n\nLANGUAGE: registry\nCODE:\n```\n\"IsBasicTutorialSeenByUser\"=dword:00000001\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Listener Installation Directory\nDESCRIPTION: This console command navigates the user to the directory where the Statistics Manager Listener is installed. This step is necessary before running any of the Statistics Manager PowerShell scripts.  The default installation path is 'C:\\Program Files\\Skype for Business Server StatsMan Listener'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncd C:\\Program Files\\Skype for Business Server StatsMan Listener\n```\n\n----------------------------------------\n\nTITLE: Listing Network Regions with Get-CsNetworkRegion (PowerShell)\nDESCRIPTION: This snippet retrieves and lists all existing network regions in Skype for Business Server. Network regions interconnect network parts across geographic areas. No specific parameters are required. It outputs a list of network region objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsNetworkRegion\n```\n\n----------------------------------------\n\nTITLE: Creating a New Conferencing Configuration - PowerShell\nDESCRIPTION: This PowerShell command creates a new collection of conferencing configuration settings for the Redmond site (site:Redmond).  It includes the Organization parameter to set the value of the Organization property to Litwareinc. This command will fail if a configuration already exists for the site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing-server-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsConferencingConfiguration -Identity site:Redmond -Organization Litwareinc\n```\n\n----------------------------------------\n\nTITLE: Managing Team Templates using PowerShell\nDESCRIPTION: This section lists PowerShell cmdlets available for managing Teams templates.  These cmdlets enable administrators to retrieve, create, remove, and update team templates through PowerShell.  Understanding these cmdlets is essential for automating team template management.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/get-started-with-teams-templates-in-the-admin-console.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamTemplate\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamTemplateList\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamTemplate\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTeamTemplate\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-CsTeamTemplate\n```\n\n----------------------------------------\n\nTITLE: Export On-Premises Dial Plan to XML\nDESCRIPTION: This script is intended to be run on an on-premises Skype for Business Server. It retrieves the dial plan named OPDP1 and exports it to an XML file named dialplan.xml. This is the first step in migrating an on-premises dial plan to Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\n$DPName = \"OPDP1\"\n$DPFileName = \"dialplan.xml\"\nGet-CsDialplan $DPName | Export-Clixml $DPFileName\n```\n\n----------------------------------------\n\nTITLE: Creating a new CDR configuration using New-CsCdrConfiguration PowerShell\nDESCRIPTION: This PowerShell command creates a new collection of CDR configuration settings and applies it to the Redmond site. No additional parameters are specified, so the default values for all properties will be used.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/create-or-modify-a-collection-of-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCdrConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Assign Emergency Calling Policy to Site\nDESCRIPTION: This PowerShell command assigns a specific emergency calling policy to a network site. It uses the `Set-CsTenantNetworkSite` cmdlet, identifying the site by its identity and applying the specified emergency calling policy. This allows for site-specific emergency calling configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/configure-dynamic-emergency-calling.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantNetworkSite -identity \"site1\" -EmergencyCallingPolicy \"Contoso Emergency Calling Policy 1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Turnitin API URL\nDESCRIPTION: This snippet describes how to configure the Turnitin API URL. The TurnitinApiUrl is the host address of your admin console. This example shows the format of the URL that should be entered, replacing 'your-tenant-name' with the appropriate value.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/expand-teams-across-your-org/assignments-in-teams.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://your-tenant-name.turnitin.com\n```\n\n----------------------------------------\n\nTITLE: New-CsLocationPolicy Cmdlet\nDESCRIPTION: This cmdlet creates a new location policy in Skype for Business.  It allows administrators to define policies based on network locations. Refer to the linked documentation for details on available parameters and usage examples.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/enhanced-9-1-1-and-location-service.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsLocationPolicy\n```\n\n----------------------------------------\n\nTITLE: Remove All Per-User External Access Policies - PowerShell\nDESCRIPTION: This PowerShell command removes all external access policies configured at the per-user scope. It uses `Get-CsExternalAccessPolicy` to retrieve all policies with the tag prefix, and pipes the results to `Remove-CsExternalAccessPolicy` to delete them.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/delete-a-site-or-user-policy-for-external-user-access.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsExternalAccessPolicy -Filter \"tag:*\" | Remove-CsExternalAccessPolicy\n```\n\n----------------------------------------\n\nTITLE: Enable RTMP-In via PowerShell\nDESCRIPTION: This PowerShell script enables RTMP-In for meeting organizers associated with the specified Teams meeting policy.  It uses the `Set-CsTeamsMeetingPolicy` cmdlet to set the `-AllowedStreamingMediaInput` parameter to \"RTMP\". Replace `<policy name>` with the actual name of the policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meetings-rtmp-in.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowedStreamingMediaInput \"RTMP\" \n```\n\n----------------------------------------\n\nTITLE: Listing Telephone Numbers with Get-CsPhoneNumberAssignment (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a list of all telephone numbers in the organization, displaying the telephone number, activation state, and number type.  It utilizes the `Get-CsPhoneNumberAssignment` cmdlet and formats the output using `ft` (Format-Table).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/see-a-list-of-phone-numbers-in-your-organization.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPhoneNumberAssignment | ft TelephoneNumber,ActivationState,NumberType\n```\n\n----------------------------------------\n\nTITLE: Import MSOnline Module - PowerShell\nDESCRIPTION: This command imports the MSOnline module, which contains cmdlets for managing Microsoft Online Services, including service principals. This is a prerequisite for connecting to Microsoft 365 or Office 365 and managing its resources.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-a-hybrid-environment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module MSOnline\n```\n\n----------------------------------------\n\nTITLE: Modifying Phone Number using Teams PowerShell\nDESCRIPTION: If the user didn't originally have a value for `msRTCSIP-Line` on-premises before the move, you can modify the phone number using the `-PhoneNumber` parameter in the `Set-CsPhoneNumberAssignment` cmdlet in the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsPhoneNumberAssignment -PhoneNumber <PhoneNumber>\n```\n\n----------------------------------------\n\nTITLE: Removing Watcher Node - PowerShell\nDESCRIPTION: This command removes the configuration settings of a specific watcher node, preventing it from automatically running synthetic transactions.  The `Remove-CsWatcherNodeConfiguration` cmdlet removes the configuration. The `-Identity` parameter specifies the FQDN of the watcher node.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsWatcherNodeConfiguration -Identity \"atl-watcher-001.litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Computer Details in PowerShell\nDESCRIPTION: This snippet retrieves the computer's DNS host name and domain using `Get-WmiObject`. It checks for `null` values to handle cases where the details cannot be found. If computer details cannot be found, the script outputs an error message and returns.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$computerDetails = Get-WmiObject win32_computersystem\n\nif (($computerDetails -eq $null) -OR\n    ($computerDetails.DNSHostName -eq $null) -OR\n    ($computerDetails.Domain -eq $null))\n{\n    # Unable to find computer details.\n    # We will return false in that case.\n    Write-Error \"`nUnable to find host and domain details. Aborting process.\"\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Calling Policy for Call Redirect in Teams\nDESCRIPTION: This example demonstrates how to enable call redirect via the command line using `Set-CsTeamsCallingPolicy`.  The `AllowCallRedirect` attribute needs to be set to `Enabled` to support local call forwarding from SIP devices.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-plan.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Failing Over to Backup Database using PowerShell\nDESCRIPTION: This PowerShell command fails over to the backup database. Replace the fully qualified domain name with your Persistent Chat pool's FQDN. This command informs Skype for Business Server that the Persistent Chat pool has failed over.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/high-availability-and-disaster-recovery.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPersistentChatState -Identity \"service:atl-cs-001.litwareinc.com\" -PoolState FailedOver\n```\n\n----------------------------------------\n\nTITLE: Setting External Access Policy for Response Group Federation - PowerShell\nDESCRIPTION: This snippet demonstrates how to configure the global external access policy for response group federation using the `Set-CsExternalAccessPolicy` cmdlet in PowerShell. Setting the `EnableOutsideAccess` parameter to `True` enables federation for Response Group applications. This requires understanding of Skype for Business Server PowerShell module and its cmdlets.  The global policy settings affect all users unless overridden by site or user policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsExternalAccessPolicy\n```\n\n----------------------------------------\n\nTITLE: Stopping World Wide Web Service - PowerShell\nDESCRIPTION: This PowerShell command stops the World Wide Web Publishing Service (w3svc). This is often necessary to ensure exclusive access during updates involving web components within Skype for Business Server. It is executed via the `net stop` command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/patch-or-update-a-back-end-or-standard-edition-server.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nnet stop w3svc\n```\n\n----------------------------------------\n\nTITLE: Open Computer Management Console - Command Line - Windows\nDESCRIPTION: This command opens the Computer Management console on Windows. This tool allows managing various system settings, including device management, which is required to verify the successful creation of the virtual smart card reader.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nCompMgmt.msc\n```\n\n----------------------------------------\n\nTITLE: List Channels via Microsoft Graph API\nDESCRIPTION: Lists the channels in a Team using the Microsoft Graph API. Requires authentication and a Team ID. Output: List of channels in the team.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_16\n\nLANGUAGE: HTTP\nCODE:\n```\n[List Channels](/graph/api/channel-list).\n```\n\n----------------------------------------\n\nTITLE: Setting Media Relay Routing Location Override in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to use the Set-CsOnlinePSTNGateway cmdlet to set the MediaRelayRoutingLocationOverride parameter. This parameter specifies the preferred region for media traffic in Microsoft Teams Direct Routing.  It requires the Skype for Business Online PowerShell module. The Identity parameter specifies the Session Border Controller (SBC) to configure, and MediaRelayRoutingLocationOverride defines the desired region using the country code.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-country-codes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSOnlinePSTNGateway -Identity sbc1.contoso.com –MediaRelayRoutingLocationOverride DE\n```\n\n----------------------------------------\n\nTITLE: Managing Team Targeting Hierarchy - PowerShell\nDESCRIPTION: This snippet indicates the addition of the `ApiVersion` parameter to `[Set|Remove]-TeamTargetingHierarchy` and `[Get]-TeamTargetingHierarchyStatus`. This parameter probably allows specifying the API version to use when managing team targeting hierarchies using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_47\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set|Remove]-TeamTargetingHierarchy -ApiVersion\n[Get]-TeamTargetingHierarchyStatus -ApiVersion\n```\n\n----------------------------------------\n\nTITLE: Disable Anonymous User Access via PowerShell\nDESCRIPTION: This PowerShell command disables anonymous user access by setting the AllowAnonymousUsers property of the CsAccessEdgeConfiguration to False. This prevents users without Active Directory accounts or accounts in federated domains from joining meetings, even if invited.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-anonymous-user-access.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -AllowAnonymousUsers $False\n```\n\n----------------------------------------\n\nTITLE: Service Level Target Calculation (SL_met_no_abandon)\nDESCRIPTION: This formula calculates the percentage of answered/abandoned calls that met the service level target. Abandoned calls within the service level target don't impact the service level percentage. It is null if sl_target is null.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-real-time-reports.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\n(sl_tot_answered_calls / [tot_offered_calls – sl_tot_abandoned_calls])\n```\n\n----------------------------------------\n\nTITLE: Create New Meeting Configuration - PowerShell\nDESCRIPTION: Creates a new set of meeting configuration settings at the site or service scope in Skype for Business Server. These settings only apply to scheduled meetings and do not affect ad-hoc meetings. The cmdlet returns the newly created configuration object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsMeetingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Region Links with Get-CsNetworkRegionLink PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves information about network region links configured in Skype for Business Server. It allows administrators to view the properties of these links, such as the linked regions and bandwidth policy profiles. The cmdlet can be executed from the Skype for Business Server Management Shell or a remote PowerShell session.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/linking-network-regions.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsNetworkRegionLink\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Ringback and Disabling Call Context - PowerShell\nDESCRIPTION: This snippet provides an example of setting the agent ringback grace period to 30 seconds and disabling call context for the Response Group application. It uses the `Set-CsRgsConfiguration` cmdlet.  Replace `\"service:ApplicationServer:redmond.contoso.com\"` with the appropriate service identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/managing-application-level-response-group-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsRgsConfiguration -Identity \"service:ApplicationServer:redmond.contoso.com\" -AgentRingbackGracePeriod 30 -DisableCallContext $false\n```\n\n----------------------------------------\n\nTITLE: Example: Create Unassigned Number Range for Exchange UM - PowerShell\nDESCRIPTION: This PowerShell snippet provides an example of creating an unassigned number range for Exchange UM Auto Attendant.  It sets the ExUmAutoAttendantPhoneNumber, Identity, NumberRangeStart, and NumberRangeEnd parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-unassigned-number-range.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsUnassignedNumber -ExUmAutoAttendantPhoneNumber \"+12065551234\" -Identity \"Unassigned range 1\" -NumberRangeStart \"+14255551000\" -NumberRangeEnd \"+14255551100\"\n```\n\n----------------------------------------\n\nTITLE: Get Meeting Configuration Settings - PowerShell\nDESCRIPTION: Retrieves information about the meeting configuration settings currently in use within the Skype for Business Server organization. This allows administrators to view the current settings affecting meeting behavior and policies. It requires access to the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/meeting-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get-CsMeetingConfiguration](/powershell/module/skype/get-csmeetingconfiguration?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Setting AutoAdmittedUsers to OrganizersAndPresentersOnly - PowerShell\nDESCRIPTION: This PowerShell snippet configures the `AutoAdmittedUsers` parameter of a Teams Events Policy to `OrganizersAndPresentersOnly`. This setting ensures that only organizers and presenters can bypass the meeting lobby. This is stated as the default value.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AutoAdmittedUsers OrganizersAndPresentersOnly\n```\n\n----------------------------------------\n\nTITLE: Export Exchange UMO Auto Attendant Configuration PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves the configuration of existing auto attendants from Exchange Unified Messaging Online (ExUMO). This allows administrators to export the settings for later use when setting up Cloud Auto Attendants. It requires Exchange Online PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/plan/exchange-unified-messaging-online-migration-support.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-UMAutoAttendant\n```\n\n----------------------------------------\n\nTITLE: Disabling Unified Contact Store in Global Policy - PowerShell\nDESCRIPTION: This PowerShell command disables the unified contact store for all users by setting the `UcsAllowed` property in the global user services policy to `$False`. This prevents new user contacts from being migrated to the unified contact store.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-the-unified-contact-store.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserServicesPolicy -Identity global -UcsAllowed $False\n```\n\n----------------------------------------\n\nTITLE: Get Group resource using Microsoft Graph API\nDESCRIPTION: Retrieves information about a Microsoft 365 group using the Microsoft Graph API. This API provides access to group membership and other group-related properties. Dependencies include Microsoft Graph API. Requires a group ID. Output is the group resource.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\n[Group resource type](/graph/api/resources/group)\n```\n\n----------------------------------------\n\nTITLE: SlimCore MSIX Package Reset with PowerShell\nDESCRIPTION: Instruction on using Reset-AppxPackage PowerShell command to reset the SlimCoreVdi MSIX package. This command is used to address scenarios where the package registrations fail after the virtual channel is established, or when AppExecution alias is missing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Reset-AppxPackage](/powershell/module/appx/reset-appxpackage)\n```\n\n----------------------------------------\n\nTITLE: DNS SRV Record Example for XMPP Federation\nDESCRIPTION: This example shows the required format for a DNS SRV record used for XMPP federation. It specifies the service, protocol, domain, and port number, allowing clients to discover the XMPP server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n_xmpp-server._tcp.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Setting Default Certificate as OAuthTokenIssuer - PowerShell\nDESCRIPTION: This PowerShell command retrieves the thumbprint of the default certificate and then uses it to set the default certificate as the OAuthTokenIssuer certificate for server-to-server authentication. It ensures all Front End Servers utilize the same certificate.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/assign-a-server-to-server-certificate.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x = (Get-CsCertificate -Type Default).Thumbprint\nSet-CsCertificate -Identity global -Type OAuthTokenIssuer -Thumbprint $x\n```\n\n----------------------------------------\n\nTITLE: Retrieving Error Details from Team Hierarchy Status in PowerShell\nDESCRIPTION: This snippet retrieves and displays the error message associated with the team targeting hierarchy status. It uses the Get-TeamTargetingHierarchyStatus cmdlet to get the status and then accesses the ErrorDetails.ErrorMessage property to extract the error message.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/set-up-your-team-hierarchy.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n(Get-TeamTargetingHierarchyStatus).ErrorDetails.ErrorMessage\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Team Channel Messages via MS Graph API (HTTP)\nDESCRIPTION: This example demonstrates how to retrieve all channel messages for a specific team using the Microsoft Graph API.  It doesn't include any filtering. Requires ChannelMessage.Read.All permission.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/teams/{id}/channels/getAllMessages\n```\n\n----------------------------------------\n\nTITLE: Enable Private Meeting Scheduling - PowerShell\nDESCRIPTION: This snippet shows how to enable private meeting scheduling in Teams using the CsTeamsMeetingPolicy cmdlet. The `-AllowPrivateMeetingScheduling` parameter must be set to True for users to schedule private meetings. This is a prerequisite for scheduling live events.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/plan-for-teams-live-events.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nThe [**CsTeamsMeetingPolicy**](/powershell/module/teams/set-csteamsmeetingpolicy)  **`-AllowPrivateMeetingScheduling`** parameter = True\n```\n\n----------------------------------------\n\nTITLE: Enabling the Topology - PowerShell\nDESCRIPTION: This PowerShell command applies the changes made to the Skype for Business topology. It must be executed after defining the trusted application pool and trusted application for the changes to take effect. It ensures that the new configuration is active within the Skype for Business environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-the-sefautil-tool.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-CsTopology\n```\n\n----------------------------------------\n\nTITLE: Remove CVI Service Provider\nDESCRIPTION: This PowerShell cmdlet removes all provider information about a provider that your organization no longer uses. This command is used to delete a video interop service provider from the configuration.  It requires the identity of the provider to be removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cloud-video-interop.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsVideoInteropServiceProvider\n```\n\n----------------------------------------\n\nTITLE: Setting Edge Pool Next Hop (Same Site) - Skype for Business\nDESCRIPTION: This set of steps describes how to configure an Edge pool to use a Front-End pool at the same site as its next hop. This is done through the Topology Builder application by modifying the Edge pool's properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Adding TelephoneNumbers output attribute to Get-CsOnlineUser cmdlet\nDESCRIPTION: This snippet adds the `TelephoneNumbers` output attribute to the `Get-CsOnlineUser` cmdlet. This attribute provides telephone number information for users. This functionality is currently only supported in commercial environments. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Creating an Address, FAX, and Email Information Prompt\nDESCRIPTION: This PowerShell command creates a text-to-speech prompt for address, fax, and email information, to be used by the auto attendant. The * key repeats the prompt when pressed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$addressPrompt = New-CsAutoAttendantPrompt -TextToSpeechPrompt \"To repeat this information at any time press the * key. Our mailing address is: 123 Main Street, Any town, Any Place, County. Our email address is: info@contoso.com. Our fax number is: 929-555-0151\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cmdlet Help in Skype for Business PowerShell\nDESCRIPTION: This command retrieves the complete help documentation for the specified Skype for Business cmdlet. Replace `New-CsVoicePolicy` with the desired cmdlet name. This allows administrators to understand cmdlet parameters, usage, and examples directly from the command line.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/management-shell.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help New-CsVoicePolicy -Full\n```\n\n----------------------------------------\n\nTITLE: Uninstall Central Management Database - PowerShell\nDESCRIPTION: This PowerShell command removes the Central Management store database files from the legacy Central Management Server. It requires the FQDN of the SQL Server and the SQL instance name as parameters. This should only be done after replication is complete and stable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-the-central-management-server.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-CsDatabase -CentralManagementDatabase -SqlServerFqdn <FQDN of SQL Server> -SqlInstanceName <Name of source server>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-CsDatabase -CentralManagementDatabase -SqlServerFqdn sql.contoso.net -SqlInstanceName rtc\n```\n\n----------------------------------------\n\nTITLE: Modifying an Existing Video Trunk Configuration - PowerShell\nDESCRIPTION: This PowerShell cmdlet modifies an existing video trunk configuration. It allows for updating parameters such as `GatewaySendsRtcpForActiveCalls`, `GatewaySendsRtcpForCallsOnHold`, and `EnableMediaEncryptionForSipOverTls`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-video-interop-server/configure-the-vis.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsVideoTrunkConfiguration -Identity \"Service:VideoGateway:CUCMVIS1.CUCMInterop.contoso.com\" -GatewaySendsRtcpForActiveCalls $false -GatewaySendsRtcpForCallsOnHold $false -EnableMediaEncryptionForSipOverTls  $true(or $false)\n```\n\n----------------------------------------\n\nTITLE: Set Conferencing Policy - Skype for Business PowerShell\nDESCRIPTION: This snippet modifies an existing conferencing policy using the `Set-CsConferencingPolicy` cmdlet. This is used to adjust settings related to PSTN dial-in, anonymous participant access, and dial-out functionalities for conferences.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsConferencingPolicy](/powershell/module/skype/set-csconferencingpolicy?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Graph PowerShell Module\nDESCRIPTION: This snippet installs the Microsoft Graph PowerShell module, necessary for tasks like identifying users by license type. It should be run with administrator privileges and requires an active internet connection.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module Microsoft.Graph -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Import Legacy Conference Directory - PowerShell\nDESCRIPTION: Imports conference directories from Microsoft Office Communications Server 2007 R2 to Skype for Business Server. This aids interoperability between the two systems. It requires access to the legacy conference directory data. The cmdlet returns the imported objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsLegacyConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-Signed Certificate\nDESCRIPTION: This PowerShell command creates a self-signed certificate named 'StatsManListener' and stores it in the local machine's certificate store.  This certificate can be used for testing purposes. It should be executed from a PowerShell console as Administrator.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-SelfSignedCertificate -DnsName StatsManListener -CertStoreLocation Cert:\\LocalMachine\\My\n```\n\n----------------------------------------\n\nTITLE: Retrieve Skype for Business Conferencing Configuration - PowerShell\nDESCRIPTION: This command retrieves the current conferencing configuration settings in Skype for Business Server. It allows administrators to view existing port ranges and settings related to client media, audio, video, application sharing, and file transfer.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-skype-clients.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: List File Transfer Filters using Get-CsFileTransferFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves all file transfer filter configurations defined in the Skype for Business Server environment. It allows administrators to view the current restrictions on file types that can be transferred.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsFileTransferFilterConfiguration\n```\n\n----------------------------------------\n\nTITLE: Setting PSTN Usages for Global Voice Routing Policy - PowerShell Example\nDESCRIPTION: This PowerShell snippet demonstrates an example of setting PSTN usage records for the global voice routing policy.  This example adds \"Local\" and \"Long Distance\" PSTN usages to the Global policy.  Requires existing PSTN usage records with the specified names.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/skype-for-business-hybrid-solutions/plan-your-phone-system-cloud-pbx-solution/assign-a-voice-routing-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSVoiceRoutingPolicy -Identity Global -PSTNUsages \"Local\", \"Long Distance\"\n```\n\n----------------------------------------\n\nTITLE: Setting PSTN Usage Globally in Teams with PowerShell\nDESCRIPTION: This command sets the PSTN usage for the global scope in Microsoft Teams. It adds the 'International' usage. This command requires the Teams PowerShell module to be installed and properly configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/audio-conferencing-with-direct-routing-for-gcch-and-dod.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlinePstnUsage -Identity Global -Usage @{Add=\"International\"}\n```\n\n----------------------------------------\n\nTITLE: Managing Meeting Configuration via PowerShell\nDESCRIPTION: This section describes how to manage meeting configuration settings using Skype for Business Server Management Shell. It directs users to find cmdlets that start with `-CsMeetingConfiguration` to adjust meeting creation and user access parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nsearch for the **-CsMeetingConfiguration** cmdlets\n```\n\n----------------------------------------\n\nTITLE: Skype for Business Metadata URL\nDESCRIPTION: This is an example URL for the Skype for Business Server authentication metadata document. It consists of the fully qualified domain name of the Skype for Business Server pool followed by the suffix /metadata/json/1.  This URL is needed when configuring Exchange Server as a partner application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/configure-partner-applications.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhttps://atl-cs-001.litwareinc.com/metadata/json/1\n```\n\n----------------------------------------\n\nTITLE: Granting a Streaming Teams Call Hold Policy to a User (PowerShell)\nDESCRIPTION: This snippet shows how to assign a Teams Call Hold Policy with a streaming source to a specific user using the Grant-CsTeamsCallHoldPolicy cmdlet. The policy name and the user identity are specified to apply the streaming music on hold settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/music-on-hold.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> Grant-CsTeamsCallHoldPolicy -PolicyName \"StreamingMoH1\" -Identity user2@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Accessing Certificate Services Website via HTTPS\nDESCRIPTION: This code snippet demonstrates how to access the Certificate Services website using HTTPS. Replace `<NAME OF YOUR ISSUING CA SERVER>` with the actual name of your Certificate Authority server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-edge-server/deploy-edge-servers.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhttps://<NAME OF YOUR ISSUING CA SERVER>/certsrv\n```\n\n----------------------------------------\n\nTITLE: Invoke Management Store Replication - PowerShell\nDESCRIPTION: This cmdlet forces the replication of the Central Management store to the Edge server. It's used when the initial replication status is \"False\". It requires sufficient time for the replication process to complete before re-checking the status.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/verify-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsManagementStoreReplication\n```\n\n----------------------------------------\n\nTITLE: Enabling Push Notifications with Cmdlet in Skype for Business\nDESCRIPTION: This snippet represents the action of running a cmdlet to enable push notifications for Skype for Business mobile applications. The Edge Server requires a federation relationship with the cloud-based Skype for Business Server Push Notification Service to function. This service is found on the Skype for Business Online datacenter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/mobility.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Modify DTMF Global Settings - PowerShell\nDESCRIPTION: This PowerShell command modifies the global DTMF settings, swapping the keys for enabling/disabling announcements and muting the audience.  Specifically, it sets the key for `EnableDisableAnnouncementsCommand` to 4 and `AudienceMuteCommand` to 9.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/key-mapping-for-dtmf-commands.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialinConferencingDtmfConfiguration -EnableDisableAnnouncementsCommand 4 -AudienceMuteCommand 9\n```\n\n----------------------------------------\n\nTITLE: Enabling Watcher Node - PowerShell\nDESCRIPTION: This command enables the execution of synthetic transactions on a specific watcher node. The `Set-CsWatcherNodeConfiguration` cmdlet modifies the watcher node configuration. The `-Identity` parameter specifies the FQDN of the watcher node, and the `-Enabled $True` parameter enables the node.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-watcher-001.litwareinc.com\" -Enabled $True\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Network Site with Get-CsNetworkSite (PowerShell)\nDESCRIPTION: This snippet retrieves the details of a specific network site in Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the site to retrieve. The example retrieves the site named \"Redmond\". It outputs a network site object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsNetworkSite -Identity Redmond\n```\n\n----------------------------------------\n\nTITLE: Listing Archiving Configurations using Get-CsArchivingConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves a list of all Archiving Configurations within the Skype for Business environment. No parameters are specified to retrieve all configurations. It returns a list of Archiving Configuration objects with their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsArchivingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Copilot Interactions via Graph API (HTTP)\nDESCRIPTION: This example shows how to retrieve all copilot interactions for a user using the Microsoft Graph API's getAllEnterpriseInteractions endpoint (beta). It retrieves interactions without any filters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_16\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/beta/copilot/users/{id}/interactionHistory/getAllEnterpriseInteractions \n```\n\n----------------------------------------\n\nTITLE: Disabling Watcher Node - PowerShell\nDESCRIPTION: This command disables the execution of synthetic transactions on a specific watcher node. The `Set-CsWatcherNodeConfiguration` cmdlet modifies the watcher node configuration. The `-Identity` parameter specifies the FQDN of the watcher node, and the `-Enabled $False` parameter disables the node.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWatcherNodeConfiguration -Identity \"atl-watcher-001.litwareinc.com\" -Enabled $False\n```\n\n----------------------------------------\n\nTITLE: Managing Tenant Settings - PowerShell\nDESCRIPTION: This snippet illustrates the release of `[Get|Update]-M365UnifiedTenantSettings` to get or update tenant level settings like DefaultApp, GlobalApp, PrivateApp and EnableCopilotExtensibility. This cmdlet is used for unified app management within the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_44\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Update]-M365UnifiedTenantSettings\n```\n\n----------------------------------------\n\nTITLE: Modify a Number Exception via PowerShell\nDESCRIPTION: This PowerShell command modifies one or more parameters of a number exception pattern. The Identity parameter is required to specify which pattern to modify.  The example disables the exception pattern named \"AllowContoso1\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/block-inbound-calls.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsInboundExemptNumberPattern -Identity <String> -Enabled <bool> -Description <string> -Pattern <string>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsInboundExemptNumberPattern -Identity \"AllowContoso1\" -Enabled $False\n```\n\n----------------------------------------\n\nTITLE: Checking BackupServiceStatus - PowerShell\nDESCRIPTION: This command checks the status of the BackupService for the RGS category on a specific pool. Replace `<Pool1 FQDN>` with the actual FQDN of the pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsBackupServiceStatus -Category RGS -PoolFqdn <Pool1 FQDN>\n```\n\n----------------------------------------\n\nTITLE: Removing Archiving Policy using Remove-CsArchivingPolicy (PowerShell)\nDESCRIPTION: This cmdlet removes an Archiving Policy for a specified site in Skype for Business.  The `-Identity` parameter specifies the site (e.g., `site:Redmond`) to be removed. This action permanently deletes the archiving policy for the specified site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsArchivingPolicy -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Configure Trusted Application Port using Powershell\nDESCRIPTION: This PowerShell cmdlet configures the trusted application port for the Meeting Room Admin Portal by setting the internal and external listening ports on the specified Skype for Business Server pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/room-system-v1-administrative-web-portal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsWebServer -Identity POOLFQDN -MeetingRoomAdminPortalInternalListeningPort 4456 -MeetingRoomAdminPortalExternalListeningPort 4457\n```\n\n----------------------------------------\n\nTITLE: Example Get-CsNetworkRegionLink PowerShell Output\nDESCRIPTION: This is an example output of the Get-CsNetworkRegionLink PowerShell cmdlet. It shows the properties returned for a specific network region link, including the Identity, BWPolicyProfileID, NetworkRegionLinkID, NetworkRegionID1, and NetworkRegionID2.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/linking-network-regions.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nIdentity            : NorthwestToCalifornia\nBWPolicyProfileID   :\nNetworkRegionLinkID : NorthwestToCalifornia\nNetworkRegionID1    : Pacific Northwest\nNetworkRegionID2    : California\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Meeting Policy PowerShell Cmdlets\nDESCRIPTION: These cmdlets enable admins to manage Teams meeting policies, including creating, retrieving, modifying, and removing such policies. Note that these only work with powershell.exe and not pwsh.exe in version 4.8.1-preview\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_90\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Get|Set|Remove]-CsTeamsMeetingPolicy\n```\n\n----------------------------------------\n\nTITLE: Disabling RGSBackupService - PowerShell\nDESCRIPTION: This command disables RGSBackupService globally.  When set to 0, RGSBackupService is disabled on all paired pools. Use with caution. This action stops RGS data replication.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsBackupServiceConfiguration -EnableRgsBackupService 0\n```\n\n----------------------------------------\n\nTITLE: Specifying SEFAUtil as a Trusted Application - PowerShell\nDESCRIPTION: This step utilizes the `New-CsTrustedApplication` cmdlet to define the SEFAUtil tool as a trusted application within the newly created application pool. This ensures that the tool is authorized to perform specific actions within the Skype for Business environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-group-call-pickup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTrustedApplication\n```\n\n----------------------------------------\n\nTITLE: Remove Registrar Security Settings for Edge Server - PowerShell\nDESCRIPTION: This PowerShell command removes the Registrar security settings applied to the specified Edge Server.  The `-Identity` parameter specifies the service identity of the Edge Server.  The command requires the Skype for Business Server Management Shell to be installed and configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/registrar-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsProxyConfiguration -Identity service:EdgeServer:atl-edge-011.litwareinc.com\n```\n\n----------------------------------------\n\nTITLE: Remove Specific Conferencing Policy - PowerShell\nDESCRIPTION: This PowerShell command removes a specific conferencing policy based on its Identity. The Identity parameter specifies the name of the policy to be removed.  Ensure you have the necessary Skype for Business Server Management Shell modules loaded.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/delete-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsConferencingPolicy -Identity \"RedmondConferencingPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Assign a Teams Voice Applications Policy to Users - PowerShell\nDESCRIPTION: This PowerShell cmdlet assigns a Teams voice applications policy to one or more users. It enables administrators to grant specific permissions to authorized users, allowing them to make configuration changes to auto attendants and call queues.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voice-applications-policies.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Checking Applied Group Policies (cmd)\nDESCRIPTION: This command displays the Resultant Set of Policy (RSoP) for the current user.  It is used to verify that the newly created GPO has been successfully assigned to the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_10\n\nLANGUAGE: batch\nCODE:\n```\ngpresult /r\n```\n\n----------------------------------------\n\nTITLE: Creating Conferencing Policies with PowerShell in Skype for Business\nDESCRIPTION: These PowerShell commands create and modify conferencing policies and configurations in Skype for Business Server.  They enable administrators to customize the conferencing experience. The New- commands create new policies or configurations while Set- commands modify existing ones.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsConferencingPolicy](/powershell/module/skype/new-csconferencingpolicy?view=skype-ps)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsConferencingPolicy](/powershell/module/skype/set-csconferencingpolicy?view=skype-ps)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsConferencingConfiguration](/powershell/module/skype/new-csconferencingconfiguration?view=skype-ps)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsConferencingConfiguration](/powershell/module/skype/set-csconferencingconfiguration?view=skype-ps)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New-CsMeetingConfiguration](/powershell/module/skype/new-csmeetingconfiguration?view=skype-ps)\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsMeetingConfiguration](/powershell/module/skype/set-csmeetingconfiguration?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Messaging Policy PowerShell Cmdlets\nDESCRIPTION: These cmdlets allow administrators to manage Teams messaging policies. The cmdlets include creating, retrieving, modifying, and removing Teams messaging policies. Note that these only work with powershell.exe and not pwsh.exe in version 4.8.1-preview\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_89\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Get|Set|Remove]-CsTeamsMessagingPolicy\n```\n\n----------------------------------------\n\nTITLE: Removing Archiving Configuration using Remove-CsArchivingConfiguration (PowerShell)\nDESCRIPTION: This cmdlet removes an Archiving Configuration for a specified site in Skype for Business. The `-Identity` parameter specifies the site (e.g., `site:Redmond`) to be removed. This action permanently deletes the archiving configuration for the specified site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsArchivingConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Disable Call Data Connector (Site Scope)\nDESCRIPTION: This PowerShell command disables Call Data Connector for a specific site (Dublin in this example).  Monitoring records will not be forwarded for users in that specific site. It requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCloudCallDataConnectorConfiguration -Identity \"site:Dublin\" -EnableCallDataConnector $False\n```\n\n----------------------------------------\n\nTITLE: Installing MicrosoftTeams PowerShell Module\nDESCRIPTION: This code snippet installs the MicrosoftTeams PowerShell module. It includes installing PowerShellGet and the MicrosoftTeams module, forcing installation and allowing pre-release versions and clobbering existing installations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/edu-parents-app.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name PowerShellGet -Force -AllowClobber\nInstall-Module -Name MicrosoftTeams -AllowPrerelease -Force –AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Adding TownhallEventAttendeeAccess to CsTeamsEventsPolicy cmdlets\nDESCRIPTION: This snippet adds the `TownhallEventAttendeeAccess` parameter to the `New-CsTeamsEventsPolicy` and `Set-CsTeamsEventsPolicy` cmdlets. This parameter likely controls the access level for attendees of Townhall events within Microsoft Teams. There are no explicitly mentioned dependencies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsEventsPolicy\n```\n\n----------------------------------------\n\nTITLE: CQD URL Filter Example\nDESCRIPTION: This snippet shows how to add a filter to the CQD URL to filter based on the second tenant ID. It demonstrates how to append a filter parameter to the URL, specifying the data model name and value to filter by. This allows for easy sharing and bookmarking of specific CQD queries.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cqd-data-and-reports.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\n/filter/[AllStreams].[Second Tenant Id]|[YOUR TENANT ID HERE]\n```\n\n----------------------------------------\n\nTITLE: Restart Teams Rooms device with PowerShell\nDESCRIPTION: This snippet refers to restarting the Teams Rooms device using the `Restart-Computer` cmdlet in PowerShell.  It requires specifying the computer name of the device to be restarted. This command enables remote management of the Teams Rooms device.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/coordinated-meetings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRestart-Computer\n```\n\n----------------------------------------\n\nTITLE: Create Teams SIP Gateway Service Principal - MS Graph Module\nDESCRIPTION: This snippet creates a new Teams SIP Gateway service principal using the MS Graph module. It is required for bulk device sign-in scenarios. It uses the AppId. It requires the MS Graph module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-MgServicePrincipal -AppId \"61c8fd69-c13e-4ee6-aaa6-24ff71c09bca\"\n```\n\n----------------------------------------\n\nTITLE: Create a New URL Filter using New-CsImFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet creates a new URL filter configuration for a specified site in Skype for Business Server. The `-Identity` parameter specifies the site where the filter is applied.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsImFilterConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Get Teams Upgrade Policy instances using PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of all instances of the TeamsUpgradePolicy, displaying the Identity, Mode, and NotifySfbUsers properties. This allows administrators to view available policies and their configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-tools.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsUpgradePolicy|ft Identity, Mode, NotifySfbUsers\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Execution\nDESCRIPTION: This PowerShell command executes the Moodle-AzureAD-Script.ps1 script. This script automates the process of creating an Azure AD application and configuring necessary permissions for Moodle integration. It requires the user to be logged in as a Microsoft 365 administrator.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/install-moodle-integration.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\Moodle-AzureAD-Script.ps1\n```\n\n----------------------------------------\n\nTITLE: Block Channel Recording Download\nDESCRIPTION: This PowerShell command prevents users in the organization from downloading channel meeting recordings and transcripts from OneDrive and SharePoint. It sets the ChannelRecordingDownload parameter to Block for the Global policy. No specific modules need to be imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-recording.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -ChannelRecordingDownload Block\n```\n\n----------------------------------------\n\nTITLE: Setting Compliance Recording Application to the Policy - PowerShell\nDESCRIPTION: This PowerShell snippet associates a compliance recording application instance with a compliance recording policy.  It requires the Identity of the policy and the Id of the application instance.  This step links the recorder to the specific policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-recording-compliance.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsComplianceRecordingPolicy -Identity TestComplianceRecordingPolicy `\n   -ComplianceRecordingApplications @(New-CsTeamsComplianceRecordingApplication -Id 5069aae5-c451-4983-9e57-9455ced220b7 -Parent TestComplianceRecordingPolicy)\n```\n\n----------------------------------------\n\nTITLE: Create New Conferencing Configuration - PowerShell\nDESCRIPTION: Creates a new collection of conference configuration settings in Skype for Business Server. Requires specifying parameters such as maximum content upload size and client download URLs. The cmdlet returns the newly created configuration object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Creating a Subnet using New-CsNetworkSubnet in PowerShell\nDESCRIPTION: This cmdlet creates a new network subnet in Skype for Business. It requires the Identity, MaskBits, and NetworkSiteID parameters to define the subnet's address, mask, and associated network site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsNetworkSubnet -Identity 172.11.15.0 -MaskBits 24 -NetworkSiteID Vancouver\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams Service with PowerShell\nDESCRIPTION: This PowerShell snippet establishes a connection to the Microsoft Teams service.  It requires the Microsoft Teams PowerShell module to be installed. No specific inputs are needed; the command authenticates using the current user's credentials or prompts for credentials if required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-the-audio-conferencing-settings-for-my-organization-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Connect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Grant a Teams IP Phone policy to a user\nDESCRIPTION: This PowerShell command assigns a specific Teams IP Phone policy to a specified user. This allows an administrator to override the default user interface detection. Parameters: Identity (user's email), PolicyName (name of the policy).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/phones/teams-android-devices-user-interface.md#_snippet_2\n\nLANGUAGE: Powershell\nCODE:\n```\nGrant-CsTeamsIPPhonePolicy –Identity 'conf-adams@contoso.com' –PolicyName 'Meeting Sign In'\n```\n\n----------------------------------------\n\nTITLE: Remove SIP Trunk Configuration by Identity - PowerShell\nDESCRIPTION: This command removes a specific SIP trunk configuration by its identity.  The Identity parameter specifies the unique identifier for the trunk configuration to be removed. The command targets trunk configurations applied to the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/delete-existing-collection-of-sip-trunk-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTrunkConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Disable Meeting Reactions via PowerShell\nDESCRIPTION: This PowerShell snippet disables meeting reactions by setting the `-AllowMeetingReactions` parameter to `Disabled` within the `Set-CsTeamsMeetingPolicy` cmdlet. The `<policy name>` placeholder should be replaced with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-reactions-meetings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowMeetingReactions Disabled\n```\n\n----------------------------------------\n\nTITLE: CDRDB Connection String (After)\nDESCRIPTION: This code snippet demonstrates how to modify the CDRDB connection string to include the failover partner information, enabling automatic failover to the mirror database in case of a failure.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/monitoring-reports-with-a-mirror-database.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nData source=(local)\\archinst;Failover Partner=atl-mirror-001\\archinst;initial catalog=LcsCDR\n```\n\n----------------------------------------\n\nTITLE: Set PowerShell Execution Policy to Unrestricted - Skype for Business\nDESCRIPTION: This command sets the PowerShell execution policy to Unrestricted.  This is required to allow the execution of scripts for stress and performance testing.  This change may need to be reversed after testing is complete.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/stress-and-performance-tool/provisioning-the-topology-to-run-load.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy -Unrestricted\n```\n\n----------------------------------------\n\nTITLE: Invalid Address Book Normalization Rule Example\nDESCRIPTION: This example shows a normalization rule string that will fail due to whitespace and punctuation. These characters are stripped before applying the rules.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-address-book.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\\s*\\(\\s*\\d\\d\\d\\s*\\)\\s*\\-\\s*\\d\\d\\d\\s*\\-\\s*\\d\\d\\d\\d\n```\n\n----------------------------------------\n\nTITLE: Set default meeting layout to Gallery for dual display (XML)\nDESCRIPTION: This XML snippet sets the default meeting layout to Gallery for a dual front-of-room display setup. It uses the DefaultFoRExperience XML tag. Note that Focus on content is not available for dual display mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-room-scale-res.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<DefaultFoRExperience>0</DefaultFoRExperience>\n```\n\n----------------------------------------\n\nTITLE: Get Centralized Logging Service Configuration from Local Store - PowerShell\nDESCRIPTION: This command retrieves the current Centralized Logging Service configuration from the computer's LocalStore instead of the Central Management store. It uses the -LocalStore parameter to specify the data source.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClsConfiguration -LocalStore\n```\n\n----------------------------------------\n\nTITLE: Disable Attendance and Engagement Reports - PowerShell\nDESCRIPTION: This PowerShell script disables the attendance and engagement reports for a specific Teams meeting policy. It uses the `Set-CsTeamsMeetingPolicy` cmdlet with the `-AllowEngagementReport` parameter set to `Disabled`. Replace `<policy name>` with the actual name of the Teams meeting policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-analytics-and-reports/meeting-attendance-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowEngagementReport Disabled\n```\n\n----------------------------------------\n\nTITLE: Get Teams Template List via PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of Teams templates using the `Get-CsTeamTemplateList` cmdlet. It requires the Teams PowerShell module to be installed and the administrator to be authenticated.  The output is a list of TeamTemplate objects containing the properties of each template.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamTemplateList\n```\n\n----------------------------------------\n\nTITLE: Set PowerShell Execution Policy\nDESCRIPTION: This snippet demonstrates how to set the PowerShell execution policy to RemoteSigned, allowing the execution of locally downloaded scripts that are signed by a trusted publisher. This is a prerequisite step for running the offboarding script.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/enroll-a-device.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy –ExecutionPolicy RemoteSigned\n```\n\n----------------------------------------\n\nTITLE: Clear User's On-Premises Line URI (PowerShell)\nDESCRIPTION: This PowerShell command clears the `LineUri` attribute for a specified user in the on-premises Skype for Business environment. This is performed to migrate the phone number management to the online environment. It requires Skype for Business Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-enable-users.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUser -Identity \"<User name>\" -LineUri $null\n```\n\n----------------------------------------\n\nTITLE: Get Calendar resource using Microsoft Graph API\nDESCRIPTION: Retrieves information about a calendar using the Microsoft Graph API. This provides access to calendar events and settings. Dependencies include the Microsoft Graph API. Input requires a calendar ID. Output is the calendar resource.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\n[Calendar resource type](/graph/api/resources/calendar)\n```\n\n----------------------------------------\n\nTITLE: Example: Assigning Call Via Work Policy (PowerShell)\nDESCRIPTION: This example assigns the 'ContosoUser1CvWP' Call Via Work policy to the user 'ContosoUser1'. It demonstrates how to use the Grant-CsCallViaWorkPolicy cmdlet with specific user and policy names.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-call-via-work.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsCallViaWorkPolicy -Identity ContosoUser1 -PolicyName Tag:ContosoUser1CvWP\n```\n\n----------------------------------------\n\nTITLE: Managing Dial-in Access via PowerShell\nDESCRIPTION: This section describes how to manage dial-in access number settings through the Skype for Business Server Management Shell. It instructs users to search for cmdlets beginning with `-CsDialInConferencing` to manage settings related to dial-in conferencing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nsearch for the **-CsDialInConferencing** cmdlets\n```\n\n----------------------------------------\n\nTITLE: Defining Holidays using New-CsRgsHoliday and New-CsRgsHolidaySet\nDESCRIPTION: This snippet references PowerShell cmdlets used to define holidays and holiday sets for Response Group workflows in Skype for Business. These cmdlets allow administrators to specify days when the response group is closed for business.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsRgsHoliday\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsRgsHolidaySet\n```\n\n----------------------------------------\n\nTITLE: Get Facilities Help Desk Channel ID - PowerShell\nDESCRIPTION: This PowerShell script retrieves the channel ID of the \"Help Desk\" channel within the \"Facilities\" team. This channel ID is crucial for directing call queue interactions to the specified channel.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue-via-cmdlets.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-TeamChannel -GroupId $teamFacilitiesGroupID\n$teamFacilitiesHelpDeskChannelID = \"{assign ID from output of above command}\"\n```\n\n----------------------------------------\n\nTITLE: Enable Face Enrollment Globally - PowerShell\nDESCRIPTION: This PowerShell command enables face enrollment for all users in the organization by setting the `EnrollFace` parameter to `Enabled` in the global `CsTeamsAIPolicy`. This allows users to create face profiles to be recognized in meeting rooms.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/voice-and-face-recognition.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsAIPolicy -Identity Global -EnrollFace Enabled\n```\n\n----------------------------------------\n\nTITLE: Creating a Device Update Configuration with New-CsDeviceUpdateConfiguration in PowerShell\nDESCRIPTION: This snippet creates a new device update configuration in Skype for Business using the `New-CsDeviceUpdateConfiguration` cmdlet. It requires the `Identity` parameter to define the new configuration. This adds a new device update configuration to the system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsDeviceUpdateConfiguration -Identity site:Redmond \"07823-A345\"\n```\n\n----------------------------------------\n\nTITLE: Email Subject: Action Request - New Phone System Prep\nDESCRIPTION: This snippet presents the subject line for the second email to be sent one week before launch. It prompts users to take action in preparation for the new phone system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/prepare-my-users-email-templates.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nACTION REQUESTED: Are you ready for your new phone system?\n```\n\n----------------------------------------\n\nTITLE: Adding RealTimeText parameter to CsTeamsCallingPolicy cmdlets\nDESCRIPTION: This snippet adds the `RealTimeText` parameter to the `New-CsTeamsCallingPolicy` and `Set-CsTeamsCallingPolicy` cmdlets. This parameter likely manages real-time text features for Teams calling. There are no explicitly mentioned dependencies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Enable PIN-less meeting join for a specific site\nDESCRIPTION: This PowerShell command enables PIN-less meeting join for the 'Redmond' site. The `AllowAnonymousPstnActivation` parameter is set to `$True` to allow dial-in callers to join without entering a leader PIN.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/pin-less-meeting-join.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingConfiguration -Identity site:Redmond -AllowAnonymousPstnActivation $True\n```\n\n----------------------------------------\n\nTITLE: Enable Anonymous User Access via PowerShell\nDESCRIPTION: This PowerShell command enables anonymous user access by setting the AllowAnonymousUsers property of the CsAccessEdgeConfiguration to True. This allows users without Active Directory accounts or accounts in federated domains to join meetings if invited.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-anonymous-user-access.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -AllowAnonymousUsers $True\n```\n\n----------------------------------------\n\nTITLE: Remove a Specific External Access Policy - PowerShell\nDESCRIPTION: This PowerShell command removes a specific external access policy. It uses the `Remove-CsExternalAccessPolicy` cmdlet with the `-Identity` parameter to specify the policy to be removed. The identity is defined as \"site:Redmond\" in this example.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/delete-a-site-or-user-policy-for-external-user-access.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsExternalAccessPolicy -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Creating CDR configuration settings that disable call detail recording with PowerShell\nDESCRIPTION: This PowerShell command creates a collection of CDR configuration settings for the Redmond site that disables Call Detail Recording (CDR). It sets the EnableCDR parameter to $False.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/create-or-modify-a-collection-of-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCdrConfiguration -Identity \"site:Redmond\" -EnableCDR $False\n```\n\n----------------------------------------\n\nTITLE: Deleting a UC Phone Configuration with Remove-CsUCPhoneConfiguration in PowerShell\nDESCRIPTION: This snippet removes a UC phone configuration from Skype for Business using the `Remove-CsUCPhoneConfiguration` cmdlet. It requires the `Identity` parameter to specify the configuration to be deleted. This action permanently removes the specified UC phone configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_31\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsUCPhoneConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Get Conference Directory Info - Skype for Business - PowerShell\nDESCRIPTION: Retrieves information about conference directories configured for use in an organization. Conference directories help dial-in conferencing users locate conference information. This cmdlet allows administrators to view the settings for these directories.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Retrieving Phone Number Assignment with PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to retrieve phone number assignments using the `Get-CsPhoneNumberAssignment` cmdlet. This cmdlet is useful for verifying the settings and configurations applied to phone numbers within the Teams environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-plans-routing-overview.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsPhoneNumberAssignment\n```\n\n----------------------------------------\n\nTITLE: Get Dial Plan - PowerShell\nDESCRIPTION: Retrieves information about the dial plans used in Skype for Business Server. Dial plans define how phone numbers are translated and routed. The cmdlet returns dial plan objects with details about the configured settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Importing ServerManager Module in PowerShell\nDESCRIPTION: This PowerShell command imports the 'servermanager' module, enabling the use of cmdlets for managing Windows Server features and roles. This module is necessary to add or remove server features using PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/plan.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nimport-module servermanager\n```\n\n----------------------------------------\n\nTITLE: Granting Teams Mobility Policies to Users with PowerShell\nDESCRIPTION: This PowerShell snippet grants the NativeFirst, TeamsFirst, and UserSelected Teams Mobility Policies to a specific user. Replace 'user@xyz.onmicrosoft.com' with the actual user's email address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/operator-connect-mobile-configure.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsMobilityPolicy NativeFirst -Identity user@xyz.onmicrosoft.com\nGrant-CsTeamsMobilityPolicy TeamsFirst -Identity user@xyz.onmicrosoft.com\nGrant-CsTeamsMobilityPolicy UserSelected -Identity user@xyz.onmicrosoft.com\n```\n\n----------------------------------------\n\nTITLE: Create a New Teams Voice Applications Policy - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new Teams voice applications policy. It allows administrators to define a set of permissions that can be assigned to authorized users, controlling their ability to manage auto attendants and call queues.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voice-applications-policies.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Disable Archiving Disclaimer using PowerShell\nDESCRIPTION: This PowerShell command disables the archiving disclaimer in Skype for Business Server.  It sets the EnableArchivingDisclaimer property of the CsAccessEdgeConfiguration to $False.  This will prevent automatically sending an archiving disclaimer to federated partners.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-archiving/configure-archiving-disclaimers.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -EnableArchivingDisclaimer $False\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Bluetooth Settings - Teams Rooms on Windows\nDESCRIPTION: This XML snippet shows the configuration options for enabling Bluetooth advertisement and auto-accepting proximate meeting invitations on Microsoft Teams Rooms on Windows. These settings can be managed remotely via an XML configuration file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/proximity-join.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nBluetoothAdvertisementEnabled\n```\n\nLANGUAGE: xml\nCODE:\n```\nAutoAcceptProximateMeetingInvitations\n```\n\nLANGUAGE: xml\nCODE:\n```\nAutoAcceptProximateMeetingInvitations\n```\n\n----------------------------------------\n\nTITLE: Grant Client PIN Policy - PowerShell\nDESCRIPTION: Assigns a client personal identification number (PIN) policy to a user or group of users. The cmdlet requires the Skype for Business Server PowerShell module. The input is the identity of the user or group to whom the policy is assigned. The output confirms the policy assignment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_42\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Camera settings via XML - Teams Rooms\nDESCRIPTION: This snippet refers to the ability to adjust content camera settings remotely using an XML configuration file within Microsoft Teams Rooms environment. The XML configuration file can be used to remotely configure settings like content enhancements and camera rotation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/content-camera.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYou can also adjust these settings remotely using an [XML configuration file](xml-config-file.md).\n```\n\n----------------------------------------\n\nTITLE: Uninstall Teams via MSI\nDESCRIPTION: This command uninstalls Teams from the machine. It requires the path to the MSI file and creates an uninstall log.  The `/passive` switch provides a minimal UI during the uninstallation process.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmsiexec /passive /x <path_to_msi> /l*v <uninstall_logfile_name>\n```\n\n----------------------------------------\n\nTITLE: Enable Call Data Connector (Site Scope)\nDESCRIPTION: This PowerShell command enables Call Data Connector for a specific site (Redmond in this example).  Monitoring records will be forwarded for users in that specific site. It requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCloudCallDataConnectorConfiguration -Identity \"site:Redmond\" -EnableCallDataConnector $True\n```\n\n----------------------------------------\n\nTITLE: Set Global Teams Upgrade Policy to UpgradeToTeams - PowerShell\nDESCRIPTION: This PowerShell command sets the global Teams upgrade policy to UpgradeToTeams, effectively making all new users Teams Only. This ensures that any new user created in the organization is created as a Teams Only user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-disabling-hybrid.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -PolicyName UpgradeToTeams -Global\n```\n\n----------------------------------------\n\nTITLE: Allow Channel Recording Download\nDESCRIPTION: This PowerShell command allows users in the organization to download channel meeting recordings and transcripts from OneDrive and SharePoint. It sets the ChannelRecordingDownload parameter to Allow for the Global policy. No specific modules need to be imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-recording.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -ChannelRecordingDownload Allow\n```\n\n----------------------------------------\n\nTITLE: Creating a Trusted Application Pool - PowerShell\nDESCRIPTION: This PowerShell command creates a new trusted application pool within the Skype for Business environment. It requires the Pool FQDN, the Registrar FQDN, and the Site ID as parameters. The application pool is necessary to host the SEFAUtil application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-the-sefautil-tool.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTrustedApplicationPool -id <Pool FQDN> -Registrar <Pool Registrar FQDN> -site Site:<Pool Site>\n```\n\n----------------------------------------\n\nTITLE: Importing Active Directory PowerShell Module\nDESCRIPTION: This PowerShell snippet imports the Active Directory module, which provides cmdlets for managing Active Directory objects.  This is a prerequisite for using Active Directory cmdlets within the PowerShell session.  The module must be installed on the system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/includes/mtr-device-config-password-include.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module ActiveDirectory\n```\n\n----------------------------------------\n\nTITLE: Set Skype for Business Web Service Authentication\nDESCRIPTION: This PowerShell command disables certificate, PIN, and Windows authentication for Skype for Business Web Services. This is necessary when Passive Authentication is enabled to ensure that it is the preferred method.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsWebServiceConfiguration -Identity \"Service:WebServer:SfBPool01.contoso.com\" -UseCertificateAuth $false -UsePinAuth $false -UseWindowsAuth NONE\n```\n\n----------------------------------------\n\nTITLE: Deleting a Test Device with Remove-CsTestDevice in PowerShell\nDESCRIPTION: This snippet removes a test device from Skype for Business using the `Remove-CsTestDevice` cmdlet.  It requires the `Identity` parameter to specify the test device to be deleted. This action permanently removes the specified device.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsTestDevice -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Set Address Book Configuration Globally - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to set the UseNormalizationRules and IgnoreGenericRules parameters to True at the global level. It's suitable for deployments containing only Skype for Business Server 2019.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-address-book.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAddressBookConfiguration -identity <XdsIdentity> -UseNormalizationRules=$true -IgnoreGenericRules=$true\n```\n\n----------------------------------------\n\nTITLE: Unlock user PIN with PowerShell in Skype for Business Server\nDESCRIPTION: This PowerShell cmdlet unlocks a user's PIN in Skype for Business Server. The -Identity parameter specifies the user whose PIN will be unlocked. Requires the Skype for Business Server Management Shell or a remote PowerShell session connected to Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/lock-or-unlock-a-user-pin.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUnlock-CsClientPin -Identity \"Ken Myer\"\n```\n\n----------------------------------------\n\nTITLE: Creating Client Version Configuration - PowerShell\nDESCRIPTION: This cmdlet creates a new client version configuration with a specific identity and enabled status.  The Identity parameter specifies the scope (e.g., site), and Enabled sets if the configuration is active.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsClientVersionConfiguration -Identity site:Redmond -Enabled $False\n```\n\n----------------------------------------\n\nTITLE: Restart Non-Front End Pool Services - PowerShell\nDESCRIPTION: This PowerShell command restarts the services on non-Front End pool servers (e.g., Edge, Mediation, Persistent Chat) after the In-Place Upgrade. This command ensures all services are correctly started after the upgrade process.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/upgrade-to-skype-for-business-server.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsWindowsService\n```\n\n----------------------------------------\n\nTITLE: Exchange Autodiscover Metadata URL\nDESCRIPTION: This is an example URL for the Exchange autodiscover service metadata document. It consists of the URI of the Exchange autodiscover service followed by the suffix /metadata/json/1.  This URL is needed when configuring Skype for Business Server as a partner application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/configure-partner-applications.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttps://autodiscover.litwareinc.com/autodiscover/metadata/json/1\n```\n\n----------------------------------------\n\nTITLE: Create Teams Calling Policy (PowerShell)\nDESCRIPTION: This cmdlet creates a new Teams calling policy. Use this to define a custom set of calling features for specific user groups within your organization. This provides granular control over calling capabilities in Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-calling-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Lock user PIN with PowerShell in Skype for Business Server\nDESCRIPTION: This PowerShell cmdlet locks a user's PIN in Skype for Business Server. The -Identity parameter specifies the user whose PIN will be locked. Requires the Skype for Business Server Management Shell or a remote PowerShell session connected to Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/lock-or-unlock-a-user-pin.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nLock-CsClientPin -Identity \"Ken Myer\"\n```\n\n----------------------------------------\n\nTITLE: Prevent Anonymous Users from Interacting with Apps in Meetings\nDESCRIPTION: This PowerShell snippet configures Teams meeting configuration to prevent anonymous participants from interacting with apps in meetings. It utilizes the `Set-CsTeamsMeetingConfiguration` cmdlet and sets the `DisableAppInteractionForAnonymousUsers` parameter to `$true`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/anonymous-users-in-meetings.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingConfiguration -Identity <policy name> -DisableAppInteractionForAnonymousUsers $true\n```\n\n----------------------------------------\n\nTITLE: Adding new policies to Get-CsOnlineUser cmdlet output\nDESCRIPTION: This snippet adds new policies namely `TeamsBYODAndDesksPolicy`, `TeamsAIPolicy`, `TeamsWorkLocationDetectionPolicy`, `TeamsMediaConnectivityPolicy`, `TeamsMeetingTemplatePermissionPolicy`, `TeamsVirtualAppointmentsPolicy`, `TeamsWorkLoadPolicy` to `Get-CsOnlineUser` cmdlet output. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Get Dial-in Conferencing Access Number in Skype for Business\nDESCRIPTION: Searches for dial plans with unused dial-in conferencing regions or access numbers with no region assigned. Used to verify dial-in conferencing settings. No specific input required and returns CsDialInConferencingAccessNumber objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Assign Line URI to User via PowerShell\nDESCRIPTION: This refers to using a script with the Set-CsUser cmdlet to assign a Line URI to multiple users.  It links to external documentation for further information. The Line URI is required for dial-in users to authenticate.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/dial-in-conferencing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUser\n```\n\n----------------------------------------\n\nTITLE: Install Teams via MSI (Default - AppData)\nDESCRIPTION: This command installs the Teams MSI package to the user's %AppData% folder. This is the default installation method. It requires the path to the MSI file and creates an install log.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmsiexec /i <path_to_msi> /l*v <install_logfile_name> ALLUSERS=1\n```\n\n----------------------------------------\n\nTITLE: Set CVI Service Provider\nDESCRIPTION: This PowerShell cmdlet updates information about a supported CVI partner that your organization uses.  It modifies the existing video interop service provider configuration. It needs the identifier for the provider to be updated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cloud-video-interop.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsVideoInteropServiceProvider\n```\n\n----------------------------------------\n\nTITLE: Adding a single domain to the trusted domain list - Shell\nDESCRIPTION: This code snippet demonstrates how to add a single domain (Contoso.com) to the trusted domain list in the Skype for Business on Mac client preferences. It uses the `defaults write` command to modify the `com.microsoft.SkypeForBusiness` preferences.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/customize-the-mac-client-experience.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndefaults write com.microsoft.SkypeForBusiness trustedDomainList -array-add \"Contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Turn off VbSS completely - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet completely disables Video-Based Screen Sharing (VbSS) by setting the EnableVideoBasedSharing parameter to $false in the media configuration. This command needs to be executed in the Skype for Business Management Console.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/video-based-screen-sharing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsMediaConfiguration -EnableVideoBasedSharing $false\n```\n\n----------------------------------------\n\nTITLE: Grant Caller ID Policy to User - PowerShell\nDESCRIPTION: This PowerShell snippet grants the 'Anonymous' caller ID policy to a specific user, 'amos.marble@contoso.com'. This assigns the specified caller ID policy to the user, overriding the global policy or any other policies previously assigned to them.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/caller-id-policies.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsCallingLineIdentity -Identity \"amos.marble@contoso.com\" -PolicyName \"Anonymous\"\n```\n\n----------------------------------------\n\nTITLE: Updating Enterprise Edition Databases - No Collocated DBs - PowerShell\nDESCRIPTION: This PowerShell command updates the SQL Server databases for an Enterprise Edition Back End Server when there are no collocated databases (Archiving, Monitoring).  `SQL Server FQDN` is required as a parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/patch-or-update-a-back-end-or-standard-edition-server.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-CsDatabase -Update -ConfiguredDatabases -SqlServerFqdn <SQL Server FQDN>\n```\n\n----------------------------------------\n\nTITLE: Get Meeting Configuration Settings using PowerShell\nDESCRIPTION: This PowerShell command retrieves information about all meeting configuration settings in Skype for Business Server. It uses the Get-CsMeetingConfiguration cmdlet to display various properties such as PstnCallersBypassLobby, EnableAssignedConferenceType, and AllowConferenceRecording.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/view-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMeetingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Allow Everyone to Bypass Lobby (PowerShell)\nDESCRIPTION: This PowerShell snippet allows everyone to bypass the lobby. It uses the `Set-CsTeamsEventsPolicy` cmdlet with the `-AutoAdmittedUsers` parameter set to `Everyone`. Replace `<policy name>` with the actual policy name.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AutoAdmittedUsers Everyone \n```\n\n----------------------------------------\n\nTITLE: Enable Client Media Port Range for All Configurations - PowerShell\nDESCRIPTION: This command enables client media port ranges for all conferencing configuration settings. It retrieves all conferencing configurations and then applies the change to enable the client media port range for each one.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-skype-clients.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferencingConfiguration | Set-CsConferencingConfiguration  -ClientMediaPortRangeEnabled $True\n```\n\n----------------------------------------\n\nTITLE: Getting PIN Policy Details in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet retrieves details for a specific PIN policy in Skype for Business based on the provided Identity. The Identity parameter specifies the scope of the PIN policy to retrieve. The output shows all settings for the specified PIN policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsPinPolicy -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Group Call Pickup and Assigning Number - SEFAUtil\nDESCRIPTION: The `/enablegrouppickup` parameter in the SEFAUtil resource kit tool is employed to enable Group Call Pickup for specific users and to assign a call pickup number to each user.  This allows users to retrieve calls from others.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-group-call-pickup.md#_snippet_4\n\nLANGUAGE: SEFAUtil\nCODE:\n```\n/enablegrouppickup\n```\n\n----------------------------------------\n\nTITLE: Checking Teams Calling Policy\nDESCRIPTION: This PowerShell command retrieves the Teams Calling Policy for a specified user and verifies that the AllowPrivateCalling attribute is set to True. It checks if a specific policy is assigned to the user, and if not, retrieves the Global policy. $user variable must be defined as the UPN or SIP address of the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/dial-pad-configuration.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nif (($p=Get-CsUserPolicyAssignment -Identity $user -PolicyType TeamsCallingPolicy) -eq $null) {Get-CsTeamsCallingPolicy -Identity Global} else {Get-CsTeamsCallingPolicy -Identity $p.PolicyName}\n```\n\n----------------------------------------\n\nTITLE: Assign Conferencing Policy to OU (PowerShell)\nDESCRIPTION: This PowerShell snippet assigns a conferencing policy to all users within a specific Organizational Unit (OU). It uses the Get-CsUser cmdlet to retrieve all users in the OU and pipes the results to the Grant-CsConferencingPolicy cmdlet, which then applies the policy to each user. This requires the Skype for Business Server Management Shell and assumes the OU path is valid.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/assign-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -OU \"ou=Finance,dc=litwareinc,dc=com\" | Grant-CsConferencingPolicy -PolicyName FinanceConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Creating an Extended Test for PSTN - PowerShell\nDESCRIPTION: This code snippet demonstrates how to create an extended test for PSTN connectivity using the New-CsExtendedTest cmdlet. It specifies the TestUsers, Name, and TestType. The result is stored in a variable for later use.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/test-users-and-settings-2019.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$pstnTest = New-CsExtendedTest -TestUsers \"sip:watcher1@litwareinc.com\", \"sip:watcher2@litwareinc.com\", \"sip:watcher3@litwareinc.com\"  -Name \"Contoso Provider Test\" -TestType PSTN\n```\n\n----------------------------------------\n\nTITLE: Configure Exchange as Partner Application\nDESCRIPTION: This PowerShell command configures Exchange Server as a partner application in Skype for Business Server. It uses the New-CsPartnerApplication cmdlet and requires the Exchange authentication metadata URL.  The ApplicationTrustLevel is set to Full.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/configure-partner-applications.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsPartnerApplication -Identity Exchange -ApplicationTrustLevel Full -MetadataUrl \"https://autodiscover.litwareinc.com/autodiscover/metadata/json/1\"\n```\n\n----------------------------------------\n\nTITLE: Modifying SIP Address in Active Directory\nDESCRIPTION: Describes the process of modifying a user's SIP address by modifying the `msRTCSIP-PrimaryUserAddress` attribute using Active Directory tools.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configure GeoDNS Addresses for External Meet Simple URL\nDESCRIPTION: This snippet shows an example of how to configure a GeoDNS address for external access to the Meet simple URL. It maps the Meet-ext.geolb.contoso.com address to the external web FQDNs of two Front End pools (Pool1 and Pool2) to provide redundancy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/network-requirements/simple-urls.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nMeet-ext.geolb.contoso.com\n     Pool1ExternalWebFQDN.contoso.com\n     Pool2ExternalWebFQDN.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Syncing RGS Filestore on Backup Pool - PowerShell\nDESCRIPTION: This command synchronizes the full RGS filestore on the backup pool. Replace `<Pool1 FQDN>` with the FQDN of the pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-CsBackupServiceSync -PoolFqdn <Pool1 FQDN> -BackupModule ApplicationServer.RGSFileStore\n```\n\n----------------------------------------\n\nTITLE: Get CsOnlineUser using PowerShell\nDESCRIPTION: This cmdlet retrieves information about online users. It now includes the AccountType parameter which allows for filtering based on the user type, such as user accounts, resource accounts, guest accounts, or unknown.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_106\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Managing PIN Policy via PowerShell\nDESCRIPTION: This section covers the management of PIN policy settings using the Skype for Business Server Management Shell. It prompts users to search for cmdlets beginning with `-CsPinPolicy` to configure PIN requirements for dial-in access.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nsearch for the **-CsPinPolicy** cmdlets\n```\n\n----------------------------------------\n\nTITLE: Get Skype for Business Web Service Authentication\nDESCRIPTION: This PowerShell command retrieves the web service configuration and displays the UseCertificateAuth, UsePinAuth, and UseWindowsAuth values to verify that other authentication methods are disabled.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWebServiceConfiguration -Identity \"Service:WebServer:SfBPool01.contoso.com\" | format-list UseCertificateAuth, UsePinAuth, UseWindowsAuth\n```\n\n----------------------------------------\n\nTITLE: Install Central Management Server Service - Skype for Business Console\nDESCRIPTION: This console command installs the Central Management Server service using the Bootstrapper application.  This is needed for each Front End Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nBootstrapper /Setup\n```\n\n----------------------------------------\n\nTITLE: Get Dial-In Conferencing Configuration - PowerShell\nDESCRIPTION: Retrieves information about how Skype for Business Server responds when users join or leave a dial-in conference. The cmdlet returns dial-in conferencing configuration objects with details about the settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Remove Archiving Configuration for a Site (PowerShell)\nDESCRIPTION: This PowerShell command removes the archiving configuration settings specifically applied to the Redmond site. After deletion, users previously managed by this site policy will be governed by the global archiving policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/delete-a-configuration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsArchivingConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Get Operations Manager Agents using PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of all Operations Manager agents. It requires the System Center Operations Manager 2012 shell to be open and connected to the management group. The output is a list of the discovered agents.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/configure-computers-to-monitor-2019.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SCOMAgent\n```\n\n----------------------------------------\n\nTITLE: Get Network InterSite Policy Cmdlet - PowerShell\nDESCRIPTION: This cmdlet retrieves network inter-site policies in Skype for Business Server.  It can be used to view the current configuration of bandwidth allocation between network sites.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsNetworkInterSitePolicy\n```\n\n----------------------------------------\n\nTITLE: Getting Online User Voice Routing Policy with PowerShell\nDESCRIPTION: This snippet retrieves the voice routing policy assigned to a user using the `Get-CsOnlineUser` cmdlet and selects the `OnlineVoiceRoutingPolicy` property. This verifies that the policy was successfully assigned to the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-voice-routing.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser \"user1@contoso.com\" | select OnlineVoiceRoutingPolicy\n```\n\n----------------------------------------\n\nTITLE: Enable User for Cloud Voicemail - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables or disables a user account for Cloud Voicemail by setting the HostedVoiceMail parameter. A Cloud Voicemail policy must be assigned at the global, site, or user level for the command to succeed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-cloud-voicemail.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUser -Identity \"User1\" -HostedVoiceMail $True\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUser -Identity \"User1\" -HostedVoiceMail $False\n```\n\n----------------------------------------\n\nTITLE: Executing the PowerShell Script - PowerShell\nDESCRIPTION: This command shows how to execute the ServerToServerAuth.ps1 PowerShell script from within the Skype for Business Server Management Shell. Replace 'C:\\Scripts\\ServerToServerAuth.ps1' with the actual path to your script file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-an-on-premises-partner-app.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\Scripts\\ServerToServerAuth.ps1\n```\n\n----------------------------------------\n\nTITLE: Viewing all SIP trunk configurations via PowerShell\nDESCRIPTION: This PowerShell command retrieves information about all SIP trunk configuration settings in Skype for Business Server. It utilizes the `Get-CsTrunkConfiguration` cmdlet without any specific filters, returning all available configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/voice-routing/view-trunk-configuration-information.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrunkConfiguration\n```\n\n----------------------------------------\n\nTITLE: Assign Teams Calling Policy (PowerShell)\nDESCRIPTION: This cmdlet assigns a Teams calling policy to a user or group of users. This allows you to customize calling features based on roles, departments, or other criteria. Proper assignment is crucial for implementing intended calling behaviors.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-calling-policy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Remove Meeting Configuration - PowerShell\nDESCRIPTION: Deletes an existing collection of meeting configuration settings from Skype for Business Server. This action requires identifying the configuration to be removed. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsMeetingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Voice Enable User via PowerShell using Set-CsPhoneNumberAssignment\nDESCRIPTION: This snippet demonstrates how to enable a user for Enterprise Voice using the Set-CsPhoneNumberAssignment cmdlet in PowerShell. It sets the `-EnterpriseVoiceEnabled` parameter to `$true` to enable voice for the specified user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/setting-up-your-phone-system.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment](/powershell/module/teams/set-csphonenumberassignment) cmdlet and set the `-EnterpriseVoiceEnabled` parameter to `$true`.\n```\n\n----------------------------------------\n\nTITLE: Granting Policy to Prevent Unified Contact Store Use - PowerShell\nDESCRIPTION: This PowerShell command assigns the `NoUnifiedContactStore` user services policy to the user `Ken Myer`. This prevents Ken's contacts from being migrated to the unified contact store.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-the-unified-contact-store.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsUserServicesPolicy -Identity \"Ken Myer\" -PolicyName NoUnifiedContactStore\n```\n\n----------------------------------------\n\nTITLE: Retrieving Site Name - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the name of the site using the `Get-CsSite` cmdlet. The Identity value returned from this command is used in subsequent commands to configure the site's voice policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsSite\n```\n\n----------------------------------------\n\nTITLE: Setting Meeting Chat Policy - InMeetingOnlyForAllExceptAnonymous - PowerShell\nDESCRIPTION: This PowerShell script configures the Teams meeting policy to restrict chat to the meeting duration and to exclude anonymous users. The `Set-CsTeamsMeetingPolicy` cmdlet is called with `-MeetingChatEnabledType` set to `EnabledInMeetingOnlyForAllExceptAnonymous`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-meeting-chat.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -MeetingChatEnabledType EnabledInMeetingOnlyForAllExceptAnonymous\n```\n\n----------------------------------------\n\nTITLE: Listing Device Update Configurations with Get-CsDeviceUpdateConfiguration in PowerShell\nDESCRIPTION: This snippet retrieves a list of all device update configurations in Skype for Business using the `Get-CsDeviceUpdateConfiguration` cmdlet. No parameters are required. It returns a list of device update configurations and their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsDeviceUpdateConfiguration\n```\n\n----------------------------------------\n\nTITLE: Create a New File Transfer Filter using New-CsFileTransferFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet creates a new file transfer filter configuration for a specified site in Skype for Business Server.  The `-Identity` parameter specifies the site where the filter is applied.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n New-CsFileTransferFilterConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Removing a Voice Normalization Rule - PowerShell\nDESCRIPTION: This PowerShell cmdlet removes a voice normalization rule. This is often required to override default rules that can interfere with VIS and CUCM interactions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-video-interop-server/configure-the-vis.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsVoiceNormalizationRule -Identity  \"Service:VideoGateway:CUCMVIS1.CUCMInterop.contoso.com/Keep All\"\n```\n\n----------------------------------------\n\nTITLE: Assign External Access Policy to Single User - PowerShell\nDESCRIPTION: This PowerShell command assigns a specific external access policy to a single user. It utilizes the `Grant-CsExternalAccessPolicy` cmdlet, targeting a user identified by their Identity and assigning the policy specified by PolicyName.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/assign-an-external-user-access-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsExternalAccessPolicy -Identity \"Ken Myer\" -PolicyName \"RedmondExternalAccessPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Remove All Archiving Configurations for all Sites (PowerShell)\nDESCRIPTION: This PowerShell command retrieves all archiving configuration settings applied to any site and then removes them.  This effectively reverts the configuration to the global settings for each site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/delete-a-configuration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsArchivingConfiguration -Filter \"site:*\" | Remove-CsArchivingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Defining Central Store Path for ADMX Files\nDESCRIPTION: This code defines the path for storing language-neutral ADMX files within the central store on a domain controller. This is used to manage Group Policies across multiple computers in a domain.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-client-bootstrapping-policies.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n%systemroot%\\sysvol\\domain\\policies\\PolicyDefinitions\n```\n\n----------------------------------------\n\nTITLE: Uninstall Teams Machine-Wide\nDESCRIPTION: This command uninstalls Teams machine-wide using the teamsbootstrapper.exe.  The `-x` flag specifies the uninstall action, and the `-m` flag indicates a machine-wide uninstall. This command should be executed from the directory where teamsbootstrapper.exe is located.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-uninstall.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nteamsbootstrapper.exe -x -m\n```\n\n----------------------------------------\n\nTITLE: Creating a Voice Normalization Rule - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new voice normalization rule to translate numbers within a dial plan. This example translates 7-digit numbers to E.164 format.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-video-interop-server/configure-the-vis.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsVoiceNormalizationRule -Identity \"Service:VideoGateway:CUCMVIS1.CUCMInterop.contoso.com/SevenDigitRule\" -Pattern '^(\\d{7})$' -Translation '+1425$1'\n```\n\n----------------------------------------\n\nTITLE: Add AD FS Relying Party Trust\nDESCRIPTION: This PowerShell command adds a relying party trust for Skype for Business Server to AD FS. The MetadataURL parameter specifies the location of the federation metadata file for the Skype for Business Server pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-ADFSRelyingPartyTrust -Name SfBPool01-PassiveAuth -MetadataURL https://SfBpool01.contoso.com/passiveauth/federationmetadata/2007-06/federationmetadata.xml\n```\n\n----------------------------------------\n\nTITLE: Getting Recording Content with HTTP GET\nDESCRIPTION: This HTTP GET request retrieves the actual recording content of a meeting. It requires the userId, meetingId, and recordingId. The response will contain the content of the recording in MP4 format.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nGET users('{userId}')/onlineMeetings('{meetingId}')/recordings('{recordingId}')/content \n```\n\n----------------------------------------\n\nTITLE: List manager using Microsoft Graph API\nDESCRIPTION: Retrieves the manager of a user using the Microsoft Graph API. This is helpful for understanding reporting structures. Dependencies: Microsoft Graph API, a valid user ID. Output: the user's manager.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\n[List manager](/graph/api/user-list-manager)\n```\n\n----------------------------------------\n\nTITLE: Allow Anonymous Users to Interact with Apps in Meetings\nDESCRIPTION: This PowerShell snippet configures Teams meeting configuration to allow anonymous participants to interact with apps in meetings. It utilizes the `Set-CsTeamsMeetingConfiguration` cmdlet and sets the `DisableAppInteractionForAnonymousUsers` parameter to `$false`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/anonymous-users-in-meetings.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingConfiguration -Identity <policy name> -DisableAppInteractionForAnonymousUsers $false\n```\n\n----------------------------------------\n\nTITLE: Creating PIN Policies in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet creates a new PIN policy in Skype for Business. It requires specifying an Identity and allows configuring settings like MinPasswordLength. The example creates a new PIN policy for the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n New-CsPinPolicy -Identity \"site:Redmond\" -MinPasswordLength 10\n```\n\n----------------------------------------\n\nTITLE: Managing Conferencing Policy via PowerShell\nDESCRIPTION: This section describes how to manage conferencing policy settings using Skype for Business Server Management Shell. It guides users to search for cmdlets with the `-CsConferencingPolicy` prefix to configure various conferencing policy parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nsearch for the **-CsConferencingPolicy** cmdlets\n```\n\n----------------------------------------\n\nTITLE: Reading managed configuration values in Android (Kotlin)\nDESCRIPTION: This snippet shows how to read the 'domain_name' value from the managed app configuration in Android using appRestrictions. It retrieves the string value associated with the 'domain_name' key from the app restrictions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/sign-in-teams.md#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nappRestrictions.getString(\"domain_name\")\n```\n\n----------------------------------------\n\nTITLE: Enable Archiving Disclaimer using PowerShell\nDESCRIPTION: This PowerShell command enables the archiving disclaimer in Skype for Business Server. It sets the EnableArchivingDisclaimer property of the CsAccessEdgeConfiguration to $True. This will automatically send an archiving disclaimer to federated partners.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-archiving/configure-archiving-disclaimers.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -EnableArchivingDisclaimer $True\n```\n\n----------------------------------------\n\nTITLE: Remove Network Roaming Policy from Network Site (Teams)\nDESCRIPTION: This PowerShell command removes the network roaming policy from the network site identified as 'Burlington'.  It sets the NetworkRoamingPolicy parameter to '$null' using the Set-CsTenantNetworkSite cmdlet, effectively disassociating any policy from that location.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/network-roaming-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsTenantNetworkSite -Identity Burlington -NetworkRoamingPolicy $null\n```\n\n----------------------------------------\n\nTITLE: Setting AutoAdmittedUsers to OrganizerAndCoOrganizersOnly - PowerShell\nDESCRIPTION: This PowerShell snippet configures the `AutoAdmittedUsers` parameter of a Teams Events Policy to `OrganizerAndCoOrganizersOnly`. This setting ensures that only organizers and co-organizers can bypass the meeting lobby.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AutoAdmittedUsers OrganizerAndCoOrganizersOnly\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Graph PowerShell Module\nDESCRIPTION: This PowerShell command installs the Microsoft Graph module. The -Force parameter overwrites any existing versions of the module, and the -AllowClobber parameter allows the command to overwrite existing files if necessary.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name Microsoft.Graph -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Test-CsTeamsShiftsConnectionValidate Cmdlet\nDESCRIPTION: This snippet notes the release of the `Test-CsTeamsShiftsConnectionValidate` cmdlet. This cmdlet allows administrators to validate the Teams Shifts connector configuration, ensuring that the connection between Teams Shifts and the external system is properly configured and functioning correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_153\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsTeamsShiftsConnectionValidate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Region Link Details using Get-CsNetworkRegionLink in PowerShell\nDESCRIPTION: This cmdlet retrieves the details of a specific network region link in Skype for Business. It requires the Identity parameter to specify the region link to retrieve.  It returns the detailed configuration of the requested region link.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_29\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsNetworkRegionLink -Identity NA_EMEA\n```\n\n----------------------------------------\n\nTITLE: Defining Network Regions with PowerShell\nDESCRIPTION: This PowerShell command creates a new network region. The `NetworkRegionID` parameter specifies the unique identifier for the region. The `CentralSite` parameter is optional and specifies a central site within the region.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-your-network-topology.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTenantNetworkRegion -NetworkRegionID <region ID>  \n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTenantNetworkRegion -NetworkRegionID \"India\"  \n```\n\n----------------------------------------\n\nTITLE: Create SIP Gateway Service Principal - Azure AD Module - PowerShell\nDESCRIPTION: This snippet creates a new SIP Gateway service principal using the Azure AD module. It uses the AppId of the SIP Gateway. It requires the AzureAD module to be installed and imported.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-AzureADServicePrincipal -AppId \"582b2e88-6cca-4418-83d2-2451801e1d26\"\n```\n\n----------------------------------------\n\nTITLE: Enable Exchange Archiving using PowerShell\nDESCRIPTION: This PowerShell command enables the archiving of instant messaging transcripts and also enables Exchange archiving. The archiving configuration is modified to archive instant messages only and to archive them to Exchange Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/use-exchange-archiving.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingConfiguration -Identity \"global\" -EnableArchiving ImOnly -EnableExchangeArchiving $True\n```\n\n----------------------------------------\n\nTITLE: Restarting World Wide Web Service - PowerShell\nDESCRIPTION: This PowerShell command restarts the World Wide Web Publishing Service (w3svc) after applying updates. This brings the web components of Skype for Business Server back online. It is executed via the `net start` command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/patch-or-update-a-back-end-or-standard-edition-server.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nnet start w3svc\n```\n\n----------------------------------------\n\nTITLE: Remove PIN Policies at the Site Scope - PowerShell\nDESCRIPTION: This PowerShell command removes all PIN policies configured at the site scope. It uses Get-CsPinPolicy to retrieve all policies with a site scope and then pipes them to Remove-CsPinPolicy for deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/delete-a-pin-policy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy -Filter \"site:*\" | Remove-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Managing Privacy Configuration - PowerShell\nDESCRIPTION: This snippet shows a new implementation of `[Get|Set]-CsPrivacyConfiguration`, `[Get|Set|Remove|New]-CsTeamsNotificationAndFeedsPolicy`. The functionality remains the same, but the underlying implementation has changed within the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_43\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsPrivacyConfiguration\n[Get|Set|Remove|New]-CsTeamsNotificationAndFeedsPolicy\n```\n\n----------------------------------------\n\nTITLE: Disable External Meeting Chat - PowerShell\nDESCRIPTION: This PowerShell script disables chat in Teams meetings hosted by external organizations for users with the specified policy. It utilizes the `Set-CsTeamsMeetingPolicy` cmdlet with the `-AllowExternalNonTrustedMeetingChat` parameter set to `$False`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-meeting-chat.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowExternalNonTrustedMeetingChat $False\n```\n\n----------------------------------------\n\nTITLE: Adding TargetType parameter to Get-CsOnlineTelephoneNumberOrder cmdlet\nDESCRIPTION: This snippet adds an optional parameter `TargetType` to the `Get-CsOnlineTelephoneNumberOrder` cmdlet. This parameter likely specifies the target type for the telephone number order. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineTelephoneNumberOrder\n```\n\n----------------------------------------\n\nTITLE: Allow Invite-Only Town Hall Recording Publishing via PowerShell\nDESCRIPTION: This PowerShell script configures the `CsTeamsEventsPolicy` to allow organizers to publish only invite-only town hall recordings. It uses the `-AllowedTownhallTypesForRecordingPublish` parameter set to `InviteOnly`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-vod-publishing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowedTownhallTypesForRecordingPublish InviteOnly\n```\n\n----------------------------------------\n\nTITLE: Rolling Certificate for OAuthTokenIssuer - PowerShell\nDESCRIPTION: This PowerShell command retrieves the thumbprint of the default certificate and configures it to become the current OAuthTokenIssuer certificate at a specified date. This allows for certificate rotation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/assign-a-server-to-server-certificate.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x = (Get-CsCertificate -Type Default).Thumbprint\nSet-CsCertificate -Identity global -Type OAuthTokenIssuer -Thumbprint $x -EffectiveDate \"7/1/2015\" -Roll\n```\n\n----------------------------------------\n\nTITLE: Get All Recordings via Microsoft Graph API\nDESCRIPTION: Retrieves all meeting recordings using the Microsoft Graph API. This API is currently in beta. Requires authentication and meeting ID. Output is the list of all recordings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_23\n\nLANGUAGE: HTTP\nCODE:\n```\n[onlineMeeting: getAllRecordings](/graph/api/onlinemeeting-getallrecordings).\n```\n\n----------------------------------------\n\nTITLE: Remove Teams Calling Policy (PowerShell)\nDESCRIPTION: This cmdlet removes a Teams calling policy. Removing a custom policy will revert users assigned to it back to the global policy or another assigned policy. Exercise caution when removing policies as this can affect user calling experiences.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-calling-policy.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams with AccountId (2.3.1, 2.2.0-preview)\nDESCRIPTION: Fixes for integrated Windows authentication when using -AccountId with Connect-MicrosoftTeams have been introduced. This allows users to specify the account ID during the connection process.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_156\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams -AccountId <account_id>\n```\n\n----------------------------------------\n\nTITLE: Remove Teams Files Policy for Tenant - PowerShell\nDESCRIPTION: This PowerShell command removes the Teams Files policy for all users in the tenant, reverting to the default behavior. Use with caution, as it affects all users. Requires the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/turn-off-teams-native-file-upload-policy.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTeamsFilesPolicy -Identity Global\n```\n\n----------------------------------------\n\nTITLE: Disable/Enable Audio Conferencing Emails using PowerShell\nDESCRIPTION: This PowerShell command allows administrators to enable or disable the automatic sending of emails to users when their audio conferencing settings change. It modifies the tenant-wide settings for dial-in conferencing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/enable-or-disable-sending-emails-when-their-settings-change-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingTenantSettings -AutomaticallySendEmailsToUsers $true|$false\n```\n\n----------------------------------------\n\nTITLE: Disable Federation and Public IM Connectivity in PowerShell\nDESCRIPTION: This PowerShell cmdlet disables federation and public IM connectivity by setting the AllowFederatedUsers property of the CsAccessEdgeConfiguration to False. It requires the Skype for Business Server Management Shell or a remote PowerShell session with appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-federation-and-public-im-connectivity.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -AllowFederatedUsers $False\n```\n\n----------------------------------------\n\nTITLE: Enable Media Bypass on Trunk via PowerShell\nDESCRIPTION: This command enables media bypass on a specific trunk by setting the MediaBypass property to $true. Replace <sbc_FQDN> with the fully qualified domain name of the Session Border Controller.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-configure-media-bypass.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CSOnlinePSTNGateway -Identity <sbc_FQDN> -MediaBypass $true\n```\n\n----------------------------------------\n\nTITLE: Setting AutoAdmittedUsers to OrganizerOnly - PowerShell\nDESCRIPTION: This PowerShell snippet configures the `AutoAdmittedUsers` parameter of a Teams Events Policy to `OrganizerOnly`. This setting ensures that only the organizer and co-organizers can bypass the meeting lobby.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/who-can-bypass-meeting-lobby.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AutoAdmittedUsers OrganizerOnly\n```\n\n----------------------------------------\n\nTITLE: Verify Central Management Server Failover - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet validates that the Central Management Server failover is complete by checking that ActiveMasterFQDN and ActiveFileTransferAgents are pointing to the FQDN of the Backup Pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsManagementStoreReplicationStatus -CentralManagementStoreStatus\n```\n\n----------------------------------------\n\nTITLE: Assigning a Voice Routing Policy to a User - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign an existing voice routing policy to a specific user. The Identity parameter specifies the user's ID, and PolicyName indicates the name of the voice routing policy to assign.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/skype-for-business-hybrid-solutions/plan-your-phone-system-cloud-pbx-solution/assign-a-voice-routing-policy.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsVoiceRoutingPolicy -Identity <UserIdParameter> -PolicyName <String>\n```\n\n----------------------------------------\n\nTITLE: Get Details of a URL Filter using Get-CsImFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves details of a specific URL filter configuration in Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the filter to retrieve.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsImFilterConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Move Specific Conference Directory - PowerShell\nDESCRIPTION: This command provides a concrete example of moving a conference directory. It moves the conference directory with the ID 3 to the pool pool02.contoso.net. This illustrates the practical application of the `Move-CsConferenceDirectory` command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-conference-directories.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsConferenceDirectory -Identity 3 -TargetPool \"pool02.contoso.net\"\n```\n\n----------------------------------------\n\nTITLE: Fixing AllowedTrialTenantDomains parameter data type\nDESCRIPTION: This snippet fixes the data type for the `AllowedTrialTenantDomains` parameter in the `Set-CsTenantFederationConfiguration` cmdlet.  This is a bug fix related to tenant federation settings. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantFederationConfiguration\n```\n\n----------------------------------------\n\nTITLE: Import Skype for Business Cmdlets in PowerShell\nDESCRIPTION: This command imports the Skype for Business Server cmdlets into a standard Windows PowerShell session.  This is necessary to execute Skype for Business cmdlets if the Skype for Business Server Management Shell is not used. Requires the Skype for Business Server administrative tools to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/install-and-open-administrative-tools.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module Lync\n```\n\n----------------------------------------\n\nTITLE: Create AD FS Issuance Authorization Rule\nDESCRIPTION: This PowerShell command creates an issuance authorization rule that allows all authorized users. The IssuanceAuthorizationRules variable defines the rule template to permit all users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$IssuanceAuthorizationRules = '@RuleTemplate = \"AllowAllAuthzRule\" => issue(Type = \"https://schemas.microsoft.com/authorization/claims/permit\", Value = \"true\");'\n```\n\n----------------------------------------\n\nTITLE: Listing Bandwidth Policies with Get-CsNetworkBandwidthPolicyProfile (PowerShell)\nDESCRIPTION: This snippet retrieves and lists all existing bandwidth policy profiles in Skype for Business Server. These profiles define bandwidth limitations for audio and video modalities. No specific parameters are required. It outputs a list of bandwidth policy profile objects.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsNetworkBandwidthPolicyProfile\n```\n\n----------------------------------------\n\nTITLE: Disable Face Enrollment for Specific User - PowerShell\nDESCRIPTION: This PowerShell command disables face enrollment for a specific user by setting the `EnrollFace` parameter to `Disabled` in the `CsTeamsAIPolicy`. You must specify the `-Identity` and `-PolicyName` of the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/voice-and-face-recognition.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsAIPolicy -Identity -PolicyName -EnrollFace Disabled \n```\n\n----------------------------------------\n\nTITLE: Retrieving Slack Files with PowerShell\nDESCRIPTION: This PowerShell script retrieves files from a Slack export, creates corresponding folders in the target directory, and downloads the files. It processes channel information from JSON files, extracts file URLs, and downloads the files using the provided URLs. The script includes error handling for download failures and handles duplicate file names.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/migrate-slack-to-teams.md#_snippet_1\n\nLANGUAGE: azurepowershell\nCODE:\n```\n$ExportPath = \".\\slackHistory\"\n$ExportContents = Get-ChildItem -path $ExportPath -Recurse\nFunction Get-TimeStamp {\n    return \"[{0:MM/dd/yy} {0:HH:mm:ss}]\" -f (Get-Date)\n}\n\nclass File {\n    [string] $Name\n    [string] $Title\n    [string] $Channel\n    [string] $DownloadURL\n    [string] $MimeType\n    [double] $Size\n    [string] $ParentPath\n    [string] $Time\n}\n\n$channelList = Get-Content -Raw -Path .\\slackHistory\\channels.json | ConvertFrom-Json\n$Files = New-Object -TypeName System.Collections.ObjectModel.Collection[\"File\"]\n\nWrite-Host -ForegroundColor Green \"$(Get-TimeStamp) Starting Step 1 (processing channel export for files) of 2. Total Channel Count: $($channelList.Count)\"\n#Iterate through each Channel listed in the Archive\nforeach ($channel in $channelList) {\n    #Iterate through Channel folders from the Export\n    foreach ($folder in $ExportContents)\n    {\n        #If Channel Name matches..\n        if ($channel.name -eq $folder){\n            $channelJsons = Get-ChildItem -Path $folder.FullName -File\n            Write-Host -ForegroundColor White \"$(Get-TimeStamp) Info: Starting to process $($channelJsons.Count) days of content for #$($channel.name).\"\n            #Start processing the daily JSON for files\n            foreach ($json in $channelJsons){\n                $currentJson = Get-Content -Raw -Path $json.FullName | ConvertFrom-Json\n                #Write-Host -ForegroundColor Yellow \"$(Get-TimeStamp) Info: Processing $($json.Name) in #$($channel.name)..\"\n                #Iterate through every action\n                foreach ($entry in $currentJson){\n                    #If the action contained file(s)..\n                    if($null -ne $entry.files){\n                        #Iterate through each file and add it to the List of Files to download\n                        foreach ($item in $entry.Files) {\n                        $file = New-Object -TypeName File\n                            if ($null -ne $item.url_private_download){\n                                $file.Name = $item.name\n                                $file.Title = $item.Title\n                                $file.Channel = $channel.name\n                                $file.DownloadURL = $item.url_private_download\n                                $file.MimeType = $item.mimetype\n                                $file.Size = $item.size\n                                $file.ParentPath = $folder.FullName\n                                $file.Time = $item.created\n                                $files.Add($file)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nWrite-Host -ForegroundColor Green \"$(Get-TimeStamp) Step 1 of 2 complete. `n\"\n\nWrite-Host -ForegroundColor Green \"$(Get-TimeStamp) Starting step 2 (creating folders and downloading files) of 2.\"\n#Determine which Files folders need to be created\n$FoldersToMake = New-Object System.Collections.ObjectModel.Collection[\"string\"]\nforeach ($file in $files){\n    if ($FoldersToMake -notcontains $file.Channel){\n        $FoldersToMake.Add($file.Channel)\n    }\n}\n\n#Create Folders\nforeach ($folder in $FoldersToMake){\n    #$fullFolderPath = $file.ParentPath + \"\\Files\"\n    $fullFolderPath = $ExportPath +\"\\$($folder)\"\n    $fullFilesPath = $ExportPath +\"\\$($folder)\\Files\"\n    if (-not (Test-Path $fullFilesPath)){\n        New-Item -Path $fullFolderPath  -Name \"Files\" -ItemType \"directory\"\n    }\n}\n\n#Downloading Files\nforeach ($file in $files)\n{\n    Write-Host -ForegroundColor Yellow \"$(Get-TimeStamp) Downloading $($file.Name).\"\n    $fullFilePath = $file.ParentPath + \"\\Files\\\" + $file.Name\n        if (-not (Test-Path $fullFilePath)){\n            try{\n                $request = (New-Object System.Net.WebClient).DownloadFile($file.DownloadURL, $fullFilePath)\n            }\n            catch [System.Net.WebException]{\n                Write-Host -ForegroundColor Red \"$(Get-TimeStamp) Error: Unable to download $($file.Name) to $($fullFilePath)\"\n            }   \n        }\n        else {\n            try{\n                $extensionPosition = $file.name.LastIndexOf('.')\n                $splitFileName = $file.name.Substring(0,$extensionPosition)\n                $splitFileExtention = $file.name.Substring($extensionPosition)\n                $newFileName = $splitFileName + $file.Time + $splitFileExtention\n                $fullFilePath = $file.ParentPath + \"\\Files\\\" + $newFileName\n                $request = (New-Object System.Net.WebClient).DownloadFile($file.DownloadURL, $fullFilePath)\n            }\n            catch [System.Net.WebException]{\n                Write-Host -ForegroundColor Red \"$(Get-TimeStamp) Error: Unable to download $($file.Name) to $($fullFilePath)\"\n            }   \n        }\n}\nWrite-Host -ForegroundColor Green \"$(Get-TimeStamp) Step 2 of 2 complete. `n\"\nWrite-Host -ForegroundColor Green \"$(Get-TimeStamp) Exiting..\"\n\n```\n\n----------------------------------------\n\nTITLE: Enable Voice Enrollment for Specific User - PowerShell\nDESCRIPTION: This PowerShell command enables voice enrollment for a specific user by setting the `EnrollVoice` parameter to `Enabled` in the `CsTeamsAIPolicy`.  You must specify the `-Identity` and `-PolicyName` of the user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/voice-and-face-recognition.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsAIPolicy -Identity -PolicyName -EnrollVoice Enabled\n```\n\n----------------------------------------\n\nTITLE: List URL Filters using Get-CsImFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet retrieves all URL filter configurations defined in the Skype for Business Server environment. It allows administrators to view the current restrictions on URLs.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsImFilterConfiguration\n```\n\n----------------------------------------\n\nTITLE: Importing Certificate for OAuthTokenIssuer - PowerShell\nDESCRIPTION: This PowerShell command imports a new certificate and assigns it as the OAuthTokenIssuer certificate for server-to-server authentication. It takes the path to the certificate file and the certificate's password as input.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/assign-a-server-to-server-certificate.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsCertificate -Identity global -Type OAuthTokenIssuer -Path C:\\Certificates\\ServerToServerAuth.pfx  -Password \"P@ssw0rd\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Teams Messaging Policy via PowerShell\nDESCRIPTION: This PowerShell command retrieves the current settings of the Global Teams messaging policy. It's useful for understanding the default settings applied to users before making any changes or assigning custom policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/policy-assignment-overview.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsTeamsMessagingPolicy -Identity Global\n```\n\n----------------------------------------\n\nTITLE: Changing Emergency Location via PowerShell\nDESCRIPTION: This snippet references the PowerShell cmdlet used to modify an existing emergency location. You can only update address information for an emergency location if the address hasn't been validated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/add-change-remove-emergency-location-organization.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsOnlineLisCivicAddress](/powershell/module/teams/set-csonlineliscivicaddress)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subnet Details using Get-CsNetworkSubnet in PowerShell\nDESCRIPTION: This cmdlet retrieves the details of a specific network subnet in Skype for Business. It requires the Identity parameter to specify the subnet to retrieve.  It returns the detailed configuration of the requested subnet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsNetworkSubnet -Identity 172.11.15.0\n```\n\n----------------------------------------\n\nTITLE: Remove Caller ID Policy - PowerShell\nDESCRIPTION: This PowerShell snippet removes an existing caller ID policy named 'UKAA'. This permanently deletes the specified caller ID policy from the system. Ensure that the policy is not actively assigned before removing it.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/caller-id-policies.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsCallingLineIdentity -Identity \"UKAA\"\n```\n\n----------------------------------------\n\nTITLE: Updating Teams Meeting Policy - PowerShell\nDESCRIPTION: This snippet highlights the addition of the `CaptchaVerificationForMeetingJoin` parameter to the `New-CsTeamsMeetingPolicy` and `Set-CsTeamsMeetingPolicy` cmdlets for managing Captcha verification for meeting joins using the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_56\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsMeetingPolicy -CaptchaVerificationForMeetingJoin\n```\n\n----------------------------------------\n\nTITLE: Disable Face Enrollment Globally - PowerShell\nDESCRIPTION: This PowerShell command disables face enrollment for all users in the organization by setting the `EnrollFace` parameter to `Disabled` in the global `CsTeamsAIPolicy`. This prevents users from creating face profiles.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/voice-and-face-recognition.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsAIPolicy -Identity Global -EnrollFace Disabled\n```\n\n----------------------------------------\n\nTITLE: Starting Windows Service on Edge Server with PowerShell\nDESCRIPTION: This PowerShell cmdlet starts the Windows service on an Edge server. This is a necessary step after re-pointing XMPP federation to a new Edge pool to activate the new configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nStart-CsWindowsService\n```\n\n----------------------------------------\n\nTITLE: Remove All Site Meeting Configurations - PowerShell\nDESCRIPTION: This command removes all meeting configuration settings applied to the site scope. It uses Get-CsMeetingConfiguration to retrieve all site configurations using a filter and pipes the results to Remove-CsMeetingConfiguration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/delete-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMeetingConfiguration -Filter \"site:*\" | Remove-CsMeetingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Restart IIS on Exchange Server\nDESCRIPTION: This PowerShell command restarts Internet Information Services (IIS) on an Exchange server. This is recommended after configuring the partner application to ensure the changes are applied.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/configure-partner-applications.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\niisreset atl-exchange-001\n```\n\n----------------------------------------\n\nTITLE: Set Tenant-Wide Policy to SfbWithTeamsCollab - PowerShell\nDESCRIPTION: This command sets the tenant-wide upgrade policy to SfbWithTeamsCollab. It follows identifying and \"grandfathering\" existing active Teams users into Islands mode.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-implement.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -Global -PolicyName SfbWithTeamsCollab\n```\n\n----------------------------------------\n\nTITLE: Remove Conferencing Configuration - PowerShell\nDESCRIPTION: Removes the specified collection of conference configuration settings from Skype for Business Server.  Requires identifying the configuration to be removed. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Retrieve Teams Calling Policy (PowerShell)\nDESCRIPTION: This cmdlet retrieves information about Teams calling policies. It is useful for auditing and verifying policy configurations across the organization. You can retrieve specific policies or list all available policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-calling-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Range - PowerShell\nDESCRIPTION: This cmdlet creates a new time range object for use in Auto Attendant schedules in Microsoft Teams. It specifies a start and end time. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineTimeRange\n```\n\n----------------------------------------\n\nTITLE: Assigning Emergency Location via PowerShell\nDESCRIPTION: This snippet references the PowerShell cmdlet used to assign an emergency location to a phone number. This applies to Calling Plans, Operator Connect, Teams Phone Mobile, and Direct Calling.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/add-change-remove-emergency-location-organization.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsPhoneNumberAssignment](/powershell/module/teams/set-csphonenumberassignment)\n```\n\n----------------------------------------\n\nTITLE: Getting Online Application Instance - PowerShell\nDESCRIPTION: This cmdlet retrieves information about an existing online application instance in Microsoft Teams.  Used for managing resource accounts for Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_29\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineApplicationInstance\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Subnet Information Using Get-CsNetworkSubnet\nDESCRIPTION: This snippet demonstrates how to view network subnet information using the `Get-CsNetworkSubnet` cmdlet in the Skype for Business Server Management Shell. It retrieves information about all network subnets configured in the Skype for Business Server environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-network-subnets.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsNetworkSubnet\n```\n\n----------------------------------------\n\nTITLE: Listing Device Update Rules - PowerShell\nDESCRIPTION: This cmdlet retrieves a list of all device update rules. These rules are used to associate firmware updates with devices running Skype for Business Phone Edition.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsDeviceUpdateRule\n```\n\n----------------------------------------\n\nTITLE: Create Conference Directory in Skype for Business\nDESCRIPTION: Creates a conference directory for a specified pool. It is recommended to create one directory for every 999 users. Requires specifying parameters such as the Identity. Returns the newly created CsConferenceDirectory object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Deleting PIN Policies in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet deletes a specified PIN policy from Skype for Business. The Identity parameter specifies the PIN policy to be removed. This action is permanent and should be performed with caution.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsPinPolicy -Identity RedmondUsersPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Displaying App Creation Success in PowerShell\nDESCRIPTION: This snippet displays a success message with the client ID, and then retrieves and displays the application details using `Get-AdfsNativeClientApplication`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nWrite-Host \"`nAdmin Control panel Native App created successfully with client Id: $clientIdentifier.\" -ForeGroundColor Green\n\nWrite-Host \"`nDetails of the App are:`n\"\nGet-AdfsNativeClientApplication -Identifier $clientIdentifier\n```\n\n----------------------------------------\n\nTITLE: Remove Client PIN Policy - PowerShell\nDESCRIPTION: Removes the specified personal identification number (PIN) policy.  The cmdlet requires the Skype for Business Server PowerShell module.  The input is the identity of the PIN policy to be removed.  The output confirms the policy removal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_44\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Remove Dial-In Conferencing Access Number - PowerShell\nDESCRIPTION: Removes an existing dial-in conferencing access number from Skype for Business Server. Requires identifying the access number to remove. The cmdlet does not return output if successful, otherwise it returns an error.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_34\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Getting Team Channel Information - PowerShell\nDESCRIPTION: This cmdlet retrieves information about a channel within a Microsoft Team. Used for integrating specific Team Channels with Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-TeamChannel\n```\n\n----------------------------------------\n\nTITLE: View Access Edge Configuration with PowerShell - Skype for Business\nDESCRIPTION: This PowerShell command retrieves and displays the current Access Edge configuration settings for the Skype for Business Server. It shows various parameters like federation, remote user access, and anonymous user access settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/manage-access-edge-configuration-for-your-organization.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsAccessEdgeConfiguration\n```\n\n----------------------------------------\n\nTITLE: Assign Network Roaming Policy to Network Site (Teams) - Example 2\nDESCRIPTION: This PowerShell command assigns the 'LowBandwidthSite' network roaming policy to the network site identified as 'Burlington'. It uses the Set-CsTenantNetworkSite cmdlet to associate a policy with a specific network location. This is a repeated example.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/network-roaming-policy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantNetworkSite -Identity Burlington -NetworkRoamingPolicy LowBandwidthSite\n```\n\n----------------------------------------\n\nTITLE: Export-CsOnlineAudioFile Cmdlet Release\nDESCRIPTION: This snippet describes the release of the `Export-CsOnlineAudioFile` cmdlet. This cmdlet provides the ability to export online audio files within Microsoft Teams using PowerShell. It is essential for backup, archiving, or auditing purposes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_139\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CsOnlineAudioFile\n```\n\n----------------------------------------\n\nTITLE: Enabling Busy Options Globally - PowerShell\nDESCRIPTION: This code snippet shows how to enable Busy Options globally for the organization using the `Set-CsVoicePolicy` cmdlet. This is the first step in enabling the Busy Options feature after installation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsVoicePolicy -EnableBusyOptions $true\n```\n\n----------------------------------------\n\nTITLE: Assign Conferencing Policy to User - Skype for Business PowerShell\nDESCRIPTION: This cmdlet assigns a specific conferencing policy to a user. This allows administrators to customize conferencing settings on a per-user basis, overriding site or global policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Grant-CsConferencingPolicy](/powershell/module/skype/grant-csconferencingpolicy?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Setting Online Application Instance - PowerShell\nDESCRIPTION: This cmdlet modifies the settings of an existing online application instance in Microsoft Teams.  Used for managing resource accounts for Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_30\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineApplicationInstance\n```\n\n----------------------------------------\n\nTITLE: Get Network Site Cmdlet - PowerShell\nDESCRIPTION: This cmdlet retrieves network sites in Skype for Business Server.  It provides information about the configured network sites, including their attributes and associations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsNetworkSite\n```\n\n----------------------------------------\n\nTITLE: Rename Computer using PowerShell\nDESCRIPTION: This snippet shows how to rename a Teams Rooms on Windows computer after it has been joined to a domain. It uses the Rename-Computer PowerShell cmdlet followed by the desired new name for the computer.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-prep.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nRename-Computer\n```\n\n----------------------------------------\n\nTITLE: Disable Town Hall Recording Publishing via PowerShell\nDESCRIPTION: This PowerShell script prevents organizers from publishing any town hall recordings.  It configures the `CsTeamsEventsPolicy` by setting the `-AllowedTownhallTypesForRecordingPublish` parameter to `None`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-vod-publishing.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEventsPolicy -Identity <policy name> -AllowedTownhallTypesForRecordingPublish None\n```\n\n----------------------------------------\n\nTITLE: Reset Global Archiving Configuration to Default (PowerShell)\nDESCRIPTION: This PowerShell command resets the global archiving configuration to its default values. For example, if IM session archiving was enabled globally, this command disables it, setting the value to None.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/delete-a-configuration.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsArchivingConfiguration -Identity global\n```\n\n----------------------------------------\n\nTITLE: Retrieve Teams Voice Applications Policy Information - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves information about a Teams voice applications policy. It allows administrators to view the settings and configuration of a specific policy, providing insight into the permissions granted.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voice-applications-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Disable Feedback Surveys for Anonymous Users - PowerShell\nDESCRIPTION: This PowerShell command disables feedback surveys for anonymous participants in Teams meetings, webinars, and town halls. It sets the `FeedbackSurveyForAnonymousUsers` parameter to `Disabled` within the Teams meeting configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-surveys-anonymous-participants.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingConfiguration -FeedbackSurveyForAnonymousUsers Disabled\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Teams using PowerShell\nDESCRIPTION: This PowerShell command establishes a remote session and connects to Microsoft Teams, allowing for subsequent administrative actions to be performed. This is a prerequisite to creating and assigning Teams IP Phone policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/phones/teams-android-devices-user-interface.md#_snippet_0\n\nLANGUAGE: Powershell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Retrieve Persistent Chat Add-in Information - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves information about Persistent Chat add-ins. Without any parameters, it returns information about all add-ins configured for the organization. This example shows retrieving information about all Persistent Chat add-ins.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-add-ins.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPersistentChatAddin\n```\n\n----------------------------------------\n\nTITLE: Releasing CsTeamsMultiTenantOrganizationConfiguration cmdlets\nDESCRIPTION: This snippet releases the `Get-CsTeamsMultiTenantOrganizationConfiguration` and `Set-CsTeamsMultiTenantOrganizationConfiguration` cmdlets. These cmdlets manage the configuration of multi-tenant organizations within Microsoft Teams. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsTeamsMultiTenantOrganizationConfiguration\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Federation Configuration - PowerShell\nDESCRIPTION: This snippet adds ExternalAccessWithTrialTenants parameter to the Set-CsTenantFederationConfiguration cmdlet. This parameter probably allows configuring external access with trial tenants using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_57\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantFederationConfiguration -ExternalAccessWithTrialTenants\n```\n\n----------------------------------------\n\nTITLE: Change Teams Rooms Default Password using Intune\nDESCRIPTION: This snippet demonstrates changing the default Microsoft Teams Rooms password (initially 'sfb') using Intune. It utilizes the Set-LocalUser PowerShell cmdlet to modify the local administrator account password.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-prep.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-LocalUser\n```\n\n----------------------------------------\n\nTITLE: Download DriveItem contents via Microsoft Graph API\nDESCRIPTION: Downloads the contents of a DriveItem (file) using the Microsoft Graph API. Requires Drive ID and Item ID. Output: File content.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_30\n\nLANGUAGE: HTTP\nCODE:\n```\n[Download the contents of a DriveItem](/onedrive/developer/rest-api/api/driveitem_get_content).\n```\n\n----------------------------------------\n\nTITLE: Delete a URL Filter using Remove-CsImFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet removes a URL filter configuration from Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the filter to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsImFilterConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Create SIP Gateway API Service Principal - MS Graph Module - PowerShell\nDESCRIPTION: This snippet creates a new SIP Gateway API service principal using the MS Graph module. It uses the AppId of the SIP Gateway API. It requires the MS Graph module to be installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/sip-gateway-dynamic-filters.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-MgServicePrincipal -AppId \"0ab9de21-b802-4d77-b279-1ad41ca233b4\"\n```\n\n----------------------------------------\n\nTITLE: Installing Teams PowerShell Module\nDESCRIPTION: This PowerShell command installs the MicrosoftTeams module, ensuring it is at least version 1.0.5 or later. This module is necessary for managing Teams settings and policies through PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Enable Internal Archiving Policy - PowerShell\nDESCRIPTION: This PowerShell snippet enables the archiving of internal communication sessions for a specified archiving policy. The `Set-CsArchivingPolicy` cmdlet is used to modify the policy with the specified `Identity` by setting the `ArchiveInternal` parameter to `$True`.  This configures the system to archive internal communications according to the defined policy. The policy identity in this example is set to \"global\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/change-an-existing-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingPolicy -Identity \"global\" -ArchiveInternal $True\n```\n\n----------------------------------------\n\nTITLE: Set AD FS Relying Party Trust Transform Rules\nDESCRIPTION: This PowerShell command assigns the issuance transform rules to the relying party trust.  The TargetName parameter specifies the name of the relying party trust.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ADFSRelyingPartyTrust -TargetName SfBPool01-PassiveAuth -IssuanceTransformRules $IssuanceTransformRules\n```\n\n----------------------------------------\n\nTITLE: Disable CDR Monitoring Globally - PowerShell\nDESCRIPTION: This command disables Call Detail Recording (CDR) monitoring at the global scope by setting the EnableCDR property to False. It uses the Set-CsCdrConfiguration cmdlet, specifying the \"global\" identity and setting EnableCDR to $False.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/call-detail-recording-and-qoe.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsCdrConfiguration -Identity \"global\" -EnableCDR $False\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered User Chat Messages via MS Graph API (HTTP)\nDESCRIPTION: This example shows how to retrieve user chat messages using date and time filters and a top limit using the Microsoft Graph API.  It requires the Chat.Read.All permission. It filters messages based on the lastModifiedDateTime.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/users/{id}/chats/getAllMessages?$top=50&$filter=lastModifiedDateTime gt 2020-06-04T18:03:11.591Z and lastModifiedDateTime lt 2020-06-05T21:00:09.413Z\n```\n\n----------------------------------------\n\nTITLE: Add Wireless Location to the Location Database - PowerShell\nDESCRIPTION: This cmdlet adds a wireless access point location to the Skype for Business Server location database. It uses the `Set-CsLisWirelessAccessPoint` cmdlet with parameters specifying the BSSID, description, location, company name, and civic address details.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/configure-the-location-database.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsLisWirelessAccessPoint -BSSID 0A-23-CD-16-AA-2E -Description \"Wireless1\" -Location Location2 -CompanyName \"Litware\" -HouseNumber 2345 -HouseNumberSuffix \"\" -PreDirectional \"\" -StreetName 163rd -StreetSuffix Ave -PostDirectional NE -City Bellevue -State WA -PostalCode 99234 -Country US\n```\n\n----------------------------------------\n\nTITLE: Remove Conferencing Policies with Specific Attribute - PowerShell\nDESCRIPTION: This PowerShell command retrieves all conferencing policies and filters them based on the 'AllowExternalUsersToRecordMeetings' attribute. It then removes the policies that have this attribute set to True. The pipeline allows for filtering objects based on their properties before deletion. Ensure you have the necessary Skype for Business Server Management Shell modules loaded.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/delete-policies.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferencingPolicy | Where-Object {$_.AllowExternalUsersToRecordMeetings -eq $True} | Remove-CsConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Releasing New-CsOnlineTelephoneNumberReleaseOrder cmdlet\nDESCRIPTION: This snippet releases the `New-CsOnlineTelephoneNumberReleaseOrder` cmdlet. This cmdlet likely allows releasing telephone numbers. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineTelephoneNumberReleaseOrder\n```\n\n----------------------------------------\n\nTITLE: Modify Unassigned Number Range - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to modify an existing unassigned number range. It updates the NumberRangeStart and NumberRangeEnd parameters for a specified Identity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-an-unassigned-number-range.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsUnassignedNumber -Identity \"Unassigned range 1\" -NumberRangeStart \"+14255551000\" -NumberRangeEnd \"+14255551900\"\n```\n\n----------------------------------------\n\nTITLE: Example of accessing CA via HTTPS\nDESCRIPTION: This code snippet shows a concrete example of how to access Certificate Services, replacing the placeholder with a specific CA server name and domain.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-edge-server/deploy-edge-servers.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhttps://ca01/contoso.com/certsrv\n```\n\n----------------------------------------\n\nTITLE: Remove Network Site Cmdlet - PowerShell\nDESCRIPTION: This cmdlet removes a network site from Skype for Business Server.  A network site cannot be removed if it is associated with a network subnet. Check associations before attempting removal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsNetworkSite\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule: 5-Digit Extension Translation\nDESCRIPTION: This normalization rule translates 5-digit extension numbers to a full phone number and extension format. This is used when routing calls over the PSTN during a WAN outage, directing the call to the correct user via their full number and extension.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/enterprise-voice-resiliency.md#_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n^(\\d{5})$\n```\n\n----------------------------------------\n\nTITLE: Test Dial-in Conferencing in Skype for Business\nDESCRIPTION: Tests that access numbers for a specified pool work correctly. Used to verify dial-in conferencing functionality. Requires specifying the TargetPool parameter. Returns a test result object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/deploy-conferencing.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsDialInConferencing\n```\n\n----------------------------------------\n\nTITLE: Getting Teams Education Configuration Settings\nDESCRIPTION: This snippet retrieves the current Teams Education Configuration to check the `ParentGuardianPreferredContactMethod`. It allows you to see if the preferred method is Email or SMS before making any changes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/edu-parents-app.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsEducationConfiguration\n```\n\n----------------------------------------\n\nTITLE: Create Call Queue with Agent Routing Settings - PowerShell\nDESCRIPTION: This example shows how to create a call queue with specific agent routing configurations, including routing method, presence-based routing, opt-out settings, and agent alert time.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-call-queue.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCallQueue -Name \"Call Queue Name\" -RoutingMethod Attendant -PresenceBasedRouting $false -AllowOptOut $false -AgentAlertTime 20\n```\n\n----------------------------------------\n\nTITLE: Get callTranscript content via Microsoft Graph API\nDESCRIPTION: Retrieves the content of a call transcript using the Microsoft Graph API. Requires authentication and callTranscriptId. Output: The content of call transcript.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_26\n\nLANGUAGE: HTTP\nCODE:\n```\n[Get callTranscript content](/microsoftteams/platform/graph-api/meeting-transcripts/api-transcripts#get-calltranscript-content).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Busy Options for a User - PowerShell\nDESCRIPTION: This PowerShell command retrieves the Busy Options setting for a specified user (KenMyer@Contoso.com) using the `Get-CsBusyOptions` cmdlet. It requires the user's SIP address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsBusyOptions -Identity sip:KenMyer@Contoso.com\n```\n\n----------------------------------------\n\nTITLE: Getting Application Instance Association Status - PowerShell\nDESCRIPTION: This cmdlet retrieves the status of an application instance association in Microsoft Teams. Used for monitoring the health of resource account associations. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_34\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineApplicationInstanceAssociationStatus\n```\n\n----------------------------------------\n\nTITLE: Get Effective Tenant Dial Plan for a User\nDESCRIPTION: This command retrieves the effective dial plan settings for a specific user using the Get-CsEffectiveTenantDialPlan cmdlet. The Identity parameter specifies the user's email address.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n  Get-CsEffectiveTenantDialPlan -Identity amos.marble@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Listing Region Routes using Get-CsNetworkInterRegionRoute in PowerShell\nDESCRIPTION: This cmdlet retrieves a list of all configured network inter-region routes in Skype for Business. It requires no specific parameters and returns a list of region routes and their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_32\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsNetworkInterRegionRoute\n```\n\n----------------------------------------\n\nTITLE: Get Dial-In Conferencing Configuration - Skype for Business - PowerShell\nDESCRIPTION: Retrieves information about how Skype for Business Server responds when users join or leave a dial-in conference. This includes settings for name recording and join/leave announcements.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Set Mobility Policy - PowerShell\nDESCRIPTION: This PowerShell command lets you manage mobility policies in Microsoft Teams, which control Teams Phone Mobile features for users.  It affects how users handle incoming calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMobilityPolicy\n```\n\n----------------------------------------\n\nTITLE: Configuring Skype for Business Installation using Config.xml\nDESCRIPTION: This command-line option specifies the Config.xml file that Setup uses during installation. It is used to specify a customized Config.xml file for Skype for Business installations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/use-setup-command-line-options.md#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n/config \\\\server\\share\\Skype15\\Skype.WW\\Config.xml\n```\n\n----------------------------------------\n\nTITLE: Getting Auto Attendant Tenant Information - PowerShell\nDESCRIPTION: This cmdlet retrieves tenant-specific information related to Auto Attendants in Microsoft Teams. This may include licensing or configuration details. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAutoAttendantTenantInformation\n```\n\n----------------------------------------\n\nTITLE: Granting a Compliance Recording Policy to a User - PowerShell\nDESCRIPTION: This PowerShell snippet assigns a compliance recording policy to a specific user in Microsoft Teams.  It requires the Identity (user's email address) and the PolicyName (name of the compliance recording policy).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-recording-compliance.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGrant-CsTeamsComplianceRecordingPolicy -Identity testuser@contoso.onmicrosoft.com -PolicyName TestComplianceRecordingPolicy\n```\n\n----------------------------------------\n\nTITLE: Fixing ForceAccept parameter issues\nDESCRIPTION: This snippet fixes issues with the `ForceAccept` parameter in the `Set-CsOnlineEnhancedEmergencyServiceDisclaimer` cmdlet. This is a bug fix related to emergency service disclaimers. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineEnhancedEmergencyServiceDisclaimer\n```\n\n----------------------------------------\n\nTITLE: Set User Team Members - PowerShell\nDESCRIPTION: This command modifies the team members list for a user in Skype for Business Server. Upon successful execution, the updated team member list is returned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserTeamMembers -Identity <UserIdParameter> [-Team <PSListModifier>]\n```\n\n----------------------------------------\n\nTITLE: Creating Top-Level Question - PowerShell\nDESCRIPTION: This command creates the top-level question using New-CsRgsQuestion. It includes the prompt and the list of possible answers (SupportAnswer and SalesAnswer).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/designing-and-creating-response-group-workflows.md#_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\n$TopLevelQuestion = New-CsRgsQuestion -Prompt $TopLevelPrompt [-AnswerList ($SupportAnswer, $SalesAnswer)]\n```\n\n----------------------------------------\n\nTITLE: Setting Phone Number Assignment - PowerShell\nDESCRIPTION: This cmdlet assigns or modifies a phone number assignment in Microsoft Teams. Used to assign phone numbers to resource accounts or users. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_38\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment\n```\n\n----------------------------------------\n\nTITLE: Get Total User Count in Skype for Business - PowerShell\nDESCRIPTION: This PowerShell command retrieves the total number of users enabled for Skype for Business Server. The `Get-CsUser` cmdlet retrieves all Skype for Business user objects, and the `.Count` property returns the number of users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/user-registration-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n(Get-CsUser).Count\n```\n\n----------------------------------------\n\nTITLE: Delete a Tenant Dial Plan\nDESCRIPTION: This command removes a tenant dial plan using the Remove-CsTenantDialPlan cmdlet. The Identity parameter specifies the name of the dial plan to be deleted. The -force parameter suppresses any confirmation prompts.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n  Remove-CsTenantDialPlan -Identity RedmondDialPlan -force\n```\n\n----------------------------------------\n\nTITLE: Retrieving Call Queue Information - PowerShell\nDESCRIPTION: This cmdlet retrieves information about an existing Call Queue in Microsoft Teams.  You can retrieve a specific Call Queue by its identity. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Test Data Conference - PowerShell\nDESCRIPTION: Verifies whether or not a pair of users can participate in a Skype for Business Server web conference that includes activities such as sharing or viewing PowerPoint slides, whiteboards, or polls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_56\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsDataConference\n```\n\n----------------------------------------\n\nTITLE: Grant Shared Calling Policy - PowerShell\nDESCRIPTION: Assigns the Shared Calling policy to a user using Grant-CsTeamsSharedCallingRoutingPolicy.  The user is identified by their identity, and the policy is specified by its PolicyName.  This enables the shared calling functionality for the specified user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/shared-calling-scenario.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n# Grant the Shared Calling policy to the user\nGrant-CsTeamsSharedCallingRoutingPolicy -Identity $user -PolicyName Seattle\n```\n\n----------------------------------------\n\nTITLE: Set Virtual Appointments Policy PowerShell\nDESCRIPTION: This cmdlet modifies an existing Teams Virtual Appointments Policy. It enables administrators to update settings related to virtual appointments within the Teams environment. You need the Teams module and appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsVirtualAppointmentsPolicy\n```\n\n----------------------------------------\n\nTITLE: Referencing Standard Team Template ID in Microsoft Graph\nDESCRIPTION: This snippet shows the Microsoft Graph URL for referencing the 'standard' team template. This template provides a basic team structure with no extra apps or properties pre-configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/get-started-with-teams-templates.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\n`https://graph.microsoft.com/v1.0/`<br>`teamsTemplates('standard')`\n```\n\n----------------------------------------\n\nTITLE: Deleting Client Version Policies - PowerShell\nDESCRIPTION: This cmdlet removes a specific client version policy. The Identity parameter specifies the policy to be removed. This example removes the policy configured for the Redmond site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsClientVersionPolicy -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Get Pool Backup Relationship - Skype for Business PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves the backup pool relationship for a specified pool. It is used during disaster recovery to identify the designated backup pool for the CMS pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsPoolBackupRelationship -PoolFQDN <CMS_Pool FQDN>\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Language - PowerShell\nDESCRIPTION: This cmdlet retrieves a list of supported languages for Auto Attendants in Microsoft Teams. This is important to know when configuring language settings. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_43\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAutoAttendantSupportedLanguage\n```\n\n----------------------------------------\n\nTITLE: Getting Statistics Manager Server Information\nDESCRIPTION: This PowerShell script retrieves the currently imported server information from Statistics Manager.  It is run from the Listener installation directory and outputs the server details currently being monitored by Statistics Manager.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/deploy.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\Get-StatsManServerInfo.ps1\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Teams PowerShell\nDESCRIPTION: This snippet shows how to import the MicrosoftTeams module and connect to Microsoft Teams using PowerShell. It's a necessary step before using any Teams-related cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/assign-policies-users-and-groups.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n  # When using Teams PowerShell Module\n\n   Import-Module MicrosoftTeams\n   Connect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Verify Group Restoration\nDESCRIPTION: This PowerShell command verifies that a Microsoft 365 group has been successfully restored. It uses the group ID (`[Id]`) to retrieve the group's properties from Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/archive-or-delete-a-team.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgGroup -GroupId [Id]\n```\n\n----------------------------------------\n\nTITLE: Create Meeting Configuration for a Site - PowerShell\nDESCRIPTION: This PowerShell command creates a new set of meeting configuration settings for the Redmond site. It uses default values for all properties as no other parameters are specified.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/create-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsMeetingConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Test MCX Conference - PowerShell\nDESCRIPTION: Tests the ability of three users to participate in a Skype for Business Server Mobility Service conference.  Note: Clients that use MCX are not supported in Skype for Business Server 2019.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_59\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsMcxConference\n```\n\n----------------------------------------\n\nTITLE: Finding Online Application Instance - PowerShell\nDESCRIPTION: This cmdlet finds an existing online application instance in Microsoft Teams. Used for managing resource accounts for Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_28\n\nLANGUAGE: PowerShell\nCODE:\n```\nFind-CsOnlineApplicationInstance\n```\n\n----------------------------------------\n\nTITLE: Remove Conference Disclaimer - PowerShell\nDESCRIPTION: Clears the text from the header and body of the conference disclaimer used in an organization. The conference disclaimer is a message that is displayed to users who join the conference by using a hyperlink.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_51\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsConferenceDisclaimer\n```\n\n----------------------------------------\n\nTITLE: Calculate Abandoned Call Percentage\nDESCRIPTION: This formula calculates the abandoned call percentage, representing the ratio of total abandoned calls to total offered calls. The result is expressed as a three-digit decimal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-real-time-reports.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n(tot_abandoned_calls / tot_offered_calls)\n```\n\n----------------------------------------\n\nTITLE: List callTranscripts via Microsoft Graph API\nDESCRIPTION: Lists the call transcripts using the Microsoft Graph API. Requires authentication and call ID. Output: List of call transcript resources.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_24\n\nLANGUAGE: HTTP\nCODE:\n```\n[List callTranscripts](/microsoftteams/platform/graph-api/meeting-transcripts/api-transcripts#list-calltranscripts).\n```\n\n----------------------------------------\n\nTITLE: Deleting a Site Archiving Policy in Skype for Business using PowerShell\nDESCRIPTION: This PowerShell command deletes an archiving policy configured at the site level. When a site policy is removed, users previously managed by this policy will be governed by the global archiving policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/delete-an-existing-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsArchivingPolicy -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Overview of Microsoft Search API in Microsoft Graph\nDESCRIPTION: Provides an overview of using the Microsoft Search API to extend search functionality to custom applications. It uses the Microsoft Graph API. Input is a search query. Output is a set of search results.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\n[Overview of the Microsoft Search API in Microsoft Graph](/graph/search-concept-overview)\n```\n\n----------------------------------------\n\nTITLE: Set Online Voice Routing Policy - PowerShell\nDESCRIPTION: This PowerShell command configures online voice routing policies for Direct Routing in Microsoft Teams. These policies dictate how calls are routed based on PSTN usage records.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineVoiceRoutingPolicy\n```\n\n----------------------------------------\n\nTITLE: Getting Teams Voice Applications Policy - PowerShell\nDESCRIPTION: This cmdlet retrieves Teams voice application policies. These policies govern the behavior of voice applications like Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_45\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Enable Call Data Connector (Global Scope) - Re-enable\nDESCRIPTION: This PowerShell command re-enables Call Data Connector at the global scope. This will resume uploading call data to the cloud. It requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCloudCallDataConnectorConfiguration -Identity \"global\" -EnableCallDataConnector $True\n```\n\n----------------------------------------\n\nTITLE: Remove Site Meeting Configuration - PowerShell\nDESCRIPTION: This command removes the meeting configuration settings applied to the Redmond site. It utilizes the Remove-CsMeetingConfiguration cmdlet with the -Identity parameter to specify the target site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/delete-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsMeetingConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Adding expand parameter to Get-AllM365TeamsApp cmdlet\nDESCRIPTION: This snippet adds the `expand` parameter to the `Get-AllM365TeamsApp` cmdlet.  This parameter likely controls the level of detail returned by the cmdlet. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AllM365TeamsApp\n```\n\n----------------------------------------\n\nTITLE: Updating Client Version Configuration - PowerShell\nDESCRIPTION: This cmdlet modifies the properties of an existing client version configuration. In this example, the DefaultURL property is updated for all client version configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsClientVersionConfiguration | Set-CsClientVersionConfiguration -DefaultURL \"https://litwareinc.com/csclients\"\n```\n\n----------------------------------------\n\nTITLE: Get Central Management Store Replication Status - PowerShell\nDESCRIPTION: This PowerShell command retrieves the replication status of the Central Management store. It is used to confirm that replication with the new Central Management store is occurring and stable before removing the old database files.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-the-central-management-server.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsManagementStoreReplicationStatus\n```\n\n----------------------------------------\n\nTITLE: Disable Federation Partner Discovery - PowerShell\nDESCRIPTION: This PowerShell cmdlet disables the discovery of federation partners in Skype for Business Server.  It sets the EnablePartnerDiscovery property to False, requiring DNS SRV routing to be enabled.  The cmdlet modifies the global Access Edge Configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-discovery-of-federation-partners.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -UseDnsSrvRouting -EnablePartnerDiscovery $False\n```\n\n----------------------------------------\n\nTITLE: Creating a Call Handling Association - PowerShell\nDESCRIPTION: This cmdlet creates a new call handling association for Auto Attendants in Microsoft Teams. This links a call flow to a specific schedule or holiday. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsAutoAttendantCallHandlingAssociation\n```\n\n----------------------------------------\n\nTITLE: Removing Emergency Location via PowerShell\nDESCRIPTION: This snippet references the PowerShell cmdlet for deleting an emergency location. A location can only be removed if it is not assigned to any users or phone numbers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/add-change-remove-emergency-location-organization.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Remove-CsOnlineLisCivicAddress](/powershell/module/teams/remove-csonlineliscivicaddress)\n```\n\n----------------------------------------\n\nTITLE: Listing Region Links using Get-CsNetworkRegionLink in PowerShell\nDESCRIPTION: This cmdlet retrieves a list of all configured network region links in Skype for Business. It requires no specific parameters and returns a list of region links and their properties.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_27\n\nLANGUAGE: powershell\nCODE:\n```\n Get-CsNetworkRegionLink\n```\n\n----------------------------------------\n\nTITLE: Set AD FS Relying Party Trust Authorization Rules\nDESCRIPTION: This PowerShell command assigns the issuance authorization rules to the relying party trust. The TargetName parameter specifies the name of the relying party trust.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ADFSRelyingPartyTrust -TargetName SfBPool01-PassiveAuth\n-IssuanceAuthorizationRules $IssuanceAuthorizationRules\n```\n\n----------------------------------------\n\nTITLE: Finalize Uninstall of Skype for Business Topology using PowerShell\nDESCRIPTION: This PowerShell cmdlet finalizes the uninstall of the Skype for Business Server deployment by publishing the topology with the `-FinalizeUninstall` parameter. This action prepares the system for the complete removal of the Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-remove-on-prem.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPublish-CsTopology -FinalizeUninstall\n```\n\n----------------------------------------\n\nTITLE: Import Legacy Conference Directory - Skype for Business - PowerShell\nDESCRIPTION: Imports conference directories from Microsoft Office Communications Server 2007 R2 to Skype for Business Server. This facilitates interoperability between the two server versions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsLegacyConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Viewing Teleconference Policies - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves and displays all existing Teams Room Video Teleconferencing policies in the organization. It requires the Teams PowerShell module to be installed and connected.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/meetings-with-sip-h323-devices.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsRoomVideoTeleConferencingPolicy\n```\n\n----------------------------------------\n\nTITLE: Enable Archiving Disclaimer - PowerShell\nDESCRIPTION: This PowerShell cmdlet enables the archiving disclaimer for federated partners. It sets the EnableArchivingDisclaimer property of the CsAccessEdgeConfiguration to $True. This requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-sending-an-archiving-disclaimer-to-federated-partners.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -EnableArchivingDisclaimer $True\n```\n\n----------------------------------------\n\nTITLE: Set Online Voice Route - PowerShell\nDESCRIPTION: This PowerShell command is used to modify online voice routes for Direct Routing within Microsoft Teams. It's part of defining how calls are routed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineVoiceRoute\n```\n\n----------------------------------------\n\nTITLE: Getting Microsoft Graph Subscribed SKUs\nDESCRIPTION: This PowerShell command retrieves the list of subscribed SKUs for the Microsoft Graph. This is used to check license types and availability within the tenant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgSubscribedSku\n```\n\n----------------------------------------\n\nTITLE: Disable Archiving Disclaimer - PowerShell\nDESCRIPTION: This PowerShell cmdlet disables the archiving disclaimer for federated partners. It sets the EnableArchivingDisclaimer property of the CsAccessEdgeConfiguration to $False. This requires the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/access-edge/enable-or-disable-sending-an-archiving-disclaimer-to-federated-partners.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -EnableArchivingDisclaimer $False\n```\n\n----------------------------------------\n\nTITLE: Get CVI Service Provider\nDESCRIPTION: This PowerShell cmdlet retrieves all the providers that you configured for use within the organization. It lists all configured video interop service providers.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cloud-video-interop.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsVideoInteropServiceProvider\n```\n\n----------------------------------------\n\nTITLE: View DTMF Settings - PowerShell\nDESCRIPTION: This PowerShell command retrieves the current DTMF settings used for dial-in conferencing in Skype for Business Server. It displays the key mappings for various conference control options.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/key-mapping-for-dtmf-commands.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialinConferencingDtmfConfiguration\n```\n\n----------------------------------------\n\nTITLE: Modify Conferencing Policy - Skype for Business PowerShell\nDESCRIPTION: This cmdlet modifies an existing conferencing policy.  Administrators can use this to update policy settings to meet changing organizational requirements.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing-policies.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set-CsConferencingPolicy](/powershell/module/skype/set-csconferencingpolicy?view=skype-ps)\n```\n\n----------------------------------------\n\nTITLE: Get Dial-In Conferencing Access Number - Skype for Business - PowerShell\nDESCRIPTION: Returns information about all the dial-in conferencing access numbers configured for use in an organization.  These access numbers are used to dial into the conference.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Listing Client Version Configurations - PowerShell\nDESCRIPTION: This cmdlet retrieves a list of all client version configurations. It returns details such as identity and enabled status for each configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsClientVersionConfiguration\n```\n\n----------------------------------------\n\nTITLE: Remove delegate from SLA group - PowerShell\nDESCRIPTION: Removes a delegate from a Shared Line Appearance (SLA) group. The Delegate parameter specifies the SIP address of the delegate to be removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-shared-line-appearance.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsSlaDelegates -Identity <IdentityOfGroup> -Delegate <NameOfDelegate@domain>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsSlaDelegates -Identity SLAGroup1 -Delegate sip:SLA_Delegate3@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Remove Central Management Store Service Control Point using PowerShell\nDESCRIPTION: This PowerShell cmdlet removes the Central Management Store (CMS) Service Control Point (SCP) from Active Directory. This step is part of decommissioning the Skype for Business Server deployment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-remove-on-prem.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsConfigurationStoreLocation\n```\n\n----------------------------------------\n\nTITLE: Get User Delegates - PowerShell\nDESCRIPTION: This command retrieves the list of delegates for a specified user in Skype for Business Server using PowerShell. It returns an object representing the delegate list.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsuserDelegates -Identity <UserIdParameter>\n```\n\n----------------------------------------\n\nTITLE: Get unassigned service numbers - PowerShell\nDESCRIPTION: This PowerShell script retrieves a list of unassigned service numbers that can be used for the auto attendant. It uses the `Get-CsPhoneNumberAssignment` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-a-phone-system-auto-attendant-via-cmdlets.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPhoneNumberAssignment -PstnAssignmentStatus Unassigned -CapabilitiesContain VoiceApplicationAssignment\n```\n\n----------------------------------------\n\nTITLE: Install Microsoft Graph PowerShell Module\nDESCRIPTION: This PowerShell command installs the Microsoft Graph PowerShell module, allowing administrators to manage Microsoft 365 services, including Teams. The module must be installed to run the restore script.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/archive-or-delete-a-team.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module Microsoft.Graph\n```\n\n----------------------------------------\n\nTITLE: Assign Network Roaming Policy to Network Site (Teams)\nDESCRIPTION: This PowerShell command assigns the 'LowBandwidthSite' network roaming policy to the network site identified as 'Burlington'. It uses the Set-CsTenantNetworkSite cmdlet to associate a policy with a specific network location.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/network-roaming-policy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsTenantNetworkSite -Identity Burlington -NetworkRoamingPolicy LowBandwidthSite\n```\n\n----------------------------------------\n\nTITLE: Disabling Microsoft noise suppression via XML setting\nDESCRIPTION: IT admins can disable Microsoft noise suppression through XML settings. This allows admins to control the noise suppression feature across Teams Rooms devices. Depends on configuration using XML.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-release-note.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Get Virtual Appointments Policy PowerShell\nDESCRIPTION: This cmdlet retrieves Teams Virtual Appointments Policies. It allows administrators to view existing policies and their configurations. Requires the Teams module to be installed and accessible.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsVirtualAppointmentsPolicy\n```\n\n----------------------------------------\n\nTITLE: Test Audio Conferencing Provider - PowerShell\nDESCRIPTION: Tests to see if a user can connect to his or her audio conferencing provider. An audio conferencing provider is a third-party company that provides organizations with conferencing services.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_54\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsAudioConferencingProvider\n```\n\n----------------------------------------\n\nTITLE: Assign Custom Policies to Users via PowerShell\nDESCRIPTION: Custom policies created for faculty and students can be assigned by using PowerShell scripts.  See the Appendix for script examples and documentation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-quick-start-guide-edu.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Delete a File Transfer Filter using Remove-CsFileTransferFilterConfiguration (PowerShell)\nDESCRIPTION: This cmdlet removes a file transfer filter configuration from Skype for Business Server.  The `-Identity` parameter specifies the unique identifier of the filter to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-im-and-presence-menu.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsFileTransferFilterConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: Recover Front End Pool from Quorum Loss - PowerShell\nDESCRIPTION: This PowerShell cmdlet is used to recover the Front End pool from a quorum loss. It's run before applying patches if the `Get-CsPoolFabricState` cmdlet shows any missing replicas.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-front-end-servers.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-CsPoolRegistrarState -ResetType QuorumLossRecovery\n```\n\n----------------------------------------\n\nTITLE: Set Emergency Call Routing Policy - PowerShell\nDESCRIPTION: This PowerShell command is used to configure emergency call routing policies in Microsoft Teams, particularly for Direct Routing scenarios.  It defines how emergency calls are routed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEmergencyCallRoutingPolicy\n```\n\n----------------------------------------\n\nTITLE: Enable Unified Contact Store for Specific Users - PowerShell\nDESCRIPTION: These PowerShell cmdlets enable the unified contact store for specific users.  First, a new user services policy is created with the UcsAllowed parameter set to $True. Then, this policy is granted to the specified user. Replace <policy name> and <user display name> with appropriate values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-unified-contact-store.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsUserServicesPolicy -Identity \"<policy name>\" -UcsAllowed $True\nGrant-CsUserServicesPolicy -Identity \"<user display name>\" -PolicyName <\"policy name\">\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsUserServicesPolicy -Identity \"UCS Enabled Users\" -UcsAllowed $True\nGrant-CsUserServicesPolicy -Identity \"Ken Myer\" -PolicyName \"UCS Enabled Users\"\n```\n\n----------------------------------------\n\nTITLE: Reviewing Exchange UM Auto Attendant Structure using PowerShell\nDESCRIPTION: This step involves using Exchange admin PowerShell commands to examine the structure of existing Exchange UM auto attendant systems. This includes identifying any nested auto attendants and call queues, which is crucial for replicating the setup in the Cloud Auto Attendant service.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/plan-cloud-auto-attendant.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Converting Binary Data in Detail Column to Text - SQL\nDESCRIPTION: This SQL snippet shows how to convert the binary data stored in the 'Detail' column of the ProgressReport table into a readable text format. It uses a cast operation to convert the 'image' data type to 'varbinary(max)' and then to 'varchar(max)'.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/call-detail-recording-cdr-database-schema/progressreport.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncast(cast(Detail as varbinary(max)) as varchar(max))\n```\n\n----------------------------------------\n\nTITLE: Run SYSPrep Script - PowerShell\nDESCRIPTION: This example shows how to execute the SYSPrep.ps1 PowerShell script for installing Skype for Business Server 2015 prerequisites.  The -SetupFolder parameter specifies the directory where the prerequisite files are located, including the Setup.exe file from the Skype for Business Server 2015 media. The script must be run from an elevated command prompt.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n./SysPrep.PS1 -SetupFolder D:\\Setup\n```\n\n----------------------------------------\n\nTITLE: Starting Meeting Migration Service with PowerShell\nDESCRIPTION: This PowerShell command triggers the Meeting Migration Service (MMS) to convert a user's existing Skype for Business meetings to Teams meetings.  The `Start-CsExMeetingMigration` cmdlet initiates the migration process for the specified user. This is useful for migrating existing meetings when transitioning users to Teams.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/skype-for-business-online-retirement.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nStart-CsExMeetingMigration\n```\n\n----------------------------------------\n\nTITLE: Adding EnqueueReason output attribute to Get-CsMeetingMigrationStatus cmdlet\nDESCRIPTION: This snippet adds the `EnqueueReason` output attribute to the `Get-CsMeetingMigrationStatus` cmdlet. This attribute likely provides information on the reason why a meeting migration is enqueued. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMeetingMigrationStatus\n```\n\n----------------------------------------\n\nTITLE: Teams Configuration XML Example\nDESCRIPTION: This XML snippet demonstrates a sample Teams configuration file for a Surface Hub. It showcases settings for Bluetooth advertisement, automatic meeting invitation acceptance, and coordinated meetings, including trusted accounts and audio/video settings. The root element is `<SurfaceHubSettings>`, encompassing all configuration options.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/surface-hub-manage-config.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<SurfaceHubSettings>\n    <BluetoothAdvertisementEnabled>true</BluetoothAdvertisementEnabled>\n    <AutoAcceptProximateMeetingInvitations>true</AutoAcceptProximateMeetingInvitations>\n    <CoordinatedMeetings enabled=\"true\"> \n        <TrustedAccounts>room@contoso.com</TrustedAccounts>\n        <Settings> \n            <Audio default=\"false\" enabled=\"false\" />\n            <Video default=\"false\" enabled=\"true\" /> \n        </Settings> \n    </CoordinatedMeetings>\n</SurfaceHubSettings>\n```\n\n----------------------------------------\n\nTITLE: Example: Create Response Group Holiday Set with Holidays - PowerShell\nDESCRIPTION: This PowerShell example demonstrates creating two holidays, \"New Year's Day\" and \"Independence Day\", and then creating a holiday set named \"2018 Holidays\" that includes these two holidays.  It utilizes the `New-CsRgsHoliday` and `New-CsRgsHolidaySet` cmdlets. The parent parameter should reflect the application server within the Skype for Business infrastructure.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/optional-define-response-group-holiday-sets.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$a = New-CsRgsHoliday -Name \"New Year's Day\" -StartDate \"1/1/2018 12:00 AM\" -EndDate \"1/2/2018 12:00 AM\" \n$b = New-CsRgsHoliday -Name \"Independence Day\" -StartDate \"7/4/2018 12:00 AM\" -EndDate \"7/5/2018 12:00 AM\" \nNew-CsRgsHolidaySet -Parent \"ApplicationServer:Redmond.contoso.com\" -Name \"2018 Holidays\" -HolidayList ($a, $b)\n```\n\n----------------------------------------\n\nTITLE: Get All Conference Directories - PowerShell\nDESCRIPTION: This command retrieves all conference directories within the Skype for Business Server environment. It returns a list of all conference directories, which can be useful for identifying directories to be moved or managed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-conference-directories.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Deleting a Region Link using Remove-CsNetworkRegionLink in PowerShell\nDESCRIPTION: This cmdlet deletes a network region link from the Skype for Business configuration. It requires the Identity parameter to specify the region link to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_30\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsNetworkRegionLink -Identity NA_EMEA\n```\n\n----------------------------------------\n\nTITLE: Create Meeting Configuration with Presenter Designation - PowerShell\nDESCRIPTION: This PowerShell command creates a new set of meeting configuration settings for the Redmond site and configures everyone as a presenter by default.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/create-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsMeetingConfiguration -Identity \"site:Redmond\" -DesignateAsPresenter \"Everyone\"\n```\n\n----------------------------------------\n\nTITLE: Timestamp Format\nDESCRIPTION: Example format for the timestamp of the longest waiting call enqueue time. The timestamp includes timezone information as an offset from UTC.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-real-time-reports.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\n2024-03-19T11:55:09.9887885+00:00\n```\n\n----------------------------------------\n\nTITLE: Listing Web Service Configurations in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet lists all web service configurations in Skype for Business. It does not require any parameters. The output displays the configured web service settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n Get-CsWebServiceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Voice Enable User with PowerShell\nDESCRIPTION: This snippet demonstrates how to voice enable a user using the Set-CsPhoneNumberAssignment PowerShell cmdlet. The `-EnterpriseVoiceEnabled` parameter is set to `$true` to enable voice for the specified user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/here-s-what-you-get-with-phone-system.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPhoneNumberAssignment -EnterpriseVoiceEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Getting Team Information - PowerShell\nDESCRIPTION: This cmdlet retrieves information about a Microsoft Team.  Used for integrating Teams with Auto Attendants and Call Queues. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Team\n```\n\n----------------------------------------\n\nTITLE: Checking User-Level External Access Policies in MicrosoftTeams\nDESCRIPTION: This snippet retrieves existing user-level external access policies using the Get-CsExternalAccessPolicy cmdlet. It does not require specific parameters.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/edu-parents-app.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsExternalAccessPolicy\n```\n\n----------------------------------------\n\nTITLE: Deleting a Subnet using Remove-CsNetworkSubnet in PowerShell\nDESCRIPTION: This cmdlet deletes a network subnet from the Skype for Business configuration. It requires the Identity parameter to specify the subnet to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsNetworkSubnet -Identity 172.11.15.0\n```\n\n----------------------------------------\n\nTITLE: List Microsoft Teams PowerShell Cmdlets\nDESCRIPTION: This PowerShell command retrieves a list of all available cmdlets within the MicrosoftTeams module. It's used to discover the available functions for managing Teams through PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/using-admin-roles.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Command -Module MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Allowing Domain for Push Notifications - PowerShell\nDESCRIPTION: This PowerShell command adds a new allowed domain for push notifications. The identity is set to `push.lync.com` to enable push notifications.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsAllowedDomain -Identity \"push.lync.com\"\n```\n\n----------------------------------------\n\nTITLE: Get-CsAdForest Command\nDESCRIPTION: This command is used to verify that the current forest has been successfully prepared for Skype for Business Server. The expected result is LC_FORESTSETTINGS_STATE_READY.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/install/prepare-active-directory.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsAdForest\n```\n\n----------------------------------------\n\nTITLE: Delete an Existing Teams Voice Applications Policy - PowerShell\nDESCRIPTION: This PowerShell cmdlet deletes an existing Teams voice applications policy. It allows administrators to remove a policy that is no longer needed or has been superseded by a new policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voice-applications-policies.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTeamsVoiceApplicationsPolicy\n```\n\n----------------------------------------\n\nTITLE: Uninstalling MicrosoftTeams Module - PowerShell\nDESCRIPTION: This command uninstalls the Microsoft Teams PowerShell module. The second command uninstalls all versions of the module from the system. A new PowerShell session should be opened before executing this command.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-install.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nUninstall-Module MicrosoftTeams\n```\n\nLANGUAGE: powershell\nCODE:\n```\nUninstall-Module MicrosoftTeams -AllVersions\n```\n\n----------------------------------------\n\nTITLE: Create New Dial Plan - Skype for Business - PowerShell\nDESCRIPTION: Creates a new dial plan. Dial plans are used to normalize phone numbers for routing purposes within the Skype for Business environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Getting Online User (Breaking Change) - PowerShell\nDESCRIPTION: This snippet Removes LocationPolicy attribute from the output of Get-CsOnlineUser cmdlet using MicrosoftTeams PowerShell module. This is a breaking change.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_69\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Enable Voice Isolation - PowerShell\nDESCRIPTION: This PowerShell command enables voice isolation in the meeting policy, enhancing noise and voice background reduction. The `-VoiceIsolation` parameter is set to `Enabled`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/voice-and-face-recognition.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n  -VoiceIsolation Enabled \n```\n\n----------------------------------------\n\nTITLE: Get PowerShell Execution Policy - Skype for Business\nDESCRIPTION: This command retrieves the current PowerShell execution policy. This is a prerequisite to running scripts for stress and performance testing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/stress-and-performance-tool/provisioning-the-topology-to-run-load.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ExecutionPolicy\n```\n\n----------------------------------------\n\nTITLE: Get Conference Directories by Pool - PowerShell\nDESCRIPTION: This command filters the conference directories to only show those associated with a specific pool (e.g., pool01.contoso.net). It uses the ServiceID property to match the pool's FQDN and helps to narrow down the list of directories to be moved from a specific legacy pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-conference-directories.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferenceDirectory | Where-Object {$_.ServiceID -match \"pool01.contoso.net\"}\n```\n\n----------------------------------------\n\nTITLE: Remove All External Access Policies with Disabled Outside Access - PowerShell\nDESCRIPTION: This PowerShell command removes all external access policies where outside user access has been disabled. It uses `Get-CsExternalAccessPolicy` to retrieve all policies, filters the results using `Where-Object` to find policies where `EnableOutsideAccess` is `$False`, and then pipes the filtered results to `Remove-CsExternalAccessPolicy` to delete them.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/federation-and-external-access/external-access-policies/delete-a-site-or-user-policy-for-external-user-access.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsExternalAccessPolicy | Where-Object {$_.EnableOutsideAccess -eq $False} | Remove-CsExternalAccessPolicy\n```\n\n----------------------------------------\n\nTITLE: Get Items Response Payload Example - JSON\nDESCRIPTION: This JSON snippet illustrates the response body for a successful Get Items request. It contains an array of Item objects, each with properties like itemId, userId, and type.  The example shows three items, each with an itemId, a userId of 0, and a type of \"application/json\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-items.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\n\"itemId\": 1652,\n\"userId\": 0,\n\"type\": \"application/json\"\n},\n{\n\"itemId\": 1653,\n\"userId\": 0,\n\"type\": \"application/json\"\n},\n{\n\"itemId\": 1654,\n\"userId\": 0,\n\"type\": \"application/json\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Remove Phone Numbers from On-Premises Endpoints\nDESCRIPTION: This PowerShell command removes phone numbers from on-premises hybrid application endpoints. It filters endpoints that have a LineURI defined (i.e., have a phone number assigned) and then sets the LineURI to an empty string, effectively removing the phone number. This step prepares the on-premises endpoints for decommissioning.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-move-on-prem-endpoints.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsHybridApplicationEndpoint -Filter {LineURI -ne $null} | Set-CsHybridApplicationEndpoint -LineURI \"\"\n```\n\n----------------------------------------\n\nTITLE: Remove Voice Routing and PSTN Settings - PowerShell\nDESCRIPTION: This PowerShell script removes the voice routing policy and resets PSTN settings for a user. It uses Grant-CsVoiceRoutingPolicy to remove the policy and Set-CsUserPstnSettings to disable international calls and remove the HybridPSTNSite.  This is required when migrating from Teams Phone with on-premises PSTN connectivity via Cloud Connector Edition to Direct Routing.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-migrating.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsVoiceRoutingPolicy -PolicyName $NULL -Identity <UPN> \nSet-CsUserPstnSettings -Identity <UPN> -AllowInternationalCalls $false -HybridPSTNSite $null \n\n```\n\n----------------------------------------\n\nTITLE: List Chat Members via Microsoft Graph API\nDESCRIPTION: Lists the members of a chat using the Microsoft Graph API. Requires a chat ID. Output is a list of members in that chat.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\n[List members of a Chat](/graph/api/chat-list-members)\n```\n\n----------------------------------------\n\nTITLE: Grant Dial Plan to Users - Skype for Business - PowerShell\nDESCRIPTION: Assigns a dial plan to one or more users or groups. This cmdlet allows the administrator to assign a specific dial plan to users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Get Existing Call Data Connection\nDESCRIPTION: This PowerShell command retrieves an existing call data connection object using the Get-CsCloudCallDataConnection cmdlet. It's executed from another PowerShell session when the connection already exists.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsCloudCallDataConnection\n```\n\n----------------------------------------\n\nTITLE: Modify Dial-In Access Number - Skype for Business - PowerShell\nDESCRIPTION: Modifies the property values of an existing dial-in conferencing access number.  This cmdlet allows administrators to change settings on an existing access number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialInConferencingAccessNumber\n```\n\n----------------------------------------\n\nTITLE: Get Channel via Microsoft Graph API\nDESCRIPTION: Retrieves a specific channel in a team using the Microsoft Graph API. Requires Team ID and channel ID. Output: Channel resource.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_18\n\nLANGUAGE: HTTP\nCODE:\n```\n[Get Channel](/graph/api/channel-get).\n```\n\n----------------------------------------\n\nTITLE: Remove Virtual Appointments Policy PowerShell\nDESCRIPTION: This cmdlet deletes a Teams Virtual Appointments Policy. It allows administrators to remove policies that are no longer needed. Teams module and necessary permissions are needed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTeamsVirtualAppointmentsPolicy\n```\n\n----------------------------------------\n\nTITLE: Enabling Push Notifications - PowerShell\nDESCRIPTION: This PowerShell command enables push notifications by setting the `EnableMicrosoftPushNotificationService` parameter to `$True` in the `Set-CsPushNotificationConfiguration` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsPushNotificationConfiguration -EnableMicrosoftPushNotificationService $True\n```\n\n----------------------------------------\n\nTITLE: Set Emergency Calling Policy - PowerShell\nDESCRIPTION: This PowerShell command enables you to configure emergency calling policies within Microsoft Teams.  This includes settings for external location lookup and notifications.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsEmergencyCallingPolicy\n```\n\n----------------------------------------\n\nTITLE: List Server Applications using Get-CsServerApplication - PowerShell\nDESCRIPTION: This cmdlet retrieves information about server applications within the Skype for Business Server environment. It is used to list all the server applications.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-topology-menu.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsServerApplication\n```\n\n----------------------------------------\n\nTITLE: Managing Online Lis Subnet using PowerShell\nDESCRIPTION: These cmdlets are used for managing online Lis subnets. Fixes were made to the Subnet parameter in the modernized cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_128\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set|Remove]-CsOnlineLisSubnet\n```\n\n----------------------------------------\n\nTITLE: Managing Online Dial-In Conferencing Service Number using PowerShell\nDESCRIPTION: These cmdlets are used for managing online dial-in conferencing service numbers. Error handling has been improved.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_121\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set|Register|Unregister]-CsOnlineDialInConferencingServiceNumber\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Education Configuration - PowerShell\nDESCRIPTION: This snippet Contains a new implementation of [Get|Set]-CsTeamsEducationConfiguration. Functionality remains the same as previous implementation. using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_71\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsTeamsEducationConfiguration\n```\n\n----------------------------------------\n\nTITLE: Returning File Content - PowerShell\nDESCRIPTION: This PowerShell function simply returns the `$fileContent` variable. It appears to be a placeholder, or the content manipulation has been omitted.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/control-panel-auth-script.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction  {\n    return $fileContent\n}\n```\n\n----------------------------------------\n\nTITLE: Modify PIN Policy - Skype for Business - PowerShell\nDESCRIPTION: Modifies one or more existing client personal identification number (PIN) policies. This cmdlet modifies an existing PIN policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPinPolicy\n```\n\n----------------------------------------\n\nTITLE: Import Skype for Business Configuration\nDESCRIPTION: Imports Skype for Business Server topology, policies, and configuration settings to either the Central Management store or to the local computer.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/test-disaster-recovery.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsConfiguration -ByteInput <Byte[]> [-Force <SwitchParameter>] [-LocalStore <SwitchParameter>]\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CsConfiguration -FileName <String> [-Force <SwitchParameter>] [-LocalStore <SwitchParameter>]\n```\n\n----------------------------------------\n\nTITLE: Create New Conference Directory - Skype for Business - PowerShell\nDESCRIPTION: Creates a new conference directory for use in the organization.  This cmdlet is used to add a new conference directory with specific settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Releasing Get-M365UnifiedCustomPendingApps cmdlet\nDESCRIPTION: This snippet releases `Get-M365UnifiedCustomPendingApps` cmdlet to get all M365 unified custom pending apps. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-M365UnifiedCustomPendingApps\n```\n\n----------------------------------------\n\nTITLE: Remove Skype for Business Conference Directories using PowerShell\nDESCRIPTION: This PowerShell cmdlet removes Skype for Business Server conference directories. The `-Force` parameter bypasses confirmation prompts during the removal process.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/decommission-remove-on-prem.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferenceDirectory | Remove-CsConferenceDirectory -Force\n```\n\n----------------------------------------\n\nTITLE: Modifying Phone Number in Active Directory\nDESCRIPTION: Describes the process of modifying a user's phone number by modifying the `msRTCSIP-Line` attribute in Active Directory if the attribute already has a value.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Get Call Data Connection\nDESCRIPTION: This PowerShell command retrieves a call data connection object using the New-CsCloudCallDataConnection cmdlet. It's executed from another PowerShell session after the previous commands.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/configure-call-data-connector.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsCloudCallDataConnection\n```\n\n----------------------------------------\n\nTITLE: View Settings of a Tenant Dial Plan\nDESCRIPTION: This command retrieves the settings of a tenant dial plan using the Get-CsTenantDialPlan cmdlet. The Identity parameter specifies the name of the dial plan.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/create-and-manage-dial-plans.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n  Get-CsTenantDialPlan -Identity RedmondDialPlan\n```\n\n----------------------------------------\n\nTITLE: Setting Online Application Instance - PowerShell\nDESCRIPTION: This snippet Adds new parameter AcsResourceId to [Set|Sync]-CsOnlineApplicationInstance cmdlets. This allows configuring AcsResourceId using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_63\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Set|Sync]-CsOnlineApplicationInstance -AcsResourceId\n```\n\n----------------------------------------\n\nTITLE: Restart IIS\nDESCRIPTION: This console command restarts the Internet Information Services (IIS) to apply configuration changes made to AD FS.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nIISReset /Restart /NoForce\n```\n\n----------------------------------------\n\nTITLE: List Available Drives using Microsoft Graph API\nDESCRIPTION: Lists the drives available to the user using the Microsoft Graph API. Requires authentication. Output: List of drives.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_27\n\nLANGUAGE: HTTP\nCODE:\n```\n[List available drives](/onedrive/developer/rest-api/api/drive_list).\n```\n\n----------------------------------------\n\nTITLE: Connecting to MicrosoftTeams for Education Configuration\nDESCRIPTION: This snippet connects to Microsoft Teams using admin credentials, preparing the environment to set the Parent Connection invitation preferences.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/edu-parents-app.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: DBAnalyze Command Line Examples - Console\nDESCRIPTION: These are examples of valid Dbanalyze.exe commands.  Each example utilizes the /report parameter, with varying options for diag, user, conf, resolve, mcus, and disk reporting.  The user, conf, and pstnid report types require additional parameters to function.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndbanalyze.exe /report:diag\ndbanalyze.exe /report:user /user:usera@domainb.com\ndbanalyze.exe /report:conf /user:bob@example.com /conf:1W9J71SKSX2X\ndbanalyze.exe /report:resolve /pstnid:12345\ndbanalyze.exe /report:mcus\ndbanalyze.exe /report:disk\n```\n\n----------------------------------------\n\nTITLE: Configure Site Dial-in Announcements - PowerShell\nDESCRIPTION: This example configures dial-in conferencing settings for the Redmond site.  Announcements are enabled, but participants are not prompted to record their name. A tone plays when participants join or leave.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/join-and-leave-announcements.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialinConferencingConfiguration -Identity site:Redmond\n-EnableNameRecording `$false\n-EntryExitAnnouncementsEnabledByDefault `$true\n-EntryExitAnnouncementsType ToneOnly\n```\n\n----------------------------------------\n\nTITLE: Deleting a Dial-in Conferencing Access Number - PowerShell\nDESCRIPTION: This PowerShell command deletes a specific dial-in conferencing access number based on its Identity. The Identity parameter specifies the SIP URI of the access number to be removed. The command utilizes the Remove-CsDialInConferencingAccessNumber cmdlet to perform the deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/access-numbers.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsDialInConferencingAccessNumber -Identity \"sip:RedmondDialInAccess@litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Get callTranscript via Microsoft Graph API\nDESCRIPTION: Retrieves a specific call transcript using the Microsoft Graph API. Requires authentication and callTranscriptId. Output: Call transcript resource.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_25\n\nLANGUAGE: HTTP\nCODE:\n```\n[Get callTranscript](/microsoftteams/platform/graph-api/meeting-transcripts/api-transcripts#get-calltranscript).\n```\n\n----------------------------------------\n\nTITLE: Deleting Trunk Configurations with Media Bypass Enabled - PowerShell\nDESCRIPTION: This command removes all trunk configuration settings where media bypass is enabled. It uses `Get-CsTrunkConfiguration` to retrieve all configurations, filters them based on the `EnableBypass` property being `$True`, and then pipes the filtered results to `Remove-CsTrunkConfiguration` for deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/delete-trunk-configuration.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrunkConfiguration | Where-Object {$_.EnableBypass -eq $True} | Remove-CsTrunkConfiguration\n```\n\n----------------------------------------\n\nTITLE: Deleting Archiving Policies with Internal Archiving Disabled in Skype for Business using PowerShell\nDESCRIPTION: This PowerShell command retrieves all archiving policies where internal archiving has been disabled (ArchiveInternal -eq $False) and then removes them. This is useful for cleaning up policies that are no longer needed or are misconfigured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/delete-an-existing-policy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsArchivingPolicy | Where-Object {$_.ArchiveInternal -eq $False} | Remove-CsArchivingPolicy\n```\n\n----------------------------------------\n\nTITLE: Updating a Region Link using Set-CsNetworkRegionLink in PowerShell\nDESCRIPTION: This cmdlet updates the properties of an existing network region link in Skype for Business. It requires the Identity parameter to identify the region link to modify, along with parameters specifying the properties to update, such as BWPolicyProfileID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_31\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsNetworkRegionLink -Identity NA_EMEA -BWPolicyProfileID HighBWLimits\n```\n\n----------------------------------------\n\nTITLE: Changing output attribute in Get-CsOnlineTelephoneNumberOrder cmdlet\nDESCRIPTION: This snippet changes the output attribute from `TelephoneNumber` to `TelephoneNumbers` in the `Get-CsOnlineTelephoneNumberOrder` cmdlet. This is a breaking change, requiring updates to scripts that rely on the previous attribute name. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineTelephoneNumberOrder\n```\n\n----------------------------------------\n\nTITLE: Retrieve Skype for Business Reporting Configuration URL - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves the URL used to access the Skype for Business Server Monitoring Reports. It is a fundamental command for locating the reporting interface.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/monitoring-dashboard.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsReportingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule Regular Expression Example\nDESCRIPTION: This example demonstrates how to define a normalization rule manually using regular expressions within Skype for Business Server. The 'Match this pattern' field specifies the regular expression to match the dialed phone number, while the 'Translation rule' field defines the format for translated E.164 phone numbers. This example normalizes 7-digit numbers to E.164 format by prepending +1425.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/normalization-rules.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^(\\d{7})$\n```\n\n----------------------------------------\n\nTITLE: Replacing New-CsOnlineSession with Connect-MicrosoftTeams (2.0.0)\nDESCRIPTION: The New-CsOnlineSession cmdlet is deprecated and replaced with Connect-MicrosoftTeams. Enable-csonlinesessionforreconnection is no longer required as reconnection is natively implemented.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_158\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Move Conference Directory - Skype for Business - PowerShell\nDESCRIPTION: Moves an existing conference directory from one pool to another. This allows the administrator to relocate conference directories.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nMove-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Get Supported Languages using PowerShell\nDESCRIPTION: This cmdlet retrieves the supported languages for online dial-in conferencing and error handling has been improved.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_122\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineDialInConferencingLanguagesSupported\n```\n\n----------------------------------------\n\nTITLE: Managing Online Dial-In Conferencing User using PowerShell\nDESCRIPTION: These cmdlets are used for managing online dial-in conferencing user settings. Error handling has been improved.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_119\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsOnlineDialInConferencingUser\n```\n\n----------------------------------------\n\nTITLE: Set Call Park Policy - PowerShell\nDESCRIPTION: This PowerShell command allows you to modify call park policies in Microsoft Teams. It requires the Teams PowerShell module to be installed and configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsCallParkPolicy\n```\n\n----------------------------------------\n\nTITLE: Getting Phone Number Assignment using PowerShell\nDESCRIPTION: This cmdlet retrieves phone number assignments. City and IsoSubdivision attributes have been added to the output.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_125\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPhoneNumberAssignment\n```\n\n----------------------------------------\n\nTITLE: Assigning Voicemail Policy - PowerShell\nDESCRIPTION: This cmdlet assigns a Cloud Voicemail policy to a specific user or group of users. It determines the voicemail settings applied to those users.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voicemail-policies.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsOnlineVoicemailPolicy\n```\n\n----------------------------------------\n\nTITLE: Verifying VDI Cmdlets Availability in Teams PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all commands with the noun 'VDI' within the Microsoft Teams PowerShell module. This allows verification that the necessary cmdlets for managing VDI policies are available and correctly installed. The command is typically run after connecting to the Microsoft Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Command -Noun *VDI*\n```\n\n----------------------------------------\n\nTITLE: Enabling Third-Party Meetings via XML Configuration\nDESCRIPTION: This XML snippet demonstrates how to enable Webex and Zoom meetings within the SkypeSettings.xml configuration file for Microsoft Teams Rooms. Setting the corresponding XML elements to `True` enables the respective platforms.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/third-party-join.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<WebexMeetingsEnabled>True</WebexMeetingsEnabled>\n<ZoomMeetingsEnabled>True</ZoomMeetingsEnabled>\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Call Via Work Global Phone Number (PowerShell)\nDESCRIPTION: This example sets the global phone number for Call Via Work to +15551234567. It is a demonstration of the Set-CsRoutingConfiguration cmdlet with a specific phone number.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-call-via-work.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsRoutingConfiguration -CallViaWorkCallerId +15551234567\n```\n\n----------------------------------------\n\nTITLE: Remove Teams Exploratory License via PowerShell\nDESCRIPTION: This snippet references an external article that guides on how to remove licenses from user accounts using Office 365 PowerShell. This is used in the context of removing the Teams Exploratory license. The linked article contains specific PowerShell commands for this task.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-exploratory.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSee [Remove licenses from user accounts with Office 365 PowerShell](/office365/enterprise/powershell/remove-licenses-from-user-accounts-with-office-365-powershell).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Voicemail Policy - PowerShell\nDESCRIPTION: This cmdlet retrieves Cloud Voicemail policies. Administrators can use it to view the configuration settings of existing voicemail policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/manage-voicemail-policies.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineVoicemailPolicy\n```\n\n----------------------------------------\n\nTITLE: Configure Call Park Port - PowerShell\nDESCRIPTION: This snippet refers to using the Set-CsApplicationServer cmdlet to change the default SIP listening port for the Call Park application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/call-park.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsApplicationServer\n```\n\n----------------------------------------\n\nTITLE: Connecting to Microsoft Teams - PowerShell\nDESCRIPTION: This command initiates a connection to Microsoft Teams using your Azure credentials. It is necessary to execute this command before running any Teams-related PowerShell commands.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-install.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-MicrosoftTeams\n```\n\n----------------------------------------\n\nTITLE: Adding LobbyChats, NoiseSuppressionForDialInParticipants parameters\nDESCRIPTION: This snippet adds `LobbyChats`, `NoiseSuppressionForDialInParticipants` parameters to `[New|Set]-CsTeamsMeetingPolicy`. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_34\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsMeetingPolicy\n```\n\n----------------------------------------\n\nTITLE: Set Caller ID - PowerShell\nDESCRIPTION: This PowerShell command lets you configure Caller ID settings for users in Microsoft Teams. This command also requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/settings-policies-reference.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsCallingLineIdentity\n```\n\n----------------------------------------\n\nTITLE: Modify Dial Plan Settings - Skype for Business - PowerShell\nDESCRIPTION: Modifies an existing dial plan. This cmdlet enables modifications to the settings of existing dial plans.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsDialPlan\n```\n\n----------------------------------------\n\nTITLE: Add AD FS PowerShell Snap-in\nDESCRIPTION: This PowerShell command adds the Microsoft.Adfs.PowerShell snap-in, which is necessary to execute AD FS cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nadd-pssnapin Microsoft.Adfs.PowerShell\n```\n\n----------------------------------------\n\nTITLE: Change Directory Command\nDESCRIPTION: This command changes the current directory in the command prompt to the folder where the EWSManagedAPI.msi file is saved. It requires the path to the directory where the file is located as an input. This step is necessary to execute the installer from the correct location.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/sharepoint-to-search-for-archived-data.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncd C:\\Downloads\n```\n\n----------------------------------------\n\nTITLE: Deleting a Network Region with Remove-CsNetworkRegion (PowerShell)\nDESCRIPTION: This snippet removes a network region from Skype for Business Server. The `-Identity` parameter specifies the unique identifier of the region to remove. The example removes the region named \"NorthAmerica\". Ensure the region is not in use before removal.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-network-configuration-menu.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsNetworkRegion -Identity NorthAmerica\n```\n\n----------------------------------------\n\nTITLE: Applying Group Policy Update (cmd)\nDESCRIPTION: This command forces a Group Policy update on the target user's computer. It ensures that the newly created or modified GPO is applied to the user's profile.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/configure-the-client-experience.md#_snippet_9\n\nLANGUAGE: batch\nCODE:\n```\npupdate /target:user\n```\n\n----------------------------------------\n\nTITLE: Enabling Computer Configuration Changes\nDESCRIPTION: After changing a simple URL name in Skype for Business Server, this cmdlet is necessary to register the change across all Director and Front End Servers, ensuring the new simple URL is properly recognized and utilized.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/network-requirements/simple-urls.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-CsComputer\n```\n\n----------------------------------------\n\nTITLE: Remove Teams Files Policy for All Users using Remove-CsTeamsFilesPolicy - PowerShell\nDESCRIPTION: This PowerShell command removes the Teams Files policy for the entire organization. Use with caution as this can impact all users in the tenant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/admin-settings-for-file-drag-drop-to-third-party-storage.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsTeamsFilesPolicy\n```\n\n----------------------------------------\n\nTITLE: Executing LookupUserConsole\nDESCRIPTION: This snippet demonstrates the execution of the LookupUserConsole.exe tool from the Skype for Business Server 2015 ResKit to retrieve information about a specific user. It shows how to query user details and interpret the tool's output, including user properties and cluster information.  The command is executed from the command line.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nC:\\Program Files\\Skype for Business Server 2015\\ResKit\\>LookupUserConsole.exe\n\n> sip:john.doe@vdomain.com\n\n  Execution time (ms):                            171.094\n  Exeuction result:                               Success\n  SIP URI:                                        sip:john.doe@vdomain.com\n  User info:\n    SID:                                          S-1-5-21-2831376166-29632525...    Display name:                                     John Doe\n    Grouping ID:                                  00000000-0000-0000-0000-...\n    Line URI:                                     <null>\n    Policy assignment:                            TenantId={00000000--0000-000....\n    SIP enabled:                                  True\n    UC enabled:                                   False\n    Tenant ID:                                    00000000-0000-0000-0000-...\n  Cluster info:\n    Active cluster:                               pool0.vdomain.com\n    Backup registrar cluster:                     <null>\n    Deployment location:                          <null>\n    Home Front-End FQDN:                          SERVER.vdomain.com\n    Primary Registrar cluster:                    pool0.vdomain.com\n    Remote Director external SIP FQDN:            <null>\n    Remote Director internal SIP FQDN:            <null>\n    Remote Director Web FQDN:                     <null>\n    Routing group ID:                             4501e04e-ae48-5605-9346...\n    Service tag ID:                               1266953005\n    User Front-End resolved:                      True\n    User in local forest:                         True\n    User in remote forest:                        False\n    User in split domain:                         False\n    User-Services cluster:                        pool0.vdomain.com\n\n> sip:nouser@vdomain.com\n\n  Execution time (ms):                            948.7574\n  Exeuction result:                               UserDoesNotExist\n\n> exit\n```\n\n----------------------------------------\n\nTITLE: Changing the Default Domain for Bookings Mailbox using PowerShell\nDESCRIPTION: This PowerShell snippet is used to change the default domain associated with a Bookings mailbox. It updates the mailbox's `WindowsEmailAddress` and `EmailAddresses` attributes.  This is necessary when the default domain causes issues with sending meeting invites to external recipients. It requires the Exchange PowerShell module to be installed and connected to the Microsoft 365 tenant.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/bookings-app-admin.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-Mailbox -identity business@domain.onmicrosoft.com -WindowsEmailAddress business@domain.com -EmailAddresses business@domain.com\n```\n\n----------------------------------------\n\nTITLE: Set Autodiscover URL - PowerShell\nDESCRIPTION: This PowerShell command sets the Autodiscover URL for a specified hosting provider in Skype for Business Server. The Identity parameter specifies the domain name of the shared SIP address space and the AutodiscoverUrl parameter sets the new URL.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsHostingProvider -Identity [identity] -AutodiscoverUrl https://webdir.online.lync.com/autodiscover/autodiscoverservice.svc/root\n```\n\n----------------------------------------\n\nTITLE: Executing RunClient Batch Script - Console\nDESCRIPTION: This command demonstrates how to execute the RunClient batch script for the Skype for Business Stress and Performance Tool.  It requires the path to the LyncStress directory as a parameter. The batch script will run all configuration files in that client's folder.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/stress-and-performance-tool/using-the-tool.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nRunClient0.bat \"C:\\Program Files\\Skype for Business Server 2015\\LyncStressAndPerfTool\\LyncStress\"\n```\n\n----------------------------------------\n\nTITLE: Managing Tenant Federation Configuration using PowerShell\nDESCRIPTION: This cmdlet modifies the tenant federation configuration and the PSListModifier was fixed in the AllowedDomainsAsAList parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_116\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTenantFederationConfiguration\n```\n\n----------------------------------------\n\nTITLE: Adding ImmersiveEvents parameter to CsTeamsEventsPolicy cmdlets\nDESCRIPTION: This snippet adds `ImmersiveEvents` parameter to `[New|Set]-CsTeamsEventsPolicy`. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_30\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsEventsPolicy\n```\n\n----------------------------------------\n\nTITLE: Test AV Conference - PowerShell\nDESCRIPTION: Tests the ability of a pair of users to take part in an audio/video (A/V) conference.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_55\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsAVConference\n```\n\n----------------------------------------\n\nTITLE: Updating Teams Education Configuration - PowerShell\nDESCRIPTION: This snippet Adds new parameter UpdateParentInformation to TeamsEducationConfiguration cmdlets using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_73\n\nLANGUAGE: PowerShell\nCODE:\n```\nTeamsEducationConfiguration -UpdateParentInformation\n```\n\n----------------------------------------\n\nTITLE: Forcing Group Policy refresh using Gpupdate.exe\nDESCRIPTION: This snippet explains how to force an immediate refresh of Group Policy on computers, ensuring that the newly created QoS policies take effect. The command 'Gpudate.exe /force' is used for this purpose, and it needs to be run from a command window with administrator credentials.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-edge-servers.md#_snippet_4\n\nLANGUAGE: CommandLine\nCODE:\n```\nGpudate.exe /force\n```\n\n----------------------------------------\n\nTITLE: Enable Topology Changes using PowerShell\nDESCRIPTION: This PowerShell command enables the changes made to the Skype for Business Server topology. It's essential to run this command after creating trusted application pools and applications to ensure that the new configuration takes effect.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-CsTopology\n```\n\n----------------------------------------\n\nTITLE: Get CsAutoAttendantStatus using PowerShell\nDESCRIPTION: This cmdlet retrieves the status of an auto attendant. It now supports the IncludeResources parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_108\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAutoAttendantStatus\n```\n\n----------------------------------------\n\nTITLE: Get Shared With Team User using PowerShell\nDESCRIPTION: This cmdlet is used to retrieve users who have shared a team with them.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_103\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SharedWithTeamUser\n```\n\n----------------------------------------\n\nTITLE: Adding AnonymousUserAuthenticationMethod parameter\nDESCRIPTION: This snippet adds `AnonymousUserAuthenticationMethod` parameter to `[New|Set]-CsTeamsMeetingPolicy`. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_31\n\nLANGUAGE: PowerShell\nCODE:\n```\n[New|Set]-CsTeamsMeetingPolicy\n```\n\n----------------------------------------\n\nTITLE: Remove Messages from Chat Room - PowerShell\nDESCRIPTION: This PowerShell command removes all messages from the specified chat room posted by a specific user. It requires the Identity of the chat room and the UserUri of the user whose messages should be removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/chat-rooms.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsPersistentChatMessage -Identity \"atl-persistentchat-001.contoso.com\\ITChatRoom\" -UserUri \"sip:kenmyer@contoso.com\"\n```\n\n----------------------------------------\n\nTITLE: Add/Remove User Team Members - PowerShell\nDESCRIPTION: This command allows adding or removing team members from a user's team in Skype for Business Server using PowerShell. The Team parameter allows specifying the members to add or remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/sefautil-functionality.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsUserTeamMembers -Identity <UserIdParameter> [-Team @{add=[list]}] [-Team @{remove=[list]}]\n```\n\n----------------------------------------\n\nTITLE: Transforming Persistent Chat XML Data - XSLT\nDESCRIPTION: This code sample provides an XSL Transform (XSLT) stylesheet to transform the XML data generated by the Skype for Business Compliance Server's persistent chat logging feature. The XSLT converts the XML output from the Compliance Server into a specific format, extracting and reformatting information about conversations, messages, users and timestamps. It defines templates to match specific elements in the input XML and produce corresponding elements in the output XML.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" exclude-result-prefixes=\"xs\">\n   <xsl:output method=\"xml\" encoding=\"UTF-8\" indent=\"yes\" />\n\n   <xsl:template match=\"/\">\n      <FileDump>\n         <xsl:apply-templates />\n      </FileDump>\n   </xsl:template>\n\n   <xsl:template match=\"Conversation\">\n      <xsl:variable name=\"chanName\" select=\"Channel/@name\" />\n      <Conversation Perspective=\"{$chanName}_group_channel\">\n         <RoomID><xsl:value-of select=\"Channel/@name\" /></RoomID>\n         <StartTimeUTC><xsl:value-of select=\"StartTimeUTC/@since1970\" /></StartTimeUTC>\n         <xsl:apply-templates />\n         <EndTimeUTC><xsl:value-of select=\"EndTimeUTC/@since1970\" /></EndTimeUTC>\n      </Conversation>\n   </xsl:template>\n\n   <xsl:template match=\"Message\">\n      <xsl:choose>\n         <xsl:when test=\"@type='JOIN'\">\n            <ParticipantEntered>\n               <xsl:call-template name=\"DateTimeAndLogin\" />\n               <InternalFlag><xsl:value-of select=\"Sender/@internal\" /></InternalFlag>\n               <ConversationID><xsl:value-of select=\"../../Channel/@name\" /></ConversationID>\n               <CorporateEmailID><xsl:value-of select=\"Sender/@email\" /></CorporateEmailID>\n            </ParticipantEntered>\n         </xsl:when>\n\n         <xsl:when test=\"@type='PART'\">\n            <ParticipantLeft>\n               <xsl:call-template name=\"DateTimeAndLogin\" />\n               <InternalFlag><xsl:value-of select=\"Sender/@internal\" /></InternalFlag>\n               <ConversationID><xsl:value-of select=\"../../Channel/@name\" /></ConversationID>\n               <CorporateEmailID><xsl:value-of select=\"Sender/@email\" /></CorporateEmailID>\n            </ParticipantLeft>\n         </xsl:when>\n\n         <xsl:when test=\"@type='FILEUPLOAD' or @type='FILEDOWNLOAD'\">\n            <FileTransferStarted>\n               <xsl:call-template name=\"DateTimeAndLogin\" />\n               <FileName><xsl:value-of select=\"@content\" /></FileName>\n            </FileTransferStarted>\n            <FileTransferEnded>\n               <xsl:call-template name=\"DateTimeAndLogin\" />\n               <FileName><xsl:value-of select=\"@content\" /></FileName>\n               <Status>Completed</Status>\n            </FileTransferEnded>\n         </xsl:when>\n\n         <xsl:when test=\"@type='CHAT' or @type='BACKCHAT'\">\n            <Message>\n               <xsl:call-template name=\"DateTimeAndLogin\" />\n               <Content><xsl:value-of select=\"@content\" /></Content>\n            </Message>\n         </xsl:when>\n\n         <xsl:otherwise />\n      </xsl:choose>\n   </xsl:template>\n\n   <xsl:template name=\"DateTimeAndLogin\">\n      <LoginName><xsl:value-of select=\"Sender/@userName\" /></LoginName>\n      <DateTimeUTC><xsl:value-of select=\"DateTimeUTC/@since1970\" /></DateTimeUTC>\n   </xsl:template>\n</xsl:stylesheet>\n```\n\n----------------------------------------\n\nTITLE: Running SEFAUtil to display call forwarding - Console\nDESCRIPTION: This command-line command runs the SEFAUtil tool to display the call forwarding settings of a specific user. It requires the user's SIP address and the Lync Server/Pool FQDN as parameters.  This is a verification step to ensure the SEFAUtil tool is functioning correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deploy-the-sefautil-tool.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe <user SIP address> /server:<Lync Server/Pool FQDN>\n```\n\n----------------------------------------\n\nTITLE: Create Site-Scoped CDR Configuration - PowerShell\nDESCRIPTION: This command creates new Call Detail Recording (CDR) configuration settings at the site scope for the \"Redmond\" site.  It disables CDR monitoring for users within the Redmond site by setting the EnableCDR property to $False. The New-CsCdrConfiguration cmdlet is used to create the configuration with the specified identity and settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/call-detail-recording-and-qoe.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsCdrConfiguration -Identity \"site:Redmond\" -EnableCDR $False\n```\n\n----------------------------------------\n\nTITLE: Get User Setting Response Payload Example JSON\nDESCRIPTION: This JSON payload represents a successful response from the Get User Setting operation. It contains the userId, the key of the setting and the value of the setting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-user-setting.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"userId\": 6,\n\"key\": \"ShowDescriptions\",\n\"value\": \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Education PLC Team Template ID in Microsoft Graph\nDESCRIPTION: This snippet shows the Microsoft Graph URL for referencing the 'educationProfessionalLearningCommunity' team template. This template is designed for professional learning communities in educational institutions and includes the OneNote PLC Notebook app pinned to the General tab.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/get-started-with-teams-templates.md#_snippet_3\n\nLANGUAGE: URL\nCODE:\n```\n`https://graph.microsoft.com/v1.0/`<br>`teamsTemplates('educationProfessionalLearningCommunity')`\n```\n\n----------------------------------------\n\nTITLE: Configuring Teams Rooms Theming with XML\nDESCRIPTION: This XML snippet demonstrates how to configure custom backgrounds for Microsoft Teams Rooms using the `<Theming>` element. It sets the theme name to `Custom` and specifies the filenames for the main, extended, and touch console displays. This configuration is applied through the Teams Rooms XML configuration file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/custom-backgrounds.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Theming> \n    <ThemeName>Custom</ThemeName> \n    <CustomBackgroundMainFoRDisplay>ContosoBackground-Right-FoR.jpg</CustomBackgroundMainFoRDisplay> \n    <CustomBackgroundExtendedFoRDisplay>ContosoBackground-Left-FoR.jpg</CustomBackgroundExtendedFoRDisplay> \n    <CustomBackgroundConsole>ContosoBackground-Console.jpg</CustomBackgroundConsole> \n</Theming> \n```\n\n----------------------------------------\n\nTITLE: Test UCWA Conference - PowerShell\nDESCRIPTION: Tests the ability of a pair of users to schedule, join, and then conduct an online conference using the Unified Communications Web API (UCWA).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_60\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsUcwaConference\n```\n\n----------------------------------------\n\nTITLE: Analyzing vdiBridgeEventsHandler Logs\nDESCRIPTION: This snippet shows log entries from the vdiBridgeEventsHandler, which are crucial for diagnosing VDI connection-related issues. It provides insight into the connection and disconnection event handlings, including the VDI mode, calling stack status, and version information. Analyzing these logs helps determine if the connection was successful and identify any version mismatches or other errors.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/vdi-2.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n7432 2024-03-01T17:51:22.032Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - onConnected: end, currentStack=remote\n7435 2024-03-01T17:51:22.032Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - new calling stack type set: currentStack=remote\n7436 2024-03-01T17:51:22.032Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - deviceManagerService reloaded\n7445 2024-03-01T17:51:22.031Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - calling stack reinit complete with nextStack=remote\n7464 2024-03-01T17:51:21.785Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - starting calling stack reinit with nextStack=remote\n7465 2024-03-01T17:51:21.785Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - SlimCore replacement complete, remote is now available\n7467 2024-03-01T17:51:21.783Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - setVDIOptimizationModeOverride: from SlimCore to SlimCore\n7468 2024-03-01T17:51:21.782Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - onConnected: isVersionMismatch=false, forceVersion=undefined, bridgeVersion=2024.5.1.11\n7469 2024-03-01T17:51:21.782Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - cached local SlimCore for future (fallback), currentStack=local\n7470 2024-03-01T17:51:21.782Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - onConnected: start, vendorType=1, remoteSlimcoreVersion=2024.05.01.11, platform=win-x86, loadErrc=1, deployErrc=24002, nodeId=ffffffffbd7d5e77\n7471 2024-03-01T17:51:21.782Z Inf    vdiBridgeEventsHandler: VDI Mode: slimcore - enqueueBridgeCallback: adding onConnected to queue, 0 bridge callbacks in queue, isBridgeCallbacksQueueProcessing=false\n```\n\n----------------------------------------\n\nTITLE: Get Associated Team using PowerShell\nDESCRIPTION: This cmdlet is used to retrieve the team associated with a specific channel or resource.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_102\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AssociatedTeam\n```\n\n----------------------------------------\n\nTITLE: List All Announcements - PowerShell\nDESCRIPTION: This PowerShell cmdlet retrieves a list of all announcements configured in the Skype for Business Server environment.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-an-announcement.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAnnouncement\n```\n\n----------------------------------------\n\nTITLE: Test Dial-In Conferencing - PowerShell\nDESCRIPTION: Checks to see if a user can take part in a dial-in conferencing session.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_57\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsDialInConferencing\n```\n\n----------------------------------------\n\nTITLE: Get Incoming Channels of a Team using PowerShell\nDESCRIPTION: This cmdlet is used to retrieve all incoming channels of a specific team.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_101\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-TeamIncomingChannel\n```\n\n----------------------------------------\n\nTITLE: Creating a new Registry key for QoS\nDESCRIPTION: This snippet provides instructions on how to create a new registry key and a string value to configure QoS settings. It involves navigating to the 'Tcpip' key in the Registry Editor, creating a new key named 'QoS', and then creating a string value named 'Do not use NLA' within the 'QoS' key. The value of 'Do not use NLA' is set to 1.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-edge-servers.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\n1.  Click **Start**, and then click **Run**.\n\n2.  In the **Run** dialog box, type **regedit**, and then press ENTER.\n\n3.  In the Registry Editor, expand **HKEY_LOCAL_MACHINE**, expand **SYSTEM**, expand **CurrentControlSet**, expand **services**, and then expand **Tcpip**.\n\n4.  Right-click **Tcpip**, point to **New**, and then click **Key**. After the new registry key is created, type **QoS**, and then press ENTER to rename the key.\n\n5.  Right-click **QoS**, point to **New**, and then click **String Value**. After the new registry value is created, type **Do not use NLA**, and then press ENTER to rename the value.\n\n6.  Double-click **Do no use NLA**. In the **Edit String** dialog box, type **1** in the **Value data** box, and then click **OK**.\n\n7.  Close the Registry Editor and reboot your computer.\n```\n\n----------------------------------------\n\nTITLE: Retrieving PIN Policy Information using Get-CsPinPolicy (PowerShell)\nDESCRIPTION: This snippet shows how to retrieve information about a specific PIN policy using the `Get-CsPinPolicy` cmdlet. It retrieves the PIN policy with the identity \"site:Redmond\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/pin-policies.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsPinPolicy -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Microsoft 365 Groups\nDESCRIPTION: This PowerShell command retrieves a list of soft-deleted Microsoft 365 groups within the retention period. The DirectoryObjectId is the ID of the directory object you're trying to retrieve. The `-All $True` parameter is used when the number of deleted items is large.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/archive-or-delete-a-team.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MgDirectoryDeletedItem -DirectoryObjectId [Id]\n```\n\n----------------------------------------\n\nTITLE: Managing Resource Mailboxes in Exchange Online\nDESCRIPTION: Provides a reference to managing resource mailboxes in Exchange Online, enabling administrators to configure Teams devices to display available resources. It links to external documentation for detailed instructions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/devices-release-notes.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Filtering sessions by audio modality\nDESCRIPTION: This snippet filters the imported data to only include sessions that involved audio. It then groups the sessions by the 'From user' and lists the users in descending order based on their audio session count. This is useful for analyzing audio usage within the system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/call-diagnostic-reports-per-user.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x | Where-Object {$_.Modalities -match \"audio\"} | Group-Object \"From user\" | Select Count, Name | Sort-Object Count -Descending\n```\n\n----------------------------------------\n\nTITLE: CLS Logging Search on One Computer - PowerShell\nDESCRIPTION: This command initiates a search using the Centralized Logging Service (CLS) on a single, specific computer defined by its FQDN. The `-Computers` parameter is set to \"fe01.contoso.net\", and the output is saved to \"C:\\LogFiles\\logfile.txt\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/search-capture-logs.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSearch-CsClsLogging -Computers \"fe01.contoso.net\" -OutputFilePath \"C:\\LogFiles\\logfile.txt\"\n```\n\n----------------------------------------\n\nTITLE: Example Network Region Creation - PowerShell\nDESCRIPTION: This snippet provides an example of creating a network region named \"APAC\". The `NetworkRegionID` parameter is used to specify the name of the region.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-media-optimization-configure.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsTenantNetworkRegion -NetworkRegionID \"APAC\"\n```\n\n----------------------------------------\n\nTITLE: HTML Structure and CSS Styling\nDESCRIPTION: This snippet defines the HTML structure for the scorecard, using tables and divs.  It includes CSS styles for layout, colors, and fonts to create the visual presentation. The CSS styles define classes for row and column arrangements using a table-cell display. The HTML contains several divs and tables which render the layout and some basic elements like a \"Scoreboard Sample\" title.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv='cache-control' content='no-cache'>\n    <meta http-equiv='expires' content='0'>\n    <meta http-equiv='pragma' content='no-cache'>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>Scoreboard Sample</title>\n\n    <style>\n        .row {\n            margin-right: -15px;\n            margin-left: -15px;\n            display: table-row;\n        }\n        .col-md-3 {\n            width: 25%;\n            display: table-cell;\n        }\n        .col-md-2 {\n            width: 16.66666667%;\n            display: table-cell;\n        }\n        .col-md-1 {\n            width: 8.33333333%;\n            display: table-cell;\n        }\n\n    </style>\n</head>\n<body>    \n\n    <!-- Third party Libraries -->\n    <script src=\"OpenSourceSoftware/Scripts/jquery-2.1.1.js\"></script>\n\n    <table id=\"ScoreCardTable\" style=\"margin:100px\">\n        <tr>\n            <td width=\"250px\" style=\"text-align: center; font-size: 24px; font-family: 'Segoe UI'; font-weight: lighter; color: white; background-color: #505050\">\n                <div style=\"margin:10px\">Scoreboard Sample</div>\n            </td>\n            <td width=\"1200px\">\n                <div style=\"margin:10px;background-color:#D9D9D9\" >\n                    <div class=\"row\" id=\"Header\" style=\"font-size:24px;font-family:'Segoe UI';font-weight:lighter;color:white;background-color:#505050\">\n                        <div class=\"col-md-3\">Poor Call %</div>\n                        <div class=\"col-md-1\">Month1</div>\n                        <div class=\"col-md-1\">Month2</div>\n                        <div class=\"col-md-1\">Month3</div>\n                        <div class=\"col-md-1\">Month4</div>\n                        <div class=\"col-md-1\">Month5</div>\n                        <div class=\"col-md-1\">Month6</div>\n                    </div>                    \n                    <div class=\"row\"><div class=\"col-md-3\" style=\"font-weight:bold\">Wired</div></div>\n                    <div class=\"row\" id=\"SS\"><div class=\"col-md-3\">Server-Server</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\" id=\"SWI\"><div class=\"col-md-3\">Server-Client (inside)</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\" id=\"SWO\"><div class=\"col-md-3\">Server-Client (outside)</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\" id=\"WWI\"><div class=\"col-md-3\">Client-Client (inside)</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\" id=\"WIWO\"><div class=\"col-md-3\">Client-Client (outside)</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\"><div class=\"col-md-3\" style=\"font-weight:bold\">Wireless</div></div>\n                    <div class=\"row\" id=\"SWFI\"><div class=\"col-md-3\">Server-Client (inside)</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\" id=\"SWFO\"><div class=\"col-md-3\">Server-Client (outside)</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\" id=\"WFIWFI\"><div class=\"col-md-3\">Client-Client (inside)</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\" id=\"WFOWFO\"><div class=\"col-md-3\">Client-Client (outside)</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\"><div class=\"col-md-3\" style=\"font-weight:bold\">Mobile/Broadband</div></div>\n                    <div class=\"row\" id=\"SMP\"><div class=\"col-md-3\">Server-MobilePhone</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\" id=\"SMBB\"><div class=\"col-md-3\">Server-MobileBroadBand</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                    <div class=\"row\"><div class=\"col-md-3\" style=\"font-weight:bold\">Lync Web App</div></div>\n                    <div class=\"row\" id=\"SLWA\"><div class=\"col-md-3\">Server-Client (inside &amp; outside)</div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"></div></div>\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td><br /></td>\n        </tr>\n    </table>\n\n```\n\n----------------------------------------\n\nTITLE: Video Stream Classification Logic - CQD\nDESCRIPTION: This snippet describes the logic to classify video streams as Good or Poor in the Call Quality Dashboard (CQD). It checks Video Local Frame Loss Percentage Avg, Video Frame Rate Avg, and Video Post FECPLR in that order, given a packet utilization greater than 500 packets.  Classification proceeds to the next step if a metric is unavailable.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/stream-classification-in-call-quality-dashboard.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAssuming a video stream's Packet Utilization is > 500 packets, the video stream is marked as _Good_ or _Poor_ based on the value of the first available metric in the following order:\n\n|Step #|Metric|Condition |Classification if Condition is True |Classification if Condition is False |Classification if Metric is Unavailable |Explanation |\n|:--- |:--- |:--- |:--- |:--- |:--- |:--- |\n|1|Video Local Frame Loss Percentage Avg|> 50% |_Poor_|_Good_|Proceed to step 2|Average percentage of video frames lost as displayed to the user. The average includes frames recovered from network losses.|\n|2|Video Frame Rate Avg|< 7|_Poor_|_Good_|Proceed to step 3|Average frames per second received for a video stream, computed over the duration of the session.|\n|3|Video Post FECPLR|> 0.15|_Poor_|_Good_|_Unclassified_|Packet loss rate after FEC has been applied, aggregated across all video streams and codecs.|\n```\n\n----------------------------------------\n\nTITLE: Install Watcher Node using PowerShell\nDESCRIPTION: This PowerShell command installs the Watcher Node using the Watchernode.msi installer. The Authentication parameter specifies the authentication method to be used (TrustedServer in this case). This command is executed after core components and Operations Manager agent are installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\Tools\\Watchernode.msi Authentication=TrustedServer\n```\n\n----------------------------------------\n\nTITLE: Querying Audio Feedback Data using SQL\nDESCRIPTION: This SQL query retrieves audio feedback data from the Skype for Business monitoring database. It joins several tables, including [Session], [MediaLine], [AudioStream], [CallQualityFeedback], [CallQualityFeedbackToken], [CallQualityFeedbackTokenDef], and [User], to extract relevant information about audio call quality feedback. The query filters for audio-related feedback using the TokenId.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/rate-my-call.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n        s.ConferenceDateTime\n        ,Caller.URI as Caller\n        ,CallerCqf.FeedbackText \n        ,CallerCqf.Rating\n        ,CallerCqfTokenDef.TokenDescription \n        ,CallerCqfToken.TokenValue\n    FROM [Session] s WITH (NOLOCK)\n        INNER JOIN [MediaLine] AS m WITH (NOLOCK) ON \n            m.ConferenceDateTime = s.ConferenceDateTime\n            AND m.SessionSeq = s.SessionSeq                        \n        INNER JOIN [AudioStream] AS a WITH (NOLOCK) ON -- only look at Audio related feedback\n            a.MediaLineLabel = m.MediaLineLabel    \n            and a.ConferenceDateTime = m.ConferenceDateTime \n            and a.SessionSeq = m.SessionSeq\n            and a.SenderIsCallerPAI = 1                \n        INNER JOIN [CallQualityFeedback] AS CallerCqf WITH (NOLOCK) ON\n            CallerCqf.ConferenceDateTime  = s.ConferenceDateTime \n            and\n            CallerCqf.SessionSeq = s.SessionSeq \n        INNER JOIN [CallQualityFeedbackToken] AS CallerCqfToken WITH (NOLOCK) ON\n            CallerCqfToken.ConferenceDateTime  = s.ConferenceDateTime \n            and\n            CallerCqfToken.SessionSeq = s.SessionSeq\n            and\n            CallerCqfToken.FromURI = CallerCqf.FromURI\n        INNER JOIN [CallQualityFeedbackTokenDef] AS CallerCqfTokenDef WITH (NOLOCK) ON\n            CallerCqfTokenDef.TokenId = CallerCqfToken.TokenId\n            and\n            (CallerCqfToken.TokenId < 20 or (CallerCqfToken.TokenId > 100 and CallerCqfToken.TokenId < 200)) -- only look at Audio related feedback\n        INNER JOIN [User] AS Caller WITH (NOLOCK) ON\n            Caller.UserKey = CallerCqf.FromURI\n```\n\n----------------------------------------\n\nTITLE: Registering Performance Counters - Console\nDESCRIPTION: This command registers the performance counters required by the LyncPerfTool.exe. It uses the `regsvr32` utility to register the `LyncPerfToolPerf.dll` file. The `/i`, `/n`, and `/s` flags specify silent installation without user interaction.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/stress-and-performance-tool/using-the-tool.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nregsvr32 /i /n /s LyncPerfToolPerf.dll\n```\n\n----------------------------------------\n\nTITLE: Defining Terminate Action for Skype for Business Queue - PowerShell\nDESCRIPTION: This PowerShell code snippet defines an action to terminate a call in a Skype for Business Response Group queue when a timeout or overflow condition is met. It leverages the `New-CsRgsCallAction` cmdlet and references a previously defined prompt. The resulting action is then stored in the `$action` variable. It assumes the `$promptTO` variable contains a valid prompt object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-or-modify-a-queue.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$action = New-CsRgsCallAction -Prompt $promptTO -Action Terminate\n```\n\n----------------------------------------\n\nTITLE: Generate HTML Group Policy Results Report using Command Prompt\nDESCRIPTION: This command generates a report of applied Group Policy Objects (GPOs) in HTML format and saves it as gp.html. The `/H` switch specifies the output file name and format. This provides a more readable report compared to the text format. The command should be executed with administrator privileges.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/QoS-in-Teams-clients.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ngpresult /H gp.html\n```\n\n----------------------------------------\n\nTITLE: Create Transport Rule to Delete Inbound Mail in Exchange Online PowerShell\nDESCRIPTION: This PowerShell script creates a new transport rule named \"Delete all except Calendaring\" in Exchange Online. The rule deletes all messages from outside the organization, except those with a message type matching Calendaring. It requires the ExchangeOnlineManagement module to be installed and a connection to Exchange Online to be established.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/connect-teams-essentials-to-email.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-ExchangeOnline\nNew-TransportRule -Name \"Delete all except Calendaring\" -ExceptIfMessageTypeMatches Calendaring -FromScope NotInOrganization -DeleteMessage:$true\n```\n\n----------------------------------------\n\nTITLE: Testing Teams Translation Rule using PowerShell\nDESCRIPTION: This cmdlet tests Teams translation rules.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_118\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsTeamsTranslationRule\n```\n\n----------------------------------------\n\nTITLE: Confirming Phone System Provisioning\nDESCRIPTION: This PowerShell script confirms that users with Phone System functionality have been provisioned correctly.  It imports user data from \"c:\\data\\SfbUsers.csv\", retrieves each user's online information using `Get-CsOnlineUser`, and compares their LineURI and EnterpriseVoiceEnabled properties against the values from the CSV. If a discrepancy is found, it displays the user's information for troubleshooting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n$sfbusers=import-csv \"c:\\data\\SfbUsers.csv\"\nforeach($user in $sfbusers)\n{\nif($user.LineUri)\n     {\n             $u=Get-CsOnlineUser -Identity $user.SipAddress\n             if ($u.LineURI -ne $user.LineUri -or $u.EnterpriseVoiceEnabled -ne $true)\n             {\n             Get-CsOnlineUser -Identity $user.SipAddress | fl SipAddress, InterpretedUserType, OnPremLineURI, LineURI, EnterpriseVoiceEnabled\n             }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing OptionFlags output attribute from Get-CsOnlineUser cmdlet\nDESCRIPTION: This snippet indicates the removal of the `OptionFlags` output attribute from the `Get-CsOnlineUser` cmdlet. This is a breaking change, requiring updates to scripts that rely on this attribute. No specific dependencies are mentioned.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsOnlineUser\n```\n\n----------------------------------------\n\nTITLE: Get Watcher Node Configuration using PowerShell\nDESCRIPTION: This PowerShell command retrieves the configuration of a Skype for Business Server watcher node. It's used to verify that the core Skype for Business Server components have been successfully installed. If no data is returned and there are no errors, the setup is considered successful.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/tools/watcher-nodes-2019.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWatcherNodeConfiguration\n```\n\n----------------------------------------\n\nTITLE: Constructing Stageview Modal Link - URL Format\nDESCRIPTION: This snippet provides the format for constructing the reference URL to the destination experience using Stageview Modal link syntax. The URL includes the Teams app ID, the URL to the destination experience within the app, and the page title. The URL to destination experience must be a valid domain associated with the Teams app.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/app-powered-tasks-in-planner.md#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\nhttps://teams.microsoft.com/l/stage/{Teams-app-Id}/0?context={\"contentUrl\":\"URL-to-destination-experience\"},\"name\":\"{page-title}\",\"openMode\":\"modal\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Federation - PowerShell\nDESCRIPTION: This PowerShell command enables federation by setting the `AllowFederatedUsers` parameter to `$True` in the `Set-CsAccessEdgeConfiguration` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-and-configure-mobility.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsAccessEdgeConfiguration -AllowFederatedUsers $True\n```\n\n----------------------------------------\n\nTITLE: Locating Agent Configuration File\nDESCRIPTION: This code shows the path to the Agent's configuration file. This file, 'PerfAgent.exe.config', contains settings that control the Agent's behavior, including the memory limit.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/statistics-manager/troubleshoot.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nC:\\Program Files\\Skype for Business Server StatsMan Agent\\PerfAgent.exe.config\n```\n\n----------------------------------------\n\nTITLE: SBC Support for REFER Method Declaration Absent in ALLOW Header\nDESCRIPTION: This code snippet shows an example of an SBC signaling that it does not support the REFER method by excluding it from the ALLOW header. This indicates to the Microsoft SIP proxy that it should handle call transfers locally (Option 1 - SIP proxy acts as a Referee). The SBC must signal that it supports the NOTIFY method.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-sip.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nALLOW: INVITE, ACK, CANCEL, BYE, INFO, NOTIFY, PRACK, UPDATE, OPTIONS\n```\n\n----------------------------------------\n\nTITLE: Configuring Busy Options for a User (BusyOnBusy) - PowerShell\nDESCRIPTION: This configures the busy options for a specific user (Ken Myer) to reject new incoming calls with a busy signal when they are already in a call, using the `Set-CsBusyOptions` cmdlet.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsBusyOptions -Identity \"Ken Myer\"  -ActionType BusyOnBusy\n```\n\n----------------------------------------\n\nTITLE: Remove Network InterSite Policy Cmdlet - PowerShell\nDESCRIPTION: This cmdlet removes a network inter-site policy from Skype for Business Server.  Ensure the policy is no longer needed before removal as it will affect bandwidth allocation between sites.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsNetworkInterSitePolicy\n```\n\n----------------------------------------\n\nTITLE: Remove Archiving Configuration - PowerShell\nDESCRIPTION: This cmdlet removes a specified collection of archiving settings. These settings control whether instant messaging (IM) sessions are automatically saved, and if instant messages that cannot be archived are blocked.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/options.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsArchivingConfiguration\n```\n\n----------------------------------------\n\nTITLE: History-Info Header Format\nDESCRIPTION: This snippet shows the format of the History-Info header sent by the SIP proxy in Microsoft Teams Direct Routing. It includes the SIP URI with parameters for privacy, reason, and an index. This header is used for call forwarding and simultaneous ring scenarios.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/direct-routing-protocols-sip.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n<sip:UserB@sip.pstnhub.microsoft.com?Privacy=history&Reason=SIP%3Bcause%3D486>;index=1.2\n```\n\n----------------------------------------\n\nTITLE: Creating a New Centralized Logging Service (CLS) Configuration - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new configuration for the Centralized Logging Service using the `New-CsClsConfiguration` cmdlet.  It includes setting the `CacheFileNetworkFolder` to a network share, `EtlFileRolloverMinutes` for the log rollover time and `EtlFileRolloverSizeMB` for the log rollover size. It requires careful planning to understand the impact of new configurations and property changes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClsConfiguration -Identity <scope and name> [CsClsConfiguration options for this site]\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsClsConfiguration -Identity \"site:Redmond\" -CacheFileNetworkFolder \"\\\\fs01.contoso.net\\filestore\\logfiles\" -EtlFileRolloverMinutes 120 -EtlFileRolloverSizeMB 40\n```\n\n----------------------------------------\n\nTITLE: Deleting Proxy Configurations in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet deletes a specified proxy configuration from Skype for Business.  The Identity parameter specifies the proxy configuration to be removed. This action is permanent and cannot be undone without recreating the configuration.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsProxyConfiguration -Identity service:EdgeServer:atl-edge-011.litwareinc.com\n```\n\n----------------------------------------\n\nTITLE: Upgrade Selected User to TeamsOnly Online - PowerShell\nDESCRIPTION: This command upgrades selected users to TeamsOnly mode. This is used to upgrade users after grandfathering Islands users and setting the tenant-wide policy.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/upgrade-to-Teams-on-prem-implement.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGrant-CsTeamsUpgradePolicy -Identity $user -PolicyName UpgradeToTeams\n```\n\n----------------------------------------\n\nTITLE: Configuring Teams Meeting Modes - App Version 4.9\nDESCRIPTION: This section demonstrates how to configure meeting modes for Teams Rooms using XML notation for app version 4.9.  It outlines four scenarios: Skype for Business (default) and Microsoft Teams, Skype for Business and Microsoft Teams (default), Skype for Business only, and Microsoft Teams only.  The key parameters are `<TeamsMeetingsEnabled>`, `<SfbMeetingEnabled>`, and `<IsTeamsDefaultClient>`, each with a boolean value.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/xml-config-file.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Skype for Business (default) and Microsoft Teams -->\n<TeamsMeetingsEnabled>True</TeamsMeetingsEnabled>\n<SfbMeetingEnabled>True</SfbMeetingEnabled>\n<IsTeamsDefaultClient>False</IsTeamsDefaultClient>\n\n<!-- Skype for Business and Microsoft Teams (default) -->\n<TeamsMeetingsEnabled>True</TeamsMeetingsEnabled>\n<SfbMeetingEnabled>True</SfbMeetingEnabled>\n<IsTeamsDefaultClient>True</IsTeamsDefaultClient>\n\n<!-- Skype for Business only -->\n<TeamsMeetingsEnabled>False</TeamsMeetingsEnabled>\n<SfbMeetingEnabled>True</SfbMeetingEnabled>\n<IsTeamsDefaultClient>False</IsTeamsDefaultClient>\n\n<!-- Microsoft Teams only -->\n<TeamsMeetingsEnabled>True</TeamsMeetingsEnabled>\n<SfbMeetingEnabled>False</SfbMeetingEnabled>\n<IsTeamsDefaultClient>True</IsTeamsDefaultClient>\n```\n\n----------------------------------------\n\nTITLE: Testing Exchange UM Voicemail Functionality\nDESCRIPTION: This snippet demonstrates how to test Exchange UM voicemail functionality using the Test-CsExUMVoiceMail cmdlet in the Skype for Business Server Management Shell. It requires valid sender and receiver credentials, target FQDN, and sender/receiver SIP addresses.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/integrate-with-exchange-server/exchangeunified-messaging-for-voice-mail.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$credential = Get-Credential \"litwareinc\\pilar\"\nTest-CsExUMVoiceMail -TargetFqdn \"atl-cs-001.litwareinc.com\" -ReceiverSipAddress \"sip:kenmyer@litwareinc.com\" -SenderSipAddress \"sip:pilar@litwareinc.com\" -SenderCredential $credential\n```\n\n----------------------------------------\n\nTITLE: Listing unique users from the From user field\nDESCRIPTION: This snippet extracts a list of unique users who initiated sessions, based on the 'From user' field in the imported CSV data. The list is then sorted alphabetically by name. This is useful for identifying all the users who have used the system in some way.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/call-diagnostic-reports-per-user.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x | Group-Object \"From user\" | Select Name | Sort-Object Name\n```\n\n----------------------------------------\n\nTITLE: Copy File Store Data using Robocopy\nDESCRIPTION: This command copies files, directories, and subdirectories from the old file store to the new file store using Robocopy. It skips the Meeting.Active file, uses multiple threads for faster copying, and logs the operations to a specified log file.  It is essential to have the correct permissions and network access for the Robocopy command to execute successfully.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/move-file-store-data.md#_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\nRobocopy \\\\<OldFileServer>\\\\<OldShare> \\\\<NewFileServer>\\\\<NewShare> /S /R:10 /W:10 /XF Meeting.Active /MT /LOG:<directory path\\logname>\n```\n\n----------------------------------------\n\nTITLE: Check Admin Role Assignment with PowerShell\nDESCRIPTION: This PowerShell cmdlet checks the role assignments for a specified user in Skype for Business Server. It requires the Skype for Business Server Management Shell to be available. The `-Identity` parameter specifies the user account to check. This command is typically used to verify if a user has sufficient privileges to perform administrative tasks.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/manage-services.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsAdminRoleAssignment -Identity \"kenmyer\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Response Group Call Data with PowerShell\nDESCRIPTION: This PowerShell script imports data from a CSV file (exported from the Response Group Call List Report) and calculates the total number of received calls for each workflow. It uses `Import-Csv` to read the CSV, `Group-Object` to group calls by workflow, `Select-Object` to display the count and name, and `Sort-Object` to sort the results in descending order by call count.  The script requires the CSV file to be located at `C:\\Data\\Response_Group_Call_List_Report.csv`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/call-list-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$calls = Import-Csv -Path \"C:\\ Data\\Response_Group_Call_List_Report.csv\"\n$calls | Group-Object Workflow | Select-Object Count, Name | Sort-Object Count -Descending\n```\n\n----------------------------------------\n\nTITLE: Enable Group Call Pickup - SEFAUtil\nDESCRIPTION: This example demonstrates how to enable group call pickup and assign a pickup group to a user using the SEFAUtil command-line tool. The command takes the target user's SIP address and a group pickup number as input and uses the /enablegrouppickup switch. The output shows the updated user settings and the assigned group pickup orbit.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_27\n\nLANGUAGE: console\nCODE:\n```\nSEFAUtil.exe /server:SfBserver.contoso.com sip:katarina@contoso.com /enablegrouppickup:199\n```\n\n----------------------------------------\n\nTITLE: Navigating to Temp Folder in Command Prompt - Console\nDESCRIPTION: This command navigates the command prompt to the user's temporary folder (%Temp%). It's used as a starting point for copying log files in subsequent commands.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/troubleshoot-installation.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncd /d %Temp%\n```\n\n----------------------------------------\n\nTITLE: Updating ProxyAddresses in Active Directory\nDESCRIPTION: Instructs to update the `ProxyAddresses` attribute to align it with the `msRTCSIP-PrimaryUserAddress` attribute. Although O365 ignores the sip address in `ProxyAddresses` if `msRTCSIP-PrimaryUserAddress` is populated, it may be used by other on-premises components.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbHybrid/hybrid/cloud-consolidation-managing-attributes.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Proxy Example - PAC File - CMD\nDESCRIPTION: This is an example of setting a proxy using a PAC (Proxy Auto-Configuration) file. `<pac file url>` should be replaced with the URL of the PAC file. This allows the system to dynamically determine the appropriate proxy server based on the PAC file's rules.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/enroll-a-device.md#_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nbitsadmin /Util /SetIEProxy LOCALSYSTEM AUTOSCRIPT http://contosoproxy.corp.net/proxy.pac\n```\n\n----------------------------------------\n\nTITLE: Uninstall Archiving Database using PowerShell\nDESCRIPTION: This PowerShell command removes the Archiving database from the specified SQL Server instance. It requires membership in the SQL Server sysadmins group. Replace <FQDN> with the fully qualified domain name of the database server and <instance> with the named database instance, if defined. The cmdlet prompts for confirmation before proceeding with the uninstall.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/remove-the-sql-server-database-for-an-archiving-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-CsDataBase -DatabaseType Archiving -SqlServerFqdn <FQDN> [-SqlInstanceName <instance>]\n```\n\n----------------------------------------\n\nTITLE: Update Address Book - PowerShell\nDESCRIPTION: This PowerShell cmdlet updates the Address Book on each Skype for Business Server 2019 pool in the deployment. This forces the Address Book to read the new normalization rules files.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-address-book.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-CsAddressBook\n```\n\n----------------------------------------\n\nTITLE: Microsoft Teams PowerShell Reference\nDESCRIPTION: Provides a link to the Microsoft Teams PowerShell reference documentation. This is useful for administrators who want to manage Teams settings using PowerShell scripts, including audio conferencing configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/start-an-audio-conference-over-the-phone-without-a-pin-in-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nFor more information, see [Microsoft Teams PowerShell reference](/powershell/module/teams).\n```\n\n----------------------------------------\n\nTITLE: Reset Front End Pool Registrar State - PowerShell\nDESCRIPTION: This PowerShell cmdlet resets the pool registrar state, performing a full reset. This is necessary when the number of servers in the Front End pool changes in certain ways (2 to any, any to 2, 3 to any, any to 3). Replace `<PoolFQDN>` with the actual FQDN of the pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/topology/manage-front-end-servers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-CsPoolRegistrarState -ResetType FullReset -PoolFqdn  <PoolFQDN>\n```\n\n----------------------------------------\n\nTITLE: Removing a Call Queue - PowerShell\nDESCRIPTION: This cmdlet removes an existing Call Queue from Microsoft Teams.  The Call Queue will no longer be available to route incoming calls after being removed. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsCallQueue\n```\n\n----------------------------------------\n\nTITLE: Get Cube Response Example - JSON\nDESCRIPTION: This JSON snippet represents a sample response from the Get Cube operation in the Call Quality Dashboard Data API. It includes Kpis, Dimensions, and Measurements, providing available dimensions and measurements. Note that this sample only contains the first two elements of each group.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-cube.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Kpis\": [{\n\"FriendlyName\": \"Poor Trend Month\",\n\"DataModelName\": \"[KPIValue].Poor Trend Month\",\n\"Description\": null\n},\n{\n\"FriendlyName\": \"Poor Rate Trend Month\",\n\"DataModelName\": \"[KPIValue].Poor Rate Trend Month\",\n\"Description\": null\n}],\n\"Dimensions\": [{\n\"Category\": \"Access Location Pair\",\n\"Attributes\": [{\n\"FriendlyName\": \"Location Pair\",\n\"DataModelName\": \"[Access Location Pair].[Location Pair]\",\n\"Description\": \"Description of Location Pair\"\n}]\n},\n{\n\"Category\": \"Audio Bandwidth Est\",\n\"Attributes\": [{\n\"FriendlyName\": \"Metric\",\n\"DataModelName\": \"[Audio Bandwidth Est].[Metric]\",\n\"Description\": \"Description of Metric\"\n}]\n}],\n\"Measurements\": [{\n\"FriendlyName\": \"Audio Streams Count\",\n\"DataModelName\": \"[Measures].[Audio Streams Count]\",\n\"Description\": \"Description of Audio Streams Count\"\n},\n{\n\"FriendlyName\": \"Audio Good Streams JPDR Count\",\n\"DataModelName\": \"[Measures].[Audio Good Streams JPDR Count]\",\n\"Description\": \"Description of Audio Good Streams JPDR Count\"\n}]\n}\n```\n\n----------------------------------------\n\nTITLE: Response example for Get Dimension Members\nDESCRIPTION: This JSON payload represents a sample response from the Get Dimension Members operation when querying the '[StartDate].[Month]' dimension.  It includes the total number of members (MembersCount) and an array of members (Members), where each member is represented as an array containing a key and a display value. The list is truncated for brevity.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/get-dimension-members.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"MembersCount\": 493,\n\"Members\": [[\"[1990-01-01T00:00:00]\",\n\"January 1990\"],\n[\"[1990-02-01T00:00:00]\",\n\"February 1990\"],\n[\"[1990-03-01T00:00:00]\",\n\"March 1990\"],\n \n    ...\n    \n[\"[2030-10-01T00:00:00]\",\n\"October 2030\"],\n[\"[2030-11-01T00:00:00]\",\n\"November 2030\"],\n[\"[2030-12-01T00:00:00]\",\n\"December 2030\"],\n[\"[2031-01-01T00:00:00]\",\n\"January 2031\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Test multiple permissions in OU - PowerShell\nDESCRIPTION: This command verifies user, computer, and contact permissions in the specified OU. It uses the Test-CsOUPermission cmdlet with the -OU parameter specifying the distinguished name of the OU and the -ObjectType parameter set to multiple object types separated by commas.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/test-admin-permissions.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-CsOUPermission -OU \"ou=Redmond,dc=litwareinc,dc=com\" -ObjectType \"user\", \"computer\", \"contact\"\n```\n\n----------------------------------------\n\nTITLE: Get Specific User Information via PowerShell\nDESCRIPTION: This PowerShell snippet retrieves information about a specific user using their identity. Replace \"Hao Chen\" with the actual user identity. This is used to verify that the user has been successfully moved to the new pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/move-multiple-users-to-the-pilot-pool.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsUser -Identity \"Hao Chen\"\n```\n\n----------------------------------------\n\nTITLE: Remove Registrar Security Settings Allowing NTLM - PowerShell\nDESCRIPTION: This PowerShell command removes all Registrar security settings that allow NTLM authentication.  It retrieves all Registrar configurations, filters them based on the `UseNtlmForClientToProxyAuth` property being set to `$True`, and then removes the filtered configurations. The command requires the Skype for Business Server Management Shell to be installed and configured.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/registrar-configuration-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsProxyConfiguration | Where-Object {$_.UseNtlmForClientToProxyAuth -eq $True}| Remove-CsProxyConfiguration\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Ultrasound Settings - Teams Rooms on Windows\nDESCRIPTION: This XML snippet shows the configuration options for enabling Ultrasound advertisement and auto-accepting proximate meeting invitations on Microsoft Teams Rooms on Windows. These settings can be managed remotely via an XML configuration file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/proximity-join.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nUltrasoundAdvertisementEnabled\n```\n\nLANGUAGE: xml\nCODE:\n```\nUltrasoundAutoAcceptProximateMeetingInvitations\n```\n\n----------------------------------------\n\nTITLE: Publishing New Teams as RemoteApp using shell:appsFolder\nDESCRIPTION: This snippet provides the correct format for publishing the new Teams client as a RemoteApp using the Windows `shell:appsFolder` location. This approach allows users to access Teams remotely through Azure Virtual Desktop. It is important to use the correct application identifier to ensure the application is published correctly.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/new-teams-vdi-requirements-deploy.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nshell:appsFolder\\MSTeams_8wekyb3d8bbwe!MSTeams\n```\n\n----------------------------------------\n\nTITLE: Configuring SIP Listening Port for Announcement Application\nDESCRIPTION: This documentation explains that the Announcement application uses port 5071 for SIP listening requests by default. The port can be changed using the Set-CsApplicationServer cmdlet. The cmdlet is part of the Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/announcement.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsApplicationServer\n```\n\n----------------------------------------\n\nTITLE: Collecting Microsoft Teams Rooms logs using PowerShell\nDESCRIPTION: This PowerShell command invokes a script to collect logs for Microsoft Teams Rooms. It changes the execution policy to unrestricted, then executes the CollectSrsV2Logs.ps1 script located in the specified directory. The logs are then output as a ZIP file in c:\\rigel.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-operations.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npowershell -ExecutionPolicy unrestricted c:\\rigel\\x64\\scripts\\provisioning\\ScriptLaunch.ps1 CollectSrsV2Logs.ps1\n```\n\n----------------------------------------\n\nTITLE: Set Archiving Configuration - PowerShell\nDESCRIPTION: This cmdlet modifies an existing collection of instant messaging (IM) archiving configuration options within the Skype for Business Server environment. It allows adjustments to settings such as enabling/disabling archiving, specifying scope, and blocking un-archivable messages.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/archiving/options.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsArchivingConfiguration\n```\n\n----------------------------------------\n\nTITLE: Calculate Average Jitter and Packet Loss\nDESCRIPTION: This SQL query calculates the average jitter and packet loss rate for all audio streams recorded in the AudioStream table. It provides an overview of the audio quality across all sessions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/quality-of-experience-qoe-database-schema/sample-qoe-database-queries.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect avg(cast(JitterInterArrival as bigint)) as JitterAvg, avg(PacketLossRate) as PacketLossRateAvg from AudioStream\n```\n\n----------------------------------------\n\nTITLE: Deleting a Network Site Link - Skype for Business PowerShell\nDESCRIPTION: This PowerShell command removes a network site link named Reno_Portland. This command permanently deletes the specified inter-site policy, removing any configured bandwidth limitations between the associated network sites. Ensure the correct Identity is provided to avoid accidental deletion.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsNetworkInterSitePolicy -Identity Reno_Portland\n```\n\n----------------------------------------\n\nTITLE: Set Recording Mode for Live Events PowerShell\nDESCRIPTION: Sets the global policy to control the recording option for live events produced in Teams. The `-BroadcastRecordingMode AlwaysDisabled` parameter disables recording. It requires a connection to Skype for Business Online PowerShell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-live-events/set-teams-live-events-policies-using-powershell.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingBroadcastPolicy -Identity Global -BroadcastRecordingMode AlwaysDisabled \n```\n\n----------------------------------------\n\nTITLE: Start CLS Logging with Additional PowerShell Scenario\nDESCRIPTION: This example demonstrates how to start another CLS logging scenario using `Start-CsClsLogging`. It highlights that you can run multiple scenarios concurrently (up to two) and provides an example of starting the Authentication scenario.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/start-or-stop-log-capture.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-CsClsLogging -Scenario Authentication\n```\n\n----------------------------------------\n\nTITLE: Enabling CAC with Set-CsNetworkConfiguration - PowerShell\nDESCRIPTION: This PowerShell command enables Call Admission Control (CAC) by setting the EnableBandwidthPolicyCheck parameter to 1. This enforces the configured bandwidth policies in the Skype for Business Server environment. It requires the Skype for Business Server Management Shell to be initialized.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/enable-call-admission-control.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsNetworkConfiguration -EnableBandwidthPolicyCheck 1\n```\n\n----------------------------------------\n\nTITLE: Get-CsTeamsShiftsConnectionSyncResult Cmdlet\nDESCRIPTION: This snippet documents the release of the `Get-CsTeamsShiftsConnectionSyncResult` cmdlet.  This cmdlet is used to retrieve synchronization results for the Teams Shifts connector, providing information about the status and outcome of synchronization operations between Teams Shifts and the connected system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_152\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTeamsShiftsConnectionSyncResult\n```\n\n----------------------------------------\n\nTITLE: Viewing the Assignment Status of Each User in a Bulk Operation\nDESCRIPTION: This snippet retrieves and displays the assignment status for each user in a bulk policy assignment operation using the `Get-CsBatchPolicyAssignmentOperation` cmdlet. It expands the `UserState` property to show the status of each individual user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/batch-group-policy-assignment-edu.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CsBatchPolicyAssignmentOperation -OperationId 3964004e-caa8-4eb4-b0d2-7dd2c8173c8c | Select -ExpandProperty UserState\n```\n\n----------------------------------------\n\nTITLE: Checking Owner Pool RGS Data and Backup Data - PowerShell\nDESCRIPTION: These commands retrieve RGS workflow, queue, agent group, hour of business, and holiday set information, showing both owner pool data and its backup. This is achieved through the `-showAll` parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/backup-rgs-data.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-csRGSWorkflow -showAll\nGet-csRGSQueue  -showAll\nGet-csRGSAgentGroup -showAll\nGet-csRGSHourOfBusiness -showAll\nGet-csRGSHolidaySet -showAll\n```\n\n----------------------------------------\n\nTITLE: Get MOS per Capture Device\nDESCRIPTION: This SQL query retrieves ConversationalMOS, SendingMOS, and ListeningMOS, grouped by capture device. It uses a union to combine caller and callee capture device data from MediaLineView, joining with AudioStream to retrieve the MOS values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/quality-of-experience-qoe-database-schema/sample-qoe-database-queries.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nselect t.DeviceName as Device, count(*) as SampleNum, avg(ConversationalMOS) as ConversationalMOS, avg(SendListenMOS) SendingMOS, avg(RecvListenMOS) as ListendingMOS\nfrom\n(\n   select m.CallerCaptureDev as DeviceName, m.ConferenceDateTime, m.SessionSeq, a.StreamID, m.ConversationalMOS,a.SendListenMOS, a.RecvListenMOS\n   from MediaLineView m\n   inner join AudioStream a\n   on m.ConferenceDateTime = a.ConferenceDateTime\n      and m.SessionSeq = a.SessionSeq\n      and m.MediaLineLabel = 0\n\n   union\n\n   select m.CalleeCaptureDev as DeviceName, m.ConferenceDateTime, m.SessionSeq, a.StreamID, m.ConversationalMOS,a.SendListenMOS, a.RecvListenMOS\n   from MediaLineView m\n   inner join AudioStream a\n   on m.ConferenceDateTime = a.ConferenceDateTime\n      and m.SessionSeq = a.SessionSeq\n      and m.MediaLineLabel = 0\n\n)as t\ngroup by t.DeviceName\norder by SampleNum desc\n```\n\n----------------------------------------\n\nTITLE: Updating Admin Roles - PowerShell\nDESCRIPTION: This code updates the Role-Based Access Control (RBAC) roles for the Busy Options cmdlets using the `Update-CsAdminRole` cmdlet. This ensures that administrators have the necessary permissions to manage Busy Options.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/install-and-configure-busy-options.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-CsAdminRole\n```\n\n----------------------------------------\n\nTITLE: Importing CSV data into PowerShell\nDESCRIPTION: This snippet demonstrates how to import data from a comma-separated values (.CSV) file into Windows PowerShell. This allows for more advanced analysis of the data exported from the Monitoring Reports, such as the User Activity Report. The imported data is stored in the variable `$x`.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/call-diagnostic-reports-per-user.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x = Import-Csv -Path \"C:\\Data\\User_Activity_Report.csv\"\n```\n\n----------------------------------------\n\nTITLE: Unloading CLS Modules (PowerShell)\nDESCRIPTION: This code snippet unloads the `ClsController` module. After unloading, attempting to get help for `Edit-CsClsScenario` will fail as the cmdlet is no longer available.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-scenarios.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-Module ClsController\n```\n\n----------------------------------------\n\nTITLE: Filtering Detailed Reports in CQD using URL Parameters - PowerShell\nDESCRIPTION: This snippet shows how to filter detailed reports in Call Quality Dashboard (CQD) for Teams using a URL parameter. The PowerShell code adds a filter to the URL to only show data related to Skype for Business.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/quality-of-experience-review-guide.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/filter/[AllStreams].[Is Teams]|[FALSE]\n```\n\n----------------------------------------\n\nTITLE: Removing QoE Configuration using Remove-CsQoEConfiguration (PowerShell)\nDESCRIPTION: This cmdlet removes a Quality of Experience (QoE) configuration for a specified site in Skype for Business. The `-Identity` parameter specifies the site (e.g., `site:Redmond`) to be removed. This action permanently deletes the QoE configuration for the specified site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n Remove-CsQoEConfiguration -Identity site:Redmond\n```\n\n----------------------------------------\n\nTITLE: CQD URL Filter - Multi-Select Values\nDESCRIPTION: This snippet shows how to apply multiple values to a CQD URL filter by separating each value with a pipe (|) character. It demonstrates filtering for different media types (Video, Audio, VBSS) within a single filter parameter, allowing for more complex data selection.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/cqd-data-and-reports.md#_snippet_4\n\nLANGUAGE: URL\nCODE:\n```\nfilter/[AllStreams].[Media%20Type]|[Video]|[Audio]|[VBSS]\n```\n\n----------------------------------------\n\nTITLE: Normalization Rule - Redmond Site Prefix (.NET Regex)\nDESCRIPTION: This normalization rule translates numbers with an on-net prefix (6) and Redmond site code (222) to E.164 format.  It uses a .NET Framework regular expression to match '6222' followed by 4 digits, and prepends \"+1425555\" to the matched digits.  The input is '6222' followed by 4 digits, and the output is the E.164 formatted number. The first captured group ($1) is appended to the translation string.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/enterprise-voice-solution/outbound-voice-routing.md#_snippet_8\n\nLANGUAGE: .NET Regex\nCODE:\n```\n^6222(\\d{4})$\n```\n\n----------------------------------------\n\nTITLE: Get Watcher Node Configuration using PowerShell\nDESCRIPTION: This PowerShell command retrieves the configuration of Skype for Business Server watcher nodes. It is used to verify that the core Skype for Business Server components have been successfully installed. Running this before any watcher nodes are configured returns no data but confirms setup completion if no errors occur.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsWatcherNodeConfiguration\n```\n\n----------------------------------------\n\nTITLE: Remove Conference Directory - Skype for Business - PowerShell\nDESCRIPTION: Removes an existing conference directory. This cmdlet permanently deletes a conference directory.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/dial-in-conferencing.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Removing an Existing Public Provider with PowerShell\nDESCRIPTION: This PowerShell command removes an existing public provider in Skype for Business Server.  It is often needed when upgrading to Skype for Business Server and re-adding the Skype public provider. The `<identity-name>` placeholder should be replaced with the actual identity of the provider to remove.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-skype-connectivity.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-CsPublicProvider -Identity <identity-name>\n```\n\n----------------------------------------\n\nTITLE: Updating Proxy Configurations in Skype for Business (PowerShell)\nDESCRIPTION: This cmdlet modifies an existing proxy configuration in Skype for Business. The Identity parameter specifies the proxy configuration to modify, and other parameters allow updating various settings like AcceptServerCompression. The example enables server compression for the specified Edge Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-security-menu.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n Set-CsProxyConfiguration -Identity service:EdgeServer:atl-edge-001.litwareinc.com -AcceptServerCompression $True\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft AutoUpdate (MAU) for Teams on Mac\nDESCRIPTION: This XML snippet demonstrates the required configuration for Microsoft AutoUpdate (MAU) when managing Teams updates on macOS using managed preferences. It specifies the application ID for Microsoft Teams to ensure MAU can properly update the application. It is required when the MAU preferences are managed instead of being left at their default values.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-client-update.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>/Applications/Microsoft Teams.app</key>\n\t\t\t\t<dict>\n\t\t\t\t\t\t<key>Application ID</key>\n\t\t\t\t\t\t<string>TEAMS21</string>\n\t\t\t\t</dict>\n```\n\n----------------------------------------\n\nTITLE: Service Level Target Calculation (SL_met_negative_abandon)\nDESCRIPTION: This formula calculates the percentage of answered/abandoned calls that met service level target. Abandoned calls within the service level target negatively impact service level percentage. It is null if sl_target is null.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/aa-cq-real-time-reports.md#_snippet_4\n\nLANGUAGE: None\nCODE:\n```\n(sl_tot_answered_calls / tot_offered_calls)\n```\n\n----------------------------------------\n\nTITLE: Moving Unassigned Number Announcements Configuration (Lync to Skype)\nDESCRIPTION: This PowerShell command moves the unassigned number announcements configuration from a Lync Server 2013 pool to a Skype for Business Server 2015 pool. It utilizes the `Move-CsAnnouncementConfiguration.ps1` script with the `-Source` parameter specifying the source pool's FQDN and the `-Destination` parameter specifying the destination pool's FQDN. The script must be executed from a computer with Skype for Business Server Management Shell installed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/resource-kit-tools.md#_snippet_30\n\nLANGUAGE: powershell\nCODE:\n```\nMove-CsAnnouncementConfiguration.ps1 -Source LS2013Pool.contoso.com -Destination SfBS2015Pool.contoso.com\n```\n\n----------------------------------------\n\nTITLE: DNS SRV Record Example for XMPP Federation\nDESCRIPTION: This example shows the required format for a DNS SRV record used for XMPP federation. It specifies the service, protocol, domain, and port number, allowing clients to discover the XMPP server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/ha-dr-and-backup-service/failing-over-and-failing-back-a-pool.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n_xmpp-server._tcp.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Managing Online Lis Civic Address using PowerShell\nDESCRIPTION: These cmdlets are used for managing online Lis civic addresses. Fixes were made around the supported parameters in the modernized cmdlets.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_130\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|Set]-CsOnlineLisCivicAddress\n```\n\n----------------------------------------\n\nTITLE: Open TPM Management Console - Command Line - Windows\nDESCRIPTION: This command opens the Trusted Platform Module (TPM) Management console on Windows. It requires administrative privileges and a compatible TPM module enabled in the system BIOS. The TPM version should be at least 1.2 for virtual smart card support.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/configure-two-factor.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTpm.msc\n```\n\n----------------------------------------\n\nTITLE: Enable Voice Enrollment Globally - PowerShell\nDESCRIPTION: This PowerShell command enables voice enrollment for all users in the organization by setting the `EnrollVoice` parameter to `Enabled` in the global `CsTeamsAIPolicy`. This allows users to create voice profiles to enhance audio quality in Teams meetings and calls.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/voice-and-face-recognition.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsAIPolicy -Identity Global -EnrollVoice Enabled\n```\n\n----------------------------------------\n\nTITLE: Configure PortalUserRegistrarPort in Web.config (XML)\nDESCRIPTION: This XML snippet shows how to configure the PortalUserRegistrarPort in the Web.config file for the SRS v1 Administrative Web Portal. This is only needed if the port used is other than 5061.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/room-system-v1-administrative-web-portal.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"PortalUserRegistrarPort\" value=\"5061\" />\n```\n\n----------------------------------------\n\nTITLE: QMSDB Connection String\nDESCRIPTION: This code snippet provides an example of the QMSDB connection string, including the failover partner, enabling the QoE database to failover to the mirror database.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/monitoring-reports-with-a-mirror-database.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nData source=(local)\\archinst;Failover Partner=atl-mirror-001\\archinst;initial catalog=QoEMetrics\n```\n\n----------------------------------------\n\nTITLE: Creating a Dial Plan - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new dial plan to associate with a trunk. A dial plan with global scope is created per Skype for Business Server deployment, and applied by VIS to trunks without a more specific dial plan.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-video-interop-server/configure-the-vis.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsDialPlan -Identity \"Service:VideoGateway:CUCMVIS1.CUCMInterop.contoso.com\" -SimpleName \"TrunkTestDialPlan\"\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Groups in PowerShell\nDESCRIPTION: This snippet demonstrates how to create new Azure AD groups for teachers and students if the group names are provided as input parameters. It uses the `New-MsolGroup` cmdlet to create the groups and then retrieves their ObjectIds using `Get-MsolGroup`. Dependencies include the MSOnline module, which needs to be connected using `Connect-MsolService` before running this code.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/scripts/powershell-script-security-groups-edu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nif (![string]::IsNullOrEmpty($teachergroupname)) {\n    New-MsolGroup -DisplayName $teachergroupname -Description $teachergroupdesc\n    $Group = Get-MsolGroup -SearchString $teachergroupname\n    $teachergroupid = $Group.ObjectId\n    $create = $true\n}\n\nif (![string]::IsNullOrEmpty($studentgroupname)) {\n    New-MsolGroup -DisplayName $studentgroupname -Description $studentgroupdesc\n    $Group = Get-MsolGroup -SearchString $studentgroupname\n    $studentgroupid = $Group.ObjectId\n    $create = $true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Teams Meeting Policy - Prevent Participant Control (PowerShell)\nDESCRIPTION: This PowerShell script utilizes the `Set-CsTeamsMeetingPolicy` cmdlet to prevent internal participants from giving, requesting, or being given control during Teams meetings and webinars. The `-AllowParticipantGiveRequestControl` parameter is set to `$False` to disable this feature.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/meeting-who-present-request-control.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMeetingPolicy -Identity <policy name> -AllowParticipantGiveRequestControl $False\n```\n\n----------------------------------------\n\nTITLE: Configuring Teams Meeting Modes - App Version 4.8 or Lower\nDESCRIPTION: This section illustrates the XML notation for configuring Teams Rooms meeting modes for app version 4.8 or lower. It provides examples for Skype for Business (default) and Microsoft Teams, Skype for Business and Microsoft Teams (default), and Skype for Business only. The parameters `<TeamsMeetingsEnabled>` and `<IsTeamsDefaultClient>` are used with boolean values to define the meeting modes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/xml-config-file.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Skype for Business (default) and Microsoft Teams -->\n<TeamsMeetingsEnabled>True</TeamsMeetingsEnabled>\n<IsTeamsDefaultClient>False</IsTeamsDefaultClient>\n\n<!-- Skype for Business and Microsoft Teams (default) -->\n<TeamsMeetingsEnabled>True</TeamsMeetingsEnabled>\n<IsTeamsDefaultClient>True</IsTeamsDefaultClient>\n\n<!-- Skype for Business only -->\n<TeamsMeetingsEnabled>False</TeamsMeetingsEnabled>\n<IsTeamsDefaultClient>False</IsTeamsDefaultClient>\n```\n\n----------------------------------------\n\nTITLE: Get Chat Message via Microsoft Graph API\nDESCRIPTION: Retrieves a specific chat message in a channel or chat using the Microsoft Graph API. Requires a chat message ID. Output is a chat message object.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_12\n\nLANGUAGE: HTTP\nCODE:\n```\n[Get chatMessage in a channel or chat](/graph/api/chatmessage-get)\n```\n\n----------------------------------------\n\nTITLE: Updating CallQualityFeedbackTokenDef Table using SQL\nDESCRIPTION: This SQL script updates the [CallQualityFeedbackTokenDef] table in the Skype for Business monitoring database with the latest token definitions. It first deletes all existing entries from the table and then inserts a new set of predefined token IDs and descriptions, ensuring the table is up-to-date with the latest token definitions used by Skype for Business clients. This helps administrators accurately interpret feedback data.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/rate-my-call.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM [CallQualityFeedbackTokenDef];\nINSERT INTO [CallQualityFeedbackTokenDef] (TokenId, TokenDescription) VALUES\n    (1,   N'DistortedSpeech'),\n    (2,   N'ElectronicFeedback'),\n    (3,   N'BackgroundNoise'),\n    (4,   N'MuffledSpeech'),\n    (5,   N'Echo'),\n    (21,  N'FrozenVideo'),\n    (22,  N'PixelatedVideo'),\n    (23,  N'BlurryImage'),\n    (24,  N'PoorColor'),\n    (25,  N'DarkVideo'),\n    (101, N'Audio_SilentLocal'),\n    (102, N'Audio_SilentRemote'),\n    (103, N'Audio_Echo'),\n    (104, N'Audio_BackgroundNoise'),\n    (105, N'Audio_LowSound'),\n    (106, N'Audio_Dropped'),\n    (107, N'Audio_DistortedSpeech'),\n    (108, N'Audio_Interrupted'),\n    (109, N'Audio_Other'),\n    (201, N'Video_NoLocalVideo'),\n    (202, N'Video_NoRemoteVideo'),\n    (203, N'Video_LowQuality'),\n    (204, N'Video_FrozenVideo'),\n    (205, N'Video_StoppedUnexpectedly'),\n    (206, N'Video_DarkVideo'),\n    (207, N'Video_NoAudioSync'),\n    (208, N'Video_Other'),\n    (301, N'Pstn_DialPad'),\n    (401, N'SS_NoContentLocal'),\n    (402, N'SS_NoContentRemote'),\n    (403, N'SS_CantPresent'),\n    (404, N'SS_LowQuality'),\n    (405, N'SS_Freezing'),\n    (406, N'SS_StoppedUnexpectedly'),\n    (407, N'SS_LargeDelay'),\n    (408, N'SS_Other'),\n    (501, N'Reliabilty_Join'),\n    (502, N'Reliabilty_Invite');\n```\n\n----------------------------------------\n\nTITLE: Configure PortalUserName in Web.config (XML)\nDESCRIPTION: This XML snippet shows how to configure the PortalUserName in the Web.config file for the SRS v1 Administrative Web Portal.  The PortalUserName is the SIP URI of the Active Directory user created to query information from Skype for Business Server.  The value should be updated to reflect the actual SIP URI.  Dependencies:  Requires a SIP-enabled Active Directory user to be created.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-conferencing/room-system-v1-administrative-web-portal.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"PortalUserName\" value=\"sip:LRSApp@domain.com\" />\n```\n\n----------------------------------------\n\nTITLE: Listing unique users by total session count\nDESCRIPTION: This snippet counts the number of sessions each user participated in (as the 'From user') and lists the users in descending order based on their session count. This helps identify the most active users in the system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/call-diagnostic-reports-per-user.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$x | Group-Object \"From user\" | Select Count, Name | Sort-Object Count -Descending\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script\nDESCRIPTION: This code snippet shows the command to execute the Get-TeamsBYODSpaceDevices.ps1 PowerShell script. This script gathers information about connected peripherals and exports it to a CSV file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/get-peripheral-information.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\\Get-TeamsBYODSpaceDevices.ps1\n```\n\n----------------------------------------\n\nTITLE: Joining Media and MediaList tables in SQL\nDESCRIPTION: This SQL snippet demonstrates how to join the `Media` and `MediaList` tables based on their respective `MediaId` columns.  This is intended to determine the modality type for values in `LcsCDR.SessionDetailsView.MediaTypes`. It establishes a left join, ensuring all rows from the `Media` table are included in the result, even if there's no matching `MediaId` in the `MediaList` table.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/schema-reference/call-detail-recording-cdr-database-schema/medialist.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nLEFT JOIN on Media.MediaId = MediaList.MediaId\n```\n\n----------------------------------------\n\nTITLE: Creating a Video Trunk Configuration - PowerShell\nDESCRIPTION: This PowerShell cmdlet creates a new video trunk configuration for the trunk between the VIS and Cisco Unified Communications Manager (CUCM). It sets parameters such as whether the gateway sends RTCP packets for active calls and calls on hold, and whether to enable media encryption for SIP over TLS.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-video-interop-server/configure-the-vis.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsVideoTrunkConfiguration -Identity \"Service:VideoGateway:CUCMVIS1.CUCMInterop.contoso.com\" -GatewaySendsRtcpForActiveCalls $false -GatewaySendsRtcpForCallsOnHold $false -EnableMediaEncryptionForSipOverTls $true(or $false)\n```\n\n----------------------------------------\n\nTITLE: Setting Call Park Music on Hold File - PowerShell\nDESCRIPTION: This PowerShell command sets the music-on-hold file for the Call Park service.  It requires the ServiceID of the Call Park application and the content of the music file as a byte array. Use Get-CsService to find the appropriate ServiceID.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/customize-call-park-music-on-hold.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-CsCallParkServiceMusicOnHoldFile -Service <ServiceID where the Call Park application resides> -Content <Byte >\n```\n\n----------------------------------------\n\nTITLE: Creating a Date and Time Range - PowerShell\nDESCRIPTION: This cmdlet creates a new date and time range object for use in Auto Attendant schedules in Microsoft Teams.  It specifies a start and end date and time. Requires the Teams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/call-queue-auto-attendant-cmdlets.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsOnlineDateTimeRange\n```\n\n----------------------------------------\n\nTITLE: Remove Previous AudioVideoAuthentication Certificate (PowerShell)\nDESCRIPTION: This PowerShell command removes the old AudioVideoAuthentication certificate using the Remove-CsCertificate cmdlet with the -Previous parameter.  This should only be done after the new certificate is active and the old certificate has expired to avoid service disruptions.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/stage-av-and-oauth-certificates.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsCertificate -Type AudioVideoAuthentication -Previous\n```\n\n----------------------------------------\n\nTITLE: Get RBAC Roles for Set-CsClsConfiguration - PowerShell\nDESCRIPTION: This command retrieves a list of all RBAC roles that have been assigned the Set-CsClsConfiguration cmdlet. This is useful for determining what roles have permission to modify Centralized Logging Service configurations.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/manage-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdminRole | Where-Object {$_.Cmdlets -match \"Set-CsClsConfiguration\"}\n```\n\n----------------------------------------\n\nTITLE: Remove Announcement - PowerShell\nDESCRIPTION: This PowerShell cmdlet deletes an announcement from Skype for Business Server. It requires the identity of the announcement to be deleted, specified in the format \"<Service:service ID/guid>\".\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/create-an-announcement.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsAnnouncement -Identity \"<Service:service ID/guid>\"\n```\n\n----------------------------------------\n\nTITLE: Verify Analog Device Migration - PowerShell\nDESCRIPTION: This command verifies that all analog device contact objects have been successfully moved to the specified Skype for Business Server 2019 pool. It uses `Get-CsAnalogDevice` with the `-Filter` parameter to search for analog devices associated with the target registrar pool. The expected output is a list of analog devices associated with the specified pool.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/migration/migrate-analog-devices.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAnalogDevice -Filter {RegistrarPool -eq \"pool02.contoso.net\"}\n```\n\n----------------------------------------\n\nTITLE: Run Query Request Payload - JSON\nDESCRIPTION: This JSON payload demonstrates the structure of a request body for the RunQuery operation. It defines filters, dimensions, measurements, and trend configurations to be applied during the query execution.  The 'Filters' array specifies criteria for data subset selection.  'Dimensions' determine data aggregation levels, while 'Measurements' specify the metrics to be calculated.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/run-query.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Filters\": [{\n\"DataModelName\": \"[StartDate].[Month]\",\n\"Caption\": \"July 2013\",\n\"Value\": \"[2015-03-01T00:00:00]\",\n\"Operand\": 0,\n\"UnionGroup\": \"\"\n}],\n\"Dimensions\": [{\n\"DataModelName\": \"[StartDate].[Month]\"\n}],\n\"Measurements\": [{\n\"DataModelName\": \"[Measures].[Audio Good Streams Count]\"\n},\n{\n\"DataModelName\": \"[Measures].[Audio UnClassified Streams Count]\"\n},\n{\n\"DataModelName\": \"[Measures].[Audio Poor Streams Count]\"\n},\n{\n\"DataModelName\": \"[Measures].[AudioPoorPercentage]\"\n}],\n\"Trend\": {\n\"EnableTrend\": true,\n\"SpanCount\": 7,\n\"TrendDate\": \"2015-3\",\n\"Type\": 0\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Device Updates - PowerShell\nDESCRIPTION: This cmdlet cancels a device update by clearing the device update file. The Identity parameter specifies the web server providing the update files.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\n Clear-CsDeviceUpdateFile -Identity \"service:WebServer:atl-cs-001.litwareinc.com\"\n```\n\n----------------------------------------\n\nTITLE: Interpreting Meeting Space Availability Tile\nDESCRIPTION: This section details how the appearance of the meeting space availability tile changes based on whether the space is reserved for a scheduled meeting, reserved for an ad hoc meeting, or currently available. It also explains the displayed information in each state such as meeting title, start and end times, organizer's name, and the presence of a \"Reserve\" button when the space is available.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/use-teams-panels.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Retained Messages of a User via Graph API (HTTP)\nDESCRIPTION: This example shows how to retrieve all retained messages of a user using the Microsoft Graph API's getAllRetainedMessages endpoint. It requires the user's ID to specify which user's retained messages should be retrieved.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/export-teams-content.md#_snippet_14\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://graph.microsoft.com/v1.0/users/8b081ef6-4792-4def-b2c9-c363a1bf41d5/chats/getAllRetainedMessages\n```\n\n----------------------------------------\n\nTITLE: Get Conferencing Policy with Dial-In Enabled - PowerShell\nDESCRIPTION: This PowerShell command retrieves the conferencing policies and their dial-in conferencing status. It allows administrators to verify which policies permit users to schedule PSTN conferences, influencing the number of expected PSTN conferences.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/pstn-conference-summary-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferencingPolicy | Select-Object Identity, EnableDialInConferencing\n```\n\n----------------------------------------\n\nTITLE: Understanding Teams Panels Home Screen\nDESCRIPTION: This section explains the different components of the Teams panels home screen. It describes each tile including current time, meeting space details, meeting space availability, meeting details, upcoming calendar, and settings. It helps users understand how to interpret the information displayed on the panel.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/devices/use-teams-panels.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Send Welcome Email with PowerShell\nDESCRIPTION: This PowerShell cmdlet sets a user's PIN and sends a welcome email with the new PIN. It requires administrator privileges and the Skype for Business Server Management Shell. The parameters allow customization of the sender, recipient, subject, email template, SMTP server, and PIN. It also supports forcing a PIN reset and using SSL for email transmission. The default is to use the $PSEmailServer environment variable for the SMTP server and the current user's credentials for sending the email. You can force a PIN reset using the `-Force` parameter.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/welcome-emails.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsPinSendCAWelcomeMail -UserUri <user identifier>\n   -From <email address of sender> [-Subject <subject for email message>]\n   [-UserEmailAddress <destination email address>]\n   [-Cc <email address of recipients who receive copy of email>]\n   [-Bcc <email address of recipients who receive blind copies>]\n   [-TemplatePath <path for email template>]\n   [-SmtpServer] <SMTP server name>]\n   [-BodyAsPlainText] [-UseSsl]\n   [-Pin <new numeric PIN>] [-Force] `\n   [-Credential <SMTP server credentials used to send email with the specified From address>]\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning Teams VDI Policy to Disable Calls and Meetings\nDESCRIPTION: This PowerShell code creates a new Teams VDI policy named 'DisableCallsAndMeetingsTrue' that disables calls and meetings for users in non-optimized VDI environments. It then assigns this policy to a specific user ('meganb@jvteams.xyz'). The script includes commands to check the applied policy after assignment and list all existing VDI policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-for-vdi.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTeamsVdiPolicy -Identity DisableCallsAndMeetingsTrue -DisableCallsAndMeetings $true -DisableAudioVideoInCallsAndMeetings $false\n\n<# Assign policy #>\n$user = 'meganb@jvteams.xyz'\nGrant-CsTeamsVdiPolicy -Identity $user -PolicyName DisableCallsAndMeetingsTrue\n\n<# Wait for some time until the policy is applied #>\nGet-CSOnlineUser -Identity $user | FL UserPrincipalName, *vdi*\n\n<# Show all policies #>\nGet-CsTeamsVdiPolicy | FT Iden*, Disable*\n```\n\n----------------------------------------\n\nTITLE: Get Drive using Microsoft Graph API\nDESCRIPTION: Retrieves a specific Drive using the Microsoft Graph API. Requires Drive ID. Output: Drive resource.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/collaboration-integration.md#_snippet_28\n\nLANGUAGE: HTTP\nCODE:\n```\n[Get Drive](/onedrive/developer/rest-api/api/drive_get).\n```\n\n----------------------------------------\n\nTITLE: AJAX Request and Table Update\nDESCRIPTION: This JavaScript snippet iterates through an array of queries, makes an AJAX request for each query, and updates a specific table row with the returned data.  It sets the `withCredentials` flag to true, sets the `contentType` to `application/json;charset=utf-8`, and processes the returned data to populate the table cells. Error handling is included to display an error message if the request fails.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/call-quality-dashboard/cqd-development-samples.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n                    withCredentials: true,\n                    contentType: 'application/json;charset=utf-8',\n                    success: function (data) {\n\n                        //find the table row corresponding to the name of this query\n                        var row = document.getElementById(queries[i].ID);\n\n                        //update the values for each month\n                        for (var m = 0; m < data.DataResult.length; m++)\n                        {\n                            row.children[m + 1].innerHTML = data.DataResult[m][1].toFixed(2).toString();\n                        }\n\n                    },\n                    error: function (error) {\n                        var row = document.getElementById(queries[i].ID);\n                        row.children[1].innerHTML = 'error';\n                    }\n                });\n```\n\n----------------------------------------\n\nTITLE: Example of Defining a Lyss CLS Provider\nDESCRIPTION: This PowerShell example creates a CLS provider named \"Lyss\" with the type \"WPP\", level \"Info\", and flags set to \"All\". This provider collects fatal, error, warning, and information messages from the Lyss component, using all defined flags (TF_Connection, TF_Diag, and TF_Protocol).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/centralized-logging-service/configure-providers.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$LyssProvider = New-CsClsProvider -Name \"Lyss\" -Type \"WPP\" -Level \"Info\" -Flags \"All\"\n```\n\n----------------------------------------\n\nTITLE: Managing Teams Work Location Detection Policy - PowerShell\nDESCRIPTION: This snippet Releases [Get|New|Set|Grant]-CsTeamsWorkLocationDetectionPolicy cmdlets using MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_68\n\nLANGUAGE: PowerShell\nCODE:\n```\n[Get|New|Set|Grant]-CsTeamsWorkLocationDetectionPolicy\n```\n\n----------------------------------------\n\nTITLE: Persistent Chat Transaction Setup - PowerShell\nDESCRIPTION: This PowerShell script configures a channel for the Persistent Chat synthetic transaction and grants test users permissions to use it. It uses `Get-Credential` to obtain credentials for the test users and `Test-CsPersistentChatMessage` with the `-Setup $true` flag to configure the channel.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/test-users-and-settings.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\n$cred1 = Get-Credential \"contoso\\testUser1\"\n$cred2 = Get-Credential \"contoso\\testUser2\"\n\nTest-CsPersistentChatMessage -TargetFqdn pool0.contoso.com -SenderSipAddress sip:testUser1@contoso.com -SenderCredential $cred1 -ReceiverSipAddress sip:testUser2@contoso.com -ReceiverCredential $cred2 -TestUser1SipAddress sip:testUser1@contoso.com -TestUser2SipAddress sip:testUser2@contoso.com -Setup $true\n```\n\n----------------------------------------\n\nTITLE: PowerShell Execution Policy Configuration\nDESCRIPTION: This PowerShell command sets the execution policy for the current user to RemoteSigned, allowing the execution of scripts downloaded from the internet as long as they are signed by a trusted publisher. This is necessary to run the Moodle-AzureAD-Script.ps1 script. The scope is set to CurrentUser to minimize the impact on other users or system-wide policies.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/install-moodle-integration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Updating CDR Configuration using Set-CsCdrConfiguration (PowerShell)\nDESCRIPTION: This cmdlet updates an existing Call Detail Recording (CDR) configuration for a specified site in Skype for Business. The `-Identity` parameter specifies the site (e.g., `site:Redmond`), and the `-PurgeHourOfDay` parameter sets the hour of the day when CDR data is purged (here, set to 23:00).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-monitoring-and-archiving-menu.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n Set-CsCdrConfiguration -Identity site:Redmond -PurgeHourOfDay 23\n```\n\n----------------------------------------\n\nTITLE: Setting Global Skype UI Policy - PowerShell\nDESCRIPTION: This PowerShell command sets the EnableSkypeUI parameter to $True on the Global client policy. This forces all users to use the Skype for Business client experience, unless they are assigned a more specific policy (site or user level).\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/plan-your-deployment/clients-and-devices/user-experience.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsClientPolicy -Identity Global -EnableSkypeUI $True\n```\n\n----------------------------------------\n\nTITLE: Referencing Education Staff Team Template ID in Microsoft Graph\nDESCRIPTION: This snippet shows the Microsoft Graph URL for referencing the 'educationStaff' team template.  It is designed for staff teams in educational institutions and includes the OneNote Staff Notebook app pinned to the General tab.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/get-started-with-teams-templates.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\n`https://graph.microsoft.com/v1.0/`<br>`teamsTemplates('educationStaff')`\n```\n\n----------------------------------------\n\nTITLE: New Network Site Cmdlet - PowerShell\nDESCRIPTION: This cmdlet creates a new network site in Skype for Business Server.  Network sites represent physical locations and are used for call admission control (CAC) and Enhanced 9-1-1 deployments.  Requires appropriate parameters to define site attributes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/call-admission-control/managing-call-admission-control-for-sites.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-CsNetworkSite\n```\n\n----------------------------------------\n\nTITLE: Setting Online Dial-In Conferencing User Default Number (Deprecated) - PowerShell\nDESCRIPTION: This snippet indicates the deprecation of the `Set-CsOnlineDialInConferencingUserDefaultNumber` cmdlet using the MicrosoftTeams PowerShell module. It is considered a breaking change.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_53\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsOnlineDialInConferencingUserDefaultNumber\n```\n\n----------------------------------------\n\nTITLE: Creating Trusted Application Pool for SEFAUtil - PowerShell\nDESCRIPTION: This step involves using the `New-CsTrustedApplicationPool` cmdlet to create a new trusted application pool for the SEFAUtil tool. This pool will host the application and allow it to interact with the Skype for Business Server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-enterprise-voice/deployment-process-for-group-call-pickup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsTrustedApplicationPool\n```\n\n----------------------------------------\n\nTITLE: Disable Room QR Code in Teams Rooms XML Config (Windows)\nDESCRIPTION: This XML snippet demonstrates how to disable the QR code display on the Teams Rooms on Windows home screen using the XML configuration file. By setting the RoomQRcodeEnabled element to 'false', the QR code will no longer be visible. This configuration is applied remotely to the Teams Rooms device.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/teams-rooms-qr-codes.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<RoomQRcodeEnabled>false</RoomQRcodeEnabled>\n```\n\n----------------------------------------\n\nTITLE: Updating Teams Messaging Configuration - PowerShell\nDESCRIPTION: This snippet presents the addition of the `MessagingNotes` parameter to the `Set-CsTeamsMessagingConfiguration` cmdlet. This parameter probably allows setting or updating notes related to Teams messaging configuration. It's part of the MicrosoftTeams PowerShell module.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_42\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-CsTeamsMessagingConfiguration -MessagingNotes\n```\n\n----------------------------------------\n\nTITLE: Remove-CsTeamsShiftsScheduleRecord Cmdlet\nDESCRIPTION: This snippet indicates the release of the `Remove-CsTeamsShiftsScheduleRecord` cmdlet in preview. This cmdlet allows the removal of schedule records from Teams Shifts. It's released in preview and the functionalities might change.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/teams-powershell-release-notes.md#_snippet_147\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsTeamsShiftsScheduleRecord\n```\n\n----------------------------------------\n\nTITLE: Get-CsAdDomain Cmdlet Example - PowerShell\nDESCRIPTION: This example demonstrates how to use the Get-CsAdDomain cmdlet to verify domain preparation in Skype for Business Server. It specifies the domain and the GlobalSettingsDomainController to ensure accurate retrieval of global settings. A return value of LC_DOMAIN_SETTINGS_STATE_READY indicates success.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/help-topics/2019/depwiz/ms.lync.dep.DeployMainVerifyDomainPrep.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsAdDomain -Domain domain1.contoso.net -GlobalSettingsDomainController dc01.domain1.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Get Trusted Application using PowerShell\nDESCRIPTION: This PowerShell command retrieves information about a specific trusted application in Skype for Business Server. It's used to verify that the trusted application has been created successfully. The Identity parameter specifies the FQDN and application ID of the trusted application.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/management-tools/use-scom-management-pack/watcher-nodes.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsTrustedApplication -Identity \"atl-watcher-001.litwareinc.com/urn:application:STWatcherNode\"\n```\n\n----------------------------------------\n\nTITLE: CDRDB Connection String (Before)\nDESCRIPTION: This code snippet represents the original connection string for the CDRDB data source before modification to include the failover partner.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-monitoring/monitoring-reports-with-a-mirror-database.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nData source=(local)\\archinst;initial catalog=LcsCDR\n```\n\n----------------------------------------\n\nTITLE: Creating a new chat room using New-CsPersistentChatRoom PowerShell cmdlet\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new chat room named ITChatRoom on the pool atl-cs-001.contoso.com and add it to the IT category. It uses the New-CsPersistentChatRoom cmdlet with the Name, PersistentChatPoolFqdn, and Category parameters.\n\nDependencies: Skype for Business Server Management Shell.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/chat-rooms.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsPersistentChatRoom -Name \"ITChatRoom\" -PersistentChatPoolFqdn \"atl-cs-001.contoso.com\"-Category \"IT\"\n```\n\n----------------------------------------\n\nTITLE: Set default meeting layout to Gallery/Content for single display (XML)\nDESCRIPTION: This XML snippet sets the default meeting layout to Gallery (Content and people) for a single front-of-room display. It uses the SingleFoRDefaultContentLayout and DefaultFoRExperience XML tags.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/manage-front-room-scale-res.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<SingleFoRDefaultContentLayout>1</SingleFoRDefaultContentLayout>\n<DefaultFoRExperience>0</DefaultFoRExperience>\n```\n\n----------------------------------------\n\nTITLE: Teams Rooms XML Configuration Example\nDESCRIPTION: This documentation references the Teams Rooms XML configuration file. This file allows administrators to customize settings and features for Teams Rooms devices. An example snippet is not provided, but the documentation link provides detailed information on how to use the XML configuration file.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/rooms-release-note.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: PowerShell Output Example for Get-CsClientPinInfo\nDESCRIPTION: This is an example of the output returned by the Get-CsClientPinInfo cmdlet, displaying information about the user's PIN status, including whether the PIN is set, locked out, the last time it was changed, and the PIN expiration time. The output provides a snapshot of the PIN configuration for the specified user.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/view-user-pin-information.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<pre>\nIdentity          : sip:kenmyer@litwareinc.com\nIsPinSet          : False\nIsLockedOut       : False\nLastPinChangeTime : 9/25/2012 1:35:03 PM\nPinExpirationTime :\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Test Port Connectivity with Telnet\nDESCRIPTION: This example demonstrates how to use Telnet to verify if the Edge server is listening on the necessary ports. It connects to the specified SIP FQDN and port (443 in this example). This test is crucial for ensuring external users can connect to the Edge server.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-edge-server/validate-edge-deployment.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\ntelnet sip.contoso.com 443\n```\n\n----------------------------------------\n\nTITLE: Remove All Site-Scoped QoE Configuration Settings - PowerShell\nDESCRIPTION: This PowerShell command removes all Quality of Experience (QoE) configuration settings applied at the site scope across the Skype for Business Server deployment. It uses Get-CsQoEConfiguration with a filter to retrieve site-scoped settings and pipes the results to Remove-CsQoEConfiguration, deleting each one found.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/delete-qoe-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsQoEConfiguration -Filter \"site:*\" | Remove-CsQoEConfiguration\n```\n\n----------------------------------------\n\nTITLE: Disable SavePassword Registry Setting\nDESCRIPTION: This registry setting disables the SavePassword feature, preventing users from saving their passwords when two-factor authentication is enabled.  This enhances security by not storing the user's credentials locally. Apply to the local machine.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/authentication/two-factor-authentication.md#_snippet_2\n\nLANGUAGE: registry\nCODE:\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Lync\n\nREG_DWORD: SavePassword\n  \nValue: 0x0\n```\n\n----------------------------------------\n\nTITLE: Proxy Example - Single Proxy Server - CMD\nDESCRIPTION: This is an example of setting a single proxy server using the `bitsadmin` command.  `<proxyserver>` should be replaced with the proxy server's address and `<port>` with the port number. The empty double quotes at the end are required.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/rooms/enroll-a-device.md#_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nbitsadmin /Util /SetIEProxy LOCALSYSTEM MANUAL_PROXY contosoproxy.corp.net:8080 \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Persistent Chat Output XSD Schema - XML\nDESCRIPTION: This XML snippet defines the schema (XSD) for the default output from the Skype for Business Compliance Server for persistent chat.  It specifies the structure and data types of elements such as Conversations, Sender, DateTimeUTC, Channel, Messages, and their attributes. It defines the structure of the XML data representing the persistent chat conversations for compliance purposes.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xs:schema id=\"Conversations\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">\n   <xs:simpleType name=\"ComplianceMessageType\">\n      <xs:restriction base=\"xs:string\">\n        <xs:enumeration value=\"JOIN\"/>\n        <xs:enumeration value=\"PART\"/>\n        <xs:enumeration value=\"CHAT\"/>\n        <xs:enumeration value=\"BACKCHAT\"/>\n        <xs:enumeration value=\"FILEUPLOAD\"/>\n        <xs:enumeration value=\"FILEDOWNLOAD\"/>\n      </xs:restriction>\n    </xs:simpleType>\n\n  <xs:element name=\"Sender\">\n    <xs:complexType>\n      <xs:attribute name=\"UserName\" type=\"xs:string\" />\n      <xs:attribute name=\"id\" type=\"xs:int\" />\n      <xs:attribute name=\"email\" type=\"xs:string\" use=\"optional\" />\n      <xs:attribute name=\"internal\" type=\"xs:boolean\" use=\"optional\" >\n        <xs:annotation><xs:documentation>If the user is internal or federated</xs:documentation></xs:annotation>\n      </xs:attribute>\n      <xs:attribute name=\"uri\" type=\"xs:anyURI\" use=\"optional\" />\n    </xs:complexType>\n  </xs:element>\n  <xs:element name=\"DateTimeUTC\">\n    <xs:complexType>\n      <xs:attribute name=\"since1970\" type=\"xs:long\" />\n      <xs:attribute name=\"string\" type=\"xs:string\" />\n      <xs:attribute name=\"long\" type=\"xs:long\" />\n    </xs:complexType>\n  </xs:element>\n  <xs:element name=\"Conversations\" msdata:IsDataSet=\"true\" msdata:UseCurrentLocale=\"true\">\n    <xs:complexType>\n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:element ref=\"Sender\" />\n        <xs:element ref=\"DateTimeUTC\" />\n        <xs:element name=\"Conversation\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"Channel\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n                <xs:complexType>\n                  <xs:attribute name=\"uri\" type=\"xs:anyURI\" />\n                  <xs:attribute name=\"name\" type=\"xs:string\" use=\"optional\" />\n                </xs:complexType>\n              </xs:element>\n              <xs:element name=\"FirstMessage\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element ref=\"Sender\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n                    <xs:element ref=\"DateTimeUTC\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n                  </xs:sequence>\n                  <xs:attribute name=\"type\" type=\"ComplianceMessageType\" />\n                  <xs:attribute name=\"content\" type=\"xs:string\" />\n                  <xs:attribute name=\"id\" type=\"xs:int\" />\n                </xs:complexType>\n              </xs:element>\n              <xs:element name=\"Messages\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n                <xs:complexType>\n                  <xs:sequence>\n                    <xs:element name=\"Message\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n                      <xs:complexType>\n                        <xs:sequence>\n                          <xs:element ref=\"Sender\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n                          <xs:element ref=\"DateTimeUTC\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n                        </xs:sequence>\n                        <xs:attribute name=\"type\" type=\"ComplianceMessageType\" />\n                        <xs:attribute name=\"content\" type=\"xs:string\" />\n                        <xs:attribute name=\"id\" type=\"xs:int\" />\n                      </xs:complexType>\n                    </xs:element>\n                  </xs:sequence>\n                </xs:complexType>\n              </xs:element>\n              <xs:element name=\"StartTimeUTC\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n                <xs:complexType>\n                  <xs:attribute name=\"since1970\" type=\"xs:long\" />\n                  <xs:attribute name=\"string\" type=\"xs:string\" />\n                  <xs:attribute name=\"long\" type=\"xs:long\" />\n                </xs:complexType>\n              </xs:element>\n              <xs:element name=\"EndTimeUTC\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n                <xs:complexType>\n                  <xs:attribute name=\"since1970\" type=\"xs:long\" />\n                  <xs:attribute name=\"string\" type=\"xs:string\" />\n                  <xs:attribute name=\"long\" type=\"xs:long\" />\n                </xs:complexType>\n              </xs:element>\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n      </xs:choice>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>\n```\n\n----------------------------------------\n\nTITLE: Remove CDR Configuration for a Specific Site - PowerShell\nDESCRIPTION: This command removes the CDR configuration settings that are applied to the Redmond site. It targets settings explicitly configured for that specific site.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/delete-configuration-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-CsCdrConfiguration -Identity \"site:Redmond\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Media Configuration in Skype for Business - PowerShell\nDESCRIPTION: This command retrieves the current media configuration settings in Skype for Business Server. It's used to verify if QoS is currently enabled or disabled for non-Windows devices. The output shows properties like EnableQoS, EncryptionLevel, and other media-related settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/enabling-qos-for-devices-that-are-not-based-on-windows.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsMediaConfiguration\n```\n\n----------------------------------------\n\nTITLE: Running the Office Customization Tool (OCT)\nDESCRIPTION: This command is used to launch the Office Customization Tool (OCT) from the command line. It requires the path to the `setup.exe` file within the Office installation directory. The `/admin` switch specifies that the OCT should be opened, allowing administrators to configure the Office installation.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/deploy/deploy-clients/use-the-office-customization-tool-oct.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\\\\server\\share\\Office15\\setup.exe /admin\n```\n\n----------------------------------------\n\nTITLE: Email Subject: Feedback Request - New Phone System\nDESCRIPTION: This snippet presents the subject line for the fourth email, to be sent two weeks after launch. It requests user feedback on the new phone system.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/prepare-my-users-email-templates.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nFEEDBACK REQUESTED: Your new phone system\n```\n\n----------------------------------------\n\nTITLE: Get Conference Directory - PowerShell\nDESCRIPTION: Retrieves information about the conference directories configured for use in Skype for Business Server. Conference directories help dial-in conferencing users locate conference information. The cmdlet returns conference directory objects with the configured settings.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/conferencing/conferencing.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsConferenceDirectory\n```\n\n----------------------------------------\n\nTITLE: Setting Edge Server Media Port Range for All Servers - PowerShell\nDESCRIPTION: This command configures the media port range for all Edge Servers in the Skype for Business deployment. It retrieves all Edge Server services and applies the specified port range to each using a ForEach loop. Changing default port ranges can impact some scenarios.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/network-management/qos/configuring-port-ranges-for-your-edge-servers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CsService -EdgeServer | ForEach-Object {Set-CsEdgeServer -Identity $_.Identity -MediaCommunicationPortStart 40803 -MediaCommunicationPortCount 24730}\n```\n\n----------------------------------------\n\nTITLE: Translating Compliance Data - C++\nDESCRIPTION: This C++ code snippet illustrates the method called by the Persistent Chat Compliance server at periodic intervals to translate conversation data. The `ConversationCollection` contains information collected since the last method call, determined by the `RunInterval` setting.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid Translate(ConversationCollection conversations)\n```\n\n----------------------------------------\n\nTITLE: Deleting Device Update Rules - PowerShell\nDESCRIPTION: This cmdlet removes a specified device update rule. The Identity parameter specifies the rule to be removed.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfBServer2019/use-powershell-client-menu.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\n Remove-CsDeviceUpdateRule -Identity service:WebServer:atl-cs-001.litwareinc.com/d5ce3c10-2588-420a-82ac-dc2d9b1222ff9\n```\n\n----------------------------------------\n\nTITLE: Creating a new QoE configuration with QoE disabled - PowerShell\nDESCRIPTION: This PowerShell command creates a new collection of QoE configuration settings applied to the Redmond site, but it disables QoE monitoring by setting the EnableQoE parameter to $False. This configuration will prevent the collection and saving of QoE records.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/health-and-monitoring/create-qoe-configuration-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CsQoEConfiguration -Identity \"site:Redmond\" -EnableQoE $False\n```\n\n----------------------------------------\n\nTITLE: Automating Teams Management using Microsoft Graph API\nDESCRIPTION: This snippet outlines the functions available through the Microsoft Graph API for automating team management in Microsoft Teams, enabling administrators to create, configure, clone, archive, and manage teams programmatically.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Teams/plan-teams-governance-edu.md#_snippet_1\n\nLANGUAGE: Graph API\nCODE:\n```\nThe [Microsoft Graph API (preview)](/graph/api/resources/teams-api-overview) can do the following tasks:\n\n- Create a team.\n- Add members and owners.\n- Add channels.\n- Add apps.\n- Shortcut those steps by cloning an existing team, and get its tabs too.\n- Give the user a link to the team you created.\n- Remove members, owners, channels, and apps when you no longer need them.\n- Archive the team when it's no longer active.\n- Delete the team.\n- Create a channel thread\n```\n\n----------------------------------------\n\nTITLE: FirstMessage XML Structure\nDESCRIPTION: This XML snippet shows the structure of the FirstMessage element within a conversation. It contains information about the initial message, including the sender details and timestamp. The Sender element contains attributes such as UserName, ID, email, internal, and URI.\nSOURCE: https://github.com/microsoftdocs/officedocs-skypeforbusiness/blob/public/Skype/SfbServer/manage/persistent-chat/configure-compliance.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<FirstMessage type=\"JOIN\" content=\"\" id=\"0\">\n      <Sender UserName=\"TestUser kazuto\" id=\"10\" email=\"kazuto@litwareinc.com\" internal=\"true\" uri=\"kazuto@litwareinc.com\" /> \n      <DateTimeUTC since1970=\"1212610540953\" string=\"2008-06-04T20:15:40.9535482Z\" long=\"633482073409535482\" /> \n</FirstMessage>\n```"
  }
]