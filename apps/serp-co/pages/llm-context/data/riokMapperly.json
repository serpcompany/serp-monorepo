[
  {
    "owner": "riok",
    "repo": "mapperly",
    "content": "TITLE: Mapper Usage (C#)\nDESCRIPTION: This C# code snippet demonstrates how to use the generated mapper. It instantiates the `CarMapper` class, creates a `Car` object, and then uses the `CarToCarDto` method to map the `Car` object to a `CarDto` object. The example uses `Should().Be()` which implies the usage of a testing framework like FluentAssertions.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/first-mapper.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar mapper = new CarMapper();\nvar car = new Car { NumberOfSeats = 10, ... };\nvar dto = mapper.CarToCarDto(car);\ndto.NumberOfSeats.Should().Be(10);\n```\n\n----------------------------------------\n\nTITLE: Defining the Car Mapper Interface (C#)\nDESCRIPTION: This code defines the mapper interface `CarMapper` with the `[Mapper]` attribute to trigger the source generator.  It specifies configurations to map the `Manufacturer` property to `Producer` and to map `CarColor` and `CarColorDto` enum members by name.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/generated-mapper-example.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Riok.Mapperly.Abstractions;\n\nnamespace Riok.Mapperly.Sample\n{\n    [Mapper(EnumMappingStrategy = EnumMappingStrategy.ByName, PropertyNameMappingStrategy = PropertyNameMappingStrategy.CaseSensitive)]\n    public static partial class CarMapper\n    {\n        [MapProperty(nameof(Car.Manufacturer), nameof(CarDto.Producer))]\n        public static partial CarDto Map(Car car);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring diagnostic severity using EditorConfig\nDESCRIPTION: This code snippet demonstrates how to configure the severity of Mapperly analyzer diagnostics using an `.editorconfig` file. The `dotnet_diagnostic.{RuleID}.severity` setting allows you to change the severity level (e.g., to error) for specific rules. This configuration applies to files matching the specified pattern (`*.cs`).\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/analyzer-diagnostics/index.mdx#_snippet_0\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.{RuleID}.severity = error\ndotnet_diagnostic.RMG020.severity = error\n```\n\n----------------------------------------\n\nTITLE: Mapping Flattened Properties using MapPropertyAttribute (C#)\nDESCRIPTION: This snippet demonstrates how to use the `MapPropertyAttribute` to manually configure property flattening when Mapperly cannot resolve the target or source property automatically. It shows three ways to define the source and target property paths: using arrays of property names, using a dot-separated property access path string, and using string interpolation with `nameof`.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/flattening.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MapProperty([nameof(Car.Make), nameof(Car.Make.Id)], nameof(CarDto.MakeId))]\n// Or alternatively\n[MapProperty(\"Make.Id\", \"MakeId\")]\n// Or\n[MapProperty($\"{nameof(Make)}.{nameof(Make.Id)}\", \"MakeId\")]\npartial CarDto Map(Car car);\n```\n\n----------------------------------------\n\nTITLE: Ignoring a User-Implemented Mapping Method in C#\nDESCRIPTION: This example shows how to ignore a user-implemented mapping method when `AutoUserMappings` is enabled.  The `[UserMapping(Ignore = true)]` attribute is used to prevent Mapperly from using the `IgnoredTimeSpanToHours` method for any mappings. `TimeSpanToHours` is still discovered and used by default.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/user-implemented-methods.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    public partial CarDto CarToCarDto(Car car);\n\n    // highlight-start\n    // discovered and used by default (AutoUserMappings is true by default)\n    // highlight-end\n    private int TimeSpanToHours(TimeSpan t) => t.Hours;\n\n    // highlight-start\n    // ignored user-implemented mapping\n    [UserMapping(Ignore = true)]\n    // highlight-end\n    private int IgnoredTimeSpanToHours(TimeSpan t) => t.Minutes / 60;\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Deep Cloning in Mapper C#\nDESCRIPTION: This code snippet shows how to enable deep cloning for a mapper using the `UseDeepCloning` property of the `MapperAttribute`. When set to true, Mapperly will create deep copies of objects instead of directly assigning them, ensuring that the target object is independent of the source.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(UseDeepCloning = true)]\npublic partial class CarMapper\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Map Property with Different Name C#\nDESCRIPTION: The `MapPropertyAttribute` allows you to map properties with different names between source and target objects. In this example, the `Model` property of the `Car` class is mapped to the `ModelName` property of the `CarDto` class.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    [MapProperty(nameof(Car.Model), nameof(CarDto.ModelName))]\n    public partial CarDto ToDto(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Update Target Object Declaration C#\nDESCRIPTION: Defines a Mapperly mapper with a method that updates an existing target object. The UpdateCarDto method takes a source Car object and a target CarDto object as parameters and updates the CarDto object with values from the Car object.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/existing-target.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    // highlight-start\n    public partial void UpdateCarDto(Car car, CarDto dto);\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Map from Source Object C#\nDESCRIPTION: The `MapPropertyFromSource` attribute maps the entire source object to a property of the target object. In this example, the `Car` object is mapped to the `OriginalCar` property of the `CarChanges` object.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    [MapPropertyFromSource(nameof(CarChanges.OriginalCar))]\n    public partial CarChanges ToChanges(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly: Static Mapper and Extension Method in C#\nDESCRIPTION: This snippet shows how to define a static mapper class with an extension method using Mapperly. It defines a static partial class `CarMapper` with a `ToCarDto` extension method and a private helper method `TimeSpanToHours`. The `[Mapper]` attribute enables Mapperly to generate the implementation for the partial method.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/static-mappers.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class CarMapper\n{\n    public static partial CarDto ToCarDto(this Car car);\n\n    private static int TimeSpanToHours(TimeSpan t) => t.Hours;\n}\n```\n\n----------------------------------------\n\nTITLE: Map Constant Value Declaration C#\nDESCRIPTION: This code snippet shows how to declare a mapping method using the `MapValue` attribute to assign a constant value \"C1\" to the `SourceSystem` property of the `CarDto` class during the mapping from a `Car` object.  The value must match the target type.  No external dependencies are required.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/constant-generated-values.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MapValue(nameof(CarDto.SourceSystem), \"C1\")]\npublic partial CarDto Map(Car car);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Mapping Method in C#\nDESCRIPTION: This code snippet shows how to manually implement a mapping method within a Mapperly mapper class.  The `TimeSpanToHours` method will be used by Mapperly whenever a mapping from `TimeSpan` to `int` is required. The mapper class must be decorated with the `[Mapper]` attribute.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/user-implemented-methods.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    public partial CarDto CarToCarDto(Car car);\n\n    // highlight-start\n    private int TimeSpanToHours(TimeSpan t) => t.Hours;\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Objects Usage C#\nDESCRIPTION: Demonstrates the usage of the `FruitMapper` to merge properties from a `FruitUpdate` object into an existing `Fruit` object. Only non-null values from `FruitUpdate` are applied to the `Fruit` object, leaving existing values intact if the corresponding property in `FruitUpdate` is null.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/existing-target.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nFruitMapper.ApplyUpdate(myUpdateRequest, myFruit);\n```\n\n----------------------------------------\n\nTITLE: Mapping Target Attribute Usage C#\nDESCRIPTION: Illustrates the usage of the `MappingTarget` attribute. The `ApplyUpdate` method is used as an extension method on the `myFruit` object with the `myUpdateRequest` as the parameter, mapping the values from `myUpdateRequest` to `myFruit`.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/existing-target.mdx#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nmyFruit.ApplyUpdate(myUpdateRequest);\n```\n\n----------------------------------------\n\nTITLE: Usage of IQueryable Projection (C#)\nDESCRIPTION: Demonstrates how to use the ProjectToDto extension method defined by Mapperly to project an IQueryable collection of Car objects to CarDto objects within an Entity Framework query. This allows for only the necessary fields to be retrieved from the database, optimizing performance.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/queryable-projections.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar dtos = await DbContext.Cars\n    .Where(...)\n    // highlight-start\n    .ProjectToDto()\n    // highlight-end\n    .ToListAsync();\n```\n\n----------------------------------------\n\nTITLE: Enum Fallback Value\nDESCRIPTION: Demonstrates the usage of `FallbackValue` on the `MapEnum` attribute to specify a fallback enum value when encountering an unknown value during mapping. The fallback value is used when no matching enum value is found. `FallbackValue` is only supported by `ByName` and `ByValueCheckDefined` enum mapping strategies and is not affected by enum naming strategies.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/enum.mdx#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    // highlight-start\n    [MapEnum(EnumMappingStrategy.ByName, FallbackValue = CarFeatureDto.Unknown)]\n    // highlight-end\n    public partial CarFeatureDto MapFeature(CarFeature feature);\n}\n```\n\n----------------------------------------\n\nTITLE: MapProperty Attribute for Constructor Mapping C#\nDESCRIPTION: Demonstrates using the MapProperty attribute to manually map the ModelName property of the Car class to the Model property of the CarDto record. This is used when automatic mapping fails or specific mapping is desired.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/ctor-mappings.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    // highlight-start\n    [MapProperty(nameof(Car.ModelName), nameof(CarDto.Model))]\n    // highlight-end\n    public partial CarDto ToDto(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: User-Implemented Mapping Method for IQueryable Projection (C#)\nDESCRIPTION: Illustrates how to define a user-implemented mapping method that Mapperly can inline during IQueryable projection. This enables more complex mapping logic while still leveraging Mapperly's efficient query generation, but the methods must adhere to specific limitations to be inlined.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/queryable-projections.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class CarMapper\n{\n    public static partial IQueryable<CarDto> ProjectToDto(this IQueryable<Car> q);\n\n    // highlight-start\n    private static string MapCarBrandName(CarBrand brand)\n      => brand.Name;\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore Target and Source Properties C#\nDESCRIPTION: The `MapperIgnoreTargetAttribute` and `MapperIgnoreSourceAttribute` are used to ignore specific properties or fields during mapping. This example ignores the `MakeId` property on the target (`CarDto`) and the `Id` property on the source (`Car`).\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    [MapperIgnoreTarget(nameof(CarDto.MakeId))]\n    [MapperIgnoreSource(nameof(Car.Id))]\n    public partial CarDto ToDto(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Mapping with Before/After Logic C#\nDESCRIPTION: This C# code snippet demonstrates how to wrap a Mapperly generated mapping method within a custom method to inject custom logic before and after the mapping process. The `UserMapping` attribute with `Default = true` ensures Mapperly uses this custom mapping whenever a conversion from `Car` to `CarDto` is needed.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/before-after-map.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    private partial CarDto CarToCarDto(Car car);\n\n    // highlight-start\n    // Default ensures Mapperly uses this mapping whenever a conversion\n    // from Car to CarDto is needed instead of the `CarToCarDto` method.\n    [UserMapping(Default = true)]\n    public CarDto MapCarToCarDto(Car car)\n    {\n        // custom before map code...\n        var dto = CarToCarDto(car);\n        // custom after map code...\n        return dto;\n    }\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Mapper Declaration with Private/Protected Members in C#\nDESCRIPTION: This C# code snippet shows how to declare a Mapperly mapper to include only private and protected members using the `MemberVisibility` enum. The `IncludedMembers` property is set to `MemberVisibility.Private | MemberVisibility.Protected` to specify that only these members should be considered during mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/private-members.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// highlight-start\n[Mapper(IncludedMembers = MemberVisibility.Private | MemberVisibility.Protected)]\n// highlight-end\npublic partial class FruitMapper\n{\n    public partial FruitDto ToDto(Fruit source);\n}\n```\n\n----------------------------------------\n\nTITLE: User-Implemented Mapping From Source with MapPropertyFromSource in Mapperly (C#)\nDESCRIPTION: This example shows how to use the `MapPropertyFromSource` attribute in Mapperly to access multiple properties of the source object in a custom mapping method. It demonstrates mapping the `NetPrice` property of the DTO by calculating it from the `Price` and `Discount` properties of the source `Car` object.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n  // highlight-start\n  [MapPropertyFromSource(nameof(CarDto.NetPrice), Use = nameof(MapPrice))]\n  // highlight-end\n  public partial CarDto MapCar(Car source);\n\n  // highlight-start\n  private decimal MapPrice(Car car)\n    => car.Price - car.Discount;\n  // highlight-end\n\n  // generates\n  target.NetPrice = MapPrice(source);\n}\n```\n\n----------------------------------------\n\nTITLE: Map Constant Value Generated Code C#\nDESCRIPTION: This is the generated C# code that results from using the `MapValue` attribute. It directly assigns the constant value \"C1\" to the `SourceSystem` property of the target `CarDto` object. No external dependencies are required.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/constant-generated-values.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntarget.SourceSystem = \"C1\";\n```\n\n----------------------------------------\n\nTITLE: Generated Code Using Object Factory (C#)\nDESCRIPTION: This snippet shows the generated code by Mapperly when an object factory is defined for the target type. Instead of using a constructor, the generated code calls the CreateCarDto method to instantiate the target object. Dependencies include the `CarMapper` class and the `CarDto` object factory method.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/object-factories.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class CarMapper\n{\n    public partial CarDto CarToCarDto(Car car)\n    {\n        // highlight-start\n        var target = CreateCarDto();\n        // highlight-end\n        // map all properties...\n        return target;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Property Mapping with UserMapping Enabled in Mapperly (C#)\nDESCRIPTION: This example illustrates how to implement custom property mappings using the `MapProperty` and `UserMapping` attributes in Mapperly, with AutoUserMappings enabled. It defines a custom method (`MapPrice`) to handle the mapping of the `Price` property from decimal to a formatted string.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n  // highlight-start\n  [MapProperty(nameof(Car.Price), nameof(CarDto.Price), Use = nameof(MapPrice))]\n  // highlight-end\n  public partial CarDto MapCar(Car source);\n\n  // highlight-start\n  // set Default = false to not use it for all decimal => string conversions\n  // if using AutoUserMappings = false, the UserMapping is not needed.\n  [UserMapping(Default = false)]\n  private string MapPrice(decimal price)\n      => (price / 100).ToString(\"C\");\n  // highlight-end\n\n  // generates\n  target.Price = MapPrice(source.Price);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping with Additional Parameter Declaration in C#\nDESCRIPTION: Demonstrates how to declare a mapping method with an additional string parameter in Mapperly. The parameter 'name' will be used to map a value to a property with the same name in the target object.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/additional-mapping-parameters.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n  // highlight-start\n  public partial CarDto Map(Car source, string name);\n  // highlight-end\n}\n\npublic class Car\n{\n  public string Brand { get; set; } = string.Empty;\n  public string Model { get; set; } = string.Empty;\n}\n\npublic class CarDto\n{\n  public string Brand { get; set; } = string.Empty;\n  public string Model { get; set; } = string.Empty;\n  public string Name { get; set; } = string.Empty;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Property Mappings for IQueryable Projection (C#)\nDESCRIPTION: Shows how to configure custom property mappings for IQueryable projections using the MapProperty attribute on a private partial method. This enables renaming or customizing the mapping of specific properties during the projection.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/queryable-projections.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class CarMapper\n{\n    // highlight-start\n    public static partial IQueryable<CarDto> ProjectToDto(this IQueryable<Car> q);\n    // highlight-end\n\n    // highlight-start\n    [MapProperty(nameof(Car.Manufacturer), nameof(CarDto.Producer)]\n    // highlight-end\n    private static partial CarDto Map(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Global Enum Naming Strategy\nDESCRIPTION: Applies a global enum naming strategy at the mapper level.  This affects how enum values are matched to strings.  This example sets the `EnumNamingStrategy` to `SnakeCase` for all enum-to-string mappings within the `CarMapper` class.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/enum.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// highlight-start\n[Mapper(EnumNamingStrategy = EnumNamingStrategy.SnakeCase)]\n// highlight-end\npublic partial class CarMapper\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening All Members of a Property with MapNestedProperties (C#)\nDESCRIPTION: This snippet shows how to use the `MapNestedProperties` attribute to bring all sub-members of a specified member into scope as if they were defined on the source object. This is useful when a property has many members that need to be flattened but cannot be figured out automatically. The nested members have a lower priority than all immediate members of the source object.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/flattening.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[MapProperty([nameof(Car.Engine), nameof(Car.Engine.Horsepower)], nameof(CarDto.Horsepower))]\n[MapProperty([nameof(Car.Engine), nameof(Car.Engine.FuelType)], nameof(CarDto.FuelType))]\n[MapProperty([nameof(Car.Engine), nameof(Car.Engine.Cylinders)], nameof(CarDto.Cylinders))]\n// Is equivalent to:\n// highlight-start\n[MapNestedProperties(nameof(Car.Engine))]\n// highlight-end\npartial CarDto Map(Car car);\n```\n\n----------------------------------------\n\nTITLE: Set Default Mapper Configuration C#\nDESCRIPTION: The `MapperDefaultsAttribute` is used to set default configurations that are applied to all mappers within an assembly. This example sets the `EnumMappingIgnoreCase` property to true, making enum mappings case-insensitive.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: MapperDefaults(EnumMappingIgnoreCase = true)]\n```\n\n----------------------------------------\n\nTITLE: Mapper Declaration (C#)\nDESCRIPTION: This C# code snippet demonstrates the declaration of a Mapperly mapper class. The `Mapper` attribute from `Riok.Mapperly.Abstractions` is applied to a partial class named `CarMapper`. This attribute triggers Mapperly to generate the implementation for the mapping methods defined within the class, such as `CarToCarDto`.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/first-mapper.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    public partial CarDto CarToCarDto(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering and Aggregating Collections in IQueryable Projections (C#)\nDESCRIPTION: Demonstrates how to use user-implemented mapping methods for ordering and aggregating collections within an IQueryable projection. This involves mapping a collection of CarModel objects to a collection of CarModelDto objects, while applying ordering logic using LINQ.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/queryable-projections.mdx#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class CarMapper\n{\n    public static partial IQueryable<CarDto> ProjectToDto(this IQueryable<Car> q);\n\n    private static partial CarModelDto MapCarModel(CarModel model);\n\n    // highlight-start\n    private static ICollection<CarModelDto> MapOrderedCarBrandName(ICollection<CarModel> models)\n      // note: do not use the method group '.Select(MapCarModel)', as that cannot be inlined\n      => models.OrderBy(x => x.Name).Select(x => MapCarModel(x)).ToList();\n    // highlight-end\n  }\n```\n\n----------------------------------------\n\nTITLE: Manually Mapped Enum Values\nDESCRIPTION: Illustrates how to manually map enum values using the `MapEnumValueAttribute`. This is useful for explicitly defining mappings between specific enum values, enum to strings, and string to enums. Explicit enum mappings are not affected by enum naming strategies. It shows three mapping scenarios: enum to enum, string to enum, and enum to string.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/enum.mdx#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    [MapEnum(EnumMappingStrategy.ByName)]\n    // highlight-start\n    [MapEnumValue(CarFeature.AWD, CarFeatureDto.AllWheelDrive)]\n    // highlight-end\n    public partial CarFeatureDto MapFeature(CarFeature feature);\n\n    // highlight-start\n    [MapEnumValue(\"AWD\", CarFeatureDto.AllWheelDrive)]\n    // highlight-end\n    public partial CarFeatureDto MapFeatureFromString(string feature);\n\n    // highlight-start\n    [MapEnumValue(CarFeatureDto.AllWheelDrive, \"AWD\")]\n    // highlight-end\n    public partial string MapFeatureToString(CarFeatureDto feature);\n}\n```\n\n----------------------------------------\n\nTITLE: Strict Mapping at Mapper Level C#\nDESCRIPTION: This code shows how to set a global required mapping strategy at the mapper level, such as only requiring all source members to be mapped.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(RequiredMappingStrategy = RequiredMappingStrategy.Source)]\npublic partial class CarMapper\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Global Strict Enum Mapping\nDESCRIPTION: Shows how to enforce strict enum member mappings at the mapper level using the `RequiredEnumMappingStrategy` property.  This ensures that all enum members are mapped, and generates diagnostics if there are unmapped source or target enum members. The `RequiredEnumMappingStrategy` can be overriden at the mapping method level.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/enum.mdx#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// highlight-start\n[Mapper(RequiredEnumMappingStrategy = RequiredMappingStrategy.Source)]\n// highlight-end\npublic partial class CarMapper\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore Obsolete Members Locally C#\nDESCRIPTION: The `MapperIgnoreObsoleteMembersAttribute` allows you to specify the ignore obsolete members strategy for a specific mapping method. This overrides the global setting defined in the `MapperAttribute`. In this example, both source and target obsolete members will be ignored for the `MapMake` method.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    [MapperIgnoreObsoleteMembers(IgnoreObsoleteMembersStrategy.Both)]\n    public partial CarMakeDto MapMake(CarMake make);\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Code for Derived Type Mapping in C#\nDESCRIPTION: This code snippet shows the generated code by Mapperly for mapping derived types based on the `MapDerivedTypeAttribute` declarations. It uses a `switch` statement to determine the concrete type of the source object and then calls the appropriate mapping method for that type. If no derived type mapping is found, it throws an `ArgumentException`.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/derived-type-mapping.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class ModelMapper\n{\n    public static partial FruitDto MapFruit(Fruit source)\n    {\n        return source switch\n        {\n            Banana x => MapToBananaDto(x),\n            Apple x => MapToAppleDto(x),\n            _ => throw new System.ArgumentException($\"Cannot map {source.GetType()} to FruitDto as there is no known derived type mapping\", nameof(source)),\n        };\n    }\n\n    // ... implementations of MapToBananaDto and MapToAppleDto\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Property Mapping with UserMapping Disabled in Mapperly (C#)\nDESCRIPTION: This example demonstrates custom property mappings in Mapperly using the `MapProperty` attribute when AutoUserMappings is disabled. It defines a custom mapping method (`MapPrice`) to handle the mapping of the `Price` property from decimal to string. When `AutoUserMappings` is false, the `UserMapping` attribute is not needed.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(AutoUserMappings = false)]\npublic partial class CarMapper\n{\n  // highlight-start\n  [MapProperty(nameof(Car.Price), nameof(CarDto.Price), Use = nameof(MapPrice))]\n  // highlight-end\n  public partial CarDto MapCar(Car source);\n\n  // highlight-start\n  private string MapPrice(decimal price)\n    => (price / 100).ToString(\"C\");\n  // highlight-end\n\n  // generates\n  target.Price = MapPrice(source.Price);\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Object Factory Example (C#)\nDESCRIPTION: This code demonstrates the usage of generic object factories in Mapperly. The `CreateCar<T>` method creates instances of `CarDto` and its subclasses using `CarDto.CreateFromCustomMethod()`, while the `Create<T>` method resolves objects of any type using a dependency injection container.  These generic factories must be parameterless.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/object-factories.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    // highlight-start\n    // an object factory which will create instances of CarDto and all it's subclasses\n    [ObjectFactory]\n    private T CreateCar<T>()\n        where T : CarDto\n        => CarDto.CreateFromCustomMethod();\n\n    // or an object factory which will create objects for all types\n    [ObjectFactory]\n    private T Create<T>()\n        => _diContainer.Resolve<T>();\n    // highlight-end\n\n    public partial CarDto CarToCarDto(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly: Static Methods in Instantiable Class in C#\nDESCRIPTION: This snippet demonstrates the usage of static methods within a non-static mapper class in Mapperly, supporting the static interface use case. It shows how to implement a static abstract method from an interface in a mapper class. All mapping methods within the class must be static to simplify method resolution.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/static-mappers.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICarMapper\n{\n    static abstract CarDto ToDto(Car car);\n}\n\n[Mapper]\n// highlight-start\npublic partial class CarMapper : ICarMapper\n// highlight-end\n{\n// highlight-start\n    public static partial CarDto ToDto(Car car);\n// highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Naming Strategy Method Level\nDESCRIPTION: Applies a specific enum naming strategy to a particular enum mapping method.  It overrides the global naming strategy (if any) for that specific method.  This example sets both `EnumMappingStrategy` and `NamingStrategy` to `SnakeCase` for the `MapMake` method.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/enum.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    // highlight-start\n    [MapEnum(EnumMappingStrategy.ByName, NamingStrategy = EnumNamingStrategy.SnakeCase)]\n    // highlight-end\n    public partial CarMakeDto MapMake(CarMake make);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CarDto Target Class (C#)\nDESCRIPTION: This code defines the target class `CarDto` with properties similar to `Car`, but with a different name (`Producer`) for the manufacturer. The purpose is to demonstrate how Mapperly handles different property names during mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/generated-mapper-example.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\n\nnamespace Riok.Mapperly.Sample\n{\n    public class CarDto\n    {\n        public string Name { get; set; } = string.Empty;\n        public CarColorDto CarColor { get; set; } = CarColorDto.Red;\n        public int Kilometer { get; set; } = 10;\n        public ManufacturerDto Producer { get; set; } = new();\n    }\n\n    public class ManufacturerDto\n    {\n        public string Name { get; set; } = string.Empty;\n        public DateTime Founded { get; set; }\n    }\n\n    public enum CarColorDto\n    {\n        Red = 4,\n        Green = 5,\n        Blue = 6,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Specific Conversion in Mapperly (C#)\nDESCRIPTION: This code snippet shows how to disable a specific automatic conversion in Mapperly.  It sets the `EnabledConversions` property to `MappingConversionType.All` and then removes the specific conversion type using the bitwise NOT operator `~`.  In this example, the `ToStringMethod` conversion type is disabled. The CarMapper class demonstrates a partial class with this setting.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/conversions.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(EnabledConversions = MappingConversionType.All & ~MappingConversionType.ToStringMethod)]\npublic partial class CarMapper\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: CarDto Constructor Example C#\nDESCRIPTION: Shows a CarDto class with a constructor that takes a 'model' parameter. This example illustrates mapping a property to a constructor parameter using the string literal for the target parameter name.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/ctor-mappings.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CarDto\n{\n    // highlight-start\n    public CarDto(string model)\n    // highlight-end\n    {\n        ModelName = model;\n    }\n\n    public string ModelName { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Strict Enum Mapping\nDESCRIPTION: Illustrates how to apply strict enum mapping requirements to a specific mapping method using `MapperRequiredMapping`. This configuration overrides the global `RequiredEnumMappingStrategy` setting. The `RequiredMappingStrategy` is set to `Source`, enforcing strict mapping only for the source enum.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/enum.mdx#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    // highlight-start\n    [MapperRequiredMapping(RequiredMappingStrategy.Source)]\n    // highlight-end\n    public partial CarFeatureDto MapCar(CarFeature feature);\n}\n```\n\n----------------------------------------\n\nTITLE: Preserve Mapperly Attributes at Runtime\nDESCRIPTION: Sets the MapperlyAbstractionsScope MSBuild variable to 'runtime' to preserve Mapperly attributes at runtime. This requires the Mapperly package reference to include runtime assets.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/installation.mdx#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <MapperlyAbstractionsScope>runtime</MapperlyAbstractionsScope>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Generated Mapping Code Using UnsafeAccessor in C#\nDESCRIPTION: This C# code snippet shows the generated code by Mapperly when mapping private members. It creates a file-scoped class containing accessor methods for each inaccessible member. These accessors utilize the `UnsafeAccessorAttribute` for direct member access without reflection, ensuring performance. The example includes the mapping logic and the unsafe accessor definitions.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/private-members.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class FruitMapper\n{\n  private partial global::FruitDto ToDto(global::Fruit source)\n  {\n    var target = UnsafeAccessor.CreateFruitDto();\n    target.GetIsSeeded1() = source.GetIsSeeded();\n    target.Name = source.Name;\n    target.SetSweetness(source.GetSweetness());\n    return target;\n  }\n}\n\nstatic file class UnsafeAccessor\n{\n  [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Constructor)]\n  public static extern global::FruitDto CreateFruitDto(this global::FruitDto target);\n\n  [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = \"_isSeeded\")]\n  public static extern ref bool GetSeeded(this global::Fruit target);\n\n  [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = \"_isSeeded\")]\n  public static extern ref bool GetSeeded1(this global::FruitDto target);\n\n  [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = \"get_Sweetness\")]\n  public static extern int GetSweetness(this global::Fruit source);\n\n  [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = \"set_Sweetness\")]\n  public static extern void SetSweetness(this global::FruitDto target, int value);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Target Attribute Declaration C#\nDESCRIPTION: Demonstrates the usage of the `MappingTarget` attribute in Mapperly. This attribute allows you to designate the first method parameter as the mapping target, enabling extension method-style mapping. Also uses `AllowNullPropertyAssignment = false`\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/existing-target.mdx#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// highlight-start\n[Mapper(AllowNullPropertyAssignment = false)]\n// highlight-end\nstatic partial class FruitMapper\n{\n  // highlight-start\n  public static partial void ApplyUpdate([MappingTarget] this Fruit fruit, FruitUpdate update);\n  // highlight-end\n}\n\nclass Fruit { public required string Name { get; set; } public required string Color { get; set; } }\nrecord FruitUpdate(string? Name, string? Color);\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Mapping Method in C# with Mapperly\nDESCRIPTION: This code snippet demonstrates how to define a generic mapping method `MapFruit<TTarget>(Fruit source)` using Mapperly. Mapperly implements this mapping by using user-defined mappings that satisfy the source and target type constraints. It uses `BananaDto MapBanana(Banana source)` and `AppleDto MapApple(Apple source)` to map derived types of `Fruit`.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/generic-mapping.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class ModelMapper\n{\n    // highlight-start\n    public static partial TTarget MapFruit<TTarget>(Fruit source);\n    // highlight-end\n\n    private static partial BananaDto MapBanana(Banana source);\n    private static partial AppleDto MapApple(Apple source);\n}\n\nclass Fruit {}\nclass Banana : Fruit {}\nclass Apple : Fruit {}\n\nclass BananaDto {}\nclass AppleDto {}\n\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Property Name Mapping C#\nDESCRIPTION: This example shows how to configure Mapperly to use case-insensitive property name matching using the `PropertyNameMappingStrategy` property of the `MapperAttribute`. This is useful when source and target properties differ only in casing.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(PropertyNameMappingStrategy = PropertyNameMappingStrategy.CaseInsensitive)]\npublic partial class CarMapper\n{\n    public partial CarDto ToDto(Car car);\n}\n\npublic class Car\n{\n    public string ModelName { get; set; }\n}\n\npublic class CarDto\n{\n    public string modelName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Factory Example in Mapperly (C#)\nDESCRIPTION: This code snippet demonstrates how to define an object factory method within a Mapperly mapper class using the ObjectFactoryAttribute.  The factory method, CreateCarDto, is responsible for creating instances of the CarDto type by calling CarDto.CreateFromCustomMethod(). This factory will be invoked instead of a constructor when mapping to `CarDto`.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/object-factories.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    // highlight-start\n    [ObjectFactory]\n    private CarDto CreateCarDto()\n        => CarDto.CreateFromCustomMethod();\n    // highlight-end\n\n    public partial CarDto CarToCarDto(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Only Specific Conversions in Mapperly (C#)\nDESCRIPTION: This code snippet demonstrates how to enable only specific automatic conversions in Mapperly, disabling all others by default. It sets the `EnabledConversions` property to a combination of the desired conversion types using the bitwise OR operator `|`. In this example, only `Constructor` and `ExplicitCast` conversions are enabled. The CarMapper class demonstrates a partial class with this setting.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/conversions.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(EnabledConversions = MappingConversionType.Constructor | MappingConversionType.ExplicitCast)]\npublic partial class CarMapper\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Global Enum Mapping Strategy\nDESCRIPTION: Applies a global enum mapping strategy at the mapper level, affecting all enums mapped within that mapper.  It sets both the mapping strategy and ignore case property for enum mappings.  This example uses `EnumMappingStrategy.ByName` and sets `EnumMappingIgnoreCase` to true.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/enum.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// highlight-start\n[Mapper(EnumMappingStrategy = EnumMappingStrategy.ByName, EnumMappingIgnoreCase = true)]\n// highlight-end\npublic partial class CarMapper\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using FormatProviderAttribute for Culture-Specific String Formatting in Mapperly (C#)\nDESCRIPTION: This example demonstrates how to use the `FormatProviderAttribute` in Mapperly to specify a culture-specific format provider for string conversions. It shows how to define a default format provider and a specific format provider for a property using `MapPropertyAttribute`.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n  // highlight-start\n  [FormatProvider(Default = true)]\n  private IFormatProvider CurrentCulture => CultureInfo.CurrentCulture;\n  // highlight-end\n\n  // highlight-start\n  [FormatProvider]\n  private readonly IFormatProvider _enCulture = CultureInfo.GetCultureInfo(\"en-US\");\n  // highlight-end\n\n  // highlight-start\n  [MapProperty(nameof(Car.LocalPrice), nameof(CarDto.LocalPrice), StringFormat = \"C\")]\n  [MapProperty(nameof(Car.ListPrice), nameof(CarDto.ListPrice), StringFormat = \"C\", FormatProvider = nameof(_enCulture)]\n  // highlight-end\n  public partial CarDto MapCar(Car car);\n\n  // generates\n  target.LocalPrice = source.LocalPrice.ToString(\"C\", CurrentCulture);\n  target.ListPrice = source.ListPrice.ToString(\"C\", _enCulture);\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing diagnostics using SuppressMessageAttribute in C#\nDESCRIPTION: This code snippet shows how to suppress a Mapperly analyzer diagnostic using the `SuppressMessageAttribute` in C#. This attribute is applied to a method and allows you to specify the category (e.g., \"Mapper\") and the rule ID (e.g., \"RMG066\") to suppress.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/analyzer-diagnostics/index.mdx#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[SuppressMessage(\"Mapper\", \"RMG066:No members are mapped in an object mapping\")]\n```\n\n----------------------------------------\n\nTITLE: Update Target Object Usage C#\nDESCRIPTION: Demonstrates how to use the generated mapper to update an existing CarDto object with values from a Car object.  It initializes a CarMapper, creates instances of Car and CarDto, calls the UpdateCarDto method, and then asserts that the properties of the CarDto object have been updated.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/existing-target.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar mapper = new CarMapper();\nvar car = new Car { NumberOfSeats = 10, ... };\nvar dto = new CarDto();\n    \nmapper.UpdateCarDto(car, dto);\ndto.NumberOfSeats.Should().Be(10);\n```\n\n----------------------------------------\n\nTITLE: Custom Reference Handler with IReferenceHandler Parameter C#\nDESCRIPTION: Demonstrates how to use a custom `IReferenceHandler` implementation in a Mapperly mapper by adding a parameter of type `Riok.Mapperly.Abstractions.ReferenceHandling.IReferenceHandler` annotated with the `ReferenceHandlerAttribute` to the mapping method. This allows for custom logic for handling circular references.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/reference-handling.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(UseReferenceHandling = true)]\npublic partial class CarMapper\n{\n    public partial CarDto CarToCarDto(Car car, [ReferenceHandler] IReferenceHandler myRefHandler);\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Mapping Strategy Method Level\nDESCRIPTION: Applies an enum mapping strategy to a specific mapping method within a mapper.  The `MapEnumAttribute` is used on the mapping method.  This example uses `EnumMappingStrategy.ByName` and sets `IgnoreCase` to true for the `MapMake` method.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/enum.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    // highlight-start\n    [MapEnum(EnumMappingStrategy.ByName, IgnoreCase = true)]\n    // highlight-end\n    public partial CarMakeDto MapMake(CarMake make);\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore Obsolete Members Globally C#\nDESCRIPTION: This code snippet demonstrates how to globally ignore obsolete members using the `IgnoreObsoleteMembersStrategy` property of the `MapperAttribute`. Setting it to `IgnoreObsoleteMembersStrategy.Both` will prevent both source and target obsolete members from being mapped.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(IgnoreObsoleteMembersStrategy = IgnoreObsoleteMembersStrategy.Both)]\npublic partial class CarMapper\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly MapProperty Configuration C#\nDESCRIPTION: This code snippet demonstrates the use of `MapProperty` attribute to map properties between source (A) and target (B) types. It attempts to map `A.StringValue` to `B.StringValue9`, which leads to a 'Mapping target member not found' error, because the target member does not exist.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.WithManualMappedNotFoundTargetPropertyShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[MapProperty(nameof(A.StringValue), nameof(B.StringValue9)] private partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Generated Mapping Code with Additional Parameter in C#\nDESCRIPTION: Shows the generated code for a mapping method with an additional parameter in Mapperly. The 'name' parameter is used to directly assign its value to the 'Name' property of the target object.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/additional-mapping-parameters.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n  // highlight-start\n  public partial CarDto Map(Car source, string name)\n  // highlight-end\n  {\n    var target = new CarDto();\n    target.Brand = source.Brand;\n    target.Model = source.Model;\n    // highlight-start\n    target.Name = name;\n    // highlight-end\n    return target;\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: String Formatting C#\nDESCRIPTION: The `StringFormat` property of the `MapPropertyAttribute` can be used to customize the string format used when converting to a string. This example shows how to format the `Price` property of the `Car` class as currency when mapping it to the `Price` property of the `CarDto` class.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n  [MapProperty(nameof(Car.Price), nameof(CarDto.Price), StringFormat = \"C\")]\n  public partial CarDto MapCar(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Supported Object Factory Method Signatures (C#)\nDESCRIPTION: This code snippet lists the different supported method signatures for object factories in Mapperly.  It shows the various combinations of source and target types, including generic and non-generic variations.  The signatures define the possible parameters and return types for object factory methods.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/object-factories.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTargetType CreateTargetType();\nTargetType CreateTargetType(SourceType source);\nTargetType CreateTargetType<S>(S source);\nT CreateTargetType<T>();\nT CreateTargetType<T>(SourceType source);\nTTarget CreateTargetType<TSource, TTarget>(TSource source);\nTTarget CreateTargetType<TTarget, TSource>(TSource source);\n```\n\n----------------------------------------\n\nTITLE: Enum Mapping with Missing Members in C#\nDESCRIPTION: This code snippet demonstrates enum mapping using Mapperly's `MapEnum` attribute with `EnumMappingStrategy.ByName`. It shows a partial method `ToE1` that maps from enum `E1` to enum `E2`. The diagnostics indicate that certain enum members in `E1` are missing in `E2` and vice-versa, potentially leading to mapping issues or exceptions.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumTest.EnumToOtherEnumByNameWithoutOverlap.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MapEnum(EnumMappingStrategy.ByName)] private partial E2 ToE1(E1 source);\n```\n\n----------------------------------------\n\nTITLE: MapProperty Attribute with String Literal C#\nDESCRIPTION: Illustrates using the MapProperty attribute with a string literal to specify the constructor parameter name. This is necessary when the constructor parameter name ('model') differs from the source property name (ModelName).\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/ctor-mappings.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    // highlight-start\n    [MapProperty(nameof(Car.ModelName), \"model\")]\n    // highlight-end\n    public partial CarDto ToDto(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Configuration (C#)\nDESCRIPTION: This code snippet shows a Mapperly mapping configuration where the nested property 'Value' of source type 'A' is configured for mapping but either no corresponding target property exists, or the mapping is not correctly implemented.  This results in RMG020 and RMG071 warnings.  The MapNestedProperties attribute is applied to the Map method.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectNestedPropertyTest.UnusedNestedPropertiesShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MapNestedProperties(nameof(A.Value))] partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Using Full nameof for Property Paths in Mapperly (C#)\nDESCRIPTION: This snippet demonstrates how to use the \"fullnameof\" feature in Mapperly to configure property paths using `nameof`. Opt-in is done by prefixing the path with `@`. This allows for specifying nested property paths using the `nameof` operator, resulting in a property path string.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/flattening.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[MapProperty(nameof(@Car.Make.Id), nameof(CarDto.MakeId))]\npartial CarDto Map(Car car);\n```\n\n----------------------------------------\n\nTITLE: Declare Derived Type Mapping with MapDerivedTypeAttribute C#\nDESCRIPTION: This code snippet demonstrates how to declare derived type mappings using the `MapDerivedTypeAttribute` in Mapperly. It shows examples for both C# language level ≥ 11 and < 11. The `MapDerivedTypeAttribute` associates a base type mapping method with specific derived type mappings. Source types must implement/extend the mapping method parameter, while target types must implement/extend the mapping method return type.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/derived-type-mapping.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class ModelMapper\n{\n    // highlight-start\n    [MapDerivedType<Banana, BananaDto>] // for c# language level ≥ 11\n    [MapDerivedType(typeof(Apple), typeof(AppleDto))] // for c# language level < 11\n    // highlight-end\n    public static partial FruitDto MapFruit(Fruit source);\n}\n\nabstract class Fruit {}\nclass Banana : Fruit {}\nclass Apple : Fruit {}\n\nabstract class FruitDto {}\nclass BananaDto : FruitDto {}\nclass AppleDto : FruitDto {}\n\n```\n\n----------------------------------------\n\nTITLE: Car Class with ModelName Property C#\nDESCRIPTION: Defines a simple Car class with a ModelName property. This is part of the example demonstrating mapping a property to a constructor parameter.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/ctor-mappings.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Car\n{\n    // highlight-start\n    public string ModelName { get; set; }\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly MapProperty Diagnostic Error\nDESCRIPTION: This code snippet shows the location of Mapperly diagnostic errors related to the MapProperty attribute. It highlights common issues such as source member not found, unmapped source members, and target members not found on the source type. The message also indicates the usage of a non-existent property 'MyValueIdXXX'.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyFlatteningTest.ManualUnflattenedPropertySourcePropertyNotFoundShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/*\n{\n    [MapProperty(\"MyValueIdXXX\", \"Value.Id\")] private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Mapperly Property Mapping Configuration C#\nDESCRIPTION: This C# code snippet defines a partial method `Map` that maps from type `A` to type `B`. It uses the `MapProperty` attribute to specify that the `MyValueId` property should be mapped to `Value.Id`. The diagnostic error `RMG002` indicates that type `C` (presumably related to either `A` or `B`) lacks an accessible parameterless constructor, causing the mapping to fail. The code is embedded in a JSON diagnostic report.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyFlatteningTest.ManualUnflattenedPropertyNullablePathNoParameterlessCtorShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[MapProperty(\"MyValueId\", \"Value.Id\")] private partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Using an Instance Mapper in C#\nDESCRIPTION: This code shows how to use an instance of another mapper class using the `UseMapper` attribute.  The `BoxMapper` will use the `BananaMapper` instance to perform mappings. The `_bananaMapper` field needs to be initialized by user.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/user-implemented-methods.mdx#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class BoxMapper\n{\n    // highlight-start\n    [UseMapper]\n    private readonly BananaMapper _bananaMapper = new();\n    // highlight-end\n\n    public static partial BananaBox MapBananaBox(BananaBoxDto dto);\n}\n\npublic static class BananaMapper\n{\n    public static Banana MapBanana(BananaDto dto)\n        => new Banana(dto.Weigth);\n}\n```\n\n----------------------------------------\n\nTITLE: Add Mapperly NuGet Package (PackageReference)\nDESCRIPTION: Adds a NuGet package reference to Riok.Mapperly in the project's .csproj file. Excludes runtime assets and sets private assets to all to remove the runtime dependency.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/installation.mdx#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Riok.Mapperly\" Version=\"${useDocusaurusContext().siteConfig.customFields.mapperlyVersion}\" ExcludeAssets=\"runtime\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Mapping to a Runtime Target Type in C# with Mapperly\nDESCRIPTION: This code snippet shows how to define a mapping method `Map(object source, Type targetType)` that takes a `Type` parameter to specify the target type at runtime. Mapperly implements this mapping using all mappings defined in the mapper. The mappings `BananaDto MapBanana(Banana source)` and `AppleDto MapApple(Apple source)` are used to map different types.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/generic-mapping.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class ModelMapper\n{\n    // highlight-start\n    public static partial object Map(object source, Type targetType);\n    // highlight-end\n\n    private static partial BananaDto MapBanana(Banana source);\n    private static partial AppleDto MapApple(Apple source);\n}\n\nclass Banana {}\nclass Apple {}\n\nclass BananaDto {}\nclass AppleDto {}\n\n```\n\n----------------------------------------\n\nTITLE: Map Property Definition with Diagnostics\nDESCRIPTION: This code snippet defines a partial mapping function from type A to type B, attempting to map a source property named 'NestedValue' to a nested target property 'Nested.Value'.  The snippet is accompanied by diagnostics indicating issues such as inability to map to init-only members, missing source members, unmapped source members, and a general lack of mapped members between the source and target types. The MapProperty attribute is used for defining the mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyInitPropertyTest.InitOnlyPropertyWithPathConfigurationsShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MapProperty(\"NestedValue\", \"Nested.Value\")] private partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Map Method Generated Value Generated Code C#\nDESCRIPTION: This is the generated C# code that results from using the `MapValue` attribute with the `Use` parameter. It calls the `GetSourceSystem` method and assigns its return value to the `SourceSystem` property of the target `CarDto` object. No external dependencies are required.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/constant-generated-values.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ntarget.SourceSystem = GetSourceSystem();\n```\n\n----------------------------------------\n\nTITLE: Mapperly Diagnostic Error (RMG013) JSON\nDESCRIPTION: This JSON snippet represents a diagnostic error generated by Mapperly. It indicates that the class 'B' does not have an accessible constructor suitable for mapping from class 'A'. The 'Message' field provides a description of the error, and the 'Location' field indicates where the error occurs in the source code.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyConstructorResolverTest.ClassToClassPrivateCtorShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Location\": /*\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,36),\n      \"Message\": \"B has no accessible constructor with mappable arguments\",\n      \"Severity\": \"Error\",\n      \"Descriptor\": {\n        \"Id\": \"RMG013\",\n        \"Title\": \"No accessible constructor with mappable arguments found\",\n        \"MessageFormat\": \"{0} has no accessible constructor with mappable arguments\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Error\",\n        \"IsEnabledByDefault\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore Enum Values\nDESCRIPTION: Shows how to ignore specific enum values during mapping using `MapperIgnoreSourceValue` and `MapperIgnoreTargetValue` attributes. This prevents mapping specific source or target values. This is useful in cases when some values should be excluded from the mapping process.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/enum.mdx#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class FruitMapper\n{\n    // highlight-start\n    [MapperIgnoreSourceValue(Fruit.Apple)]\n    [MapperIgnoreTargetValue(FruitDto.Pineapple)]\n    // highlight-end\n    public partial FruitDto Map(Fruit source);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapper Declaration with MemberVisibility.All in C#\nDESCRIPTION: This C# code snippet demonstrates how to declare a Mapperly mapper with `IncludedMembers` and `IncludedConstructors` set to `MemberVisibility.All`. This configuration enables Mapperly to map members of all accessibility levels, including private and protected members. The example includes the mapper interface and the source and destination classes (`Fruit` and `FruitDto`).\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/private-members.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// highlight-start\n[Mapper(\n    IncludedMembers = MemberVisibility.All,\n    IncludedConstructors = MemberVisibility.All)]\n// highlight-end\npublic partial class FruitMapper\n{\n    public partial FruitDto ToDto(Fruit source);\n}\n\npublic class Fruit\n{\n  private bool _isSeeded;\n\n  public string Name { get; set; }\n\n  private int Sweetness { get; set; }\n}\n\npublic class FruitDto\n{\n  private FruitDto() {}\n\n  private bool _isSeeded;\n\n  public string Name { get; set; }\n\n  private int Sweetness { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Objects Generated Code C#\nDESCRIPTION: Illustrates the generated code by Mapperly when using `AllowNullPropertyAssignment = false`. The code shows null checks for each property of the source object, only assigning to the target if the source property is not null. This prevents null values from overwriting existing values in the target object.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/existing-target.mdx#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstatic partial class FruitMapper\n{\n    public static partial void Update(global::FruitUpdate update, global::Fruit fruit)\n    {\n        if (update.Name != null)\n        {\n            fruit.Name = update.Name;\n        }\n        if (update.Color != null)\n        {\n            fruit.Color = update.Color;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Unmapped Member Diagnostic\nDESCRIPTION: This snippet represents a Mapperly diagnostic message indicating an unmapped member. Specifically, the 'IntValue' member of the source type 'A' is not mapped to any member on the target type 'B'. This is flagged as a warning.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyConstructorResolverTest.ClassToClassWithOneMatchingCtorAndUnmatchedSourcePropertyShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Location\": \"/*\\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n}\\n*/ : (11,4)-(11,36)\",\n      \"Message\": \"The member IntValue on the mapping source type A is not mapped to any member on the mapping target type B\",\n      \"Severity\": \"Warning\",\n      \"WarningLevel\": 1,\n      \"Descriptor\": {\n        \"Id\": \"RMG020\",\n        \"Title\": \"Source member is not mapped to any target member\",\n        \"MessageFormat\": \"The member {0} on the mapping source type {1} is not mapped to any member on the mapping target type {2}\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Warning\",\n        \"IsEnabledByDefault\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Package\nDESCRIPTION: This command adds the Riok.Mapperly NuGet package to your .NET project. It is a prerequisite for using Mapperly.\nSOURCE: https://github.com/riok/mapperly/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Riok.Mapperly\n```\n\n----------------------------------------\n\nTITLE: Mapperly IQueryable Mapping Diagnostic\nDESCRIPTION: This diagnostic message indicates that a nullable source property (Nested.Value of A) is being mapped to a non-nullable target property (NestedValue of B). Mapperly issues this as an information message to highlight potential issues if the source property is null, which would cause an exception when mapping to the non-nullable target.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/QueryableProjectionNullableTest.ClassToClassNullableSourcePathAutoFlatten.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial System.Linq.IQueryable<B> Map(System.Linq.IQueryable<A> source);\n```\n\n----------------------------------------\n\nTITLE: Setting EmitCompilerGeneratedFiles in .csproj\nDESCRIPTION: This snippet shows how to set the `EmitCompilerGeneratedFiles` property to `true` in a .csproj file to enable the generation of source files by the compiler.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/generated-source.mdx#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n  <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Merge Objects Declaration C#\nDESCRIPTION: Shows how to merge two objects using Mapperly with `AllowNullPropertyAssignment` set to `false`. This configuration ignores source properties with null values during the mapping, preserving existing values in the target object.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/existing-target.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// highlight-start\n[Mapper(AllowNullPropertyAssignment = false)]\n// highlight-end\nstatic partial class FruitMapper\n{\n    // highlight-start\n    public static partial void ApplyUpdate(FruitUpdate update, Fruit fruit);\n    // highlight-end\n}\n    \nclass Fruit { public required string Name { get; set; } public required string Color { get; set; } }\nrecord FruitUpdate(string? Name, string? Color);\n```\n\n----------------------------------------\n\nTITLE: Using a Static Mapper in C#\nDESCRIPTION: This snippet demonstrates how to use a static mapper with `UseStaticMapper`.  The `BoxMapper` uses mappings implemented in the `BananaMapper` class. `UseStaticMapper` tells Mapperly to use static methods from specified mapper type. Requires static methods in both mappers.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/user-implemented-methods.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\n// highlight-start\n[UseStaticMapper(typeof(BananaMapper))]\n// highlight-end\npublic static partial class BoxMapper\n{\n    public static partial BananaBox MapBananaBox(BananaBoxDto dto);\n}\n\npublic static class BananaMapper\n{\n    public static Banana MapBanana(BananaDto dto)\n      => new Banana(dto.Weigth);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Diagnostic - Nullable to Non-Nullable Mapping\nDESCRIPTION: This snippet shows a diagnostic message issued by Mapperly when mapping a nullable string (`string?`) to a non-nullable type `B`. It indicates a potential issue because the target type cannot accept null values.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/NullableTest.NullableToNonNullableWithNoThrowNoAccessibleCtorShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      Location: /*\n{\n    private partial B Map(string? source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,42),\n      Message: Mapping the nullable source of type string? to target of type B which is not nullable,\n      Severity: Info,\n      WarningLevel: 1,\n      Descriptor: {\n        Id: RMG090,\n        Title: Mapping nullable source type to non-nullable target type,\n        MessageFormat: Mapping the nullable source of type {0} to target of type {1} which is not nullable,\n        Category: Mapper,\n        DefaultSeverity: Info,\n        IsEnabledByDefault: true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Map Method Generated Value Declaration C#\nDESCRIPTION: This code snippet demonstrates how to use the `MapValue` attribute to assign the return value of the `GetSourceSystem` method to the `SourceSystem` property of the `CarDto` class during the mapping from a `Car` object. The return type of `GetSourceSystem` must match the target type.  No external dependencies are required.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/constant-generated-values.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[MapValue(nameof(CarDto.SourceSystem), Use = nameof(GetSourceSystem))]\npublic partial CarDto Map(Car car);\n\nstring GetSourceSystem() => \"C1\";\n```\n\n----------------------------------------\n\nTITLE: Mapperly Diagnostic - Missing Parameterless Constructor\nDESCRIPTION: This diagnostic message indicates that the target type `B` does not have an accessible parameterless constructor. This can prevent Mapperly from instantiating the target type during mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/NullableTest.NullableToNonNullableWithNoThrowNoAccessibleCtorShouldDiagnostic.verified.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      Location: /*\n{\n    private partial B Map(string? source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,42),\n      Message: B has no accessible parameterless constructor,\n      Severity: Error,\n      Descriptor: {\n        Id: RMG002,\n        Title: No accessible parameterless constructor found,\n        MessageFormat: {0} has no accessible parameterless constructor,\n        Category: Mapper,\n        DefaultSeverity: Error,\n        IsEnabledByDefault: true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing CompilerGeneratedFilesOutputPath\nDESCRIPTION: This snippet shows how to customize the output path for generated files using the `CompilerGeneratedFilesOutputPath` property in the .csproj file. It also demonstrates how to exclude these generated files from compilation while making them visible in the IDE.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/generated-source.mdx#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n  <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n  <CompilerGeneratedFilesOutputPath>Generated</CompilerGeneratedFilesOutputPath>\n</PropertyGroup>\n\n<ItemGroup>\n  <!-- Exclude the output of source generators from the compilation, show it in the IDE -->\n  <Compile Remove=\"$(CompilerGeneratedFilesOutputPath)/**/*.cs\" />\n  <None Include=\"$(CompilerGeneratedFilesOutputPath)/**/*.cs\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Ignore Member at Definition C#\nDESCRIPTION: The `MapperIgnoreAttribute` can be used directly on a class' property or field to prevent the property from being mapped.  This configuration must be visible to Mapperly at runtime.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class CarMapper\n{\n    public partial CarDto ToDto(Car car);\n}\n\npublic class Car\n{\n    [MapperIgnore]\n    public int Id { get; set; }\n\n    public string ModelName { get; set; }\n}\n\npublic class CarDto\n{\n    public string ModelName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic User Mapping Discovery in C#\nDESCRIPTION: This snippet demonstrates disabling automatic discovery of user-implemented mapping methods using `AutoUserMappings = false` in the `Mapper` attribute.  When disabled, only methods marked with the `UserMappingAttribute` will be considered for mappings. The method `TimeSpanToHours` is decorated with `UserMappingAttribute` to indicate it is to be used by Mapperly.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/user-implemented-methods.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// highlight-start\n[Mapper(AutoUserMappings = false)]\n// highlight-end\npublic partial class CarMapper\n{\n    public partial CarDto CarToCarDto(Car car);\n\n    // highlight-start\n    // mark as user-implemented mapping\n    [UserMapping]\n    // highlight-end\n    private int TimeSpanToHours(TimeSpan t) => t.Hours;\n\n    private int IgnoredTimeSpanToHours(TimeSpan t) => t.Minutes / 60;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Source Member Unmapped Warning\nDESCRIPTION: This diagnostic message indicates that the member 'Parent' on the mapping source type 'A' is not mapped to any member on the mapping target type 'B'. This may result in data loss during mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/QueryableProjectionTest.ReferenceLoopInitProperty.verified.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n{\n    private partial System.Linq.IQueryable<B> Map(System.Linq.IQueryable<A> source);\n}\n```\n\n----------------------------------------\n\nTITLE: Committing changes\nDESCRIPTION: This command commits all changes to the local Git repository. The `-a` option automatically stages all modified and deleted files.  Husky and csharpier are expected to automatically format changed files during the commit.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --all\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Diagnostic\nDESCRIPTION: This code snippet represents a diagnostic message generated by Mapperly. It indicates an issue with mapping a write-only member (A.StringValue2) to a member (B.StringValue2). It includes the location in the code, the message details, severity, warning level, and a descriptor containing the ID, title, message format, category, default severity, and enabled-by-default status of the diagnostic.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.ShouldIgnoreWriteOnlyPropertyOnSourceWithDiagnostics.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      Location: /*\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,36),\n      Message: Cannot map from write only member A.StringValue2 of type string to member B.StringValue2 of type string,\n      Severity: Info,\n      WarningLevel: 1,\n      Descriptor: {\n        Id: RMG010,\n        Title: Cannot map from write only member,\n        MessageFormat: Cannot map from write only member {0} to member {1},\n        Category: Mapper,\n        DefaultSeverity: Info,\n        IsEnabledByDefault: true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Pushing the branch to GitHub\nDESCRIPTION: This command pushes the local branch ('my-fix-branch') to the remote repository on GitHub. This makes the changes available for review and merging into the main branch.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Define IQueryable Projection with Mapperly (C#)\nDESCRIPTION: Defines a partial method within a Mapperly mapper class to project an IQueryable of type Car to an IQueryable of type CarDto. This leverages Mapperly's projection capabilities for efficient database queries.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/queryable-projections.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic static partial class CarMapper\n{\n    // highlight-start\n    public static partial IQueryable<CarDto> ProjectToDto(this IQueryable<Car> q);\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Car Mapper Code (C#)\nDESCRIPTION: This code shows the generated mapping implementation by Mapperly. It handles the property mapping, including the renamed `Manufacturer` property and enum conversions.  It demonstrates the fully automated mapping functionality.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/generated-mapper-example.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Riok.Mapperly.Sample\n{\n    public static partial class CarMapper\n    {\n        public static partial CarDto Map(Car car)\n        {\n            var target = new CarDto();\n            target.Name = car.Name;\n            target.CarColor = MapToCarColorDto(car.CarColor);\n            target.Kilometer = car.Kilometer;\n            target.Producer = MapToManufacturerDto(car.Manufacturer);\n            return target;\n        }\n\n        private static CarColorDto MapToCarColorDto(CarColor source)\n        {\n            return source switch\n            {\n                CarColor.Red => CarColorDto.Red,\n                CarColor.Green => CarColorDto.Green,\n                CarColor.Blue => CarColorDto.Blue,\n                _ => throw new System.ArgumentOutOfRangeException(nameof(source), source, \"The value is not supported.\"),\n            };\n        }\n\n        private static ManufacturerDto MapToManufacturerDto(Manufacturer manufacturer)\n        {\n            var target = new ManufacturerDto();\n            target.Name = manufacturer.Name;\n            target.Founded = manufacturer.Founded;\n            return target;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MapProperty Attribute Usage in Mapperly\nDESCRIPTION: This code snippet demonstrates the usage of the `MapProperty` attribute in Mapperly to map properties from a source object (A) to a target object (B). The attribute specifies that the \"Name\" property in the source should be mapped to the \"Value\" property in the target, utilizing the `ToC` method for the mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyUseNamedMappingTest.UserMethodReturnsNullableShouldThrow.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[MapProperty(\"Name\", \"Value\", Use = nameof(ToC))]\npublic partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Install Documentation Dependencies\nDESCRIPTION: This command installs the necessary node modules for the Docusaurus-based documentation.  It is essential to run this command before any other documentation-related tasks. Make sure the node version matches the version specified in `.node-version`\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/docs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Method Definition\nDESCRIPTION: This code snippet represents the definition of a Mapperly mapping method. It is a partial method signature for mapping from type A to type B. The Mapperly analyzer uses this definition to generate mapping code and identify potential issues, such as missing source or target members.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.WithPropertyNameMappingStrategyCaseSensitive.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Run Linters\nDESCRIPTION: This command executes the linters to check for code quality issues in the documentation. It helps maintain a consistent style and identify potential problems.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/docs.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Creating a Mapper\nDESCRIPTION: This C# code snippet demonstrates creating a mapper using the `Mapper` attribute and defining a mapping method `CarToCarDto`. Mapperly will generate the implementation for this method during build time. The snippet also showcases how to use the generated mapper.\nSOURCE: https://github.com/riok/mapperly/blob/main/README.md#_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\n// Mapper declaration\n[Mapper]\npublic partial class CarMapper\n{\n    public partial CarDto CarToCarDto(Car car);\n}\n\n// Mapper usage\nvar mapper = new CarMapper();\nvar car = new Car { NumberOfSeats = 10, ... };\nvar dto = mapper.CarToCarDto(car);\ndto.NumberOfSeats.Should().Be(10);\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Process Flow\nDESCRIPTION: This section outlines the process implemented by Mapperly for each discovered `MapperAttribute`. It describes how `DescriptorBuilder` creates `MapperDescriptor`, including configuration extraction, user-defined method extraction, mapping body construction, and code emission using `SourceEmitter` and `SyntaxFactoryHelper`.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/architecture.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Mapperly Partial Method Definition\nDESCRIPTION: This code snippet defines a partial method `Map` that takes an object of type `A` as input and returns an object of type `B`. This method is intended to be implemented by Mapperly to perform the object mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.WithUnmappablePropertyShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Running Tests with dotnet test\nDESCRIPTION: This command is used to execute all tests within the Mapperly project. It triggers both unit and integration tests defined using xUnit and VerifyTests.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/tests.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Mapperly Partial Method Declaration with Diagnostics\nDESCRIPTION: This code snippet shows the declaration of a partial method `Map` in C#, likely part of a Mapperly-generated mapper class. The diagnostics relate to potential issues when mapping between types A and B, including nullable property mappings and unmapped members. The messages highlight potential data loss or unexpected behavior due to null handling.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyNullableTest.NullableIntWithAdditionalFlattenedValueToNonNullableIntProperties.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Rebasing the development branch\nDESCRIPTION: These commands rebase the development branch ('my-fix-branch') onto the latest 'main' branch. This ensures that the changes are based on the most recent version of the codebase, reducing the likelihood of conflicts during merging.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout main\ngit pull upstream main\ngit checkout my-fix-branch\ngit rebase main\n```\n\n----------------------------------------\n\nTITLE: Add Mapperly NuGet Package (.NET CLI)\nDESCRIPTION: Adds the Riok.Mapperly NuGet package to the project using the .NET CLI.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Riok.Mapperly\n```\n\n----------------------------------------\n\nTITLE: Mapperly Solution Structure\nDESCRIPTION: This section describes the directory structure of the Mapperly solution, including the location of benchmarks, build scripts, documentation, samples, source code, and tests. It clarifies the roles of `Riok.Mapperly` and `Riok.Mapperly.Abstractions`.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/architecture.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Method Declaration\nDESCRIPTION: This code snippet represents the declaration of a partial method 'Map' used by Mapperly.  It suggests the presence of a Mapperly mapper that maps from type 'A' to type 'B'.  It's shown within comments, indicating its relevance to the diagnostic messages. The diagnostic messages all refer to issues identified during the mapping performed by this method.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.ShouldIgnoreWriteOnlyPropertyOnSourceWithDiagnostics.verified.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting code with CSharpier\nDESCRIPTION: This command formats the code using CSharpier, ensuring consistent code style across the project.  It's used for automatic code formatting and enforced via a git hook on commit.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/tests.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet csharpier .\n```\n\n----------------------------------------\n\nTITLE: Formatting code analyzers with dotnet format\nDESCRIPTION: This command formats code by applying analyzer-based fixes using the dotnet format tool.  It helps ensure code adheres to the analyzer rules and suggestions.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/tests.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet format analyzers\n```\n\n----------------------------------------\n\nTITLE: Add Mapperly NuGet Package (Package Manager)\nDESCRIPTION: Adds the Riok.Mapperly NuGet package to the project using the Package Manager console.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/installation.mdx#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Riok.Mapperly\n```\n\n----------------------------------------\n\nTITLE: Verifying code format with CSharpier\nDESCRIPTION: This command checks if the code is properly formatted using CSharpier without making any changes.  It's used to verify that the code adheres to the CSharpier style rules.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/tests.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet csharpier --check .\n```\n\n----------------------------------------\n\nTITLE: Verifying code analyzers with dotnet format\nDESCRIPTION: This command verifies that the code adheres to analyzer rules without making changes. It ensures that no analyzer violations exist in the codebase.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/tests.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet format analyzers --verify-no-changes\n```\n\n----------------------------------------\n\nTITLE: Invalid Multiple User Mappings C#\nDESCRIPTION: Demonstrates the invalid code that triggers RMG060. Two mappings from `Car` to `CarDto` are defined without specifying a default, causing ambiguity for Mapperly when selecting the appropriate mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/analyzer-diagnostics/RMG060.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n  public partial List<CarDto> CarsToCarDtos(List<Car> cars);\n\n  public partial CarDto CarToCarDto(Car car);\n\n  [MapperIgnoreSource(nameof(Car.Id))]\n  public partial CarDto CarToCarDtoIgnoreId(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive rebasing\nDESCRIPTION: This command initiates an interactive rebase, allowing for the modification of commit history. It's used to squash smaller commits into larger, more cohesive ones, cleaning up the commit history before submitting a pull request.  This command rebases all commits on the development branch.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Rebase all commits on your development branch\ngit checkout\ngit rebase -i main\n```\n\n----------------------------------------\n\nTITLE: Applying Versioned Snapshots\nDESCRIPTION: The `VersionedSnapshotAttribute` is used to handle differences in snapshot content across different target frameworks. It ensures that the correct snapshot is used based on the .NET version the tests are running against. This attribute is applied to test classes or methods where snapshot changes occur.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/tests.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[VersionedSnapshot(...)]\n```\n\n----------------------------------------\n\nTITLE: Disable All Conversions in Mapperly (C#)\nDESCRIPTION: This code snippet shows how to disable all automatic conversions supported by Mapperly by setting the `EnabledConversions` property to `MappingConversionType.None` within the `Mapper` attribute.  This prevents any implicit conversions from occurring during the mapping process. The CarMapper class demonstrates a partial class with this setting.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/conversions.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(EnabledConversions = MappingConversionType.None)]\npublic partial class CarMapper\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Partial Method Definition with Missing Enum Members\nDESCRIPTION: This code snippet shows a partial method definition for mapping from enum `A` to enum `B`. The diagnostic messages indicate that some members of the destination enum `D` are not present in the source enum `C`, leading to potential mapping issues during the code generation process. No dependencies are explicitly required, but the presence of enums `A`, `B`, `C`, and `D` is implied.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumTest.EnumToAnotherEnumByNameCaseInsensitive_testCase=TargetLowerMissingMultipleSource.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: JSON Data Structure Definition\nDESCRIPTION: This JSON snippet defines a complex data structure. It showcases properties of different data types, including integers, strings, nested objects, arrays, and enums. It might represent an object's state within an application, used for purposes like data transfer or testing.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/StaticMapperTest.RunExtensionMappingShouldWork.verified.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"StringValue\": \"fooBar\",\n  \"RenamedStringValue2\": null,\n  \"FlatteningIdValue\": 10,\n  \"NullableFlatteningIdValue\": 100,\n  \"Unflattening\": {},\n  \"NestedNullableIntValue\": 100,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"StringValue\": \"+after-map\",\n    \"RenamedStringValue2\": null,\n    \"Unflattening\": {},\n    \"NestedNullableTargetNotNullable\": {},\n    \"StringNullableTargetNotNullable\": null,\n    \"SpanValue\": [\n      1,\n      2,\n      3\n    ],\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"DtoValue1\",\n    \"EnumName\": \"Value30\",\n    \"EnumStringValue\": 0,\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"FormattedIntValue\": null,\n    \"FormattedDateValue\": null,\n    \"ExposePrivateValue\": 26\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": null,\n    \"RenamedStringValue\": null,\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": null,\n    \"ExposePrivateValue\": 19\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"SpanValue\": [\n    1,\n    2,\n    3\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableHashSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"DtoValue1\",\n  \"FlagsEnumValue\": \"V1, V3\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": 20,\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03\",\n  \"DateTimeValueTargetTimeOnly\": \"3:10 PM\",\n  \"WithCreateMethod\": 10,\n  \"WithCreateFromMethod\": 20,\n  \"WithFromSingleMethod\": 30.0,\n  \"WithCreateParamsMethod\": 40.0,\n  \"WithCreateFromParamsMethod\": 50,\n  \"WithFromShortParamsMethod\": 60,\n  \"WithToDecimalMethod\": 70.0,\n  \"FormattedIntValue\": null,\n  \"FormattedDateValue\": null,\n  \"ExposePrivateValue\": 28\n}\n\n```\n\n----------------------------------------\n\nTITLE: Formatting code style with dotnet format\nDESCRIPTION: This command formats the code style using the dotnet format tool. It applies style rules and conventions to maintain a consistent codebase.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/tests.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet format style\n```\n\n----------------------------------------\n\nTITLE: JSON Data Definition\nDESCRIPTION: This JSON snippet defines a complex object with properties of various data types including integers, strings, booleans, nested objects, arrays, enums, and collections. It includes handling of nullable values, flattening, unflattening, and immutability.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/MapperTest.RunMappingShouldWork.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"StringValue\": \"fooBar+after-map\",\n  \"RenamedStringValue2\": \"fooBar2\",\n  \"FlatteningIdValue\": 10,\n  \"NullableFlatteningIdValue\": 100,\n  \"Unflattening\": {\n    \"IdValue\": 20\n  },\n  \"NullableUnflattening\": {\n    \"IdValue\": 200\n  },\n  \"NestedNullableIntValue\": 100,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"NestedMemberId\": 12,\n  \"NestedMemberObjectIntValue\": 22,\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"StringValue\": \"+after-map\",\n    \"RenamedStringValue2\": \"\",\n    \"Unflattening\": {},\n    \"NestedNullableTargetNotNullable\": {},\n    \"StringNullableTargetNotNullable\": \"\",\n    \"SpanValue\": [\n      1,\n      2,\n      3\n    ],\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"DtoValue1\",\n    \"EnumName\": \"Value30\",\n    \"EnumStringValue\": \"0\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"FormattedIntValue\": \"CHF 0.00\",\n    \"FormattedDateValue\": \"Monday, January 1, 0001\",\n    \"ExposePrivateValue\": 26\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"SpanValue\": [\n    1,\n    2,\n    3\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableHashSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"DtoValue1\",\n  \"FlagsEnumValue\": \"V1, V3\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": 20,\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03\",\n  \"DateTimeValueTargetTimeOnly\": \"3:10 PM\",\n  \"WithCreateMethod\": 10,\n  \"WithCreateFromMethod\": 20,\n  \"WithFromSingleMethod\": 30.0,\n  \"WithCreateParamsMethod\": 40.0,\n  \"WithCreateFromParamsMethod\": 50,\n  \"WithFromShortParamsMethod\": 60,\n  \"WithToDecimalMethod\": 70.0,\n  \"FormattedIntValue\": \"CHF 10.00\",\n  \"FormattedDateValue\": \"Friday, January 3, 2020\",\n  \"ExposePrivateValue\": 28,\n  \"Sum\": 96\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Test Data Object\nDESCRIPTION: This JSON object represents a data structure likely used as input or expected output for mapping tests within the Mapperly project. It contains diverse data types like integers, strings, booleans, nested objects, and arrays/collections. The purpose is to test various mapping functionalities including flattening, unflattening, enum conversions, date/time formatting and handling of nullable types. It covers scenarios like mapping to init-only properties, required properties and mapping between similar objects.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/MapperTest.RunMappingShouldWork_NET8_0.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"StringValue\": \"fooBar+after-map\",\n  \"RenamedStringValue2\": \"fooBar2\",\n  \"FlatteningIdValue\": 10,\n  \"NullableFlatteningIdValue\": 100,\n  \"Unflattening\": {\n    \"IdValue\": 20\n  },\n  \"NullableUnflattening\": {\n    \"IdValue\": 200\n  },\n  \"NestedNullableIntValue\": 100,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"NestedMemberId\": 12,\n  \"NestedMemberObjectIntValue\": 22,\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"StringValue\": \"+after-map\",\n    \"RenamedStringValue2\": \"\",\n    \"Unflattening\": {},\n    \"NestedNullableTargetNotNullable\": {},\n    \"StringNullableTargetNotNullable\": \"\",\n    \"SpanValue\": [\n      1,\n      2,\n      3\n    ],\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"DtoValue1\",\n    \"EnumName\": \"Value30\",\n    \"EnumStringValue\": \"0\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"ToByteArrayWithInstanceMethod\": \"AAAAAAAAAAAAAAAAAAAAAA==\",\n    \"FormattedIntValue\": \"CHF 0.00\",\n    \"FormattedDateValue\": \"Monday, January 1, 0001\",\n    \"ExposePrivateValue\": 16\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"SpanValue\": [\n    1,\n    2,\n    3\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableHashSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"IReadOnlySet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"DtoValue1\",\n  \"FlagsEnumValue\": \"V1, V3\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": 20,\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03\",\n  \"DateTimeValueTargetTimeOnly\": \"3:10 PM\",\n  \"ToByteArrayWithInstanceMethod\": \"AQAAAAIAAwAEBQYHCAkKCw==\",\n  \"WithCreateMethod\": 10,\n  \"WithCreateFromMethod\": 20,\n  \"WithFromSingleMethod\": 30.0,\n  \"WithCreateParamsMethod\": 40.0,\n  \"WithCreateFromParamsMethod\": 50,\n  \"WithFromShortParamsMethod\": 60,\n  \"WithToDecimalMethod\": 70.0,\n  \"FormattedIntValue\": \"CHF 10.00\",\n  \"FormattedDateValue\": \"Friday, January 3, 2020\",\n  \"ExposePrivateValue\": 18,\n  \"Sum\": 96\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Source Member Error Diagnostic\nDESCRIPTION: This JSON snippet represents a diagnostic message from Mapperly indicating that a specified member on the source type was not found during mapping. The `Message` field provides details about the error, specifying the missing member and the source type. The `Location` field pinpoints the exact location in the code where the error occurs.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyInitPropertyTest.InitOnlyPropertyWithConfigurationNotFoundSourcePropertyShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Location\": \"/*\\n{\\n    [MapProperty(\\\"StringValue2\\\", \\\"StringValue\\\")] private partial B Map(A source);\\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n}\\n*/ : (11,4)-(11,81)\",\n      \"Message\": \"Specified member StringValue2 on source type A was not found\",\n      \"Severity\": \"Error\",\n      \"Descriptor\": {\n        \"Id\": \"RMG006\",\n        \"Title\": \"Mapping source member not found\",\n        \"MessageFormat\": \"Specified member {0} on source type {1} was not found\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Error\",\n        \"IsEnabledByDefault\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Diagnostic Message: Cannot Inline Queryable Expression Mapping\nDESCRIPTION: This diagnostic message indicates that Mapperly cannot inline a user-implemented queryable expression mapping. It provides information about the location of the code causing the issue, the severity of the problem, and a warning level. The diagnostic ID is RMG068, and the default severity is Info.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/QueryableProjectionUserImplementedTest.ClassToClassNonInlinedMethod.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Location\": /*\n{\n    private partial System.Linq.IQueryable<B> Map(System.Linq.IQueryable<A> source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n*/\n : (11,4)-(11,84),\n      \"Message\": \"Cannot inline user implemented queryable expression mapping\",\n      \"Severity\": \"Info\",\n      \"WarningLevel\": 1,\n      \"Descriptor\": {\n        \"Id\": \"RMG068\",\n        \"Title\": \"Cannot inline user implemented queryable expression mapping\",\n        \"MessageFormat\": \"Cannot inline user implemented queryable expression mapping\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Info\",\n        \"IsEnabledByDefault\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GeneratedCodeAttribute Usage in C#\nDESCRIPTION: This snippet shows the `GeneratedCodeAttribute` attribute that is added to generated member types and classes, allowing identification of generated code for static analysis tools. The first argument specifies the generator name, and the second the version.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/generated-source.mdx#_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\n[global::System.CodeDom.Compiler.GeneratedCode(\"Riok.Mapperly\", \"1.0.0.0\")]\n```\n\n----------------------------------------\n\nTITLE: JSON Data Structure for Mapperly Mapping\nDESCRIPTION: This JSON snippet defines a complex object with various properties, including primitive types, nested objects, collections, and enums. It serves as the data source for testing Mapperly's mapping capabilities, covering scenarios such as flattening, unflattening, nullable types, collections, and enum conversions.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/StaticMapperTest.RunMappingShouldWork.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"StringValue\": \"fooBar+after-map\",\n  \"RenamedStringValue2\": \"fooBar2\",\n  \"FlatteningIdValue\": 10,\n  \"NullableFlatteningIdValue\": 100,\n  \"Unflattening\": {\n    \"IdValue\": 20\n  },\n  \"NullableUnflattening\": {\n    \"IdValue\": 200\n  },\n  \"NestedNullableIntValue\": 100,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"StringValue\": \"+after-map\",\n    \"RenamedStringValue2\": \"\",\n    \"Unflattening\": {},\n    \"NestedNullableTargetNotNullable\": {},\n    \"StringNullableTargetNotNullable\": \"\",\n    \"SpanValue\": [\n      1,\n      2,\n      3\n    ],\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"DtoValue1\",\n    \"EnumName\": \"Value30\",\n    \"EnumStringValue\": \"0\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"FormattedIntValue\": \"\",\n    \"FormattedDateValue\": \"\",\n    \"ExposePrivateValue\": 26\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"SpanValue\": [\n    1,\n    2,\n    3\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableHashSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"DtoValue1\",\n  \"FlagsEnumValue\": \"V1, V3\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": 20,\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03\",\n  \"DateTimeValueTargetTimeOnly\": \"3:10 PM\",\n  \"WithCreateMethod\": 10,\n  \"WithCreateFromMethod\": 20,\n  \"WithFromSingleMethod\": 30.0,\n  \"WithCreateParamsMethod\": 40.0,\n  \"WithCreateFromParamsMethod\": 50,\n  \"WithFromShortParamsMethod\": 60,\n  \"WithToDecimalMethod\": 70.0,\n  \"FormattedIntValue\": \"\",\n  \"FormattedDateValue\": \"\",\n  \"ExposePrivateValue\": 28\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fix Linting Issues Automatically\nDESCRIPTION: This command attempts to automatically fix any linting issues detected in the documentation. It helps improve code quality and maintainability.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/docs.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run fix\n```\n\n----------------------------------------\n\nTITLE: JSON Data Structure Definition\nDESCRIPTION: Defines a complex JSON object that includes primitive data types (integers, strings, booleans), nested objects, collections (arrays, dictionaries, sets, queues, stacks, immutable collections), and enums. It showcases the mapping of data from a source object to this target structure. The structure includes flattening and unflattening, nullable and non-nullable properties, and specific formatting considerations for date and time.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/StaticMapperTest.RunMappingShouldWork_NET6_0.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"StringValue\": \"fooBar+after-map\",\n  \"RenamedStringValue2\": \"fooBar2\",\n  \"FlatteningIdValue\": 10,\n  \"NullableFlatteningIdValue\": 100,\n  \"Unflattening\": {\n    \"IdValue\": 20\n  },\n  \"NullableUnflattening\": {\n    \"IdValue\": 200\n  },\n  \"NestedNullableIntValue\": 100,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"StringValue\": \"+after-map\",\n    \"RenamedStringValue2\": \"\",\n    \"Unflattening\": {},\n    \"NestedNullableTargetNotNullable\": {},\n    \"StringNullableTargetNotNullable\": \"\",\n    \"SpanValue\": [\n      1,\n      2,\n      3\n    ],\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"DtoValue1\",\n    \"EnumName\": \"Value30\",\n    \"EnumStringValue\": \"0\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"ToByteArrayWithInstanceMethod\": \"AAAAAAAAAAAAAAAAAAAAAA==\",\n    \"FormattedIntValue\": \"\",\n    \"FormattedDateValue\": \"\",\n    \"ExposePrivateValue\": 26\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"SpanValue\": [\n    1,\n    2,\n    3\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableHashSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"IReadOnlySet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"DtoValue1\",\n  \"FlagsEnumValue\": \"V1, V3\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": 20,\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03\",\n  \"DateTimeValueTargetTimeOnly\": \"3:10 PM\",\n  \"ToByteArrayWithInstanceMethod\": \"AQAAAAIAAwAEBQYHCAkKCw==\",\n  \"WithCreateMethod\": 10,\n  \"WithCreateFromMethod\": 20,\n  \"WithFromSingleMethod\": 30.0,\n  \"WithCreateParamsMethod\": 40.0,\n  \"WithCreateFromParamsMethod\": 50,\n  \"WithFromShortParamsMethod\": 60,\n  \"WithToDecimalMethod\": 70.0,\n  \"FormattedIntValue\": \"\",\n  \"FormattedDateValue\": \"\",\n  \"ExposePrivateValue\": 28\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Result Data\nDESCRIPTION: This JSON snippet represents the mapped object, demonstrating the functionality of Mapperly. It shows how different types of data are handled and mapped, including nested objects, collections, and enums. The snippet also contains formatted values, date/time conversions, and private field exposure.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/MapperTest.RunMappingShouldWork_NET6_0.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"StringValue\": \"fooBar+after-map\",\n  \"RenamedStringValue2\": \"fooBar2\",\n  \"FlatteningIdValue\": 10,\n  \"NullableFlatteningIdValue\": 100,\n  \"Unflattening\": {\n    \"IdValue\": 20\n  },\n  \"NullableUnflattening\": {\n    \"IdValue\": 200\n  },\n  \"NestedNullableIntValue\": 100,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"NestedMemberId\": 12,\n  \"NestedMemberObjectIntValue\": 22,\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"StringValue\": \"+after-map\",\n    \"RenamedStringValue2\": \"\",\n    \"Unflattening\": {},\n    \"NestedNullableTargetNotNullable\": {},\n    \"StringNullableTargetNotNullable\": \"\",\n    \"SpanValue\": [\n      1,\n      2,\n      3\n    ],\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"DtoValue1\",\n    \"EnumName\": \"Value30\",\n    \"EnumStringValue\": \"0\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"ToByteArrayWithInstanceMethod\": \"AAAAAAAAAAAAAAAAAAAAAA==\",\n    \"FormattedIntValue\": \"CHF 0.00\",\n    \"FormattedDateValue\": \"Monday, January 1, 0001\",\n    \"ExposePrivateValue\": 26\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"SpanValue\": [\n    1,\n    2,\n    3\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableHashSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"IReadOnlySet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"DtoValue1\",\n  \"FlagsEnumValue\": \"V1, V3\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": 20,\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03\",\n  \"DateTimeValueTargetTimeOnly\": \"3:10 PM\",\n  \"ToByteArrayWithInstanceMethod\": \"AQAAAAIAAwAEBQYHCAkKCw==\",\n  \"WithCreateMethod\": 10,\n  \"WithCreateFromMethod\": 20,\n  \"WithFromSingleMethod\": 30.0,\n  \"WithCreateParamsMethod\": 40.0,\n  \"WithCreateFromParamsMethod\": 50,\n  \"WithFromShortParamsMethod\": 60,\n  \"WithToDecimalMethod\": 70.0,\n  \"FormattedIntValue\": \"CHF 10.00\",\n  \"FormattedDateValue\": \"Friday, January 3, 2020\",\n  \"ExposePrivateValue\": 28,\n  \"Sum\": 96\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Partial Method Declaration C#\nDESCRIPTION: This code snippet represents a partial method declaration generated by Mapperly. It maps an IQueryable of type A to an IQueryable of type B. The `partial` keyword indicates that the implementation of this method is provided elsewhere, typically by the Mapperly code generator itself based on the mapping configuration.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/QueryableProjectionNullableTest.ClassToClassNullableSourceProperty.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial System.Linq.IQueryable<B> Map(System.Linq.IQueryable<A> source);\n```\n\n----------------------------------------\n\nTITLE: Mapperly JSON Configuration\nDESCRIPTION: This JSON snippet configures various properties and nested objects for Mapperly's object mapping capabilities. It defines values for constructors, primitives, collections, enums, and nested structures to showcase different mapping scenarios.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/DeepCloningMapperTest.RunMappingShouldWork_NET6_0.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"UnmappedValue\": 10,\n  \"StringValue\": \"fooBar\",\n  \"RenamedStringValue\": \"fooBar2\",\n  \"Flattening\": {\n    \"IdValue\": 10\n  },\n  \"NullableFlattening\": {\n    \"IdValue\": 100\n  },\n  \"UnflatteningIdValue\": 20,\n  \"NullableUnflatteningIdValue\": 200,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"NestedMember\": {\n    \"NestedMemberId\": 12,\n    \"NestedMemberObject\": {\n      \"IntValue\": 22\n    }\n  },\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"Value10\",\n    \"EnumName\": \"Value30\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"ExposePrivateValue\": 16\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    3,\n    2,\n    1\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"IReadOnlySet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"Value10\",\n  \"FlagsEnumValue\": \"V1, V4\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": \"Value20\",\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValue\": \"2020-01-03 15:10:05 Utc\",\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03 15:10:05 Utc\",\n  \"DateTimeValueTargetTimeOnly\": \"2020-01-03 15:10:05 Utc\",\n  \"ToByteArrayWithInstanceMethod\": \"Guid_1\",\n  \"WithCreateMethod\": {\n    \"Value\": 10\n  },\n  \"WithCreateFromMethod\": {\n    \"Value\": 20\n  },\n  \"WithFromSingleMethod\": {\n    \"Value\": 30\n  },\n  \"WithCreateParamsMethod\": {\n    \"Value\": 40\n  },\n  \"WithCreateFromParamsMethod\": {\n    \"Value\": 50\n  },\n  \"WithFromShortParamsMethod\": {\n    \"Value\": 60\n  },\n  \"WithToDecimalMethod\": {\n    \"Value\": 70\n  },\n  \"ExposePrivateValue\": 18,\n  \"SumComponent1\": 32,\n  \"SumComponent2\": 64\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Enum Mapping Diagnostics\nDESCRIPTION: This JSON snippet represents diagnostic warnings generated by the Mapperly mapper. The warnings indicate that specific enum members (Value2 and Value3) in the destination enum (D) are not found in the source enum (C). This situation can lead to unexpected behavior during mapping and should be addressed.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumTest.EnumToAnotherEnumByStrategyMissingValues_testCase=ByNameMissingMultipleSource.verified.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Location\": /*\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,36),\n      \"Message\": \"Enum member Value2 (1) on D not found on source enum C\",\n      \"Severity\": \"Warning\",\n      \"WarningLevel\": 1,\n      \"Descriptor\": {\n        \"Id\": \"RMG037\",\n        \"Title\": \"An enum member could not be found on the source enum\",\n        \"MessageFormat\": \"Enum member {0} ({1}) on {2} not found on source enum {3}\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Warning\",\n        \"IsEnabledByDefault\": true\n      }\n    },\n    {\n      \"Location\": /*\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,36),\n      \"Message\": \"Enum member Value3 (2) on D not found on source enum C\",\n      \"Severity\": \"Warning\",\n      \"WarningLevel\": 1,\n      \"Descriptor\": {\n        \"Id\": \"RMG037\",\n        \"Title\": \"An enum member could not be found on the source enum\",\n        \"MessageFormat\": \"Enum member {0} ({1}) on {2} not found on source enum {3}\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Warning\",\n        \"IsEnabledByDefault\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping nullable collection to non-nullable collection\nDESCRIPTION: This diagnostic message indicates that Mapperly has detected an attempt to map a nullable collection of `int` to a non-nullable collection of `long`. The message specifies the source and target types, and informs the user of potential issues due to the nullability difference.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumerableTest.MapToReadOnlyCollectionPropertyFromNullable.verified.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLocation: /*\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,36),\nMessage: Mapping the nullable source of type System.Collections.Generic.ICollection<int>? to target of type System.Collections.Generic.ICollection<long> which is not nullable,\n```\n\n----------------------------------------\n\nTITLE: Mapperly Test Data Structure\nDESCRIPTION: This JSON snippet defines the structure and sample data for a test object used in Mapperly. It includes various properties of different data types, nested objects, and collections designed to test the mapping capabilities of Mapperly. Key properties include primitives, nested objects with configurable mapping, and various collection types, along with enum and date/time conversions, for comprehensive testing.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/MapperTest.RunMappingShouldWork_NET9_0.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"StringValue\": \"fooBar+after-map\",\n  \"RenamedStringValue2\": \"fooBar2\",\n  \"FlatteningIdValue\": 10,\n  \"NullableFlatteningIdValue\": 100,\n  \"Unflattening\": {\n    \"IdValue\": 20\n  },\n  \"NullableUnflattening\": {\n    \"IdValue\": 200\n  },\n  \"NestedNullableIntValue\": 100,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"NestedMemberId\": 12,\n  \"NestedMemberObjectIntValue\": 22,\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"StringValue\": \"+after-map\",\n    \"RenamedStringValue2\": \"\",\n    \"Unflattening\": {},\n    \"NestedNullableTargetNotNullable\": {},\n    \"StringNullableTargetNotNullable\": \"\",\n    \"SpanValue\": [\n      1,\n      2,\n      3\n    ],\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"DtoValue1\",\n    \"EnumName\": \"Value30\",\n    \"EnumStringValue\": \"0\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"ToByteArrayWithInstanceMethod\": \"AAAAAAAAAAAAAAAAAAAAAA==\",\n    \"FormattedIntValue\": \"CHF 0.00\",\n    \"FormattedDateValue\": \"Monday, January 1, 0001\",\n    \"ExposePrivateValue\": 16,\n    \"ExposeGenericPrivateValue\": {\n      \"ExposedId\": 10,\n      \"ExposedValue\": {\n        \"Value\": 3.3\n      }\n    }\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19,\n    \"ExposeGenericPrivateValue\": {\n      \"ExposedId\": 10,\n      \"ExposedValue\": {\n        \"Value\": 3.3\n      }\n    }\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"SpanValue\": [\n    1,\n    2,\n    3\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableHashSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"IReadOnlySet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"DtoValue1\",\n  \"FlagsEnumValue\": \"V1, V3\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": 20,\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03\",\n  \"DateTimeValueTargetTimeOnly\": \"3:10 PM\",\n  \"ToByteArrayWithInstanceMethod\": \"AQAAAAIAAwAEBQYHCAkKCw==\",\n  \"WithCreateMethod\": 10,\n  \"WithCreateFromMethod\": 20,\n  \"WithFromSingleMethod\": 30.0,\n  \"WithCreateParamsMethod\": 40.0,\n  \"WithCreateFromParamsMethod\": 50,\n  \"WithFromShortParamsMethod\": 60,\n  \"WithToDecimalMethod\": 70.0,\n  \"FormattedIntValue\": \"CHF 10.00\",\n  \"FormattedDateValue\": \"Friday, January 3, 2020\",\n  \"ExposePrivateValue\": 18,\n  \"ExposeGenericPrivateValue\": {\n    \"ExposedId\": 10,\n    \"ExposedValue\": {\n      \"Value\": 3.3\n    }\n  },\n  \"Sum\": 96\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly MapProperty Ambiguity Diagnostic\nDESCRIPTION: This snippet represents a diagnostic error reported by Mapperly, specifically related to the `MapProperty` attribute where the `Use` parameter references an ambiguous mapping name.  The error (RMG062) indicates that the referenced method name is not unique, causing a compilation error. The attribute is used to define property mappings between source and destination types during code generation.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/QueryableProjectionUseNamedMappingTest.TwoQueryableMappingsWithNamedUsedMappingsAndAmbiguousName.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MapProperty(nameof(A.StringValue1), nameof(B.StringValue1), Use = nameof(ModifyString)]\n[MapProperty(nameof(A.StringValue2), nameof(B.StringValue2), Use = nameof(ModifyString2)]\n```\n\n----------------------------------------\n\nTITLE: Object Mapping with No Members C#\nDESCRIPTION: This C# code snippet demonstrates the output of a Mapperly mapping when no members are mapped. It initializes a new target object and returns it, indicating that no member mappings are performed.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/analyzer-diagnostics/RMG066.mdx#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic partial Target Map(Source source)\n{\n    var target = new Target();\n    return target;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Data Structure\nDESCRIPTION: This JSON-like structure represents an array of objects. Each object contains properties such as 'ValueA', 'ValueB', 'Id', and 'BaseValue'.  The 'Id' likely serves as a unique identifier.  'BaseValue' may represent a common property. The presence of either 'ValueA' or 'ValueB' suggests a discriminated union or a variant type scenario.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/ProjectionMapperTest.DerivedTypesProjectionShouldTranslateToResult.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"ValueA\": 10,\n    \"Id\": 1,\n    \"BaseValue\": 10\n  },\n  {\n    \"ValueB\": 20,\n    \"Id\": 2,\n    \"BaseValue\": 20\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Mapperly Partial Method Definition C#\nDESCRIPTION: This code snippet defines a partial method `Map` that takes an `IDictionary<string, int>` as input and returns an instance of class `A`. Mapperly uses this method definition to generate the mapping logic, but the error indicates that class `A` lacks a suitable constructor for the generated mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/DictionaryCustomTest.DictionaryToCustomDictionaryWithPrivateCtorShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate partial A Map(IDictionary<string, int> source);\n```\n\n----------------------------------------\n\nTITLE: Defining the Car Source Class (C#)\nDESCRIPTION: This code defines the source class `Car` with properties like `Name`, `CarColor`, `Kilometer`, and `Manufacturer`. It represents the original data structure before mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/generated-mapper-example.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\n\nnamespace Riok.Mapperly.Sample\n{\n    public class Car\n    {\n        public string Name { get; set; } = string.Empty;\n        public CarColor CarColor { get; set; } = CarColor.Red;\n        public int Kilometer { get; set; } = 10;\n        public Manufacturer Manufacturer { get; set; } = new();\n    }\n\n    public class Manufacturer\n    {\n        public string Name { get; set; } = string.Empty;\n        public DateTime Founded { get; set; }\n    }\n\n    public enum CarColor\n    {\n        Red = 1,\n        Green = 2,\n        Blue = 3,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly User Mapping Definition in C#\nDESCRIPTION: This code snippet demonstrates how a default user mapping is defined using the `UserMapping` attribute in Mapperly. The `Default = true` parameter indicates that this mapping should be used if no other explicit mapping is found for the given types (in this case int to int). Multiple such mappings will trigger an error.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/UserMethodTest.MultipleDefaultUserMappingsShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[UserMapping(Default = true)]\npublic static int IntMapping2(int x) => x + 20;\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Method Signature (C#)\nDESCRIPTION: This snippet represents the signature of a Mapperly mapping method that attempts to map from type A to type B. The diagnostics indicate issues with this mapping, such as missing required members and unmapped source members.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyInitPropertyTest.RequiredPropertySourceNotFoundShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Mapperly Enum Mapping Diagnostic\nDESCRIPTION: This diagnostic message indicates that the enum member 'Value2' with value 1 on the destination enum 'D' could not be found on the source enum 'C' during the mapping process. This warning suggests a potential incompatibility between the source and destination enums that may lead to unexpected mapping behavior.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumTest.EnumToAnotherEnumByStrategyMissingValues_testCase=ByNameMissingSource.verified.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Diagnostics: [\n    {\n      Location: /*\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,36),\n      Message: Enum member Value2 (1) on D not found on source enum C,\n      Severity: Warning,\n      WarningLevel: 1,\n      Descriptor: {\n        Id: RMG037,\n        Title: An enum member could not be found on the source enum,\n        MessageFormat: Enum member {0} ({1}) on {2} not found on source enum {3},\n        Category: Mapper,\n        DefaultSeverity: Warning,\n        IsEnabledByDefault: true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly MapProperty Attribute Example C#\nDESCRIPTION: This code snippet shows the use of the MapProperty attribute in Mapperly to map properties between source and destination objects. In this specific case, it attempts to map 'MyValueId' from source type 'A' to 'Value.Id' on destination type 'B'. The attribute is used within a partial method declaration for the mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyFlatteningTest.ManualUnflattenedPropertyTargetPropertyPathWriteOnlyShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[MapProperty($\"MyValueId\", \"Value.Id\")] private partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Mapperly Diagnostic JSON\nDESCRIPTION: This JSON snippet represents diagnostic information from Mapperly. It includes the location of the error within the code (line 11, characters 4-75), the error message indicating a missing parameterless constructor, the severity (Error), and details about the diagnostic descriptor, including its ID (RMG002), title, message format, category, default severity, and enabled-by-default status.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyFlatteningTest.ManualUnflattenedPropertyNullablePathNoParameterlessCtorShouldDiagnostic.verified.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Location\": /*\n{\n    [MapProperty(\"MyValueId\", \"Value.Id\")] private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,75),\n      \"Message\": \"C has no accessible parameterless constructor\",\n      \"Severity\": \"Error\",\n      \"Descriptor\": {\n        \"Id\": \"RMG002\",\n        \"Title\": \"No accessible parameterless constructor found\",\n        \"MessageFormat\": \"{0} has no accessible parameterless constructor\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Error\",\n        \"IsEnabledByDefault\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: MapProperty Attributes (C#)\nDESCRIPTION: This code snippet displays the use of the `MapProperty` attribute in C#. It shows two partial methods, `MapToB` and `MapToB1`, each decorated with `MapProperty` to define how properties from source type `A` should be mapped to target type `B`. The attribute specifies the source property name and the target property name to use in the mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ReferenceHandlingTest.ManuallyMappedPropertiesShouldWork.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MapProperty(\"Value\", \"MyValue\")] private partial B MapToB(A source);\n[MapProperty(\"Value\", \"MyValue2\")] private partial B MapToB1(A source);\n```\n\n----------------------------------------\n\nTITLE: Mapperly MapProperty Configuration (C#)\nDESCRIPTION: This code snippet shows an example of a Mapperly `MapProperty` configuration. It attempts to map a source member named 'not_found' from type A to a target member named 'StringValue2' on type B. The analyzer flags this due to 'not_found' not existing in source type A and 'StringValue2' not existing in target type B.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.WithManualNotFoundSourcePropertyShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[MapProperty(\"not_found\", nameof(B.StringValue2))] private partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Mapperly Nullable Mapping Diagnostic\nDESCRIPTION: This diagnostic message from Mapperly indicates a potential issue where a nullable source property (`nested.value` of type `A`) is being mapped to a non-nullable target property (`value` of type `B`).  This can lead to unexpected null reference exceptions if the source property is null at runtime. The message suggests reviewing the mapping configuration to ensure null values are handled appropriately, possibly by providing a default value or using a conditional mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/UnsafeAccessorTest.PrivateNestedNullableProperty.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Location\": /*\n{\n    [MapProperty(\"nested.value\", \"value\")]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npartial B Map(A source);\n^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(12,24),\n      \"Message\": \"Mapping the nullable source property nested.value of A to the target property value of B which is not nullable\",\n      \"Severity\": \"Info\",\n      \"WarningLevel\": 1,\n      \"Descriptor\": {\n        \"Id\": \"RMG089\",\n        \"Title\": \"Mapping nullable source to non-nullable target member\",\n        \"MessageFormat\": \"Mapping the nullable source property {0} of {1} to the target property {2} of {3} which is not nullable\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Info\",\n        \"IsEnabledByDefault\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Reference Handling with Mapper Attribute C#\nDESCRIPTION: Enables reference handling for a Mapperly mapper class using the `UseReferenceHandling` property in the `Mapper` attribute. This allows the mapper to handle circular references in object graphs. The Mapperly package reference needs to include the runtime assets.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/reference-handling.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper(UseReferenceHandling = true)]\npublic partial class CarMapper\n{\n    public partial CarDto CarToCarDto(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Configuration\nDESCRIPTION: This code snippet shows the problematic mapping configuration identified by Mapperly. It indicates that the mapper attempts to map from source type 'A' to target type 'B', but a required member is missing on the source type.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.PropertiesWithCaseInsensitiveEqualNamesShouldWork.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Enum Mapping Method Definition\nDESCRIPTION: This code snippet shows the definition of a partial method `Map` that Mapperly uses to map between two types, A and B. The diagnostic message indicates an issue with mapping enums within this method. No explicit code is provided to show what the enums look like.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumTest.EnumToAnotherEnumByNameCaseInsensitive_testCase=SourceLowerMissingSource.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Fixed Multiple User Mappings C#\nDESCRIPTION: Illustrates the corrected code by marking one of the mappings from `Car` to `CarDto` as the default using the `[UserMapping(Default = true)]` attribute. This resolves the ambiguity and allows Mapperly to select the designated default mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/analyzer-diagnostics/RMG060.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n  public paratial List<CarDto> CarsToCarDtos(List<Car> cars);\n\n  // highlight-start\n  [UserMapping(Default = true)]\n  // highlight-end\n  public partial CarDto CarToCarDto(Car car);\n\n  [MapperIgnoreSource(nameof(Car.Id))]\n  public partial CarDto CarToCarDtoIgnoreId(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Nested Property Mapping Error\nDESCRIPTION: This code snippet shows a Mapperly diagnostic error related to mapping nested properties. The error indicates that the specified nested member 'Value' was not found on the source type 'A'.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectNestedPropertyTest.InvalidNestedPropertiesPathShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[MapNestedProperties(\"Value\")] partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Mapperly IQueryable Mapping Diagnostic\nDESCRIPTION: This snippet represents the location of Mapperly diagnostics related to mapping an IQueryable of type A to an IQueryable of type B. It highlights issues like reference loops, missing constructors, and unmapped members.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/QueryableProjectionTest.ReferenceLoopCtor.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n    private partial System.Linq.IQueryable<B> Map(System.Linq.IQueryable<A> source);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Nullable Mapping Diagnostic\nDESCRIPTION: This snippet shows a Mapperly diagnostic message regarding mapping a nullable source property (Nested.Nested2.Value3 of A) to a non-nullable target property (NestedValue4 of B). It includes the location, message, severity, and descriptor information for the diagnostic. This indicates a potential issue where a null value from the source might cause an error when assigned to the non-nullable target.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/QueryableProjectionNullableTest.ClassToClassNullableSourcePathManuallyFlatten.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/*\n    public partial System.Linq.IQueryable<B> Map(System.Linq.IQueryable<A> q);\n[MapProperty(\"Nested.Nested2.Value3\", \"NestedValue4\")] private partial B Map(A source);\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Configuration Error/Warning\nDESCRIPTION: This code snippet demonstrates the use of the `MapProperty` attribute in Mapperly to configure property mappings. It attempts to map `StringValue9` from the source type `A` to `StringValue2` of the target type `B`.  The diagnostics highlight potential errors or warnings due to missing members, unmapped properties, or other mapping inconsistencies. It helps ensure correct and efficient mapping between different data types.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.WithManualMappedNotFoundSourcePropertyShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[MapProperty(\"StringValue9\", nameof(B.StringValue2)] private partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Preserve Mapperly Attributes at Runtime (DefineConstants)\nDESCRIPTION: Sets a constant `MAPPERLY_ABSTRACTIONS_SCOPE_RUNTIME` to preserve the Mapperly attributes at runtime. This is an alternative when not referencing Riok.Mapperly directly.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/getting-started/installation.mdx#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <DefineConstants>$(DefineConstants);MAPPERLY_ABSTRACTIONS_SCOPE_RUNTIME</DefineConstants>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Mapperly IQueryable Mapping Errors\nDESCRIPTION: This code snippet shows the diagnostics related to a potential reference loop during mapping from type A to type B through IQueryable. It indicates a mapping configuration error where mapping from A.Parent to the init-only member B.Parent results in a reference loop.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/QueryableProjectionTest.ReferenceLoopInitProperty.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n    private partial System.Linq.IQueryable<B> Map(System.Linq.IQueryable<A> source);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly MapProperty Diagnostics\nDESCRIPTION: This snippet shows a diagnostic error and warning related to multiple MapProperty attributes targeting the same target member and a source member not being mapped.  The error (RMG074) indicates multiple mappings for 'B.StringValue', while the warning (RMG020) indicates 'A.StringValue3' is unmapped.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyInitPropertyTest.InitOnlyPropertyWithMultipleConfigurationsShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Location\": /*\n{\n    [MapProperty(\"StringValue2\", \"StringValue\")] [MapProperty(\"StringValue3\", \"StringValue\")] private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,126),\n      \"Message\": \"Multiple mappings are configured for the same target member B.StringValue\",\n      \"Severity\": \"Error\",\n      \"Descriptor\": {\n        \"Id\": \"RMG074\",\n        \"Title\": \"Multiple mappings are configured for the same target member\",\n        \"MessageFormat\": \"Multiple mappings are configured for the same target member {0}.{1}\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Error\",\n        \"IsEnabledByDefault\": true\n      }\n    },\n    {\n      \"Location\": /*\n{\n    [MapProperty(\"StringValue2\", \"StringValue\")] [MapProperty(\"StringValue3\", \"StringValue\")] private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,126),\n      \"Message\": \"The member StringValue3 on the mapping source type A is not mapped to any member on the mapping target type B\",\n      \"Severity\": \"Warning\",\n      \"WarningLevel\": 1,\n      \"Descriptor\": {\n        \"Id\": \"RMG020\",\n        \"Title\": \"Source member is not mapped to any target member\",\n        \"MessageFormat\": \"The member {0} on the mapping source type {1} is not mapped to any member on the mapping target type {2}\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Warning\",\n        \"IsEnabledByDefault\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Diagnostic Message in JSON\nDESCRIPTION: This JSON snippet represents a diagnostic message generated by Mapperly. It includes details such as the location of the error in the source code, a description of the error, its severity, and a descriptor containing information about the error code, title, and message format. The key element here is the 'Multiple default user mappings' error.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/UserMethodTest.MultipleDefaultUserMappingsShouldDiagnostic.verified.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Diagnostics\": [\n    {\n      \"Location\": /*\n\n[UserMapping(Default = true)]\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npublic static int IntMapping2(int x) => x + 20;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n*/\n : (14,0)-(15,47),\n      \"Message\": \"Multiple default user mappings for the mapping from int to int found, only one is allowed\",\n      \"Severity\": \"Error\",\n      \"Descriptor\": {\n        \"Id\": \"RMG059\",\n        \"Title\": \"Multiple default user mappings found, only one is allowed\",\n        \"MessageFormat\": \"Multiple default user mappings for the mapping from {0} to {1} found, only one is allowed\",\n        \"Category\": \"Mapper\",\n        \"DefaultSeverity\": \"Error\",\n        \"IsEnabledByDefault\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Enum Mapping Warning Context\nDESCRIPTION: This snippet provides the context in which the enum mapping warning occurs.  It shows a partial method `Map` that attempts to map from type `A` to type `B`. The warnings indicate issues with the enum mapping within this method, particularly concerning the presence of enum members in the target enum that are absent in the source enum. The C# code surrounding this serves to give context to the JSON diagnostics.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumTest.EnumToAnotherEnumByStrategyMissingValues_testCase=ByNameMissingMultipleSource.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Unmapped Source Member Diagnostic\nDESCRIPTION: This code snippet represents a diagnostic message generated by Mapperly. It indicates that the member StringValue2 on the mapping source type A is not mapped to any member on the mapping target type B. It includes the location in the code, the message details, severity, warning level, and a descriptor containing the ID, title, message format, category, default severity, and enabled-by-default status of the diagnostic.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.ShouldIgnoreWriteOnlyPropertyOnSourceWithDiagnostics.verified.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      Location: /*\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,36),\n      Message: The member StringValue2 on the mapping source type A is not mapped to any member on the mapping target type B,\n      Severity: Warning,\n      WarningLevel: 1,\n      Descriptor: {\n        Id: RMG020,\n        Title: Source member is not mapped to any target member,\n        MessageFormat: The member {0} on the mapping source type {1} is not mapped to any member on the mapping target type {2},\n        Category: Mapper,\n        DefaultSeverity: Warning,\n        IsEnabledByDefault: true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Enum Mapping Diagnostic Location (C#)\nDESCRIPTION: This code snippet represents the location of the diagnostic warning related to enum mapping. The diagnostic indicates that enum members 'Value2' and 'Value3' from the destination enum 'D' were not found in the source enum 'C'. This diagnostic highlights potential mapping issues related to enum values and ensures all values are considered during mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumTest.EnumToAnotherEnumByStrategyMissingValues_testCase=ByValueMissingMultipleSource.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Method Definition\nDESCRIPTION: This snippet defines a partial method for mapping from type A to type B using Mapperly. The diagnostics messages point to issues with StringValue property mapping between A and B.  The messages relate to write-only access on source, missing mapping between source and target and missing source on target.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.WithPrivateSourceGetterShouldIgnoreAndDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Strict Mapping at Method Level C#\nDESCRIPTION: This code shows how to apply strict mapping requirements only to a specific method.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/mapper.mdx#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[Mapper]\npublic partial class CarMapper\n{\n    [MapperRequiredMapping(RequiredMappingStrategy.Source)]\n    public partial CarDto MapCar(Car car);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Git branch\nDESCRIPTION: This command creates a new Git branch named 'my-fix-branch' based on the 'main' branch.  It is used to isolate changes during development.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-fix-branch main\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Signature\nDESCRIPTION: This code snippet represents the signature of a partial method generated by Mapperly for mapping between types A and B. It indicates the mapping operation being analyzed for diagnostics.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.WithUnmatchedPropertyShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Build Static Content\nDESCRIPTION: This command generates the static content for the documentation and places it into the `build` directory. The generated content can then be served using any static content hosting service.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/docs.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Mapperly Update Method Declaration\nDESCRIPTION: This code snippet represents the declaration of a partial method named `Update` that Mapperly uses for mapping between types `A` (source) and `B` (target). The analyzer identifies potential issues within this method regarding unmapped members.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyExistingInstanceTest.UnmappedRequiredPropertyShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic partial void Update(A source, B target);\n```\n\n----------------------------------------\n\nTITLE: Roslyn Multi-Targeting Build Script\nDESCRIPTION: This entry refers to the `build/package.sh` script, which handles multi-targeting for different Roslyn versions. Multi-targeting supports new language features while maintaining compatibility with older compiler versions.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/architecture.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbuild/package.sh\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Error Context\nDESCRIPTION: This snippet shows the code location where the Mapperly diagnostic error occurs. It indicates a partial method `Map` is defined for mapping type `A` to `B`. The error `RMG013` suggests the target type `C` lacks a suitable constructor for mapping.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumerableTest.NullableElementMappingWithPrivateConstructorShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate partial B Map(A source);\n\n```\n\n----------------------------------------\n\nTITLE: Suppressing diagnostics using precompiler directives in C#\nDESCRIPTION: This code snippet demonstrates how to suppress a Mapperly analyzer diagnostic using precompiler directives in C#.  `#pragma warning disable` disables the specified warning, and `#pragma warning restore` re-enables it. This approach is used for specific lines of code.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/analyzer-diagnostics/index.mdx#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n#pragma warning disable RMG066 // No members are mapped in an object mapping\n#pragma warning restore RMG066 // No members are mapped in an object mapping\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server\nDESCRIPTION: This command starts a local development server for the documentation. It opens a browser window and provides live updates for most changes. The documentation search feature is disabled in the local development server.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/docs.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Building with EmitCompilerGeneratedFiles using .NET CLI\nDESCRIPTION: This snippet demonstrates how to use the .NET CLI to build a project with the `EmitCompilerGeneratedFiles` property set to `true`. This enables the emission of generated files to disk.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/configuration/generated-source.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet build /p:EmitCompilerGeneratedFiles=true\n```\n\n----------------------------------------\n\nTITLE: Verifying code style with dotnet format\nDESCRIPTION: This command verifies that the code style is consistent without making changes.  It checks if the code follows the defined style rules.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/tests.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet format style --verify-no-changes\n```\n\n----------------------------------------\n\nTITLE: Update Generated Documentation\nDESCRIPTION: This command builds the generated parts of the documentation, such as the API documentation and analyzer rules. It requires the dotnet solution to be built beforehand. This command needs to be rerun each time the source of the generated output changes.\nSOURCE: https://github.com/riok/mapperly/blob/main/docs/docs/contributing/docs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prebuild\n```\n\n----------------------------------------\n\nTITLE: Example Object Mapping Data\nDESCRIPTION: This JSON snippet represents a complex object used for testing object-to-object mapping scenarios in Mapperly. It includes nested objects, various collection types, nullable and non-nullable properties, enums, and different data types to ensure comprehensive mapping functionality.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/DeepCloningMapperTest.RunMappingShouldWork_NET9_0.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"UnmappedValue\": 10,\n  \"StringValue\": \"fooBar\",\n  \"RenamedStringValue\": \"fooBar2\",\n  \"Flattening\": {\n    \"IdValue\": 10\n  },\n  \"NullableFlattening\": {\n    \"IdValue\": 100\n  },\n  \"UnflatteningIdValue\": 20,\n  \"NullableUnflatteningIdValue\": 200,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"NestedMember\": {\n    \"NestedMemberId\": 12,\n    \"NestedMemberObject\": {\n      \"IntValue\": 22\n    }\n  },\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"Value10\",\n    \"EnumName\": \"Value30\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"ExposePrivateValue\": 16,\n    \"ExposeGenericPrivateValue\": {\n      \"ExposedId\": 10,\n      \"ExposedValue\": {\n        \"Value\": 3.3\n      }\n    }\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19,\n    \"ExposeGenericPrivateValue\": {\n      \"ExposedId\": 10,\n      \"ExposedValue\": {\n        \"Value\": 3.3\n      }\n    }\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    3,\n    2,\n    1\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"IReadOnlySet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"Value10\",\n  \"FlagsEnumValue\": \"V1, V4\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": \"Value20\",\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValue\": \"2020-01-03 15:10:05 Utc\",\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03 15:10:05 Utc\",\n  \"DateTimeValueTargetTimeOnly\": \"2020-01-03 15:10:05 Utc\",\n  \"ToByteArrayWithInstanceMethod\": \"Guid_1\",\n  \"WithCreateMethod\": {\n    \"Value\": 10\n  },\n  \"WithCreateFromMethod\": {\n    \"Value\": 20\n  },\n  \"WithFromSingleMethod\": {\n    \"Value\": 30\n  },\n  \"WithCreateParamsMethod\": {\n    \"Value\": 40\n  },\n  \"WithCreateFromParamsMethod\": {\n    \"Value\": 50\n  },\n  \"WithFromShortParamsMethod\": {\n    \"Value\": 60\n  },\n  \"WithToDecimalMethod\": {\n    \"Value\": 70\n  },\n  \"ExposePrivateValue\": 18,\n  \"ExposeGenericPrivateValue\": {\n    \"ExposedId\": 10,\n    \"ExposedValue\": {\n      \"Value\": 3.3\n    }\n  },\n  \"SumComponent1\": 32,\n  \"SumComponent2\": 64\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mapperly Enum Mapping Warning\nDESCRIPTION: This code snippet shows the location of the partial method definition where Mapperly identified a potential issue with enum mapping. Specifically, it warns that enum members from the source enum 'C' are not found in the target enum 'D'. This implies a possible loss of data or unexpected mapping behavior during the automated mapping process.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/EnumTest.EnumToAnotherEnumByNameCaseInsensitive_testCase=TargetLowerMissingMultipleTarget.verified.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Object Mapping Example\nDESCRIPTION: This JSON configuration defines a complex object used to test the Mapperly library's object mapping capabilities. It includes primitives, nested objects, collections, enums, and custom conversions, providing a comprehensive test case for various mapping scenarios.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/StaticMapperTest.RunMappingShouldWork_NET9_0.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"StringValue\": \"fooBar+after-map\",\n  \"RenamedStringValue2\": \"fooBar2\",\n  \"FlatteningIdValue\": 10,\n  \"NullableFlatteningIdValue\": 100,\n  \"Unflattening\": {\n    \"IdValue\": 20\n  },\n  \"NullableUnflattening\": {\n    \"IdValue\": 200\n  },\n  \"NestedNullableIntValue\": 100,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"StringValue\": \"+after-map\",\n    \"RenamedStringValue2\": \"\",\n    \"Unflattening\": {},\n    \"NestedNullableTargetNotNullable\": {},\n    \"StringNullableTargetNotNullable\": \"\",\n    \"SpanValue\": [\n      1,\n      2,\n      3\n    ],\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"DtoValue1\",\n    \"EnumName\": \"Value30\",\n    \"EnumStringValue\": \"0\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"ToByteArrayWithInstanceMethod\": \"AAAAAAAAAAAAAAAAAAAAAA==\",\n    \"FormattedIntValue\": \"\",\n    \"FormattedDateValue\": \"\",\n    \"ExposePrivateValue\": 26,\n    \"ExposeGenericPrivateValue\": {\n      \"ExposedId\": 1,\n      \"ExposedValue\": {\n        \"Value\": 1.5\n      }\n    }\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19,\n    \"ExposeGenericPrivateValue\": {\n      \"ExposedId\": 10,\n      \"ExposedValue\": {\n        \"Value\": 3.3\n      }\n    }\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"SpanValue\": [\n    1,\n    2,\n    3\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableHashSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"IReadOnlySet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"DtoValue1\",\n  \"FlagsEnumValue\": \"V1, V3\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": 20,\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03\",\n  \"DateTimeValueTargetTimeOnly\": \"3:10 PM\",\n  \"ToByteArrayWithInstanceMethod\": \"AQAAAAIAAwAEBQYHCAkKCw==\",\n  \"WithCreateMethod\": 10,\n  \"WithCreateFromMethod\": 20,\n  \"WithFromSingleMethod\": 30.0,\n  \"WithCreateParamsMethod\": 40.0,\n  \"WithCreateFromParamsMethod\": 50,\n  \"WithFromShortParamsMethod\": 60,\n  \"WithToDecimalMethod\": 70.0,\n  \"FormattedIntValue\": \"\",\n  \"FormattedDateValue\": \"\",\n  \"ExposePrivateValue\": 28,\n  \"ExposeGenericPrivateValue\": {\n    \"ExposedId\": 1,\n    \"ExposedValue\": {\n      \"Value\": 1.5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Missing Source Member Diagnostic\nDESCRIPTION: This code snippet represents a diagnostic message generated by Mapperly. It indicates that the member StringValue2 on the mapping target type B was not found on the mapping source type A. It includes the location in the code, the message details, severity, warning level, and a descriptor containing the ID, title, message format, category, default severity, and enabled-by-default status of the diagnostic.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.ShouldIgnoreWriteOnlyPropertyOnSourceWithDiagnostics.verified.txt#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      Location: /*\n{\n    private partial B Map(A source);\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n*/\n : (11,4)-(11,36),\n      Message: The member StringValue2 on the mapping target type B was not found on the mapping source type A,\n      Severity: Warning,\n      WarningLevel: 1,\n      Descriptor: {\n        Id: RMG012,\n        Title: Source member was not found for target member,\n        MessageFormat: The member {0} on the mapping target type {1} was not found on the mapping source type {2},\n        Category: Mapper,\n        DefaultSeverity: Warning,\n        IsEnabledByDefault: true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Mapperly Target Member Missing Source Warning\nDESCRIPTION: This diagnostic message indicates that the member 'Parent' on the mapping target type 'B' was not found on the mapping source type 'A'.  This means that the target member will not be populated during the mapping process.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/QueryableProjectionTest.ReferenceLoopInitProperty.verified.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{\n    private partial System.Linq.IQueryable<B> Map(System.Linq.IQueryable<A> source);\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Object Example\nDESCRIPTION: This JSON snippet demonstrates a complex data structure with nested objects, arrays, and various data types. It's likely used for testing object mapping scenarios, including flattening, unflattening, collections, enums, and custom conversion methods. The snippet also showcases nullable and non-nullable types and different collection implementations.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.IntegrationTests/_snapshots/DeepCloningMapperTest.RunMappingShouldWork.verified.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CtorValue\": 7,\n  \"CtorValue2\": 100,\n  \"IntValue\": 10,\n  \"IntInitOnlyValue\": 3,\n  \"RequiredValue\": 4,\n  \"UnmappedValue\": 10,\n  \"StringValue\": \"fooBar\",\n  \"RenamedStringValue\": \"fooBar2\",\n  \"Flattening\": {\n    \"IdValue\": 10\n  },\n  \"NullableFlattening\": {\n    \"IdValue\": 100\n  },\n  \"UnflatteningIdValue\": 20,\n  \"NullableUnflatteningIdValue\": 200,\n  \"NestedNullable\": {\n    \"IntValue\": 100\n  },\n  \"NestedNullableTargetNotNullable\": {},\n  \"NestedMember\": {\n    \"NestedMemberId\": 12,\n    \"NestedMemberObject\": {\n      \"IntValue\": 22\n    }\n  },\n  \"StringNullableTargetNotNullable\": \"fooBar3\",\n  \"TupleValue\": {\n    \"Item1\": 10,\n    \"Item2\": 20\n  },\n  \"RecursiveObject\": {\n    \"CtorValue\": 5,\n    \"CtorValue2\": 100,\n    \"RequiredValue\": 4,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumValue\": \"Value10\",\n    \"EnumName\": \"Value30\",\n    \"EnumReverseStringValue\": \"DtoValue3\",\n    \"ExposePrivateValue\": 16\n  },\n  \"SourceTargetSameObjectType\": {\n    \"CtorValue\": 8,\n    \"CtorValue2\": 100,\n    \"IntValue\": 99,\n    \"RequiredValue\": 98,\n    \"UnmappedValue\": 10,\n    \"StringValue\": \"\",\n    \"RenamedStringValue\": \"\",\n    \"Flattening\": {},\n    \"NestedMember\": {\n      \"NestedMemberId\": 123,\n      \"NestedMemberObject\": {\n        \"IntValue\": 223\n      }\n    },\n    \"MemoryValue\": {\n      \"IsEmpty\": true\n    },\n    \"ImmutableArrayValue\": null,\n    \"ImmutableQueueValue\": [],\n    \"ImmutableStackValue\": [],\n    \"EnumReverseStringValue\": \"\",\n    \"ExposePrivateValue\": 19\n  },\n  \"NullableReadOnlyObjectCollection\": [\n    {\n      \"IntValue\": 10\n    },\n    {\n      \"IntValue\": 20\n    }\n  ],\n  \"MemoryValue\": {\n    \"Length\": 3,\n    \"IsEmpty\": false\n  },\n  \"StackValue\": [\n    1,\n    2,\n    3\n  ],\n  \"QueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableArrayValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableListValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableQueueValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableStackValue\": [\n    3,\n    2,\n    1\n  ],\n  \"ImmutableSortedSetValue\": [\n    1,\n    2,\n    3\n  ],\n  \"ImmutableDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ImmutableSortedDictionaryValue\": {\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3\n  },\n  \"ExistingISet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingHashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingSortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"ExistingList\": [\n    1,\n    2,\n    3\n  ],\n  \"ISet\": [\n    1,\n    2,\n    3\n  ],\n  \"HashSet\": [\n    1,\n    2,\n    3\n  ],\n  \"SortedSet\": [\n    1,\n    2,\n    3\n  ],\n  \"EnumValue\": \"Value10\",\n  \"FlagsEnumValue\": \"V1, V4\",\n  \"EnumName\": \"Value10\",\n  \"EnumRawValue\": \"Value20\",\n  \"EnumStringValue\": \"Value30\",\n  \"EnumReverseStringValue\": \"DtoValue3\",\n  \"SubObject\": {\n    \"SubIntValue\": 2,\n    \"BaseIntValue\": 1\n  },\n  \"DateTimeValue\": \"2020-01-03 15:10:05 Utc\",\n  \"DateTimeValueTargetDateOnly\": \"2020-01-03 15:10:05 Utc\",\n  \"DateTimeValueTargetTimeOnly\": \"2020-01-03 15:10:05 Utc\",\n  \"WithCreateMethod\": {\n    \"Value\": 10\n  },\n  \"WithCreateFromMethod\": {\n    \"Value\": 20\n  },\n  \"WithFromSingleMethod\": {\n    \"Value\": 30\n  },\n  \"WithCreateParamsMethod\": {\n    \"Value\": 40\n  },\n  \"WithCreateFromParamsMethod\": {\n    \"Value\": 50\n  },\n  \"WithFromShortParamsMethod\": {\n    \"Value\": 60\n  },\n  \"WithToDecimalMethod\": {\n    \"Value\": 70\n  },\n  \"ExposePrivateValue\": 18,\n  \"SumComponent1\": 32,\n  \"SumComponent2\": 64\n}\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Configuration\nDESCRIPTION: This code snippet shows the configuration of a mapping between type A and type B using the `MapProperty` attribute. It attempts to map `MyValueId` from source A to `Value.IdXXX` in target B. The analyzer identifies issues because `Value.IdXXX` is not found on B, and `MyValueId` is not mapped to any member on B. The absence of a `Value` property on A also triggers a warning.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyFlatteningTest.ManualUnflattenedPropertyTargetPropertyNotFoundShouldDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[MapProperty(\"MyValueId\", \"Value.IdXXX\")] private partial B Map(A source);\n```\n\n----------------------------------------\n\nTITLE: Mapperly Mapping Definition\nDESCRIPTION: This snippet shows the definition of a Mapperly mapping method. It defines a partial method named `Map` that takes an object of type `A` as input and returns an object of type `B`.  The Mapperly analyzer uses this definition to generate mapping code and diagnostics.\nSOURCE: https://github.com/riok/mapperly/blob/main/test/Riok.Mapperly.Tests/_snapshots/ObjectPropertyTest.WithPrivateSourcePathGetterShouldIgnoreAndDiagnostic.verified.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n    private partial B Map(A source);\n}\n```"
  }
]