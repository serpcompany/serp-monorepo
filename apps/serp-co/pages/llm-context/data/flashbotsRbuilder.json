[
  {
    "owner": "flashbots",
    "repo": "rbuilder",
    "content": "TITLE: Running op-rbuilder with the Optimism Stack\nDESCRIPTION: Command to run op-rbuilder with necessary parameters including chain configuration, HTTP server, and authentication RPC settings. The flashblocks feature is enabled for this usage.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/op-rbuilder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p op-rbuilder --bin op-rbuilder --features flashblocks -- node \\\n    --chain /path/to/chain-config.json \\\n    --http \\\n    --authrpc.port 9551 \\\n    --authrpc.jwtsecret /path/to/jwt.hex\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Builder in TOML Configuration\nDESCRIPTION: Example configuration for enabling the parallel builder in a production environment. The configuration specifies the builder name, algorithm type, transaction handling behavior, and number of threads to use for parallel processing.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/rbuilder/src/building/builders/parallel_builder/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[builders]]\nname = \"parallel\"\nalgo = \"parallel-builder\"\ndiscard_txs = true\nnum_threads = 25\n```\n\n----------------------------------------\n\nTITLE: Block Building Process Diagram - Mermaid\nDESCRIPTION: Detailed flowchart showing the block building process including order management, simulation, and building tasks.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/docs/LIVEBUILDER_DATAFLOW.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\n    OrderPool(\"**OrderPool**\")\n    OrderReplacementManager(\"**OrderReplacementManager**\")\n    OrderChannel(\"channel\")\n    SimulationTask(\"ðŸ”„ Simulation task\")\n\n    OrderPool-- replaceable orders -->OrderReplacementManager\n    OrderReplacementManager-- orders -->OrderChannel\n    SimulationTask-- polls -->OrderChannel\n    SimulationTask-- simulation request -->OrderSimulationPool\n    OrderSimulationPool(\"**OrderSimulationPool**<br>Several sim threads ðŸ”„ðŸ”„ðŸ”„\")\n    OrderSimulationPool-- simulation result -->SimulationTask\n    SimChannel(\"channel\")\n    SimulationTask-- simulated orders -->SimChannel\n    SimChannel<-- \"ðŸ”„polling\" -->BrSimChannel\n    BrSimChannel(\"broadcast<br>channel\")\n    B1(\"ðŸ”„building task 1\")\n    BN(\"ðŸ”„building task N\")\n    B1 -.- BN\n\n    B1--polls-->BrSimChannel\n    BN--polls-->BrSimChannel\n    run_trie_prefetcher(\"ðŸ”„**run_trie_prefetcher**\")\n    run_trie_prefetcher--polls-->BrSimChannel\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Redaction in Rust for Sensitive Information\nDESCRIPTION: This snippet demonstrates how to implement error handling in Rust with redaction capabilities for sensitive information. It shows how to use feature flags to conditionally redact error details and provides implementations for Display and Debug traits that respect these privacy settings.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/docs/LOGS_PRIVACY.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Error)]\npub enum SomeError {\n    #[error(\"Request error: {0}\")]\n    RequestError(#[from] RedactableReqwestError),\n\n    #[cfg_attr(\n        not(feature = \"redact-sensitive\"),\n        error(\"Unknown relay response, status: {0}, body: {1}\")\n    )]\n    #[cfg_attr(\n        feature = \"redact-sensitive\",\n        error(\"Unknown relay response, status: {0}, body: [REDACTED]\")\n    )]\n    UnknownRelayError(StatusCode, String),\n\n    #[error(\"Too many requests\")]\n    TooManyRequests,\n    #[error(\"Connection error\")]\n    ConnectionError,\n    #[error(\"Internal Error\")]\n    InternalError,\n}\n\nimpl Debug for RelayError {\n    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n        write!(f, \"{}\", self)\n    }\n}\n\n#[derive(Error)]\npub struct RedactableReqwestError(reqwest::Error);\n\nimpl Display for RedactableReqwestError {\n    #[cfg(not(feature = \"redact-sensitive\"))]\n    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{}\", self.0)\n    }\n\n    #[cfg(feature = \"redact-sensitive\")]\n    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {\n        if self.0.is_builder() {\n            write!(f, \"Redacted Reqwest Error: Builder\")\n        } else if self.0.is_request() {\n            write!(f, \"Redacted Reqwest Error: Request\")\n        } else if self.0.is_redirect() {\n            write!(f, \"Redacted Reqwest Error: Redirect\")\n        } else if self.0.is_status() {\n            write!(f, \"Redacted Reqwest Error: Status\")\n        } else if self.0.is_body() {\n            write!(f, \"Redacted Reqwest Error: Body\")\n        } else if self.0.is_decode() {\n            write!(f, \"Redacted Reqwest Error: Decode\")\n        } else {\n            write!(f, \"Redacted Reqwest Error\")\n        }\n    }\n}\n\nimpl Debug for RedactableReqwestError {\n    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n        Display::fmt(self, f)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running rbuilder with config file in Rust\nDESCRIPTION: This command demonstrates how to run rbuilder using a specific configuration file (config-playground.toml) using Cargo, Rust's package manager and build system.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin rbuilder run config-playground.toml\n```\n\n----------------------------------------\n\nTITLE: Visualizing Block Sealing and Bidding Process with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram illustrates the flow and components involved in the block sealing and bidding process. It shows how blocks from the previous stage are processed through SlotBidder, BidMaker, and ultimately submitted to relays via BlockBuildingSink.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/docs/LIVEBUILDER_DATAFLOW.md#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n  graph LR;\n      Source(\"ðŸ”„Blocks from<br>previous stage\")-->SlotBidder\n      BiddingService(\"**BiddingService**\")\n      subgraph BlockSealingBidder\n        SlotBidder(\"**SlotBidder**<br>could use a<br>spawned task\")\n        SlotBidder-.(\"accesses internal<br>bidding info\").->BiddingService\n        BidValueSource(\"ðŸ”„**BidValueSource**\")--bids from the<br>competition-->SlotBidder\n        SlotBidder--\"send_bid\"-->Sealer(\"ðŸ”„**BidMaker** (Sealer)\")\n        Sealer--\"new_block\"-->BlockBuildingSink(\"**BlockBuildingSink**<br>ðŸ”„Task submitting to the relays\")\n      end\n```\n\n----------------------------------------\n\nTITLE: Running op-rbuilder in a Local Development Environment\nDESCRIPTION: Complete command to run op-rbuilder in a local development environment with configured ports, chain settings, metrics, and builder secret key. This setup connects to a local devnet instance.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/op-rbuilder/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p op-rbuilder --bin op-rbuilder -- node \\\n    --chain $HOME/.playground/devnet/l2-genesis.json \\\n    --http --http.port 2222 \\\n    --authrpc.port 4444 --authrpc.jwtsecret $HOME/.playground/devnet/jwtsecret \\\n    --port 30333 --disable-discovery \\\n    --metrics 127.0.0.1:9001 \\\n    --rollup.builder-secret-key ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 \\\n    --trusted-peers enode://3479db4d9217fb5d7a8ed4d61ac36e120b05d36c2eefb795dc42ff2e971f251a2315f5649ea1833271e020b9adc98d5db9973c7ed92d6b2f1f2223088c3d852f@127.0.0.1:30304\n```\n\n----------------------------------------\n\nTITLE: Running test-relay for testing live builders in Rust\nDESCRIPTION: This snippet shows how to use the test-relay tool included in the repository for testing live builders without submitting blocks to production relays. It implements the MEV-Boost Relay API and performs block validation and profit comparison.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./test-relay \\\n    --relay \"https://boost-relay-holesky.flashbots.net\" \\\n    --validation-url \"http://localhost:8545\" \\\n    --cl-clients \"http://localhost:5052\" \n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for op-rbuilder\nDESCRIPTION: Series of commands to generate a genesis file, build the op-rbuilder binary, and run integration tests. These tests validate that the builder produces valid blocks against mock engine API payloads.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/op-rbuilder/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a genesis file\ncargo run -p op-rbuilder --bin tester --features optimism -- genesis --output genesis.json\n\n# Build the op-rbuilder binary\ncargo build -p op-rbuilder --bin op-rbuilder --features optimism\n\n# Run the integration tests\ncargo run -p op-rbuilder --bin tester --features optimism -- run\n```\n\n----------------------------------------\n\nTITLE: Configuring rbuilder to use test-relay in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to set up rbuilder to use the test-relay for testing purposes. It specifies the relay name, URL, and priority in the config file.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/README.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[relays]]\nname = \"flashbots-test\"\nurl = \"http://localhost:80\"\npriority = 0\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Root Hash Calculation Methods\nDESCRIPTION: Performance comparison between reth parallel root hash and eth-sparse-mpt implementations for calculating root hash on block 20821340. Shows the significant speed improvement after initial calculation when using the sparse trie caching approach.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/eth-sparse-mpt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nreth parallel root hash:\n\nfirst iteraton : 220 ms\nnext iterations: 140 ms (median, stable)\n\neth-sparse-mpt:\n\nfirst iteration : 225 ms\nnext iterations: 5.1 ms (median, stable)\n```\n\n----------------------------------------\n\nTITLE: Core Component Dataflow Diagram - Mermaid\nDESCRIPTION: Visualization of the main thread, RPC, OrderPool, BlockBuildingPool and related component interactions using a flowchart diagram.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/docs/LIVEBUILDER_DATAFLOW.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n      MainThread-- polls -->payload_events_channel\n      payload_events_channel\n      MainThread(\"ðŸ”„Main thread\")\n      RPC\n      RPC--eth_sendBundle-->Ch1\n      RPC--mev_sendBundle-->Ch1\n      RPC--eth_cancelBundle-->Ch1\n      RPC--eth_sendRawTransaction-->Ch1\n      MemPool(\"Mempool<br>(reth connection)\")--new txs-->Ch1\n      Ch1(\"channel\")\n      OrderPool(\"**OrderPool**\")\n      Ch1<-- \"ðŸ”„polling\" -->OrderPool\n      BlockBuildingPool(\"**BlockBuildingPool**\")\n      OrderSimulationPool(\"**OrderSimulationPool**\")\n      \n      sink_factory\n      BlockBuildingPool-- owns -->B1\n      BlockBuildingPool-- owns -->BN\n      BlockBuildingPool-- owns -->sink_factory\n      BlockBuildingPool-- owns -->OrderSimulationPool\n      BlockBuildingPool-- \"ref via **OrderPoolSubscriber**\" -->OrderPool\n      MainThread-- triggers building task-->BlockBuildingPool\n      subgraph builders\n        B1[Builder 1]\n        BN[Builder N]\n        B1 -.- BN\n      end\n```\n\n----------------------------------------\n\nTITLE: Running Lighthouse for triggering payload events in Rust\nDESCRIPTION: This code snippet demonstrates how to run Lighthouse, a Consensus Layer client, with specific configuration options to trigger payload events for use with rbuilder. It includes settings for network, execution endpoint, JWT authentication, and other important parameters.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./target/maxperf/lighthouse bn \\\n    --network mainnet \\\n    --execution-endpoint http://localhost:8551 \\\n    --execution-jwt /secrets/jwt.hex \\\n    --checkpoint-sync-url https://mainnet.checkpoint.sigp.io \\\n    --disable-deposit-contract-sync \\\n    --http \\\n    --http-port 3500 \\\n    --always-prepare-payload \\\n    --prepare-payload-lookahead 8000 \\\n    --suggested-fee-recipient 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\n```\n\n----------------------------------------\n\nTITLE: Building op-rbuilder with Optimism Features\nDESCRIPTION: Command to build the op-rbuilder binary with optimism features enabled, which compiles the necessary components for interacting with the Optimism stack.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/op-rbuilder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build -p op-rbuilder --bin op-rbuilder --features optimism\n```\n\n----------------------------------------\n\nTITLE: RBuilder Binary Descriptions Table\nDESCRIPTION: Markdown table listing all available binaries built by the project and their descriptions, including the main builder, backtesting tools, and debugging utilities\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/README.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Binary                      | Description                                                                                           |\n|-----------------------------|-------------------------------------------------------------------------------------------------------|\n| `rbuilder`                  | Live block builder                                                                                    |\n| `backtest-build-block`      | Run backtests for a single block                                                                      |\n| `backtest-build-range`      | Run backtests for a range of block                                                                    |\n| `backtest-fetch`            | Download data for backtesting                                                                         |\n| `dummy-builder`             | Simple sample builder to show how to plugin a custom `BlockBuildingSink` and `BlockBuildingAlgorithm` |\n| `misc-relays-slot`          | Shows info about winning bid for the block                                                            |\n| `debug-bench-machine`       | Tests execution performance                                                                           |\n| `debug-order-input`         | Observe input of the bundles and transactions                                                         |\n| `debug-order-sim`           | Observe simulation of the bundles and transactions                                                    |\n| `debug-slot-data-generator` | Shows new payload jobs coming from CL with attached data from relays.                                 |\n| `test-relay`                | Test MEV-boost relay that accepts blocks and validates them.                                          |\n```\n\n----------------------------------------\n\nTITLE: Querying local relay for proposed blocks in Bash\nDESCRIPTION: This curl command shows how to query the local relay for proposed blocks, specifically requesting bidtraces for delivered proposer payloads from the relay's API.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:5555/relay/v1/data/bidtraces/proposer_payload_delivered\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Local Devnet with Builder-Playground\nDESCRIPTION: Command to clone and set up a local OPStack chain using the builder-playground repository, configuring it to use an external builder hosted at host.docker.internal:4444.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/op-rbuilder/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flashbots/builder-playground.git\ncd builder-playground\ngo run main.go cook opstack --external-builder http://host.docker.internal:4444\n```\n\n----------------------------------------\n\nTITLE: Performing reproducible builds for rbuilder in Bash\nDESCRIPTION: This set of Bash commands demonstrates how to perform reproducible builds for rbuilder. It sets the SOURCE_DATE_EPOCH environment variable, builds the project twice, and compares the SHA256 checksums to ensure build reproducibility.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Use last commit timestamp as the build date\n$ export SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)\n\n# build #1\n$ rm -rf target/\n$ cargo build --release\n$ sha256sum target/release/rbuilder\nd92ac33b94e16ed4a035b9dd52108fe78bd9bb160a91fced8e439f59b84c3207  target/release/rbuilder\n\n# build #2\n$ rm -rf target/\n$ cargo build --release\n$ sha256sum target/release/rbuilder\nd92ac33b94e16ed4a035b9dd52108fe78bd9bb160a91fced8e439f59b84c3207  target/release/rbuilder\n```\n\n----------------------------------------\n\nTITLE: Running Transactions with Contender\nDESCRIPTION: Command to run contender in spam mode to generate transactions for testing op-rbuilder, specifying transactions per block and test duration parameters.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/op-rbuilder/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -- spam ./scenarios/simple.toml http://localhost:2222 --tpb 10 --duration 10\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Contender Repository for Testing\nDESCRIPTION: Commands to clone and set up the contender repository for load testing op-rbuilder, initializing it with a simple scenario configuration pointing to the local builder instance.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/op-rbuilder/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flashbots/contender\ncd contender\ncargo run -- setup ./scenarios/simple.toml http://localhost:2222\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks in RBuilder\nDESCRIPTION: Commands for running benchmarks and opening benchmark reports for performance analysis\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake bench\nmake bench-report-open\n```\n\n----------------------------------------\n\nTITLE: GitHub Workflow Benchmark Results Template in Markdown\nDESCRIPTION: A markdown template that uses environment variables to display benchmark results for a specific commit. The template includes metadata such as date, commit hashes, branch information, GitHub context details, and a section for displaying significant benchmark changes.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/scripts/ci/templates/benchmark-summary.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Benchmark results for `${HEAD_SHA_SHORT}`\n\n|                |                      |\n| -------------- | -------------------- |\n| Date (UTC)     | ${DATE}              |\n| Head SHA       | `${HEAD_SHA}`        |\n| Head Branch    | `${HEAD_BRANCH}`     |\n| Base SHA       | `${BASE_SHA}`        |\n| Base Ref       | `${BASE_REF}`        |\n| GH SHA         | `${GITHUB_SHA}`      |\n| GH Ref Name    | `${GITHUB_REF_NAME}` |\n| GH Ref Type    | `${GITHUB_REF_TYPE}` |\n| GH Head Ref    | `${GITHUB_HEAD_REF}` |\n| GH Actor       | `${GITHUB_ACTOR}`    |\n| GH Runner Arch | `${RUNNER_ARCH}`     |\n| GH Runner OS   | `${RUNNER_OS}`       |\n| PR Number      | `${PR_NUMBER}`       |\n\n\n### Significant changes\n\n${BENCH_CHANGES_MD}\n```\n\n----------------------------------------\n\nTITLE: Creating Benchmark Results Table in Markdown\nDESCRIPTION: This snippet creates a Markdown table to display benchmark result information, including the date and commit details. It uses placeholders for dynamic content that will be replaced with actual values when the report is generated.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/scripts/ci/templates/benchmark-pr-comment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Benchmark results for `${HEAD_SHA_SHORT}`\n\nReport: __BENCH_URL__\n\n|            |               |\n| ---------- | ------------- |\n| Date (UTC) | ${DATE}       |\n| Commit     | `${HEAD_SHA}` |\n| Base SHA   | `${BASE_SHA}` |\n\n### Significant changes\n\n${BENCH_CHANGES_MD_ONLYSIGNIFICANT}\n```\n\n----------------------------------------\n\nTITLE: Updating config-playground.toml paths in Bash\nDESCRIPTION: This Bash command uses sed to replace occurrences of '$HOME' in the config-playground.toml file with the actual value of the HOME environment variable, ensuring correct path configurations for rbuilder.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsed -i \"s|\\$HOME|$HOME|g\" config-playground.toml\n```\n\n----------------------------------------\n\nTITLE: Compressing Files with Gzip\nDESCRIPTION: Command to compress all files in current directory using gzip. This operation will remove the original files after compression.\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/eth-sparse-mpt/test_data/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# compress file, it will remove original file\ngzip *\n```\n\n----------------------------------------\n\nTITLE: Decompressing Files with Gzip\nDESCRIPTION: Command to decompress a specific file using gzip while keeping the original compressed file (-k flag) and forcing decompression (-d flag).\nSOURCE: https://github.com/flashbots/rbuilder/blob/develop/crates/eth-sparse-mpt/test_data/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# decompress file, without removing original file\ngzip -k -d name\n```"
  }
]