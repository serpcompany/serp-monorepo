[
  {
    "owner": "contentful",
    "repo": "contentful.js",
    "content": "TITLE: Initializing Contentful Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Contentful client using the createClient method. It shows the basic structure for passing configuration options to the client.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncontentful.createClient({\n  ...your config here...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Contentful Client and Fetching an Entry\nDESCRIPTION: Basic example of creating a Contentful client and using it to fetch a specific entry by ID from the Contentful Delivery API.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as contentful from \"contentful\"\nconst client = contentful.createClient({\n  // This is the space ID. A space is like a project folder in Contentful terms\n  space: 'developer_bookshelf',\n  // This is the access token for this space. Normally you get both ID and the token in the Contentful web app\n  accessToken: '0b7f6x59a0',\n})\n// This API call will request an entry with the specified ID from the space defined at the top, using a space-specific access token\nclient\n  .getEntry('5PeGS2SoZGSa4GuiQsigQu')\n  .then((entry) => console.log(entry))\n  .catch((err) => console.log(err))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entries with Chain Modifiers\nDESCRIPTION: Examples of using different chain modifiers to retrieve entries with various configurations for locale handling and link resolution.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// returns entries in one locale, resolves linked entries, removing unresolvable links\nconst entries = await client.withoutUnresolvableLinks.getEntries()\n\n// returns entries in all locales, resolves linked entries, removing unresolvable links\nconst entries = await client.withoutLinkResolution.withAllLocales.getEntries()\n\n// returns entries in one locale, resolves linked entries, keeping unresolvable links as link object\nconst entries = await client.getEntries()\n```\n\n----------------------------------------\n\nTITLE: Querying Entries with Parameters in Contentful JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to query entries in Contentful using the JavaScript SDK. It shows how to initialize a client, fetch entries with specific parameters, and handle the response. The example includes querying by system ID and accessing nested fields from the returned data.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/ADVANCED.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentful = require('contentful')\nconst client = contentful.createClient({\n  accessToken: '<you-access-token>',\n  space: '<your-space-id>',\n})\n\n// getting a specific Post\nclient\n  .getEntries({ 'sys.id': '<entry-id>' })\n  .then((response) => {\n    // output the author name\n    console.log(response.items[0].fields.author.fields.name)\n  })\n  .catch((err) => console.log(err))\n\n// You can pass a query when requesting a single entity\nclient.getEntry('<entry-id>', { key: value })\n```\n\n----------------------------------------\n\nTITLE: Using the Sync API\nDESCRIPTION: Example of using the Sync API with link resolution configuration to retrieve initial content.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// returns content in all locales, resolves linked entries, removing unresolvable links\nconst { entries, assets, deletedEntries, deletedAssets } = await client.withoutUnresolvableLinks.sync({ initial: true })\n```\n\n----------------------------------------\n\nTITLE: Querying Entries with Dynamic Query Keys in TypeScript\nDESCRIPTION: Demonstrates how to use the defined content type skeletons to query entries with dynamic keys, providing type support for field-specific queries.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/TYPESCRIPT.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = contentful.createClient({\n  space: '<space-id>',\n  accessToken: '<content-delivery-token>',\n})\n\n// content_type query parameter is required when filtering on any field\nclient.getEntries<ProductEntrySkeleton>({\n  content_type: 'product',\n  'fields.price[gt]': 100,\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Assets with Locale Handling\nDESCRIPTION: Examples of retrieving assets with different locale configurations using the client's getAssets method.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// returns assets in all locales\nconst assets = await client.withAllLocales.getAssets()\n\n// returns assets in one locale\nconst assets = await client.getAssets()\n```\n\n----------------------------------------\n\nTITLE: Parsing Localized Entry Data\nDESCRIPTION: Example of parsing raw localized entry data using the client's parseEntries method with locale handling.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst localizedData = {\n  total: 1,\n  skip: 0,\n  limit: 100,\n  items: [\n    {\n      metadata: { tags: [] },\n      sys: {\n        space: {\n          sys: { type: 'Link', linkType: 'Space', id: 'my-space-id' },\n        },\n        id: 'my-zoo',\n        type: 'Entry',\n        createdAt: '2020-01-01T00:00:00.000Z',\n        updatedAt: '2020-01-01T00:00:00.000Z',\n        environment: {\n          sys: { id: 'master', type: 'Link', linkType: 'Environment' },\n        },\n        revision: 1,\n        contentType: { sys: { type: 'Link', linkType: 'ContentType', id: 'zoo' } },\n        locale: 'en-US',\n      },\n      fields: {\n        animal: {\n          'en-US': { sys: { type: 'Link', linkType: 'Entry', id: 'oink' } },\n        },\n        anotheranimal: {\n          'en-US': { sys: { type: 'Link', linkType: 'Entry', id: 'middle-parrot' } },\n        },\n      },\n    },\n  ],\n  includes: {\n    Entry: [\n      {\n        metadata: { tags: [] },\n        sys: {\n          space: {\n            sys: { type: 'Link', linkType: 'Space', id: 'my-space-id' },\n          },\n          id: 'oink',\n          type: 'Entry',\n          createdAt: '2020-01-01T00:00:00.000Z',\n          updatedAt: '2020-02-01T00:00:00.000Z',\n          environment: {\n            sys: { id: 'master', type: 'Link', linkType: 'Environment' },\n          },\n          revision: 2,\n          contentType: { sys: { type: 'Link', linkType: 'ContentType', id: 'animal' } },\n          locale: 'en-US',\n        },\n        fields: {\n          name: {\n            'en-US': 'Pig',\n            de: 'Schwein',\n          },\n          friend: {\n            'en-US': { sys: { type: 'Link', linkType: 'Entry', id: 'groundhog' } },\n          },\n        },\n      },\n    ],\n  },\n}\n\n// returns parsed entries in all locales\nconst entries = client.withAllLocales.parseEntries(localizedData)\n```\n\n----------------------------------------\n\nTITLE: Initial Sync Operation with Token Handling\nDESCRIPTION: Demonstrates how to perform an initial sync operation to retrieve all content from a space. The nextSyncToken should be saved and used for subsequent sync operations to only retrieve changes.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/ADVANCED.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentful = require('contentful')\nconst client = contentful.createClient({\n  accessToken: '<you-access-token>',\n  space: '<your-space-id>',\n})\n// first time you are syncing make sure to specify `initial: true`\nclient\n  .sync({ initial: true })\n  .then((response) => {\n    // You should save the `nextSyncToken` to use in the following sync\n    console.log(response.nextSyncToken)\n  })\n  .catch((err) => console.log(err))\n```\n\n----------------------------------------\n\nTITLE: Manual Sync Pagination Implementation\nDESCRIPTION: Shows how to implement custom sync pagination by setting paginate:false and manually handling the nextPageToken and nextSyncToken. Useful when you need to control the pagination process yourself.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/ADVANCED.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentful = require('contentful')\nconst client = contentful.createClient({\n  accessToken: '<you-access-token>',\n  space: '<your-space-id>',\n})\n\nfunction customPaginatedSync(query) {\n  // Call sync, make sure you set paginate to false for every call\n  return client.sync(query, { paginate: false }).then((response) => {\n    // Do something with the respond. For example save result to disk.\n    console.log('Result of current sync page:', response.items)\n\n    // Sync finished when `nextSyncToken` is available\n    if (response.nextSyncToken) {\n      console.log('Syncing done. Start a new sync via ' + response.nextSyncToken)\n      return\n    }\n\n    // Otherwise, just continue to next page of the current sync run\n    return customPaginatedSync({ nextPageToken: response.nextPageToken })\n  })\n}\n\ncustomPaginatedSync({ initial: true }).then(() => console.log('Sync done'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Contentful Client for Preview API\nDESCRIPTION: Example of configuring a Contentful client to use the Preview API instead of the standard Content Delivery API by specifying a different host and token.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as contentful from \"contentful\"\nconst client = contentful.createClient({\n  space: 'developer_bookshelf',\n  accessToken: 'preview_0b7f6x59a0',\n  host: 'preview.contentful.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Client Chain Modifiers in Contentful.js v10.x\nDESCRIPTION: Example of using the new client chain modifiers introduced in v10.x to replace the deprecated query parameters for link resolution and locale selection.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/MIGRATION.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = contentful.createClient({\n  accessToken: '<you-access-token>',\n  space: '<your-space-id>',\n})\n\n// get entries without link resolution (previously `resolveLinks: false`)\nconst entries = client.withoutLinkResolution.getEntries()\n\n// get entries without unresolvable links (previoulsy `removeUnresolved: true`)\nconst entries = client.withoutUnresolvableLinks.getEntries()\n```\n\n----------------------------------------\n\nTITLE: Resolving Links Example with Entry Lookup\nDESCRIPTION: Shows how to get a specific entry with resolved links using the collection endpoint with a sys.id filter. This demonstrates accessing nested fields from linked entries.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/ADVANCED.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentful = require('contentful')\nconst client = contentful.createClient({\n  accessToken: '<you-access-token>',\n  space: '<your-space-id>',\n})\n// getting a specific Post\nclient\n  .getEntries({ 'sys.id': '<entry-id>' })\n  .then((response) => {\n    // output the author name\n    console.log(response.items[0].fields.author.fields.name)\n  })\n  .catch((err) => console.log(err))\n```\n\n----------------------------------------\n\nTITLE: Using withAllLocales Modifier for Localized Responses in TypeScript\nDESCRIPTION: Demonstrates how to use the withAllLocales client modifier to get responses with all available locales for entries and assets.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/TYPESCRIPT.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as contentful from 'contentful'\n\nconst client = contentful.createClient({\n  space: '<space-id>',\n  accessToken: '<content-delivery-token>',\n})\n\ntype ProductEntrySkeleton = {\n  fields: { productName: contentful.EntryFieldTypes.Text }\n  contentTypeId: 'product'\n}\ntype Locales = 'en-US' | 'de-DE'\nconst entry = client.withAllLocales.getEntry<ProductEntrySkeleton, Locales>('some-entry-id')\n```\n\n----------------------------------------\n\nTITLE: Using withoutLinkResolution Modifier in TypeScript\nDESCRIPTION: Shows how to use the withoutLinkResolution client modifier to get responses without resolving linked entities, keeping them as link objects instead.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/TYPESCRIPT.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as contentful from 'contentful'\n\nconst client = contentful.createClient({\n  space: '<space-id>',\n  accessToken: '<content-delivery-token>',\n})\n\ntype ProductEntrySkeleton = {\n  contentTypeId: 'product'\n  fields: {\n    productName: contentful.EntryFieldTypes.Text\n    image: contentful.EntryFieldTypes.AssetLink\n    price: contentful.EntryFieldTypes.Number\n  }\n}\n\ntype ReferencedProductEntrySkeleton = {\n  fields: { relatedProduct: contentful.EntryFieldTypes.EntryLink<ProductEntrySkeleton> }\n  contentTypeId: 'referencedProduct'\n}\nconst entry = client.withoutLinkResolution.getEntry<ReferencedProductEntrySkeleton>('some-entry-id')\n```\n\n----------------------------------------\n\nTITLE: Using withoutUnresolvableLinks Modifier in TypeScript\nDESCRIPTION: Demonstrates how to use the withoutUnresolvableLinks client modifier to get responses without including unresolvable linked entries.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/TYPESCRIPT.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as contentful from 'contentful'\n\nconst client = contentful.createClient({\n  space: '<space-id>',\n  accessToken: '<content-delivery-token>',\n})\n\ntype ProductEntrySkeleton = {\n  contentTypeId: 'product'\n  fields: {\n    productName: contentful.EntryFieldTypes.Text\n    image: contentful.EntryFieldTypes.AssetLink\n    price: contentful.EntryFieldTypes.Number\n  }\n}\n\ntype ReferencedProductEntrySkeleton = {\n  fields: { relatedProduct: contentful.EntryFieldTypes.EntryLink<ProductEntrySkeleton> }\n  contentTypeId: 'referencedProduct'\n}\nconst entry =\n  client.withoutUnresolvableLinks.getEntry<ReferencedProductEntrySkeleton>('some-entry-id')\n```\n\n----------------------------------------\n\nTITLE: Using withAllLocales Modifier in Contentful.js v10.x\nDESCRIPTION: Example of using the withAllLocales client chain modifier to fetch entries in all locales, replacing the deprecated locale='*' query parameter.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/MIGRATION.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get entries with all locales (previously `locale: '*'`)\nconst entries = client.withAllLocales.getEntries()\n```\n\n----------------------------------------\n\nTITLE: Cross-Space Link Resolution with Custom Headers\nDESCRIPTION: Demonstrates how to set up a client to resolve links to entries in other spaces using the x-contentful-resource-resolution header. Includes examples of both retrieval methods.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/ADVANCED.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'contentful'\nconst client = createClient({\n  accessToken: '<you-access-token>',\n  space: '<your-space-id>',\n  environment: '<your-environment-id>',\n  headers: {\n    'x-contentful-resource-resolution': '<your-base64-generated-header>'\n  }\n})\n// getting all Entries\nclient\n  .getEntries()\n  .then((response) => {\n    // You should find the linked entries in the includes.Entry array\n    console.log(response.includes.Entry)\n  })\n  .catch((err) => console.log(err))\n\n// filtering on one entry\nclient\n  .getEntries({ 'sys.id': '<entry-id>' })\n  .then((response) => {\n    // You should find the linked entries in the includes.Entry array\n    console.log(response.includes.Entry)\n  })\n  .catch((err) => console.log(err))\n```\n\n----------------------------------------\n\nTITLE: Parsing Non-Localized Entry Data\nDESCRIPTION: Example of parsing raw non-localized entry data using the client's parseEntries method.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  total: 1,\n  skip: 0,\n  limit: 100,\n  items: [\n    {\n      metadata: { tags: [] },\n      sys: {\n        space: { sys: { type: 'Link', linkType: 'Space', id: 'my-space-id' } },\n        id: 'my-zoo',\n        type: 'Entry',\n        createdAt: '2020-01-01T00:00:00.000Z',\n        updatedAt: '2020-01-01T00:00:00.000Z',\n        environment: { sys: { id: 'master', type: 'Link', linkType: 'Environment' } },\n        revision: 1,\n        contentType: { sys: { type: 'Link', linkType: 'ContentType', id: 'zoo' } },\n        locale: 'en-US',\n      },\n      fields: {\n        animal: { sys: { type: 'Link', linkType: 'Entry', id: 'oink' } },\n        anotheranimal: { sys: { type: 'Link', linkType: 'Entry', id: 'middle-parrot' } },\n      },\n    },\n  ],\n  includes: {\n    Entry: [\n      {\n        metadata: { tags: [] },\n        sys: {\n          space: { sys: { type: 'Link', linkType: 'Space', id: 'my-space-id' } },\n          id: 'oink',\n          type: 'Entry',\n          createdAt: '2020-01-01T00:00:00.000Z',\n          updatedAt: '2020-02-01T00:00:00.000Z',\n          environment: { sys: { id: 'master', type: 'Link', linkType: 'Environment' } },\n          revision: 2,\n          contentType: { sys: { type: 'Link', linkType: 'ContentType', id: 'animal' } },\n          locale: 'en-US',\n        },\n        fields: {\n          name: 'Pig',\n          friend: { sys: { type: 'Link', linkType: 'Entry', id: 'groundhog' } },\n        },\n      },\n    ],\n  },\n}\n\n// returns parsed entries keeping unresolvable links as link object\nconst entries = client.withoutLinkResolution.parseEntries(data)\n```\n\n----------------------------------------\n\nTITLE: Using Array Values in Query Filters with TypeScript\nDESCRIPTION: Shows the correct way to use array values in query filters, which is a breaking change in version 10.0.0 of the SDK.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/TYPESCRIPT.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclient.getEntries<ProductEntrySkeleton>({\n  content_type: 'product',\n  'fields.location[near]': [10, 20, 30],\n})\n```\n\n----------------------------------------\n\nTITLE: ContentfulClientApi Methods Documentation\nDESCRIPTION: Comprehensive list of available methods in the ContentfulClientApi class for interacting with assets, content types, entries, locales, spaces, and tags.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/DOCS.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- {@link ContentfulClientApi}\n  - {@link ContentfulClientApi.createAssetKey}\n  - {@link ContentfulClientApi.getAsset}\n  - {@link ContentfulClientApi.getAssets}\n  - {@link ContentfulClientApi.getContentType}\n  - {@link ContentfulClientApi.getContentTypes}\n  - {@link ContentfulClientApi.getEntries}\n  - {@link ContentfulClientApi.getEntry}\n  - {@link ContentfulClientApi.getLocales}\n  - {@link ContentfulClientApi.getSpace}\n  - {@link ContentfulClientApi.getTag}\n  - {@link ContentfulClientApi.getTags}\n  - {@link ContentfulClientApi.parseEntries}\n  - {@link ContentfulClientApi.sync}\n```\n\n----------------------------------------\n\nTITLE: Querying Entries with Static Query Keys in TypeScript\nDESCRIPTION: Demonstrates how to use static query keys when fetching entries from Contentful. These keys are not influenced by the shape of the entries or assets being queried.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/TYPESCRIPT.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetEntries({\n  skip: 10,\n  limit: 20,\n  include: 5,\n})\n```\n\n----------------------------------------\n\nTITLE: Client Configuration with Link Resolution Disabled\nDESCRIPTION: Demonstrates how to create a Contentful client with link resolution disabled for versions older than 10.0.0. This uses a configuration option during client creation.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/ADVANCED.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentful = require('contentful')\nconst client = contentful.createClient({\n  accessToken: '<you-access-token>',\n  space: '<your-space-id>',\n  resolveLinks: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Content Type Skeletons for Dynamic Query Keys in TypeScript\nDESCRIPTION: Shows how to define type skeletons for content types, which are used to calculate dynamic query keys based on the shape of the expected entries.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/TYPESCRIPT.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as contentful from 'contentful'\n\ntype CategoryEntrySkeleton = {\n  contentTypeId: 'category'\n  fields: {\n    categoryName: contentful.EntryFieldTypes.Text\n  }\n}\n\ntype ProductEntrySkeleton = {\n  contentTypeId: 'product'\n  fields: {\n    productName: contentful.EntryFieldTypes.Text\n    image: contentful.EntryFieldTypes.AssetLink\n    price: contentful.EntryFieldTypes.Number\n    categories: contentful.EntryFieldTypes.Array<\n      contentful.EntryFieldTypes.EntryLink<CategoryEntrySkeleton>\n    >\n    location: contentful.EntryFieldTypes.Location\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Overview Documentation for Contentful Namespace\nDESCRIPTION: Lists the available API methods and interfaces in the Contentful namespace including client creation, entry fields, and field types.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/DOCS.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Contentful Namespace\n  - {@link createClient}\n  - {@link EntryFields}\n  - {@link EntryFieldTypes}\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure in Contentful.js 9.x\nDESCRIPTION: New error handler format showing the structure of error responses with improved details and obscured tokens. Includes status, message, request details and request ID.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/MIGRATION.md#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 404,\n  \"statusText\": \"Not Found\",\n  \"message\": \"datamessage\",\n  \"details\": \"errordetails\",\n  \"request\": {\n    \"url\": \"requesturl\",\n    \"headers\": {\n      \"Authorization\": \"Bearer ...token\"\n    }\n  },\n  \"requestId\": \"requestid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Contentful in Modern JavaScript Environments\nDESCRIPTION: Example of importing the Contentful library in an environment that supports ECMAScript Modules (ESM).\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as contentful from 'contentful'\n```\n\n----------------------------------------\n\nTITLE: Importing Contentful SDK using ES6 Import Syntax\nDESCRIPTION: Demonstrates two different ways to import the Contentful SDK using ES6 import syntax. The first example shows named import, while the second shows importing the entire module.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/ADVANCED.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from \"contentful\";\nconst client = createClient({...});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as contentful from \"contentful\";\nconst client = contentful.createClient({...});\n```\n\n----------------------------------------\n\nTITLE: Importing Contentful Browser Client\nDESCRIPTION: Example of importing the browser version of the Contentful client for non-Node environments like React Native.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createClient } = require('contentful/dist/contentful.browser.min.js')\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack 5 Fallbacks for Contentful.js v11.x\nDESCRIPTION: Configuration needed for Webpack 5 to properly bundle contentful.js for browser environments by setting fallbacks for Node.js core modules.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/MIGRATION.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  resolve: {\n    fallback: {\n      os: false,\n      zlib: false,\n      tty: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Contentful.js v11.x\nDESCRIPTION: Configuration needed for Rollup to properly bundle contentful.js for browser environments by setting the appropriate node resolution options.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/MIGRATION.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnodeResolve({ browser: true, preferBuiltins: false })\n```\n\n----------------------------------------\n\nTITLE: Importing Contentful in Legacy JavaScript Environments\nDESCRIPTION: Examples of importing the Contentful library in environments that use CommonJS require syntax instead of ESM imports.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentful = require('contentful')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentful = require('contentful/dist/contentful.cjs')\n```\n\n----------------------------------------\n\nTITLE: Including Contentful via CDN in HTML\nDESCRIPTION: HTML script tags for loading the Contentful library directly in the browser via CDN, with examples for latest and specific versions.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/contentful@latest/dist/contentful.browser.min.js\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/contentful@9.0.1/dist/contentful.browser.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Enforcing Browser Version in React Native/SSR\nDESCRIPTION: Shows how to explicitly require the browser version of the Contentful SDK for React Native or Server Side Rendering implementations, which may be necessary depending on the implementation.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/ADVANCED.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentful = require('contentful')\n// will become the following to enforce the browser version\nconst contentful = require('contentful/dist/contentful.browser.min.js')\n```\n\n----------------------------------------\n\nTITLE: Running Clean and Build Commands for Contentful.js\nDESCRIPTION: Various npm scripts for cleaning built files, building development and production versions, and generating type declarations for the Contentful.js SDK.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run clean\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:prod\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:types\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Contentful.js\nDESCRIPTION: Commands for running different types of tests for the Contentful.js SDK, including unit tests, integration tests, type checking, and demo applications for both Node.js and browser environments.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:unit\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:integration\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test:types\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: shell\nCODE:\n```\ntest:demo-node\n```\n\nLANGUAGE: shell\nCODE:\n```\ntest:demo-browser\n```\n\nLANGUAGE: shell\nCODE:\n```\ntest:demo-projects\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Contentful.js\nDESCRIPTION: Commands for building, watching, and publishing documentation for the Contentful.js SDK using TypeDoc.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run docs:watch\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run docs:build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run docs:publish\n```\n\n----------------------------------------\n\nTITLE: Browser Runtime Support Script\nDESCRIPTION: Script tag for including Regenerator Runtime support in legacy browsers, required for compatibility with older browsers when using the legacy bundle.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/MIGRATION.md#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/regenerator-runtime@latest/runtime.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests for Contentful.js Browser Demo\nDESCRIPTION: This shell command installs the necessary dependencies and runs the test for the browser demo application. It's used to verify if the build bundles can be correctly accessed by a client.\nSOURCE: https://github.com/contentful/contentful.js/blob/master/test/output-integration/browser/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install && npm run test\n```"
  }
]