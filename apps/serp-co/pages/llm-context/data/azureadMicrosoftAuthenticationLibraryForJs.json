[
  {
    "owner": "azuread",
    "repo": "microsoft-authentication-library-for-js",
    "content": "TITLE: Token Acquisition with Fallback to Interactive Authentication in MSAL.js\nDESCRIPTION: This snippet demonstrates a complete token acquisition flow using MSAL.js. It first attempts to silently acquire tokens, then falls back to interactive popup authentication if silent acquisition fails, and finally uses redirect flow if popup fails. It also shows how to configure cache lookup policy.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/token-lifetimes.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar username = \"test@contoso.com\";\nvar currentAccount = msalInstance.getAccountByUsername(username);\nvar silentRequest = {\n    scopes: [\"Mail.Read\"],\n    account: currentAccount,\n    forceRefresh: false,\n    cacheLookupPolicy: CacheLookupPolicy.Default // will default to CacheLookupPolicy.Default if omitted\n};\n\nvar request = {\n    scopes: [\"Mail.Read\"],\n    loginHint: currentAccount.username // For v1 endpoints, use upn from idToken claims\n};\n\nconst tokenResponse = await msalInstance.acquireTokenSilent(silentRequest).catch(async (error) => {\n    if (error instanceof InteractionRequiredAuthError) {\n        // fallback to interaction when silent call fails\n        return await msalInstance.acquireTokenPopup(request).catch(error => {\n            if (error instanceof InteractionRequiredAuthError) {\n                // fallback to interaction when silent call fails\n                return msalInstance.acquireTokenRedirect(request)\n            }\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Angular using Factory Providers\nDESCRIPTION: Example of configuring MSAL Angular using factory providers, which provides more flexibility by separating the configuration into distinct factory functions for the MSAL instance, interceptor, and guard.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MsalModule, MsalService, MsalInterceptor, MsalInterceptorConfiguration, MsalGuard, MsalGuardConfiguration, MsalBroadcastService, MsalRedirectComponent } from \"@azure/msal-angular\";\nimport { IPublicClientApplication, PublicClientApplication, InteractionType, BrowserCacheLocation } from \"@azure/msal-browser\";\n\nexport function MSALInstanceFactory(): IPublicClientApplication {\n  return new PublicClientApplication({\n    auth: {\n      clientId: \"b5c2e510-4a17-4feb-b219-e55aa5b74144\",\n      redirectUri: \"http://localhost:4200\",\n      postLogoutRedirectUri: \"http://localhost:4200\",\n    },\n    cache: {\n      cacheLocation: BrowserCacheLocation.LocalStorage,\n    },\n  });\n}\n\nexport function MSALInterceptorConfigFactory(): MsalInterceptorConfiguration {\n  const protectedResourceMap = new Map<string, Array<string>>();\n  protectedResourceMap.set(\"https://graph.microsoft.com/v1.0/me\", [\"user.read\"]);\n\n  return {\n    interactionType: InteractionType.Redirect,\n    protectedResourceMap,\n  };\n}\n\nexport function MSALGuardConfigFactory(): MsalGuardConfiguration {\n  return {\n    interactionType: InteractionType.Redirect,\n    authRequest: {\n      scopes: [\"user.read\"],\n    },\n    loginFailedRoute: \"./login-failed\",\n  };\n}\n\n@NgModule({\n  imports: [MsalModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: MsalInterceptor,\n      multi: true,\n    },\n    {\n      provide: MSAL_INSTANCE,\n      useFactory: MSALInstanceFactory,\n    },\n    {\n      provide: MSAL_GUARD_CONFIG,\n      useFactory: MSALGuardConfigFactory,\n    },\n    {\n      provide: MSAL_INTERCEPTOR_CONFIG,\n      useFactory: MSALInterceptorConfigFactory,\n    },\n    MsalGuard,\n    MsalBroadcastService,\n    MsalService,\n  ],\n  bootstrap: [AppComponent, MsalRedirectComponent],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Silent Token Acquisition with Redirect Fallback in MSAL.js\nDESCRIPTION: Demonstrates how to acquire tokens silently using MSAL.js with a fallback to redirect authentication when silent acquisition fails. Uses account lookup by username and handles interaction required errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/token-lifetimes.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar username = \"test@contoso.com\";\nvar currentAccount = msalInstance.getAccountByUsername(username);\nvar silentRequest = {\n    scopes: [\"Mail.Read\"],\n    account: currentAccount,\n    forceRefresh: false,\n    cacheLookupPolicy: CacheLookupPolicy.Default // will default to CacheLookupPolicy.Default if omitted\n};\n\nvar request = {\n    scopes: [\"Mail.Read\"],\n    loginHint: currentAccount.username // For v1 endpoints, use upn from idToken claims\n};\n\nconst tokenResponse = await msalInstance.acquireTokenSilent(silentRequest).catch(error => {\n    if (error instanceof InteractionRequiredAuthError) {\n        // fallback to interaction when silent call fails\n        return msalInstance.acquireTokenRedirect(request)\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Acquiring Token in React Component using useMsal Hook\nDESCRIPTION: Demonstrates token acquisition within a React functional component using MSAL hooks, retrieving an access token silently and calling a Microsoft Graph API\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useEffect } from \"react\"\nimport { useMsal, useAccount } from \"@azure/msal-react\";\n\nexport function App() {\n    const { instance, accounts, inProgress } = useMsal();\n    const account = useAccount(accounts[0] || {});\n    const [apiData, setApiData] = useState(null);\n\n    useEffect(() => {\n        if (account) {\n            instance.acquireTokenSilent({\n                scopes: [\"User.Read\"],\n                account: account\n            }).then((response) => {\n                if(response) {\n                    callMsGraph(response.accessToken).then((result) => setApiData(result));\n                }\n            });\n        }\n    }, [account, instance]);\n\n    if (accounts.length > 0) {\n        return (\n            <>\n                <span>There are currently {accounts.length} users signed in!</span>\n                {apiData && (<span>Data retreived from API: {JSON.stringify(apiData)}</span>)}\n            </>\n        );\n    } else if (inProgress === \"login\") {\n        return <span>Login is currently in progress!</span>\n    } else {\n        return <span>There are currently no users signed in!</span>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL React Authentication Provider\nDESCRIPTION: Example of initializing the new @azure/msal-react provider using PublicClientApplication and MsalProvider component. Shows how to set up the React Context API for authentication state management.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { MsalProvider } from \"@azure/msal-react\";\n\nconst pca = new PublicClientApplication(config);\n\nfunction App() {\n    return (\n        <MsalProvider instance={pca}>\n            <YourAppComponents />\n        </MsalProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Access Token in API Request Headers\nDESCRIPTION: Shows how to use an acquired access token in an API request by adding it to the Authorization header as a bearer token. Example demonstrates making a request to Microsoft Graph API.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/acquire-token.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar headers = new Headers();\nvar bearer = \"Bearer \" + tokenResponse.accessToken;\nheaders.append(\"Authorization\", bearer);\nvar options = {\n        method: \"GET\",\n        headers: headers\n};\nvar graphEndpoint = \"https://graph.microsoft.com/v1.0/me\";\n\nfetch(graphEndpoint, options)\n    .then(resp => {\n        //do something with response\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL with Common Tenant Authority\nDESCRIPTION: Configuration for multi-tenant applications using the common tenant authority. This is the default setup for applications allowing personal accounts.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/initialize-public-client-application.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n        authority: \"https://login.microsoftonline.com/common/\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Silently Acquiring PoP Tokens with acquireTokenSilent in MSAL.js\nDESCRIPTION: Complete example of silently acquiring a Proof-of-Possession token with fallback to interactive acquisition. This pattern is useful for implementing token refresh logic that prioritizes silent acquisition but handles interaction when needed.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/access-token-proof-of-possession.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst silentPopTokenRequest = {\n    scopes: [\"User.Read\"],\n    authenticationScheme: msal.AuthenticationScheme.POP, // Default is \"BEARER\"\n    resourceRequestMethod: \"POST\",\n    resourceRequestUri: \"YOUR_RESOURCE_ENDPOINT\",\n    shrClaims: \"{\\\"shrClaim1\\\": \\\"claimValue\\\"}\",\n    shrNonce: \"NONCE_ACQUIRED_FROM_RESOURCE_SERVER\"\n}\n\n// Try to acquire token silently\nconst { accessToken } = await myMSALObj.acquireTokenSilent(silentPopTokenRequest).catch(async (error) => {\n        console.log(\"Silent token acquisition failed.\");\n        if (error instanceof msal.InteractionRequiredAuthError) {\n            // Fallback to interaction if silent call fails\n            console.log(\"Acquiring token using redirect\");\n            myMSALObj.acquireTokenRedirect(silentPopTokenRequest);\n        } else {\n            console.error(error);\n        }\n    });\n\n// Once a Pop Token has been acquired, it can be added on the authorization header of a resource request\nconst headers = new Headers();\nconst authHeader = `PoP ${accessToken}`;\n\nheaders.append(\"Authorization\", authHeader);\n\nconst options = {\n    method: popTokenRequest.resourceRequestMethod,\n    headers: headers\n};\n\n// After the request has been built and the POP access token has bee appended, the request can be executed using an API like \"fetch\"\nfetch(endpoint, options)\n    .then(response => response.json())\n    .then(response => callback(response, endpoint))\n    .catch(error => console.log(error));\n});\n```\n\n----------------------------------------\n\nTITLE: Using useIsAuthenticated Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useIsAuthenticated hook to determine the user's authentication status and conditionally render content.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useIsAuthenticated } from \"@azure/msal-react\";\n\nexport function App() {\n    const isAuthenticated = useIsAuthenticated();\n\n    return (\n        <React.Fragment>\n            <p>Anyone can see this paragraph.</p>\n            {isAuthenticated && (\n                <p>At least one account is signed in!</p>\n            )}\n            {!isAuthenticated && (\n                <p>No users are signed in!</p>\n            )}\n        </React.Fragment>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Modern Component Protection with MSAL React\nDESCRIPTION: Demonstrates the new component protection patterns using @azure/msal-react, including AuthenticatedTemplate, UnauthenticatedTemplate, and MsalAuthenticationTemplate components.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication, InteractionType } from \"@azure/msal-browser\";\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, MsalAuthenticationTemplate } from \"@azure/msal-react\";\n\nconst pca = new PublicClientApplication(config);\n\nfunction App() {\n    return (\n        <MsalProvider instance={pca}>\n            <AuthenticatedTemplate>\n                <span>Only authenticated users can see me.</span>\n            </AuthenticatedTemplate>\n            <UnauthenticatedTemplate>\n                <span>Only unauthenticated users can see me.</span>\n            </UnauthenticatedTemplate>\n            <MsalAuthenticationTemplate interactionType={InteractionType.Popup} authenticationRequest={request}>\n                <span>Only authenticated users can see me. Unauthenticated users will get a popup asking them to login first.</span>\n            </MsalAuthenticationTemplate>\n        </MsalProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Authentication in JavaScript\nDESCRIPTION: This JavaScript object defines the configuration for MSAL authentication including clientId, authority, and clientSecret. These values are required to authenticate the application against Azure Active Directory and acquire tokens. The clientId, authority, and clientSecret need to be replaced with actual values from your Azure app registration. The object is critical for MSAL to function and must be configured before using the library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_INFO\",\n        clientSecret: \"ENTER_CLIENT_SECRET\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL ConfidentialClientApplication with Authentication Options\nDESCRIPTION: Demonstrates how to initialize MSAL Node.js ConfidentialClientApplication with different authentication methods including client secrets, certificates, and client assertions. Uses environment variables for secure credential storage.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/initialize-confidential-client-application.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as msal from \"@azure/msal-node\";\nimport \"dotenv/config\"; // process.env now has the values defined in a .env file\n\nconst clientAssertionCallback: msal.ClientAssertionCallback = async (\n    config: msal.ClientAssertionConfig\n): Promise<string> => {\n    // network request that uses config.clientId and (optionally) config.tokenEndpoint\n    const result: Promise<string> = await Promise.resolve(\n        \"network request which gets assertion\"\n    );\n    return result;\n};\n\nconst clientConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n        authority: \"your_authority\",\n        clientSecret: process.env.clientSecret, // OR\n        clientCertificate: {\n            thumbprintSha256: process.env.thumbprint,\n            privateKey: process.env.privateKey,\n        }, // OR\n        clientAssertion: clientAssertionCallback, // or a predetermined clientAssertion string\n    },\n};\nconst cca = new msal.ConfidentialClientApplication(clientConfig);\n```\n\n----------------------------------------\n\nTITLE: Using useMsal Hook for Authentication in React\nDESCRIPTION: This example shows how to use the useMsal hook to access the MSAL instance, account information, and login status to manage user authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useMsal } from \"@azure/msal-react\";\n\nexport function App() {\n    const { instance, accounts, inProgress } = useMsal();\n\n    if (accounts.length > 0) {\n        return <span>There are currently {accounts.length} users signed in!</span>\n    } else if (inProgress === \"login\") {\n        return <span>Login is currently in progress!</span>\n    } else {\n        return (\n            <>\n                <span>There are currently no users signed in!</span>\n                <button onClick={() => instance.loginPopup()}>Login</button>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Config Options in Markdown\nDESCRIPTION: This snippet outlines the configuration options for the MSAL.js logger, including the loggerCallback function and PII logging settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Option              | Description                                                             | Format                                                                                      | Default Value                          |\n| ------------------- | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | -------------------------------------- |\n| `loggerCallback`    | Callback function which handles the logging of MSAL statements.         | Function - `loggerCallback: (level: LogLevel, message: string, containsPii: boolean): void` | See [above](#using-the-config-object). |\n| `piiLoggingEnabled` | If true, personally identifiable information (PII) is included in logs. | boolean                                                                                     | `false`                                |\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Response and Account Management in MSAL Browser\nDESCRIPTION: Example showing how to handle authentication response and manage accounts, including scenarios for no cached accounts, multiple accounts, and single account scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/accounts.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet homeAccountId = null; // Initialize global accountId (can also be localAccountId or username) used for account lookup later, ideally stored in app state\n\n// This callback is passed into `acquireTokenPopup` and `acquireTokenRedirect` to handle the interactive auth response\nfunction handleResponse(resp) {\n    if (resp !== null) {\n        homeAccountId = resp.account.homeAccountId; // alternatively: resp.account.homeAccountId or resp.account.username\n    } else {\n        const currentAccounts = myMSALObj.getAllAccounts();\n        if (currentAccounts.length < 1) { // No cached accounts\n            return;\n        } else if (currentAccounts.length > 1) { // Multiple account scenario\n            // Add account selection code here\n            homeAccountId = ...\n        } else if (currentAccounts.length === 1) {\n            homeAccountId = currentAccounts[0].homeAccountId; // Single account scenario\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Persistence Layer with PersistenceCreator in JavaScript\nDESCRIPTION: Demonstrates how to create a persistence layer using the PersistenceCreator API, which selects the appropriate persistence method based on the platform/OS. It also shows how to initialize an MSAL PublicClientApplication with the created persistence object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/msal-node-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PublicClientApplication } = require(\"@azure/msal-node\");\nconst {\n  DataProtectionScope,\n  PersistenceCreator,\n  PersistenceCachePlugin,\n} = require(\"@azure/msal-node-extensions\");\n\nconst persistence = await PersistenceCreator.createPersistence({\n                cachePath: \"path/to/cache/file.json\",\n                dataProtectionScope: DataProtectionScope.CurrentUser,\n                serviceName: \"test-msal-electron-service\",\n                accountName: \"test-msal-electron-account\",\n                usePlaintextFileOnLinux: false,\n          });\n// Use the persistence object to initialize an MSAL PublicClientApplication with cachePlugin\nconst pca = new PublicClientApplication({\n                auth: {\n                        clientId: \"CLIENT_ID_HERE\",\n                    },\n                cache: {\n                        cachePlugin: new PersistenceCachePlugin(persistence);\n                    },\n                });\n```\n\n----------------------------------------\n\nTITLE: Using Proof-of-Possession (PoP) Access Token with MSAL.js in TypeScript\nDESCRIPTION: Example showing how to acquire a Proof-of-Possession token using MSAL and append it to an HTTP request's Authorization header. This demonstrates the enhanced security token acquisition flow with binding to the browser.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/access-token-proof-of-possession.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using the POP scheme (default), acquireTokenRedirect returns an AuthenticationResult object containing the Signed HTTP Request (PoP Token)\nconst { accessToken } = await myMSALObj.acquireTokenRedirect(popTokenRequest);\n\n// The SHR is appended to the Authorization header\nconst headers = new Headers();\nconst authHeader = `PoP ${accessToken}`; // The PoP label is used in this header\nheaders.append(\"Authorization\", authHeader);\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL.js for Azure AD B2C in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure MSAL.js for use with Azure AD B2C. It includes settings for authentication, API scopes, and login/token requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/working-with-b2c.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n  auth: {\n    clientId: \"<your-clientID>\",\n    authority: \"https://<your-tenant>.b2clogin.com/<your-tenant>.onmicrosoft.com/<your-policyID>\",\n    knownAuthorities: [\"<your-tenant>.b2clogin.com\"] // array of URIs that are known to be valid\n  }\n}\n\nconst apiConfig = {\n  b2cScopes: [\"https://<your-tenant>.onmicrosoft.com/<your-api>/<your-scope>\"],\n  webApiUri: \"<your-api-uri>\" // e.g. \"https://fabrikamb2chello.azurewebsites.net/hello\"\n};\n\nconst loginRequest = {\n  scopes: [ \"openid\", \"offline_access\" ]\n}\n\nconst tokenRequest = {\n  scopes: apiConfig.b2cScopes // e.g. \"https://<your-tenant>.onmicrosoft.com/<your-api>/<your-scope>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic MSAL Configuration using platformBrowserDynamic in main.ts\nDESCRIPTION: Example of dynamically configuring MSAL Angular in main.ts using platformBrowserDynamic. This approach fetches configuration from a JSON file and uses it to bootstrap the application with dynamic MSAL settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enableProdMode } from \"@angular/core\";\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\nimport { AppModule } from \"./app/app.module\";\nimport { environment } from \"./environments/environment\";\nimport { MSAL_INSTANCE, MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"@azure/msal-angular\";\nimport { PublicClientApplication, Configuration } from \"@azure/msal-browser\";\n\nif (environment.production) {\n  enableProdMode();\n}\n\nfunction loggerCallback(logLevel: LogLevel, message: string) {\n  console.log(\"MSAL Angular: \", message);\n}\n\nfetch(\"/assets/configuration.json\")\n  .then((response) => response.json())\n  .then((json) => {\n    platformBrowserDynamic([\n      {\n        provide: MSAL_INSTANCE,\n        useValue: new PublicClientApplication({\n          auth: json.msal.auth,\n          cache: json.msal.cache,\n          system: {\n            loggerOptions: {\n              loggerCallback,\n              logLevel: LogLevel.Info,\n              piiLoggingEnabled: false,\n            },\n          },\n        }),\n      },\n      {\n        provide: MSAL_GUARD_CONFIG,\n        useValue: {\n          interactionType: json.guard.interactionType,\n          authRequest: json.guard.authRequest,\n          loginFailedRoute: json.guard.loginFailedRoute,\n        } as MsalGuardConfiguration,\n      },\n      {\n        provide: MSAL_INTERCEPTOR_CONFIG,\n        useValue: {\n          interactionType: json.interceptor.interactionType,\n          protectedResourceMap: new Map(json.interceptor.protectedResourceMap),\n        } as MsalInterceptorConfiguration,\n      },\n    ])\n      .bootstrapModule(AppModule)\n      .catch((err) => console.error(err));\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Front-channel Logout in TypeScript\nDESCRIPTION: Complete implementation of front-channel logout using MSAL.js. This example configures the MSAL instance to allow redirects in iframes and automatically triggers logout on page load while preventing navigation after local logout.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/logout.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst msal = new PublicClientApplication({\n    auth: {\n        clientId: \"my-client-id\"\n    },\n    system: {\n        allowRedirectInIframe: true\n    }\n})\n\n// Automatically on page load\nmsal.logoutRedirect({\n    onRedirectNavigate: () => {\n        // Return false to stop navigation after local logout\n        return false;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL for Angular Apps with TypeScript\nDESCRIPTION: This snippet sets up an Angular application configuration that integrates Microsoft Authentication Library (MSAL) for authentication, including route protection and HTTP interceptors for handling authentication tokens. It includes necessary imports from Angular core and MSAL, along with configuration functions for the MSAL instance, interceptor, and guard. The application is prepared to handle user authentication within the routes specified.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { ApplicationConfig, importProvidersFrom } from \"@angular/core\";\nimport { provideRouter } from \"@angular/router\";\nimport { routes } from \"./app.routes\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { provideHttpClient, withInterceptorsFromDi, HTTP_INTERCEPTORS, withFetch, withInterceptors } from \"@angular/common/http\";\nimport { provideNoopAnimations } from \"@angular/platform-browser/animations\";\nimport { IPublicClientApplication, PublicClientApplication, InteractionType, BrowserCacheLocation, LogLevel } from \"@azure/msal-browser\";\nimport { MsalInterceptor, MSAL_INSTANCE, MsalInterceptorConfiguration, MsalGuardConfiguration, MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG, MsalService, MsalGuard, MsalBroadcastService } from \"@azure/msal-angular\";\n\nexport function loggerCallback(logLevel: LogLevel, message: string) {\n  console.log(message);\n}\n\nexport function MSALInstanceFactory(): IPublicClientApplication {\n  return new PublicClientApplication({\n    auth: {\n      clientId: \"clientid\",\n      authority: \"https://login.microsoftonline.com/common/\",\n      redirectUri: \"/\",\n      postLogoutRedirectUri: \"/\",\n    },\n    cache: {\n      cacheLocation: BrowserCacheLocation.LocalStorage,\n    },\n    system: {\n      allowPlatformBroker: false, // Disables WAM Broker\n      loggerOptions: {\n        loggerCallback,\n        logLevel: LogLevel.Info,\n        piiLoggingEnabled: false,\n      },\n    },\n  });\n}\n\nexport function MSALInterceptorConfigFactory(): MsalInterceptorConfiguration {\n  const protectedResourceMap = new Map<string, Array<string>>();\n  protectedResourceMap.set(\"https://graph.microsoft.com/v1.0/me\", [\"user.read\"]);\n\n  return {\n    interactionType: InteractionType.Redirect,\n    protectedResourceMap,\n  };\n}\n\nexport function MSALGuardConfigFactory(): MsalGuardConfiguration {\n  return {\n    interactionType: InteractionType.Redirect,\n    authRequest: {\n      scopes: [\"user.read\"],\n    },\n    loginFailedRoute: \"/login-failed\",\n  };\n}\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter(routes),\n    importProvidersFrom(BrowserModule),\n    provideNoopAnimations(),\n    provideHttpClient(withInterceptorsFromDi(), withFetch()),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: MsalInterceptor,\n      multi: true,\n    },\n    {\n      provide: MSAL_INSTANCE,\n      useFactory: MSALInstanceFactory,\n    },\n    {\n      provide: MSAL_GUARD_CONFIG,\n      useFactory: MSALGuardConfigFactory,\n    },\n    {\n      provide: MSAL_INTERCEPTOR_CONFIG,\n      useFactory: MSALInterceptorConfigFactory,\n    },\n    MsalService,\n    MsalGuard,\n    MsalBroadcastService,\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using AuthenticatedTemplate and UnauthenticatedTemplate in React\nDESCRIPTION: This example shows how to use AuthenticatedTemplate and UnauthenticatedTemplate components to conditionally render content based on the user's authentication status.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { AuthenticatedTemplate, UnauthenticatedTemplate } from \"@azure/msal-react\";\n\nexport function App() {\n    return (\n        <React.Fragment>\n            <p>Anyone can see this paragraph.</p>\n            <AuthenticatedTemplate>\n                <p>At least one account is signed in!</p>\n            </AuthenticatedTemplate>\n            <UnauthenticatedTemplate>\n                <p>No users are signed in!</p>\n            </UnauthenticatedTemplate>\n        </React.Fragment>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Silent Authentication with useMsalAuthentication Hook in React\nDESCRIPTION: Shows how to use the useMsalAuthentication hook for silent authentication, with fallback to interactive login. It demonstrates error handling and conditional rendering based on authentication status.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect } from 'react';\n\nimport { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal, useMsalAuthentication } from \"@azure/msal-react\";\nimport { InteractionType, InteractionRequiredAuthError } from '@azure/msal-browser';\n\nfunction App() {\n    const request = {\n        loginHint: \"name@example.com\",\n        scopes: [\"User.Read\"]\n    }\n    const { login, result, error } = useMsalAuthentication(InteractionType.Silent, request);\n\n    useEffect(() => {\n        if (error instanceof InteractionRequiredAuthError) {\n            login(InteractionType.Popup, request);\n        }\n    }, [error]);\n\n    const { accounts } = useMsal();\n\n    return (\n        <React.Fragment>\n            <p>Anyone can see this paragraph.</p>\n            <AuthenticatedTemplate>\n                <p>Signed in as: {accounts[0]?.username}</p>\n            </AuthenticatedTemplate>\n            <UnauthenticatedTemplate>\n                <p>No users are signed in!</p>\n            </UnauthenticatedTemplate>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Acquisition in React Component\nDESCRIPTION: Example showing how to acquire an access token silently after redirect authentication. Uses useMsal and useIsAuthenticated hooks to check authentication state and request tokens for API calls.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/FAQ.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst GetDataFromAPI = () => {\n    const { instance, accounts, inProgress } = useMsal();\n    const isAuthenticated = useIsAuthenticated();\n    const [graphData, setGraphData] = useState(null);\n\n    useEffect(() => {\n        if (isAuthenticated && inProgress === InteractionStatus.None) {\n            instance.acquireTokenSilent({\n                account: accounts[0],\n                scopes: [\"User.Read\"]\n            }).then(response => {\n                callAPI(response.accessToken);\n            })\n        }\n    }, [inProgress, isAuthenticated, accounts, instance]);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SSO with Query Strings in Iframed Applications using MSAL\nDESCRIPTION: This snippet demonstrates how to initialize MSAL in an iframed app and implement single sign-on by retrieving session ID from URL query parameters. It configures MSAL with client credentials and uses localStorage for caching, then attempts silent authentication using the session ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/iframe-usage.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the main myMSALObj instance\n// configuration parameters are located at authConfig.js\nconst myMSALObj = new msal.PublicClientApplication({\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_ID\",\n        redirectUri: \"/redirect\", // set to a blank page for handling auth code response via popups\n    },\n    cache: {\n        cacheLocation: \"localStorage\", // set your cache location to local storage\n    },\n});\n\nwindow.onload = () => {\n    \n    const urlParams = new URLSearchParams(window.location.search);\n    const sid = urlParams.get(\"sid\");\n\n    // attempt SSO\n    myMSALObj.ssoSilent({\n        sid: sid\n    }).then((response) => {\n        // do something with response\n    }).catch(error => {\n        // handle errors\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Result Type Definition in MSAL.js (TypeScript)\nDESCRIPTION: Defines the AuthenticationResult type that contains all the information returned after a successful authentication operation, including tokens, account info, expiration times, and correlation IDs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AuthenticationResult = {\n    authority: string;\n    uniqueId: string;\n    tenantId: string;\n    scopes: Array<string>;\n    account: AccountInfo | null;\n    idToken: string;\n    idTokenClaims: object;\n    accessToken: string;\n    fromCache: boolean;\n    expiresOn: Date | null;\n    extExpiresOn?: Date;\n    refreshOn?: Date;\n    tokenType: string;\n    correlationId: string;\n    requestId?: string;\n    state?: string;\n    familyId?: string;\n    cloudGraphHostName?: string;\n    msGraphHost?: string;\n    code?: string;\n    fromNativeBroker?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Interceptor in Angular Module\nDESCRIPTION: Example of setting up MSAL Interceptor in the app.module.ts file, including necessary imports, module configuration, and provider registration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-interceptor.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from \"@angular/common/http\";\nimport { AppComponent } from './app.component';\nimport { MsalModule, MsalRedirectComponent, MsalGuard, MsalInterceptor } from '@azure/msal-angular';\nimport { InteractionType, PublicClientApplication } from '@azure/msal-browser';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n    ],\n    imports: [\n        MsalModule.forRoot( new PublicClientApplication({\n            // MSAL Configuration\n        }), {\n            // MSAL Guard Configuration\n        }, {\n            // MSAL Interceptor Configurations\n            interactionType: InteractionType.Redirect,\n            protectedResourceMap: new Map([ \n                ['Enter_the_Graph_Endpoint_Here/v1.0/me', ['user.read']]\n            ])\n        })\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: MsalInterceptor,\n            multi: true\n        },\n        MsalGuard\n    ],\n    bootstrap: [AppComponent, MsalRedirectComponent]\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Configuring MsalInterceptor for Token Acquisition in Angular\nDESCRIPTION: This snippet demonstrates how to configure MsalInterceptor in the app.module.ts file to automatically obtain and add tokens to HTTP requests for specified API endpoints.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/initialization.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { MsalModule, MsalService, MsalGuard, MsalInterceptor, MsalBroadcastService, MsalRedirectComponent } from \"@azure/msal-angular\";\nimport { PublicClientApplication, InteractionType, BrowserCacheLocation } from \"@azure/msal-browser\";\n\n@NgModule({\n    imports: [\n        MsalModule.forRoot( new PublicClientApplication({ // MSAL Configuration\n            auth: {\n                clientId: \"Your client ID\",\n                authority: \"Your authority\",\n                redirectUri: \"Your redirect Uri\",\n            },\n            cache: {\n                cacheLocation : BrowserCacheLocation.LocalStorage,\n                storeAuthStateInCookie: true, // set to true for IE 11\n            },\n            system: {\n                loggerOptions: {\n                    loggerCallback: () => {},\n                    piiLoggingEnabled: false\n                }\n            }\n        }), {\n            interactionType: InteractionType.Redirect, // MSAL Guard Configuration\n        }, {\n            interactionType: InteractionType.Redirect, // MSAL Interceptor Configuration\n            protectedResourceMap: new Map([\n                ['https://graph.microsoft.com/v1.0/me', ['user.read']],\n                ['https://api.myapplication.com/users/*', ['customscope.read']],\n                ['http://localhost:4200/about/', null] \n            ])\n        })\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: MsalInterceptor,\n            multi: true\n        },\n        MsalService,\n        MsalGuard,\n        MsalBroadcastService\n    ],\n    bootstrap: [AppComponent, MsalRedirectComponent]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token Using Popup Flow in MSAL.js\nDESCRIPTION: Demonstrates acquiring an access token using silent and popup flows. First attempts silent token acquisition, falling back to popup interaction if needed. Handles InteractionRequiredAuthError.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/acquire-token.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar request = {\n    scopes: [\"User.Read\"],\n};\n\nmsalInstance.acquireTokenSilent(request).then(tokenResponse => {\n    // Do something with the tokenResponse\n}).catch(async (error) => {\n    if (error instanceof InteractionRequiredAuthError) {\n        // fallback to interaction when silent call fails\n        return msalInstance.acquireTokenPopup(request);\n    }\n\n    // handle other errors\n})\n```\n\n----------------------------------------\n\nTITLE: MSAL Authority Configuration\nDESCRIPTION: Configures MSAL with a specific authority for multi-tenant or single-tenant scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n        authority: \"https://login.microsoftonline.com/common/\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserPerformanceClient in MSAL.js\nDESCRIPTION: This snippet demonstrates how to set up a telemetry performance client in the MSAL.js configuration. It creates a PublicClientApplication instance with a BrowserPerformanceClient to enable performance measurement.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/performance.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication, BrowserPerformanceClient } from \"@azure/msal-browser\";\n\nconst msalConfig = {\n    auth: {\n        ...\n    },\n    cache: {\n        ...\n    },\n    system: {\n        ...\n    }\n}\n\nconst msalInstance = new PublicClientApplication({\n    ...msalConfig,\n    telemetry: {\n        client: new BrowserPerformanceClient(msalConfig)\n    }\n});\nmsalInstance.initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL.js PublicClientApplication with Configuration Object\nDESCRIPTION: A complete example of the configuration object that can be passed to the PublicClientApplication constructor. It demonstrates all available settings for auth, cache, system, and telemetry categories. The clientId is the only required parameter.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"enter_client_id_here\",\n        authority: \"https://login.microsoftonline.com/common\",\n        knownAuthorities: [],\n        cloudDiscoveryMetadata: \"\",\n        redirectUri: \"enter_redirect_uri_here\",\n        postLogoutRedirectUri: \"enter_postlogout_uri_here\",\n        navigateToLoginRequestUrl: true,\n        clientCapabilities: [\"CP1\"],\n        protocolMode: \"AAD\"\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\",\n        temporaryCacheLocation: \"sessionStorage\",\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        claimsBasedCachingEnabled: true,\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback: (\n                level: LogLevel,\n                message: string,\n                containsPii: boolean\n            ): void => {\n                if (containsPii) {\n                    return;\n                }\n                switch (level) {\n                    case LogLevel.Error:\n                        console.error(message);\n                        return;\n                    case LogLevel.Info:\n                        console.info(message);\n                        return;\n                    case LogLevel.Verbose:\n                        console.debug(message);\n                        return;\n                    case LogLevel.Warning:\n                        console.warn(message);\n                        return;\n                }\n            },\n            piiLoggingEnabled: false,\n        },\n        windowHashTimeout: 60000,\n        iframeHashTimeout: 6000,\n        loadFrameTimeout: 0,\n        asyncPopups: false,\n    },\n    telemetry: {\n        application: {\n            appName: \"My Application\",\n            appVersion: \"1.0.0\",\n        },\n    },\n};\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing MSAL React Components\nDESCRIPTION: This snippet shows the implementation of key MSAL React components such as AuthenticatedTemplate, MsalAuthenticationTemplate, MsalProvider, and UnauthenticatedTemplate. These components are used for rendering content based on authentication status and managing MSAL context.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/apiReview/msal-react.api.md#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function AuthenticatedTemplate({ username, homeAccountId, localAccountId, children, }: AuthenticatedTemplateProps): React_2.ReactElement | null;\n\nexport function MsalAuthenticationTemplate({ interactionType, username, homeAccountId, localAccountId, authenticationRequest, loadingComponent: LoadingComponent, errorComponent: ErrorComponent, children, }: MsalAuthenticationProps): React_2.ReactElement | null;\n\nexport function MsalProvider({ instance, children, }: MsalProviderProps): React_2.ReactElement;\n\nexport function UnauthenticatedTemplate({ username, homeAccountId, localAccountId, children, }: UnauthenticatedTemplateProps): React_2.ReactElement | null;\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL ConfidentialClientApplication with Secure Secret Management in Node.js\nDESCRIPTION: This snippet demonstrates how to use the dotenv package to securely manage secrets, initialize an MSAL ConfidentialClientApplication, and acquire a token using client credentials flow. It includes error handling and logging.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/request.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"dotenv/config\"; // process.env now has the values defined in a .env file\n\nconst config = {\n    auth: {\n        clientId: \"your_client_id_here\",\n        authority: \"your_authority_here\",\n        clientSecret: process.env.clientSecret,\n    },\n};\n\n// Create msal application object\nconst cca = new msal.ConfidentialClientApplication(config);\n\n// With client credentials flows permissions need to be granted in the portal by a tenant administrator.\n// The scope is always in the format \"<resource>/.default\"\nconst clientCredentialRequest = {\n    scopes: [\"https://graph.microsoft.com/.default\"], // replace with your resource\n};\n\ncca.acquireTokenByClientCredential(clientCredentialRequest)\n    .then((response) => {\n        console.log(\"Response: \", response);\n    })\n    .catch((error) => {\n        console.log(JSON.stringify(error));\n    });\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Promise in MSAL.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to handle the redirect promise in MSAL.js. It's crucial to call handleRedirectPromise() before invoking any other MSAL methods to process the authentication response and cache tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/FAQ.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nloginPopup().then((response) => {\n    const uniqueID = response.account.homeAccountId;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring B2C Policy in MSAL.js\nDESCRIPTION: This snippet shows how to specify a B2C policy (user flow) when configuring MSAL.js. It demonstrates setting the policy in the authority URL for both the PublicClientApplication configuration and individual requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/FAQ.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"your-client-id\",\n        authority:\n            \"https://yourApp.b2clogin.com/yourApp.onmicrosoft.com/your_policy\",\n        knownAuthorities: [\"yourApp.b2clogin.com\"],\n    },\n};\nconst pca = new PublicClientApplication(config);\n\n// You can also provide the authority as part of the request object\nconst request = {\n    scopes: [\"openid\"],\n    authority:\n        \"https://yourApp.b2clogin.com/yourApp.onmicrosoft.com/your_policy\",\n};\npca.loginRedirect(request);\n```\n\n----------------------------------------\n\nTITLE: Using logoutRedirect and logoutPopup Methods in MSAL.js\nDESCRIPTION: Basic logout method calls for MSAL that clear the token cache and navigate to the server's logout page. These methods handle both the client-side cache clearing and the server-side session termination.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/logout.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance.logoutRedirect();\nmsalInstance.logoutPopup();\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL JS Logging with PublicClientApplication in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up logging options for MSAL JS using the PublicClientApplication configuration. It shows how to set the log level and define a custom logger callback function to handle different log levels.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/logging.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication, LogLevel } from \"@azure/msal-browser\";\n\nconst msalConfig = {\n    auth: {\n        ...\n    },\n    cache: {\n        ...\n    },\n    system: {\n        loggerOptions: {\n            logLevel: LogLevel.Trace,\n            loggerCallback: (level, message, containsPii) => {\n                if (containsPii) {\n                    return;\n                }\n                switch (level) {\n                    case LogLevel.Error:\n                        console.error(message);\n                        return;\n                    case LogLevel.Info:\n                        console.info(message);\n                        return;\n                    case LogLevel.Verbose:\n                        console.debug(message);\n                        return;\n                    case LogLevel.Warning:\n                        console.warn(message);\n                        return;\n                    default:\n                        console.log(message);\n                        return;\n                }\n            }\n        }\n    },\n\n    ...\n}\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: AccountInfo Object Structure in MSAL.js\nDESCRIPTION: Shows the structure of the AccountInfo object returned by account retrieval methods. Contains identifying information like homeAccountId, environment, tenantId, and username.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // home account identifier for this account object\n    homeAccountId: string;\n    // Entity who issued the token represented as a full host of it (e.g. login.microsoftonline.com)\n    environment: string;\n    // Full tenant or organizational id that this account belongs to\n    tenantId: string;\n    // preferred_username claim of the id_token that represents this account.\n    username: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Standard MSAL Configuration in JavaScript\nDESCRIPTION: Creates a standard PublicClientApplication instance for single-page applications using the createStandardPublicClientApplication function.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as msal from \"@azure/msal-browser\";\n\nconst pca = msal.createStandardPublicClientApplication({\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_ID\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token Outside React Component\nDESCRIPTION: Shows how to acquire an access token directly using PublicClientApplication instance when not within a React component, with proper account handling and error considerations\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\n// This should be the same instance you pass to MsalProvider\nconst msalInstance = new PublicClientApplication(config);\n\nconst acquireAccessToken = async (msalInstance) => {\n    const activeAccount = msalInstance.getActiveAccount(); // This will only return a non-null value if you have logic somewhere else that calls the setActiveAccount API\n    const accounts = msalInstance.getAllAccounts();\n\n    if (!activeAccount && accounts.length === 0) {\n        /*\n        * User is not signed in. Throw error or wait for user to login.\n        * Do not attempt to log a user in outside of the context of MsalProvider\n        */   \n    }\n    const request = {\n        scopes: [\"User.Read\"],\n        account: activeAccount || accounts[0]\n    };\n\n    const authResult = await msalInstance.acquireTokenSilent(request);\n\n    return authResult.accessToken\n};\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Tokens with MSAL.js in Azure AD B2C Authentication\nDESCRIPTION: This function handles access token acquisition using MSAL.js. It first attempts to retrieve a token silently from the cache, and if that fails due to an expired token, it initiates a new authorization code flow. The function supports token refresh and handles interaction required errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/b2c-user-flows/README.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst getToken = async (req, res, next, scopes) => {\n    try {\n        const tokenCache = clientApplication.getTokenCache();\n        const account = await tokenCache.getAccountByHomeId(\n            req.session.account.homeAccountId\n        );\n\n        const silentRequest = {\n            account: account,\n            scopes: scopes,\n        };\n\n        // acquire token silently to be used in resource call\n        const tokenResponse = await clientApplication.acquireTokenSilent(\n            silentRequest\n        );\n        return tokenResponse;\n    } catch (error) {\n        if (error instanceof msal.InteractionRequiredAuthError) {\n            req.session.csrfToken = cryptoProvider.createNewGuid();\n\n            state = cryptoProvider.base64Encode(\n                JSON.stringify({\n                    csrfToken: req.session.csrfToken,\n                    appStage: APP_STAGES.ACQUIRE_TOKEN,\n                })\n            );\n\n            const authCodeUrlRequestParams = {\n                authority:\n                    scenarioConfig.policies.authorities.signUpSignIn.authority,\n                state: state,\n            };\n\n            const authCodeRequestParams = {\n                scopes: scopes,\n            };\n\n            return redirectToAuthCodeUrl(\n                req,\n                res,\n                next,\n                authCodeUrlRequestParams,\n                authCodeRequestParams\n            );\n        }\n\n        next(error);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node with Native Broker Plugin\nDESCRIPTION: This snippet demonstrates how to set up MSAL Node configuration with the NativeBrokerPlugin to enable token brokering. It imports necessary modules and creates a PublicClientApplication instance with the broker configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/brokering.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication, Configuration } from \"@azure/msal-node\";\nimport { NativeBrokerPlugin } from \"@azure/msal-node-extensions\";\n\nconst msalConfig: Configuration = {\n    auth: {\n        clientId: \"your-client-id\",\n    },\n    broker: {\n        nativeBrokerPlugin: new NativeBrokerPlugin(),\n    },\n};\n\nconst pca = new PublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: Using MSAL Authentication in Vue 3 Component\nDESCRIPTION: This snippet demonstrates how to use MSAL authentication in a Vue 3 component. It showcases the usage of composition APIs for authentication and conditional rendering based on authentication state.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/vue3-sample-app/README.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <SignOutButton v-if=\"isAuthenticated\"/>\n    <SignInButton v-else />\n</template>\n\n<script setup lang=\"ts\">\nimport { useIsAuthenticated } from '../composition-api/useIsAuthenticated';\nimport SignInButton from \"./SignInButton.vue\";\nimport SignOutButton from \"./SignOutButton.vue\";\n\nconst isAuthenticated = useIsAuthenticated();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Specific User with MSAL in React\nDESCRIPTION: This code snippet demonstrates how to use the useMsalAuthentication hook to authenticate a specific user in a React application. It sets up account identifiers and authentication request parameters, and uses AuthenticatedTemplate and UnauthenticatedTemplate components for conditional rendering based on the user's authentication state.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useMsalAuthentication } from \"@azure/msal-react\";\nimport { InteractionType } from '@azure/msal-browser';\n\nexport function App() {\n    const accountIdentifiers = {\n        username: \"example-username\"\n    }\n    const request = {\n        loginHint: \"example-username\",\n        scopes: [\"User.Read\"]\n    }\n    const { login, result, error } = useMsalAuthentication(InteractionType.Popup, request, accountIdentifiers);\n\n    return (\n        <React.Fragment>\n            <p>Anyone can see this paragraph.</p>\n            <AuthenticatedTemplate username=\"example-username\">\n                <p>Example user is signed in!</p>\n            </AuthenticatedTemplate>\n            <UnauthenticatedTemplate username=\"example-username\">\n                <p>Example user is not signed in!</p>\n            </UnauthenticatedTemplate>\n        </React.Fragment>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL.js Public Client Application\nDESCRIPTION: This snippet demonstrates the correct way to initialize an MSAL.js Public Client Application and handle the redirect promise. It shows how to properly await the initialize method before calling other MSAL APIs to avoid the uninitialized_public_client_application error.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalInstance = new PublicClientApplication({\n    auth: {\n        clientId: \"your-client-id\",\n    },\n    system: {\n        allowPlatformBroker: true,\n    },\n});\n\nawait msalInstance.initialize();\nawait msalInstance.handleRedirectPromise(); // This will no longer throw this error since initialize completed before this was invoked\nmsalInstance.acquireTokenSilent(); // This will also no longer throw this error\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Angular using MsalModule.forRoot\nDESCRIPTION: Example of configuring MSAL Angular in app.module.ts using the MsalModule.forRoot method. This approach allows setting the MSAL configuration, MsalGuard configuration, and MsalInterceptor configuration in one call.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from \"@angular/core\";\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { AppComponent } from \"./app.component\";\nimport { MsalModule, MsalService, MsalGuard, MsalInterceptor, MsalBroadcastService, MsalRedirectComponent } from \"@azure/msal-angular\";\nimport { PublicClientApplication, InteractionType, BrowserCacheLocation } from \"@azure/msal-browser\";\n\n@NgModule({\n  imports: [\n    MsalModule.forRoot(\n      new PublicClientApplication({\n        // MSAL Configuration\n        auth: {\n          clientId: \"clientid\",\n          authority: \"https://login.microsoftonline.com/common/\",\n          redirectUri: \"http://localhost:4200/\",\n          postLogoutRedirectUri: \"http://localhost:4200/\",\n          navigateToLoginRequestUrl: true,\n        },\n        cache: {\n          cacheLocation: BrowserCacheLocation.LocalStorage,\n          storeAuthStateInCookie: true, // set to true for IE 11\n        },\n        system: {\n          loggerOptions: {\n            loggerCallback: () => {},\n            piiLoggingEnabled: false,\n          },\n        },\n      }),\n      {\n        interactionType: InteractionType.Popup, // MSAL Guard Configuration\n        authRequest: {\n          scopes: [\"user.read\"],\n        },\n        loginFailedRoute: \"/login-failed\",\n      },\n      {\n        interactionType: InteractionType.Redirect, // MSAL Interceptor Configuration\n        protectedResourceMap,\n      }\n    ),\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: MsalInterceptor,\n      multi: true,\n    },\n    MsalGuard,\n  ],\n  bootstrap: [AppComponent, MsalRedirectComponent],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Flow Implementation in MSAL Node\nDESCRIPTION: Demonstrates the two-step authorization code flow process using getAuthCodeUrl() and acquireTokenByCode(). Shows how to get the authorization URL and exchange the code for a token with proper error handling.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/request.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst authCodeUrlParameters = {\n    scopes: [\"sample_scope\"],\n    redirectUri: \"your_redirect_uri\",\n};\n\n// get url to sign user in and consent to scopes needed for application\ncca.getAuthCodeUrl(authCodeUrlParameters)\n    .then((response) => {\n        console.log(response);\n    })\n    .catch((error) => console.log(JSON.stringify(error)));\n\nconst tokenRequest = {\n    code: \"authorization_code\",\n    redirectUri: \"your_redirect_uri\",\n    scopes: [\"sample_scope\"],\n};\n\n// acquire a token by exchanging the code\ncca.acquireTokenByCode(tokenRequest)\n    .then((response) => {\n        console.log(\"\\nResponse: \\n:\", response);\n    })\n    .catch((error) => {\n        console.log(error);\n    });\n```\n\n----------------------------------------\n\nTITLE: Checking Specific User Authentication with useIsAuthenticated Hook in React\nDESCRIPTION: Demonstrates how to use the useIsAuthenticated hook with account identifiers to check if a specific user is signed in. It accepts an accountIdentifiers object with optional parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useIsAuthenticated } from \"@azure/msal-react\";\n\nexport function App() {\n    const accountIdentifiers = {\n        localAccountId: \"example-local-account-identifier\",\n        homeAccountId: \"example-home-account-identifier\",\n        username: \"example-username\"\n    }\n\n    const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n\n    return (\n        <React.Fragment>\n            <p>Anyone can see this paragraph.</p>\n            {isAuthenticated && (\n                <p>User with specified localAccountId is signed in!</p>\n            )}\n            {!isAuthenticated && (\n                <p>User with specified localAccountId is not signed in!</p>\n            )}\n        </React.Fragment>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extra Scopes to Consent in MSAL.js Login Request\nDESCRIPTION: This example demonstrates how to use the extraScopesToConsent option in a login request to pre-consent to additional scopes, and how it affects subsequent token requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst loginRequest = {\n      scopes: [ \"openid\", \"profile\", \"User.Read\" ],\n      extraScopesToConsent: [ \"api://<myCustomApiClientId>/My.Scope\"]\n };\n const tokenRequest = {\n      scopes: [ \"Mail.Read\" ]\n };\n const anotherTokenRequest = {\n      scopes: [ \"api://<myCustomApiClientId>/My.Scope\" ]\n}\n // will return an ID Token and an Access Token with scopes: \"openid\", \"profile\" and \"User.Read\"\n msalInstance.loginPopup(loginRequest);\n // will fail with InteractionRequiredError due to lack of consent for \"Mail.Read\" scope. You should fallback to an interactive method in this case.\n msalInstance.acquireTokenSilent(tokenRequest);\n // will succeed and return an Access Token with scope \"api://<myCustomApiClientId>/My.Scope\"\n msalInstance.acquireTokenSilent(anotherTokenRequest);\n```\n\n----------------------------------------\n\nTITLE: Using useAccount Hook in React with MSAL\nDESCRIPTION: Demonstrates how to use the useAccount hook to retrieve account information for a signed-in user. It accepts an accountIdentifier object and returns the AccountInfo object or null if not signed in.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst accountIdentifier = {\n    localAccountId: \"example-local-account-identifier\",\n    homeAccountId: \"example-home-account-identifier\"\n    username: \"example-username\" // We do not recommend relying only on username\n}\n\nconst accountInfo = useAccount(accountIdentifier);\n```\n\n----------------------------------------\n\nTITLE: Using useMsalAuthentication Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useMsalAuthentication hook to handle user authentication and retrieve login results.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useMsalAuthentication } from \"@azure/msal-react\";\nimport { InteractionType } from '@azure/msal-browser';\n\nexport function App() {\n    const {login, result, error} = useMsalAuthentication(InteractionType.Popup);\n\n    return (\n        <React.Fragment>\n            <p>Anyone can see this paragraph.</p>\n            <AuthenticatedTemplate>\n                <p>At least one account is signed in!</p>\n            </AuthenticatedTemplate>\n            <UnauthenticatedTemplate>\n                <p>No users are signed in!</p>\n            </UnauthenticatedTemplate>\n        </React.Fragment>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Protected Routes with MSAL Guard\nDESCRIPTION: Configuration of Angular routes with MSAL Guard protection. Demonstrates how to protect specific routes using MsalGuard and set up basic navigation structure.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-guard.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { MsalGuard } from '@azure/msal-angular';\n\nconst routes: Routes = [\n    {\n        path: 'profile',\n        component: ProfileComponent,\n        canActivate: [MsalGuard]\n    },\n    {\n        path: '',\n        component: HomeComponent\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n----------------------------------------\n\nTITLE: Implementing MSAL Redirect Component in TypeScript\nDESCRIPTION: Core redirect component implementation that handles MSAL authentication redirects. This component is provided by @azure/msal-angular and should be bootstrapped alongside the main application component.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/redirects.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from \"@angular/core\";\nimport { MsalService } from \"./msal.service.ts\";\n\n@Component({\n  selector: 'app-redirect',\n  template: ''\n})\nexport class MsalRedirectComponent implements OnInit {\n  \n  constructor(private authService: MsalService) { }\n  \n  ngOnInit(): void {    \n      this.authService.handleRedirectObservable().subscribe();\n  }\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Handling in Angular Standalone Component\nDESCRIPTION: This code snippet demonstrates how to set up redirect handling in an Angular application's root component (AppComponent) using MSAL. It imports necessary modules, injects MSAL services, and subscribes to handleRedirectObservable() in the ngOnInit lifecycle hook.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/redirects.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, OnInit, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule} from '@angular/router';\nimport { MsalService, MsalBroadcastService, MSAL_GUARD_CONFIG, MsalGuardConfiguration } from '@azure/msal-angular';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n    standalone: true,\n    imports: [CommonModule, RouterModule]\n})\nexport class AppComponent implements OnInit {\n\n  constructor(\n    @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\n    private authService: MsalService,\n    private msalBroadcastService: MsalBroadcastService\n  ) {}\n\n  ngOnInit(): void {\n    this.authService.handleRedirectObservable().subscribe(); // Subscribing to handleRedirectObservable before any other functions both initializes the application and ensures redirects are handled\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Confidential Client Application Token Acquisition\nDESCRIPTION: Implementation example showing how to optimize token acquisition in confidential client applications by scoping MSAL instances per request and properly initializing the token cache. Includes error handling and cache partitioning.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/performance.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    ConfidentialClientApplication,\n    AuthenticationResult,\n    CryptoProvider,\n    OnBehalfOfRequest\n} from \"@azure/msal-node\";\n\nfunction getMsalInstance(partitionKey: string): ConfidentialClientApplication {\n    return new ConfidentialClientApplication({\n        auth: {\n            clientId: \"ENTER_CLIENT_ID\",\n            authority: \"http://login.microsoftonline.com/ENTER_TENANT_ID\"\n            cloudDiscoveryMetadata: \"PROVIDE_STRINGIFIED_DISCOVERY_METADATA\"\n            authorityMetadata: \"PROVIDE_STRINGIFIED_AUTHORITY_METADATA\"\n        },\n        cache: {\n            cachePlugin: new CustomCachePlugin(\n                this.cacheClientWrapper,\n                partitionKey\n            )\n        }\n    });\n};\n\nasync function getToken(tokenRequest: OnBehalfOfRequest): Promise<AuthenticationResult | null> {\n    const partitionKey = await this.cryptoProvider.hashString(tokenRequest.oboAssertion);\n\n    const cca = getMsalInstance(partitionKey);\n\n    let tokenResponse = null;\n\n    try {\n        await cca.getTokenCache().getAllAccounts(); // required for cache read\n        tokenResponse = await cca.acquireTokenOnBehalfOf(tokenRequest);\n    } catch (error) {\n        throw error;\n    }\n\n    return tokenResponse;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger with MSAL Angular Module Configuration\nDESCRIPTION: This code demonstrates how to enable and configure logging when initializing the MSAL Angular module. It sets up a logger callback function, enables PII logging, and sets the log level to Info when configuring the PublicClientApplication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/logging.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LogLevel, PublicClientApplication } from '@azure/msal-browser';\n\nexport function loggerCallback(logLevel: LogLevel, message: string) {\n    console.log(message);\n}\n\n@NgModule({\n    imports: [ \n        MsalModule.forRoot(new PublicClientApplication({\n            auth: {\n                clientId: 'Your client ID',\n            },\n            system: {\n                loggerOptions: {\n                    loggerCallback,\n                    piiLoggingEnabled: true,\n                    logLevel: LogLevel.Info\n                }\n            }\n        }))\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Accounts with MSAL.js\nDESCRIPTION: Shows how to retrieve information about all currently signed-in users using the getAllAccounts method. Returns an array of AccountInfo objects.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAccounts: AccountInfo[] = msalInstance.getAllAccounts();\n```\n\n----------------------------------------\n\nTITLE: Using MsalAuthenticationTemplate for Component Protection\nDESCRIPTION: This example shows how to use the MsalAuthenticationTemplate component to protect a component and automatically initiate login if the user is not authenticated.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { MsalAuthenticationTemplate } from \"@azure/msal-react\";\nimport { InteractionType } from \"@azure/msal-browser\";\n\nfunction ErrorComponent({error}) {\n    return <p>An Error Occurred: {error}</p>;\n}\n\nfunction LoadingComponent() {\n    return <p>Authentication in progress...</p>;\n}\n\nexport function Example() {\n    const authRequest = {\n        scopes: [\"openid\", \"profile\"]\n    };\n\n    return (\n        // authenticationRequest, errorComponent and loadingComponent props are optional\n        <MsalAuthenticationTemplate \n            interactionType={InteractionType.Popup} \n            authenticationRequest={authRequest} \n            errorComponent={ErrorComponent} \n            loadingComponent={LoadingComponent}\n        >\n            <p>At least one account is signed in!</p>\n        </MsalAuthenticationTemplate>\n      )\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Authentication Flow in MSAL 2.x\nDESCRIPTION: Demonstrates the implementation of redirect-based authentication flow including handling callbacks and token acquisition in MSAL 2.x.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v1-migration.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMSALObj = new msal.PublicClientApplication(msalConfig); \n\n// Register Callbacks for Redirect flow\nmyMSALObj.handleRedirectPromise().then((tokenResponse) => {\n    let accountObj = null;\n    if (tokenResponse !== null) {\n        accountObj = tokenResponse.account;\n        const id_token = tokenResponse.idToken;\n        const access_token = tokenResponse.accessToken;\n    } else {\n        const currentAccounts = myMSALObj.getAllAccounts();\n        if (!currentAccounts || currentAccounts.length === 0) {\n            // No user signed in\n            return;\n        } else if (currentAccounts.length > 1) {\n            // More than one user signed in, find desired user with getAccountByUsername(username)\n        } else {\n            accountObj = currentAccounts[0];\n        }\n    }\n    \n    const username = accountObj.username;\n   \n}).catch((error) => {\n    handleError(error);\n});\n\nfunction signIn() {\n    myMSALObj.loginRedirect(loginRequest);\n}\n\nasync function getTokenRedirect(request) {\n    return await myMSALObj.acquireTokenSilent(request).catch(error => {\n        this.logger.info(\"silent token acquisition fails. acquiring token using redirect\");\n        // fallback to interaction when silent call fails\n        return myMSALObj.acquireTokenRedirect(request)\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in MSAL Angular\nDESCRIPTION: Example of how to properly handle redirects in an Angular application using MSAL. This snippet demonstrates subscribing to the inProgress$ observable and filtering for InteractionStatus.None before performing any account-related actions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/FAQ.md#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.msalBroadcastService.inProgress$\n  .pipe(\n    filter((status: InteractionStatus) => status === InteractionStatus.None)\n  )\n  .subscribe(() => {\n    // Perform account-related actions here\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing System-assigned Managed Identity with MSALJS\nDESCRIPTION: Demonstrates how to configure and use system-assigned managed identity in MSALJS to acquire tokens. The code shows optional configuration setup and token acquisition for Azure Management API.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/managed-identity.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// optional\nconst config: ManagedIdentityConfiguration = {\n    system: {\n        loggerOptions: {\n            logLevel: LogLevel.Verbose,\n        } as LoggerOptions,\n    } as NodeSystemOptions,\n};\n\nconst systemAssignedManagedIdentityApplication: ManagedIdentityApplication =\n    new ManagedIdentityApplication(config);\n\nconst managedIdentityRequestParams: ManagedIdentityRequestParams = {\n    resource: \"https://management.azure.com\",\n};\n\nconst response: AuthenticationResult =\n    await systemAssignedManagedIdentityApplication.acquireToken(\n        managedIdentityRequestParams\n    );\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Account Information with MSAL.js\nDESCRIPTION: Demonstrates how to retrieve specific account information using getAccountByUsername and getAccountByHomeId methods. getAccountByHomeId is more reliable for identifying unique accounts.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst username = \"test@contoso.com\";\nconst myAccount: AccountInfo = msalInstance.getAccountByUsername(username);\n\nconst homeAccountId = \"userid.hometenantid\"; // Best to retrieve the homeAccountId from an account object previously obtained through msal\nconst myAccount: AccountInfo = msalInstance.getAccountByHomeId(homeAccountId);\n```\n\n----------------------------------------\n\nTITLE: Handling Local Storage Initialization in MSAL Angular v4\nDESCRIPTION: Example showing how to properly check for MSAL initialization completion and interaction status before accessing account APIs. Uses RxJS operators to filter interaction status and manage subscriptions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/v3-v4-upgrade-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.msalBroadcastService.inProgress$\n    .pipe(\n        filter(\n            (status: InteractionStatus) => status === InteractionStatus.None\n        ),\n        takeUntil(this._destroying$)\n    )\n    .subscribe(() => {\n        this.loginDisplay = this.authService.instance.getAllAccounts().length > 0;\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Signed HTTP Request with MSAL.js in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the SignedHttpRequest class from MSAL.js to generate a public key thumbprint, acquire a payload, sign the request, and make an authenticated API call. It also shows how to handle server nonces and clean up the keys afterwards.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/signed-http-request.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SignedHttpRequest } from \"@azure/msal-browser\";\n\nconst resourceRequestUri = \"https://api.contoso.com/my-api\";\nconst resourceRequestMethod = \"GET\";\n\n// Instantiate the token binding class. There may be configuration options possible in the future.\nconst signedHttpRequest = new SignedHttpRequest({\n    resourceRequestUri, \n    resourceRequestMethod\n});\n\n// Use MSAL to generate and cache the keys, and return the public key thumbprint to the app.\nconst publicKeyThumbprint = await signedHttpRequest.generatePublicKeyThumbprint();\n\n// Application acquires the payload to the be signed, providing the public key.\n// This payload can be cached by the application, if desired.\nconst payload = await fetchAccessTokenWithoutMsal(publicKeyThumbprint);\n\n// Application invokes custom business logic to acquire nonce (optional)\nconst nonce = await fetchServerNonce();\n\n// Use MSAL to generate the pop token for the payload.\n// This popToken should be used immediately and not be cached by the application.\nconst popToken = await signedHttpRequest.signRequest(payload, publicKeyThumbprint, { nonce });\n\n// Initiate http request using pop token\nconst headers = new Headers();\nheaders.append(\"Authorization\", `PoP ${popToken}`);\n\nconst options = {\n    method: resourceRequestMethod,\n    headers\n};\n\nconst response = await fetch(resourceRequestUri, options);\nconst json = await response.json();\n\n// Delete keys from cache\nawait signedHttpRequest.removeKeys(publicKeyThumbprint);\n```\n\n----------------------------------------\n\nTITLE: Requesting Multiple Scopes for a Single Resource in MSAL.js\nDESCRIPTION: This code shows how to request multiple scopes for the same resource (Microsoft Graph API) using MSAL.js.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst graphToken = await msalInstance.acquireTokenSilent({\n     scopes: [ \"User.Read\", \"User.Write\", \"Calendar.Read\" ] // all MS Graph API scopes\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Redirect Flow with Async/Await in JavaScript\nDESCRIPTION: The correct implementation of redirect authentication flow using async/await to ensure handleRedirectPromise completes before potentially calling loginRedirect.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait msalInstance.handleRedirectPromise();\n\nconst accounts = msalInstance.getAllAccounts();\nif (accounts.length === 0) {\n    // No user signed in\n    msalInstance.loginRedirect();\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring ID Token with @azure/msal-react Hook in JavaScript\nDESCRIPTION: This code defines a custom hook 'useIdToken' that uses the useMsal hook from @azure/msal-react to acquire an ID token silently or through popup interaction.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\n\nfunction useIdToken() {\n    const { instance, accounts } = useMsal();\n    const [idToken, setIdToken] = useState(null);\n\n    if (accounts.length > 0) {\n        const request = {\n            scopes: [\"openid\"],\n            account: accounts[0]\n        };\n        instance.acquireTokenSilent(request).then(response => {\n            setIdToken(response.idToken);\n        }).catch(error => {\n            // acquireTokenSilent can fail for a number of reasons, fallback to interaction\n            if (error instanceof InteractionRequiredAuthError) {\n                instance.acquireTokenPopup(request).then(response => {\n                    setIdToken(response.idToken);\n                });\n            }\n        });\n    }\n\n    return idToken;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ssoSilent() Failures in Angular TypeScript\nDESCRIPTION: This example demonstrates how to implement ssoSilent() in an Angular component, including error handling by falling back to interactive login when silent authentication fails.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/ssosilent.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { MsalService } from '@azure/msal-angular';\nimport { SilentRequest, SsoSilentRequest } from '@azure/msal-browser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  constructor(\n    private authService: MsalService,\n  ) {}\n\n  ngOnInit(): void {\n    const silentRequest: SsoSilentRequest = {\n      scopes: [\"User.Read\"],\n      loginHint: \"user@contoso.com\"\n    }\n\n    this.authService.ssoSilent(silentRequest)\n      .subscribe({\n        next: (result: AuthenticationResult) => {\n          console.log(\"SsoSilent succeeded!\"); // Handle result\n        }, \n        error: (error) => {\n          this.authService.loginRedirect(); // Handle error by logging in interactively\n        }\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Forgot Password with MSAL Event API in React\nDESCRIPTION: This snippet shows how to use the MSAL event API to catch and handle the forgot password error in a React component. It adds an event callback to detect the LOGIN_FAILURE event and triggers the appropriate login method based on the interaction type.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/FAQ.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Example() {\n    const { instance } = useMsal();\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((event) => {\n            if (event.eventType === EventType.LOGIN_FAILURE) {\n                if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n                    if (event.interactionType === InteractionType.Redirect) {\n                        instance.loginRedirect(forgotPasswordRequest);\n                    } else if (event.interactionType === InteractionType.Popup) {\n                        instance.loginPopup(forgotPasswordRequest).catch(e => {\n                            return;\n                        });\n                    }\n                }\n            }\n        });\n\n        return () => {\n            if (callbackId) {\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Provider in React\nDESCRIPTION: This snippet demonstrates how to initialize the MsalProvider component with a PublicClientApplication instance. It wraps the main App component to provide MSAL context throughout the application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { Configuration,  PublicClientApplication } from \"@azure/msal-browser\";\n\nimport App from \"./app.jsx\";\n\n// MSAL configuration\nconst configuration: Configuration = {\n    auth: {\n        clientId: \"client-id\"\n    }\n};\n\nconst pca = new PublicClientApplication(configuration);\n\n// Component\nconst AppProvider = () => (\n    <MsalProvider instance={pca}>\n        <App />\n    </MsalProvider>\n);\n\nReactDOM.render(<AppProvider />, document.getElementById(\"root\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring PersistenceCachePlugin for MSAL Node PublicClientApplication\nDESCRIPTION: This snippet shows how to set up the PublicClientApplication configuration object with a PersistenceCachePlugin. It demonstrates the basic structure for auth and cache settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/msal-node-extensions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-node\";\n\nconst publicClientConfig = {\n    auth: {\n        clientId: \"\",\n        authority: \"\",\n    },\n    cache: {\n        cachePlugin: persistenceCachePlugin\n    },\n};\n\nconst pca = new PublicClientApplication(publicClientConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring PublicClientApplication with MSAL in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up the configuration object for PublicClientApplication in MSAL. It includes cache plugin implementation, authentication settings, and system configurations such as logging and proxy options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Call back APIs which automatically write and read into a .json file - example implementation\nconst beforeCacheAccess = async (cacheContext) => {\n    cacheContext.tokenCache.deserialize(await fs.readFile(cachePath, \"utf-8\"));\n};\n\nconst afterCacheAccess = async (cacheContext) => {\n    if(cacheContext.cacheHasChanged){\n        await fs.writeFile(cachePath, cacheContext.tokenCache.serialize());\n    }\n};\n\n// Cache Plugin\nconst cachePlugin = {\n    beforeCacheAccess,\n    afterCacheAccess\n};;\n\nconst msalConfig = {\n    auth: {\n        clientId: \"enter_client_id_here\",\n        authority: \"https://login.microsoftonline.com/common\",\n        knownAuthorities: [],\n        cloudDiscoveryMetadata: \"\",\n        azureCloudOptions: {\n            azureCloudInstance: \"enter_AzureCloudInstance_here\" // AzureCloudInstance enum is exported as a \"type\",\n            tenant: \"enter_tenant_info\" // defaults to \"common\"\n        }\n    },\n    cache: {\n        cachePlugin // your implementation of cache plugin\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback(loglevel, message, containsPii) {\n                console.log(message);\n            },\n            piiLoggingEnabled: false,\n            logLevel: msal.LogLevel.Verbose,\n        },\n        proxyUrl: \"\",\n        customAgentOptions: {},\n    }\n}\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status with useIsAuthenticated Hook in React\nDESCRIPTION: Shows how to use the useIsAuthenticated hook to determine if any account is currently signed in. It returns a boolean indicating the authentication status.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useIsAuthenticated } from \"@azure/msal-react\";\n\nexport function App() {\n    const isAuthenticated = useIsAuthenticated();\n\n    return (\n        <React.Fragment>\n            <p>Anyone can see this paragraph.</p>\n            {isAuthenticated && (\n                <p>At least one account is signed in!</p>\n            )}\n            {!isAuthenticated && (\n                <p>No users are signed in!</p>\n            )}\n        </React.Fragment>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token Using Redirect Flow in MSAL.js\nDESCRIPTION: Demonstrates acquiring an access token using silent and redirect flows. First attempts silent token acquisition, falling back to redirect interaction if needed. Handles InteractionRequiredAuthError.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/acquire-token.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar request = {\n    scopes: [\"User.Read\"],\n};\n\nmsalInstance.acquireTokenSilent(request).then(tokenResponse => {\n    // Do something with the tokenResponse\n}).catch(error => {\n    if (error instanceof InteractionRequiredAuthError) {\n        // fallback to interaction when silent call fails\n        return msalInstance.acquireTokenRedirect(request)\n    }\n\n    // handle other errors\n});\n```\n\n----------------------------------------\n\nTITLE: Public Client Application Class Implementation\nDESCRIPTION: Main class for public client applications implementing interactive and silent token acquisition flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\n    constructor(configuration: Configuration);\n    acquireTokenByDeviceCode(request: DeviceCodeRequest): Promise<AuthenticationResult | null>;\n    acquireTokenInteractive(request: InteractiveRequest): Promise<AuthenticationResult>;\n    acquireTokenSilent(request: SilentFlowRequest): Promise<AuthenticationResult>;\n    getAllAccounts(): Promise<AccountInfo[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Callbacks in React Function Component\nDESCRIPTION: Demonstrates how to register and unregister event callbacks using useEffect hook in a React function component. The callback handles login success events and cleanup on component unmount.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { EventType } from \"@azure/msal-browser\";\n\nfunction EventExample() {\n    const { instance } = useMsal();\n\n    useEffect(() => {\n        // This will be run on component mount\n        const callbackId = instance.addEventCallback((message) => {\n            // This will be run every time an event is emitted after registering this callback\n            if (message.eventType === EventType.LOGIN_SUCCESS) {\n                const result = message.payload;    \n                // Do something with the result\n            }\n        });\n\n        return () => {\n            // This will be run on component unmount\n            if (callbackId) {\n                instance.removeEventCallback(callbackId);\n            }\n        }\n        \n    }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL PublicClientApplication in Node.js\nDESCRIPTION: Basic initialization of MSAL PublicClientApplication object with client configuration. Requires clientId and authority parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/initialize-public-client-application.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as msal from \"@azure/msal-node\";\n\nconst clientConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n        authority: \"your_authority\",\n    },\n};\nconst pca = new msal.PublicClientApplication(clientConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced MSAL Guard Route Protection\nDESCRIPTION: Advanced routing configuration showing implementation of canActivateChild and canLoad interfaces with MSAL Guard, including lazy loading module protection.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-guard.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes: Routes = [\n    {\n        path: 'profile',\n        canActivateChild: [MsalGuard],\n        children: [\n        {\n            path: '',\n            component: ProfileComponent\n        },\n        {\n            path: 'detail',\n            component: DetailComponent\n        }\n        ]\n    },\n    { \n        path: 'lazyLoad', \n        loadChildren: () => import('./lazy/lazy.module').then(m => m.LazyModule),\n        canLoad: [MsalGuard]\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Requesting Proof of Possession Token with MSAL Node\nDESCRIPTION: This snippet demonstrates how to request a Proof of Possession (PoP) token using MSAL Node. It configures the PublicClientApplication with the NativeBrokerPlugin and sets up a request object for acquiring a PoP token with specific parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/brokering.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication, Configuration } from \"@azure/msal-node\";\nimport { NativeBrokerPlugin } from \"@azure/msal-node-extensions\";\n\nconst msalConfig: Configuration = {\n    auth: {\n        clientId: \"your-client-id\",\n    },\n    broker: {\n        nativeBrokerPlugin: new NativeBrokerPlugin(),\n    },\n};\n\nconst pca = new PublicClientApplication(msalConfig);\n\nconst popTokenRequest = {\n    scopes: [\"User.Read\"],\n    authenticationScheme: msal.AuthenticationScheme.POP,\n    resourceRequestMethod: \"POST\",\n    resourceRequestUri: \"YOUR_RESOURCE_ENDPOINT\",\n    shrNonce: \"NONCE_ACQUIRED_FROM_RESOURCE_SERVER\"\n}\n\npca.acquireTokenInteractive(popTokenRequest);\npca.acquireTokenSilent(popTokenRequest);\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Node with Certificates in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize MSAL Node with certificate credentials. It uses the dotenv package to load environment variables and creates a ConfidentialClientApplication instance with the necessary configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/certificate-credentials.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst msal = require(\"@azure/msal-node\");\nrequire(\"dotenv\").config(); // process.env now has the values defined in a .env file\n\nconst config = {\n    auth: {\n        clientId: \"YOUR_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/YOUR_TENANT_ID\",\n        clientCertificate: {\n            thumbprintSha256: process.env.thumbprint,\n            privateKey: process.env.privateKey,\n        },\n    },\n};\n\n// Create msal application object\nconst cca = new msal.ConfidentialClientApplication(config);\n```\n\n----------------------------------------\n\nTITLE: Using withMsal Higher-Order-Component in React\nDESCRIPTION: This example shows how to use the withMsal Higher-Order-Component to inject MSAL context into a component's props for managing authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { withMsal } from \"@azure/msal-react\";\n\nclass LoginButton extends React.Component {\n    render() {\n        const isAuthenticated = this.props.msalContext.accounts.length > 0;\n        const msalInstance = this.props.msalContext.instance;\n        if (isAuthenticated) {\n            return <button onClick={() => msalInstance.logout()}>Logout</button>    \n        } else {\n            return <button onClick={() => msalInstance.loginPopup()}>Login</button>\n        }\n    }\n}\n\nexport default YourWrappedComponent = withMsal(LoginButton);\n```\n\n----------------------------------------\n\nTITLE: Filtering Multi-Tenant Accounts with MSAL.js getAllAccounts\nDESCRIPTION: Demonstrates how to filter cached accounts using getAllAccounts with accountFilter parameter, extract tenant profiles, and acquire tokens for specific tenants. Shows handling of both home and guest tenant scenarios including fallback to interactive authentication when silent token acquisition fails.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/multi-tenant-accounts.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// When a filter is passed into getAllAccounts, it returns all cached accounts that match the filter. Use the special isHomeTenant filter to get the home accounts only.\nconst allHomeAccounts = myMSALObj.getAllAccounts({ isHomeTenant: true });\nconst homeAccount = allHomeAccounts[0]; // Assuming only one user is logged into multiple tenants\nconst tenantId = \"GUEST_TENANT_ID\"; // This will be the tenant you want to retrieve a cached token for\n\n// Get the `TenantProfile` account data subset for the desired tenant from the homeAccount object\nconst guestTenantProfile = homeAccount.tenantProfiles.get(tenantId);\n\nif (guestTenantProfile) {\n    // TenantProfile is a subset of AccountInfo, so it can be passed whole as an AccountFilter\n    const guestTenantAccount = myMSALObj.getAccount({ ...tenantProfile });\n\n    const guestTenantAuthResponse = await myMSALObj\n        .acquireTokenSilent({\n            ...guestTenantRequest,\n            account: guestTenantAccount,\n        })\n        .catch(async (error) => {\n            if (error instanceof msal.InteractionRequiredAuthError) {\n                // fallback to interaction when silent call fails\n                myMSALObj.acquireTokenRedirect(request);\n            } else {\n                console.error(error);\n            }\n        });\n} else {\n    // If the tenant profile isn't found in the account, that means the user hasn't authenticated with that tenant. This is the custom getTokenMultiTenant function from the first example.\n    const guestTenantAuthResponse = await myMSALObj.getTokenMultiTenant({\n        ...guestTenantRequest,\n        account: homeAccount,\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Login and Active Account Management in MSAL Browser\nDESCRIPTION: Shows how to implement login functionality and manage the active account for token acquisition.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/accounts.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction login() {\n    return myMsalObj.loginPopup().then((response) => {\n        // After a successful login set the active account to be the user that just logged in\n        myMsalObj.setActiveAccount(response.account);\n    });\n}\n\nfunction getAccessToken() {\n    // Providing an account in the token request is not required if there is an active account set\n    return myMsalObj.acquireTokenSilent({ scopes: [\"User.Read\"] });\n}\n```\n\n----------------------------------------\n\nTITLE: Refresh Token Flow Implementation in MSAL Node\nDESCRIPTION: Demonstrates token acquisition using refresh token flow. Shows configuration and implementation of acquireTokenByRefreshToken() method for obtaining new tokens using a refresh token.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/request.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"your_client_id_here\",\n        authority: \"your_authority_here\",\n    },\n};\n\nconst pca = new msal.PublicClientApplication(config);\n\nconst refreshTokenRequest = {\n    refreshToken: \"\",\n    scopes: [\"user.read\"],\n};\n\npca.acquireTokenByRefreshToken(refreshTokenRequest)\n    .then((response) => {\n        console.log(JSON.stringify(response));\n    })\n    .catch((error) => {\n        console.log(JSON.stringify(error));\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Navigation Client for MSAL Browser\nDESCRIPTION: Creates a CustomNavigationClient class that extends NavigationClient to handle internal navigation using react-router's navigate function. This implementation allows for client-side navigation while maintaining MSAL authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/performance.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationClient } from \"@azure/msal-browser\";\n\n/**\n * Extending the default NavigationClient allows you to overwrite just navigateInternal while continuing to use the default navigateExternal function\n * If you would like to overwrite both you can implement INavigationClient directly instead\n */\nclass CustomNavigationClient extends NavigationClient{\n    constructor(navigate) {\n        super();\n        this.navigate = navigate // Passed in from useNavigate hook provided by react-router-dom;\n    }\n    \n    // This function will be called anytime msal needs to navigate from one page in your application to another\n    async navigateInternal(url, options) {\n        // url will be absolute, you will need to parse out the relative path to provide to the history API\n        const relativePath = url.replace(window.location.origin, '');\n        if (options.noHistory) {\n            this.navigate(relativePath, {replace: true});\n        } else {\n            this.navigate(relativePath);\n        }\n\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Acquisition in MSAL Node\nDESCRIPTION: JavaScript code demonstrating the token acquisition process in MSAL Node, including silent acquisition, refresh token usage, and fallback to interactive flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/refresh-token/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/acquireToken', async (req, res, next) => {\n    try {\n        // retrieve account\n        const account = await (await cca.getTokenCache()).getAccountByHomeId(req.session.account?.homeAccountId);\n\n        if (!account) {\n            console.log('Account not found!');\n            throw new msal.InteractionRequiredAuthError();\n        }\n\n        const tokenResponse = await cca.acquireTokenSilent({\n            account: account,\n            scopes: [\"user.read\"],\n        });\n\n        res.send(tokenResponse);\n    } catch (error) {\n        if (error instanceof msal.InteractionRequiredAuthError) {\n                /**\n                 * If the silent token acquisition throws an interaction_required error,\n                 * we catch it and attempt to find a refresh token for this user from ADAL cache.\n                 * If no cached refresh token is found or if the refresh token is expired,\n                 * we fallback to interactive flow via getAuthCodeUrl -> acquireTokenByCode.\n                 */\n                diskCache.find({ userId: req.cookies.userId }, async (error, data) => {\n                    try {\n                        if (error || !data || !data.length) throw new Error('Could not retrieve user cache');\n\n                        /**\n                         * You can add the /.default scope suffix to the resource to help migrate your apps\n                         * from the v1.0 endpoint (ADAL) to the Microsoft identity platform (MSAL).\n                         * For example, for the resource value of https://graph.microsoft.com,\n                         * the equivalent scope value is https://graph.microsoft.com/.default\n                         */\n                        const tokenResponse = await cca.acquireTokenByRefreshToken({\n                            refreshToken: data[0].refreshToken,\n                            scopes: ['https://graph.microsoft.com/.default'],\n                            forceCache: true,\n                        });\n\n                        req.session.account = tokenResponse.account;\n\n                        /**\n                         * Once you successfully acquire an access token using a refresh token,\n                         * we recommend to clear the ADAL cache for this user.\n                         */\n                        diskCache.remove(data, (error, data) => {\n                            if (error) console.error(error)\n                            res.send(tokenResponse);\n                        })\n                    } catch (error) {\n                        // create a random string of characters against csrf\n                        req.session.state = cryptoProvider.createNewGuid();\n\n                        // Construct a request object for auth code url\n                        const authCodeUrlParameters = {\n                            scopes: [\"user.read\"],\n                            responseMode: 'form_post',\n                            redirectUri: REDIRECT_URI,\n                            state: req.session.state,\n                        };\n\n                        try {\n                            // Request auth code url, then redirect\n                            const authCodeUrl = await cca.getAuthCodeUrl(authCodeUrlParameters);\n                            res.redirect(authCodeUrl);\n                        } catch (error) {\n                            next(error);\n                        }\n                    }\n                });\n        } else {\n            next(error);\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Guard in app.module.ts\nDESCRIPTION: Implementation of MSAL Guard configuration in the main Angular module. Shows how to set up MsalModule with PublicClientApplication, configure interaction types, and set up authentication requests with required scopes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-guard.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from \"@angular/common/http\";\nimport { MsalModule, MsalRedirectComponent, MsalGuard } from '@azure/msal-angular'; // Import MsalInterceptor\nimport { InteractionType, PublicClientApplication } from '@azure/msal-browser';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n    ],\n    imports: [\n        MsalModule.forRoot( new PublicClientApplication({\n            // MSAL Configuration\n        }), {\n            // MSAL Guard Configuration\n            interactionType: InteractionType.Redirect,\n            authRequest: {\n                scopes: ['user.read']\n            },\n            loginFailedRoute: '/login-failed'\n        }, {\n            // MSAL Interceptor Configurations\n        }),\n        AppRoutingModule\n    ],\n    providers: [\n        // ...\n        MsalGuard\n    ],\n    bootstrap: [AppComponent, MsalRedirectComponent]\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Callbacks in React Class Component\nDESCRIPTION: Shows how to implement event callback registration and cleanup in a React class component using componentDidMount and componentWillUnmount lifecycle methods.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass EventExample extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            callbackId: null;\n        }\n    }\n\n    componentDidMount() {\n        // This will be run on component mount\n        const callbackId = this.props.msalContext.instance.addEventCallback((message) => {\n            // This will be run every time an event is emitted after registering this callback\n            if (message.eventType === EventType.LOGIN_SUCCESS) {\n                const result = message.payload;    \n                // Do something with the result\n            }\n        });\n\n        this.setState({callbackId: callbackId});\n    }\n\n    componentWillUnmount() {\n        // This will be run on component unmount\n        if (this.state.callbackId) {\n            this.props.msalContext.instance.removeEventCallback(this.state.callbackId);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hooks-based Authentication with MSAL React\nDESCRIPTION: Shows how to implement authentication using MSAL React hooks, demonstrating useIsAuthenticated and useMsalAuthentication for conditional rendering based on auth state.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication, InteractionType } from \"@azure/msal-browser\";\nimport { MsalProvider, useIsAuthenticated, useMsalAuthentication } from \"@azure/msal-react\";\n\nconst pca = new PublicClientApplication(config);\n\nfunction App() {\n    return (\n        <MsalProvider instance={pca}>\n            <ExampleComponent />\n        </MsalProvider>\n    );\n}\n\nfunction ExampleComponent() {\n    const isAuthenticated = useIsAuthenticated();\n    const { error } = useMsalAuthentication(InteractionType.Popup, request);\n\n    if (isAuthenticated) {\n        return <span>Only authenticated users can see me.</span>\n    } else if (error) {\n        return <span>An error occurred during login!</span>\n    } else {\n        return <span>Only unauthenticated users can see me.</span>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Cache Storage Location in TypeScript\nDESCRIPTION: Example showing how to configure the cache storage location when instantiating the PublicClientApplication in MSAL. Demonstrates setting up authentication parameters and specifying the cache location as SessionStorage.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/caching.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicClientApplication, BrowserCacheLocation } from \"@azure/msal-browser\";\n\nconst pca = new PublicClientApplication({\n    auth: {\n        clientId: \"Enter_the_Application_Id_Here\", // e.g. \"b1b60dca-c49d-496e-9851-xxxxxxxxxxxx\" (guid)\n        authority: \"https://login.microsoftonline.com/Enter_the_Tenant_Info_Here\", // e.g. \"common\" or your tenantId (guid),\n        redirectUri: \"/\"\n    },\n    cache: {\n       cacheLocation: BrowserCacheLocation.SessionStorage // \"sessionStorage\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Popup with MSAL.js\nDESCRIPTION: Demonstrates how to use the loginPopup method to authenticate a user with a popup window. This approach handles the authentication flow without page navigation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    const loginResponse = await msalInstance.loginPopup({});\n} catch (err) {\n    // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: CryptoProvider Class Implementation\nDESCRIPTION: Implements cryptographic operations needed for authentication including base64 encoding/decoding, GUID generation, and JWT signing.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CryptoProvider implements ICrypto {\n    constructor();\n    base64Decode(input: string): string;\n    base64Encode(input: string): string;\n    base64UrlEncode(): string;\n    clearKeystore(): Promise<boolean>;\n    createNewGuid(): string;\n    encodeKid(): string;\n    generatePkceCodes(): Promise<PkceCodes>;\n    getPublicKeyThumbprint(): Promise<string>;\n    hashString(plainText: string): Promise<string>;\n    removeTokenBindingKey(): Promise<boolean>;\n    signJwt(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Popup Authentication Flow in MSAL 2.x\nDESCRIPTION: Demonstrates the implementation of popup-based authentication flow including sign-in and token acquisition in MSAL 2.x.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v1-migration.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myMSALObj = new msal.PublicClientApplication(msalConfig); \n\nasync function signIn(method) {\n    try {\n        const loginResponse = await myMSALObj.loginPopup(loginRequest);\n    } catch (err) {\n        handleError(error);\n    }\n\n    const currentAccounts = myMSALObj.getAllAccounts();\n    if (!currentAccounts || currentAccounts.length === 0) {\n        // No user signed in\n        return;\n    } else if (currentAccounts.length > 1) {\n        // More than one user signed in, find desired user with getAccountByUsername(username)\n    } else {\n        accountObj = currentAccounts[0];\n    }\n}\n\nasync function getTokenPopup(request) {\n    return await myMSALObj.acquireTokenSilent(request).catch(async (error) => {\n        this.logger.info(\"silent token acquisition fails. acquiring token using popup\");\n        // fallback to interaction when silent call fails\n        return await myMSALObj.acquireTokenPopup(request).catch(error => {\n            handleError(error);\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web API Authentication in Node.js\nDESCRIPTION: This snippet shows the configuration object for the web API. It includes the discovery keys endpoint and authentication settings such as client ID, authority, and client secret.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/on-behalf-of/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst DISCOVERY_KEYS_ENDPOINT =\n    \"https://login.microsoftonline.com/ENTER_TENANT_INFO/discovery/v2.0/keys\";\n\nconst config = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_INFO\",\n        clientSecret: \"ENTER_CLIENT_SECRET\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node.js Client with Regional Authority\nDESCRIPTION: This code snippet demonstrates how to configure the MSAL Node.js client to use regional authorities. It includes setting up the client application, specifying the Azure region, and making a client credential request. The example also shows how to use environment variables for securely storing secrets.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/regional-authorities.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar msal = require(\"@azure/msal-node\");\nrequire(\"dotenv\").config(); // process.env now has the values defined in a .env file\n\nconst config = {\n    auth: {\n        clientId: \"<CLIENT_ID>\",\n        authority: \"https://login.microsoftonline.com/<TENANT_ID>\",\n        clientSecret: process.env.clientSecret,\n    },\n};\n\n// Create msal application object\nconst cca = new msal.ConfidentialClientApplication(config);\n\nconst clientCredentialRequest = {\n    scopes: [\"<SCOPE_1>, <SCOPE_2>\"],\n    azureRegion: \"REGION_NAME\", // Specify the region you will deploy your application to here. E.g. \"westus2\"\n};\n\ncca.acquireTokenByClientCredential(clientCredentialRequest)\n    .then((response) => {\n        // Handle a successful authentication\n    })\n    .catch((error) => {\n        // Handle a failed authentication\n    });\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Provider with Class Components\nDESCRIPTION: Sets up the basic MSAL Provider configuration using PublicClientApplication within a class component structure.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/class-components.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst pca = new PublicClientApplication(config);\n\nclass App extends React.Component {\n    render() {\n        return (\n            <MsalProvider instance={pca}>\n                <YourAppComponents>\n            </ MsalProvider>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node for ROPC grant in JavaScript\nDESCRIPTION: JavaScript configuration object for MSAL Node, including client ID, authority, and client secret. The client secret is loaded from an environment variable for security.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/username-password-cca/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_INFO\",\n        clientSecret: process.env.CLIENT_SECRET,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing PoP Token Request Flow with Nonce Management in TypeScript\nDESCRIPTION: Demonstrates a complete implementation of PoP token request handling with integrated nonce management. The code handles initial nonce acquisition, token requests, and continuous nonce renewal through response headers. It includes error handling for 401 unauthorized responses and header parsing for nonce extraction.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/shr-server-nonce.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Application script\n */\n\nimport { PublicClientApplication, AuthenticationHeaderParser } from \"@azure/msal-browser\";\nconst publicClientApplication = new PublicClientApplication(msalConfig);\n\n// Initialize header map to keep track of the \"last\" response's headers.\nlet lastResponseHeaders: HttpHeaders = null;\n// Call the PoP API endpoint \nconst { responseBody, lastResponseHeaders } = await callPopResource(publicClientApplication, resourceEndpointData, lastResponseHeaders);\n\n/**\n * End Application script\n */\n\n\n/**\n * Source Code: \n * This method is responsible for getting data from a PoP-protected API. It is called at the bottom of the \n * demo code in the application script.\n */\nconst async callPopResource(\n    publicClientApplication: PublicClientApplication,\n    resourceEndpointData: ResourceEndpointData,\n    lastResponseHeaders: HttpHeaders): ResponseBody {\n    \n    // Get headers from last response's headers\n    const headerParser = new AuthenticationHeaderParser(lastResponseHeaders);\n    let shrNonce: string | null;\n    \n    try {\n        shrNonce = headerParser.getShrNonce(); // Will return \n    } catch (e) {\n        // If the lastResponse headers are null, .getShrNonce will throw (by design)\n        shrNonce = null;\n    }\n\n    // Build PoP request as usual, adding the server nonce\n    const popTokenRequest = {\n        account: CURRENT_ACCOUNT,\n        scopes: resourceEndpointData.POP_RESOURCE_SCOPES,\n        authenticationScheme: AuthenticationScheme.POP,\n        resourceRequestUri: resourceEndpointData.RESOURCE_URI,\n        resourceRequestMethod: resourceEndpointData.METHOD,\n        shrClaims: resourceEndpointData.CUSTOM_CLAIMS_STRING,\n        shrNonce: shrNonce || undefined // Will be undefined on the first call, shrNonce should be valid on subsequent calls\n    }\n\n    // Get pop token to make authenticated request\n    const shr = await publicClientApplication.acquireTokenSilent(popTokenRequest);\n\n    // PoP Resource request\n    const reqHeaders = new Headers();\n    const authorizationHeader = `PoP ${shr}`; //Create Authorization header\n\n    headers.append(\"Authorization\", authorizationHeader); // Add Authorization header to request headers\n\n    const options = {\n        method: method,\n        headers: headers\n    };\n\n    // Make call to resource with SHR\n    return fetch(resourceEndpointData.endpoint, options)\n        .then(response => response.json())\n        .then(response => {\n            if (response.status === 200 && response.headers.get(\"Authentication-Info\")) {\n                lastResponseHeaders = response.headers;\n                const authHeaderParser = new AuthenticationHeaderParser(response.headers);\n                shrNonce = authHeaderParser.getShrNonce(); // Previous nonce (possibly expired) is replaced with the nextnonce generated by the server\n            }\n            // Check if error is 401 unauthorized and WWW-Authenticate header is included\n            else if (response.status === 401 && response.headers.get(\"WWW-Authenticate\")) {\n            /** SAME AS BEFORE **/\n                lastResponseHeaders = response.headers;\n                const authHeaderParser = new AuthenticationHeaderParser(response.headers);\n                shrNonce = authHeaderParser.getShrNonce(); // Null is replaced with valid nonce from WWW-Authenticate header\n            } else {\n                // Deal with other errors as necessary\n            }\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL.js with WAM Support\nDESCRIPTION: Implementation of MSAL.js initialization process with WAM support. This code demonstrates the required initialization sequence including establishing connection with the browser extension and proper await patterns.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/device-bound-tokens.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pca = new PublicClientApplication(msalConfig);\n\n// Initialize will establish a connection with the browser extension, if present\nawait pca.initialize();\n\n// Call handleRedirectPromise, after initialization is complete\nawait pca.handleRedirectPromise();\n\n// After initialize and handleRedirectPromise have completed, you may call any of the other APIs as you would without this feature\npca.acquireTokenSilent();\n```\n\n----------------------------------------\n\nTITLE: Acquiring an Access Token for Custom API in MSAL.js\nDESCRIPTION: This snippet shows two methods to acquire an access token for a custom API using MSAL.js. The first method requests the clientId as a scope, while the second uses a custom scope defined in the app registration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/working-with-b2c.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmsal.loginRedirect({\n    scopes: [\"client_Id\"]\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmsal.loginRedirect({\n    scopes: [\"api://clientId/customScope.Read\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Using MsalContext in a React Class Component\nDESCRIPTION: This snippet demonstrates how to use the MsalContext in a React class component to access MSAL functionality and manage user authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { MsalContext } from \"@azure/msal-react\";\n\nclass App extends React.Component {\n    static contextType = MsalContext;\n\n    render() {\n        if (this.context.accounts.length > 0) {\n            return <span>There are currently {this.context.accounts.length} users signed in!</span>\n        } else if (this.context.inProgress === \"login\") {\n            return <span>Login is currently in progress!</span>\n        } else {\n            return (\n                <>\n                    <span>There are currently no users signed in!</span>\n                    <button onClick={() => this.context.instance.loginPopup()}>Login</button>\n                </>\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Forgot Password with useMsalAuthentication Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useMsalAuthentication hook to handle the forgot password flow in a React component. It checks for the AADB2C90118 error and triggers a login with the password reset policy.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/FAQ.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Example() {\n    const { result, error, login } = useMsalAuthentication(InteractionType.Popup);\n\n    useEffect(() => {\n        if (error && error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n            const request = {\n                authority: \"your-b2c-authority/your-password-reset-policy\"\n            }\n            login(InteractionType.Popup, request)\n        }\n    }, [error]);\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Uninterrupted Token Acquisition for a Specified Duration in MSAL.js\nDESCRIPTION: This code demonstrates how to pre-emptively acquire tokens to ensure silent acquisition works for a specified period (2 hours). It uses forceRefresh to get fresh tokens and refreshTokenExpirationOffsetSeconds to define how long the silent flow should work without interruption.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/token-lifetimes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar request = {\n    scopes: [\"Mail.Read\"],\n    account: currentAccount,\n    forceRefresh: true,\n    refreshTokenExpirationOffsetSeconds: 7200 // 2 hours * 60 minutes * 60 seconds = 7200 seconds\n};\n\nconst tokenResponse = await msalInstance.acquireTokenSilent(request).catch(async (error) => {\n    if (error instanceof InteractionRequiredAuthError) {\n        // fallback to interaction when silent call fails\n        await msalInstance.acquireTokenRedirect(request);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Login on Page Load\nDESCRIPTION: Demonstrates how to implement automatic login functionality when a component mounts or updates.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/class-components.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { withMsal } from \"@azure/msal-react\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nclass ProtectedComponent extends React.Component {\n    callLogin() {\n        const isAuthenticated = this.props.msalContext.accounts.length > 0;\n        const msalInstance = this.props.msalContext.instance;\n\n        // If a user is not logged in and authentication is not already in progress, invoke login\n        if (!isAuthenticated && this.props.msalContext.inProgress === InteractionStatus.None) {\n            msalInstance.loginPopup();\n        }\n    }\n    componentDidMount() {\n        this.callLogin();\n    }\n\n    componentDidUpdate() {\n        this.callLogin();\n    }\n    \n    render() {\n        const isAuthenticated = this.props.msalContext.accounts.length > 0;\n        if (isAuthenticated) {\n            return <span>User is authenticated</span>\n        } else {\n            return <span>Authentication in progress</span>;\n        }\n    }\n}\n\nexport default YourWrappedComponent = withMsal(ProtectedComponent);\n```\n\n----------------------------------------\n\nTITLE: Silent Flow Implementation with Cache in MSAL Node\nDESCRIPTION: Demonstrates silent token acquisition flow with cache implementation. Shows complete setup including cache plugin configuration, public client setup, and token acquisition using acquireTokenSilent().\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/request.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Cache Plugin configuration\n */\nconst cachePath = \"path_to_your_cache_file/msal_cache.json\"; // Replace this string with the path to your valid cache file.\n\nconst readFromStorage = () => {\n    return fs.readFile(cachePath, \"utf-8\");\n};\n\nconst writeToStorage = (getMergedState) => {\n    return readFromStorage().then((oldFile) => {\n        const mergedState = getMergedState(oldFile);\n        return fs.writeFile(cachePath, mergedState);\n    });\n};\n\nconst cachePlugin = {\n    readFromStorage,\n    writeToStorage,\n};\n\n/**\n * Public Client Application Configuration\n */\nconst publicClientConfig = {\n    auth: {\n        clientId: \"your_client_id_here\",\n        authority: \"your_authority_here\",\n        redirectUri: \"your_redirectUri_here\",\n    },\n    cache: {\n        cachePlugin,\n    },\n};\n\n/** Request Configuration */\n\nconst scopes = [\"your_scopes\"];\n\nconst authCodeUrlParameters = {\n    scopes: scopes,\n    redirectUri: \"your_redirectUri_here\",\n};\n\nconst pca = new msal.PublicClientApplication(publicClientConfig);\nconst msalCacheManager = pca.getCacheManager();\nlet accounts;\n\npca.getAuthCodeUrl(authCodeUrlParameters)\n    .then((response) => {\n        console.log(response);\n    })\n    .catch((error) => console.log(JSON.stringify(error)));\n\nconst tokenRequest = {\n    code: req.query.code,\n    redirectUri: \"http://localhost:3000/redirect\",\n    scopes: scopes,\n};\n\npca.acquireTokenByCode(tokenRequest)\n    .then((response) => {\n        console.log(\"\\nResponse: \\n:\", response);\n        return msalCacheManager.writeToPersistence();\n    })\n    .catch((error) => {\n        console.log(error);\n    });\n\n// get Accounts\naccounts = msalCacheManager.getAllAccounts();\n\n// Build silent request\nconst silentRequest = {\n    account: accounts[0], // You would filter accounts to get the account you want to get tokens for\n    scopes: scopes,\n};\n\n// Acquire Token Silently to be used in MS Graph call\npca.acquireTokenSilent(silentRequest)\n    .then((response) => {\n        console.log(\n            \"\\nSuccessful silent token acquisition:\\nResponse: \\n:\",\n            response\n        );\n        return msalCacheManager.writeToPersistence();\n    })\n    .catch((error) => {\n        console.log(error);\n    });\n```\n\n----------------------------------------\n\nTITLE: Getting Interaction Status from Events in MSAL-Browser\nDESCRIPTION: This example demonstrates how to get the current interaction status from events using the getInteractionStatusFromEvent API.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/events.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callbackId = msalInstance.addEventCallback((message: EventMessage) => {\n    const status = EventMessageUtils.getInteractionStatusFromEvent(message);\n\n    // Update UI or interact with EventMessage here\n    if (status === InteractionStatus.None) {\n        console.log(message.payload);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Acquiring Tokens for Multiple Resources in MSAL.js\nDESCRIPTION: This snippet demonstrates how to acquire separate tokens for different resources using MSAL.js. It shows how to request tokens for Microsoft Graph API and a custom API.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// \"User.Read\" stands as shorthand for \"graph.microsoft.com/User.Read\"\nconst graphToken = await msalInstance.acquireTokenSilent({\n     scopes: [ \"User.Read\" ]\n});\nconst customApiToken = await msalInstance.acquireTokenSilent({\n     scopes: [ \"api://<myCustomApiClientId>/My.Scope\" ]\n});\n```\n\n----------------------------------------\n\nTITLE: Enum declaration for GrantType in TypeScript\nDESCRIPTION: Defines the supported OAuth grant types in MSAL. Includes common types like implicit, authorization_code, client_credentials, password, refresh_token, device_code, and JWT bearer.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GrantType: {\n    readonly IMPLICIT_GRANT: \"implicit\";\n    readonly AUTHORIZATION_CODE_GRANT: \"authorization_code\";\n    readonly CLIENT_CREDENTIALS_GRANT: \"client_credentials\";\n    readonly RESOURCE_OWNER_PASSWORD_GRANT: \"password\";\n    readonly REFRESH_TOKEN_GRANT: \"refresh_token\";\n    readonly DEVICE_CODE_GRANT: \"device_code\";\n    readonly JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\";\n};\n\nexport type GrantType = (typeof GrantType)[keyof typeof GrantType];\n```\n\n----------------------------------------\n\nTITLE: Login Redirect with Scopes in MSAL.js\nDESCRIPTION: Shows how to implement loginRedirect with pre-defined scopes to request specific permissions. This initiates a full page redirect to the authentication service.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar loginRequest = {\n    scopes: [\"user.read\", \"mail.send\"], // optional Array<string>\n};\n\ntry {\n    msalInstance.loginRedirect(loginRequest);\n} catch (err) {\n    // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Device Code Authentication Request\nDESCRIPTION: Handling the device code authentication request with promise-based response and error management\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/device-code/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn clientApplication\n    .acquireTokenByDeviceCode(deviceCodeRequest)\n    .then((response) => {\n        return response;\n    })\n    .catch((error) => {\n        return error;\n    });\n```\n\n----------------------------------------\n\nTITLE: Syncing Logged-in State Across Tabs in MSAL Angular\nDESCRIPTION: This snippet shows how to sync the logged-in state across different tabs or windows using the ACCOUNT_ADDED and ACCOUNT_REMOVED events in MSAL Angular.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/events.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MsalService, MsalBroadcastService } from '@azure/msal-angular';\nimport { EventMessage, EventType } from '@azure/msal-browser';\n\nexport class AppComponent implements OnInit, OnDestroy {\n  private readonly _destroying$ = new Subject<void>();\n\n  constructor(\n    //...\n    private authService: MsalService,\n    private msalBroadcastService: MsalBroadcastService\n  ) {}\n\n  ngOnInit(): void {\n    this.authService.instance.enableAccountStorageEvents(); // Register the storage listener that will be emitting the events\n    this.msalBroadcastService.msalSubject$\n      .pipe(\n        // Optional filtering of events\n        filter((msg: EventMessage) => msg.eventType === EventType.ACCOUNT_ADDED || msg.eventType === EventType.ACCOUNT_REMOVED), \n        takeUntil(this._destroying$)\n      )\n      .subscribe((result: EventMessage) => {\n        if (this.authService.msalInstance.getAllAccounts().length === 0) {\n          // Account logged out in a different tab, redirect to homepage\n          window.location.pathname = \"/\";\n        } else {\n          // Update UI to show user is signed in. result.payload contains the account that was logged in\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._destroying$.next(null);\n    this._destroying$.complete();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PoP Token Request Parameters in MSAL.js\nDESCRIPTION: Example showing how to configure a request object with the necessary parameters for acquiring a Proof-of-Possession token. The configuration includes authentication scheme, HTTP method, resource URI, and optional claims and nonce values.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/access-token-proof-of-possession.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst popTokenRequest = {\n    scopes: [\"User.Read\"],\n    authenticationScheme: msal.AuthenticationScheme.POP,\n    resourceRequestMethod: \"POST\",\n    resourceRequestUri: \"YOUR_RESOURCE_ENDPOINT\",\n    shrClaims: \"{\\\"shrClaim1\\\": \\\"claimValue\\\"}\",\n    shrNonce: \"NONCE_ACQUIRED_FROM_RESOURCE_SERVER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Token Acquisition with Interaction Status Checking in JavaScript\nDESCRIPTION: The correct implementation of token acquisition that checks the interaction status before initiating a new interactive authentication, preventing 'Interaction_in_progress' errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function myAcquireToken(request) {\n    const msalInstance = getMsalInstance(); // get the msal application instance\n\n    const tokenRequest = {\n        account: msalInstance.getActiveAccount() || null,\n        ...request,\n    };\n\n    let tokenResponse;\n\n    try {\n        // attempt silent acquisition first\n        tokenResponse = await msalInstance.acquireTokenSilent(tokenRequest);\n    } catch (error) {\n        if (error instanceof InteractionRequiredAuthError) {\n            // check for any interactions\n            if (\n                myGlobalState.getInteractionStatus() !== InteractionStatus.None\n            ) {\n                // throw a new error to be handled in the caller below\n                throw new Error(\"interaction_in_progress\");\n            } else {\n                // no interaction, invoke popup flow\n                tokenResponse = await msalInstance.acquireTokenPopup(\n                    tokenRequest\n                );\n            }\n        }\n\n        console.log(error);\n        // handle other errors\n    }\n\n    return tokenResponse;\n}\n\nasync function myInteractionInProgressHandler() {\n    /**\n     * \"myWaitFor\" method polls the interaction status via getInteractionStatus() from\n     * the application state and resolves when it's equal to \"None\".\n     */\n    await myWaitFor(\n        () => myGlobalState.getInteractionStatus() === InteractionStatus.None\n    );\n\n    // wait is over, call myAcquireToken again to re-try acquireTokenSilent\n    return await myAcquireToken(tokenRequest);\n}\n\nconst request = {\n    scopes: [\"User.Read\"],\n};\n\nmyAcquireToken(request).catch((e) => myInteractionInProgressHandler());\nmyAcquireToken(request).catch((e) => myInteractionInProgressHandler());\n```\n\n----------------------------------------\n\nTITLE: Unminified MSAL Browser CDN Implementation\nDESCRIPTION: Implementation example for loading unminified version of MSAL Browser library from CDN.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/cdn-usage.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script\n    type=\"text/javascript\"\n    src=\"https://alcdn.msauth.net/browser/<version>/js/msal-browser.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Securing Routes with MsalGuard in Angular\nDESCRIPTION: This code snippet shows how to secure specific routes in an Angular application using MsalGuard. It demonstrates adding the guard to a route definition in the routing module.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/initialization.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { MsalGuard } from '@azure/msal-angular';\n\nconst routes: Routes = [\n    {\n        path: 'profile',\n        component: ProfileComponent,\n        canActivate: [MsalGuard]\n    },\n    {\n        path: '',\n        component: HomeComponent\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token with @azure/msal-react Hook in JavaScript\nDESCRIPTION: This code defines a custom hook 'useAccessToken' that uses the useMsal hook from @azure/msal-react to acquire an access token silently or through popup interaction.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { InteractionRequiredAuthError } from \"@azure/msal-browser\";\n\nfunction useAccessToken() {\n    const { instance, accounts } = useMsal();\n    const [accessToken, setAccessToken] = useState(null);\n\n    if (accounts.length > 0) {\n        const request = {\n            scopes: [\"User.Read\"],\n            account: accounts[0]\n        };\n        instance.acquireTokenSilent(request).then(response => {\n            setAccessToken(response.accessToken);\n        }).catch(error => {\n            // acquireTokenSilent can fail for a number of reasons, fallback to interaction\n            if (error instanceof InteractionRequiredAuthError) {\n                instance.acquireTokenPopup(request).then(response => {\n                    setAccessToken(response.accessToken);\n                });\n            }\n        });\n    }\n\n    return accessToken;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-In Request with MSAL Node\nDESCRIPTION: JavaScript code for configuring and initiating a sign-in request using MSAL Node, including scope and redirect URI setup.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/\", (req, res) => {\n    // You can also build the authCodeUrlParameters object directly in the JavaScript file like this\n    const authCodeUrlParameters = {\n        scopes: [\"user.read\"],\n        redirectUri: \"http://localhost:3000/redirect\",\n    };\n\n    clientApplication.getAuthCodeUrl(authCodeUrlParameters).then((response) => {\n        res.redirect(response);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: MSAL Static Factory Initialization\nDESCRIPTION: Shows initialization using the static createPublicClientApplication factory method for creating an initialized instance.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst msalConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n    },\n};\n\nconst msalInstance = await PublicClientApplication.createPublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Redirect Flow with Promise Chaining in JavaScript\nDESCRIPTION: An alternative correct implementation of redirect authentication flow using promise chaining to ensure handleRedirectPromise completes before potentially calling loginRedirect.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance\n    .handleRedirectPromise()\n    .then((tokenResponse) => {\n        if (!tokenResponse) {\n            const accounts = msalInstance.getAllAccounts();\n            if (accounts.length === 0) {\n                // No user signed in\n                msalInstance.loginRedirect();\n            }\n        } else {\n            // Do something with the tokenResponse\n        }\n    })\n    .catch((err) => {\n        // Handle error\n        console.error(err);\n    });\n```\n\n----------------------------------------\n\nTITLE: MSAL Configuration JSON for Dynamic Loading\nDESCRIPTION: JSON configuration file for MSAL Angular that can be loaded dynamically. It includes settings for the MSAL core library, MsalGuard, and MsalInterceptor, allowing separation of configuration from code.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msal\": {\n    \"auth\": {\n      \"clientId\": \"clientid\",\n      \"authority\": \"https://login.microsoftonline.com/common/\",\n      \"redirectUri\": \"http://localhost:4200/\",\n      \"postLogoutRedirectUri\": \"http://localhost:4200/\",\n      \"navigateToLoginRequestUrl\": true\n    },\n    \"cache\": {\n      \"cacheLocation\": \"localStorage\",\n      \"storeAuthStateInCookie\": true\n    }\n  },\n  \"guard\": {\n    \"interactionType\": \"redirect\",\n    \"authRequest\": {\n      \"scopes\": [\"user.read\"]\n    },\n    \"loginFailedRoute\": \"/login-failed\"\n  },\n  \"interceptor\": {\n    \"interactionType\": \"redirect\",\n    \"protectedResourceMap\": [[\"https://graph.microsoft.com/v1.0/me\", [\"user.read\"]]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Telemetry Config Options in Markdown\nDESCRIPTION: This snippet outlines the configuration options for MSAL.js telemetry, including application and client settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Option        | Description                                      | Format                                                                                  | Default Value                                                                                 |\n|---------------|--------------------------------------------------|-----------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|\n| `application` | Telemetry options for applications using MSAL.js | See [below](#application-telemetry)                                                     | See [below](#application-telemetry)                                                           |\n| `client`      | Telemetry performance client instance            | [IPerformanceClient](../../msal-common/src/telemetry/performance/IPerformanceClient.ts) | [StubPerformanceClient](../../msal-common/src/telemetry/performance/StubPerformanceClient.ts) |\n```\n\n----------------------------------------\n\nTITLE: Login Popup with Scopes in MSAL.js\nDESCRIPTION: Demonstrates how to use loginPopup with pre-defined scopes to request specific permissions during the authentication process. Scopes define which resources and actions the application can access.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar loginRequest = {\n    scopes: [\"user.read\", \"mail.send\"], // optional Array<string>\n};\n\ntry {\n    const loginResponse = await msalInstance.loginPopup(loginRequest);\n} catch (err) {\n    // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Redirect Flow in JavaScript\nDESCRIPTION: An example showing incorrect implementation of redirect authentication flow that will cause an 'Interaction_in_progress' error because handleRedirectPromise hasn't completed before calling loginRedirect again.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance.handleRedirectPromise();\n\nconst accounts = msalInstance.getAllAccounts();\nif (accounts.length === 0) {\n    // No user signed in\n    msalInstance.loginRedirect();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Cache Persistence with MSAL Node Extensions\nDESCRIPTION: This code demonstrates how to configure token cache persistence using @azure/msal-node-extensions. It imports necessary components, creates a cache path, sets up a persistence configuration, and initializes a PublicClientApplication with the cache plugin.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/msal-node-extensions/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { \n    DataProtectionScope,\n    Environment,\n    PersistenceCreator,\n    PersistenceCachePlugin,\n} = require(\"@azure/msal-node-extensions\");\n\n// You can use the helper functions provided through the Environment class to construct your cache path\n// The helper functions provide consistent implementations across Windows, Mac and Linux.\nconst cachePath = path.join(Environment.getUserRootDirectory(), \"./cache.json\");\n\nconst persistenceConfiguration = {\n    cachePath,\n    dataProtectionScope: DataProtectionScope.CurrentUser,\n    serviceName: \"<SERVICE-NAME>\",\n    accountName: \"<ACCOUNT-NAME>\",\n    usePlaintextFileOnLinux: false,\n}\n\n// The PersistenceCreator obfuscates a lot of the complexity by doing the following actions for you :-\n// 1. Detects the environment the application is running on and initializes the right persistence instance for the environment.\n// 2. Performs persistence validation for you.\n// 3. Performs any fallbacks if necessary.\nPersistenceCreator\n.createPersistence(persistenceConfiguration)\n.then(async (persistence) => {\n    const publicClientConfig = {\n        auth: {\n            clientId: \"<CLIENT-ID>\",\n            authority: \"<AUTHORITY>\",\n        },\n\n        // This hooks up the cross-platform cache into MSAL\n        cache: {\n            cachePlugin: new PersistenceCachePlugin(persistence)\n        }\n    };\n\n    const pca = new msal.PublicClientApplication(publicClientConfig);\n    \n    // Use the public client application as required...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing B2C Invite Flow with MSAL.js\nDESCRIPTION: This snippet demonstrates how to implement a B2C invite flow using MSAL.js. It shows how to include an id_token_hint in the login request to handle user invitations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/working-with-b2c.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmsal.loginRedirect({\n    scopes: [\"example_scope\"],\n    extraQueryParameters: {'id_token_hint': your_id_token_hint}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing MSAL React Hooks\nDESCRIPTION: This snippet defines various hooks used in the MSAL React library, including useAccount, useIsAuthenticated, useMsal, and useMsalAuthentication. These hooks provide functionality for account management and authentication in React components.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/apiReview/msal-react.api.md#2025-04-18_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useAccount(accountIdentifiers?: AccountIdentifiers): AccountInfo | null;\n\nexport function useIsAuthenticated(matchAccount?: AccountIdentifiers): boolean;\n\nexport const useMsal: () => IMsalContext;\n\nexport function useMsalAuthentication(interactionType: InteractionType, authenticationRequest?: PopupRequest | RedirectRequest | SsoSilentRequest, accountIdentifiers?: AccountIdentifiers): MsalAuthenticationResult;\n```\n\n----------------------------------------\n\nTITLE: Running the Node.js Application\nDESCRIPTION: This command starts the Node.js application as per the scripts defined in package.json. It depends on previous setup steps being correctly followed, including installing dependencies and configuring the application. The command is expected to initiate the app, leading to a terminal output with the response from Microsoft Entra ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials/README.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n    npm start\n```\n\n----------------------------------------\n\nTITLE: Implementing RefreshTokenClient Class for Token Refresh Operations\nDESCRIPTION: Client class that handles token refresh operations. Extends BaseClient and provides methods for acquiring tokens using refresh tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_160\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RefreshTokenClient extends BaseClient {\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient);\n    acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult>;\n    acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Silent SSO Authentication with User Hint in MSAL.js\nDESCRIPTION: Demonstrates how to use ssoSilent method with login hints for non-interactive authentication. This approach is used when a user session already exists with the authentication server.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst silentRequest = {\n    scopes: [\"User.Read\", \"Mail.Read\"],\n    loginHint: \"user@contoso.com\",\n};\n\ntry {\n    const loginResponse = await msalInstance.ssoSilent(silentRequest);\n} catch (err) {\n    if (err instanceof InteractionRequiredAuthError) {\n        const loginResponse = await msalInstance\n            .loginPopup(silentRequest)\n            .catch((error) => {\n                // handle error\n            });\n    } else {\n        // handle error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Client Class Implementation\nDESCRIPTION: Implements an abstract PerformanceClient class for monitoring and tracking performance metrics in the authentication flow. Includes methods for managing callbacks and measurements.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_147\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class PerformanceClient implements IPerformanceClient {\n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry, intFields?: Set<string>, abbreviations?: Map<string, string>);\n    protected abbreviations: Map<string, string>;\n    addFields(fields: {\n        [key: string]: {} | undefined;\n    }, correlationId: string): void;\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string;\n    addQueueMeasurement(eventName: string, correlationId?: string, queueTime?: number, manuallyCompleted?: boolean): void;\n    protected applicationTelemetry: ApplicationTelemetry;\n    protected authority: string;\n    protected cacheEventByCorrelationId(event: PerformanceEvent): void;\n    calculateQueuedTime(preQueueTime: number, currentTime: number): number;\n    protected callbacks: Map<string, PerformanceCallbackFunction>;\n    protected clientId: string;\n    discardMeasurements(correlationId: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node with Azure Key Vault Settings\nDESCRIPTION: This code snippet demonstrates how to configure the MSAL Node application with Azure Key Vault settings. It includes environment variables for the Key Vault name and certificate name, as well as authentication configuration for the client ID and authority.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-key-vault/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst KEY_VAULT_NAME =\n    process.env[\"KEY_VAULT_NAME\"] || \"ENTER_YOUR_KEY_VAULT_NAME\";\nconst CERTIFICATE_NAME =\n    process.env[\"CERTIFICATE_NAME\"] ||\n    \"ENTER_THE_NAME_OF_YOUR_CERTIFICATE_ON_KEY_VAULT\";\n\nconst config = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_INFO\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming Events in MSAL Angular\nDESCRIPTION: This snippet demonstrates how to subscribe to and consume events emitted by the MsalBroadcastService in an Angular component. It filters for LOGIN_SUCCESS events and handles the result.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/events.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MsalBroadcastService } from '@azure/msal-angular';\nimport { EventMessage, EventType } from '@azure/msal-browser';\n\nexport class AppComponent implements OnInit, OnDestroy {\n  private readonly _destroying$ = new Subject<void>();\n\n  constructor(\n    //...\n    private msalBroadcastService: MsalBroadcastService\n  ) {}\n\n  ngOnInit(): void {\n    this.msalBroadcastService.msalSubject$\n      .pipe(\n        // Optional filtering of events.\n        filter((msg: EventMessage) => msg.eventType === EventType.LOGIN_SUCCESS), \n        takeUntil(this._destroying$)\n      )\n      .subscribe((result: EventMessage) => {\n        // Do something with the result\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._destroying$.next(null);\n    this._destroying$.complete();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MSAL Initialization with Async Initialize Method\nDESCRIPTION: Demonstrates the initialization of PublicClientApplication using the asynchronous initialize method.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst msalConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n    },\n};\n\nconst msalInstance = new PublicClientApplication(msalConfig);\nawait msalInstance.initialize();\n```\n\n----------------------------------------\n\nTITLE: MSAL Angular Root Component Implementation\nDESCRIPTION: Root component implementation that handles MSAL authentication status changes using the broadcast service. Demonstrates proper interaction status handling and cleanup.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/redirects.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit, Inject, OnDestroy } from '@angular/core';\nimport { MsalBroadcastService, InteractionStatus } from '@azure/msal-angular';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit, OnDestroy {\n  private readonly _destroying$ = new Subject<void>();\n\n  constructor(\n    private msalBroadcastService: MsalBroadcastService\n  ) {}\n\n  ngOnInit(): void {\n    this.msalBroadcastService.inProgress$\n      .pipe(\n        filter((status: InteractionStatus) => status === InteractionStatus.None),\n        takeUntil(this._destroying$)\n      )\n      .subscribe(() => {\n        // Do user account/UI functions here\n      })\n  }\n```\n\n----------------------------------------\n\nTITLE: Correct Authentication Implementation in Angular with Interaction Status Check\nDESCRIPTION: This improved code snippet shows the correct way to implement authentication in Angular using MSAL. It subscribes to the inProgress$ observable and only invokes loginRedirect() when there is no other interaction in progress, preventing the 'interaction_in_progress' error.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/errors.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { InteractionStatus } from '@azure/msal-browser';\nimport { MsalService, MsalBroadcastService } from '@azure/msal-angular';\nimport { filter } from 'rxjs/operators';\n\n@Component()\nexport class ExampleComponent implements OnInit {\n\n  constructor(\n    private msalBroadcastService: MsalBroadcastService,\n    private authService: MsalService\n  ) {}\n\n  ngOnInit(): void {\n    this.msalBroadcastService.inProgress$\n      .pipe(\n        filter((status: InteractionStatus) => status === InteractionStatus.None),\n      )\n      .subscribe(() => {\n        this.authService.loginRedirect();\n      })\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing User-assigned Managed Identity with MSALJS\nDESCRIPTION: Shows the configuration and usage of user-assigned managed identity in MSALJS, including setting up identity parameters and acquiring tokens. Requires specific client ID or resource identifier.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/managed-identity.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst managedIdentityIdParams: ManagedIdentityIdParams = {\n    userAssignedClientId: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n};\n\nconst config: ManagedIdentityConfiguration = {\n    managedIdentityIdParams,\n    // optional\n    system: {\n        loggerOptions: {\n            logLevel: LogLevel.Verbose,\n        } as LoggerOptions,\n    } as NodeSystemOptions,\n};\n\nconst userAssignedClientIdManagedIdentityApplication: ManagedIdentityApplication =\n    new ManagedIdentityApplication(config);\n\nconst managedIdentityRequestParams: ManagedIdentityRequestParams = {\n    resource: \"https://management.azure.com\",\n};\n\nconst response: AuthenticationResult =\n    await userAssignedClientIdManagedIdentityApplication.acquireToken(\n        managedIdentityRequestParams\n    );\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Acquiring Token Interactively in Electron App\nDESCRIPTION: TypeScript function to acquire an access token interactively using MSAL Node in an Electron application. It uses the system browser for authentication and handles custom templates for success and error scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronSystemBrowserTestApp/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n async getTokenInteractive(\n        tokenRequest: SilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        try {\n            const openBrowser = async (url: any) => {\n                await shell.openExternal(url);\n            };\n            const interactiveRequest: InteractiveRequest = {\n                ...tokenRequest,\n                openBrowser,\n                successTemplate: fs\n                    .readFileSync(\"./public/successTemplate.html\", \"utf8\")\n                    .toString(),\n                errorTemplate: fs\n                    .readFileSync(\"./public/errorTemplate.html\", \"utf8\")\n                    .toString(),\n            };\n\n            const authResponse =\n                await this.clientApplication.acquireTokenInteractive(\n                    interactiveRequest\n                );\n            return authResponse;\n        } catch (error) {\n            throw error;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Authority Class for Authentication Endpoint Management\nDESCRIPTION: Defines a comprehensive Authority class that handles endpoint discovery, regional configuration, and authority validation. This internal class manages authority URLs and endpoint discovery for various authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-internal-missing-underscore) The name \"Authority\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal\nexport class Authority {\n    constructor(authority: string, networkInterface: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions, logger: Logger, correlationId: string, performanceClient?: IPerformanceClient, managedIdentity?: boolean);\n    // (undocumented)\n    get authorityType(): AuthorityType;\n    get authorizationEndpoint(): string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    static buildRegionalAuthorityString(host: string, region: string, queryString?: string): string;\n    // Warning: (ae-forgotten-export) The symbol \"ICacheManager\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    protected cacheManager: ICacheManager;\n    get canonicalAuthority(): string;\n    // Warning: (ae-setter-with-docs) The doc comment for the property \"canonicalAuthority\" must appear on the getter, not the setter.\n    set canonicalAuthority(url: string);\n    get canonicalAuthorityUrlComponents(): IUri;\n    // (undocumented)\n    protected correlationId: string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    // Warning: (ae-forgotten-export) The symbol \"CloudDiscoveryMetadata\" needs to be exported by the entry point index.d.ts\n    static createCloudDiscoveryMetadataFromHost(host: string): CloudDiscoveryMetadata;\n    protected get defaultOpenIdConfigurationEndpoint(): string;\n    // (undocumented)\n    get deviceCodeEndpoint(): string;\n    discoveryComplete(): boolean;\n    get endSessionEndpoint(): string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    static generateAuthority(authorityString: string, azureCloudOptions?: AzureCloudOptions): string;\n    getPreferredCache(): string;\n    get hostnameAndPort(): string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    isAlias(host: string): boolean;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    isAliasOfKnownMicrosoftAuthority(host: string): boolean;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    static isPublicCloudAuthority(host: string): boolean;\n    get jwksUri(): string;\n    // (undocumented)\n    protected networkInterface: INetworkModule;\n    get options(): AuthorityOptions;\n    // (undocumented)\n    protected performanceClient: IPerformanceClient | undefined;\n    get protocolMode(): ProtocolMode;\n    // Warning: (ae-forgotten-export) The symbol \"RegionDiscoveryMetadata\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    regionDiscoveryMetadata: RegionDiscoveryMetadata;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    // Warning: (ae-forgotten-export) The symbol \"OpenIdConfigResponse\" needs to be exported by the entry point index.d.ts\n    static replaceWithRegionalInformation(metadata: OpenIdConfigResponse, azureRegion: string): OpenIdConfigResponse;\n    resolveEndpointsAsync(): Promise<void>;\n    get selfSignedJwtAudience(): string;\n    get tenant(): string;\n    get tokenEndpoint(): string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    static transformCIAMAuthority(authority: string): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Plugin for MSAL Node\nDESCRIPTION: Shows how to implement the ICachePlugin interface for custom token cache persistence, including methods for loading and saving cache data.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/caching.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyCachePlugin implements ICachePlugin {\n    private client: ICacheClient;\n\n    constructor(client: ICacheClient) {\n        this.client = client; // client object to access the persistent cache\n    }\n\n    public async beforeCacheAccess(\n        cacheContext: TokenCacheContext\n    ): Promise<void> {\n        const cacheData = await this.client.get(); // get the cache from persistence\n        cacheContext.tokenCache.deserialize(cacheData); // deserialize it to in-memory cache\n    }\n\n    public async afterCacheAccess(\n        cacheContext: TokenCacheContext\n    ): Promise<void> {\n        if (cacheContext.cacheHasChanged) {\n            await this.client.set(cacheContext.tokenCache.serialize()); // deserialize in-memory cache to persistence\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ISerializableTokenCache Interface in TypeScript\nDESCRIPTION: Interface for token cache serialization and deserialization, allowing the cache state to be persisted and restored.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_134\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ISerializableTokenCache {\n    // (undocumented)\n    deserialize: (cache: string) => void;\n    // (undocumented)\n    serialize: () => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Logged-in State Across Tabs in MSAL-Browser\nDESCRIPTION: This snippet shows how to enable account storage events and handle them to sync logged-in state across tabs and windows in an MSAL-Browser application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/events.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance.enableAccountStorageEvents();\nmsalInstance.addEventCallback((message: EventMessage) => {\n    if (message.eventType === EventType.ACCOUNT_ADDED) {\n        // Update UI with new account\n    } else if (message.eventType === EventType.ACCOUNT_REMOVED) {\n        // Update UI with account logged out\n    } else if (message.eventType === EventType.ACTIVE_ACCOUNT_CHANGED) {\n        const accountInfo = msalInstance.getActiveAccount();\n        // Update UI with new active account info\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Base Authentication Request Type in TypeScript\nDESCRIPTION: This snippet defines the BaseAuthRequest type used in MSAL.js for authentication requests. It includes properties for authority, scopes, correlation ID, and various optional parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type BaseAuthRequest = {\n    authority: string;\n    correlationId: string;\n    scopes: Array<string>;\n    authenticationScheme?: AuthenticationScheme;\n    claims?: string;\n    shrClaims?: string;\n    shrNonce?: string;\n    shrOptions?: ShrOptions;\n    resourceRequestMethod?: string;\n    resourceRequestUri?: string;\n    sshJwk?: string;\n    sshKid?: string;\n    azureCloudOptions?: AzureCloudOptions;\n    requestedClaimsHash?: string;\n    maxAge?: number;\n    tokenBodyParameters?: StringDict;\n    tokenQueryParameters?: StringDict;\n    storeInCache?: StoreInCache;\n    scenarioId?: string;\n    popKid?: string;\n    embeddedClientId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Module in Angular App Module\nDESCRIPTION: This snippet demonstrates how to import and initialize the MSAL module in the app.module.ts file. It includes configuration for PublicClientApplication, MsalGuard, and MsalInterceptor.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/initialization.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { MsalModule, MsalService, MsalGuard, MsalInterceptor, MsalBroadcastService, MsalRedirectComponent } from \"@azure/msal-angular\";\nimport { PublicClientApplication, InteractionType, BrowserCacheLocation } from \"@azure/msal-browser\";\n\n@NgModule({\n    imports: [\n        MsalModule.forRoot( new PublicClientApplication({ // MSAL Configuration\n            auth: {\n                clientId: \"Your client ID\",\n                authority: \"Your authority\",\n                redirectUri: \"Your redirect Uri\",\n            },\n            cache: {\n                cacheLocation : BrowserCacheLocation.LocalStorage,\n                storeAuthStateInCookie: true, // set to true for IE 11\n            },\n            system: {\n                loggerOptions: {\n                    loggerCallback: () => {},\n                    piiLoggingEnabled: false\n                }\n            }\n        }), {\n            interactionType: InteractionType.Redirect, // MSAL Guard Configuration\n        }, {\n            interactionType: InteractionType.Redirect, // MSAL Interceptor Configuration\n        })\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: MsalInterceptor,\n            multi: true\n        },\n        MsalService,\n        MsalGuard,\n        MsalBroadcastService\n    ],\n    bootstrap: [AppComponent, MsalRedirectComponent]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node with Certificate Credentials\nDESCRIPTION: JavaScript configuration object for MSAL Node using certificate credentials. This includes client ID, authority, and certificate details. Sensitive information is loaded from environment variables for security.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-with-certs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"dotenv/config\"; // process.env now has the values defined in a .env file\n\nconst config = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_ID\",\n        clientCertificate: {\n            thumbprint: process.env.clientCertificate,\n            privateKey: process.env.privateKey,\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Redirect with MSAL.js\nDESCRIPTION: Shows how to use the loginRedirect method to authenticate a user by redirecting the browser to the authentication page and back to the application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    msalInstance.loginRedirect({});\n} catch (err) {\n    // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Promise in MSAL.js\nDESCRIPTION: This code snippet demonstrates how to use handleRedirectPromise to handle the token exchange after a redirect. It checks for a successful authentication redirect and handles any errors that may occur during the process.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance\n    .handleRedirectPromise()\n    .then((tokenResponse) => {\n        // Check if the tokenResponse is null\n        // If the tokenResponse !== null, then you are coming back from a successful authentication redirect.\n        // If the tokenResponse === null, you are not coming back from an auth redirect.\n    })\n    .catch((error) => {\n        // handle error, either in the library or coming back from the server\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL.js Browser Library in JavaScript\nDESCRIPTION: This code snippet shows configuration options for the MSAL.js browser library, including setting allowNativeBroker and adding temporaryCacheLocation to Cache Options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nallowNativeBroker: true,\ntemporaryCacheLocation: \"\"\n```\n\n----------------------------------------\n\nTITLE: Interface declaration for ICrypto in TypeScript\nDESCRIPTION: Defines a comprehensive interface for cryptographic operations required by MSAL, including base64 encoding/decoding, GUID creation, key management, hashing, and JWT signing functionality.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICrypto {\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    base64Decode(input: string): string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    base64Encode(input: string): string;\n    base64UrlEncode(input: string): string;\n    clearKeystore(): Promise<boolean>;\n    createNewGuid(): string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    encodeKid(inputKid: string): string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string>;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    hashString(plainText: string): Promise<string>;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    removeTokenBindingKey(kid: string): Promise<boolean>;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    signJwt(payload: SignedHttpRequest, kid: string, shrOptions?: ShrOptions, correlationId?: string): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExternalTokenResponse Type in TypeScript\nDESCRIPTION: Declares a type representing the structure of an external token response, including various token-related fields and optional client information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_101\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ExternalTokenResponse = Pick<ServerAuthorizationTokenResponse, \"token_type\" | \"scope\" | \"expires_in\" | \"ext_expires_in\" | \"id_token\" | \"refresh_token\" | \"refresh_token_expires_in\" | \"foci\"> & {\n    access_token?: string;\n    client_info?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Object in JavaScript\nDESCRIPTION: Configuration object for setting up MSAL authentication with client ID and authority details for device code flow\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/device-code/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"YOUR_CLIENT_ID\",\n        authority: \"YOUR_AUTHORITY\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Using Certificate in MSAL Node Configuration\nDESCRIPTION: This JavaScript snippet demonstrates how to read a certificate file, clean the string by removing carriage returns and newlines, and use it in the MSAL Node configuration for client certificate authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/certificate-credentials.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst msal = require(\"@azure/msal-node\");\nconst fs = require(\"fs\");\n\nconst privateKeySource = fs.readFileSync(\"<path_to_key>/certs/example.key\");\nconst privateKey = Buffer.from(privateKeySource, \"base64\")\n    .toString()\n    .replace(/\\r/g, \"\")\n    .replace(/\\n/g, \"\");\n\nconst config = {\n    auth: {\n        clientId: \"YOUR_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/YOUR_TENANT_ID\",\n        clientCertificate: {\n            thumbprintSha256: process.env.thumbprint,\n            privateKey: privateKey,\n        },\n    },\n};\n\n// Create msal application object\nconst cca = new msal.ConfidentialClientApplication(config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Promptless Logout with Account Object\nDESCRIPTION: Implementation of promptless logout by providing the account object to the logout API. MSAL automatically extracts the login_hint claim from the account's ID token to skip the account picker prompt during logout.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/logout.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentAccount = msalInstance.getAccountByHomeId(homeAccountId);\n// The account's ID Token must contain the login_hint optional claim to avoid the account picker\nawait msalInstance.logoutRedirect({ account: currentAccount});\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition with Account Filtering in MSAL Browser\nDESCRIPTION: Demonstrates token acquisition using account filtering by homeAccountId, with silent token acquisition and popup fallback.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/accounts.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getTokenPopup(request, homeAccountId) {\n    // In this case, accounts are filtered by homeAccountId, but more attributes can be added to refine the search and increase the precision of the account filter\n    const accountFilter = {\n        homeAccountId: homeAccountId,\n    };\n    request.account = myMSALObj.getAccount(accountFilter);\n    return await myMSALObj.acquireTokenSilent(request).catch(async (error) => {\n        // Handle error\n        return await myMSALObj.acquireTokenPopup(request);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Errors in MSAL Silent SSO Implementation\nDESCRIPTION: This snippet demonstrates comprehensive error handling for the ssoSilent() method in MSAL. It specifically handles InteractionRequiredAuthError by falling back to interactive login via popup, and handles BrowserAuthError with specific error code detection, providing appropriate fallback behaviors for different error scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/iframe-usage.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    myMSALObj.ssoSilent({\n        sid: sid\n    }).then((response) => {\n            // do something with response\n        }).catch(error => {\n            if (error instanceof msal.InteractionRequiredAuthError) {\n                myMSALObj.loginPopup()\n                    .then((response) => {\n                        // do something with response\n                    });\n            } else if (error instanceof msal.BrowserAuthError) {\n                if (error.errorCode === \"silent_sso_error\") {\n                    // e.g. username is null\n                }\n                if (error.errorCode === \"popup_window_error\") {\n                    // e.g. popups are blocked\n                }\n            } else {\n                console.log(error);\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Filtering Multi-tenant Accounts using MSAL getAccount\nDESCRIPTION: This code snippet demonstrates how to use the getAccount API with a desired tenantId as a filter to acquire a previously cached token for a specific tenant.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/multi-tenant-accounts.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst homeAccountId = \"HOME_ACCOUNT_ID\";\nconst guestTenantId = \"GUEST_TENANT_ID\";\n\nconst guestTenantAccount = myMSALObj.getAccount({\n    homeAccountId: homeAccountId,\n    tenantId: guestTenantId,\n});\n\nlet guestTenantAuthResponse;\nif (guestTenantAccount) {\n    guestTenantAuthResponse = await myMSALObj.acquireTokenSilent({\n        account: guestTenantAccount,\n        ...guestTenantRequest,\n    });\n} else {\n    // authenticate with the guest tenant for the first time\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Handling of Interaction in Progress\nDESCRIPTION: This example shows the correct way to check for ongoing interactions before invoking an interactive API, preventing the 'interaction_in_progress' error.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/errors.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMsal, useIsAuthenticated } from \"@azure/msal-react\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\nimport { useEffect } from \"react\";\n\nexport function exampleComponent() {\n    const { instance, inProgress } = useMsal();\n    const isAuthenticated = useIsAuthenticated();\n\n    useEffect(() => {\n        if (!isAuthenticated && inProgress === InteractionStatus.None) {\n            await instance.loginPopup();\n        }\n    }, [isAuthenticated, inProgress, instance]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMsal Hook for Advanced MSAL Functionality in React\nDESCRIPTION: Illustrates the usage of the useMsal hook to access the PublicClientApplication instance, account list, and interaction status. It also demonstrates token acquisition and API calling.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nconst { instance, accounts, inProgress } = useMsal();\nconst [loading, setLoading] = useState(false);\nconst [apiData, setApiData] = useState(null);\n\nuseEffect(() => {\n    if (!loading && inProgress === InteractionStatus.None && accounts.length > 0) {\n        if (apiData) {\n            // Skip data refresh if already set - adjust logic for your specific use case\n            return;\n        }\n\n        const tokenRequest = {\n            account: accounts[0], // This is an example - Select account based on your app's requirements\n            scopes: [\"User.Read\"]\n        }\n\n        // Acquire an access token\n        instance.acquireTokenSilent(tokenRequest).then((response) => {\n            // Call your API with the access token and return the data you need to save in state\n            callApi(response.accessToken).then((data) => {\n                setApiData(data);\n                setLoading(false);\n            });\n        }).catch(async (e) => {\n            // Catch interaction_required errors and call interactive method to resolve\n            if (e instanceof InteractionRequiredAuthError) {\n                await instance.acquireTokenRedirect(tokenRequest);\n            }\n\n            throw e;\n        });\n    }\n}, [inProgress, accounts, instance, loading, apiData]);\n\nif (loading || inProgress === InteractionStatus.Login) {\n    // Render loading component\n} else if (apiData) {\n    // Render content that depends on data from your API\n}\n```\n\n----------------------------------------\n\nTITLE: MSAL Node Authorization Types\nDESCRIPTION: Type definitions for authorization code and URL requests. Specifies required and optional parameters for different auth flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AuthorizationCodeRequest = Partial<Omit<CommonAuthorizationCodeRequest, \"scopes\" | \"redirectUri\" | \"code\" | \"authenticationScheme\" | \"resourceRequestMethod\" | \"resourceRequestUri\" | \"requestedClaimsHash\" | \"storeInCache\">> & {\n    scopes: Array<string>;\n    redirectUri: string;\n    code: string;\n    state?: string;\n};\n\nexport type AuthorizationUrlRequest = Partial<Omit<CommonAuthorizationUrlRequest, \"scopes\" | \"redirectUri\" | \"resourceRequestMethod\" | \"resourceRequestUri\" | \"authenticationScheme\" | \"requestedClaimsHash\" | \"storeInCache\">> & {\n    scopes: Array<string>;\n    redirectUri: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing MSAL Tenant in Angular Component\nDESCRIPTION: This code shows how to dynamically change the MSAL tenant by creating a new instance of PublicClientApplication in an Angular component. It allows for runtime modification of the authentication configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/multi-tenant.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from '@azure/msal-browser';\nimport { MsalService } from '@azure/msal-angular';\n\n@Component({})\nexport class AppComponent implements OnInit {\n  constructor(\n    private authService: MsalService\n  ) {}\n\n  ngOnInit(): void {\n    this.authService.instance = new PublicClientApplication({\n      auth: {\n        clientId: 'CLIENT_ID_HERE',\n        authority: 'https://login.microsoftonline.com/TENANT_ID_HERE',\n        redirectUri: 'http://localhost:4200',\n        postLogoutRedirectUri: 'http://localhost:4200'\n      }\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Performance Callback in MSAL.js\nDESCRIPTION: This snippet shows how to register a callback function to receive performance measurements from MSAL.js. The callback receives an array of PerformanceEvent objects containing detailed timing information about authentication operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/performance.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst msalInstance = new PublicClientApplication(config);\n\nmsalInstance.addPerformanceCallback((events: PerformanceEvent[]) => {\n    events.forEach(event => {\n        console.log(event);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Module in Angular AppModule\nDESCRIPTION: This snippet demonstrates how to configure the MSAL module in the Angular app module. It sets up the authentication parameters including clientId, authority, and redirect URIs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/multi-tenant.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@NgModule({\n  imports: [\n    MsalModule.forRoot({ // MSAL Configuration\n      auth: {\n        clientId: 'CLIENT_ID_HERE',\n        authority: 'https://login.microsoftonline.com/TENANT_ID_HERE',\n        redirectUri: 'http://localhost:4200',\n        postLogoutRedirectUri: 'http://localhost:4200'\n      },\n      // Additional configuration here\n    });\n  ]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: ScopeSet Class Definition in TypeScript\nDESCRIPTION: Class for managing sets of OAuth scopes. Provides methods for adding, removing, comparing, and intersecting scopes. It also handles special operations for OpenID Connect (OIDC) scopes and string conversions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_167\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ScopeSet {\n    constructor(inputScopes: Array<string>);\n    appendScope(newScope: string): void;\n    appendScopes(newScopes: Array<string>): void;\n    asArray(): Array<string>;\n    containsOnlyOIDCScopes(): boolean;\n    containsScope(scope: string): boolean;\n    containsScopeSet(scopeSet: ScopeSet): boolean;\n    static createSearchScopes(inputScopeString: Array<string>): ScopeSet;\n    static fromString(inputScopeString: string): ScopeSet;\n    getScopeCount(): number;\n    intersectingScopeSets(otherScopes: ScopeSet): boolean;\n    printScopes(): string;\n    printScopesLowerCase(): string;\n    removeOIDCScopes(): void;\n    removeScope(scope: string): void;\n    unionScopeSets(otherScopes: ScopeSet): Set<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Client with Key Vault Certificate\nDESCRIPTION: TypeScript code snippet for retrieving a certificate from Azure Key Vault and configuring the MSAL Node client. It includes setting up the key vault secret client and defining the authentication configuration object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials-with-cert-from-key-vault/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst keyVaultSecretClient = await getKeyVaultSecretClient(\n    \"ENTER_KEY_VAULT_URL\" // optional, the \"KEY_VAULT_URL\" environment variable can be set instead\n);\n[thumbprint, privateKey, x5c] = await getCertificateInfo(\n    keyVaultSecretClient,\n    \"ENTER_CERT_NAME\"\n);\n\nconfig = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_INFO\",\n        clientCertificate: {\n            thumbprintSha256: thumbprint,\n            privateKey: privateKey,\n            x5c: x5c,\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Initial SHR Nonce Acquisition in JavaScript\nDESCRIPTION: This code demonstrates the process of acquiring an initial server-generated nonce by making an authorized request to the resource and handling the 401 Unauthorized response.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/shr-server-nonce.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet shrNonce = null; // Globally scoped variable\n\n// 1. Configure PoP Token Request without a valid SHR Nonce\nconst popTokenRequest = {\n    scopes: [\"User.Read\"],\n    authenticationScheme: msal.AuthenticationScheme.POP,\n    resourceRequestMethod: \"POST\",\n    resourceRequestUri: \"YOUR_RESOURCE_ENDPOINT\"\n    shrNonce: shrNonce // SHR Nonce is invalid as null string at this point\n};\n\n\n // Get PoP token to make authenticated request\nconst shr = await publicClientApplication.acquireTokenSilent(popTokenRequest);\n\n// Set up PoP Resource request\nconst reqHeaders = new Headers();\nconst authorizationHeader = `PoP ${shr}`;\n\nheaders.append(\"Authorization\", authorizationHeader);\n\nconst options = {\n    method: method,\n    headers: headers\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Web API Application in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the configuration object for the MSAL Node Web API application. It includes properties for cloud instance, tenant ID, client ID, client secret, and required permissions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/on-behalf-of-distributed-cache/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst appConfig: AppConfig = {\n    instance: process.env.INSTANCE || \"ENTER_CLOUD_INSTANCE_HERE\",\n    tenantId: process.env.TENANT_ID || \"ENTER_TENANT_ID_HERE\",\n    clientId: process.env.CLIENT_ID || \"ENTER_CLIENT_ID_HERE\",\n    clientSecret: process.env.CLIENT_SECRET || \"ENTER_CLIENT_SECRET_HERE\",\n    permissions: process.env.PERMISSIONS || \"ENTER_REQUIRED_PERMISSIONS_HERE\", // e.g. \"access_as_user\"\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Account Token Acquisition using getAllAccounts in MSAL Node\nDESCRIPTION: Demonstrates how to retrieve all cached accounts and acquire tokens silently for a selected account. The code shows the implementation of getAllAccounts() API followed by token acquisition.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/accounts.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initiates Acquire Token Silent flow\nfunction callAcquireTokenSilent() {\n    // Find all accounts\n    const msalTokenCache = myMSALObj.getTokenCache();\n    const cachedAccounts = await msalTokenCache.getAllAccounts();\n\n    // Account selection logic would go here\n\n    const account = .... // Select Account code\n\n    // Build silent request after account is selected\n    const silentRequest = {\n        account: account,\n        scopes: scopes,\n    };\n\n    // Acquire Token Silently to be used in MS Graph call\n    myMSALObj.acquireTokenSilent(silentRequest)\n        .then((response) => {\n            // Successful response handling\n        })\n        .catch((error) => {\n            // Error handling\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local-Only Logout in MSAL.js\nDESCRIPTION: Configuration to skip the server sign-out process by using the onRedirectNavigate callback. This performs only local cache clearing without terminating the server session, which means the user can be signed back in without credentials.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/logout.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance.logoutRedirect({\n    onRedirectNavigate: (url) => {\n        // Return false if you would like to stop navigation after local logout\n        return false;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: MSAL Configuration JSON for Angular Application\nDESCRIPTION: This JSON snippet provides a sample configuration for MSAL in an Angular application. It includes settings for authentication, caching, guard, and interceptor, which are used by the MsalConfigDynamicModule.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"msal\": {\n    \"auth\": {\n      \"clientId\": \"clientid\",\n      \"authority\": \"https://login.microsoftonline.com/common/\",\n      \"redirectUri\": \"http://localhost:4200/\",\n      \"postLogoutRedirectUri\": \"http://localhost:4200/\",\n      \"navigateToLoginRequestUrl\": true\n    },\n    \"cache\": {\n      \"cacheLocation\": \"localStorage\",\n      \"storeAuthStateInCookie\": true\n    }\n  },\n  \"guard\": {\n    \"interactionType\": \"redirect\",\n    \"authRequest\": {\n      \"scopes\": [\"user.read\"]\n    },\n    \"loginFailedRoute\": \"/login-failed\"\n  },\n  \"interceptor\": {\n    \"interactionType\": \"redirect\",\n    \"protectedResourceMap\": [[\"https://graph.microsoft.com/v1.0/me\", [\"user.read\"]]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing INavigationClient Interface in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom navigation client by implementing the INavigationClient interface. It includes methods for both internal and external navigation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/navigation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomNavigationClient implements INavigationClient {\n    async navigateInternal(url, options) {\n        // Your custom logic\n    }\n\n    async navigateExternal(url, options) {\n        // Your custom logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PFX to PEM Programmatically with Node-Forge\nDESCRIPTION: This JavaScript function uses the node-forge library to convert a PFX encoded certificate to PEM format programmatically. It extracts both the certificate and private key from the PFX file.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/certificate-credentials.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst forge = require(\"node-forge\");\n\n/**\n * @param {string} pfx: certificate + private key combination in pfx format\n * @param {string} passphrase: passphrase used to encrypt pfx file\n * @returns {Object}\n */\nfunction convertPFX(pfx, passphrase = null) {\n    const asn = forge.asn1.fromDer(forge.util.decode64(pfx));\n    const p12 = forge.pkcs12.pkcs12FromAsn1(asn, true, passphrase);\n\n    // Retrieve key data\n    const keyData = p12\n        .getBags({ bagType: forge.pki.oids.pkcs8ShroudedKeyBag })\n        [forge.pki.oids.pkcs8ShroudedKeyBag].concat(\n            p12.getBags({ bagType: forge.pki.oids.keyBag })[\n                forge.pki.oids.keyBag\n            ]\n        );\n\n    // Retrieve certificate data\n    const certBags = p12.getBags({ bagType: forge.pki.oids.certBag })[\n        forge.pki.oids.certBag\n    ];\n    const certificate = forge.pki.certificateToPem(certBags[0].cert);\n\n    // Convert a Forge private key to an ASN.1 RSAPrivateKey\n    const rsaPrivateKey = forge.pki.privateKeyToAsn1(keyData[0].key);\n\n    // Wrap an RSAPrivateKey ASN.1 object in a PKCS#8 ASN.1 PrivateKeyInfo\n    const privateKeyInfo = forge.pki.wrapRsaPrivateKey(rsaPrivateKey);\n\n    // Convert a PKCS#8 ASN.1 PrivateKeyInfo to PEM\n    const privateKey = forge.pki.privateKeyInfoToPem(privateKeyInfo);\n\n    console.log(\"Converted certificate: \\n\", certificate);\n    console.log(\"Converted key: \\n\", privateKey);\n\n    return {\n        certificate: certificate,\n        key: privateKey,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring a PoP Token with Custom SHR Claims using MSAL Browser\nDESCRIPTION: Demonstrates how to call the acquireTokenRedirect method with a configured POP token request. This snippet shows the actual acquisition of the token after the request object has been set up with custom SHR claims.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/shr-client-claims.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await myMSALObj.acquireTokenRedirect(popTokenRequest);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Callback in MSAL-Browser JavaScript\nDESCRIPTION: This snippet shows how to add an event callback to consume emitted events in an application using MSAL-Browser.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/events.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst callbackId = msalInstance.addEventCallback((message: EventMessage) => {\n    // Update UI or interact with EventMessage here\n    if (message.eventType === EventType.LOGIN_SUCCESS) {\n        console.log(message.payload);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Confidential Client Application in JavaScript\nDESCRIPTION: This code sets up the configuration object for the MSAL Node confidentialClientApplication class constructor.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/b2c-user-flows/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst confidentialClientConfig = {\n    auth: {\n        clientId: config.authOptions.clientId,\n        authority: config.policies.authorities.signUpSignIn.authority,\n        clientSecret: process.env.CLIENT_SECRET,\n        knownAuthorities: [config.policies.authorityDomain],\n    },\n};\n\n// Create an MSAL PublicClientApplication object\nconst confidentialClientApp = new msal.ConfidentialClientApplication(\n    confidentialClientConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Protecting Components with MSAL Authentication Templates\nDESCRIPTION: Demonstrates the use of AuthenticatedTemplate, UnauthenticatedTemplate, and MsalAuthenticationTemplate for conditional rendering based on authentication state.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/class-components.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, MsalAuthenticationTemplate } from \"@azure/msal-react\";\nimport { PublicClientApplication, InteractionType } from \"@azure/msal-browser\";\n\nconst pca = new PublicClientApplication(config);\n\nclass App extends React.Component {\n    render() {\n        return (\n            <MsalProvider instance={pca}>\n                <AuthenticatedTemplate>\n                    <span>This will only render for authenticated users</span>\n                </ AuthenticatedTemplate>\n                <UnauthenticatedTemplate>\n                    <span>This will only render for unauthenticated users</span>\n                </ UnauthenticatedTemplate>\n                <MsalAuthenticationTemplate interactionType={InteractionType.Popup}>\n                    <span>This will only render for authenticated users.</span>\n                </ MsalAuthenticationTemplate>\n            </ MsalProvider>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Client in JavaScript\nDESCRIPTION: Example configuration object for MSAL Node client. Demonstrates how to set up client ID, authority, known authorities, and client secret (for confidential clients). The client secret is stored in an environment variable for security.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"YOUR_CLIENT_ID\",\n        authority: \"YOUR_AUTHORITY_URL\",\n        knownAuthorities: [\"YOUR_KNOWN_AUTHORITY\"], // typically applies to apps on Azure Active Directory B2C\n        clientSecret: process.env.CLIENT_SECRET, // only applies to Confidential Client applications, such as backend web applications\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Bearer Access Token with MSAL.js in TypeScript\nDESCRIPTION: Example showing how to acquire a standard Bearer token using MSAL and append it to an HTTP request's Authorization header. This demonstrates the default token acquisition flow without Proof-of-Possession.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/access-token-proof-of-possession.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Using the Bearer scheme (default), acquireTokenRedirect returns an AuthenticationResult object containing the Bearer access token secret\nconst { accessToken } = await myMSALObj.acquireTokenRedirect(popTokenRequest);\n\n// The bearer token secret is appended to the Authorization header\nconst headers = new Headers();\nconst authHeader = `Bearer ${accessToken}`; // The Bearer label is used in this header\nheaders.append(\"Authorization\", authHeader);\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in MSAL-Browser Event Callbacks\nDESCRIPTION: This snippet shows how to handle errors emitted with an event by checking if the error is an instance of AuthError.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/events.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst callbackId = msalInstance.addEventCallback((message: EventMessage) => {\n    // Update UI or interact with EventMessage here\n    if (message.eventType === EventType.LOGIN_FAILURE) {\n        if (message.error instanceof AuthError) {\n            // Do something with the error\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initial Token Acquisition with Auth Code Flow in MSAL Node\nDESCRIPTION: Shows the implementation of initial token acquisition using authorization code flow, where homeAccountId or localAccountId is obtained from the auth response for future use.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/accounts.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize global homeAccountId variable, ideally stored in application state\nlet homeAccountId = null; // Same for localAccountId\n\n// Get MSAL Token Cache from MSAL Client Applicaiton object\nconst msalTokenCache = myMSALObj.getTokenCache();\n\n// Initial token acquisition, second leg of Auth Code flow\nfunction getTokenAuthCode() {\n    const tokenRequest = {\n        code: req.query.code,\n        redirectUri: \"http://localhost:3000/redirect\",\n        scopes: scopes,\n    };\n\n    myMSALObj.acquireTokenByCode(tokenRequest).then((response) => {\n        // Home account ID or local account ID to be used to find the right account before acquireTokenSilent\n        homeAccountId = response.account.homeAccountId; // Same for localAccountId\n        .\n        .\n        .\n        // Handle successful token response\n    }).catch((error) => {\n        // Handle token request error\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Code Client for OAuth2 Authorization Code Flow\nDESCRIPTION: Defines the client class for implementing the OAuth2 authorization code flow. This internal class handles token acquisition with authorization codes and logout functionality.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-internal-missing-underscore) The name \"AuthorizationCodeClient\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal\nexport class AuthorizationCodeClient extends BaseClient {\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient);\n    // Warning: (tsdoc-code-span-missing-delimiter) The code span is missing its closing backtick\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult>;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string;\n    // (undocumented)\n    protected includeRedirectUri: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Node for SNI Authentication\nDESCRIPTION: Shows how to configure and initialize MSAL Node for Subject Name/Issuer (SNI) authentication using certificate credentials. It includes setting up the config object with client ID, authority, and certificate details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/sni.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar msal = require('@azure/msal-node');\nrequire('dotenv').config(); // process.env now has the values defined in a .env file\n\nconst config = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_ID\",\n        clientCertificate: {\n                thumbprintSha256: process.env.thumbprint,\n                privateKey: process.env.privateKey,\n                x5c: process.env.x5c\n            }\n   }\n};\n\n// Create msal application object\nconst cca = new msal.ConfidentialClientApplication(config);\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting Active Account on Page Load\nDESCRIPTION: Example of checking for an active account and setting it on initial page load in an Angular application. This ensures that the correct account is used throughout the application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/FAQ.md#2025-04-18_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.msalBroadcastService.inProgress$\n  .pipe(\n    filter((status: InteractionStatus) => status === InteractionStatus.None)\n  )\n  .subscribe(() => {\n    const accounts = this.authService.instance.getAllAccounts();\n    this.authService.instance.setActiveAccount(accounts[0]);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserWindow in Electron for MSAL Node Extensions\nDESCRIPTION: Configuration for the BrowserWindow in Electron's main.ts file to enable Node.js integration and disable context isolation. This prevents the 'require is not defined' error when using webpack with msal-node-extensions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/faq.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst mainWindow = new BrowserWindow({\n  height: 600,\n  webPreferences: {\n    contextIsolation: false,\n    nodeIntegration: true\n  },\n  width: 800\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL to Bypass Authority Metadata Resolution\nDESCRIPTION: This snippet shows how to configure PublicClientApplication or ConfidentialClientApplication to bypass authority metadata resolution by providing pre-fetched authority metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/performance.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalInstance = new PublicClientApplication({\n    auth: {\n        authorityMetadata: '{\"token_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/token\",\"token_endpoint_auth_methods_supported\":[\"client_secret_post\",\"private_key_jwt\",\"client_secret_basic\"],\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\"response_modes_supported\":[\"query\",\"fragment\",\"form_post\"],\"subject_types_supported\":[\"pairwise\"],\"id_token_signing_alg_values_supported\":[\"RS256\"],\"response_types_supported\":[\"code\",\"id_token\",\"code id_token\",\"id_token token\"],\"scopes_supported\":[\"openid\",\"profile\",\"email\",\"offline_access\"],\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"request_uri_parameter_supported\":false,\"userinfo_endpoint\":\"https://graph.microsoft.com/oidc/userinfo\",\"authorization_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\",\"http_logout_supported\":true,\"frontchannel_logout_supported\":true,\"end_session_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/logout\",\"claims_supported\":[\"sub\",\"iss\",\"cloud_instance_name\",\"cloud_instance_host_name\",\"cloud_graph_host_name\",\"msgraph_host\",\"aud\",\"exp\",\"iat\",\"auth_time\",\"acr\",\"nonce\",\"preferred_username\",\"name\",\"tid\",\"ver\",\"at_hash\",\"c_hash\",\"email\"],\"tenant_region_scope\":null,\"cloud_instance_name\":\"microsoftonline.com\",\"cloud_graph_host_name\":\"graph.windows.net\",\"msgraph_host\":\"graph.microsoft.com\",\"rbac_url\":\"https://pas.windows.net\"}'\n    }\n});\n\n// OR\n\nconst msalInstance = new ConfidentialClientApplication({\n    auth: {\n        authorityMetadata: '{\"token_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/token\",\"token_endpoint_auth_methods_supported\":[\"client_secret_post\",\"private_key_jwt\",\"client_secret_basic\"],\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\"response_modes_supported\":[\"query\",\"fragment\",\"form_post\"],\"subject_types_supported\":[\"pairwise\"],\"id_token_signing_alg_values_supported\":[\"RS256\"],\"response_types_supported\":[\"code\",\"id_token\",\"code id_token\",\"id_token token\"],\"scopes_supported\":[\"openid\",\"profile\",\"email\",\"offline_access\"],\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"request_uri_parameter_supported\":false,\"userinfo_endpoint\":\"https://graph.microsoft.com/oidc/userinfo\",\"authorization_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\",\"http_logout_supported\":true,\"frontchannel_logout_supported\":true,\"end_session_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/logout\",\"claims_supported\":[\"sub\",\"iss\",\"cloud_instance_name\",\"cloud_instance_host_name\",\"cloud_graph_host_name\",\"msgraph_host\",\"aud\",\"exp\",\"iat\",\"auth_time\",\"acr\",\"nonce\",\"preferred_username\",\"name\",\"tid\",\"ver\",\"at_hash\",\"c_hash\",\"email\"],\"tenant_region_scope\":null,\"cloud_instance_name\":\"microsoftonline.com\",\"cloud_graph_host_name\":\"graph.windows.net\",\"msgraph_host\":\"graph.microsoft.com\",\"rbac_url\":\"https://pas.windows.net\"}'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL 2.x PublicClientApplication\nDESCRIPTION: Creates an instance of the MSAL 2.x PublicClientApplication for authentication, replacing the UserAgentApplication from v1.x.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v1-migration.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as msal from \"@azure/msal-browser\";\n\nconst msalInstance = new msal.PublicClientApplication(config);\n```\n\n----------------------------------------\n\nTITLE: Silent Acquisition of SSH Certificate with Fallback in TypeScript\nDESCRIPTION: This snippet demonstrates how to silently acquire an SSH certificate using MSAL's acquireTokenSilent method. If silent acquisition fails, it falls back to interactive acquisition using acquireTokenRedirect.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/ssh-certificates.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Configure SSH Key Data\nconst sshKeyData = {\n    key: PUBLIC_KEY_JWK, // Replace with your SSH Public Key in JSON Web Key object format\n    keyId: \"PUBLIC_KEY_ID\" // Replace with the SSH Public Key's unique ID\n};\n\n// Configure SSH Certificate Request\nconst silentSshCertificateRequest = {\n    scopes: [\"SAMPLE_SSH_SCOPE\"], // Replace with your resource's scope\n    authenticationScheme: msal.AuthenticationScheme.SSH,\n    sshJwk: JSON.stringify(sshKeyData.key),\n    sshKid: sshKeyData.keyId\n}\n\n// Try to acquire certificate silently\nconst { accessToken } = await myMSALObj.acquireTokenSilent(silentSshTokenRequest).catch(async (error) => {\n        console.log(\"Silent token acquisition failed.\");\n        if (error instanceof msal.InteractionRequiredAuthError) {\n            // Fallback to interaction if silent call fails\n            console.log(\"Acquiring SSH Certificate using redirect\");\n            myMSALObj.acquireTokenRedirect(silentSshCertificateRequest);\n        } else {\n            console.error(error);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Protected and Unprotected Resources\nDESCRIPTION: Example showing how to configure a mix of protected and unprotected resources using null scopes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-interceptor.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    interactionType: InteractionType.Redirect,\n    protectedResourceMap: new Map<string, Array<string> | null>([\n        [\"https://graph.microsoft.com/v1.0/me\", [\"user.read\", \"profile\"]],\n        [\"https://myapplication.com/unprotected\", null],\n        [\"https://myapplication.com/unprotected/post\", [{ httpMethod: 'POST', scopes: null }]],\n        [\"https://myapplication.com\", [\"custom.scope\"]]\n    ]),\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Application Instance in MSAL 2.x\nDESCRIPTION: Example of how to instantiate a PublicClientApplication in MSAL 2.x. This shows the approach that was used in the previous version, which is being replaced in MSAL 3.x.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v2-migration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst msalConfig = {\n    auth: {\n        clientId: 'your_client_id'\n    }\n};\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node client application\nDESCRIPTION: This code snippet shows the configuration object for the MSAL Node client application. It includes placeholders for the client ID and tenant ID, which need to be replaced with actual values obtained during app registration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-cli-app/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_ID\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: RequestParameterBuilder Namespace Declaration in TypeScript\nDESCRIPTION: Declares a namespace containing methods for building authentication request parameters. This includes functions for adding various parameters to authentication requests such as scopes, client ID, and claims.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_163\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare namespace RequestParameterBuilder {\n    export {\n        instrumentBrokerParams,\n        addResponseType,\n        addResponseMode,\n        addNativeBroker,\n        addScopes,\n        addClientId,\n        addRedirectUri,\n        addPostLogoutRedirectUri,\n        addIdTokenHint,\n        addDomainHint,\n        addLoginHint,\n        addCcsUpn,\n        addCcsOid,\n        addSid,\n        addClaims,\n        addCorrelationId,\n        addLibraryInfo,\n        addApplicationTelemetry,\n        addPrompt,\n        addState,\n        addNonce,\n        addCodeChallengeParams,\n        addAuthorizationCode,\n        addDeviceCode,\n        addRefreshToken,\n        addCodeVerifier,\n        addClientSecret,\n        addClientAssertion,\n        addClientAssertionType,\n        addOboAssertion,\n        addRequestTokenUse,\n        addGrantType,\n        addClientInfo,\n        addInstanceAware,\n        addExtraQueryParameters,\n        addClientCapabilitiesToClaims,\n        addUsername,\n        addPassword,\n        addPopToken,\n        addSshJwk,\n        addServerTelemetry,\n        addThrottling,\n        addLogoutHint,\n        addBrokerParameters,\n        addEARParameters\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring and Using PoP Tokens with acquireTokenRedirect in MSAL.js\nDESCRIPTION: Complete example of acquiring a Proof-of-Possession token using the acquireTokenRedirect API, then adding it to an HTTP request and executing the request. Demonstrates the full workflow from token acquisition to resource access.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/access-token-proof-of-possession.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await myMSALObj.acquireTokenRedirect(popTokenRequest);\n\n// Once a Pop Token has been acquired, it can be added on the authorization header of a resource request\nconst headers = new Headers();\nconst authHeader = `${response.tokenType} ${response.accessToken}`;\n\nheaders.append(\"Authorization\", authHeader);\n\nconst options = {\n    method: popTokenRequest.resourceRequestMethod,\n    headers: headers\n};\n\n// After the request has been built and the POP access token has bee appended, the request can be executed using an API like \"fetch\"\nfetch(endpoint, options)\n    .then(response => response.json())\n    .then(response => callback(response, endpoint))\n    .catch(error => console.log(error));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding SSH JWK to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds an SSH JSON Web Key to request parameters. This is used for SSH certificate authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addSshJwk(parameters: Map<string, string>, sshJwkString: string): void;\n```\n\n----------------------------------------\n\nTITLE: Handling Password Reset User-Flow in Azure AD B2C with MSAL.js\nDESCRIPTION: This code snippet demonstrates how to handle the legacy password-reset user-flow in Azure AD B2C using MSAL.js. It catches the AADB2C90118 error code and initiates a login request against a tenant-specific authority with the password reset user-flow appended.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/FAQ.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npca.loginPopup()\n    .then((response) => {\n        // do something with auth response\n    })\n    .catch((error) => {\n        // Error handling\n        if (error.errorMessage) {\n            // Check for forgot password error\n            // Learn more about AAD error codes at https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-aadsts-error-codes\n            if (error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n                // For password reset, initiate a login request against tenant-specific authority with user-flow string appended\n                pca.loginPopup({\n                    authority:\n                        \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_reset\",\n                });\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Silent Token Acquisition using Account ID in MSAL Node\nDESCRIPTION: Demonstrates how to use getAccountByHomeId or getAccountByLocalId to retrieve a specific account and acquire tokens silently for that account.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/accounts.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getResource() {\n    // Find account using homeAccountId or localAccountId built after receiving auth code token response\n    const account = await msalTokenCache.getAccountByHomeId(\n        app.locals.homeAccountId\n    ); // alternativley: await msalTokenCache.getAccountByLocalId(localAccountId) if using localAccountId\n\n    // Build silent request\n    const silentRequest = {\n        account: account,\n        scopes: scopes,\n    };\n    // Acquire Token Silently to be used in Resource API calll\n    pca.acquireTokenSilent(silentRequest)\n        .then((response) => {\n            // Handle successful resource API response\n        })\n        .catch((error) => {\n            // Handle resource API request error\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scopes to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds resource scopes to request parameters. Optionally adds OpenID Connect scopes and default scopes if specified. Scopes define the permissions requested for the token.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addScopes(parameters: Map<string, string>, scopes: string[], addOidcScopes?: boolean, defaultScopes?: Array<string>): void;\n```\n\n----------------------------------------\n\nTITLE: Device Code Flow Implementation in MSAL Node\nDESCRIPTION: Shows implementation of device code flow authentication for devices without browser access or with input constraints. Includes configuration setup and token acquisition using acquireTokenByDeviceCode().\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/request.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"your_client_id_here\",\n        authority: \"your_authority_here\",\n    },\n};\n\nconst pca = new msal.PublicClientApplication(msalConfig);\n\nconst deviceCodeRequest = {\n    deviceCodeCallback: (response) => console.log(response.message),\n    scopes: [\"user.read\"],\n};\n\npca.acquireTokenByDeviceCode(deviceCodeRequest)\n    .then((response) => {\n        console.log(JSON.stringify(response));\n    })\n    .catch((error) => {\n        console.log(JSON.stringify(error));\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding Throttling Parameter to Authentication Request in MSAL.js (TypeScript)\nDESCRIPTION: Adds parameters related to request throttling. This helps manage request rates and prevents overloading the authentication service.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addThrottling(parameters: Map<string, string>): void;\n```\n\n----------------------------------------\n\nTITLE: MSAL Node Client Application Classes\nDESCRIPTION: Abstract base class and implementations for client applications. Includes methods for token acquisition and management.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class ClientApplication {\n    protected constructor(configuration: Configuration);\n    acquireTokenByCode(request: AuthorizationCodeRequest, authCodePayLoad?: AuthorizationCodePayload): Promise<AuthenticationResult>;\n    acquireTokenByRefreshToken(request: RefreshTokenRequest): Promise<AuthenticationResult | null>;\n    // Additional methods omitted for brevity\n}\n\nexport class ClientCredentialClient extends BaseClient {\n    constructor(configuration: ClientConfiguration, appTokenProvider?: IAppTokenProvider);\n    acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null>;\n    getCachedAuthenticationResult(request: CommonClientCredentialRequest, config: ClientConfiguration | ManagedIdentityConfiguration, cryptoUtils: ICrypto, authority: Authority, cacheManager: CacheManager, serverTelemetryManager?: ServerTelemetryManager | null): Promise<[AuthenticationResult | null, CacheOutcome]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CacheManager Abstract Class in TypeScript\nDESCRIPTION: Defines an abstract class for managing authentication token caches, including methods for retrieving and filtering various types of tokens and metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_79\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport abstract class CacheManager implements ICacheManager {\n    constructor(clientId: string, cryptoImpl: ICrypto, logger: Logger, staticAuthorityOptions?: StaticAuthorityOptions);\n    accessTokenKeyMatchesFilter(inputKey: string, filter: CredentialFilter, keyMustContainAllScopes: boolean): boolean;\n    protected clientId: string;\n    credentialMatchesFilter(entity: ValidCredentialType, filter: CredentialFilter): boolean;\n    protected cryptoImpl: ICrypto;\n    generateAuthorityMetadataCacheKey(authority: string): string;\n    getAccessToken(account: AccountInfo, request: BaseAuthRequest, tokenKeys?: TokenKeys, targetRealm?: string, performanceClient?: IPerformanceClient, correlationId?: string): AccessTokenEntity | null;\n    abstract getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null;\n    getAccessTokensByFilter(filter: CredentialFilter): AccessTokenEntity[];\n    abstract getAccount(accountKey: string, logger?: Logger): AccountEntity | null;\n    getAccountInfoFilteredBy(accountFilter: AccountFilter): AccountInfo | null;\n    abstract getAccountKeys(): string[];\n    getAccountsFilteredBy(accountFilter: AccountFilter): AccountEntity[];\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[];\n    abstract getAppMetadata(appMetadataKey: string): AppMetadataEntity | null;\n    getAppMetadataFilteredBy(filter: AppMetadataFilter): AppMetadataCache;\n    abstract getAuthorityMetadata(key: string): AuthorityMetadataEntity | null;\n    getAuthorityMetadataByAlias(host: string): AuthorityMetadataEntity | null;\n    abstract getAuthorityMetadataKeys(): Array<string>;\n    getBaseAccountInfo(accountFilter: AccountFilter): AccountInfo | null;\n    getIdToken(account: AccountInfo, tokenKeys?: TokenKeys, targetRealm?: string, performanceClient?: IPerformanceClient, correlationId?: string): IdTokenEntity | null;\n    abstract getIdTokenCredential(idTokenKey: string): IdTokenEntity | null;\n    getIdTokensByFilter(filter: CredentialFilter, tokenKeys?: TokenKeys): Map<string, IdTokenEntity>;\n    abstract getKeys(): string[];\n    getRefreshToken(account: AccountInfo, familyRT: boolean, tokenKeys?: TokenKeys, performanceClient?: IPerformanceClient, correlationId?: string): RefreshTokenEntity | null;\n    abstract getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null;\n    abstract getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null;\n    abstract getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null;\n    abstract getTokenKeys(): TokenKeys;\n    idTokenKeyMatchesFilter(inputKey: string, filter: CredentialFilter): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL.js for Non-Microsoft Identity Providers\nDESCRIPTION: This snippet outlines the key configuration changes required when using MSAL.js with non-Microsoft identity providers. It includes setting the authority, protocol mode, OIDCOptions, and manual endpoint configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/VanillaJSTestApp2.0/app/facebook-sample/Readme.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- You must change the authority in the config to an authority supported by the identity provider. Additionally, for non-Microsoft authorities, you must add the authority (without the https://) to the knownAuthorities parameter in the config.\n- You must set the protocol mode to OIDC.\n- You have the option of configuring different authentication options when using OIDC protocol mode. These are set in the OIDCOptions parameter.\n    - The `serverResponseType` parameter sets the format supported by MSAL for requests and server responses. Supported options are:\n        - `ServerResponseType.FRAGMENT` (for a hash fragment). If not set, MSAL defaults to `ServerResponseType.FRAGMENT`. If supported by the identity provider, we highly recommend using `ServerResponseType.FRAGMENT`.\n        - `ServerResponseType.QUERY` (for a query parameter). We recommend using `ServerResponseType.QUERY` only if the identity provider does not support sending server responses in a hash fragment.\n    - The `defaultScopes` parameter provides the option to override the default scopes sent by MSAL. If not set, it defaults to [\"openid\", \"profile\", \"offline_access\"]. If `defaultScopes` does not include \"openid\", MSAL will automatically add it for OIDC compliance.\n- You have the option to manually configure endpoints used by the identity provider. If not set, MSAL will attempt to discover the endpoints. Manual endpoint configuration should be passed in a stringified JSON object and include issuer, authorization_endpoint, token_endpoint, jwks_uri, and (if available) end_session_endpoint.\n- You must not set allowPlatformBroker to true when using a non-Microsoft identity provider.\n- If the identity provider does not have an end_session_endpoint, MSAL will not automatically redirect the page upon logout.\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL to Bypass Cloud Instance Discovery Resolution\nDESCRIPTION: This snippet demonstrates how to configure PublicClientApplication or ConfidentialClientApplication to bypass cloud instance discovery resolution by providing pre-fetched cloud discovery metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/performance.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalInstance = new PublicClientApplication({\n    auth: {\n        cloudDiscoveryMetadata: '{\"tenant_discovery_endpoint\":\"https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\",\"api-version\":\"1.1\",\"metadata\":[{\"preferred_network\":\"login.microsoftonline.com\",\"preferred_cache\":\"login.windows.net\",\"aliases\":[\"login.microsoftonline.com\",\"login.windows.net\",\"login.microsoft.com\",\"sts.windows.net\"]},{\"preferred_network\":\"login.partner.microsoftonline.cn\",\"preferred_cache\":\"login.partner.microsoftonline.cn\",\"aliases\":[\"login.partner.microsoftonline.cn\",\"login.chinacloudapi.cn\"]},{\"preferred_network\":\"login.microsoftonline.de\",\"preferred_cache\":\"login.microsoftonline.de\",\"aliases\":[\"login.microsoftonline.de\"]},{\"preferred_network\":\"login.microsoftonline.us\",\"preferred_cache\":\"login.microsoftonline.us\",\"aliases\":[\"login.microsoftonline.us\",\"login.usgovcloudapi.net\"]},{\"preferred_network\":\"login-us.microsoftonline.com\",\"preferred_cache\":\"login-us.microsoftonline.com\",\"aliases\":[\"login-us.microsoftonline.com\"]}]}'\n    }\n});\n\n// OR\n\nconst msalInstance = new ConfidentialClientApplication({\n    auth: {\n        cloudDiscoveryMetadata: '{\"tenant_discovery_endpoint\":\"https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\",\"api-version\":\"1.1\",\"metadata\":[{\"preferred_network\":\"login.microsoftonline.com\",\"preferred_cache\":\"login.windows.net\",\"aliases\":[\"login.microsoftonline.com\",\"login.windows.net\",\"login.microsoft.com\",\"sts.windows.net\"]},{\"preferred_network\":\"login.partner.microsoftonline.cn\",\"preferred_cache\":\"login.partner.microsoftonline.cn\",\"aliases\":[\"login.partner.microsoftonline.cn\",\"login.chinacloudapi.cn\"]},{\"preferred_network\":\"login.microsoftonline.de\",\"preferred_cache\":\"login.microsoftonline.de\",\"aliases\":[\"login.microsoftonline.de\"]},{\"preferred_network\":\"login.microsoftonline.us\",\"preferred_cache\":\"login.microsoftonline.us\",\"aliases\":[\"login.microsoftonline.us\",\"login.usgovcloudapi.net\"]},{\"preferred_network\":\"login-us.microsoftonline.com\",\"preferred_cache\":\"login-us.microsoftonline.com\",\"aliases\":[\"login-us.microsoftonline.com\"]}]}'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Application Instance in MSAL 3.x (Option 1)\nDESCRIPTION: MSAL 3.x requires explicit initialization. This option shows how to instantiate a PublicClientApplication and then initialize it asynchronously before using other MSAL APIs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v2-migration.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst msalConfig = {\n    auth: {\n        clientId: 'your_client_id'\n    }\n};\n\nconst msalInstance = new PublicClientApplication(msalConfig);\nawait msalInstance.initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL with Single Tenant Authority\nDESCRIPTION: Configuration for single-tenant applications that requires specific tenant ID in the authority URL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/initialize-public-client-application.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n        authority: \"https://login.microsoftonline.com/{your_tenant_id}\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Protected Resource Map with Method-Specific Scopes\nDESCRIPTION: Example showing how to configure protected resources with HTTP method-specific scopes using ProtectedResourceScopes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-interceptor.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    interactionType: InteractionType.Redirect,\n    protectedResourceMap: new Map<string, Array<string|ProtectedResourceScopes> | null>([\n        [\"https://graph.microsoft.com/v1.0/me\", [\"user.read\"]],\n        [\"http://myapplication.com\", [\n            {\n                httpMethod: \"POST\",\n                scopes: [\"write.scope\"]\n            }\n        ]]\n    ])\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Redirect URI to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds a redirect URI to request parameters. This defines where the authorization server will redirect the user after authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addRedirectUri(parameters: Map<string, string>, redirectUri: string): void;\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Response in Azure AD B2C Authentication Flow with JavaScript\nDESCRIPTION: This code handles the redirect response from Azure AD B2C after user authentication. It processes various authentication scenarios including sign-in, token acquisition, password reset, and profile editing. The code validates CSRF tokens, exchanges authorization codes for tokens, and handles error cases like forgotten passwords.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/b2c-user-flows/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Second leg of auth code grant\napp.post(\"/redirect\", async (req, res, next) => {\n    if (!req.body.state) {\n        return next(new Error(\"State not found\"));\n    }\n\n    // read the state object and determine the stage of the flow\n    const state = JSON.parse(cryptoProvider.base64Decode(req.body.state));\n\n    if (state.csrfToken === req.session.csrfToken) {\n        switch (state.appStage) {\n            case APP_STAGES.SIGN_IN:\n                req.session.authCodeRequest.code = req.body.code; // authZ code\n                req.session.authCodeRequest.codeVerifier =\n                    req.session.pkceCodes.verifier; // PKCE Code Verifier\n\n                try {\n                    const tokenResponse =\n                        await clientApplication.acquireTokenByCode(\n                            req.session.authCodeRequest\n                        );\n                    req.session.account = tokenResponse.account;\n                    req.session.isAuthenticated = true;\n                    res.redirect(\"/\");\n                } catch (error) {\n                    if (req.body.error) {\n                        /**\n                         * When the user selects 'forgot my password' on the sign-in page, B2C service will throw an error.\n                         * We are to catch this error and redirect the user to LOGIN again with the resetPassword authority.\n                         * For more information, visit: https://docs.microsoft.com/azure/active-directory-b2c/user-flow-overview#linking-user-flows\n                         */\n                        if (\n                            JSON.stringify(req.body.error_description).includes(\n                                \"AADB2C90118\"\n                            )\n                        ) {\n                            // create a GUID against crsf\n                            req.session.csrfToken =\n                                cryptoProvider.createNewGuid();\n\n                            const state = cryptoProvider.base64Encode(\n                                JSON.stringify({\n                                    csrfToken: req.session.csrfToken,\n                                    appStage: APP_STAGES.PASSWORD_RESET,\n                                })\n                            );\n\n                            const authCodeUrlRequestParams = {\n                                authority:\n                                    scenarioConfig.policies.authorities\n                                        .resetPassword.authority,\n                                state: state,\n                            };\n\n                            const authCodeRequestParams = {};\n\n                            // if coming for password reset, set the authority to password reset\n                            return redirectToAuthCodeUrl(\n                                req,\n                                res,\n                                next,\n                                authCodeUrlRequestParams,\n                                authCodeRequestParams\n                            );\n                        }\n                    }\n                    next(error);\n                }\n\n                break;\n            case APP_STAGES.ACQUIRE_TOKEN:\n                req.session.authCodeRequest.code = req.body.code; // authZ code\n                req.session.authCodeRequest.codeVerifier =\n                    req.session.pkceCodes.verifier; // PKCE Code Verifier\n\n                try {\n                    const tokenResponse =\n                        await clientApplication.acquireTokenByCode(\n                            req.session.authCodeRequest\n                        );\n                    req.session.accessToken = tokenResponse.accessToken;\n                    res.redirect(\"/call-api\");\n                } catch (error) {\n                    next(error);\n                }\n\n                break;\n            case APP_STAGES.PASSWORD_RESET:\n            case APP_STAGES.EDIT_PROFILE:\n                // redirect the user to sign-in again\n                res.redirect(\"/sign-in\");\n                break;\n            default:\n                next(new Error(\"cannot determine app stage\"));\n        }\n    } else {\n        next(new Error(\"crsf token mismatch\"));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Correlation ID to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a correlation ID to the authentication parameters. It takes a Map of string key-value pairs and a correlation ID string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addCorrelationId(parameters: Map<string, string>, correlationId: string): void;\n```\n\n----------------------------------------\n\nTITLE: Using logoutRedirect with Custom Configuration\nDESCRIPTION: Example of using the logoutRedirect method with a specific account and custom postLogoutRedirectUri. This allows targeting a specific user account for logout and redirecting to a custom URL after server logout.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/logout.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentAccount = msalInstance.getAccountByHomeId(homeAccountId);\nawait msalInstance.logoutRedirect({\n    account: currentAccount,\n    postLogoutRedirectUri: \"https://contoso.com/loggedOut\"\n});\n```\n\n----------------------------------------\n\nTITLE: MSAL Browser CDN Implementation with SRI\nDESCRIPTION: Implementation example using Subresource Integrity (SRI) hash for enhanced security when loading MSAL Browser from CDN.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/cdn-usage.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script\n    type=\"text/javascript\"\n    src=\"https://alcdn.msauth.net/browser/2.3.0/js/msal-browser.min.js\"\n    integrity=\"sha384-o+Sncs5XJ3NEAeriM/FV8YGZrh7mZk4GfNutRTbYjsDNJxb7caCLeqiDabistgwW\"\n    crossorigin=\"anonymous\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL with Post-Logout Redirect URI\nDESCRIPTION: MSAL configuration object that includes the postLogoutRedirectUri property, which specifies where to redirect users after logout completes on the identity provider's side.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/logout.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: 'your_client_id',\n        authority: 'https://login.microsoftonline.con/{your_tenant_id}',\n        redirectUri: 'https://contoso.com',\n        postLogoutRedirectUri: 'https://contoso.com/homepage'\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultStorageClass in TypeScript\nDESCRIPTION: Defines a class that extends CacheManager to provide default storage functionality for various token and metadata entities. This class is marked as internal and includes methods for getting and setting different types of credentials and metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_95\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class DefaultStorageClass extends CacheManager {\n    getAccessTokenCredential(): AccessTokenEntity;\n    getAccount(): AccountEntity;\n    getAccountKeys(): string[];\n    getAppMetadata(): AppMetadataEntity;\n    getAuthorityMetadata(): AuthorityMetadataEntity | null;\n    getAuthorityMetadataKeys(): Array<string>;\n    getIdTokenCredential(): IdTokenEntity;\n    getKeys(): string[];\n    getRefreshTokenCredential(): RefreshTokenEntity;\n    getServerTelemetry(): ServerTelemetryEntity;\n    getThrottlingCache(): ThrottlingEntity;\n    getTokenKeys(): TokenKeys;\n    removeItem(): boolean;\n    setAccessTokenCredential(): Promise<void>;\n    setAccount(): Promise<void>;\n    setAppMetadata(): void;\n    setAuthorityMetadata(): void;\n    setIdTokenCredential(): Promise<void>;\n    setRefreshTokenCredential(): Promise<void>;\n    setServerTelemetry(): void;\n    setThrottlingCache(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using and Renewing SHR Nonce in TypeScript\nDESCRIPTION: This code demonstrates how to use a valid server nonce in a POP token request, make an authorized resource request, and handle the response to update the nonce for future use.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/shr-server-nonce.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicClientApplication, AuthenticationHeaderParser } from \"@azure/msal-browser\";\n\n// 1. Configure PoP Token Request without a valid SHR Nonce\nconst popTokenRequest = {\n    scopes: [\"User.Read\"],\n    authenticationScheme: msal.AuthenticationScheme.POP,\n    resourceRequestMethod: \"POST\",\n    resourceRequestUri: \"YOUR_RESOURCE_ENDPOINT\"\n    shrNonce: shrNonce // SHR Nonce is now a valid server-generated nonce\n};\n\n\n // Get PoP token to make authenticated request\nconst shr = await publicClientApplication.acquireTokenSilent(popTokenRequest);\n\n// Set up PoP Resource request\nconst reqHeaders = new Headers();\nconst authorizationHeader = `PoP ${shr}`;\n\nheaders.append(\"Authorization\", authorizationHeader);\n\nconst options = {\n    method: method,\n    headers: headers\n};\n\n// Make call to resource with SHR\nreturn fetch(resourceEndpointData.endpoint, options)\n    .then(response => response.json())\n    .then(response => {\n         if (response.status === 200 && response.headers.get(\"Authentication-Info\")) {\n             /** NEW **/\n            // 200 OK if nonce was valid\n            lastResponseHeaders = response.headers;\n            const authHeaderParser = new AuthenticationHeaderParser(response.headers);\n            shrNonce = authHeaderParser.getShrNonce(); // Previous nonce (possibly expired) is replaced with the nextnonce generated by the server\n        }\n        // Check if error is 401 unauthorized and WWW-Authenticate header is included\n        else if (response.status === 401 && response.headers.get(\"WWW-Authenticate\")) {\n           /** SAME AS BEFORE **/\n            lastResponseHeaders = response.headers;\n            const authHeaderParser = new AuthenticationHeaderParser(response.headers);\n            shrNonce = authHeaderParser.getShrNonce(); // Null is replaced with valid nonce from WWW-Authenticate header\n        } else {\n            // Deal with other errors as necessary\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Aware Token Request in MSAL.js\nDESCRIPTION: Example of creating a token request with instance aware flow enabled through extraQueryParameters. Sets the instance_aware flag to true while requesting Mail.Read scope.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/instance-aware.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tokenRequest = {\n    scopes: [\"Mail.Read\"],\n    extraQueryParameters: {\n        \"instance_aware\": \"true\"\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Hint to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a logout hint to the authentication parameters. It takes a Map of string key-value pairs and a logout hint string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addLogoutHint(parameters: Map<string, string>, logoutHint: string): void;\n```\n\n----------------------------------------\n\nTITLE: System Configuration Options Table in Markdown\nDESCRIPTION: Markdown table documenting system configuration options for MSAL.js, including logger settings, timeouts, and crypto options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                     | Description                                                                                                                                                                                                                                                                                                   | Format                               | Default Value                                    |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ | ------------------------------------------------ |\n| `loggerOptions`            | Config object for logger.                                                                                                                                                                                                                                                                                     | See [below](#logger-config-options). | See [below](#logger-config-options).             |\n| `windowHashTimeout`        | Timeout in milliseconds to wait for popup operations to resolve.                                                                                                                                                                                                                                              | integer (milliseconds)               | `60000`                                          |\n| `iframeHashTimeout`        | Timeout in milliseconds to wait for iframe operations to resolve.                                                                                                                                                                                                                                             | integer (milliseconds)               | `6000`                                           |\n| `loadFrameTimeout`         | Timeout in milliseconds to wait for iframe/popup operations resolve. If provided, will set default values for `windowHashTimeout` and `iframeHashTimeout`.                                                                                                                                                    | integer (milliseconds)               | `undefined`                                      |\n| `navigateFrameWait `       | Delay in milliseconds to wait for the iframe to load in the window.                                                                                                                                                                                                                                           | integer (milliseconds)               | In IE or Edge: `500`, in all other browsers: `0` |\n| `asyncPopups`              | Sets whether popups are opened asynchronously. When set to false, blank popups are opened before anything else happens. When set to true, popups are opened when making the network request. Can be set to true for scenarios where `about:blank` is not supported, e.g. desktop apps or progressive web apps | boolean                              | `false`                                          |\n| `allowRedirectInIframe`    | By default, MSAL will not allow redirect operations to be initiated when the application is inside an iframe. Set this flag to `true` to remove this check.                                                                                                                                                   | boolean                              | `false`                                          |\n| `cryptoOptions`            | Config object for crypto operations in the browser.                                                                                                                                                                                                                                                           | See [below](#crypto-config-options.) | See [below](#crypto-config-options.)             |\n| `pollIntervalMilliseconds` | Interval of time in milliseconds between polls of popup URL hash during authenticaiton.                                                                                                                                                                                                                       | integer (milliseconds)               | `30`                                             |\n```\n\n----------------------------------------\n\nTITLE: Cache Management Interface Methods\nDESCRIPTION: Interface methods for cache operations including account, token and metadata management. Contains type definitions for cache operations like reading, writing and removing various authentication artifacts.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nisAccountKey(key: string, homeAccountId?: string, tenantId?: string): boolean;\nisAppMetadataFOCI(environment: string): boolean;\nprotected isAuthorityMetadata(key: string): boolean;\nisCredentialKey(key: string): boolean;\nreadAccountFromCache(account: AccountInfo): AccountEntity | null;\nreadAppMetadataFromCache(environment: string): AppMetadataEntity | null;\nrefreshTokenKeyMatchesFilter(inputKey: string, filter: CredentialFilter): boolean;\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Navigation Client with MSAL Provider\nDESCRIPTION: Demonstrates how to set up the custom navigation client with MsalProvider and react-router-dom. Shows the component structure needed to properly initialize the navigation client using the useNavigate hook.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/performance.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { BrowserRouter as Router , Routes, Route, useNavigate } from \"react-router-dom\";\n\nfunction App({ msalInstance }) {\n    // It's important that the Router component is above the Example component because you'll need to use the useHistory hook before rendering MsalProvider\n    return (\n        <Router>\n            <Example msalInstance={msalInstance}/>\n        </Router>\n    );\n};\n\nfunction Example({ msalInstance }) {\n    const navigate = useNavigate();\n    const navigationClient = new CustomNavigationClient(navigate);\n    msalInstance.setNavigationClient(navigationClient);\n\n    return (\n        <MsalProvider instance={msalInstance}>\n            <Routes>\n                <Route path=\"/protected\" element={<ProtectedRoute />} />\n                <Route path=\"/\" element={<Home />} />\n            </Routes>\n        </MsalProvider>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting NavigationClient After Initialization in JavaScript\nDESCRIPTION: This code shows how to set a custom NavigationClient after initializing the PublicClientApplication, which can be useful in frameworks like React or Angular.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/navigation.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config: Configuration = {\n    auth: {\n        clientId: \"your-client-id\"\n    }\n};\n\nconst msalInstance = new PublicClientApplication(config);\nconst navigationClient = new CustomNavigationClient();\nmsalInstance.setNavigationClient(navigationClient);\n```\n\n----------------------------------------\n\nTITLE: Configuring MsalBroadcastService in Angular Module\nDESCRIPTION: Complete configuration for setting up MsalBroadcastService in an Angular application's app.module.ts file. Includes MSAL core configuration, guard settings, interceptor setup, and broadcast service configuration with event replay functionality. The eventsToReplay parameter is set to control how many past events are available upon subscription.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/events.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// app.module.ts\nimport { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { MsalModule, MsalService, MsalGuard, MsalInterceptor, MsalBroadcastService, MsalRedirectComponent, MSAL_BROADCAST_CONFIG } from \"@azure/msal-angular\";\nimport { PublicClientApplication, InteractionType, BrowserCacheLocation } from \"@azure/msal-browser\";\n\n@NgModule({\n    imports: [\n        MsalModule.forRoot( new PublicClientApplication({\n            auth: {\n                clientId: \"clientid\",\n                authority: \"https://login.microsoftonline.com/common/\",\n                redirectUri: \"http://localhost:4200/\",\n                postLogoutRedirectUri: \"http://localhost:4200/\",\n                navigateToLoginRequestUrl: true\n            },\n            cache: {\n                cacheLocation : BrowserCacheLocation.LocalStorage,\n                storeAuthStateInCookie: true\n            },\n            system: {\n                loggerOptions: {\n                    loggerCallback: () => {},\n                    piiLoggingEnabled: false\n                }\n            }\n        }), {\n            interactionType: InteractionType.Popup,\n            authRequest: {\n              scopes: ['user.read']\n            },\n            loginFailedRoute: \"/login-failed\" \n        }, {\n            interactionType: InteractionType.Redirect,\n            protectedResourceMap\n        })\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: MsalInterceptor,\n            multi: true\n        },\n        {\n          provide: MSAL_BROADCAST_CONFIG,\n          useValue: {\n            eventsToReplay: 2\n          }\n        },\n        MsalGuard,\n        MsalBroadcastService\n    ],\n    bootstrap: [AppComponent, MsalRedirectComponent]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Handling SHR Nonce Response in TypeScript\nDESCRIPTION: This snippet shows how to handle the response from the resource server, extract the server nonce from the WWW-Authenticate header, and update the shrNonce variable for future requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/shr-server-nonce.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicClientApplication, AuthenticationHeaderParser } from \"@azure/msal-browser\";\n\n...\n\n// Make call to resource with SHR\nreturn fetch(resourceEndpointData.endpoint, options)\n    .then(response => response.json())\n    .then(response => {\n        if (response.status === 200 && response.headers.get(\"Authentication-Info\")) {\n            // At this point, the response will be a 401 Error, so ignore the success case for now\n        }\n        // Check if error is 401 unauthorized and WWW-Authenticate header is included\n        else if (response.status === 401 && response.headers.get(\"WWW-Authenticate\")) {\n            lastResponseHeaders = response.headers;\n            const authHeaderParser = new AuthenticationHeaderParser(response.headers);\n            shrNonce = authHeaderParser.getShrNonce(); // Null is replaced with valid nonce from WWW-Authenticate header\n        } else {\n            // Deal with other errors as necessary\n        }\n    }); \n});\n```\n\n----------------------------------------\n\nTITLE: Function declaration for getStandardAuthorizeRequestParameters in TypeScript\nDESCRIPTION: Creates a standardized set of parameters required for authorization requests. Handles auth options, request details, logging, and optional performance tracking.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getStandardAuthorizeRequestParameters(authOptions: AuthOptions, request: CommonAuthorizationUrlRequest, logger: Logger, performanceClient?: IPerformanceClient): Map<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic MsalGuard Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a dynamic authRequest for MsalGuard. It uses a factory function to determine the required scopes based on the current route, allowing for flexible authentication requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport function MSALGuardConfigFactory(): MsalGuardConfiguration {\n  return {\n    interactionType: InteractionType.Redirect,\n    authRequest: (authService, state) => {\n      return {\n        scopes: state.root.url.some((x) => x.path === \"calendar\") ? [\"user.read\", \"\\tCalendars.Read\"] : [\"user.read\"],\n      };\n    },\n    loginFailedRoute: \"./login-failed\",\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Broker Parameters to Authentication Request in TypeScript\nDESCRIPTION: This function adds broker-specific parameters to the authentication request. It takes a Map of string key-value pairs, a broker client ID, and a broker redirect URI as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addBrokerParameters(parameters: Map<string, string>, brokerClientId: string, brokerRedirectUri: string): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Auth Request for MsalInterceptor in Angular\nDESCRIPTION: This snippet demonstrates how to set up a dynamic auth request for MsalInterceptor. It allows for changing the authority dynamically based on the user's home tenant, which is useful for handling guest users in multi-tenant scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/multi-tenant.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function MSALInterceptorConfigFactory(): MsalInterceptorConfiguration {\n  const protectedResourceMap = new Map<string, Array<string>>();\n  protectedResourceMap.set(\"https://graph.microsoft.com/v1.0/me\", [\"user.read\"]);\n  \n  return {\n    interactionType: InteractionType.Popup,\n    protectedResourceMap,\n    authRequest: (msalService, httpReq, originalAuthRequest) => {\n      return {\n        ...originalAuthRequest,\n        authority: `https://login.microsoftonline.com/${originalAuthRequest.account?.tenantId ?? 'organizations'}`\n      };\n    }\n  };\n}\n...\n\n@NgModule({\n  declarations: [...],\n  imports: [...],\n  providers: [\n    ...\n    {\n      provide: MSAL_INTERCEPTOR_CONFIG,\n      useFactory: MSALInterceptorConfigFactory\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: MSAL Browser CDN Fallback Implementation\nDESCRIPTION: Implementation of CDN fallback mechanism that loads from alternate CDN domain if primary fails.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/cdn-usage.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script\n    type=\"text/javascript\"\n    src=\"https://alcdn.msauth.net/browser/2.3.0/js/msal-browser.min.js\"\n></script>\n<script type=\"text/javascript\">\n    if (typeof msal === \"undefined\")\n        document.write(\n            unescape(\n                \"%3Cscript src='https://alcdn.msftauth.net/browser/2.3.0/js/msal-browser.min.js' type='text/javascript' %3E%3C/script%3E\"\n            )\n        );\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL.js for WAM Integration\nDESCRIPTION: Configuration object for enabling Web Account Manager (WAM) integration in MSAL.js. This snippet demonstrates how to set the allowPlatformBroker flag to true to enable device bound tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/device-bound-tokens.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"insert-clientId\",\n    },\n    system: {\n        allowPlatformBroker: true,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Error Class in TypeScript\nDESCRIPTION: Defines the AuthError class that extends JavaScript's Error class to provide structured error handling for authentication operations. It includes properties for correlation ID, error code, error message, and sub-error details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class AuthError extends Error {\n    constructor(errorCode?: string, errorMessage?: string, suberror?: string);\n    correlationId: string;\n    errorCode: string;\n    errorMessage: string;\n    // (undocumented)\n    setCorrelationId(correlationId: string): void;\n    subError: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Popup Window Attributes in MSAL.js\nDESCRIPTION: This snippet demonstrates how to configure the position and dimensions of popup windows when using MSAL.js for authentication. It shows how to set custom height, width, top position, and left position for the popup window in a login request.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/FAQ.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst loginRequest = {\n    scopes: [\"user.read\", \"mail.send\"],\n    popupWindowAttributes: {\n        popupSize: {\n            height: 100,\n            width: 100,\n        },\n        popupPosition: {\n            top: 100,\n            left: 100,\n        },\n    },\n};\n\ntry {\n    const loginResponse = await msalInstance.loginPopup(loginRequest);\n} catch (err) {\n    // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions for Account and Client Info in TypeScript\nDESCRIPTION: This snippet defines utility functions for building account and client information in MSAL.js. It includes functions for creating cache entities and parsing client information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_75\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function buildAccountToCache(cacheStorage: CacheManager, authority: Authority, homeAccountId: string, base64Decode: (input: string) => string, idTokenClaims?: TokenClaims, clientInfo?: string, environment?: string, claimsTenantId?: string | null, authCodePayload?: AuthorizationCodePayload, nativeAccountId?: string, logger?: Logger): AccountEntity;\n\nexport function buildClientInfo(rawClientInfo: string, base64Decode: (input: string) => string): ClientInfo;\n\nexport function buildClientInfoFromHomeAccountId(homeAccountId: string): ClientInfo;\n\nexport function buildStaticAuthorityOptions(authOptions: Partial<AuthorityOptions>): StaticAuthorityOptions;\n\nexport function buildTenantProfile(homeAccountId: string, localAccountId: string, tenantId: string, idTokenClaims?: TokenClaims): TenantProfile;\n```\n\n----------------------------------------\n\nTITLE: Adding Client Assertion to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a client assertion to the authentication parameters. It takes a Map of string key-value pairs and a client assertion string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addClientAssertion(parameters: Map<string, string>, clientAssertion: string): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Crypto Config Options in Markdown\nDESCRIPTION: This snippet details the configuration options for MSAL.js crypto settings, including the use of MSR Crypto and entropy requirements.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Option         | Description                                                                                                                                                                         | Format       | Default Value |\n| -------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | ------------- |\n| `useMsrCrypto` | Whether to use [MSR Crypto](https://github.com/microsoft/MSR-JavaScript-Crypto) if available in the browser (and other crypto interfaces are not available).                        | boolean      | `false`       |\n| `entropy`      | Cryptographically strong random values used to seed MSR Crypto (e.g. `crypto.randomBytes(48)` from Node). 48 bits of entropy is recommended. Required if `useMsrCrypto` is enabled. | `Uint8Array` | `undefined`   |\n```\n\n----------------------------------------\n\nTITLE: Adding POP Token to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds a Proof of Possession (POP) token configuration to request parameters. The cnfString contains the JSON Web Key used for PoP token binding.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addPopToken(parameters: Map<string, string>, cnfString: string): void;\n```\n\n----------------------------------------\n\nTITLE: Electron MSAL Configuration with PersistenceCachePlugin\nDESCRIPTION: This example shows a more detailed configuration for an Electron application using MSAL. It includes settings for the auth endpoint, redirect URI, and persistence configuration for cache storage.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/msal-node-extensions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst AAD_ENDPOINT_HOST = \"https://login.microsoftonline.com/\"; // include the trailing slash\nconst REDIRECT_URI = \"ENTER_REDIRECT_URI\";\n\nconst cachePath = \"path/to/cache/file.json\";\n\n/*define persistence config based on the appropriate persistence you are using(e.g- FilePersistenceWithDataProtection, generic PersistenceCreateor, etc)*/\n\n//defining persistence config for PersistenceCreator\nconst persistenceConfiguration = {\n    cachePath,\n    dataProtectionScope: DataProtectionScope.CurrentUser,\n    serviceName: \"test-msal-electron-service\",\n    accountName: \"test-msal-electron-account\",\n    usePlaintextFileOnLinux: false,\n}\n\n  const msalConfig = {\n    auth: {\n        clientId: \"CLIENT_ID_HERE\",\n        authority: `${AAD_ENDPOINT_HOST}TENANT_ID_HERE`,\n    },\n    cache: {\n        cachePlugin: null // set later in main.js as shown above \n    },\n    system: {\n        loggerOptions: {\n            loggerCallback(loglevel, message, containsPii) {\n                console.log(message);\n            },\n            piiLoggingEnabled: false,\n            logLevel: LogLevel.Verbose,\n        },\n    },\n};\n...\n\nmodule.exports = {\n  msalConfig: msalConfig,\n  protectedResources: protectedResources,\n  REDIRECT_URI: REDIRECT_URI,\n  persistenceConfiguration\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL.js for Vue 3 Application\nDESCRIPTION: This snippet demonstrates how to configure MSAL.js for a Vue 3 application. It includes setting up the auth configuration and initializing the PublicClientApplication instance.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/vue3-sample-app/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n  auth: {\n    clientId: 'ENTER_YOUR_CLIENT_ID_HERE',\n    authority: 'https://login.microsoftonline.com/ENTER_YOUR_TENANT_ID_HERE',\n    redirectUri: '/', // Must be registered as a SPA redirectURI on your app registration\n    postLogoutRedirectUri: '/' // Must be registered as a SPA redirectURI on your app registrationregistration\n  },\n  cache: {\n    cacheLocation: 'localStorage' // Options are localStorage, sessionStorage, memoryStorage\n  },\n};\n\nexport const msalInstance = new PublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL with Custom OIDC Authority\nDESCRIPTION: Configuration for applications using a separate OIDC-compliant authority, requiring knownAuthorities and protocolMode settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/initialize-public-client-application.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n        authority: \"https://login.live.com\",\n        knownAuthorities: [\"login.live.com\"],\n        protocolMode: \"OIDC\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Example PerformanceEvent Object Structure in MSAL.js\nDESCRIPTION: This snippet illustrates the structure of a PerformanceEvent object returned by MSAL.js. It contains detailed timing information for authentication operations, including overall duration, cache status, and timings for internal operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/performance.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst event: PerformanceEvent = {\n    correlationId: \"03cad3ff-6682-4e3d-a0b4-d517b531c718\",\n\tdurationMs: 1873,\n\tendPageVisibility: \"hidden\",\n\tfromCache: false,\n\tname: \"acquireTokenSilent\",\n\tstartPageVisibility: \"visible\",\n\tstartTimeMs: 1636414041888,\n\tsuccess: true,\n    silentCacheClientAcquireTokenDurationMs: 0,\n    silentRefreshClientAcquireTokenDurationMs: 150,\n    silentIframeClientAcquireTokenDurationMs: 0\n    cryptoOptsGetPublicKeyThumbprintDurationMs: 200,\n    cryptoOptsSignJwtDurationMs: 8,\n    clientId: \"b50703d7-d12b-4ddc-8758-91053fe0aba4\",\n    authority: \"https://login.microsoftonline.com/common\",\n    libraryName: \"@azure/msal-browser-1p\",\n    libraryVersion: \"2.22.2-beta.2\",\n    appName: \"my-application\",\n    appVersion: \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Authentication Settings in TypeScript\nDESCRIPTION: Instructions for configuring client ID and optional authentication parameters in app.config.ts and environments folder. This code requires replacing placeholder values with actual Azure AD application registration details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/angular-standalone-sample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/app.config.ts\n{\n  clientId: \"YOUR_CLIENT_ID_HERE\",\n  authority: \"https://login.microsoftonline.com/YOUR_TENANT_ID\",\n  redirectUri: \"http://localhost:4200\",\n  scopes: [\"user.read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Authority Endpoint Metadata in MSAL\nDESCRIPTION: Function that updates authority endpoint metadata using OpenId configuration values. The function takes an AuthorityMetadataEntity object, updated values from OpenIdConfigResponse, and a boolean indicating if the data came from the network.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_188\n\nLANGUAGE: typescript\nCODE:\n```\nfunction updateAuthorityEndpointMetadata(authorityMetadata: AuthorityMetadataEntity, updatedValues: OpenIdConfigResponse, fromNetwork: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Basic MSAL Browser CDN Implementation\nDESCRIPTION: Basic implementation of MSAL Browser library using Microsoft's CDN with minified version 2.35.0.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/cdn-usage.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script\n    type=\"text/javascript\"\n    src=\"https://alcdn.msauth.net/browser/2.35.0/js/msal-browser.min.js\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Certificate Request in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure an SSH certificate request using MSAL. It sets up the SSH key data and constructs the request object with the required parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/ssh-certificates.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Configure SSH Key Data\nconst sshKeyData = {\n    key: PUBLIC_KEY_JWK, // Replace with your SSH Public Key in JSON Web Key object format\n    keyId: \"PUBLIC_KEY_ID\" // Replace with the SSH Public Key's unique ID\n};\n\n// Configure SSH Certificate Request\nconst sshCertificateRequest = {\n    scopes: [\"SAMPLE_SSH_SCOPE\"], // Replace with your resource's scope\n    authenticationScheme: msal.AuthenticationScheme.SSH,\n    sshJwk: JSON.stringify(sshKeyData.key),\n    sshKid: sshKeyData.keyId\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of loginPopup with acquireTokenPopup in JavaScript\nDESCRIPTION: The correct implementation using async/await to ensure each interactive API resolves before calling the next one, preventing 'Interaction_in_progress' errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = { scopes: [\"openid\", \"profile\"] };\nawait msalInstance.loginPopup();\nawait msalInstance.acquireTokenPopup(request);\n```\n\n----------------------------------------\n\nTITLE: Implementing ProtocolUtils Class for Authentication Protocol Operations\nDESCRIPTION: Utility class for handling protocol-related operations like state management in authentication requests. Provides methods for generating, parsing, and setting request state.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_158\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ProtocolUtils {\n    static generateLibraryState(cryptoObj: ICrypto, meta?: Record<string, string>): string;\n    static parseRequestState(cryptoObj: ICrypto, state: string): RequestStateObject;\n    static setRequestState(cryptoObj: ICrypto, userState?: string, meta?: Record<string, string>): string;\n}\n```\n\n----------------------------------------\n\nTITLE: MSAL Angular Module Configuration\nDESCRIPTION: Angular module configuration that sets up MSAL authentication with necessary providers, interceptors, and component bootstrapping. Includes configuration for logging, protected resources, and guard settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/redirects.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatListModule } from '@angular/material/list';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { ProfileComponent } from './profile/profile.component';\n\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { IPublicClientApplication, PublicClientApplication, InteractionType, BrowserCacheLocation, LogLevel } from '@azure/msal-browser';\nimport { MsalGuard, MsalInterceptor, MsalBroadcastService, MsalInterceptorConfiguration, MsalModule, MsalService, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalGuardConfiguration, MsalRedirectComponent } from '@azure/msal-angular';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    ProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatListModule,\n    HttpClientModule,\n    MsalModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: MsalInterceptor,\n      multi: true\n    },\n    {\n      provide: MSAL_INSTANCE,\n      useFactory: MSALInstanceFactory\n    },\n    {\n      provide: MSAL_GUARD_CONFIG,\n      useFactory: MSALGuardConfigFactory\n    },\n    {\n      provide: MSAL_INTERCEPTOR_CONFIG,\n      useFactory: MSALInterceptorConfigFactory\n    },\n    MsalService,\n    MsalGuard,\n    MsalBroadcastService\n  ],\n  bootstrap: [AppComponent, MsalRedirectComponent]\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Node Daemon App via NPM\nDESCRIPTION: This console command demonstrates how to run the MSAL Node daemon app using npm. It includes parameters for specifying the tenant ID and operation name, which are required for the app's execution.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials-distributed-cache/README.md#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev -- --tenant <TENANT_ID> --operation getUsers\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Events in MSAL Angular\nDESCRIPTION: This snippet demonstrates how to handle errors emitted by the MsalBroadcastService. It filters for LOGIN_FAILURE events and checks if the error is an instance of AuthError.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/events.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MsalBroadcastService } from '@azure/msal-angular';\nimport { EventMessage, EventType } from '@azure/msal-browser';\n\nexport class AppComponent implements OnInit, OnDestroy {\n  private readonly _destroying$ = new Subject<void>();\n\n  constructor(\n    //...\n    private msalBroadcastService: MsalBroadcastService\n  ) {}\n\n  ngOnInit(): void {\n    this.msalBroadcastService.msalSubject$\n      .pipe(\n        // Optional filtering of events\n        filter((msg: EventMessage) => msg.eventType === EventType.LOGIN_FAILURE), \n        takeUntil(this._destroying$)\n      )\n      .subscribe((result: EventMessage) => {\n        if (result.error instanceof AuthError) {\n          // Do something with the error\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._destroying$.next(null);\n    this._destroying$.complete();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Refresh Token to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds a refresh token to request parameters. This is used during token refresh flows to obtain new access tokens without requiring user interaction.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addRefreshToken(parameters: Map<string, string>, refreshToken: string): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Brokered Auth sample\nDESCRIPTION: JavaScript configuration object for the MSAL Node Brokered Auth sample. Replace the placeholder values with your actual client ID and tenant information obtained from the Microsoft Entra admin center.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-cli-brokered-app/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_INFO\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Token Expiration Check Function in TypeScript\nDESCRIPTION: Utility function to determine if a token has expired based on its expiration time and an offset parameter.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_133\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isTokenExpired(expiresOn: string, offset: number): boolean;\n```\n\n----------------------------------------\n\nTITLE: Listing MSAL-browser Public APIs for Token Acquisition\nDESCRIPTION: Lists the public APIs available in msal-browser for acquiring tokens: loginPopup, acquireTokenPopup, acquireTokenSilent, and handleRedirectPromise. These APIs all return an AuthenticationResult object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/response.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`loginPopup`, `acquireTokenPopup`, `acquireTokenSilent` or `handleRedirectPromise`\n```\n\n----------------------------------------\n\nTITLE: Manual MSAL Redirect Handling in Home Component\nDESCRIPTION: Example of manually handling MSAL redirects in a component using handleRedirectObservable. This approach is used when MsalRedirectComponent cannot be bootstrapped.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/redirects.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { MsalBroadcastService, MsalService } from '@azure/msal-angular';\nimport { AuthenticationResult } from '@azure/msal-browser';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(private authService: MsalService) { }\n\n  ngOnInit(): void {\n    this.authService.handleRedirectObservable().subscribe({\n      next: (result: AuthenticationResult) => {\n        // Perform actions related to user accounts here\n      },\n      error: (error) => console.log(error)\n    });\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseClient Abstract Class in TypeScript\nDESCRIPTION: This snippet defines the BaseClient abstract class used in MSAL.js. It includes methods for creating token requests, executing network requests, and managing authority and cache.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_74\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport abstract class BaseClient {\n    protected constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient);\n    authority: Authority;\n    protected cacheManager: CacheManager;\n    protected config: CommonClientConfiguration;\n    createTokenQueryParameters(request: BaseAuthRequest): string;\n    protected createTokenRequestHeaders(ccsCred?: CcsCredential): Record<string, string>;\n    protected cryptoUtils: ICrypto;\n    protected executePostToTokenEndpoint(tokenEndpoint: string, queryString: string, headers: Record<string, string>, thumbprint: RequestThumbprint, correlationId: string, queuedEvent?: string): Promise<NetworkResponse<ServerAuthorizationTokenResponse>>;\n    logger: Logger;\n    protected networkClient: INetworkModule;\n    protected performanceClient?: IPerformanceClient;\n    sendPostRequest<T extends ServerAuthorizationTokenResponse>(thumbprint: RequestThumbprint, tokenEndpoint: string, options: NetworkRequestOptions, correlationId: string): Promise<NetworkResponse<T>>;\n    protected serverTelemetryManager: ServerTelemetryManager | null;\n    updateAuthority(cloudInstanceHostname: string, correlationId: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dynamic Scopes and Incremental Consent in MSAL.js\nDESCRIPTION: This code snippet shows how dynamic scopes and incremental consent work in MSAL.js. It demonstrates the difference between scopes requested during login and token acquisition.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst loginRequest = {\n      scopes: [ \"openid\", \"profile\", \"User.Read\" ]\n };\n const tokenRequest = {\n      scopes: [ \"Mail.Read\" ]\n };\n // will return an ID Token and an Access Token with scopes: \"openid\", \"profile\" and \"User.Read\"\n msalInstance.loginPopup(loginRequest);\n // will fail and fallback to an interactive method prompting a consent screen\n // after consent, the received token will be issued for \"openid\", \"profile\" ,\"User.Read\" and \"Mail.Read\" combined\n msalInstance.acquireTokenSilent(tokenRequest);\n```\n\n----------------------------------------\n\nTITLE: Implementing App Metadata Key Generation in TypeScript\nDESCRIPTION: Defines a function to generate a unique key for app metadata based on the environment and client ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_104\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction generateAppMetadataKey({ environment, clientId, }: AppMetadataEntity): string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routes with MSAL Guard and Hash Strategy\nDESCRIPTION: Example of routing configuration that demonstrates how to set up routes with MSAL Guard while using hash-based routing. Includes protected routes with MsalGuard and placeholder routes for handling authentication code responses.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-guard.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes: Routes = [\n  {\n    path: 'profile',\n    component: ProfileComponent,\n    canActivate: [MsalGuard]\n  },\n  {\n    // Needed for hash routing\n    path: 'code',\n    component: HomeComponent\n  },\n  {\n    path: '',\n    component: HomeComponent\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Defining ClientConfiguration Type in TypeScript\nDESCRIPTION: Defines the ClientConfiguration type which includes various options for configuring the authentication client. It includes properties for auth options, system options, logger options, cache options, and interfaces for storage, network, and crypto operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_86\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ClientConfiguration = {\n    authOptions: AuthOptions;\n    systemOptions?: SystemOptions;\n    loggerOptions?: LoggerOptions;\n    cacheOptions?: CacheOptions;\n    storageInterface?: CacheManager;\n    networkInterface?: INetworkModule;\n    cryptoInterface?: ICrypto;\n    clientCredentials?: ClientCredentials;\n    libraryInfo?: LibraryInfo;\n    telemetry?: TelemetryOptions;\n    serverTelemetryManager?: ServerTelemetryManager | null;\n    persistencePlugin?: ICachePlugin | null;\n    serializableCache?: ISerializableTokenCache | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Code URL Redirect in JavaScript\nDESCRIPTION: This helper method prepares request parameters for MSAL Node's getAuthCodeUrl API, triggering the first leg of the auth code flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/b2c-user-flows/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst redirectToAuthCodeUrl = async (\n    req,\n    res,\n    next,\n    authCodeUrlRequestParams,\n    authCodeRequestParams\n) => {\n    // Generate PKCE Codes before starting the authorization flow\n    const { verifier, challenge } = await cryptoProvider.generatePkceCodes();\n\n    // Set generated PKCE codes and method as session vars\n    req.session.pkceCodes = {\n        challengeMethod: \"S256\",\n        verifier: verifier,\n        challenge: challenge,\n    };\n\n    /**\n     * By manipulating the request objects below before each request, we can obtain\n     * auth artifacts with desired claims. For more information, visit:\n     * https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_node.html#authorizationurlrequest\n     * https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_node.html#authorizationcoderequest\n     **/\n\n    req.session.authCodeUrlRequest = {\n        redirectUri: REDIRECT_URI,\n        codeChallenge: req.session.pkceCodes.challenge,\n        codeChallengeMethod: req.session.pkceCodes.challengeMethod,\n        responseMode: \"form_post\", // recommended for confidential clients\n        ...authCodeUrlRequestParams,\n    };\n\n    req.session.authCodeRequest = {\n        redirectUri: REDIRECT_URI,\n        code: \"\",\n        ...authCodeRequestParams,\n    };\n\n    // Get url to sign user in and consent to scopes needed for application\n    try {\n        const authCodeUrlResponse = await clientApplication.getAuthCodeUrl(\n            req.session.authCodeUrlRequest\n        );\n        res.redirect(authCodeUrlResponse);\n    } catch (error) {\n        next(error);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Optional Claims Manifest Configuration\nDESCRIPTION: JSON configuration for optional ID token claims including sid and login_hint in the app manifest.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/HybridSample/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"optionalClaims\": {\n        \"idToken\": [\n            {\n                \"name\": \"sid\",\n                \"source\": null,\n                \"essential\": false,\n                \"additionalProperties\": []\n            },\n            {\n                \"name\": \"login_hint\",\n                \"source\": null,\n                \"essential\": false,\n                \"additionalProperties\": []\n            }\n        ],\n        \"accessToken\": [],\n        \"saml2Token\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested App MSAL Configuration in JavaScript\nDESCRIPTION: Creates a nestable PublicClientApplication instance for applications that support nested app authentication scenarios.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as msal from \"@azure/msal-browser\";\n\nconst nestablePca = msal.createNestablePublicClientApplication({\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_ID\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: UrlString Class for URL Manipulation in MSAL\nDESCRIPTION: A class that provides URL manipulation functionality for MSAL. It includes methods for parsing, canonicalizing, appending query strings, and extracting components from URLs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_191\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UrlString {\n    constructor(url: string);\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    static appendQueryString(url: string, queryString: string): string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    static canonicalizeUri(url: string): string;\n    // (undocumented)\n    static constructAuthorityUriFromObject(urlObject: IUri): UrlString;\n    // (undocumented)\n    static getAbsoluteUrl(relativeUrl: string, baseUrl: string): string;\n    // (undocumented)\n    static getDomainFromUrl(url: string): string;\n    getUrlComponents(): IUri;\n    // @deprecated\n    static hashContainsKnownProperties(response: string): boolean;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    static removeHashFromUrl(url: string): string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    replaceTenantPath(tenantId: string): UrlString;\n    // (undocumented)\n    get urlString(): string;\n    validateAsUri(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Account Entity Class Definition in TypeScript\nDESCRIPTION: Defines the AccountEntity class used to manage account information in MSAL, including methods for account creation, comparison and key generation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AccountEntity {\n    static accountInfoIsEqual(accountA: AccountInfo | null, accountB: AccountInfo | null, compareClaims?: boolean): boolean;\n    authorityType: string;\n    clientInfo?: string;\n    cloudGraphHostName?: string;\n    static createAccount(accountDetails: {\n        homeAccountId: string;\n        idTokenClaims?: TokenClaims;\n        clientInfo?: string;\n        cloudGraphHostName?: string;\n        msGraphHost?: string;\n        environment?: string;\n        nativeAccountId?: string;\n        tenantProfiles?: Array<TenantProfile>;\n    }, authority: Authority, base64Decode?: (input: string) => string): AccountEntity;\n    static createFromAccountInfo(accountInfo: AccountInfo, cloudGraphHostName?: string, msGraphHost?: string): AccountEntity;\n    environment: string;\n    static generateAccountCacheKey(accountInterface: AccountInfo): string;\n    generateAccountId(): string;\n    generateAccountKey(): string;\n    static generateHomeAccountId(serverClientInfo: string, authType: AuthorityType, logger: Logger, cryptoObj: ICrypto, idTokenClaims?: TokenClaims): string;\n    getAccountInfo(): AccountInfo;\n    homeAccountId: string;\n    static isAccountEntity(entity: object): boolean;\n    isSingleTenant(): boolean;\n    lastModificationApp?: string;\n    lastModificationTime?: string;\n    localAccountId: string;\n    msGraphHost?: string;\n    name?: string;\n    nativeAccountId?: string;\n    realm: string;\n    tenantProfiles?: Array<TenantProfile>;\n    username: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Scheme Constants and Type in MSAL.js (TypeScript)\nDESCRIPTION: Defines the AuthenticationScheme constants and type for supported authentication schemes (Bearer, POP, SSH). These determine how access tokens are formatted and validated.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AuthenticationScheme: {\n    readonly BEARER: \"Bearer\";\n    readonly POP: \"pop\";\n    readonly SSH: \"ssh-cert\";\n};\n\nexport type AuthenticationScheme = (typeof AuthenticationScheme)[keyof typeof AuthenticationScheme];\n```\n\n----------------------------------------\n\nTITLE: Silent SSO Authentication Without User Hint in MSAL.js\nDESCRIPTION: Shows how to use the ssoSilent method without providing user hints. This approach may fail if multiple user sessions are detected, requiring interactive authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst silentRequest = {\n    scopes: [\"User.Read\", \"Mail.Read\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Authority for Multi-tenant\nDESCRIPTION: Demonstrates the default authority configuration for multi-tenant applications using the 'common' endpoint.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/initialize-confidential-client-application.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nauthority: \"https://login.microsoftonline.com/common/\";\n```\n\n----------------------------------------\n\nTITLE: MSAL Browser SRI Hash Table in Markdown\nDESCRIPTION: A markdown table listing the SRI hashes for different versions of msal-browser.js and msal-browser.min.js. Each row contains the version number, file name, and corresponding SHA-384 hash.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/cdn-usage.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| 2.6.1        | msal-browser.js     | `sha384-kHVR+hnKKUXpL5UEI3dgmdIKZgopBagC1RdQytFqglEGROvOSAGJRkaFWfu8VsSx` |\n| 2.6.1        | msal-browser.min.js | `sha384-ry0iBug2qnSSs0YiS8IfxgvYZvgsCCXiplbiwrf9tQWkpCFMcezBMuLDbVtYrKIl` |\n| 2.6.0        | msal-browser.js     | `sha384-MOtTwBzAcbzhOnPuklGgFJINWfT6ekHPIhI0GkJdUihkt/AtO/ttlrT93yen631k` |\n| 2.6.0        | msal-browser.min.js | `sha384-sGG/3pGinkV/9X/+VrbuRSSJmOaYKq9Bdyet6ICHajSN8wSG9DpJHda6vls5BkUd` |\n| 2.5.2        | msal-browser.js     | `sha384-ZOWQBoErNmfc9sfHh6PXYc9NZ+02cf5d+wdsnvfKHSEyQ2x+YSWaf12KInVhfurI` |\n| 2.5.2        | msal-browser.min.js | `sha384-A9ludGsBPhx3Ec8zLyd3vZEqJrRbvD6fJWpasbzAFyaaa/AMR6rtCUtbUmP07rsj` |\n| 2.5.1        | msal-browser.js     | `sha384-MFZe/UOLz61FRpO06noy2uBkJEZUaxccyYYwrSrwBOEY59Fi0GxyRzPiiZKLvvkC` |\n| 2.5.1        | msal-browser.min.js | `sha384-/cOXpDxWc4bzFZUDf49Sp31Im+bSjki6UxTPadEDitHw0277qGX5teCOdieziPZh` |\n| 2.5.0        | msal-browser.js     | `sha384-JtZbGQvK0HbNDG42cgeg3XxEllLbMW8aAiSCXoLdW7iJhkdC7v4Kzqvl4LWOSiFF` |\n| 2.5.0        | msal-browser.min.js | `sha384-+sjqS/ee1BeZqojCMFh8gGTbZ0ATgrA/rEIANI0l0Y6QdA+MDwmXLhj3JGvHueL7` |\n| 2.4.1        | msal-browser.js     | `sha384-4Equw/X3Wp2XPnMSCbe2OQQRE/8MzlwepR53zKGbAz/6eO//yRXOcn3LKf1MnBWS` |\n| 2.4.1        | msal-browser.min.js | `sha384-vazVaX5+cCJf+t0Dzdb8CxX9jLLvWuSZqEI2lBSMeLUBPQovS4IlwFQI6epI2tJD` |\n| 2.4.0        | msal-browser.js     | `sha384-Bz0kggjHC0kxcxxtRzWgjaF0JGsmHuO1atz26xKETeu5WgdarvGmr9Pr/f/pKtrq` |\n| 2.4.0        | msal-browser.min.js | `sha384-tBRIK0qPn8yxGmyhpgVsVIFaJNa0EDL62hp+zvDu1vtT1bIqWU6HiYexMhtk52bP` |\n| 2.3.1        | msal-browser.js     | `sha384-khe4Bq8VcpAsK8zAycaYefEMHsLny9P/kgPF9Jy1afhFNZ4EODmrdq//+LFp1mWV` |\n| 2.3.1        | msal-browser.min.js | `sha384-d6fJLwOshjtqjJPGMQ4XgIKOvx46EBeyiPxTBaNJlj0GWqXKCh09qA6SgpAPnqD8` |\n| 2.3.0        | msal-browser.js     | `sha384-ILJg8BOvXQwFGYEbkLVLYTYoNpTT7tP905UubLu2AqwksVdddAu5z9k3e6gMhqc5` |\n| 2.3.0        | msal-browser.min.js | `sha384-o+Sncs5XJ3NEAeriM/FV8YGZrh7mZk4GfNutRTbYjsDNJxb7caCLeqiDabistgwW` |\n| 2.2.1        | msal-browser.js     | `sha384-M6zl9i1upj9LPj3zSUn/IejJwPyUCewu0+RD444XuWQiRomvb2ZUwanqc0c2XfCy` |\n| 2.2.1        | msal-browser.min.js | `sha384-8LDT8A5GReznR7uR2KGWc1Ep/kTc0ErU3yVBKJMOmAMoSf+hMonk3y3BceQ1rvF6` |\n| 2.2.0        | msal-browser.js     | `sha384-DDogsvdm1j1csBm8TKIenLTaFJA+x0KjwdW0CAx6ZW8+5EOqSIasS3OKZ0aiq3RV` |\n| 2.2.0        | msal-browser.min.js | `sha384-ywaKEa0KdH8yiwoKS+2hRMenFDilyhT/K0r3WTXBzUQj+RNlYGnLeecytOEdgHpR` |\n| 2.1.0        | msal-browser.js     | `sha384-M9bRB06LdiYadS+F9rPQnntFCYR3UJvtb2Vr4Tmhw9WBwWUfxH8VDRAFKNn3VTc/` |\n| 2.1.0        | msal-browser.min.js | `sha384-EmYPwkfj+VVmL1brMS1h6jUztl4QMS8Qq8xlZNgIT/luzg7MAzDVrRa2JxbNmk/e` |\n| 2.0.2        | msal-browser.js     | `sha384-rQvomuvjVybeTxLQIpbtb6lqFsDuJparCjjUJZjRZjVDNzGRloXbPj9qbgf9YM/d` |\n| 2.0.2        | msal-browser.min.js | `sha384-zHGbJmHXAWMXaREIK7qFkrJCcU2ktJd8G9DAp49Q+y/+H6ArVhvFUW5IbyTzbNnn` |\n| 2.0.1        | msal-browser.js     | `sha384-knPh00kvaT+k3+4TCD5S2ORDNVc2I3RVbqI/ksbTlpdSBh8ZnyAPxW2kkTSG0+mT` |\n| 2.0.1        | msal-browser.min.js | `sha384-fbyYRj8H9iJU/JyncEbzW6WgVOaR5C+PU1dHsRBg2Ag2Q14F4IB8+T8BdknwjRQ8` |\n| 2.0.0        | msal-browser.js     | `sha384-BqIcDtzVkr3wRGsSrk+iJJNm9GSdUsP0I2MplbnhPPc+I1l1d+dkKbcnqgNddGWX` |\n| 2.0.0        | msal-browser.min.js | `sha384-n3aacu1eFuIAfS3ZY4WGIZiQG/skqpT+cbeqIwLddpmMWcxWZwYdt+F0PgKyw+m9` |\n| 2.0.0-beta.4 | msal-browser.js     | `sha384-7sxY2tN3GMVE5jXH2RL9AdbO6s46vUh9lUid4yNCHJMUzDoj+0N4ve6rLOmR88yN` |\n| 2.0.0-beta.4 | msal-browser.min.js | `sha384-j9+OYwF1QFM1A8/DNvWKqvTw+bc5alOXQ7IA2WvGAcLLLpN/tK9XRTbJtlTiSFJI` |\n| 2.0.0-beta.3 | msal-browser.js     | `sha384-iKgpFzdbMAsg695JG+EmHleQe5gRjoAAixuMf0jfM7pCOVuGqhyBuXO1Ai71fixx` |\n| 2.0.0-beta.3 | msal-browser.min.js | `sha384-X2nv+6ViZGj+UCfGAbimHAXpBEAi0RA6GWuqCckbMLU5jVr8uDjf6pGUvTkq7wME` |\n| 2.0.0-beta.2 | msal-browser.js     | `sha384-CEQpk7EG1PVKCHHdoQzDdR5uU7nJ1PLlcdx1s7vi8Ta/Pndhr04imhqCUkZGimOj` |\n| 2.0.0-beta.2 | msal-browser.min.js | `sha384-O3n9nwTefR6cSLikBQsCDYke2pWL5YWluwvp0RgGe+VK2eU0+RJC1cmMow5jD1OE` |\n| 2.0.0-beta.0 | msal-browser.js     | `sha384-r7Qxfs6PYHyfoBR6zG62DGzptfLBxnREThAlcJyEfzJ4dq5rqExc1Xj3TPFE/9TH` |\n| 2.0.0-beta.0 | msal-browser.min.js | `sha384-OV4a42kPPZv7IxRWcyqoLn9Ohs0g1WXejuNceZxAE9usAfLVFBcdre9yqo4I03VN` |\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshTokenRequest Type in TypeScript\nDESCRIPTION: Defines the RefreshTokenRequest type, which extends CommonRefreshTokenRequest with specific properties for refresh token operations. It includes scopes, refreshToken, and an optional forceCache flag.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type RefreshTokenRequest = Partial<Omit<CommonRefreshTokenRequest, \"scopes\" | \"refreshToken\" | \"authenticationScheme\" | \"resourceRequestMethod\" | \"resourceRequestUri\" | \"requestedClaimsHash\" | \"storeInCache\">> & {\n    scopes: Array<string>;\n    refreshToken: string;\n    forceCache?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Authority for Single Tenant\nDESCRIPTION: Shows how to configure MSAL authority for single-tenant applications by specifying the tenant ID in the authority URL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/initialize-confidential-client-application.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nauthority: \"https://login.microsoftonline.com/{your_tenant_id}\";\n```\n\n----------------------------------------\n\nTITLE: Authorization Response Validation Function in MSAL\nDESCRIPTION: Function that validates the authorization response from the server against the request state. This ensures the response matches the original request and helps prevent CSRF attacks.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_194\n\nLANGUAGE: typescript\nCODE:\n```\nfunction validateAuthorizationResponse(serverResponse: AuthorizeResponse, requestState: string): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Tab Authentication State Synchronization\nDESCRIPTION: Demonstrates how to implement cross-tab/window authentication state synchronization using ACCOUNT_ADDED and ACCOUNT_REMOVED events in MSAL React.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { EventType } from \"@azure/msal-browser\";\n\nfunction EventExample() {\n    const { instance } = useMsal();\n\n    useEffect(() => {\n        // This will be run on component mount\n        instance.enableAccountStorageEvents();\n        const callbackId = instance.addEventCallback((message) => {\n            // This will be run every time an event is emitted after registering this callback\n            if (message.eventType === EventType.ACCOUNT_ADDED) {\n                const account = message.payload;    \n                // Update UI\n            } else if (message.eventType === EventType.ACCOUNT_REMOVED) {\n                const account = message.payload;\n                // Update UI\n            }\n        });\n\n        return () => {\n            // This will be run on component unmount\n            instance.disableAccountStorageEvents();\n            if (callbackId) {\n                instance.removeEventCallback(callbackId);\n            }\n        }\n        \n    }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Multiple Tenants using MSAL Browser\nDESCRIPTION: This code snippet demonstrates how to authenticate with multiple tenants using MSAL Browser. It includes a custom function for token acquisition and shows how to configure and initialize the PublicClientApplication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/multi-tenant-accounts.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getTokenMultiTenant(request, tenantId) {\n    if (request.account) {\n        let tenantedAccount = null;\n        if (tenantId) {\n            tenantedAccount = myMSALObj.getAccount(\n                {\n                    homeAccountId: account.homeAccountId,\n                    tenantId: GUEST_TENANT_ID\n                });\n            request.authority = BASE_AUTHORITY + tenantId\n        }\n\n        if (tenantedAccount) {\n            request.account = tenantedAccount;\n        } else {\n            request.cacheLookupPolicy = CacheLookupPolicy.RefreshToken\n        }\n\n        return await myMSALObj.acquireTokenSilent(request).catch((error) => {\n            if (error instanceof InteractionRequiredAuthError) {\n                await myMSALObj.acquireTokenPopup(request);\n            } else {\n                console.error(error);\n            }\n        });\n    } else {\n        return await myMSALObj.loginPopup(request);\n    }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication, InteractionRequiredError, CacheLookupPolicy } from \"@azure/msal-browser\";\n\nconst HOME_TENANT_ID = \"HOME_TENANT_ID\";\nconst GUEST_TENANT_ID = \"GUEST_TENANT_ID\";\nconst BASE_AUTHORITY = \"https://login.microsoftonline.com/\"\n\nconst msalConfig = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: BASE_AUTHORITY + HOME_TENANT_ID,\n    },\n};\n\nconst myMSALObj = new PublicClientApplication(msalConfig);\nmyMSALObj.initialize.then(() => {\n    .handleRedirectPromise()\n    .then(handleResponse)\n    .catch((err) => {\n        console.error(err);\n    });\n})\n\nconst homeTenantRequest = {\n    scopes: [\"HOME_TENANT_SCOPE\"],\n};\nconst guestTenantRequest = {\n    scopes: [\"GUEST_TENANT_SCOPE\"]\n};\n\nconst homeTenantAuthResponse = await getTokenMultiTenant(homeTenantRequest);\nconst baseAccount = homeTenantAuthResponse.account;\nconst homeAccessToken = homeTenantAuthResponse.accessToken;\n\nconst guestTenantAuthResponse = await getTokenMultiTenant(\n    {\n        ...guestTenantRequest,\n        account: baseAccount\n        },\n        GUEST_TENANT_ID\n    );\n\nconst guestTenantAccount = guestTenantAuthResponse.account;\nconst guestTenantAccessToken = guestTenantAuthResponse.accessToken;\n```\n\n----------------------------------------\n\nTITLE: Removing Event Callback in MSAL-Browser JavaScript\nDESCRIPTION: This example demonstrates how to remove an event callback using the callback ID returned when adding the callback.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/events.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance.removeEventCallback(callbackId);\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Navigation with Vue Router - JavaScript\nDESCRIPTION: This snippet shows how to configure MSAL.js to use vue-router for route changes. The 'setNavigationClient' method is used to set a custom navigation client, avoiding full page reloads when routes change.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/vue3-sample-app/README.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst navigationClient = new CustomNavigationClient(router);\nmsalInstance.setNavigationClient(navigationClient);\n```\n\n----------------------------------------\n\nTITLE: Enabling Claims-Based Caching in MSAL 3.x\nDESCRIPTION: Configuration to enable claims-based caching in MSAL 3.x, which is no longer the default behavior. This maintains the same token caching behavior as in MSAL 2.x for applications that depend on it.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v2-migration.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        ...\n    },\n    ...\n    cache: {\n        claimsBasedCachingEnabled: true\n    }\n}\n\nconst msalInstance = new msal.PublicClientApplication(msalConfig);\nawait msalInstance.initialize();\n```\n\n----------------------------------------\n\nTITLE: Example HashLocationStrategy Route Configuration\nDESCRIPTION: Code snippet showing how to configure routes with HashLocationStrategy and MsalGuard in an Angular application. This demonstrates protecting routes while leaving placeholder routes unprotected.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/FAQ.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Setting the `MsalGuard` on your initial page\n- Not setting the `MsalGuard` on placeholder routes (e.g. `/code`, `/error`)\n- Making sure the `MsalRedirectComponent` is bootstrapped\n- Optionally: adding `MsalGuard` to all your routes if you want all your routes protected\n```\n\n----------------------------------------\n\nTITLE: Running MSAL.js Sample with Specific Port\nDESCRIPTION: This command runs the MSAL.js sample on a specified port. If no port is provided, it defaults to 30662.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/VanillaJSTestApp2.0/Readme.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm start -- -port <port-#> // defaults to 30662\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnpm start -- -p <port-#> // defaults to 30662\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing for MSAL Angular with SSR\nDESCRIPTION: AppRoutingModule configuration that disables hash routing and enables initial navigation for proper functioning with Angular Universal. Hash routing should be avoided when using SSR.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/angular-universal.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {\n        useHash: false,\n        initialNavigation: 'enabled'\n    })],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n----------------------------------------\n\nTITLE: Adding Code Challenge Parameters to Authentication Request in TypeScript\nDESCRIPTION: This function adds code challenge parameters to the authentication request. It takes a Map of string key-value pairs, an optional code challenge string, and an optional code challenge method string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addCodeChallengeParams(parameters: Map<string, string>, codeChallenge?: string, codeChallengeMethod?: string): void;\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Node with Secret Management\nDESCRIPTION: Demonstrates how to create an MSAL Confidential Client Application with secure secret management using dotenv and shows token acquisition using the token cache.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/caching.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst msal = require(\"@azure/msal-node\");\nrequire(\"dotenv\").config(); // process.env now has the values defined in a .env file\n\n// Create msal application object\nconst cca = new msal.ConfidentialClientApplication({\n    auth: {\n        clientId: \"Enter_the_Application_Id_Here\", // e.g. \"b1b60dca-c49d-496e-9851-xxxxxxxxxxxx\" (guid)\n        authority:\n            \"https://login.microsoftonline.com/Enter_the_Tenant_Info_Here\", // e.g. \"common\" or your tenantId (guid)\n        clientSecret: process.env.clientSecret, // obtained during app registration\n    },\n});\n\n/**\n * acquireToken* APIs return an account object containing the \"homeAccountId\"\n * you should keep a record of this in your app and use it later on when calling acquireTokenSilent\n * For more, see: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/accounts.md\n */\nconst someUserHomeAccountId = \"Enter_User_Home_Account_Id\";\n\nconst msalTokenCache = cca.getTokenCache();\nconst account = await msalTokenCache.getAccountByHomeId(someUserHomeAccountId);\n\nconst silentTokenRequest = {\n    account: account,\n    scopes: [\"User.Read\"],\n};\n\ncca.acquireTokenSilent(silentTokenRequest)\n    .then((response) => {\n        // do something with response\n    })\n    .catch((error) => {\n        // catch and handle errors\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Authority Configuration Options Interface\nDESCRIPTION: Specifies the options for configuring an authority, including protocol mode, known authorities, and metadata caching settings. This type is used when creating Authority instances.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"AuthorityOptions\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type AuthorityOptions = {\n    protocolMode: ProtocolMode;\n    OIDCOptions?: OIDCOptions | null;\n    knownAuthorities: Array<string>;\n    cloudDiscoveryMetadata: string;\n    authorityMetadata: string;\n    skipAuthorityMetadataCache?: boolean;\n    azureRegionConfiguration?: AzureRegionConfiguration;\n    authority?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Running MSAL React Sample Production Server\nDESCRIPTION: This snippet shows the process of building the MSAL React sample for production and running it using a static server. It includes commands for building the project and serving the built files.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/typescript-sample/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nserve -s build\n```\n\n----------------------------------------\n\nTITLE: Adding State Parameter to Authentication Request in MSAL.js (TypeScript)\nDESCRIPTION: Adds a state parameter to request parameters. The state parameter is used to maintain state between the request and the callback and to help mitigate CSRF attacks.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addState(parameters: Map<string, string>, state: string): void;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MSAL Node.js Samples\nDESCRIPTION: This command installs all the necessary dependencies for the MSAL Node.js sample application. It should be run in the sample application directory after configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Function declaration for getAuthorizationCodePayload in TypeScript\nDESCRIPTION: Function to extract payload information from an authorization code response. It processes server parameters and validates them against a cached state.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAuthorizationCodePayload(serverParams: AuthorizeResponse, cachedState: string): AuthorizationCodePayload;\n```\n\n----------------------------------------\n\nTITLE: Defining AAD Authority Constants in TypeScript\nDESCRIPTION: Defines authority constants used for Azure Active Directory authentication endpoints including common, organizations and consumers tenants.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AADAuthorityConstants: {\n    readonly COMMON: \"common\";\n    readonly ORGANIZATIONS: \"organizations\";\n    readonly CONSUMERS: \"consumers\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuration Type Definition for MSAL Node.js Client\nDESCRIPTION: Defines the configuration options for initializing MSAL Node.js client including auth, broker, cache, system and telemetry options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Configuration = {\n    auth: NodeAuthOptions;\n    broker?: BrokerOptions;\n    cache?: CacheOptions;\n    system?: NodeSystemOptions;\n    telemetry?: NodeTelemetryOptions;\n};\n```\n\n----------------------------------------\n\nTITLE: Extending NavigationClient in JavaScript\nDESCRIPTION: This code shows how to extend the default NavigationClient to override only the internal navigation method, while keeping the default external navigation behavior.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/navigation.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomNavigationClient extends NavigationClient {\n    async navigateInternal(url, options) {\n        // Your custom logic\n    }\n\n    // navigateExternal will use the default\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for AGC E2E Tests (PowerShell)\nDESCRIPTION: These PowerShell commands set the necessary environment variables required to run the AGC E2E tests. Each variable corresponds to a specific configuration setting for the tests, including API URLs, authentication details, and certificate paths.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/AGC-README.md#2025-04-18_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$env:GRAPH_URL = \"The URL of Microsoft Graph API\"\n$env:AUTHORITY = \"The URL that indicates a directory that MSAL can request tokens from.\"\n$env:KEY_VAULT_URL = \"The URL to the key vault where the test user's credentials are stored\"\n$env:AZURE_TENANT_ID = \"The tenant ID in Microsoft Entra ID\"\n$env:AZURE_CLIENT_ID = \"The application (client) ID registered in the Microsoft Entra tenant\"\n$env:AZURE_CLIENT_SECRET = \"The client secret for the registered application\"\n$env:NODE_EXTRA_CA_CERTS = \"pathToCert\"\n```\n\n----------------------------------------\n\nTITLE: Defining TokenClaims Interface in TypeScript\nDESCRIPTION: A comprehensive type definition for token claims in ID tokens and access tokens, including user information, issuer details, timestamps, and authentication attributes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_185\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TokenClaims = {\n    aud?: string;\n    iss?: string;\n    iat?: number;\n    nbf?: number;\n    oid?: string;\n    sub?: string;\n    tid?: string;\n    tfp?: string;\n    acr?: string;\n    ver?: string;\n    upn?: string;\n    preferred_username?: string;\n    login_hint?: string;\n    emails?: string[];\n    name?: string;\n    nonce?: string;\n    exp?: number;\n    home_oid?: string;\n    sid?: string;\n    cloud_instance_host_name?: string;\n    cnf?: {\n        kid: string;\n    };\n    x5c_ca?: string[];\n    ts?: number;\n    at?: string;\n    u?: string;\n    p?: string;\n    m?: string;\n    roles?: string[];\n    amr?: string[];\n    idp?: string;\n    auth_time?: number;\n    tenant_region_scope?: string;\n    tenant_region_sub_scope?: string;\n};\nexport { TokenClaims as IdTokenClaims }\nexport { TokenClaims }\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Logout Redirect URI to Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds a post-logout redirect URI to request parameters. This defines where the user will be redirected after completing the logout process.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addPostLogoutRedirectUri(parameters: Map<string, string>, redirectUri: string): void;\n```\n\n----------------------------------------\n\nTITLE: Example PathLocationStrategy Route Configuration\nDESCRIPTION: Code snippet showing how to configure routes with PathLocationStrategy and MsalGuard in an Angular application, including redirect URI setup and auth path configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/FAQ.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Setting the `MsalGuard` on your initial page\n- Set your `redirectUri` to `'http://localhost:4200/auth'`\n- Adding an `'auth'` path to your routes, setting the `MsalRedirectComponent` as the component\n- Making sure the `MsalRedirectComponent` is bootstrapped\n- Optionally: adding `MsalGuard` to all your routes if you want all your routes protected\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via NPM\nDESCRIPTION: Bash command for installing project dependencies using npm package manager\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/device-code/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Adding Client-Side Checks for Browser Objects in MSAL Angular\nDESCRIPTION: An alternative approach to handle browser-only objects by adding conditional checks before accessing window properties. This ensures the code only executes in browser environments.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/angular-universal.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (typeof window !== \"undefined\") {\n    this.isIframe = window !== window.parent && !window.opener;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Token Use Parameter to Authentication Request in MSAL.js (TypeScript)\nDESCRIPTION: Adds a token use parameter to specify how the token will be used. This helps the authorization server understand the purpose of the token request.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addRequestTokenUse(parameters: Map<string, string>, tokenUse: string): void;\n```\n\n----------------------------------------\n\nTITLE: Casting Event Payload in MSAL Angular\nDESCRIPTION: This snippet shows how to cast the event payload as a specific type (AuthenticationResult) to access account information without compilation errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/events.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nngOnInit(): void {\n  this.msalBroadcastService.msalSubject$\n    .pipe(\n      filter((msg: EventMessage) => msg.eventType === EventType.LOGIN_SUCCESS),\n    )\n    .subscribe((result: EventMessage) => {\n      // Casting payload as AuthenticationResult to access account\n      const payload = result.payload as AuthenticationResult;\n      this.authService.instance.setActiveAccount(payload.account);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authority Type Enum for Different Authority Sources\nDESCRIPTION: Creates an enumeration of authority types including Default, ADFS, DSTS, and CIAM. This helps classify the different types of identity providers supported by the library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"AuthorityType\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n// Warning: (ae-missing-release-tag) \"AuthorityType\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const AuthorityType: {\n    readonly Default: 0;\n    readonly Adfs: 1;\n    readonly Dsts: 2;\n    readonly Ciam: 3;\n};\n\n// @public (undocumented)\nexport type AuthorityType = (typeof AuthorityType)[keyof typeof AuthorityType];\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe HTTP Calls with MSAL Interceptor in Angular Universal\nDESCRIPTION: Component example showing how to safely implement HTTP calls with the MSAL Interceptor in an SSR environment. It adds a window check to ensure Graph API calls only happen client-side.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/angular-universal.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ProfileComponent implements OnInit {\nprofile!: ProfileType;\n\n    constructor(\n        private http: HttpClient\n    ) { }\n\n    ngOnInit() {\n        // This check is added to ensure HTTP calls are made client-side\n        if (typeof window !== \"undefined\") {\n            this.getProfile();\n        }\n    }\n\n    getProfile() {\n        this.http.get(GRAPH_ENDPOINT)\n            .subscribe(profile => {\n                this.profile = profile;\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: Bash command for launching the sample MSAL Node application\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/device-code/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Implementing PopTokenGenerator Class for PoP Tokens in TypeScript\nDESCRIPTION: Defines a class for generating Proof of Possession (PoP) tokens. Includes methods for generating cryptographic key material, signing payloads, and creating PoP tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_155\n\nLANGUAGE: typescript\nCODE:\n```\nexport class PopTokenGenerator {\n    constructor(cryptoUtils: ICrypto, performanceClient?: IPerformanceClient);\n    generateCnf(request: SignedHttpRequestParameters, logger: Logger): Promise<ReqCnfData>;\n    generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf>;\n    signPayload(payload: string, keyId: string, request: SignedHttpRequestParameters, claims?: object): Promise<string>;\n    signPopToken(accessToken: string, keyId: string, request: SignedHttpRequestParameters): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThrottleConstants in TypeScript for MSAL.js\nDESCRIPTION: This code snippet defines the ThrottleConstants object, which specifies the default and maximum throttle times in seconds for MSAL.js. The default throttle time is 60 seconds, and the maximum is 3600 seconds (1 hour).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/Throttling.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ThrottleConstants = {\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web App Authentication in Node.js\nDESCRIPTION: This snippet demonstrates the configuration object for the web app. It includes the web API scope and authentication settings such as client ID, authority, and client secret.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/on-behalf-of/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst WEB_API_SCOPE = \"api://ENTER_WEB_API_CLIENT_ID/.default\";\n\nconst config = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_INFO\",\n        clientSecret: \"ENTER_CLIENT_SECRET\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Describing Account Identifiers in MSAL JavaScript\nDESCRIPTION: This markdown snippet explains the structure and derivation of account identifiers in MSAL, including homeAccountId, localAccountId, and idTokenClaims. It details how these identifiers are constructed from authentication responses and ID token claims.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/Accounts.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Account Identifiers\n\nThe following `AccountInfo` attributes are used identify user accounts in authentication contexts.\n\n### homeAccountId\n\nWhen MSAL obtains an authentication response, it checks if the response includes client information. Specifically, MSAL checks for the presence of:\n\n-   `tenantId` - Unique identifier of the tenant the client application belongs to.\n-   `uniqueId` - Unique identifier of the user account within the corresponding tenant.\n\nWhen these two attributes are present, the `homeAccountId` attribute is built by concatenating them the dot-separated format `uniqueId.tenantId`.\n\nIn cases where there is no `tenantId` in the authentication response, such as when using `ADFS`, MSAL looks for the ID Token claim `sub`, which identifies the \"subject\" the ID Token makes claims about and, if present, sets it as the `homeAccountIdentifier`.\n\nFinally, when the `sub` claim is not present in a scenario where `tenantId` is not available, the `homeAccountIdentifier` is set to an empty string.\n\n### localAccountId\n\nThe `localAccountId` attribute is a tenant-specific identifier that is usually utilized in legacy cases. MSAL first looks for the `oid` claim in the ID Token from an authentication response and, if present, sets it as the `localAccountId` in the `AccountInfo` object. If the `oid` claim is not present, MSAL falls back to setting the `sub` claim from the ID Token as the `localAccountId`.\n\nFinally, if neither the `oid` or `sub` claim is present in the ID Token claims, `localAccountId` will be undefined in the `AccountInfo` object.\n\n### idTokenClaims\n\nWe add the `claims` retrieved from the idToken with an account. Please note that client credential grant flow, referenced [here](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow) does not have an idToken and hence, this property will not be populated for that particular flow.\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication URLs and Handling Redirects in Chromium Extensions with MSAL\nDESCRIPTION: This code snippet demonstrates how to generate login, acquire token, and logout URLs, as well as handle redirect flows in a Chromium extension using MSAL Browser. It includes functions for launching web auth flows and acquiring tokens silently or interactively.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/ChromiumExtensionSample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Generates a login url\n */\nasync function getLoginUrl(request) {\n    return new Promise((resolve, reject) => {\n        msalInstance.loginRedirect({\n            ...request,\n            onRedirectNavigate: (url) => {\n                resolve(url);\n                return false;\n            }\n        }).catch(reject);\n    });\n}\n\n\n/**\n * Generates an acquire token url\n */\nasync function getAcquireTokenUrl(request) {\n    return new Promise((resolve, reject) => {\n        msalInstance.acquireTokenRedirect({\n            ...request,\n            onRedirectNavigate: (url) => {\n                resolve(url);\n                return false;\n            }\n        }).catch(reject);\n    });\n}\n\n/**\n * Generates a login url\n */\nasync function launchWebAuthFlow(url) {\n    return new Promise((resolve, reject) => {\n        chrome.identity.launchWebAuthFlow({\n            interactive: true,\n            url\n        }, (responseUrl) => {\n            // Response urls includes a hash (login, acquire token calls)\n            if (responseUrl.includes(\"#\")) {\n                msalInstance.handleRedirectPromise(`#${responseUrl.split(\"#\")[1]}`)\n                    .then(resolve)\n                    .catch(reject)\n            } else {\n                // Logout calls\n                resolve();\n            }\n        })\n    })\n}\n\n/**\n * Generates a logout url\n */\nasync function getLogoutUrl(request) {\n    return new Promise((resolve, reject) => {\n        msalInstance.logout({\n            ...request,\n            onRedirectNavigate: (url) => {\n                resolve(url);\n                return false;\n            }\n        }).catch(reject);\n    });\n}\n\n/**\n * Attempts to silent acquire an access token, falling back to interactive.\n */\nasync function acquireToken(request) {\n    return msalInstance.acquireTokenSilent(request)\n        .catch(async (error) => {\n            console.error(error);\n            const acquireTokenUrl = await getAcquireTokenUrl(request);\n\n            return launchWebAuthFlow(acquireTokenUrl);\n        })\n}\n\n// Login\nconst loginUrl = await getLoginUrl();\nconst loginResult = await launchWebAuthFlow(loginUrl);\n\n// Acquire token\nconst { accessToken } = await acquireToken({\n    scopes: [ \"user.read\" ],\n    account: msalInstance.getAllAccounts()[0]\n});\n\n// Logout\nconst logoutUrl = await getLogoutUrl();\nawait launchWebAuthFlow(logoutUrl);\n```\n\n----------------------------------------\n\nTITLE: Performance Measurement Properties Interface\nDESCRIPTION: TypeScript interface defining optional properties for tracking various performance metrics and states during authentication flows including timing, token sizes, errors, and configuration states.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_150\n\nLANGUAGE: typescript\nCODE:\n```\nqueuedTimeMs?: number;\nincompleteSubMeasurements?: Map<string, SubMeasurement>;\nvisibilityChangeCount?: number;\nincompleteSubsCount?: number;\nawaitIframeCorrelationId?: string;\nqueuedCount?: number;\nqueuedManuallyCompletedCount?: number;\nidTokenSize?: number;\naccessTokenSize?: number;\nrefreshTokenSize?: number | undefined;\nappName?: string;\nappVersion?: string;\nextensionId?: string;\nextensionVersion?: string;\nmatsBrokerVersion?: string;\nmatsAccountJoinOnStart?: string;\nmatsAccountJoinOnEnd?: string;\nmatsDeviceJoin?: string;\nmatsPromptBehavior?: string;\nmatsApiErrorCode?: number;\nmatsUiVisible?: boolean;\nmatsSilentCode?: number;\nmatsSilentBiSubCode?: number;\nmatsSilentMessage?: string;\nmatsSilentStatus?: number;\nmatsHttpStatus?: number;\nmatsHttpEventCount?: number;\nhttpVerToken?: string;\nhttpStatus?: number;\ncontentTypeHeader?: string;\ncontentLengthHeader?: string;\nallowPlatformBroker?: boolean;\nextensionInstalled?: boolean;\nextensionHandshakeTimeoutMs?: number;\nextensionHandshakeTimedOut?: boolean;\nnestedAppAuthRequest?: boolean;\nmultiMatchedAT?: number;\nmultiMatchedID?: number;\nmultiMatchedRT?: number;\nerrorName?: string;\nerrorStack?: string[];\ncontext?: string;\ncacheRtCount?: number;\ncacheIdCount?: number;\ncacheAtCount?: number;\nscenarioId?: string;\naccountType?: \"AAD\" | \"MSA\" | \"B2C\";\nretryError?: string;\nembeddedClientId?: string;\nembeddedRedirectUri?: string;\nisAsyncPopup?: boolean;\nrtExpiresOnMs?: number;\nsidFromClaims?: boolean;\nsidFromRequest?: boolean;\nloginHintFromRequest?: boolean;\nloginHintFromUpn?: boolean;\nloginHintFromClaim?: boolean;\ndomainHintFromRequest?: boolean;\nprompt?: string;\nusePreGeneratedPkce?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Azure Key Vault Certificate Retrieval\nDESCRIPTION: JavaScript code to initialize Azure SDK clients and retrieve certificate details from Key Vault, including certificate thumbprint and private key extraction\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/key-vault-managed-identity.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize Azure SDKs\nconst credential = new identity.DefaultAzureCredential();\nconst certClient = new keyvaultCert.CertificateClient(KVUri, credential);\nconst secretClient = new keyvaultSecret.SecretClient(KVUri, credential);\n\nasync function main() {\n\n    // Grab the certificate thumbprint\n    const certResponse = await certClient.getCertificate(CERTIFICATE_NAME);\n    const thumbprint = certResponse.properties.x509Thumbprint.toString('hex').toUpperCase();\n\n    // When you upload a certificate to Key Vault, a \"secret\" containing your private key is automatically created\n    const secretResponse = await secretClient.getSecret(CERTIFICATE_NAME);\n\n    // secretResponse contains both public and private key, but we only need the private key\n    const privateKey = secretResponse.value.split('-----BEGIN CERTIFICATE-----\\n')[0]\n\n    // Initialize msal and start the server\n    msalApp(thumbprint, privateKey);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Code to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds an authorization code to the authentication parameters. It takes a Map of string key-value pairs and a string code as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addAuthorizationCode(parameters: Map<string, string>, code: string): void;\n```\n\n----------------------------------------\n\nTITLE: MSAL Angular B2C Implementation\nDESCRIPTION: Sample demonstrating MSAL Angular integration with B2C authentication, using MsalRedirectComponent for handling redirects and PathLocationStrategy for routing.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/README.md#2025-04-18_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Building MSAL Node Package Locally\nDESCRIPTION: Command to build the MSAL Node package locally from the lib/msal-node directory.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:package\n```\n\n----------------------------------------\n\nTITLE: ADFS Authority Configuration in JavaScript\nDESCRIPTION: Demonstrates MSAL configuration for ADFS authentication with custom domain authority.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/authority.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pca = new PublicClientApplication({\n    auth: {\n        clientId: \"<your-client-id>\",\n        authority: \"https://<your-adfs-domain>/adfs/\",\n        knownAuthorities: [\"<your-adfs-domain>\"] // array of domains that are known to be trusted\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Graph API Calls with Dynamic Host Selection\nDESCRIPTION: Implementation of profile viewing functionality that uses the correct graph host from the authentication response. Includes helper function for constructing graph endpoint URLs and main function for token acquisition and API calls.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/instance-aware.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getGraphMeEndpoint(msGraphHost) {\n    if (!msGraphHost) {\n        return \"https://graph.microsoft-ppe.com/v1.0/me\";\n    }\n    return `https://${msGraphHost}/v1.0/me`\n}\n\nasync function seeProfile() {\n    const currentAcc = myMSALObj.getAccountByHomeId(accountId);\n    if (currentAcc) {\n        const response = await getTokenPopup(loginRequest, currentAcc).catch(error => {\n            console.log(error);\n        });\n        callMSGraph(getGraphMeEndpoint(response.msGraphHost), response.accessToken, updateUI);\n        profileButton.style.display = 'none';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating loadExternalTokens API Implementation in MSAL v4\nDESCRIPTION: Shows the changes required for the loadExternalTokens API which is now asynchronous in v4 and returns a Promise instead of a direct result.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v3-migration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalTokenCache = myMSALObj.getTokenCache();\n\n// v3\nconst authenticationResult = msalTokenCache.loadExternalTokens(\n    silentRequest,\n    serverResponse,\n    loadTokenOptions\n);\n\n// v4 change this to:\nconst authenticationResult = await msalTokenCache.loadExternalTokens(\n    silentRequest,\n    serverResponse,\n    loadTokenOptions\n);\n```\n\n----------------------------------------\n\nTITLE: Defining IPerformanceClient Interface in TypeScript\nDESCRIPTION: Interface for a performance measurement client that tracks execution times and performance telemetry. Provides methods for measuring, emitting events, and managing correlation IDs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_130\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IPerformanceClient {\n    // (undocumented)\n    addFields(fields: {\n        [key: string]: {} | undefined;\n    }, correlationId: string): void;\n    // (undocumented)\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string;\n    // (undocumented)\n    addQueueMeasurement(eventName: string, correlationId?: string, queueTime?: number, manuallyCompleted?: boolean): void;\n    // (undocumented)\n    calculateQueuedTime(preQueueTime: number, currentTime: number): number;\n    // (undocumented)\n    discardMeasurements(correlationId: string): void;\n    // (undocumented)\n    emitEvents(events: PerformanceEvent[], correlationId: string): void;\n    // (undocumented)\n    endMeasurement(event: PerformanceEvent): PerformanceEvent | null;\n    // (undocumented)\n    generateId(): string;\n    // (undocumented)\n    incrementFields(fields: {\n        [key: string]: number | undefined;\n    }, correlationId: string): void;\n    // (undocumented)\n    removePerformanceCallback(callbackId: string): boolean;\n    // (undocumented)\n    setPreQueueTime(eventName: string, correlationId?: string): void;\n    // (undocumented)\n    startMeasurement(measureName: string, correlationId?: string): InProgressPerformanceEvent;\n    // @deprecated (undocumented)\n    startPerformanceMeasurement(measureName: string, correlationId: string): IPerformanceMeasurement;\n}\n```\n\n----------------------------------------\n\nTITLE: Using inProgress$ Observable in MSAL Angular\nDESCRIPTION: This snippet demonstrates how to use the inProgress$ observable from MsalBroadcastService to track the status of interactions in MSAL Angular. It filters for the InteractionStatus.None state.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/events.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, OnInit, Inject, OnDestroy } from '@angular/core';\nimport { MsalBroadcastService} from '@azure/msal-angular';\nimport { InteractionStatus } from '@azure/msal-browser';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  private readonly _destroying$ = new Subject<void>();\n\n  constructor(\n    private msalBroadcastService: MsalBroadcastService\n  ) {}\n\n  ngOnInit(): void {\n    this.msalBroadcastService.inProgress$\n      .pipe(\n        // Filtering for all interactions to be completed\n        filter((status: InteractionStatus) => status === InteractionStatus.None),\n        takeUntil(this._destroying$)\n      )\n      .subscribe(() => {\n        // Do something related to user accounts or UI here\n      })\n  }\n\n  ngOnDestroy(): void {\n    this._destroying$.next(null);\n    this._destroying$.complete();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning MSAL Repository using SSH\nDESCRIPTION: Command to clone the Microsoft Authentication Library for JavaScript repository using SSH.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:AzureAD/microsoft-authentication-library-for-js.git\n```\n\n----------------------------------------\n\nTITLE: Defining ServerError Class in TypeScript\nDESCRIPTION: This class extends AuthError to represent server-specific errors. It includes properties for error code, message, sub-error, error number, and status.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_169\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ServerError extends AuthError {\n    constructor(errorCode?: string, errorMessage?: string, subError?: string, errorNo?: string, status?: number);\n    readonly errorNo?: string;\n    readonly status?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL React Types and Interfaces\nDESCRIPTION: This snippet defines various types and interfaces used in the MSAL React library, including AccountIdentifiers, AuthenticatedTemplateProps, IMsalContext, and MsalAuthenticationProps.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/apiReview/msal-react.api.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AccountIdentifiers = Partial<Pick<AccountInfo, \"homeAccountId\" | \"localAccountId\" | \"username\">>;\n\nexport type AuthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\nexport interface IMsalContext {\n    accounts: AccountInfo[];\n    inProgress: InteractionStatus;\n    instance: IPublicClientApplication;\n    logger: Logger;\n}\n\nexport type MsalAuthenticationProps = PropsWithChildren<AccountIdentifiers & {\n    interactionType: InteractionType;\n    authenticationRequest?: PopupRequest | RedirectRequest | SsoSilentRequest;\n    loadingComponent?: React_2.ElementType<IMsalContext>;\n    errorComponent?: React_2.ElementType<MsalAuthenticationResult>;\n}>;\n```\n\n----------------------------------------\n\nTITLE: ResponseHandler Class Definition in TypeScript\nDESCRIPTION: Internal class for handling authentication responses. It processes server token responses, validates tokens, and generates authentication results. The class interfaces with the token cache for storing and retrieving tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_165\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ResponseHandler {\n    constructor(clientId: string, cacheStorage: CacheManager, cryptoObj: ICrypto, logger: Logger, serializableCache: ISerializableTokenCache | null, persistencePlugin: ICachePlugin | null, performanceClient?: IPerformanceClient);\n    static generateAuthenticationResult(cryptoObj: ICrypto, authority: Authority, cacheRecord: CacheRecord, fromTokenCache: boolean, request: BaseAuthRequest, idTokenClaims?: TokenClaims, requestState?: RequestStateObject, serverTokenResponse?: ServerAuthorizationTokenResponse, requestId?: string): Promise<AuthenticationResult>;\n    handleServerTokenResponse(serverTokenResponse: ServerAuthorizationTokenResponse, authority: Authority, reqTimestamp: number, request: BaseAuthRequest, authCodePayload?: AuthorizationCodePayload, userAssertionHash?: string, handlingRefreshTokenResponse?: boolean, forceCacheRefreshTokenResponse?: boolean, serverRequestId?: string): Promise<AuthenticationResult>;\n    validateTokenResponse(serverResponse: ServerAuthorizationTokenResponse, refreshAccessToken?: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ssoSilent() Without User Hint in JavaScript\nDESCRIPTION: This code snippet shows how to use the ssoSilent() API without providing a user hint. It only specifies the required scopes for authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/ssosilent.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst silentRequest = {\n    scopes: [\"User.Read\", \"Mail.Read\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SSO with postMessage API in Iframed Applications using MSAL\nDESCRIPTION: This code example shows how to use the postMessage API for cross-origin communication between parent and child iframes for authentication purposes. It initializes MSAL with client credentials, establishes an event listener for messages from the parent domain, and attempts silent authentication using the received session ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/iframe-usage.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the main myMSALObj instance\n// configuration parameters are located at authConfig.js\nconst myMSALObj = new msal.PublicClientApplication({\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_ID\",\n        redirectUri: \"/redirect\", // set to a blank page for handling auth code response via popups\n    },\n    cache: {\n        cacheLocation: \"localStorage\", // set your cache location to local storage\n    },\n});\n\nconst parentDomain = \"http://localhost:3001\";\n\nwindow.addEventListener(\"message\", (event) => {\n    // check the origin of the data\n    if (event.origin === parentDomain) {\n        const sid = event.data;\n\n        // attempt SSO\n        myMSALObj.ssoSilent({\n            sid: sid\n        }).then((response) => {\n            // do something with response\n        }).catch(error => {\n            // handle errors\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying MSAL Browser Events Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table detailing the events emitted by msal-browser. It includes columns for Event Type, Description, Interaction Type, Payload, and Error for various authentication operations such as login, token acquisition, and SSO.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/events.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Event Type | Description | Interaction Type | Payload | Error |\n| :---------------------------: | :-----------------------------------------------------------------------: | :-------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------: |\n| `LOGIN_START` | LoginPopup or loginRedirect is called | `Popup` or `Redirect` | [PopupRequest](https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_browser.html#popuprequest) or [RedirectRequest](https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_browser.html#redirectrequest) | |\n| `LOGIN_SUCCESS` | Successfully logged in | `Popup` or `Redirect` | [AuthenticationResult](https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#authenticationresult) | |\n| `LOGIN_FAILURE` | Error when logging in | `Popup` or `Redirect` | | [AuthError](https://azuread.github.io/microsoft-authentication-library-for-js/ref/classes/_azure_msal_common.autherror.html) or Error |\n| `ACQUIRE_TOKEN_START` | AcquireTokenPopup or acquireTokenRedirect or acquireTokenSilent is called | `Popup` or `Redirect` or `Silent` | [PopupRequest](https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_browser.html#popuprequest) or [RedirectRequest](https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_browser.html#redirectrequest) or [SilentRequest](https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_browser.html#silentrequest) | |\n| `ACQUIRE_TOKEN_SUCCESS` | Successfully acquired token from cache or network | `Popup` or `Redirect` or `Silent` | [AuthenticationResult](https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#authenticationresult) | |\n| `ACQUIRE_TOKEN_FAILURE` | Error when acquiring token | `Popup` or `Redirect` or `Silent` | | [AuthError](https://azuread.github.io/microsoft-authentication-library-for-js/ref/classes/_azure_msal_common.autherror.html) or Error |\n| `ACQUIRE_TOKEN_NETWORK_START` | Starting acquiring token from network | `Silent` | | |\n| `SSO_SILENT_START` | SsoSilent API called | `Silent` | [SsoSilentRequest](https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_browser.html#ssosilentrequest) | |\n| `SSO_SILENT_SUCCESS` | SsoSilent succeeded | `Silent` | [AuthenticationResult](https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#authenticationresult) | |\n| `SSO_SILENT_FAILURE` | SsoSilent failed | `Silent` | | [AuthError](https://azuread.github.io/microsoft-authentication-library-for-js/ref/classes/_azure_msal_common.autherror.html) or Error |\n| `HANDLE_REDIRECT_START` | HandleRedirectPromise called | `Redirect` | | |\n| `HANDLE_REDIRECT_END` | HandleRedirectPromise finished | `Redirect` | | |\n```\n\n----------------------------------------\n\nTITLE: Acquiring Token with POP Request in JavaScript\nDESCRIPTION: This snippet shows how to use the configured POP token request to acquire a token silently using MSAL Browser.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/shr-server-nonce.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await myMSALObj.acquireTokenSilent(popTokenRequest);\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Claim Extraction in TypeScript\nDESCRIPTION: Defines a function to extract claims from an encoded token. It takes an encoded token and a base64 decoding function as parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_102\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction extractTokenClaims(encodedToken: string, base64Decode: (input: string) => string): TokenClaims;\n```\n\n----------------------------------------\n\nTITLE: MSAL Angular Modules Implementation\nDESCRIPTION: Sample showing MSAL Angular integration with NgModules, implementing upfront scope consenting, MsalRedirectComponent for redirect handling, and PathLocationStrategy for routing.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/README.md#2025-04-18_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Installing dependencies for MSAL Node Brokered Auth sample\nDESCRIPTION: Command to install the necessary dependencies for the MSAL Node Brokered Auth sample application. Run this command in the directory containing package.json.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-cli-brokered-app/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Measuring Token Acquisition Performance using Node Performance Hooks\nDESCRIPTION: Example showing how to measure performance of MSAL token acquisition using Node's built-in performance measurement APIs. It demonstrates setting up a performance observer and measuring the duration of an acquireTokenByClientCredential operation with custom metrics.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/performance.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    const { PerformanceObserver, performance } = require('node:perf_hooks');\n\n    const perfObserver = new PerformanceObserver((items) => {\n        items.getEntries().forEach((entry) => {\n            console.log(entry);\n        })\n    });\n\n    perfObserver.observe({ entryTypes: [\"measure\"], buffered: true });\n\n    // ...\n\n    performance.mark(\"acquireTokenByClientCredential-start\");\n\n    const tokenResponse = await msalInstance.acquireTokenByClientCredential({\n        scopes: [\"User.Read.All\"],\n    });\n\n    performance.mark(\"acquireTokenByClientCredential-end\");\n\n    performance.measure(\"acquireTokenByClientCredential\", {\n        start: \"acquireTokenByClientCredential-start\"\n        end: \"acquireTokenByClientCredential-end\"\n        detail: {\n            tokenSource: tokenResponse.fromCache\n            correlationId: tokenResponse.correlationId\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Acquiring Tokens with Window Handle in Electron\nDESCRIPTION: This code snippet shows how to acquire tokens interactively in an Electron application by providing the window handle. It uses the getNativeWindowHandle method from Electron's BrowserWindow to pass the handle to acquireTokenInteractive.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/brokering.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BrowserWindow } from \"electron\";\n\nconst win = new BrowserWindow();\n\nconst pca = new PublicClientApplication(msalConfig);\n\npca.acquireTokenInteractive({\n    windowHandle: win.getNativeWindowHandle(),\n});\n```\n\n----------------------------------------\n\nTITLE: Acquiring SSH Certificate using MSAL's acquireTokenRedirect in TypeScript\nDESCRIPTION: This snippet shows how to use MSAL's acquireTokenRedirect method to obtain an SSH certificate. The certificate is returned in the accessToken property of the AuthenticationResult object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/ssh-certificates.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// The SSH Certificate will be the string value contained in the accessToken property of the AuthenticationResult object\nconst { accessToken } = await myMSALObj.acquireTokenRedirect(sshCertificateRequest);\n```\n\n----------------------------------------\n\nTITLE: Credential Type Definitions for Azure AD\nDESCRIPTION: Type definitions for credential entities and filters used in Azure AD authentication including token types and filtering options\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CredentialEntity = {\n    homeAccountId: string;\n    environment: string;\n    credentialType: CredentialType;\n    clientId: string;\n    secret: string;\n    familyId?: string;\n    realm?: string;\n    target?: string;\n    userAssertionHash?: string;\n    tokenType?: AuthenticationScheme;\n    keyId?: string;\n    requestedClaimsHash?: string;\n};\n\nexport const CredentialType: {\n    readonly ID_TOKEN: \"IdToken\";\n    readonly ACCESS_TOKEN: \"AccessToken\";\n    readonly ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\";\n    readonly REFRESH_TOKEN: \"RefreshToken\";\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Secure Routes in Vue Router - JavaScript\nDESCRIPTION: This snippet defines a route configuration in vue-router where a 'requiresAuth' meta property is used to specify that the route requires authentication. This approach facilitates the use of route guards to secure parts of a Vue.js application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/vue3-sample-app/README.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst routes = [\n  {\n    path: '/profile',\n    name: 'Profile',\n    component: Profile,\n    meta: {\n        requiresAuth: true\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Building MSAL Angular Package Locally\nDESCRIPTION: Commands to build the @azure/msal-angular package locally. Requires npm dependencies to be installed from the root of the repository first.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// Install dev dependencies from root of repo\nnpm install\n// Change to the msal-angular package directory\ncd lib/msal-angular/\n// To run build only for angular package\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenCache Class in TypeScript\nDESCRIPTION: Defines the TokenCache class which implements ISerializableTokenCache and ITokenCache interfaces. It provides methods for managing and serializing token caches, including account retrieval and cache manipulation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TokenCache implements ISerializableTokenCache, ITokenCache {\n    constructor(storage: NodeStorage, logger: Logger, cachePlugin?: ICachePlugin);\n    deserialize(cache: string): void;\n    getAccountByHomeId(homeAccountId: string): Promise<AccountInfo | null>;\n    getAccountByLocalId(localAccountId: string): Promise<AccountInfo | null>;\n    getAllAccounts(): Promise<AccountInfo[]>;\n    getCacheSnapshot(): CacheKVStore;\n    getKVStore(): CacheKVStore;\n    hasChanged(): boolean;\n    overwriteCache(): Promise<void>;\n    readonly persistence: ICachePlugin;\n    removeAccount(account: AccountInfo): Promise<void>;\n    serialize(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Types and Constants\nDESCRIPTION: Type definitions and constants for cache operations including CacheOptions, CacheOutcome, and CacheType enums. These types define the structure and possible values for cache-related operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CacheOptions = {\n    claimsBasedCachingEnabled?: boolean;\n};\n\nexport const CacheOutcome: {\n    readonly NOT_APPLICABLE: \"0\";\n    readonly FORCE_REFRESH_OR_CLAIMS: \"1\";\n    readonly NO_CACHED_ACCESS_TOKEN: \"2\";\n    readonly CACHED_ACCESS_TOKEN_EXPIRED: \"3\";\n    readonly PROACTIVELY_REFRESHED: \"4\";\n};\n\nexport type CacheRecord = {\n    account?: AccountEntity | null;\n    idToken?: IdTokenEntity | null;\n    accessToken?: AccessTokenEntity | null;\n    refreshToken?: RefreshTokenEntity | null;\n    appMetadata?: AppMetadataEntity | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Request State Type Definitions in TypeScript\nDESCRIPTION: Defines types for tracking the state of authentication requests. RequestStateObject combines user request state with library state, while RequestThumbprint captures key identifiers needed to uniquely identify a request.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_164\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type RequestStateObject = {\n    userRequestState: string;\n    libraryState: LibraryStateObject;\n};\n\nexport type RequestThumbprint = {\n    clientId: string;\n    authority: string;\n    scopes: Array<string>;\n    homeAccountIdentifier?: string;\n    claims?: string;\n    authenticationScheme?: AuthenticationScheme;\n    resourceRequestMethod?: string;\n    resourceRequestUri?: string;\n    shrClaims?: string;\n    sshKid?: string;\n    shrOptions?: ShrOptions;\n    embeddedClientId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Logger with MsalService\nDESCRIPTION: This code shows how to dynamically set or update the logger configuration after MSAL initialization using the MsalService.setLogger() method. It creates a new Logger instance with custom callback, PII logging disabled, and Info log level.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/logging.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.authService.setLogger(new Logger({\n    loggerCallback: (logLevel, message, piiEnabled) => {\n        console.log('MSAL Logging: ', message);\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info\n}));\n```\n\n----------------------------------------\n\nTITLE: Decrypting Private Key with Node.js Crypto Module\nDESCRIPTION: This code snippet shows how to decrypt a private key using Node.js crypto module. It reads the private key from a file, creates a private key object, and exports it in PEM format.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/certificate-credentials.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst crypto = require(\"crypto\");\n\nconst privateKeySource = fs.readFileSync(\"<path_to_key>/example.key\");\n\nconst privateKeyObject = crypto.createPrivateKey({\n    key: privateKeySource,\n    passphrase: process.env.YOUR_PASSPHRASE,\n    format: \"pem\",\n});\n\nconst privateKey = privateKeyObject.export({\n    format: \"pem\",\n    type: \"pkcs8\",\n});\n```\n\n----------------------------------------\n\nTITLE: Performance Event Type Definition in TypeScript\nDESCRIPTION: Defines the structure of a performance event object containing metadata like timing, status, and error information for authentication operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_148\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PerformanceEvent = {\n    eventId: string;\n    status: PerformanceEventStatus;\n    authority: string;\n    clientId: string;\n    correlationId: string;\n    durationMs?: number;\n    endPageVisibility?: string | null;\n    fromCache?: boolean | null;\n    name: string;\n    startPageVisibility?: string | null;\n    startTimeMs: number;\n    success?: boolean | null;\n    errorCode?: string;\n    subErrorCode?: string;\n    serverErrorNo?: string;\n    libraryName: string;\n    libraryVersion: string;\n    isNativeBroker?: boolean;\n    requestId?: string;\n    cacheLookupPolicy?: number | undefined;\n    cacheOutcome?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Second Instance Event in Windows for Deep Linking\nDESCRIPTION: TypeScript function to handle the 'second-instance' event in Windows for deep linking in an Electron application. This is triggered when the custom URL scheme is clicked.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronSystemBrowserTestApp/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* On Windows and Linux, this is where we receive login responses\n*/\nprivate static onSecondInstance(event: any): void {\n    event.preventDefault();\n    Main.handleWindowState();\n}\n```\n\n----------------------------------------\n\nTITLE: Function declaration for getAuthorizeUrl in TypeScript\nDESCRIPTION: Constructs an authorization URL for OAuth flows. Requires an authority instance, request parameters, and optional configurations for encoding parameters and including extra query parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAuthorizeUrl(authority: Authority, requestParameters: Map<string, string>, encodeParams?: boolean, extraQueryParameters?: StringDict | undefined): string;\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Application and Service Principal for MSAL in PowerShell\nDESCRIPTION: This script registers an Azure AD application for MSAL, sets required permissions for Microsoft Graph, and creates a service principal. It uses the Microsoft Graph PowerShell SDK to perform these operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/faq.md#2025-04-18_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Add additional permissions to array below\n$mgResourceAccess = @($mgUserReadScope)\n\n[object[]]$requiredResourceAccess = @{\n    \"ResourceAppId\" = \"00000003-0000-0000-c000-000000000000\" # MS Graph App Id\n    \"ResourceAccess\" = $mgResourceAccess\n}\n\n# Create the application\n$msalApplication = New-MgApplication -displayName myMsalDesktopApp `\n    -SignInAudience AzureADMyOrg `\n    -PublicClient @{RedirectUris = \"msal://redirect\"} `\n    -RequiredResourceAccess $requiredResourceAccess\n\n# Provision the service principal\nNew-MgServicePrincipal -AppId $msalApplication.AppId\n```\n\n----------------------------------------\n\nTITLE: Documenting MSAL Angular Version 0.1.1 Release Notes\nDESCRIPTION: Notes a fix for an AOT issue and an upgrade to the latest msal-core version 0.2.1.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.1\n\n- Fixed AOT issue https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/386\n\n- Upgraded to latest msal-core version 0.2.1\n```\n\n----------------------------------------\n\nTITLE: Using logoutPopup with Advanced Configuration\nDESCRIPTION: Advanced configuration for the logoutPopup method, including customizing the popup window size and position, setting post-logout redirect URI, and configuring a main window redirect URI after logout completes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/logout.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentAccount = msalInstance.getAccountByHomeId(homeAccountId);\nawait msalInstance.logoutPopup({\n    account: currentAccount,\n    postLogoutRedirectUri: \"https://contoso.com/loggedOut\",\n    mainWindowRedirectUri: \"https://contoso.com/homePage\",\n    popupWindowAttributes: {\n        popupSize: {\n            height: 100,\n            width: 100\n        },\n        popupPosition: {\n            top: 100,\n            left: 100\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: MSAL OIDC Authority Configuration\nDESCRIPTION: Configures MSAL to work with a separate OIDC-compliant authority, including known authorities and protocol mode settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n        authority: \"https://login.live.com\",\n        knownAuthorities: [\"login.live.com\"],\n        protocolMode: \"OIDC\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI for Silent Token Acquisition in MSAL.js\nDESCRIPTION: This snippet demonstrates how to set a custom redirect URI for the acquireTokenSilent method to avoid conflicts with MSAL implementations on the main page. It's recommended to use a blank page as the redirect URI for silent flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance.acquireTokenSilent({\n    scopes: [\"User.Read\"],\n    redirectUri: \"http://localhost:3000/blank.html\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Authentication Options Interface in TypeScript\nDESCRIPTION: Specifies the configuration options required for authentication operations, including client ID, authority, and various optional settings. This type is marked as internal and not intended for direct external use.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-internal-missing-underscore) The name \"AuthOptions\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal\nexport type AuthOptions = {\n    clientId: string;\n    authority: Authority;\n    redirectUri: string;\n    clientCapabilities?: Array<string>;\n    azureCloudOptions?: AzureCloudOptions;\n    skipAuthorityMetadataCache?: boolean;\n    instanceAware?: boolean;\n    encodeExtraQueryParams?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up MSAL Redirect Handling in AppComponent\nDESCRIPTION: Implementation guidance for handling MSAL redirects in app.component.ts, showing subscription to handleRedirectObservable instead of using MsalRedirectComponent.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/angular-standalone-sample/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\ninteractionType: InteractionType.Redirect // Can be changed to InteractionType.Popup\n```\n\n----------------------------------------\n\nTITLE: Using the new query string parser in LoopbackClient\nDESCRIPTION: Patch applied in version 2.4.0 to use a new query string parser in the LoopbackClient.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage of LoopbackClient with new query string parser\nconst loopbackClient = new LoopbackClient();\n// The new parser will be used internally\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Browser Package via NPM\nDESCRIPTION: Command to install the @azure/msal-browser package using NPM package manager.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install @azure/msal-browser\n```\n\n----------------------------------------\n\nTITLE: Server Response Type Definitions in TypeScript\nDESCRIPTION: Defines types for server responses in various authentication flows. ServerAuthorizationTokenResponse represents a token endpoint response, while ServerDeviceCodeResponse is for the device code flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_168\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ServerAuthorizationTokenResponse = {\n    status?: number;\n    token_type?: AuthenticationScheme;\n    scope?: string;\n    expires_in?: number;\n    refresh_in?: number;\n    ext_expires_in?: number;\n    access_token?: string;\n    refresh_token?: string;\n    refresh_token_expires_in?: number;\n    id_token?: string;\n    client_info?: string;\n    foci?: string;\n    spa_code?: string;\n    spa_accountid?: string;\n    key_id?: string;\n    error?: string;\n    error_description?: string;\n    error_codes?: Array<string>;\n    suberror?: string;\n    timestamp?: string;\n    trace_id?: string;\n    correlation_id?: string;\n    claims?: string;\n};\n\nexport type ServerDeviceCodeResponse = {\n    user_code: string;\n    device_code: string;\n    verification_uri: string;\n    expires_in: number;\n    interval: number;\n    message: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment for Angular B2C Sample with MSAL Angular\nDESCRIPTION: This code snippet shows the configuration parameters needed in the environment.dev.ts file for setting up the B2C application. It includes the clientId, b2cPolicies, and apiConfig settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/angular-b2c-sample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// .src/environments/environment.dev.ts\n{\n  clientId: \"your_client_id_here\",\n  b2cPolicies: {\n    names: {\n      signUpSignIn: \"your_sign_up_sign_in_policy_name\",\n      forgotPassword: \"your_forgot_password_policy_name\",\n      editProfile: \"your_edit_profile_policy_name\"\n    },\n    authorities: {\n      signUpSignIn: {\n        authority: \"your_sign_up_sign_in_authority_url\"\n      },\n      forgotPassword: {\n        authority: \"your_forgot_password_authority_url\"\n      },\n      editProfile: {\n        authority: \"your_edit_profile_authority_url\"\n      }\n    },\n    authorityDomain: \"your_authority_domain\"\n  },\n  apiConfig: {\n    uri: \"your_api_uri\",\n    scopes: [\"your_api_scopes\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkError Class in TypeScript\nDESCRIPTION: Extends AuthError to represent network-specific errors, including HTTP status and response headers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_144\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class NetworkError extends AuthError {\n    constructor(error: AuthError, httpStatus?: number, responseHeaders?: Record<string, string>);\n    // (undocumented)\n    error: AuthError;\n    // (undocumented)\n    httpStatus?: number;\n    // (undocumented)\n    responseHeaders?: Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protected Resource Map with Basic Scopes\nDESCRIPTION: Example of configuring protected resources with basic scope arrays for all HTTP methods.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-interceptor.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    interactionType: InteractionType.Redirect,\n    protectedResourceMap: new Map<string, Array<string> | null>([\n        [\"https://graph.microsoft.com/v1.0/me\", [\"user.read\", \"profile\"]],\n        [\"https://myapplication.com/user/*\", [\"customscope.read\"]]\n    ]),\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring ID Token Outside MsalProvider Context in JavaScript\nDESCRIPTION: This snippet demonstrates how to acquire an ID token using PublicClientApplication outside the MsalProvider context. It's crucial to only attempt silent token acquisition in this scenario.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst pca = new PublicClientApplication(config);\nconst accounts = pca.getAllAccounts();\n\nasync function getIdToken() {\n    if (accounts.length > 0) {\n        const request = {\n            scopes: [\"openid\"],\n            account: accounts[0]\n        }\n        const idToken = await pca.acquireTokenSilent(request).then((response) => {\n            return response.idToken;\n        }).catch (error => {\n            // Do not fallback to interaction when running outside the context of MsalProvider. Interaction should always be done inside context.\n            console.log(error);\n            return null;\n        });\n\n        return idToken\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromptValue Constants for Authentication Flows\nDESCRIPTION: Defines string constants used for the 'prompt' parameter in authentication requests, specifying UI behavior for login, account selection, consent prompts, and other interaction modes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_156\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PromptValue: {\n    LOGIN: string;\n    SELECT_ACCOUNT: string;\n    CONSENT: string;\n    NONE: string;\n    CREATE: string;\n    NO_SESSION: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Client Assertion Type to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a client assertion type to the authentication parameters. It takes a Map of string key-value pairs and a client assertion type string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addClientAssertionType(parameters: Map<string, string>, clientAssertionType: string): void;\n```\n\n----------------------------------------\n\nTITLE: Provisioning MSAL Node App with PowerShell Graph SDK\nDESCRIPTION: This PowerShell script creates an Azure AD application with a custom redirect URI for desktop apps, sets User.Read permission for Microsoft Graph, and provisions a service principal in the specified tenant.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/faq.md#2025-04-18_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module Microsoft.Graph.Applications\n\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\nConnect-MgGraph -TenantId \"ENTER_TENANT_ID_HERE\" -Scopes \"Application.ReadWrite.All\"\n\n# User.Read delegated permission for Microsoft Graph\n$mgUserReadScope = @{\n    \"Id\" = \"e1fe6dd8-ba31-4d61-89e7-88639da4683d\" # permission Id\n    \"Type\" = \"Scope\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Version Constant in TypeScript\nDESCRIPTION: Defines a constant 'version' with the current version number of the library. This constant is exported as part of the public API but is missing a release tag.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const version = \"3.5.1\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Promptless Logout with Manual logoutHint\nDESCRIPTION: Alternative implementation of promptless logout by manually extracting the login_hint claim from the account's ID token and setting it as the logoutHint in the logout request.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/logout.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentAccount = msalInstance.getAccountByHomeId(homeAccountId);\n\n// Extract login hint to use as logout hint\nconst logoutHint = currentAccount.idTokenClaims.login_hint;\nawait msalInstance.logoutPopup({ logoutHint: logoutHint });\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MSAL Events in Angular\nDESCRIPTION: This code snippet illustrates how to subscribe to MSAL events using MsalBroadcastService in an Angular component. It shows filtering for specific event types and proper unsubscription in ngOnDestroy.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/initialization.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventMessage, EventType } from '@azure/msal-browser';\nimport { filter, Subject, takeUntil } from 'rxjs';\n\nprivate readonly _destroying$ = new Subject<void>();\n\nthis.msalBroadcastService.msalSubject$\n    .pipe(\n        filter((msg: EventMessage) => msg.eventType === EventType.LOGIN_SUCCESS),\n        takeUntil(this._destroying$)\n    )\n    .subscribe((result) => {\n        this.checkAccount();\n    });\n\nngOnDestroy(): void {\n    this._destroying$.next(null);\n    this._destroying$.complete();\n}\n```\n\n----------------------------------------\n\nTITLE: MSAL Redirect URI Configuration\nDESCRIPTION: Configures a custom redirect URI for the authentication flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"your_client_id\",\n        authority: \"https://login.microsoftonline.com/{your_tenant_id}\",\n        redirectUri: \"https://contoso.com\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshTokenEntity Type Interface in TypeScript\nDESCRIPTION: Defines a type interface for refresh token entities stored in cache. Extends the base CredentialEntity type with an optional expiration time.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_161\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RefreshTokenEntity = CredentialEntity & {\n    expiresOn?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Scopes with Protected Resource Map\nDESCRIPTION: Example demonstrating how to configure protected resources with a combination of global and method-specific scopes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-interceptor.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    interactionType: InteractionType.Redirect,\n    protectedResourceMap: new Map<string, Array<string|ProtectedResourceScopes> | null>([\n        [\"http://myapplication.com\", [\n            \"all.scope\",\n            {\n                httpMethod: \"GET\",\n                scopes: [\"read.scope\"]\n            },\n            {\n                httpMethod: \"POST\",\n                scopes: [\"info.scope\"]\n            }\n        ]]\n    ])\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Browser-Only References for SSR in MSAL Angular\nDESCRIPTION: Example of a browser-only reference that should be removed when implementing Angular Universal SSR with MSAL Angular. This line checks if the current window is an iframe.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/angular-universal.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthis.isIframe = window !== window.parent && !window.opener; // Remove this line to use Angular Universal\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Angular Package\nDESCRIPTION: Command to install the MSAL Angular package and its peer dependency from NPM. This installs the latest version of the library that supports the OAuth 2.0 Authorization Code Flow with PKCE.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/msal-browser @azure/msal-angular@latest\n```\n\n----------------------------------------\n\nTITLE: Defining JoseHeader Class in TypeScript\nDESCRIPTION: Internal class for JSON Object Signing and Encryption (JOSE) headers used in JWT tokens. Includes methods for generating header strings for Secured HTTP Request (SHR).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_136\n\nLANGUAGE: typescript\nCODE:\n```\nexport class JoseHeader {\n    // Warning: (ae-forgotten-export) The symbol \"JoseHeaderOptions\" needs to be exported by the entry point index.d.ts\n    constructor(options: JoseHeaderOptions);\n    // (undocumented)\n    alg?: string;\n    // Warning: (tsdoc-param-tag-missing-hyphen) The @param block should be followed by a parameter name and then a hyphen\n    static getShrHeaderString(shrHeaderOptions: JoseHeaderOptions): string;\n    // (undocumented)\n    kid?: string;\n    // (undocumented)\n    typ?: JsonWebTokenTypes;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing MSAL Context Using Raw Context\nDESCRIPTION: Shows how to access the MSAL context directly in a class component using React's context system.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/class-components.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { MsalProvider, MsalContext } from \"@azure/msal-react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst pca = new PublicClientApplication(config);\n\nclass App extends React.Component {\n    render() {\n        return (\n            <MsalProvider instance={pca}>\n                <YourClassComponent/>\n            </ MsalProvider>\n        );\n    }\n}\n\nclass YourClassComponent extends React.Component {\n    static contextType = MsalContext;\n\n    render() {\n        const isAuthenticated = this.context.accounts.length > 0;\n        if (isAuthenticated) {\n            return <span>There are currently {this.context.accounts.length} users signed in!</span>\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThrottlingUtils Class in TypeScript\nDESCRIPTION: A utility class for handling request throttling in the authentication library. It provides methods for calculating throttle times, processing responses, and managing throttled requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_181\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ThrottlingUtils {\n    static calculateThrottleTime(throttleTime: number): number;\n    static checkResponseForRetryAfter(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean;\n    static checkResponseStatus(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean;\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string;\n    static postProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint, response: NetworkResponse<ServerAuthorizationTokenResponse>): void;\n    static preProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint): void;\n    static removeThrottle(cacheManager: CacheManager, clientId: string, request: BaseAuthRequest, homeAccountIdentifier?: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Node Client Applications\nDESCRIPTION: JavaScript code snippets for initializing both Public and Confidential Client Applications using MSAL Node.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pca = new msal.PublicClientApplication(config);\n\n// If you've configured a Confidential Client Application:\nconst cca = new msal.ConfidentialClientApplication(config);\n```\n\n----------------------------------------\n\nTITLE: Defining CacheHelpers Namespace in TypeScript\nDESCRIPTION: Declares a namespace with helper functions for managing cache entities, including token creation, key generation, and metadata handling.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_78\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare namespace CacheHelpers {\n    export {\n        generateCredentialKey,\n        createIdTokenEntity,\n        createAccessTokenEntity,\n        createRefreshTokenEntity,\n        isCredentialEntity,\n        isAccessTokenEntity,\n        isIdTokenEntity,\n        isRefreshTokenEntity,\n        isServerTelemetryEntity,\n        isThrottlingEntity,\n        generateAppMetadataKey,\n        isAppMetadataEntity,\n        isAuthorityMetadataEntity,\n        generateAuthorityMetadataExpiresAt,\n        updateAuthorityEndpointMetadata,\n        updateCloudDiscoveryMetadata,\n        isAuthorityMetadataExpired\n    }\n}\nexport { CacheHelpers }\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Data Update Function in TypeScript\nDESCRIPTION: A function to update account information with tenant profile data based on ID token claims, used to maintain up-to-date account information across authentication operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_187\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function updateAccountTenantProfileData(baseAccountInfo: AccountInfo, tenantProfile?: TenantProfile, idTokenClaims?: TokenClaims, idTokenSecret?: string): AccountInfo;\n```\n\n----------------------------------------\n\nTITLE: Adding Code Verifier to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a code verifier to the authentication parameters. It takes a Map of string key-value pairs and a code verifier string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addCodeVerifier(parameters: Map<string, string>, codeVerifier: string): void;\n```\n\n----------------------------------------\n\nTITLE: Adding Client Secret to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a client secret to the authentication parameters. It takes a Map of string key-value pairs and a client secret string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addClientSecret(parameters: Map<string, string>, clientSecret: string): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access in robots.txt\nDESCRIPTION: This snippet defines the Robot Exclusion Protocol rules. It allows all user agents (crawlers) to access the entire website without restrictions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/b2c-sample/public/robots.txt#2025-04-18_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Creating Windows-specific Persistence Layer in JavaScript\nDESCRIPTION: Shows how to create a Windows-specific persistence layer using FilePersistenceWithDataProtection. It includes options for specifying the cache path, data protection scope, and optional entropy for encryption.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/msal-node-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FilePersistenceWithDataProtection, DataProtectionScope } = require(\"@azure/msal-node-extensions\");\nconst { PublicClientApplication } = require(\"@azure/msal-node\");\n\nconst cachePath = \"path/to/cache/file.json\";\nconst dataProtectionScope = DataProtectionScope.CurrentUser;\nconst optionalEntropy = \"\"; //specifies password or other additional entropy used to encrypt the data.\nconst windowsPersistence = await FilePersistenceWithDataProtection.create(cachePath, dataProtectionScope, optionalEntropy);\n// Use the persistence object to initialize an MSAL PublicClientApplication with cachePlugin\nconst pca = new PublicClientApplication({\n                auth: {\n                        clientId: \"CLIENT_ID_HERE\",\n                    },\n                cache: {\n                        cachePlugin: new PersistenceCachePlugin(windowsPersistence);\n                    },\n                });\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Button with MSAL\nDESCRIPTION: Shows how to implement login/logout functionality using a button component with MSAL context.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/class-components.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { withMsal } from \"@azure/msal-react\";\n\nclass LoginButton extends React.Component {\n    render() {\n        const isAuthenticated = this.props.msalContext.accounts.length > 0;\n        const msalInstance = this.props.msalContext.instance;\n        if (isAuthenticated) {\n            return <button onClick={() => msalInstance.logout()}>Logout</button>    \n        } else {\n            return <button onClick={() => msalInstance.loginPopup()}>Login</button>\n        }\n    }\n}\n\nexport default YourWrappedComponent = withMsal(LoginButton);\n```\n\n----------------------------------------\n\nTITLE: Creating MsalConfigDynamicModule for MSAL Configuration in TypeScript\nDESCRIPTION: This snippet defines a MsalConfigDynamicModule that sets up MSAL providers using factory functions. It includes configurations for MSAL instance, interceptor, and guard, utilizing the ConfigService for dynamic settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectionToken, NgModule, APP_INITIALIZER } from \"@angular/core\";\nimport { IPublicClientApplication, PublicClientApplication, LogLevel } from \"@azure/msal-browser\";\nimport { MsalGuard, MsalInterceptor, MsalBroadcastService, MsalInterceptorConfiguration, MsalModule, MsalService, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalGuardConfiguration } from \"@azure/msal-angular\";\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { ConfigService } from \"./config.service\";\n\nconst AUTH_CONFIG_URL_TOKEN = new InjectionToken<string>(\"AUTH_CONFIG_URL\");\n\nexport function initializerFactory(env: ConfigService, configUrl: string): any {\n  const promise = env.init(configUrl).then((value) => {\n    console.log(\"finished getting configurations dynamically.\");\n  });\n  return () => promise;\n}\n\nexport function loggerCallback(logLevel: LogLevel, message: string) {\n  console.log(message);\n}\n\nexport function MSALInstanceFactory(config: ConfigService): IPublicClientApplication {\n  return new PublicClientApplication({\n    auth: config.getSettings(\"msal\").auth,\n    cache: config.getSettings(\"msal\").cache,\n    system: {\n      loggerOptions: {\n        loggerCallback,\n        logLevel: LogLevel.Info,\n        piiLoggingEnabled: false,\n      },\n    },\n  });\n}\n\nexport function MSALInterceptorConfigFactory(config: ConfigService): MsalInterceptorConfiguration {\n  const protectedResourceMap = new Map<string, Array<string>>(config.getSettings(\"interceptor\").protectedResourceMap);\n\n  return {\n    interactionType: config.getSettings(\"interceptor\").interactionType,\n    protectedResourceMap,\n  };\n}\n\nexport function MSALGuardConfigFactory(config: ConfigService): MsalGuardConfiguration {\n  return {\n    interactionType: config.getSettings(\"guard\").interactionType,\n    authRequest: config.getSettings(\"guard\").authRequest,\n    loginFailedRoute: config.getSettings(\"guard\").loginFailedRoute,\n  };\n}\n\n@NgModule({\n  providers: [],\n  imports: [MsalModule],\n})\nexport class MsalConfigDynamicModule {\n  static forRoot(configFile: string) {\n    return {\n      ngModule: MsalConfigDynamicModule,\n      providers: [\n        ConfigService,\n        { provide: AUTH_CONFIG_URL_TOKEN, useValue: configFile },\n        { provide: APP_INITIALIZER, useFactory: initializerFactory, deps: [ConfigService, AUTH_CONFIG_URL_TOKEN], multi: true },\n        {\n          provide: MSAL_INSTANCE,\n          useFactory: MSALInstanceFactory,\n          deps: [ConfigService],\n        },\n        {\n          provide: MSAL_GUARD_CONFIG,\n          useFactory: MSALGuardConfigFactory,\n          deps: [ConfigService],\n        },\n        {\n          provide: MSAL_INTERCEPTOR_CONFIG,\n          useFactory: MSALInterceptorConfigFactory,\n          deps: [ConfigService],\n        },\n        MsalService,\n        MsalGuard,\n        MsalBroadcastService,\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: MsalInterceptor,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PKCE Codes Type Interface in TypeScript\nDESCRIPTION: Defines a type interface for PKCE (Proof Key for Code Exchange) codes used in OAuth authorization. Contains verifier and challenge string properties.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_154\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PkceCodes = {\n    verifier: string;\n    challenge: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Node Client Application in JavaScript\nDESCRIPTION: Code snippet showing how to initialize either a Public or Confidential Client Application using MSAL Node.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Change this\nconst publicClientApplication = new msal.PublicClientApplication(clientConfig);\nreturn getTokenAuthCode(config, publicClientApplication, null);\n\n// To this\nconst confidentialClientApplication = new msal.ConfidentialClientApplication(\n    clientConfig\n);\nreturn getTokenAuthCode(config, confidentialClientApplication, null);\n```\n\n----------------------------------------\n\nTITLE: Provisioning a Single-Page Application via PowerShell Graph SDK\nDESCRIPTION: This script creates an Azure AD application with SPA redirect URI and User.Read permission for Microsoft Graph in a specified tenant. It then provisions a service principal in the same tenant based on this application object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/FAQ.md#2025-04-18_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module Microsoft.Graph.Applications\n\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\nConnect-MgGraph -TenantId \"ENTER_TENANT_ID_HERE\" -Scopes \"Application.ReadWrite.All\"\n\n# User.Read delegated permission for Microsoft Graph\n$mgUserReadScope = @{\n    \"Id\" = \"e1fe6dd8-ba31-4d61-89e7-88639da4683d\" # permission Id\n    \"Type\" = \"Scope\"\n}\n```\n\n----------------------------------------\n\nTITLE: UrlUtils Namespace in MSAL\nDESCRIPTION: Namespace containing URL utility functions for MSAL. It exports helper functions for handling URL query parameters and response data.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_192\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace UrlUtils {\n    export {\n        stripLeadingHashOrQuery,\n        getDeserializedResponse,\n        mapToQueryString\n    }\n}\nexport { UrlUtils }\n```\n\n----------------------------------------\n\nTITLE: Creating PersistenceCachePlugin for Concurrency in JavaScript\nDESCRIPTION: Shows how to create a PersistenceCachePlugin with lock options for supporting concurrent access by multiple processes. It demonstrates configuring retry number and retry delay for lock acquisition.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/msal-node-extensions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  PersistenceCreator,\n  PersistenceCachePlugin,\n} = require(\"@azure/msal-node-extensions\");\n\nconst lockOptions = {\n    retryNumber: 100,\n    retryDelay: 50\n}\n\nconst persistence = await PersistenceCreator.createPersistence(persistenceConfiguration);\nconst persistenceCachePlugin = new PersistenceCachePlugin(persistence, lockOptions); // or any of the other ones\nconst pca = new PublicClientApplication({\n    auth: {\n            clientId: \"CLIENT_ID_HERE\",\n        },\n    cache: {\n            cachePlugin: persistenceCachePlugin\n        },\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuration Documentation in Markdown\nDESCRIPTION: Structured documentation of various configuration options including broker settings, system configuration, logger options, and telemetry settings for MSAL.js. Includes detailed tables with options, descriptions, formats and default values.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/configuration.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Broker Config Options\n\n| Option               | Description                                                                                        | Format              | Default Value |\n| -------------------- | -------------------------------------------------------------------------------------------------- | ------------------- | ------------- |\n| `nativeBrokerPlugin` | Broker plugin for acquiring tokens via a native token broker (see also: [brokering](brokering.md)) | INativeBrokerPlugin | null          |\n\n### System Config Options\n\n| Option                   | Description                                                                                                                                                                      | Format                                                                                                                     | Default Value                                                                                                                        |\n| ------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| `loggerOptions`          | Config object for logger.                                                                                                                                                        | See [below](#logger-config-options).                                                                                       | See [below](#logger-config-options).                                                                                                 |\n| `NetworkClient`          | Custom HTTP implementation                                                                                                                                                       | INetworkModule                                                                                                             | [HttpClient.ts](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/src/network/HttpClient.ts) |\n| `proxyUrl`               | The URL of the proxy the app is running behind                                                                                                                                   | string                                                                                                                     | Empty string \"\"                                                                                                                    |\n| `customAgentOptions`     | Set of configurable options to set on a http(s) agent                                                                                                                            | Object - [NodeJS documentation on alloweable options](https://nodejs.org/docs/latest-v16.x/api/http.html#new-agentoptions) | Empty Object {}                                                                                                                    |\n| `disableInternalRetries` | A flag that disables MSALJS's built-in retry policies, allowing the app developer to specify their own retry policy. Currently, only Managed Identity flows have a retry policy. | boolean                                                                                                                    | boolean false                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Adding ID Token Hint to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds an ID token hint to the authentication parameters. It takes a Map of string key-value pairs and an ID token hint string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addIdTokenHint(parameters: Map<string, string>, idTokenHint: string): void;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of loginPopup with acquireTokenPopup in JavaScript\nDESCRIPTION: An example showing incorrect usage of loginPopup and acquireTokenPopup that will cause an 'Interaction_in_progress' error because both interactive APIs are called without waiting for the first to complete.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = { scopes: [\"openid\", \"profile\"] };\nloginPopup();\nacquireTokenPopup(request);\n```\n\n----------------------------------------\n\nTITLE: App Token Provider Result Type Definition in MSAL.js (TypeScript)\nDESCRIPTION: Defines the AppTokenProviderResult type that contains the acquired access token, its expiration time in seconds, and optional refresh time. This represents the result of a token acquisition operation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AppTokenProviderResult = {\n    accessToken: string;\n    expiresInSeconds: number;\n    refreshInSeconds?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding EAR Parameters to Authentication Request in TypeScript\nDESCRIPTION: This function adds EAR (Embedded Authentication Resource) parameters to the authentication request. It takes a Map of string key-value pairs and a JWK (JSON Web Key) string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addEARParameters(parameters: Map<string, string>, jwk: string): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring InteractionType for MSAL Interceptor\nDESCRIPTION: Example showing how to configure the interaction type (Popup or Redirect) for the MSAL Interceptor when silent token acquisition fails.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/msal-interceptor.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    interactionType: InteractionType.Redirect,\n    protectedResourceMap: new Map([ \n        ['Enter_the_Graph_Endpoint_Here/v1.0/me', ['user.read']]\n    ])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PublicClientApplication with Custom NavigationClient in JavaScript\nDESCRIPTION: This snippet demonstrates how to provide a custom NavigationClient instance to the PublicClientApplication during initialization using the Configuration object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/navigation.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst navigationClient = new CustomNavigationClient();\n\nconst config: Configuration = {\n    auth: {\n        clientId: \"your-client-id\"\n    },\n    system: {\n        navigationClient: navigationClient\n    }\n};\n\nconst msalInstance = new PublicClientApplication(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Prompt Parameter to Authentication Request in MSAL.js (TypeScript)\nDESCRIPTION: Adds a prompt parameter to control the authentication experience. The prompt value can specify login, consent, select_account, or none behaviors during authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addPrompt(parameters: Map<string, string>, prompt: string): void;\n```\n\n----------------------------------------\n\nTITLE: Adding Session ID to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds a session ID (sid) parameter to request parameters. This is used to specify which user session should be used for sign-in.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addSid(parameters: Map<string, string>, sid: string): void;\n```\n\n----------------------------------------\n\nTITLE: MSAL Angular Standalone Implementation\nDESCRIPTION: Sample demonstrating MSAL Angular usage with standalone components, utilizing Angular 19's application builder and direct handleRedirectObservable subscription instead of MsalRedirectComponent.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/README.md#2025-04-18_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Accessing MSAL Context Using withMsal HOC\nDESCRIPTION: Demonstrates how to access MSAL context using the withMsal Higher Order Component pattern.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/class-components.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { MsalProvider, withMsal } from \"@azure/msal-react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst pca = new PublicClientApplication(config);\n\nclass YourClassComponent extends React.Component {\n    render() {\n        const isAuthenticated = this.props.msalContext.accounts.length > 0;\n        if (isAuthenticated) {\n            return <span>There are currently {this.props.msalContext.accounts.length} users signed in!</span>\n        }\n    }\n}\n\nconst YourWrappedComponent = withMsal(YourClassComponent);\n\nclass App extends React.Component {\n    render() {\n        return (\n            <MsalProvider instance={pca}>\n                <YourWrappedComponent />\n            </ MsalProvider>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StringUtils Class in TypeScript\nDESCRIPTION: This utility class provides various string manipulation methods, including JSON parsing, query string conversion, and pattern matching.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_173\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class StringUtils {\n    static endsWith(str: string, search: string): boolean;\n    static isEmptyObj(strObj?: string): boolean;\n    static jsonParseHelper<T>(str: string): T | null;\n    static matchPattern(pattern: string, input: string): boolean;\n    static queryStringToObject<T>(query: string): T;\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string>;\n    static startsWith(str: string, search: string): boolean;\n    static trimArrayEntries(arr: Array<string>): Array<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: ResponseMode Enum Definition in TypeScript\nDESCRIPTION: Defines the response modes for OAuth authentication flows. Includes query, fragment, and form_post options that determine how the authorization server returns the token response to the client.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_166\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ResponseMode: {\n    readonly QUERY: \"query\";\n    readonly FRAGMENT: \"fragment\";\n    readonly FORM_POST: \"form_post\";\n};\n\nexport type ResponseMode = (typeof ResponseMode)[keyof typeof ResponseMode];\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in MSAL-Browser JavaScript\nDESCRIPTION: These examples demonstrate how MSAL-Browser emits events with a payload or with an error using the 'emitEvent' function.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/events.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.emitEvent(EventType.LOGIN_SUCCESS, InteractionType.Redirect, result);\n\nthis.emitEvent(EventType.LOGIN_FAILURE, InteractionType.Redirect, null, e);\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Token Acquisition\nDESCRIPTION: Client-side code for acquiring tokens using the authorization code from server-side authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/HybridSample/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst code = \"{{code}}\";\nconst loginHint = \"{{loginHint}}\";\n\nconst scopes = [ \"user.read\" ];\n\nreturn msalInstance.acquireTokenByCode({\n    code,\n    scopes\n})\n    .catch(error => {\n         if (error instanceof msal.InteractionRequiredAuthError) {\n            return msalInstance.loginRedirect({\n                loginHint,\n                scopes\n            })\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding Nonce to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a nonce to the authentication parameters. It takes a Map of string key-value pairs and a nonce string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addNonce(parameters: Map<string, string>, nonce: string): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring POP Token Request with SHR Nonce in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a POP token request object with a server-generated nonce for use in MSAL Browser's acquireTokenSilent method.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/shr-server-nonce.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst popTokenRequest = {\n    scopes: [\"User.Read\"],\n    authenticationScheme: msal.AuthenticationScheme.POP,\n    resourceRequestMethod: \"POST\",\n    resourceRequestUri: \"YOUR_RESOURCE_ENDPOINT\",\n    shrNonce: \"eyJhbGciOiJIUzI1NiIsImtpZCI6IktJRCIsInR5cCI6IkpXVCJ9.eyJ0cyI6IjE2MjU2NzI1MjkifQ.rA5ho63Lbdwo8eqZ_gUtQxY3HaseL0InIVwdgf7L_fc\" // Sample Base64URL encoded server nonce value\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClientConfigurationError Class in TypeScript\nDESCRIPTION: Defines the ClientConfigurationError class which extends the AuthError class. This class is used to handle errors related to client configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_87\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ClientConfigurationError extends AuthError {\n    constructor(errorCode: string);\n}\n```\n\n----------------------------------------\n\nTITLE: Function declaration for getClientAssertion in TypeScript\nDESCRIPTION: Retrieves a client assertion string for authentication. Can accept either a direct string or a callback function that returns a client assertion, along with client ID and optional token endpoint.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getClientAssertion(clientAssertion: string | ClientAssertionCallback, clientId: string, tokenEndpoint?: string): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Handling Open URL Event in MacOS and Linux for Deep Linking\nDESCRIPTION: TypeScript function to handle the 'open-url' event in MacOS and Linux for deep linking in an Electron application. This is triggered when the custom URL scheme is clicked.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronSystemBrowserTestApp/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* On MacOS, this is where we receive login responses\n*/\nprivate static onOpenUrl(event: any): void {\n    event.preventDefault();\n    Main.handleWindowState();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Constants in TypeScript\nDESCRIPTION: Defines various OAuth protocol constants used in the authentication process, including request parameters and response types. These constants are part of the package's public API but are marked as missing release tags.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_162\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst requestCannotBeMade = \"request_cannot_be_made\";\n\nconst REQUESTED_TOKEN_USE = \"requested_token_use\";\n\nconst RESPONSE_MODE = \"response_mode\";\n\nconst RESPONSE_TYPE = \"response_type\";\n\nconst RETURN_SPA_CODE = \"return_spa_code\";\n\nconst SCOPE = \"scope\";\n```\n\n----------------------------------------\n\nTITLE: Defining Authority Metadata Entity Type for Caching\nDESCRIPTION: Specifies a structured type for storing authority metadata including endpoints, aliases, and expiration information. This type is used for caching authority information to minimize network requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-internal-missing-underscore) The name \"AuthorityMetadataEntity\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal (undocumented)\nexport type AuthorityMetadataEntity = {\n    aliases: Array<string>;\n    preferred_cache: string;\n    preferred_network: string;\n    canonical_authority: string;\n    authorization_endpoint: string;\n    token_endpoint: string;\n    end_session_endpoint?: string;\n    issuer: string;\n    aliasesFromNetwork: boolean;\n    endpointsFromNetwork: boolean;\n    expiresAt: number;\n    jwks_uri: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Server Telemetry to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds server telemetry data to request parameters. This sends information about previous failed requests to help with server-side diagnostics and reliability.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addServerTelemetry(parameters: Map<string, string>, serverTelemetryManager: ServerTelemetryManager): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Interaction Type in Angular B2C Sample with MSAL Angular\nDESCRIPTION: This code snippet demonstrates how to set the interaction type for MSAL in the app.module.ts file. It can be configured to use either redirects or popups.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/angular-b2c-sample/README.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// app.module.ts\nimport { InteractionType } from '@azure/msal-browser';\n\n// ...\n\ninteractionType: InteractionType.Redirect // or InteractionType.Popup\n```\n\n----------------------------------------\n\nTITLE: Implementing MSAL Authentication in Vue 3 Component with API Call\nDESCRIPTION: This snippet shows how to implement MSAL authentication in a Vue 3 component that makes an API call. It demonstrates token acquisition, error handling, and updating component data based on authentication results.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/vue3-sample-app/README.md#2025-04-18_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <span>{{data}}</span>\n</template>\n\n<script setup lang=\"ts\">\nimport { useMsalAuthentication } from \"../composition-api/useMsalAuthentication\";\nimport { InteractionType } from \"@azure/msal-browser\";\nimport { reactive, watch } from 'vue'\nimport { loginRequest } from \"../authConfig\";\n\nconst { result, acquireToken } = useMsalAuthentication(InteractionType.Redirect, loginRequest);\n\nconst data = ref(null);\n\nasync function updateData() {\n    if (result.value.accessToken) {\n        const apiResult = await callAPI(result.value.accessToken).catch(() => acquireToken());\n        data.value = apiResult;\n    }\n}\n\nupdateData();\n\nwatch(result, () => {\n    // Fetch new data from the API each time the result changes (i.e. a new access token was acquired)\n    updateData();\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Acquiring ID Token with react-aad-msal in JavaScript\nDESCRIPTION: This code demonstrates how to obtain an ID token using the MsalAuthProvider from react-aad-msal library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MsalAuthProvider } from \"react-aad-msal\";\n\nconst authProvider = new MsalAuthProvider(config, authenticationParameters, options);\nconst token = await authProvider.getIdToken();\nconst idToken = token.idToken.rawIdToken;\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node authentication settings\nDESCRIPTION: JavaScript configuration object for MSAL Node, specifying the client ID and authority URL for Microsoft Entra ID authentication. Users need to replace placeholder values with their actual client and tenant IDs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-pkce/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_ID\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Active Account in MSAL Angular\nDESCRIPTION: Example of setting the active account after a successful login in an Angular component. This ensures that the correct account is used for subsequent operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/FAQ.md#2025-04-18_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.authService.instance.setActiveAccount(this.authService.instance.getAllAccounts()[0]);\n```\n\n----------------------------------------\n\nTITLE: Handling Node Version Mismatch Error in Electron\nDESCRIPTION: This error message occurs when the Node.js version used by Electron differs from the version used to compile the extension's native modules. It typically appears when using native dependencies like dpapi.node.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/faq.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUncaught Exception:\nError: The module \n\"<path-to-project>\\node_modules\\...\\dpapi.node\" was compiled against a different Node.js version using NODE_MODULE_VERSION 85. This version of Node.js requires NODE_MODULE_VERSION 80. Please try re-compiling or re-installing the module....\n```\n\n----------------------------------------\n\nTITLE: Defining Common Authentication Request Types in TypeScript\nDESCRIPTION: Defines various common authentication request types such as CommonAuthorizationCodeRequest, CommonAuthorizationUrlRequest, CommonClientCredentialRequest, etc. These types extend BaseAuthRequest and include additional properties specific to each authentication flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type CommonAuthorizationCodeRequest = BaseAuthRequest & {\n    code: string;\n    redirectUri: string;\n    codeVerifier?: string;\n    enableSpaAuthorizationCode?: boolean;\n    clientInfo?: string;\n    ccsCredential?: CcsCredential;\n};\n\nexport type CommonAuthorizationUrlRequest = BaseAuthRequest & {\n    redirectUri: string;\n    responseMode: ResponseMode;\n    account?: AccountInfo;\n    earJwk?: string;\n    codeChallenge?: string;\n    codeChallengeMethod?: string;\n    domainHint?: string;\n    extraQueryParameters?: StringDict;\n    extraScopesToConsent?: Array<string>;\n    loginHint?: string;\n    nonce: string;\n    prompt?: string;\n    sid?: string;\n    state: string;\n    platformBroker?: boolean;\n};\n\n// ... other request types\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token with react-aad-msal in JavaScript\nDESCRIPTION: This snippet demonstrates how to obtain an access token using the MsalAuthProvider from react-aad-msal library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MsalAuthProvider } from \"react-aad-msal\";\n\nconst authProvider = new MsalAuthProvider(config, authenticationParameters, options);\nconst accessToken = authProvider.getAccessToken();\n```\n\n----------------------------------------\n\nTITLE: Creating Access Token Entity in TypeScript\nDESCRIPTION: Function to create an AccessTokenEntity object containing token information and metadata for Azure AD authentication\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createAccessTokenEntity(homeAccountId: string, environment: string, accessToken: string, clientId: string, tenantId: string, scopes: string, expiresOn: number, extExpiresOn: number, base64Decode: (input: string) => string, refreshOn?: number, tokenType?: AuthenticationScheme, userAssertionHash?: string, keyId?: string, requestedClaims?: string, requestedClaimsHash?: string): AccessTokenEntity;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol for Deep Linking in Electron\nDESCRIPTION: TypeScript function to set the default protocol for deep linking in an Electron application. It uses the setAsDefaultProtocolClient() API to register a custom URL scheme.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronSystemBrowserTestApp/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nprivate static setDefaultProtocol(): void {\n        if (process.defaultApp) {\n            if (process.argv.length >= 2) {\n                Main.application.setAsDefaultProtocolClient(\n                    authConfig.customProtocol.name, // e.g msal4b0db8c2-9f26-4417-8bde-3f0e3656f8e\n                    process.execPath,\n                    [path.resolve(process.argv[1])]\n                );\n            } else {\n                Main.application.setAsDefaultProtocolClient(\n                    authConfig.customProtocol.name // e.g msal4b0db8c2-9f26-4417-8bde-3f0e3656f8e\n                );\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring AppModule with MsalConfigDynamicModule in TypeScript\nDESCRIPTION: This snippet shows how to set up the main AppModule using the MsalConfigDynamicModule. It imports necessary modules and components, and uses MsalConfigDynamicModule.forRoot() to provide the configuration file path.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { NgModule } from \"@angular/core\";\n\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatListModule } from \"@angular/material/list\";\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\nimport { HomeComponent } from \"./home/home.component\";\nimport { ProfileComponent } from \"./profile/profile.component\";\n\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { MsalRedirectComponent } from \"@azure/msal-angular\";\nimport { DetailComponent } from \"./detail/detail.component\";\nimport { MsalConfigDynamicModule } from \"./msal-config-dynamic.module\";\n\n@NgModule({\n  declarations: [AppComponent, HomeComponent, ProfileComponent, DetailComponent],\n  imports: [BrowserModule, BrowserAnimationsModule, AppRoutingModule, MatButtonModule, MatToolbarModule, MatListModule, HttpClientModule, MsalConfigDynamicModule.forRoot(\"assets/configuration.json\")],\n  providers: [],\n  bootstrap: [AppComponent, MsalRedirectComponent],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining CodeChallengeMethodValues Constant in TypeScript\nDESCRIPTION: Defines the CodeChallengeMethodValues constant which specifies the available code challenge methods for PKCE (Proof Key for Code Exchange).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_89\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const CodeChallengeMethodValues: {\n    PLAIN: string;\n    S256: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Node Application\nDESCRIPTION: Command to start the MSAL Node application for token acquisition using cached refresh tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/refresh-token/README.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:msal\n```\n\n----------------------------------------\n\nTITLE: Initializing React-AAD-MSAL Authentication Provider\nDESCRIPTION: Example of initializing the authentication provider in the legacy react-aad-msal library. Creates an MsalAuthProvider instance with configuration, authentication parameters, and options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MsalAuthProvider } from \"react-aad-msal\";\n\nconst authProvider = new MsalAuthProvider(config, authenticationParameters, options);\n```\n\n----------------------------------------\n\nTITLE: Updating Cloud Discovery Metadata in MSAL\nDESCRIPTION: Function that updates cloud discovery metadata for an authority. The function takes an AuthorityMetadataEntity object, updated CloudDiscoveryMetadata values, and a boolean indicating if the data came from the network.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_189\n\nLANGUAGE: typescript\nCODE:\n```\nfunction updateCloudDiscoveryMetadata(authorityMetadata: AuthorityMetadataEntity, updatedValues: CloudDiscoveryMetadata, fromNetwork: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: B2C Authority Configuration in JavaScript\nDESCRIPTION: Shows how to configure MSAL PublicClientApplication with a B2C authority URL and known authorities for trusted domains.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/authority.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pca = new PublicClientApplication({\n    auth: {\n        clientId: \"<your-client-id>\",\n        authority: \"https://<your-tenant-name>.b2clogin.com/<your-tenant-name>.onmicrosoft.com/<your-policy-id>\",\n        knownAuthorities: [\"<your-tenant-name>.b2clogin.com\"] // array of domains that are known to be trusted\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Auth Code Sample in JSON\nDESCRIPTION: JSON configuration for the MSAL Node Auth Code sample, including client ID, authority, scopes, and redirect URI settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"authOptions\": {\n        \"clientId\": \"YOUR_CLIENT_ID\",\n        \"authority\": \"YOUR_AUTHORITY\"\n    },\n    \"request\": {\n        \"authCodeUrlParameters\": {\n            \"scopes\": [\"user.read\"],\n            \"redirectUri\": \"http://localhost:3000/redirect\"\n        },\n        \"tokenRequest\": {\n            \"redirectUri\": \"http://localhost:3000/redirect\",\n            \"scopes\": [\"user.read\"]\n        }\n    },\n    \"resourceApi\": {\n        \"endpoint\": \"https://graph.microsoft.com/v1.0/me\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Claims to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds claims and client capabilities to the authentication parameters. It takes a Map of string key-value pairs, an optional claims string, and an optional array of client capabilities as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addClaims(parameters: Map<string, string>, claims?: string, clientCapabilities?: Array<string>): void;\n```\n\n----------------------------------------\n\nTITLE: Defining JsonWebTokenTypes in TypeScript\nDESCRIPTION: Type and constant definitions for JSON Web Token types including JWT, JWK, and POP tokens, used in authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_137\n\nLANGUAGE: typescript\nCODE:\n```\nexport const JsonWebTokenTypes: {\n    readonly Jwt: \"JWT\";\n    readonly Jwk: \"JWK\";\n    readonly Pop: \"pop\";\n};\n\nexport type JsonWebTokenTypes = (typeof JsonWebTokenTypes)[keyof typeof JsonWebTokenTypes];\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token Outside MsalProvider Context in JavaScript\nDESCRIPTION: This snippet shows how to acquire an access token using PublicClientApplication outside the MsalProvider context. It's important to only attempt silent token acquisition in this scenario.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst pca = new PublicClientApplication(config);\nconst accounts = pca.getAllAccounts();\n\nasync function getAccessToken() {\n    if (accounts.length > 0) {\n        const request = {\n            scopes: [\"User.Read\"],\n            account: accounts[0]\n        }\n        const accessToken = await pca.acquireTokenSilent(request).then((response) => {\n            return response.accessToken;\n        }).catch(error => {\n            // Do not fallback to interaction when running outside the context of MsalProvider. Interaction should always be done inside context.\n            console.log(error);\n            return null;\n        });\n\n        return accessToken;\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClientInfo Type in TypeScript\nDESCRIPTION: Defines the ClientInfo type which includes properties for user ID (uid) and tenant ID (utid). This type is used to store client-specific information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_88\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ClientInfo = {\n    uid: string;\n    utid: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Credential Key Generation in TypeScript\nDESCRIPTION: Defines a function to generate a unique key for a credential entity, used for storage and retrieval of credentials.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_106\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction generateCredentialKey(credentialEntity: CredentialEntity): string;\n```\n\n----------------------------------------\n\nTITLE: Handling Sign-In Response with MSAL Node\nDESCRIPTION: JavaScript code for handling the sign-in response in MSAL Node, including token acquisition and error handling.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/redirect\", (req, res) => {\n    // You can also build the tokenRequest object directly in the JavaScript file like this\n    const tokenRequest = {\n        // The URL from the redirect will contain the Auth Code in the query parameters\n        code: req.query.code,\n        scopes: [\"user.read\"],\n        redirectUri: \"http://localhost:3000/redirect\",\n    };\n\n    // Pass the tokenRequest object with the Auth Code, scopes and redirectUri to acquireTokenByCode API\n    clientApplication\n        .acquireTokenByCode(tokenRequest)\n        .then((response) => {\n            res.sendStatus(200);\n        })\n        .catch((error) => {\n            res.status(500).send(error);\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigService for Dynamic Configuration in TypeScript\nDESCRIPTION: This snippet defines a ConfigService class that fetches and manages dynamic configurations. It includes methods for initializing the service with a configuration endpoint and retrieving specific settings.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpBackend } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ConfigService {\n  private settings: any;\n  private http: HttpClient;\n\n  constructor(private readonly httpHandler: HttpBackend) {\n    this.http = new HttpClient(httpHandler);\n  }\n\n  init(endpoint: string): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      this.http\n        .get(endpoint)\n        .pipe(map((result) => result))\n        .subscribe(\n          (value) => {\n            this.settings = value;\n            resolve(true);\n          },\n          (error) => {\n            reject(error);\n          }\n        );\n    });\n  }\n\n  getSettings(key?: string | Array<string>): any {\n    if (!key || (Array.isArray(key) && !key[0])) {\n      return this.settings;\n    }\n\n    if (!Array.isArray(key)) {\n      key = key.split(\".\");\n    }\n\n    let result = key.reduce((account: any, current: string) => account && account[current], this.settings);\n\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading ID Tokens in MSAL Browser\nDESCRIPTION: Examples demonstrating different ways to load ID tokens into MSAL cache using account information, client info, or authority.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/testing.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst silentRequest: SilentRequest = {\n    account: {\n        homeAccountId: \"your-home-account-id\",\n        environment: \"login.microsoftonline.com\",\n        tenantId: \"your-tenant-id\",\n        username: \"test@contoso.com\",\n        localAccountId: \"your-local-account-id\",\n    },\n};\n\nconst serverResponse: ExternalTokenResponse = {\n    id_token: \"id-token-here\",\n};\n\nconst loadTokenOptions: LoadTokenOptions = {};\n\nconst pca = new PublicClientApplication({\n    auth: { clientId: \"your-client-id\" },\n});\nawait pca.getTokenCache().loadExternalTokens(\n    silentRequest,\n    serverResponse,\n    loadTokenOptions\n);\n```\n\n----------------------------------------\n\nTITLE: Running ADAL Node Application\nDESCRIPTION: Command to start the ADAL Node application for initial token acquisition and caching.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/refresh-token/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:adal\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Redirect URI for Popup Login in MSAL.js\nDESCRIPTION: Demonstrates how to set a custom redirectUri for popup login. For popup and silent APIs, it's recommended to set the redirectUri to a blank page for better performance.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance.loginPopup({\n    redirectUri: \"http://localhost:3000/blank.html\",\n});\n```\n\n----------------------------------------\n\nTITLE: URL Error Constants in MSAL\nDESCRIPTION: Constants representing URL-related error types in MSAL. These constants are used for error handling when processing URLs for authentication requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_190\n\nLANGUAGE: typescript\nCODE:\n```\nconst urlEmptyError = \"empty_url_error\";\nconst urlParseError = \"url_parse_error\";\n```\n\n----------------------------------------\n\nTITLE: Defining TenantProfile Type in TypeScript\nDESCRIPTION: Defines a TypeScript type for tenant profile information, containing tenant ID, local account ID, name, and an optional flag indicating if it's the home tenant.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_177\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TenantProfile = Pick<AccountInfo, \"tenantId\" | \"localAccountId\" | \"name\"> & {\n    isHomeTenant?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Token Loading with MSAL Browser\nDESCRIPTION: Basic example of loading external tokens using the loadExternalTokens() API with MSAL Browser's PublicClientApplication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/testing.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalTokenCache = myMSALObj.getTokenCache();\nawait msalTokenCache.loadExternalTokens(\n    silentRequest,\n    serverResponse,\n    loadTokenOptions\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing mapToQueryString Function in TypeScript\nDESCRIPTION: Converts a Map of parameters to a query string, with options for encoding extra parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_143\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction mapToQueryString(parameters: Map<string, string>, encodeExtraParams?: boolean, extraQueryParameters?: StringDict): string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Login Route\nDESCRIPTION: Route handler for initiating the authentication flow by generating and redirecting to auth code URL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/HybridSample/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/login', (req, res) => {\n    const authCodeUrlParameters = {\n        scopes: [\"user.read\"],\n        redirectUri: \"http://localhost:3000/auth/server-redirect\",\n        responseMode: \"form_post\"\n    };\n\n    // Generate auth code url and redirect the user\n    msalInstance.getAuthCodeUrl(authCodeUrlParameters)\n        .then((response) => {\n            console.log(response);\n            res.redirect(response);\n        })\n        .catch((error) => console.log(JSON.stringify(error)));\n});\n```\n\n----------------------------------------\n\nTITLE: Cache Type Definitions in MSAL\nDESCRIPTION: Type definitions for valid cache entry types in MSAL. These types are used for type checking when interacting with the MSAL cache.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_195\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidCacheType = AccountEntity | IdTokenEntity | AccessTokenEntity | RefreshTokenEntity | AppMetadataEntity | AuthorityMetadataEntity | ServerTelemetryEntity | ThrottlingEntity | string;\nexport type ValidCredentialType = IdTokenEntity | AccessTokenEntity | RefreshTokenEntity;\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of useMsal Hook in React\nDESCRIPTION: This snippet shows the correct way to use the useMsal hook within the context of MsalProvider, resolving the 'stubbed_public_client_application_called' error.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/errors.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMsal, MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst pca = new PublicClientApplication(config);\n\nfunction ExampleComponent () {\n    const { accounts } = useMsal();\n\n    return <YourAppComponent />;\n};\n\nfunction App() {\n    return (\n        <MsalProvider instance={pca}>\n            <ExampleComponent />\n        </ MsalProvider>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Constants and Client Types in TypeScript\nDESCRIPTION: Defines core authentication constants and client assertion types used for token requests and authentication flows. Includes types for client assertions and configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nconst CLAIMS = \"claims\";\nconst CLIENT_ASSERTION = \"client_assertion\";\nconst CLIENT_ASSERTION_TYPE = \"client_assertion_type\";\nconst CLIENT_ID = \"client_id\";\nconst CLIENT_INFO = \"client_info\";\nconst CLIENT_REQUEST_ID = \"client-request-id\";\nconst CLIENT_SECRET = \"client_secret\";\n\nexport type ClientAssertion = {\n    assertion: string | ClientAssertionCallback;\n    assertionType: string;\n};\n\nexport type ClientAssertionCallback = (config: ClientAssertionConfig) => Promise<string>;\n\nexport type ClientAssertionConfig = {\n    clientId: string;\n    tokenEndpoint?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining IPerformanceMeasurement Interface in TypeScript\nDESCRIPTION: Interface for performance measurement utilities that track start and end times of operations. Provides methods to start, end, and flush measurements.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_131\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IPerformanceMeasurement {\n    // (undocumented)\n    endMeasurement(): void;\n    // (undocumented)\n    flushMeasurement(): number | null;\n    // (undocumented)\n    startMeasurement(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface declaration for ICachePlugin in TypeScript\nDESCRIPTION: Defines an interface for a token cache plugin with hooks for before and after cache access operations. Used to customize token caching behavior in MSAL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICachePlugin {\n    // (undocumented)\n    afterCacheAccess: (tokenCacheContext: TokenCacheContext) => Promise<void>;\n    // (undocumented)\n    beforeCacheAccess: (tokenCacheContext: TokenCacheContext) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ssoSilent() with User Hint in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the ssoSilent() API with a user hint (loginHint) to perform silent authentication. It includes error handling and success logging.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/ssosilent.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst silentRequest: SsoSilentRequest = {\n    scopes: [\"User.Read\", \"Mail.Read\"],\n    loginHint: \"user@contoso.com\"\n};\n\nthis.authService.ssoSilent(silentRequest)\n    .subscribe({\n        next: (result) => console.log(\"Success!\"), // Handle result\n        error: (error) => console.log(error) // Handle error\n    });\n```\n\n----------------------------------------\n\nTITLE: Loading Access Tokens in MSAL Browser\nDESCRIPTION: Example showing how to load access tokens with required parameters including token type, scope, and expiration details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/testing.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst silentRequest: SilentRequest = {\n    scopes: [\"User.Read\", \"email\"],\n    account: {\n        homeAccountId: \"your-home-account-id\",\n        environment: \"login.microsoftonline.com\",\n        tenantId: \"your-tenant-id\",\n        username: \"test@contoso.com\",\n        localAccountId: \"your-local-account-id\",\n    },\n};\n\nconst serverResponse: ExternalTokenResponse = {\n    token_type: AuthenticationScheme.BEARER,\n    scope: \"User.Read email\",\n    expires_in: 3599,\n    access_token: \"access-token-here\",\n};\n\nconst loadTokenOptions: LoadTokenOptions = {\n    extendedExpiresOn: 6599,\n};\n\nconst pca = new PublicClientApplication({\n    auth: { clientId: \"your-client-id\" },\n});\nawait pca.getTokenCache().loadExternalTokens(\n    silentRequest,\n    serverResponse,\n    loadTokenOptions\n);\n```\n\n----------------------------------------\n\nTITLE: Defining LogLevel Enum in TypeScript\nDESCRIPTION: Enumerates log levels for the Logger, including Error, Warning, Info, Verbose, and Trace.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_142\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum LogLevel {\n    // (undocumented)\n    Error = 0,\n    // (undocumented)\n    Info = 2,\n    // (undocumented)\n    Trace = 4,\n    // (undocumented)\n    Verbose = 3,\n    // (undocumented)\n    Warning = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Silent Flow in JSON\nDESCRIPTION: JSON configuration file for MSAL Node silent flow sample. It includes authentication options, request parameters, and resource API endpoint.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/silent-flow/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"authOptions\": {\n        \"clientId\": \"YOUR_CLIENT_ID\",\n        \"authority\": \"YOUR_AUTHORITY\"\n    },\n    \"request\": {\n        \"authCodeUrlParameters\": {\n            \"scopes\": [\"user.read\"],\n            \"redirectUri\": \"http://localhost:3000/redirect\"\n        },\n        \"tokenRequest\": {\n            \"redirectUri\": \"http://localhost:3000/redirect\",\n            \"scopes\": [\"user.read\"]\n        },\n        \"silentRequest\": {\n            \"scopes\": [\"user.read\"]\n        }\n    },\n    \"resourceApi\": {\n        \"endpoint\": \"https://graph.microsoft.com/v1.0/me\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: dSTS Authority Configuration in JavaScript\nDESCRIPTION: Shows configuration for dSTS authority with custom domain in MSAL ConfidentialClientApplication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/authority.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cca = new ConfidentialClientApplication({\n    auth: {\n        clientId: \"<your-client-id>\",\n        authority: \"https://<your-dsts-domain>/dstsv2/<your-tenant-id>\",\n        knownAuthorities: [\"<your-dsts-domain>\"] // array of domains that are known to be trusted\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Class in TypeScript\nDESCRIPTION: Defines a Logger class with methods for different log levels and PII logging. It includes functionality to clone the logger and execute callbacks.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_140\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Logger {\n    constructor(loggerOptions: LoggerOptions, packageName?: string, packageVersion?: string);\n    clone(packageName: string, packageVersion: string, correlationId?: string): Logger;\n    error(message: string, correlationId?: string): void;\n    errorPii(message: string, correlationId?: string): void;\n    executeCallback(level: LogLevel, message: string, containsPii: boolean): void;\n    info(message: string, correlationId?: string): void;\n    infoPii(message: string, correlationId?: string): void;\n    isPiiLoggingEnabled(): boolean;\n    trace(message: string, correlationId?: string): void;\n    tracePii(message: string, correlationId?: string): void;\n    verbose(message: string, correlationId?: string): void;\n    verbosePii(message: string, correlationId?: string): void;\n    warning(message: string, correlationId?: string): void;\n    warningPii(message: string, correlationId?: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL 1.x UserAgentApplication\nDESCRIPTION: Creates an instance of the MSAL 1.x UserAgentApplication for authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v1-migration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as msal from \"msal\";\n\nconst msalInstance = new msal.UserAgentApplication(config);\n```\n\n----------------------------------------\n\nTITLE: Updating Redux Store with MSAL Events in JavaScript\nDESCRIPTION: This code shows how to register an event callback with MSAL to dispatch actions to a Redux store when login events occur.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\nimport { store } from \"your-redux-store-implementation\";\n\nconst msalInstance = new PublicClientApplication(config);\n\nconst callbackId = msalInstance.addEventCallback((message: EventMessage) => {\n    if (message.eventType === EventType.LOGIN_SUCCESS) {\n        store.dispatchAction({type: \"AAD_LOGIN_SUCCESS\", payload: message.payload});\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Navigation Client in Angular with MSAL\nDESCRIPTION: This code snippet demonstrates how to implement a custom navigation client in an Angular application using MSAL. It shows how to integrate the Angular Router with MSAL's authentication flow by creating an AppComponent that initializes MsalCustomNavigationClient and sets it as the navigation client for the MSAL instance.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/performance.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, OnInit, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { MsalService, MsalBroadcastService, MSAL_GUARD_CONFIG, MsalGuardConfiguration, MsalCustomNavigationClient } from '@azure/msal-angular';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n\n  constructor(\n    @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\n    private authService: MsalService,\n    private msalBroadcastService: MsalBroadcastService,\n    private router: Router,\n    private location: Location\n  ) {\n    const customNavigationClient = new MsalCustomNavigationClient(this.authService, this.router, this.location);\n    this.authService.instance.setNavigationClient(customNavigationClient);\n  }\n\n  ngOnInit(): void {\n    // Additional code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: App Token Provider Parameters Type Definition in MSAL.js (TypeScript)\nDESCRIPTION: Defines the AppTokenProviderParameters type for application token requests. Contains correlation ID, tenant ID, scopes, and optional claims used when requesting tokens on behalf of an application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AppTokenProviderParameters = {\n    readonly correlationId?: string;\n    readonly tenantId: string;\n    readonly scopes: Array<string>;\n    readonly claims?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Authority URL Format in Console\nDESCRIPTION: Demonstrates the basic structure of an authority URL consisting of a domain and tenant identifier.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/authority.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n    https://<domain-of-the-service>/<tenant-identifier>\n```\n\n----------------------------------------\n\nTITLE: Defining SystemOptions Interface in TypeScript\nDESCRIPTION: Defines a TypeScript interface for system configuration options in the authentication library. It includes settings for token renewal offset and CORS preflight prevention.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_175\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SystemOptions = {\n    tokenRenewalOffsetSeconds?: number;\n    preventCorsPreflight?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SilentFlowClient Class in TypeScript\nDESCRIPTION: This internal class extends BaseClient to handle silent authentication flows. It includes a method for acquiring cached tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_172\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class SilentFlowClient extends BaseClient {\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient);\n    acquireCachedToken(request: CommonSilentFlowRequest): Promise<[AuthenticationResult, CacheOutcome]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Type Checking Functions in TypeScript\nDESCRIPTION: A collection of utility functions for determining entity types in the token cache, such as access tokens, ID tokens, and refresh tokens.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_132\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isAccessTokenEntity(entity: object): boolean;\n\nfunction isAppMetadataEntity(key: string, entity: object): boolean;\n\nfunction isAuthorityMetadataEntity(key: string, entity: object): boolean;\n\nfunction isAuthorityMetadataExpired(metadata: AuthorityMetadataEntity): boolean;\n\nfunction isCredentialEntity(entity: object): boolean;\n\nfunction isIdTokenEntity(entity: object): boolean;\n\nfunction isRefreshTokenEntity(entity: object): boolean;\n\nfunction isServerTelemetryEntity(key: string, entity?: object): boolean;\n\nfunction isThrottlingEntity(key: string, entity?: object): boolean;\n```\n\n----------------------------------------\n\nTITLE: Loading Refresh Tokens in MSAL Browser\nDESCRIPTION: Example demonstrating how to load refresh tokens with optional expiration parameters into the MSAL cache.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/testing.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst silentRequest: SilentRequest = {\n    scopes: [],\n    account: {\n        homeAccountId: \"your-home-account-id\",\n        environment: \"login.microsoftonline.com\",\n        tenantId: \"your-tenant-id\",\n        username: \"test@contoso.com\",\n        localAccountId: \"your-local-account-id\",\n    },\n};\n\nconst serverResponse: ExternalTokenResponse = {\n    refresh_token: \"refresh-token-here\",\n    refresh_token_expires_in: \"86399\",\n};\n\nconst loadTokenOptions: LoadTokenOptions = {};\n\nconst pca = new PublicClientApplication({\n    auth: { clientId: \"your-client-id\" },\n});\nawait pca.getTokenCache().loadExternalTokens(\n    silentRequest,\n    serverResponse,\n    loadTokenOptions\n);\n```\n\n----------------------------------------\n\nTITLE: Error Creation Functions for Azure AD Authentication\nDESCRIPTION: Collection of functions for creating different types of authentication errors including ClientAuthError, AuthError and NetworkError\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createAuthError(code: string, additionalMessage?: string): AuthError;\n\nexport function createClientAuthError(errorCode: string, additionalMessage?: string): ClientAuthError;\n\nexport function createClientConfigurationError(errorCode: string): ClientConfigurationError;\n\nexport function createNetworkError(error: AuthError, httpStatus?: number, responseHeaders?: Record<string, string>): NetworkError;\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Mode Enum in TypeScript\nDESCRIPTION: Defines the different authentication protocol modes supported by MSAL: AAD (Azure Active Directory), OIDC (OpenID Connect), and EAR (Embedded Authorization Request).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_157\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ProtocolMode: {\n    readonly AAD: \"AAD\";\n    readonly OIDC: \"OIDC\";\n    readonly EAR: \"EAR\";\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MSAL React Utility Types\nDESCRIPTION: This snippet defines utility types used in the MSAL React library, including SetComplement, SetDifference, and Subtract. These types are used for type manipulation and conditional type definitions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/apiReview/msal-react.api.md#2025-04-18_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SetComplement<A, A1 extends A> = SetDifference<A, A1>;\n\nexport type SetDifference<A, B> = A extends B ? never : A;\n\nexport type Subtract<T extends T1, T1 extends object> = Pick<T, SetComplement<keyof T, keyof T1>>;\n```\n\n----------------------------------------\n\nTITLE: Clock Validation Function in MSAL\nDESCRIPTION: Function that checks if the system clock was turned back after a token was cached. This helps detect potential time-based security issues.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_197\n\nLANGUAGE: typescript\nCODE:\n```\nfunction wasClockTurnedBack(cachedAt: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI for MSAL.js v2.x in Azure Portal\nDESCRIPTION: This image demonstrates the correct configuration of the redirect URI in the Azure Portal for MSAL.js v2.x to avoid CORS policy errors. The redirect URI should be registered as a 'Single-page application' under the Authentication blade.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n![image](https://user-images.githubusercontent.com/5307810/110390912-922fa380-801b-11eb-9e2b-d7aa88ca0687.png)\n```\n\n----------------------------------------\n\nTITLE: Adding OBO Assertion to Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds an On-Behalf-Of assertion token to request parameters. This function is used during OBO flow to pass a token obtained from a previous authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addOboAssertion(parameters: Map<string, string>, oboAssertion: string): void;\n```\n\n----------------------------------------\n\nTITLE: Example SHR JWT Payload with Custom Client Claims\nDESCRIPTION: Shows the structure of a Signed HTTP Request JWT payload after verification with the public key. This illustrates how the custom claims are included in the client_claims property of the final JWT alongside standard SHR claims.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/shr-client-claims.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    at: ...,\n    ts: ...,\n    m: \"POST\",\n    u: \"YOUR_RESOURCE_ENDPOINT\",\n    nonce: ...,\n    p: ...,\n    q: ...,\n    client_claims: \"{\\\"nonce\\\": \\\"AQAA123456\\\",\\\"local_nonce\\\": \\\"AQAA7890\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Node in JavaScript\nDESCRIPTION: This code initializes the MSAL Node Confidential Client Application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/b2c-user-flows/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cca = new msal.ConfidentialClientApplication(confidentialClientConfig);\n```\n\n----------------------------------------\n\nTITLE: Function declaration for getJWSPayload in TypeScript\nDESCRIPTION: Extracts the payload from a JSON Web Signature (JWS) token. Takes an auth token string and returns the decoded payload as a string.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getJWSPayload(authToken: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining TimeUtils Namespace in TypeScript\nDESCRIPTION: A namespace containing time-related utility functions for the authentication library, including functions to handle timestamps, token expiration checks, and time manipulation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_182\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare namespace TimeUtils {\n    export {\n        nowSeconds,\n        toSecondsFromDate,\n        toDateFromSeconds,\n        isTokenExpired,\n        wasClockTurnedBack,\n        delay\n    }\n}\nexport { TimeUtils }\n```\n\n----------------------------------------\n\nTITLE: Function declaration for getRequestThumbprint in TypeScript\nDESCRIPTION: Generates a unique thumbprint for an authentication request based on client ID, request parameters, and optional home account ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getRequestThumbprint(clientId: string, request: BaseAuthRequest, homeAccountId?: string): RequestThumbprint;\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants in TypeScript\nDESCRIPTION: Exports an object containing error constants used throughout the authentication library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_100\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Errors: {\n    INVALID_GRANT_ERROR: string;\n    CLIENT_MISMATCH_ERROR: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Authentication Implementation in Angular (Causes Error)\nDESCRIPTION: This code snippet demonstrates an incorrect implementation that will throw the 'interaction_in_progress' error. The component directly calls loginRedirect() during initialization without checking if another interaction is already in progress.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/errors.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { MsalService, MsalBroadcastService, InteractionStatus } from '@azure/msal-angular';\nimport { filter } from 'rxjs/operators';\n\n@Component()\nexport class ExampleComponent implements OnInit {\n\n  constructor(\n    private msalBroadcastService: MsalBroadcastService,\n    private authService: MsalService\n  ) {}\n\n  ngOnInit(): void {\n    this.authService.loginRedirect();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Response Mode to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds a response mode parameter to specify how the authorization response should be returned (form_post, query, or fragment).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addResponseMode(parameters: Map<string, string>, responseMode?: ResponseMode): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Code Payload Type for OAuth2 Response Data\nDESCRIPTION: Defines the type for the response payload returned during the authorization code flow, containing the code itself and various cloud environment indicators.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"AuthorizationCodePayload\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport type AuthorizationCodePayload = {\n    code: string;\n    cloud_instance_name?: string;\n    cloud_instance_host_name?: string;\n    cloud_graph_host_name?: string;\n    msgraph_host?: string;\n    state?: string;\n    nonce?: string;\n    client_info?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Cache Error Constants\nDESCRIPTION: Constants defining various error codes related to cache operations in the authentication library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nconst cacheQuotaExceededErrorCode = \"cache_quota_exceeded\";\nconst cacheUnknownErrorCode = \"cache_error_unknown\";\nconst cannotAllowPlatformBroker = \"cannot_allow_platform_broker\";\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-platform Unencrypted File Persistence in JavaScript\nDESCRIPTION: Demonstrates how to create an unencrypted file persistence layer that works across all platforms. This method is provided for convenience but is not recommended for production use due to lack of encryption.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/msal-node-extensions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FilePersistence } = require(\"@azure/msal-node-extensions\");\n\nconst filePath = \"path/to/cache/file.json\";\nconst filePersistence = await FilePersistence.create(filePath, loggerOptions);\n// Pass the persistence to msal config's cachePlugin\nconst pca = new PublicClientApplication({\n    auth: {\n            clientId: \"CLIENT_ID_HERE\",\n        },\n    cache: {\n            cachePlugin: new PersistenceCachePlugin(filePersistence);\n        },\n  });\n```\n\n----------------------------------------\n\nTITLE: Combining Certificate Files in Bash\nDESCRIPTION: Combines public certificate and private key files into a single PEM file using bash command\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/key-vault-managed-identity.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat example.crt example.key > example.pem\n```\n\n----------------------------------------\n\nTITLE: Removing Performance Callback in MSAL.js\nDESCRIPTION: This snippet demonstrates how to unregister a previously added performance callback using the removePerformanceCallback method. It returns a boolean indicating whether the callback was successfully removed.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/performance.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst msalInstance = new PublicClientApplication(config);\n\nconst callbackId: string = msalInstance.addPerformanceCallback((events: PerformanceEvent[]) => {\n    events.forEach(event => {\n        console.log(event);\n    });\n});\n\nconst removed: boolean = msalInstance.removePerformanceCallback(callbackId);\n```\n\n----------------------------------------\n\nTITLE: Listing MSAL Browser Token Acquisition APIs in TypeScript\nDESCRIPTION: This snippet lists the public APIs in msal-browser that are used for token acquisition and return an AuthenticationResult object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/Response.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nloginPopup, acquireTokenPopup, acquireTokenSilent or handleRedirectPromise\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL for Resource Owner Password Credentials in JavaScript\nDESCRIPTION: This code snippet shows the configuration object for MSAL Node using the Resource Owner Password Credentials grant. It requires the client ID and tenant information to be replaced with actual values.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/username-password/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"ENTER_CLIENT_ID\",\n        authority: \"https://login.microsoftonline.com/ENTER_TENANT_INFO\",\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Enum declaration for HeaderNames in TypeScript\nDESCRIPTION: Defines standard HTTP header names used in authentication requests and responses, including content type, authentication headers, and Microsoft-specific headers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\nexport const HeaderNames: {\n    readonly CONTENT_TYPE: \"Content-Type\";\n    readonly CONTENT_LENGTH: \"Content-Length\";\n    readonly RETRY_AFTER: \"Retry-After\";\n    readonly CCS_HEADER: \"X-AnchorMailbox\";\n    readonly WWWAuthenticate: \"WWW-Authenticate\";\n    readonly AuthenticationInfo: \"Authentication-Info\";\n    readonly X_MS_REQUEST_ID: \"x-ms-request-id\";\n    readonly X_MS_HTTP_VERSION: \"x-ms-httpver\";\n};\n\nexport type HeaderNames = (typeof HeaderNames)[keyof typeof HeaderNames];\n```\n\n----------------------------------------\n\nTITLE: Defining TokenCacheContext Class in TypeScript\nDESCRIPTION: A class representing the context for token cache operations, providing access to the token cache and tracking whether the cache has been modified during operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_184\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TokenCacheContext {\n    constructor(tokenCache: ISerializableTokenCache, hasChanged: boolean);\n    cache: ISerializableTokenCache;\n    get cacheHasChanged(): boolean;\n    hasChanged: boolean;\n    get tokenCache(): ISerializableTokenCache;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Login Hint to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a login hint to the authentication parameters. It takes a Map of string key-value pairs and a login hint string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addLoginHint(parameters: Map<string, string>, loginHint: string): void;\n```\n\n----------------------------------------\n\nTITLE: Adding CCS UPN to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a CCS (Client Credential Service) UPN to the authentication parameters. It takes a Map of string key-value pairs and a login hint string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addCcsUpn(parameters: Map<string, string>, loginHint: string): void;\n```\n\n----------------------------------------\n\nTITLE: Creating Linux-specific Persistence Layer in JavaScript\nDESCRIPTION: Shows how to create a Linux-specific persistence layer using LibSecretPersistence. It includes parameters for cache path, service name, and account name for storing data in the Linux Secret Service.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/msal-node-extensions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { LibSecretPersistence } = require(\"@azure/msal-node-extensions\");\n\nconst cachePath = \"path/to/cache/file.json\";\nconst serviceName = \"test-msal-electron-service\";\nconst accountName = \"test-msal-electron-account\";\nconst linuxPersistence = await LibSecretPersistence.create(cachePath, serviceName, accountName);\n// Use the persistence object to initialize an MSAL PublicClientApplication with cachePlugin\nconst pca = new PublicClientApplication({\n                auth: {\n                        clientId: \"CLIENT_ID_HERE\",\n                    },\n                cache: {\n                        cachePlugin: new PersistenceCachePlugin(linuxPersistence);\n                    },\n                });\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Constants in TypeScript\nDESCRIPTION: Declares constants used in authentication processes, including domain hint, error identifiers, and token-related parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_99\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DOMAIN_HINT = \"domain_hint\";\n\nconst EAR_JWE_CRYPTO = \"ear_jwe_crypto\";\n\nconst EAR_JWK = \"ear_jwk\";\n\nconst ERROR = \"error\";\n\nconst ERROR_DESCRIPTION = \"error_description\";\n\nconst EXPIRES_IN = \"expires_in\";\n\nconst FOCI = \"foci\";\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceCodeResponse Type in TypeScript\nDESCRIPTION: Declares a type representing the response structure for a device code authentication request, including user code, device code, verification URI, and expiration details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_98\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type DeviceCodeResponse = {\n    userCode: string;\n    deviceCode: string;\n    verificationUri: string;\n    expiresIn: number;\n    interval: number;\n    message: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Building and serving the MSAL React sample production build\nDESCRIPTION: This code snippet shows the commands to create a production build of the MSAL React sample and serve it using a static server.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/react-router-sample/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nserve -s build\n```\n\n----------------------------------------\n\nTITLE: Disabling Account Storage Events in MSAL-Browser\nDESCRIPTION: This example shows how to disable account storage events in MSAL-Browser when they are no longer needed.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/events.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance.disableAccountStorageEvents();\n```\n\n----------------------------------------\n\nTITLE: Legacy Component Protection with React-AAD-MSAL\nDESCRIPTION: Example showing how to protect components using the AzureAD component in the legacy react-aad-msal library. Demonstrates forced login functionality.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/migration-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MsalAuthProvider } from \"react-aad-msal\";\n\nconst authProvider = new MsalAuthProvider(config, authenticationParameters, options);\n\nfunction App() {\n    return (\n        <AzureAD provider={authProvider} forceLogin={true}>\n            <span>Only authenticated users can see me.</span>\n        </AzureAD>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Crypto API Usage in JavaScript\nDESCRIPTION: This code snippet updates the algorithm name used with window.crypto.subtle.digest() for proper cryptographic operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.crypto.subtle.digest()\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD B2C Policies in JSON\nDESCRIPTION: This JSON snippet defines the policies object to store authority strings for initiating each user-flow in Azure AD B2C.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/b2c-user-flows/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"policies\": {\n    \"authorities\": {\n        \"signUpSignIn\": {\n            \"authority\": \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/B2C_1_susi\"\n        },\n        \"resetPassword\": {\n            \"authority\": \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/B2C_1_reset\"\n        },\n        \"editProfile\": {\n            \"authority\": \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/B2C_1_edit_profile\"\n        }\n    },\n    \"authorityDomain\": \"fabrikamb2c.b2clogin.com\"\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Serializer Class in TypeScript\nDESCRIPTION: Defines the Serializer class with static methods for serializing various cache entities such as access tokens, accounts, and refresh tokens. It also includes methods for serializing the entire cache and JSON blobs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Serializer {\n    static serializeAccessTokens(atCache: AccessTokenCache): Record<string, SerializedAccessTokenEntity>;\n    static serializeAccounts(accCache: AccountCache): Record<string, SerializedAccountEntity>;\n    static serializeAllCache(inMemCache: InMemoryCache): JsonCache;\n    static serializeAppMetadata(amdtCache: AppMetadataCache): Record<string, SerializedAppMetadataEntity>;\n    static serializeIdTokens(idTCache: IdTokenCache): Record<string, SerializedIdTokenEntity>;\n    static serializeJSONBlob(data: JsonCache): string;\n    static serializeRefreshTokens(rtCache: RefreshTokenCache): Record<string, SerializedRefreshTokenEntity>;\n}\n```\n\n----------------------------------------\n\nTITLE: Client Authentication Error Class Definition in TypeScript\nDESCRIPTION: Defines the ClientAuthError class that extends AuthError for handling authentication-specific errors. Includes error code handling and message construction.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ClientAuthError extends AuthError {\n    constructor(errorCode: string, additionalMessage?: string);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Constants and Types\nDESCRIPTION: Core constants and type definitions for ID tokens and authentication entities in MSAL\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\nconst ID_TOKEN_HINT = \"id_token_hint\";\n\nexport type IdTokenCache = Record<string, IdTokenEntity>;\n\nexport type IdTokenEntity = CredentialEntity & {\n    realm: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Telemetry Header Constants in MSAL\nDESCRIPTION: Constants defining telemetry HTTP header names used by MSAL. These headers provide information about the client application, operating system, and MSAL library to Microsoft authentication services.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_198\n\nLANGUAGE: typescript\nCODE:\n```\nconst X_APP_NAME = \"x-app-name\";\nconst X_APP_VER = \"x-app-ver\";\nconst X_CLIENT_CPU = \"x-client-CPU\";\nconst X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\";\nconst X_CLIENT_EXTRA_SKU = \"x-client-xtra-sku\";\nconst X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\";\nconst X_CLIENT_OS = \"x-client-OS\";\nconst X_CLIENT_SKU = \"x-client-SKU\";\nconst X_CLIENT_VER = \"x-client-VER\";\nconst X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\";\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Response Type for OAuth2 Authorization Endpoint\nDESCRIPTION: Specifies the type for the response received from the authorization endpoint, including the authorization code and various cloud environment indicators.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"AuthorizeResponse\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport type AuthorizeResponse = {\n    code?: string;\n    ear_jwe?: string;\n    client_info?: string;\n    state?: string;\n    cloud_instance_name?: string;\n    cloud_instance_host_name?: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout Settings for MSAL.js Authentication\nDESCRIPTION: This code snippet shows how to increase the timeout settings in the MSAL configuration to handle scenarios where the identity provider might take longer to redirect. It sets custom values for windowHashTimeout, iframeHashTimeout, and loadFrameTimeout.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalConfig = {\n    auth: {\n        clientId: \"your-client-id\",\n    },\n    system: {\n        windowHashTimeout: 9000, // Applies just to popup calls - In milliseconds\n        iframeHashTimeout: 9000, // Applies just to silent calls - In milliseconds\n        loadFrameTimeout: 9000, // Applies to both silent and popup calls - In milliseconds\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Mac-specific Persistence Layer in JavaScript\nDESCRIPTION: Demonstrates the creation of a Mac-specific persistence layer using KeychainPersistence. It includes parameters for cache path, service name, and account name for storing data in the Mac Keychain.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/msal-node-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { KeychainPersistence } = require(\"@azure/msal-node-extensions\");\n\nconst cachePath = \"path/to/cache/file.json\";\nconst serviceName = \"test-msal-electron-service\";\nconst accountName = \"test-msal-electron-account\";\nconst macPersistence = await KeychainPersistence.create(cachePath, serviceName, accountName);\n// Use the persistence object to initialize an MSAL PublicClientApplication with cachePlugin\nconst pca = new PublicClientApplication({\n                auth: {\n                        clientId: \"CLIENT_ID_HERE\",\n                    },\n                cache: {\n                        cachePlugin: new PersistenceCachePlugin(macPersistence);\n                    },\n                });\n```\n\n----------------------------------------\n\nTITLE: Defining Device Code Constants in TypeScript\nDESCRIPTION: Declares constants related to device code authentication flow, including the device code identifier and error messages.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_97\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DEVICE_CODE = \"device_code\";\n\nconst deviceCodeExpired = \"device_code_expired\";\n\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\n\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\n```\n\n----------------------------------------\n\nTITLE: HTML Integration for MSAL Redirect Component\nDESCRIPTION: HTML template showing how to include the MSAL redirect component alongside the main application root component.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/redirects.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <app-root></app-root>\n  <app-redirect></app-redirect>\n</body>\n```\n\n----------------------------------------\n\nTITLE: User Interaction Constants in MSAL\nDESCRIPTION: Constants representing user interaction outcomes in the authentication process. These constants are used to identify scenarios where the user canceled the operation or a timeout was reached.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_193\n\nLANGUAGE: typescript\nCODE:\n```\nconst userCanceled = \"user_canceled\";\nconst userTimeoutReached = \"user_timeout_reached\";\n```\n\n----------------------------------------\n\nTITLE: Defining ServerTelemetryManager Class in TypeScript\nDESCRIPTION: This internal class manages server telemetry, including caching failed requests, generating header values, and handling region discovery metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_171\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ServerTelemetryManager {\n    constructor(telemetryRequest: ServerTelemetryRequest, cacheManager: CacheManager);\n    cacheFailedRequest(error: unknown): void;\n    clearNativeBrokerErrorCode(): void;\n    clearTelemetryCache(): void;\n    generateCurrentRequestHeaderValue(): string;\n    generateLastRequestHeaderValue(): string;\n    getLastRequests(): ServerTelemetryEntity;\n    getNativeBrokerErrorCode(): string | undefined;\n    getRegionDiscoveryFields(): string;\n    incrementCacheHits(): number;\n    static makeExtraSkuString(params: SkuParams): string;\n    static maxErrorsToSend(serverTelemetryEntity: ServerTelemetryEntity): number;\n    setCacheOutcome(cacheOutcome: CacheOutcome): void;\n    setNativeBrokerErrorCode(errorCode: string): void;\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata: RegionDiscoveryMetadata): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MSAL React Components and Types\nDESCRIPTION: This snippet shows the import statements for various components, types, and interfaces from the @azure/msal-react and @azure/msal-browser packages. It includes references to React types and components as well.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/apiReview/msal-react.api.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AccountInfo } from '@azure/msal-browser';\nimport { AuthenticationResult } from '@azure/msal-browser';\nimport { AuthError } from '@azure/msal-browser';\nimport { InteractionStatus } from '@azure/msal-browser';\nimport { InteractionType } from '@azure/msal-browser';\nimport { IPublicClientApplication } from '@azure/msal-browser';\nimport { Logger } from '@azure/msal-browser';\nimport { PopupRequest } from '@azure/msal-browser';\nimport { PropsWithChildren } from 'react';\nimport { default as React_2 } from 'react';\nimport * as React_3 from 'react';\nimport { RedirectRequest } from '@azure/msal-browser';\nimport { SilentRequest } from '@azure/msal-browser';\nimport { SsoSilentRequest } from '@azure/msal-browser';\n```\n\n----------------------------------------\n\nTITLE: Adding Domain Hint to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a domain hint to the authentication parameters. It takes a Map of string key-value pairs and a domain hint string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addDomainHint(parameters: Map<string, string>, domainHint: string): void;\n```\n\n----------------------------------------\n\nTITLE: Defining RequestThumbprint Type in TypeScript for MSAL.js Throttling\nDESCRIPTION: This code snippet defines the RequestThumbprint type used to identify unique calls for throttling purposes in MSAL.js. It includes clientId, authority, scopes, and an optional homeAccountIdentifier.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/Throttling.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RequestThumbprint = {\n    clientId: string;\n    authority: string;\n    scopes: Array<string>;\n    homeAccountIdentifier?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Web App in TypeScript\nDESCRIPTION: This code snippet shows the configuration object for the MSAL Node web app. It includes settings for the cloud instance, tenant ID, client ID, client secret, and redirect URI. These values need to be replaced with actual credentials before running the app.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-distributed-cache/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst appConfig: AppConfig = {\n    instance: process.env.INSTANCE || \"ENTER_CLOUD_INSTANCE_HERE\",\n    tenantId: process.env.TENANT_ID || \"ENTER_TENANT_ID_HERE\",\n    clientId: process.env.CLIENT_ID || \"ENTER_CLIENT_ID_HERE\",\n    clientSecret: process.env.CLIENT_SECRET || \"ENTER_CLIENT_SECRET_HERE\",\n    redirectUri: process.env.REDIRECT_URI || \"ENTER_REDIRECT_URI_HERE\",\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Application Telemetry to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds application telemetry to the authentication parameters. It takes a Map of string key-value pairs and an ApplicationTelemetry object as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addApplicationTelemetry(parameters: Map<string, string>, appTelemetry: ApplicationTelemetry): void;\n```\n\n----------------------------------------\n\nTITLE: App Metadata Cache Type Definition in MSAL.js (TypeScript)\nDESCRIPTION: Defines the internal AppMetadataCache type that stores application metadata entities indexed by a key. This is used to cache application-related information.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AppMetadataCache = Record<string, AppMetadataEntity>;\n```\n\n----------------------------------------\n\nTITLE: Enum declaration for HttpStatus in TypeScript\nDESCRIPTION: Defines HTTP status codes and ranges relevant to authentication flows, including success codes, client errors, server errors, and authentication-specific status codes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\nexport const HttpStatus: {\n    readonly SUCCESS: 200;\n    readonly SUCCESS_RANGE_START: 200;\n    readonly SUCCESS_RANGE_END: 299;\n    readonly REDIRECT: 302;\n    readonly CLIENT_ERROR: 400;\n    readonly CLIENT_ERROR_RANGE_START: 400;\n    readonly BAD_REQUEST: 400;\n    readonly UNAUTHORIZED: 401;\n    readonly NOT_FOUND: 404;\n    readonly REQUEST_TIMEOUT: 408;\n    readonly GONE: 410;\n    readonly TOO_MANY_REQUESTS: 429;\n    readonly CLIENT_ERROR_RANGE_END: 499;\n    readonly SERVER_ERROR: 500;\n    readonly SERVER_ERROR_RANGE_START: 500;\n    readonly SERVICE_UNAVAILABLE: 503;\n    readonly GATEWAY_TIMEOUT: 504;\n    readonly SERVER_ERROR_RANGE_END: 599;\n    readonly MULTI_SIDED_ERROR: 600;\n};\n\nexport type HttpStatus = (typeof HttpStatus)[keyof typeof HttpStatus];\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Side Authentication Redirect\nDESCRIPTION: Processing the authentication response, acquiring tokens, and setting up session with SPA authorization code.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/HybridSample/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.post('/server-redirect', (req, res) => {\n    const tokenRequest = {\n        code: req.body.code,\n        scopes: [\"user.read\"],\n        redirectUri: \"http://localhost:3000/auth/server-redirect\",\n        enableSpaAuthorizationCode: true\n    };\n\n    msalInstance.acquireTokenByCode(tokenRequest)\n        .then((response) => {\n            const {\n                sid,\n                login_hint: loginHint,\n                preferred_username: preferredUsername\n            } = response.idTokenClaims;\n\n            const { code } = response;\n\n            req.session.isAuthenticated = true;\n            req.session.code = code;\n            req.session.sid = sid;\n            req.session.loginHint = loginHint;\n            req.session.preferredUsername = preferredUsername;\n\n            res.redirect(`/auth/client-redirect`)\n        })\n        .catch((error) => {\n            console.timeEnd(timeLabel)\n            console.log(error);\n            res.status(500).send(error);\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Resources in a Single Token Request in MSAL.js\nDESCRIPTION: This example illustrates what happens when multiple resources are erroneously passed in a single token request. Only the first resource's scope will be honored.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// you will only receive a token for MS GRAPH API's \"User.Read\" scope here\nconst myToken = await msalInstance.acquireTokenSilent({\n     scopes: [ \"User.Read\", \"api://<myCustomApiClientId>/My.Scope\" ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AuthToken Type and Constants in TypeScript\nDESCRIPTION: This snippet defines the AuthToken type and related constants for authentication tokens in MSAL.js. It includes properties for cloud graph host names, error information, and account details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AuthToken = {\n    cloud_graph_host_name?: string;\n    msgraph_host?: string;\n    error?: string;\n    error_uri?: string;\n    error_description?: string;\n    suberror?: string;\n    timestamp?: string;\n    trace_id?: string;\n    correlation_id?: string;\n    claims?: string;\n    accountId?: string;\n};\n\nconst authTimeNotFound = \"auth_time_not_found\";\n\ndeclare namespace AuthToken {\n    export {\n        extractTokenClaims,\n        getJWSPayload,\n        checkMaxAge\n    }\n}\nexport { AuthToken }\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL.js Public Client\nDESCRIPTION: Client-side configuration of PublicClientApplication for the SPA component.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/HybridSample/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst msalInstance = new msal.PublicClientApplication({\n    auth: {\n        clientId: \"{{clientId}}\",\n        redirectUri: \"http://localhost:3000/auth/client-redirect\",\n        authority: \"{{authority}}\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Running MSAL.js Tests\nDESCRIPTION: Commands for running unit tests with and without coverage\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n// Change to the root of the msal repo\ncd microsoft-authentication-library-for-js/\n// Install npm dependencies and bootstrap packages\nnpm install\n// Navigate to package you would like to build\ncd lib/<package-name>\n// Run test command\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining ThrottlingConstants in TypeScript\nDESCRIPTION: Defines constants used for request throttling in the authentication library, including default throttle times, prefixes, and capability values.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_179\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ThrottlingConstants: {\n    DEFAULT_THROTTLE_TIME_SECONDS: number;\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: number;\n    THROTTLING_PREFIX: string;\n    X_MS_LIB_CAPABILITY_VALUE: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LoggerOptions Type in TypeScript\nDESCRIPTION: Specifies options for configuring the Logger, including callback, PII logging, log level, and correlation ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_141\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LoggerOptions = {\n    loggerCallback?: ILoggerCallback;\n    piiLoggingEnabled?: boolean;\n    logLevel?: LogLevel;\n    correlationId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Device Code Request Configuration in JSON\nDESCRIPTION: Configuring device code request parameters with default user.read scope for basic user information access\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/device-code/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...,\n    \"request\": {\n        \"deviceCodeUrlParameters\": {\n            \"scopes\": [\"user.read\"]\n        }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed Identity Parameters in TypeScript\nDESCRIPTION: TypeScript code snippet for configuring the managedIdentityIdParams object with user assigned identity details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/Managed-Identity/Imds/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst managedIdentityIdParams: ManagedIdentityIdParams = {\n    userAssignedClientId: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    // userAssignedObjectId: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    // userAssignedResourceId: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Invoke Function Type in TypeScript\nDESCRIPTION: Type definition for an invoke function that wraps callbacks with telemetry logging. It accepts a callback function, event name, logger, optional telemetry client, and correlation ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_128\n\nLANGUAGE: typescript\nCODE:\n```\nexport const invoke: <T extends any[], U>(callback: (...args: T) => U, eventName: string, logger: Logger, telemetryClient?: IPerformanceClient, correlationId?: string) => (...args: T) => U;\n```\n\n----------------------------------------\n\nTITLE: Defining EventMessage Type in TypeScript for MSAL-Browser\nDESCRIPTION: This snippet defines the structure of an EventMessage in MSAL-Browser. It includes properties for event type, interaction type, payload, error, and timestamp.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/events.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EventMessage = {\n    eventType: EventType;\n    interactionType: InteractionType | null;\n    payload: EventPayload;\n    error: EventError;\n    timestamp: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Constants in TypeScript\nDESCRIPTION: Defines constant values for authentication error states and response types, including noTokensFound, nullOrEmptyToken, and OAuth response types.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_146\n\nLANGUAGE: typescript\nCODE:\n```\nconst noTokensFound = \"no_tokens_found\";\n\nfunction nowSeconds(): number;\n\nconst nullOrEmptyToken = \"null_or_empty_token\";\n\nexport const OAuthResponseType: {\n    readonly CODE: \"code\";\n    readonly IDTOKEN_TOKEN: \"id_token token\";\n    readonly IDTOKEN_TOKEN_REFRESHTOKEN: \"id_token token refresh_token\";\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing MSAL Public Client Application\nDESCRIPTION: Creating a PublicClientApplication instance with the configured MSAL settings for authentication\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/device-code/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pca = new msal.PublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: Error Handling Classes and Constants\nDESCRIPTION: Definitions for authentication error handling including InteractionRequiredAuthError class and error codes\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_127\n\nLANGUAGE: typescript\nCODE:\n```\nexport class InteractionRequiredAuthError extends AuthError {\n    constructor(errorCode?: string, errorMessage?: string, subError?: string, timestamp?: string, traceId?: string, correlationId?: string, claims?: string, errorNo?: string);\n    claims: string;\n    readonly errorNo?: string;\n    timestamp: string;\n    traceId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Route for Sign-In Flow in JavaScript\nDESCRIPTION: This code sets up an Express route for initiating the sign-in flow, including CSRF token generation and state parameter encoding.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/b2c-user-flows/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/sign-in\", (req, res, next) => {\n    // create a GUID against crsf\n    req.session.csrfToken = cryptoProvider.createNewGuid();\n\n    /**\n     * The MSAL Node library allows you to pass your custom state as state parameter in the Request object.\n     * The state parameter can also be used to encode information of the app's state before redirect.\n     * You can pass the user's state in the app, such as the page or view they were on, as input to this parameter.\n     */\n    const state = cryptoProvider.base64Encode(\n        JSON.stringify({\n            csrfToken: req.session.csrfToken,\n            appStage: APP_STAGES.SIGN_IN,\n        })\n    );\n\n    const authCodeUrlRequestParams = {\n        authority: scenarioConfig.policies.authorities.signUpSignIn.authority,\n        state: state,\n    };\n\n    const authCodeRequestParams = {};\n\n    return redirectToAuthCodeUrl(\n        req,\n        res,\n        next,\n        authCodeUrlRequestParams,\n        authCodeRequestParams\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Describing Token Storage in MSAL.js\nDESCRIPTION: Explains how MSAL.js stores tokens using HTML5 storage, specifically sessionStorage, which maintains tokens for the duration of a session. It recommends re-authentication for important operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/security.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTokens are accessible from JavaScript since MSAL is using HTML5 storage. Default storage option is `sessionStorage`, which keeps the tokens per session. You should ask user to login again for important operations on your app.\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Cloud Instance Types and Constants in TypeScript\nDESCRIPTION: This snippet defines types and constants related to Azure Cloud Instances in MSAL.js. It includes an enum-like object for different Azure cloud environments and related types.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_72\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const AzureCloudInstance: {\n    readonly None: \"none\";\n    readonly AzurePublic: \"https://login.microsoftonline.com\";\n    readonly AzurePpe: \"https://login.windows-ppe.net\";\n    readonly AzureChina: \"https://login.chinacloudapi.cn\";\n    readonly AzureGermany: \"https://login.microsoftonline.de\";\n    readonly AzureUsGovernment: \"https://login.microsoftonline.us\";\n};\n\nexport type AzureCloudInstance = (typeof AzureCloudInstance)[keyof typeof AzureCloudInstance];\n\nexport type AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance;\n    tenant?: string;\n};\n\nexport type AzureRegion = string;\n\nexport type AzureRegionConfiguration = {\n    azureRegion?: AzureRegion;\n    environmentRegion: string | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Response Type to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds a response type parameter to specify what type of token or code should be returned from the authorization endpoint (code, token, id_token, etc.).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addResponseType(parameters: Map<string, string>, responseType: OAuthResponseType): void;\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript for MSAL Node Sample\nDESCRIPTION: Command to compile the TypeScript code into JavaScript using the TypeScript compiler (tsc). The compiled files will be placed in the '/dist' folder.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials-with-cert-from-key-vault/README.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx tsc\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Angular app.module.ts for platformBrowserDynamic\nDESCRIPTION: Setup for the AppModule when using platformBrowserDynamic to dynamically configure MSAL Angular. This module imports MsalModule and provides the HTTP interceptor and service.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MsalModule, MsalInterceptor, MsalService } from \"@azure/msal-angular\";\n\n@NgModule({\n  imports: [MsalModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: MsalInterceptor,\n      multi: true,\n    },\n    MsalService,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining QueueMeasurement Type for Performance Tracking\nDESCRIPTION: Defines a type for measuring queue performance in the MSAL library. Tracks event name, queue time, and completion status of performance operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_159\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QueueMeasurement = {\n    eventName: string;\n    queueTime: number;\n    manuallyCompleted?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Handling of Interaction in Progress\nDESCRIPTION: This example demonstrates incorrect usage that may throw an 'interaction_in_progress' error when another component has already invoked an interactive API.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/errors.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMsal, useIsAuthenticated } from \"@azure/msal-react\";\nimport { useEffect } from \"react\";\n\nexport function exampleComponent() {\n    const { instance } = useMsal();\n    const isAuthenticated = useIsAuthenticated();\n\n    useEffect(() => {\n        if (!isAuthenticated) {\n            // If another component has already invoked an interactive API this will throw\n            await instance.loginPopup();\n        }\n    }, [isAuthenticated, instance]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenKeys Type in TypeScript\nDESCRIPTION: Defines a type for storing arrays of token keys categorized by token type (ID tokens, access tokens, and refresh tokens) used in token cache management.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_186\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TokenKeys = {\n    idToken: string[];\n    accessToken: string[];\n    refreshToken: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Recommending XSS Protection for MSAL.js Applications\nDESCRIPTION: Advises developers to implement cross-site scripting (XSS) protection measures in their applications using MSAL.js. It provides a link to the OWASP Cross Site Scripting Prevention Cheat Sheet for detailed guidance.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/security.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nYou should protect your site for XSS. Please check the article here: [Cross Site Scripting Prevention Cheat Sheet](<https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html>)\n```\n\n----------------------------------------\n\nTITLE: Defining LibraryStateObject Type in TypeScript\nDESCRIPTION: Defines a type for representing the state of the library, including an ID and optional metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_139\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LibraryStateObject = {\n    id: string;\n    meta?: Record<string, string>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing MSAL React Higher-Order Component\nDESCRIPTION: This snippet defines the withMsal higher-order component, which wraps a React component with MSAL context. It also defines the WithMsalProps type used by the HOC.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/apiReview/msal-react.api.md#2025-04-18_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const withMsal: <P extends WithMsalProps>(Component: React_2.ComponentType<P>) => React_2.FunctionComponent<Subtract<P, WithMsalProps>>;\n\nexport type WithMsalProps = {\n    msalContext: IMsalContext;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining InvokeAsync Function Type in TypeScript\nDESCRIPTION: Type definition for an internal async invoke function that wraps Promise-returning callbacks with telemetry logging. Similar to invoke but for asynchronous functions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_129\n\nLANGUAGE: typescript\nCODE:\n```\nexport const invokeAsync: <T extends any[], U>(callback: (...args: T) => Promise<U>, eventName: string, logger: Logger, telemetryClient?: IPerformanceClient, correlationId?: string) => (...args: T) => Promise<U>;\n```\n\n----------------------------------------\n\nTITLE: Defining IUri Interface in TypeScript\nDESCRIPTION: Interface representing a parsed URI with properties for protocol, host, path segments, query string, and other URI components.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_135\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IUri {\n    // (undocumented)\n    AbsolutePath: string;\n    // (undocumented)\n    Hash: string;\n    // (undocumented)\n    HostNameAndPort: string;\n    // (undocumented)\n    PathSegments: string[];\n    // (undocumented)\n    Protocol: string;\n    // (undocumented)\n    QueryString: string;\n    // (undocumented)\n    Search: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cache-related Constants and Types in TypeScript\nDESCRIPTION: This snippet defines constants and types related to cache management in MSAL.js. It includes account types and a CacheError class for handling cache-related errors.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const CacheAccountType: {\n    readonly MSSTS_ACCOUNT_TYPE: \"MSSTS\";\n    readonly ADFS_ACCOUNT_TYPE: \"ADFS\";\n    readonly MSAV1_ACCOUNT_TYPE: \"MSA\";\n    readonly GENERIC_ACCOUNT_TYPE: \"Generic\";\n};\n\nexport type CacheAccountType = (typeof CacheAccountType)[keyof typeof CacheAccountType];\n\nexport class CacheError extends Error {\n    constructor(errorCode: string, errorMessage?: string);\n    errorCode: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Deserialization Implementation\nDESCRIPTION: Internal class for deserializing various token and account cache entities from JSON format into strongly-typed cache objects.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Deserializer {\n    static deserializeAccessTokens(accessTokens: Record<string, SerializedAccessTokenEntity>): AccessTokenCache;\n    static deserializeAccounts(accounts: Record<string, SerializedAccountEntity>): AccountCache;\n    static deserializeAllCache(jsonCache: JsonCache): InMemoryCache;\n    static deserializeAppMetadata(appMetadata: Record<string, SerializedAppMetadataEntity>): AppMetadataCache;\n    static deserializeIdTokens(idTokens: Record<string, SerializedIdTokenEntity>): IdTokenCache;\n    static deserializeJSONBlob(jsonFile: string): JsonCache;\n    static deserializeRefreshTokens(refreshTokens: Record<string, SerializedRefreshTokenEntity>): RefreshTokenCache;\n}\n```\n\n----------------------------------------\n\nTITLE: Running API Extractor\nDESCRIPTION: Command to execute API Extractor to check for public API surface changes\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n    $ npm run apiExtractor\n```\n\n----------------------------------------\n\nTITLE: Incorrect Token Acquisition Implementation in JavaScript\nDESCRIPTION: An example showing incorrect token acquisition that can cause 'Interaction_in_progress' errors because it doesn't check for existing interactions before initiating new interactive authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/errors.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function myAcquireToken(request) {\n    const msalInstance = getMsalInstance(); // get the msal application instance\n\n    const tokenRequest = {\n        account: msalInstance.getActiveAccount() || null,\n        ...request,\n    };\n\n    let tokenResponse;\n\n    try {\n        // attempt silent acquisition first\n        tokenResponse = await msalInstance.acquireTokenSilent(tokenRequest);\n    } catch (error) {\n        if (error instanceof InteractionRequiredAuthError) {\n            try {\n                tokenResponse = await msalInstance.acquireTokenPopup(\n                    tokenRequest\n                );\n            } catch (err) {\n                console.log(err);\n                // handle other errors\n            }\n        }\n\n        console.log(error);\n        // handle other errors\n    }\n\n    return tokenResponse;\n}\n\nconst request = {\n    scopes: [\"User.Read\"],\n};\n\nmyAcquireToken(request);\nmyAcquireToken(request);\n```\n\n----------------------------------------\n\nTITLE: Adding Username to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds a username parameter to request parameters. This is used in flows where the username is known in advance, such as password grant or username hint.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addUsername(parameters: Map<string, string>, username: string): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Default Token Renewal Offset in TypeScript\nDESCRIPTION: Exports a constant for the default token renewal offset in seconds. This value is used to determine when to proactively renew tokens before they expire.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_94\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Environment variable setup for MSAL authentication configuration including client secret, client ID, and authority URL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/HybridSample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMSAL_CLIENT_SECRET=<your client secret here>\nMSAL_CLIENT_ID=<your client id here>\nMSAL_AUTHORITY=https://login.microsoftonline.com/common\n```\n\n----------------------------------------\n\nTITLE: Electron Node.js Version Compatibility Error\nDESCRIPTION: This snippet shows an example error message that Electron developers might encounter due to Node.js version differences. It highlights the need for version compatibility between the Electron project and the MSAL extension.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/msal-node-extensions.md#2025-04-18_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nUncaught Exception:\nError: The module\n\"<path-to-project>\\node_modules\\...\\dpapi.node\" was compiled against a different Node.js version using NODE_MODULE_VERSION 85. This version of Node.js requires NODE_MODULE_VERSION 80. Please try re-compiling or re-installing the module....\n```\n\n----------------------------------------\n\nTITLE: Cache Configuration Options Table in Markdown\nDESCRIPTION: Markdown table documenting cache configuration options for MSAL.js, including storage locations, cookie settings, and cache migration options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                      | Description                                                                                                                                                                                                                                                                                                                                                                                                     | Format                                                                                                  | Default Value                                       |\n| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- | --------------------------------------------------- |\n| `cacheLocation`             | Location of token cache in browser.                                                                                                                                                                                                                                                                                                                                                                                             | String value that must be one of the following: `\"sessionStorage\"`, `\"localStorage\"`, `\"memoryStorage\"` | `sessionStorage`                                    |\n| `temporaryCacheLocation`    | Location of temporary cache in browser. This option should only be changed for specific edge cases. Please refer to [caching](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/caching.md#cached-artifacts) for more.                                                                                                                                                          | String value that must be one of the following: `\"sessionStorage\"`, `\"localStorage\"`, `\"memoryStorage\"` | `sessionStorage`                                    |\n| `storeAuthStateInCookie`    | If true, stores cache items in cookies as well as browser cache. Should be set to true for use cases using IE.                                                                                                                                                                                                                                                                                                                  | boolean                                                                                                 | `false`                                             |\n| `secureCookies`             | If true and `storeAuthStateInCookies` is also enabled, MSAL adds the `Secure` flag to the browser cookie so it can only be sent over HTTPS.                                                                                                                                                                                                                                                                                     | boolean                                                                                                 | `false`                                             |\n| `cacheMigrationEnabled`     | If true, cache entries from older versions of MSAL will be updated to conform to the latest cache schema on startup. If your application has not been recently updated to a new version of MSAL.js you can safely turn this off. In the event old cache entries are not migrated it may result in a cache miss when attempting to retrieve accounts or tokens and affected users may need to re-authenticate to get up to date. | boolean                                                                                                 | `true` when using `localStorage`, `false` otherwise |\n| `claimsBasedCachingEnabled` | If `true`, access tokens will be cached under a key containing the hash of the requested claims string, resulting in a cache miss and new network token request when the same token request is made with different or missing claims. If set to `false`, tokens will be cached without claims, but all requests containing claims will go to the network and overwrite any previously cached token with the same scopes.        | boolean                                                                                                 | `false`                                             |\n```\n\n----------------------------------------\n\nTITLE: Adding Instance Awareness to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds instance awareness to the authentication parameters. It takes a Map of string key-value pairs as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addInstanceAware(parameters: Map<string, string>): void;\n```\n\n----------------------------------------\n\nTITLE: Creating Application Instance in MSAL 3.x (Option 2)\nDESCRIPTION: Alternative approach for MSAL 3.x instantiation using the static createPublicClientApplication method, which returns an already initialized PublicClientApplication object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v2-migration.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst msalConfig = {\n    auth: {\n        clientId: 'your_client_id'\n    }\n};\n\nconst msalInstance = await PublicClientApplication.createPublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: Defining Network Request and Response Types in TypeScript\nDESCRIPTION: Specifies types for network request options and responses, including headers, body, and status.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_145\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type NetworkRequestOptions = {\n    headers?: Record<string, string>;\n    body?: string;\n};\n\nexport type NetworkResponse<T> = {\n    headers: Record<string, string>;\n    body: T;\n    status: number;\n};\n```\n\n----------------------------------------\n\nTITLE: MSAL Popup Redirect Configuration\nDESCRIPTION: Shows how to configure a custom redirect URI specifically for popup authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmsalInstance.loginPopup({\n    redirectUri: \"http://localhost:3000/blank.html\",\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Malformed Certificate with Newlines\nDESCRIPTION: This snippet shows an example of a certificate string containing unexpected newline characters, which can cause authentication errors in MSAL Node.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/certificate-credentials.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN CERTIFICATE-----\\nMIIDDzCCAfegAwIBAgIJAMkyzQVK88NHMA0GCSqGSIb3DQEBBQUAMIGCMQswCQYDVQQGEwJTRTESMBAGA1UECBMJU3RvY2tob2xtMQ4wDAYDVQQHEwVLaXN0YTEQMA4G0fbkqbKulrchGbNgkankZtEVg4PGjobZq7B+njvcVa7SsWF/WLq5AUbw==\\r\\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: App Metadata Entity Type Definition in MSAL.js (TypeScript)\nDESCRIPTION: Defines the AppMetadataEntity type that contains client ID, environment, and optional family ID information. This represents metadata about an application in the authentication ecosystem.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AppMetadataEntity = {\n    clientId: string;\n    environment: string;\n    familyId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant ID Verification Function in TypeScript\nDESCRIPTION: A function that checks if a given tenant ID matches the home tenant in a home account ID. Used for validating tenant-specific operations in the authentication flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_176\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function tenantIdMatchesHomeTenant(tenantId?: string, homeAccountId?: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript Code for Azure VM Sample\nDESCRIPTION: Command to compile the TypeScript code into JavaScript using npx and tsc.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/Managed-Identity/Imds/README.md#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx tsc\n```\n\n----------------------------------------\n\nTITLE: Defining CCS Header and Credential Types in TypeScript\nDESCRIPTION: Defines the CCS (Client Credential Service) header constant and associated credential types used for authentication. Includes type definitions for credential structure and supported credential types.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nconst CCS_HEADER = \"X-AnchorMailbox\";\n\nexport type CcsCredential = {\n    credential: string;\n    type: CcsCredentialType;\n};\n\nexport const CcsCredentialType: {\n    readonly HOME_ACCOUNT_ID: \"home_account_id\";\n    readonly UPN: \"UPN\";\n};\n\nexport type CcsCredentialType = (typeof CcsCredentialType)[keyof typeof CcsCredentialType];\n```\n\n----------------------------------------\n\nTITLE: Building and Running MSAL React B2C Sample Production Server\nDESCRIPTION: This snippet shows the steps to build the production version of the MSAL React B2C sample and run it using a static server. It includes commands for building the project and serving the built files.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/b2c-sample/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nserve -s build\n```\n\n----------------------------------------\n\nTITLE: Building and Testing MSAL Node Package\nDESCRIPTION: Commands for installing dependencies, building the MSAL Node package, and running tests. These commands should be executed from the repository root and package directory.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Install dependencies from root of repo\nnpm install\n\n// Change to the msal-node package directory\ncd lib/msal-node\n\n// To run build for common package & node package\nnpm run build:all\n\n// To run build only for node package\nnpm run build\n\n// To run tests\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Implementing Delay Function in TypeScript\nDESCRIPTION: Defines a utility function that creates a promise that resolves after a specified delay. It can optionally return a value after the delay.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_96\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction delay<T>(t: number, value?: T): Promise<T | void>;\n```\n\n----------------------------------------\n\nTITLE: Defining Authority Factory Namespace for Creating Authority Instances\nDESCRIPTION: Creates a namespace for factory functions to instantiate Authority objects, particularly for discovered authority instances.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare namespace AuthorityFactory {\n    export {\n        createDiscoveredInstance\n    }\n}\nexport { AuthorityFactory }\n```\n\n----------------------------------------\n\nTITLE: Adding Device Code to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a device code to the authentication parameters. It takes a Map of string key-value pairs and a device code string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addDeviceCode(parameters: Map<string, string>, code: string): void;\n```\n\n----------------------------------------\n\nTITLE: Updating Broker Configuration in MSAL v4\nDESCRIPTION: Demonstrates the configuration change from allowNativeBroker to allowPlatformBroker in MSAL v4 for device bound tokens functionality.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v3-migration.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// v3\nconst msalConfig = {\n    auth: {\n        clientId: \"insert-clientId\"\n    },\n    system: {\n        allowNativeBroker: true\n    }\n};\n\n// v4 change this to:\nconst msalConfig = {\n    auth: {\n        clientId: \"insert-clientId\"\n    },\n    system: {\n        allowPlatformBroker: true\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Performance Events Constant Definition\nDESCRIPTION: Constant object defining all possible performance event types in MSAL.js, including token acquisition, cryptographic operations, cache operations, and various authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_151\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PerformanceEvents: {\n    readonly AcquireTokenByCode: \"acquireTokenByCode\";\n    readonly AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\";\n    readonly AcquireTokenSilent: \"acquireTokenSilent\";\n    readonly AcquireTokenSilentAsync: \"acquireTokenSilentAsync\";\n    readonly AcquireTokenPopup: \"acquireTokenPopup\";\n    readonly AcquireTokenPreRedirect: \"acquireTokenPreRedirect\";\n    readonly AcquireTokenRedirect: \"acquireTokenRedirect\";\n    readonly CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\";\n    readonly CryptoOptsSignJwt: \"cryptoOptsSignJwt\";\n    readonly SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\";\n    readonly SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\";\n    readonly AwaitConcurrentIframe: \"awaitConcurrentIframe\";\n    readonly SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\";\n    readonly SsoSilent: \"ssoSilent\";\n    readonly StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\";\n    readonly FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\";\n    readonly NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\";\n    readonly BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\";\n    readonly NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\";\n    readonly RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\";\n    readonly AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\";\n    readonly BrokerHandhshake: \"brokerHandshake\";\n    readonly AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\";\n    readonly AcquireTokenByBroker: \"acquireTokenByBroker\";\n    readonly RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\";\n    readonly RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\";\n    readonly RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\";\n    readonly RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\";\n    readonly RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\";\n    readonly AcquireTokenFromCache: \"acquireTokenFromCache\";\n    readonly SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\";\n    readonly SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\";\n    readonly AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\";\n    readonly InitializeBaseRequest: \"initializeBaseRequest\";\n    readonly InitializeSilentRequest: \"initializeSilentRequest\";\n    readonly InitializeClientApplication: \"initializeClientApplication\";\n    readonly InitializeCache: \"initializeCache\";\n    readonly SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\";\n    readonly SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\";\n    readonly SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\";\n    readonly SilentHandlerLoadFrame: \"silentHandlerLoadFrame\";\n    readonly SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\";\n    readonly StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\";\n    readonly StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\";\n    readonly StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\";\n    readonly GetAuthCodeUrl: \"getAuthCodeUrl\";\n    readonly GetStandardParams: \"getStandardParams\";\n    readonly HandleCodeResponseFromServer: \"handleCodeResponseFromServer\";\n    readonly HandleCodeResponse: \"handleCodeResponse\";\n    readonly HandleResponseEar: \"handleResponseEar\";\n    readonly HandleResponsePlatformBroker: \"handleResponsePlatformBroker\";\n    readonly HandleResponseCode: \"handleResponseCode\";\n    readonly UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\";\n    readonly AuthClientAcquireToken: \"authClientAcquireToken\";\n    readonly AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\";\n    readonly AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\";\n    readonly PopTokenGenerateCnf: \"popTokenGenerateCnf\";\n    readonly PopTokenGenerateKid: \"popTokenGenerateKid\";\n    readonly HandleServerTokenResponse: \"handleServerTokenResponse\";\n    readonly DeserializeResponse: \"deserializeResponse\";\n    readonly AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\";\n    readonly AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\";\n    readonly AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\";\n    readonly AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\";\n    readonly AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\";\n    readonly AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\";\n    readonly AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\";\n    readonly AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\";\n    readonly RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\";\n    readonly RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\";\n    readonly RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\";\n    readonly AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\";\n    readonly GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\";\n    readonly GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\";\n    readonly HandleRedirectPromiseMeasurement: \"handleRedirectPromise\";\n    readonly HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\";\n    readonly UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\";\n    readonly UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\";\n    readonly NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\";\n    readonly NativeGenerateAuthResult: \"nativeGenerateAuthResult\";\n    readonly RemoveHiddenIframe: \"removeHiddenIframe\";\n    readonly ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\";\n    readonly CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\";\n    readonly ImportExistingCache: \"importExistingCache\";\n    readonly SetUserData: \"setUserData\";\n    readonly LocalStorageUpdated: \"localStorageUpdated\";\n    readonly GeneratePkceCodes: \"generatePkceCodes\";\n    readonly GenerateCodeVerifier: \"generateCodeVerifier\";\n    readonly GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\";\n    readonly Sha256Digest: \"sha256Digest\";\n    readonly GetRandomValues: \"getRandomValues\";\n    readonly GenerateHKDF: \"generateHKDF\";\n    readonly GenerateBaseKey: \"generateBaseKey\";\n    readonly Base64Decode: \"base64Decode\";\n    readonly UrlEncodeArr: \"urlEncodeArr\";\n    readonly Encrypt: \"encrypt\";\n    readonly Decrypt: \"decrypt\";\n    readonly GenerateEarKey: \"generateEarKey\";\n    readonly DecryptEarResponse: \"decryptEarResponse\";\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Conversion Functions in TypeScript\nDESCRIPTION: Functions for converting between date objects and seconds-based timestamps, used for token expiration handling and time calculations in the authentication library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_183\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction toDateFromSeconds(seconds: number | string | undefined): Date;\n\nfunction toSecondsFromDate(date: Date): number;\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Query Parameters to Authentication Request in TypeScript\nDESCRIPTION: This function adds extra query parameters to the authentication request. It takes a Map of string key-value pairs and a StringDict object containing extra parameters as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addExtraQueryParameters(parameters: Map<string, string>, eQParams: StringDict): void;\n```\n\n----------------------------------------\n\nTITLE: Running the MSAL Node ROPC sample application\nDESCRIPTION: Command to start the MSAL Node ROPC sample application using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/username-password-cca/README.md#2025-04-18_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting Client Secret in .env File for MSAL Node\nDESCRIPTION: Example of setting the client secret in a .env file for use with MSAL Node Confidential Client Applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCLIENT_SECRET=<your client secret here>\n```\n\n----------------------------------------\n\nTITLE: Building MSAL Node Package Locally\nDESCRIPTION: Command to build the MSAL Node package locally when customizing or building from the source repository.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/samples/electron-webpack/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:package\n```\n\n----------------------------------------\n\nTITLE: Defining SubMeasurement Type in TypeScript\nDESCRIPTION: Defines a TypeScript type for representing performance submeasurements in the authentication library. It contains a name identifier and the start time in milliseconds.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_174\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SubMeasurement = {\n    name: string;\n    startTimeMs: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Interface Definitions for Core Authentication Services\nDESCRIPTION: Interface definitions for GUID generation, logging, and native broker plugin functionality\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_125\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IGuidGenerator {\n    generateGuid(): string;\n    isGuid(guid: string): boolean;\n}\n\nexport interface ILoggerCallback {\n    (level: LogLevel, message: string, containsPii: boolean): void;\n}\n\nexport interface INativeBrokerPlugin {\n    acquireTokenInteractive(request: NativeRequest, windowHandle?: Buffer): Promise<AuthenticationResult>;\n    acquireTokenSilent(request: NativeRequest): Promise<AuthenticationResult>;\n    getAccountById(accountId: string, correlationId: string): Promise<AccountInfo>;\n    getAllAccounts(clientId: string, correlationId: string): Promise<AccountInfo[]>;\n    isBrokerAvailable: boolean;\n    setLogger(loggerOptions: LoggerOptions): void;\n    signOut(request: NativeSignOutRequest): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Client Secret in .env File\nDESCRIPTION: This snippet shows how to store the client secret in an .env file for security purposes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/b2c-user-flows/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCLIENT_SECRET=<your client secret here>\n```\n\n----------------------------------------\n\nTITLE: Creating Azure AD Application and Service Principal using PowerShell\nDESCRIPTION: This PowerShell script creates an Azure AD application for a single-page application (SPA) using the Microsoft Graph API. It sets up the required permissions, redirect URIs, and creates a corresponding service principal.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/FAQ.md#2025-04-18_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Add additional permissions to array below\n$mgResourceAccess = @($mgUserReadScope)\n\n[object[]]$requiredResourceAccess = @{\n    \"ResourceAppId\" = \"00000003-0000-0000-c000-000000000000\" # MS Graph App Id\n    \"ResourceAccess\" = $mgResourceAccess\n}\n\n# Create the application\n$msalApplication = New-MgApplication -displayName myMsalSpa `\n    -SignInAudience AzureADMyOrg `\n    -Spa @{RedirectUris = \"http://localhost:3000\", \"http://localhost:3000/redirect\"} `\n    -RequiredResourceAccess $requiredResourceAccess\n\n# Provision the service principal\nNew-MgServicePrincipal -AppId $msalApplication.AppId\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Node Sample with npm Scripts\nDESCRIPTION: npm scripts configured in package.json to compile and start either the standalone app or the express server version of the sample.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/custom-INetworkModule-and-network-tracing/README.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:express\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Plugin in Vue 3 Application\nDESCRIPTION: This snippet shows how to install the MSAL plugin in a Vue 3 application. It demonstrates the creation of the Vue app and the installation of the msalPlugin.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/vue3-sample-app/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './App.vue'; // Your root component\nimport { msalPlugin } from \"./plugins/msalPlugin\";\nimport { msalInstance } from \"./authConfig\";\n\nconst app = createApp(App);\napp.use(msalPlugin, msalInstance);\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Application Settings\nDESCRIPTION: JSON configuration file (customConfig.json) for setting up the MSAL Node application with tenant information and client ID.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/refresh-token/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tenantInfo:\": \"ENTER_TENANT_INFO\",\n    \"clientId\": \"ENTER_CLIENT_ID\",\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Certificate with Bag Attributes\nDESCRIPTION: This snippet demonstrates a certificate file containing bag attributes, which need to be removed before use with MSAL Node.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/certificate-credentials.md#2025-04-18_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nBag Attributes\n    localKeyID: 28 B5 8E 16 11 88 E9 00 58 D5 76 30 12 B9 59 B8 E4 CE 7C AA\nsubject=/C=UK/ST=Suffolk/L=Ipswich/O=Example plc/CN=alice\nissuer=/C=UK/ST=Suffolk/L=Ipswich/O=Example plc/CN=Certificate Authority/emailAddress=ca@example.com\\n-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIJAMkyzQVK88NHMA0GCSqGSIb3DQEBBQUAMIGCMQswCQYD\nVQQGEwJTRTESMBAGA1UECBMJU3RvY2tob2xtMQ4wDAYDVQQHEwVLaXN0YTEQMA4G\n0fbkqbKulrchGbNgkankZtEVg4PGjo+Y8MdMjtfSZB29hwYvfMX09jzJ68ZqmpYQ\nnjvcVtLbEZN5OGCkaslb/f2OxLbsUNgIbws538WnaaufDvKmQe2kUdWmpl9Wn9Bf\nbZq7B+njvcVa7SsWF/WLq5AUbw==\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Adding Library Info to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds library information to the authentication parameters. It takes a Map of string key-value pairs and a LibraryInfo object as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addLibraryInfo(parameters: Map<string, string>, libraryInfo: LibraryInfo): void;\n```\n\n----------------------------------------\n\nTITLE: Running the MSAL Node TypeScript application\nDESCRIPTION: Command to start the MSAL Node TypeScript application using npm, which will run the server on port 3000.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-pkce/README.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding Grant Type to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a grant type to the authentication parameters. It takes a Map of string key-value pairs and a grant type string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addGrantType(parameters: Map<string, string>, grantType: string): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authority URI Formatting in TypeScript\nDESCRIPTION: Exports a function to format an authority URI, ensuring it follows the correct structure for use in authentication requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_103\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function formatAuthorityUri(authorityUri: string): string;\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for MSAL Node Application\nDESCRIPTION: Environment variable configuration in .env file for storing the client secret securely.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/refresh-token/README.md#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCLIENT_SECRET=<your client secret here>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting the Application\nDESCRIPTION: Commands to install all dependencies and start the Electron application after configuration is complete.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/samples/electron-webpack/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd extensions/samples/electron-webapp\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Known Client Applications in JSON\nDESCRIPTION: This JSON snippet shows how to configure known client applications in the web API's manifest file. It adds the client ID of the web app to the knownClientApplications array.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/on-behalf-of/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"knownClientApplications\": [\"ca8dca8d-f828-4f08-82f5-325e1a1c6428\"],\n```\n\n----------------------------------------\n\nTITLE: Running the MSAL Node Web API Sample Application\nDESCRIPTION: This command starts the development server for the MSAL Node Web API sample application. It should be run in the project directory after installing dependencies.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/on-behalf-of-distributed-cache/README.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Native Broker to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds native broker information to the authentication parameters. It takes a Map of string key-value pairs as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addNativeBroker(parameters: Map<string, string>): void;\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Node Packages\nDESCRIPTION: Commands to install the MSAL Node and MSAL Node Extensions packages required for authentication and cache persistence.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/samples/electron-webpack/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/msal-node\nnpm install @azure/msal-node-extensions\n```\n\n----------------------------------------\n\nTITLE: Converting PFX to PEM Format Using OpenSSL\nDESCRIPTION: This bash command demonstrates how to convert a PFX encoded certificate file to PEM format using OpenSSL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/certificate-credentials.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -in certificate.pfx -out certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Adding x-ms-request-id to Performance Telemetry in JavaScript\nDESCRIPTION: Adds the x-ms-request-id to performance telemetry logging. This allows tracking of specific requests.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd x-ms-request-id to perf telemetry logging #5244 (joarroyo@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: MSAL.js Library Changelog Entry\nDESCRIPTION: Changelog entry documenting patch updates for version 4.0.1, including Device Code Timeout clarification.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.0.1\n\nThu, 18 Feb 2021 00:34:32 GMT\n\n### Patches\n\n-   Clarify Device Code Timeout units (#3031) (hemoral@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authority Metadata Expiration Generation in TypeScript\nDESCRIPTION: Defines a function to generate an expiration timestamp for authority metadata.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_105\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction generateAuthorityMetadataExpiresAt(): number;\n```\n\n----------------------------------------\n\nTITLE: VS Code Jest Configuration\nDESCRIPTION: JSON configuration for VS Code Jest extension settings including virtual folders for different MSAL packages\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"jest.autoRun\": \"off\",\n    \"jest.jestCommandLine\": \"npm test --\",\n    \"jest.virtualFolders\": [\n        {\n            \"name\": \"msal-common\",\n            \"rootPath\": \"lib/msal-common\"\n        },\n        {\n            \"name\": \"msal-browser\",\n            \"rootPath\": \"lib/msal-browser\"\n        },\n        {\n            \"name\": \"msal-node\",\n            \"rootPath\": \"lib/msal-node\"\n        },\n        {\n            \"name\": \"msal-react\",\n            \"rootPath\": \"lib/msal-react\"\n        },\n        {\n            \"name\": \"msal-node-extensions\",\n            \"rootPath\": \"extensions/msal-node-extensions\"\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Password to Authentication Parameters in MSAL.js (TypeScript)\nDESCRIPTION: Adds a password to the request parameters for resource owner password credential (ROPC) flow authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addPassword(parameters: Map<string, string>, password: string): void;\n```\n\n----------------------------------------\n\nTITLE: Interface declaration for IAppTokenProvider in TypeScript\nDESCRIPTION: Defines an interface for a function that provides application tokens. It accepts app token provider parameters and returns a promise that resolves to an app token provider result.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IAppTokenProvider {\n    // (undocumented)\n    (appTokenProviderParameters: AppTokenProviderParameters): Promise<AppTokenProviderResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client Secret in .env File\nDESCRIPTION: Environment variable configuration for storing the client secret, used in confidential client applications.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/silent-flow/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCLIENT_SECRET=<your client secret here>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Library Directory\nDESCRIPTION: Command to change into the directory of the MSAL library where changes have been made\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n    $ cd lib/msal-browser\n```\n\n----------------------------------------\n\nTITLE: Building account objects from cached ID Token\nDESCRIPTION: Minor change in version 2.3.0 to build account objects from the cached ID Token.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of building account object from cached token\nconst account = buildAccountFromCachedIdToken(cachedIdToken);\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Node Sample Application\nDESCRIPTION: Commands to run the compiled JavaScript files for both the standalone app and the express server version of the sample.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/custom-INetworkModule-and-network-tracing/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode dist/app.js\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode dist/express.js\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Client in TypeScript\nDESCRIPTION: Example of how to change the import path for the MSAL Client Configuration in AuthProvider.ts.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Change this to load the desired MSAL Client Configuration\nimport * as APP_CONFIG from \"./config/customConfig.json\"; // Change this\n\nimport * as APP_CONFIG from \"./config/YOUR_CUSTOM_CONFIG_FILE.json\"; // To this\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript for MSAL Node Sample\nDESCRIPTION: Command to compile the TypeScript code into JavaScript using the TypeScript compiler (tsc).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/custom-INetworkModule-and-network-tracing/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsc\n```\n\n----------------------------------------\n\nTITLE: Adding Client Capabilities to Claims in TypeScript\nDESCRIPTION: This function adds client capabilities to the claims. It takes an optional claims string and an optional array of client capabilities as input, and returns the updated claims string.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addClientCapabilitiesToClaims(claims?: string, clientCapabilities?: Array<string>): string;\n```\n\n----------------------------------------\n\nTITLE: Combining Certificate Files in PowerShell\nDESCRIPTION: Combines public certificate and private key files into a single PEM file using PowerShell command\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/key-vault-managed-identity.md#2025-04-18_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Content example.crt, exampleDecrypted.key | Set-Content example.pem\n```\n\n----------------------------------------\n\nTITLE: Handling unhandled rejections in LoopbackClient\nDESCRIPTION: Fix applied in version 2.2.0 to handle unhandled rejections and issues with getting redirectUri in LoopbackClient.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of error handling in LoopbackClient\ntry {\n  await loopbackClient.getRedirectUri();\n} catch (error) {\n  // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Network and Performance Interface Definitions\nDESCRIPTION: Interfaces for network communication and performance monitoring\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_126\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface INetworkModule {\n    sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions, timeout?: number): Promise<NetworkResponse<T>>;\n    sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>>;\n}\n\nexport type InProgressPerformanceEvent = {\n    end: (event?: Partial<PerformanceEvent>, error?: unknown) => PerformanceEvent | null;\n    discard: () => void;\n    add: (fields: {\n        [key: string]: {} | undefined;\n    }) => void;\n    increment: (fields: {\n        [key: string]: number | undefined;\n    }) => void;\n    event: PerformanceEvent;\n    measurement: IPerformanceMeasurement;\n};\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Node Brokered Auth sample\nDESCRIPTION: Command to start the MSAL Node Brokered Auth sample application. Execute this command in the same directory as the application files.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-cli-brokered-app/README.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding CCS OID to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a CCS (Client Credential Service) OID to the authentication parameters. It takes a Map of string key-value pairs and a ClientInfo object as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addCcsOid(parameters: Map<string, string>, clientInfo: ClientInfo): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Performance Event Status Enum in TypeScript\nDESCRIPTION: Defines a constant object for tracking performance event statuses, with three states: NotStarted (0), InProgress (1), and Completed (2).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_152\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PerformanceEventStatus: {\n    readonly NotStarted: 0;\n    readonly InProgress: 1;\n    readonly Completed: 2;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SerializedAccessTokenEntity Type in TypeScript\nDESCRIPTION: Defines the SerializedAccessTokenEntity type, representing the structure of a serialized access token entity. It includes properties such as home_account_id, environment, client_id, and various token-related fields.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SerializedAccessTokenEntity = {\n    home_account_id: string;\n    environment: string;\n    credential_type: string;\n    client_id: string;\n    secret: string;\n    realm: string;\n    target: string;\n    cached_at: string;\n    expires_on: string;\n    extended_expires_on?: string;\n    refresh_on?: string;\n    key_id?: string;\n    token_type?: string;\n    requestedClaims?: string;\n    requestedClaimsHash?: string;\n    userAssertionHash?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Committing API Report Changes\nDESCRIPTION: Git commands to commit the updated API Extractor report file to the repository\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n    $ git add apiReview/<packageName>.api.md\n    $ git commit -m \"Update API Extractor report\"\n```\n\n----------------------------------------\n\nTITLE: Adding Support for OIDC max_age Parameter in JavaScript\nDESCRIPTION: Implements support for the OpenID Connect max_age parameter, allowing control over the maximum authentication age.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdded Support for the OIDC max_age parameter #5125 (rginsburg@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Node v2.4.0\nDESCRIPTION: This version includes minor changes like refactoring token cache entities and bumping the @azure/msal-common dependency version.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @azure/msal-node@2.4.0\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Angular v2 Dependencies\nDESCRIPTION: NPM command to install the required MSAL Browser and Angular packages. This replaces the previous msal core package installation.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/v1-v2-upgrade-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/msal-browser @azure/msal-angular@latest\n```\n\n----------------------------------------\n\nTITLE: Adding 'no_session' to Prompt Enum in JavaScript\nDESCRIPTION: Adds the 'no_session' option to the prompt enum, providing an additional prompt type for authentication flows.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdded 'no_session' to prompt enum #5131 (rginsburg@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Declaration for AAD Server Parameter Keys in TypeScript\nDESCRIPTION: Declares a namespace containing all server parameter keys used in AAD authentication requests including client IDs, tokens, and other authentication parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace AADServerParamKeys {\n    export {\n        CLIENT_ID,\n        REDIRECT_URI,\n        RESPONSE_TYPE,\n        RESPONSE_MODE,\n        GRANT_TYPE,\n        CLAIMS,\n        SCOPE,\n        ERROR,\n        ERROR_DESCRIPTION,\n        ACCESS_TOKEN,\n        ID_TOKEN,\n        REFRESH_TOKEN,\n        EXPIRES_IN,\n        REFRESH_TOKEN_EXPIRES_IN,\n        STATE,\n        NONCE,\n        PROMPT,\n        SESSION_STATE,\n        CLIENT_INFO,\n        CODE,\n        CODE_CHALLENGE,\n        CODE_CHALLENGE_METHOD,\n        CODE_VERIFIER,\n        CLIENT_REQUEST_ID,\n        X_CLIENT_SKU,\n        X_CLIENT_VER,\n        X_CLIENT_OS,\n        X_CLIENT_CPU,\n        X_CLIENT_CURR_TELEM,\n        X_CLIENT_LAST_TELEM,\n        X_MS_LIB_CAPABILITY,\n        X_APP_NAME,\n        X_APP_VER,\n        POST_LOGOUT_URI,\n        ID_TOKEN_HINT,\n        DEVICE_CODE,\n        CLIENT_SECRET,\n        CLIENT_ASSERTION,\n        CLIENT_ASSERTION_TYPE,\n        TOKEN_TYPE,\n        REQ_CNF,\n        OBO_ASSERTION,\n        REQUESTED_TOKEN_USE,\n        ON_BEHALF_OF,\n        FOCI,\n        CCS_HEADER,\n        RETURN_SPA_CODE,\n        NATIVE_BROKER,\n        LOGOUT_HINT,\n        SID,\n        LOGIN_HINT,\n        DOMAIN_HINT,\n        X_CLIENT_EXTRA_SKU,\n        BROKER_CLIENT_ID,\n        BROKER_REDIRECT_URI,\n        INSTANCE_AWARE,\n        EAR_JWK,\n        EAR_JWE_CRYPTO\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example X5C String from PEM File\nDESCRIPTION: Demonstrates the format of an x5c string derived from a .pem file, containing multiple certificates.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/sni.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN CERTIFICATE-----\n<cert1>\n-----END CERTIFICATE-----\n\n-----BEGIN CERTIFICATE-----\n<cert2>\n-----END CERTIFICATE-----\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing updated Angular and rxjs dependencies\nDESCRIPTION: Command to install newer versions of Angular core, Angular common, and rxjs packages required by MSAL Angular v1.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/v0-v1-upgrade-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @angular/core @angular/common rxjs\n```\n\n----------------------------------------\n\nTITLE: MSAL Library Version\nDESCRIPTION: Constant defining the current version of the MSAL library. This is used for telemetry and debugging purposes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_196\n\nLANGUAGE: typescript\nCODE:\n```\nexport const version = \"15.5.1\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MSAL Node Sample\nDESCRIPTION: Command to install the necessary npm packages for the MSAL Node sample application. This should be run in the directory containing package.json.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-with-certs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Parser Class Definition in MSAL.js (TypeScript)\nDESCRIPTION: Defines the AuthenticationHeaderParser class for parsing authentication headers. It extracts information like SHR (Signed HTTP Request) nonces from HTTP headers.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AuthenticationHeaderParser {\n    constructor(headers: Record<string, string>);\n    getShrNonce(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheErrorCodes Namespace in TypeScript\nDESCRIPTION: Declares a namespace for cache-related error codes, including quota exceeded and unknown error codes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_77\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare namespace CacheErrorCodes {\n    export {\n        cacheQuotaExceededErrorCode,\n        cacheUnknownErrorCode\n    }\n}\nexport { CacheErrorCodes }\n```\n\n----------------------------------------\n\nTITLE: Building MSAL Angular and Browser Packages\nDESCRIPTION: Commands to build both @azure/msal-angular and @azure/msal-browser packages together. Requires npm dependencies to be installed from the root of the repository first.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n// Install dev dependencies from root of repo\nnpm install\n// Change to the msal-angular package directory\ncd lib/msal-angular/\n// To run build for angular and browser packages\nnpm run build:all\n```\n\n----------------------------------------\n\nTITLE: Documenting MSAL Angular Version 0.1.0 Release Notes\nDESCRIPTION: Indicates that this version is a preview release of MSAL Angular.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0\n\nPreview Release\n```\n\n----------------------------------------\n\nTITLE: Building MSAL.js Library\nDESCRIPTION: Commands for installing dependencies and building the MSAL.js library\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n// Change to the root of the msal repo\ncd microsoft-authentication-library-for-js/\n// Install npm dependencies and bootstrap packages\nnpm install\n// Navigate to package you would like to build\ncd lib/<package-name>\n// Build library\nnpm run build:all\n// To run build only for a single package (not its dependencies)\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Node via NPM\nDESCRIPTION: Command to install the @azure/msal-node package using NPM package manager.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install @azure/msal-node\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MSAL Node Web App Sample\nDESCRIPTION: This command installs the necessary dependencies for the MSAL Node web app sample. It should be run in the directory containing the package.json file.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-distributed-cache/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the MSAL Node sample application\nDESCRIPTION: This command starts the MSAL Node sample application. It should be run in the same directory as the application files after completing the setup and configuration steps.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-cli-app/README.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring User Assigned Managed Identity in .env File\nDESCRIPTION: Environment variable configuration to enable User Assigned Managed Identity instead of the default System Assigned type.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/Managed-Identity/Imds/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMANAGED_IDENTITY_TYPE_USER_ASSIGNED=true\n```\n\n----------------------------------------\n\nTITLE: Sample Authorization Response with Instance Parameters\nDESCRIPTION: Example of the response received from the authorize endpoint when using instance aware flow, including cloud instance names and graph host parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/instance-aware.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:30662/\n#code=0.AAAA-KLuGXrhD0eVTd...\n&cloud_instance_name=windows-ppe.net\n&cloud_instance_host_name=login.windows-ppe.net\n&cloud_graph_host_name=graph.ppe.windows.net\n&msgraph_host=graph.microsoft-ppe.com\n&client_info=eyJ1aWQiOiJiZT...\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MSAL Node Azure Key Vault Sample\nDESCRIPTION: This command installs the necessary dependencies for the MSAL Node Azure Key Vault sample application. It should be run in the directory containing the package.json file.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-key-vault/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL React dependencies using npm\nDESCRIPTION: This snippet shows how to install the necessary dependencies for using MSAL React in a project, including React, React DOM, and the MSAL packages.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react react-dom\nnpm install @azure/msal-react @azure/msal-browser\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of useMsal Hook in React\nDESCRIPTION: This snippet demonstrates incorrect usage of the useMsal hook outside the context of MsalProvider, which will throw a 'stubbed_public_client_application_called' error.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/errors.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMsal, MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst pca = new PublicClientApplication(config);\n\nfunction App() {\n    const { accounts } = useMsal();\n\n    return (\n        <MsalProvider instance={pca}>\n            <YourAppComponent>\n        </ MsalProvider>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Electron Sample Application\nDESCRIPTION: Command to navigate to the Electron sample application directory from the repository's root.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/samples/electron-webpack/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd extensions/samples/electron-webapp\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Error Codes Namespace in TypeScript\nDESCRIPTION: Creates a namespace for authentication error codes that exports specific error constants for use throughout the library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare namespace AuthErrorCodes {\n    export {\n        unexpectedError,\n        postRequestFailed\n    }\n}\nexport { AuthErrorCodes }\n```\n\n----------------------------------------\n\nTITLE: Function declaration for getTenantIdFromIdTokenClaims in TypeScript\nDESCRIPTION: Extracts the tenant ID from ID token claims. Returns the tenant ID as a string if found, or null if not available.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getTenantIdFromIdTokenClaims(idTokenClaims?: TokenClaims): string | null;\n```\n\n----------------------------------------\n\nTITLE: Building All MSAL Packages\nDESCRIPTION: Commands for building both MSAL browser and common packages together.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n// Change to the msal-browser package directory\ncd lib/msal-browser/\n// To run build for both browser and common packages\nnpm run build:all\n```\n\n----------------------------------------\n\nTITLE: Running the MSAL Node Web App Sample\nDESCRIPTION: This command starts the development server for the MSAL Node web app sample. It should be run in the same folder as the package.json file, after installing dependencies and configuring the app.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-distributed-cache/README.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining ServerResponseType Constant in TypeScript\nDESCRIPTION: This constant defines the types of server responses, including 'query' and 'fragment'. It is marked as deprecated.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_170\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ServerResponseType: {\n    readonly QUERY: \"query\";\n    readonly FRAGMENT: \"fragment\";\n};\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login Command\nDESCRIPTION: Command to authenticate with Azure CLI using specific tenant ID\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/docs/key-vault-managed-identity.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz login --tenant YOUR_TENANT_ID\n```\n\n----------------------------------------\n\nTITLE: Running the MSAL React sample development server\nDESCRIPTION: This code snippet demonstrates how to start the development server for the MSAL React sample application using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/react-router-sample/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding Client Info to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds client info to the authentication parameters. It takes a Map of string key-value pairs as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addClientInfo(parameters: Map<string, string>): void;\n```\n\n----------------------------------------\n\nTITLE: Running the MSAL Node Azure Key Vault Sample Application\nDESCRIPTION: This command starts the MSAL Node Azure Key Vault sample application. It should be run in the same directory as the application files.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-key-vault/README.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Building the MSAL React package locally\nDESCRIPTION: These commands demonstrate how to build the @azure/msal-react library locally, including installing dependencies and running the build script.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// Install dev dependencies from root of repo\nnpm install\n// Change to the msal-react package directory\ncd lib/msal-react/\n// To run build only for react package\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building MSAL React and MSAL Browser packages\nDESCRIPTION: This snippet shows how to build both the @azure/msal-react and @azure/msal-browser libraries locally, including installing dependencies and running the build script.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n// Install dev dependencies from root of repo\nnpm install\n// Change to the msal-react package directory\ncd lib/msal-react/\n// To run build for react and browser packages\nnpm run build:all\n```\n\n----------------------------------------\n\nTITLE: Running the Electron Application\nDESCRIPTION: Command to start the Electron sample application after installing dependencies.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Protocol Utility Namespace\nDESCRIPTION: Creates a namespace for utility functions related to the authorization protocol, including generating authorization URLs and validating responses.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare namespace AuthorizeProtocol {\n    export {\n        getStandardAuthorizeRequestParameters,\n        getAuthorizeUrl,\n        getAuthorizationCodePayload,\n        validateAuthorizationResponse\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Function declaration for getDeserializedResponse in TypeScript\nDESCRIPTION: Deserializes a response string into an AuthorizeResponse object. Returns null if deserialization fails.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDeserializedResponse(responseString: string): AuthorizeResponse | null;\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Dependencies\nDESCRIPTION: Importing the MSAL Node library to enable authentication functionality in a Node.js application\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/device-code/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst msal = require(\"@azure/msal-node\");\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies for MSAL React sample\nDESCRIPTION: This code snippet shows the commands to install dependencies, change to the sample directory, and build packages locally for the MSAL React sample.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/react-router-sample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dev dependencies for msal-react and msal-browser from root of repo\nnpm install\n\n# Change directory to sample directory\ncd samples/msal-react-samples/react-router-sample\n\n# Build packages locally\nnpm run build:package\n```\n\n----------------------------------------\n\nTITLE: Cloning MSAL Repository using HTTP\nDESCRIPTION: Command to clone the Microsoft Authentication Library for JavaScript repository using HTTP.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/AzureAD/microsoft-authentication-library-for-js.git\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Node Certificate Credentials Sample\nDESCRIPTION: Command to start the MSAL Node sample application using certificate credentials. This will launch the server on port 3000.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-with-certs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running MSAL React Sample Development Server\nDESCRIPTION: This snippet demonstrates how to run the development server for the MSAL React sample. It includes the command to start the server and instructions on how to access the application in the browser.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/typescript-sample/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI in JSON\nDESCRIPTION: JSON configuration for setting up the redirect URI to match the custom file protocol.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"authOptions\": ...,\n    \"request\":\n    {\n        \"authCodeUrlParameters\": {\n            \"scopes\": [\"user.read\"],\n            \"redirectUri\": \"msal4b0db8c2-9f26-4417-8bde-3f0e3656f8e0://auth\"\n        },\n        \"authCodeRequest\": {\n            \"redirectUri\": \"msal4b0db8c2-9f26-4417-8bde-3f0e3656f8e0://auth\",\n            \"scopes\": [\"User.Read\"]\n        }\n    },\n    \"resourceApi\": ...,\n    \"fileProtocol\":\n    {\n        \"name\": \"msal4b0db8c2-9f26-4417-8bde-3f0e3656f8e0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SRI Hash Table in Markdown\nDESCRIPTION: A markdown table listing SRI hashes for different versions of MSAL Browser library files. Each entry includes the version number, build type (full or minified), and corresponding SHA-384 hash.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/cdn-usage.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Version      | Build               | SRI Hash                                                                  |\n| ------------ | ------------------- | ------------------------------------------------------------------------- |\n| 2.35.0       | msal-browser.js     | `sha384-+8A1rifuHuJxJgQn6UCxGgmo6Q2SvIeEAqtPOsXCpi0DpqZLtuDhxxnqjJZw/1ve` |\n| 2.35.0       | msal-browser.min.js | `sha384-PARf28kmic36Ve+O3DnUerRXFtOQ7ZDqRDGpLcbljly5/N39T2OV3kt3QsWOKeAX` |\n```\n\n----------------------------------------\n\nTITLE: Running MSAL React B2C Sample Development Server\nDESCRIPTION: This snippet demonstrates how to run the development server for the MSAL React B2C sample. It includes the command to start the server and instructions on how to access the application in the browser.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/b2c-sample/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running MSAL React tests\nDESCRIPTION: These commands demonstrate how to run tests for the @azure/msal-react library using Jest, including running tests with code coverage.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n// To run tests\nnpm test\n// To run tests with code coverage\nnpm run test:coverage\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MSAL Node Sample\nDESCRIPTION: Command to install the necessary dependencies for the MSAL Node sample project using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/custom-INetworkModule-and-network-tracing/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Application Telemetry Type Definition in MSAL.js (TypeScript)\nDESCRIPTION: Defines the ApplicationTelemetry type that contains application name and version information. This data is used for telemetry and diagnostics in MSAL.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ApplicationTelemetry = {\n    appName: string;\n    appVersion: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom File Protocol Examples in TypeScript\nDESCRIPTION: Examples of valid custom file protocol and redirect URI pairs in TypeScript.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/// Ex 1:\nconst CUSTOM_FILE_PROTOCOL = \"msal\";\nconst redirectUri = \"msal://auth\";\n\n/// Ex 2:\nconst CUSTOM_FILE_PROTOCOL = \"sampleapp\";\nconst redirectUri = \"sampleapp://redirect\";\n\n/// Ex 3:\nconst CUSTOM_FILE_PROTOCOL = \"com.sampleapp\";\nconst redirectUri = \"com.sampleapp://auth\";\n```\n\n----------------------------------------\n\nTITLE: Defining Application Stages in JavaScript\nDESCRIPTION: This code defines the different stages of the application flow using an object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/b2c-user-flows/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst APP_STAGES = {\n    SIGN_IN: \"sign_in\",\n    PASSWORD_RESET: \"password_reset\",\n    EDIT_PROFILE: \"edit_profile\",\n    ACQUIRE_TOKEN: \"acquire_token\",\n};\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies for MSAL React Next.js sample\nDESCRIPTION: Commands to install dependencies, change to the sample directory, and build packages locally for the MSAL React Next.js sample.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/nextjs-sample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dev dependencies for msal-react and msal-browser from root of repo\nnpm install\n\n# Change directory to sample directory\ncd samples/msal-react-samples/nextjs-sample\n\n# Build packages locally\nnpm run build:package\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Node Package\nDESCRIPTION: Command to install the MSAL Node package using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronSystemBrowserTestApp/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/msal-node\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for MSAL Node TypeScript project\nDESCRIPTION: Command to install the necessary dependencies for the MSAL Node TypeScript project using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-pkce/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Node Package\nDESCRIPTION: Command to install the MSAL Node package using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @azure/msal-node\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom File Protocol in JSON\nDESCRIPTION: JSON configuration for setting up a custom file protocol for the Electron application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"authOptions\": ...,\n    \"request\": ...,\n    \"resourceApi\": ...,\n    \"fileProtocol\":\n    {\n        \"name\": \"msal4b0db8c2-9f26-4417-8bde-3f0e3656f8e0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Key Vault URI and Secret Name in TypeScript\nDESCRIPTION: TypeScript code snippet for setting the Key Vault URI and Secret Name constants.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/Managed-Identity/Imds/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst KEY_VAULT_URI: string = \"KEY_VAULT_URI\";\nconst SECRET_NAME: string = \"SECRET_NAME\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MSAL React Sample\nDESCRIPTION: This snippet shows the commands to install dependencies and build the MSAL React sample project. It includes steps for installing dev dependencies, changing to the sample directory, and building packages locally.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/typescript-sample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dev dependencies for msal-react and msal-browser from root of repo\nnpm install\n\n# Change directory to sample directory\ncd samples/msal-react-samples/typescript-sample\n\n# Build packages locally\nnpm run build:package\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Node Sample Application\nDESCRIPTION: Command to run the compiled JavaScript application, which demonstrates the Client Credentials Grant with a certificate from Key Vault.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials-with-cert-from-key-vault/README.md#2025-04-18_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnode dist/client-credentials-with-cert-from-key-vault/app.js\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Managed Identity Azure VM Sample\nDESCRIPTION: Command to install the necessary dependencies for the project using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/Managed-Identity/Imds/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Declaring Authority Mismatch Error Constant\nDESCRIPTION: Defines a constant for authority mismatch error code used when validation between requested and returned authority fails.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"authorityMismatch\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nconst authorityMismatch = \"authority_mismatch\";\n```\n\n----------------------------------------\n\nTITLE: Constant declaration for ID_TOKEN in TypeScript\nDESCRIPTION: Defines a constant string key 'id_token' used to reference ID tokens in authentication flows and responses.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\nconst ID_TOKEN = \"id_token\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MSAL Node Web API Sample\nDESCRIPTION: This command installs the necessary dependencies for the MSAL Node Web API sample project. It should be run in the directory containing the package.json file.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/on-behalf-of-distributed-cache/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in MSAL React 3.0.1\nDESCRIPTION: Introduces breaking changes in version 3.0.1, including updates to peer dependencies and API changes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 3.0.1\n\nWed, 15 Jan 2025 05:05:17 GMT\n\n### Breaking Changes\n\n- Update msal-browser peer dependency to include v4 (thomas.norling@microsoft.com)\n- Rename `native` to `platformBroker` in public API and docs (sameera.gajjarapu@microsoft.com)\n- Bump @azure/msal-browser to v4.0.1\n\n- Please see the msal-browser [migration guide](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/v3-migration.md) for more details on what's changed in v4.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests for MSAL.js Playwright Example\nDESCRIPTION: This snippet shows the command-line instructions for installing dependencies and running tests using npm. It installs the necessary packages and then executes the tests using Jest and Puppeteer.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/TestingSample/Readme.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Install dependencies\nnpm install\n// Run tests using jest and puppeteer\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Building MSAL Node Package Locally\nDESCRIPTION: Command to build the MSAL Node package locally from the lib/msal-node directory.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronSystemBrowserTestApp/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:package\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MSAL Node Sample\nDESCRIPTION: Command to install the necessary dependencies for the MSAL Node sample application using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/refresh-token/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js development server for MSAL sample\nDESCRIPTION: Command to start the development server for the MSAL React Next.js sample application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/nextjs-sample/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Family ID Constant in TypeScript\nDESCRIPTION: Exports a constant representing the family ID used in token caching and token family identification within the authentication library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_178\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const THE_FAMILY_ID = \"1\";\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Angular Tests\nDESCRIPTION: Commands to run unit tests and code coverage for @azure/msal-angular using Jest testing framework.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n// To run tests\nnpm run test\n// To run tests with code coverage\nnpm run test:coverage\n```\n\n----------------------------------------\n\nTITLE: Starting MSAL Node.js Sample Application\nDESCRIPTION: This command starts the MSAL Node.js sample application. It runs the 'start' script defined in the package.json file, which may launch either a web application or a command-line app.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Node Sample with npm Script\nDESCRIPTION: Command to compile TypeScript and start the sample application using a preconfigured npm script in package.json.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials-with-cert-from-key-vault/README.md#2025-04-18_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies for MSAL React B2C Sample\nDESCRIPTION: This snippet shows the commands to install dependencies and build packages for the MSAL React B2C sample application. It includes steps to install dev dependencies, change to the sample directory, and build packages locally.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/b2c-sample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// Install dev dependencies for msal-react and msal-browser from root of repo\nnpm install\n// Change directory to sample directory\ncd samples/msal-react-samples/b2c-sample\n// Build packages locally\nnpm run build:package\n```\n\n----------------------------------------\n\nTITLE: Performance Monitoring Interface Methods\nDESCRIPTION: Declares methods for measuring performance, managing events, and handling queue measurements in the authentication library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_149\n\nLANGUAGE: typescript\nCODE:\n```\nemitEvents(events: PerformanceEvent[], correlationId: string): void;\n\nendMeasurement(event: PerformanceEvent, error?: unknown): PerformanceEvent | null;\n\nprotected eventsByCorrelationId: Map<string, PerformanceEvent>;\n\nprotected eventStack: Map<string, PerformanceEventStackedContext[]>;\n\nabstract generateId(): string;\n\ngetPreQueueTime(eventName: string, correlationId: string): number | void;\n\nincrementFields(fields: {\n    [key: string]: number | undefined;\n}, correlationId: string): void;\n\nprotected intFields: Set<string>;\n\nprotected libraryName: string;\n\nprotected libraryVersion: string;\n\nprotected logger: Logger;\n\nprotected preQueueTimeByCorrelationId: Map<string, PreQueueEvent>;\n\nprotected queueMeasurements: Map<string, Array<QueueMeasurement>>;\n\nremovePerformanceCallback(callbackId: string): boolean;\n\nabstract setPreQueueTime(eventName: PerformanceEvents, correlationId?: string): void;\n\nstartMeasurement(measureName: string, correlationId?: string): InProgressPerformanceEvent;\n\nstartPerformanceMeasurement(measureName: string, correlationId: string): IPerformanceMeasurement;\n```\n\n----------------------------------------\n\nTITLE: Constant declaration for GRANT_TYPE in TypeScript\nDESCRIPTION: Defines a constant string key 'grant_type' used in OAuth authentication requests to specify the type of grant being requested.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nconst GRANT_TYPE = \"grant_type\";\n```\n\n----------------------------------------\n\nTITLE: MSAL.js Major Version Release Notes\nDESCRIPTION: Release notes for version 4.0.0 documenting major changes and patches, including API Extractor addition and bug fixes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.0.0\n\nTue, 09 Feb 2021 01:48:22 GMT\n\n### Major changes\n\n-   Add API Extractor for msal-node (sameera.gajjarapu@microsoft.com)\n\n### Patches\n\n-   Fix version.json import errors (#2993) (thomas.norling@microsoft.com)\n-   Setting postLogoutRedirectUri as null will disable post logout redirect (janutter@microsoft.com)\n-   Ignore OIDC scopes during cache lookup or replacement (#2969) (prkanher@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Installing Node-Loader for Webpack\nDESCRIPTION: Command to install the node-loader package which is required for webpack to properly bundle the native *.node binary files that ship with msal-node-extensions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/faq.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install node-loader --save-dev\n```\n\n----------------------------------------\n\nTITLE: Running Compiled JavaScript for Azure VM Sample\nDESCRIPTION: Command to run the compiled JavaScript code using Node.js.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/Managed-Identity/Imds/README.md#2025-04-18_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnode dist/index.js\n```\n\n----------------------------------------\n\nTITLE: Defining Persistent Cache Keys Enum in TypeScript\nDESCRIPTION: Defines constant string keys used for persistent cache storage in the MSAL library. Currently contains only 'active-account-filters' key.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_153\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PersistentCacheKeys: {\n    readonly ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\";\n};\n```\n\n----------------------------------------\n\nTITLE: Building MSAL Library\nDESCRIPTION: Command to build the MSAL library before running API Extractor\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n    $ npm run build\n```\n\n----------------------------------------\n\nTITLE: Defining ThrottlingEntity Type in TypeScript\nDESCRIPTION: Defines a TypeScript type representing throttling information for requests, including throttle time duration and error details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_180\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ThrottlingEntity = {\n    throttleTime: number;\n    error?: string;\n    errorCodes?: Array<string>;\n    errorMessage?: string;\n    subError?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Running MSAL.js Sample with Specific Sample Name\nDESCRIPTION: This command runs the MSAL.js sample with a specified sample name. If no sample name is provided, it defaults to the vanilla sample in the 'default' folder.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/VanillaJSTestApp2.0/Readme.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm start -- -sample <sample-name> // defaults to vanilla sample in `default` folder\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnpm start -- -s <sample-name> // defaults to vanilla sample in 'default' folder\n```\n\n----------------------------------------\n\nTITLE: Running MSAL Tests\nDESCRIPTION: Commands for running Jest-based unit tests for the MSAL browser package, including coverage reporting.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n// To run tests\nnpm test\n// To run tests with code coverage\nnpm run test:coverage\n```\n\n----------------------------------------\n\nTITLE: Cloning the MSAL Repository using HTTP\nDESCRIPTION: Command to clone the MSAL repository using HTTP protocol.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronSystemBrowserTestApp/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n git clone https://github.com/AzureAD/microsoft-authentication-library-for-js.git\n```\n\n----------------------------------------\n\nTITLE: Defining Application Telemetry Options in Markdown\nDESCRIPTION: This snippet details the configuration options for application telemetry in MSAL.js, including app name and version.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Option       | Description                           | Format | Default Value   |\n| ------------ | ------------------------------------- | ------ | --------------- |\n| `appName`    | Unique string name of an application  | string | Empty string \"\" |\n| `appVersion` | Version of the application using MSAL | string | Empty string \"\" |\n```\n\n----------------------------------------\n\nTITLE: MSAL Node Type Definitions and Imports\nDESCRIPTION: Core type definitions and imports for MSAL Node package, including references to common MSAL types and Node.js built-in modules. Defines the base structure for authentication and token handling.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"node\" />\n\nimport { AccessTokenCache } from '@azure/msal-common/node';\nimport { AccessTokenEntity } from '@azure/msal-common/node';\nimport { AccountCache } from '@azure/msal-common/node';\nimport { AccountEntity } from '@azure/msal-common/node';\nimport { AccountInfo } from '@azure/msal-common/node';\n// Additional imports omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Azure VM Sample with npm\nDESCRIPTION: npm script command to compile TypeScript and run the sample application in one step.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/Managed-Identity/Imds/README.md#2025-04-18_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnpm run start:app\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Authentication Error Messages in TypeScript\nDESCRIPTION: Provides structured error messages with code and description for specific error scenarios. This constant is marked as deprecated but still part of the public API.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"AuthErrorMessage\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public @deprecated\nexport const AuthErrorMessage: {\n    unexpectedError: {\n        code: string;\n        desc: string;\n    };\n    postRequestFailed: {\n        code: string;\n        desc: string;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Minor Changes in MSAL React 2.1.0\nDESCRIPTION: Introduces minor changes including type resolution fixes and updates to @azure/msal-browser.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## 2.1.0\n\nThu, 19 Sep 2024 23:48:30 GMT\n\n### Minor changes\n\n- Fix type resolution when using moduleResolution node16 (thomas.norling@microsoft.com)\n- Bump @azure/msal-browser to v3.24.0\n- Bump eslint-config-msal to v0.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Electron Application\nDESCRIPTION: Command to install all dependencies for the Electron sample application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Uninstalling rxjs-compat\nDESCRIPTION: Command to remove the rxjs-compat package which is no longer required when using MSAL Angular v1 with rxjs 6.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/v0-v1-upgrade-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall rxjs-compat\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constant for Missing Key ID in TypeScript\nDESCRIPTION: Constant defining an error message used when a key ID is missing in authentication operations.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_138\n\nLANGUAGE: typescript\nCODE:\n```\nconst keyIdMissing = \"key_id_missing\";\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for MSAL Node ROPC sample\nDESCRIPTION: Command to install the necessary dependencies for the MSAL Node ROPC sample application using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/username-password-cca/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MSAL Node Sample\nDESCRIPTION: Command to install the necessary dependencies for the MSAL Node sample application using npm.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials-with-cert-from-key-vault/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to Electron Sample Application\nDESCRIPTION: Command to navigate to the Electron sample application directory.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronSystemBrowserTestApp/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/msal-node-samples/standalone-samples/ElectronSystemBrowserTestApp\n```\n\n----------------------------------------\n\nTITLE: Cloning MSAL.js Repository with Git\nDESCRIPTION: Commands for cloning the MSAL.js repository and setting up remote tracking\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:username/microsoft-authentication-library-for-js.git\n$ cd microsoft-authentication-library-for-js\n$ git remote add upstream git@github.com:AzureAD/microsoft-authentication-library-for-js.git\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for MSAL Node ROPC sample\nDESCRIPTION: This command installs the necessary dependencies for the MSAL Node ROPC sample application. It should be run in the directory where package.json is located.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/username-password/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting WAM Broker Sample with HTTPS\nDESCRIPTION: Commands to generate SSL certificates and start the WAM Broker sample over HTTPS. This is required for acquiring device-bound tokens from Web Account Manager on Windows machines.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/VanillaJSTestApp2.0/app/wamBroker/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run generate:certs\nnpm start -- --s 'wamBroker' --https\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Node Binary Files\nDESCRIPTION: Webpack configuration rule to handle *.node binary files using node-loader. This must be added to the rules array in the module object of webpack.config.js.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/docs/faq.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   test: /\\.node$/,\n   loader: 'node-loader',\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Authorization Code Missing Error Constant\nDESCRIPTION: Defines an error constant used when an authorization code is missing from the server response during the OAuth2 code flow.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"authorizationCodeMissingFromServerResponse\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\n```\n\n----------------------------------------\n\nTITLE: Running the MSAL Node ROPC sample application\nDESCRIPTION: This command starts the MSAL Node sample application that implements the Resource Owner Password Credentials grant. It should be run in the same folder as the application files.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/username-password/README.md#2025-04-18_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: MSAL Angular Package Reference\nDESCRIPTION: Package name reference for the Azure MSAL Angular integration library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/angular-modules-sample/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@azure/msal-angular\n```\n\n----------------------------------------\n\nTITLE: Updating API Extractor Report\nDESCRIPTION: Command to update the API Extractor report locally after reviewing and accepting API changes\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n    $ npm run apiExtractor -- --local\n```\n\n----------------------------------------\n\nTITLE: Documenting MSAL Angular Version 0.1.2 Release Notes\nDESCRIPTION: Highlights an AOT fix for a protectedResourceMap issue and mentions that broadcast messages now return an object.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.2\n\n- AOT fix for protectedResourceMap issue https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/407\n\n- Broadcast message returns object\n```\n\n----------------------------------------\n\nTITLE: Cloning the MSAL Repository using SSH\nDESCRIPTION: Command to clone the MSAL repository using SSH protocol.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronSystemBrowserTestApp/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n git clone git@github.com:AzureAD/microsoft-authentication-library-for-js.git\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for MSAL Node sample\nDESCRIPTION: This command installs the necessary dependencies for the MSAL Node sample application. It should be run in the directory containing the package.json file.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code-cli-app/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository via SSH\nDESCRIPTION: Command to clone the Microsoft Authentication Library for JS repository using SSH authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/samples/electron-webpack/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n git clone git@github.com:AzureAD/microsoft-authentication-library-for-js.git\n```\n\n----------------------------------------\n\nTITLE: Building and running the Next.js production server for MSAL sample\nDESCRIPTION: Commands to build the production version of the MSAL React Next.js sample and start the production server.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/nextjs-sample/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Version History Entry Format\nDESCRIPTION: Standard format used for documenting version releases, including version number, date, and categorized changes (Minor changes, Patches, etc.)\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.4.0\n\nTue, 07 Dec 2021 00:17:01 GMT\n\n### Minor changes\n\n- Add support for hybrid spa flow #3478 (janutter@microsoft.com)\n- Bump @azure/msal-common to v5.2.0\n```\n\n----------------------------------------\n\nTITLE: Adding Initial Support for DSTS Authorities in MSAL Common\nDESCRIPTION: Adds initial support for Domain-Specific Token Service (DSTS) authorities in the MSAL Common library.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd initial support for DSTS authorities in MSAL Common #5212 (hemoral@microsoft.com)\n```\n\n----------------------------------------\n\nTITLE: Declaring Authority URI Insecure Error Constant\nDESCRIPTION: Defines a constant for an error code used when the authority URI is detected as insecure (not using HTTPS).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"authorityUriInsecure\" is part of the package's API, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nconst authorityUriInsecure = \"authority_uri_insecure\";\n```\n\n----------------------------------------\n\nTITLE: Implementing UsernamePasswordClient Class in TypeScript\nDESCRIPTION: Defines the UsernamePasswordClient class which extends BaseClient. It provides a method for acquiring tokens using username and password authentication. This class is marked as deprecated.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-node/apiReview/msal-node.api.md#2025-04-18_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class UsernamePasswordClient extends BaseClient {\n    constructor(configuration: ClientConfiguration);\n    acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MSAL React to version 3.0.10\nDESCRIPTION: Updates @azure/msal-react to version 3.0.10, bumping dependencies and making patch changes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 3.0.10\n\nTue, 15 Apr 2025 23:34:14 GMT\n\n### Patches\n\n- Bump @azure/msal-browser to v4.11.0\n- Bump eslint-config-msal to v0.0.0\n- Bump msal-test-utils to v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Git Configuration Commands\nDESCRIPTION: Commands for configuring Git user name and email\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global user.name \"J. Random User\"\n$ git config --global user.email \"j.random.user@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for MSAL Node ROPC sample\nDESCRIPTION: Content of the .env file used to store sensitive configuration data, specifically the client secret for the MSAL Node application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/username-password-cca/README.md#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCLIENT_SECRET=<your client secret here>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Electron Sample Application\nDESCRIPTION: Command to navigate to the Electron sample application directory from the repository's root.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/ElectronTestApp/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd samples/msal-node-samples/standalone-samples/ElectronTestApp\n```\n\n----------------------------------------\n\nTITLE: Modifying MSAL Node Application Type in JavaScript\nDESCRIPTION: Code snippet showing how to change from PublicClientApplication to ConfidentialClientApplication when using a client secret.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/silent-flow/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Change this\nconst publicClientApplication = new msal.PublicClientApplication(clientConfig);\nconst msalTokenCache = publicClientApplication.getTokenCache();\nreturn getTokenSilent(config, publicClientApplication, null, msalTokenCache);\n\n// To this\nconst confidentialClientApplication = new msal.ConfidentialClientApplication(\n    clientConfig\n);\nconst msalTokenCache = confidentialClientApplication.getTokenCache();\nreturn getTokenSilent(\n    config,\n    confidentialClientApplication,\n    null,\n    msalTokenCache\n);\n```\n\n----------------------------------------\n\nTITLE: Building MSAL Browser Package\nDESCRIPTION: Commands for building the MSAL browser package locally. Shows both single package and all packages build commands.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// Change to the msal-browser package directory\ncd lib/msal-browser/\n// To run build only for browser package\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Constant declaration for hashNotDeserialized in TypeScript\nDESCRIPTION: Defines an error message constant used when hash deserialization fails during authentication processes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nconst hashNotDeserialized = \"hash_not_deserialized\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Roadmap Sections in Markdown\nDESCRIPTION: This code snippet demonstrates the structure of the roadmap document using Markdown headers and lists to organize information into different sections such as 'In Development', 'Up Next', and 'Under Consideration'.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/roadmap.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Roadmap\n\n## Terminology\n- *In Development*: These items are well-defined and actively in development.\n- *Up Next*: These items are next to be picked up for development when capacity allows. The problem space and solution are known but we may still be refining design details or prioritizing capacity for other items already In Development.\n- *Under Consideration*: These are general topic areas the team is considering for future investigation but we have no timelines or prioritization. If you have thoughts or suggestions on these areas, please add them to an existing Feature Request.  \n\n## Focus Areas\n\n### In Development\n\n### Up Next\n- Improve support for use in Teams Apps (Tabs) and Office Add-Ins\n  \n### Under Consideration\n- Identity provider agnostic support  \n- Supporting more JavaScript frameworks: [Ionic](https://github.com/AzureAD/microsoft-authentication-library-for-js/.issues/4290), [Flutter](https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/5409), [React Native](https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/4735)\n- Browsers' solutions to federated identity without 3p cookie access (FedCM, Storage Access API, First Party Sets, etc)\n```\n\n----------------------------------------\n\nTITLE: Running Angular MSAL Sample\nDESCRIPTION: Command to start the Angular development server for the MSAL sample application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/angular-modules-sample/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Documenting MSAL Angular Version 0.1.3 Release Notes\nDESCRIPTION: Describes a fix for MSAL Angular exports to support IE11, but notes a subsequent issue with AOT compiling. Recommends users to pin to version 0.1.2 while a fix is in progress.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.3\n\n- Fix msal-angular exports to properly support IE11: https://github.com/AzureAD/microsoft-authentication-library-for-js/pull/785\n  - **Note**: Unfortunately, the fix above caused breakage with `aot` compiling, so `0.1.3` has been deprecated in npm. We recommend pinning to `0.1.2` while we work on a fix. See https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/798\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This robots.txt configuration allows all web crawlers (User-agent: *) to access the entire website without any restrictions (Disallow: empty). It follows the standard robots.txt protocol as defined by robotstxt.org.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/react-router-sample/public/robots.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL and MSAL Angular packages\nDESCRIPTION: Command to install the MSAL core library and MSAL Angular wrapper as dependencies. MSAL is now a peer dependency that must be explicitly installed alongside the Angular wrapper.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/v0-v1-upgrade-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install msal@beta @azure/msal-angular@beta\n```\n\n----------------------------------------\n\nTITLE: Angular MSAL Configuration URL\nDESCRIPTION: Local development URL where the MSAL sample application can be accessed after starting the server.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-angular-samples/angular-modules-sample/README.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://localhost:4200\n```\n\n----------------------------------------\n\nTITLE: Configuring a PoP Token Request with Custom SHR Claims in JavaScript\nDESCRIPTION: Shows how to configure a token request object with POP authentication scheme and custom SHR claims. The example sets up required parameters including scopes, authentication scheme, resource request method and URI, and includes custom claims as a JSON string in the shrClaims property.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/shr-client-claims.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst popTokenRequest = {\n    scopes: [\"User.Read\"],\n    authenticationScheme: msal.AuthenticationScheme.POP,\n    resourceRequestMethod: \"POST\",\n    resourceRequestUri: \"YOUR_RESOURCE_ENDPOINT\",\n    shrClaims: \"{\\\"nonce\\\": \\\"AQAA123456\\\",\\\"local_nonce\\\": \\\"AQAA7890\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Daemon App in TypeScript\nDESCRIPTION: This snippet shows the configuration object for the MSAL Node daemon app. It includes settings for cloud instance, tenant ID, client ID, and client secret, which are essential for authenticating the application.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials-distributed-cache/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst appConfig: AppConfig = {\n    instance:\n        options.instance || process.env.INSTANCE || \"ENTER_CLOUD_INSTANCE_HERE\",\n    tenantId: options.tenant || process.env.TENANT_ID || \"ENTER_TENANT_ID_HERE\",\n    clientId: process.env.CLIENT_ID || \"ENTER_CLIENT_ID_HERE\",\n    clientSecret: process.env.CLIENT_SECRET || \"ENTER_CLIENT_SECRET_HERE\",\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Packages\nDESCRIPTION: This command installs the necessary Node.js packages specified in the package.json file. It requires Node.js and npm (Node Package Manager) to be installed on your system. The command should be run from the directory containing the package.json file. The expected output is the installation of dependencies specified in the package.json file.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/client-credentials/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n    npm install\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch in Git\nDESCRIPTION: Command to create and checkout a new feature branch for development\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/contributing.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Enabling Token Brokering with MSAL Node Extensions\nDESCRIPTION: This code shows how to enable native token brokering with @azure/msal-node-extensions. It imports the NativeBrokerPlugin, configures the MSAL settings with the broker plugin, and initializes a PublicClientApplication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/msal-node-extensions/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PublicClientApplication, Configuration } from \"@azure/msal-node\";\nimport { NativeBrokerPlugin } from \"@azure/msal-node-extensions\";\n\nconst msalConfig: Configuration = {\n    auth: {\n        clientId: \"your-client-id\"\n    },\n    broker: {\n        nativeBrokerPlugin: new NativeBrokerPlugin()\n    }\n};\n\nconst pca = new PublicClientApplication(msalConfig);\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository via HTTP\nDESCRIPTION: Command to clone the Microsoft Authentication Library for JS repository using HTTP.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/extensions/samples/electron-webpack/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n git clone https://github.com/AzureAD/microsoft-authentication-library-for-js.git\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Authentication in TypeScript\nDESCRIPTION: Configuration object for MSAL Node authentication, including client ID, authority, and client secret. These values need to be replaced with actual application registration details.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/custom-INetworkModule-and-network-tracing/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"<ENTER_CLIENT_ID>\",\n        authority: \"https://login.microsoftonline.com/<ENTER_TENANT_ID>\",\n        clientSecret: \"<ENTER_CLIENT_SECRET>\",\n    },\n    ...\n};\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Angular Application\nDESCRIPTION: This snippet bootstraps the main Angular application using the provided app configuration. It imports the main application component and initializes the application with error handling for any bootstrap failures.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-angular/docs/configuration.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nimport { bootstrapApplication } from \"@angular/platform-browser\";\nimport { appConfig } from \"./app/app.config\";\nimport { AppComponent } from \"./app/app.component\";\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Confidential Client\nDESCRIPTION: Setup of ConfidentialClientApplication instance with authentication and logging configuration.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-browser-samples/HybridSample/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dotenv = require(\"dotenv\");\nconst msal = require('@azure/msal-node');\ndotenv.config()\n\nconst cca = new msal.ConfidentialClientApplication({\n    auth: {\n        clientId: process.env.MSAL_CLIENT_ID,\n        authority: process.env.MSAL_AUTHORITY,\n        clientSecret: process.env.MSAL_CLIENT_SECRET\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback: (loglevel, message, containsPii) => {\n                console.log(message);\n            },\n            piiLoggingEnabled: false,\n            logLevel: msal.LogLevel.Verbose,\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL Node Auth Options in JavaScript\nDESCRIPTION: JavaScript object configuration for MSAL Node, including client ID, authority, and logging options.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/auth-code/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    auth: {\n        clientId: \"YOUR_CLIENT_ID\",\n        authority: \"YOUR_AUTHORITY\",\n        clientSecret: process.env.CLIENT_SECRET, // Only for Confidential Client Applications\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback(loglevel, message, containsPii) {\n                console.log(message);\n            },\n            piiLoggingEnabled: false,\n            logLevel: msal.LogLevel.Verbose,\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Full Web Crawler Access\nDESCRIPTION: This snippet configures the robot.txt file to allow all web crawlers (User-agent: *) full access to the website by not specifying any disallowed paths (Disallow: is empty).\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-react-samples/typescript-sample/public/robots.txt#2025-04-18_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running AGC E2E Tests for Microsoft Authentication Library (PowerShell)\nDESCRIPTION: This command runs only the AGC E2E tests while in the AGCE environment. It should be executed after setting up the required environment variables.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/samples/msal-node-samples/AGC-README.md#2025-04-18_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm run test:agc\n```\n\n----------------------------------------\n\nTITLE: Adding Client ID to Authentication Parameters in TypeScript\nDESCRIPTION: This function adds a client ID to the authentication parameters. It takes a Map of string key-value pairs and a client ID string as input.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/apiReview/msal-common.api.md#2025-04-18_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addClientId(parameters: Map<string, string>, clientId: string): void;\n```"
  }
]