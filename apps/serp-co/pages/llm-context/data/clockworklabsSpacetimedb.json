[
  {
    "owner": "clockworklabs",
    "repo": "spacetimedb",
    "content": "TITLE: Sample SpacetimeDB Module Skeleton\nDESCRIPTION: A complete skeleton for a SpacetimeDB module showcasing table definition, lifecycle reducers (init, client_connected, client_disconnected), and regular reducers for data manipulation and interaction.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{ReducerContext, Table};\n\n#[spacetimedb::table(name = person)]\npub struct Person {\n    name: String\n}\n\n#[spacetimedb::reducer(init)]\npub fn init(_ctx: &ReducerContext) {\n    // Called when the module is initially published\n}\n\n#[spacetimedb::reducer(client_connected)]\npub fn identity_connected(_ctx: &ReducerContext) {\n    // Called everytime a new client connects\n}\n\n#[spacetimedb::reducer(client_disconnected)]\npub fn identity_disconnected(_ctx: &ReducerContext) {\n    // Called everytime a client disconnects\n}\n\n#[spacetimedb::reducer]\npub fn add(ctx: &ReducerContext, name: String) {\n    ctx.db.person().insert(Person { name });\n}\n\n#[spacetimedb::reducer]\npub fn say_hello(ctx: &ReducerContext) {\n    for person in ctx.db.person().iter() {\n        log::info!(\"Hello, {}!\", person.name);\n    }\n    log::info!(\"Hello, World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Reducer Function in Rust for SpacetimeDB\nDESCRIPTION: This snippet demonstrates how to define a reducer function in a SpacetimeDB Rust module. It shows the use of the #[reducer] attribute, handling of ReducerContext, and returning a Result.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{reducer, ReducerContext};\nuse std::fmt;\n\n#[reducer]\nfn give_player_item(\n    ctx: &ReducerContext,\n    player_id: u64,\n    item_id: u64\n) -> Result<(), String> {\n    /* ... */\n    # Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Generating WebSocket Schema Client Bindings for SpacetimeDB\nDESCRIPTION: This snippet demonstrates the process of generating client bindings for the WebSocket message schema. It first extracts the schema to a JSON file, then uses the 'spacetime generate' command to create bindings for a specified SDK language and output directory.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/client-api-messages/DEVELOP.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --example get_ws_schema > ws_schema.json\nspacetime generate --lang <SDK lang> \\\n  --out-dir <sdk WebSocket schema bindings dir> \\\n  --module-def ws_schema.json\n```\n\n----------------------------------------\n\nTITLE: Defining and Manipulating Tables with SpacetimeDB\nDESCRIPTION: This example demonstrates how to define a table with a primary key, add an index, and interact with it using reducers. It shows various operations like inserting, updating, and deleting rows while explaining the distinction between local struct instances and database state.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{table, reducer, ReducerContext, Table, UniqueColumn};\n\n/// A `Person` is a row of the table `person`.\n#[table(name = person, public)]\npub struct Person {\n    #[primary_key]\n    #[auto_inc]\n    id: u64,\n    #[index(btree)]\n    name: String,\n}\n\n// `Person` is a normal Rust struct type.\n// Operations on a `Person` do not, by themselves, do anything.\n// The following function does not interact with the database at all.\nfn do_nothing() {\n    // Creating a `Person` DOES NOT modify the database.\n    let mut person = Person { id: 0, name: \"Joe Average\".to_string() };\n    // Updating a `Person` DOES NOT modify the database.\n    person.name = \"Joanna Average\".to_string();\n    // Dropping a `Person` DOES NOT modify the database.\n    drop(person);\n}\n\n// To interact with the database, you need a `ReducerContext`,\n// which is provided as the first parameter of any reducer.\n#[reducer]\nfn do_something(ctx: &ReducerContext) {\n    // `ctx.db.{table_name}()` gets a handle to a database table.\n    let person: &person__TableHandle = ctx.db.person();\n\n    // The following inserts a row into the table:\n    let mut example_person = person.insert(Person { id: 0, name: \"Joe Average\".to_string() });\n\n    // `person` is a COPY of the row stored in the database.\n    // If we update it:\n    example_person.name = \"Joanna Average\".to_string();\n    // Our copy is now updated, but the database's copy is UNCHANGED.\n    // To push our change through, we can call `UniqueColumn::update()`:\n    example_person = person.id().update(example_person);\n    // Now the database and our copy are in sync again.\n    \n    // We can also delete the row in the database using `UniqueColumn::delete()`.\n    person.id().delete(&example_person.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Running SpacetimeDB with Docker\nDESCRIPTION: This snippet shows how to run SpacetimeDB in a Docker container, exposing port 3000 for access.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always -p 3000:3000 clockworklabs/spacetime start\n```\n\n----------------------------------------\n\nTITLE: Defining Tables and Reducers in Rust\nDESCRIPTION: Example of how to define tables and reducer functions in a SpacetimeDB Rust module. This snippet shows the creation of a Player table and an add_person reducer that inserts records into that table.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{table, reducer, ReducerContext, Table};\n\n#[table(name = player)]\npub struct Player {\n    id: u32,\n    name: String\n}\n\n#[reducer]\nfn add_person(ctx: &ReducerContext, id: u32, name: String) {\n    log::debug!(\"Inserting {name} with id {id}\");\n    ctx.db.player().insert(Player { id, name });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tables with Unique and Primary Key Constraints\nDESCRIPTION: This example demonstrates how to define unique and primary key constraints on table columns. Multiple columns can be marked as unique, but only one column can be a primary key.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::table;\n\ntype SSN = String;\ntype Email = String;\n\n#[table(name = citizen)]\npub struct Citizen {\n    #[primary_key]\n    id: u64,\n    #[unique]\n    ssn: SSN,\n    #[unique]\n    email: Email,\n    name: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Building SpacetimeDB from Source on Windows\nDESCRIPTION: Commands to build SpacetimeDB from source on Windows after installing prerequisites.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\ngit clone https://github.com/clockworklabs/SpacetimeDB\n\ncd SpacetimeDB\ncargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli\n```\n\n----------------------------------------\n\nTITLE: Defining Public and Private Tables in SpacetimeDB\nDESCRIPTION: This example shows how to define both public tables (readable by all clients) and private tables (only accessible within the module). By default, tables are private unless explicitly marked as public.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::table;\n\n// The `enemies` table can be read by all connected clients.\n#[table(name = enemy, public)]\npub struct Enemy {\n    /* ... */\n}\n\n// The `loot_items` table is invisible to clients, but not to reducers.\n#[table(name = loot_item)]\npub struct LootItem {\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Using Auto-incrementing Columns in SpacetimeDB\nDESCRIPTION: This example shows how to use auto-incrementing columns in tables. When a row is inserted with the auto-increment field set to 0, the database automatically assigns a unique increasing value to that field.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::{table, reducer, ReducerContext, Table};\n\n#[table(name = example)]\nstruct Example {\n    #[auto_inc]\n    field: u32\n}\n\n#[reducer]\nfn insert_auto_inc_example(ctx: &ReducerContext) {\n    for i in 1..=10 {\n        // These will have distinct, unique values\n        // at rest in the database, since they\n        // are inserted with the sentinel value 0.\n        let actual = ctx.db.example().insert(Example { field: 0 });\n        assert!(actual.field != 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Column Indexes in SpacetimeDB\nDESCRIPTION: This example demonstrates how to define a multi-column B-Tree index on a table. Multi-column indexes can improve query performance when filtering or sorting on multiple columns.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::table;\n\n#[table(name = paper, index(name = url_and_country, btree(columns = [url, country])))]\nstruct Paper {\n    url: String,\n    country: String,\n    venue: String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Column Indexes in SpacetimeDB\nDESCRIPTION: This example shows how to define a single-column B-Tree index using the column attribute. Single-column indexes provide efficient lookups when filtering or sorting on a specific column.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse spacetimedb::table;\n\n#[table(name = paper)]\nstruct Paper {\n    url: String,\n    country: String,\n    #[index(btree)]\n    venue: String\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions and GROUP BY in SQL for SpacetimeDB\nDESCRIPTION: This snippet tests aggregate functions like COUNT, SUM, AVG, and MAX, along with GROUP BY clause. It demonstrates the database's ability to perform calculations on grouped data sets.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/standards/README.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT COUNT(*) FROM table1;\n\nSELECT SUM(value) FROM table2;\n\nSELECT col3, COUNT(*) FROM table1 GROUP BY col3;\n\nSELECT MAX(value), MIN(value), AVG(value) FROM table2;\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure with Column Attributes\nDESCRIPTION: Shows how to define a table structure with column attributes in SpacetimeDB. The example includes an identity column and demonstrates the usage of SpacetimeDB.Table and Column attributes.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Table]\npublic partial struct Person\n{\n    [SpacetimeDB.Column(ColumnAttrs.Identity)]\n    public int Id;\n    public string Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Running SpacetimeDB SDK Tests in Bash\nDESCRIPTION: Commands to execute the tests for the SpacetimeDB SDK. It includes options to run both Rust and C# modules, or to run them separately.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/modules/sdk-test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Will run both Rust/C# modules\ncargo test -p spacetimedb-sdk\n# Only Rust\ncargo test -p spacetimedb-sdk rust\n# Only C#\ncargo test -p spacetimedb-sdk csharp\n```\n\n----------------------------------------\n\nTITLE: Defining Tagged Enum Option Type in C#\nDESCRIPTION: Demonstrates how to define a tagged enum in C# using SpacetimeDB.Type attribute and TaggedEnum interface. This generates inherited records for Some and None variants that can be used with pattern matching.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Type]\npartial record Option<T> : SpacetimeDB.TaggedEnum<(T Some, Unit None)>;\n```\n\n----------------------------------------\n\nTITLE: Running SpaceTimeDB Integration Tests with Cargo\nDESCRIPTION: Command-line instructions for running the integration tests using cargo. Tests can be run for both language implementations together, or filtered to run only Rust or C# tests.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/modules/module-test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Will run both Rust/C# module\ncargo test -p spacetimedb-testing\n# Only Rust\ncargo test -p spacetimedb-testing rust\n# Only C#\ncargo test -p spacetimedb-testing csharp\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Test Tables in SQL for SpacetimeDB\nDESCRIPTION: This snippet creates two tables, 'table1' and 'table2', and inserts test data into them. It demonstrates table creation with various data types and constraints, as well as data insertion operations.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/standards/README.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE table1 (col1 INT PRIMARY KEY, col2 VARCHAR(50), col3 BOOLEAN);\n\nCREATE TABLE table2 (id INT PRIMARY KEY, name VARCHAR(50), value DECIMAL(10,2));\n\nINSERT INTO table1 (col1, col2, col3) VALUES (1, 'abc', true);\nINSERT INTO table1 (col1, col2, col3) VALUES (2, 'def', false);\nINSERT INTO table1 (col1, col2, col3) VALUES (3, 'ghi', true);\n\nINSERT INTO table2 (id, name, value) VALUES (1, 'Item1', 10.50);\nINSERT INTO table2 (id, name, value) VALUES (2, 'Item2', 20.75);\nINSERT INTO table2 (id, name, value) VALUES (3, 'Item3', 15.25);\n```\n\n----------------------------------------\n\nTITLE: Setting SpacetimeDB Version in PowerShell\nDESCRIPTION: This snippet demonstrates how to set and use a specific version of SpacetimeDB using the CLI commands.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nspacetime version use $stdbVersion\n\n# If stdbVersion is no longer set, list versions using the following command:\nspacetime version list\n```\n\n----------------------------------------\n\nTITLE: Performing JOIN Operations in SQL for SpacetimeDB\nDESCRIPTION: This snippet tests various types of JOIN operations between table1 and table2. It includes INNER JOIN, LEFT JOIN, and FULL OUTER JOIN, demonstrating the database's ability to combine data from multiple tables.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/standards/README.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT table1.col1, table1.col2, table2.name, table2.value\nFROM table1\nINNER JOIN table2 ON table1.col1 = table2.id;\n\nSELECT table1.col1, table1.col2, table2.name, table2.value\nFROM table1\nLEFT JOIN table2 ON table1.col1 = table2.id;\n\nSELECT table1.col1, table1.col2, table2.name, table2.value\nFROM table1\nFULL OUTER JOIN table2 ON table1.col1 = table2.id;\n```\n\n----------------------------------------\n\nTITLE: Running Specific Criterion Benchmarks for SpacetimeDB\nDESCRIPTION: Examples of running specific Criterion benchmarks for SpacetimeDB using regex patterns to select particular benchmark groups.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bench/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo bench -- 'stdb_raw/.*/insert_bulk'\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo bench -- 'mem/.*/unique'\n```\n\n----------------------------------------\n\nTITLE: Executing Subqueries and Complex Conditions in SQL for SpacetimeDB\nDESCRIPTION: This snippet tests the use of subqueries in WHERE and FROM clauses, as well as complex conditions using AND, OR, and IN operators. It demonstrates the database's ability to handle nested queries and complex logical conditions.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/standards/README.md#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table1 WHERE col1 IN (SELECT id FROM table2 WHERE value > 15);\n\nSELECT * FROM (SELECT id, name, value, ROW_NUMBER() OVER (ORDER BY value DESC) as row_num FROM table2) AS subquery WHERE row_num <= 2;\n\nSELECT * FROM table1 WHERE (col2 LIKE 'a%' OR col2 LIKE 'd%') AND col3 = true;\n```\n\n----------------------------------------\n\nTITLE: Generating Benchmark Reports for SpacetimeDB\nDESCRIPTION: Commands to generate formatted markdown reports for SpacetimeDB benchmarks, including options for comparing results between different branches.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bench/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench --bench generic --bench special -- --save-baseline current\ncargo run --bin summarize markdown-report current\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ncargo bench --bench generic --bench special -- --save-baseline base\ngit checkout high-octane-feature-branch\ncargo bench --bench generic --bench special -- --save-baseline current\ncargo run --bin summarize markdown-report current base\n```\n\n----------------------------------------\n\nTITLE: Performing UPDATE and DELETE Operations in SQL for SpacetimeDB\nDESCRIPTION: This snippet tests UPDATE and DELETE operations on the tables. It demonstrates the database's ability to modify existing data and remove records based on specified conditions.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/standards/README.md#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE table2 SET value = value * 1.1 WHERE id = 2;\n\nDELETE FROM table1 WHERE col3 = false;\n\nUPDATE table1 SET col2 = 'updated' WHERE col1 IN (SELECT id FROM table2 WHERE value < 15);\n```\n\n----------------------------------------\n\nTITLE: Generating Flamegraphs for SpacetimeDB Benchmarks on Linux\nDESCRIPTION: Command to generate flamegraphs for SpacetimeDB benchmarks on Linux using cargo-flamegraph, allowing selection of specific benchmarks and output paths.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bench/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./flamegraph.sh generic stdb_raw/mem/insert_bulk/location/multi_index/load=0/count=100 result.svg\n```\n\n----------------------------------------\n\nTITLE: Running Workload Benches for SpacetimeDB\nDESCRIPTION: Commands to run specific workload benches for SpacetimeDB directly outside of Criterion, simulating realistic game workloads.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bench/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --release --package spacetimedb-testing --test standalone_integration_test test_calling_bench_db_ia_loop -- --exact --nocapture\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --release --package spacetimedb-testing --test standalone_integration_test test_calling_bench_db_circles -- --exact --nocapture\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB on macOS/Linux\nDESCRIPTION: Single-line curl command to install SpacetimeDB on macOS or Linux systems using the official install script.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSf https://install.spacetimedb.com | sh\n```\n\n----------------------------------------\n\nTITLE: Running SpacetimeDB Benchmark Functions\nDESCRIPTION: Commands to execute specific benchmark functions in the keynote module including update_positions_by_collect and roundtrip tests.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/modules/keynote-benchmarks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspacetimedb-cli call keynote update_positions_by_collect\nspacetimedb-cli call keynote roundtrip\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB on Windows\nDESCRIPTION: PowerShell command to install SpacetimeDB on Windows systems using the official install script.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\niwr https://windows.spacetimedb.com -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Publishing the Keynote Benchmarks Module to SpacetimeDB\nDESCRIPTION: Command to publish the keynote module to SpacetimeDB with the create flag (-c) and path specification (-p). This will destroy any existing keynote database.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/modules/keynote-benchmarks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This will `DESTROY` the existing `keynote` database, so be careful! \nspacetimedb-cli publish keynote -c -p crates/keynote-benchmarks\n```\n\n----------------------------------------\n\nTITLE: Building SpacetimeDB from Source on macOS/Linux\nDESCRIPTION: Complete set of commands to build and install SpacetimeDB from source code on macOS or Linux, including rustup installation, repository cloning, and binary setup.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://sh.rustup.rs -sSf | sh\ngit clone https://github.com/clockworklabs/SpacetimeDB\ncd SpacetimeDB\ncargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli\n\nmkdir -p ~/.local/bin\nexport STDB_VERSION=\"$(./target/release/spacetimedb-cli --version | sed -n 's/.*spacetimedb tool version \\([0-9.]*\\);.*/\\1/p')\"\nmkdir -p ~/.local/share/spacetime/bin/$STDB_VERSION\n\ncp target/release/spacetimedb-update ~/.local/bin/spacetime\ncp target/release/spacetimedb-cli ~/.local/share/spacetime/bin/$STDB_VERSION\ncp target/release/spacetimedb-standalone ~/.local/share/spacetime/bin/$STDB_VERSION\n```\n\n----------------------------------------\n\nTITLE: Viewing SpacetimeDB Benchmark Results\nDESCRIPTION: Command to view the logs of the keynote module after running the benchmarks to see the results of initialization and any benchmark functions called.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/modules/keynote-benchmarks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# After running the `publish` to see the results of `init` \n# and any of the above commands:\nspacetimedb-cli logs keynote\n```\n\n----------------------------------------\n\nTITLE: Adding SpacetimeDB to PATH on macOS/Linux\nDESCRIPTION: Command to add SpacetimeDB to the system PATH by modifying shell configuration.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$HOME/.local/bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Running SpacetimeDB SDK Connection Tests\nDESCRIPTION: Command to execute the connection/disconnection tests for both Rust and C# implementations in the SpacetimeDB SDK test suite.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/modules/sdk-test-connect-disconnect/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Will run both Rust/C# modules\ncargo test -p spacetimedb-sdk connect\n```\n\n----------------------------------------\n\nTITLE: Setting SpacetimeDB Version\nDESCRIPTION: Commands to set and verify the installed SpacetimeDB version.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nspacetime version use $STDB_VERSION\n\n# If STDB_VERSION is not set anymore then you can use the following command to list your versions:\nspacetime version list\n```\n\n----------------------------------------\n\nTITLE: Executing Basic SELECT Queries in SQL for SpacetimeDB\nDESCRIPTION: This snippet demonstrates various SELECT queries, including simple selection, filtering with WHERE clause, sorting with ORDER BY, and limiting results with LIMIT. It tests basic SQL query functionality.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/standards/README.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table1;\n\nSELECT col1, col2 FROM table1 WHERE col3 = true;\n\nSELECT * FROM table2 ORDER BY value DESC;\n\nSELECT name, value FROM table2 WHERE value > 15 LIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB on Windows using PowerShell\nDESCRIPTION: This snippet creates necessary directories, installs SpacetimeDB binaries, and sets up the environment variables. It uses PowerShell commands to handle file operations and version management.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n# Create directories\n$stdbDir = \"$HOME\\AppData\\Local\\SpacetimeDB\"\n$stdbVersion = & \".\\target\\release\\spacetimedb-cli\" --version | Select-String -Pattern 'spacetimedb tool version ([0-9.]+);' | ForEach-Object { $_.Matches.Groups[1].Value }\nNew-Item -ItemType Directory -Path \"$stdbDir\\bin\\$stdbVersion\" -Force | Out-Null\n\n# Install the update binary\nCopy-Item \"target\\release\\spacetimedb-update.exe\" \"$stdbDir\\spacetime.exe\"\nCopy-Item \"target\\release\\spacetimedb-cli.exe\" \"$stdbDir\\bin\\$stdbVersion\\\"\nCopy-Item \"target\\release\\spacetimedb-standalone.exe\" \"$stdbDir\\bin\\$stdbVersion\\\"\n```\n\n----------------------------------------\n\nTITLE: Running the RawModuleDef Regeneration Script in Rust\nDESCRIPTION: Command to regenerate the Autogen folder containing the RawModuleDef implementation by running a Rust script from the CLI directory.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Runtime/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd ../../cli\ncargo run --example regen-csharp-moduledef\n```\n\n----------------------------------------\n\nTITLE: Adding SpacetimeDB to System Path on Windows\nDESCRIPTION: This snippet shows the directory path that should be added to the system PATH for SpacetimeDB to be accessible from any application.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n%USERPROFILE%\\AppData\\Local\\SpacetimeDB\n```\n\n----------------------------------------\n\nTITLE: Invalid Reducer Method Missing ReducerContext Parameter\nDESCRIPTION: Shows a reducer method that doesn't have the required ReducerContext parameter, which is mandatory for all reducers.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Reducer]\npublic static void TestReducerWithoutContext() { }\n```\n\n----------------------------------------\n\nTITLE: Installing SpacetimeDB on Windows using Git Bash\nDESCRIPTION: This snippet provides an alternative installation method using Git for Windows. It includes cloning the repository, building the CLI, creating directories, and installing binaries.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Clone SpacetimeDB\ngit clone https://github.com/clockworklabs/SpacetimeDB\n# Build and install the CLI\ncd SpacetimeDB\n# Build the CLI binaries - this takes a while on windows so go grab a coffee :)\ncargo build --locked --release -p spacetimedb-standalone -p spacetimedb-update -p spacetimedb-cli\n\n# Create directories\nexport STDB_VERSION=\"$(./target/release/spacetimedb-cli --version | sed -n 's/.*spacetimedb tool version \\([0-9.]*\\);.*/\\1/p')\"\nmkdir -p ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION\n\n# Install the update binary\ncp target/release/spacetimedb-update ~/AppData/Local/SpacetimeDB/spacetime\ncp target/release/spacetimedb-cli ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION\ncp target/release/spacetimedb-standalone ~/AppData/Local/SpacetimeDB/bin/$STDB_VERSION\n\n# Set the current version\nspacetime version use $STDB_VERSION\n```\n\n----------------------------------------\n\nTITLE: Invalid Reducer Method with Non-Void Return Type\nDESCRIPTION: Shows a reducer method that returns an integer instead of void, which is invalid. Reducer methods must return void.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Reducer]\npublic static int TestReducerReturnType(ReducerContext ctx) => 0;\n```\n\n----------------------------------------\n\nTITLE: Running Criterion Benchmarks for SpacetimeDB in Bash\nDESCRIPTION: Commands to run the Criterion benchmarks for SpacetimeDB. Includes options for running generic and special benchmarks, as well as enabling one million inserts or updates.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bench/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench --bench generic --bench special\n```\n\nLANGUAGE: bash\nCODE:\n```\nRUN_ONE_MILLION=true cargo bench --bench generic --bench special\n```\n\n----------------------------------------\n\nTITLE: Invalid Scheduled Table with Wrong Primary Key Type\nDESCRIPTION: Shows a scheduled table declaration with a primary key of incorrect type. Scheduled tables must have a primary key of type 'ulong'.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Table(\n    Name = \"TestScheduleWithWrongPrimaryKeyType\",\n    Scheduled = \"DummyScheduledReducer\",\n    ScheduledAt = nameof(ScheduleAtCorrectType)\n)]\n```\n\n----------------------------------------\n\nTITLE: Running Callgrind Benchmarks for SpacetimeDB using Docker\nDESCRIPTION: Command to run Callgrind benchmarks for SpacetimeDB using a Docker image. This script builds the Docker image and runs the Callgrind benchmarks inside it.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bench/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash callgrind-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Invalid ClientVisibilityFilter Field Declaration (Not Public Static Readonly)\nDESCRIPTION: This code demonstrates a field with the ClientVisibilityFilter attribute that violates the requirement of being declared as public static readonly. Filter fields with this attribute must follow strict declaration rules.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.ClientVisibilityFilter]\nprivate Filter MY_FILTER = new Filter.Sql(\"SELECT * FROM TestAutoIncNotInteger\");\n```\n\n----------------------------------------\n\nTITLE: Running Samply for Performance Profiling of SpacetimeDB\nDESCRIPTION: Command to use Samply for performance profiling of SpacetimeDB benchmarks, capturing perf data and viewing it in Firefox.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bench/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsamply record -r 10000000 cargo bench --bench=subscription --profile=profiling -- full-scan --exact --profile-time=30\n```\n\n----------------------------------------\n\nTITLE: Invalid Reducer Method with Reserved Prefix\nDESCRIPTION: This code shows a reducer method with a name starting with '__', which is a reserved prefix in SpacetimeDB. Methods with this prefix are not allowed to be declared as reducers.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.Reducer]\npublic static void __ReducerWithReservedPrefix(ReducerContext ctx) { }\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Instruments for SpacetimeDB Benchmarking on macOS\nDESCRIPTION: Command to use cargo-instruments for benchmarking SpacetimeDB on macOS, allowing selection of specific benchmarks and templates.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bench/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./instruments.sh time generic stdb_raw/mem/insert_bulk/location/multi_index/load=0/count=100\n```\n\n----------------------------------------\n\nTITLE: Invalid Index Attribute Without Columns\nDESCRIPTION: Shows an Index.BTree attribute that doesn't specify columns, which is required for index creation.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Index.BTree(Name = \"TestIndexWithoutColumns\")]\n```\n\n----------------------------------------\n\nTITLE: Generating Module Bindings for SpacetimeDB Test Client in Rust\nDESCRIPTION: This shell command generates Rust bindings for the SpacetimeDB test client. It creates a directory for the bindings and uses the spacetime CLI tool to generate the code based on the sdk-test-connect-disconnect module.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sdk/tests/connect_disconnect_client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p src/module_bindings\nspacetime generate --lang rust                                     \\\n    --out-dir src/module_bindings                                  \\\n    --project-path ../../../../modules/sdk-test-connect-disconnect\n```\n\n----------------------------------------\n\nTITLE: Invalid Index Attribute with Columns Parameter on Field\nDESCRIPTION: Shows an improper use of the Index.BTree attribute on a field with a Columns parameter, which is not allowed when the attribute is directly on a field.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Index.BTree(Name = \"TestUnexpectedColumns\", Columns = [\"UnexpectedColumn\"])]\npublic int SelfIndexingColumn;\n```\n\n----------------------------------------\n\nTITLE: Generating Module Bindings for SpacetimeDB SDK Test Client in Rust\nDESCRIPTION: This command generates the module bindings for the SpacetimeDB SDK test client. It uses the spacetime CLI tool to generate Rust bindings from the sdk-test module and places them in the src/module_bindings directory.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sdk/tests/test-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p src/module_bindings\nspacetime generate --lang rust --out-dir src/module_bindings --project-path ../../../../modules/sdk-test\n```\n\n----------------------------------------\n\nTITLE: Invalid Unique Field with Nullable Type\nDESCRIPTION: Shows a field with a [Unique] attribute applied to a nullable integer type, which is invalid. Unique fields must be equatable primitives.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[Unique]\npublic int? UniqueField;\n```\n\n----------------------------------------\n\nTITLE: Storing PropTest Failure Case Seed in proptest-regressions\nDESCRIPTION: A recorded seed for a PropTest failure case involving an overflow value of 2^64. The seed ensures this specific test case will be automatically re-run in future test executions.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/lib/proptest-regressions/address.txt#2025-04-22_snippet_0\n\nLANGUAGE: proptest-config\nCODE:\n```\ncc 4dc1661cd0b78ee7036f894d2c7cf52955f05e41bb0322095ec00edf9b6fca77 # shrinks to val = 18446744073709551616\n```\n\n----------------------------------------\n\nTITLE: Running Index Scan Performance Tests in SpacetimeDB\nDESCRIPTION: Command for executing the test_index_scans test in the SpacetimeDB testing package. This test is part of the standalone integration tests.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/modules/perf-test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p spacetimedb-testing test_index_scans\n```\n\n----------------------------------------\n\nTITLE: Invalid AutoInc Field with String Type\nDESCRIPTION: Shows a field with an [AutoInc] attribute applied to a string type, which is invalid. AutoInc fields must be of integer type.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[AutoInc]\npublic string IdentityField;\n```\n\n----------------------------------------\n\nTITLE: Basic SpacetimeDB Module Architecture Diagram\nDESCRIPTION: A text diagram illustrating the architecture of SpacetimeDB, showing the relationship between client applications and the database with module code.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    Client Application                          SpacetimeDB\n┌───────────────────────┐                ┌───────────────────────┐\n│                       │                │                       │\n│  ┌─────────────────┐  │    SQL Query   │  ┌─────────────────┐  │\n│  │ Subscribed Data │<─────────────────────│    Database     │  │\n│  └─────────────────┘  │                │  └─────────────────┘  │\n│           │           │                │           ^           │\n│           │           │                │           │           │\n│           v           │                │           v           │\n│  +─────────────────┐  │ call_reducer() │  ┌─────────────────┐  │\n│  │   Client Code   │─────────────────────>│   Module Code   │  │\n│  └─────────────────┘  │                │  └─────────────────┘  │\n│                       │                │                       │\n└───────────────────────┘                └───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Invalid AutoInc Field with Float Type\nDESCRIPTION: Shows a field with an [AutoInc] attribute applied to a float type, which is invalid. AutoInc fields must be of integer type.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[AutoInc]\npublic float AutoIncField;\n```\n\n----------------------------------------\n\nTITLE: Invalid Table Definition with TaggedEnum\nDESCRIPTION: Shows a table declaration that inherits from TaggedEnum, which is not allowed in SpacetimeDB tables.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Table]\npublic partial record TestTableTaggedEnum : SpacetimeDB.TaggedEnum<(int X, int Y)> { }\n```\n\n----------------------------------------\n\nTITLE: Error: Generic Type Parameters in SpacetimeDB Types\nDESCRIPTION: Demonstrates the use of generic type parameters in a struct decorated with [SpacetimeDB.Type], which is not supported in SpacetimeDB types.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Type.verified.txt#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Type]\npublic partial struct TestTypeParams<T>\n{\n\n```\n\n----------------------------------------\n\nTITLE: Invalid Index Attribute with Empty Columns Array\nDESCRIPTION: Shows an Index.BTree attribute with an empty Columns array, which is invalid as at least one column must be specified.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Index.BTree(Name = \"TestIndexWithEmptyColumns\", Columns = [])]\n```\n\n----------------------------------------\n\nTITLE: Error: Instance Fields in SpacetimeDB Tagged Enums (Second Example)\nDESCRIPTION: Another example of an instance field declaration that is not allowed in SpacetimeDB tagged enums.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Type.verified.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n{\n    public int ForbiddenField;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Index Attribute with Unknown Column\nDESCRIPTION: Shows an Index.BTree attribute that references a column that doesn't exist in the table structure.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Index.BTree(Name = \"TestUnknownColumns\", Columns = [\"UnknownColumn\"])]\n```\n\n----------------------------------------\n\nTITLE: Error: Unsupported Types in SpacetimeDB\nDESCRIPTION: Shows declarations of fields using types that are not supported by SpacetimeDB, including DateTime, Exception, and custom unresolved types.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Type.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{\n    public DateTime UnsupportedSpecialType;\n    public Exception UnsupportedSystemType;\n    public UnresolvedType UnresolvedType;\n    public LocalEnum UnsupportedEnum;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Scheduled Table Without Primary Key\nDESCRIPTION: Shows a scheduled table declaration that's missing a required primary key of type 'ulong'.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Table(\n    Name = \"TestScheduleWithoutPrimaryKey\",\n    Scheduled = \"DummyScheduledReducer\",\n    ScheduledAt = nameof(ScheduleAtCorrectType)\n)]\n```\n\n----------------------------------------\n\nTITLE: Error: Enum with Too Many Variants in SpacetimeDB\nDESCRIPTION: Demonstrates an enum declaration that exceeds the maximum allowed number of variants (256) in SpacetimeDB enums.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Type.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n{\n    EnumVariant256,\n    EnumVariant257,\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Scheduled Table Without ScheduledAt Parameter\nDESCRIPTION: Shows a scheduled table declaration missing the required ScheduledAt parameter to specify which field indicates scheduling time.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Table(Name = \"TestScheduleWithoutScheduleAt\", Scheduled = \"DummyScheduledReducer\")]\n```\n\n----------------------------------------\n\nTITLE: Error: Enum with Explicit Values in SpacetimeDB\nDESCRIPTION: Shows an enum declaration with explicit values, which violates SpacetimeDB constraints that don't allow enum variants to have explicit values assigned.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Type.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n    EnumVariant1 = 1,\n    EnumVariant2 = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Scheduled Table with Wrong ScheduleAt Type\nDESCRIPTION: Shows a scheduled table declaration where the ScheduledAt field is of incorrect type.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Table(\n    Name = \"TestScheduleWithWrongScheduleAtType\",\n    Scheduled = \"DummyScheduledReducer\",\n    ScheduledAt = nameof(ScheduleAtWrongType)\n)]\n```\n\n----------------------------------------\n\nTITLE: Module Registration and Filter Configuration\nDESCRIPTION: Demonstrates registration of tables and client visibility filters with protection level and type conversion issues.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/ExtraCompilationErrors.verified.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nSpacetimeDB.Internal.Module.RegisterTable<global::TestUniqueNotEquatable, SpacetimeDB.Internal.TableHandles.TestUniqueNotEquatable>();\nSpacetimeDB.Internal.Module.RegisterClientVisibilityFilter(global::Module.MY_FILTER);\nSpacetimeDB.Internal.Module.RegisterClientVisibilityFilter(global::Module.MY_FOURTH_FILTER);\n```\n\n----------------------------------------\n\nTITLE: Invalid Scheduled Table with Missing ScheduledAt Field\nDESCRIPTION: Shows a scheduled table declaration that references a non-existent field for the ScheduledAt parameter.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Table(\n    Name = \"TestScheduleWithMissingScheduleAtField\",\n    Scheduled = \"DummyScheduledReducer\",\n    ScheduledAt = \"MissingField\"\n)]\n```\n\n----------------------------------------\n\nTITLE: Generic Interface Implementation Error\nDESCRIPTION: Shows incorrect implementation of IEquatable interface with generic type parameters.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/ExtraCompilationErrors.verified.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npartial struct TestTypeParams<T>  : System.IEquatable<TestTypeParams>, SpacetimeDB.BSATN.IStructuralReadWrite {\n```\n\n----------------------------------------\n\nTITLE: Invalid Reducer Method with Reserved Prefix\nDESCRIPTION: Shows a reducer method with a name starting with 'On', which is a reserved prefix in SpacetimeDB.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.Reducer]\npublic static void OnReducerWithReservedPrefix(ReducerContext ctx) { }\n```\n\n----------------------------------------\n\nTITLE: Testing Array of Maps Type Serialization in SpaceTimeDB (Rust)\nDESCRIPTION: A test case for SpaceTimeDB's type system showing an array of maps structure. The test features a ProductType containing an Array of Maps with U64 keys and Boolean values, demonstrating SpaceTimeDB's ability to handle complex nested collection types.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/table/proptest-regressions/table.txt#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ncc 7f478c4dd0f24e715a74949c6d06af8ca2b4c8b82fae4f53c953a2b323cff851 # shrinks to (ty, val) = (ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Builtin(Array(ArrayType { elem_ty: Builtin(Map(MapType { key_ty: Builtin(U64), ty: Builtin(Bool) })) })) }] }, ProductValue { elements: [Array([{U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false), U64(5): Bool(false), U64(6): Bool(false), U64(7): Bool(false), U64(8): Bool(false), U64(9): Bool(false), U64(10): Bool(false), U64(11): Bool(false), U64(12): Bool(false), U64(13): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false), U64(5): Bool(false), U64(6): Bool(false), U64(7): Bool(false), U64(8): Bool(false), U64(9): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false), U64(5): Bool(false), U64(6): Bool(false), U64(7): Bool(false), U64(8): Bool(false), U64(9): Bool(false), U64(10): Bool(false), U64(11): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false), U64(5): Bool(false), U64(6): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false), U64(5): Bool(false), U64(6): Bool(false), U64(7): Bool(false), U64(8): Bool(false), U64(9): Bool(false), U64(10): Bool(false), U64(11): Bool(false), U64(12): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false), U64(5): Bool(false), U64(6): Bool(false), U64(7): Bool(false), U64(8): Bool(false), U64(9): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false), U64(5): Bool(false), U64(6): Bool(false), U64(7): Bool(false), U64(8): Bool(false), U64(9): Bool(false), U64(10): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false), U64(5): Bool(false), U64(6): Bool(false), U64(7): Bool(false), U64(8): Bool(false), U64(9): Bool(false), U64(10): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false), U64(2): Bool(false), U64(3): Bool(false), U64(4): Bool(false), U64(5): Bool(false)}, {U64(0): Bool(false), U64(1): Bool(false)}])] })\n```\n\n----------------------------------------\n\nTITLE: Invalid ClientVisibilityFilter Field (Missing Readonly)\nDESCRIPTION: This code shows a field marked with ClientVisibilityFilter attribute that is public and static but missing the required readonly modifier. All filter fields must be declared as public static readonly.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.ClientVisibilityFilter]\npublic static Filter MY_SECOND_FILTER = new Filter.Sql(\"SELECT * FROM TestAutoIncNotInteger\");\n```\n\n----------------------------------------\n\nTITLE: Testing Nested Map Type Serialization in SpaceTimeDB (Rust)\nDESCRIPTION: A test case for SpaceTimeDB's type system showing a complex nested map structure. The case features a ProductType containing a nested Map structure with U8 keys mapping to another Map with I32 keys and F32 values, likely from property-based testing.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/table/proptest-regressions/table.txt#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncc 66d99531b8e513d0fd558f492f708d110e1e117dfc7f3f42188bcc57c23bb89e # shrinks to (ty, val) = (ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Builtin(Map(MapType { key_ty: Builtin(U8), ty: Builtin(Map(MapType { key_ty: Builtin(I32), ty: Builtin(F32) })) })) }] }, ProductValue { elements: [Map({U8(0): Map({I32(-4): F32(Total(0.0)), I32(-3): F32(Total(0.0)), I32(-2): F32(Total(-0.0)), I32(-1): F32(Total(-0.0)), I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0)), I32(3): F32(Total(0.0))}), U8(1): Map({I32(-5): F32(Total(0.0)), I32(-4): F32(Total(0.0)), I32(-3): F32(Total(0.0)), I32(-2): F32(Total(0.0)), I32(-1): F32(Total(-0.0)), I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0)), I32(3): F32(Total(0.0)), I32(4): F32(Total(0.0)), I32(5): F32(Total(0.0)), I32(6): F32(Total(0.0)), I32(7): F32(Total(0.0))}), U8(2): Map({I32(-3): F32(Total(-0.0)), I32(-2): F32(Total(0.0)), I32(-1): F32(Total(0.0)), I32(0): F32(Total(-0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0)), I32(3): F32(Total(0.0))}), U8(3): Map({I32(-10): F32(Total(0.0)), I32(-9): F32(Total(0.0)), I32(-8): F32(Total(-0.0)), I32(-7): F32(Total(0.0)), I32(-6): F32(Total(0.0)), I32(-5): F32(Total(0.0)), I32(-4): F32(Total(0.0)), I32(-3): F32(Total(0.0)), I32(-2): F32(Total(0.0)), I32(-1): F32(Total(0.0)), I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0))}), U8(4): Map({I32(-7): F32(Total(0.0)), I32(-6): F32(Total(0.0)), I32(-5): F32(Total(0.0)), I32(-4): F32(Total(0.0)), I32(-3): F32(Total(0.0)), I32(-2): F32(Total(0.0)), I32(-1): F32(Total(0.0)), I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0)), I32(3): F32(Total(0.0))}), U8(5): Map({I32(-9): F32(Total(0.0)), I32(-8): F32(Total(0.0)), I32(-7): F32(Total(0.0)), I32(-6): F32(Total(0.0)), I32(-5): F32(Total(0.0)), I32(-4): F32(Total(0.0)), I32(-3): F32(Total(0.0)), I32(-2): F32(Total(0.0)), I32(-1): F32(Total(0.0)), I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0)), I32(3): F32(Total(0.0)), I32(4): F32(Total(0.0)), I32(5): F32(Total(0.0))}), U8(6): Map({I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0))}), U8(7): Map({I32(-4): F32(Total(0.0)), I32(-3): F32(Total(0.0)), I32(-2): F32(Total(0.0)), I32(-1): F32(Total(0.0)), I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(-0.0)), I32(3): F32(Total(0.0))}), U8(8): Map({I32(-7): F32(Total(0.0)), I32(-6): F32(Total(-0.0)), I32(-5): F32(Total(0.0)), I32(-4): F32(Total(0.0)), I32(-3): F32(Total(0.0)), I32(-2): F32(Total(0.0)), I32(-1): F32(Total(0.0)), I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0)), I32(3): F32(Total(0.0)), I32(4): F32(Total(0.0)), I32(5): F32(Total(0.0)), I32(6): F32(Total(-0.0)), I32(7): F32(Total(0.0))}), U8(9): Map({I32(-1349171619): F32(Total(418648100.0)), I32(-665792478): F32(Total(-5.3081414e23)), I32(-1): F32(Total(0.0)), I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0)), I32(3): F32(Total(0.0)), I32(5): F32(Total(-0.0)), I32(906732021): F32(Total(1.952517e16)), I32(1965197035): F32(Total(1020.84216))}), U8(11): Map({I32(-7): F32(Total(0.0)), I32(-6): F32(Total(0.0)), I32(-5): F32(Total(0.0)), I32(-4): F32(Total(0.0)), I32(-3): F32(Total(0.0)), I32(-2): F32(Total(0.0)), I32(-1): F32(Total(0.0)), I32(0): F32(Total(0.0)), I32(1): F32(Total(0.0)), I32(2): F32(Total(0.0)), I32(3): F32(Total(0.0)), I32(4): F32(Total(0.0)), I32(5): F32(Total(0.0)), I32(6): F32(Total(0.0))})})] })\n```\n\n----------------------------------------\n\nTITLE: Invalid ClientVisibilityFilter with Wrong Type\nDESCRIPTION: This code shows a correctly declared public static readonly field with the ClientVisibilityFilter attribute, but it uses the wrong type (string instead of SpacetimeDB.Filter). Filter fields must be of type SpacetimeDB.Filter.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Module.verified.txt#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n[SpacetimeDB.ClientVisibilityFilter]\npublic static readonly string MY_THIRD_FILTER = \"SELECT * FROM TestAutoIncNotInteger\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Proptest Seeds in YAML\nDESCRIPTION: This YAML configuration stores seeds for proptest failure cases. It is automatically read by proptest to re-run specific failure scenarios before generating new test cases. The file should be checked into source control to maintain a history of known failure cases.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/table/proptest-regressions/table.txt#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Seeds for failure cases proptest has generated in the past. It is\n# automatically read and these particular cases re-run before any\n# novel cases are generated.\n#\n# It is recommended to check this file in to source control so that\n```\n\n----------------------------------------\n\nTITLE: Error: Instance Fields in SpacetimeDB Tagged Enums\nDESCRIPTION: Shows declarations of instance fields in a tagged enum, which is not permitted by SpacetimeDB. Tagged enums have specific restrictions on field declarations.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/Type.verified.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n{\n    public int ForbiddenTaggedEnumField;\n}\n```\n\n----------------------------------------\n\nTITLE: Storing PropTest Failure Cases Seeds in TOML\nDESCRIPTION: Historical PropTest failure cases for algebraic type system testing, focusing on ProductType and SumType combinations with various primitive types like Bool, String, and numeric types. These cases are used for regression testing to ensure consistent behavior.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/table/proptest-regressions/row_hash.txt#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ncc 3e55b94365a0ae7698bb9e89259f3f5b84227b1c5ba2f0737be0360f55256c26 # shrinks to (ty, val) = (ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Sum(SumType { variants: [SumTypeVariant { name: None, algebraic_type: Builtin(Bool) }] }) }] }, ProductValue { elements: [Sum(SumValue { tag: 0, value: Bool(false) })] })\ncc aedcfc0fa45005cb11fa8b47f668a8b68c99adadfb50fdc6219840aa8ffd83f6 # shrinks to (ty, val) = (ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Sum(SumType { variants: [SumTypeVariant { name: None, algebraic_type: Builtin(I32) }, SumTypeVariant { name: None, algebraic_type: Builtin(F64) }, SumTypeVariant { name: None, algebraic_type: Builtin(String) }, SumTypeVariant { name: None, algebraic_type: Builtin(U16) }, SumTypeVariant { name: None, algebraic_type: Builtin(U16) }, SumTypeVariant { name: None, algebraic_type: Builtin(String) }, SumTypeVariant { name: None, algebraic_type: Builtin(Bool) }, SumTypeVariant { name: None, algebraic_type: Builtin(I16) }, SumTypeVariant { name: None, algebraic_type: Builtin(I16) }, SumTypeVariant { name: None, algebraic_type: Builtin(I64) }, SumTypeVariant { name: None, algebraic_type: Builtin(I128) }, SumTypeVariant { name: None, algebraic_type: Builtin(U64) }] }) }] }, ProductValue { elements: [Sum(SumValue { tag: 2, value: String(\"יּ/Ⱥ🂠છrÔ\") })] })\n```\n\n----------------------------------------\n\nTITLE: Missing Type Resolution Error in C#\nDESCRIPTION: Demonstrates an error where UnresolvedType cannot be found in the current context. This indicates a missing using directive or assembly reference.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/ExtraCompilationErrors.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic Exception UnsupportedSystemType;\npublic UnresolvedType UnresolvedType;\npublic LocalEnum UnsupportedEnum;\n```\n\n----------------------------------------\n\nTITLE: PropTest Seed Configuration for ProductType and ProductValue Testing\nDESCRIPTION: A PropTest seed configuration entry that preserves a complex test case involving nested ProductType and ProductValue structures with various data types including integers, floats, strings, and arrays.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/table/proptest-regressions/read_column.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc 9a8ba470c98263e7b6871ca4079acd30e347b2d4532f5a481aae7eb78e6f3994 # shrinks to (ty, val) = (ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Product(ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Product(ProductType { elements: [] }) }, ProductTypeElement { name: None, algebraic_type: Builtin(U32) }, ProductTypeElement { name: None, algebraic_type: Builtin(U16) }, ProductTypeElement { name: None, algebraic_type: Product(ProductType { elements: [] }) }, ProductTypeElement { name: None, algebraic_type: Builtin(U128) }, ProductTypeElement { name: None, algebraic_type: Builtin(U16) }, ProductTypeElement { name: None, algebraic_type: Builtin(I8) }, ProductTypeElement { name: None, algebraic_type: Product(ProductType { elements: [] }) }, ProductTypeElement { name: None, algebraic_type: Builtin(F32) }, ProductTypeElement { name: None, algebraic_type: Builtin(String) }] }) }, ProductTypeElement { name: None, algebraic_type: Builtin(U8) }, ProductTypeElement { name: None, algebraic_type: Builtin(Array(ArrayType { elem_ty: Builtin(U32) })) }, ProductTypeElement { name: None, algebraic_type: Builtin(Array(ArrayType { elem_ty: Builtin(String) })) }, ProductTypeElement { name: None, algebraic_type: Builtin(U32) }] }, ProductValue { elements: [Product(ProductValue { elements: [Product(ProductValue { elements: [] }), U32(0), U16(0), Product(ProductValue { elements: [] }), U128(13840125084752990830451071514702880), U16(45599), I8(52), Product(ProductValue { elements: [] }), F32(Total(2.022854e37)), String(\"֎𞹹PȺM?𞅏.{<B.🕴'.ȺwIﬖn<\\\"{🮪🕴``<�𝒞%ⁱ\")] }), U8(110), Array([2056746203, 181477477, 526438060, 4180078969, 974951910, 3532798473, 1277693402, 1404482362, 1853186792, 342656873]), Array([\"?\\\\%^ଢ଼\", \"ຄ\", \"מּ\"]), U32(247955447)] })\n```\n\n----------------------------------------\n\nTITLE: ClientVisibilityFilter Usage Warning in SpacetimeDB\nDESCRIPTION: Shows usage of SpacetimeDB.ClientVisibilityFilter attribute which is marked as experimental and may be subject to change or removal.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/ExtraCompilationErrors.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[SpacetimeDB.ClientVisibilityFilter]\npublic static readonly Filter MY_FOURTH_FILTER = new Filter.Sql(\n```\n\n----------------------------------------\n\nTITLE: PropTest Failure Case Seed Declaration for SpacetimeDB\nDESCRIPTION: A PropTest seed that preserves a complex failure case involving nested data structures including arrays, primitive types, and custom product values. This ensures consistent testing of this specific edge case.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/table/proptest-regressions/btree_index.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc 6d64f4cbc7b9419bb398ea63a792a77e265650c592e74729d247b16de2f7f17b # shrinks to ((cols, pv), ptr) = (([ColId(0)], ProductValue { elements: [Array([]), Array([]), I128(0), Bool(false), Sum(SumValue { tag: 0, value: F64(Total(0.0)) }), Product(ProductValue { elements: [Bool(false), U8(0), I128(0), U32(0), Sum(SumValue { tag: 0, value: U8(0) }), U8(0), U32(215254127), Product(ProductValue { elements: [] })] }), I128(39831157966956966676235972844869827525), String(\"$ኽ'{cCᠸ🛵`=𑍌:.1¥N𑌜Iﹳ\\\"9.zලC'נּ`\"), Array([7152110280299272705, 11681398356968567052, 1089317074085656246]), I16(-26517), Map({}), Map({I8(-125): U64(8656771766735343889), I8(-123): U64(11354150614744344657), I8(-109): U64(6824489582432753730), I8(-76): U64(13794281125277408796), I8(-73): U64(15475706408731022087), I8(-64): U64(14535941231843587119), I8(-63): U64(14230060952189702592), I8(-44): U64(7088265520780061145), I8(-1): U64(7685767798006742171), I8(24): U64(15400215746525807156), I8(28): U64(1665061385205215140), I8(59): U64(1530056886806704170), I8(67): U64(11242987644565198574), I8(92): U64(5588764734416174352)})] }), RowPointer(r: 0, pi: 338095043233, po: 58264, so: 0))\n```\n\n----------------------------------------\n\nTITLE: Null Reference Warning in Field Access\nDESCRIPTION: Demonstrates potential null reference issues when accessing Field property without null checking.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/bindings-csharp/Codegen.Tests/fixtures/diag/snapshots/ExtraCompilationErrors.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nreturn Field.GetHashCode();\n\nreturn Field.Equals(that.Field);\n```\n\n----------------------------------------\n\nTITLE: Registering a PropTest Seed for Complex Type Testing\nDESCRIPTION: A seed record for a PropTest failure case involving nested product and sum types. This records a test case with a product type containing a boolean and a sum type, paired with corresponding values.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/table/proptest-regressions/bflatn_to.txt#2025-04-22_snippet_0\n\nLANGUAGE: proptest-seed\nCODE:\n```\ncc 88a42f843e12c460bd3b03b90c3ca02a96a9a632ab8a3e9ffff462f50282ee99 # shrinks to (ty, val) = (ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Builtin(Bool) }, ProductTypeElement { name: None, algebraic_type: Sum(SumType { variants: [SumTypeVariant { name: None, algebraic_type: Builtin(I32) }, SumTypeVariant { name: None, algebraic_type: Builtin(I8) }] }) }] }, ProductValue { elements: [Bool(false), Sum(SumValue { tag: 0, value: I32(0) })] })\n```\n\n----------------------------------------\n\nTITLE: Selecting with AS Clause in SQL\nDESCRIPTION: This SQL query attempts to use an AS clause with multiple columns. However, this syntax results in an error in both PostgreSQL and SQLite.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * AS ( C , D ) FROM TABLE_E051_07_01_01\n```\n\n----------------------------------------\n\nTITLE: Configuring PropTest Seed for SpacetimeDB Typespace Testing\nDESCRIPTION: This configuration specifies a seed for a PropTest failure case involving a Typespace with multiple Bool types and a nested Product type. It ensures this specific case is re-tested in future runs.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sats/proptest-regressions/typespace.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc 9b3c83dd8794aa57dc9f2a3dd07111510ab1c537a23d6cdbcaa6d8dda3445c4c # shrinks to typespace = Typespace { types: [Builtin(Bool), Builtin(Bool), Builtin(Bool), Builtin(Bool), Product(ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Product(ProductType { elements: [] }) }] })] }\n```\n\n----------------------------------------\n\nTITLE: Casting TIME to TIMESTAMP in SQL\nDESCRIPTION: This SQL query attempts to cast a TIME value to a TIMESTAMP. This operation fails in PostgreSQL due to the lack of a timezone, while SQLite produces an incorrect result.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CAST ( CAST ( '01:02:03' AS TIME ) AS TIMESTAMP )\n```\n\n----------------------------------------\n\nTITLE: Proptest Seeds Configuration for SpacetimeDB Testing\nDESCRIPTION: Configuration file that stores seeds for test failure cases generated by proptest. Contains a specific failure case involving a Typespace with Boolean types and a ProductType structure, allowing consistent reproduction of the test case across different environments.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/schema/proptest-regressions/type_for_generate.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncc 50cf163ac81228385b27f96ba1801355e39bc722a937a0cf6ec0d4b27d23ef14 # shrinks to t = Typespace { types: [Bool, Bool, Bool, Product(ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Bool }] }), Bool] }\n```\n\n----------------------------------------\n\nTITLE: Configuring PropTest Seed for SpacetimeDB Failure Case\nDESCRIPTION: This snippet defines a seed for a specific failure case in PropTest for SpacetimeDB. It includes a hexadecimal identifier and a comment describing the shrinkage condition for the test case.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sats/proptest-regressions/timestamp.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc 9260b4651caa8f40a8bad964329b762b19e6c6d4acf56702caf6f4f160184a5d # shrinks to micros = 910692730085477581\n```\n\n----------------------------------------\n\nTITLE: Using CASE with Multiple WHEN Conditions in SQL\nDESCRIPTION: This SQL query attempts to use a CASE statement with multiple WHEN conditions in a single clause. This syntax results in an error in both PostgreSQL and SQLite.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CASE 0 WHEN 2 , 2 THEN 1 END\n```\n\n----------------------------------------\n\nTITLE: Selecting CURRENT_TIME in SQL\nDESCRIPTION: This SQL query selects the CURRENT_TIME. However, CURRENT_TIME and the timetz type are marked as \"Don't use EVER\" by PostgreSQL documentation.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CURRENT_TIME\n```\n\n----------------------------------------\n\nTITLE: Creating Table with CHAR VARYING in SQL\nDESCRIPTION: This SQL statement attempts to create a table with a CHAR VARYING column. However, this syntax is not implemented in either PostgreSQL or SQLite.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE TABLE_E021_02_01_02 ( A CHAR VARING ( 8 CHARACTERS ) )\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with CHAR(8 CHARACTERS/OCTETS) in SQL\nDESCRIPTION: These SQL statements attempt to create tables with CHAR columns specified in CHARACTERS or OCTETS. However, this feature is not implemented in either PostgreSQL or SQLite.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sqltest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE TABLE_E021_01_01_02 ( A CHAR ( 8 CHARACTERS ) )\nCREATE TABLE TABLE_E021_01_01_02 ( A CHAR ( 8 OCTETS ) )\n```\n\n----------------------------------------\n\nTITLE: PropTest Seeds Configuration for SpacetimeDB Failure Cases\nDESCRIPTION: Configuration that tracks specific seeds for proptest failure cases. These seeds represent previously encountered test failures that will be automatically re-run before generating new test cases, ensuring regressions are detected.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/primitives/proptest-regressions/col_list.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Seeds for failure cases proptest has generated in the past. It is\n# automatically read and these particular cases re-run before any\n# novel cases are generated.\n#\n# It is recommended to check this file in to source control so that\n# everyone who runs the test benefits from these saved cases.\ncc 70b4e531ebb215f2a8efd7d316970aa75d0ec8d555411bd73d1c63c33d8ea1ed # shrinks to cols = [ColId(19), ColId(0)]\ncc 4f5950efc2ad78c3b31cc3f50158d88c10da3229fabdca6ce3e6ceab665e19c8 # shrinks to cols = [ColId(39), ColId(39)]\n```\n\n----------------------------------------\n\nTITLE: Storing PropTest Failure Cases for SpacetimeDB Testing\nDESCRIPTION: Configuration entry for PropTest that preserves a previously generated failure case. The file records a test case that failed with specific input values (w0 = 0, w1 = 1) along with its hash to ensure the case is consistently retested.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/lib/proptest-regressions/identity.txt#2025-04-22_snippet_0\n\nLANGUAGE: proptest-config\nCODE:\n```\ncc 28ebdabf28ac09f38e0e0ddd728d32273f0dcffd43fa53bf1eaa8a01d1b38d90 # shrinks to w0 = 0, w1 = 1\n```\n\n----------------------------------------\n\nTITLE: Proptest Failure Case Seed Configuration in SpacetimeDB\nDESCRIPTION: This snippet contains a proptest seed configuration that records a specific failure case. It stores a seed hash (d098ce789585509a02ec9ebca8809bb0515e306ecdcbf4d7f883b571ff56b919) along with a comment indicating this test case shrinks to an input vector containing two values of 42.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/lib/proptest-regressions/db/column_ordering.txt#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ncc d098ce789585509a02ec9ebca8809bb0515e306ecdcbf4d7f883b571ff56b919 # shrinks to v = [42, 42]\n```\n\n----------------------------------------\n\nTITLE: PropTest Failure Seeds Configuration\nDESCRIPTION: Collection of PropTest failure cases with their corresponding hashes and mask values. Each line starts with 'cc' followed by a hex hash and a comment indicating the mask value that caused the failure.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/commitlog/proptest-regressions/commit.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc 99379dfa7ddc8e9547aef6261c7ed937bd6d100950ceab6dfb3b2c819d5e5eb2 # shrinks to mask = 147\ncc d7996990b19364fdd507c75b6eab42c966200a9a87c1cf20b0d525e943707028 # shrinks to mask = 0\ncc 90f9c1e55a9e1a0b6239a493778d94a99c483a96b142214ff068d08a59587474 # shrinks to mask = 234\ncc d98894bc4f25542121d91f3022916c5e140fea25834dde209a001232a7a3a122 # shrinks to mask = 54\ncc 893c2bb61cc7c758ac3b6f36485ee8789e6ed6f92ecc531ca9622e9b0e23a5d0 # shrinks to mask = 183\ncc ca54db4fcdc0af1fe3c039f58b43b6f51c065120851261bdd495c8e0afed60bd # shrinks to mask = 10\ncc 3dc841d9145fa0f6abec7fbb37fec26d47c223b00d59cf2f67ad9ee79fcab728 # shrinks to mask = 166\n```\n\n----------------------------------------\n\nTITLE: Building BSATN Specification with Make\nDESCRIPTION: Shell command to build the BSATN specification HTML document using Make. This command generates the spec.html file.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/docs/bsatn/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake spec.html\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Message in Markdown\nDESCRIPTION: Uses Markdown syntax to display a prominent warning message about the internal and unstable nature of the crate.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/sats/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n> ⚠️ **Internal Crate** ⚠️\\n>\\n> This crate is intended for internal use only. It is **not** stable and may change without notice.\n```\n\n----------------------------------------\n\nTITLE: PropTest Failure Case Seed Configuration\nDESCRIPTION: A saved PropTest failure case hash with associated test values, including a ProductType with SumType variants and ProductValue elements. The seed helps reproduce specific test scenarios that previously caused failures.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/table/proptest-regressions/static_bsatn_validator.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncc a6756c136abdcebcb9502aafb473f334ddff07a00500f58527f1d0f9469b3dbf # shrinks to (ty, val) = (ProductType { elements: [ProductTypeElement { name: None, algebraic_type: Sum(SumType { variants: [SumTypeVariant { name: Some(\"variant_0\"), algebraic_type: U8 }] }) }, ProductTypeElement { name: None, algebraic_type: Bool }] }, ProductValue { elements: [Sum(SumValue { tag: 0, value: U8(2) }), Bool(false)] })\n```\n\n----------------------------------------\n\nTITLE: Defining PropTest Failure Case Seed\nDESCRIPTION: This snippet defines a seed for a specific failure case in PropTest. It includes a hash value and possibly represents a test case involving RowHash and RowPointer with both set to 0.\nSOURCE: https://github.com/clockworklabs/spacetimedb/blob/master/crates/table/proptest-regressions/pointer_map.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc 14fb129e6672970b5e734edccc7ded859b78f3d46f5867ee998df9333cc69cef # shrinks to (hash, ptr) = (RowHash(0), RowPointer(0))\n```"
  }
]